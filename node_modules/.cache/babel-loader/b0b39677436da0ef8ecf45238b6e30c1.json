{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.last-index-of.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport { Engine } from \"../engine.js\";\n\nfunction transformTextureUrl(url) {\n  var excludeFn = function excludeFn(entry) {\n    var strRegExPattern = \"\\\\b\" + entry + \"\\\\b\";\n    return url && (url === entry || url.match(new RegExp(strRegExPattern, \"g\")));\n  };\n\n  if (this._excludedCompressedTextures && this._excludedCompressedTextures.some(excludeFn)) {\n    return url;\n  }\n\n  var lastDot = url.lastIndexOf(\".\");\n  var lastQuestionMark = url.lastIndexOf(\"?\");\n  var querystring = lastQuestionMark > -1 ? url.substring(lastQuestionMark, url.length) : \"\";\n  return (lastDot > -1 ? url.substring(0, lastDot) : url) + this._textureFormatInUse + querystring;\n}\n\nObject.defineProperty(Engine.prototype, \"texturesSupported\", {\n  get: function get() {\n    // Intelligently add supported compressed formats in order to check for.\n    // Check for ASTC support first as it is most powerful and to be very cross platform.\n    // Next PVRTC & DXT, which are probably superior to ETC1/2.\n    // Likely no hardware which supports both PVR & DXT, so order matters little.\n    // ETC2 is newer and handles ETC1 (no alpha capability), so check for first.\n    var texturesSupported = new Array();\n\n    if (this._caps.astc) {\n      texturesSupported.push(\"-astc.ktx\");\n    }\n\n    if (this._caps.s3tc) {\n      texturesSupported.push(\"-dxt.ktx\");\n    }\n\n    if (this._caps.pvrtc) {\n      texturesSupported.push(\"-pvrtc.ktx\");\n    }\n\n    if (this._caps.etc2) {\n      texturesSupported.push(\"-etc2.ktx\");\n    }\n\n    if (this._caps.etc1) {\n      texturesSupported.push(\"-etc1.ktx\");\n    }\n\n    return texturesSupported;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Engine.prototype, \"textureFormatInUse\", {\n  get: function get() {\n    return this._textureFormatInUse || null;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nEngine.prototype.setCompressedTextureExclusions = function (skippedFiles) {\n  this._excludedCompressedTextures = skippedFiles;\n};\n\nEngine.prototype.setTextureFormatToUse = function (formatsAvailable) {\n  var texturesSupported = this.texturesSupported;\n\n  for (var i = 0, len1 = texturesSupported.length; i < len1; i++) {\n    for (var j = 0, len2 = formatsAvailable.length; j < len2; j++) {\n      if (texturesSupported[i] === formatsAvailable[j].toLowerCase()) {\n        this._transformTextureUrl = transformTextureUrl.bind(this);\n        return this._textureFormatInUse = texturesSupported[i];\n      }\n    }\n  } // actively set format to nothing, to allow this to be called more than once\n  // and possibly fail the 2nd time\n\n\n  this._textureFormatInUse = \"\";\n  this._transformTextureUrl = null;\n  return null;\n};","map":{"version":3,"mappings":"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","names":["Engine","transformTextureUrl","url","excludeFn","entry","strRegExPattern","match","RegExp","_excludedCompressedTextures","some","lastDot","lastIndexOf","lastQuestionMark","querystring","substring","length","_textureFormatInUse","Object","defineProperty","prototype","get","texturesSupported","Array","_caps","astc","push","s3tc","pvrtc","etc2","etc1","enumerable","configurable","setCompressedTextureExclusions","skippedFiles","setTextureFormatToUse","formatsAvailable","i","len1","j","len2","toLowerCase","_transformTextureUrl","bind"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/Extensions/engine.textureSelector.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport { Engine } from \"../engine\";\r\n\r\ndeclare module \"../../Engines/engine\" {\r\n    export interface Engine {\r\n        /** @hidden */\r\n        _excludedCompressedTextures: string[];\r\n\r\n        /** @hidden */\r\n        _textureFormatInUse: string;\r\n\r\n        /**\r\n         * Gets the list of texture formats supported\r\n         */\r\n        readonly texturesSupported: Array<string>;\r\n\r\n        /**\r\n         * Gets the texture format in use\r\n         */\r\n        readonly textureFormatInUse: Nullable<string>;\r\n\r\n        /**\r\n         * Set the compressed texture extensions or file names to skip.\r\n         *\r\n         * @param skippedFiles defines the list of those texture files you want to skip\r\n         * Example: [\".dds\", \".env\", \"myfile.png\"]\r\n         */\r\n        setCompressedTextureExclusions(skippedFiles: Array<string>): void;\r\n\r\n        /**\r\n         * Set the compressed texture format to use, based on the formats you have, and the formats\r\n         * supported by the hardware / browser.\r\n         *\r\n         * Khronos Texture Container (.ktx) files are used to support this.  This format has the\r\n         * advantage of being specifically designed for OpenGL.  Header elements directly correspond\r\n         * to API arguments needed to compressed textures.  This puts the burden on the container\r\n         * generator to house the arcane code for determining these for current & future formats.\r\n         *\r\n         * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\r\n         * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\r\n         *\r\n         * Note: The result of this call is not taken into account when a texture is base64.\r\n         *\r\n         * @param formatsAvailable defines the list of those format families you have created\r\n         * on your server.  Syntax: '-' + format family + '.ktx'.  (Case and order do not matter.)\r\n         *\r\n         * Current families are astc, dxt, pvrtc, etc2, & etc1.\r\n         * @returns The extension selected.\r\n         */\r\n        setTextureFormatToUse(formatsAvailable: Array<string>): Nullable<string>;\r\n    }\r\n}\r\n\r\nfunction transformTextureUrl(this: Engine, url: string): string {\r\n    const excludeFn = (entry: string) => {\r\n        const strRegExPattern: string = \"\\\\b\" + entry + \"\\\\b\";\r\n        return url && (url === entry || url.match(new RegExp(strRegExPattern, \"g\")));\r\n    };\r\n\r\n    if (this._excludedCompressedTextures && this._excludedCompressedTextures.some(excludeFn)) {\r\n        return url;\r\n    }\r\n\r\n    const lastDot = url.lastIndexOf(\".\");\r\n    const lastQuestionMark = url.lastIndexOf(\"?\");\r\n    const querystring = lastQuestionMark > -1 ? url.substring(lastQuestionMark, url.length) : \"\";\r\n    return (lastDot > -1 ? url.substring(0, lastDot) : url) + this._textureFormatInUse + querystring;\r\n}\r\n\r\nObject.defineProperty(Engine.prototype, \"texturesSupported\", {\r\n    get: function (this: Engine) {\r\n        // Intelligently add supported compressed formats in order to check for.\r\n        // Check for ASTC support first as it is most powerful and to be very cross platform.\r\n        // Next PVRTC & DXT, which are probably superior to ETC1/2.\r\n        // Likely no hardware which supports both PVR & DXT, so order matters little.\r\n        // ETC2 is newer and handles ETC1 (no alpha capability), so check for first.\r\n        const texturesSupported = new Array<string>();\r\n        if (this._caps.astc) {\r\n            texturesSupported.push(\"-astc.ktx\");\r\n        }\r\n        if (this._caps.s3tc) {\r\n            texturesSupported.push(\"-dxt.ktx\");\r\n        }\r\n        if (this._caps.pvrtc) {\r\n            texturesSupported.push(\"-pvrtc.ktx\");\r\n        }\r\n        if (this._caps.etc2) {\r\n            texturesSupported.push(\"-etc2.ktx\");\r\n        }\r\n        if (this._caps.etc1) {\r\n            texturesSupported.push(\"-etc1.ktx\");\r\n        }\r\n        return texturesSupported;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nObject.defineProperty(Engine.prototype, \"textureFormatInUse\", {\r\n    get: function (this: Engine) {\r\n        return this._textureFormatInUse || null;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nEngine.prototype.setCompressedTextureExclusions = function (skippedFiles: Array<string>): void {\r\n    this._excludedCompressedTextures = skippedFiles;\r\n};\r\n\r\nEngine.prototype.setTextureFormatToUse = function (formatsAvailable: Array<string>): Nullable<string> {\r\n    const texturesSupported = this.texturesSupported;\r\n    for (let i = 0, len1 = texturesSupported.length; i < len1; i++) {\r\n        for (let j = 0, len2 = formatsAvailable.length; j < len2; j++) {\r\n            if (texturesSupported[i] === formatsAvailable[j].toLowerCase()) {\r\n                this._transformTextureUrl = transformTextureUrl.bind(this);\r\n                return (this._textureFormatInUse = texturesSupported[i]);\r\n            }\r\n        }\r\n    }\r\n    // actively set format to nothing, to allow this to be called more than once\r\n    // and possibly fail the 2nd time\r\n    this._textureFormatInUse = \"\";\r\n    this._transformTextureUrl = null;\r\n    return null;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}