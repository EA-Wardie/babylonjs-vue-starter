{"ast":null,"code":"// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore.js\";\nimport \"./ShadersInclude/helperFunctions.js\";\nimport \"./ShadersInclude/importanceSampling.js\";\nimport \"./ShadersInclude/pbrBRDFFunctions.js\";\nimport \"./ShadersInclude/hdrFilteringFunctions.js\";\nvar name = \"hdrFilteringPixelShader\";\nvar shader = \"#include<helperFunctions>\\n#include<importanceSampling>\\n#include<pbrBRDFFunctions>\\n#include<hdrFilteringFunctions>\\nuniform float alphaG;\\nuniform samplerCube inputTexture;\\nuniform vec2 vFilteringInfo;\\nuniform float hdrScale;\\nvarying vec3 direction;\\nvoid main() {\\nvec3 color=radiance(alphaG,inputTexture,direction,vFilteringInfo);\\ngl_FragColor=vec4(color*hdrScale,1.0);\\n}\"; // Sideeffect\n\nShaderStore.ShadersStore[name] = shader;\n/** @hidden */\n\nexport var hdrFilteringPixelShader = {\n  name: name,\n  shader: shader\n};","map":{"version":3,"mappings":"AAAA;AACA,SAASA,WAAT,QAA4B,2BAA5B;AACA,OAAO,qCAAP;AACA,OAAO,wCAAP;AACA,OAAO,sCAAP;AACA,OAAO,2CAAP;AAEA,IAAMC,IAAI,GAAG,yBAAb;AACA,IAAMC,MAAM,GAAG,8XAAf,C,CAaA;;AACAF,WAAW,CAACG,YAAZ,CAAyBF,IAAzB,IAAiCC,MAAjC;AACA;;AACA,OAAO,IAAME,uBAAuB,GAAG;AAAEH,MAAI,MAAN;AAAQC,QAAM;AAAd,CAAhC","names":["ShaderStore","name","shader","ShadersStore","hdrFilteringPixelShader"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Shaders/hdrFiltering.fragment.ts"],"sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/helperFunctions\";\nimport \"./ShadersInclude/importanceSampling\";\nimport \"./ShadersInclude/pbrBRDFFunctions\";\nimport \"./ShadersInclude/hdrFilteringFunctions\";\n\nconst name = \"hdrFilteringPixelShader\";\nconst shader = `#include<helperFunctions>\n#include<importanceSampling>\n#include<pbrBRDFFunctions>\n#include<hdrFilteringFunctions>\nuniform float alphaG;\runiform samplerCube inputTexture;\runiform vec2 vFilteringInfo;\runiform float hdrScale;\rvarying vec3 direction;\rvoid main() {\rvec3 color=radiance(alphaG,inputTexture,direction,vFilteringInfo);\rgl_FragColor=vec4(color*hdrScale,1.0);\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @hidden */\nexport const hdrFilteringPixelShader = { name, shader };\n"]},"metadata":{},"sourceType":"module"}