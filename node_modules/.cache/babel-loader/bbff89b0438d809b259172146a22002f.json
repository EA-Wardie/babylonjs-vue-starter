{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { __decorate, __extends } from \"tslib\";\nimport { serialize } from \"../Misc/decorators.js\";\nimport { Matrix, Vector3 } from \"../Maths/math.vector.js\";\nimport { Node } from \"../node.js\";\nimport { Light } from \"./light.js\";\nimport { ShadowLight } from \"./shadowLight.js\";\nNode.AddNodeConstructor(\"Light_Type_0\", function (name, scene) {\n  return function () {\n    return new PointLight(name, Vector3.Zero(), scene);\n  };\n});\n/**\n * A point light is a light defined by an unique point in world space.\n * The light is emitted in every direction from this point.\n * A good example of a point light is a standard light bulb.\n * Documentation: https://doc.babylonjs.com/babylon101/lights\n */\n\nvar PointLight =\n/** @class */\nfunction (_super) {\n  __extends(PointLight, _super);\n  /**\n   * Creates a PointLight object from the passed name and position (Vector3) and adds it in the scene.\n   * A PointLight emits the light in every direction.\n   * It can cast shadows.\n   * If the scene camera is already defined and you want to set your PointLight at the camera position, just set it :\n   * ```javascript\n   * var pointLight = new PointLight(\"pl\", camera.position, scene);\n   * ```\n   * Documentation : https://doc.babylonjs.com/babylon101/lights\n   * @param name The light friendly name\n   * @param position The position of the point light in the scene\n   * @param scene The scene the lights belongs to\n   */\n\n\n  function PointLight(name, position, scene) {\n    var _this = _super.call(this, name, scene) || this;\n\n    _this._shadowAngle = Math.PI / 2;\n    _this.position = position;\n    return _this;\n  }\n\n  Object.defineProperty(PointLight.prototype, \"shadowAngle\", {\n    /**\n     * Getter: In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\n     * This specifies what angle the shadow will use to be created.\n     *\n     * It default to 90 degrees to work nicely with the cube texture generation for point lights shadow maps.\n     */\n    get: function get() {\n      return this._shadowAngle;\n    },\n\n    /**\n     * Setter: In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\n     * This specifies what angle the shadow will use to be created.\n     *\n     * It default to 90 degrees to work nicely with the cube texture generation for point lights shadow maps.\n     */\n    set: function set(value) {\n      this._shadowAngle = value;\n      this.forceProjectionMatrixCompute();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PointLight.prototype, \"direction\", {\n    /**\n     * Gets the direction if it has been set.\n     * In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\n     */\n    get: function get() {\n      return this._direction;\n    },\n\n    /**\n     * In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\n     */\n    set: function set(value) {\n      var previousNeedCube = this.needCube();\n      this._direction = value;\n\n      if (this.needCube() !== previousNeedCube && this._shadowGenerator) {\n        this._shadowGenerator.recreateShadowMap();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Returns the string \"PointLight\"\n   * @returns the class name\n   */\n\n  PointLight.prototype.getClassName = function () {\n    return \"PointLight\";\n  };\n  /**\n   * Returns the integer 0.\n   * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\n   */\n\n\n  PointLight.prototype.getTypeID = function () {\n    return Light.LIGHTTYPEID_POINTLIGHT;\n  };\n  /**\n   * Specifies whether or not the shadowmap should be a cube texture.\n   * @returns true if the shadowmap needs to be a cube texture.\n   */\n\n\n  PointLight.prototype.needCube = function () {\n    return !this.direction;\n  };\n  /**\n   * Returns a new Vector3 aligned with the PointLight cube system according to the passed cube face index (integer).\n   * @param faceIndex The index of the face we are computed the direction to generate shadow\n   * @returns The set direction in 2d mode otherwise the direction to the cubemap face if needCube() is true\n   */\n\n\n  PointLight.prototype.getShadowDirection = function (faceIndex) {\n    if (this.direction) {\n      return _super.prototype.getShadowDirection.call(this, faceIndex);\n    } else {\n      switch (faceIndex) {\n        case 0:\n          return new Vector3(1.0, 0.0, 0.0);\n\n        case 1:\n          return new Vector3(-1.0, 0.0, 0.0);\n\n        case 2:\n          return new Vector3(0.0, -1.0, 0.0);\n\n        case 3:\n          return new Vector3(0.0, 1.0, 0.0);\n\n        case 4:\n          return new Vector3(0.0, 0.0, 1.0);\n\n        case 5:\n          return new Vector3(0.0, 0.0, -1.0);\n      }\n    }\n\n    return Vector3.Zero();\n  };\n  /**\n   * Sets the passed matrix \"matrix\" as a left-handed perspective projection matrix with the following settings :\n   * - fov = PI / 2\n   * - aspect ratio : 1.0\n   * - z-near and far equal to the active camera minZ and maxZ.\n   * Returns the PointLight.\n   * @param matrix\n   * @param viewMatrix\n   * @param renderList\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  PointLight.prototype._setDefaultShadowProjectionMatrix = function (matrix, viewMatrix, renderList) {\n    var activeCamera = this.getScene().activeCamera;\n\n    if (!activeCamera) {\n      return;\n    }\n\n    var minZ = this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera.minZ;\n    var maxZ = this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera.maxZ;\n    var useReverseDepthBuffer = this.getScene().getEngine().useReverseDepthBuffer;\n    Matrix.PerspectiveFovLHToRef(this.shadowAngle, 1.0, useReverseDepthBuffer ? maxZ : minZ, useReverseDepthBuffer ? minZ : maxZ, matrix, true, this._scene.getEngine().isNDCHalfZRange, undefined, useReverseDepthBuffer);\n  };\n\n  PointLight.prototype._buildUniformLayout = function () {\n    this._uniformBuffer.addUniform(\"vLightData\", 4);\n\n    this._uniformBuffer.addUniform(\"vLightDiffuse\", 4);\n\n    this._uniformBuffer.addUniform(\"vLightSpecular\", 4);\n\n    this._uniformBuffer.addUniform(\"vLightFalloff\", 4);\n\n    this._uniformBuffer.addUniform(\"shadowsInfo\", 3);\n\n    this._uniformBuffer.addUniform(\"depthValues\", 2);\n\n    this._uniformBuffer.create();\n  };\n  /**\n   * Sets the passed Effect \"effect\" with the PointLight transformed position (or position, if none) and passed name (string).\n   * @param effect The effect to update\n   * @param lightIndex The index of the light in the effect to update\n   * @returns The point light\n   */\n\n\n  PointLight.prototype.transferToEffect = function (effect, lightIndex) {\n    if (this.computeTransformedInformation()) {\n      this._uniformBuffer.updateFloat4(\"vLightData\", this.transformedPosition.x, this.transformedPosition.y, this.transformedPosition.z, 0.0, lightIndex);\n    } else {\n      this._uniformBuffer.updateFloat4(\"vLightData\", this.position.x, this.position.y, this.position.z, 0, lightIndex);\n    }\n\n    this._uniformBuffer.updateFloat4(\"vLightFalloff\", this.range, this._inverseSquaredRange, 0, 0, lightIndex);\n\n    return this;\n  };\n\n  PointLight.prototype.transferToNodeMaterialEffect = function (effect, lightDataUniformName) {\n    if (this.computeTransformedInformation()) {\n      effect.setFloat3(lightDataUniformName, this.transformedPosition.x, this.transformedPosition.y, this.transformedPosition.z);\n    } else {\n      effect.setFloat3(lightDataUniformName, this.position.x, this.position.y, this.position.z);\n    }\n\n    return this;\n  };\n  /**\n   * Prepares the list of defines specific to the light type.\n   * @param defines the list of defines\n   * @param lightIndex defines the index of the light for the effect\n   */\n\n\n  PointLight.prototype.prepareLightSpecificDefines = function (defines, lightIndex) {\n    defines[\"POINTLIGHT\" + lightIndex] = true;\n  };\n\n  __decorate([serialize()], PointLight.prototype, \"shadowAngle\", null);\n\n  return PointLight;\n}(ShadowLight);\n\nexport { PointLight };","map":{"version":3,"mappings":"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","names":["serialize","Matrix","Vector3","Node","Light","ShadowLight","AddNodeConstructor","name","scene","PointLight","Zero","__extends","position","_super","_this","Math","PI","Object","_shadowAngle","value","forceProjectionMatrixCompute","_direction","previousNeedCube","needCube","_shadowGenerator","recreateShadowMap","LIGHTTYPEID_POINTLIGHT","direction","faceIndex","getShadowDirection","call","matrix","viewMatrix","renderList","activeCamera","getScene","minZ","shadowMinZ","undefined","maxZ","shadowMaxZ","useReverseDepthBuffer","getEngine","PerspectiveFovLHToRef","shadowAngle","_scene","isNDCHalfZRange","_uniformBuffer","addUniform","create","effect","lightIndex","computeTransformedInformation","updateFloat4","transformedPosition","x","y","z","range","_inverseSquaredRange","lightDataUniformName","setFloat3","defines","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Lights/pointLight.ts"],"sourcesContent":["import { serialize } from \"../Misc/decorators\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport { Node } from \"../node\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Light } from \"./light\";\r\nimport { ShadowLight } from \"./shadowLight\";\r\nimport type { Effect } from \"../Materials/effect\";\r\n\r\nNode.AddNodeConstructor(\"Light_Type_0\", (name, scene) => {\r\n    return () => new PointLight(name, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * A point light is a light defined by an unique point in world space.\r\n * The light is emitted in every direction from this point.\r\n * A good example of a point light is a standard light bulb.\r\n * Documentation: https://doc.babylonjs.com/babylon101/lights\r\n */\r\nexport class PointLight extends ShadowLight {\r\n    private _shadowAngle = Math.PI / 2;\r\n    /**\r\n     * Getter: In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     * This specifies what angle the shadow will use to be created.\r\n     *\r\n     * It default to 90 degrees to work nicely with the cube texture generation for point lights shadow maps.\r\n     */\r\n    @serialize()\r\n    public get shadowAngle(): number {\r\n        return this._shadowAngle;\r\n    }\r\n    /**\r\n     * Setter: In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     * This specifies what angle the shadow will use to be created.\r\n     *\r\n     * It default to 90 degrees to work nicely with the cube texture generation for point lights shadow maps.\r\n     */\r\n    public set shadowAngle(value: number) {\r\n        this._shadowAngle = value;\r\n        this.forceProjectionMatrixCompute();\r\n    }\r\n\r\n    /**\r\n     * Gets the direction if it has been set.\r\n     * In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     */\r\n    public get direction(): Vector3 {\r\n        return this._direction;\r\n    }\r\n\r\n    /**\r\n     * In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     */\r\n    public set direction(value: Vector3) {\r\n        const previousNeedCube = this.needCube();\r\n        this._direction = value;\r\n        if (this.needCube() !== previousNeedCube && this._shadowGenerator) {\r\n            this._shadowGenerator.recreateShadowMap();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a PointLight object from the passed name and position (Vector3) and adds it in the scene.\r\n     * A PointLight emits the light in every direction.\r\n     * It can cast shadows.\r\n     * If the scene camera is already defined and you want to set your PointLight at the camera position, just set it :\r\n     * ```javascript\r\n     * var pointLight = new PointLight(\"pl\", camera.position, scene);\r\n     * ```\r\n     * Documentation : https://doc.babylonjs.com/babylon101/lights\r\n     * @param name The light friendly name\r\n     * @param position The position of the point light in the scene\r\n     * @param scene The scene the lights belongs to\r\n     */\r\n    constructor(name: string, position: Vector3, scene: Scene) {\r\n        super(name, scene);\r\n        this.position = position;\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"PointLight\"\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"PointLight\";\r\n    }\r\n\r\n    /**\r\n     * Returns the integer 0.\r\n     * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\r\n     */\r\n    public getTypeID(): number {\r\n        return Light.LIGHTTYPEID_POINTLIGHT;\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not the shadowmap should be a cube texture.\r\n     * @returns true if the shadowmap needs to be a cube texture.\r\n     */\r\n    public needCube(): boolean {\r\n        return !this.direction;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Vector3 aligned with the PointLight cube system according to the passed cube face index (integer).\r\n     * @param faceIndex The index of the face we are computed the direction to generate shadow\r\n     * @returns The set direction in 2d mode otherwise the direction to the cubemap face if needCube() is true\r\n     */\r\n    public getShadowDirection(faceIndex?: number): Vector3 {\r\n        if (this.direction) {\r\n            return super.getShadowDirection(faceIndex);\r\n        } else {\r\n            switch (faceIndex) {\r\n                case 0:\r\n                    return new Vector3(1.0, 0.0, 0.0);\r\n                case 1:\r\n                    return new Vector3(-1.0, 0.0, 0.0);\r\n                case 2:\r\n                    return new Vector3(0.0, -1.0, 0.0);\r\n                case 3:\r\n                    return new Vector3(0.0, 1.0, 0.0);\r\n                case 4:\r\n                    return new Vector3(0.0, 0.0, 1.0);\r\n                case 5:\r\n                    return new Vector3(0.0, 0.0, -1.0);\r\n            }\r\n        }\r\n\r\n        return Vector3.Zero();\r\n    }\r\n\r\n    /**\r\n     * Sets the passed matrix \"matrix\" as a left-handed perspective projection matrix with the following settings :\r\n     * - fov = PI / 2\r\n     * - aspect ratio : 1.0\r\n     * - z-near and far equal to the active camera minZ and maxZ.\r\n     * Returns the PointLight.\r\n     * @param matrix\r\n     * @param viewMatrix\r\n     * @param renderList\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    protected _setDefaultShadowProjectionMatrix(matrix: Matrix, viewMatrix: Matrix, renderList: Array<AbstractMesh>): void {\r\n        const activeCamera = this.getScene().activeCamera;\r\n\r\n        if (!activeCamera) {\r\n            return;\r\n        }\r\n\r\n        const minZ = this.shadowMinZ !== undefined ? this.shadowMinZ : activeCamera.minZ;\r\n        const maxZ = this.shadowMaxZ !== undefined ? this.shadowMaxZ : activeCamera.maxZ;\r\n\r\n        const useReverseDepthBuffer = this.getScene().getEngine().useReverseDepthBuffer;\r\n\r\n        Matrix.PerspectiveFovLHToRef(\r\n            this.shadowAngle,\r\n            1.0,\r\n            useReverseDepthBuffer ? maxZ : minZ,\r\n            useReverseDepthBuffer ? minZ : maxZ,\r\n            matrix,\r\n            true,\r\n            this._scene.getEngine().isNDCHalfZRange,\r\n            undefined,\r\n            useReverseDepthBuffer\r\n        );\r\n    }\r\n\r\n    protected _buildUniformLayout(): void {\r\n        this._uniformBuffer.addUniform(\"vLightData\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightDiffuse\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightSpecular\", 4);\r\n        this._uniformBuffer.addUniform(\"vLightFalloff\", 4);\r\n        this._uniformBuffer.addUniform(\"shadowsInfo\", 3);\r\n        this._uniformBuffer.addUniform(\"depthValues\", 2);\r\n        this._uniformBuffer.create();\r\n    }\r\n\r\n    /**\r\n     * Sets the passed Effect \"effect\" with the PointLight transformed position (or position, if none) and passed name (string).\r\n     * @param effect The effect to update\r\n     * @param lightIndex The index of the light in the effect to update\r\n     * @returns The point light\r\n     */\r\n    public transferToEffect(effect: Effect, lightIndex: string): PointLight {\r\n        if (this.computeTransformedInformation()) {\r\n            this._uniformBuffer.updateFloat4(\"vLightData\", this.transformedPosition.x, this.transformedPosition.y, this.transformedPosition.z, 0.0, lightIndex);\r\n        } else {\r\n            this._uniformBuffer.updateFloat4(\"vLightData\", this.position.x, this.position.y, this.position.z, 0, lightIndex);\r\n        }\r\n\r\n        this._uniformBuffer.updateFloat4(\"vLightFalloff\", this.range, this._inverseSquaredRange, 0, 0, lightIndex);\r\n        return this;\r\n    }\r\n\r\n    public transferToNodeMaterialEffect(effect: Effect, lightDataUniformName: string) {\r\n        if (this.computeTransformedInformation()) {\r\n            effect.setFloat3(lightDataUniformName, this.transformedPosition.x, this.transformedPosition.y, this.transformedPosition.z);\r\n        } else {\r\n            effect.setFloat3(lightDataUniformName, this.position.x, this.position.y, this.position.z);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Prepares the list of defines specific to the light type.\r\n     * @param defines the list of defines\r\n     * @param lightIndex defines the index of the light for the effect\r\n     */\r\n    public prepareLightSpecificDefines(defines: any, lightIndex: number): void {\r\n        defines[\"POINTLIGHT\" + lightIndex] = true;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}