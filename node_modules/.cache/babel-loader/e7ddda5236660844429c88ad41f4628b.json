{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { __extends } from \"tslib\";\nimport { ThinTexture } from \"./thinTexture.js\";\n/**\n * This is a tiny helper class to wrap a RenderTargetWrapper in a texture\n * usable as the input of an effect.\n */\n\nvar ThinRenderTargetTexture =\n/** @class */\nfunction (_super) {\n  __extends(ThinRenderTargetTexture, _super);\n  /**\n   * Instantiates a new ThinRenderTargetTexture.\n   * Tiny helper class to wrap a RenderTargetWrapper in a texture.\n   * This can be used as an internal texture wrapper in ThinEngine to benefit from the cache and to hold on the associated RTT\n   * @param engine Define the internalTexture to wrap\n   * @param size Define the size of the RTT to create\n   * @param options Define rendertarget options\n   */\n\n\n  function ThinRenderTargetTexture(engine, size, options) {\n    var _this = _super.call(this, null) || this;\n\n    _this._renderTarget = null;\n    _this._engine = engine;\n    _this._renderTargetOptions = options;\n\n    _this.resize(size);\n\n    return _this;\n  }\n\n  Object.defineProperty(ThinRenderTargetTexture.prototype, \"renderTarget\", {\n    /**\n     * Gets the render target wrapper associated with this render target\n     */\n    get: function get() {\n      return this._renderTarget;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Resize the texture to a new desired size.\n   * Be careful as it will recreate all the data in the new texture.\n   * @param size Define the new size. It can be:\n   *   - a number for squared texture,\n   *   - an object containing { width: number, height: number }\n   */\n\n  ThinRenderTargetTexture.prototype.resize = function (size) {\n    var _a;\n\n    (_a = this._renderTarget) === null || _a === void 0 ? void 0 : _a.dispose();\n    this._renderTarget = null;\n    this._texture = null;\n    this._size = size;\n\n    if (this._engine) {\n      this._renderTarget = this._engine.createRenderTargetTexture(this._size, this._renderTargetOptions);\n    }\n\n    this._texture = this.renderTarget.texture;\n  };\n  /**\n   * Get the underlying lower level texture from Babylon.\n   * @returns the internal texture\n   */\n\n\n  ThinRenderTargetTexture.prototype.getInternalTexture = function () {\n    return this._texture;\n  };\n  /**\n   * Get the class name of the texture.\n   * @returns \"ThinRenderTargetTexture\"\n   */\n\n\n  ThinRenderTargetTexture.prototype.getClassName = function () {\n    return \"ThinRenderTargetTexture\";\n  };\n  /**\n   * Dispose the texture and release its associated resources.\n   * @param disposeOnlyFramebuffers\n   */\n\n\n  ThinRenderTargetTexture.prototype.dispose = function (disposeOnlyFramebuffers) {\n    var _a;\n\n    if (disposeOnlyFramebuffers === void 0) {\n      disposeOnlyFramebuffers = false;\n    }\n\n    (_a = this._renderTarget) === null || _a === void 0 ? void 0 : _a.dispose(true);\n    this._renderTarget = null;\n\n    if (!disposeOnlyFramebuffers) {\n      this.dispose();\n    }\n  };\n\n  return ThinRenderTargetTexture;\n}(ThinTexture);\n\nexport { ThinRenderTargetTexture };","map":{"version":3,"mappings":";;AAKA,SAASA,WAAT,QAA4B,kBAA5B;AAGA;;;;;AAIA;AAAA;AAAA;AAA6CC;AAazC;;;;;;;;;;AAQA,mCAAYC,MAAZ,EAAgCC,IAAhC,EAAmDC,OAAnD,EAAuF;AAAvF,gBACIC,kBAAM,IAAN,KAAW,IADf;;AAlBQC,0BAA+C,IAA/C;AAoBJA,SAAI,CAACC,OAAL,GAAeL,MAAf;AACAI,SAAI,CAACE,oBAAL,GAA4BJ,OAA5B;;AACAE,SAAI,CAACG,MAAL,CAAYN,IAAZ;;;AACH;;AAjBDO,wBAAWC,iCAAX,EAAW,cAAX,EAAuB;AAHvB;;;SAGA;AACI,aAAO,KAAKC,aAAZ;AACH,KAFsB;qBAAA;;AAAA,GAAvB;AAmBA;;;;;;;;AAOOD,6CAAP,UAAcR,IAAd,EAA+B;;;AAC3B,eAAKS,aAAL,MAAkB,IAAlB,IAAkBC,aAAlB,GAAkB,MAAlB,GAAkBA,GAAEC,OAAF,EAAlB;AACA,SAAKF,aAAL,GAAqB,IAArB;AACA,SAAKG,QAAL,GAAgB,IAAhB;AACA,SAAKC,KAAL,GAAab,IAAb;;AAEA,QAAI,KAAKI,OAAT,EAAkB;AACd,WAAKK,aAAL,GAAqB,KAAKL,OAAL,CAAaU,yBAAb,CAAuC,KAAKD,KAA5C,EAAmD,KAAKR,oBAAxD,CAArB;AACH;;AACD,SAAKO,QAAL,GAAgB,KAAKG,YAAL,CAAmBC,OAAnC;AACH,GAVM;AAYP;;;;;;AAIOR,yDAAP;AACI,WAAO,KAAKI,QAAZ;AACH,GAFM;AAIP;;;;;;AAIOJ,mDAAP;AACI,WAAO,yBAAP;AACH,GAFM;AAIP;;;;;;AAIOA,8CAAP,UAAeS,uBAAf,EAA8C;;;AAA/B;AAAAA;AAA+B;;AAC1C,eAAKR,aAAL,MAAkB,IAAlB,IAAkBC,aAAlB,GAAkB,MAAlB,GAAkBA,GAAEC,OAAF,CAAU,IAAV,CAAlB;AACA,SAAKF,aAAL,GAAqB,IAArB;;AAEA,QAAI,CAACQ,uBAAL,EAA8B;AAC1B,WAAKN,OAAL;AACH;AACJ,GAPM;;AAQX;AAAC,CA3ED,CAA6Cd,WAA7C","names":["ThinTexture","__extends","engine","size","options","_super","_this","_engine","_renderTargetOptions","resize","Object","ThinRenderTargetTexture","_renderTarget","_a","dispose","_texture","_size","createRenderTargetTexture","renderTarget","texture","disposeOnlyFramebuffers"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Textures/thinRenderTargetTexture.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport type { InternalTexture } from \"../../Materials/Textures/internalTexture\";\r\n\r\nimport type { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport type { IRenderTargetTexture, RenderTargetWrapper } from \"../../Engines/renderTargetWrapper\";\r\nimport { ThinTexture } from \"./thinTexture\";\r\nimport type { TextureSize, RenderTargetCreationOptions } from \"./textureCreationOptions\";\r\n\r\n/**\r\n * This is a tiny helper class to wrap a RenderTargetWrapper in a texture\r\n * usable as the input of an effect.\r\n */\r\nexport class ThinRenderTargetTexture extends ThinTexture implements IRenderTargetTexture {\r\n    private readonly _renderTargetOptions: RenderTargetCreationOptions;\r\n\r\n    private _renderTarget: Nullable<RenderTargetWrapper> = null;\r\n    private _size: TextureSize;\r\n\r\n    /**\r\n     * Gets the render target wrapper associated with this render target\r\n     */\r\n    public get renderTarget(): Nullable<RenderTargetWrapper> {\r\n        return this._renderTarget;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new ThinRenderTargetTexture.\r\n     * Tiny helper class to wrap a RenderTargetWrapper in a texture.\r\n     * This can be used as an internal texture wrapper in ThinEngine to benefit from the cache and to hold on the associated RTT\r\n     * @param engine Define the internalTexture to wrap\r\n     * @param size Define the size of the RTT to create\r\n     * @param options Define rendertarget options\r\n     */\r\n    constructor(engine: ThinEngine, size: TextureSize, options: RenderTargetCreationOptions) {\r\n        super(null);\r\n        this._engine = engine;\r\n        this._renderTargetOptions = options;\r\n        this.resize(size);\r\n    }\r\n\r\n    /**\r\n     * Resize the texture to a new desired size.\r\n     * Be careful as it will recreate all the data in the new texture.\r\n     * @param size Define the new size. It can be:\r\n     *   - a number for squared texture,\r\n     *   - an object containing { width: number, height: number }\r\n     */\r\n    public resize(size: TextureSize): void {\r\n        this._renderTarget?.dispose();\r\n        this._renderTarget = null;\r\n        this._texture = null;\r\n        this._size = size;\r\n\r\n        if (this._engine) {\r\n            this._renderTarget = this._engine.createRenderTargetTexture(this._size, this._renderTargetOptions);\r\n        }\r\n        this._texture = this.renderTarget!.texture;\r\n    }\r\n\r\n    /**\r\n     * Get the underlying lower level texture from Babylon.\r\n     * @returns the internal texture\r\n     */\r\n    public getInternalTexture(): Nullable<InternalTexture> {\r\n        return this._texture;\r\n    }\r\n\r\n    /**\r\n     * Get the class name of the texture.\r\n     * @returns \"ThinRenderTargetTexture\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"ThinRenderTargetTexture\";\r\n    }\r\n\r\n    /**\r\n     * Dispose the texture and release its associated resources.\r\n     * @param disposeOnlyFramebuffers\r\n     */\r\n    public dispose(disposeOnlyFramebuffers = false): void {\r\n        this._renderTarget?.dispose(true);\r\n        this._renderTarget = null;\r\n\r\n        if (!disposeOnlyFramebuffers) {\r\n            this.dispose();\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}