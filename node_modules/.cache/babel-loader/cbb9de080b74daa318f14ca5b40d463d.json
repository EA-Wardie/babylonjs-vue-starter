{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\n\n/**\n * EffectFallbacks can be used to add fallbacks (properties to disable) to certain properties when desired to improve performance.\n * (Eg. Start at high quality with reflection and fog, if fps is low, remove reflection, if still low remove fog)\n */\nvar EffectFallbacks =\n/** @class */\nfunction () {\n  function EffectFallbacks() {\n    this._defines = {};\n    this._currentRank = 32;\n    this._maxRank = -1;\n    this._mesh = null;\n  }\n  /**\n   * Removes the fallback from the bound mesh.\n   */\n\n\n  EffectFallbacks.prototype.unBindMesh = function () {\n    this._mesh = null;\n  };\n  /**\n   * Adds a fallback on the specified property.\n   * @param rank The rank of the fallback (Lower ranks will be fallbacked to first)\n   * @param define The name of the define in the shader\n   */\n\n\n  EffectFallbacks.prototype.addFallback = function (rank, define) {\n    if (!this._defines[rank]) {\n      if (rank < this._currentRank) {\n        this._currentRank = rank;\n      }\n\n      if (rank > this._maxRank) {\n        this._maxRank = rank;\n      }\n\n      this._defines[rank] = new Array();\n    }\n\n    this._defines[rank].push(define);\n  };\n  /**\n   * Sets the mesh to use CPU skinning when needing to fallback.\n   * @param rank The rank of the fallback (Lower ranks will be fallbacked to first)\n   * @param mesh The mesh to use the fallbacks.\n   */\n\n\n  EffectFallbacks.prototype.addCPUSkinningFallback = function (rank, mesh) {\n    this._mesh = mesh;\n\n    if (rank < this._currentRank) {\n      this._currentRank = rank;\n    }\n\n    if (rank > this._maxRank) {\n      this._maxRank = rank;\n    }\n  };\n\n  Object.defineProperty(EffectFallbacks.prototype, \"hasMoreFallbacks\", {\n    /**\n     * Checks to see if more fallbacks are still available.\n     */\n    get: function get() {\n      return this._currentRank <= this._maxRank;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Removes the defines that should be removed when falling back.\n   * @param currentDefines defines the current define statements for the shader.\n   * @param effect defines the current effect we try to compile\n   * @returns The resulting defines with defines of the current rank removed.\n   */\n\n  EffectFallbacks.prototype.reduce = function (currentDefines, effect) {\n    // First we try to switch to CPU skinning\n    if (this._mesh && this._mesh.computeBonesUsingShaders && this._mesh.numBoneInfluencers > 0) {\n      this._mesh.computeBonesUsingShaders = false;\n      currentDefines = currentDefines.replace(\"#define NUM_BONE_INFLUENCERS \" + this._mesh.numBoneInfluencers, \"#define NUM_BONE_INFLUENCERS 0\");\n      effect._bonesComputationForcedToCPU = true;\n\n      var scene = this._mesh.getScene();\n\n      for (var index = 0; index < scene.meshes.length; index++) {\n        var otherMesh = scene.meshes[index];\n\n        if (!otherMesh.material) {\n          if (!this._mesh.material && otherMesh.computeBonesUsingShaders && otherMesh.numBoneInfluencers > 0) {\n            otherMesh.computeBonesUsingShaders = false;\n          }\n\n          continue;\n        }\n\n        if (!otherMesh.computeBonesUsingShaders || otherMesh.numBoneInfluencers === 0) {\n          continue;\n        }\n\n        if (otherMesh.material.getEffect() === effect) {\n          otherMesh.computeBonesUsingShaders = false;\n        } else if (otherMesh.subMeshes) {\n          for (var _i = 0, _a = otherMesh.subMeshes; _i < _a.length; _i++) {\n            var subMesh = _a[_i];\n            var subMeshEffect = subMesh.effect;\n\n            if (subMeshEffect === effect) {\n              otherMesh.computeBonesUsingShaders = false;\n              break;\n            }\n          }\n        }\n      }\n    } else {\n      var currentFallbacks = this._defines[this._currentRank];\n\n      if (currentFallbacks) {\n        for (var index = 0; index < currentFallbacks.length; index++) {\n          currentDefines = currentDefines.replace(\"#define \" + currentFallbacks[index], \"\");\n        }\n      }\n\n      this._currentRank++;\n    }\n\n    return currentDefines;\n  };\n\n  return EffectFallbacks;\n}();\n\nexport { EffectFallbacks };","map":{"version":3,"mappings":"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","names":["EffectFallbacks","_mesh","rank","define","_defines","_currentRank","_maxRank","Array","push","mesh","Object","currentDefines","effect","computeBonesUsingShaders","numBoneInfluencers","replace","_bonesComputationForcedToCPU","scene","getScene","index","meshes","length","otherMesh","material","getEffect","subMeshes","_i","subMesh","subMeshEffect","currentFallbacks"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Materials/effectFallbacks.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { IEffectFallbacks } from \"./iEffectFallbacks\";\r\n\r\ndeclare type Effect = import(\"./effect\").Effect;\r\ndeclare type AbstractMesh = import(\"../Meshes/abstractMesh\").AbstractMesh;\r\n\r\n/**\r\n * EffectFallbacks can be used to add fallbacks (properties to disable) to certain properties when desired to improve performance.\r\n * (Eg. Start at high quality with reflection and fog, if fps is low, remove reflection, if still low remove fog)\r\n */\r\nexport class EffectFallbacks implements IEffectFallbacks {\r\n    private _defines: { [key: string]: Array<String> } = {};\r\n\r\n    private _currentRank = 32;\r\n    private _maxRank = -1;\r\n\r\n    private _mesh: Nullable<AbstractMesh> = null;\r\n\r\n    /**\r\n     * Removes the fallback from the bound mesh.\r\n     */\r\n    public unBindMesh() {\r\n        this._mesh = null;\r\n    }\r\n\r\n    /**\r\n     * Adds a fallback on the specified property.\r\n     * @param rank The rank of the fallback (Lower ranks will be fallbacked to first)\r\n     * @param define The name of the define in the shader\r\n     */\r\n    public addFallback(rank: number, define: string): void {\r\n        if (!this._defines[rank]) {\r\n            if (rank < this._currentRank) {\r\n                this._currentRank = rank;\r\n            }\r\n\r\n            if (rank > this._maxRank) {\r\n                this._maxRank = rank;\r\n            }\r\n\r\n            this._defines[rank] = new Array<String>();\r\n        }\r\n\r\n        this._defines[rank].push(define);\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh to use CPU skinning when needing to fallback.\r\n     * @param rank The rank of the fallback (Lower ranks will be fallbacked to first)\r\n     * @param mesh The mesh to use the fallbacks.\r\n     */\r\n    public addCPUSkinningFallback(rank: number, mesh: AbstractMesh) {\r\n        this._mesh = mesh;\r\n\r\n        if (rank < this._currentRank) {\r\n            this._currentRank = rank;\r\n        }\r\n        if (rank > this._maxRank) {\r\n            this._maxRank = rank;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks to see if more fallbacks are still available.\r\n     */\r\n    public get hasMoreFallbacks(): boolean {\r\n        return this._currentRank <= this._maxRank;\r\n    }\r\n\r\n    /**\r\n     * Removes the defines that should be removed when falling back.\r\n     * @param currentDefines defines the current define statements for the shader.\r\n     * @param effect defines the current effect we try to compile\r\n     * @returns The resulting defines with defines of the current rank removed.\r\n     */\r\n    public reduce(currentDefines: string, effect: Effect): string {\r\n        // First we try to switch to CPU skinning\r\n        if (this._mesh && this._mesh.computeBonesUsingShaders && this._mesh.numBoneInfluencers > 0) {\r\n            this._mesh.computeBonesUsingShaders = false;\r\n            currentDefines = currentDefines.replace(\"#define NUM_BONE_INFLUENCERS \" + this._mesh.numBoneInfluencers, \"#define NUM_BONE_INFLUENCERS 0\");\r\n            effect._bonesComputationForcedToCPU = true;\r\n\r\n            const scene = this._mesh.getScene();\r\n            for (let index = 0; index < scene.meshes.length; index++) {\r\n                const otherMesh = scene.meshes[index];\r\n\r\n                if (!otherMesh.material) {\r\n                    if (!this._mesh.material && otherMesh.computeBonesUsingShaders && otherMesh.numBoneInfluencers > 0) {\r\n                        otherMesh.computeBonesUsingShaders = false;\r\n                    }\r\n                    continue;\r\n                }\r\n\r\n                if (!otherMesh.computeBonesUsingShaders || otherMesh.numBoneInfluencers === 0) {\r\n                    continue;\r\n                }\r\n\r\n                if (otherMesh.material.getEffect() === effect) {\r\n                    otherMesh.computeBonesUsingShaders = false;\r\n                } else if (otherMesh.subMeshes) {\r\n                    for (const subMesh of otherMesh.subMeshes) {\r\n                        const subMeshEffect = subMesh.effect;\r\n\r\n                        if (subMeshEffect === effect) {\r\n                            otherMesh.computeBonesUsingShaders = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            const currentFallbacks = this._defines[this._currentRank];\r\n            if (currentFallbacks) {\r\n                for (let index = 0; index < currentFallbacks.length; index++) {\r\n                    currentDefines = currentDefines.replace(\"#define \" + currentFallbacks[index], \"\");\r\n                }\r\n            }\r\n\r\n            this._currentRank++;\r\n        }\r\n\r\n        return currentDefines;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}