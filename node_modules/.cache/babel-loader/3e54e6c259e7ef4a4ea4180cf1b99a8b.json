{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { Size } from \"../../Maths/math.size.js\";\n/**\n * Base class of all the textures in babylon.\n * It groups all the common properties required to work with Thin Engine.\n */\n\nvar ThinTexture =\n/** @class */\nfunction () {\n  /**\n   * Instantiates a new ThinTexture.\n   * Base class of all the textures in babylon.\n   * This can be used as an internal texture wrapper in ThinEngine to benefit from the cache\n   * @param internalTexture Define the internalTexture to wrap\n   */\n  function ThinTexture(internalTexture) {\n    this._wrapU = 1;\n    this._wrapV = 1;\n    /**\n     * | Value | Type               | Description |\n     * | ----- | ------------------ | ----------- |\n     * | 0     | CLAMP_ADDRESSMODE  |             |\n     * | 1     | WRAP_ADDRESSMODE   |             |\n     * | 2     | MIRROR_ADDRESSMODE |             |\n     */\n\n    this.wrapR = 1;\n    /**\n     * With compliant hardware and browser (supporting anisotropic filtering)\n     * this defines the level of anisotropic filtering in the texture.\n     * The higher the better but the slower. This defaults to 4 as it seems to be the best tradeoff.\n     */\n\n    this.anisotropicFilteringLevel = 4;\n    /**\n     * Define the current state of the loading sequence when in delayed load mode.\n     */\n\n    this.delayLoadState = 0;\n    /** @hidden */\n\n    this._texture = null;\n    this._engine = null;\n    this._cachedSize = Size.Zero();\n    this._cachedBaseSize = Size.Zero();\n    /** @hidden */\n\n    this._initialSamplingMode = 2;\n    this._texture = internalTexture;\n\n    if (this._texture) {\n      this._engine = this._texture.getEngine();\n    }\n  }\n\n  Object.defineProperty(ThinTexture.prototype, \"wrapU\", {\n    /**\n     * | Value | Type               | Description |\n     * | ----- | ------------------ | ----------- |\n     * | 0     | CLAMP_ADDRESSMODE  |             |\n     * | 1     | WRAP_ADDRESSMODE   |             |\n     * | 2     | MIRROR_ADDRESSMODE |             |\n     */\n    get: function get() {\n      return this._wrapU;\n    },\n    set: function set(value) {\n      this._wrapU = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ThinTexture.prototype, \"wrapV\", {\n    /**\n     * | Value | Type               | Description |\n     * | ----- | ------------------ | ----------- |\n     * | 0     | CLAMP_ADDRESSMODE  |             |\n     * | 1     | WRAP_ADDRESSMODE   |             |\n     * | 2     | MIRROR_ADDRESSMODE |             |\n     */\n    get: function get() {\n      return this._wrapV;\n    },\n    set: function set(value) {\n      this._wrapV = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ThinTexture.prototype, \"coordinatesMode\", {\n    /**\n     * How a texture is mapped.\n     * Unused in thin texture mode.\n     */\n    get: function get() {\n      return 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ThinTexture.prototype, \"isCube\", {\n    /**\n     * Define if the texture is a cube texture or if false a 2d texture.\n     */\n    get: function get() {\n      if (!this._texture) {\n        return false;\n      }\n\n      return this._texture.isCube;\n    },\n    set: function set(value) {\n      if (!this._texture) {\n        return;\n      }\n\n      this._texture.isCube = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ThinTexture.prototype, \"is3D\", {\n    /**\n     * Define if the texture is a 3d texture (webgl 2) or if false a 2d texture.\n     */\n    get: function get() {\n      if (!this._texture) {\n        return false;\n      }\n\n      return this._texture.is3D;\n    },\n    set: function set(value) {\n      if (!this._texture) {\n        return;\n      }\n\n      this._texture.is3D = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ThinTexture.prototype, \"is2DArray\", {\n    /**\n     * Define if the texture is a 2d array texture (webgl 2) or if false a 2d texture.\n     */\n    get: function get() {\n      if (!this._texture) {\n        return false;\n      }\n\n      return this._texture.is2DArray;\n    },\n    set: function set(value) {\n      if (!this._texture) {\n        return;\n      }\n\n      this._texture.is2DArray = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Get the class name of the texture.\n   * @returns \"ThinTexture\"\n   */\n\n  ThinTexture.prototype.getClassName = function () {\n    return \"ThinTexture\";\n  };\n  /**\n   * Get if the texture is ready to be used (downloaded, converted, mip mapped...).\n   * @returns true if fully ready\n   */\n\n\n  ThinTexture.prototype.isReady = function () {\n    if (this.delayLoadState === 4) {\n      this.delayLoad();\n      return false;\n    }\n\n    if (this._texture) {\n      return this._texture.isReady;\n    }\n\n    return false;\n  };\n  /**\n   * Triggers the load sequence in delayed load mode.\n   */\n\n\n  ThinTexture.prototype.delayLoad = function () {};\n  /**\n   * Get the underlying lower level texture from Babylon.\n   * @returns the internal texture\n   */\n\n\n  ThinTexture.prototype.getInternalTexture = function () {\n    return this._texture;\n  };\n  /**\n   * Get the size of the texture.\n   * @returns the texture size.\n   */\n\n\n  ThinTexture.prototype.getSize = function () {\n    if (this._texture) {\n      if (this._texture.width) {\n        this._cachedSize.width = this._texture.width;\n        this._cachedSize.height = this._texture.height;\n        return this._cachedSize;\n      }\n\n      if (this._texture._size) {\n        this._cachedSize.width = this._texture._size;\n        this._cachedSize.height = this._texture._size;\n        return this._cachedSize;\n      }\n    }\n\n    return this._cachedSize;\n  };\n  /**\n   * Get the base size of the texture.\n   * It can be different from the size if the texture has been resized for POT for instance\n   * @returns the base size\n   */\n\n\n  ThinTexture.prototype.getBaseSize = function () {\n    if (!this.isReady() || !this._texture) {\n      this._cachedBaseSize.width = 0;\n      this._cachedBaseSize.height = 0;\n      return this._cachedBaseSize;\n    }\n\n    if (this._texture._size) {\n      this._cachedBaseSize.width = this._texture._size;\n      this._cachedBaseSize.height = this._texture._size;\n      return this._cachedBaseSize;\n    }\n\n    this._cachedBaseSize.width = this._texture.baseWidth;\n    this._cachedBaseSize.height = this._texture.baseHeight;\n    return this._cachedBaseSize;\n  };\n\n  Object.defineProperty(ThinTexture.prototype, \"samplingMode\", {\n    /**\n     * Get the current sampling mode associated with the texture.\n     */\n    get: function get() {\n      if (!this._texture) {\n        return this._initialSamplingMode;\n      }\n\n      return this._texture.samplingMode;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Update the sampling mode of the texture.\n   * Default is Trilinear mode.\n   *\n   * | Value | Type               | Description |\n   * | ----- | ------------------ | ----------- |\n   * | 1     | NEAREST_SAMPLINGMODE or NEAREST_NEAREST_MIPLINEAR  | Nearest is: mag = nearest, min = nearest, mip = linear |\n   * | 2     | BILINEAR_SAMPLINGMODE or LINEAR_LINEAR_MIPNEAREST | Bilinear is: mag = linear, min = linear, mip = nearest |\n   * | 3     | TRILINEAR_SAMPLINGMODE or LINEAR_LINEAR_MIPLINEAR | Trilinear is: mag = linear, min = linear, mip = linear |\n   * | 4     | NEAREST_NEAREST_MIPNEAREST |             |\n   * | 5    | NEAREST_LINEAR_MIPNEAREST |             |\n   * | 6    | NEAREST_LINEAR_MIPLINEAR |             |\n   * | 7    | NEAREST_LINEAR |             |\n   * | 8    | NEAREST_NEAREST |             |\n   * | 9   | LINEAR_NEAREST_MIPNEAREST |             |\n   * | 10   | LINEAR_NEAREST_MIPLINEAR |             |\n   * | 11   | LINEAR_LINEAR |             |\n   * | 12   | LINEAR_NEAREST |             |\n   *\n   *    > _mag_: magnification filter (close to the viewer)\n   *    > _min_: minification filter (far from the viewer)\n   *    > _mip_: filter used between mip map levels\n   *@param samplingMode Define the new sampling mode of the texture\n   */\n\n  ThinTexture.prototype.updateSamplingMode = function (samplingMode) {\n    if (this._texture && this._engine) {\n      this._engine.updateTextureSamplingMode(samplingMode, this._texture);\n    }\n  };\n  /**\n   * Release and destroy the underlying lower level texture aka internalTexture.\n   */\n\n\n  ThinTexture.prototype.releaseInternalTexture = function () {\n    if (this._texture) {\n      this._texture.dispose();\n\n      this._texture = null;\n    }\n  };\n  /**\n   * Dispose the texture and release its associated resources.\n   */\n\n\n  ThinTexture.prototype.dispose = function () {\n    if (this._texture) {\n      this.releaseInternalTexture();\n      this._engine = null;\n    }\n  };\n\n  return ThinTexture;\n}();\n\nexport { ThinTexture };","map":{"version":3,"mappings":"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","names":["Size","internalTexture","Zero","_texture","_engine","getEngine","Object","ThinTexture","_wrapU","value","_wrapV","isCube","is3D","is2DArray","delayLoadState","delayLoad","isReady","width","_cachedSize","height","_size","_cachedBaseSize","baseWidth","baseHeight","_initialSamplingMode","samplingMode","updateTextureSamplingMode","dispose","releaseInternalTexture"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Textures/thinTexture.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport type { InternalTexture } from \"../../Materials/Textures/internalTexture\";\r\nimport { Constants } from \"../../Engines/constants\";\r\n\r\nimport type { ISize } from \"../../Maths/math.size\";\r\nimport { Size } from \"../../Maths/math.size\";\r\n\r\nimport type { ThinEngine } from \"../../Engines/thinEngine\";\r\n\r\n/**\r\n * Base class of all the textures in babylon.\r\n * It groups all the common properties required to work with Thin Engine.\r\n */\r\nexport class ThinTexture {\r\n    protected _wrapU = Constants.TEXTURE_WRAP_ADDRESSMODE;\r\n    /**\r\n     * | Value | Type               | Description |\r\n     * | ----- | ------------------ | ----------- |\r\n     * | 0     | CLAMP_ADDRESSMODE  |             |\r\n     * | 1     | WRAP_ADDRESSMODE   |             |\r\n     * | 2     | MIRROR_ADDRESSMODE |             |\r\n     */\r\n    public get wrapU() {\r\n        return this._wrapU;\r\n    }\r\n\r\n    public set wrapU(value: number) {\r\n        this._wrapU = value;\r\n    }\r\n\r\n    protected _wrapV = Constants.TEXTURE_WRAP_ADDRESSMODE;\r\n    /**\r\n     * | Value | Type               | Description |\r\n     * | ----- | ------------------ | ----------- |\r\n     * | 0     | CLAMP_ADDRESSMODE  |             |\r\n     * | 1     | WRAP_ADDRESSMODE   |             |\r\n     * | 2     | MIRROR_ADDRESSMODE |             |\r\n     */\r\n    public get wrapV() {\r\n        return this._wrapV;\r\n    }\r\n\r\n    public set wrapV(value: number) {\r\n        this._wrapV = value;\r\n    }\r\n\r\n    /**\r\n     * | Value | Type               | Description |\r\n     * | ----- | ------------------ | ----------- |\r\n     * | 0     | CLAMP_ADDRESSMODE  |             |\r\n     * | 1     | WRAP_ADDRESSMODE   |             |\r\n     * | 2     | MIRROR_ADDRESSMODE |             |\r\n     */\r\n    public wrapR = Constants.TEXTURE_WRAP_ADDRESSMODE;\r\n\r\n    /**\r\n     * With compliant hardware and browser (supporting anisotropic filtering)\r\n     * this defines the level of anisotropic filtering in the texture.\r\n     * The higher the better but the slower. This defaults to 4 as it seems to be the best tradeoff.\r\n     */\r\n    public anisotropicFilteringLevel = 4;\r\n\r\n    /**\r\n     * Define the current state of the loading sequence when in delayed load mode.\r\n     */\r\n    public delayLoadState = Constants.DELAYLOADSTATE_NONE;\r\n\r\n    /**\r\n     * How a texture is mapped.\r\n     * Unused in thin texture mode.\r\n     */\r\n    public get coordinatesMode(): number {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Define if the texture is a cube texture or if false a 2d texture.\r\n     */\r\n    public get isCube(): boolean {\r\n        if (!this._texture) {\r\n            return false;\r\n        }\r\n\r\n        return this._texture.isCube;\r\n    }\r\n\r\n    public set isCube(value: boolean) {\r\n        if (!this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._texture.isCube = value;\r\n    }\r\n\r\n    /**\r\n     * Define if the texture is a 3d texture (webgl 2) or if false a 2d texture.\r\n     */\r\n    public get is3D(): boolean {\r\n        if (!this._texture) {\r\n            return false;\r\n        }\r\n\r\n        return this._texture.is3D;\r\n    }\r\n\r\n    public set is3D(value: boolean) {\r\n        if (!this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._texture.is3D = value;\r\n    }\r\n\r\n    /**\r\n     * Define if the texture is a 2d array texture (webgl 2) or if false a 2d texture.\r\n     */\r\n    public get is2DArray(): boolean {\r\n        if (!this._texture) {\r\n            return false;\r\n        }\r\n\r\n        return this._texture.is2DArray;\r\n    }\r\n\r\n    public set is2DArray(value: boolean) {\r\n        if (!this._texture) {\r\n            return;\r\n        }\r\n\r\n        this._texture.is2DArray = value;\r\n    }\r\n\r\n    /**\r\n     * Get the class name of the texture.\r\n     * @returns \"ThinTexture\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"ThinTexture\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _texture: Nullable<InternalTexture> = null;\r\n\r\n    protected _engine: Nullable<ThinEngine> = null;\r\n\r\n    private _cachedSize: ISize = Size.Zero();\r\n    private _cachedBaseSize: ISize = Size.Zero();\r\n\r\n    /**\r\n     * Instantiates a new ThinTexture.\r\n     * Base class of all the textures in babylon.\r\n     * This can be used as an internal texture wrapper in ThinEngine to benefit from the cache\r\n     * @param internalTexture Define the internalTexture to wrap\r\n     */\r\n    constructor(internalTexture: Nullable<InternalTexture>) {\r\n        this._texture = internalTexture;\r\n        if (this._texture) {\r\n            this._engine = this._texture.getEngine();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get if the texture is ready to be used (downloaded, converted, mip mapped...).\r\n     * @returns true if fully ready\r\n     */\r\n    public isReady(): boolean {\r\n        if (this.delayLoadState === Constants.DELAYLOADSTATE_NOTLOADED) {\r\n            this.delayLoad();\r\n            return false;\r\n        }\r\n\r\n        if (this._texture) {\r\n            return this._texture.isReady;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Triggers the load sequence in delayed load mode.\r\n     */\r\n    public delayLoad(): void {}\r\n\r\n    /**\r\n     * Get the underlying lower level texture from Babylon.\r\n     * @returns the internal texture\r\n     */\r\n    public getInternalTexture(): Nullable<InternalTexture> {\r\n        return this._texture;\r\n    }\r\n\r\n    /**\r\n     * Get the size of the texture.\r\n     * @returns the texture size.\r\n     */\r\n    public getSize(): ISize {\r\n        if (this._texture) {\r\n            if (this._texture.width) {\r\n                this._cachedSize.width = this._texture.width;\r\n                this._cachedSize.height = this._texture.height;\r\n                return this._cachedSize;\r\n            }\r\n\r\n            if (this._texture._size) {\r\n                this._cachedSize.width = this._texture._size;\r\n                this._cachedSize.height = this._texture._size;\r\n                return this._cachedSize;\r\n            }\r\n        }\r\n\r\n        return this._cachedSize;\r\n    }\r\n\r\n    /**\r\n     * Get the base size of the texture.\r\n     * It can be different from the size if the texture has been resized for POT for instance\r\n     * @returns the base size\r\n     */\r\n    public getBaseSize(): ISize {\r\n        if (!this.isReady() || !this._texture) {\r\n            this._cachedBaseSize.width = 0;\r\n            this._cachedBaseSize.height = 0;\r\n            return this._cachedBaseSize;\r\n        }\r\n\r\n        if (this._texture._size) {\r\n            this._cachedBaseSize.width = this._texture._size;\r\n            this._cachedBaseSize.height = this._texture._size;\r\n            return this._cachedBaseSize;\r\n        }\r\n\r\n        this._cachedBaseSize.width = this._texture.baseWidth;\r\n        this._cachedBaseSize.height = this._texture.baseHeight;\r\n        return this._cachedBaseSize;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _initialSamplingMode = Constants.TEXTURE_BILINEAR_SAMPLINGMODE;\r\n\r\n    /**\r\n     * Get the current sampling mode associated with the texture.\r\n     */\r\n    public get samplingMode(): number {\r\n        if (!this._texture) {\r\n            return this._initialSamplingMode;\r\n        }\r\n\r\n        return this._texture.samplingMode;\r\n    }\r\n\r\n    /**\r\n     * Update the sampling mode of the texture.\r\n     * Default is Trilinear mode.\r\n     *\r\n     * | Value | Type               | Description |\r\n     * | ----- | ------------------ | ----------- |\r\n     * | 1     | NEAREST_SAMPLINGMODE or NEAREST_NEAREST_MIPLINEAR  | Nearest is: mag = nearest, min = nearest, mip = linear |\r\n     * | 2     | BILINEAR_SAMPLINGMODE or LINEAR_LINEAR_MIPNEAREST | Bilinear is: mag = linear, min = linear, mip = nearest |\r\n     * | 3     | TRILINEAR_SAMPLINGMODE or LINEAR_LINEAR_MIPLINEAR | Trilinear is: mag = linear, min = linear, mip = linear |\r\n     * | 4     | NEAREST_NEAREST_MIPNEAREST |             |\r\n     * | 5    | NEAREST_LINEAR_MIPNEAREST |             |\r\n     * | 6    | NEAREST_LINEAR_MIPLINEAR |             |\r\n     * | 7    | NEAREST_LINEAR |             |\r\n     * | 8    | NEAREST_NEAREST |             |\r\n     * | 9   | LINEAR_NEAREST_MIPNEAREST |             |\r\n     * | 10   | LINEAR_NEAREST_MIPLINEAR |             |\r\n     * | 11   | LINEAR_LINEAR |             |\r\n     * | 12   | LINEAR_NEAREST |             |\r\n     *\r\n     *    > _mag_: magnification filter (close to the viewer)\r\n     *    > _min_: minification filter (far from the viewer)\r\n     *    > _mip_: filter used between mip map levels\r\n     *@param samplingMode Define the new sampling mode of the texture\r\n     */\r\n    public updateSamplingMode(samplingMode: number): void {\r\n        if (this._texture && this._engine) {\r\n            this._engine.updateTextureSamplingMode(samplingMode, this._texture);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release and destroy the underlying lower level texture aka internalTexture.\r\n     */\r\n    public releaseInternalTexture(): void {\r\n        if (this._texture) {\r\n            this._texture.dispose();\r\n            this._texture = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose the texture and release its associated resources.\r\n     */\r\n    public dispose(): void {\r\n        if (this._texture) {\r\n            this.releaseInternalTexture();\r\n            this._engine = null;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}