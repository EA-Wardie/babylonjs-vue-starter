{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { __awaiter, __extends, __generator } from \"tslib\";\nimport { Tools } from \"../../Misc/tools.js\";\nimport { WebXRFeatureName, WebXRFeaturesManager } from \"../webXRFeaturesManager.js\";\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature.js\";\n/**\n * DOM Overlay Feature\n *\n * @since 5.0.0\n */\n\nvar WebXRDomOverlay =\n/** @class */\nfunction (_super) {\n  __extends(WebXRDomOverlay, _super);\n  /**\n   * Creates a new instance of the dom-overlay feature\n   * @param _xrSessionManager an instance of WebXRSessionManager\n   * @param options options to use when constructing this feature\n   */\n\n\n  function WebXRDomOverlay(_xrSessionManager,\n  /**\n   * options to use when constructing this feature\n   */\n  options) {\n    var _this = _super.call(this, _xrSessionManager) || this;\n\n    _this.options = options;\n    /**\n     * Type of overlay - non-null when available\n     */\n\n    _this._domOverlayType = null;\n    /**\n     * Event Listener to supress \"beforexrselect\" events.\n     */\n\n    _this._beforeXRSelectListener = null;\n    /**\n     * Element used for overlay\n     */\n\n    _this._element = null;\n    _this.xrNativeFeatureName = \"dom-overlay\"; // https://immersive-web.github.io/dom-overlays/\n\n    Tools.Warn(\"dom-overlay is an experimental and unstable feature.\");\n    return _this;\n  }\n  /**\n   * attach this feature\n   * Will usually be called by the features manager\n   *\n   * @returns true if successful.\n   */\n\n\n  WebXRDomOverlay.prototype.attach = function () {\n    if (!_super.prototype.attach.call(this)) {\n      return false;\n    } // Feature not available\n\n\n    if (!this._xrSessionManager.session.domOverlayState || this._xrSessionManager.session.domOverlayState.type === null) {\n      return false;\n    }\n\n    this._domOverlayType = this._xrSessionManager.session.domOverlayState.type;\n\n    if (this._element !== null && this.options.supressXRSelectEvents === true) {\n      this._beforeXRSelectListener = function (ev) {\n        ev.preventDefault();\n      };\n\n      this._element.addEventListener(\"beforexrselect\", this._beforeXRSelectListener);\n    }\n\n    return true;\n  };\n\n  Object.defineProperty(WebXRDomOverlay.prototype, \"domOverlayType\", {\n    /**\n     * The type of DOM overlay (null when not supported).  Provided by UA and remains unchanged for duration of session.\n     */\n    get: function get() {\n      return this._domOverlayType;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Dispose this feature and all of the resources attached\n   */\n\n  WebXRDomOverlay.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    if (this._element !== null && this._beforeXRSelectListener) {\n      this._element.removeEventListener(\"beforexrselect\", this._beforeXRSelectListener);\n    }\n  };\n\n  WebXRDomOverlay.prototype._onXRFrame = function (_xrFrame) {\n    /* empty */\n  };\n  /**\n   * Extends the session init object if needed\n   * @returns augmentation object for the xr session init object.\n   */\n\n\n  WebXRDomOverlay.prototype.getXRSessionInitExtension = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var selectedElement;\n      return __generator(this, function (_a) {\n        if (this.options.element === undefined) {\n          Tools.Warn('\"element\" option must be provided to attach xr-dom-overlay feature.');\n          return [2\n          /*return*/\n          , {}];\n        } else if (typeof this.options.element === \"string\") {\n          selectedElement = document.querySelector(this.options.element);\n\n          if (selectedElement === null) {\n            Tools.Warn(\"element not found '\".concat(this.options.element, \"' (not requesting xr-dom-overlay)\"));\n            return [2\n            /*return*/\n            , {}];\n          }\n\n          this._element = selectedElement;\n        } else {\n          this._element = this.options.element;\n        }\n\n        return [2\n        /*return*/\n        , {\n          domOverlay: {\n            root: this._element\n          }\n        }];\n      });\n    });\n  };\n  /**\n   * The module's name\n   */\n\n\n  WebXRDomOverlay.Name = WebXRFeatureName.DOM_OVERLAY;\n  /**\n   * The (Babylon) version of this module.\n   * This is an integer representing the implementation version.\n   * This number does not correspond to the WebXR specs version\n   */\n\n  WebXRDomOverlay.Version = 1;\n  return WebXRDomOverlay;\n}(WebXRAbstractFeature);\n\nexport { WebXRDomOverlay }; //register the plugin\n\nWebXRFeaturesManager.AddWebXRFeature(WebXRDomOverlay.Name, function (xrSessionManager, options) {\n  return function () {\n    return new WebXRDomOverlay(xrSessionManager, options);\n  };\n}, WebXRDomOverlay.Version, false);","map":{"version":3,"mappings":"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","names":["Tools","WebXRFeatureName","WebXRFeaturesManager","WebXRAbstractFeature","__extends","_xrSessionManager","options","_super","_this","xrNativeFeatureName","Warn","WebXRDomOverlay","attach","call","session","domOverlayState","type","_domOverlayType","_element","supressXRSelectEvents","_beforeXRSelectListener","ev","preventDefault","addEventListener","Object","dispose","removeEventListener","_xrFrame","element","undefined","selectedElement","document","querySelector","domOverlay","root","DOM_OVERLAY","AddWebXRFeature","Name","xrSessionManager","Version"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/XR/features/WebXRDOMOverlay.ts"],"sourcesContent":["import { Tools } from \"../../Misc/tools\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { WebXRFeatureName, WebXRFeaturesManager } from \"../webXRFeaturesManager\";\r\nimport type { WebXRSessionManager } from \"../webXRSessionManager\";\r\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature\";\r\n\r\n/**\r\n * Options for DOM Overlay feature\r\n */\r\nexport interface IWebXRDomOverlayOptions {\r\n    /**\r\n     * DOM Element or document query selector string for overlay.\r\n     *\r\n     * NOTE: UA may make this element background transparent in XR.\r\n     */\r\n    element: Element | string;\r\n    /**\r\n     * Supress XR Select events on container element (DOM blocks interaction to scene).\r\n     */\r\n    supressXRSelectEvents?: boolean;\r\n}\r\n\r\n/**\r\n * Type of DOM overlay provided by UA.\r\n */\r\ntype WebXRDomOverlayType =\r\n    /**\r\n     * Covers the entire physical screen for a screen-based device, for example handheld AR\r\n     */\r\n    | \"screen\"\r\n    /**\r\n     * Appears as a floating rectangle in space\r\n     */\r\n    | \"floating\"\r\n    /**\r\n     * Follows the userâ€™s head movement consistently, appearing similar to a HUD\r\n     */\r\n    | \"head-locked\";\r\n\r\n/**\r\n * DOM Overlay Feature\r\n *\r\n * @since 5.0.0\r\n */\r\nexport class WebXRDomOverlay extends WebXRAbstractFeature {\r\n    /**\r\n     * Type of overlay - non-null when available\r\n     */\r\n    private _domOverlayType: Nullable<WebXRDomOverlayType> = null;\r\n\r\n    /**\r\n     * Event Listener to supress \"beforexrselect\" events.\r\n     */\r\n    private _beforeXRSelectListener: Nullable<EventListenerOrEventListenerObject> = null;\r\n\r\n    /**\r\n     * Element used for overlay\r\n     */\r\n    private _element: Nullable<Element> = null;\r\n\r\n    /**\r\n     * The module's name\r\n     */\r\n    public static readonly Name = WebXRFeatureName.DOM_OVERLAY;\r\n    /**\r\n     * The (Babylon) version of this module.\r\n     * This is an integer representing the implementation version.\r\n     * This number does not correspond to the WebXR specs version\r\n     */\r\n    public static readonly Version = 1;\r\n\r\n    /**\r\n     * Creates a new instance of the dom-overlay feature\r\n     * @param _xrSessionManager an instance of WebXRSessionManager\r\n     * @param options options to use when constructing this feature\r\n     */\r\n    constructor(\r\n        _xrSessionManager: WebXRSessionManager,\r\n        /**\r\n         * options to use when constructing this feature\r\n         */\r\n        public readonly options: IWebXRDomOverlayOptions\r\n    ) {\r\n        super(_xrSessionManager);\r\n        this.xrNativeFeatureName = \"dom-overlay\";\r\n\r\n        // https://immersive-web.github.io/dom-overlays/\r\n        Tools.Warn(\"dom-overlay is an experimental and unstable feature.\");\r\n    }\r\n\r\n    /**\r\n     * attach this feature\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    public attach(): boolean {\r\n        if (!super.attach()) {\r\n            return false;\r\n        }\r\n\r\n        // Feature not available\r\n        if (!this._xrSessionManager.session.domOverlayState || this._xrSessionManager.session.domOverlayState.type === null) {\r\n            return false;\r\n        }\r\n\r\n        this._domOverlayType = this._xrSessionManager.session.domOverlayState.type;\r\n\r\n        if (this._element !== null && this.options.supressXRSelectEvents === true) {\r\n            this._beforeXRSelectListener = (ev) => {\r\n                ev.preventDefault();\r\n            };\r\n            this._element.addEventListener(\"beforexrselect\", this._beforeXRSelectListener);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * The type of DOM overlay (null when not supported).  Provided by UA and remains unchanged for duration of session.\r\n     */\r\n    public get domOverlayType(): Nullable<WebXRDomOverlayType> {\r\n        return this._domOverlayType;\r\n    }\r\n\r\n    /**\r\n     * Dispose this feature and all of the resources attached\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n        if (this._element !== null && this._beforeXRSelectListener) {\r\n            this._element.removeEventListener(\"beforexrselect\", this._beforeXRSelectListener);\r\n        }\r\n    }\r\n\r\n    protected _onXRFrame(_xrFrame: XRFrame): void {\r\n        /* empty */\r\n    }\r\n\r\n    /**\r\n     * Extends the session init object if needed\r\n     * @returns augmentation object for the xr session init object.\r\n     */\r\n    public async getXRSessionInitExtension(): Promise<Partial<XRSessionInit>> {\r\n        if (this.options.element === undefined) {\r\n            Tools.Warn('\"element\" option must be provided to attach xr-dom-overlay feature.');\r\n            return {};\r\n        } else if (typeof this.options.element === \"string\") {\r\n            const selectedElement = document.querySelector(this.options.element);\r\n            if (selectedElement === null) {\r\n                Tools.Warn(`element not found '${this.options.element}' (not requesting xr-dom-overlay)`);\r\n                return {};\r\n            }\r\n            this._element = selectedElement;\r\n        } else {\r\n            this._element = this.options.element;\r\n        }\r\n\r\n        return {\r\n            domOverlay: {\r\n                root: this._element,\r\n            },\r\n        };\r\n    }\r\n}\r\n\r\n//register the plugin\r\nWebXRFeaturesManager.AddWebXRFeature(\r\n    WebXRDomOverlay.Name,\r\n    (xrSessionManager, options) => {\r\n        return () => new WebXRDomOverlay(xrSessionManager, options);\r\n    },\r\n    WebXRDomOverlay.Version,\r\n    false\r\n);\r\n"]},"metadata":{},"sourceType":"module"}