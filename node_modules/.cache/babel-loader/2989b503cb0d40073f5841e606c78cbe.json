{"ast":null,"code":"import \"core-js/modules/es.function.bind.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { ArcRotateCameraInputsManager } from \"../../Cameras/arcRotateCameraInputsManager.js\";\nimport { Tools } from \"../../Misc/tools.js\";\n/**\n * Add orientation input support to the input manager.\n * @returns the current input manager\n */\n\nArcRotateCameraInputsManager.prototype.addVRDeviceOrientation = function () {\n  this.add(new ArcRotateCameraVRDeviceOrientationInput());\n  return this;\n};\n/**\n * Manage the device orientation inputs (gyroscope) to control an arc rotate camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\n\n\nvar ArcRotateCameraVRDeviceOrientationInput =\n/** @class */\nfunction () {\n  /**\n   * Instantiate a new ArcRotateCameraVRDeviceOrientationInput.\n   */\n  function ArcRotateCameraVRDeviceOrientationInput() {\n    /**\n     * Defines a correction factor applied on the alpha value retrieved from the orientation events.\n     */\n    this.alphaCorrection = 1;\n    /**\n     * Defines a correction factor applied on the gamma value retrieved from the orientation events.\n     */\n\n    this.gammaCorrection = 1;\n    this._alpha = 0;\n    this._gamma = 0;\n    this._dirty = false;\n    this._deviceOrientationHandler = this._onOrientationEvent.bind(this);\n  }\n  /**\n   * Attach the input controls to a specific dom element to get the input from.\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n   */\n\n\n  ArcRotateCameraVRDeviceOrientationInput.prototype.attachControl = function (noPreventDefault) {\n    var _this = this; // eslint-disable-next-line prefer-rest-params\n\n\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n    this.camera.attachControl(noPreventDefault);\n    var hostWindow = this.camera.getScene().getEngine().getHostWindow();\n\n    if (hostWindow) {\n      // check iOS 13+ support\n      if (typeof DeviceOrientationEvent !== \"undefined\" && typeof DeviceOrientationEvent.requestPermission === \"function\") {\n        DeviceOrientationEvent.requestPermission().then(function (response) {\n          if (response === \"granted\") {\n            hostWindow.addEventListener(\"deviceorientation\", _this._deviceOrientationHandler);\n          } else {\n            Tools.Warn(\"Permission not granted.\");\n          }\n        })[\"catch\"](function (error) {\n          Tools.Error(error);\n        });\n      } else {\n        hostWindow.addEventListener(\"deviceorientation\", this._deviceOrientationHandler);\n      }\n    }\n  };\n  /**\n   * @param evt\n   * @hidden\n   */\n\n\n  ArcRotateCameraVRDeviceOrientationInput.prototype._onOrientationEvent = function (evt) {\n    if (evt.alpha !== null) {\n      this._alpha = (+evt.alpha | 0) * this.alphaCorrection;\n    }\n\n    if (evt.gamma !== null) {\n      this._gamma = (+evt.gamma | 0) * this.gammaCorrection;\n    }\n\n    this._dirty = true;\n  };\n  /**\n   * Update the current camera state depending on the inputs that have been used this frame.\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n   */\n\n\n  ArcRotateCameraVRDeviceOrientationInput.prototype.checkInputs = function () {\n    if (this._dirty) {\n      this._dirty = false;\n\n      if (this._gamma < 0) {\n        this._gamma = 180 + this._gamma;\n      }\n\n      this.camera.alpha = -this._alpha / 180.0 * Math.PI % Math.PI * 2;\n      this.camera.beta = this._gamma / 180.0 * Math.PI;\n    }\n  };\n  /**\n   * Detach the current controls from the specified dom element.\n   */\n\n\n  ArcRotateCameraVRDeviceOrientationInput.prototype.detachControl = function () {\n    window.removeEventListener(\"deviceorientation\", this._deviceOrientationHandler);\n  };\n  /**\n   * Gets the class name of the current input.\n   * @returns the class name\n   */\n\n\n  ArcRotateCameraVRDeviceOrientationInput.prototype.getClassName = function () {\n    return \"ArcRotateCameraVRDeviceOrientationInput\";\n  };\n  /**\n   * Get the friendly name associated with the input class.\n   * @returns the input friendly name\n   */\n\n\n  ArcRotateCameraVRDeviceOrientationInput.prototype.getSimpleName = function () {\n    return \"VRDeviceOrientation\";\n  };\n\n  return ArcRotateCameraVRDeviceOrientationInput;\n}();\n\nexport { ArcRotateCameraVRDeviceOrientationInput };\nCameraInputTypes[\"ArcRotateCameraVRDeviceOrientationInput\"] = ArcRotateCameraVRDeviceOrientationInput;","map":{"version":3,"mappings":"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","names":["CameraInputTypes","ArcRotateCameraInputsManager","Tools","prototype","addVRDeviceOrientation","add","ArcRotateCameraVRDeviceOrientationInput","_deviceOrientationHandler","_onOrientationEvent","bind","noPreventDefault","BackCompatCameraNoPreventDefault","arguments","camera","attachControl","hostWindow","getScene","getEngine","getHostWindow","DeviceOrientationEvent","requestPermission","then","response","addEventListener","_this","Warn","error","Error","evt","alpha","_alpha","alphaCorrection","gamma","_gamma","gammaCorrection","_dirty","Math","PI","beta","window","removeEventListener"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Cameras/Inputs/arcRotateCameraVRDeviceOrientationInput.ts"],"sourcesContent":["import type { ArcRotateCamera } from \"../../Cameras/arcRotateCamera\";\r\nimport type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport { ArcRotateCameraInputsManager } from \"../../Cameras/arcRotateCameraInputsManager\";\r\nimport { Tools } from \"../../Misc/tools\";\r\n\r\n// Module augmentation to abstract orientation inputs from camera.\r\ndeclare module \"../../Cameras/arcRotateCameraInputsManager\" {\r\n    export interface ArcRotateCameraInputsManager {\r\n        /**\r\n         * Add orientation input support to the input manager.\r\n         * @returns the current input manager\r\n         */\r\n        addVRDeviceOrientation(): ArcRotateCameraInputsManager;\r\n    }\r\n}\r\n\r\n/**\r\n * Add orientation input support to the input manager.\r\n * @returns the current input manager\r\n */\r\nArcRotateCameraInputsManager.prototype.addVRDeviceOrientation = function (): ArcRotateCameraInputsManager {\r\n    this.add(new ArcRotateCameraVRDeviceOrientationInput());\r\n    return this;\r\n};\r\n\r\n/**\r\n * Manage the device orientation inputs (gyroscope) to control an arc rotate camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class ArcRotateCameraVRDeviceOrientationInput implements ICameraInput<ArcRotateCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: ArcRotateCamera;\r\n\r\n    /**\r\n     * Defines a correction factor applied on the alpha value retrieved from the orientation events.\r\n     */\r\n    public alphaCorrection = 1;\r\n\r\n    /**\r\n     * Defines a correction factor applied on the gamma value retrieved from the orientation events.\r\n     */\r\n    public gammaCorrection = 1;\r\n\r\n    private _alpha = 0;\r\n    private _gamma = 0;\r\n    private _dirty = false;\r\n\r\n    private _deviceOrientationHandler: () => void;\r\n\r\n    /**\r\n     * Instantiate a new ArcRotateCameraVRDeviceOrientationInput.\r\n     */\r\n    constructor() {\r\n        this._deviceOrientationHandler = this._onOrientationEvent.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        // eslint-disable-next-line prefer-rest-params\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n\r\n        this.camera.attachControl(noPreventDefault);\r\n\r\n        const hostWindow = this.camera.getScene().getEngine().getHostWindow();\r\n\r\n        if (hostWindow) {\r\n            // check iOS 13+ support\r\n            if (typeof DeviceOrientationEvent !== \"undefined\" && typeof (<any>DeviceOrientationEvent).requestPermission === \"function\") {\r\n                (<any>DeviceOrientationEvent)\r\n                    .requestPermission()\r\n                    .then((response: string) => {\r\n                        if (response === \"granted\") {\r\n                            hostWindow!.addEventListener(\"deviceorientation\", this._deviceOrientationHandler);\r\n                        } else {\r\n                            Tools.Warn(\"Permission not granted.\");\r\n                        }\r\n                    })\r\n                    .catch((error: any) => {\r\n                        Tools.Error(error);\r\n                    });\r\n            } else {\r\n                hostWindow.addEventListener(\"deviceorientation\", this._deviceOrientationHandler);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param evt\r\n     * @hidden\r\n     */\r\n    public _onOrientationEvent(evt: DeviceOrientationEvent): void {\r\n        if (evt.alpha !== null) {\r\n            this._alpha = (+evt.alpha | 0) * this.alphaCorrection;\r\n        }\r\n\r\n        if (evt.gamma !== null) {\r\n            this._gamma = (+evt.gamma | 0) * this.gammaCorrection;\r\n        }\r\n        this._dirty = true;\r\n    }\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs(): void {\r\n        if (this._dirty) {\r\n            this._dirty = false;\r\n\r\n            if (this._gamma < 0) {\r\n                this._gamma = 180 + this._gamma;\r\n            }\r\n\r\n            this.camera.alpha = (((-this._alpha / 180.0) * Math.PI) % Math.PI) * 2;\r\n            this.camera.beta = (this._gamma / 180.0) * Math.PI;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        window.removeEventListener(\"deviceorientation\", this._deviceOrientationHandler);\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"ArcRotateCameraVRDeviceOrientationInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"VRDeviceOrientation\";\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"ArcRotateCameraVRDeviceOrientationInput\"] = ArcRotateCameraVRDeviceOrientationInput;\r\n"]},"metadata":{},"sourceType":"module"}