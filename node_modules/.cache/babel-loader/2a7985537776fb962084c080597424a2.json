{"ast":null,"code":"import { Observable } from \"../../Misc/observable.js\";\n/**\n * Class that handles all input for a specific device\n */\n\nvar DeviceSource =\n/** @class */\nfunction () {\n  /**\n   * Default Constructor\n   * @param deviceInputSystem - Reference to DeviceInputSystem\n   * @param deviceType - Type of device\n   * @param deviceSlot - \"Slot\" or index that device is referenced in\n   */\n  function DeviceSource(deviceInputSystem,\n  /** Type of device */\n  deviceType,\n  /** \"Slot\" or index that device is referenced in */\n  deviceSlot) {\n    if (deviceSlot === void 0) {\n      deviceSlot = 0;\n    }\n\n    this.deviceType = deviceType;\n    this.deviceSlot = deviceSlot; // Public Members\n\n    /**\n     * Observable to handle device input changes per device\n     */\n\n    this.onInputChangedObservable = new Observable();\n    this._deviceInputSystem = deviceInputSystem;\n  }\n  /**\n   * Get input for specific input\n   * @param inputIndex - index of specific input on device\n   * @returns Input value from DeviceInputSystem\n   */\n\n\n  DeviceSource.prototype.getInput = function (inputIndex) {\n    return this._deviceInputSystem.pollInput(this.deviceType, this.deviceSlot, inputIndex);\n  };\n\n  return DeviceSource;\n}();\n\nexport { DeviceSource };","map":{"version":3,"mappings":"AACA,SAASA,UAAT,QAA2B,0BAA3B;AAgBA;;;;AAGA;AAAA;AAAA;AAUI;;;;;;AAMA,wBACIC,iBADJ;AAEI;AACgBC,YAHpB;AAII;AACgBC,YALpB,EAK0C;AAAtB;AAAAA;AAAsB;;AAFtB;AAEA,iCAAsB,CApB1C;;AACA;;;;AAGgB,oCAA2B,IAAIH,UAAJ,EAA3B;AAkBZ,SAAKI,kBAAL,GAA0BH,iBAA1B;AACH;AAED;;;;;;;AAKOI,oCAAP,UAAgBC,UAAhB,EAA0C;AACtC,WAAO,KAAKF,kBAAL,CAAwBG,SAAxB,CAAkC,KAAKL,UAAvC,EAAmD,KAAKC,UAAxD,EAAoEG,UAApE,CAAP;AACH,GAFM;;AAGX;AAAC,CAlCD","names":["Observable","deviceInputSystem","deviceType","deviceSlot","_deviceInputSystem","DeviceSource","inputIndex","pollInput"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/DeviceInput/InputDevices/deviceSource.ts"],"sourcesContent":["import type { DeviceType } from \"./deviceEnums\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport type { DeviceInput } from \"./deviceTypes\";\r\nimport type { IDeviceInputSystem } from \"./inputInterfaces\";\r\nimport type { IKeyboardEvent, IPointerEvent, IWheelEvent } from \"../../Events/deviceInputEvents\";\r\n\r\n/**\r\n * Subset of DeviceInput that only handles pointers and keyboard\r\n */\r\nexport type DeviceSourceEvent<T extends DeviceType> = T extends DeviceType.Keyboard\r\n    ? IKeyboardEvent\r\n    : T extends DeviceType.Mouse\r\n    ? IWheelEvent | IPointerEvent\r\n    : T extends DeviceType.Touch\r\n    ? IPointerEvent\r\n    : never;\r\n\r\n/**\r\n * Class that handles all input for a specific device\r\n */\r\nexport class DeviceSource<T extends DeviceType> {\r\n    // Public Members\r\n    /**\r\n     * Observable to handle device input changes per device\r\n     */\r\n    public readonly onInputChangedObservable = new Observable<DeviceSourceEvent<T>>();\r\n\r\n    // Private Members\r\n    private readonly _deviceInputSystem: IDeviceInputSystem;\r\n\r\n    /**\r\n     * Default Constructor\r\n     * @param deviceInputSystem - Reference to DeviceInputSystem\r\n     * @param deviceType - Type of device\r\n     * @param deviceSlot - \"Slot\" or index that device is referenced in\r\n     */\r\n    constructor(\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        /** Type of device */\r\n        public readonly deviceType: T,\r\n        /** \"Slot\" or index that device is referenced in */\r\n        public readonly deviceSlot: number = 0\r\n    ) {\r\n        this._deviceInputSystem = deviceInputSystem;\r\n    }\r\n\r\n    /**\r\n     * Get input for specific input\r\n     * @param inputIndex - index of specific input on device\r\n     * @returns Input value from DeviceInputSystem\r\n     */\r\n    public getInput(inputIndex: DeviceInput<T>): number {\r\n        return this._deviceInputSystem.pollInput(this.deviceType, this.deviceSlot, inputIndex);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}