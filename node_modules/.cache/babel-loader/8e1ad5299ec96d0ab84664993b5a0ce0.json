{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { __extends } from \"tslib\";\nimport { Observable } from \"../Misc/observable.js\";\n/**\n * Represents a gamepad control stick position\n */\n\nvar StickValues =\n/** @class */\nfunction () {\n  /**\n   * Initializes the gamepad x and y control stick values\n   * @param x The x component of the gamepad control stick value\n   * @param y The y component of the gamepad control stick value\n   */\n  function StickValues(\n  /**\n   * The x component of the control stick\n   */\n  x,\n  /**\n   * The y component of the control stick\n   */\n  y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  return StickValues;\n}();\n\nexport { StickValues };\n/**\n * Represents a gamepad\n */\n\nvar Gamepad =\n/** @class */\nfunction () {\n  /**\n   * Initializes the gamepad\n   * @param id The id of the gamepad\n   * @param index The index of the gamepad\n   * @param browserGamepad The browser gamepad\n   * @param leftStickX The x component of the left joystick\n   * @param leftStickY The y component of the left joystick\n   * @param rightStickX The x component of the right joystick\n   * @param rightStickY The y component of the right joystick\n   */\n  function Gamepad(\n  /**\n   * The id of the gamepad\n   */\n  id,\n  /**\n   * The index of the gamepad\n   */\n  index,\n  /**\n   * The browser gamepad\n   */\n  browserGamepad, leftStickX, leftStickY, rightStickX, rightStickY) {\n    if (leftStickX === void 0) {\n      leftStickX = 0;\n    }\n\n    if (leftStickY === void 0) {\n      leftStickY = 1;\n    }\n\n    if (rightStickX === void 0) {\n      rightStickX = 2;\n    }\n\n    if (rightStickY === void 0) {\n      rightStickY = 3;\n    }\n\n    this.id = id;\n    this.index = index;\n    this.browserGamepad = browserGamepad;\n    this._leftStick = {\n      x: 0,\n      y: 0\n    };\n    this._rightStick = {\n      x: 0,\n      y: 0\n    };\n    /** @hidden */\n\n    this._isConnected = true;\n    /**\n     * Specifies whether the left control stick should be Y-inverted\n     */\n\n    this._invertLeftStickY = false;\n    this.type = Gamepad.GAMEPAD;\n    this._leftStickAxisX = leftStickX;\n    this._leftStickAxisY = leftStickY;\n    this._rightStickAxisX = rightStickX;\n    this._rightStickAxisY = rightStickY;\n\n    if (this.browserGamepad.axes.length >= 2) {\n      this._leftStick = {\n        x: this.browserGamepad.axes[this._leftStickAxisX],\n        y: this.browserGamepad.axes[this._leftStickAxisY]\n      };\n    }\n\n    if (this.browserGamepad.axes.length >= 4) {\n      this._rightStick = {\n        x: this.browserGamepad.axes[this._rightStickAxisX],\n        y: this.browserGamepad.axes[this._rightStickAxisY]\n      };\n    }\n  }\n\n  Object.defineProperty(Gamepad.prototype, \"isConnected\", {\n    /**\n     * Specifies if the gamepad has been connected\n     */\n    get: function get() {\n      return this._isConnected;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Callback triggered when the left joystick has changed\n   * @param callback\n   */\n\n  Gamepad.prototype.onleftstickchanged = function (callback) {\n    this._onleftstickchanged = callback;\n  };\n  /**\n   * Callback triggered when the right joystick has changed\n   * @param callback\n   */\n\n\n  Gamepad.prototype.onrightstickchanged = function (callback) {\n    this._onrightstickchanged = callback;\n  };\n\n  Object.defineProperty(Gamepad.prototype, \"leftStick\", {\n    /**\n     * Gets the left joystick\n     */\n    get: function get() {\n      return this._leftStick;\n    },\n\n    /**\n     * Sets the left joystick values\n     */\n    set: function set(newValues) {\n      if (this._onleftstickchanged && (this._leftStick.x !== newValues.x || this._leftStick.y !== newValues.y)) {\n        this._onleftstickchanged(newValues);\n      }\n\n      this._leftStick = newValues;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Gamepad.prototype, \"rightStick\", {\n    /**\n     * Gets the right joystick\n     */\n    get: function get() {\n      return this._rightStick;\n    },\n\n    /**\n     * Sets the right joystick value\n     */\n    set: function set(newValues) {\n      if (this._onrightstickchanged && (this._rightStick.x !== newValues.x || this._rightStick.y !== newValues.y)) {\n        this._onrightstickchanged(newValues);\n      }\n\n      this._rightStick = newValues;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Updates the gamepad joystick positions\n   */\n\n  Gamepad.prototype.update = function () {\n    if (this._leftStick) {\n      this.leftStick = {\n        x: this.browserGamepad.axes[this._leftStickAxisX],\n        y: this.browserGamepad.axes[this._leftStickAxisY]\n      };\n\n      if (this._invertLeftStickY) {\n        this.leftStick.y *= -1;\n      }\n    }\n\n    if (this._rightStick) {\n      this.rightStick = {\n        x: this.browserGamepad.axes[this._rightStickAxisX],\n        y: this.browserGamepad.axes[this._rightStickAxisY]\n      };\n    }\n  };\n  /**\n   * Disposes the gamepad\n   */\n\n\n  Gamepad.prototype.dispose = function () {};\n  /**\n   * Represents a gamepad controller\n   */\n\n\n  Gamepad.GAMEPAD = 0;\n  /**\n   * Represents a generic controller\n   */\n\n  Gamepad.GENERIC = 1;\n  /**\n   * Represents an XBox controller\n   */\n\n  Gamepad.XBOX = 2;\n  /**\n   * Represents a pose-enabled controller\n   */\n\n  Gamepad.POSE_ENABLED = 3;\n  /**\n   * Represents an Dual Shock controller\n   */\n\n  Gamepad.DUALSHOCK = 4;\n  return Gamepad;\n}();\n\nexport { Gamepad };\n/**\n * Represents a generic gamepad\n */\n\nvar GenericPad =\n/** @class */\nfunction (_super) {\n  __extends(GenericPad, _super);\n  /**\n   * Initializes the generic gamepad\n   * @param id The id of the generic gamepad\n   * @param index The index of the generic gamepad\n   * @param browserGamepad The browser gamepad\n   */\n\n\n  function GenericPad(id, index, browserGamepad) {\n    var _this = _super.call(this, id, index, browserGamepad) || this;\n    /**\n     * Observable triggered when a button has been pressed\n     */\n\n\n    _this.onButtonDownObservable = new Observable();\n    /**\n     * Observable triggered when a button has been released\n     */\n\n    _this.onButtonUpObservable = new Observable();\n    _this.type = Gamepad.GENERIC;\n    _this._buttons = new Array(browserGamepad.buttons.length);\n    return _this;\n  }\n  /**\n   * Callback triggered when a button has been pressed\n   * @param callback Called when a button has been pressed\n   */\n\n\n  GenericPad.prototype.onbuttondown = function (callback) {\n    this._onbuttondown = callback;\n  };\n  /**\n   * Callback triggered when a button has been released\n   * @param callback Called when a button has been released\n   */\n\n\n  GenericPad.prototype.onbuttonup = function (callback) {\n    this._onbuttonup = callback;\n  };\n\n  GenericPad.prototype._setButtonValue = function (newValue, currentValue, buttonIndex) {\n    if (newValue !== currentValue) {\n      if (newValue === 1) {\n        if (this._onbuttondown) {\n          this._onbuttondown(buttonIndex);\n        }\n\n        this.onButtonDownObservable.notifyObservers(buttonIndex);\n      }\n\n      if (newValue === 0) {\n        if (this._onbuttonup) {\n          this._onbuttonup(buttonIndex);\n        }\n\n        this.onButtonUpObservable.notifyObservers(buttonIndex);\n      }\n    }\n\n    return newValue;\n  };\n  /**\n   * Updates the generic gamepad\n   */\n\n\n  GenericPad.prototype.update = function () {\n    _super.prototype.update.call(this);\n\n    for (var index = 0; index < this._buttons.length; index++) {\n      this._buttons[index] = this._setButtonValue(this.browserGamepad.buttons[index].value, this._buttons[index], index);\n    }\n  };\n  /**\n   * Disposes the generic gamepad\n   */\n\n\n  GenericPad.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.onButtonDownObservable.clear();\n    this.onButtonUpObservable.clear();\n  };\n\n  return GenericPad;\n}(Gamepad);\n\nexport { GenericPad };","map":{"version":3,"mappings":"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","names":["Observable","x","y","id","index","browserGamepad","leftStickX","leftStickY","rightStickX","rightStickY","type","Gamepad","GAMEPAD","_leftStickAxisX","_leftStickAxisY","_rightStickAxisX","_rightStickAxisY","axes","length","_leftStick","_rightStick","Object","_isConnected","callback","_onleftstickchanged","_onrightstickchanged","newValues","leftStick","_invertLeftStickY","rightStick","__extends","_super","_this","GENERIC","_buttons","Array","buttons","GenericPad","_onbuttondown","_onbuttonup","newValue","currentValue","buttonIndex","onButtonDownObservable","notifyObservers","onButtonUpObservable","update","call","_setButtonValue","value","dispose","clear"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Gamepads/gamepad.ts"],"sourcesContent":["import { Observable } from \"../Misc/observable\";\r\n\r\n/**\r\n * Represents a gamepad control stick position\r\n */\r\nexport class StickValues {\r\n    /**\r\n     * Initializes the gamepad x and y control stick values\r\n     * @param x The x component of the gamepad control stick value\r\n     * @param y The y component of the gamepad control stick value\r\n     */\r\n    constructor(\r\n        /**\r\n         * The x component of the control stick\r\n         */\r\n        public x: number,\r\n        /**\r\n         * The y component of the control stick\r\n         */\r\n        public y: number\r\n    ) {}\r\n}\r\n\r\n/**\r\n * An interface which manages callbacks for gamepad button changes\r\n */\r\nexport interface GamepadButtonChanges {\r\n    /**\r\n     * Called when a gamepad has been changed\r\n     */\r\n    changed: boolean;\r\n    /**\r\n     * Called when a gamepad press event has been triggered\r\n     */\r\n    pressChanged: boolean;\r\n    /**\r\n     * Called when a touch event has been triggered\r\n     */\r\n    touchChanged: boolean;\r\n    /**\r\n     * Called when a value has changed\r\n     */\r\n    valueChanged: boolean;\r\n}\r\n\r\n/**\r\n * Represents a gamepad\r\n */\r\nexport class Gamepad {\r\n    /**\r\n     * Specifies what type of gamepad this represents\r\n     */\r\n    public type: number;\r\n\r\n    private _leftStick: StickValues = { x: 0, y: 0 };\r\n    private _rightStick: StickValues = { x: 0, y: 0 };\r\n\r\n    /** @hidden */\r\n    public _isConnected = true;\r\n\r\n    private _leftStickAxisX: number;\r\n    private _leftStickAxisY: number;\r\n    private _rightStickAxisX: number;\r\n    private _rightStickAxisY: number;\r\n\r\n    /**\r\n     * Triggered when the left control stick has been changed\r\n     */\r\n    private _onleftstickchanged: (values: StickValues) => void;\r\n\r\n    /**\r\n     * Triggered when the right control stick has been changed\r\n     */\r\n    private _onrightstickchanged: (values: StickValues) => void;\r\n\r\n    /**\r\n     * Represents a gamepad controller\r\n     */\r\n    public static GAMEPAD = 0;\r\n    /**\r\n     * Represents a generic controller\r\n     */\r\n    public static GENERIC = 1;\r\n    /**\r\n     * Represents an XBox controller\r\n     */\r\n    public static XBOX = 2;\r\n    /**\r\n     * Represents a pose-enabled controller\r\n     */\r\n    public static POSE_ENABLED = 3;\r\n    /**\r\n     * Represents an Dual Shock controller\r\n     */\r\n    public static DUALSHOCK = 4;\r\n\r\n    /**\r\n     * Specifies whether the left control stick should be Y-inverted\r\n     */\r\n    protected _invertLeftStickY: boolean = false;\r\n\r\n    /**\r\n     * Specifies if the gamepad has been connected\r\n     */\r\n    public get isConnected(): boolean {\r\n        return this._isConnected;\r\n    }\r\n\r\n    /**\r\n     * Initializes the gamepad\r\n     * @param id The id of the gamepad\r\n     * @param index The index of the gamepad\r\n     * @param browserGamepad The browser gamepad\r\n     * @param leftStickX The x component of the left joystick\r\n     * @param leftStickY The y component of the left joystick\r\n     * @param rightStickX The x component of the right joystick\r\n     * @param rightStickY The y component of the right joystick\r\n     */\r\n    constructor(\r\n        /**\r\n         * The id of the gamepad\r\n         */\r\n        public id: string,\r\n        /**\r\n         * The index of the gamepad\r\n         */\r\n        public index: number,\r\n        /**\r\n         * The browser gamepad\r\n         */\r\n        public browserGamepad: any,\r\n        leftStickX: number = 0,\r\n        leftStickY: number = 1,\r\n        rightStickX: number = 2,\r\n        rightStickY: number = 3\r\n    ) {\r\n        this.type = Gamepad.GAMEPAD;\r\n        this._leftStickAxisX = leftStickX;\r\n        this._leftStickAxisY = leftStickY;\r\n        this._rightStickAxisX = rightStickX;\r\n        this._rightStickAxisY = rightStickY;\r\n        if (this.browserGamepad.axes.length >= 2) {\r\n            this._leftStick = { x: this.browserGamepad.axes[this._leftStickAxisX], y: this.browserGamepad.axes[this._leftStickAxisY] };\r\n        }\r\n        if (this.browserGamepad.axes.length >= 4) {\r\n            this._rightStick = { x: this.browserGamepad.axes[this._rightStickAxisX], y: this.browserGamepad.axes[this._rightStickAxisY] };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback triggered when the left joystick has changed\r\n     * @param callback\r\n     */\r\n    public onleftstickchanged(callback: (values: StickValues) => void) {\r\n        this._onleftstickchanged = callback;\r\n    }\r\n\r\n    /**\r\n     * Callback triggered when the right joystick has changed\r\n     * @param callback\r\n     */\r\n    public onrightstickchanged(callback: (values: StickValues) => void) {\r\n        this._onrightstickchanged = callback;\r\n    }\r\n\r\n    /**\r\n     * Gets the left joystick\r\n     */\r\n    public get leftStick(): StickValues {\r\n        return this._leftStick;\r\n    }\r\n    /**\r\n     * Sets the left joystick values\r\n     */\r\n    public set leftStick(newValues: StickValues) {\r\n        if (this._onleftstickchanged && (this._leftStick.x !== newValues.x || this._leftStick.y !== newValues.y)) {\r\n            this._onleftstickchanged(newValues);\r\n        }\r\n        this._leftStick = newValues;\r\n    }\r\n    /**\r\n     * Gets the right joystick\r\n     */\r\n    public get rightStick(): StickValues {\r\n        return this._rightStick;\r\n    }\r\n    /**\r\n     * Sets the right joystick value\r\n     */\r\n    public set rightStick(newValues: StickValues) {\r\n        if (this._onrightstickchanged && (this._rightStick.x !== newValues.x || this._rightStick.y !== newValues.y)) {\r\n            this._onrightstickchanged(newValues);\r\n        }\r\n        this._rightStick = newValues;\r\n    }\r\n\r\n    /**\r\n     * Updates the gamepad joystick positions\r\n     */\r\n\r\n    public update() {\r\n        if (this._leftStick) {\r\n            this.leftStick = { x: this.browserGamepad.axes[this._leftStickAxisX], y: this.browserGamepad.axes[this._leftStickAxisY] };\r\n            if (this._invertLeftStickY) {\r\n                this.leftStick.y *= -1;\r\n            }\r\n        }\r\n        if (this._rightStick) {\r\n            this.rightStick = { x: this.browserGamepad.axes[this._rightStickAxisX], y: this.browserGamepad.axes[this._rightStickAxisY] };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the gamepad\r\n     */\r\n    public dispose() {}\r\n}\r\n\r\n/**\r\n * Represents a generic gamepad\r\n */\r\nexport class GenericPad extends Gamepad {\r\n    private _buttons: Array<number>;\r\n    private _onbuttondown: (buttonPressed: number) => void;\r\n    private _onbuttonup: (buttonReleased: number) => void;\r\n\r\n    /**\r\n     * Observable triggered when a button has been pressed\r\n     */\r\n    public onButtonDownObservable = new Observable<number>();\r\n    /**\r\n     * Observable triggered when a button has been released\r\n     */\r\n    public onButtonUpObservable = new Observable<number>();\r\n\r\n    /**\r\n     * Callback triggered when a button has been pressed\r\n     * @param callback Called when a button has been pressed\r\n     */\r\n    public onbuttondown(callback: (buttonPressed: number) => void) {\r\n        this._onbuttondown = callback;\r\n    }\r\n    /**\r\n     * Callback triggered when a button has been released\r\n     * @param callback Called when a button has been released\r\n     */\r\n    public onbuttonup(callback: (buttonReleased: number) => void) {\r\n        this._onbuttonup = callback;\r\n    }\r\n\r\n    /**\r\n     * Initializes the generic gamepad\r\n     * @param id The id of the generic gamepad\r\n     * @param index The index of the generic gamepad\r\n     * @param browserGamepad The browser gamepad\r\n     */\r\n    constructor(id: string, index: number, browserGamepad: any) {\r\n        super(id, index, browserGamepad);\r\n        this.type = Gamepad.GENERIC;\r\n        this._buttons = new Array(browserGamepad.buttons.length);\r\n    }\r\n\r\n    private _setButtonValue(newValue: number, currentValue: number, buttonIndex: number): number {\r\n        if (newValue !== currentValue) {\r\n            if (newValue === 1) {\r\n                if (this._onbuttondown) {\r\n                    this._onbuttondown(buttonIndex);\r\n                }\r\n\r\n                this.onButtonDownObservable.notifyObservers(buttonIndex);\r\n            }\r\n            if (newValue === 0) {\r\n                if (this._onbuttonup) {\r\n                    this._onbuttonup(buttonIndex);\r\n                }\r\n\r\n                this.onButtonUpObservable.notifyObservers(buttonIndex);\r\n            }\r\n        }\r\n        return newValue;\r\n    }\r\n\r\n    /**\r\n     * Updates the generic gamepad\r\n     */\r\n    public update() {\r\n        super.update();\r\n        for (let index = 0; index < this._buttons.length; index++) {\r\n            this._buttons[index] = this._setButtonValue(this.browserGamepad.buttons[index].value, this._buttons[index], index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the generic gamepad\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n        this.onButtonDownObservable.clear();\r\n        this.onButtonUpObservable.clear();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}