{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\n\n/**\n * ThinSprite Class used to represent a thin sprite\n * This is the base class for sprites but can also directly be used with ThinEngine\n * @see https://doc.babylonjs.com/babylon101/sprites\n */\nvar ThinSprite =\n/** @class */\nfunction () {\n  /**\n   * Creates a new Thin Sprite\n   */\n  function ThinSprite() {\n    /** Gets or sets the width */\n    this.width = 1.0;\n    /** Gets or sets the height */\n\n    this.height = 1.0;\n    /** Gets or sets rotation angle */\n\n    this.angle = 0;\n    /** Gets or sets a boolean indicating if UV coordinates should be inverted in U axis */\n\n    this.invertU = false;\n    /** Gets or sets a boolean indicating if UV coordinates should be inverted in B axis */\n\n    this.invertV = false;\n    /** Gets or sets a boolean indicating if the sprite is visible (renderable). Default is true */\n\n    this.isVisible = true;\n    this._animationStarted = false;\n    this._loopAnimation = false;\n    this._fromIndex = 0;\n    this._toIndex = 0;\n    this._delay = 0;\n    this._direction = 1;\n    this._time = 0;\n    this._onBaseAnimationEnd = null;\n    this.position = {\n      x: 1.0,\n      y: 1.0,\n      z: 1.0\n    };\n    this.color = {\n      r: 1.0,\n      g: 1.0,\n      b: 1.0,\n      a: 1.0\n    };\n  }\n\n  Object.defineProperty(ThinSprite.prototype, \"animationStarted\", {\n    /**\n     * Returns a boolean indicating if the animation is started\n     */\n    get: function get() {\n      return this._animationStarted;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ThinSprite.prototype, \"fromIndex\", {\n    /** Gets the initial key for the animation (setting it will restart the animation)  */\n    get: function get() {\n      return this._fromIndex;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ThinSprite.prototype, \"toIndex\", {\n    /** Gets or sets the end key for the animation (setting it will restart the animation)  */\n    get: function get() {\n      return this._toIndex;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ThinSprite.prototype, \"loopAnimation\", {\n    /** Gets or sets a boolean indicating if the animation is looping (setting it will restart the animation)  */\n    get: function get() {\n      return this._loopAnimation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ThinSprite.prototype, \"delay\", {\n    /** Gets or sets the delay between cell changes (setting it will restart the animation)  */\n    get: function get() {\n      return Math.max(this._delay, 1);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Starts an animation\n   * @param from defines the initial key\n   * @param to defines the end key\n   * @param loop defines if the animation must loop\n   * @param delay defines the start delay (in ms)\n   * @param onAnimationEnd defines a callback for when the animation ends\n   */\n\n  ThinSprite.prototype.playAnimation = function (from, to, loop, delay, onAnimationEnd) {\n    this._fromIndex = from;\n    this._toIndex = to;\n    this._loopAnimation = loop;\n    this._delay = delay || 1;\n    this._animationStarted = true;\n    this._onBaseAnimationEnd = onAnimationEnd;\n\n    if (from < to) {\n      this._direction = 1;\n    } else {\n      this._direction = -1;\n      this._toIndex = from;\n      this._fromIndex = to;\n    }\n\n    this.cellIndex = from;\n    this._time = 0;\n  };\n  /** Stops current animation (if any) */\n\n\n  ThinSprite.prototype.stopAnimation = function () {\n    this._animationStarted = false;\n  };\n  /**\n   * @param deltaTime\n   * @hidden\n   */\n\n\n  ThinSprite.prototype._animate = function (deltaTime) {\n    if (!this._animationStarted) {\n      return;\n    }\n\n    this._time += deltaTime;\n\n    if (this._time > this._delay) {\n      this._time = this._time % this._delay;\n      this.cellIndex += this._direction;\n\n      if (this._direction > 0 && this.cellIndex > this._toIndex || this._direction < 0 && this.cellIndex < this._fromIndex) {\n        if (this._loopAnimation) {\n          this.cellIndex = this._direction > 0 ? this._fromIndex : this._toIndex;\n        } else {\n          this.cellIndex = this._toIndex;\n          this._animationStarted = false;\n\n          if (this._onBaseAnimationEnd) {\n            this._onBaseAnimationEnd();\n          }\n        }\n      }\n    }\n  };\n\n  return ThinSprite;\n}();\n\nexport { ThinSprite };","map":{"version":3,"mappings":"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","names":["position","x","y","z","color","r","g","b","a","Object","ThinSprite","_animationStarted","_fromIndex","_toIndex","_loopAnimation","Math","max","_delay","from","to","loop","delay","onAnimationEnd","_onBaseAnimationEnd","_direction","cellIndex","_time","deltaTime"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Sprites/thinSprite.ts"],"sourcesContent":["import type { IVector3Like, IColor4Like } from \"../Maths/math.like\";\r\nimport type { Nullable } from \"../types\";\r\n\r\n/**\r\n * ThinSprite Class used to represent a thin sprite\r\n * This is the base class for sprites but can also directly be used with ThinEngine\r\n * @see https://doc.babylonjs.com/babylon101/sprites\r\n */\r\nexport class ThinSprite {\r\n    /** Gets or sets the cell index in the sprite sheet */\r\n    public cellIndex: number;\r\n    /** Gets or sets the cell reference in the sprite sheet, uses sprite's filename when added to sprite sheet */\r\n    public cellRef: string;\r\n    /** Gets or sets the current world position */\r\n    public position: IVector3Like;\r\n    /** Gets or sets the main color */\r\n    public color: IColor4Like;\r\n    /** Gets or sets the width */\r\n    public width = 1.0;\r\n    /** Gets or sets the height */\r\n    public height = 1.0;\r\n    /** Gets or sets rotation angle */\r\n    public angle = 0;\r\n    /** Gets or sets a boolean indicating if UV coordinates should be inverted in U axis */\r\n    public invertU = false;\r\n    /** Gets or sets a boolean indicating if UV coordinates should be inverted in B axis */\r\n    public invertV = false;\r\n    /** Gets or sets a boolean indicating if the sprite is visible (renderable). Default is true */\r\n    public isVisible = true;\r\n\r\n    /**\r\n     * Returns a boolean indicating if the animation is started\r\n     */\r\n    public get animationStarted() {\r\n        return this._animationStarted;\r\n    }\r\n\r\n    /** Gets the initial key for the animation (setting it will restart the animation)  */\r\n    public get fromIndex() {\r\n        return this._fromIndex;\r\n    }\r\n\r\n    /** Gets or sets the end key for the animation (setting it will restart the animation)  */\r\n    public get toIndex() {\r\n        return this._toIndex;\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the animation is looping (setting it will restart the animation)  */\r\n    public get loopAnimation() {\r\n        return this._loopAnimation;\r\n    }\r\n\r\n    /** Gets or sets the delay between cell changes (setting it will restart the animation)  */\r\n    public get delay() {\r\n        return Math.max(this._delay, 1);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _xOffset: number;\r\n    /** @hidden */\r\n    public _yOffset: number;\r\n    /** @hidden */\r\n    public _xSize: number;\r\n    /** @hidden */\r\n    public _ySize: number;\r\n\r\n    private _animationStarted = false;\r\n    protected _loopAnimation = false;\r\n    protected _fromIndex = 0;\r\n    protected _toIndex = 0;\r\n    protected _delay = 0;\r\n    private _direction = 1;\r\n    private _time = 0;\r\n    private _onBaseAnimationEnd: Nullable<() => void> = null;\r\n\r\n    /**\r\n     * Creates a new Thin Sprite\r\n     */\r\n    constructor() {\r\n        this.position = { x: 1.0, y: 1.0, z: 1.0 };\r\n        this.color = { r: 1.0, g: 1.0, b: 1.0, a: 1.0 };\r\n    }\r\n\r\n    /**\r\n     * Starts an animation\r\n     * @param from defines the initial key\r\n     * @param to defines the end key\r\n     * @param loop defines if the animation must loop\r\n     * @param delay defines the start delay (in ms)\r\n     * @param onAnimationEnd defines a callback for when the animation ends\r\n     */\r\n    public playAnimation(from: number, to: number, loop: boolean, delay: number, onAnimationEnd: Nullable<() => void>): void {\r\n        this._fromIndex = from;\r\n        this._toIndex = to;\r\n        this._loopAnimation = loop;\r\n        this._delay = delay || 1;\r\n        this._animationStarted = true;\r\n        this._onBaseAnimationEnd = onAnimationEnd;\r\n\r\n        if (from < to) {\r\n            this._direction = 1;\r\n        } else {\r\n            this._direction = -1;\r\n            this._toIndex = from;\r\n            this._fromIndex = to;\r\n        }\r\n\r\n        this.cellIndex = from;\r\n        this._time = 0;\r\n    }\r\n\r\n    /** Stops current animation (if any) */\r\n    public stopAnimation(): void {\r\n        this._animationStarted = false;\r\n    }\r\n\r\n    /**\r\n     * @param deltaTime\r\n     * @hidden\r\n     */\r\n    public _animate(deltaTime: number): void {\r\n        if (!this._animationStarted) {\r\n            return;\r\n        }\r\n\r\n        this._time += deltaTime;\r\n        if (this._time > this._delay) {\r\n            this._time = this._time % this._delay;\r\n            this.cellIndex += this._direction;\r\n            if ((this._direction > 0 && this.cellIndex > this._toIndex) || (this._direction < 0 && this.cellIndex < this._fromIndex)) {\r\n                if (this._loopAnimation) {\r\n                    this.cellIndex = this._direction > 0 ? this._fromIndex : this._toIndex;\r\n                } else {\r\n                    this.cellIndex = this._toIndex;\r\n                    this._animationStarted = false;\r\n                    if (this._onBaseAnimationEnd) {\r\n                        this._onBaseAnimationEnd();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}