{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader.js\";\nvar NAME = \"KHR_texture_basisu\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_texture_basisu)\n */\n\nvar KHR_texture_basisu =\n/** @class */\nfunction () {\n  /**\n   * @param loader\n   * @hidden\n   */\n  function KHR_texture_basisu(loader) {\n    /** The name of this extension. */\n    this.name = NAME;\n    this._loader = loader;\n    this.enabled = loader.isExtensionUsed(NAME);\n  }\n  /** @hidden */\n\n\n  KHR_texture_basisu.prototype.dispose = function () {\n    this._loader = null;\n  };\n  /**\n   * @param context\n   * @param texture\n   * @param assign\n   * @hidden\n   */\n\n\n  KHR_texture_basisu.prototype._loadTextureAsync = function (context, texture, assign) {\n    var _this = this;\n\n    return GLTFLoader.LoadExtensionAsync(context, texture, this.name, function (extensionContext, extension) {\n      var sampler = texture.sampler == undefined ? GLTFLoader.DefaultSampler : ArrayItem.Get(\"\".concat(context, \"/sampler\"), _this._loader.gltf.samplers, texture.sampler);\n      var image = ArrayItem.Get(\"\".concat(extensionContext, \"/source\"), _this._loader.gltf.images, extension.source);\n      return _this._loader._createTextureAsync(context, sampler, image, function (babylonTexture) {\n        assign(babylonTexture);\n      }, texture._textureInfo.nonColorData ? {\n        useRGBAIfASTCBC7NotAvailableWhenUASTC: true\n      } : undefined, !texture._textureInfo.nonColorData);\n    });\n  };\n\n  return KHR_texture_basisu;\n}();\n\nexport { KHR_texture_basisu };\nGLTFLoader.RegisterExtension(NAME, function (loader) {\n  return new KHR_texture_basisu(loader);\n});","map":{"version":3,"mappings":";AAEA,SAASA,UAAT,EAAqBC,SAArB,QAAsC,kBAAtC;AAMA,IAAMC,IAAI,GAAG,oBAAb;AAEA;;;;AAGA;AAAA;AAAA;AASI;;;;AAIA,8BAAYC,MAAZ,EAA8B;AAZ9B;AACgB,gBAAOD,IAAP;AAYZ,SAAKE,OAAL,GAAeD,MAAf;AACA,SAAKE,OAAL,GAAeF,MAAM,CAACG,eAAP,CAAuBJ,IAAvB,CAAf;AACH;AAED;;;AACOK,yCAAP;AACK,SAAKH,OAAL,GAAuB,IAAvB;AACJ,GAFM;AAIP;;;;;;;;AAMOG,mDAAP,UAAyBC,OAAzB,EAA0CC,OAA1C,EAA6DC,MAA7D,EAA0G;AAA1G;;AACI,WAAOV,UAAU,CAACW,kBAAX,CAA8DH,OAA9D,EAAuEC,OAAvE,EAAgF,KAAKG,IAArF,EAA2F,UAACC,gBAAD,EAAmBC,SAAnB,EAA4B;AAC1H,UAAMC,OAAO,GAAGN,OAAO,CAACM,OAAR,IAAmBC,SAAnB,GAA+BhB,UAAU,CAACiB,cAA1C,GAA2DhB,SAAS,CAACiB,GAAV,CAAc,UAAGV,OAAH,EAAU,UAAV,CAAd,EAAoCW,KAAI,CAACf,OAAL,CAAagB,IAAb,CAAkBC,QAAtD,EAAgEZ,OAAO,CAACM,OAAxE,CAA3E;AACA,UAAMO,KAAK,GAAGrB,SAAS,CAACiB,GAAV,CAAc,UAAGL,gBAAH,EAAmB,SAAnB,CAAd,EAA4CM,KAAI,CAACf,OAAL,CAAagB,IAAb,CAAkBG,MAA9D,EAAsET,SAAS,CAACU,MAAhF,CAAd;AACA,aAAOL,KAAI,CAACf,OAAL,CAAaqB,mBAAb,CACHjB,OADG,EAEHO,OAFG,EAGHO,KAHG,EAIH,UAACI,cAAD,EAAe;AACXhB,cAAM,CAACgB,cAAD,CAAN;AACH,OANE,EAOHjB,OAAO,CAACkB,YAAR,CAAqBC,YAArB,GAAoC;AAAEC,6CAAqC,EAAE;AAAzC,OAApC,GAAsFb,SAPnF,EAQH,CAACP,OAAO,CAACkB,YAAR,CAAqBC,YARnB,CAAP;AAUH,KAbM,CAAP;AAcH,GAfM;;AAgBX;AAAC,CA7CD;;;AA+CA5B,UAAU,CAAC8B,iBAAX,CAA6B5B,IAA7B,EAAmC,UAACC,MAAD,EAAO;AAAK,aAAII,kBAAJ,CAAuBJ,MAAvB;AAA8B,CAA7E","names":["GLTFLoader","ArrayItem","NAME","loader","_loader","enabled","isExtensionUsed","KHR_texture_basisu","context","texture","assign","LoadExtensionAsync","name","extensionContext","extension","sampler","undefined","DefaultSampler","Get","_this","gltf","samplers","image","images","source","_createTextureAsync","babylonTexture","_textureInfo","nonColorData","useRGBAIfASTCBC7NotAvailableWhenUASTC","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../../lts/loaders/generated/glTF/2.0/Extensions/KHR_texture_basisu.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\nimport type { ITexture } from \"../glTFLoaderInterfaces\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport type { Nullable } from \"core/types\";\r\nimport type { IKHRTextureBasisU } from \"babylonjs-gltf2interface\";\r\n\r\nconst NAME = \"KHR_texture_basisu\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_texture_basisu)\r\n */\r\nexport class KHR_texture_basisu implements IGLTFLoaderExtension {\r\n    /** The name of this extension. */\r\n    public readonly name = NAME;\r\n\r\n    /** Defines whether this extension is enabled. */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @param loader\r\n     * @hidden\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @hidden */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @param context\r\n     * @param texture\r\n     * @param assign\r\n     * @hidden\r\n     */\r\n    public _loadTextureAsync(context: string, texture: ITexture, assign: (babylonTexture: BaseTexture) => void): Nullable<Promise<BaseTexture>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRTextureBasisU, BaseTexture>(context, texture, this.name, (extensionContext, extension) => {\r\n            const sampler = texture.sampler == undefined ? GLTFLoader.DefaultSampler : ArrayItem.Get(`${context}/sampler`, this._loader.gltf.samplers, texture.sampler);\r\n            const image = ArrayItem.Get(`${extensionContext}/source`, this._loader.gltf.images, extension.source);\r\n            return this._loader._createTextureAsync(\r\n                context,\r\n                sampler,\r\n                image,\r\n                (babylonTexture) => {\r\n                    assign(babylonTexture);\r\n                },\r\n                texture._textureInfo.nonColorData ? { useRGBAIfASTCBC7NotAvailableWhenUASTC: true } : undefined,\r\n                !texture._textureInfo.nonColorData\r\n            );\r\n        });\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_texture_basisu(loader));\r\n"]},"metadata":{},"sourceType":"module"}