{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\n\n/** @hidden */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction createXMLHttpRequest() {\n  // If running in Babylon Native, then defer to the native XMLHttpRequest, which has the same public contract\n  if (typeof _native !== \"undefined\" && _native.XMLHttpRequest) {\n    return new _native.XMLHttpRequest();\n  } else {\n    return new XMLHttpRequest();\n  }\n}\n/**\n * Extended version of XMLHttpRequest with support for customizations (headers, ...)\n */\n\n\nvar WebRequest =\n/** @class */\nfunction () {\n  function WebRequest() {\n    this._xhr = createXMLHttpRequest();\n  }\n\n  WebRequest.prototype._injectCustomRequestHeaders = function () {\n    for (var key in WebRequest.CustomRequestHeaders) {\n      var val = WebRequest.CustomRequestHeaders[key];\n\n      if (val) {\n        this._xhr.setRequestHeader(key, val);\n      }\n    }\n  };\n\n  Object.defineProperty(WebRequest.prototype, \"onprogress\", {\n    /**\n     * Gets or sets a function to be called when loading progress changes\n     */\n    get: function get() {\n      return this._xhr.onprogress;\n    },\n    set: function set(value) {\n      this._xhr.onprogress = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebRequest.prototype, \"readyState\", {\n    /**\n     * Returns client's state\n     */\n    get: function get() {\n      return this._xhr.readyState;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebRequest.prototype, \"status\", {\n    /**\n     * Returns client's status\n     */\n    get: function get() {\n      return this._xhr.status;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebRequest.prototype, \"statusText\", {\n    /**\n     * Returns client's status as a text\n     */\n    get: function get() {\n      return this._xhr.statusText;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebRequest.prototype, \"response\", {\n    /**\n     * Returns client's response\n     */\n    get: function get() {\n      return this._xhr.response;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebRequest.prototype, \"responseURL\", {\n    /**\n     * Returns client's response url\n     */\n    get: function get() {\n      return this._xhr.responseURL;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebRequest.prototype, \"responseText\", {\n    /**\n     * Returns client's response as text\n     */\n    get: function get() {\n      return this._xhr.responseText;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebRequest.prototype, \"responseType\", {\n    /**\n     * Gets or sets the expected response type\n     */\n    get: function get() {\n      return this._xhr.responseType;\n    },\n    set: function set(value) {\n      this._xhr.responseType = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebRequest.prototype, \"timeout\", {\n    /**\n     * Gets or sets the timeout value in milliseconds\n     */\n    get: function get() {\n      return this._xhr.timeout;\n    },\n    set: function set(value) {\n      this._xhr.timeout = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  WebRequest.prototype.addEventListener = function (type, listener, options) {\n    this._xhr.addEventListener(type, listener, options);\n  };\n\n  WebRequest.prototype.removeEventListener = function (type, listener, options) {\n    this._xhr.removeEventListener(type, listener, options);\n  };\n  /**\n   * Cancels any network activity\n   */\n\n\n  WebRequest.prototype.abort = function () {\n    this._xhr.abort();\n  };\n  /**\n   * Initiates the request. The optional argument provides the request body. The argument is ignored if request method is GET or HEAD\n   * @param body defines an optional request body\n   */\n\n\n  WebRequest.prototype.send = function (body) {\n    if (WebRequest.CustomRequestHeaders) {\n      this._injectCustomRequestHeaders();\n    }\n\n    this._xhr.send(body);\n  };\n  /**\n   * Sets the request method, request URL\n   * @param method defines the method to use (GET, POST, etc..)\n   * @param url defines the url to connect with\n   */\n\n\n  WebRequest.prototype.open = function (method, url) {\n    for (var _i = 0, _a = WebRequest.CustomRequestModifiers; _i < _a.length; _i++) {\n      var update = _a[_i];\n      update(this._xhr, url);\n    } // Clean url\n\n\n    url = url.replace(\"file:http:\", \"http:\");\n    url = url.replace(\"file:https:\", \"https:\");\n    return this._xhr.open(method, url, true);\n  };\n  /**\n   * Sets the value of a request header.\n   * @param name The name of the header whose value is to be set\n   * @param value The value to set as the body of the header\n   */\n\n\n  WebRequest.prototype.setRequestHeader = function (name, value) {\n    this._xhr.setRequestHeader(name, value);\n  };\n  /**\n   * Get the string containing the text of a particular header's value.\n   * @param name The name of the header\n   * @returns The string containing the text of the given header name\n   */\n\n\n  WebRequest.prototype.getResponseHeader = function (name) {\n    return this._xhr.getResponseHeader(name);\n  };\n  /**\n   * Custom HTTP Request Headers to be sent with XMLHttpRequests\n   * i.e. when loading files, where the server/service expects an Authorization header\n   */\n\n\n  WebRequest.CustomRequestHeaders = {};\n  /**\n   * Add callback functions in this array to update all the requests before they get sent to the network\n   */\n\n  WebRequest.CustomRequestModifiers = new Array();\n  return WebRequest;\n}();\n\nexport { WebRequest };","map":{"version":3,"mappings":"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","names":["createXMLHttpRequest","_native","XMLHttpRequest","WebRequest","key","CustomRequestHeaders","val","_xhr","setRequestHeader","Object","onprogress","value","readyState","status","statusText","response","responseURL","responseText","responseType","timeout","type","listener","options","addEventListener","removeEventListener","abort","body","_injectCustomRequestHeaders","send","method","url","CustomRequestModifiers","_i","update","replace","open","name","getResponseHeader","Array"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Misc/webRequest.ts"],"sourcesContent":["import type { IWebRequest } from \"./interfaces/iWebRequest\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { INative } from \"../Engines/Native/nativeInterfaces\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare const _native: INative;\r\n\r\n/** @hidden */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nfunction createXMLHttpRequest(): XMLHttpRequest {\r\n    // If running in Babylon Native, then defer to the native XMLHttpRequest, which has the same public contract\r\n    if (typeof _native !== \"undefined\" && _native.XMLHttpRequest) {\r\n        return new _native.XMLHttpRequest();\r\n    } else {\r\n        return new XMLHttpRequest();\r\n    }\r\n}\r\n\r\n/**\r\n * Extended version of XMLHttpRequest with support for customizations (headers, ...)\r\n */\r\nexport class WebRequest implements IWebRequest {\r\n    private readonly _xhr = createXMLHttpRequest();\r\n\r\n    /**\r\n     * Custom HTTP Request Headers to be sent with XMLHttpRequests\r\n     * i.e. when loading files, where the server/service expects an Authorization header\r\n     */\r\n    public static CustomRequestHeaders: { [key: string]: string } = {};\r\n\r\n    /**\r\n     * Add callback functions in this array to update all the requests before they get sent to the network\r\n     */\r\n    public static CustomRequestModifiers = new Array<(request: XMLHttpRequest, url: string) => void>();\r\n\r\n    private _injectCustomRequestHeaders(): void {\r\n        for (const key in WebRequest.CustomRequestHeaders) {\r\n            const val = WebRequest.CustomRequestHeaders[key];\r\n            if (val) {\r\n                this._xhr.setRequestHeader(key, val);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a function to be called when loading progress changes\r\n     */\r\n    public get onprogress(): ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null {\r\n        return this._xhr.onprogress;\r\n    }\r\n\r\n    public set onprogress(value: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null) {\r\n        this._xhr.onprogress = value;\r\n    }\r\n\r\n    /**\r\n     * Returns client's state\r\n     */\r\n    public get readyState(): number {\r\n        return this._xhr.readyState;\r\n    }\r\n\r\n    /**\r\n     * Returns client's status\r\n     */\r\n    public get status(): number {\r\n        return this._xhr.status;\r\n    }\r\n\r\n    /**\r\n     * Returns client's status as a text\r\n     */\r\n    public get statusText(): string {\r\n        return this._xhr.statusText;\r\n    }\r\n\r\n    /**\r\n     * Returns client's response\r\n     */\r\n    public get response(): any {\r\n        return this._xhr.response;\r\n    }\r\n\r\n    /**\r\n     * Returns client's response url\r\n     */\r\n    public get responseURL(): string {\r\n        return this._xhr.responseURL;\r\n    }\r\n\r\n    /**\r\n     * Returns client's response as text\r\n     */\r\n    public get responseText(): string {\r\n        return this._xhr.responseText;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the expected response type\r\n     */\r\n    public get responseType(): XMLHttpRequestResponseType {\r\n        return this._xhr.responseType;\r\n    }\r\n\r\n    public set responseType(value: XMLHttpRequestResponseType) {\r\n        this._xhr.responseType = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the timeout value in milliseconds\r\n     */\r\n    public get timeout(): number {\r\n        return this._xhr.timeout;\r\n    }\r\n\r\n    public set timeout(value: number) {\r\n        this._xhr.timeout = value;\r\n    }\r\n\r\n    /** @hidden */\r\n    public addEventListener<K extends keyof XMLHttpRequestEventMap>(\r\n        type: K,\r\n        listener: (this: XMLHttpRequest, ev: XMLHttpRequestEventMap[K]) => any,\r\n        options?: boolean | AddEventListenerOptions\r\n    ): void;\r\n    public addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void {\r\n        this._xhr.addEventListener(type, listener, options);\r\n    }\r\n\r\n    /** @hidden */\r\n    public removeEventListener<K extends keyof XMLHttpRequestEventMap>(\r\n        type: K,\r\n        listener: (this: XMLHttpRequest, ev: XMLHttpRequestEventMap[K]) => any,\r\n        options?: boolean | EventListenerOptions\r\n    ): void;\r\n    public removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void {\r\n        this._xhr.removeEventListener(type, listener, options);\r\n    }\r\n\r\n    /**\r\n     * Cancels any network activity\r\n     */\r\n    public abort() {\r\n        this._xhr.abort();\r\n    }\r\n\r\n    /**\r\n     * Initiates the request. The optional argument provides the request body. The argument is ignored if request method is GET or HEAD\r\n     * @param body defines an optional request body\r\n     */\r\n    public send(body?: Document | XMLHttpRequestBodyInit | null): void {\r\n        if (WebRequest.CustomRequestHeaders) {\r\n            this._injectCustomRequestHeaders();\r\n        }\r\n\r\n        this._xhr.send(body);\r\n    }\r\n\r\n    /**\r\n     * Sets the request method, request URL\r\n     * @param method defines the method to use (GET, POST, etc..)\r\n     * @param url defines the url to connect with\r\n     */\r\n    public open(method: string, url: string): void {\r\n        for (const update of WebRequest.CustomRequestModifiers) {\r\n            update(this._xhr, url);\r\n        }\r\n\r\n        // Clean url\r\n        url = url.replace(\"file:http:\", \"http:\");\r\n        url = url.replace(\"file:https:\", \"https:\");\r\n\r\n        return this._xhr.open(method, url, true);\r\n    }\r\n\r\n    /**\r\n     * Sets the value of a request header.\r\n     * @param name The name of the header whose value is to be set\r\n     * @param value The value to set as the body of the header\r\n     */\r\n    setRequestHeader(name: string, value: string): void {\r\n        this._xhr.setRequestHeader(name, value);\r\n    }\r\n\r\n    /**\r\n     * Get the string containing the text of a particular header's value.\r\n     * @param name The name of the header\r\n     * @returns The string containing the text of the given header name\r\n     */\r\n    getResponseHeader(name: string): Nullable<string> {\r\n        return this._xhr.getResponseHeader(name);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}