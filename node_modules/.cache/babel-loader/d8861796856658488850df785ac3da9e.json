{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\n/**\n * Block used for the particle blend multiply section\n */\n\nvar ParticleBlendMultiplyBlock =\n/** @class */\nfunction (_super) {\n  __extends(ParticleBlendMultiplyBlock, _super);\n  /**\n   * Create a new ParticleBlendMultiplyBlock\n   * @param name defines the block name\n   */\n\n\n  function ParticleBlendMultiplyBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;\n\n    _this._isUnique = true;\n\n    _this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color4, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"alphaTexture\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"alphaColor\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"blendColor\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Fragment);\n\n    return _this;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  ParticleBlendMultiplyBlock.prototype.getClassName = function () {\n    return \"ParticleBlendMultiplyBlock\";\n  };\n\n  Object.defineProperty(ParticleBlendMultiplyBlock.prototype, \"color\", {\n    /**\n     * Gets the color input component\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ParticleBlendMultiplyBlock.prototype, \"alphaTexture\", {\n    /**\n     * Gets the alphaTexture input component\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ParticleBlendMultiplyBlock.prototype, \"alphaColor\", {\n    /**\n     * Gets the alphaColor input component\n     */\n    get: function get() {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ParticleBlendMultiplyBlock.prototype, \"blendColor\", {\n    /**\n     * Gets the blendColor output component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Initialize the block and prepare the context for build\n   * @param state defines the state that will be used for the build\n   */\n\n  ParticleBlendMultiplyBlock.prototype.initialize = function (state) {\n    state._excludeVariableName(\"sourceAlpha\");\n  };\n\n  ParticleBlendMultiplyBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    if (state.target === NodeMaterialBlockTargets.Vertex) {\n      return;\n    }\n\n    state.compilationString += \"\\n            #ifdef BLENDMULTIPLYMODE\\n                \".concat(this._declareOutput(this.blendColor, state), \";\\n                float sourceAlpha = \").concat(this.alphaColor.associatedVariableName, \" * \").concat(this.alphaTexture.associatedVariableName, \";\\n                \").concat(this.blendColor.associatedVariableName, \".rgb = \").concat(this.color.associatedVariableName, \".rgb * sourceAlpha + vec3(1.0) * (1.0 - sourceAlpha);\\n                \").concat(this.blendColor.associatedVariableName, \".a = \").concat(this.color.associatedVariableName, \".a;\\n            #else\\n                \").concat(this._declareOutput(this.blendColor, state), \" = \").concat(this.color.associatedVariableName, \";\\n            #endif\\n        \");\n    return this;\n  };\n\n  return ParticleBlendMultiplyBlock;\n}(NodeMaterialBlock);\n\nexport { ParticleBlendMultiplyBlock };\nRegisterClass(\"BABYLON.ParticleBlendMultiplyBlock\", ParticleBlendMultiplyBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","__extends","name","_super","Fragment","_this","_isUnique","registerInput","Color4","Float","registerOutput","ParticleBlendMultiplyBlock","Object","_inputs","_outputs","state","_excludeVariableName","_buildBlock","call","target","Vertex","compilationString","_declareOutput","blendColor","concat","alphaColor","associatedVariableName","alphaTexture","color"],"sourceRoot":"","sources":["../../../../../../../../lts/core/generated/Materials/Node/Blocks/Particle/particleBlendMultiplyBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\n\r\n/**\r\n * Block used for the particle blend multiply section\r\n */\r\nexport class ParticleBlendMultiplyBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Create a new ParticleBlendMultiplyBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this._isUnique = true;\r\n\r\n        this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color4, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"alphaTexture\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"alphaColor\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerOutput(\"blendColor\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Fragment);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ParticleBlendMultiplyBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the color input component\r\n     */\r\n    public get color(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the alphaTexture input component\r\n     */\r\n    public get alphaTexture(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the alphaColor input component\r\n     */\r\n    public get alphaColor(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the blendColor output component\r\n     */\r\n    public get blendColor(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"sourceAlpha\");\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (state.target === NodeMaterialBlockTargets.Vertex) {\r\n            return;\r\n        }\r\n\r\n        state.compilationString += `\r\n            #ifdef BLENDMULTIPLYMODE\r\n                ${this._declareOutput(this.blendColor, state)};\r\n                float sourceAlpha = ${this.alphaColor.associatedVariableName} * ${this.alphaTexture.associatedVariableName};\r\n                ${this.blendColor.associatedVariableName}.rgb = ${this.color.associatedVariableName}.rgb * sourceAlpha + vec3(1.0) * (1.0 - sourceAlpha);\r\n                ${this.blendColor.associatedVariableName}.a = ${this.color.associatedVariableName}.a;\r\n            #else\r\n                ${this._declareOutput(this.blendColor, state)} = ${this.color.associatedVariableName};\r\n            #endif\r\n        `;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ParticleBlendMultiplyBlock\", ParticleBlendMultiplyBlock);\r\n"]},"metadata":{},"sourceType":"module"}