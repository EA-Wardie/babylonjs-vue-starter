{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\n\n/**\n * @hidden\n **/\nvar StencilStateComposer =\n/** @class */\nfunction () {\n  function StencilStateComposer(reset) {\n    if (reset === void 0) {\n      reset = true;\n    }\n\n    this._isStencilTestDirty = false;\n    this._isStencilMaskDirty = false;\n    this._isStencilFuncDirty = false;\n    this._isStencilOpDirty = false;\n    this.useStencilGlobalOnly = false;\n\n    if (reset) {\n      this.reset();\n    }\n  }\n\n  Object.defineProperty(StencilStateComposer.prototype, \"isDirty\", {\n    get: function get() {\n      return this._isStencilTestDirty || this._isStencilMaskDirty || this._isStencilFuncDirty || this._isStencilOpDirty;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StencilStateComposer.prototype, \"func\", {\n    get: function get() {\n      return this._func;\n    },\n    set: function set(value) {\n      if (this._func === value) {\n        return;\n      }\n\n      this._func = value;\n      this._isStencilFuncDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StencilStateComposer.prototype, \"funcRef\", {\n    get: function get() {\n      return this._funcRef;\n    },\n    set: function set(value) {\n      if (this._funcRef === value) {\n        return;\n      }\n\n      this._funcRef = value;\n      this._isStencilFuncDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StencilStateComposer.prototype, \"funcMask\", {\n    get: function get() {\n      return this._funcMask;\n    },\n    set: function set(value) {\n      if (this._funcMask === value) {\n        return;\n      }\n\n      this._funcMask = value;\n      this._isStencilFuncDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StencilStateComposer.prototype, \"opStencilFail\", {\n    get: function get() {\n      return this._opStencilFail;\n    },\n    set: function set(value) {\n      if (this._opStencilFail === value) {\n        return;\n      }\n\n      this._opStencilFail = value;\n      this._isStencilOpDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StencilStateComposer.prototype, \"opDepthFail\", {\n    get: function get() {\n      return this._opDepthFail;\n    },\n    set: function set(value) {\n      if (this._opDepthFail === value) {\n        return;\n      }\n\n      this._opDepthFail = value;\n      this._isStencilOpDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StencilStateComposer.prototype, \"opStencilDepthPass\", {\n    get: function get() {\n      return this._opStencilDepthPass;\n    },\n    set: function set(value) {\n      if (this._opStencilDepthPass === value) {\n        return;\n      }\n\n      this._opStencilDepthPass = value;\n      this._isStencilOpDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StencilStateComposer.prototype, \"mask\", {\n    get: function get() {\n      return this._mask;\n    },\n    set: function set(value) {\n      if (this._mask === value) {\n        return;\n      }\n\n      this._mask = value;\n      this._isStencilMaskDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StencilStateComposer.prototype, \"enabled\", {\n    get: function get() {\n      return this._enabled;\n    },\n    set: function set(value) {\n      if (this._enabled === value) {\n        return;\n      }\n\n      this._enabled = value;\n      this._isStencilTestDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StencilStateComposer.prototype.reset = function () {\n    var _a;\n\n    this.stencilMaterial = undefined;\n    (_a = this.stencilGlobal) === null || _a === void 0 ? void 0 : _a.reset();\n    this._isStencilTestDirty = true;\n    this._isStencilMaskDirty = true;\n    this._isStencilFuncDirty = true;\n    this._isStencilOpDirty = true;\n  };\n\n  StencilStateComposer.prototype.apply = function (gl) {\n    var _a;\n\n    if (!gl) {\n      return;\n    }\n\n    var stencilMaterialEnabled = !this.useStencilGlobalOnly && !!((_a = this.stencilMaterial) === null || _a === void 0 ? void 0 : _a.enabled);\n    this.enabled = stencilMaterialEnabled ? this.stencilMaterial.enabled : this.stencilGlobal.enabled;\n    this.func = stencilMaterialEnabled ? this.stencilMaterial.func : this.stencilGlobal.func;\n    this.funcRef = stencilMaterialEnabled ? this.stencilMaterial.funcRef : this.stencilGlobal.funcRef;\n    this.funcMask = stencilMaterialEnabled ? this.stencilMaterial.funcMask : this.stencilGlobal.funcMask;\n    this.opStencilFail = stencilMaterialEnabled ? this.stencilMaterial.opStencilFail : this.stencilGlobal.opStencilFail;\n    this.opDepthFail = stencilMaterialEnabled ? this.stencilMaterial.opDepthFail : this.stencilGlobal.opDepthFail;\n    this.opStencilDepthPass = stencilMaterialEnabled ? this.stencilMaterial.opStencilDepthPass : this.stencilGlobal.opStencilDepthPass;\n    this.mask = stencilMaterialEnabled ? this.stencilMaterial.mask : this.stencilGlobal.mask;\n\n    if (!this.isDirty) {\n      return;\n    } // Stencil test\n\n\n    if (this._isStencilTestDirty) {\n      if (this.enabled) {\n        gl.enable(gl.STENCIL_TEST);\n      } else {\n        gl.disable(gl.STENCIL_TEST);\n      }\n\n      this._isStencilTestDirty = false;\n    } // Stencil mask\n\n\n    if (this._isStencilMaskDirty) {\n      gl.stencilMask(this.mask);\n      this._isStencilMaskDirty = false;\n    } // Stencil func\n\n\n    if (this._isStencilFuncDirty) {\n      gl.stencilFunc(this.func, this.funcRef, this.funcMask);\n      this._isStencilFuncDirty = false;\n    } // Stencil op\n\n\n    if (this._isStencilOpDirty) {\n      gl.stencilOp(this.opStencilFail, this.opDepthFail, this.opStencilDepthPass);\n      this._isStencilOpDirty = false;\n    }\n  };\n\n  return StencilStateComposer;\n}();\n\nexport { StencilStateComposer };","map":{"version":3,"mappings":"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","names":["reset","Object","StencilStateComposer","_isStencilTestDirty","_isStencilMaskDirty","_isStencilFuncDirty","_isStencilOpDirty","_func","value","_funcRef","_funcMask","_opStencilFail","_opDepthFail","_opStencilDepthPass","_mask","_enabled","stencilMaterial","undefined","stencilGlobal","_a","gl","stencilMaterialEnabled","useStencilGlobalOnly","enabled","func","funcRef","funcMask","opStencilFail","opDepthFail","opStencilDepthPass","mask","isDirty","enable","STENCIL_TEST","disable","stencilMask","stencilFunc","stencilOp"],"sourceRoot":"","sources":["../../../../../lts/core/generated/States/stencilStateComposer.ts"],"sourcesContent":["import type { IStencilState } from \"./IStencilState\";\r\n\r\n/**\r\n * @hidden\r\n **/\r\nexport class StencilStateComposer {\r\n    protected _isStencilTestDirty = false;\r\n    protected _isStencilMaskDirty = false;\r\n    protected _isStencilFuncDirty = false;\r\n    protected _isStencilOpDirty = false;\r\n\r\n    protected _enabled: boolean;\r\n\r\n    protected _mask: number;\r\n\r\n    protected _func: number;\r\n    protected _funcRef: number;\r\n    protected _funcMask: number;\r\n\r\n    protected _opStencilFail: number;\r\n    protected _opDepthFail: number;\r\n    protected _opStencilDepthPass: number;\r\n\r\n    public stencilGlobal: IStencilState;\r\n    public stencilMaterial: IStencilState | undefined;\r\n\r\n    public useStencilGlobalOnly = false;\r\n\r\n    public get isDirty(): boolean {\r\n        return this._isStencilTestDirty || this._isStencilMaskDirty || this._isStencilFuncDirty || this._isStencilOpDirty;\r\n    }\r\n\r\n    public get func(): number {\r\n        return this._func;\r\n    }\r\n\r\n    public set func(value: number) {\r\n        if (this._func === value) {\r\n            return;\r\n        }\r\n\r\n        this._func = value;\r\n        this._isStencilFuncDirty = true;\r\n    }\r\n\r\n    public get funcRef(): number {\r\n        return this._funcRef;\r\n    }\r\n\r\n    public set funcRef(value: number) {\r\n        if (this._funcRef === value) {\r\n            return;\r\n        }\r\n\r\n        this._funcRef = value;\r\n        this._isStencilFuncDirty = true;\r\n    }\r\n\r\n    public get funcMask(): number {\r\n        return this._funcMask;\r\n    }\r\n\r\n    public set funcMask(value: number) {\r\n        if (this._funcMask === value) {\r\n            return;\r\n        }\r\n\r\n        this._funcMask = value;\r\n        this._isStencilFuncDirty = true;\r\n    }\r\n\r\n    public get opStencilFail(): number {\r\n        return this._opStencilFail;\r\n    }\r\n\r\n    public set opStencilFail(value: number) {\r\n        if (this._opStencilFail === value) {\r\n            return;\r\n        }\r\n\r\n        this._opStencilFail = value;\r\n        this._isStencilOpDirty = true;\r\n    }\r\n\r\n    public get opDepthFail(): number {\r\n        return this._opDepthFail;\r\n    }\r\n\r\n    public set opDepthFail(value: number) {\r\n        if (this._opDepthFail === value) {\r\n            return;\r\n        }\r\n\r\n        this._opDepthFail = value;\r\n        this._isStencilOpDirty = true;\r\n    }\r\n\r\n    public get opStencilDepthPass(): number {\r\n        return this._opStencilDepthPass;\r\n    }\r\n\r\n    public set opStencilDepthPass(value: number) {\r\n        if (this._opStencilDepthPass === value) {\r\n            return;\r\n        }\r\n\r\n        this._opStencilDepthPass = value;\r\n        this._isStencilOpDirty = true;\r\n    }\r\n\r\n    public get mask(): number {\r\n        return this._mask;\r\n    }\r\n\r\n    public set mask(value: number) {\r\n        if (this._mask === value) {\r\n            return;\r\n        }\r\n\r\n        this._mask = value;\r\n        this._isStencilMaskDirty = true;\r\n    }\r\n\r\n    public get enabled(): boolean {\r\n        return this._enabled;\r\n    }\r\n\r\n    public set enabled(value: boolean) {\r\n        if (this._enabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._enabled = value;\r\n        this._isStencilTestDirty = true;\r\n    }\r\n\r\n    public constructor(reset = true) {\r\n        if (reset) {\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    public reset() {\r\n        this.stencilMaterial = undefined;\r\n\r\n        this.stencilGlobal?.reset();\r\n\r\n        this._isStencilTestDirty = true;\r\n        this._isStencilMaskDirty = true;\r\n        this._isStencilFuncDirty = true;\r\n        this._isStencilOpDirty = true;\r\n    }\r\n\r\n    public apply(gl?: WebGLRenderingContext) {\r\n        if (!gl) {\r\n            return;\r\n        }\r\n\r\n        const stencilMaterialEnabled = !this.useStencilGlobalOnly && !!this.stencilMaterial?.enabled;\r\n\r\n        this.enabled = stencilMaterialEnabled ? this.stencilMaterial!.enabled : this.stencilGlobal.enabled;\r\n        this.func = stencilMaterialEnabled ? this.stencilMaterial!.func : this.stencilGlobal.func;\r\n        this.funcRef = stencilMaterialEnabled ? this.stencilMaterial!.funcRef : this.stencilGlobal.funcRef;\r\n        this.funcMask = stencilMaterialEnabled ? this.stencilMaterial!.funcMask : this.stencilGlobal.funcMask;\r\n        this.opStencilFail = stencilMaterialEnabled ? this.stencilMaterial!.opStencilFail : this.stencilGlobal.opStencilFail;\r\n        this.opDepthFail = stencilMaterialEnabled ? this.stencilMaterial!.opDepthFail : this.stencilGlobal.opDepthFail;\r\n        this.opStencilDepthPass = stencilMaterialEnabled ? this.stencilMaterial!.opStencilDepthPass : this.stencilGlobal.opStencilDepthPass;\r\n        this.mask = stencilMaterialEnabled ? this.stencilMaterial!.mask : this.stencilGlobal.mask;\r\n\r\n        if (!this.isDirty) {\r\n            return;\r\n        }\r\n\r\n        // Stencil test\r\n        if (this._isStencilTestDirty) {\r\n            if (this.enabled) {\r\n                gl.enable(gl.STENCIL_TEST);\r\n            } else {\r\n                gl.disable(gl.STENCIL_TEST);\r\n            }\r\n            this._isStencilTestDirty = false;\r\n        }\r\n\r\n        // Stencil mask\r\n        if (this._isStencilMaskDirty) {\r\n            gl.stencilMask(this.mask);\r\n            this._isStencilMaskDirty = false;\r\n        }\r\n\r\n        // Stencil func\r\n        if (this._isStencilFuncDirty) {\r\n            gl.stencilFunc(this.func, this.funcRef, this.funcMask);\r\n            this._isStencilFuncDirty = false;\r\n        }\r\n\r\n        // Stencil op\r\n        if (this._isStencilOpDirty) {\r\n            gl.stencilOp(this.opStencilFail, this.opDepthFail, this.opStencilDepthPass);\r\n            this._isStencilOpDirty = false;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}