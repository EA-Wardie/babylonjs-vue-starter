{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n\n/**\n * Base class of the scene acting as a container for the different elements composing a scene.\n * This class is dynamically extended by the different components of the scene increasing\n * flexibility and reducing coupling\n */\nvar AbstractScene =\n/** @class */\nfunction () {\n  function AbstractScene() {\n    /**\n     * Gets the list of root nodes (ie. nodes with no parent)\n     */\n    this.rootNodes = new Array();\n    /** All of the cameras added to this scene\n     * @see https://doc.babylonjs.com/babylon101/cameras\n     */\n\n    this.cameras = new Array();\n    /**\n     * All of the lights added to this scene\n     * @see https://doc.babylonjs.com/babylon101/lights\n     */\n\n    this.lights = new Array();\n    /**\n     * All of the (abstract) meshes added to this scene\n     */\n\n    this.meshes = new Array();\n    /**\n     * The list of skeletons added to the scene\n     * @see https://doc.babylonjs.com/how_to/how_to_use_bones_and_skeletons\n     */\n\n    this.skeletons = new Array();\n    /**\n     * All of the particle systems added to this scene\n     * @see https://doc.babylonjs.com/babylon101/particles\n     */\n\n    this.particleSystems = new Array();\n    /**\n     * Gets a list of Animations associated with the scene\n     */\n\n    this.animations = [];\n    /**\n     * All of the animation groups added to this scene\n     * @see https://doc.babylonjs.com/divingDeeper/animation/groupAnimations\n     */\n\n    this.animationGroups = new Array();\n    /**\n     * All of the multi-materials added to this scene\n     * @see https://doc.babylonjs.com/how_to/multi_materials\n     */\n\n    this.multiMaterials = new Array();\n    /**\n     * All of the materials added to this scene\n     * In the context of a Scene, it is not supposed to be modified manually.\n     * Any addition or removal should be done using the addMaterial and removeMaterial Scene methods.\n     * Note also that the order of the Material within the array is not significant and might change.\n     * @see https://doc.babylonjs.com/babylon101/materials\n     */\n\n    this.materials = new Array();\n    /**\n     * The list of morph target managers added to the scene\n     * @see https://doc.babylonjs.com/how_to/how_to_dynamically_morph_a_mesh\n     */\n\n    this.morphTargetManagers = new Array();\n    /**\n     * The list of geometries used in the scene.\n     */\n\n    this.geometries = new Array();\n    /**\n     * All of the transform nodes added to this scene\n     * In the context of a Scene, it is not supposed to be modified manually.\n     * Any addition or removal should be done using the addTransformNode and removeTransformNode Scene methods.\n     * Note also that the order of the TransformNode within the array is not significant and might change.\n     * @see https://doc.babylonjs.com/how_to/transformnode\n     */\n\n    this.transformNodes = new Array();\n    /**\n     * ActionManagers available on the scene.\n     */\n\n    this.actionManagers = new Array();\n    /**\n     * Textures to keep.\n     */\n\n    this.textures = new Array();\n    /** @hidden */\n\n    this._environmentTexture = null;\n    /**\n     * The list of postprocesses added to the scene\n     */\n\n    this.postProcesses = new Array();\n  }\n  /**\n   * Adds a parser in the list of available ones\n   * @param name Defines the name of the parser\n   * @param parser Defines the parser to add\n   */\n\n\n  AbstractScene.AddParser = function (name, parser) {\n    this._BabylonFileParsers[name] = parser;\n  };\n  /**\n   * Gets a general parser from the list of available ones\n   * @param name Defines the name of the parser\n   * @returns the requested parser or null\n   */\n\n\n  AbstractScene.GetParser = function (name) {\n    if (this._BabylonFileParsers[name]) {\n      return this._BabylonFileParsers[name];\n    }\n\n    return null;\n  };\n  /**\n   * Adds n individual parser in the list of available ones\n   * @param name Defines the name of the parser\n   * @param parser Defines the parser to add\n   */\n\n\n  AbstractScene.AddIndividualParser = function (name, parser) {\n    this._IndividualBabylonFileParsers[name] = parser;\n  };\n  /**\n   * Gets an individual parser from the list of available ones\n   * @param name Defines the name of the parser\n   * @returns the requested parser or null\n   */\n\n\n  AbstractScene.GetIndividualParser = function (name) {\n    if (this._IndividualBabylonFileParsers[name]) {\n      return this._IndividualBabylonFileParsers[name];\n    }\n\n    return null;\n  };\n  /**\n   * Parser json data and populate both a scene and its associated container object\n   * @param jsonData Defines the data to parse\n   * @param scene Defines the scene to parse the data for\n   * @param container Defines the container attached to the parsing sequence\n   * @param rootUrl Defines the root url of the data\n   */\n\n\n  AbstractScene.Parse = function (jsonData, scene, container, rootUrl) {\n    for (var parserName in this._BabylonFileParsers) {\n      if (Object.prototype.hasOwnProperty.call(this._BabylonFileParsers, parserName)) {\n        this._BabylonFileParsers[parserName](jsonData, scene, container, rootUrl);\n      }\n    }\n  };\n\n  Object.defineProperty(AbstractScene.prototype, \"environmentTexture\", {\n    /**\n     * Texture used in all pbr material as the reflection texture.\n     * As in the majority of the scene they are the same (exception for multi room and so on),\n     * this is easier to reference from here than from all the materials.\n     */\n    get: function get() {\n      return this._environmentTexture;\n    },\n    set: function set(value) {\n      this._environmentTexture = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * @returns all meshes, lights, cameras, transformNodes and bones\n   */\n\n  AbstractScene.prototype.getNodes = function () {\n    var nodes = new Array();\n    nodes = nodes.concat(this.meshes);\n    nodes = nodes.concat(this.lights);\n    nodes = nodes.concat(this.cameras);\n    nodes = nodes.concat(this.transformNodes); // dummies\n\n    this.skeletons.forEach(function (skeleton) {\n      return nodes = nodes.concat(skeleton.bones);\n    });\n    return nodes;\n  };\n  /**\n   * Stores the list of available parsers in the application.\n   */\n\n\n  AbstractScene._BabylonFileParsers = {};\n  /**\n   * Stores the list of available individual parsers in the application.\n   */\n\n  AbstractScene._IndividualBabylonFileParsers = {};\n  return AbstractScene;\n}();\n\nexport { AbstractScene };","map":{"version":3,"mappings":"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","names":["Array","AbstractScene","name","parser","_BabylonFileParsers","_IndividualBabylonFileParsers","jsonData","scene","container","rootUrl","parserName","Object","prototype","hasOwnProperty","call","_environmentTexture","value","nodes","concat","meshes","lights","cameras","transformNodes","skeletons","forEach","skeleton","bones"],"sourceRoot":"","sources":["../../../../lts/core/generated/abstractScene.ts"],"sourcesContent":["import type { Scene } from \"./scene\";\r\nimport type { Nullable } from \"./types\";\r\nimport type { AbstractMesh } from \"./Meshes/abstractMesh\";\r\nimport type { TransformNode } from \"./Meshes/transformNode\";\r\nimport type { Geometry } from \"./Meshes/geometry\";\r\nimport type { Skeleton } from \"./Bones/skeleton\";\r\nimport type { MorphTargetManager } from \"./Morph/morphTargetManager\";\r\nimport type { AssetContainer } from \"./assetContainer\";\r\nimport type { IParticleSystem } from \"./Particles/IParticleSystem\";\r\nimport type { AnimationGroup } from \"./Animations/animationGroup\";\r\nimport type { BaseTexture } from \"./Materials/Textures/baseTexture\";\r\nimport type { Material } from \"./Materials/material\";\r\nimport type { MultiMaterial } from \"./Materials/multiMaterial\";\r\nimport type { AbstractActionManager } from \"./Actions/abstractActionManager\";\r\nimport type { Camera } from \"./Cameras/camera\";\r\nimport type { Light } from \"./Lights/light\";\r\nimport type { Node } from \"./node\";\r\n\r\ndeclare type Animation = import(\"./Animations/animation\").Animation;\r\ndeclare type PostProcess = import(\"./PostProcesses/postProcess\").PostProcess;\r\n\r\n/**\r\n * Defines how the parser contract is defined.\r\n * These parsers are used to parse a list of specific assets (like particle systems, etc..)\r\n */\r\nexport type BabylonFileParser = (parsedData: any, scene: Scene, container: AssetContainer, rootUrl: string) => void;\r\n\r\n/**\r\n * Defines how the individual parser contract is defined.\r\n * These parser can parse an individual asset\r\n */\r\nexport type IndividualBabylonFileParser = (parsedData: any, scene: Scene, rootUrl: string) => any;\r\n\r\n/**\r\n * Base class of the scene acting as a container for the different elements composing a scene.\r\n * This class is dynamically extended by the different components of the scene increasing\r\n * flexibility and reducing coupling\r\n */\r\nexport abstract class AbstractScene {\r\n    /**\r\n     * Stores the list of available parsers in the application.\r\n     */\r\n    private static _BabylonFileParsers: { [key: string]: BabylonFileParser } = {};\r\n\r\n    /**\r\n     * Stores the list of available individual parsers in the application.\r\n     */\r\n    private static _IndividualBabylonFileParsers: { [key: string]: IndividualBabylonFileParser } = {};\r\n\r\n    /**\r\n     * Adds a parser in the list of available ones\r\n     * @param name Defines the name of the parser\r\n     * @param parser Defines the parser to add\r\n     */\r\n    public static AddParser(name: string, parser: BabylonFileParser): void {\r\n        this._BabylonFileParsers[name] = parser;\r\n    }\r\n\r\n    /**\r\n     * Gets a general parser from the list of available ones\r\n     * @param name Defines the name of the parser\r\n     * @returns the requested parser or null\r\n     */\r\n    public static GetParser(name: string): Nullable<BabylonFileParser> {\r\n        if (this._BabylonFileParsers[name]) {\r\n            return this._BabylonFileParsers[name];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Adds n individual parser in the list of available ones\r\n     * @param name Defines the name of the parser\r\n     * @param parser Defines the parser to add\r\n     */\r\n    public static AddIndividualParser(name: string, parser: IndividualBabylonFileParser): void {\r\n        this._IndividualBabylonFileParsers[name] = parser;\r\n    }\r\n\r\n    /**\r\n     * Gets an individual parser from the list of available ones\r\n     * @param name Defines the name of the parser\r\n     * @returns the requested parser or null\r\n     */\r\n    public static GetIndividualParser(name: string): Nullable<IndividualBabylonFileParser> {\r\n        if (this._IndividualBabylonFileParsers[name]) {\r\n            return this._IndividualBabylonFileParsers[name];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Parser json data and populate both a scene and its associated container object\r\n     * @param jsonData Defines the data to parse\r\n     * @param scene Defines the scene to parse the data for\r\n     * @param container Defines the container attached to the parsing sequence\r\n     * @param rootUrl Defines the root url of the data\r\n     */\r\n    public static Parse(jsonData: any, scene: Scene, container: AssetContainer, rootUrl: string): void {\r\n        for (const parserName in this._BabylonFileParsers) {\r\n            if (Object.prototype.hasOwnProperty.call(this._BabylonFileParsers, parserName)) {\r\n                this._BabylonFileParsers[parserName](jsonData, scene, container, rootUrl);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the list of root nodes (ie. nodes with no parent)\r\n     */\r\n    public rootNodes = new Array<Node>();\r\n\r\n    /** All of the cameras added to this scene\r\n     * @see https://doc.babylonjs.com/babylon101/cameras\r\n     */\r\n    public cameras = new Array<Camera>();\r\n\r\n    /**\r\n     * All of the lights added to this scene\r\n     * @see https://doc.babylonjs.com/babylon101/lights\r\n     */\r\n    public lights = new Array<Light>();\r\n\r\n    /**\r\n     * All of the (abstract) meshes added to this scene\r\n     */\r\n    public meshes = new Array<AbstractMesh>();\r\n\r\n    /**\r\n     * The list of skeletons added to the scene\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_bones_and_skeletons\r\n     */\r\n    public skeletons = new Array<Skeleton>();\r\n\r\n    /**\r\n     * All of the particle systems added to this scene\r\n     * @see https://doc.babylonjs.com/babylon101/particles\r\n     */\r\n    public particleSystems = new Array<IParticleSystem>();\r\n\r\n    /**\r\n     * Gets a list of Animations associated with the scene\r\n     */\r\n    public animations: Animation[] = [];\r\n\r\n    /**\r\n     * All of the animation groups added to this scene\r\n     * @see https://doc.babylonjs.com/divingDeeper/animation/groupAnimations\r\n     */\r\n    public animationGroups = new Array<AnimationGroup>();\r\n\r\n    /**\r\n     * All of the multi-materials added to this scene\r\n     * @see https://doc.babylonjs.com/how_to/multi_materials\r\n     */\r\n    public multiMaterials = new Array<MultiMaterial>();\r\n\r\n    /**\r\n     * All of the materials added to this scene\r\n     * In the context of a Scene, it is not supposed to be modified manually.\r\n     * Any addition or removal should be done using the addMaterial and removeMaterial Scene methods.\r\n     * Note also that the order of the Material within the array is not significant and might change.\r\n     * @see https://doc.babylonjs.com/babylon101/materials\r\n     */\r\n    public materials = new Array<Material>();\r\n\r\n    /**\r\n     * The list of morph target managers added to the scene\r\n     * @see https://doc.babylonjs.com/how_to/how_to_dynamically_morph_a_mesh\r\n     */\r\n    public morphTargetManagers = new Array<MorphTargetManager>();\r\n\r\n    /**\r\n     * The list of geometries used in the scene.\r\n     */\r\n    public geometries = new Array<Geometry>();\r\n\r\n    /**\r\n     * All of the transform nodes added to this scene\r\n     * In the context of a Scene, it is not supposed to be modified manually.\r\n     * Any addition or removal should be done using the addTransformNode and removeTransformNode Scene methods.\r\n     * Note also that the order of the TransformNode within the array is not significant and might change.\r\n     * @see https://doc.babylonjs.com/how_to/transformnode\r\n     */\r\n    public transformNodes = new Array<TransformNode>();\r\n\r\n    /**\r\n     * ActionManagers available on the scene.\r\n     */\r\n    public actionManagers = new Array<AbstractActionManager>();\r\n\r\n    /**\r\n     * Textures to keep.\r\n     */\r\n    public textures = new Array<BaseTexture>();\r\n\r\n    /** @hidden */\r\n    protected _environmentTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Texture used in all pbr material as the reflection texture.\r\n     * As in the majority of the scene they are the same (exception for multi room and so on),\r\n     * this is easier to reference from here than from all the materials.\r\n     */\r\n    public get environmentTexture(): Nullable<BaseTexture> {\r\n        return this._environmentTexture;\r\n    }\r\n\r\n    public set environmentTexture(value: Nullable<BaseTexture>) {\r\n        this._environmentTexture = value;\r\n    }\r\n\r\n    /**\r\n     * The list of postprocesses added to the scene\r\n     */\r\n    public postProcesses = new Array<PostProcess>();\r\n\r\n    /**\r\n     * @returns all meshes, lights, cameras, transformNodes and bones\r\n     */\r\n    public getNodes(): Array<Node> {\r\n        let nodes = new Array<Node>();\r\n        nodes = nodes.concat(this.meshes);\r\n        nodes = nodes.concat(this.lights);\r\n        nodes = nodes.concat(this.cameras);\r\n        nodes = nodes.concat(this.transformNodes); // dummies\r\n        this.skeletons.forEach((skeleton) => (nodes = nodes.concat(skeleton.bones)));\r\n        return nodes;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}