{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { BlurPostProcess } from \"./blurPostProcess.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize } from \"../Misc/decorators.js\";\n/**\n * The DepthOfFieldBlurPostProcess applied a blur in a give direction.\n * This blur differs from the standard BlurPostProcess as it attempts to avoid blurring pixels\n * based on samples that have a large difference in distance than the center pixel.\n * See section 2.6.2 http://fileadmin.cs.lth.se/cs/education/edan35/lectures/12dof.pdf\n */\n\nvar DepthOfFieldBlurPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(DepthOfFieldBlurPostProcess, _super);\n  /**\n   * Creates a new instance CircleOfConfusionPostProcess\n   * @param name The name of the effect.\n   * @param scene The scene the effect belongs to.\n   * @param direction The direction the blur should be applied.\n   * @param kernel The size of the kernel used to blur.\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param circleOfConfusion The circle of confusion + depth map to be used to avoid blurring across edges\n   * @param imageToBlur The image to apply the blur to (default: Current rendered frame)\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   * @param textureType Type of textures used when performing the post process. (default: 0)\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n   */\n\n\n  function DepthOfFieldBlurPostProcess(name, scene, direction, kernel, options, camera, circleOfConfusion, imageToBlur, samplingMode, engine, reusable, textureType, blockCompilation) {\n    if (imageToBlur === void 0) {\n      imageToBlur = null;\n    }\n\n    if (samplingMode === void 0) {\n      samplingMode = Texture.BILINEAR_SAMPLINGMODE;\n    }\n\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    var _this = _super.call(this, name, direction, kernel, options, camera, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    samplingMode = 2, engine, reusable, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    textureType = 0, \"#define DOF 1\\r\\n\", blockCompilation) || this;\n\n    _this.direction = direction;\n    _this.externalTextureSamplerBinding = !!imageToBlur;\n\n    _this.onApplyObservable.add(function (effect) {\n      if (imageToBlur != null) {\n        effect.setTextureFromPostProcess(\"textureSampler\", imageToBlur);\n      }\n\n      effect.setTextureFromPostProcessOutput(\"circleOfConfusionSampler\", circleOfConfusion);\n\n      if (scene.activeCamera) {\n        effect.setFloat2(\"cameraMinMaxZ\", scene.activeCamera.minZ, scene.activeCamera.maxZ);\n      }\n    });\n\n    return _this;\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"DepthOfFieldBlurPostProcess\" string\n   */\n\n\n  DepthOfFieldBlurPostProcess.prototype.getClassName = function () {\n    return \"DepthOfFieldBlurPostProcess\";\n  };\n\n  __decorate([serialize()], DepthOfFieldBlurPostProcess.prototype, \"direction\", void 0);\n\n  return DepthOfFieldBlurPostProcess;\n}(BlurPostProcess);\n\nexport { DepthOfFieldBlurPostProcess };\nRegisterClass(\"BABYLON.DepthOfFieldBlurPostProcess\", DepthOfFieldBlurPostProcess);","map":{"version":3,"mappings":";AAIA,SAASA,OAAT,QAAwB,kCAAxB;AAEA,SAASC,eAAT,QAAgC,sBAAhC;AAIA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAEA;;;;;;;AAMA;AAAA;AAAA;AAAiDC;AAe7C;;;;;;;;;;;;;;;;;;AAgBA,uCACIC,IADJ,EAEIC,KAFJ,EAGIC,SAHJ,EAIIC,MAJJ,EAKIC,OALJ,EAMIC,MANJ,EAOIC,iBAPJ,EAQIC,WARJ,EASIC,YATJ,EAUIC,MAVJ,EAWIC,QAXJ,EAYIC,WAZJ,EAaIC,gBAbJ,EAa4B;AALxB;AAAAL;AAAyC;;AACzC;AAAAC,qBAAuBb,OAAO,CAACkB,qBAA/B;AAAoD;;AAGpD;AAAAF,oBAAsB,CAAtB;AAAsB;;AACtB;AAAAC;AAAwB;;AAb5B,gBAeIE,kBACId,IADJ,EAEIE,SAFJ,EAGIC,MAHJ,EAIIC,OAJJ,EAKIC,MALJ,EAMI;AACCG,gBAAY,GAAG,CAPpB,EAOoBC,MAPpB,EAO8BC,QAP9B,EAUI;AACCC,eAAW,GAAG,CAXnB,EAWmB,mBAXnB,EAW6BC,gBAX7B,KAYI,IA3BR;;AA+BIG,SAAI,CAACb,SAAL,GAAiBA,SAAjB;AACAa,SAAI,CAACC,6BAAL,GAAqC,CAAC,CAACT,WAAvC;;AAEAQ,SAAI,CAACE,iBAAL,CAAuBC,GAAvB,CAA2B,UAACC,MAAD,EAAe;AACtC,UAAIZ,WAAW,IAAI,IAAnB,EAAyB;AACrBY,cAAM,CAACC,yBAAP,CAAiC,gBAAjC,EAAmDb,WAAnD;AACH;;AACDY,YAAM,CAACE,+BAAP,CAAuC,0BAAvC,EAAmEf,iBAAnE;;AACA,UAAIL,KAAK,CAACqB,YAAV,EAAwB;AACpBH,cAAM,CAACI,SAAP,CAAiB,eAAjB,EAAkCtB,KAAK,CAACqB,YAAN,CAAmBE,IAArD,EAA2DvB,KAAK,CAACqB,YAAN,CAAmBG,IAA9E;AACH;AACJ,KARD;;;AASH;AAnED;;;;;;AAIOC,uDAAP;AACI,WAAO,6BAAP;AACH,GAFM;;AANPC,cADC7B,SAAS,EACV;;AAsEJ;AAAC,CA3ED,CAAiDF,eAAjD;;SAAa8B;AA6Eb7B,aAAa,CAAC,qCAAD,EAAwC6B,2BAAxC,CAAb","names":["Texture","BlurPostProcess","RegisterClass","serialize","__extends","name","scene","direction","kernel","options","camera","circleOfConfusion","imageToBlur","samplingMode","engine","reusable","textureType","blockCompilation","BILINEAR_SAMPLINGMODE","_super","_this","externalTextureSamplerBinding","onApplyObservable","add","effect","setTextureFromPostProcess","setTextureFromPostProcessOutput","activeCamera","setFloat2","minZ","maxZ","DepthOfFieldBlurPostProcess","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/PostProcesses/depthOfFieldBlurPostProcess.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { Vector2 } from \"../Maths/math.vector\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { PostProcess, PostProcessOptions } from \"./postProcess\";\r\nimport { BlurPostProcess } from \"./blurPostProcess\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { serialize } from \"../Misc/decorators\";\r\n\r\n/**\r\n * The DepthOfFieldBlurPostProcess applied a blur in a give direction.\r\n * This blur differs from the standard BlurPostProcess as it attempts to avoid blurring pixels\r\n * based on samples that have a large difference in distance than the center pixel.\r\n * See section 2.6.2 http://fileadmin.cs.lth.se/cs/education/edan35/lectures/12dof.pdf\r\n */\r\nexport class DepthOfFieldBlurPostProcess extends BlurPostProcess {\r\n    /**\r\n     * The direction the blur should be applied\r\n     */\r\n    @serialize()\r\n    public direction: Vector2;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"DepthOfFieldBlurPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"DepthOfFieldBlurPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance CircleOfConfusionPostProcess\r\n     * @param name The name of the effect.\r\n     * @param scene The scene the effect belongs to.\r\n     * @param direction The direction the blur should be applied.\r\n     * @param kernel The size of the kernel used to blur.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param circleOfConfusion The circle of confusion + depth map to be used to avoid blurring across edges\r\n     * @param imageToBlur The image to apply the blur to (default: Current rendered frame)\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        scene: Scene,\r\n        direction: Vector2,\r\n        kernel: number,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        circleOfConfusion: PostProcess,\r\n        imageToBlur: Nullable<PostProcess> = null,\r\n        samplingMode: number = Texture.BILINEAR_SAMPLINGMODE,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        blockCompilation = false\r\n    ) {\r\n        super(\r\n            name,\r\n            direction,\r\n            kernel,\r\n            options,\r\n            camera,\r\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n            (samplingMode = Constants.TEXTURE_BILINEAR_SAMPLINGMODE),\r\n            engine,\r\n            reusable,\r\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n            (textureType = Constants.TEXTURETYPE_UNSIGNED_INT),\r\n            `#define DOF 1\\r\\n`,\r\n            blockCompilation\r\n        );\r\n\r\n        this.direction = direction;\r\n        this.externalTextureSamplerBinding = !!imageToBlur;\r\n\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            if (imageToBlur != null) {\r\n                effect.setTextureFromPostProcess(\"textureSampler\", imageToBlur);\r\n            }\r\n            effect.setTextureFromPostProcessOutput(\"circleOfConfusionSampler\", circleOfConfusion);\r\n            if (scene.activeCamera) {\r\n                effect.setFloat2(\"cameraMinMaxZ\", scene.activeCamera.minZ, scene.activeCamera.maxZ);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.DepthOfFieldBlurPostProcess\", DepthOfFieldBlurPostProcess);\r\n"]},"metadata":{},"sourceType":"module"}