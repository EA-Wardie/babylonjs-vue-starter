{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport { __decorate, __extends } from \"tslib\";\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { serialize, SerializationHelper, serializeAsTexture, serializeAsColorCurves, serializeAsColor4 } from \"../Misc/decorators.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Tools } from \"../Misc/tools.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\nimport { MaterialDefines } from \"../Materials/materialDefines.js\";\nimport { ColorCurves } from \"../Materials/colorCurves.js\";\n/**\n * @hidden\n */\n\nvar ImageProcessingConfigurationDefines =\n/** @class */\nfunction (_super) {\n  __extends(ImageProcessingConfigurationDefines, _super);\n\n  function ImageProcessingConfigurationDefines() {\n    var _this = _super.call(this) || this;\n\n    _this.IMAGEPROCESSING = false;\n    _this.VIGNETTE = false;\n    _this.VIGNETTEBLENDMODEMULTIPLY = false;\n    _this.VIGNETTEBLENDMODEOPAQUE = false;\n    _this.TONEMAPPING = false;\n    _this.TONEMAPPING_ACES = false;\n    _this.CONTRAST = false;\n    _this.COLORCURVES = false;\n    _this.COLORGRADING = false;\n    _this.COLORGRADING3D = false;\n    _this.SAMPLER3DGREENDEPTH = false;\n    _this.SAMPLER3DBGRMAP = false;\n    _this.IMAGEPROCESSINGPOSTPROCESS = false;\n    _this.EXPOSURE = false;\n    _this.SKIPFINALCOLORCLAMP = false;\n\n    _this.rebuild();\n\n    return _this;\n  }\n\n  return ImageProcessingConfigurationDefines;\n}(MaterialDefines);\n\nexport { ImageProcessingConfigurationDefines };\n/**\n * This groups together the common properties used for image processing either in direct forward pass\n * or through post processing effect depending on the use of the image processing pipeline in your scene\n * or not.\n */\n\nvar ImageProcessingConfiguration =\n/** @class */\nfunction () {\n  function ImageProcessingConfiguration() {\n    /**\n     * Color curves setup used in the effect if colorCurvesEnabled is set to true\n     */\n    this.colorCurves = new ColorCurves();\n    this._colorCurvesEnabled = false;\n    this._colorGradingEnabled = false;\n    this._colorGradingWithGreenDepth = true;\n    this._colorGradingBGR = true;\n    /** @hidden */\n\n    this._exposure = 1.0;\n    this._toneMappingEnabled = false;\n    this._toneMappingType = ImageProcessingConfiguration.TONEMAPPING_STANDARD;\n    this._contrast = 1.0;\n    /**\n     * Vignette stretch size.\n     */\n\n    this.vignetteStretch = 0;\n    /**\n     * Vignette centre X Offset.\n     */\n\n    this.vignetteCentreX = 0;\n    /**\n     * Vignette centre Y Offset.\n     */\n\n    this.vignetteCentreY = 0;\n    /**\n     * Vignette weight or intensity of the vignette effect.\n     */\n\n    this.vignetteWeight = 1.5;\n    /**\n     * Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\n     * if vignetteEnabled is set to true.\n     */\n\n    this.vignetteColor = new Color4(0, 0, 0, 0);\n    /**\n     * Camera field of view used by the Vignette effect.\n     */\n\n    this.vignetteCameraFov = 0.5;\n    this._vignetteBlendMode = ImageProcessingConfiguration.VIGNETTEMODE_MULTIPLY;\n    this._vignetteEnabled = false;\n    /** @hidden */\n\n    this._skipFinalColorClamp = false;\n    /** @hidden */\n\n    this._applyByPostProcess = false;\n    this._isEnabled = true;\n    /**\n     * An event triggered when the configuration changes and requires Shader to Update some parameters.\n     */\n\n    this.onUpdateParameters = new Observable();\n  }\n\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"colorCurvesEnabled\", {\n    /**\n     * Gets whether the color curves effect is enabled.\n     */\n    get: function get() {\n      return this._colorCurvesEnabled;\n    },\n\n    /**\n     * Sets whether the color curves effect is enabled.\n     */\n    set: function set(value) {\n      if (this._colorCurvesEnabled === value) {\n        return;\n      }\n\n      this._colorCurvesEnabled = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"colorGradingTexture\", {\n    /**\n     * Color grading LUT texture used in the effect if colorGradingEnabled is set to true\n     */\n    get: function get() {\n      return this._colorGradingTexture;\n    },\n\n    /**\n     * Color grading LUT texture used in the effect if colorGradingEnabled is set to true\n     */\n    set: function set(value) {\n      if (this._colorGradingTexture === value) {\n        return;\n      }\n\n      this._colorGradingTexture = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"colorGradingEnabled\", {\n    /**\n     * Gets whether the color grading effect is enabled.\n     */\n    get: function get() {\n      return this._colorGradingEnabled;\n    },\n\n    /**\n     * Sets whether the color grading effect is enabled.\n     */\n    set: function set(value) {\n      if (this._colorGradingEnabled === value) {\n        return;\n      }\n\n      this._colorGradingEnabled = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"colorGradingWithGreenDepth\", {\n    /**\n     * Gets whether the color grading effect is using a green depth for the 3d Texture.\n     */\n    get: function get() {\n      return this._colorGradingWithGreenDepth;\n    },\n\n    /**\n     * Sets whether the color grading effect is using a green depth for the 3d Texture.\n     */\n    set: function set(value) {\n      if (this._colorGradingWithGreenDepth === value) {\n        return;\n      }\n\n      this._colorGradingWithGreenDepth = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"colorGradingBGR\", {\n    /**\n     * Gets whether the color grading texture contains BGR values.\n     */\n    get: function get() {\n      return this._colorGradingBGR;\n    },\n\n    /**\n     * Sets whether the color grading texture contains BGR values.\n     */\n    set: function set(value) {\n      if (this._colorGradingBGR === value) {\n        return;\n      }\n\n      this._colorGradingBGR = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"exposure\", {\n    /**\n     * Gets the Exposure used in the effect.\n     */\n    get: function get() {\n      return this._exposure;\n    },\n\n    /**\n     * Sets the Exposure used in the effect.\n     */\n    set: function set(value) {\n      if (this._exposure === value) {\n        return;\n      }\n\n      this._exposure = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"toneMappingEnabled\", {\n    /**\n     * Gets whether the tone mapping effect is enabled.\n     */\n    get: function get() {\n      return this._toneMappingEnabled;\n    },\n\n    /**\n     * Sets whether the tone mapping effect is enabled.\n     */\n    set: function set(value) {\n      if (this._toneMappingEnabled === value) {\n        return;\n      }\n\n      this._toneMappingEnabled = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"toneMappingType\", {\n    /**\n     * Gets the type of tone mapping effect.\n     */\n    get: function get() {\n      return this._toneMappingType;\n    },\n\n    /**\n     * Sets the type of tone mapping effect used in BabylonJS.\n     */\n    set: function set(value) {\n      if (this._toneMappingType === value) {\n        return;\n      }\n\n      this._toneMappingType = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"contrast\", {\n    /**\n     * Gets the contrast used in the effect.\n     */\n    get: function get() {\n      return this._contrast;\n    },\n\n    /**\n     * Sets the contrast used in the effect.\n     */\n    set: function set(value) {\n      if (this._contrast === value) {\n        return;\n      }\n\n      this._contrast = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"vignetteBlendMode\", {\n    /**\n     * Gets the vignette blend mode allowing different kind of effect.\n     */\n    get: function get() {\n      return this._vignetteBlendMode;\n    },\n\n    /**\n     * Sets the vignette blend mode allowing different kind of effect.\n     */\n    set: function set(value) {\n      if (this._vignetteBlendMode === value) {\n        return;\n      }\n\n      this._vignetteBlendMode = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"vignetteEnabled\", {\n    /**\n     * Gets whether the vignette effect is enabled.\n     */\n    get: function get() {\n      return this._vignetteEnabled;\n    },\n\n    /**\n     * Sets whether the vignette effect is enabled.\n     */\n    set: function set(value) {\n      if (this._vignetteEnabled === value) {\n        return;\n      }\n\n      this._vignetteEnabled = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"skipFinalColorClamp\", {\n    /**\n     * If apply by post process is set to true, setting this to true will skip the the final color clamp step in the fragment shader\n     * Applies to PBR materials.\n     */\n    get: function get() {\n      return this._skipFinalColorClamp;\n    },\n\n    /**\n     * If apply by post process is set to true, setting this to true will skip the the final color clamp step in the fragment shader\n     * Applies to PBR materials.\n     */\n    set: function set(value) {\n      if (this._skipFinalColorClamp === value) {\n        return;\n      }\n\n      this._skipFinalColorClamp = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"applyByPostProcess\", {\n    /**\n     * Gets whether the image processing is applied through a post process or not.\n     */\n    get: function get() {\n      return this._applyByPostProcess;\n    },\n\n    /**\n     * Sets whether the image processing is applied through a post process or not.\n     */\n    set: function set(value) {\n      if (this._applyByPostProcess === value) {\n        return;\n      }\n\n      this._applyByPostProcess = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"isEnabled\", {\n    /**\n     * Gets whether the image processing is enabled or not.\n     */\n    get: function get() {\n      return this._isEnabled;\n    },\n\n    /**\n     * Sets whether the image processing is enabled or not.\n     */\n    set: function set(value) {\n      if (this._isEnabled === value) {\n        return;\n      }\n\n      this._isEnabled = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Method called each time the image processing information changes requires to recompile the effect.\n   */\n\n  ImageProcessingConfiguration.prototype._updateParameters = function () {\n    this.onUpdateParameters.notifyObservers(this);\n  };\n  /**\n   * Gets the current class name.\n   * @return \"ImageProcessingConfiguration\"\n   */\n\n\n  ImageProcessingConfiguration.prototype.getClassName = function () {\n    return \"ImageProcessingConfiguration\";\n  };\n  /**\n   * Prepare the list of uniforms associated with the Image Processing effects.\n   * @param uniforms The list of uniforms used in the effect\n   * @param defines the list of defines currently in use\n   */\n\n\n  ImageProcessingConfiguration.PrepareUniforms = function (uniforms, defines) {\n    if (defines.EXPOSURE) {\n      uniforms.push(\"exposureLinear\");\n    }\n\n    if (defines.CONTRAST) {\n      uniforms.push(\"contrast\");\n    }\n\n    if (defines.COLORGRADING) {\n      uniforms.push(\"colorTransformSettings\");\n    }\n\n    if (defines.VIGNETTE) {\n      uniforms.push(\"vInverseScreenSize\");\n      uniforms.push(\"vignetteSettings1\");\n      uniforms.push(\"vignetteSettings2\");\n    }\n\n    if (defines.COLORCURVES) {\n      ColorCurves.PrepareUniforms(uniforms);\n    }\n  };\n  /**\n   * Prepare the list of samplers associated with the Image Processing effects.\n   * @param samplersList The list of uniforms used in the effect\n   * @param defines the list of defines currently in use\n   */\n\n\n  ImageProcessingConfiguration.PrepareSamplers = function (samplersList, defines) {\n    if (defines.COLORGRADING) {\n      samplersList.push(\"txColorTransform\");\n    }\n  };\n  /**\n   * Prepare the list of defines associated to the shader.\n   * @param defines the list of defines to complete\n   * @param forPostProcess Define if we are currently in post process mode or not\n   */\n\n\n  ImageProcessingConfiguration.prototype.prepareDefines = function (defines, forPostProcess) {\n    if (forPostProcess === void 0) {\n      forPostProcess = false;\n    }\n\n    if (forPostProcess !== this.applyByPostProcess || !this._isEnabled) {\n      defines.VIGNETTE = false;\n      defines.TONEMAPPING = false;\n      defines.TONEMAPPING_ACES = false;\n      defines.CONTRAST = false;\n      defines.EXPOSURE = false;\n      defines.COLORCURVES = false;\n      defines.COLORGRADING = false;\n      defines.COLORGRADING3D = false;\n      defines.IMAGEPROCESSING = false;\n      defines.SKIPFINALCOLORCLAMP = this.skipFinalColorClamp;\n      defines.IMAGEPROCESSINGPOSTPROCESS = this.applyByPostProcess && this._isEnabled;\n      return;\n    }\n\n    defines.VIGNETTE = this.vignetteEnabled;\n    defines.VIGNETTEBLENDMODEMULTIPLY = this.vignetteBlendMode === ImageProcessingConfiguration._VIGNETTEMODE_MULTIPLY;\n    defines.VIGNETTEBLENDMODEOPAQUE = !defines.VIGNETTEBLENDMODEMULTIPLY;\n    defines.TONEMAPPING = this.toneMappingEnabled;\n\n    switch (this._toneMappingType) {\n      case ImageProcessingConfiguration.TONEMAPPING_ACES:\n        defines.TONEMAPPING_ACES = true;\n        break;\n\n      default:\n        defines.TONEMAPPING_ACES = false;\n        break;\n    }\n\n    defines.CONTRAST = this.contrast !== 1.0;\n    defines.EXPOSURE = this.exposure !== 1.0;\n    defines.COLORCURVES = this.colorCurvesEnabled && !!this.colorCurves;\n    defines.COLORGRADING = this.colorGradingEnabled && !!this.colorGradingTexture;\n\n    if (defines.COLORGRADING) {\n      defines.COLORGRADING3D = this.colorGradingTexture.is3D;\n    } else {\n      defines.COLORGRADING3D = false;\n    }\n\n    defines.SAMPLER3DGREENDEPTH = this.colorGradingWithGreenDepth;\n    defines.SAMPLER3DBGRMAP = this.colorGradingBGR;\n    defines.IMAGEPROCESSINGPOSTPROCESS = this.applyByPostProcess;\n    defines.SKIPFINALCOLORCLAMP = this.skipFinalColorClamp;\n    defines.IMAGEPROCESSING = defines.VIGNETTE || defines.TONEMAPPING || defines.CONTRAST || defines.EXPOSURE || defines.COLORCURVES || defines.COLORGRADING;\n  };\n  /**\n   * Returns true if all the image processing information are ready.\n   * @returns True if ready, otherwise, false\n   */\n\n\n  ImageProcessingConfiguration.prototype.isReady = function () {\n    // Color Grading texture can not be none blocking.\n    return !this.colorGradingEnabled || !this.colorGradingTexture || this.colorGradingTexture.isReady();\n  };\n  /**\n   * Binds the image processing to the shader.\n   * @param effect The effect to bind to\n   * @param overrideAspectRatio Override the aspect ratio of the effect\n   */\n\n\n  ImageProcessingConfiguration.prototype.bind = function (effect, overrideAspectRatio) {\n    // Color Curves\n    if (this._colorCurvesEnabled && this.colorCurves) {\n      ColorCurves.Bind(this.colorCurves, effect);\n    } // Vignette\n\n\n    if (this._vignetteEnabled) {\n      var inverseWidth = 1 / effect.getEngine().getRenderWidth();\n      var inverseHeight = 1 / effect.getEngine().getRenderHeight();\n      effect.setFloat2(\"vInverseScreenSize\", inverseWidth, inverseHeight);\n      var aspectRatio = overrideAspectRatio != null ? overrideAspectRatio : inverseHeight / inverseWidth;\n      var vignetteScaleY = Math.tan(this.vignetteCameraFov * 0.5);\n      var vignetteScaleX = vignetteScaleY * aspectRatio;\n      var vignetteScaleGeometricMean = Math.sqrt(vignetteScaleX * vignetteScaleY);\n      vignetteScaleX = Tools.Mix(vignetteScaleX, vignetteScaleGeometricMean, this.vignetteStretch);\n      vignetteScaleY = Tools.Mix(vignetteScaleY, vignetteScaleGeometricMean, this.vignetteStretch);\n      effect.setFloat4(\"vignetteSettings1\", vignetteScaleX, vignetteScaleY, -vignetteScaleX * this.vignetteCentreX, -vignetteScaleY * this.vignetteCentreY);\n      var vignettePower = -2.0 * this.vignetteWeight;\n      effect.setFloat4(\"vignetteSettings2\", this.vignetteColor.r, this.vignetteColor.g, this.vignetteColor.b, vignettePower);\n    } // Exposure\n\n\n    effect.setFloat(\"exposureLinear\", this.exposure); // Contrast\n\n    effect.setFloat(\"contrast\", this.contrast); // Color transform settings\n\n    if (this.colorGradingTexture) {\n      effect.setTexture(\"txColorTransform\", this.colorGradingTexture);\n      var textureSize = this.colorGradingTexture.getSize().height;\n      effect.setFloat4(\"colorTransformSettings\", (textureSize - 1) / textureSize, // textureScale\n      0.5 / textureSize, // textureOffset\n      textureSize, // textureSize\n      this.colorGradingTexture.level // weight\n      );\n    }\n  };\n  /**\n   * Clones the current image processing instance.\n   * @return The cloned image processing\n   */\n\n\n  ImageProcessingConfiguration.prototype.clone = function () {\n    return SerializationHelper.Clone(function () {\n      return new ImageProcessingConfiguration();\n    }, this);\n  };\n  /**\n   * Serializes the current image processing instance to a json representation.\n   * @return a JSON representation\n   */\n\n\n  ImageProcessingConfiguration.prototype.serialize = function () {\n    return SerializationHelper.Serialize(this);\n  };\n  /**\n   * Parses the image processing from a json representation.\n   * @param source the JSON source to parse\n   * @return The parsed image processing\n   */\n\n\n  ImageProcessingConfiguration.Parse = function (source) {\n    return SerializationHelper.Parse(function () {\n      return new ImageProcessingConfiguration();\n    }, source, null, null);\n  };\n\n  Object.defineProperty(ImageProcessingConfiguration, \"VIGNETTEMODE_MULTIPLY\", {\n    /**\n     * Used to apply the vignette as a mix with the pixel color.\n     */\n    get: function get() {\n      return this._VIGNETTEMODE_MULTIPLY;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration, \"VIGNETTEMODE_OPAQUE\", {\n    /**\n     * Used to apply the vignette as a replacement of the pixel color.\n     */\n    get: function get() {\n      return this._VIGNETTEMODE_OPAQUE;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Default tone mapping applied in BabylonJS.\n   */\n\n  ImageProcessingConfiguration.TONEMAPPING_STANDARD = 0;\n  /**\n   * ACES Tone mapping (used by default in unreal and unity). This can help getting closer\n   * to other engines rendering to increase portability.\n   */\n\n  ImageProcessingConfiguration.TONEMAPPING_ACES = 1; // Static constants associated to the image processing.\n\n  ImageProcessingConfiguration._VIGNETTEMODE_MULTIPLY = 0;\n  ImageProcessingConfiguration._VIGNETTEMODE_OPAQUE = 1;\n\n  __decorate([serializeAsColorCurves()], ImageProcessingConfiguration.prototype, \"colorCurves\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_colorCurvesEnabled\", void 0);\n\n  __decorate([serializeAsTexture(\"colorGradingTexture\")], ImageProcessingConfiguration.prototype, \"_colorGradingTexture\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_colorGradingEnabled\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_colorGradingWithGreenDepth\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_colorGradingBGR\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_exposure\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_toneMappingEnabled\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_toneMappingType\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_contrast\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"vignetteStretch\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"vignetteCentreX\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"vignetteCentreY\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"vignetteWeight\", void 0);\n\n  __decorate([serializeAsColor4()], ImageProcessingConfiguration.prototype, \"vignetteColor\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"vignetteCameraFov\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_vignetteBlendMode\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_vignetteEnabled\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_skipFinalColorClamp\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_applyByPostProcess\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_isEnabled\", void 0);\n\n  return ImageProcessingConfiguration;\n}();\n\nexport { ImageProcessingConfiguration }; // References the dependencies.\n\nSerializationHelper._ImageProcessingConfigurationParser = ImageProcessingConfiguration.Parse;","map":{"version":3,"mappings":"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BfkG,cADC7G,sBAAsB,EACvB;;AAGA6G,cADChH,SAAS,EACV;;AAoBAgH,cADC9G,kBAAkB,CAAC,qBAAD,CACnB;;AAoBA8G,cADChH,SAAS,EACV;;AAoBAgH,cADChH,SAAS,EACV;;AAoBAgH,cADChH,SAAS,EACV;;AAqBAgH,cADChH,SAAS,EACV;;AAoBAgH,cADChH,SAAS,EACV;;AAoBAgH,cADChH,SAAS,EACV;;AAoBAgH,cADChH,SAAS,EACV;;AAuBAgH,cADChH,SAAS,EACV;;AAMAgH,cADChH,SAAS,EACV;;AAMAgH,cADChH,SAAS,EACV;;AAMAgH,cADChH,SAAS,EACV;;AAOAgH,cADC5G,iBAAiB,EAClB;;AAMA4G,cADChH,SAAS,EACV;;AAGAgH,cADChH,SAAS,EACV;;AAoBAgH,cADChH,SAAS,EACV;;AAqBAgH,cADChH,SAAS,EACV;;AAuBAgH,cADChH,SAAS,EACV;;AAoBAgH,cADChH,SAAS,EACV;;AAsOJ;AAAC,CAviBD;;SAAac,+B,CAyiBb;;AACAb,mBAAmB,CAACgH,mCAApB,GAA0DnG,4BAA4B,CAACgG,KAAvF","names":["serialize","SerializationHelper","serializeAsTexture","serializeAsColorCurves","serializeAsColor4","Observable","Tools","Color4","MaterialDefines","ColorCurves","__extends","_super","_this","rebuild","ImageProcessingConfiguration","TONEMAPPING_STANDARD","VIGNETTEMODE_MULTIPLY","Object","_colorCurvesEnabled","value","_updateParameters","_colorGradingTexture","_colorGradingEnabled","_colorGradingWithGreenDepth","_colorGradingBGR","_exposure","_toneMappingEnabled","_toneMappingType","_contrast","_vignetteBlendMode","_vignetteEnabled","_skipFinalColorClamp","_applyByPostProcess","_isEnabled","onUpdateParameters","notifyObservers","uniforms","defines","EXPOSURE","push","CONTRAST","COLORGRADING","VIGNETTE","COLORCURVES","PrepareUniforms","samplersList","forPostProcess","applyByPostProcess","TONEMAPPING","TONEMAPPING_ACES","COLORGRADING3D","IMAGEPROCESSING","SKIPFINALCOLORCLAMP","skipFinalColorClamp","IMAGEPROCESSINGPOSTPROCESS","vignetteEnabled","VIGNETTEBLENDMODEMULTIPLY","vignetteBlendMode","_VIGNETTEMODE_MULTIPLY","VIGNETTEBLENDMODEOPAQUE","toneMappingEnabled","contrast","exposure","colorCurvesEnabled","colorCurves","colorGradingEnabled","colorGradingTexture","is3D","SAMPLER3DGREENDEPTH","colorGradingWithGreenDepth","SAMPLER3DBGRMAP","colorGradingBGR","isReady","effect","overrideAspectRatio","Bind","inverseWidth","getEngine","getRenderWidth","inverseHeight","getRenderHeight","setFloat2","aspectRatio","vignetteScaleY","Math","tan","vignetteCameraFov","vignetteScaleX","vignetteScaleGeometricMean","sqrt","Mix","vignetteStretch","setFloat4","vignetteCentreX","vignetteCentreY","vignettePower","vignetteWeight","vignetteColor","r","g","b","setFloat","setTexture","textureSize","getSize","height","level","Clone","Serialize","source","Parse","_VIGNETTEMODE_OPAQUE","__decorate","_ImageProcessingConfigurationParser"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Materials/imageProcessingConfiguration.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { serialize, SerializationHelper, serializeAsTexture, serializeAsColorCurves, serializeAsColor4 } from \"../Misc/decorators\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport { MaterialDefines } from \"../Materials/materialDefines\";\r\nimport { ColorCurves } from \"../Materials/colorCurves\";\r\n\r\ndeclare type BaseTexture = import(\"../Materials/Textures/baseTexture\").BaseTexture;\r\ndeclare type Effect = import(\"../Materials/effect\").Effect;\r\n\r\n/**\r\n * Interface to follow in your material defines to integrate easily the\r\n * Image processing functions.\r\n * @hidden\r\n */\r\nexport interface IImageProcessingConfigurationDefines {\r\n    IMAGEPROCESSING: boolean;\r\n    VIGNETTE: boolean;\r\n    VIGNETTEBLENDMODEMULTIPLY: boolean;\r\n    VIGNETTEBLENDMODEOPAQUE: boolean;\r\n    TONEMAPPING: boolean;\r\n    TONEMAPPING_ACES: boolean;\r\n    CONTRAST: boolean;\r\n    EXPOSURE: boolean;\r\n    COLORCURVES: boolean;\r\n    COLORGRADING: boolean;\r\n    COLORGRADING3D: boolean;\r\n    SAMPLER3DGREENDEPTH: boolean;\r\n    SAMPLER3DBGRMAP: boolean;\r\n    IMAGEPROCESSINGPOSTPROCESS: boolean;\r\n    SKIPFINALCOLORCLAMP: boolean;\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class ImageProcessingConfigurationDefines extends MaterialDefines implements IImageProcessingConfigurationDefines {\r\n    public IMAGEPROCESSING = false;\r\n    public VIGNETTE = false;\r\n    public VIGNETTEBLENDMODEMULTIPLY = false;\r\n    public VIGNETTEBLENDMODEOPAQUE = false;\r\n    public TONEMAPPING = false;\r\n    public TONEMAPPING_ACES = false;\r\n    public CONTRAST = false;\r\n    public COLORCURVES = false;\r\n    public COLORGRADING = false;\r\n    public COLORGRADING3D = false;\r\n    public SAMPLER3DGREENDEPTH = false;\r\n    public SAMPLER3DBGRMAP = false;\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    public EXPOSURE = false;\r\n    public SKIPFINALCOLORCLAMP = false;\r\n\r\n    constructor() {\r\n        super();\r\n        this.rebuild();\r\n    }\r\n}\r\n\r\n/**\r\n * This groups together the common properties used for image processing either in direct forward pass\r\n * or through post processing effect depending on the use of the image processing pipeline in your scene\r\n * or not.\r\n */\r\nexport class ImageProcessingConfiguration {\r\n    /**\r\n     * Default tone mapping applied in BabylonJS.\r\n     */\r\n    public static readonly TONEMAPPING_STANDARD = 0;\r\n\r\n    /**\r\n     * ACES Tone mapping (used by default in unreal and unity). This can help getting closer\r\n     * to other engines rendering to increase portability.\r\n     */\r\n    public static readonly TONEMAPPING_ACES = 1;\r\n\r\n    /**\r\n     * Color curves setup used in the effect if colorCurvesEnabled is set to true\r\n     */\r\n    @serializeAsColorCurves()\r\n    public colorCurves: Nullable<ColorCurves> = new ColorCurves();\r\n\r\n    @serialize()\r\n    private _colorCurvesEnabled = false;\r\n    /**\r\n     * Gets whether the color curves effect is enabled.\r\n     */\r\n    public get colorCurvesEnabled(): boolean {\r\n        return this._colorCurvesEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the color curves effect is enabled.\r\n     */\r\n    public set colorCurvesEnabled(value: boolean) {\r\n        if (this._colorCurvesEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorCurvesEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serializeAsTexture(\"colorGradingTexture\")\r\n    private _colorGradingTexture: Nullable<BaseTexture>;\r\n    /**\r\n     * Color grading LUT texture used in the effect if colorGradingEnabled is set to true\r\n     */\r\n    public get colorGradingTexture(): Nullable<BaseTexture> {\r\n        return this._colorGradingTexture;\r\n    }\r\n    /**\r\n     * Color grading LUT texture used in the effect if colorGradingEnabled is set to true\r\n     */\r\n    public set colorGradingTexture(value: Nullable<BaseTexture>) {\r\n        if (this._colorGradingTexture === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorGradingTexture = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _colorGradingEnabled = false;\r\n    /**\r\n     * Gets whether the color grading effect is enabled.\r\n     */\r\n    public get colorGradingEnabled(): boolean {\r\n        return this._colorGradingEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the color grading effect is enabled.\r\n     */\r\n    public set colorGradingEnabled(value: boolean) {\r\n        if (this._colorGradingEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorGradingEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _colorGradingWithGreenDepth = true;\r\n    /**\r\n     * Gets whether the color grading effect is using a green depth for the 3d Texture.\r\n     */\r\n    public get colorGradingWithGreenDepth(): boolean {\r\n        return this._colorGradingWithGreenDepth;\r\n    }\r\n    /**\r\n     * Sets whether the color grading effect is using a green depth for the 3d Texture.\r\n     */\r\n    public set colorGradingWithGreenDepth(value: boolean) {\r\n        if (this._colorGradingWithGreenDepth === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorGradingWithGreenDepth = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _colorGradingBGR = true;\r\n    /**\r\n     * Gets whether the color grading texture contains BGR values.\r\n     */\r\n    public get colorGradingBGR(): boolean {\r\n        return this._colorGradingBGR;\r\n    }\r\n    /**\r\n     * Sets whether the color grading texture contains BGR values.\r\n     */\r\n    public set colorGradingBGR(value: boolean) {\r\n        if (this._colorGradingBGR === value) {\r\n            return;\r\n        }\r\n\r\n        this._colorGradingBGR = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /** @hidden */\r\n    @serialize()\r\n    public _exposure = 1.0;\r\n    /**\r\n     * Gets the Exposure used in the effect.\r\n     */\r\n    public get exposure(): number {\r\n        return this._exposure;\r\n    }\r\n    /**\r\n     * Sets the Exposure used in the effect.\r\n     */\r\n    public set exposure(value: number) {\r\n        if (this._exposure === value) {\r\n            return;\r\n        }\r\n\r\n        this._exposure = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _toneMappingEnabled = false;\r\n    /**\r\n     * Gets whether the tone mapping effect is enabled.\r\n     */\r\n    public get toneMappingEnabled(): boolean {\r\n        return this._toneMappingEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the tone mapping effect is enabled.\r\n     */\r\n    public set toneMappingEnabled(value: boolean) {\r\n        if (this._toneMappingEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._toneMappingEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _toneMappingType = ImageProcessingConfiguration.TONEMAPPING_STANDARD;\r\n    /**\r\n     * Gets the type of tone mapping effect.\r\n     */\r\n    public get toneMappingType(): number {\r\n        return this._toneMappingType;\r\n    }\r\n    /**\r\n     * Sets the type of tone mapping effect used in BabylonJS.\r\n     */\r\n    public set toneMappingType(value: number) {\r\n        if (this._toneMappingType === value) {\r\n            return;\r\n        }\r\n\r\n        this._toneMappingType = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    protected _contrast = 1.0;\r\n    /**\r\n     * Gets the contrast used in the effect.\r\n     */\r\n    public get contrast(): number {\r\n        return this._contrast;\r\n    }\r\n    /**\r\n     * Sets the contrast used in the effect.\r\n     */\r\n    public set contrast(value: number) {\r\n        if (this._contrast === value) {\r\n            return;\r\n        }\r\n\r\n        this._contrast = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /**\r\n     * Vignette stretch size.\r\n     */\r\n    @serialize()\r\n    public vignetteStretch = 0;\r\n\r\n    /**\r\n     * Vignette centre X Offset.\r\n     */\r\n    @serialize()\r\n    public vignetteCentreX = 0;\r\n\r\n    /**\r\n     * Vignette centre Y Offset.\r\n     */\r\n    @serialize()\r\n    public vignetteCentreY = 0;\r\n\r\n    /**\r\n     * Vignette weight or intensity of the vignette effect.\r\n     */\r\n    @serialize()\r\n    public vignetteWeight = 1.5;\r\n\r\n    /**\r\n     * Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\r\n     * if vignetteEnabled is set to true.\r\n     */\r\n    @serializeAsColor4()\r\n    public vignetteColor: Color4 = new Color4(0, 0, 0, 0);\r\n\r\n    /**\r\n     * Camera field of view used by the Vignette effect.\r\n     */\r\n    @serialize()\r\n    public vignetteCameraFov = 0.5;\r\n\r\n    @serialize()\r\n    private _vignetteBlendMode = ImageProcessingConfiguration.VIGNETTEMODE_MULTIPLY;\r\n    /**\r\n     * Gets the vignette blend mode allowing different kind of effect.\r\n     */\r\n    public get vignetteBlendMode(): number {\r\n        return this._vignetteBlendMode;\r\n    }\r\n    /**\r\n     * Sets the vignette blend mode allowing different kind of effect.\r\n     */\r\n    public set vignetteBlendMode(value: number) {\r\n        if (this._vignetteBlendMode === value) {\r\n            return;\r\n        }\r\n\r\n        this._vignetteBlendMode = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _vignetteEnabled = false;\r\n    /**\r\n     * Gets whether the vignette effect is enabled.\r\n     */\r\n    public get vignetteEnabled(): boolean {\r\n        return this._vignetteEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the vignette effect is enabled.\r\n     */\r\n    public set vignetteEnabled(value: boolean) {\r\n        if (this._vignetteEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._vignetteEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /** @hidden */\r\n    @serialize()\r\n    public _skipFinalColorClamp = false;\r\n    /**\r\n     * If apply by post process is set to true, setting this to true will skip the the final color clamp step in the fragment shader\r\n     * Applies to PBR materials.\r\n     */\r\n    public get skipFinalColorClamp(): boolean {\r\n        return this._skipFinalColorClamp;\r\n    }\r\n    /**\r\n     * If apply by post process is set to true, setting this to true will skip the the final color clamp step in the fragment shader\r\n     * Applies to PBR materials.\r\n     */\r\n    public set skipFinalColorClamp(value: boolean) {\r\n        if (this._skipFinalColorClamp === value) {\r\n            return;\r\n        }\r\n\r\n        this._skipFinalColorClamp = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /** @hidden */\r\n    @serialize()\r\n    public _applyByPostProcess = false;\r\n    /**\r\n     * Gets whether the image processing is applied through a post process or not.\r\n     */\r\n    public get applyByPostProcess(): boolean {\r\n        return this._applyByPostProcess;\r\n    }\r\n    /**\r\n     * Sets whether the image processing is applied through a post process or not.\r\n     */\r\n    public set applyByPostProcess(value: boolean) {\r\n        if (this._applyByPostProcess === value) {\r\n            return;\r\n        }\r\n\r\n        this._applyByPostProcess = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    @serialize()\r\n    private _isEnabled = true;\r\n    /**\r\n     * Gets whether the image processing is enabled or not.\r\n     */\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the image processing is enabled or not.\r\n     */\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /**\r\n     * An event triggered when the configuration changes and requires Shader to Update some parameters.\r\n     */\r\n    public onUpdateParameters = new Observable<ImageProcessingConfiguration>();\r\n\r\n    /**\r\n     * Method called each time the image processing information changes requires to recompile the effect.\r\n     */\r\n    protected _updateParameters(): void {\r\n        this.onUpdateParameters.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name.\r\n     * @return \"ImageProcessingConfiguration\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"ImageProcessingConfiguration\";\r\n    }\r\n\r\n    /**\r\n     * Prepare the list of uniforms associated with the Image Processing effects.\r\n     * @param uniforms The list of uniforms used in the effect\r\n     * @param defines the list of defines currently in use\r\n     */\r\n    public static PrepareUniforms(uniforms: string[], defines: IImageProcessingConfigurationDefines): void {\r\n        if (defines.EXPOSURE) {\r\n            uniforms.push(\"exposureLinear\");\r\n        }\r\n        if (defines.CONTRAST) {\r\n            uniforms.push(\"contrast\");\r\n        }\r\n        if (defines.COLORGRADING) {\r\n            uniforms.push(\"colorTransformSettings\");\r\n        }\r\n        if (defines.VIGNETTE) {\r\n            uniforms.push(\"vInverseScreenSize\");\r\n            uniforms.push(\"vignetteSettings1\");\r\n            uniforms.push(\"vignetteSettings2\");\r\n        }\r\n        if (defines.COLORCURVES) {\r\n            ColorCurves.PrepareUniforms(uniforms);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepare the list of samplers associated with the Image Processing effects.\r\n     * @param samplersList The list of uniforms used in the effect\r\n     * @param defines the list of defines currently in use\r\n     */\r\n    public static PrepareSamplers(samplersList: string[], defines: IImageProcessingConfigurationDefines): void {\r\n        if (defines.COLORGRADING) {\r\n            samplersList.push(\"txColorTransform\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepare the list of defines associated to the shader.\r\n     * @param defines the list of defines to complete\r\n     * @param forPostProcess Define if we are currently in post process mode or not\r\n     */\r\n    public prepareDefines(defines: IImageProcessingConfigurationDefines, forPostProcess: boolean = false): void {\r\n        if (forPostProcess !== this.applyByPostProcess || !this._isEnabled) {\r\n            defines.VIGNETTE = false;\r\n            defines.TONEMAPPING = false;\r\n            defines.TONEMAPPING_ACES = false;\r\n            defines.CONTRAST = false;\r\n            defines.EXPOSURE = false;\r\n            defines.COLORCURVES = false;\r\n            defines.COLORGRADING = false;\r\n            defines.COLORGRADING3D = false;\r\n            defines.IMAGEPROCESSING = false;\r\n            defines.SKIPFINALCOLORCLAMP = this.skipFinalColorClamp;\r\n            defines.IMAGEPROCESSINGPOSTPROCESS = this.applyByPostProcess && this._isEnabled;\r\n            return;\r\n        }\r\n\r\n        defines.VIGNETTE = this.vignetteEnabled;\r\n        defines.VIGNETTEBLENDMODEMULTIPLY = this.vignetteBlendMode === ImageProcessingConfiguration._VIGNETTEMODE_MULTIPLY;\r\n        defines.VIGNETTEBLENDMODEOPAQUE = !defines.VIGNETTEBLENDMODEMULTIPLY;\r\n\r\n        defines.TONEMAPPING = this.toneMappingEnabled;\r\n        switch (this._toneMappingType) {\r\n            case ImageProcessingConfiguration.TONEMAPPING_ACES:\r\n                defines.TONEMAPPING_ACES = true;\r\n                break;\r\n            default:\r\n                defines.TONEMAPPING_ACES = false;\r\n                break;\r\n        }\r\n\r\n        defines.CONTRAST = this.contrast !== 1.0;\r\n        defines.EXPOSURE = this.exposure !== 1.0;\r\n        defines.COLORCURVES = this.colorCurvesEnabled && !!this.colorCurves;\r\n        defines.COLORGRADING = this.colorGradingEnabled && !!this.colorGradingTexture;\r\n        if (defines.COLORGRADING) {\r\n            defines.COLORGRADING3D = this.colorGradingTexture!.is3D;\r\n        } else {\r\n            defines.COLORGRADING3D = false;\r\n        }\r\n        defines.SAMPLER3DGREENDEPTH = this.colorGradingWithGreenDepth;\r\n        defines.SAMPLER3DBGRMAP = this.colorGradingBGR;\r\n        defines.IMAGEPROCESSINGPOSTPROCESS = this.applyByPostProcess;\r\n        defines.SKIPFINALCOLORCLAMP = this.skipFinalColorClamp;\r\n        defines.IMAGEPROCESSING = defines.VIGNETTE || defines.TONEMAPPING || defines.CONTRAST || defines.EXPOSURE || defines.COLORCURVES || defines.COLORGRADING;\r\n    }\r\n\r\n    /**\r\n     * Returns true if all the image processing information are ready.\r\n     * @returns True if ready, otherwise, false\r\n     */\r\n    public isReady() {\r\n        // Color Grading texture can not be none blocking.\r\n        return !this.colorGradingEnabled || !this.colorGradingTexture || this.colorGradingTexture.isReady();\r\n    }\r\n\r\n    /**\r\n     * Binds the image processing to the shader.\r\n     * @param effect The effect to bind to\r\n     * @param overrideAspectRatio Override the aspect ratio of the effect\r\n     */\r\n    public bind(effect: Effect, overrideAspectRatio?: number): void {\r\n        // Color Curves\r\n        if (this._colorCurvesEnabled && this.colorCurves) {\r\n            ColorCurves.Bind(this.colorCurves, effect);\r\n        }\r\n\r\n        // Vignette\r\n        if (this._vignetteEnabled) {\r\n            const inverseWidth = 1 / effect.getEngine().getRenderWidth();\r\n            const inverseHeight = 1 / effect.getEngine().getRenderHeight();\r\n            effect.setFloat2(\"vInverseScreenSize\", inverseWidth, inverseHeight);\r\n\r\n            const aspectRatio = overrideAspectRatio != null ? overrideAspectRatio : inverseHeight / inverseWidth;\r\n\r\n            let vignetteScaleY = Math.tan(this.vignetteCameraFov * 0.5);\r\n            let vignetteScaleX = vignetteScaleY * aspectRatio;\r\n\r\n            const vignetteScaleGeometricMean = Math.sqrt(vignetteScaleX * vignetteScaleY);\r\n            vignetteScaleX = Tools.Mix(vignetteScaleX, vignetteScaleGeometricMean, this.vignetteStretch);\r\n            vignetteScaleY = Tools.Mix(vignetteScaleY, vignetteScaleGeometricMean, this.vignetteStretch);\r\n\r\n            effect.setFloat4(\"vignetteSettings1\", vignetteScaleX, vignetteScaleY, -vignetteScaleX * this.vignetteCentreX, -vignetteScaleY * this.vignetteCentreY);\r\n\r\n            const vignettePower = -2.0 * this.vignetteWeight;\r\n            effect.setFloat4(\"vignetteSettings2\", this.vignetteColor.r, this.vignetteColor.g, this.vignetteColor.b, vignettePower);\r\n        }\r\n\r\n        // Exposure\r\n        effect.setFloat(\"exposureLinear\", this.exposure);\r\n\r\n        // Contrast\r\n        effect.setFloat(\"contrast\", this.contrast);\r\n\r\n        // Color transform settings\r\n        if (this.colorGradingTexture) {\r\n            effect.setTexture(\"txColorTransform\", this.colorGradingTexture);\r\n            const textureSize = this.colorGradingTexture.getSize().height;\r\n\r\n            effect.setFloat4(\r\n                \"colorTransformSettings\",\r\n                (textureSize - 1) / textureSize, // textureScale\r\n                0.5 / textureSize, // textureOffset\r\n                textureSize, // textureSize\r\n                this.colorGradingTexture.level // weight\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clones the current image processing instance.\r\n     * @return The cloned image processing\r\n     */\r\n    public clone(): ImageProcessingConfiguration {\r\n        return SerializationHelper.Clone(() => new ImageProcessingConfiguration(), this);\r\n    }\r\n\r\n    /**\r\n     * Serializes the current image processing instance to a json representation.\r\n     * @return a JSON representation\r\n     */\r\n    public serialize(): any {\r\n        return SerializationHelper.Serialize(this);\r\n    }\r\n\r\n    /**\r\n     * Parses the image processing from a json representation.\r\n     * @param source the JSON source to parse\r\n     * @return The parsed image processing\r\n     */\r\n    public static Parse(source: any): ImageProcessingConfiguration {\r\n        return SerializationHelper.Parse(() => new ImageProcessingConfiguration(), source, null, null);\r\n    }\r\n\r\n    // Static constants associated to the image processing.\r\n    private static _VIGNETTEMODE_MULTIPLY = 0;\r\n    private static _VIGNETTEMODE_OPAQUE = 1;\r\n\r\n    /**\r\n     * Used to apply the vignette as a mix with the pixel color.\r\n     */\r\n    public static get VIGNETTEMODE_MULTIPLY(): number {\r\n        return this._VIGNETTEMODE_MULTIPLY;\r\n    }\r\n\r\n    /**\r\n     * Used to apply the vignette as a replacement of the pixel color.\r\n     */\r\n    public static get VIGNETTEMODE_OPAQUE(): number {\r\n        return this._VIGNETTEMODE_OPAQUE;\r\n    }\r\n}\r\n\r\n// References the dependencies.\r\nSerializationHelper._ImageProcessingConfigurationParser = ImageProcessingConfiguration.Parse;\r\n"]},"metadata":{},"sourceType":"module"}