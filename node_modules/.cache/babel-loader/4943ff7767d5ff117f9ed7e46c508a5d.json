{"ast":null,"code":"import { Vector3, Matrix } from \"./math.vector.js\";\n/**\n * Represents a plane by the equation ax + by + cz + d = 0\n */\n\nvar Plane =\n/** @class */\nfunction () {\n  /**\n   * Creates a Plane object according to the given floats a, b, c, d and the plane equation : ax + by + cz + d = 0\n   * @param a a component of the plane\n   * @param b b component of the plane\n   * @param c c component of the plane\n   * @param d d component of the plane\n   */\n  function Plane(a, b, c, d) {\n    this.normal = new Vector3(a, b, c);\n    this.d = d;\n  }\n  /**\n   * @returns the plane coordinates as a new array of 4 elements [a, b, c, d].\n   */\n\n\n  Plane.prototype.asArray = function () {\n    return [this.normal.x, this.normal.y, this.normal.z, this.d];\n  }; // Methods\n\n  /**\n   * @returns a new plane copied from the current Plane.\n   */\n\n\n  Plane.prototype.clone = function () {\n    return new Plane(this.normal.x, this.normal.y, this.normal.z, this.d);\n  };\n  /**\n   * @returns the string \"Plane\".\n   */\n\n\n  Plane.prototype.getClassName = function () {\n    return \"Plane\";\n  };\n  /**\n   * @returns the Plane hash code.\n   */\n\n\n  Plane.prototype.getHashCode = function () {\n    var hash = this.normal.getHashCode();\n    hash = hash * 397 ^ (this.d | 0);\n    return hash;\n  };\n  /**\n   * Normalize the current Plane in place.\n   * @returns the updated Plane.\n   */\n\n\n  Plane.prototype.normalize = function () {\n    var norm = Math.sqrt(this.normal.x * this.normal.x + this.normal.y * this.normal.y + this.normal.z * this.normal.z);\n    var magnitude = 0.0;\n\n    if (norm !== 0) {\n      magnitude = 1.0 / norm;\n    }\n\n    this.normal.x *= magnitude;\n    this.normal.y *= magnitude;\n    this.normal.z *= magnitude;\n    this.d *= magnitude;\n    return this;\n  };\n  /**\n   * Applies a transformation the plane and returns the result\n   * @param transformation the transformation matrix to be applied to the plane\n   * @returns a new Plane as the result of the transformation of the current Plane by the given matrix.\n   */\n\n\n  Plane.prototype.transform = function (transformation) {\n    var invertedMatrix = Plane._TmpMatrix;\n    transformation.invertToRef(invertedMatrix);\n    var m = invertedMatrix.m;\n    var x = this.normal.x;\n    var y = this.normal.y;\n    var z = this.normal.z;\n    var d = this.d;\n    var normalX = x * m[0] + y * m[1] + z * m[2] + d * m[3];\n    var normalY = x * m[4] + y * m[5] + z * m[6] + d * m[7];\n    var normalZ = x * m[8] + y * m[9] + z * m[10] + d * m[11];\n    var finalD = x * m[12] + y * m[13] + z * m[14] + d * m[15];\n    return new Plane(normalX, normalY, normalZ, finalD);\n  };\n  /**\n   * Compute the dot product between the point and the plane normal\n   * @param point point to calculate the dot product with\n   * @returns the dot product (float) of the point coordinates and the plane normal.\n   */\n\n\n  Plane.prototype.dotCoordinate = function (point) {\n    return this.normal.x * point.x + this.normal.y * point.y + this.normal.z * point.z + this.d;\n  };\n  /**\n   * Updates the current Plane from the plane defined by the three given points.\n   * @param point1 one of the points used to construct the plane\n   * @param point2 one of the points used to construct the plane\n   * @param point3 one of the points used to construct the plane\n   * @returns the updated Plane.\n   */\n\n\n  Plane.prototype.copyFromPoints = function (point1, point2, point3) {\n    var x1 = point2.x - point1.x;\n    var y1 = point2.y - point1.y;\n    var z1 = point2.z - point1.z;\n    var x2 = point3.x - point1.x;\n    var y2 = point3.y - point1.y;\n    var z2 = point3.z - point1.z;\n    var yz = y1 * z2 - z1 * y2;\n    var xz = z1 * x2 - x1 * z2;\n    var xy = x1 * y2 - y1 * x2;\n    var pyth = Math.sqrt(yz * yz + xz * xz + xy * xy);\n    var invPyth;\n\n    if (pyth !== 0) {\n      invPyth = 1.0 / pyth;\n    } else {\n      invPyth = 0.0;\n    }\n\n    this.normal.x = yz * invPyth;\n    this.normal.y = xz * invPyth;\n    this.normal.z = xy * invPyth;\n    this.d = -(this.normal.x * point1.x + this.normal.y * point1.y + this.normal.z * point1.z);\n    return this;\n  };\n  /**\n   * Checks if the plane is facing a given direction (meaning if the plane's normal is pointing in the opposite direction of the given vector).\n   * Note that for this function to work as expected you should make sure that:\n   *   - direction and the plane normal are normalized\n   *   - epsilon is a number just bigger than -1, something like -0.99 for eg\n   * @param direction the direction to check if the plane is facing\n   * @param epsilon value the dot product is compared against (returns true if dot <= epsilon)\n   * @returns True if the plane is facing the given direction\n   */\n\n\n  Plane.prototype.isFrontFacingTo = function (direction, epsilon) {\n    var dot = Vector3.Dot(this.normal, direction);\n    return dot <= epsilon;\n  };\n  /**\n   * Calculates the distance to a point\n   * @param point point to calculate distance to\n   * @returns the signed distance (float) from the given point to the Plane.\n   */\n\n\n  Plane.prototype.signedDistanceTo = function (point) {\n    return Vector3.Dot(point, this.normal) + this.d;\n  }; // Statics\n\n  /**\n   * Creates a plane from an  array\n   * @param array the array to create a plane from\n   * @returns a new Plane from the given array.\n   */\n\n\n  Plane.FromArray = function (array) {\n    return new Plane(array[0], array[1], array[2], array[3]);\n  };\n  /**\n   * Creates a plane from three points\n   * @param point1 point used to create the plane\n   * @param point2 point used to create the plane\n   * @param point3 point used to create the plane\n   * @returns a new Plane defined by the three given points.\n   */\n\n\n  Plane.FromPoints = function (point1, point2, point3) {\n    var result = new Plane(0.0, 0.0, 0.0, 0.0);\n    result.copyFromPoints(point1, point2, point3);\n    return result;\n  };\n  /**\n   * Creates a plane from an origin point and a normal\n   * @param origin origin of the plane to be constructed\n   * @param normal normal of the plane to be constructed\n   * @returns a new Plane the normal vector to this plane at the given origin point.\n   * Note : the vector \"normal\" is updated because normalized.\n   */\n\n\n  Plane.FromPositionAndNormal = function (origin, normal) {\n    var result = new Plane(0.0, 0.0, 0.0, 0.0);\n    normal.normalize();\n    result.normal = normal;\n    result.d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);\n    return result;\n  };\n  /**\n   * Calculates the distance from a plane and a point\n   * @param origin origin of the plane to be constructed\n   * @param normal normal of the plane to be constructed\n   * @param point point to calculate distance to\n   * @returns the signed distance between the plane defined by the normal vector at the \"origin\"\" point and the given other point.\n   */\n\n\n  Plane.SignedDistanceToPlaneFromPositionAndNormal = function (origin, normal, point) {\n    var d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);\n    return Vector3.Dot(point, normal) + d;\n  };\n\n  Plane._TmpMatrix = Matrix.Identity();\n  return Plane;\n}();\n\nexport { Plane };","map":{"version":3,"mappings":"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","names":["Vector3","Matrix","a","b","c","d","normal","Plane","x","y","z","hash","getHashCode","norm","Math","sqrt","magnitude","transformation","invertedMatrix","_TmpMatrix","invertToRef","m","normalX","normalY","normalZ","finalD","point","point1","point2","point3","x1","y1","z1","x2","y2","z2","yz","xz","xy","pyth","invPyth","direction","epsilon","dot","Dot","array","result","copyFromPoints","origin","normalize","Identity"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Maths/math.plane.ts"],"sourcesContent":["import type { DeepImmutable } from \"../types\";\r\nimport { Vector3, Matrix } from \"./math.vector\";\r\n\r\n/**\r\n * Represents a plane by the equation ax + by + cz + d = 0\r\n */\r\nexport class Plane {\r\n    private static _TmpMatrix = Matrix.Identity();\r\n\r\n    /**\r\n     * Normal of the plane (a,b,c)\r\n     */\r\n    public normal: Vector3;\r\n    /**\r\n     * d component of the plane\r\n     */\r\n    public d: number;\r\n    /**\r\n     * Creates a Plane object according to the given floats a, b, c, d and the plane equation : ax + by + cz + d = 0\r\n     * @param a a component of the plane\r\n     * @param b b component of the plane\r\n     * @param c c component of the plane\r\n     * @param d d component of the plane\r\n     */\r\n    constructor(a: number, b: number, c: number, d: number) {\r\n        this.normal = new Vector3(a, b, c);\r\n        this.d = d;\r\n    }\r\n\r\n    /**\r\n     * @returns the plane coordinates as a new array of 4 elements [a, b, c, d].\r\n     */\r\n    public asArray(): number[] {\r\n        return [this.normal.x, this.normal.y, this.normal.z, this.d];\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * @returns a new plane copied from the current Plane.\r\n     */\r\n    public clone(): Plane {\r\n        return new Plane(this.normal.x, this.normal.y, this.normal.z, this.d);\r\n    }\r\n    /**\r\n     * @returns the string \"Plane\".\r\n     */\r\n    public getClassName(): string {\r\n        return \"Plane\";\r\n    }\r\n    /**\r\n     * @returns the Plane hash code.\r\n     */\r\n    public getHashCode(): number {\r\n        let hash = this.normal.getHashCode();\r\n        hash = (hash * 397) ^ (this.d | 0);\r\n        return hash;\r\n    }\r\n    /**\r\n     * Normalize the current Plane in place.\r\n     * @returns the updated Plane.\r\n     */\r\n    public normalize(): Plane {\r\n        const norm = Math.sqrt(this.normal.x * this.normal.x + this.normal.y * this.normal.y + this.normal.z * this.normal.z);\r\n        let magnitude = 0.0;\r\n\r\n        if (norm !== 0) {\r\n            magnitude = 1.0 / norm;\r\n        }\r\n        this.normal.x *= magnitude;\r\n        this.normal.y *= magnitude;\r\n        this.normal.z *= magnitude;\r\n        this.d *= magnitude;\r\n        return this;\r\n    }\r\n    /**\r\n     * Applies a transformation the plane and returns the result\r\n     * @param transformation the transformation matrix to be applied to the plane\r\n     * @returns a new Plane as the result of the transformation of the current Plane by the given matrix.\r\n     */\r\n    public transform(transformation: DeepImmutable<Matrix>): Plane {\r\n        const invertedMatrix = Plane._TmpMatrix;\r\n        transformation.invertToRef(invertedMatrix);\r\n        const m = invertedMatrix.m;\r\n        const x = this.normal.x;\r\n        const y = this.normal.y;\r\n        const z = this.normal.z;\r\n        const d = this.d;\r\n\r\n        const normalX = x * m[0] + y * m[1] + z * m[2] + d * m[3];\r\n        const normalY = x * m[4] + y * m[5] + z * m[6] + d * m[7];\r\n        const normalZ = x * m[8] + y * m[9] + z * m[10] + d * m[11];\r\n        const finalD = x * m[12] + y * m[13] + z * m[14] + d * m[15];\r\n\r\n        return new Plane(normalX, normalY, normalZ, finalD);\r\n    }\r\n\r\n    /**\r\n     * Compute the dot product between the point and the plane normal\r\n     * @param point point to calculate the dot product with\r\n     * @returns the dot product (float) of the point coordinates and the plane normal.\r\n     */\r\n    public dotCoordinate(point: DeepImmutable<Vector3>): number {\r\n        return this.normal.x * point.x + this.normal.y * point.y + this.normal.z * point.z + this.d;\r\n    }\r\n\r\n    /**\r\n     * Updates the current Plane from the plane defined by the three given points.\r\n     * @param point1 one of the points used to construct the plane\r\n     * @param point2 one of the points used to construct the plane\r\n     * @param point3 one of the points used to construct the plane\r\n     * @returns the updated Plane.\r\n     */\r\n    public copyFromPoints(point1: DeepImmutable<Vector3>, point2: DeepImmutable<Vector3>, point3: DeepImmutable<Vector3>): Plane {\r\n        const x1 = point2.x - point1.x;\r\n        const y1 = point2.y - point1.y;\r\n        const z1 = point2.z - point1.z;\r\n        const x2 = point3.x - point1.x;\r\n        const y2 = point3.y - point1.y;\r\n        const z2 = point3.z - point1.z;\r\n        const yz = y1 * z2 - z1 * y2;\r\n        const xz = z1 * x2 - x1 * z2;\r\n        const xy = x1 * y2 - y1 * x2;\r\n        const pyth = Math.sqrt(yz * yz + xz * xz + xy * xy);\r\n        let invPyth;\r\n\r\n        if (pyth !== 0) {\r\n            invPyth = 1.0 / pyth;\r\n        } else {\r\n            invPyth = 0.0;\r\n        }\r\n\r\n        this.normal.x = yz * invPyth;\r\n        this.normal.y = xz * invPyth;\r\n        this.normal.z = xy * invPyth;\r\n        this.d = -(this.normal.x * point1.x + this.normal.y * point1.y + this.normal.z * point1.z);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Checks if the plane is facing a given direction (meaning if the plane's normal is pointing in the opposite direction of the given vector).\r\n     * Note that for this function to work as expected you should make sure that:\r\n     *   - direction and the plane normal are normalized\r\n     *   - epsilon is a number just bigger than -1, something like -0.99 for eg\r\n     * @param direction the direction to check if the plane is facing\r\n     * @param epsilon value the dot product is compared against (returns true if dot <= epsilon)\r\n     * @returns True if the plane is facing the given direction\r\n     */\r\n    public isFrontFacingTo(direction: DeepImmutable<Vector3>, epsilon: number): boolean {\r\n        const dot = Vector3.Dot(this.normal, direction);\r\n        return dot <= epsilon;\r\n    }\r\n\r\n    /**\r\n     * Calculates the distance to a point\r\n     * @param point point to calculate distance to\r\n     * @returns the signed distance (float) from the given point to the Plane.\r\n     */\r\n    public signedDistanceTo(point: DeepImmutable<Vector3>): number {\r\n        return Vector3.Dot(point, this.normal) + this.d;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Creates a plane from an  array\r\n     * @param array the array to create a plane from\r\n     * @returns a new Plane from the given array.\r\n     */\r\n    static FromArray(array: DeepImmutable<ArrayLike<number>>): Plane {\r\n        return new Plane(array[0], array[1], array[2], array[3]);\r\n    }\r\n    /**\r\n     * Creates a plane from three points\r\n     * @param point1 point used to create the plane\r\n     * @param point2 point used to create the plane\r\n     * @param point3 point used to create the plane\r\n     * @returns a new Plane defined by the three given points.\r\n     */\r\n    static FromPoints(point1: DeepImmutable<Vector3>, point2: DeepImmutable<Vector3>, point3: DeepImmutable<Vector3>): Plane {\r\n        const result = new Plane(0.0, 0.0, 0.0, 0.0);\r\n        result.copyFromPoints(point1, point2, point3);\r\n        return result;\r\n    }\r\n    /**\r\n     * Creates a plane from an origin point and a normal\r\n     * @param origin origin of the plane to be constructed\r\n     * @param normal normal of the plane to be constructed\r\n     * @returns a new Plane the normal vector to this plane at the given origin point.\r\n     * Note : the vector \"normal\" is updated because normalized.\r\n     */\r\n    static FromPositionAndNormal(origin: DeepImmutable<Vector3>, normal: Vector3): Plane {\r\n        const result = new Plane(0.0, 0.0, 0.0, 0.0);\r\n        normal.normalize();\r\n        result.normal = normal;\r\n        result.d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Calculates the distance from a plane and a point\r\n     * @param origin origin of the plane to be constructed\r\n     * @param normal normal of the plane to be constructed\r\n     * @param point point to calculate distance to\r\n     * @returns the signed distance between the plane defined by the normal vector at the \"origin\"\" point and the given other point.\r\n     */\r\n    static SignedDistanceToPlaneFromPositionAndNormal(origin: DeepImmutable<Vector3>, normal: DeepImmutable<Vector3>, point: DeepImmutable<Vector3>): number {\r\n        const d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);\r\n        return Vector3.Dot(point, normal) + d;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}