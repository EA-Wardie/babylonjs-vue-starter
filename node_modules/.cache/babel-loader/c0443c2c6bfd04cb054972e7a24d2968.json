{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { __extends } from \"tslib\";\nimport { WebXRFeaturesManager, WebXRFeatureName } from \"../webXRFeaturesManager.js\";\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { Vector3, TmpVectors } from \"../../Maths/math.vector.js\";\nimport { Ray } from \"../../Culling/ray.js\";\n/**\n * The WebXR Eye Tracking feature grabs eye data from the device and provides it in an easy-access format.\n * Currently only enabled for BabylonNative applications.\n */\n\nvar WebXREyeTracking =\n/** @class */\nfunction (_super) {\n  __extends(WebXREyeTracking, _super);\n  /**\n   * Creates a new instance of the XR eye tracking feature.\n   * @param _xrSessionManager An instance of WebXRSessionManager.\n   */\n\n\n  function WebXREyeTracking(_xrSessionManager) {\n    var _this = _super.call(this, _xrSessionManager) || this;\n    /**\n     * This observable will notify registered observers when eye tracking starts\n     */\n\n\n    _this.onEyeTrackingStartedObservable = new Observable();\n    /**\n     * This observable will notify registered observers when eye tracking ends\n     */\n\n    _this.onEyeTrackingEndedObservable = new Observable();\n    /**\n     * This observable will notify registered observers on each frame that has valid tracking\n     */\n\n    _this.onEyeTrackingFrameUpdateObservable = new Observable();\n\n    _this._eyeTrackingStartListener = function (event) {\n      _this._latestEyeSpace = event.gazeSpace;\n      _this._gazeRay = new Ray(Vector3.Zero(), Vector3.Forward());\n\n      _this.onEyeTrackingStartedObservable.notifyObservers(_this._gazeRay);\n    };\n\n    _this._eyeTrackingEndListener = function () {\n      _this._latestEyeSpace = null;\n      _this._gazeRay = null;\n\n      _this.onEyeTrackingEndedObservable.notifyObservers();\n    };\n\n    _this.xrNativeFeatureName = \"eye-tracking\";\n\n    if (_this._xrSessionManager.session) {\n      _this._init();\n    } else {\n      _this._xrSessionManager.onXRSessionInit.addOnce(function () {\n        _this._init();\n      });\n    }\n\n    return _this;\n  }\n  /**\n   * Dispose this feature and all of the resources attached.\n   */\n\n\n  WebXREyeTracking.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._xrSessionManager.session.removeEventListener(\"eyetrackingstart\", this._eyeTrackingStartListener);\n\n    this._xrSessionManager.session.removeEventListener(\"eyetrackingend\", this._eyeTrackingEndListener);\n\n    this.onEyeTrackingStartedObservable.clear();\n    this.onEyeTrackingEndedObservable.clear();\n    this.onEyeTrackingFrameUpdateObservable.clear();\n  };\n\n  Object.defineProperty(WebXREyeTracking.prototype, \"isEyeGazeValid\", {\n    /**\n     * Returns whether the gaze data is valid or not\n     * @returns true if the data is valid\n     */\n    get: function get() {\n      return !!this._gazeRay;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Get a reference to the gaze ray. This data is valid while eye tracking persists, and will be set to null when gaze data is no longer available\n   * @returns a reference to the gaze ray if it exists and is valid, returns null otherwise.\n   */\n\n  WebXREyeTracking.prototype.getEyeGaze = function () {\n    return this._gazeRay;\n  };\n\n  WebXREyeTracking.prototype._onXRFrame = function (frame) {\n    if (!this.attached || !frame) {\n      return;\n    }\n\n    if (this._latestEyeSpace && this._gazeRay) {\n      var pose = frame.getPose(this._latestEyeSpace, this._xrSessionManager.referenceSpace);\n\n      if (pose) {\n        this._gazeRay.origin.set(pose.transform.position.x, pose.transform.position.y, pose.transform.position.z);\n\n        var quat = pose.transform.orientation;\n        TmpVectors.Quaternion[0].set(quat.x, quat.y, quat.z, quat.w);\n\n        if (!this._xrSessionManager.scene.useRightHandedSystem) {\n          this._gazeRay.origin.z *= -1;\n          TmpVectors.Quaternion[0].z *= -1;\n          TmpVectors.Quaternion[0].w *= -1;\n          Vector3.LeftHandedForwardReadOnly.rotateByQuaternionToRef(TmpVectors.Quaternion[0], this._gazeRay.direction);\n        } else {\n          Vector3.RightHandedForwardReadOnly.rotateByQuaternionToRef(TmpVectors.Quaternion[0], this._gazeRay.direction);\n        }\n\n        this.onEyeTrackingFrameUpdateObservable.notifyObservers(this._gazeRay);\n      }\n    }\n  };\n\n  WebXREyeTracking.prototype._init = function () {\n    // Only supported by BabylonNative\n    if (this._xrSessionManager.isNative) {\n      this._xrSessionManager.session.addEventListener(\"eyetrackingstart\", this._eyeTrackingStartListener);\n\n      this._xrSessionManager.session.addEventListener(\"eyetrackingend\", this._eyeTrackingEndListener);\n    }\n  };\n  /**\n   * The module's name\n   */\n\n\n  WebXREyeTracking.Name = WebXRFeatureName.EYE_TRACKING;\n  /**\n   * The (Babylon) version of this module.\n   * This is an integer representing the implementation version.\n   * This number does not correspond to the WebXR specs version\n   */\n\n  WebXREyeTracking.Version = 1;\n  return WebXREyeTracking;\n}(WebXRAbstractFeature);\n\nexport { WebXREyeTracking };\nWebXRFeaturesManager.AddWebXRFeature(WebXREyeTracking.Name, function (xrSessionManager) {\n  return function () {\n    return new WebXREyeTracking(xrSessionManager);\n  };\n}, WebXREyeTracking.Version, false);","map":{"version":3,"mappings":"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","names":["WebXRFeaturesManager","WebXRFeatureName","WebXRAbstractFeature","Observable","Vector3","TmpVectors","Ray","__extends","_xrSessionManager","_super","_this","event","_latestEyeSpace","gazeSpace","_gazeRay","Zero","Forward","onEyeTrackingStartedObservable","notifyObservers","onEyeTrackingEndedObservable","xrNativeFeatureName","session","_init","onXRSessionInit","addOnce","WebXREyeTracking","dispose","call","removeEventListener","_eyeTrackingStartListener","_eyeTrackingEndListener","clear","onEyeTrackingFrameUpdateObservable","Object","frame","attached","pose","getPose","referenceSpace","origin","set","transform","position","x","y","z","quat","orientation","Quaternion","w","scene","useRightHandedSystem","LeftHandedForwardReadOnly","rotateByQuaternionToRef","direction","RightHandedForwardReadOnly","isNative","addEventListener","EYE_TRACKING","AddWebXRFeature","Name","xrSessionManager","Version"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/XR/features/WebXREyeTracking.ts"],"sourcesContent":["import { WebXRFeaturesManager, WebXRFeatureName } from \"../webXRFeaturesManager\";\r\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature\";\r\nimport type { WebXRSessionManager } from \"../webXRSessionManager\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { Vector3, TmpVectors } from \"../../Maths/math.vector\";\r\nimport { Ray } from \"../../Culling/ray\";\r\nimport type { Nullable } from \"../../types\";\r\n\r\n/**\r\n * The WebXR Eye Tracking feature grabs eye data from the device and provides it in an easy-access format.\r\n * Currently only enabled for BabylonNative applications.\r\n */\r\nexport class WebXREyeTracking extends WebXRAbstractFeature {\r\n    private _latestEyeSpace: Nullable<XRSpace>;\r\n    private _gazeRay: Nullable<Ray>;\r\n\r\n    /**\r\n     * The module's name\r\n     */\r\n    public static readonly Name = WebXRFeatureName.EYE_TRACKING;\r\n    /**\r\n     * The (Babylon) version of this module.\r\n     * This is an integer representing the implementation version.\r\n     * This number does not correspond to the WebXR specs version\r\n     */\r\n    public static readonly Version = 1;\r\n\r\n    /**\r\n     * This observable will notify registered observers when eye tracking starts\r\n     */\r\n    public readonly onEyeTrackingStartedObservable: Observable<Ray> = new Observable();\r\n    /**\r\n     * This observable will notify registered observers when eye tracking ends\r\n     */\r\n    public readonly onEyeTrackingEndedObservable: Observable<void> = new Observable();\r\n    /**\r\n     * This observable will notify registered observers on each frame that has valid tracking\r\n     */\r\n    public readonly onEyeTrackingFrameUpdateObservable: Observable<Ray> = new Observable();\r\n\r\n    /**\r\n     * Creates a new instance of the XR eye tracking feature.\r\n     * @param _xrSessionManager An instance of WebXRSessionManager.\r\n     */\r\n    constructor(_xrSessionManager: WebXRSessionManager) {\r\n        super(_xrSessionManager);\r\n        this.xrNativeFeatureName = \"eye-tracking\";\r\n        if (this._xrSessionManager.session) {\r\n            this._init();\r\n        } else {\r\n            this._xrSessionManager.onXRSessionInit.addOnce(() => {\r\n                this._init();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose this feature and all of the resources attached.\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this._xrSessionManager.session.removeEventListener(\"eyetrackingstart\", this._eyeTrackingStartListener);\r\n        this._xrSessionManager.session.removeEventListener(\"eyetrackingend\", this._eyeTrackingEndListener);\r\n\r\n        this.onEyeTrackingStartedObservable.clear();\r\n        this.onEyeTrackingEndedObservable.clear();\r\n        this.onEyeTrackingFrameUpdateObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * Returns whether the gaze data is valid or not\r\n     * @returns true if the data is valid\r\n     */\r\n    public get isEyeGazeValid(): boolean {\r\n        return !!this._gazeRay;\r\n    }\r\n\r\n    /**\r\n     * Get a reference to the gaze ray. This data is valid while eye tracking persists, and will be set to null when gaze data is no longer available\r\n     * @returns a reference to the gaze ray if it exists and is valid, returns null otherwise.\r\n     */\r\n    public getEyeGaze(): Nullable<Ray> {\r\n        return this._gazeRay;\r\n    }\r\n\r\n    protected _onXRFrame(frame: XRFrame) {\r\n        if (!this.attached || !frame) {\r\n            return;\r\n        }\r\n\r\n        if (this._latestEyeSpace && this._gazeRay) {\r\n            const pose = frame.getPose(this._latestEyeSpace, this._xrSessionManager.referenceSpace);\r\n            if (pose) {\r\n                this._gazeRay.origin.set(pose.transform.position.x, pose.transform.position.y, pose.transform.position.z);\r\n                const quat = pose.transform.orientation;\r\n                TmpVectors.Quaternion[0].set(quat.x, quat.y, quat.z, quat.w);\r\n\r\n                if (!this._xrSessionManager.scene.useRightHandedSystem) {\r\n                    this._gazeRay.origin.z *= -1;\r\n                    TmpVectors.Quaternion[0].z *= -1;\r\n                    TmpVectors.Quaternion[0].w *= -1;\r\n\r\n                    Vector3.LeftHandedForwardReadOnly.rotateByQuaternionToRef(TmpVectors.Quaternion[0], this._gazeRay.direction);\r\n                } else {\r\n                    Vector3.RightHandedForwardReadOnly.rotateByQuaternionToRef(TmpVectors.Quaternion[0], this._gazeRay.direction);\r\n                }\r\n\r\n                this.onEyeTrackingFrameUpdateObservable.notifyObservers(this._gazeRay);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _eyeTrackingStartListener = (event: XREyeTrackingSourceEvent) => {\r\n        this._latestEyeSpace = event.gazeSpace;\r\n        this._gazeRay = new Ray(Vector3.Zero(), Vector3.Forward());\r\n        this.onEyeTrackingStartedObservable.notifyObservers(this._gazeRay);\r\n    };\r\n\r\n    private _eyeTrackingEndListener = () => {\r\n        this._latestEyeSpace = null;\r\n        this._gazeRay = null;\r\n        this.onEyeTrackingEndedObservable.notifyObservers();\r\n    };\r\n\r\n    private _init() {\r\n        // Only supported by BabylonNative\r\n        if (this._xrSessionManager.isNative) {\r\n            this._xrSessionManager.session.addEventListener(\"eyetrackingstart\", this._eyeTrackingStartListener);\r\n            this._xrSessionManager.session.addEventListener(\"eyetrackingend\", this._eyeTrackingEndListener);\r\n        }\r\n    }\r\n}\r\n\r\nWebXRFeaturesManager.AddWebXRFeature(\r\n    WebXREyeTracking.Name,\r\n    (xrSessionManager) => {\r\n        return () => new WebXREyeTracking(xrSessionManager);\r\n    },\r\n    WebXREyeTracking.Version,\r\n    false\r\n);\r\n"]},"metadata":{},"sourceType":"module"}