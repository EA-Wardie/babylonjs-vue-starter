{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport { __assign, __decorate, __extends } from \"tslib\";\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { serialize, serializeAsImageProcessingConfiguration, expandToProperty } from \"../../Misc/decorators.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { SmartArray } from \"../../Misc/smartArray.js\";\nimport { GetEnvironmentBRDFTexture } from \"../../Misc/brdfTextureTools.js\";\nimport { Scene } from \"../../scene.js\";\nimport { Vector4 } from \"../../Maths/math.vector.js\";\nimport { VertexBuffer } from \"../../Buffers/buffer.js\";\nimport { PBRBRDFConfiguration } from \"./pbrBRDFConfiguration.js\";\nimport { PrePassConfiguration } from \"../prePassConfiguration.js\";\nimport { Color3, TmpColors } from \"../../Maths/math.color.js\";\nimport { Scalar } from \"../../Maths/math.scalar.js\";\nimport { ImageProcessingConfiguration } from \"../../Materials/imageProcessingConfiguration.js\";\nimport { Material } from \"../../Materials/material.js\";\nimport { MaterialPluginEvent } from \"../materialPluginEvent.js\";\nimport { MaterialDefines } from \"../../Materials/materialDefines.js\";\nimport { PushMaterial } from \"../../Materials/pushMaterial.js\";\nimport { MaterialHelper } from \"../../Materials/materialHelper.js\";\nimport { Texture } from \"../../Materials/Textures/texture.js\";\nimport { MaterialFlags } from \"../materialFlags.js\";\nimport \"../../Materials/Textures/baseTexture.polynomial.js\";\nimport \"../../Shaders/pbr.fragment.js\";\nimport \"../../Shaders/pbr.vertex.js\";\nimport { EffectFallbacks } from \"../effectFallbacks.js\";\nimport { PBRClearCoatConfiguration } from \"./pbrClearCoatConfiguration.js\";\nimport { PBRIridescenceConfiguration } from \"./pbrIridescenceConfiguration.js\";\nimport { PBRAnisotropicConfiguration } from \"./pbrAnisotropicConfiguration.js\";\nimport { PBRSheenConfiguration } from \"./pbrSheenConfiguration.js\";\nimport { PBRSubSurfaceConfiguration } from \"./pbrSubSurfaceConfiguration.js\";\nimport { DetailMapConfiguration } from \"../material.detailMapConfiguration.js\";\nvar onCreatedEffectParameters = {\n  effect: null,\n  subMesh: null\n};\n/**\n * Manages the defines for the PBR Material.\n * @hidden\n */\n\nvar PBRMaterialDefines =\n/** @class */\nfunction (_super) {\n  __extends(PBRMaterialDefines, _super);\n  /**\n   * Initializes the PBR Material defines.\n   * @param externalProperties The external properties\n   */\n\n\n  function PBRMaterialDefines(externalProperties) {\n    var _this = _super.call(this, externalProperties) || this;\n\n    _this.PBR = true;\n    _this.NUM_SAMPLES = \"0\";\n    _this.REALTIME_FILTERING = false;\n    _this.MAINUV1 = false;\n    _this.MAINUV2 = false;\n    _this.MAINUV3 = false;\n    _this.MAINUV4 = false;\n    _this.MAINUV5 = false;\n    _this.MAINUV6 = false;\n    _this.UV1 = false;\n    _this.UV2 = false;\n    _this.UV3 = false;\n    _this.UV4 = false;\n    _this.UV5 = false;\n    _this.UV6 = false;\n    _this.ALBEDO = false;\n    _this.GAMMAALBEDO = false;\n    _this.ALBEDODIRECTUV = 0;\n    _this.VERTEXCOLOR = false;\n    _this.BAKED_VERTEX_ANIMATION_TEXTURE = false;\n    _this.AMBIENT = false;\n    _this.AMBIENTDIRECTUV = 0;\n    _this.AMBIENTINGRAYSCALE = false;\n    _this.OPACITY = false;\n    _this.VERTEXALPHA = false;\n    _this.OPACITYDIRECTUV = 0;\n    _this.OPACITYRGB = false;\n    _this.ALPHATEST = false;\n    _this.DEPTHPREPASS = false;\n    _this.ALPHABLEND = false;\n    _this.ALPHAFROMALBEDO = false;\n    _this.ALPHATESTVALUE = \"0.5\";\n    _this.SPECULAROVERALPHA = false;\n    _this.RADIANCEOVERALPHA = false;\n    _this.ALPHAFRESNEL = false;\n    _this.LINEARALPHAFRESNEL = false;\n    _this.PREMULTIPLYALPHA = false;\n    _this.EMISSIVE = false;\n    _this.EMISSIVEDIRECTUV = 0;\n    _this.GAMMAEMISSIVE = false;\n    _this.REFLECTIVITY = false;\n    _this.REFLECTIVITY_GAMMA = false;\n    _this.REFLECTIVITYDIRECTUV = 0;\n    _this.SPECULARTERM = false;\n    _this.MICROSURFACEFROMREFLECTIVITYMAP = false;\n    _this.MICROSURFACEAUTOMATIC = false;\n    _this.LODBASEDMICROSFURACE = false;\n    _this.MICROSURFACEMAP = false;\n    _this.MICROSURFACEMAPDIRECTUV = 0;\n    _this.METALLICWORKFLOW = false;\n    _this.ROUGHNESSSTOREINMETALMAPALPHA = false;\n    _this.ROUGHNESSSTOREINMETALMAPGREEN = false;\n    _this.METALLNESSSTOREINMETALMAPBLUE = false;\n    _this.AOSTOREINMETALMAPRED = false;\n    _this.METALLIC_REFLECTANCE = false;\n    _this.METALLIC_REFLECTANCE_GAMMA = false;\n    _this.METALLIC_REFLECTANCEDIRECTUV = 0;\n    _this.METALLIC_REFLECTANCE_USE_ALPHA_ONLY = false;\n    _this.REFLECTANCE = false;\n    _this.REFLECTANCE_GAMMA = false;\n    _this.REFLECTANCEDIRECTUV = 0;\n    _this.ENVIRONMENTBRDF = false;\n    _this.ENVIRONMENTBRDF_RGBD = false;\n    _this.NORMAL = false;\n    _this.TANGENT = false;\n    _this.BUMP = false;\n    _this.BUMPDIRECTUV = 0;\n    _this.OBJECTSPACE_NORMALMAP = false;\n    _this.PARALLAX = false;\n    _this.PARALLAXOCCLUSION = false;\n    _this.NORMALXYSCALE = true;\n    _this.LIGHTMAP = false;\n    _this.LIGHTMAPDIRECTUV = 0;\n    _this.USELIGHTMAPASSHADOWMAP = false;\n    _this.GAMMALIGHTMAP = false;\n    _this.RGBDLIGHTMAP = false;\n    _this.REFLECTION = false;\n    _this.REFLECTIONMAP_3D = false;\n    _this.REFLECTIONMAP_SPHERICAL = false;\n    _this.REFLECTIONMAP_PLANAR = false;\n    _this.REFLECTIONMAP_CUBIC = false;\n    _this.USE_LOCAL_REFLECTIONMAP_CUBIC = false;\n    _this.REFLECTIONMAP_PROJECTION = false;\n    _this.REFLECTIONMAP_SKYBOX = false;\n    _this.REFLECTIONMAP_EXPLICIT = false;\n    _this.REFLECTIONMAP_EQUIRECTANGULAR = false;\n    _this.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\n    _this.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\n    _this.INVERTCUBICMAP = false;\n    _this.USESPHERICALFROMREFLECTIONMAP = false;\n    _this.USEIRRADIANCEMAP = false;\n    _this.USESPHERICALINVERTEX = false;\n    _this.REFLECTIONMAP_OPPOSITEZ = false;\n    _this.LODINREFLECTIONALPHA = false;\n    _this.GAMMAREFLECTION = false;\n    _this.RGBDREFLECTION = false;\n    _this.LINEARSPECULARREFLECTION = false;\n    _this.RADIANCEOCCLUSION = false;\n    _this.HORIZONOCCLUSION = false;\n    _this.INSTANCES = false;\n    _this.THIN_INSTANCES = false;\n    _this.INSTANCESCOLOR = false;\n    _this.PREPASS = false;\n    _this.PREPASS_IRRADIANCE = false;\n    _this.PREPASS_IRRADIANCE_INDEX = -1;\n    _this.PREPASS_ALBEDO_SQRT = false;\n    _this.PREPASS_ALBEDO_SQRT_INDEX = -1;\n    _this.PREPASS_DEPTH = false;\n    _this.PREPASS_DEPTH_INDEX = -1;\n    _this.PREPASS_NORMAL = false;\n    _this.PREPASS_NORMAL_INDEX = -1;\n    _this.PREPASS_POSITION = false;\n    _this.PREPASS_POSITION_INDEX = -1;\n    _this.PREPASS_VELOCITY = false;\n    _this.PREPASS_VELOCITY_INDEX = -1;\n    _this.PREPASS_REFLECTIVITY = false;\n    _this.PREPASS_REFLECTIVITY_INDEX = -1;\n    _this.SCENE_MRT_COUNT = 0;\n    _this.NUM_BONE_INFLUENCERS = 0;\n    _this.BonesPerMesh = 0;\n    _this.BONETEXTURE = false;\n    _this.BONES_VELOCITY_ENABLED = false;\n    _this.NONUNIFORMSCALING = false;\n    _this.MORPHTARGETS = false;\n    _this.MORPHTARGETS_NORMAL = false;\n    _this.MORPHTARGETS_TANGENT = false;\n    _this.MORPHTARGETS_UV = false;\n    _this.NUM_MORPH_INFLUENCERS = 0;\n    _this.MORPHTARGETS_TEXTURE = false;\n    _this.IMAGEPROCESSING = false;\n    _this.VIGNETTE = false;\n    _this.VIGNETTEBLENDMODEMULTIPLY = false;\n    _this.VIGNETTEBLENDMODEOPAQUE = false;\n    _this.TONEMAPPING = false;\n    _this.TONEMAPPING_ACES = false;\n    _this.CONTRAST = false;\n    _this.COLORCURVES = false;\n    _this.COLORGRADING = false;\n    _this.COLORGRADING3D = false;\n    _this.SAMPLER3DGREENDEPTH = false;\n    _this.SAMPLER3DBGRMAP = false;\n    _this.IMAGEPROCESSINGPOSTPROCESS = false;\n    _this.SKIPFINALCOLORCLAMP = false;\n    _this.EXPOSURE = false;\n    _this.MULTIVIEW = false;\n    _this.ORDER_INDEPENDENT_TRANSPARENCY = false;\n    _this.ORDER_INDEPENDENT_TRANSPARENCY_16BITS = false;\n    _this.USEPHYSICALLIGHTFALLOFF = false;\n    _this.USEGLTFLIGHTFALLOFF = false;\n    _this.TWOSIDEDLIGHTING = false;\n    _this.SHADOWFLOAT = false;\n    _this.CLIPPLANE = false;\n    _this.CLIPPLANE2 = false;\n    _this.CLIPPLANE3 = false;\n    _this.CLIPPLANE4 = false;\n    _this.CLIPPLANE5 = false;\n    _this.CLIPPLANE6 = false;\n    _this.POINTSIZE = false;\n    _this.FOG = false;\n    _this.LOGARITHMICDEPTH = false;\n    _this.FORCENORMALFORWARD = false;\n    _this.SPECULARAA = false;\n    _this.UNLIT = false;\n    _this.DEBUGMODE = 0;\n\n    _this.rebuild();\n\n    return _this;\n  }\n  /**\n   * Resets the PBR Material defines.\n   */\n\n\n  PBRMaterialDefines.prototype.reset = function () {\n    _super.prototype.reset.call(this);\n\n    this.ALPHATESTVALUE = \"0.5\";\n    this.PBR = true;\n    this.NORMALXYSCALE = true;\n  };\n\n  return PBRMaterialDefines;\n}(MaterialDefines);\n\nexport { PBRMaterialDefines };\n/**\n * The Physically based material base class of BJS.\n *\n * This offers the main features of a standard PBR material.\n * For more information, please refer to the documentation :\n * https://doc.babylonjs.com/how_to/physically_based_rendering\n */\n\nvar PBRBaseMaterial =\n/** @class */\nfunction (_super) {\n  __extends(PBRBaseMaterial, _super);\n  /**\n   * Instantiates a new PBRMaterial instance.\n   *\n   * @param name The material name\n   * @param scene The scene the material will be use in.\n   */\n\n\n  function PBRBaseMaterial(name, scene) {\n    var _this = _super.call(this, name, scene) || this;\n    /**\n     * Intensity of the direct lights e.g. the four lights available in your scene.\n     * This impacts both the direct diffuse and specular highlights.\n     * @hidden\n     */\n\n\n    _this._directIntensity = 1.0;\n    /**\n     * Intensity of the emissive part of the material.\n     * This helps controlling the emissive effect without modifying the emissive color.\n     * @hidden\n     */\n\n    _this._emissiveIntensity = 1.0;\n    /**\n     * Intensity of the environment e.g. how much the environment will light the object\n     * either through harmonics for rough material or through the reflection for shiny ones.\n     * @hidden\n     */\n\n    _this._environmentIntensity = 1.0;\n    /**\n     * This is a special control allowing the reduction of the specular highlights coming from the\n     * four lights of the scene. Those highlights may not be needed in full environment lighting.\n     * @hidden\n     */\n\n    _this._specularIntensity = 1.0;\n    /**\n     * This stores the direct, emissive, environment, and specular light intensities into a Vector4.\n     */\n\n    _this._lightingInfos = new Vector4(_this._directIntensity, _this._emissiveIntensity, _this._environmentIntensity, _this._specularIntensity);\n    /**\n     * Debug Control allowing disabling the bump map on this material.\n     * @hidden\n     */\n\n    _this._disableBumpMap = false;\n    /**\n     * AKA Diffuse Texture in standard nomenclature.\n     * @hidden\n     */\n\n    _this._albedoTexture = null;\n    /**\n     * AKA Occlusion Texture in other nomenclature.\n     * @hidden\n     */\n\n    _this._ambientTexture = null;\n    /**\n     * AKA Occlusion Texture Intensity in other nomenclature.\n     * @hidden\n     */\n\n    _this._ambientTextureStrength = 1.0;\n    /**\n     * Defines how much the AO map is occluding the analytical lights (point spot...).\n     * 1 means it completely occludes it\n     * 0 mean it has no impact\n     * @hidden\n     */\n\n    _this._ambientTextureImpactOnAnalyticalLights = PBRBaseMaterial.DEFAULT_AO_ON_ANALYTICAL_LIGHTS;\n    /**\n     * Stores the alpha values in a texture.\n     * @hidden\n     */\n\n    _this._opacityTexture = null;\n    /**\n     * Stores the reflection values in a texture.\n     * @hidden\n     */\n\n    _this._reflectionTexture = null;\n    /**\n     * Stores the emissive values in a texture.\n     * @hidden\n     */\n\n    _this._emissiveTexture = null;\n    /**\n     * AKA Specular texture in other nomenclature.\n     * @hidden\n     */\n\n    _this._reflectivityTexture = null;\n    /**\n     * Used to switch from specular/glossiness to metallic/roughness workflow.\n     * @hidden\n     */\n\n    _this._metallicTexture = null;\n    /**\n     * Specifies the metallic scalar of the metallic/roughness workflow.\n     * Can also be used to scale the metalness values of the metallic texture.\n     * @hidden\n     */\n\n    _this._metallic = null;\n    /**\n     * Specifies the roughness scalar of the metallic/roughness workflow.\n     * Can also be used to scale the roughness values of the metallic texture.\n     * @hidden\n     */\n\n    _this._roughness = null;\n    /**\n     * In metallic workflow, specifies an F0 factor to help configuring the material F0.\n     * By default the indexOfrefraction is used to compute F0;\n     *\n     * This is used as a factor against the default reflectance at normal incidence to tweak it.\n     *\n     * F0 = defaultF0 * metallicF0Factor * metallicReflectanceColor;\n     * F90 = metallicReflectanceColor;\n     * @hidden\n     */\n\n    _this._metallicF0Factor = 1;\n    /**\n     * In metallic workflow, specifies an F90 color to help configuring the material F90.\n     * By default the F90 is always 1;\n     *\n     * Please note that this factor is also used as a factor against the default reflectance at normal incidence.\n     *\n     * F0 = defaultF0 * metallicF0Factor * metallicReflectanceColor\n     * F90 = metallicReflectanceColor;\n     * @hidden\n     */\n\n    _this._metallicReflectanceColor = Color3.White();\n    /**\n     * Specifies that only the A channel from _metallicReflectanceTexture should be used.\n     * If false, both RGB and A channels will be used\n     * @hidden\n     */\n\n    _this._useOnlyMetallicFromMetallicReflectanceTexture = false;\n    /**\n     * Defines to store metallicReflectanceColor in RGB and metallicF0Factor in A\n     * This is multiply against the scalar values defined in the material.\n     * @hidden\n     */\n\n    _this._metallicReflectanceTexture = null;\n    /**\n     * Defines to store reflectanceColor in RGB\n     * This is multiplied against the scalar values defined in the material.\n     * If both _reflectanceTexture and _metallicReflectanceTexture textures are provided and _useOnlyMetallicFromMetallicReflectanceTexture\n     * is false, _metallicReflectanceTexture takes precedence and _reflectanceTexture is not used\n     * @hidden\n     */\n\n    _this._reflectanceTexture = null;\n    /**\n     * Used to enable roughness/glossiness fetch from a separate channel depending on the current mode.\n     * Gray Scale represents roughness in metallic mode and glossiness in specular mode.\n     * @hidden\n     */\n\n    _this._microSurfaceTexture = null;\n    /**\n     * Stores surface normal data used to displace a mesh in a texture.\n     * @hidden\n     */\n\n    _this._bumpTexture = null;\n    /**\n     * Stores the pre-calculated light information of a mesh in a texture.\n     * @hidden\n     */\n\n    _this._lightmapTexture = null;\n    /**\n     * The color of a material in ambient lighting.\n     * @hidden\n     */\n\n    _this._ambientColor = new Color3(0, 0, 0);\n    /**\n     * AKA Diffuse Color in other nomenclature.\n     * @hidden\n     */\n\n    _this._albedoColor = new Color3(1, 1, 1);\n    /**\n     * AKA Specular Color in other nomenclature.\n     * @hidden\n     */\n\n    _this._reflectivityColor = new Color3(1, 1, 1);\n    /**\n     * The color applied when light is reflected from a material.\n     * @hidden\n     */\n\n    _this._reflectionColor = new Color3(1, 1, 1);\n    /**\n     * The color applied when light is emitted from a material.\n     * @hidden\n     */\n\n    _this._emissiveColor = new Color3(0, 0, 0);\n    /**\n     * AKA Glossiness in other nomenclature.\n     * @hidden\n     */\n\n    _this._microSurface = 0.9;\n    /**\n     * Specifies that the material will use the light map as a show map.\n     * @hidden\n     */\n\n    _this._useLightmapAsShadowmap = false;\n    /**\n     * This parameters will enable/disable Horizon occlusion to prevent normal maps to look shiny when the normal\n     * makes the reflect vector face the model (under horizon).\n     * @hidden\n     */\n\n    _this._useHorizonOcclusion = true;\n    /**\n     * This parameters will enable/disable radiance occlusion by preventing the radiance to lit\n     * too much the area relying on ambient texture to define their ambient occlusion.\n     * @hidden\n     */\n\n    _this._useRadianceOcclusion = true;\n    /**\n     * Specifies that the alpha is coming form the albedo channel alpha channel for alpha blending.\n     * @hidden\n     */\n\n    _this._useAlphaFromAlbedoTexture = false;\n    /**\n     * Specifies that the material will keeps the specular highlights over a transparent surface (only the most luminous ones).\n     * A car glass is a good example of that. When sun reflects on it you can not see what is behind.\n     * @hidden\n     */\n\n    _this._useSpecularOverAlpha = true;\n    /**\n     * Specifies if the reflectivity texture contains the glossiness information in its alpha channel.\n     * @hidden\n     */\n\n    _this._useMicroSurfaceFromReflectivityMapAlpha = false;\n    /**\n     * Specifies if the metallic texture contains the roughness information in its alpha channel.\n     * @hidden\n     */\n\n    _this._useRoughnessFromMetallicTextureAlpha = true;\n    /**\n     * Specifies if the metallic texture contains the roughness information in its green channel.\n     * @hidden\n     */\n\n    _this._useRoughnessFromMetallicTextureGreen = false;\n    /**\n     * Specifies if the metallic texture contains the metallness information in its blue channel.\n     * @hidden\n     */\n\n    _this._useMetallnessFromMetallicTextureBlue = false;\n    /**\n     * Specifies if the metallic texture contains the ambient occlusion information in its red channel.\n     * @hidden\n     */\n\n    _this._useAmbientOcclusionFromMetallicTextureRed = false;\n    /**\n     * Specifies if the ambient texture contains the ambient occlusion information in its red channel only.\n     * @hidden\n     */\n\n    _this._useAmbientInGrayScale = false;\n    /**\n     * In case the reflectivity map does not contain the microsurface information in its alpha channel,\n     * The material will try to infer what glossiness each pixel should be.\n     * @hidden\n     */\n\n    _this._useAutoMicroSurfaceFromReflectivityMap = false;\n    /**\n     * Defines the  falloff type used in this material.\n     * It by default is Physical.\n     * @hidden\n     */\n\n    _this._lightFalloff = PBRBaseMaterial.LIGHTFALLOFF_PHYSICAL;\n    /**\n     * Specifies that the material will keeps the reflection highlights over a transparent surface (only the most luminous ones).\n     * A car glass is a good example of that. When the street lights reflects on it you can not see what is behind.\n     * @hidden\n     */\n\n    _this._useRadianceOverAlpha = true;\n    /**\n     * Allows using an object space normal map (instead of tangent space).\n     * @hidden\n     */\n\n    _this._useObjectSpaceNormalMap = false;\n    /**\n     * Allows using the bump map in parallax mode.\n     * @hidden\n     */\n\n    _this._useParallax = false;\n    /**\n     * Allows using the bump map in parallax occlusion mode.\n     * @hidden\n     */\n\n    _this._useParallaxOcclusion = false;\n    /**\n     * Controls the scale bias of the parallax mode.\n     * @hidden\n     */\n\n    _this._parallaxScaleBias = 0.05;\n    /**\n     * If sets to true, disables all the lights affecting the material.\n     * @hidden\n     */\n\n    _this._disableLighting = false;\n    /**\n     * Number of Simultaneous lights allowed on the material.\n     * @hidden\n     */\n\n    _this._maxSimultaneousLights = 4;\n    /**\n     * If sets to true, x component of normal map value will be inverted (x = 1.0 - x).\n     * @hidden\n     */\n\n    _this._invertNormalMapX = false;\n    /**\n     * If sets to true, y component of normal map value will be inverted (y = 1.0 - y).\n     * @hidden\n     */\n\n    _this._invertNormalMapY = false;\n    /**\n     * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\n     * @hidden\n     */\n\n    _this._twoSidedLighting = false;\n    /**\n     * Defines the alpha limits in alpha test mode.\n     * @hidden\n     */\n\n    _this._alphaCutOff = 0.4;\n    /**\n     * Enforces alpha test in opaque or blend mode in order to improve the performances of some situations.\n     * @hidden\n     */\n\n    _this._forceAlphaTest = false;\n    /**\n     * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\n     * And/Or occlude the blended part. (alpha is converted to gamma to compute the fresnel)\n     * @hidden\n     */\n\n    _this._useAlphaFresnel = false;\n    /**\n     * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\n     * And/Or occlude the blended part. (alpha stays linear to compute the fresnel)\n     * @hidden\n     */\n\n    _this._useLinearAlphaFresnel = false;\n    /**\n     * Specifies the environment BRDF texture used to compute the scale and offset roughness values\n     * from cos theta and roughness:\n     * http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\n     * @hidden\n     */\n\n    _this._environmentBRDFTexture = null;\n    /**\n     * Force the shader to compute irradiance in the fragment shader in order to take bump in account.\n     * @hidden\n     */\n\n    _this._forceIrradianceInFragment = false;\n    _this._realTimeFiltering = false;\n    _this._realTimeFilteringQuality = 8;\n    /**\n     * Force normal to face away from face.\n     * @hidden\n     */\n\n    _this._forceNormalForward = false;\n    /**\n     * Enables specular anti aliasing in the PBR shader.\n     * It will both interacts on the Geometry for analytical and IBL lighting.\n     * It also prefilter the roughness map based on the bump values.\n     * @hidden\n     */\n\n    _this._enableSpecularAntiAliasing = false;\n    /**\n     * Keep track of the image processing observer to allow dispose and replace.\n     */\n\n    _this._imageProcessingObserver = null;\n    /**\n     * Stores the available render targets.\n     */\n\n    _this._renderTargets = new SmartArray(16);\n    /**\n     * Sets the global ambient color for the material used in lighting calculations.\n     */\n\n    _this._globalAmbientColor = new Color3(0, 0, 0);\n    /**\n     * Enables the use of logarithmic depth buffers, which is good for wide depth buffers.\n     */\n\n    _this._useLogarithmicDepth = false;\n    /**\n     * If set to true, no lighting calculations will be applied.\n     */\n\n    _this._unlit = false;\n    _this._debugMode = 0;\n    /**\n     * @hidden\n     * This is reserved for the inspector.\n     * Defines the material debug mode.\n     * It helps seeing only some components of the material while troubleshooting.\n     */\n\n    _this.debugMode = 0;\n    /**\n     * @hidden\n     * This is reserved for the inspector.\n     * Specify from where on screen the debug mode should start.\n     * The value goes from -1 (full screen) to 1 (not visible)\n     * It helps with side by side comparison against the final render\n     * This defaults to -1\n     */\n\n    _this._debugLimit = -1;\n    /**\n     * @hidden\n     * This is reserved for the inspector.\n     * As the default viewing range might not be enough (if the ambient is really small for instance)\n     * You can use the factor to better multiply the final value.\n     */\n\n    _this._debugFactor = 1;\n    _this._cacheHasRenderTargetTextures = false;\n    _this.brdf = new PBRBRDFConfiguration(_this);\n    _this.clearCoat = new PBRClearCoatConfiguration(_this);\n    _this.iridescence = new PBRIridescenceConfiguration(_this);\n    _this.anisotropy = new PBRAnisotropicConfiguration(_this);\n    _this.sheen = new PBRSheenConfiguration(_this);\n    _this.subSurface = new PBRSubSurfaceConfiguration(_this);\n    _this.detailMap = new DetailMapConfiguration(_this); // Setup the default processing configuration to the scene.\n\n    _this._attachImageProcessingConfiguration(null);\n\n    _this.getRenderTargetTextures = function () {\n      _this._renderTargets.reset();\n\n      if (MaterialFlags.ReflectionTextureEnabled && _this._reflectionTexture && _this._reflectionTexture.isRenderTarget) {\n        _this._renderTargets.push(_this._reflectionTexture);\n      }\n\n      _this._eventInfo.renderTargets = _this._renderTargets;\n\n      _this._callbackPluginEventFillRenderTargetTextures(_this._eventInfo);\n\n      return _this._renderTargets;\n    };\n\n    _this._environmentBRDFTexture = GetEnvironmentBRDFTexture(_this.getScene());\n    _this.prePassConfiguration = new PrePassConfiguration();\n    return _this;\n  }\n\n  Object.defineProperty(PBRBaseMaterial.prototype, \"realTimeFiltering\", {\n    /**\n     * Enables realtime filtering on the texture.\n     */\n    get: function get() {\n      return this._realTimeFiltering;\n    },\n    set: function set(b) {\n      this._realTimeFiltering = b;\n      this.markAsDirty(1);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRBaseMaterial.prototype, \"realTimeFilteringQuality\", {\n    /**\n     * Quality switch for realtime filtering\n     */\n    get: function get() {\n      return this._realTimeFilteringQuality;\n    },\n    set: function set(n) {\n      this._realTimeFilteringQuality = n;\n      this.markAsDirty(1);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRBaseMaterial.prototype, \"canRenderToMRT\", {\n    /**\n     * Can this material render to several textures at once\n     */\n    get: function get() {\n      return true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Attaches a new image processing configuration to the PBR Material.\n   * @param configuration\n   */\n\n  PBRBaseMaterial.prototype._attachImageProcessingConfiguration = function (configuration) {\n    var _this = this;\n\n    if (configuration === this._imageProcessingConfiguration) {\n      return;\n    } // Detaches observer.\n\n\n    if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n      this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n    } // Pick the scene configuration if needed.\n\n\n    if (!configuration) {\n      this._imageProcessingConfiguration = this.getScene().imageProcessingConfiguration;\n    } else {\n      this._imageProcessingConfiguration = configuration;\n    } // Attaches observer.\n\n\n    if (this._imageProcessingConfiguration) {\n      this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(function () {\n        _this._markAllSubMeshesAsImageProcessingDirty();\n      });\n    }\n  };\n\n  Object.defineProperty(PBRBaseMaterial.prototype, \"hasRenderTargetTextures\", {\n    /**\n     * Gets a boolean indicating that current material needs to register RTT\n     */\n    get: function get() {\n      if (MaterialFlags.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\n        return true;\n      }\n\n      return this._cacheHasRenderTargetTextures;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRBaseMaterial.prototype, \"isPrePassCapable\", {\n    /**\n     * Can this material render to prepass\n     */\n    get: function get() {\n      return !this.disableDepthWrite;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Gets the name of the material class.\n   */\n\n  PBRBaseMaterial.prototype.getClassName = function () {\n    return \"PBRBaseMaterial\";\n  };\n\n  Object.defineProperty(PBRBaseMaterial.prototype, \"useLogarithmicDepth\", {\n    /**\n     * Enabled the use of logarithmic depth buffers, which is good for wide depth buffers.\n     */\n    get: function get() {\n      return this._useLogarithmicDepth;\n    },\n\n    /**\n     * Enabled the use of logarithmic depth buffers, which is good for wide depth buffers.\n     */\n    set: function set(value) {\n      this._useLogarithmicDepth = value && this.getScene().getEngine().getCaps().fragmentDepthSupported;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRBaseMaterial.prototype, \"_disableAlphaBlending\", {\n    /**\n     * Returns true if alpha blending should be disabled.\n     */\n    get: function get() {\n      var _a;\n\n      return this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_OPAQUE || this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_ALPHATEST || ((_a = this.subSurface) === null || _a === void 0 ? void 0 : _a.disableAlphaBlending);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Specifies whether or not this material should be rendered in alpha blend mode.\n   */\n\n  PBRBaseMaterial.prototype.needAlphaBlending = function () {\n    if (this._disableAlphaBlending) {\n      return false;\n    }\n\n    return this.alpha < 1.0 || this._opacityTexture != null || this._shouldUseAlphaFromAlbedoTexture();\n  };\n  /**\n   * Specifies whether or not this material should be rendered in alpha test mode.\n   */\n\n\n  PBRBaseMaterial.prototype.needAlphaTesting = function () {\n    var _a;\n\n    if (this._forceAlphaTest) {\n      return true;\n    }\n\n    if ((_a = this.subSurface) === null || _a === void 0 ? void 0 : _a.disableAlphaBlending) {\n      return false;\n    }\n\n    return this._hasAlphaChannel() && (this._transparencyMode == null || this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_ALPHATEST);\n  };\n  /**\n   * Specifies whether or not the alpha value of the albedo texture should be used for alpha blending.\n   */\n\n\n  PBRBaseMaterial.prototype._shouldUseAlphaFromAlbedoTexture = function () {\n    return this._albedoTexture != null && this._albedoTexture.hasAlpha && this._useAlphaFromAlbedoTexture && this._transparencyMode !== PBRBaseMaterial.PBRMATERIAL_OPAQUE;\n  };\n  /**\n   * Specifies whether or not there is a usable alpha channel for transparency.\n   */\n\n\n  PBRBaseMaterial.prototype._hasAlphaChannel = function () {\n    return this._albedoTexture != null && this._albedoTexture.hasAlpha || this._opacityTexture != null;\n  };\n  /**\n   * Gets the texture used for the alpha test.\n   */\n\n\n  PBRBaseMaterial.prototype.getAlphaTestTexture = function () {\n    return this._albedoTexture;\n  };\n  /**\n   * Specifies that the submesh is ready to be used.\n   * @param mesh - BJS mesh.\n   * @param subMesh - A submesh of the BJS mesh.  Used to check if it is ready.\n   * @param useInstances - Specifies that instances should be used.\n   * @returns - boolean indicating that the submesh is ready or not.\n   */\n\n\n  PBRBaseMaterial.prototype.isReadyForSubMesh = function (mesh, subMesh, useInstances) {\n    if (!this._uniformBufferLayoutBuilt) {\n      this.buildUniformLayout();\n    }\n\n    if (subMesh.effect && this.isFrozen) {\n      if (subMesh.effect._wasPreviouslyReady) {\n        return true;\n      }\n    }\n\n    if (!subMesh.materialDefines) {\n      this._callbackPluginEventGeneric(MaterialPluginEvent.GetDefineNames, this._eventInfo);\n\n      subMesh.materialDefines = new PBRMaterialDefines(this._eventInfo.defineNames);\n    }\n\n    var defines = subMesh.materialDefines;\n\n    if (this._isReadyForSubMesh(subMesh)) {\n      return true;\n    }\n\n    var scene = this.getScene();\n    var engine = scene.getEngine();\n\n    if (defines._areTexturesDirty) {\n      this._eventInfo.hasRenderTargetTextures = false;\n\n      this._callbackPluginEventHasRenderTargetTextures(this._eventInfo);\n\n      this._cacheHasRenderTargetTextures = this._eventInfo.hasRenderTargetTextures;\n\n      if (scene.texturesEnabled) {\n        if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\n          if (!this._albedoTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n\n        if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\n          if (!this._ambientTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n\n        if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\n          if (!this._opacityTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n\n        var reflectionTexture = this._getReflectionTexture();\n\n        if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\n          if (!reflectionTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n\n          if (reflectionTexture.irradianceTexture && !reflectionTexture.irradianceTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n\n        if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\n          if (!this._lightmapTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n\n        if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\n          if (!this._emissiveTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n\n        if (MaterialFlags.SpecularTextureEnabled) {\n          if (this._metallicTexture) {\n            if (!this._metallicTexture.isReadyOrNotBlocking()) {\n              return false;\n            }\n          } else if (this._reflectivityTexture) {\n            if (!this._reflectivityTexture.isReadyOrNotBlocking()) {\n              return false;\n            }\n          }\n\n          if (this._metallicReflectanceTexture) {\n            if (!this._metallicReflectanceTexture.isReadyOrNotBlocking()) {\n              return false;\n            }\n          }\n\n          if (this._reflectanceTexture) {\n            if (!this._reflectanceTexture.isReadyOrNotBlocking()) {\n              return false;\n            }\n          }\n\n          if (this._microSurfaceTexture) {\n            if (!this._microSurfaceTexture.isReadyOrNotBlocking()) {\n              return false;\n            }\n          }\n        }\n\n        if (engine.getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\n          // Bump texture cannot be not blocking.\n          if (!this._bumpTexture.isReady()) {\n            return false;\n          }\n        }\n\n        if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\n          // This is blocking.\n          if (!this._environmentBRDFTexture.isReady()) {\n            return false;\n          }\n        }\n      }\n    }\n\n    this._eventInfo.isReadyForSubMesh = true;\n    this._eventInfo.defines = defines;\n\n    this._callbackPluginEventIsReadyForSubMesh(this._eventInfo);\n\n    if (!this._eventInfo.isReadyForSubMesh) {\n      return false;\n    }\n\n    if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\n      if (!this._imageProcessingConfiguration.isReady()) {\n        return false;\n      }\n    }\n\n    if (!engine.getCaps().standardDerivatives && !mesh.isVerticesDataPresent(VertexBuffer.NormalKind)) {\n      mesh.createNormals(true);\n      Logger.Warn(\"PBRMaterial: Normals have been created for the mesh: \" + mesh.name);\n    }\n\n    var previousEffect = subMesh.effect;\n    var lightDisposed = defines._areLightsDisposed;\n\n    var effect = this._prepareEffect(mesh, defines, this.onCompiled, this.onError, useInstances, null, subMesh.getRenderingMesh().hasThinInstances);\n\n    if (effect) {\n      if (this._onEffectCreatedObservable) {\n        onCreatedEffectParameters.effect = effect;\n        onCreatedEffectParameters.subMesh = subMesh;\n\n        this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\n      } // Use previous effect while new one is compiling\n\n\n      if (this.allowShaderHotSwapping && previousEffect && !effect.isReady()) {\n        effect = previousEffect;\n        defines.markAsUnprocessed();\n\n        if (lightDisposed) {\n          // re register in case it takes more than one frame.\n          defines._areLightsDisposed = true;\n          return false;\n        }\n      } else {\n        scene.resetCachedMaterial();\n        subMesh.setEffect(effect, defines, this._materialContext);\n      }\n    }\n\n    if (!subMesh.effect || !subMesh.effect.isReady()) {\n      return false;\n    }\n\n    defines._renderId = scene.getRenderId();\n    subMesh.effect._wasPreviouslyReady = true;\n    return true;\n  };\n  /**\n   * Specifies if the material uses metallic roughness workflow.\n   * @returns boolean specifying if the material uses metallic roughness workflow.\n   */\n\n\n  PBRBaseMaterial.prototype.isMetallicWorkflow = function () {\n    if (this._metallic != null || this._roughness != null || this._metallicTexture) {\n      return true;\n    }\n\n    return false;\n  };\n\n  PBRBaseMaterial.prototype._prepareEffect = function (mesh, defines, onCompiled, onError, useInstances, useClipPlane, useThinInstances) {\n    if (onCompiled === void 0) {\n      onCompiled = null;\n    }\n\n    if (onError === void 0) {\n      onError = null;\n    }\n\n    if (useInstances === void 0) {\n      useInstances = null;\n    }\n\n    if (useClipPlane === void 0) {\n      useClipPlane = null;\n    }\n\n    this._prepareDefines(mesh, defines, useInstances, useClipPlane, useThinInstances);\n\n    if (!defines.isDirty) {\n      return null;\n    }\n\n    defines.markAsProcessed();\n    var scene = this.getScene();\n    var engine = scene.getEngine(); // Fallbacks\n\n    var fallbacks = new EffectFallbacks();\n    var fallbackRank = 0;\n\n    if (defines.USESPHERICALINVERTEX) {\n      fallbacks.addFallback(fallbackRank++, \"USESPHERICALINVERTEX\");\n    }\n\n    if (defines.FOG) {\n      fallbacks.addFallback(fallbackRank, \"FOG\");\n    }\n\n    if (defines.SPECULARAA) {\n      fallbacks.addFallback(fallbackRank, \"SPECULARAA\");\n    }\n\n    if (defines.POINTSIZE) {\n      fallbacks.addFallback(fallbackRank, \"POINTSIZE\");\n    }\n\n    if (defines.LOGARITHMICDEPTH) {\n      fallbacks.addFallback(fallbackRank, \"LOGARITHMICDEPTH\");\n    }\n\n    if (defines.PARALLAX) {\n      fallbacks.addFallback(fallbackRank, \"PARALLAX\");\n    }\n\n    if (defines.PARALLAXOCCLUSION) {\n      fallbacks.addFallback(fallbackRank++, \"PARALLAXOCCLUSION\");\n    }\n\n    if (defines.ENVIRONMENTBRDF) {\n      fallbacks.addFallback(fallbackRank++, \"ENVIRONMENTBRDF\");\n    }\n\n    if (defines.TANGENT) {\n      fallbacks.addFallback(fallbackRank++, \"TANGENT\");\n    }\n\n    if (defines.BUMP) {\n      fallbacks.addFallback(fallbackRank++, \"BUMP\");\n    }\n\n    fallbackRank = MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this._maxSimultaneousLights, fallbackRank++);\n\n    if (defines.SPECULARTERM) {\n      fallbacks.addFallback(fallbackRank++, \"SPECULARTERM\");\n    }\n\n    if (defines.USESPHERICALFROMREFLECTIONMAP) {\n      fallbacks.addFallback(fallbackRank++, \"USESPHERICALFROMREFLECTIONMAP\");\n    }\n\n    if (defines.USEIRRADIANCEMAP) {\n      fallbacks.addFallback(fallbackRank++, \"USEIRRADIANCEMAP\");\n    }\n\n    if (defines.LIGHTMAP) {\n      fallbacks.addFallback(fallbackRank++, \"LIGHTMAP\");\n    }\n\n    if (defines.NORMAL) {\n      fallbacks.addFallback(fallbackRank++, \"NORMAL\");\n    }\n\n    if (defines.AMBIENT) {\n      fallbacks.addFallback(fallbackRank++, \"AMBIENT\");\n    }\n\n    if (defines.EMISSIVE) {\n      fallbacks.addFallback(fallbackRank++, \"EMISSIVE\");\n    }\n\n    if (defines.VERTEXCOLOR) {\n      fallbacks.addFallback(fallbackRank++, \"VERTEXCOLOR\");\n    }\n\n    if (defines.MORPHTARGETS) {\n      fallbacks.addFallback(fallbackRank++, \"MORPHTARGETS\");\n    }\n\n    if (defines.MULTIVIEW) {\n      fallbacks.addFallback(0, \"MULTIVIEW\");\n    } //Attributes\n\n\n    var attribs = [VertexBuffer.PositionKind];\n\n    if (defines.NORMAL) {\n      attribs.push(VertexBuffer.NormalKind);\n    }\n\n    if (defines.TANGENT) {\n      attribs.push(VertexBuffer.TangentKind);\n    }\n\n    for (var i = 1; i <= 6; ++i) {\n      if (defines[\"UV\" + i]) {\n        attribs.push(\"uv\".concat(i === 1 ? \"\" : i));\n      }\n    }\n\n    if (defines.VERTEXCOLOR) {\n      attribs.push(VertexBuffer.ColorKind);\n    }\n\n    if (defines.INSTANCESCOLOR) {\n      attribs.push(VertexBuffer.ColorInstanceKind);\n    }\n\n    MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\n    MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n    MaterialHelper.PrepareAttributesForMorphTargets(attribs, mesh, defines);\n    MaterialHelper.PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\n    var shaderName = \"pbr\";\n    var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vAmbientColor\", \"vAlbedoColor\", \"vReflectivityColor\", \"vMetallicReflectanceFactors\", \"vEmissiveColor\", \"visibility\", \"vReflectionColor\", \"vFogInfos\", \"vFogColor\", \"pointSize\", \"vAlbedoInfos\", \"vAmbientInfos\", \"vOpacityInfos\", \"vReflectionInfos\", \"vReflectionPosition\", \"vReflectionSize\", \"vEmissiveInfos\", \"vReflectivityInfos\", \"vReflectionFilteringInfo\", \"vMetallicReflectanceInfos\", \"vReflectanceInfos\", \"vMicroSurfaceSamplerInfos\", \"vBumpInfos\", \"vLightmapInfos\", \"mBones\", \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"vClipPlane5\", \"vClipPlane6\", \"albedoMatrix\", \"ambientMatrix\", \"opacityMatrix\", \"reflectionMatrix\", \"emissiveMatrix\", \"reflectivityMatrix\", \"normalMatrix\", \"microSurfaceSamplerMatrix\", \"bumpMatrix\", \"lightmapMatrix\", \"metallicReflectanceMatrix\", \"reflectanceMatrix\", \"vLightingIntensity\", \"logarithmicDepthConstant\", \"vSphericalX\", \"vSphericalY\", \"vSphericalZ\", \"vSphericalXX_ZZ\", \"vSphericalYY_ZZ\", \"vSphericalZZ\", \"vSphericalXY\", \"vSphericalYZ\", \"vSphericalZX\", \"vSphericalL00\", \"vSphericalL1_1\", \"vSphericalL10\", \"vSphericalL11\", \"vSphericalL2_2\", \"vSphericalL2_1\", \"vSphericalL20\", \"vSphericalL21\", \"vSphericalL22\", \"vReflectionMicrosurfaceInfos\", \"vTangentSpaceParams\", \"boneTextureWidth\", \"vDebugMode\", \"morphTargetTextureInfo\", \"morphTargetTextureIndices\"];\n    var samplers = [\"albedoSampler\", \"reflectivitySampler\", \"ambientSampler\", \"emissiveSampler\", \"bumpSampler\", \"lightmapSampler\", \"opacitySampler\", \"reflectionSampler\", \"reflectionSamplerLow\", \"reflectionSamplerHigh\", \"irradianceSampler\", \"microSurfaceSampler\", \"environmentBrdfSampler\", \"boneSampler\", \"metallicReflectanceSampler\", \"reflectanceSampler\", \"morphTargets\", \"oitDepthSampler\", \"oitFrontColorSampler\"];\n    var uniformBuffers = [\"Material\", \"Scene\", \"Mesh\"];\n    this._eventInfo.fallbacks = fallbacks;\n    this._eventInfo.fallbackRank = fallbackRank;\n    this._eventInfo.defines = defines;\n    this._eventInfo.uniforms = uniforms;\n    this._eventInfo.samplers = samplers;\n    this._eventInfo.uniformBuffersNames = uniformBuffers;\n    this._eventInfo.customCode = undefined;\n\n    this._callbackPluginEventGeneric(MaterialPluginEvent.PrepareEffect, this._eventInfo);\n\n    PrePassConfiguration.AddUniforms(uniforms);\n    PrePassConfiguration.AddSamplers(samplers);\n\n    if (ImageProcessingConfiguration) {\n      ImageProcessingConfiguration.PrepareUniforms(uniforms, defines);\n      ImageProcessingConfiguration.PrepareSamplers(samplers, defines);\n    }\n\n    MaterialHelper.PrepareUniformsAndSamplersList({\n      uniformsNames: uniforms,\n      uniformBuffersNames: uniformBuffers,\n      samplers: samplers,\n      defines: defines,\n      maxSimultaneousLights: this._maxSimultaneousLights\n    });\n    var csnrOptions = {};\n\n    if (this.customShaderNameResolve) {\n      shaderName = this.customShaderNameResolve(shaderName, uniforms, uniformBuffers, samplers, defines, attribs, csnrOptions);\n    }\n\n    var join = defines.toString();\n    return engine.createEffect(shaderName, {\n      attributes: attribs,\n      uniformsNames: uniforms,\n      uniformBuffersNames: uniformBuffers,\n      samplers: samplers,\n      defines: join,\n      fallbacks: fallbacks,\n      onCompiled: onCompiled,\n      onError: onError,\n      indexParameters: {\n        maxSimultaneousLights: this._maxSimultaneousLights,\n        maxSimultaneousMorphTargets: defines.NUM_MORPH_INFLUENCERS\n      },\n      processFinalCode: csnrOptions.processFinalCode,\n      processCodeAfterIncludes: this._eventInfo.customCode,\n      multiTarget: defines.PREPASS\n    }, engine);\n  };\n\n  PBRBaseMaterial.prototype._prepareDefines = function (mesh, defines, useInstances, useClipPlane, useThinInstances) {\n    var _a;\n\n    if (useInstances === void 0) {\n      useInstances = null;\n    }\n\n    if (useClipPlane === void 0) {\n      useClipPlane = null;\n    }\n\n    if (useThinInstances === void 0) {\n      useThinInstances = false;\n    }\n\n    var scene = this.getScene();\n    var engine = scene.getEngine(); // Lights\n\n    MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, true, this._maxSimultaneousLights, this._disableLighting);\n    defines._needNormals = true; // Multiview\n\n    MaterialHelper.PrepareDefinesForMultiview(scene, defines); // PrePass\n\n    var oit = this.needAlphaBlendingForMesh(mesh) && this.getScene().useOrderIndependentTransparency;\n    MaterialHelper.PrepareDefinesForPrePass(scene, defines, this.canRenderToMRT && !oit); // Order independant transparency\n\n    MaterialHelper.PrepareDefinesForOIT(scene, defines, oit); // Textures\n\n    defines.METALLICWORKFLOW = this.isMetallicWorkflow();\n\n    if (defines._areTexturesDirty) {\n      defines._needUVs = false;\n\n      if (scene.texturesEnabled) {\n        if (scene.getEngine().getCaps().textureLOD) {\n          defines.LODBASEDMICROSFURACE = true;\n        }\n\n        if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\n          MaterialHelper.PrepareDefinesForMergedUV(this._albedoTexture, defines, \"ALBEDO\");\n          defines.GAMMAALBEDO = this._albedoTexture.gammaSpace;\n        } else {\n          defines.ALBEDO = false;\n        }\n\n        if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\n          MaterialHelper.PrepareDefinesForMergedUV(this._ambientTexture, defines, \"AMBIENT\");\n          defines.AMBIENTINGRAYSCALE = this._useAmbientInGrayScale;\n        } else {\n          defines.AMBIENT = false;\n        }\n\n        if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\n          MaterialHelper.PrepareDefinesForMergedUV(this._opacityTexture, defines, \"OPACITY\");\n          defines.OPACITYRGB = this._opacityTexture.getAlphaFromRGB;\n        } else {\n          defines.OPACITY = false;\n        }\n\n        var reflectionTexture = this._getReflectionTexture();\n\n        if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\n          defines.REFLECTION = true;\n          defines.GAMMAREFLECTION = reflectionTexture.gammaSpace;\n          defines.RGBDREFLECTION = reflectionTexture.isRGBD;\n          defines.REFLECTIONMAP_OPPOSITEZ = this.getScene().useRightHandedSystem ? !reflectionTexture.invertZ : reflectionTexture.invertZ;\n          defines.LODINREFLECTIONALPHA = reflectionTexture.lodLevelInAlpha;\n          defines.LINEARSPECULARREFLECTION = reflectionTexture.linearSpecularLOD;\n\n          if (this.realTimeFiltering && this.realTimeFilteringQuality > 0) {\n            defines.NUM_SAMPLES = \"\" + this.realTimeFilteringQuality;\n\n            if (engine._features.needTypeSuffixInShaderConstants) {\n              defines.NUM_SAMPLES = defines.NUM_SAMPLES + \"u\";\n            }\n\n            defines.REALTIME_FILTERING = true;\n          } else {\n            defines.REALTIME_FILTERING = false;\n          }\n\n          if (reflectionTexture.coordinatesMode === Texture.INVCUBIC_MODE) {\n            defines.INVERTCUBICMAP = true;\n          }\n\n          defines.REFLECTIONMAP_3D = reflectionTexture.isCube;\n          defines.REFLECTIONMAP_CUBIC = false;\n          defines.REFLECTIONMAP_EXPLICIT = false;\n          defines.REFLECTIONMAP_PLANAR = false;\n          defines.REFLECTIONMAP_PROJECTION = false;\n          defines.REFLECTIONMAP_SKYBOX = false;\n          defines.REFLECTIONMAP_SPHERICAL = false;\n          defines.REFLECTIONMAP_EQUIRECTANGULAR = false;\n          defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\n          defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\n\n          switch (reflectionTexture.coordinatesMode) {\n            case Texture.EXPLICIT_MODE:\n              defines.REFLECTIONMAP_EXPLICIT = true;\n              break;\n\n            case Texture.PLANAR_MODE:\n              defines.REFLECTIONMAP_PLANAR = true;\n              break;\n\n            case Texture.PROJECTION_MODE:\n              defines.REFLECTIONMAP_PROJECTION = true;\n              break;\n\n            case Texture.SKYBOX_MODE:\n              defines.REFLECTIONMAP_SKYBOX = true;\n              break;\n\n            case Texture.SPHERICAL_MODE:\n              defines.REFLECTIONMAP_SPHERICAL = true;\n              break;\n\n            case Texture.EQUIRECTANGULAR_MODE:\n              defines.REFLECTIONMAP_EQUIRECTANGULAR = true;\n              break;\n\n            case Texture.FIXED_EQUIRECTANGULAR_MODE:\n              defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = true;\n              break;\n\n            case Texture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE:\n              defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = true;\n              break;\n\n            case Texture.CUBIC_MODE:\n            case Texture.INVCUBIC_MODE:\n            default:\n              defines.REFLECTIONMAP_CUBIC = true;\n              defines.USE_LOCAL_REFLECTIONMAP_CUBIC = reflectionTexture.boundingBoxSize ? true : false;\n              break;\n          }\n\n          if (reflectionTexture.coordinatesMode !== Texture.SKYBOX_MODE) {\n            if (reflectionTexture.irradianceTexture) {\n              defines.USEIRRADIANCEMAP = true;\n              defines.USESPHERICALFROMREFLECTIONMAP = false;\n            } // Assume using spherical polynomial if the reflection texture is a cube map\n            else if (reflectionTexture.isCube) {\n              defines.USESPHERICALFROMREFLECTIONMAP = true;\n              defines.USEIRRADIANCEMAP = false;\n\n              if (this._forceIrradianceInFragment || this.realTimeFiltering || scene.getEngine().getCaps().maxVaryingVectors <= 8) {\n                defines.USESPHERICALINVERTEX = false;\n              } else {\n                defines.USESPHERICALINVERTEX = true;\n              }\n            }\n          }\n        } else {\n          defines.REFLECTION = false;\n          defines.REFLECTIONMAP_3D = false;\n          defines.REFLECTIONMAP_SPHERICAL = false;\n          defines.REFLECTIONMAP_PLANAR = false;\n          defines.REFLECTIONMAP_CUBIC = false;\n          defines.USE_LOCAL_REFLECTIONMAP_CUBIC = false;\n          defines.REFLECTIONMAP_PROJECTION = false;\n          defines.REFLECTIONMAP_SKYBOX = false;\n          defines.REFLECTIONMAP_EXPLICIT = false;\n          defines.REFLECTIONMAP_EQUIRECTANGULAR = false;\n          defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\n          defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\n          defines.INVERTCUBICMAP = false;\n          defines.USESPHERICALFROMREFLECTIONMAP = false;\n          defines.USEIRRADIANCEMAP = false;\n          defines.USESPHERICALINVERTEX = false;\n          defines.REFLECTIONMAP_OPPOSITEZ = false;\n          defines.LODINREFLECTIONALPHA = false;\n          defines.GAMMAREFLECTION = false;\n          defines.RGBDREFLECTION = false;\n          defines.LINEARSPECULARREFLECTION = false;\n        }\n\n        if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\n          MaterialHelper.PrepareDefinesForMergedUV(this._lightmapTexture, defines, \"LIGHTMAP\");\n          defines.USELIGHTMAPASSHADOWMAP = this._useLightmapAsShadowmap;\n          defines.GAMMALIGHTMAP = this._lightmapTexture.gammaSpace;\n          defines.RGBDLIGHTMAP = this._lightmapTexture.isRGBD;\n        } else {\n          defines.LIGHTMAP = false;\n        }\n\n        if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\n          MaterialHelper.PrepareDefinesForMergedUV(this._emissiveTexture, defines, \"EMISSIVE\");\n          defines.GAMMAEMISSIVE = this._emissiveTexture.gammaSpace;\n        } else {\n          defines.EMISSIVE = false;\n        }\n\n        if (MaterialFlags.SpecularTextureEnabled) {\n          if (this._metallicTexture) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._metallicTexture, defines, \"REFLECTIVITY\");\n            defines.ROUGHNESSSTOREINMETALMAPALPHA = this._useRoughnessFromMetallicTextureAlpha;\n            defines.ROUGHNESSSTOREINMETALMAPGREEN = !this._useRoughnessFromMetallicTextureAlpha && this._useRoughnessFromMetallicTextureGreen;\n            defines.METALLNESSSTOREINMETALMAPBLUE = this._useMetallnessFromMetallicTextureBlue;\n            defines.AOSTOREINMETALMAPRED = this._useAmbientOcclusionFromMetallicTextureRed;\n            defines.REFLECTIVITY_GAMMA = false;\n          } else if (this._reflectivityTexture) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._reflectivityTexture, defines, \"REFLECTIVITY\");\n            defines.MICROSURFACEFROMREFLECTIVITYMAP = this._useMicroSurfaceFromReflectivityMapAlpha;\n            defines.MICROSURFACEAUTOMATIC = this._useAutoMicroSurfaceFromReflectivityMap;\n            defines.REFLECTIVITY_GAMMA = this._reflectivityTexture.gammaSpace;\n          } else {\n            defines.REFLECTIVITY = false;\n          }\n\n          if (this._metallicReflectanceTexture || this._reflectanceTexture) {\n            var identicalTextures = this._metallicReflectanceTexture !== null && this._metallicReflectanceTexture._texture === ((_a = this._reflectanceTexture) === null || _a === void 0 ? void 0 : _a._texture) && this._metallicReflectanceTexture.checkTransformsAreIdentical(this._reflectanceTexture);\n\n            defines.METALLIC_REFLECTANCE_USE_ALPHA_ONLY = this._useOnlyMetallicFromMetallicReflectanceTexture && !identicalTextures;\n\n            if (this._metallicReflectanceTexture) {\n              MaterialHelper.PrepareDefinesForMergedUV(this._metallicReflectanceTexture, defines, \"METALLIC_REFLECTANCE\");\n              defines.METALLIC_REFLECTANCE_GAMMA = this._metallicReflectanceTexture.gammaSpace;\n            } else {\n              defines.METALLIC_REFLECTANCE = false;\n            }\n\n            if (this._reflectanceTexture && !identicalTextures && (!this._metallicReflectanceTexture || this._metallicReflectanceTexture && this._useOnlyMetallicFromMetallicReflectanceTexture)) {\n              MaterialHelper.PrepareDefinesForMergedUV(this._reflectanceTexture, defines, \"REFLECTANCE\");\n              defines.REFLECTANCE_GAMMA = this._reflectanceTexture.gammaSpace;\n            } else {\n              defines.REFLECTANCE = false;\n            }\n          } else {\n            defines.METALLIC_REFLECTANCE = false;\n            defines.REFLECTANCE = false;\n          }\n\n          if (this._microSurfaceTexture) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._microSurfaceTexture, defines, \"MICROSURFACEMAP\");\n          } else {\n            defines.MICROSURFACEMAP = false;\n          }\n        } else {\n          defines.REFLECTIVITY = false;\n          defines.MICROSURFACEMAP = false;\n        }\n\n        if (scene.getEngine().getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\n          MaterialHelper.PrepareDefinesForMergedUV(this._bumpTexture, defines, \"BUMP\");\n\n          if (this._useParallax && this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\n            defines.PARALLAX = true;\n            defines.PARALLAXOCCLUSION = !!this._useParallaxOcclusion;\n          } else {\n            defines.PARALLAX = false;\n          }\n\n          defines.OBJECTSPACE_NORMALMAP = this._useObjectSpaceNormalMap;\n        } else {\n          defines.BUMP = false;\n        }\n\n        if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\n          defines.ENVIRONMENTBRDF = true;\n          defines.ENVIRONMENTBRDF_RGBD = this._environmentBRDFTexture.isRGBD;\n        } else {\n          defines.ENVIRONMENTBRDF = false;\n          defines.ENVIRONMENTBRDF_RGBD = false;\n        }\n\n        if (this._shouldUseAlphaFromAlbedoTexture()) {\n          defines.ALPHAFROMALBEDO = true;\n        } else {\n          defines.ALPHAFROMALBEDO = false;\n        }\n      }\n\n      defines.SPECULAROVERALPHA = this._useSpecularOverAlpha;\n\n      if (this._lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_STANDARD) {\n        defines.USEPHYSICALLIGHTFALLOFF = false;\n        defines.USEGLTFLIGHTFALLOFF = false;\n      } else if (this._lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_GLTF) {\n        defines.USEPHYSICALLIGHTFALLOFF = false;\n        defines.USEGLTFLIGHTFALLOFF = true;\n      } else {\n        defines.USEPHYSICALLIGHTFALLOFF = true;\n        defines.USEGLTFLIGHTFALLOFF = false;\n      }\n\n      defines.RADIANCEOVERALPHA = this._useRadianceOverAlpha;\n\n      if (!this.backFaceCulling && this._twoSidedLighting) {\n        defines.TWOSIDEDLIGHTING = true;\n      } else {\n        defines.TWOSIDEDLIGHTING = false;\n      }\n\n      defines.SPECULARAA = scene.getEngine().getCaps().standardDerivatives && this._enableSpecularAntiAliasing;\n    }\n\n    if (defines._areTexturesDirty || defines._areMiscDirty) {\n      defines.ALPHATESTVALUE = \"\".concat(this._alphaCutOff).concat(this._alphaCutOff % 1 === 0 ? \".\" : \"\");\n      defines.PREMULTIPLYALPHA = this.alphaMode === 7 || this.alphaMode === 8;\n      defines.ALPHABLEND = this.needAlphaBlendingForMesh(mesh);\n      defines.ALPHAFRESNEL = this._useAlphaFresnel || this._useLinearAlphaFresnel;\n      defines.LINEARALPHAFRESNEL = this._useLinearAlphaFresnel;\n    }\n\n    if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\n      this._imageProcessingConfiguration.prepareDefines(defines);\n    }\n\n    defines.FORCENORMALFORWARD = this._forceNormalForward;\n    defines.RADIANCEOCCLUSION = this._useRadianceOcclusion;\n    defines.HORIZONOCCLUSION = this._useHorizonOcclusion; // Misc.\n\n    if (defines._areMiscDirty) {\n      MaterialHelper.PrepareDefinesForMisc(mesh, scene, this._useLogarithmicDepth, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh) || this._forceAlphaTest, defines);\n      defines.UNLIT = this._unlit || (this.pointsCloud || this.wireframe) && !mesh.isVerticesDataPresent(VertexBuffer.NormalKind);\n      defines.DEBUGMODE = this._debugMode;\n    } // External config\n\n\n    this._eventInfo.defines = defines;\n    this._eventInfo.mesh = mesh;\n\n    this._callbackPluginEventPrepareDefines(this._eventInfo); // Values that need to be evaluated on every frame\n\n\n    MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false, useClipPlane, useThinInstances); // Attribs\n\n    MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true, true, this._transparencyMode !== PBRBaseMaterial.PBRMATERIAL_OPAQUE);\n  };\n  /**\n   * Force shader compilation\n   * @param mesh\n   * @param onCompiled\n   * @param options\n   */\n\n\n  PBRBaseMaterial.prototype.forceCompilation = function (mesh, onCompiled, options) {\n    var _this = this;\n\n    var localOptions = __assign({\n      clipPlane: false,\n      useInstances: false\n    }, options);\n\n    if (!this._uniformBufferLayoutBuilt) {\n      this.buildUniformLayout();\n    }\n\n    this._callbackPluginEventGeneric(MaterialPluginEvent.GetDefineNames, this._eventInfo);\n\n    var defines = new PBRMaterialDefines(this._eventInfo.defineNames);\n\n    var effect = this._prepareEffect(mesh, defines, undefined, undefined, localOptions.useInstances, localOptions.clipPlane, mesh.hasThinInstances);\n\n    if (this._onEffectCreatedObservable) {\n      onCreatedEffectParameters.effect = effect;\n      onCreatedEffectParameters.subMesh = null;\n\n      this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\n    }\n\n    if (effect.isReady()) {\n      if (onCompiled) {\n        onCompiled(this);\n      }\n    } else {\n      effect.onCompileObservable.add(function () {\n        if (onCompiled) {\n          onCompiled(_this);\n        }\n      });\n    }\n  };\n  /**\n   * Initializes the uniform buffer layout for the shader.\n   */\n\n\n  PBRBaseMaterial.prototype.buildUniformLayout = function () {\n    // Order is important !\n    var ubo = this._uniformBuffer;\n    ubo.addUniform(\"vAlbedoInfos\", 2);\n    ubo.addUniform(\"vAmbientInfos\", 4);\n    ubo.addUniform(\"vOpacityInfos\", 2);\n    ubo.addUniform(\"vEmissiveInfos\", 2);\n    ubo.addUniform(\"vLightmapInfos\", 2);\n    ubo.addUniform(\"vReflectivityInfos\", 3);\n    ubo.addUniform(\"vMicroSurfaceSamplerInfos\", 2);\n    ubo.addUniform(\"vReflectionInfos\", 2);\n    ubo.addUniform(\"vReflectionFilteringInfo\", 2);\n    ubo.addUniform(\"vReflectionPosition\", 3);\n    ubo.addUniform(\"vReflectionSize\", 3);\n    ubo.addUniform(\"vBumpInfos\", 3);\n    ubo.addUniform(\"albedoMatrix\", 16);\n    ubo.addUniform(\"ambientMatrix\", 16);\n    ubo.addUniform(\"opacityMatrix\", 16);\n    ubo.addUniform(\"emissiveMatrix\", 16);\n    ubo.addUniform(\"lightmapMatrix\", 16);\n    ubo.addUniform(\"reflectivityMatrix\", 16);\n    ubo.addUniform(\"microSurfaceSamplerMatrix\", 16);\n    ubo.addUniform(\"bumpMatrix\", 16);\n    ubo.addUniform(\"vTangentSpaceParams\", 2);\n    ubo.addUniform(\"reflectionMatrix\", 16);\n    ubo.addUniform(\"vReflectionColor\", 3);\n    ubo.addUniform(\"vAlbedoColor\", 4);\n    ubo.addUniform(\"vLightingIntensity\", 4);\n    ubo.addUniform(\"vReflectionMicrosurfaceInfos\", 3);\n    ubo.addUniform(\"pointSize\", 1);\n    ubo.addUniform(\"vReflectivityColor\", 4);\n    ubo.addUniform(\"vEmissiveColor\", 3);\n    ubo.addUniform(\"vAmbientColor\", 3);\n    ubo.addUniform(\"vDebugMode\", 2);\n    ubo.addUniform(\"vMetallicReflectanceFactors\", 4);\n    ubo.addUniform(\"vMetallicReflectanceInfos\", 2);\n    ubo.addUniform(\"metallicReflectanceMatrix\", 16);\n    ubo.addUniform(\"vReflectanceInfos\", 2);\n    ubo.addUniform(\"reflectanceMatrix\", 16);\n    ubo.addUniform(\"vSphericalL00\", 3);\n    ubo.addUniform(\"vSphericalL1_1\", 3);\n    ubo.addUniform(\"vSphericalL10\", 3);\n    ubo.addUniform(\"vSphericalL11\", 3);\n    ubo.addUniform(\"vSphericalL2_2\", 3);\n    ubo.addUniform(\"vSphericalL2_1\", 3);\n    ubo.addUniform(\"vSphericalL20\", 3);\n    ubo.addUniform(\"vSphericalL21\", 3);\n    ubo.addUniform(\"vSphericalL22\", 3);\n    ubo.addUniform(\"vSphericalX\", 3);\n    ubo.addUniform(\"vSphericalY\", 3);\n    ubo.addUniform(\"vSphericalZ\", 3);\n    ubo.addUniform(\"vSphericalXX_ZZ\", 3);\n    ubo.addUniform(\"vSphericalYY_ZZ\", 3);\n    ubo.addUniform(\"vSphericalZZ\", 3);\n    ubo.addUniform(\"vSphericalXY\", 3);\n    ubo.addUniform(\"vSphericalYZ\", 3);\n    ubo.addUniform(\"vSphericalZX\", 3);\n\n    _super.prototype.buildUniformLayout.call(this);\n  };\n  /**\n   * Binds the submesh data.\n   * @param world - The world matrix.\n   * @param mesh - The BJS mesh.\n   * @param subMesh - A submesh of the BJS mesh.\n   */\n\n\n  PBRBaseMaterial.prototype.bindForSubMesh = function (world, mesh, subMesh) {\n    var _a, _b, _c, _d;\n\n    var scene = this.getScene();\n    var defines = subMesh.materialDefines;\n\n    if (!defines) {\n      return;\n    }\n\n    var effect = subMesh.effect;\n\n    if (!effect) {\n      return;\n    }\n\n    this._activeEffect = effect; // Matrices Mesh.\n\n    mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\n    mesh.transferToEffect(world);\n    var engine = scene.getEngine(); // Binding unconditionally\n\n    this._uniformBuffer.bindToEffect(effect, \"Material\");\n\n    this.prePassConfiguration.bindForSubMesh(this._activeEffect, scene, mesh, world, this.isFrozen);\n    this._eventInfo.subMesh = subMesh;\n\n    this._callbackPluginEventHardBindForSubMesh(this._eventInfo); // Normal Matrix\n\n\n    if (defines.OBJECTSPACE_NORMALMAP) {\n      world.toNormalMatrix(this._normalMatrix);\n      this.bindOnlyNormalMatrix(this._normalMatrix);\n    }\n\n    var mustRebind = this._mustRebind(scene, effect, mesh.visibility); // Bones\n\n\n    MaterialHelper.BindBonesParameters(mesh, this._activeEffect, this.prePassConfiguration);\n    var reflectionTexture = null;\n    var ubo = this._uniformBuffer;\n\n    if (mustRebind) {\n      this.bindViewProjection(effect);\n      reflectionTexture = this._getReflectionTexture();\n\n      if (!ubo.useUbo || !this.isFrozen || !ubo.isSync) {\n        // Texture uniforms\n        if (scene.texturesEnabled) {\n          if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\n            ubo.updateFloat2(\"vAlbedoInfos\", this._albedoTexture.coordinatesIndex, this._albedoTexture.level);\n            MaterialHelper.BindTextureMatrix(this._albedoTexture, ubo, \"albedo\");\n          }\n\n          if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\n            ubo.updateFloat4(\"vAmbientInfos\", this._ambientTexture.coordinatesIndex, this._ambientTexture.level, this._ambientTextureStrength, this._ambientTextureImpactOnAnalyticalLights);\n            MaterialHelper.BindTextureMatrix(this._ambientTexture, ubo, \"ambient\");\n          }\n\n          if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\n            ubo.updateFloat2(\"vOpacityInfos\", this._opacityTexture.coordinatesIndex, this._opacityTexture.level);\n            MaterialHelper.BindTextureMatrix(this._opacityTexture, ubo, \"opacity\");\n          }\n\n          if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\n            ubo.updateMatrix(\"reflectionMatrix\", reflectionTexture.getReflectionTextureMatrix());\n            ubo.updateFloat2(\"vReflectionInfos\", reflectionTexture.level, 0);\n\n            if (reflectionTexture.boundingBoxSize) {\n              var cubeTexture = reflectionTexture;\n              ubo.updateVector3(\"vReflectionPosition\", cubeTexture.boundingBoxPosition);\n              ubo.updateVector3(\"vReflectionSize\", cubeTexture.boundingBoxSize);\n            }\n\n            if (this.realTimeFiltering) {\n              var width = reflectionTexture.getSize().width;\n              ubo.updateFloat2(\"vReflectionFilteringInfo\", width, Scalar.Log2(width));\n            }\n\n            if (!defines.USEIRRADIANCEMAP) {\n              var polynomials = reflectionTexture.sphericalPolynomial;\n\n              if (defines.USESPHERICALFROMREFLECTIONMAP && polynomials) {\n                if (defines.SPHERICAL_HARMONICS) {\n                  var preScaledHarmonics = polynomials.preScaledHarmonics;\n                  ubo.updateVector3(\"vSphericalL00\", preScaledHarmonics.l00);\n                  ubo.updateVector3(\"vSphericalL1_1\", preScaledHarmonics.l1_1);\n                  ubo.updateVector3(\"vSphericalL10\", preScaledHarmonics.l10);\n                  ubo.updateVector3(\"vSphericalL11\", preScaledHarmonics.l11);\n                  ubo.updateVector3(\"vSphericalL2_2\", preScaledHarmonics.l2_2);\n                  ubo.updateVector3(\"vSphericalL2_1\", preScaledHarmonics.l2_1);\n                  ubo.updateVector3(\"vSphericalL20\", preScaledHarmonics.l20);\n                  ubo.updateVector3(\"vSphericalL21\", preScaledHarmonics.l21);\n                  ubo.updateVector3(\"vSphericalL22\", preScaledHarmonics.l22);\n                } else {\n                  ubo.updateFloat3(\"vSphericalX\", polynomials.x.x, polynomials.x.y, polynomials.x.z);\n                  ubo.updateFloat3(\"vSphericalY\", polynomials.y.x, polynomials.y.y, polynomials.y.z);\n                  ubo.updateFloat3(\"vSphericalZ\", polynomials.z.x, polynomials.z.y, polynomials.z.z);\n                  ubo.updateFloat3(\"vSphericalXX_ZZ\", polynomials.xx.x - polynomials.zz.x, polynomials.xx.y - polynomials.zz.y, polynomials.xx.z - polynomials.zz.z);\n                  ubo.updateFloat3(\"vSphericalYY_ZZ\", polynomials.yy.x - polynomials.zz.x, polynomials.yy.y - polynomials.zz.y, polynomials.yy.z - polynomials.zz.z);\n                  ubo.updateFloat3(\"vSphericalZZ\", polynomials.zz.x, polynomials.zz.y, polynomials.zz.z);\n                  ubo.updateFloat3(\"vSphericalXY\", polynomials.xy.x, polynomials.xy.y, polynomials.xy.z);\n                  ubo.updateFloat3(\"vSphericalYZ\", polynomials.yz.x, polynomials.yz.y, polynomials.yz.z);\n                  ubo.updateFloat3(\"vSphericalZX\", polynomials.zx.x, polynomials.zx.y, polynomials.zx.z);\n                }\n              }\n            }\n\n            ubo.updateFloat3(\"vReflectionMicrosurfaceInfos\", reflectionTexture.getSize().width, reflectionTexture.lodGenerationScale, reflectionTexture.lodGenerationOffset);\n          }\n\n          if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\n            ubo.updateFloat2(\"vEmissiveInfos\", this._emissiveTexture.coordinatesIndex, this._emissiveTexture.level);\n            MaterialHelper.BindTextureMatrix(this._emissiveTexture, ubo, \"emissive\");\n          }\n\n          if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\n            ubo.updateFloat2(\"vLightmapInfos\", this._lightmapTexture.coordinatesIndex, this._lightmapTexture.level);\n            MaterialHelper.BindTextureMatrix(this._lightmapTexture, ubo, \"lightmap\");\n          }\n\n          if (MaterialFlags.SpecularTextureEnabled) {\n            if (this._metallicTexture) {\n              ubo.updateFloat3(\"vReflectivityInfos\", this._metallicTexture.coordinatesIndex, this._metallicTexture.level, this._ambientTextureStrength);\n              MaterialHelper.BindTextureMatrix(this._metallicTexture, ubo, \"reflectivity\");\n            } else if (this._reflectivityTexture) {\n              ubo.updateFloat3(\"vReflectivityInfos\", this._reflectivityTexture.coordinatesIndex, this._reflectivityTexture.level, 1.0);\n              MaterialHelper.BindTextureMatrix(this._reflectivityTexture, ubo, \"reflectivity\");\n            }\n\n            if (this._metallicReflectanceTexture) {\n              ubo.updateFloat2(\"vMetallicReflectanceInfos\", this._metallicReflectanceTexture.coordinatesIndex, this._metallicReflectanceTexture.level);\n              MaterialHelper.BindTextureMatrix(this._metallicReflectanceTexture, ubo, \"metallicReflectance\");\n            }\n\n            if (this._reflectanceTexture && defines.REFLECTANCE) {\n              ubo.updateFloat2(\"vReflectanceInfos\", this._reflectanceTexture.coordinatesIndex, this._reflectanceTexture.level);\n              MaterialHelper.BindTextureMatrix(this._reflectanceTexture, ubo, \"reflectance\");\n            }\n\n            if (this._microSurfaceTexture) {\n              ubo.updateFloat2(\"vMicroSurfaceSamplerInfos\", this._microSurfaceTexture.coordinatesIndex, this._microSurfaceTexture.level);\n              MaterialHelper.BindTextureMatrix(this._microSurfaceTexture, ubo, \"microSurfaceSampler\");\n            }\n          }\n\n          if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\n            ubo.updateFloat3(\"vBumpInfos\", this._bumpTexture.coordinatesIndex, this._bumpTexture.level, this._parallaxScaleBias);\n            MaterialHelper.BindTextureMatrix(this._bumpTexture, ubo, \"bump\");\n\n            if (scene._mirroredCameraPosition) {\n              ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? 1.0 : -1.0, this._invertNormalMapY ? 1.0 : -1.0);\n            } else {\n              ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? -1.0 : 1.0, this._invertNormalMapY ? -1.0 : 1.0);\n            }\n          }\n        } // Point size\n\n\n        if (this.pointsCloud) {\n          ubo.updateFloat(\"pointSize\", this.pointSize);\n        } // Colors\n\n\n        if (defines.METALLICWORKFLOW) {\n          TmpColors.Color3[0].r = this._metallic === undefined || this._metallic === null ? 1 : this._metallic;\n          TmpColors.Color3[0].g = this._roughness === undefined || this._roughness === null ? 1 : this._roughness;\n          ubo.updateColor4(\"vReflectivityColor\", TmpColors.Color3[0], 1);\n          var ior = (_b = (_a = this.subSurface) === null || _a === void 0 ? void 0 : _a._indexOfRefraction) !== null && _b !== void 0 ? _b : 1.5;\n          var outsideIOR = 1; // consider air as clear coat and other layers would remap in the shader.\n          // We are here deriving our default reflectance from a common value for none metallic surface.\n          // Based of the schlick fresnel approximation model\n          // for dielectrics.\n\n          var f0 = Math.pow((ior - outsideIOR) / (ior + outsideIOR), 2); // Tweak the default F0 and F90 based on our given setup\n\n          this._metallicReflectanceColor.scaleToRef(f0 * this._metallicF0Factor, TmpColors.Color3[0]);\n\n          var metallicF90 = this._metallicF0Factor;\n          ubo.updateColor4(\"vMetallicReflectanceFactors\", TmpColors.Color3[0], metallicF90);\n        } else {\n          ubo.updateColor4(\"vReflectivityColor\", this._reflectivityColor, this._microSurface);\n        }\n\n        ubo.updateColor3(\"vEmissiveColor\", MaterialFlags.EmissiveTextureEnabled ? this._emissiveColor : Color3.BlackReadOnly);\n        ubo.updateColor3(\"vReflectionColor\", this._reflectionColor);\n\n        if (!defines.SS_REFRACTION && ((_c = this.subSurface) === null || _c === void 0 ? void 0 : _c._linkRefractionWithTransparency)) {\n          ubo.updateColor4(\"vAlbedoColor\", this._albedoColor, 1);\n        } else {\n          ubo.updateColor4(\"vAlbedoColor\", this._albedoColor, this.alpha);\n        } // Misc\n\n\n        this._lightingInfos.x = this._directIntensity;\n        this._lightingInfos.y = this._emissiveIntensity;\n        this._lightingInfos.z = this._environmentIntensity * scene.environmentIntensity;\n        this._lightingInfos.w = this._specularIntensity;\n        ubo.updateVector4(\"vLightingIntensity\", this._lightingInfos); // Colors\n\n        scene.ambientColor.multiplyToRef(this._ambientColor, this._globalAmbientColor);\n        ubo.updateColor3(\"vAmbientColor\", this._globalAmbientColor);\n        ubo.updateFloat2(\"vDebugMode\", this._debugLimit, this._debugFactor);\n      } // Textures\n\n\n      if (scene.texturesEnabled) {\n        if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\n          ubo.setTexture(\"albedoSampler\", this._albedoTexture);\n        }\n\n        if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\n          ubo.setTexture(\"ambientSampler\", this._ambientTexture);\n        }\n\n        if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\n          ubo.setTexture(\"opacitySampler\", this._opacityTexture);\n        }\n\n        if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\n          if (defines.LODBASEDMICROSFURACE) {\n            ubo.setTexture(\"reflectionSampler\", reflectionTexture);\n          } else {\n            ubo.setTexture(\"reflectionSampler\", reflectionTexture._lodTextureMid || reflectionTexture);\n            ubo.setTexture(\"reflectionSamplerLow\", reflectionTexture._lodTextureLow || reflectionTexture);\n            ubo.setTexture(\"reflectionSamplerHigh\", reflectionTexture._lodTextureHigh || reflectionTexture);\n          }\n\n          if (defines.USEIRRADIANCEMAP) {\n            ubo.setTexture(\"irradianceSampler\", reflectionTexture.irradianceTexture);\n          }\n        }\n\n        if (defines.ENVIRONMENTBRDF) {\n          ubo.setTexture(\"environmentBrdfSampler\", this._environmentBRDFTexture);\n        }\n\n        if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\n          ubo.setTexture(\"emissiveSampler\", this._emissiveTexture);\n        }\n\n        if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\n          ubo.setTexture(\"lightmapSampler\", this._lightmapTexture);\n        }\n\n        if (MaterialFlags.SpecularTextureEnabled) {\n          if (this._metallicTexture) {\n            ubo.setTexture(\"reflectivitySampler\", this._metallicTexture);\n          } else if (this._reflectivityTexture) {\n            ubo.setTexture(\"reflectivitySampler\", this._reflectivityTexture);\n          }\n\n          if (this._metallicReflectanceTexture) {\n            ubo.setTexture(\"metallicReflectanceSampler\", this._metallicReflectanceTexture);\n          }\n\n          if (this._reflectanceTexture && defines.REFLECTANCE) {\n            ubo.setTexture(\"reflectanceSampler\", this._reflectanceTexture);\n          }\n\n          if (this._microSurfaceTexture) {\n            ubo.setTexture(\"microSurfaceSampler\", this._microSurfaceTexture);\n          }\n        }\n\n        if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\n          ubo.setTexture(\"bumpSampler\", this._bumpTexture);\n        }\n      } // OIT with depth peeling\n\n\n      if (this.getScene().useOrderIndependentTransparency && this.needAlphaBlendingForMesh(mesh)) {\n        this.getScene().depthPeelingRenderer.bind(effect);\n      }\n\n      this._eventInfo.subMesh = subMesh;\n\n      this._callbackPluginEventBindForSubMesh(this._eventInfo); // Clip plane\n\n\n      MaterialHelper.BindClipPlane(this._activeEffect, scene);\n      this.bindEyePosition(effect);\n    } else if (scene.getEngine()._features.needToAlwaysBindUniformBuffers) {\n      this._needToBindSceneUbo = true;\n    }\n\n    if (mustRebind || !this.isFrozen) {\n      // Lights\n      if (scene.lightsEnabled && !this._disableLighting) {\n        MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this._maxSimultaneousLights);\n      } // View\n\n\n      if (scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE || reflectionTexture || mesh.receiveShadows) {\n        this.bindView(effect);\n      } // Fog\n\n\n      MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect, true); // Morph targets\n\n      if (defines.NUM_MORPH_INFLUENCERS) {\n        MaterialHelper.BindMorphTargetParameters(mesh, this._activeEffect);\n      }\n\n      if (defines.BAKED_VERTEX_ANIMATION_TEXTURE) {\n        (_d = mesh.bakedVertexAnimationManager) === null || _d === void 0 ? void 0 : _d.bind(effect, defines.INSTANCES);\n      } // image processing\n\n\n      this._imageProcessingConfiguration.bind(this._activeEffect); // Log. depth\n\n\n      MaterialHelper.BindLogDepth(defines, this._activeEffect, scene);\n    }\n\n    this._afterBind(mesh, this._activeEffect);\n\n    ubo.update();\n  };\n  /**\n   * Returns the animatable textures.\n   * @returns - Array of animatable textures.\n   */\n\n\n  PBRBaseMaterial.prototype.getAnimatables = function () {\n    var results = _super.prototype.getAnimatables.call(this);\n\n    if (this._albedoTexture && this._albedoTexture.animations && this._albedoTexture.animations.length > 0) {\n      results.push(this._albedoTexture);\n    }\n\n    if (this._ambientTexture && this._ambientTexture.animations && this._ambientTexture.animations.length > 0) {\n      results.push(this._ambientTexture);\n    }\n\n    if (this._opacityTexture && this._opacityTexture.animations && this._opacityTexture.animations.length > 0) {\n      results.push(this._opacityTexture);\n    }\n\n    if (this._reflectionTexture && this._reflectionTexture.animations && this._reflectionTexture.animations.length > 0) {\n      results.push(this._reflectionTexture);\n    }\n\n    if (this._emissiveTexture && this._emissiveTexture.animations && this._emissiveTexture.animations.length > 0) {\n      results.push(this._emissiveTexture);\n    }\n\n    if (this._metallicTexture && this._metallicTexture.animations && this._metallicTexture.animations.length > 0) {\n      results.push(this._metallicTexture);\n    } else if (this._reflectivityTexture && this._reflectivityTexture.animations && this._reflectivityTexture.animations.length > 0) {\n      results.push(this._reflectivityTexture);\n    }\n\n    if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\n      results.push(this._bumpTexture);\n    }\n\n    if (this._lightmapTexture && this._lightmapTexture.animations && this._lightmapTexture.animations.length > 0) {\n      results.push(this._lightmapTexture);\n    }\n\n    return results;\n  };\n  /**\n   * Returns the texture used for reflections.\n   * @returns - Reflection texture if present.  Otherwise, returns the environment texture.\n   */\n\n\n  PBRBaseMaterial.prototype._getReflectionTexture = function () {\n    if (this._reflectionTexture) {\n      return this._reflectionTexture;\n    }\n\n    return this.getScene().environmentTexture;\n  };\n  /**\n   * Returns an array of the actively used textures.\n   * @returns - Array of BaseTextures\n   */\n\n\n  PBRBaseMaterial.prototype.getActiveTextures = function () {\n    var activeTextures = _super.prototype.getActiveTextures.call(this);\n\n    if (this._albedoTexture) {\n      activeTextures.push(this._albedoTexture);\n    }\n\n    if (this._ambientTexture) {\n      activeTextures.push(this._ambientTexture);\n    }\n\n    if (this._opacityTexture) {\n      activeTextures.push(this._opacityTexture);\n    }\n\n    if (this._reflectionTexture) {\n      activeTextures.push(this._reflectionTexture);\n    }\n\n    if (this._emissiveTexture) {\n      activeTextures.push(this._emissiveTexture);\n    }\n\n    if (this._reflectivityTexture) {\n      activeTextures.push(this._reflectivityTexture);\n    }\n\n    if (this._metallicTexture) {\n      activeTextures.push(this._metallicTexture);\n    }\n\n    if (this._metallicReflectanceTexture) {\n      activeTextures.push(this._metallicReflectanceTexture);\n    }\n\n    if (this._reflectanceTexture) {\n      activeTextures.push(this._reflectanceTexture);\n    }\n\n    if (this._microSurfaceTexture) {\n      activeTextures.push(this._microSurfaceTexture);\n    }\n\n    if (this._bumpTexture) {\n      activeTextures.push(this._bumpTexture);\n    }\n\n    if (this._lightmapTexture) {\n      activeTextures.push(this._lightmapTexture);\n    }\n\n    return activeTextures;\n  };\n  /**\n   * Checks to see if a texture is used in the material.\n   * @param texture - Base texture to use.\n   * @returns - Boolean specifying if a texture is used in the material.\n   */\n\n\n  PBRBaseMaterial.prototype.hasTexture = function (texture) {\n    if (_super.prototype.hasTexture.call(this, texture)) {\n      return true;\n    }\n\n    if (this._albedoTexture === texture) {\n      return true;\n    }\n\n    if (this._ambientTexture === texture) {\n      return true;\n    }\n\n    if (this._opacityTexture === texture) {\n      return true;\n    }\n\n    if (this._reflectionTexture === texture) {\n      return true;\n    }\n\n    if (this._reflectivityTexture === texture) {\n      return true;\n    }\n\n    if (this._metallicTexture === texture) {\n      return true;\n    }\n\n    if (this._metallicReflectanceTexture === texture) {\n      return true;\n    }\n\n    if (this._reflectanceTexture === texture) {\n      return true;\n    }\n\n    if (this._microSurfaceTexture === texture) {\n      return true;\n    }\n\n    if (this._bumpTexture === texture) {\n      return true;\n    }\n\n    if (this._lightmapTexture === texture) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Sets the required values to the prepass renderer.\n   */\n\n\n  PBRBaseMaterial.prototype.setPrePassRenderer = function () {\n    var _a;\n\n    if ((_a = this.subSurface) === null || _a === void 0 ? void 0 : _a.isScatteringEnabled) {\n      var subSurfaceConfiguration = this.getScene().enableSubSurfaceForPrePass();\n\n      if (subSurfaceConfiguration) {\n        subSurfaceConfiguration.enabled = true;\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Disposes the resources of the material.\n   * @param forceDisposeEffect - Forces the disposal of effects.\n   * @param forceDisposeTextures - Forces the disposal of all textures.\n   */\n\n\n  PBRBaseMaterial.prototype.dispose = function (forceDisposeEffect, forceDisposeTextures) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n\n    if (forceDisposeTextures) {\n      if (this._environmentBRDFTexture && this.getScene().environmentBRDFTexture !== this._environmentBRDFTexture) {\n        this._environmentBRDFTexture.dispose();\n      }\n\n      (_a = this._albedoTexture) === null || _a === void 0 ? void 0 : _a.dispose();\n      (_b = this._ambientTexture) === null || _b === void 0 ? void 0 : _b.dispose();\n      (_c = this._opacityTexture) === null || _c === void 0 ? void 0 : _c.dispose();\n      (_d = this._reflectionTexture) === null || _d === void 0 ? void 0 : _d.dispose();\n      (_e = this._emissiveTexture) === null || _e === void 0 ? void 0 : _e.dispose();\n      (_f = this._metallicTexture) === null || _f === void 0 ? void 0 : _f.dispose();\n      (_g = this._reflectivityTexture) === null || _g === void 0 ? void 0 : _g.dispose();\n      (_h = this._bumpTexture) === null || _h === void 0 ? void 0 : _h.dispose();\n      (_j = this._lightmapTexture) === null || _j === void 0 ? void 0 : _j.dispose();\n      (_k = this._metallicReflectanceTexture) === null || _k === void 0 ? void 0 : _k.dispose();\n      (_l = this._reflectanceTexture) === null || _l === void 0 ? void 0 : _l.dispose();\n      (_m = this._microSurfaceTexture) === null || _m === void 0 ? void 0 : _m.dispose();\n    }\n\n    this._renderTargets.dispose();\n\n    if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n      this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n    }\n\n    _super.prototype.dispose.call(this, forceDisposeEffect, forceDisposeTextures);\n  };\n  /**\n   * PBRMaterialTransparencyMode: No transparency mode, Alpha channel is not use.\n   */\n\n\n  PBRBaseMaterial.PBRMATERIAL_OPAQUE = Material.MATERIAL_OPAQUE;\n  /**\n   * PBRMaterialTransparencyMode: Alpha Test mode, pixel are discarded below a certain threshold defined by the alpha cutoff value.\n   */\n\n  PBRBaseMaterial.PBRMATERIAL_ALPHATEST = Material.MATERIAL_ALPHATEST;\n  /**\n   * PBRMaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\n   */\n\n  PBRBaseMaterial.PBRMATERIAL_ALPHABLEND = Material.MATERIAL_ALPHABLEND;\n  /**\n   * PBRMaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\n   * They are also discarded below the alpha cutoff threshold to improve performances.\n   */\n\n  PBRBaseMaterial.PBRMATERIAL_ALPHATESTANDBLEND = Material.MATERIAL_ALPHATESTANDBLEND;\n  /**\n   * Defines the default value of how much AO map is occluding the analytical lights\n   * (point spot...).\n   */\n\n  PBRBaseMaterial.DEFAULT_AO_ON_ANALYTICAL_LIGHTS = 0;\n  /**\n   * PBRMaterialLightFalloff Physical: light is falling off following the inverse squared distance law.\n   */\n\n  PBRBaseMaterial.LIGHTFALLOFF_PHYSICAL = 0;\n  /**\n   * PBRMaterialLightFalloff gltf: light is falling off as described in the gltf moving to PBR document\n   * to enhance interoperability with other engines.\n   */\n\n  PBRBaseMaterial.LIGHTFALLOFF_GLTF = 1;\n  /**\n   * PBRMaterialLightFalloff Standard: light is falling off like in the standard material\n   * to enhance interoperability with other materials.\n   */\n\n  PBRBaseMaterial.LIGHTFALLOFF_STANDARD = 2;\n\n  __decorate([serializeAsImageProcessingConfiguration()], PBRBaseMaterial.prototype, \"_imageProcessingConfiguration\", void 0);\n\n  __decorate([expandToProperty(\"_markAllSubMeshesAsMiscDirty\")], PBRBaseMaterial.prototype, \"debugMode\", void 0);\n\n  __decorate([serialize()], PBRBaseMaterial.prototype, \"useLogarithmicDepth\", null);\n\n  return PBRBaseMaterial;\n}(PushMaterial);\n\nexport { PBRBaseMaterial };","map":{"version":3,"mappings":"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","names":["serialize","serializeAsImageProcessingConfiguration","expandToProperty","Logger","SmartArray","GetEnvironmentBRDFTexture","Scene","Vector4","VertexBuffer","PBRBRDFConfiguration","PrePassConfiguration","Color3","TmpColors","Scalar","ImageProcessingConfiguration","Material","MaterialPluginEvent","MaterialDefines","PushMaterial","MaterialHelper","Texture","MaterialFlags","EffectFallbacks","PBRClearCoatConfiguration","PBRIridescenceConfiguration","PBRAnisotropicConfiguration","PBRSheenConfiguration","PBRSubSurfaceConfiguration","DetailMapConfiguration","onCreatedEffectParameters","effect","subMesh","__extends","externalProperties","_super","_this","rebuild","PBRMaterialDefines","reset","call","ALPHATESTVALUE","PBR","NORMALXYSCALE","name","scene","_directIntensity","_emissiveIntensity","_environmentIntensity","_specularIntensity","PBRBaseMaterial","DEFAULT_AO_ON_ANALYTICAL_LIGHTS","White","LIGHTFALLOFF_PHYSICAL","brdf","clearCoat","iridescence","anisotropy","sheen","subSurface","detailMap","_attachImageProcessingConfiguration","getRenderTargetTextures","_renderTargets","ReflectionTextureEnabled","_reflectionTexture","isRenderTarget","push","_eventInfo","renderTargets","_callbackPluginEventFillRenderTargetTextures","_environmentBRDFTexture","getScene","prePassConfiguration","Object","_realTimeFiltering","b","markAsDirty","_realTimeFilteringQuality","n","configuration","_imageProcessingConfiguration","_imageProcessingObserver","onUpdateParameters","remove","imageProcessingConfiguration","add","_markAllSubMeshesAsImageProcessingDirty","_cacheHasRenderTargetTextures","disableDepthWrite","_useLogarithmicDepth","value","getEngine","getCaps","fragmentDepthSupported","_transparencyMode","PBRMATERIAL_OPAQUE","PBRMATERIAL_ALPHATEST","_a","disableAlphaBlending","_disableAlphaBlending","alpha","_opacityTexture","_shouldUseAlphaFromAlbedoTexture","_forceAlphaTest","_hasAlphaChannel","_albedoTexture","hasAlpha","_useAlphaFromAlbedoTexture","mesh","useInstances","_uniformBufferLayoutBuilt","buildUniformLayout","isFrozen","_wasPreviouslyReady","materialDefines","_callbackPluginEventGeneric","GetDefineNames","defineNames","defines","_isReadyForSubMesh","engine","_areTexturesDirty","hasRenderTargetTextures","_callbackPluginEventHasRenderTargetTextures","texturesEnabled","DiffuseTextureEnabled","isReadyOrNotBlocking","_ambientTexture","AmbientTextureEnabled","OpacityTextureEnabled","reflectionTexture","_getReflectionTexture","irradianceTexture","_lightmapTexture","LightmapTextureEnabled","_emissiveTexture","EmissiveTextureEnabled","SpecularTextureEnabled","_metallicTexture","_reflectivityTexture","_metallicReflectanceTexture","_reflectanceTexture","_microSurfaceTexture","standardDerivatives","_bumpTexture","BumpTextureEnabled","_disableBumpMap","isReady","isReadyForSubMesh","_callbackPluginEventIsReadyForSubMesh","_areImageProcessingDirty","isVerticesDataPresent","NormalKind","createNormals","Warn","previousEffect","lightDisposed","_areLightsDisposed","_prepareEffect","onCompiled","onError","getRenderingMesh","hasThinInstances","_onEffectCreatedObservable","notifyObservers","allowShaderHotSwapping","markAsUnprocessed","resetCachedMaterial","setEffect","_materialContext","_renderId","getRenderId","_metallic","_roughness","useClipPlane","useThinInstances","_prepareDefines","isDirty","markAsProcessed","fallbacks","fallbackRank","USESPHERICALINVERTEX","addFallback","FOG","SPECULARAA","POINTSIZE","LOGARITHMICDEPTH","PARALLAX","PARALLAXOCCLUSION","ENVIRONMENTBRDF","TANGENT","BUMP","HandleFallbacksForShadows","_maxSimultaneousLights","SPECULARTERM","USESPHERICALFROMREFLECTIONMAP","USEIRRADIANCEMAP","LIGHTMAP","NORMAL","AMBIENT","EMISSIVE","VERTEXCOLOR","MORPHTARGETS","MULTIVIEW","attribs","PositionKind","TangentKind","i","ColorKind","INSTANCESCOLOR","ColorInstanceKind","PrepareAttributesForBones","PrepareAttributesForInstances","PrepareAttributesForMorphTargets","PrepareAttributesForBakedVertexAnimation","shaderName","uniforms","samplers","uniformBuffers","uniformBuffersNames","customCode","undefined","PrepareEffect","AddUniforms","AddSamplers","PrepareUniforms","PrepareSamplers","PrepareUniformsAndSamplersList","uniformsNames","maxSimultaneousLights","csnrOptions","customShaderNameResolve","join","toString","createEffect","attributes","indexParameters","maxSimultaneousMorphTargets","NUM_MORPH_INFLUENCERS","processFinalCode","processCodeAfterIncludes","multiTarget","PREPASS","PrepareDefinesForLights","_disableLighting","_needNormals","PrepareDefinesForMultiview","oit","needAlphaBlendingForMesh","useOrderIndependentTransparency","PrepareDefinesForPrePass","canRenderToMRT","PrepareDefinesForOIT","METALLICWORKFLOW","isMetallicWorkflow","_needUVs","textureLOD","LODBASEDMICROSFURACE","PrepareDefinesForMergedUV","GAMMAALBEDO","gammaSpace","ALBEDO","AMBIENTINGRAYSCALE","_useAmbientInGrayScale","OPACITYRGB","getAlphaFromRGB","OPACITY","REFLECTION","GAMMAREFLECTION","RGBDREFLECTION","isRGBD","REFLECTIONMAP_OPPOSITEZ","useRightHandedSystem","invertZ","LODINREFLECTIONALPHA","lodLevelInAlpha","LINEARSPECULARREFLECTION","linearSpecularLOD","realTimeFiltering","realTimeFilteringQuality","NUM_SAMPLES","_features","needTypeSuffixInShaderConstants","REALTIME_FILTERING","coordinatesMode","INVCUBIC_MODE","INVERTCUBICMAP","REFLECTIONMAP_3D","isCube","REFLECTIONMAP_CUBIC","REFLECTIONMAP_EXPLICIT","REFLECTIONMAP_PLANAR","REFLECTIONMAP_PROJECTION","REFLECTIONMAP_SKYBOX","REFLECTIONMAP_SPHERICAL","REFLECTIONMAP_EQUIRECTANGULAR","REFLECTIONMAP_EQUIRECTANGULAR_FIXED","REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED","EXPLICIT_MODE","PLANAR_MODE","PROJECTION_MODE","SKYBOX_MODE","SPHERICAL_MODE","EQUIRECTANGULAR_MODE","FIXED_EQUIRECTANGULAR_MODE","FIXED_EQUIRECTANGULAR_MIRRORED_MODE","CUBIC_MODE","USE_LOCAL_REFLECTIONMAP_CUBIC","boundingBoxSize","_forceIrradianceInFragment","maxVaryingVectors","USELIGHTMAPASSHADOWMAP","_useLightmapAsShadowmap","GAMMALIGHTMAP","RGBDLIGHTMAP","GAMMAEMISSIVE","ROUGHNESSSTOREINMETALMAPALPHA","_useRoughnessFromMetallicTextureAlpha","ROUGHNESSSTOREINMETALMAPGREEN","_useRoughnessFromMetallicTextureGreen","METALLNESSSTOREINMETALMAPBLUE","_useMetallnessFromMetallicTextureBlue","AOSTOREINMETALMAPRED","_useAmbientOcclusionFromMetallicTextureRed","REFLECTIVITY_GAMMA","MICROSURFACEFROMREFLECTIVITYMAP","_useMicroSurfaceFromReflectivityMapAlpha","MICROSURFACEAUTOMATIC","_useAutoMicroSurfaceFromReflectivityMap","REFLECTIVITY","identicalTextures","_texture","checkTransformsAreIdentical","METALLIC_REFLECTANCE_USE_ALPHA_ONLY","_useOnlyMetallicFromMetallicReflectanceTexture","METALLIC_REFLECTANCE_GAMMA","METALLIC_REFLECTANCE","REFLECTANCE_GAMMA","REFLECTANCE","MICROSURFACEMAP","_useParallax","_useParallaxOcclusion","OBJECTSPACE_NORMALMAP","_useObjectSpaceNormalMap","ENVIRONMENTBRDF_RGBD","ALPHAFROMALBEDO","SPECULAROVERALPHA","_useSpecularOverAlpha","_lightFalloff","LIGHTFALLOFF_STANDARD","USEPHYSICALLIGHTFALLOFF","USEGLTFLIGHTFALLOFF","LIGHTFALLOFF_GLTF","RADIANCEOVERALPHA","_useRadianceOverAlpha","backFaceCulling","_twoSidedLighting","TWOSIDEDLIGHTING","_enableSpecularAntiAliasing","_areMiscDirty","_alphaCutOff","concat","PREMULTIPLYALPHA","alphaMode","ALPHABLEND","ALPHAFRESNEL","_useAlphaFresnel","_useLinearAlphaFresnel","LINEARALPHAFRESNEL","prepareDefines","FORCENORMALFORWARD","_forceNormalForward","RADIANCEOCCLUSION","_useRadianceOcclusion","HORIZONOCCLUSION","_useHorizonOcclusion","PrepareDefinesForMisc","pointsCloud","fogEnabled","_shouldTurnAlphaTestOn","UNLIT","_unlit","wireframe","DEBUGMODE","_debugMode","_callbackPluginEventPrepareDefines","PrepareDefinesForFrameBoundValues","PrepareDefinesForAttributes","options","localOptions","clipPlane","onCompileObservable","ubo","_uniformBuffer","addUniform","world","_activeEffect","getMeshUniformBuffer","bindToEffect","transferToEffect","bindForSubMesh","_callbackPluginEventHardBindForSubMesh","toNormalMatrix","_normalMatrix","bindOnlyNormalMatrix","mustRebind","_mustRebind","visibility","BindBonesParameters","bindViewProjection","useUbo","isSync","updateFloat2","coordinatesIndex","level","BindTextureMatrix","updateFloat4","_ambientTextureStrength","_ambientTextureImpactOnAnalyticalLights","updateMatrix","getReflectionTextureMatrix","cubeTexture","updateVector3","boundingBoxPosition","width","getSize","Log2","polynomials","sphericalPolynomial","SPHERICAL_HARMONICS","preScaledHarmonics","l00","l1_1","l10","l11","l2_2","l2_1","l20","l21","l22","updateFloat3","x","y","z","xx","zz","yy","xy","yz","zx","lodGenerationScale","lodGenerationOffset","_parallaxScaleBias","_mirroredCameraPosition","_invertNormalMapX","_invertNormalMapY","updateFloat","pointSize","r","g","updateColor4","ior","_indexOfRefraction","_b","outsideIOR","f0","Math","pow","_metallicReflectanceColor","scaleToRef","_metallicF0Factor","metallicF90","_reflectivityColor","_microSurface","updateColor3","_emissiveColor","BlackReadOnly","_reflectionColor","SS_REFRACTION","_c","_linkRefractionWithTransparency","_albedoColor","_lightingInfos","environmentIntensity","w","updateVector4","ambientColor","multiplyToRef","_ambientColor","_globalAmbientColor","_debugLimit","_debugFactor","setTexture","_lodTextureMid","_lodTextureLow","_lodTextureHigh","depthPeelingRenderer","bind","_callbackPluginEventBindForSubMesh","BindClipPlane","bindEyePosition","needToAlwaysBindUniformBuffers","_needToBindSceneUbo","lightsEnabled","BindLights","applyFog","fogMode","FOGMODE_NONE","receiveShadows","bindView","BindFogParameters","BindMorphTargetParameters","BAKED_VERTEX_ANIMATION_TEXTURE","bakedVertexAnimationManager","_d","INSTANCES","BindLogDepth","_afterBind","update","results","getAnimatables","animations","length","environmentTexture","activeTextures","getActiveTextures","texture","hasTexture","isScatteringEnabled","subSurfaceConfiguration","enableSubSurfaceForPrePass","enabled","forceDisposeEffect","forceDisposeTextures","environmentBRDFTexture","dispose","_e","_f","_g","_h","_j","_k","_l","_m","MATERIAL_OPAQUE","MATERIAL_ALPHATEST","MATERIAL_ALPHABLEND","MATERIAL_ALPHATESTANDBLEND","__decorate"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/PBR/pbrBaseMaterial.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { serialize, serializeAsImageProcessingConfiguration, expandToProperty } from \"../../Misc/decorators\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { SmartArray } from \"../../Misc/smartArray\";\r\nimport { GetEnvironmentBRDFTexture } from \"../../Misc/brdfTextureTools\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Scene } from \"../../scene\";\r\nimport type { Matrix } from \"../../Maths/math.vector\";\r\nimport { Vector4 } from \"../../Maths/math.vector\";\r\nimport { VertexBuffer } from \"../../Buffers/buffer\";\r\nimport type { SubMesh } from \"../../Meshes/subMesh\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../../Meshes/mesh\";\r\nimport { PBRBRDFConfiguration } from \"./pbrBRDFConfiguration\";\r\nimport { PrePassConfiguration } from \"../prePassConfiguration\";\r\nimport { Color3, TmpColors } from \"../../Maths/math.color\";\r\nimport { Scalar } from \"../../Maths/math.scalar\";\r\n\r\nimport type { IImageProcessingConfigurationDefines } from \"../../Materials/imageProcessingConfiguration\";\r\nimport { ImageProcessingConfiguration } from \"../../Materials/imageProcessingConfiguration\";\r\nimport type { Effect, IEffectCreationOptions } from \"../../Materials/effect\";\r\nimport type { IMaterialCompilationOptions, ICustomShaderNameResolveOptions } from \"../../Materials/material\";\r\nimport { Material } from \"../../Materials/material\";\r\nimport { MaterialPluginEvent } from \"../materialPluginEvent\";\r\nimport { MaterialDefines } from \"../../Materials/materialDefines\";\r\nimport { PushMaterial } from \"../../Materials/pushMaterial\";\r\nimport { MaterialHelper } from \"../../Materials/materialHelper\";\r\n\r\nimport type { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport { Texture } from \"../../Materials/Textures/texture\";\r\nimport type { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture\";\r\nimport type { CubeTexture } from \"../../Materials/Textures/cubeTexture\";\r\n\r\nimport { MaterialFlags } from \"../materialFlags\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport type { IAnimatable } from \"../../Animations/animatable.interface\";\r\n\r\nimport \"../../Materials/Textures/baseTexture.polynomial\";\r\nimport \"../../Shaders/pbr.fragment\";\r\nimport \"../../Shaders/pbr.vertex\";\r\n\r\nimport { EffectFallbacks } from \"../effectFallbacks\";\r\nimport { PBRClearCoatConfiguration } from \"./pbrClearCoatConfiguration\";\r\nimport { PBRIridescenceConfiguration } from \"./pbrIridescenceConfiguration\";\r\nimport { PBRAnisotropicConfiguration } from \"./pbrAnisotropicConfiguration\";\r\nimport { PBRSheenConfiguration } from \"./pbrSheenConfiguration\";\r\nimport { PBRSubSurfaceConfiguration } from \"./pbrSubSurfaceConfiguration\";\r\nimport { DetailMapConfiguration } from \"../material.detailMapConfiguration\";\r\n\r\nconst onCreatedEffectParameters = { effect: null as unknown as Effect, subMesh: null as unknown as Nullable<SubMesh> };\r\n\r\n/**\r\n * Manages the defines for the PBR Material.\r\n * @hidden\r\n */\r\nexport class PBRMaterialDefines extends MaterialDefines implements IImageProcessingConfigurationDefines {\r\n    public PBR = true;\r\n\r\n    public NUM_SAMPLES = \"0\";\r\n    public REALTIME_FILTERING = false;\r\n\r\n    public MAINUV1 = false;\r\n    public MAINUV2 = false;\r\n    public MAINUV3 = false;\r\n    public MAINUV4 = false;\r\n    public MAINUV5 = false;\r\n    public MAINUV6 = false;\r\n    public UV1 = false;\r\n    public UV2 = false;\r\n    public UV3 = false;\r\n    public UV4 = false;\r\n    public UV5 = false;\r\n    public UV6 = false;\r\n\r\n    public ALBEDO = false;\r\n    public GAMMAALBEDO = false;\r\n    public ALBEDODIRECTUV = 0;\r\n    public VERTEXCOLOR = false;\r\n\r\n    public BAKED_VERTEX_ANIMATION_TEXTURE = false;\r\n\r\n    public AMBIENT = false;\r\n    public AMBIENTDIRECTUV = 0;\r\n    public AMBIENTINGRAYSCALE = false;\r\n\r\n    public OPACITY = false;\r\n    public VERTEXALPHA = false;\r\n    public OPACITYDIRECTUV = 0;\r\n    public OPACITYRGB = false;\r\n    public ALPHATEST = false;\r\n    public DEPTHPREPASS = false;\r\n    public ALPHABLEND = false;\r\n    public ALPHAFROMALBEDO = false;\r\n    public ALPHATESTVALUE = \"0.5\";\r\n    public SPECULAROVERALPHA = false;\r\n    public RADIANCEOVERALPHA = false;\r\n    public ALPHAFRESNEL = false;\r\n    public LINEARALPHAFRESNEL = false;\r\n    public PREMULTIPLYALPHA = false;\r\n\r\n    public EMISSIVE = false;\r\n    public EMISSIVEDIRECTUV = 0;\r\n    public GAMMAEMISSIVE = false;\r\n\r\n    public REFLECTIVITY = false;\r\n    public REFLECTIVITY_GAMMA = false;\r\n    public REFLECTIVITYDIRECTUV = 0;\r\n    public SPECULARTERM = false;\r\n\r\n    public MICROSURFACEFROMREFLECTIVITYMAP = false;\r\n    public MICROSURFACEAUTOMATIC = false;\r\n    public LODBASEDMICROSFURACE = false;\r\n    public MICROSURFACEMAP = false;\r\n    public MICROSURFACEMAPDIRECTUV = 0;\r\n\r\n    public METALLICWORKFLOW = false;\r\n    public ROUGHNESSSTOREINMETALMAPALPHA = false;\r\n    public ROUGHNESSSTOREINMETALMAPGREEN = false;\r\n    public METALLNESSSTOREINMETALMAPBLUE = false;\r\n    public AOSTOREINMETALMAPRED = false;\r\n    public METALLIC_REFLECTANCE = false;\r\n    public METALLIC_REFLECTANCE_GAMMA = false;\r\n    public METALLIC_REFLECTANCEDIRECTUV = 0;\r\n    public METALLIC_REFLECTANCE_USE_ALPHA_ONLY = false;\r\n    public REFLECTANCE = false;\r\n    public REFLECTANCE_GAMMA = false;\r\n    public REFLECTANCEDIRECTUV = 0;\r\n\r\n    public ENVIRONMENTBRDF = false;\r\n    public ENVIRONMENTBRDF_RGBD = false;\r\n\r\n    public NORMAL = false;\r\n    public TANGENT = false;\r\n    public BUMP = false;\r\n    public BUMPDIRECTUV = 0;\r\n    public OBJECTSPACE_NORMALMAP = false;\r\n    public PARALLAX = false;\r\n    public PARALLAXOCCLUSION = false;\r\n    public NORMALXYSCALE = true;\r\n\r\n    public LIGHTMAP = false;\r\n    public LIGHTMAPDIRECTUV = 0;\r\n    public USELIGHTMAPASSHADOWMAP = false;\r\n    public GAMMALIGHTMAP = false;\r\n    public RGBDLIGHTMAP = false;\r\n\r\n    public REFLECTION = false;\r\n    public REFLECTIONMAP_3D = false;\r\n    public REFLECTIONMAP_SPHERICAL = false;\r\n    public REFLECTIONMAP_PLANAR = false;\r\n    public REFLECTIONMAP_CUBIC = false;\r\n    public USE_LOCAL_REFLECTIONMAP_CUBIC = false;\r\n    public REFLECTIONMAP_PROJECTION = false;\r\n    public REFLECTIONMAP_SKYBOX = false;\r\n    public REFLECTIONMAP_EXPLICIT = false;\r\n    public REFLECTIONMAP_EQUIRECTANGULAR = false;\r\n    public REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\r\n    public REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\r\n    public INVERTCUBICMAP = false;\r\n    public USESPHERICALFROMREFLECTIONMAP = false;\r\n    public USEIRRADIANCEMAP = false;\r\n    public USESPHERICALINVERTEX = false;\r\n    public REFLECTIONMAP_OPPOSITEZ = false;\r\n    public LODINREFLECTIONALPHA = false;\r\n    public GAMMAREFLECTION = false;\r\n    public RGBDREFLECTION = false;\r\n    public LINEARSPECULARREFLECTION = false;\r\n    public RADIANCEOCCLUSION = false;\r\n    public HORIZONOCCLUSION = false;\r\n\r\n    public INSTANCES = false;\r\n    public THIN_INSTANCES = false;\r\n    public INSTANCESCOLOR = false;\r\n\r\n    public PREPASS = false;\r\n    public PREPASS_IRRADIANCE = false;\r\n    public PREPASS_IRRADIANCE_INDEX = -1;\r\n    public PREPASS_ALBEDO_SQRT = false;\r\n    public PREPASS_ALBEDO_SQRT_INDEX = -1;\r\n    public PREPASS_DEPTH = false;\r\n    public PREPASS_DEPTH_INDEX = -1;\r\n    public PREPASS_NORMAL = false;\r\n    public PREPASS_NORMAL_INDEX = -1;\r\n    public PREPASS_POSITION = false;\r\n    public PREPASS_POSITION_INDEX = -1;\r\n    public PREPASS_VELOCITY = false;\r\n    public PREPASS_VELOCITY_INDEX = -1;\r\n    public PREPASS_REFLECTIVITY = false;\r\n    public PREPASS_REFLECTIVITY_INDEX = -1;\r\n    public SCENE_MRT_COUNT = 0;\r\n\r\n    public NUM_BONE_INFLUENCERS = 0;\r\n    public BonesPerMesh = 0;\r\n    public BONETEXTURE = false;\r\n    public BONES_VELOCITY_ENABLED = false;\r\n\r\n    public NONUNIFORMSCALING = false;\r\n\r\n    public MORPHTARGETS = false;\r\n    public MORPHTARGETS_NORMAL = false;\r\n    public MORPHTARGETS_TANGENT = false;\r\n    public MORPHTARGETS_UV = false;\r\n    public NUM_MORPH_INFLUENCERS = 0;\r\n    public MORPHTARGETS_TEXTURE = false;\r\n\r\n    public IMAGEPROCESSING = false;\r\n    public VIGNETTE = false;\r\n    public VIGNETTEBLENDMODEMULTIPLY = false;\r\n    public VIGNETTEBLENDMODEOPAQUE = false;\r\n    public TONEMAPPING = false;\r\n    public TONEMAPPING_ACES = false;\r\n    public CONTRAST = false;\r\n    public COLORCURVES = false;\r\n    public COLORGRADING = false;\r\n    public COLORGRADING3D = false;\r\n    public SAMPLER3DGREENDEPTH = false;\r\n    public SAMPLER3DBGRMAP = false;\r\n    public IMAGEPROCESSINGPOSTPROCESS = false;\r\n    public SKIPFINALCOLORCLAMP = false;\r\n    public EXPOSURE = false;\r\n    public MULTIVIEW = false;\r\n    public ORDER_INDEPENDENT_TRANSPARENCY = false;\r\n    public ORDER_INDEPENDENT_TRANSPARENCY_16BITS = false;\r\n\r\n    public USEPHYSICALLIGHTFALLOFF = false;\r\n    public USEGLTFLIGHTFALLOFF = false;\r\n    public TWOSIDEDLIGHTING = false;\r\n    public SHADOWFLOAT = false;\r\n    public CLIPPLANE = false;\r\n    public CLIPPLANE2 = false;\r\n    public CLIPPLANE3 = false;\r\n    public CLIPPLANE4 = false;\r\n    public CLIPPLANE5 = false;\r\n    public CLIPPLANE6 = false;\r\n    public POINTSIZE = false;\r\n    public FOG = false;\r\n    public LOGARITHMICDEPTH = false;\r\n\r\n    public FORCENORMALFORWARD = false;\r\n\r\n    public SPECULARAA = false;\r\n\r\n    public UNLIT = false;\r\n\r\n    public DEBUGMODE = 0;\r\n\r\n    /**\r\n     * Initializes the PBR Material defines.\r\n     * @param externalProperties The external properties\r\n     */\r\n    constructor(externalProperties?: { [name: string]: { type: string; default: any } }) {\r\n        super(externalProperties);\r\n        this.rebuild();\r\n    }\r\n\r\n    /**\r\n     * Resets the PBR Material defines.\r\n     */\r\n    public reset(): void {\r\n        super.reset();\r\n        this.ALPHATESTVALUE = \"0.5\";\r\n        this.PBR = true;\r\n        this.NORMALXYSCALE = true;\r\n    }\r\n}\r\n\r\n/**\r\n * The Physically based material base class of BJS.\r\n *\r\n * This offers the main features of a standard PBR material.\r\n * For more information, please refer to the documentation :\r\n * https://doc.babylonjs.com/how_to/physically_based_rendering\r\n */\r\nexport abstract class PBRBaseMaterial extends PushMaterial {\r\n    /**\r\n     * PBRMaterialTransparencyMode: No transparency mode, Alpha channel is not use.\r\n     */\r\n    public static readonly PBRMATERIAL_OPAQUE = Material.MATERIAL_OPAQUE;\r\n\r\n    /**\r\n     * PBRMaterialTransparencyMode: Alpha Test mode, pixel are discarded below a certain threshold defined by the alpha cutoff value.\r\n     */\r\n    public static readonly PBRMATERIAL_ALPHATEST = Material.MATERIAL_ALPHATEST;\r\n\r\n    /**\r\n     * PBRMaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\r\n     */\r\n    public static readonly PBRMATERIAL_ALPHABLEND = Material.MATERIAL_ALPHABLEND;\r\n\r\n    /**\r\n     * PBRMaterialTransparencyMode: Pixels are blended (according to the alpha mode) with the already drawn pixels in the current frame buffer.\r\n     * They are also discarded below the alpha cutoff threshold to improve performances.\r\n     */\r\n    public static readonly PBRMATERIAL_ALPHATESTANDBLEND = Material.MATERIAL_ALPHATESTANDBLEND;\r\n\r\n    /**\r\n     * Defines the default value of how much AO map is occluding the analytical lights\r\n     * (point spot...).\r\n     */\r\n    public static DEFAULT_AO_ON_ANALYTICAL_LIGHTS = 0;\r\n\r\n    /**\r\n     * PBRMaterialLightFalloff Physical: light is falling off following the inverse squared distance law.\r\n     */\r\n    public static readonly LIGHTFALLOFF_PHYSICAL = 0;\r\n\r\n    /**\r\n     * PBRMaterialLightFalloff gltf: light is falling off as described in the gltf moving to PBR document\r\n     * to enhance interoperability with other engines.\r\n     */\r\n    public static readonly LIGHTFALLOFF_GLTF = 1;\r\n\r\n    /**\r\n     * PBRMaterialLightFalloff Standard: light is falling off like in the standard material\r\n     * to enhance interoperability with other materials.\r\n     */\r\n    public static readonly LIGHTFALLOFF_STANDARD = 2;\r\n\r\n    /**\r\n     * Intensity of the direct lights e.g. the four lights available in your scene.\r\n     * This impacts both the direct diffuse and specular highlights.\r\n     * @hidden\r\n     */\r\n    public _directIntensity: number = 1.0;\r\n\r\n    /**\r\n     * Intensity of the emissive part of the material.\r\n     * This helps controlling the emissive effect without modifying the emissive color.\r\n     * @hidden\r\n     */\r\n    public _emissiveIntensity: number = 1.0;\r\n\r\n    /**\r\n     * Intensity of the environment e.g. how much the environment will light the object\r\n     * either through harmonics for rough material or through the reflection for shiny ones.\r\n     * @hidden\r\n     */\r\n    public _environmentIntensity: number = 1.0;\r\n\r\n    /**\r\n     * This is a special control allowing the reduction of the specular highlights coming from the\r\n     * four lights of the scene. Those highlights may not be needed in full environment lighting.\r\n     * @hidden\r\n     */\r\n    public _specularIntensity: number = 1.0;\r\n\r\n    /**\r\n     * This stores the direct, emissive, environment, and specular light intensities into a Vector4.\r\n     */\r\n    private _lightingInfos: Vector4 = new Vector4(this._directIntensity, this._emissiveIntensity, this._environmentIntensity, this._specularIntensity);\r\n\r\n    /**\r\n     * Debug Control allowing disabling the bump map on this material.\r\n     * @hidden\r\n     */\r\n    public _disableBumpMap: boolean = false;\r\n\r\n    /**\r\n     * AKA Diffuse Texture in standard nomenclature.\r\n     * @hidden\r\n     */\r\n    public _albedoTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * AKA Occlusion Texture in other nomenclature.\r\n     * @hidden\r\n     */\r\n    public _ambientTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * AKA Occlusion Texture Intensity in other nomenclature.\r\n     * @hidden\r\n     */\r\n    public _ambientTextureStrength: number = 1.0;\r\n\r\n    /**\r\n     * Defines how much the AO map is occluding the analytical lights (point spot...).\r\n     * 1 means it completely occludes it\r\n     * 0 mean it has no impact\r\n     * @hidden\r\n     */\r\n    public _ambientTextureImpactOnAnalyticalLights: number = PBRBaseMaterial.DEFAULT_AO_ON_ANALYTICAL_LIGHTS;\r\n\r\n    /**\r\n     * Stores the alpha values in a texture.\r\n     * @hidden\r\n     */\r\n    public _opacityTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Stores the reflection values in a texture.\r\n     * @hidden\r\n     */\r\n    public _reflectionTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Stores the emissive values in a texture.\r\n     * @hidden\r\n     */\r\n    public _emissiveTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * AKA Specular texture in other nomenclature.\r\n     * @hidden\r\n     */\r\n    public _reflectivityTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Used to switch from specular/glossiness to metallic/roughness workflow.\r\n     * @hidden\r\n     */\r\n    public _metallicTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Specifies the metallic scalar of the metallic/roughness workflow.\r\n     * Can also be used to scale the metalness values of the metallic texture.\r\n     * @hidden\r\n     */\r\n    public _metallic: Nullable<number> = null;\r\n\r\n    /**\r\n     * Specifies the roughness scalar of the metallic/roughness workflow.\r\n     * Can also be used to scale the roughness values of the metallic texture.\r\n     * @hidden\r\n     */\r\n    public _roughness: Nullable<number> = null;\r\n\r\n    /**\r\n     * In metallic workflow, specifies an F0 factor to help configuring the material F0.\r\n     * By default the indexOfrefraction is used to compute F0;\r\n     *\r\n     * This is used as a factor against the default reflectance at normal incidence to tweak it.\r\n     *\r\n     * F0 = defaultF0 * metallicF0Factor * metallicReflectanceColor;\r\n     * F90 = metallicReflectanceColor;\r\n     * @hidden\r\n     */\r\n    public _metallicF0Factor = 1;\r\n\r\n    /**\r\n     * In metallic workflow, specifies an F90 color to help configuring the material F90.\r\n     * By default the F90 is always 1;\r\n     *\r\n     * Please note that this factor is also used as a factor against the default reflectance at normal incidence.\r\n     *\r\n     * F0 = defaultF0 * metallicF0Factor * metallicReflectanceColor\r\n     * F90 = metallicReflectanceColor;\r\n     * @hidden\r\n     */\r\n    public _metallicReflectanceColor = Color3.White();\r\n\r\n    /**\r\n     * Specifies that only the A channel from _metallicReflectanceTexture should be used.\r\n     * If false, both RGB and A channels will be used\r\n     * @hidden\r\n     */\r\n    public _useOnlyMetallicFromMetallicReflectanceTexture = false;\r\n\r\n    /**\r\n     * Defines to store metallicReflectanceColor in RGB and metallicF0Factor in A\r\n     * This is multiply against the scalar values defined in the material.\r\n     * @hidden\r\n     */\r\n    public _metallicReflectanceTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Defines to store reflectanceColor in RGB\r\n     * This is multiplied against the scalar values defined in the material.\r\n     * If both _reflectanceTexture and _metallicReflectanceTexture textures are provided and _useOnlyMetallicFromMetallicReflectanceTexture\r\n     * is false, _metallicReflectanceTexture takes precedence and _reflectanceTexture is not used\r\n     * @hidden\r\n     */\r\n    public _reflectanceTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Used to enable roughness/glossiness fetch from a separate channel depending on the current mode.\r\n     * Gray Scale represents roughness in metallic mode and glossiness in specular mode.\r\n     * @hidden\r\n     */\r\n    public _microSurfaceTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Stores surface normal data used to displace a mesh in a texture.\r\n     * @hidden\r\n     */\r\n    public _bumpTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Stores the pre-calculated light information of a mesh in a texture.\r\n     * @hidden\r\n     */\r\n    public _lightmapTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * The color of a material in ambient lighting.\r\n     * @hidden\r\n     */\r\n    public _ambientColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * AKA Diffuse Color in other nomenclature.\r\n     * @hidden\r\n     */\r\n    public _albedoColor = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * AKA Specular Color in other nomenclature.\r\n     * @hidden\r\n     */\r\n    public _reflectivityColor = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * The color applied when light is reflected from a material.\r\n     * @hidden\r\n     */\r\n    public _reflectionColor = new Color3(1, 1, 1);\r\n\r\n    /**\r\n     * The color applied when light is emitted from a material.\r\n     * @hidden\r\n     */\r\n    public _emissiveColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * AKA Glossiness in other nomenclature.\r\n     * @hidden\r\n     */\r\n    public _microSurface = 0.9;\r\n\r\n    /**\r\n     * Specifies that the material will use the light map as a show map.\r\n     * @hidden\r\n     */\r\n    public _useLightmapAsShadowmap = false;\r\n\r\n    /**\r\n     * This parameters will enable/disable Horizon occlusion to prevent normal maps to look shiny when the normal\r\n     * makes the reflect vector face the model (under horizon).\r\n     * @hidden\r\n     */\r\n    public _useHorizonOcclusion = true;\r\n\r\n    /**\r\n     * This parameters will enable/disable radiance occlusion by preventing the radiance to lit\r\n     * too much the area relying on ambient texture to define their ambient occlusion.\r\n     * @hidden\r\n     */\r\n    public _useRadianceOcclusion = true;\r\n\r\n    /**\r\n     * Specifies that the alpha is coming form the albedo channel alpha channel for alpha blending.\r\n     * @hidden\r\n     */\r\n    public _useAlphaFromAlbedoTexture = false;\r\n\r\n    /**\r\n     * Specifies that the material will keeps the specular highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good example of that. When sun reflects on it you can not see what is behind.\r\n     * @hidden\r\n     */\r\n    public _useSpecularOverAlpha = true;\r\n\r\n    /**\r\n     * Specifies if the reflectivity texture contains the glossiness information in its alpha channel.\r\n     * @hidden\r\n     */\r\n    public _useMicroSurfaceFromReflectivityMapAlpha = false;\r\n\r\n    /**\r\n     * Specifies if the metallic texture contains the roughness information in its alpha channel.\r\n     * @hidden\r\n     */\r\n    public _useRoughnessFromMetallicTextureAlpha = true;\r\n\r\n    /**\r\n     * Specifies if the metallic texture contains the roughness information in its green channel.\r\n     * @hidden\r\n     */\r\n    public _useRoughnessFromMetallicTextureGreen = false;\r\n\r\n    /**\r\n     * Specifies if the metallic texture contains the metallness information in its blue channel.\r\n     * @hidden\r\n     */\r\n    public _useMetallnessFromMetallicTextureBlue = false;\r\n\r\n    /**\r\n     * Specifies if the metallic texture contains the ambient occlusion information in its red channel.\r\n     * @hidden\r\n     */\r\n    public _useAmbientOcclusionFromMetallicTextureRed = false;\r\n\r\n    /**\r\n     * Specifies if the ambient texture contains the ambient occlusion information in its red channel only.\r\n     * @hidden\r\n     */\r\n    public _useAmbientInGrayScale = false;\r\n\r\n    /**\r\n     * In case the reflectivity map does not contain the microsurface information in its alpha channel,\r\n     * The material will try to infer what glossiness each pixel should be.\r\n     * @hidden\r\n     */\r\n    public _useAutoMicroSurfaceFromReflectivityMap = false;\r\n\r\n    /**\r\n     * Defines the  falloff type used in this material.\r\n     * It by default is Physical.\r\n     * @hidden\r\n     */\r\n    public _lightFalloff = PBRBaseMaterial.LIGHTFALLOFF_PHYSICAL;\r\n\r\n    /**\r\n     * Specifies that the material will keeps the reflection highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good example of that. When the street lights reflects on it you can not see what is behind.\r\n     * @hidden\r\n     */\r\n    public _useRadianceOverAlpha = true;\r\n\r\n    /**\r\n     * Allows using an object space normal map (instead of tangent space).\r\n     * @hidden\r\n     */\r\n    public _useObjectSpaceNormalMap = false;\r\n\r\n    /**\r\n     * Allows using the bump map in parallax mode.\r\n     * @hidden\r\n     */\r\n    public _useParallax = false;\r\n\r\n    /**\r\n     * Allows using the bump map in parallax occlusion mode.\r\n     * @hidden\r\n     */\r\n    public _useParallaxOcclusion = false;\r\n\r\n    /**\r\n     * Controls the scale bias of the parallax mode.\r\n     * @hidden\r\n     */\r\n    public _parallaxScaleBias = 0.05;\r\n\r\n    /**\r\n     * If sets to true, disables all the lights affecting the material.\r\n     * @hidden\r\n     */\r\n    public _disableLighting = false;\r\n\r\n    /**\r\n     * Number of Simultaneous lights allowed on the material.\r\n     * @hidden\r\n     */\r\n    public _maxSimultaneousLights = 4;\r\n\r\n    /**\r\n     * If sets to true, x component of normal map value will be inverted (x = 1.0 - x).\r\n     * @hidden\r\n     */\r\n    public _invertNormalMapX = false;\r\n\r\n    /**\r\n     * If sets to true, y component of normal map value will be inverted (y = 1.0 - y).\r\n     * @hidden\r\n     */\r\n    public _invertNormalMapY = false;\r\n\r\n    /**\r\n     * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\r\n     * @hidden\r\n     */\r\n    public _twoSidedLighting = false;\r\n\r\n    /**\r\n     * Defines the alpha limits in alpha test mode.\r\n     * @hidden\r\n     */\r\n    public _alphaCutOff = 0.4;\r\n\r\n    /**\r\n     * Enforces alpha test in opaque or blend mode in order to improve the performances of some situations.\r\n     * @hidden\r\n     */\r\n    public _forceAlphaTest = false;\r\n\r\n    /**\r\n     * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\r\n     * And/Or occlude the blended part. (alpha is converted to gamma to compute the fresnel)\r\n     * @hidden\r\n     */\r\n    public _useAlphaFresnel = false;\r\n\r\n    /**\r\n     * A fresnel is applied to the alpha of the model to ensure grazing angles edges are not alpha tested.\r\n     * And/Or occlude the blended part. (alpha stays linear to compute the fresnel)\r\n     * @hidden\r\n     */\r\n    public _useLinearAlphaFresnel = false;\r\n\r\n    /**\r\n     * Specifies the environment BRDF texture used to compute the scale and offset roughness values\r\n     * from cos theta and roughness:\r\n     * http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\r\n     * @hidden\r\n     */\r\n    public _environmentBRDFTexture: Nullable<BaseTexture> = null;\r\n\r\n    /**\r\n     * Force the shader to compute irradiance in the fragment shader in order to take bump in account.\r\n     * @hidden\r\n     */\r\n    public _forceIrradianceInFragment = false;\r\n\r\n    private _realTimeFiltering: boolean = false;\r\n    /**\r\n     * Enables realtime filtering on the texture.\r\n     */\r\n    public get realTimeFiltering() {\r\n        return this._realTimeFiltering;\r\n    }\r\n    public set realTimeFiltering(b: boolean) {\r\n        this._realTimeFiltering = b;\r\n        this.markAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    private _realTimeFilteringQuality: number = Constants.TEXTURE_FILTERING_QUALITY_LOW;\r\n    /**\r\n     * Quality switch for realtime filtering\r\n     */\r\n    public get realTimeFilteringQuality(): number {\r\n        return this._realTimeFilteringQuality;\r\n    }\r\n    public set realTimeFilteringQuality(n: number) {\r\n        this._realTimeFilteringQuality = n;\r\n        this.markAsDirty(Constants.MATERIAL_TextureDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Can this material render to several textures at once\r\n     */\r\n    public get canRenderToMRT() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Force normal to face away from face.\r\n     * @hidden\r\n     */\r\n    public _forceNormalForward = false;\r\n\r\n    /**\r\n     * Enables specular anti aliasing in the PBR shader.\r\n     * It will both interacts on the Geometry for analytical and IBL lighting.\r\n     * It also prefilter the roughness map based on the bump values.\r\n     * @hidden\r\n     */\r\n    public _enableSpecularAntiAliasing = false;\r\n\r\n    /**\r\n     * Default configuration related to image processing available in the PBR Material.\r\n     */\r\n    @serializeAsImageProcessingConfiguration()\r\n    protected _imageProcessingConfiguration: ImageProcessingConfiguration;\r\n\r\n    /**\r\n     * Keep track of the image processing observer to allow dispose and replace.\r\n     */\r\n    private _imageProcessingObserver: Nullable<Observer<ImageProcessingConfiguration>> = null;\r\n\r\n    /**\r\n     * Attaches a new image processing configuration to the PBR Material.\r\n     * @param configuration\r\n     */\r\n    protected _attachImageProcessingConfiguration(configuration: Nullable<ImageProcessingConfiguration>): void {\r\n        if (configuration === this._imageProcessingConfiguration) {\r\n            return;\r\n        }\r\n\r\n        // Detaches observer.\r\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n        }\r\n\r\n        // Pick the scene configuration if needed.\r\n        if (!configuration) {\r\n            this._imageProcessingConfiguration = this.getScene().imageProcessingConfiguration;\r\n        } else {\r\n            this._imageProcessingConfiguration = configuration;\r\n        }\r\n\r\n        // Attaches observer.\r\n        if (this._imageProcessingConfiguration) {\r\n            this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(() => {\r\n                this._markAllSubMeshesAsImageProcessingDirty();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stores the available render targets.\r\n     */\r\n    private _renderTargets = new SmartArray<RenderTargetTexture>(16);\r\n\r\n    /**\r\n     * Sets the global ambient color for the material used in lighting calculations.\r\n     */\r\n    private _globalAmbientColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * Enables the use of logarithmic depth buffers, which is good for wide depth buffers.\r\n     */\r\n    private _useLogarithmicDepth: boolean = false;\r\n\r\n    /**\r\n     * If set to true, no lighting calculations will be applied.\r\n     */\r\n    private _unlit = false;\r\n\r\n    private _debugMode = 0;\r\n    /**\r\n     * @hidden\r\n     * This is reserved for the inspector.\r\n     * Defines the material debug mode.\r\n     * It helps seeing only some components of the material while troubleshooting.\r\n     */\r\n    @expandToProperty(\"_markAllSubMeshesAsMiscDirty\")\r\n    public debugMode = 0;\r\n\r\n    /**\r\n     * @hidden\r\n     * This is reserved for the inspector.\r\n     * Specify from where on screen the debug mode should start.\r\n     * The value goes from -1 (full screen) to 1 (not visible)\r\n     * It helps with side by side comparison against the final render\r\n     * This defaults to -1\r\n     */\r\n    private _debugLimit = -1;\r\n\r\n    /**\r\n     * @hidden\r\n     * This is reserved for the inspector.\r\n     * As the default viewing range might not be enough (if the ambient is really small for instance)\r\n     * You can use the factor to better multiply the final value.\r\n     */\r\n    private _debugFactor = 1;\r\n\r\n    /**\r\n     * Defines the clear coat layer parameters for the material.\r\n     */\r\n    public readonly clearCoat: PBRClearCoatConfiguration;\r\n\r\n    /**\r\n     * Defines the iridescence layer parameters for the material.\r\n     */\r\n    public readonly iridescence: PBRIridescenceConfiguration;\r\n\r\n    /**\r\n     * Defines the anisotropic parameters for the material.\r\n     */\r\n    public readonly anisotropy: PBRAnisotropicConfiguration;\r\n\r\n    /**\r\n     * Defines the BRDF parameters for the material.\r\n     */\r\n    public readonly brdf: PBRBRDFConfiguration;\r\n\r\n    /**\r\n     * Defines the Sheen parameters for the material.\r\n     */\r\n    public readonly sheen: PBRSheenConfiguration;\r\n\r\n    /**\r\n     * Defines the SubSurface parameters for the material.\r\n     */\r\n    public readonly subSurface: PBRSubSurfaceConfiguration;\r\n\r\n    /**\r\n     * Defines additional PrePass parameters for the material.\r\n     */\r\n    public readonly prePassConfiguration: PrePassConfiguration;\r\n\r\n    /**\r\n     * Defines the detail map parameters for the material.\r\n     */\r\n    public readonly detailMap: DetailMapConfiguration;\r\n\r\n    protected _cacheHasRenderTargetTextures = false;\r\n\r\n    /**\r\n     * Instantiates a new PBRMaterial instance.\r\n     *\r\n     * @param name The material name\r\n     * @param scene The scene the material will be use in.\r\n     */\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n\r\n        this.brdf = new PBRBRDFConfiguration(this);\r\n        this.clearCoat = new PBRClearCoatConfiguration(this);\r\n        this.iridescence = new PBRIridescenceConfiguration(this);\r\n        this.anisotropy = new PBRAnisotropicConfiguration(this);\r\n        this.sheen = new PBRSheenConfiguration(this);\r\n        this.subSurface = new PBRSubSurfaceConfiguration(this);\r\n        this.detailMap = new DetailMapConfiguration(this);\r\n\r\n        // Setup the default processing configuration to the scene.\r\n        this._attachImageProcessingConfiguration(null);\r\n\r\n        this.getRenderTargetTextures = (): SmartArray<RenderTargetTexture> => {\r\n            this._renderTargets.reset();\r\n\r\n            if (MaterialFlags.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\r\n                this._renderTargets.push(<RenderTargetTexture>this._reflectionTexture);\r\n            }\r\n\r\n            this._eventInfo.renderTargets = this._renderTargets;\r\n            this._callbackPluginEventFillRenderTargetTextures(this._eventInfo);\r\n\r\n            return this._renderTargets;\r\n        };\r\n\r\n        this._environmentBRDFTexture = GetEnvironmentBRDFTexture(this.getScene());\r\n        this.prePassConfiguration = new PrePassConfiguration();\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that current material needs to register RTT\r\n     */\r\n    public get hasRenderTargetTextures(): boolean {\r\n        if (MaterialFlags.ReflectionTextureEnabled && this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\r\n            return true;\r\n        }\r\n\r\n        return this._cacheHasRenderTargetTextures;\r\n    }\r\n\r\n    /**\r\n     * Can this material render to prepass\r\n     */\r\n    public get isPrePassCapable(): boolean {\r\n        return !this.disableDepthWrite;\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the material class.\r\n     */\r\n    public getClassName(): string {\r\n        return \"PBRBaseMaterial\";\r\n    }\r\n\r\n    /**\r\n     * Enabled the use of logarithmic depth buffers, which is good for wide depth buffers.\r\n     */\r\n    @serialize()\r\n    public get useLogarithmicDepth(): boolean {\r\n        return this._useLogarithmicDepth;\r\n    }\r\n\r\n    /**\r\n     * Enabled the use of logarithmic depth buffers, which is good for wide depth buffers.\r\n     */\r\n    public set useLogarithmicDepth(value: boolean) {\r\n        this._useLogarithmicDepth = value && this.getScene().getEngine().getCaps().fragmentDepthSupported;\r\n    }\r\n\r\n    /**\r\n     * Returns true if alpha blending should be disabled.\r\n     */\r\n    protected get _disableAlphaBlending(): boolean {\r\n        return (\r\n            this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_OPAQUE ||\r\n            this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_ALPHATEST ||\r\n            this.subSurface?.disableAlphaBlending\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not this material should be rendered in alpha blend mode.\r\n     */\r\n    public needAlphaBlending(): boolean {\r\n        if (this._disableAlphaBlending) {\r\n            return false;\r\n        }\r\n\r\n        return this.alpha < 1.0 || this._opacityTexture != null || this._shouldUseAlphaFromAlbedoTexture();\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not this material should be rendered in alpha test mode.\r\n     */\r\n    public needAlphaTesting(): boolean {\r\n        if (this._forceAlphaTest) {\r\n            return true;\r\n        }\r\n\r\n        if (this.subSurface?.disableAlphaBlending) {\r\n            return false;\r\n        }\r\n\r\n        return this._hasAlphaChannel() && (this._transparencyMode == null || this._transparencyMode === PBRBaseMaterial.PBRMATERIAL_ALPHATEST);\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not the alpha value of the albedo texture should be used for alpha blending.\r\n     */\r\n    protected _shouldUseAlphaFromAlbedoTexture(): boolean {\r\n        return this._albedoTexture != null && this._albedoTexture.hasAlpha && this._useAlphaFromAlbedoTexture && this._transparencyMode !== PBRBaseMaterial.PBRMATERIAL_OPAQUE;\r\n    }\r\n\r\n    /**\r\n     * Specifies whether or not there is a usable alpha channel for transparency.\r\n     */\r\n    protected _hasAlphaChannel(): boolean {\r\n        return (this._albedoTexture != null && this._albedoTexture.hasAlpha) || this._opacityTexture != null;\r\n    }\r\n\r\n    /**\r\n     * Gets the texture used for the alpha test.\r\n     */\r\n    public getAlphaTestTexture(): Nullable<BaseTexture> {\r\n        return this._albedoTexture;\r\n    }\r\n\r\n    /**\r\n     * Specifies that the submesh is ready to be used.\r\n     * @param mesh - BJS mesh.\r\n     * @param subMesh - A submesh of the BJS mesh.  Used to check if it is ready.\r\n     * @param useInstances - Specifies that instances should be used.\r\n     * @returns - boolean indicating that the submesh is ready or not.\r\n     */\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        if (!this._uniformBufferLayoutBuilt) {\r\n            this.buildUniformLayout();\r\n        }\r\n\r\n        if (subMesh.effect && this.isFrozen) {\r\n            if (subMesh.effect._wasPreviouslyReady) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        if (!subMesh.materialDefines) {\r\n            this._callbackPluginEventGeneric(MaterialPluginEvent.GetDefineNames, this._eventInfo);\r\n            subMesh.materialDefines = new PBRMaterialDefines(this._eventInfo.defineNames);\r\n        }\r\n\r\n        const defines = <PBRMaterialDefines>subMesh.materialDefines;\r\n        if (this._isReadyForSubMesh(subMesh)) {\r\n            return true;\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        const engine = scene.getEngine();\r\n\r\n        if (defines._areTexturesDirty) {\r\n            this._eventInfo.hasRenderTargetTextures = false;\r\n            this._callbackPluginEventHasRenderTargetTextures(this._eventInfo);\r\n            this._cacheHasRenderTargetTextures = this._eventInfo.hasRenderTargetTextures;\r\n            if (scene.texturesEnabled) {\r\n                if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                    if (!this._albedoTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\r\n                    if (!this._ambientTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\r\n                    if (!this._opacityTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                const reflectionTexture = this._getReflectionTexture();\r\n                if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n                    if (!reflectionTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                    if (reflectionTexture.irradianceTexture && !reflectionTexture.irradianceTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\r\n                    if (!this._lightmapTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\r\n                    if (!this._emissiveTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (MaterialFlags.SpecularTextureEnabled) {\r\n                    if (this._metallicTexture) {\r\n                        if (!this._metallicTexture.isReadyOrNotBlocking()) {\r\n                            return false;\r\n                        }\r\n                    } else if (this._reflectivityTexture) {\r\n                        if (!this._reflectivityTexture.isReadyOrNotBlocking()) {\r\n                            return false;\r\n                        }\r\n                    }\r\n\r\n                    if (this._metallicReflectanceTexture) {\r\n                        if (!this._metallicReflectanceTexture.isReadyOrNotBlocking()) {\r\n                            return false;\r\n                        }\r\n                    }\r\n\r\n                    if (this._reflectanceTexture) {\r\n                        if (!this._reflectanceTexture.isReadyOrNotBlocking()) {\r\n                            return false;\r\n                        }\r\n                    }\r\n\r\n                    if (this._microSurfaceTexture) {\r\n                        if (!this._microSurfaceTexture.isReadyOrNotBlocking()) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (engine.getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\r\n                    // Bump texture cannot be not blocking.\r\n                    if (!this._bumpTexture.isReady()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n                    // This is blocking.\r\n                    if (!this._environmentBRDFTexture.isReady()) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this._eventInfo.isReadyForSubMesh = true;\r\n        this._eventInfo.defines = defines;\r\n        this._callbackPluginEventIsReadyForSubMesh(this._eventInfo);\r\n\r\n        if (!this._eventInfo.isReadyForSubMesh) {\r\n            return false;\r\n        }\r\n\r\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\r\n            if (!this._imageProcessingConfiguration.isReady()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (!engine.getCaps().standardDerivatives && !mesh.isVerticesDataPresent(VertexBuffer.NormalKind)) {\r\n            mesh.createNormals(true);\r\n            Logger.Warn(\"PBRMaterial: Normals have been created for the mesh: \" + mesh.name);\r\n        }\r\n\r\n        const previousEffect = subMesh.effect;\r\n        const lightDisposed = defines._areLightsDisposed;\r\n        let effect = this._prepareEffect(mesh, defines, this.onCompiled, this.onError, useInstances, null, subMesh.getRenderingMesh().hasThinInstances);\r\n\r\n        if (effect) {\r\n            if (this._onEffectCreatedObservable) {\r\n                onCreatedEffectParameters.effect = effect;\r\n                onCreatedEffectParameters.subMesh = subMesh;\r\n                this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\r\n            }\r\n\r\n            // Use previous effect while new one is compiling\r\n            if (this.allowShaderHotSwapping && previousEffect && !effect.isReady()) {\r\n                effect = previousEffect;\r\n                defines.markAsUnprocessed();\r\n\r\n                if (lightDisposed) {\r\n                    // re register in case it takes more than one frame.\r\n                    defines._areLightsDisposed = true;\r\n                    return false;\r\n                }\r\n            } else {\r\n                scene.resetCachedMaterial();\r\n                subMesh.setEffect(effect, defines, this._materialContext);\r\n            }\r\n        }\r\n\r\n        if (!subMesh.effect || !subMesh.effect.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        defines._renderId = scene.getRenderId();\r\n        subMesh.effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material uses metallic roughness workflow.\r\n     * @returns boolean specifying if the material uses metallic roughness workflow.\r\n     */\r\n    public isMetallicWorkflow(): boolean {\r\n        if (this._metallic != null || this._roughness != null || this._metallicTexture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _prepareEffect(\r\n        mesh: AbstractMesh,\r\n        defines: PBRMaterialDefines,\r\n        onCompiled: Nullable<(effect: Effect) => void> = null,\r\n        onError: Nullable<(effect: Effect, errors: string) => void> = null,\r\n        useInstances: Nullable<boolean> = null,\r\n        useClipPlane: Nullable<boolean> = null,\r\n        useThinInstances: boolean\r\n    ): Nullable<Effect> {\r\n        this._prepareDefines(mesh, defines, useInstances, useClipPlane, useThinInstances);\r\n\r\n        if (!defines.isDirty) {\r\n            return null;\r\n        }\r\n\r\n        defines.markAsProcessed();\r\n\r\n        const scene = this.getScene();\r\n        const engine = scene.getEngine();\r\n\r\n        // Fallbacks\r\n        const fallbacks = new EffectFallbacks();\r\n        let fallbackRank = 0;\r\n        if (defines.USESPHERICALINVERTEX) {\r\n            fallbacks.addFallback(fallbackRank++, \"USESPHERICALINVERTEX\");\r\n        }\r\n\r\n        if (defines.FOG) {\r\n            fallbacks.addFallback(fallbackRank, \"FOG\");\r\n        }\r\n        if (defines.SPECULARAA) {\r\n            fallbacks.addFallback(fallbackRank, \"SPECULARAA\");\r\n        }\r\n        if (defines.POINTSIZE) {\r\n            fallbacks.addFallback(fallbackRank, \"POINTSIZE\");\r\n        }\r\n        if (defines.LOGARITHMICDEPTH) {\r\n            fallbacks.addFallback(fallbackRank, \"LOGARITHMICDEPTH\");\r\n        }\r\n        if (defines.PARALLAX) {\r\n            fallbacks.addFallback(fallbackRank, \"PARALLAX\");\r\n        }\r\n        if (defines.PARALLAXOCCLUSION) {\r\n            fallbacks.addFallback(fallbackRank++, \"PARALLAXOCCLUSION\");\r\n        }\r\n\r\n        if (defines.ENVIRONMENTBRDF) {\r\n            fallbacks.addFallback(fallbackRank++, \"ENVIRONMENTBRDF\");\r\n        }\r\n\r\n        if (defines.TANGENT) {\r\n            fallbacks.addFallback(fallbackRank++, \"TANGENT\");\r\n        }\r\n\r\n        if (defines.BUMP) {\r\n            fallbacks.addFallback(fallbackRank++, \"BUMP\");\r\n        }\r\n\r\n        fallbackRank = MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this._maxSimultaneousLights, fallbackRank++);\r\n\r\n        if (defines.SPECULARTERM) {\r\n            fallbacks.addFallback(fallbackRank++, \"SPECULARTERM\");\r\n        }\r\n\r\n        if (defines.USESPHERICALFROMREFLECTIONMAP) {\r\n            fallbacks.addFallback(fallbackRank++, \"USESPHERICALFROMREFLECTIONMAP\");\r\n        }\r\n\r\n        if (defines.USEIRRADIANCEMAP) {\r\n            fallbacks.addFallback(fallbackRank++, \"USEIRRADIANCEMAP\");\r\n        }\r\n\r\n        if (defines.LIGHTMAP) {\r\n            fallbacks.addFallback(fallbackRank++, \"LIGHTMAP\");\r\n        }\r\n\r\n        if (defines.NORMAL) {\r\n            fallbacks.addFallback(fallbackRank++, \"NORMAL\");\r\n        }\r\n\r\n        if (defines.AMBIENT) {\r\n            fallbacks.addFallback(fallbackRank++, \"AMBIENT\");\r\n        }\r\n\r\n        if (defines.EMISSIVE) {\r\n            fallbacks.addFallback(fallbackRank++, \"EMISSIVE\");\r\n        }\r\n\r\n        if (defines.VERTEXCOLOR) {\r\n            fallbacks.addFallback(fallbackRank++, \"VERTEXCOLOR\");\r\n        }\r\n\r\n        if (defines.MORPHTARGETS) {\r\n            fallbacks.addFallback(fallbackRank++, \"MORPHTARGETS\");\r\n        }\r\n\r\n        if (defines.MULTIVIEW) {\r\n            fallbacks.addFallback(0, \"MULTIVIEW\");\r\n        }\r\n\r\n        //Attributes\r\n        const attribs = [VertexBuffer.PositionKind];\r\n\r\n        if (defines.NORMAL) {\r\n            attribs.push(VertexBuffer.NormalKind);\r\n        }\r\n\r\n        if (defines.TANGENT) {\r\n            attribs.push(VertexBuffer.TangentKind);\r\n        }\r\n\r\n        for (let i = 1; i <= Constants.MAX_SUPPORTED_UV_SETS; ++i) {\r\n            if (defines[\"UV\" + i]) {\r\n                attribs.push(`uv${i === 1 ? \"\" : i}`);\r\n            }\r\n        }\r\n\r\n        if (defines.VERTEXCOLOR) {\r\n            attribs.push(VertexBuffer.ColorKind);\r\n        }\r\n\r\n        if (defines.INSTANCESCOLOR) {\r\n            attribs.push(VertexBuffer.ColorInstanceKind);\r\n        }\r\n\r\n        MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\r\n        MaterialHelper.PrepareAttributesForInstances(attribs, defines);\r\n        MaterialHelper.PrepareAttributesForMorphTargets(attribs, mesh, defines);\r\n        MaterialHelper.PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\r\n\r\n        let shaderName = \"pbr\";\r\n\r\n        const uniforms = [\r\n            \"world\",\r\n            \"view\",\r\n            \"viewProjection\",\r\n            \"vEyePosition\",\r\n            \"vLightsType\",\r\n            \"vAmbientColor\",\r\n            \"vAlbedoColor\",\r\n            \"vReflectivityColor\",\r\n            \"vMetallicReflectanceFactors\",\r\n            \"vEmissiveColor\",\r\n            \"visibility\",\r\n            \"vReflectionColor\",\r\n            \"vFogInfos\",\r\n            \"vFogColor\",\r\n            \"pointSize\",\r\n            \"vAlbedoInfos\",\r\n            \"vAmbientInfos\",\r\n            \"vOpacityInfos\",\r\n            \"vReflectionInfos\",\r\n            \"vReflectionPosition\",\r\n            \"vReflectionSize\",\r\n            \"vEmissiveInfos\",\r\n            \"vReflectivityInfos\",\r\n            \"vReflectionFilteringInfo\",\r\n            \"vMetallicReflectanceInfos\",\r\n            \"vReflectanceInfos\",\r\n            \"vMicroSurfaceSamplerInfos\",\r\n            \"vBumpInfos\",\r\n            \"vLightmapInfos\",\r\n            \"mBones\",\r\n            \"vClipPlane\",\r\n            \"vClipPlane2\",\r\n            \"vClipPlane3\",\r\n            \"vClipPlane4\",\r\n            \"vClipPlane5\",\r\n            \"vClipPlane6\",\r\n            \"albedoMatrix\",\r\n            \"ambientMatrix\",\r\n            \"opacityMatrix\",\r\n            \"reflectionMatrix\",\r\n            \"emissiveMatrix\",\r\n            \"reflectivityMatrix\",\r\n            \"normalMatrix\",\r\n            \"microSurfaceSamplerMatrix\",\r\n            \"bumpMatrix\",\r\n            \"lightmapMatrix\",\r\n            \"metallicReflectanceMatrix\",\r\n            \"reflectanceMatrix\",\r\n            \"vLightingIntensity\",\r\n            \"logarithmicDepthConstant\",\r\n            \"vSphericalX\",\r\n            \"vSphericalY\",\r\n            \"vSphericalZ\",\r\n            \"vSphericalXX_ZZ\",\r\n            \"vSphericalYY_ZZ\",\r\n            \"vSphericalZZ\",\r\n            \"vSphericalXY\",\r\n            \"vSphericalYZ\",\r\n            \"vSphericalZX\",\r\n            \"vSphericalL00\",\r\n            \"vSphericalL1_1\",\r\n            \"vSphericalL10\",\r\n            \"vSphericalL11\",\r\n            \"vSphericalL2_2\",\r\n            \"vSphericalL2_1\",\r\n            \"vSphericalL20\",\r\n            \"vSphericalL21\",\r\n            \"vSphericalL22\",\r\n            \"vReflectionMicrosurfaceInfos\",\r\n            \"vTangentSpaceParams\",\r\n            \"boneTextureWidth\",\r\n            \"vDebugMode\",\r\n            \"morphTargetTextureInfo\",\r\n            \"morphTargetTextureIndices\",\r\n        ];\r\n\r\n        const samplers = [\r\n            \"albedoSampler\",\r\n            \"reflectivitySampler\",\r\n            \"ambientSampler\",\r\n            \"emissiveSampler\",\r\n            \"bumpSampler\",\r\n            \"lightmapSampler\",\r\n            \"opacitySampler\",\r\n            \"reflectionSampler\",\r\n            \"reflectionSamplerLow\",\r\n            \"reflectionSamplerHigh\",\r\n            \"irradianceSampler\",\r\n            \"microSurfaceSampler\",\r\n            \"environmentBrdfSampler\",\r\n            \"boneSampler\",\r\n            \"metallicReflectanceSampler\",\r\n            \"reflectanceSampler\",\r\n            \"morphTargets\",\r\n            \"oitDepthSampler\",\r\n            \"oitFrontColorSampler\",\r\n        ];\r\n\r\n        const uniformBuffers = [\"Material\", \"Scene\", \"Mesh\"];\r\n\r\n        this._eventInfo.fallbacks = fallbacks;\r\n        this._eventInfo.fallbackRank = fallbackRank;\r\n        this._eventInfo.defines = defines;\r\n        this._eventInfo.uniforms = uniforms;\r\n        this._eventInfo.samplers = samplers;\r\n        this._eventInfo.uniformBuffersNames = uniformBuffers;\r\n        this._eventInfo.customCode = undefined;\r\n        this._callbackPluginEventGeneric(MaterialPluginEvent.PrepareEffect, this._eventInfo);\r\n\r\n        PrePassConfiguration.AddUniforms(uniforms);\r\n        PrePassConfiguration.AddSamplers(samplers);\r\n\r\n        if (ImageProcessingConfiguration) {\r\n            ImageProcessingConfiguration.PrepareUniforms(uniforms, defines);\r\n            ImageProcessingConfiguration.PrepareSamplers(samplers, defines);\r\n        }\r\n\r\n        MaterialHelper.PrepareUniformsAndSamplersList(<IEffectCreationOptions>{\r\n            uniformsNames: uniforms,\r\n            uniformBuffersNames: uniformBuffers,\r\n            samplers: samplers,\r\n            defines: defines,\r\n            maxSimultaneousLights: this._maxSimultaneousLights,\r\n        });\r\n\r\n        const csnrOptions: ICustomShaderNameResolveOptions = {};\r\n\r\n        if (this.customShaderNameResolve) {\r\n            shaderName = this.customShaderNameResolve(shaderName, uniforms, uniformBuffers, samplers, defines, attribs, csnrOptions);\r\n        }\r\n\r\n        const join = defines.toString();\r\n        return engine.createEffect(\r\n            shaderName,\r\n            <IEffectCreationOptions>{\r\n                attributes: attribs,\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: uniformBuffers,\r\n                samplers: samplers,\r\n                defines: join,\r\n                fallbacks: fallbacks,\r\n                onCompiled: onCompiled,\r\n                onError: onError,\r\n                indexParameters: { maxSimultaneousLights: this._maxSimultaneousLights, maxSimultaneousMorphTargets: defines.NUM_MORPH_INFLUENCERS },\r\n                processFinalCode: csnrOptions.processFinalCode,\r\n                processCodeAfterIncludes: this._eventInfo.customCode,\r\n                multiTarget: defines.PREPASS,\r\n            },\r\n            engine\r\n        );\r\n    }\r\n\r\n    private _prepareDefines(\r\n        mesh: AbstractMesh,\r\n        defines: PBRMaterialDefines,\r\n        useInstances: Nullable<boolean> = null,\r\n        useClipPlane: Nullable<boolean> = null,\r\n        useThinInstances: boolean = false\r\n    ): void {\r\n        const scene = this.getScene();\r\n        const engine = scene.getEngine();\r\n\r\n        // Lights\r\n        MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, true, this._maxSimultaneousLights, this._disableLighting);\r\n        defines._needNormals = true;\r\n\r\n        // Multiview\r\n        MaterialHelper.PrepareDefinesForMultiview(scene, defines);\r\n\r\n        // PrePass\r\n        const oit = this.needAlphaBlendingForMesh(mesh) && this.getScene().useOrderIndependentTransparency;\r\n        MaterialHelper.PrepareDefinesForPrePass(scene, defines, this.canRenderToMRT && !oit);\r\n\r\n        // Order independant transparency\r\n        MaterialHelper.PrepareDefinesForOIT(scene, defines, oit);\r\n\r\n        // Textures\r\n        defines.METALLICWORKFLOW = this.isMetallicWorkflow();\r\n        if (defines._areTexturesDirty) {\r\n            defines._needUVs = false;\r\n            if (scene.texturesEnabled) {\r\n                if (scene.getEngine().getCaps().textureLOD) {\r\n                    defines.LODBASEDMICROSFURACE = true;\r\n                }\r\n\r\n                if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._albedoTexture, defines, \"ALBEDO\");\r\n                    defines.GAMMAALBEDO = this._albedoTexture.gammaSpace;\r\n                } else {\r\n                    defines.ALBEDO = false;\r\n                }\r\n\r\n                if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._ambientTexture, defines, \"AMBIENT\");\r\n                    defines.AMBIENTINGRAYSCALE = this._useAmbientInGrayScale;\r\n                } else {\r\n                    defines.AMBIENT = false;\r\n                }\r\n\r\n                if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._opacityTexture, defines, \"OPACITY\");\r\n                    defines.OPACITYRGB = this._opacityTexture.getAlphaFromRGB;\r\n                } else {\r\n                    defines.OPACITY = false;\r\n                }\r\n\r\n                const reflectionTexture = this._getReflectionTexture();\r\n                if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n                    defines.REFLECTION = true;\r\n                    defines.GAMMAREFLECTION = reflectionTexture.gammaSpace;\r\n                    defines.RGBDREFLECTION = reflectionTexture.isRGBD;\r\n                    defines.REFLECTIONMAP_OPPOSITEZ = this.getScene().useRightHandedSystem ? !reflectionTexture.invertZ : reflectionTexture.invertZ;\r\n                    defines.LODINREFLECTIONALPHA = reflectionTexture.lodLevelInAlpha;\r\n                    defines.LINEARSPECULARREFLECTION = reflectionTexture.linearSpecularLOD;\r\n\r\n                    if (this.realTimeFiltering && this.realTimeFilteringQuality > 0) {\r\n                        defines.NUM_SAMPLES = \"\" + this.realTimeFilteringQuality;\r\n                        if (engine._features.needTypeSuffixInShaderConstants) {\r\n                            defines.NUM_SAMPLES = defines.NUM_SAMPLES + \"u\";\r\n                        }\r\n\r\n                        defines.REALTIME_FILTERING = true;\r\n                    } else {\r\n                        defines.REALTIME_FILTERING = false;\r\n                    }\r\n\r\n                    if (reflectionTexture.coordinatesMode === Texture.INVCUBIC_MODE) {\r\n                        defines.INVERTCUBICMAP = true;\r\n                    }\r\n\r\n                    defines.REFLECTIONMAP_3D = reflectionTexture.isCube;\r\n\r\n                    defines.REFLECTIONMAP_CUBIC = false;\r\n                    defines.REFLECTIONMAP_EXPLICIT = false;\r\n                    defines.REFLECTIONMAP_PLANAR = false;\r\n                    defines.REFLECTIONMAP_PROJECTION = false;\r\n                    defines.REFLECTIONMAP_SKYBOX = false;\r\n                    defines.REFLECTIONMAP_SPHERICAL = false;\r\n                    defines.REFLECTIONMAP_EQUIRECTANGULAR = false;\r\n                    defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\r\n                    defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\r\n\r\n                    switch (reflectionTexture.coordinatesMode) {\r\n                        case Texture.EXPLICIT_MODE:\r\n                            defines.REFLECTIONMAP_EXPLICIT = true;\r\n                            break;\r\n                        case Texture.PLANAR_MODE:\r\n                            defines.REFLECTIONMAP_PLANAR = true;\r\n                            break;\r\n                        case Texture.PROJECTION_MODE:\r\n                            defines.REFLECTIONMAP_PROJECTION = true;\r\n                            break;\r\n                        case Texture.SKYBOX_MODE:\r\n                            defines.REFLECTIONMAP_SKYBOX = true;\r\n                            break;\r\n                        case Texture.SPHERICAL_MODE:\r\n                            defines.REFLECTIONMAP_SPHERICAL = true;\r\n                            break;\r\n                        case Texture.EQUIRECTANGULAR_MODE:\r\n                            defines.REFLECTIONMAP_EQUIRECTANGULAR = true;\r\n                            break;\r\n                        case Texture.FIXED_EQUIRECTANGULAR_MODE:\r\n                            defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = true;\r\n                            break;\r\n                        case Texture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE:\r\n                            defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = true;\r\n                            break;\r\n                        case Texture.CUBIC_MODE:\r\n                        case Texture.INVCUBIC_MODE:\r\n                        default:\r\n                            defines.REFLECTIONMAP_CUBIC = true;\r\n                            defines.USE_LOCAL_REFLECTIONMAP_CUBIC = (<any>reflectionTexture).boundingBoxSize ? true : false;\r\n                            break;\r\n                    }\r\n\r\n                    if (reflectionTexture.coordinatesMode !== Texture.SKYBOX_MODE) {\r\n                        if (reflectionTexture.irradianceTexture) {\r\n                            defines.USEIRRADIANCEMAP = true;\r\n                            defines.USESPHERICALFROMREFLECTIONMAP = false;\r\n                        }\r\n                        // Assume using spherical polynomial if the reflection texture is a cube map\r\n                        else if (reflectionTexture.isCube) {\r\n                            defines.USESPHERICALFROMREFLECTIONMAP = true;\r\n                            defines.USEIRRADIANCEMAP = false;\r\n                            if (this._forceIrradianceInFragment || this.realTimeFiltering || scene.getEngine().getCaps().maxVaryingVectors <= 8) {\r\n                                defines.USESPHERICALINVERTEX = false;\r\n                            } else {\r\n                                defines.USESPHERICALINVERTEX = true;\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    defines.REFLECTION = false;\r\n                    defines.REFLECTIONMAP_3D = false;\r\n                    defines.REFLECTIONMAP_SPHERICAL = false;\r\n                    defines.REFLECTIONMAP_PLANAR = false;\r\n                    defines.REFLECTIONMAP_CUBIC = false;\r\n                    defines.USE_LOCAL_REFLECTIONMAP_CUBIC = false;\r\n                    defines.REFLECTIONMAP_PROJECTION = false;\r\n                    defines.REFLECTIONMAP_SKYBOX = false;\r\n                    defines.REFLECTIONMAP_EXPLICIT = false;\r\n                    defines.REFLECTIONMAP_EQUIRECTANGULAR = false;\r\n                    defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\r\n                    defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\r\n                    defines.INVERTCUBICMAP = false;\r\n                    defines.USESPHERICALFROMREFLECTIONMAP = false;\r\n                    defines.USEIRRADIANCEMAP = false;\r\n                    defines.USESPHERICALINVERTEX = false;\r\n                    defines.REFLECTIONMAP_OPPOSITEZ = false;\r\n                    defines.LODINREFLECTIONALPHA = false;\r\n                    defines.GAMMAREFLECTION = false;\r\n                    defines.RGBDREFLECTION = false;\r\n                    defines.LINEARSPECULARREFLECTION = false;\r\n                }\r\n\r\n                if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._lightmapTexture, defines, \"LIGHTMAP\");\r\n                    defines.USELIGHTMAPASSHADOWMAP = this._useLightmapAsShadowmap;\r\n                    defines.GAMMALIGHTMAP = this._lightmapTexture.gammaSpace;\r\n                    defines.RGBDLIGHTMAP = this._lightmapTexture.isRGBD;\r\n                } else {\r\n                    defines.LIGHTMAP = false;\r\n                }\r\n\r\n                if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._emissiveTexture, defines, \"EMISSIVE\");\r\n                    defines.GAMMAEMISSIVE = this._emissiveTexture.gammaSpace;\r\n                } else {\r\n                    defines.EMISSIVE = false;\r\n                }\r\n\r\n                if (MaterialFlags.SpecularTextureEnabled) {\r\n                    if (this._metallicTexture) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._metallicTexture, defines, \"REFLECTIVITY\");\r\n                        defines.ROUGHNESSSTOREINMETALMAPALPHA = this._useRoughnessFromMetallicTextureAlpha;\r\n                        defines.ROUGHNESSSTOREINMETALMAPGREEN = !this._useRoughnessFromMetallicTextureAlpha && this._useRoughnessFromMetallicTextureGreen;\r\n                        defines.METALLNESSSTOREINMETALMAPBLUE = this._useMetallnessFromMetallicTextureBlue;\r\n                        defines.AOSTOREINMETALMAPRED = this._useAmbientOcclusionFromMetallicTextureRed;\r\n                        defines.REFLECTIVITY_GAMMA = false;\r\n                    } else if (this._reflectivityTexture) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._reflectivityTexture, defines, \"REFLECTIVITY\");\r\n                        defines.MICROSURFACEFROMREFLECTIVITYMAP = this._useMicroSurfaceFromReflectivityMapAlpha;\r\n                        defines.MICROSURFACEAUTOMATIC = this._useAutoMicroSurfaceFromReflectivityMap;\r\n                        defines.REFLECTIVITY_GAMMA = this._reflectivityTexture.gammaSpace;\r\n                    } else {\r\n                        defines.REFLECTIVITY = false;\r\n                    }\r\n\r\n                    if (this._metallicReflectanceTexture || this._reflectanceTexture) {\r\n                        const identicalTextures =\r\n                            this._metallicReflectanceTexture !== null &&\r\n                            this._metallicReflectanceTexture._texture === this._reflectanceTexture?._texture &&\r\n                            this._metallicReflectanceTexture.checkTransformsAreIdentical(this._reflectanceTexture);\r\n\r\n                        defines.METALLIC_REFLECTANCE_USE_ALPHA_ONLY = this._useOnlyMetallicFromMetallicReflectanceTexture && !identicalTextures;\r\n                        if (this._metallicReflectanceTexture) {\r\n                            MaterialHelper.PrepareDefinesForMergedUV(this._metallicReflectanceTexture, defines, \"METALLIC_REFLECTANCE\");\r\n                            defines.METALLIC_REFLECTANCE_GAMMA = this._metallicReflectanceTexture.gammaSpace;\r\n                        } else {\r\n                            defines.METALLIC_REFLECTANCE = false;\r\n                        }\r\n                        if (\r\n                            this._reflectanceTexture &&\r\n                            !identicalTextures &&\r\n                            (!this._metallicReflectanceTexture || (this._metallicReflectanceTexture && this._useOnlyMetallicFromMetallicReflectanceTexture))\r\n                        ) {\r\n                            MaterialHelper.PrepareDefinesForMergedUV(this._reflectanceTexture, defines, \"REFLECTANCE\");\r\n                            defines.REFLECTANCE_GAMMA = this._reflectanceTexture.gammaSpace;\r\n                        } else {\r\n                            defines.REFLECTANCE = false;\r\n                        }\r\n                    } else {\r\n                        defines.METALLIC_REFLECTANCE = false;\r\n                        defines.REFLECTANCE = false;\r\n                    }\r\n\r\n                    if (this._microSurfaceTexture) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._microSurfaceTexture, defines, \"MICROSURFACEMAP\");\r\n                    } else {\r\n                        defines.MICROSURFACEMAP = false;\r\n                    }\r\n                } else {\r\n                    defines.REFLECTIVITY = false;\r\n                    defines.MICROSURFACEMAP = false;\r\n                }\r\n\r\n                if (scene.getEngine().getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._bumpTexture, defines, \"BUMP\");\r\n\r\n                    if (this._useParallax && this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                        defines.PARALLAX = true;\r\n                        defines.PARALLAXOCCLUSION = !!this._useParallaxOcclusion;\r\n                    } else {\r\n                        defines.PARALLAX = false;\r\n                    }\r\n\r\n                    defines.OBJECTSPACE_NORMALMAP = this._useObjectSpaceNormalMap;\r\n                } else {\r\n                    defines.BUMP = false;\r\n                }\r\n\r\n                if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n                    defines.ENVIRONMENTBRDF = true;\r\n                    defines.ENVIRONMENTBRDF_RGBD = this._environmentBRDFTexture.isRGBD;\r\n                } else {\r\n                    defines.ENVIRONMENTBRDF = false;\r\n                    defines.ENVIRONMENTBRDF_RGBD = false;\r\n                }\r\n\r\n                if (this._shouldUseAlphaFromAlbedoTexture()) {\r\n                    defines.ALPHAFROMALBEDO = true;\r\n                } else {\r\n                    defines.ALPHAFROMALBEDO = false;\r\n                }\r\n            }\r\n\r\n            defines.SPECULAROVERALPHA = this._useSpecularOverAlpha;\r\n\r\n            if (this._lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_STANDARD) {\r\n                defines.USEPHYSICALLIGHTFALLOFF = false;\r\n                defines.USEGLTFLIGHTFALLOFF = false;\r\n            } else if (this._lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_GLTF) {\r\n                defines.USEPHYSICALLIGHTFALLOFF = false;\r\n                defines.USEGLTFLIGHTFALLOFF = true;\r\n            } else {\r\n                defines.USEPHYSICALLIGHTFALLOFF = true;\r\n                defines.USEGLTFLIGHTFALLOFF = false;\r\n            }\r\n\r\n            defines.RADIANCEOVERALPHA = this._useRadianceOverAlpha;\r\n\r\n            if (!this.backFaceCulling && this._twoSidedLighting) {\r\n                defines.TWOSIDEDLIGHTING = true;\r\n            } else {\r\n                defines.TWOSIDEDLIGHTING = false;\r\n            }\r\n\r\n            defines.SPECULARAA = scene.getEngine().getCaps().standardDerivatives && this._enableSpecularAntiAliasing;\r\n        }\r\n\r\n        if (defines._areTexturesDirty || defines._areMiscDirty) {\r\n            defines.ALPHATESTVALUE = `${this._alphaCutOff}${this._alphaCutOff % 1 === 0 ? \".\" : \"\"}`;\r\n            defines.PREMULTIPLYALPHA = this.alphaMode === Constants.ALPHA_PREMULTIPLIED || this.alphaMode === Constants.ALPHA_PREMULTIPLIED_PORTERDUFF;\r\n            defines.ALPHABLEND = this.needAlphaBlendingForMesh(mesh);\r\n            defines.ALPHAFRESNEL = this._useAlphaFresnel || this._useLinearAlphaFresnel;\r\n            defines.LINEARALPHAFRESNEL = this._useLinearAlphaFresnel;\r\n        }\r\n\r\n        if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\r\n            this._imageProcessingConfiguration.prepareDefines(defines);\r\n        }\r\n\r\n        defines.FORCENORMALFORWARD = this._forceNormalForward;\r\n\r\n        defines.RADIANCEOCCLUSION = this._useRadianceOcclusion;\r\n\r\n        defines.HORIZONOCCLUSION = this._useHorizonOcclusion;\r\n\r\n        // Misc.\r\n        if (defines._areMiscDirty) {\r\n            MaterialHelper.PrepareDefinesForMisc(\r\n                mesh,\r\n                scene,\r\n                this._useLogarithmicDepth,\r\n                this.pointsCloud,\r\n                this.fogEnabled,\r\n                this._shouldTurnAlphaTestOn(mesh) || this._forceAlphaTest,\r\n                defines\r\n            );\r\n            defines.UNLIT = this._unlit || ((this.pointsCloud || this.wireframe) && !mesh.isVerticesDataPresent(VertexBuffer.NormalKind));\r\n            defines.DEBUGMODE = this._debugMode;\r\n        }\r\n\r\n        // External config\r\n        this._eventInfo.defines = defines;\r\n        this._eventInfo.mesh = mesh;\r\n        this._callbackPluginEventPrepareDefines(this._eventInfo);\r\n\r\n        // Values that need to be evaluated on every frame\r\n        MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances ? true : false, useClipPlane, useThinInstances);\r\n\r\n        // Attribs\r\n        MaterialHelper.PrepareDefinesForAttributes(mesh, defines, true, true, true, this._transparencyMode !== PBRBaseMaterial.PBRMATERIAL_OPAQUE);\r\n    }\r\n\r\n    /**\r\n     * Force shader compilation\r\n     * @param mesh\r\n     * @param onCompiled\r\n     * @param options\r\n     */\r\n    public forceCompilation(mesh: AbstractMesh, onCompiled?: (material: Material) => void, options?: Partial<IMaterialCompilationOptions>): void {\r\n        const localOptions = {\r\n            clipPlane: false,\r\n            useInstances: false,\r\n            ...options,\r\n        };\r\n\r\n        if (!this._uniformBufferLayoutBuilt) {\r\n            this.buildUniformLayout();\r\n        }\r\n\r\n        this._callbackPluginEventGeneric(MaterialPluginEvent.GetDefineNames, this._eventInfo);\r\n        const defines = new PBRMaterialDefines(this._eventInfo.defineNames);\r\n        const effect = this._prepareEffect(mesh, defines, undefined, undefined, localOptions.useInstances, localOptions.clipPlane, mesh.hasThinInstances)!;\r\n        if (this._onEffectCreatedObservable) {\r\n            onCreatedEffectParameters.effect = effect;\r\n            onCreatedEffectParameters.subMesh = null;\r\n            this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\r\n        }\r\n        if (effect.isReady()) {\r\n            if (onCompiled) {\r\n                onCompiled(this);\r\n            }\r\n        } else {\r\n            effect.onCompileObservable.add(() => {\r\n                if (onCompiled) {\r\n                    onCompiled(this);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes the uniform buffer layout for the shader.\r\n     */\r\n    public buildUniformLayout(): void {\r\n        // Order is important !\r\n        const ubo = this._uniformBuffer;\r\n        ubo.addUniform(\"vAlbedoInfos\", 2);\r\n        ubo.addUniform(\"vAmbientInfos\", 4);\r\n        ubo.addUniform(\"vOpacityInfos\", 2);\r\n        ubo.addUniform(\"vEmissiveInfos\", 2);\r\n        ubo.addUniform(\"vLightmapInfos\", 2);\r\n        ubo.addUniform(\"vReflectivityInfos\", 3);\r\n        ubo.addUniform(\"vMicroSurfaceSamplerInfos\", 2);\r\n        ubo.addUniform(\"vReflectionInfos\", 2);\r\n        ubo.addUniform(\"vReflectionFilteringInfo\", 2);\r\n        ubo.addUniform(\"vReflectionPosition\", 3);\r\n        ubo.addUniform(\"vReflectionSize\", 3);\r\n        ubo.addUniform(\"vBumpInfos\", 3);\r\n        ubo.addUniform(\"albedoMatrix\", 16);\r\n        ubo.addUniform(\"ambientMatrix\", 16);\r\n        ubo.addUniform(\"opacityMatrix\", 16);\r\n        ubo.addUniform(\"emissiveMatrix\", 16);\r\n        ubo.addUniform(\"lightmapMatrix\", 16);\r\n        ubo.addUniform(\"reflectivityMatrix\", 16);\r\n        ubo.addUniform(\"microSurfaceSamplerMatrix\", 16);\r\n        ubo.addUniform(\"bumpMatrix\", 16);\r\n        ubo.addUniform(\"vTangentSpaceParams\", 2);\r\n        ubo.addUniform(\"reflectionMatrix\", 16);\r\n\r\n        ubo.addUniform(\"vReflectionColor\", 3);\r\n        ubo.addUniform(\"vAlbedoColor\", 4);\r\n        ubo.addUniform(\"vLightingIntensity\", 4);\r\n\r\n        ubo.addUniform(\"vReflectionMicrosurfaceInfos\", 3);\r\n        ubo.addUniform(\"pointSize\", 1);\r\n        ubo.addUniform(\"vReflectivityColor\", 4);\r\n        ubo.addUniform(\"vEmissiveColor\", 3);\r\n        ubo.addUniform(\"vAmbientColor\", 3);\r\n\r\n        ubo.addUniform(\"vDebugMode\", 2);\r\n\r\n        ubo.addUniform(\"vMetallicReflectanceFactors\", 4);\r\n        ubo.addUniform(\"vMetallicReflectanceInfos\", 2);\r\n        ubo.addUniform(\"metallicReflectanceMatrix\", 16);\r\n        ubo.addUniform(\"vReflectanceInfos\", 2);\r\n        ubo.addUniform(\"reflectanceMatrix\", 16);\r\n\r\n        ubo.addUniform(\"vSphericalL00\", 3);\r\n        ubo.addUniform(\"vSphericalL1_1\", 3);\r\n        ubo.addUniform(\"vSphericalL10\", 3);\r\n        ubo.addUniform(\"vSphericalL11\", 3);\r\n        ubo.addUniform(\"vSphericalL2_2\", 3);\r\n        ubo.addUniform(\"vSphericalL2_1\", 3);\r\n        ubo.addUniform(\"vSphericalL20\", 3);\r\n        ubo.addUniform(\"vSphericalL21\", 3);\r\n        ubo.addUniform(\"vSphericalL22\", 3);\r\n\r\n        ubo.addUniform(\"vSphericalX\", 3);\r\n        ubo.addUniform(\"vSphericalY\", 3);\r\n        ubo.addUniform(\"vSphericalZ\", 3);\r\n        ubo.addUniform(\"vSphericalXX_ZZ\", 3);\r\n        ubo.addUniform(\"vSphericalYY_ZZ\", 3);\r\n        ubo.addUniform(\"vSphericalZZ\", 3);\r\n        ubo.addUniform(\"vSphericalXY\", 3);\r\n        ubo.addUniform(\"vSphericalYZ\", 3);\r\n        ubo.addUniform(\"vSphericalZX\", 3);\r\n\r\n        super.buildUniformLayout();\r\n    }\r\n\r\n    /**\r\n     * Binds the submesh data.\r\n     * @param world - The world matrix.\r\n     * @param mesh - The BJS mesh.\r\n     * @param subMesh - A submesh of the BJS mesh.\r\n     */\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        const scene = this.getScene();\r\n\r\n        const defines = <PBRMaterialDefines>subMesh.materialDefines;\r\n        if (!defines) {\r\n            return;\r\n        }\r\n\r\n        const effect = subMesh.effect;\r\n\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        // Matrices Mesh.\r\n        mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\r\n        mesh.transferToEffect(world);\r\n\r\n        const engine = scene.getEngine();\r\n\r\n        // Binding unconditionally\r\n        this._uniformBuffer.bindToEffect(effect, \"Material\");\r\n\r\n        this.prePassConfiguration.bindForSubMesh(this._activeEffect, scene, mesh, world, this.isFrozen);\r\n\r\n        this._eventInfo.subMesh = subMesh;\r\n        this._callbackPluginEventHardBindForSubMesh(this._eventInfo);\r\n\r\n        // Normal Matrix\r\n        if (defines.OBJECTSPACE_NORMALMAP) {\r\n            world.toNormalMatrix(this._normalMatrix);\r\n            this.bindOnlyNormalMatrix(this._normalMatrix);\r\n        }\r\n\r\n        const mustRebind = this._mustRebind(scene, effect, mesh.visibility);\r\n\r\n        // Bones\r\n        MaterialHelper.BindBonesParameters(mesh, this._activeEffect, this.prePassConfiguration);\r\n\r\n        let reflectionTexture: Nullable<BaseTexture> = null;\r\n        const ubo = this._uniformBuffer;\r\n        if (mustRebind) {\r\n            this.bindViewProjection(effect);\r\n            reflectionTexture = this._getReflectionTexture();\r\n\r\n            if (!ubo.useUbo || !this.isFrozen || !ubo.isSync) {\r\n                // Texture uniforms\r\n                if (scene.texturesEnabled) {\r\n                    if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                        ubo.updateFloat2(\"vAlbedoInfos\", this._albedoTexture.coordinatesIndex, this._albedoTexture.level);\r\n                        MaterialHelper.BindTextureMatrix(this._albedoTexture, ubo, \"albedo\");\r\n                    }\r\n\r\n                    if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\r\n                        ubo.updateFloat4(\r\n                            \"vAmbientInfos\",\r\n                            this._ambientTexture.coordinatesIndex,\r\n                            this._ambientTexture.level,\r\n                            this._ambientTextureStrength,\r\n                            this._ambientTextureImpactOnAnalyticalLights\r\n                        );\r\n                        MaterialHelper.BindTextureMatrix(this._ambientTexture, ubo, \"ambient\");\r\n                    }\r\n\r\n                    if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\r\n                        ubo.updateFloat2(\"vOpacityInfos\", this._opacityTexture.coordinatesIndex, this._opacityTexture.level);\r\n                        MaterialHelper.BindTextureMatrix(this._opacityTexture, ubo, \"opacity\");\r\n                    }\r\n\r\n                    if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n                        ubo.updateMatrix(\"reflectionMatrix\", reflectionTexture.getReflectionTextureMatrix());\r\n                        ubo.updateFloat2(\"vReflectionInfos\", reflectionTexture.level, 0);\r\n\r\n                        if ((<any>reflectionTexture).boundingBoxSize) {\r\n                            const cubeTexture = <CubeTexture>reflectionTexture;\r\n\r\n                            ubo.updateVector3(\"vReflectionPosition\", cubeTexture.boundingBoxPosition);\r\n                            ubo.updateVector3(\"vReflectionSize\", cubeTexture.boundingBoxSize);\r\n                        }\r\n\r\n                        if (this.realTimeFiltering) {\r\n                            const width = reflectionTexture.getSize().width;\r\n                            ubo.updateFloat2(\"vReflectionFilteringInfo\", width, Scalar.Log2(width));\r\n                        }\r\n\r\n                        if (!defines.USEIRRADIANCEMAP) {\r\n                            const polynomials = reflectionTexture.sphericalPolynomial;\r\n                            if (defines.USESPHERICALFROMREFLECTIONMAP && polynomials) {\r\n                                if (defines.SPHERICAL_HARMONICS) {\r\n                                    const preScaledHarmonics = polynomials.preScaledHarmonics;\r\n                                    ubo.updateVector3(\"vSphericalL00\", preScaledHarmonics.l00);\r\n                                    ubo.updateVector3(\"vSphericalL1_1\", preScaledHarmonics.l1_1);\r\n                                    ubo.updateVector3(\"vSphericalL10\", preScaledHarmonics.l10);\r\n                                    ubo.updateVector3(\"vSphericalL11\", preScaledHarmonics.l11);\r\n                                    ubo.updateVector3(\"vSphericalL2_2\", preScaledHarmonics.l2_2);\r\n                                    ubo.updateVector3(\"vSphericalL2_1\", preScaledHarmonics.l2_1);\r\n                                    ubo.updateVector3(\"vSphericalL20\", preScaledHarmonics.l20);\r\n                                    ubo.updateVector3(\"vSphericalL21\", preScaledHarmonics.l21);\r\n                                    ubo.updateVector3(\"vSphericalL22\", preScaledHarmonics.l22);\r\n                                } else {\r\n                                    ubo.updateFloat3(\"vSphericalX\", polynomials.x.x, polynomials.x.y, polynomials.x.z);\r\n                                    ubo.updateFloat3(\"vSphericalY\", polynomials.y.x, polynomials.y.y, polynomials.y.z);\r\n                                    ubo.updateFloat3(\"vSphericalZ\", polynomials.z.x, polynomials.z.y, polynomials.z.z);\r\n                                    ubo.updateFloat3(\r\n                                        \"vSphericalXX_ZZ\",\r\n                                        polynomials.xx.x - polynomials.zz.x,\r\n                                        polynomials.xx.y - polynomials.zz.y,\r\n                                        polynomials.xx.z - polynomials.zz.z\r\n                                    );\r\n                                    ubo.updateFloat3(\r\n                                        \"vSphericalYY_ZZ\",\r\n                                        polynomials.yy.x - polynomials.zz.x,\r\n                                        polynomials.yy.y - polynomials.zz.y,\r\n                                        polynomials.yy.z - polynomials.zz.z\r\n                                    );\r\n                                    ubo.updateFloat3(\"vSphericalZZ\", polynomials.zz.x, polynomials.zz.y, polynomials.zz.z);\r\n                                    ubo.updateFloat3(\"vSphericalXY\", polynomials.xy.x, polynomials.xy.y, polynomials.xy.z);\r\n                                    ubo.updateFloat3(\"vSphericalYZ\", polynomials.yz.x, polynomials.yz.y, polynomials.yz.z);\r\n                                    ubo.updateFloat3(\"vSphericalZX\", polynomials.zx.x, polynomials.zx.y, polynomials.zx.z);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        ubo.updateFloat3(\r\n                            \"vReflectionMicrosurfaceInfos\",\r\n                            reflectionTexture.getSize().width,\r\n                            reflectionTexture.lodGenerationScale,\r\n                            reflectionTexture.lodGenerationOffset\r\n                        );\r\n                    }\r\n\r\n                    if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\r\n                        ubo.updateFloat2(\"vEmissiveInfos\", this._emissiveTexture.coordinatesIndex, this._emissiveTexture.level);\r\n                        MaterialHelper.BindTextureMatrix(this._emissiveTexture, ubo, \"emissive\");\r\n                    }\r\n\r\n                    if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\r\n                        ubo.updateFloat2(\"vLightmapInfos\", this._lightmapTexture.coordinatesIndex, this._lightmapTexture.level);\r\n                        MaterialHelper.BindTextureMatrix(this._lightmapTexture, ubo, \"lightmap\");\r\n                    }\r\n\r\n                    if (MaterialFlags.SpecularTextureEnabled) {\r\n                        if (this._metallicTexture) {\r\n                            ubo.updateFloat3(\"vReflectivityInfos\", this._metallicTexture.coordinatesIndex, this._metallicTexture.level, this._ambientTextureStrength);\r\n                            MaterialHelper.BindTextureMatrix(this._metallicTexture, ubo, \"reflectivity\");\r\n                        } else if (this._reflectivityTexture) {\r\n                            ubo.updateFloat3(\"vReflectivityInfos\", this._reflectivityTexture.coordinatesIndex, this._reflectivityTexture.level, 1.0);\r\n                            MaterialHelper.BindTextureMatrix(this._reflectivityTexture, ubo, \"reflectivity\");\r\n                        }\r\n\r\n                        if (this._metallicReflectanceTexture) {\r\n                            ubo.updateFloat2(\"vMetallicReflectanceInfos\", this._metallicReflectanceTexture.coordinatesIndex, this._metallicReflectanceTexture.level);\r\n                            MaterialHelper.BindTextureMatrix(this._metallicReflectanceTexture, ubo, \"metallicReflectance\");\r\n                        }\r\n\r\n                        if (this._reflectanceTexture && defines.REFLECTANCE) {\r\n                            ubo.updateFloat2(\"vReflectanceInfos\", this._reflectanceTexture.coordinatesIndex, this._reflectanceTexture.level);\r\n                            MaterialHelper.BindTextureMatrix(this._reflectanceTexture, ubo, \"reflectance\");\r\n                        }\r\n\r\n                        if (this._microSurfaceTexture) {\r\n                            ubo.updateFloat2(\"vMicroSurfaceSamplerInfos\", this._microSurfaceTexture.coordinatesIndex, this._microSurfaceTexture.level);\r\n                            MaterialHelper.BindTextureMatrix(this._microSurfaceTexture, ubo, \"microSurfaceSampler\");\r\n                        }\r\n                    }\r\n\r\n                    if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\r\n                        ubo.updateFloat3(\"vBumpInfos\", this._bumpTexture.coordinatesIndex, this._bumpTexture.level, this._parallaxScaleBias);\r\n                        MaterialHelper.BindTextureMatrix(this._bumpTexture, ubo, \"bump\");\r\n\r\n                        if (scene._mirroredCameraPosition) {\r\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? 1.0 : -1.0, this._invertNormalMapY ? 1.0 : -1.0);\r\n                        } else {\r\n                            ubo.updateFloat2(\"vTangentSpaceParams\", this._invertNormalMapX ? -1.0 : 1.0, this._invertNormalMapY ? -1.0 : 1.0);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Point size\r\n                if (this.pointsCloud) {\r\n                    ubo.updateFloat(\"pointSize\", this.pointSize);\r\n                }\r\n\r\n                // Colors\r\n                if (defines.METALLICWORKFLOW) {\r\n                    TmpColors.Color3[0].r = this._metallic === undefined || this._metallic === null ? 1 : this._metallic;\r\n                    TmpColors.Color3[0].g = this._roughness === undefined || this._roughness === null ? 1 : this._roughness;\r\n                    ubo.updateColor4(\"vReflectivityColor\", TmpColors.Color3[0], 1);\r\n\r\n                    const ior = this.subSurface?._indexOfRefraction ?? 1.5;\r\n                    const outsideIOR = 1; // consider air as clear coat and other layers would remap in the shader.\r\n\r\n                    // We are here deriving our default reflectance from a common value for none metallic surface.\r\n                    // Based of the schlick fresnel approximation model\r\n                    // for dielectrics.\r\n                    const f0 = Math.pow((ior - outsideIOR) / (ior + outsideIOR), 2);\r\n\r\n                    // Tweak the default F0 and F90 based on our given setup\r\n                    this._metallicReflectanceColor.scaleToRef(f0 * this._metallicF0Factor, TmpColors.Color3[0]);\r\n                    const metallicF90 = this._metallicF0Factor;\r\n\r\n                    ubo.updateColor4(\"vMetallicReflectanceFactors\", TmpColors.Color3[0], metallicF90);\r\n                } else {\r\n                    ubo.updateColor4(\"vReflectivityColor\", this._reflectivityColor, this._microSurface);\r\n                }\r\n\r\n                ubo.updateColor3(\"vEmissiveColor\", MaterialFlags.EmissiveTextureEnabled ? this._emissiveColor : Color3.BlackReadOnly);\r\n                ubo.updateColor3(\"vReflectionColor\", this._reflectionColor);\r\n                if (!defines.SS_REFRACTION && this.subSurface?._linkRefractionWithTransparency) {\r\n                    ubo.updateColor4(\"vAlbedoColor\", this._albedoColor, 1);\r\n                } else {\r\n                    ubo.updateColor4(\"vAlbedoColor\", this._albedoColor, this.alpha);\r\n                }\r\n\r\n                // Misc\r\n                this._lightingInfos.x = this._directIntensity;\r\n                this._lightingInfos.y = this._emissiveIntensity;\r\n                this._lightingInfos.z = this._environmentIntensity * scene.environmentIntensity;\r\n                this._lightingInfos.w = this._specularIntensity;\r\n\r\n                ubo.updateVector4(\"vLightingIntensity\", this._lightingInfos);\r\n\r\n                // Colors\r\n                scene.ambientColor.multiplyToRef(this._ambientColor, this._globalAmbientColor);\r\n\r\n                ubo.updateColor3(\"vAmbientColor\", this._globalAmbientColor);\r\n\r\n                ubo.updateFloat2(\"vDebugMode\", this._debugLimit, this._debugFactor);\r\n            }\r\n\r\n            // Textures\r\n            if (scene.texturesEnabled) {\r\n                if (this._albedoTexture && MaterialFlags.DiffuseTextureEnabled) {\r\n                    ubo.setTexture(\"albedoSampler\", this._albedoTexture);\r\n                }\r\n\r\n                if (this._ambientTexture && MaterialFlags.AmbientTextureEnabled) {\r\n                    ubo.setTexture(\"ambientSampler\", this._ambientTexture);\r\n                }\r\n\r\n                if (this._opacityTexture && MaterialFlags.OpacityTextureEnabled) {\r\n                    ubo.setTexture(\"opacitySampler\", this._opacityTexture);\r\n                }\r\n\r\n                if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n                    if (defines.LODBASEDMICROSFURACE) {\r\n                        ubo.setTexture(\"reflectionSampler\", reflectionTexture);\r\n                    } else {\r\n                        ubo.setTexture(\"reflectionSampler\", reflectionTexture._lodTextureMid || reflectionTexture);\r\n                        ubo.setTexture(\"reflectionSamplerLow\", reflectionTexture._lodTextureLow || reflectionTexture);\r\n                        ubo.setTexture(\"reflectionSamplerHigh\", reflectionTexture._lodTextureHigh || reflectionTexture);\r\n                    }\r\n\r\n                    if (defines.USEIRRADIANCEMAP) {\r\n                        ubo.setTexture(\"irradianceSampler\", reflectionTexture.irradianceTexture);\r\n                    }\r\n                }\r\n\r\n                if (defines.ENVIRONMENTBRDF) {\r\n                    ubo.setTexture(\"environmentBrdfSampler\", this._environmentBRDFTexture);\r\n                }\r\n\r\n                if (this._emissiveTexture && MaterialFlags.EmissiveTextureEnabled) {\r\n                    ubo.setTexture(\"emissiveSampler\", this._emissiveTexture);\r\n                }\r\n\r\n                if (this._lightmapTexture && MaterialFlags.LightmapTextureEnabled) {\r\n                    ubo.setTexture(\"lightmapSampler\", this._lightmapTexture);\r\n                }\r\n\r\n                if (MaterialFlags.SpecularTextureEnabled) {\r\n                    if (this._metallicTexture) {\r\n                        ubo.setTexture(\"reflectivitySampler\", this._metallicTexture);\r\n                    } else if (this._reflectivityTexture) {\r\n                        ubo.setTexture(\"reflectivitySampler\", this._reflectivityTexture);\r\n                    }\r\n\r\n                    if (this._metallicReflectanceTexture) {\r\n                        ubo.setTexture(\"metallicReflectanceSampler\", this._metallicReflectanceTexture);\r\n                    }\r\n\r\n                    if (this._reflectanceTexture && defines.REFLECTANCE) {\r\n                        ubo.setTexture(\"reflectanceSampler\", this._reflectanceTexture);\r\n                    }\r\n\r\n                    if (this._microSurfaceTexture) {\r\n                        ubo.setTexture(\"microSurfaceSampler\", this._microSurfaceTexture);\r\n                    }\r\n                }\r\n\r\n                if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.BumpTextureEnabled && !this._disableBumpMap) {\r\n                    ubo.setTexture(\"bumpSampler\", this._bumpTexture);\r\n                }\r\n            }\r\n\r\n            // OIT with depth peeling\r\n            if (this.getScene().useOrderIndependentTransparency && this.needAlphaBlendingForMesh(mesh)) {\r\n                this.getScene().depthPeelingRenderer!.bind(effect);\r\n            }\r\n\r\n            this._eventInfo.subMesh = subMesh;\r\n            this._callbackPluginEventBindForSubMesh(this._eventInfo);\r\n\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(this._activeEffect, scene);\r\n\r\n            this.bindEyePosition(effect);\r\n        } else if (scene.getEngine()._features.needToAlwaysBindUniformBuffers) {\r\n            this._needToBindSceneUbo = true;\r\n        }\r\n\r\n        if (mustRebind || !this.isFrozen) {\r\n            // Lights\r\n            if (scene.lightsEnabled && !this._disableLighting) {\r\n                MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this._maxSimultaneousLights);\r\n            }\r\n\r\n            // View\r\n            if ((scene.fogEnabled && mesh.applyFog && scene.fogMode !== Scene.FOGMODE_NONE) || reflectionTexture || mesh.receiveShadows) {\r\n                this.bindView(effect);\r\n            }\r\n\r\n            // Fog\r\n            MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect, true);\r\n\r\n            // Morph targets\r\n            if (defines.NUM_MORPH_INFLUENCERS) {\r\n                MaterialHelper.BindMorphTargetParameters(mesh, this._activeEffect);\r\n            }\r\n\r\n            if (defines.BAKED_VERTEX_ANIMATION_TEXTURE) {\r\n                mesh.bakedVertexAnimationManager?.bind(effect, defines.INSTANCES);\r\n            }\r\n\r\n            // image processing\r\n            this._imageProcessingConfiguration!.bind(this._activeEffect);\r\n\r\n            // Log. depth\r\n            MaterialHelper.BindLogDepth(defines, this._activeEffect, scene);\r\n        }\r\n\r\n        this._afterBind(mesh, this._activeEffect);\r\n\r\n        ubo.update();\r\n    }\r\n\r\n    /**\r\n     * Returns the animatable textures.\r\n     * @returns - Array of animatable textures.\r\n     */\r\n    public getAnimatables(): IAnimatable[] {\r\n        const results = super.getAnimatables();\r\n\r\n        if (this._albedoTexture && this._albedoTexture.animations && this._albedoTexture.animations.length > 0) {\r\n            results.push(this._albedoTexture);\r\n        }\r\n\r\n        if (this._ambientTexture && this._ambientTexture.animations && this._ambientTexture.animations.length > 0) {\r\n            results.push(this._ambientTexture);\r\n        }\r\n\r\n        if (this._opacityTexture && this._opacityTexture.animations && this._opacityTexture.animations.length > 0) {\r\n            results.push(this._opacityTexture);\r\n        }\r\n\r\n        if (this._reflectionTexture && this._reflectionTexture.animations && this._reflectionTexture.animations.length > 0) {\r\n            results.push(this._reflectionTexture);\r\n        }\r\n\r\n        if (this._emissiveTexture && this._emissiveTexture.animations && this._emissiveTexture.animations.length > 0) {\r\n            results.push(this._emissiveTexture);\r\n        }\r\n\r\n        if (this._metallicTexture && this._metallicTexture.animations && this._metallicTexture.animations.length > 0) {\r\n            results.push(this._metallicTexture);\r\n        } else if (this._reflectivityTexture && this._reflectivityTexture.animations && this._reflectivityTexture.animations.length > 0) {\r\n            results.push(this._reflectivityTexture);\r\n        }\r\n\r\n        if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\r\n            results.push(this._bumpTexture);\r\n        }\r\n\r\n        if (this._lightmapTexture && this._lightmapTexture.animations && this._lightmapTexture.animations.length > 0) {\r\n            results.push(this._lightmapTexture);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    /**\r\n     * Returns the texture used for reflections.\r\n     * @returns - Reflection texture if present.  Otherwise, returns the environment texture.\r\n     */\r\n    private _getReflectionTexture(): Nullable<BaseTexture> {\r\n        if (this._reflectionTexture) {\r\n            return this._reflectionTexture;\r\n        }\r\n\r\n        return this.getScene().environmentTexture;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of the actively used textures.\r\n     * @returns - Array of BaseTextures\r\n     */\r\n    public getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        if (this._albedoTexture) {\r\n            activeTextures.push(this._albedoTexture);\r\n        }\r\n\r\n        if (this._ambientTexture) {\r\n            activeTextures.push(this._ambientTexture);\r\n        }\r\n\r\n        if (this._opacityTexture) {\r\n            activeTextures.push(this._opacityTexture);\r\n        }\r\n\r\n        if (this._reflectionTexture) {\r\n            activeTextures.push(this._reflectionTexture);\r\n        }\r\n\r\n        if (this._emissiveTexture) {\r\n            activeTextures.push(this._emissiveTexture);\r\n        }\r\n\r\n        if (this._reflectivityTexture) {\r\n            activeTextures.push(this._reflectivityTexture);\r\n        }\r\n\r\n        if (this._metallicTexture) {\r\n            activeTextures.push(this._metallicTexture);\r\n        }\r\n\r\n        if (this._metallicReflectanceTexture) {\r\n            activeTextures.push(this._metallicReflectanceTexture);\r\n        }\r\n\r\n        if (this._reflectanceTexture) {\r\n            activeTextures.push(this._reflectanceTexture);\r\n        }\r\n\r\n        if (this._microSurfaceTexture) {\r\n            activeTextures.push(this._microSurfaceTexture);\r\n        }\r\n\r\n        if (this._bumpTexture) {\r\n            activeTextures.push(this._bumpTexture);\r\n        }\r\n\r\n        if (this._lightmapTexture) {\r\n            activeTextures.push(this._lightmapTexture);\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    /**\r\n     * Checks to see if a texture is used in the material.\r\n     * @param texture - Base texture to use.\r\n     * @returns - Boolean specifying if a texture is used in the material.\r\n     */\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        if (this._albedoTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._ambientTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._opacityTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._reflectionTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._reflectivityTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._metallicTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._metallicReflectanceTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._reflectanceTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._microSurfaceTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._bumpTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._lightmapTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Sets the required values to the prepass renderer.\r\n     */\r\n    public setPrePassRenderer(): boolean {\r\n        if (this.subSurface?.isScatteringEnabled) {\r\n            const subSurfaceConfiguration = this.getScene().enableSubSurfaceForPrePass();\r\n            if (subSurfaceConfiguration) {\r\n                subSurfaceConfiguration.enabled = true;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Disposes the resources of the material.\r\n     * @param forceDisposeEffect - Forces the disposal of effects.\r\n     * @param forceDisposeTextures - Forces the disposal of all textures.\r\n     */\r\n    public dispose(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            if (this._environmentBRDFTexture && this.getScene().environmentBRDFTexture !== this._environmentBRDFTexture) {\r\n                this._environmentBRDFTexture.dispose();\r\n            }\r\n\r\n            this._albedoTexture?.dispose();\r\n            this._ambientTexture?.dispose();\r\n            this._opacityTexture?.dispose();\r\n            this._reflectionTexture?.dispose();\r\n            this._emissiveTexture?.dispose();\r\n            this._metallicTexture?.dispose();\r\n            this._reflectivityTexture?.dispose();\r\n            this._bumpTexture?.dispose();\r\n            this._lightmapTexture?.dispose();\r\n            this._metallicReflectanceTexture?.dispose();\r\n            this._reflectanceTexture?.dispose();\r\n            this._microSurfaceTexture?.dispose();\r\n        }\r\n\r\n        this._renderTargets.dispose();\r\n\r\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n        }\r\n\r\n        super.dispose(forceDisposeEffect, forceDisposeTextures);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}