{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport { ThinEngine } from \"../../Engines/thinEngine.js\";\nimport { WebGLDataBuffer } from \"../../Meshes/WebGL/webGLDataBuffer.js\";\n\nThinEngine.prototype.createUniformBuffer = function (elements) {\n  var ubo = this._gl.createBuffer();\n\n  if (!ubo) {\n    throw new Error(\"Unable to create uniform buffer\");\n  }\n\n  var result = new WebGLDataBuffer(ubo);\n  this.bindUniformBuffer(result);\n\n  if (elements instanceof Float32Array) {\n    this._gl.bufferData(this._gl.UNIFORM_BUFFER, elements, this._gl.STATIC_DRAW);\n  } else {\n    this._gl.bufferData(this._gl.UNIFORM_BUFFER, new Float32Array(elements), this._gl.STATIC_DRAW);\n  }\n\n  this.bindUniformBuffer(null);\n  result.references = 1;\n  return result;\n};\n\nThinEngine.prototype.createDynamicUniformBuffer = function (elements) {\n  var ubo = this._gl.createBuffer();\n\n  if (!ubo) {\n    throw new Error(\"Unable to create dynamic uniform buffer\");\n  }\n\n  var result = new WebGLDataBuffer(ubo);\n  this.bindUniformBuffer(result);\n\n  if (elements instanceof Float32Array) {\n    this._gl.bufferData(this._gl.UNIFORM_BUFFER, elements, this._gl.DYNAMIC_DRAW);\n  } else {\n    this._gl.bufferData(this._gl.UNIFORM_BUFFER, new Float32Array(elements), this._gl.DYNAMIC_DRAW);\n  }\n\n  this.bindUniformBuffer(null);\n  result.references = 1;\n  return result;\n};\n\nThinEngine.prototype.updateUniformBuffer = function (uniformBuffer, elements, offset, count) {\n  this.bindUniformBuffer(uniformBuffer);\n\n  if (offset === undefined) {\n    offset = 0;\n  }\n\n  if (count === undefined) {\n    if (elements instanceof Float32Array) {\n      this._gl.bufferSubData(this._gl.UNIFORM_BUFFER, offset, elements);\n    } else {\n      this._gl.bufferSubData(this._gl.UNIFORM_BUFFER, offset, new Float32Array(elements));\n    }\n  } else {\n    if (elements instanceof Float32Array) {\n      this._gl.bufferSubData(this._gl.UNIFORM_BUFFER, 0, elements.subarray(offset, offset + count));\n    } else {\n      this._gl.bufferSubData(this._gl.UNIFORM_BUFFER, 0, new Float32Array(elements).subarray(offset, offset + count));\n    }\n  }\n\n  this.bindUniformBuffer(null);\n};\n\nThinEngine.prototype.bindUniformBuffer = function (buffer) {\n  this._gl.bindBuffer(this._gl.UNIFORM_BUFFER, buffer ? buffer.underlyingResource : null);\n}; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\nThinEngine.prototype.bindUniformBufferBase = function (buffer, location, name) {\n  this._gl.bindBufferBase(this._gl.UNIFORM_BUFFER, location, buffer ? buffer.underlyingResource : null);\n};\n\nThinEngine.prototype.bindUniformBlock = function (pipelineContext, blockName, index) {\n  var program = pipelineContext.program;\n\n  var uniformLocation = this._gl.getUniformBlockIndex(program, blockName);\n\n  if (uniformLocation !== 0xffffffff) {\n    this._gl.uniformBlockBinding(program, uniformLocation, index);\n  }\n};","map":{"version":3,"mappings":"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","names":["ThinEngine","WebGLDataBuffer","prototype","createUniformBuffer","elements","ubo","_gl","createBuffer","Error","result","bindUniformBuffer","Float32Array","bufferData","UNIFORM_BUFFER","STATIC_DRAW","references","createDynamicUniformBuffer","DYNAMIC_DRAW","updateUniformBuffer","uniformBuffer","offset","count","undefined","bufferSubData","subarray","buffer","bindBuffer","underlyingResource","bindUniformBufferBase","location","name","bindBufferBase","bindUniformBlock","pipelineContext","blockName","index","program","uniformLocation","getUniformBlockIndex","uniformBlockBinding"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/Extensions/engine.uniformBuffer.ts"],"sourcesContent":["import { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport type { FloatArray, Nullable } from \"../../types\";\r\nimport type { DataBuffer } from \"../../Buffers/dataBuffer\";\r\nimport { WebGLDataBuffer } from \"../../Meshes/WebGL/webGLDataBuffer\";\r\nimport type { IPipelineContext } from \"../IPipelineContext\";\r\nimport type { WebGLPipelineContext } from \"../WebGL/webGLPipelineContext\";\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n    export interface ThinEngine {\r\n        /**\r\n         * Create an uniform buffer\r\n         * @see https://doc.babylonjs.com/features/webgl2#uniform-buffer-objets\r\n         * @param elements defines the content of the uniform buffer\r\n         * @returns the webGL uniform buffer\r\n         */\r\n        createUniformBuffer(elements: FloatArray): DataBuffer;\r\n\r\n        /**\r\n         * Create a dynamic uniform buffer\r\n         * @see https://doc.babylonjs.com/features/webgl2#uniform-buffer-objets\r\n         * @param elements defines the content of the uniform buffer\r\n         * @returns the webGL uniform buffer\r\n         */\r\n        createDynamicUniformBuffer(elements: FloatArray): DataBuffer;\r\n\r\n        /**\r\n         * Update an existing uniform buffer\r\n         * @see https://doc.babylonjs.com/features/webgl2#uniform-buffer-objets\r\n         * @param uniformBuffer defines the target uniform buffer\r\n         * @param elements defines the content to update\r\n         * @param offset defines the offset in the uniform buffer where update should start\r\n         * @param count defines the size of the data to update\r\n         */\r\n        updateUniformBuffer(uniformBuffer: DataBuffer, elements: FloatArray, offset?: number, count?: number): void;\r\n\r\n        /**\r\n         * Bind an uniform buffer to the current webGL context\r\n         * @param buffer defines the buffer to bind\r\n         */\r\n        bindUniformBuffer(buffer: Nullable<DataBuffer>): void;\r\n\r\n        /**\r\n         * Bind a buffer to the current webGL context at a given location\r\n         * @param buffer defines the buffer to bind\r\n         * @param location defines the index where to bind the buffer\r\n         * @param name Name of the uniform variable to bind\r\n         */\r\n        bindUniformBufferBase(buffer: DataBuffer, location: number, name: string): void;\r\n\r\n        /**\r\n         * Bind a specific block at a given index in a specific shader program\r\n         * @param pipelineContext defines the pipeline context to use\r\n         * @param blockName defines the block name\r\n         * @param index defines the index where to bind the block\r\n         */\r\n        bindUniformBlock(pipelineContext: IPipelineContext, blockName: string, index: number): void;\r\n    }\r\n}\r\n\r\nThinEngine.prototype.createUniformBuffer = function (elements: FloatArray): DataBuffer {\r\n    const ubo = this._gl.createBuffer();\r\n\r\n    if (!ubo) {\r\n        throw new Error(\"Unable to create uniform buffer\");\r\n    }\r\n    const result = new WebGLDataBuffer(ubo);\r\n\r\n    this.bindUniformBuffer(result);\r\n\r\n    if (elements instanceof Float32Array) {\r\n        this._gl.bufferData(this._gl.UNIFORM_BUFFER, <Float32Array>elements, this._gl.STATIC_DRAW);\r\n    } else {\r\n        this._gl.bufferData(this._gl.UNIFORM_BUFFER, new Float32Array(<number[]>elements), this._gl.STATIC_DRAW);\r\n    }\r\n\r\n    this.bindUniformBuffer(null);\r\n\r\n    result.references = 1;\r\n    return result;\r\n};\r\n\r\nThinEngine.prototype.createDynamicUniformBuffer = function (elements: FloatArray): DataBuffer {\r\n    const ubo = this._gl.createBuffer();\r\n\r\n    if (!ubo) {\r\n        throw new Error(\"Unable to create dynamic uniform buffer\");\r\n    }\r\n\r\n    const result = new WebGLDataBuffer(ubo);\r\n    this.bindUniformBuffer(result);\r\n\r\n    if (elements instanceof Float32Array) {\r\n        this._gl.bufferData(this._gl.UNIFORM_BUFFER, <Float32Array>elements, this._gl.DYNAMIC_DRAW);\r\n    } else {\r\n        this._gl.bufferData(this._gl.UNIFORM_BUFFER, new Float32Array(<number[]>elements), this._gl.DYNAMIC_DRAW);\r\n    }\r\n\r\n    this.bindUniformBuffer(null);\r\n\r\n    result.references = 1;\r\n    return result;\r\n};\r\n\r\nThinEngine.prototype.updateUniformBuffer = function (uniformBuffer: DataBuffer, elements: FloatArray, offset?: number, count?: number): void {\r\n    this.bindUniformBuffer(uniformBuffer);\r\n\r\n    if (offset === undefined) {\r\n        offset = 0;\r\n    }\r\n\r\n    if (count === undefined) {\r\n        if (elements instanceof Float32Array) {\r\n            this._gl.bufferSubData(this._gl.UNIFORM_BUFFER, offset, <Float32Array>elements);\r\n        } else {\r\n            this._gl.bufferSubData(this._gl.UNIFORM_BUFFER, offset, new Float32Array(<number[]>elements));\r\n        }\r\n    } else {\r\n        if (elements instanceof Float32Array) {\r\n            this._gl.bufferSubData(this._gl.UNIFORM_BUFFER, 0, <Float32Array>elements.subarray(offset, offset + count));\r\n        } else {\r\n            this._gl.bufferSubData(this._gl.UNIFORM_BUFFER, 0, new Float32Array(<number[]>elements).subarray(offset, offset + count));\r\n        }\r\n    }\r\n\r\n    this.bindUniformBuffer(null);\r\n};\r\n\r\nThinEngine.prototype.bindUniformBuffer = function (buffer: Nullable<DataBuffer>): void {\r\n    this._gl.bindBuffer(this._gl.UNIFORM_BUFFER, buffer ? buffer.underlyingResource : null);\r\n};\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nThinEngine.prototype.bindUniformBufferBase = function (buffer: DataBuffer, location: number, name: string): void {\r\n    this._gl.bindBufferBase(this._gl.UNIFORM_BUFFER, location, buffer ? buffer.underlyingResource : null);\r\n};\r\n\r\nThinEngine.prototype.bindUniformBlock = function (pipelineContext: IPipelineContext, blockName: string, index: number): void {\r\n    const program = (pipelineContext as WebGLPipelineContext).program!;\r\n\r\n    const uniformLocation = this._gl.getUniformBlockIndex(program, blockName);\r\n\r\n    if (uniformLocation !== 0xffffffff) {\r\n        this._gl.uniformBlockBinding(program, uniformLocation, index);\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}