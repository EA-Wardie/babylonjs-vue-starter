{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { __assign } from \"tslib\";\nimport { Engine } from \"../../Engines/engine.js\";\nimport { Size } from \"../../Maths/math.size.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { Tools } from \"../../Misc/tools.js\";\nimport { IsWindowObjectExist } from \"../../Misc/domManagement.js\";\nObject.defineProperty(Engine.prototype, \"isInVRExclusivePointerMode\", {\n  get: function get() {\n    return this._vrExclusivePointerMode;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nEngine.prototype._prepareVRComponent = function () {\n  this._vrSupported = false;\n  this._vrExclusivePointerMode = false;\n  this.onVRDisplayChangedObservable = new Observable();\n  this.onVRRequestPresentComplete = new Observable();\n  this.onVRRequestPresentStart = new Observable();\n};\n\nEngine.prototype.isVRDevicePresent = function () {\n  return !!this._vrDisplay;\n};\n\nEngine.prototype.getVRDevice = function () {\n  return this._vrDisplay;\n};\n\nEngine.prototype.initWebVR = function () {\n  this.initWebVRAsync();\n  return this.onVRDisplayChangedObservable;\n};\n\nEngine.prototype.initWebVRAsync = function () {\n  var _this = this;\n\n  var notifyObservers = function notifyObservers() {\n    var eventArgs = {\n      vrDisplay: _this._vrDisplay,\n      vrSupported: _this._vrSupported\n    };\n\n    _this.onVRDisplayChangedObservable.notifyObservers(eventArgs);\n\n    _this._webVRInitPromise = new Promise(function (res) {\n      res(eventArgs);\n    });\n  };\n\n  if (!this._onVrDisplayConnect) {\n    this._onVrDisplayConnect = function (event) {\n      _this._vrDisplay = event.display;\n      notifyObservers();\n    };\n\n    this._onVrDisplayDisconnect = function () {\n      _this._vrDisplay.cancelAnimationFrame(_this._frameHandler);\n\n      _this._vrDisplay = undefined;\n      _this._frameHandler = Engine.QueueNewFrame(_this._boundRenderFunction);\n      notifyObservers();\n    };\n\n    this._onVrDisplayPresentChange = function () {\n      _this._vrExclusivePointerMode = _this._vrDisplay && _this._vrDisplay.isPresenting;\n    };\n\n    var hostWindow = this.getHostWindow();\n\n    if (hostWindow) {\n      hostWindow.addEventListener(\"vrdisplayconnect\", this._onVrDisplayConnect);\n      hostWindow.addEventListener(\"vrdisplaydisconnect\", this._onVrDisplayDisconnect);\n      hostWindow.addEventListener(\"vrdisplaypresentchange\", this._onVrDisplayPresentChange);\n    }\n  }\n\n  this._webVRInitPromise = this._webVRInitPromise || this._getVRDisplaysAsync();\n\n  this._webVRInitPromise.then(notifyObservers);\n\n  return this._webVRInitPromise;\n};\n\nEngine.prototype._getVRDisplaysAsync = function () {\n  var _this = this;\n\n  return new Promise(function (res) {\n    if (navigator.getVRDisplays) {\n      navigator.getVRDisplays().then(function (devices) {\n        _this._vrSupported = true; // note that devices may actually be an empty array. This is fine;\n        // we expect this._vrDisplay to be undefined in this case.\n\n        _this._vrDisplay = devices[0];\n        res({\n          vrDisplay: _this._vrDisplay,\n          vrSupported: _this._vrSupported\n        });\n      });\n    } else {\n      _this._vrDisplay = undefined;\n      _this._vrSupported = false;\n      res({\n        vrDisplay: _this._vrDisplay,\n        vrSupported: _this._vrSupported\n      });\n    }\n  });\n};\n\nEngine.prototype.enableVR = function (options) {\n  var _this = this;\n\n  if (this._vrDisplay && !this._vrDisplay.isPresenting) {\n    var onResolved = function onResolved() {\n      _this.onVRRequestPresentComplete.notifyObservers(true);\n\n      _this._onVRFullScreenTriggered();\n    };\n\n    var onRejected = function onRejected() {\n      _this.onVRRequestPresentComplete.notifyObservers(false);\n    };\n\n    this.onVRRequestPresentStart.notifyObservers(this);\n    var presentationAttributes = {\n      highRefreshRate: this.vrPresentationAttributes ? this.vrPresentationAttributes.highRefreshRate : false,\n      foveationLevel: this.vrPresentationAttributes ? this.vrPresentationAttributes.foveationLevel : 1,\n      multiview: (this.getCaps().multiview || this.getCaps().oculusMultiview) && options.useMultiview\n    };\n\n    this._vrDisplay.requestPresent([__assign({\n      source: this.getRenderingCanvas(),\n      attributes: presentationAttributes\n    }, presentationAttributes)]).then(onResolved)[\"catch\"](onRejected);\n  }\n};\n\nEngine.prototype._onVRFullScreenTriggered = function () {\n  if (this._vrDisplay && this._vrDisplay.isPresenting) {\n    //get the old size before we change\n    this._oldSize = new Size(this.getRenderWidth(), this.getRenderHeight());\n    this._oldHardwareScaleFactor = this.getHardwareScalingLevel(); //get the width and height, change the render size\n\n    var leftEye = this._vrDisplay.getEyeParameters(\"left\");\n\n    this.setHardwareScalingLevel(1);\n    this.setSize(leftEye.renderWidth * 2, leftEye.renderHeight);\n  } else {\n    this.setHardwareScalingLevel(this._oldHardwareScaleFactor);\n    this.setSize(this._oldSize.width, this._oldSize.height);\n  }\n};\n\nEngine.prototype.disableVR = function () {\n  var _this = this;\n\n  if (this._vrDisplay && this._vrDisplay.isPresenting) {\n    this._vrDisplay.exitPresent().then(function () {\n      return _this._onVRFullScreenTriggered();\n    })[\"catch\"](function () {\n      return _this._onVRFullScreenTriggered();\n    });\n  }\n\n  if (IsWindowObjectExist()) {\n    window.removeEventListener(\"vrdisplaypointerrestricted\", this._onVRDisplayPointerRestricted);\n    window.removeEventListener(\"vrdisplaypointerunrestricted\", this._onVRDisplayPointerUnrestricted);\n\n    if (this._onVrDisplayConnect) {\n      window.removeEventListener(\"vrdisplayconnect\", this._onVrDisplayConnect);\n\n      if (this._onVrDisplayDisconnect) {\n        window.removeEventListener(\"vrdisplaydisconnect\", this._onVrDisplayDisconnect);\n      }\n\n      if (this._onVrDisplayPresentChange) {\n        window.removeEventListener(\"vrdisplaypresentchange\", this._onVrDisplayPresentChange);\n      }\n\n      this._onVrDisplayConnect = null;\n      this._onVrDisplayDisconnect = null;\n    }\n  }\n};\n\nEngine.prototype._connectVREvents = function (canvas, document) {\n  var _this = this;\n\n  this._onVRDisplayPointerRestricted = function () {\n    if (canvas) {\n      canvas.requestPointerLock();\n    }\n  };\n\n  this._onVRDisplayPointerUnrestricted = function () {\n    // Edge fix - for some reason document is not present and this is window\n    if (!document) {\n      var hostWindow = _this.getHostWindow();\n\n      if (hostWindow.document && hostWindow.document.exitPointerLock) {\n        hostWindow.document.exitPointerLock();\n      }\n\n      return;\n    }\n\n    if (!document.exitPointerLock) {\n      return;\n    }\n\n    document.exitPointerLock();\n  };\n\n  if (IsWindowObjectExist()) {\n    var hostWindow = this.getHostWindow();\n    hostWindow.addEventListener(\"vrdisplaypointerrestricted\", this._onVRDisplayPointerRestricted, false);\n    hostWindow.addEventListener(\"vrdisplaypointerunrestricted\", this._onVRDisplayPointerUnrestricted, false);\n  }\n};\n\nEngine.prototype._submitVRFrame = function () {\n  // Submit frame to the vr device, if enabled\n  if (this._vrDisplay && this._vrDisplay.isPresenting) {\n    // TODO: We should only submit the frame if we read frameData successfully.\n    try {\n      this._vrDisplay.submitFrame();\n    } catch (e) {\n      Tools.Warn(\"webVR submitFrame has had an unexpected failure: \" + e);\n    }\n  }\n};\n\nEngine.prototype.isVRPresenting = function () {\n  return this._vrDisplay && this._vrDisplay.isPresenting;\n};\n\nEngine.prototype._requestVRFrame = function () {\n  this._frameHandler = Engine.QueueNewFrame(this._boundRenderFunction, this._vrDisplay);\n};","map":{"version":3,"mappings":"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","names":["Engine","Size","Observable","Tools","IsWindowObjectExist","Object","defineProperty","prototype","get","_vrExclusivePointerMode","enumerable","configurable","_prepareVRComponent","_vrSupported","onVRDisplayChangedObservable","onVRRequestPresentComplete","onVRRequestPresentStart","isVRDevicePresent","_vrDisplay","getVRDevice","initWebVR","initWebVRAsync","notifyObservers","eventArgs","vrDisplay","_this","vrSupported","_webVRInitPromise","Promise","res","_onVrDisplayConnect","event","display","_onVrDisplayDisconnect","cancelAnimationFrame","_frameHandler","undefined","QueueNewFrame","_boundRenderFunction","_onVrDisplayPresentChange","isPresenting","hostWindow","getHostWindow","addEventListener","_getVRDisplaysAsync","then","navigator","getVRDisplays","devices","enableVR","options","onResolved","_onVRFullScreenTriggered","onRejected","presentationAttributes","highRefreshRate","vrPresentationAttributes","foveationLevel","multiview","getCaps","oculusMultiview","useMultiview","requestPresent","source","getRenderingCanvas","attributes","_oldSize","getRenderWidth","getRenderHeight","_oldHardwareScaleFactor","getHardwareScalingLevel","leftEye","getEyeParameters","setHardwareScalingLevel","setSize","renderWidth","renderHeight","width","height","disableVR","exitPresent","window","removeEventListener","_onVRDisplayPointerRestricted","_onVRDisplayPointerUnrestricted","_connectVREvents","canvas","document","requestPointerLock","exitPointerLock","_submitVRFrame","submitFrame","e","Warn","isVRPresenting","_requestVRFrame"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/Extensions/engine.webVR.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport type { IDisplayChangedEventArgs } from \"../../Engines/engine\";\r\nimport { Engine } from \"../../Engines/engine\";\r\nimport { Size } from \"../../Maths/math.size\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { Tools } from \"../../Misc/tools\";\r\nimport { IsWindowObjectExist } from \"../../Misc/domManagement\";\r\nimport type { WebVROptions } from \"../../Cameras/VR/webVRCamera\";\r\n\r\n/**\r\n * Interface used to define additional presentation attributes\r\n */\r\nexport interface IVRPresentationAttributes {\r\n    /**\r\n     * Defines a boolean indicating that we want to get 72hz mode on Oculus Browser (default is off eg. 60hz)\r\n     */\r\n    highRefreshRate: boolean;\r\n    /**\r\n     * Enables foveation in VR to improve perf. 0 none, 1 low, 2 medium, 3 high (Default is 1)\r\n     */\r\n    foveationLevel: number;\r\n}\r\n\r\ndeclare module \"../../Engines/engine\" {\r\n    export interface Engine {\r\n        /** @hidden */\r\n        _vrDisplay: any;\r\n        /** @hidden */\r\n        _vrSupported: boolean;\r\n        /** @hidden */\r\n        _oldSize: Size;\r\n        /** @hidden */\r\n        _oldHardwareScaleFactor: number;\r\n        /** @hidden */\r\n        _vrExclusivePointerMode: boolean;\r\n        /** @hidden */\r\n        _webVRInitPromise: Promise<IDisplayChangedEventArgs>;\r\n\r\n        /** @hidden */\r\n        _onVRDisplayPointerRestricted: () => void;\r\n        /** @hidden */\r\n        _onVRDisplayPointerUnrestricted: () => void;\r\n\r\n        /** @hidden */\r\n        _onVrDisplayConnect: Nullable<(display: any) => void>;\r\n        /** @hidden */\r\n        _onVrDisplayDisconnect: Nullable<() => void>;\r\n        /** @hidden */\r\n        _onVrDisplayPresentChange: Nullable<() => void>;\r\n\r\n        /**\r\n         * Observable signaled when VR display mode changes\r\n         */\r\n        onVRDisplayChangedObservable: Observable<IDisplayChangedEventArgs>;\r\n        /**\r\n         * Observable signaled when VR request present is complete\r\n         */\r\n        onVRRequestPresentComplete: Observable<boolean>;\r\n        /**\r\n         * Observable signaled when VR request present starts\r\n         */\r\n        onVRRequestPresentStart: Observable<Engine>;\r\n\r\n        /**\r\n         * Gets a boolean indicating that the engine is currently in VR exclusive mode for the pointers\r\n         * @see https://docs.microsoft.com/en-us/microsoft-edge/webvr/essentials#mouse-input\r\n         */\r\n        isInVRExclusivePointerMode: boolean;\r\n\r\n        /**\r\n         * Gets a boolean indicating if a webVR device was detected\r\n         * @returns true if a webVR device was detected\r\n         */\r\n        isVRDevicePresent(): boolean;\r\n\r\n        /**\r\n         * Gets the current webVR device\r\n         * @returns the current webVR device (or null)\r\n         */\r\n        getVRDevice(): any;\r\n\r\n        /**\r\n         * Initializes a webVR display and starts listening to display change events\r\n         * The onVRDisplayChangedObservable will be notified upon these changes\r\n         * @returns A promise containing a VRDisplay and if vr is supported\r\n         */\r\n        initWebVRAsync(): Promise<IDisplayChangedEventArgs>;\r\n\r\n        /** @hidden */\r\n        _getVRDisplaysAsync(): Promise<IDisplayChangedEventArgs>;\r\n\r\n        /**\r\n         * Gets or sets the presentation attributes used to configure VR rendering\r\n         */\r\n        vrPresentationAttributes?: IVRPresentationAttributes;\r\n\r\n        /**\r\n         * Call this function to switch to webVR mode\r\n         * Will do nothing if webVR is not supported or if there is no webVR device\r\n         * @param options the webvr options provided to the camera. mainly used for multiview\r\n         * @see https://doc.babylonjs.com/how_to/webvr_camera\r\n         */\r\n        enableVR(options: WebVROptions): void;\r\n\r\n        /** @hidden */\r\n        _onVRFullScreenTriggered(): void;\r\n    }\r\n}\r\n\r\nObject.defineProperty(Engine.prototype, \"isInVRExclusivePointerMode\", {\r\n    get: function (this: Engine) {\r\n        return this._vrExclusivePointerMode;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nEngine.prototype._prepareVRComponent = function () {\r\n    this._vrSupported = false;\r\n    this._vrExclusivePointerMode = false;\r\n    this.onVRDisplayChangedObservable = new Observable<IDisplayChangedEventArgs>();\r\n    this.onVRRequestPresentComplete = new Observable<boolean>();\r\n    this.onVRRequestPresentStart = new Observable<Engine>();\r\n};\r\n\r\nEngine.prototype.isVRDevicePresent = function () {\r\n    return !!this._vrDisplay;\r\n};\r\n\r\nEngine.prototype.getVRDevice = function (): any {\r\n    return this._vrDisplay;\r\n};\r\n\r\nEngine.prototype.initWebVR = function (): Observable<IDisplayChangedEventArgs> {\r\n    this.initWebVRAsync();\r\n    return this.onVRDisplayChangedObservable;\r\n};\r\n\r\nEngine.prototype.initWebVRAsync = function (): Promise<IDisplayChangedEventArgs> {\r\n    const notifyObservers = () => {\r\n        const eventArgs = {\r\n            vrDisplay: this._vrDisplay,\r\n            vrSupported: this._vrSupported,\r\n        };\r\n        this.onVRDisplayChangedObservable.notifyObservers(eventArgs);\r\n        this._webVRInitPromise = new Promise((res) => {\r\n            res(eventArgs);\r\n        });\r\n    };\r\n\r\n    if (!this._onVrDisplayConnect) {\r\n        this._onVrDisplayConnect = (event) => {\r\n            this._vrDisplay = event.display;\r\n            notifyObservers();\r\n        };\r\n        this._onVrDisplayDisconnect = () => {\r\n            this._vrDisplay.cancelAnimationFrame(this._frameHandler);\r\n            this._vrDisplay = undefined;\r\n            this._frameHandler = Engine.QueueNewFrame(this._boundRenderFunction);\r\n            notifyObservers();\r\n        };\r\n        this._onVrDisplayPresentChange = () => {\r\n            this._vrExclusivePointerMode = this._vrDisplay && this._vrDisplay.isPresenting;\r\n        };\r\n        const hostWindow = this.getHostWindow();\r\n        if (hostWindow) {\r\n            hostWindow.addEventListener(\"vrdisplayconnect\", this._onVrDisplayConnect);\r\n            hostWindow.addEventListener(\"vrdisplaydisconnect\", this._onVrDisplayDisconnect);\r\n            hostWindow.addEventListener(\"vrdisplaypresentchange\", this._onVrDisplayPresentChange);\r\n        }\r\n    }\r\n    this._webVRInitPromise = this._webVRInitPromise || this._getVRDisplaysAsync();\r\n    this._webVRInitPromise.then(notifyObservers);\r\n    return this._webVRInitPromise;\r\n};\r\n\r\nEngine.prototype._getVRDisplaysAsync = function (): Promise<IDisplayChangedEventArgs> {\r\n    return new Promise((res) => {\r\n        if (navigator.getVRDisplays) {\r\n            navigator.getVRDisplays().then((devices: Array<any>) => {\r\n                this._vrSupported = true;\r\n                // note that devices may actually be an empty array. This is fine;\r\n                // we expect this._vrDisplay to be undefined in this case.\r\n                this._vrDisplay = devices[0];\r\n                res({\r\n                    vrDisplay: this._vrDisplay,\r\n                    vrSupported: this._vrSupported,\r\n                });\r\n            });\r\n        } else {\r\n            this._vrDisplay = undefined;\r\n            this._vrSupported = false;\r\n            res({\r\n                vrDisplay: this._vrDisplay,\r\n                vrSupported: this._vrSupported,\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\nEngine.prototype.enableVR = function (options: WebVROptions) {\r\n    if (this._vrDisplay && !this._vrDisplay.isPresenting) {\r\n        const onResolved = () => {\r\n            this.onVRRequestPresentComplete.notifyObservers(true);\r\n            this._onVRFullScreenTriggered();\r\n        };\r\n        const onRejected = () => {\r\n            this.onVRRequestPresentComplete.notifyObservers(false);\r\n        };\r\n\r\n        this.onVRRequestPresentStart.notifyObservers(this);\r\n\r\n        const presentationAttributes = {\r\n            highRefreshRate: this.vrPresentationAttributes ? this.vrPresentationAttributes.highRefreshRate : false,\r\n            foveationLevel: this.vrPresentationAttributes ? this.vrPresentationAttributes.foveationLevel : 1,\r\n            multiview: (this.getCaps().multiview || this.getCaps().oculusMultiview) && options.useMultiview,\r\n        };\r\n\r\n        this._vrDisplay\r\n            .requestPresent([\r\n                {\r\n                    source: this.getRenderingCanvas(),\r\n                    attributes: presentationAttributes,\r\n                    ...presentationAttributes,\r\n                },\r\n            ])\r\n            .then(onResolved)\r\n            .catch(onRejected);\r\n    }\r\n};\r\n\r\nEngine.prototype._onVRFullScreenTriggered = function () {\r\n    if (this._vrDisplay && this._vrDisplay.isPresenting) {\r\n        //get the old size before we change\r\n        this._oldSize = new Size(this.getRenderWidth(), this.getRenderHeight());\r\n        this._oldHardwareScaleFactor = this.getHardwareScalingLevel();\r\n\r\n        //get the width and height, change the render size\r\n        const leftEye = this._vrDisplay.getEyeParameters(\"left\");\r\n        this.setHardwareScalingLevel(1);\r\n        this.setSize(leftEye.renderWidth * 2, leftEye.renderHeight);\r\n    } else {\r\n        this.setHardwareScalingLevel(this._oldHardwareScaleFactor);\r\n        this.setSize(this._oldSize.width, this._oldSize.height);\r\n    }\r\n};\r\n\r\nEngine.prototype.disableVR = function () {\r\n    if (this._vrDisplay && this._vrDisplay.isPresenting) {\r\n        this._vrDisplay\r\n            .exitPresent()\r\n            .then(() => this._onVRFullScreenTriggered())\r\n            .catch(() => this._onVRFullScreenTriggered());\r\n    }\r\n\r\n    if (IsWindowObjectExist()) {\r\n        window.removeEventListener(\"vrdisplaypointerrestricted\", this._onVRDisplayPointerRestricted);\r\n        window.removeEventListener(\"vrdisplaypointerunrestricted\", this._onVRDisplayPointerUnrestricted);\r\n\r\n        if (this._onVrDisplayConnect) {\r\n            window.removeEventListener(\"vrdisplayconnect\", this._onVrDisplayConnect);\r\n            if (this._onVrDisplayDisconnect) {\r\n                window.removeEventListener(\"vrdisplaydisconnect\", this._onVrDisplayDisconnect);\r\n            }\r\n\r\n            if (this._onVrDisplayPresentChange) {\r\n                window.removeEventListener(\"vrdisplaypresentchange\", this._onVrDisplayPresentChange);\r\n            }\r\n            this._onVrDisplayConnect = null;\r\n            this._onVrDisplayDisconnect = null;\r\n        }\r\n    }\r\n};\r\n\r\nEngine.prototype._connectVREvents = function (canvas?: HTMLCanvasElement, document?: any) {\r\n    this._onVRDisplayPointerRestricted = () => {\r\n        if (canvas) {\r\n            canvas.requestPointerLock();\r\n        }\r\n    };\r\n\r\n    this._onVRDisplayPointerUnrestricted = () => {\r\n        // Edge fix - for some reason document is not present and this is window\r\n        if (!document) {\r\n            const hostWindow = this.getHostWindow()!;\r\n            if (hostWindow.document && hostWindow.document.exitPointerLock) {\r\n                hostWindow.document.exitPointerLock();\r\n            }\r\n            return;\r\n        }\r\n        if (!document.exitPointerLock) {\r\n            return;\r\n        }\r\n        document.exitPointerLock();\r\n    };\r\n\r\n    if (IsWindowObjectExist()) {\r\n        const hostWindow = this.getHostWindow()!;\r\n        hostWindow.addEventListener(\"vrdisplaypointerrestricted\", this._onVRDisplayPointerRestricted, false);\r\n        hostWindow.addEventListener(\"vrdisplaypointerunrestricted\", this._onVRDisplayPointerUnrestricted, false);\r\n    }\r\n};\r\n\r\nEngine.prototype._submitVRFrame = function () {\r\n    // Submit frame to the vr device, if enabled\r\n    if (this._vrDisplay && this._vrDisplay.isPresenting) {\r\n        // TODO: We should only submit the frame if we read frameData successfully.\r\n        try {\r\n            this._vrDisplay.submitFrame();\r\n        } catch (e) {\r\n            Tools.Warn(\"webVR submitFrame has had an unexpected failure: \" + e);\r\n        }\r\n    }\r\n};\r\n\r\nEngine.prototype.isVRPresenting = function () {\r\n    return this._vrDisplay && this._vrDisplay.isPresenting;\r\n};\r\n\r\nEngine.prototype._requestVRFrame = function () {\r\n    this._frameHandler = Engine.QueueNewFrame(this._boundRenderFunction, this._vrDisplay);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}