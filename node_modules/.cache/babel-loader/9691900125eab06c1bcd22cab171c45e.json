{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.last-index-of.js\";\nimport { ShaderLanguage } from \"../../Materials/shaderLanguage.js\";\nimport * as WebGPUConstants from \"./webgpuConstants.js\";\n/** @hidden */\n\nvar WebGPUShaderProcessor =\n/** @class */\nfunction () {\n  function WebGPUShaderProcessor() {\n    this.shaderLanguage = ShaderLanguage.GLSL;\n  }\n\n  WebGPUShaderProcessor.prototype._addUniformToLeftOverUBO = function (name, uniformType, preProcessors) {\n    var _a;\n\n    var length = 0;\n    _a = this._getArraySize(name, uniformType, preProcessors), name = _a[0], uniformType = _a[1], length = _a[2];\n\n    for (var i = 0; i < this._webgpuProcessingContext.leftOverUniforms.length; i++) {\n      if (this._webgpuProcessingContext.leftOverUniforms[i].name === name) {\n        return;\n      }\n    }\n\n    this._webgpuProcessingContext.leftOverUniforms.push({\n      name: name,\n      type: uniformType,\n      length: length\n    });\n  };\n\n  WebGPUShaderProcessor.prototype._buildLeftOverUBO = function () {\n    if (!this._webgpuProcessingContext.leftOverUniforms.length) {\n      return \"\";\n    }\n\n    var name = WebGPUShaderProcessor.LeftOvertUBOName;\n    var availableUBO = this._webgpuProcessingContext.availableBuffers[name];\n\n    if (!availableUBO) {\n      availableUBO = {\n        binding: this._webgpuProcessingContext.getNextFreeUBOBinding()\n      };\n      this._webgpuProcessingContext.availableBuffers[name] = availableUBO;\n\n      this._addBufferBindingDescription(name, availableUBO, WebGPUConstants.BufferBindingType.Uniform, true);\n\n      this._addBufferBindingDescription(name, availableUBO, WebGPUConstants.BufferBindingType.Uniform, false);\n    }\n\n    return this._generateLeftOverUBOCode(name, availableUBO);\n  };\n\n  WebGPUShaderProcessor.prototype._collectBindingNames = function () {\n    // collect all the binding names for faster processing in WebGPUCacheBindGroup\n    for (var i = 0; i < this._webgpuProcessingContext.bindGroupLayoutEntries.length; i++) {\n      var setDefinition = this._webgpuProcessingContext.bindGroupLayoutEntries[i];\n\n      if (setDefinition === undefined) {\n        this._webgpuProcessingContext.bindGroupLayoutEntries[i] = [];\n        continue;\n      }\n\n      for (var j = 0; j < setDefinition.length; j++) {\n        var entry = this._webgpuProcessingContext.bindGroupLayoutEntries[i][j];\n        var name_1 = this._webgpuProcessingContext.bindGroupLayoutEntryInfo[i][entry.binding].name;\n        var nameInArrayOfTexture = this._webgpuProcessingContext.bindGroupLayoutEntryInfo[i][entry.binding].nameInArrayOfTexture;\n\n        if (entry) {\n          if (entry.texture || entry.externalTexture || entry.storageTexture) {\n            this._webgpuProcessingContext.textureNames.push(nameInArrayOfTexture);\n          } else if (entry.sampler) {\n            this._webgpuProcessingContext.samplerNames.push(name_1);\n          } else if (entry.buffer) {\n            this._webgpuProcessingContext.bufferNames.push(name_1);\n          }\n        }\n      }\n    }\n  };\n\n  WebGPUShaderProcessor.prototype._preCreateBindGroupEntries = function () {\n    var bindGroupEntries = this._webgpuProcessingContext.bindGroupEntries;\n\n    for (var i = 0; i < this._webgpuProcessingContext.bindGroupLayoutEntries.length; i++) {\n      var setDefinition = this._webgpuProcessingContext.bindGroupLayoutEntries[i];\n      var entries = [];\n\n      for (var j = 0; j < setDefinition.length; j++) {\n        var entry = this._webgpuProcessingContext.bindGroupLayoutEntries[i][j];\n\n        if (entry.sampler || entry.texture || entry.storageTexture || entry.externalTexture) {\n          entries.push({\n            binding: entry.binding,\n            resource: undefined\n          });\n        } else if (entry.buffer) {\n          entries.push({\n            binding: entry.binding,\n            resource: {\n              buffer: undefined,\n              offset: 0,\n              size: 0\n            }\n          });\n        }\n      }\n\n      bindGroupEntries[i] = entries;\n    }\n  };\n\n  WebGPUShaderProcessor.prototype._addTextureBindingDescription = function (name, textureInfo, textureIndex, dimension, format, isVertex) {\n    // eslint-disable-next-line prefer-const\n    var _a = textureInfo.textures[textureIndex],\n        groupIndex = _a.groupIndex,\n        bindingIndex = _a.bindingIndex;\n\n    if (!this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex]) {\n      this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex] = [];\n      this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex] = [];\n    }\n\n    if (!this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex]) {\n      var len = void 0;\n\n      if (dimension === null) {\n        len = this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex].push({\n          binding: bindingIndex,\n          visibility: 0,\n          externalTexture: {}\n        });\n      } else if (format) {\n        len = this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex].push({\n          binding: bindingIndex,\n          visibility: 0,\n          storageTexture: {\n            access: WebGPUConstants.StorageTextureAccess.WriteOnly,\n            format: format,\n            viewDimension: dimension\n          }\n        });\n      } else {\n        len = this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex].push({\n          binding: bindingIndex,\n          visibility: 0,\n          texture: {\n            sampleType: textureInfo.sampleType,\n            viewDimension: dimension,\n            multisampled: false\n          }\n        });\n      }\n\n      var textureName = textureInfo.isTextureArray ? name + textureIndex : name;\n      this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex] = {\n        name: name,\n        index: len - 1,\n        nameInArrayOfTexture: textureName\n      };\n    }\n\n    bindingIndex = this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex].index;\n\n    if (isVertex) {\n      this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Vertex;\n    } else {\n      this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Fragment;\n    }\n  };\n\n  WebGPUShaderProcessor.prototype._addSamplerBindingDescription = function (name, samplerInfo, isVertex) {\n    // eslint-disable-next-line prefer-const\n    var _a = samplerInfo.binding,\n        groupIndex = _a.groupIndex,\n        bindingIndex = _a.bindingIndex;\n\n    if (!this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex]) {\n      this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex] = [];\n      this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex] = [];\n    }\n\n    if (!this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex]) {\n      var len = this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex].push({\n        binding: bindingIndex,\n        visibility: 0,\n        sampler: {\n          type: samplerInfo.type\n        }\n      });\n\n      this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex] = {\n        name: name,\n        index: len - 1\n      };\n    }\n\n    bindingIndex = this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex].index;\n\n    if (isVertex) {\n      this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Vertex;\n    } else {\n      this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Fragment;\n    }\n  };\n\n  WebGPUShaderProcessor.prototype._addBufferBindingDescription = function (name, uniformBufferInfo, bufferType, isVertex) {\n    // eslint-disable-next-line prefer-const\n    var _a = uniformBufferInfo.binding,\n        groupIndex = _a.groupIndex,\n        bindingIndex = _a.bindingIndex;\n\n    if (!this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex]) {\n      this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex] = [];\n      this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex] = [];\n    }\n\n    if (!this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex]) {\n      var len = this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex].push({\n        binding: bindingIndex,\n        visibility: 0,\n        buffer: {\n          type: bufferType\n        }\n      });\n\n      this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex] = {\n        name: name,\n        index: len - 1\n      };\n    }\n\n    bindingIndex = this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex].index;\n\n    if (isVertex) {\n      this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Vertex;\n    } else {\n      this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Fragment;\n    }\n  };\n\n  WebGPUShaderProcessor.prototype._injectStartingAndEndingCode = function (code, mainFuncDecl, startingCode, endingCode) {\n    if (startingCode) {\n      var idx = code.indexOf(mainFuncDecl);\n\n      if (idx >= 0) {\n        // eslint-disable-next-line no-empty\n        while (idx++ < code.length && code.charAt(idx) != \"{\") {}\n\n        if (idx < code.length) {\n          // eslint-disable-next-line no-empty\n          while (idx++ < code.length && code.charAt(idx) != \"\\n\") {}\n\n          if (idx < code.length) {\n            var part1 = code.substring(0, idx + 1);\n            var part2 = code.substring(idx + 1);\n            code = part1 + startingCode + part2;\n          }\n        }\n      }\n    }\n\n    if (endingCode) {\n      var lastClosingCurly = code.lastIndexOf(\"}\");\n      code = code.substring(0, lastClosingCurly);\n      code += endingCode + \"\\n}\";\n    }\n\n    return code;\n  };\n\n  WebGPUShaderProcessor.AutoSamplerSuffix = \"Sampler\";\n  WebGPUShaderProcessor.LeftOvertUBOName = \"LeftOver\";\n  WebGPUShaderProcessor.InternalsUBOName = \"Internals\";\n  WebGPUShaderProcessor.UniformSizes = {\n    // GLSL types\n    bool: 1,\n    \"int\": 1,\n    \"float\": 1,\n    vec2: 2,\n    ivec2: 2,\n    vec3: 3,\n    ivec3: 3,\n    vec4: 4,\n    ivec4: 4,\n    mat2: 4,\n    mat3: 12,\n    mat4: 16,\n    // WGSL types\n    i32: 1,\n    u32: 1,\n    f32: 1,\n    mat2x2: 4,\n    mat3x3: 12,\n    mat4x4: 16\n  }; // eslint-disable-next-line @typescript-eslint/naming-convention\n\n  WebGPUShaderProcessor._SamplerFunctionByWebGLSamplerType = {\n    sampler2D: \"sampler2D\",\n    sampler2DArray: \"sampler2DArray\",\n    sampler2DShadow: \"sampler2DShadow\",\n    sampler2DArrayShadow: \"sampler2DArrayShadow\",\n    samplerCube: \"samplerCube\",\n    sampler3D: \"sampler3D\"\n  }; // eslint-disable-next-line @typescript-eslint/naming-convention\n\n  WebGPUShaderProcessor._TextureTypeByWebGLSamplerType = {\n    sampler2D: \"texture2D\",\n    sampler2DArray: \"texture2DArray\",\n    sampler2DShadow: \"texture2D\",\n    sampler2DArrayShadow: \"texture2DArray\",\n    samplerCube: \"textureCube\",\n    samplerCubeArray: \"textureCubeArray\",\n    sampler3D: \"texture3D\"\n  }; // eslint-disable-next-line @typescript-eslint/naming-convention\n\n  WebGPUShaderProcessor._GpuTextureViewDimensionByWebGPUTextureType = {\n    textureCube: WebGPUConstants.TextureViewDimension.Cube,\n    textureCubeArray: WebGPUConstants.TextureViewDimension.CubeArray,\n    texture2D: WebGPUConstants.TextureViewDimension.E2d,\n    texture2DArray: WebGPUConstants.TextureViewDimension.E2dArray,\n    texture3D: WebGPUConstants.TextureViewDimension.E3d\n  }; // if the webgl sampler type is not listed in this array, \"sampler\" is taken by default\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n\n  WebGPUShaderProcessor._SamplerTypeByWebGLSamplerType = {\n    sampler2DShadow: \"samplerShadow\",\n    sampler2DArrayShadow: \"samplerShadow\"\n  }; // eslint-disable-next-line @typescript-eslint/naming-convention\n\n  WebGPUShaderProcessor._IsComparisonSamplerByWebGPUSamplerType = {\n    samplerShadow: true,\n    samplerArrayShadow: true,\n    sampler: false\n  };\n  return WebGPUShaderProcessor;\n}();\n\nexport { WebGPUShaderProcessor };","map":{"version":3,"mappings":"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","names":["ShaderLanguage","WebGPUConstants","GLSL","WebGPUShaderProcessor","name","uniformType","preProcessors","length","_a","_getArraySize","i","_webgpuProcessingContext","leftOverUniforms","push","type","LeftOvertUBOName","availableUBO","availableBuffers","binding","getNextFreeUBOBinding","_addBufferBindingDescription","BufferBindingType","Uniform","_generateLeftOverUBOCode","bindGroupLayoutEntries","setDefinition","undefined","j","entry","name_1","bindGroupLayoutEntryInfo","nameInArrayOfTexture","texture","externalTexture","storageTexture","textureNames","sampler","samplerNames","buffer","bufferNames","bindGroupEntries","entries","resource","offset","size","textureInfo","textureIndex","dimension","format","isVertex","textures","groupIndex","bindingIndex","len","visibility","access","StorageTextureAccess","WriteOnly","viewDimension","sampleType","multisampled","textureName","isTextureArray","index","ShaderStage","Vertex","Fragment","samplerInfo","uniformBufferInfo","bufferType","code","mainFuncDecl","startingCode","endingCode","idx","indexOf","charAt","part1","substring","part2","lastClosingCurly","lastIndexOf","bool","vec2","ivec2","vec3","ivec3","vec4","ivec4","mat2","mat3","mat4","i32","u32","f32","mat2x2","mat3x3","mat4x4","sampler2D","sampler2DArray","sampler2DShadow","sampler2DArrayShadow","samplerCube","sampler3D","samplerCubeArray","textureCube","TextureViewDimension","Cube","textureCubeArray","CubeArray","texture2D","E2d","texture2DArray","E2dArray","texture3D","E3d","samplerShadow","samplerArrayShadow"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/WebGPU/webgpuShaderProcessor.ts"],"sourcesContent":["import { ShaderLanguage } from \"../../Materials/shaderLanguage\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { IShaderProcessor } from \"../Processors/iShaderProcessor\";\r\nimport * as WebGPUConstants from \"./webgpuConstants\";\r\nimport type { WebGPUSamplerDescription, WebGPUShaderProcessingContext, WebGPUTextureDescription, WebGPUBufferDescription } from \"./webgpuShaderProcessingContext\";\r\n\r\n/** @hidden */\r\nexport abstract class WebGPUShaderProcessor implements IShaderProcessor {\r\n    public static readonly AutoSamplerSuffix = \"Sampler\";\r\n    public static readonly LeftOvertUBOName = \"LeftOver\";\r\n    public static readonly InternalsUBOName = \"Internals\";\r\n\r\n    public static UniformSizes: { [type: string]: number } = {\r\n        // GLSL types\r\n        bool: 1,\r\n        int: 1,\r\n        float: 1,\r\n        vec2: 2,\r\n        ivec2: 2,\r\n        vec3: 3,\r\n        ivec3: 3,\r\n        vec4: 4,\r\n        ivec4: 4,\r\n        mat2: 4,\r\n        mat3: 12,\r\n        mat4: 16,\r\n\r\n        // WGSL types\r\n        i32: 1,\r\n        u32: 1,\r\n        f32: 1,\r\n        mat2x2: 4,\r\n        mat3x3: 12,\r\n        mat4x4: 16,\r\n    };\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected static _SamplerFunctionByWebGLSamplerType: { [key: string]: string } = {\r\n        sampler2D: \"sampler2D\",\r\n        sampler2DArray: \"sampler2DArray\",\r\n        sampler2DShadow: \"sampler2DShadow\",\r\n        sampler2DArrayShadow: \"sampler2DArrayShadow\",\r\n        samplerCube: \"samplerCube\",\r\n        sampler3D: \"sampler3D\",\r\n    };\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected static _TextureTypeByWebGLSamplerType: { [key: string]: string } = {\r\n        sampler2D: \"texture2D\",\r\n        sampler2DArray: \"texture2DArray\",\r\n        sampler2DShadow: \"texture2D\",\r\n        sampler2DArrayShadow: \"texture2DArray\",\r\n        samplerCube: \"textureCube\",\r\n        samplerCubeArray: \"textureCubeArray\",\r\n        sampler3D: \"texture3D\",\r\n    };\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected static _GpuTextureViewDimensionByWebGPUTextureType: { [key: string]: GPUTextureViewDimension } = {\r\n        textureCube: WebGPUConstants.TextureViewDimension.Cube,\r\n        textureCubeArray: WebGPUConstants.TextureViewDimension.CubeArray,\r\n        texture2D: WebGPUConstants.TextureViewDimension.E2d,\r\n        texture2DArray: WebGPUConstants.TextureViewDimension.E2dArray,\r\n        texture3D: WebGPUConstants.TextureViewDimension.E3d,\r\n    };\r\n\r\n    // if the webgl sampler type is not listed in this array, \"sampler\" is taken by default\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected static _SamplerTypeByWebGLSamplerType: { [key: string]: string } = {\r\n        sampler2DShadow: \"samplerShadow\",\r\n        sampler2DArrayShadow: \"samplerShadow\",\r\n    };\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected static _IsComparisonSamplerByWebGPUSamplerType: { [key: string]: boolean } = {\r\n        samplerShadow: true,\r\n        samplerArrayShadow: true,\r\n        sampler: false,\r\n    };\r\n\r\n    public shaderLanguage = ShaderLanguage.GLSL;\r\n\r\n    protected _webgpuProcessingContext: WebGPUShaderProcessingContext;\r\n\r\n    protected abstract _getArraySize(name: string, type: string, preProcessors: { [key: string]: string }): [string, string, number];\r\n    protected abstract _generateLeftOverUBOCode(name: string, uniformBufferDescription: WebGPUBufferDescription): string;\r\n\r\n    protected _addUniformToLeftOverUBO(name: string, uniformType: string, preProcessors: { [key: string]: string }): void {\r\n        let length = 0;\r\n\r\n        [name, uniformType, length] = this._getArraySize(name, uniformType, preProcessors);\r\n\r\n        for (let i = 0; i < this._webgpuProcessingContext.leftOverUniforms.length; i++) {\r\n            if (this._webgpuProcessingContext.leftOverUniforms[i].name === name) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        this._webgpuProcessingContext.leftOverUniforms.push({\r\n            name,\r\n            type: uniformType,\r\n            length,\r\n        });\r\n    }\r\n\r\n    protected _buildLeftOverUBO(): string {\r\n        if (!this._webgpuProcessingContext.leftOverUniforms.length) {\r\n            return \"\";\r\n        }\r\n        const name = WebGPUShaderProcessor.LeftOvertUBOName;\r\n        let availableUBO = this._webgpuProcessingContext.availableBuffers[name];\r\n        if (!availableUBO) {\r\n            availableUBO = {\r\n                binding: this._webgpuProcessingContext.getNextFreeUBOBinding(),\r\n            };\r\n            this._webgpuProcessingContext.availableBuffers[name] = availableUBO;\r\n            this._addBufferBindingDescription(name, availableUBO, WebGPUConstants.BufferBindingType.Uniform, true);\r\n            this._addBufferBindingDescription(name, availableUBO, WebGPUConstants.BufferBindingType.Uniform, false);\r\n        }\r\n\r\n        return this._generateLeftOverUBOCode(name, availableUBO);\r\n    }\r\n\r\n    protected _collectBindingNames(): void {\r\n        // collect all the binding names for faster processing in WebGPUCacheBindGroup\r\n        for (let i = 0; i < this._webgpuProcessingContext.bindGroupLayoutEntries.length; i++) {\r\n            const setDefinition = this._webgpuProcessingContext.bindGroupLayoutEntries[i];\r\n            if (setDefinition === undefined) {\r\n                this._webgpuProcessingContext.bindGroupLayoutEntries[i] = [];\r\n                continue;\r\n            }\r\n            for (let j = 0; j < setDefinition.length; j++) {\r\n                const entry = this._webgpuProcessingContext.bindGroupLayoutEntries[i][j];\r\n                const name = this._webgpuProcessingContext.bindGroupLayoutEntryInfo[i][entry.binding].name;\r\n                const nameInArrayOfTexture = this._webgpuProcessingContext.bindGroupLayoutEntryInfo[i][entry.binding].nameInArrayOfTexture;\r\n                if (entry) {\r\n                    if (entry.texture || entry.externalTexture || entry.storageTexture) {\r\n                        this._webgpuProcessingContext.textureNames.push(nameInArrayOfTexture!);\r\n                    } else if (entry.sampler) {\r\n                        this._webgpuProcessingContext.samplerNames.push(name);\r\n                    } else if (entry.buffer) {\r\n                        this._webgpuProcessingContext.bufferNames.push(name);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _preCreateBindGroupEntries(): void {\r\n        const bindGroupEntries = this._webgpuProcessingContext.bindGroupEntries;\r\n\r\n        for (let i = 0; i < this._webgpuProcessingContext.bindGroupLayoutEntries.length; i++) {\r\n            const setDefinition = this._webgpuProcessingContext.bindGroupLayoutEntries[i];\r\n\r\n            const entries: GPUBindGroupEntry[] = [];\r\n            for (let j = 0; j < setDefinition.length; j++) {\r\n                const entry = this._webgpuProcessingContext.bindGroupLayoutEntries[i][j];\r\n\r\n                if (entry.sampler || entry.texture || entry.storageTexture || entry.externalTexture) {\r\n                    entries.push({\r\n                        binding: entry.binding,\r\n                        resource: undefined as any,\r\n                    });\r\n                } else if (entry.buffer) {\r\n                    entries.push({\r\n                        binding: entry.binding,\r\n                        resource: {\r\n                            buffer: undefined as any,\r\n                            offset: 0,\r\n                            size: 0,\r\n                        },\r\n                    });\r\n                }\r\n            }\r\n\r\n            bindGroupEntries[i] = entries;\r\n        }\r\n    }\r\n\r\n    protected _addTextureBindingDescription(\r\n        name: string,\r\n        textureInfo: WebGPUTextureDescription,\r\n        textureIndex: number,\r\n        dimension: Nullable<GPUTextureViewDimension>,\r\n        format: Nullable<GPUTextureFormat>,\r\n        isVertex: boolean\r\n    ): void {\r\n        // eslint-disable-next-line prefer-const\r\n        let { groupIndex, bindingIndex } = textureInfo.textures[textureIndex];\r\n        if (!this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex]) {\r\n            this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex] = [];\r\n            this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex] = [];\r\n        }\r\n        if (!this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex]) {\r\n            let len;\r\n            if (dimension === null) {\r\n                len = this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex].push({\r\n                    binding: bindingIndex,\r\n                    visibility: 0,\r\n                    externalTexture: {},\r\n                });\r\n            } else if (format) {\r\n                len = this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex].push({\r\n                    binding: bindingIndex,\r\n                    visibility: 0,\r\n                    storageTexture: {\r\n                        access: WebGPUConstants.StorageTextureAccess.WriteOnly,\r\n                        format,\r\n                        viewDimension: dimension,\r\n                    },\r\n                });\r\n            } else {\r\n                len = this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex].push({\r\n                    binding: bindingIndex,\r\n                    visibility: 0,\r\n                    texture: {\r\n                        sampleType: textureInfo.sampleType,\r\n                        viewDimension: dimension,\r\n                        multisampled: false,\r\n                    },\r\n                });\r\n            }\r\n            const textureName = textureInfo.isTextureArray ? name + textureIndex : name;\r\n            this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex] = { name, index: len - 1, nameInArrayOfTexture: textureName };\r\n        }\r\n\r\n        bindingIndex = this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex].index;\r\n        if (isVertex) {\r\n            this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Vertex;\r\n        } else {\r\n            this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Fragment;\r\n        }\r\n    }\r\n\r\n    protected _addSamplerBindingDescription(name: string, samplerInfo: WebGPUSamplerDescription, isVertex: boolean): void {\r\n        // eslint-disable-next-line prefer-const\r\n        let { groupIndex, bindingIndex } = samplerInfo.binding;\r\n        if (!this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex]) {\r\n            this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex] = [];\r\n            this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex] = [];\r\n        }\r\n        if (!this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex]) {\r\n            const len = this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex].push({\r\n                binding: bindingIndex,\r\n                visibility: 0,\r\n                sampler: {\r\n                    type: samplerInfo.type,\r\n                },\r\n            });\r\n            this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex] = { name, index: len - 1 };\r\n        }\r\n\r\n        bindingIndex = this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex].index;\r\n        if (isVertex) {\r\n            this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Vertex;\r\n        } else {\r\n            this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Fragment;\r\n        }\r\n    }\r\n\r\n    protected _addBufferBindingDescription(name: string, uniformBufferInfo: WebGPUBufferDescription, bufferType: GPUBufferBindingType, isVertex: boolean): void {\r\n        // eslint-disable-next-line prefer-const\r\n        let { groupIndex, bindingIndex } = uniformBufferInfo.binding;\r\n        if (!this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex]) {\r\n            this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex] = [];\r\n            this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex] = [];\r\n        }\r\n        if (!this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex]) {\r\n            const len = this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex].push({\r\n                binding: bindingIndex,\r\n                visibility: 0,\r\n                buffer: {\r\n                    type: bufferType,\r\n                },\r\n            });\r\n            this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex] = { name, index: len - 1 };\r\n        }\r\n\r\n        bindingIndex = this._webgpuProcessingContext.bindGroupLayoutEntryInfo[groupIndex][bindingIndex].index;\r\n        if (isVertex) {\r\n            this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Vertex;\r\n        } else {\r\n            this._webgpuProcessingContext.bindGroupLayoutEntries[groupIndex][bindingIndex].visibility |= WebGPUConstants.ShaderStage.Fragment;\r\n        }\r\n    }\r\n\r\n    protected _injectStartingAndEndingCode(code: string, mainFuncDecl: string, startingCode?: string, endingCode?: string): string {\r\n        if (startingCode) {\r\n            let idx = code.indexOf(mainFuncDecl);\r\n            if (idx >= 0) {\r\n                // eslint-disable-next-line no-empty\r\n                while (idx++ < code.length && code.charAt(idx) != \"{\") {}\r\n                if (idx < code.length) {\r\n                    // eslint-disable-next-line no-empty\r\n                    while (idx++ < code.length && code.charAt(idx) != \"\\n\") {}\r\n                    if (idx < code.length) {\r\n                        const part1 = code.substring(0, idx + 1);\r\n                        const part2 = code.substring(idx + 1);\r\n                        code = part1 + startingCode + part2;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (endingCode) {\r\n            const lastClosingCurly = code.lastIndexOf(\"}\");\r\n            code = code.substring(0, lastClosingCurly);\r\n            code += endingCode + \"\\n}\";\r\n        }\r\n\r\n        return code;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}