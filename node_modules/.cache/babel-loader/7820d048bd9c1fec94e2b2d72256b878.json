{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { __decorate, __extends } from \"tslib\";\nimport { serialize, serializeAsVector3 } from \"../Misc/decorators.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport { TargetCamera } from \"./targetCamera.js\";\nimport { FlyCameraInputsManager } from \"./flyCameraInputsManager.js\";\nimport { Tools } from \"../Misc/tools.js\";\n/**\n * This is a flying camera, designed for 3D movement and rotation in all directions,\n * such as in a 3D Space Shooter or a Flight Simulator.\n */\n\nvar FlyCamera =\n/** @class */\nfunction (_super) {\n  __extends(FlyCamera, _super);\n  /**\n   * Instantiates a FlyCamera.\n   * This is a flying camera, designed for 3D movement and rotation in all directions,\n   * such as in a 3D Space Shooter or a Flight Simulator.\n   * @param name Define the name of the camera in the scene.\n   * @param position Define the starting position of the camera in the scene.\n   * @param scene Define the scene the camera belongs to.\n   * @param setActiveOnSceneIfNoneActive Defines whether the camera should be marked as active, if no other camera has been defined as active.\n   */\n\n\n  function FlyCamera(name, position, scene, setActiveOnSceneIfNoneActive) {\n    if (setActiveOnSceneIfNoneActive === void 0) {\n      setActiveOnSceneIfNoneActive = true;\n    }\n\n    var _this = _super.call(this, name, position, scene, setActiveOnSceneIfNoneActive) || this;\n    /**\n     * Define the collision ellipsoid of the camera.\n     * This is helpful for simulating a camera body, like a player's body.\n     * @see https://doc.babylonjs.com/babylon101/cameras,_mesh_collisions_and_gravity#arcrotatecamera\n     */\n\n\n    _this.ellipsoid = new Vector3(1, 1, 1);\n    /**\n     * Define an offset for the position of the ellipsoid around the camera.\n     * This can be helpful if the camera is attached away from the player's body center,\n     * such as at its head.\n     */\n\n    _this.ellipsoidOffset = new Vector3(0, 0, 0);\n    /**\n     * Enable or disable collisions of the camera with the rest of the scene objects.\n     */\n\n    _this.checkCollisions = false;\n    /**\n     * Enable or disable gravity on the camera.\n     */\n\n    _this.applyGravity = false;\n    /**\n     * Define the current direction the camera is moving to.\n     */\n\n    _this.cameraDirection = Vector3.Zero();\n    /**\n     * Track Roll to maintain the wanted Rolling when looking around.\n     */\n\n    _this._trackRoll = 0;\n    /**\n     * Slowly correct the Roll to its original value after a Pitch+Yaw rotation.\n     */\n\n    _this.rollCorrect = 100;\n    /**\n     * Mimic a banked turn, Rolling the camera when Yawing.\n     * It's recommended to use rollCorrect = 10 for faster banking correction.\n     */\n\n    _this.bankedTurn = false;\n    /**\n     * Limit in radians for how much Roll banking will add. (Default: 90Â°)\n     */\n\n    _this.bankedTurnLimit = Math.PI / 2;\n    /**\n     * Value of 0 disables the banked Roll.\n     * Value of 1 is equal to the Yaw angle in radians.\n     */\n\n    _this.bankedTurnMultiplier = 1;\n    _this._needMoveForGravity = false;\n    _this._oldPosition = Vector3.Zero();\n    _this._diffPosition = Vector3.Zero();\n    _this._newPosition = Vector3.Zero(); // Collisions.\n\n    _this._collisionMask = -1;\n    /**\n     * @param collisionId\n     * @param newPosition\n     * @param collidedMesh\n     * @hidden\n     */\n\n    _this._onCollisionPositionChange = function (collisionId, newPosition, collidedMesh) {\n      if (collidedMesh === void 0) {\n        collidedMesh = null;\n      }\n\n      var updatePosition = function updatePosition(newPos) {\n        _this._newPosition.copyFrom(newPos);\n\n        _this._newPosition.subtractToRef(_this._oldPosition, _this._diffPosition);\n\n        if (_this._diffPosition.length() > Engine.CollisionsEpsilon) {\n          _this.position.addInPlace(_this._diffPosition);\n\n          if (_this.onCollide && collidedMesh) {\n            _this.onCollide(collidedMesh);\n          }\n        }\n      };\n\n      updatePosition(newPosition);\n    };\n\n    _this.inputs = new FlyCameraInputsManager(_this);\n\n    _this.inputs.addKeyboard().addMouse();\n\n    return _this;\n  }\n\n  Object.defineProperty(FlyCamera.prototype, \"angularSensibility\", {\n    /**\n     * Gets the input sensibility for mouse input.\n     * Higher values reduce sensitivity.\n     */\n    get: function get() {\n      var mouse = this.inputs.attached[\"mouse\"];\n\n      if (mouse) {\n        return mouse.angularSensibility;\n      }\n\n      return 0;\n    },\n\n    /**\n     * Sets the input sensibility for a mouse input.\n     * Higher values reduce sensitivity.\n     */\n    set: function set(value) {\n      var mouse = this.inputs.attached[\"mouse\"];\n\n      if (mouse) {\n        mouse.angularSensibility = value;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FlyCamera.prototype, \"keysForward\", {\n    /**\n     * Get the keys for camera movement forward.\n     */\n    get: function get() {\n      var keyboard = this.inputs.attached[\"keyboard\"];\n\n      if (keyboard) {\n        return keyboard.keysForward;\n      }\n\n      return [];\n    },\n\n    /**\n     * Set the keys for camera movement forward.\n     */\n    set: function set(value) {\n      var keyboard = this.inputs.attached[\"keyboard\"];\n\n      if (keyboard) {\n        keyboard.keysForward = value;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FlyCamera.prototype, \"keysBackward\", {\n    /**\n     * Get the keys for camera movement backward.\n     */\n    get: function get() {\n      var keyboard = this.inputs.attached[\"keyboard\"];\n\n      if (keyboard) {\n        return keyboard.keysBackward;\n      }\n\n      return [];\n    },\n    set: function set(value) {\n      var keyboard = this.inputs.attached[\"keyboard\"];\n\n      if (keyboard) {\n        keyboard.keysBackward = value;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FlyCamera.prototype, \"keysUp\", {\n    /**\n     * Get the keys for camera movement up.\n     */\n    get: function get() {\n      var keyboard = this.inputs.attached[\"keyboard\"];\n\n      if (keyboard) {\n        return keyboard.keysUp;\n      }\n\n      return [];\n    },\n\n    /**\n     * Set the keys for camera movement up.\n     */\n    set: function set(value) {\n      var keyboard = this.inputs.attached[\"keyboard\"];\n\n      if (keyboard) {\n        keyboard.keysUp = value;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FlyCamera.prototype, \"keysDown\", {\n    /**\n     * Get the keys for camera movement down.\n     */\n    get: function get() {\n      var keyboard = this.inputs.attached[\"keyboard\"];\n\n      if (keyboard) {\n        return keyboard.keysDown;\n      }\n\n      return [];\n    },\n\n    /**\n     * Set the keys for camera movement down.\n     */\n    set: function set(value) {\n      var keyboard = this.inputs.attached[\"keyboard\"];\n\n      if (keyboard) {\n        keyboard.keysDown = value;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FlyCamera.prototype, \"keysLeft\", {\n    /**\n     * Get the keys for camera movement left.\n     */\n    get: function get() {\n      var keyboard = this.inputs.attached[\"keyboard\"];\n\n      if (keyboard) {\n        return keyboard.keysLeft;\n      }\n\n      return [];\n    },\n\n    /**\n     * Set the keys for camera movement left.\n     */\n    set: function set(value) {\n      var keyboard = this.inputs.attached[\"keyboard\"];\n\n      if (keyboard) {\n        keyboard.keysLeft = value;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FlyCamera.prototype, \"keysRight\", {\n    /**\n     * Set the keys for camera movement right.\n     */\n    get: function get() {\n      var keyboard = this.inputs.attached[\"keyboard\"];\n\n      if (keyboard) {\n        return keyboard.keysRight;\n      }\n\n      return [];\n    },\n\n    /**\n     * Set the keys for camera movement right.\n     */\n    set: function set(value) {\n      var keyboard = this.inputs.attached[\"keyboard\"];\n\n      if (keyboard) {\n        keyboard.keysRight = value;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Attached controls to the current camera.\n   * @param ignored defines an ignored parameter kept for backward compatibility.\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n   */\n\n  FlyCamera.prototype.attachControl = function (ignored, noPreventDefault) {\n    // eslint-disable-next-line prefer-rest-params\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n    this.inputs.attachElement(noPreventDefault);\n  };\n  /**\n   * Detach a control from the HTML DOM element.\n   * The camera will stop reacting to that input.\n   */\n\n\n  FlyCamera.prototype.detachControl = function () {\n    this.inputs.detachElement();\n    this.cameraDirection = new Vector3(0, 0, 0);\n  };\n\n  Object.defineProperty(FlyCamera.prototype, \"collisionMask\", {\n    /**\n     * Get the mask that the camera ignores in collision events.\n     */\n    get: function get() {\n      return this._collisionMask;\n    },\n\n    /**\n     * Set the mask that the camera ignores in collision events.\n     */\n    set: function set(mask) {\n      this._collisionMask = !isNaN(mask) ? mask : -1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * @param displacement\n   * @hidden\n   */\n\n  FlyCamera.prototype._collideWithWorld = function (displacement) {\n    var globalPosition;\n\n    if (this.parent) {\n      globalPosition = Vector3.TransformCoordinates(this.position, this.parent.getWorldMatrix());\n    } else {\n      globalPosition = this.position;\n    }\n\n    globalPosition.subtractFromFloatsToRef(0, this.ellipsoid.y, 0, this._oldPosition);\n\n    this._oldPosition.addInPlace(this.ellipsoidOffset);\n\n    var coordinator = this.getScene().collisionCoordinator;\n\n    if (!this._collider) {\n      this._collider = coordinator.createCollider();\n    }\n\n    this._collider._radius = this.ellipsoid;\n    this._collider.collisionMask = this._collisionMask; // No need for clone, as long as gravity is not on.\n\n    var actualDisplacement = displacement; // Add gravity to direction to prevent dual-collision checking.\n\n    if (this.applyGravity) {\n      // This prevents mending with cameraDirection, a global variable of the fly camera class.\n      actualDisplacement = displacement.add(this.getScene().gravity);\n    }\n\n    coordinator.getNewPosition(this._oldPosition, actualDisplacement, this._collider, 3, null, this._onCollisionPositionChange, this.uniqueId);\n  };\n  /** @hidden */\n\n\n  FlyCamera.prototype._checkInputs = function () {\n    if (!this._localDirection) {\n      this._localDirection = Vector3.Zero();\n      this._transformedDirection = Vector3.Zero();\n    }\n\n    this.inputs.checkInputs();\n\n    _super.prototype._checkInputs.call(this);\n  };\n  /** @hidden */\n\n\n  FlyCamera.prototype._decideIfNeedsToMove = function () {\n    return this._needMoveForGravity || Math.abs(this.cameraDirection.x) > 0 || Math.abs(this.cameraDirection.y) > 0 || Math.abs(this.cameraDirection.z) > 0;\n  };\n  /** @hidden */\n\n\n  FlyCamera.prototype._updatePosition = function () {\n    if (this.checkCollisions && this.getScene().collisionsEnabled) {\n      this._collideWithWorld(this.cameraDirection);\n    } else {\n      _super.prototype._updatePosition.call(this);\n    }\n  };\n  /**\n   * Restore the Roll to its target value at the rate specified.\n   * @param rate - Higher means slower restoring.\n   * @hidden\n   */\n\n\n  FlyCamera.prototype.restoreRoll = function (rate) {\n    var limit = this._trackRoll; // Target Roll.\n\n    var z = this.rotation.z; // Current Roll.\n\n    var delta = limit - z; // Difference in Roll.\n\n    var minRad = 0.001; // Tenth of a radian is a barely noticable difference.\n    // If the difference is noticable, restore the Roll.\n\n    if (Math.abs(delta) >= minRad) {\n      // Change Z rotation towards the target Roll.\n      this.rotation.z += delta / rate; // Match when near enough.\n\n      if (Math.abs(limit - this.rotation.z) <= minRad) {\n        this.rotation.z = limit;\n      }\n    }\n  };\n  /**\n   * Destroy the camera and release the current resources held by it.\n   */\n\n\n  FlyCamera.prototype.dispose = function () {\n    this.inputs.clear();\n\n    _super.prototype.dispose.call(this);\n  };\n  /**\n   * Get the current object class name.\n   * @returns the class name.\n   */\n\n\n  FlyCamera.prototype.getClassName = function () {\n    return \"FlyCamera\";\n  };\n\n  __decorate([serializeAsVector3()], FlyCamera.prototype, \"ellipsoid\", void 0);\n\n  __decorate([serializeAsVector3()], FlyCamera.prototype, \"ellipsoidOffset\", void 0);\n\n  __decorate([serialize()], FlyCamera.prototype, \"checkCollisions\", void 0);\n\n  __decorate([serialize()], FlyCamera.prototype, \"applyGravity\", void 0);\n\n  return FlyCamera;\n}(TargetCamera);\n\nexport { FlyCamera };","map":{"version":3,"mappings":"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","names":["serialize","serializeAsVector3","Vector3","Engine","TargetCamera","FlyCameraInputsManager","Tools","__extends","name","position","scene","setActiveOnSceneIfNoneActive","_super","_this","Zero","Math","PI","collisionId","newPosition","collidedMesh","updatePosition","newPos","_newPosition","copyFrom","subtractToRef","_oldPosition","_diffPosition","length","CollisionsEpsilon","addInPlace","onCollide","inputs","addKeyboard","addMouse","Object","FlyCamera","mouse","attached","angularSensibility","value","keyboard","keysForward","keysBackward","keysUp","keysDown","keysLeft","keysRight","ignored","noPreventDefault","BackCompatCameraNoPreventDefault","arguments","attachElement","detachElement","cameraDirection","_collisionMask","mask","isNaN","displacement","globalPosition","parent","TransformCoordinates","getWorldMatrix","subtractFromFloatsToRef","ellipsoid","y","ellipsoidOffset","coordinator","getScene","collisionCoordinator","_collider","createCollider","_radius","collisionMask","actualDisplacement","applyGravity","add","gravity","getNewPosition","_onCollisionPositionChange","uniqueId","_localDirection","_transformedDirection","checkInputs","_checkInputs","call","_needMoveForGravity","abs","x","z","checkCollisions","collisionsEnabled","_collideWithWorld","_updatePosition","rate","limit","_trackRoll","rotation","delta","minRad","clear","dispose","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Cameras/flyCamera.ts"],"sourcesContent":["import { serialize, serializeAsVector3 } from \"../Misc/decorators\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Quaternion } from \"../Maths/math.vector\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { TargetCamera } from \"./targetCamera\";\r\nimport { FlyCameraInputsManager } from \"./flyCameraInputsManager\";\r\nimport type { FlyCameraMouseInput } from \"../Cameras/Inputs/flyCameraMouseInput\";\r\nimport type { FlyCameraKeyboardInput } from \"../Cameras/Inputs/flyCameraKeyboardInput\";\r\nimport { Tools } from \"../Misc/tools\";\r\n\r\ndeclare type Collider = import(\"../Collisions/collider\").Collider;\r\n\r\n/**\r\n * This is a flying camera, designed for 3D movement and rotation in all directions,\r\n * such as in a 3D Space Shooter or a Flight Simulator.\r\n */\r\nexport class FlyCamera extends TargetCamera {\r\n    /**\r\n     * Define the collision ellipsoid of the camera.\r\n     * This is helpful for simulating a camera body, like a player's body.\r\n     * @see https://doc.babylonjs.com/babylon101/cameras,_mesh_collisions_and_gravity#arcrotatecamera\r\n     */\r\n    @serializeAsVector3()\r\n    public ellipsoid = new Vector3(1, 1, 1);\r\n\r\n    /**\r\n     * Define an offset for the position of the ellipsoid around the camera.\r\n     * This can be helpful if the camera is attached away from the player's body center,\r\n     * such as at its head.\r\n     */\r\n    @serializeAsVector3()\r\n    public ellipsoidOffset = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * Enable or disable collisions of the camera with the rest of the scene objects.\r\n     */\r\n    @serialize()\r\n    public checkCollisions = false;\r\n\r\n    /**\r\n     * Enable or disable gravity on the camera.\r\n     */\r\n    @serialize()\r\n    public applyGravity = false;\r\n\r\n    /**\r\n     * Define the current direction the camera is moving to.\r\n     */\r\n    public cameraDirection = Vector3.Zero();\r\n\r\n    /**\r\n     * Define the current local rotation of the camera as a quaternion to prevent Gimbal lock.\r\n     * This overrides and empties cameraRotation.\r\n     */\r\n    public rotationQuaternion: Quaternion;\r\n\r\n    /**\r\n     * Track Roll to maintain the wanted Rolling when looking around.\r\n     */\r\n    public _trackRoll: number = 0;\r\n\r\n    /**\r\n     * Slowly correct the Roll to its original value after a Pitch+Yaw rotation.\r\n     */\r\n    public rollCorrect: number = 100;\r\n\r\n    /**\r\n     * Mimic a banked turn, Rolling the camera when Yawing.\r\n     * It's recommended to use rollCorrect = 10 for faster banking correction.\r\n     */\r\n    public bankedTurn: boolean = false;\r\n\r\n    /**\r\n     * Limit in radians for how much Roll banking will add. (Default: 90Â°)\r\n     */\r\n    public bankedTurnLimit: number = Math.PI / 2;\r\n\r\n    /**\r\n     * Value of 0 disables the banked Roll.\r\n     * Value of 1 is equal to the Yaw angle in radians.\r\n     */\r\n    public bankedTurnMultiplier: number = 1;\r\n\r\n    /**\r\n     * The inputs manager loads all the input sources, such as keyboard and mouse.\r\n     */\r\n    public inputs: FlyCameraInputsManager;\r\n\r\n    /**\r\n     * Gets the input sensibility for mouse input.\r\n     * Higher values reduce sensitivity.\r\n     */\r\n    public get angularSensibility(): number {\r\n        const mouse = <FlyCameraMouseInput>this.inputs.attached[\"mouse\"];\r\n        if (mouse) {\r\n            return mouse.angularSensibility;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the input sensibility for a mouse input.\r\n     * Higher values reduce sensitivity.\r\n     */\r\n    public set angularSensibility(value: number) {\r\n        const mouse = <FlyCameraMouseInput>this.inputs.attached[\"mouse\"];\r\n        if (mouse) {\r\n            mouse.angularSensibility = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the keys for camera movement forward.\r\n     */\r\n    public get keysForward(): number[] {\r\n        const keyboard = <FlyCameraKeyboardInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysForward;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Set the keys for camera movement forward.\r\n     */\r\n    public set keysForward(value: number[]) {\r\n        const keyboard = <FlyCameraKeyboardInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysForward = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the keys for camera movement backward.\r\n     */\r\n    public get keysBackward(): number[] {\r\n        const keyboard = <FlyCameraKeyboardInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysBackward;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    public set keysBackward(value: number[]) {\r\n        const keyboard = <FlyCameraKeyboardInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysBackward = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the keys for camera movement up.\r\n     */\r\n    public get keysUp(): number[] {\r\n        const keyboard = <FlyCameraKeyboardInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysUp;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Set the keys for camera movement up.\r\n     */\r\n    public set keysUp(value: number[]) {\r\n        const keyboard = <FlyCameraKeyboardInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysUp = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the keys for camera movement down.\r\n     */\r\n    public get keysDown(): number[] {\r\n        const keyboard = <FlyCameraKeyboardInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysDown;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Set the keys for camera movement down.\r\n     */\r\n    public set keysDown(value: number[]) {\r\n        const keyboard = <FlyCameraKeyboardInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysDown = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the keys for camera movement left.\r\n     */\r\n    public get keysLeft(): number[] {\r\n        const keyboard = <FlyCameraKeyboardInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysLeft;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Set the keys for camera movement left.\r\n     */\r\n    public set keysLeft(value: number[]) {\r\n        const keyboard = <FlyCameraKeyboardInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysLeft = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the keys for camera movement right.\r\n     */\r\n    public get keysRight(): number[] {\r\n        const keyboard = <FlyCameraKeyboardInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            return keyboard.keysRight;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Set the keys for camera movement right.\r\n     */\r\n    public set keysRight(value: number[]) {\r\n        const keyboard = <FlyCameraKeyboardInput>this.inputs.attached[\"keyboard\"];\r\n        if (keyboard) {\r\n            keyboard.keysRight = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event raised when the camera collides with a mesh in the scene.\r\n     */\r\n    public onCollide: (collidedMesh: AbstractMesh) => void;\r\n\r\n    private _collider: Collider;\r\n    private _needMoveForGravity = false;\r\n    private _oldPosition = Vector3.Zero();\r\n    private _diffPosition = Vector3.Zero();\r\n    private _newPosition = Vector3.Zero();\r\n\r\n    /** @hidden */\r\n    public _localDirection: Vector3;\r\n    /** @hidden */\r\n    public _transformedDirection: Vector3;\r\n\r\n    /**\r\n     * Instantiates a FlyCamera.\r\n     * This is a flying camera, designed for 3D movement and rotation in all directions,\r\n     * such as in a 3D Space Shooter or a Flight Simulator.\r\n     * @param name Define the name of the camera in the scene.\r\n     * @param position Define the starting position of the camera in the scene.\r\n     * @param scene Define the scene the camera belongs to.\r\n     * @param setActiveOnSceneIfNoneActive Defines whether the camera should be marked as active, if no other camera has been defined as active.\r\n     */\r\n    constructor(name: string, position: Vector3, scene?: Scene, setActiveOnSceneIfNoneActive = true) {\r\n        super(name, position, scene, setActiveOnSceneIfNoneActive);\r\n        this.inputs = new FlyCameraInputsManager(this);\r\n        this.inputs.addKeyboard().addMouse();\r\n    }\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void;\r\n    /**\r\n     * Attached controls to the current camera.\r\n     * @param ignored defines an ignored parameter kept for backward compatibility.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(ignored: any, noPreventDefault?: boolean): void {\r\n        // eslint-disable-next-line prefer-rest-params\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n        this.inputs.attachElement(noPreventDefault);\r\n    }\r\n\r\n    /**\r\n     * Detach a control from the HTML DOM element.\r\n     * The camera will stop reacting to that input.\r\n     */\r\n    public detachControl(): void {\r\n        this.inputs.detachElement();\r\n\r\n        this.cameraDirection = new Vector3(0, 0, 0);\r\n    }\r\n\r\n    // Collisions.\r\n    private _collisionMask = -1;\r\n\r\n    /**\r\n     * Get the mask that the camera ignores in collision events.\r\n     */\r\n    public get collisionMask(): number {\r\n        return this._collisionMask;\r\n    }\r\n\r\n    /**\r\n     * Set the mask that the camera ignores in collision events.\r\n     */\r\n    public set collisionMask(mask: number) {\r\n        this._collisionMask = !isNaN(mask) ? mask : -1;\r\n    }\r\n\r\n    /**\r\n     * @param displacement\r\n     * @hidden\r\n     */\r\n    public _collideWithWorld(displacement: Vector3): void {\r\n        let globalPosition: Vector3;\r\n\r\n        if (this.parent) {\r\n            globalPosition = Vector3.TransformCoordinates(this.position, this.parent.getWorldMatrix());\r\n        } else {\r\n            globalPosition = this.position;\r\n        }\r\n\r\n        globalPosition.subtractFromFloatsToRef(0, this.ellipsoid.y, 0, this._oldPosition);\r\n        this._oldPosition.addInPlace(this.ellipsoidOffset);\r\n        const coordinator = this.getScene().collisionCoordinator;\r\n\r\n        if (!this._collider) {\r\n            this._collider = coordinator.createCollider();\r\n        }\r\n\r\n        this._collider._radius = this.ellipsoid;\r\n        this._collider.collisionMask = this._collisionMask;\r\n\r\n        // No need for clone, as long as gravity is not on.\r\n        let actualDisplacement = displacement;\r\n\r\n        // Add gravity to direction to prevent dual-collision checking.\r\n        if (this.applyGravity) {\r\n            // This prevents mending with cameraDirection, a global variable of the fly camera class.\r\n            actualDisplacement = displacement.add(this.getScene().gravity);\r\n        }\r\n\r\n        coordinator.getNewPosition(this._oldPosition, actualDisplacement, this._collider, 3, null, this._onCollisionPositionChange, this.uniqueId);\r\n    }\r\n\r\n    /**\r\n     * @param collisionId\r\n     * @param newPosition\r\n     * @param collidedMesh\r\n     * @hidden\r\n     */\r\n    private _onCollisionPositionChange = (collisionId: number, newPosition: Vector3, collidedMesh: Nullable<AbstractMesh> = null) => {\r\n        const updatePosition = (newPos: Vector3) => {\r\n            this._newPosition.copyFrom(newPos);\r\n\r\n            this._newPosition.subtractToRef(this._oldPosition, this._diffPosition);\r\n\r\n            if (this._diffPosition.length() > Engine.CollisionsEpsilon) {\r\n                this.position.addInPlace(this._diffPosition);\r\n                if (this.onCollide && collidedMesh) {\r\n                    this.onCollide(collidedMesh);\r\n                }\r\n            }\r\n        };\r\n\r\n        updatePosition(newPosition);\r\n    };\r\n\r\n    /** @hidden */\r\n    public _checkInputs(): void {\r\n        if (!this._localDirection) {\r\n            this._localDirection = Vector3.Zero();\r\n            this._transformedDirection = Vector3.Zero();\r\n        }\r\n\r\n        this.inputs.checkInputs();\r\n\r\n        super._checkInputs();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _decideIfNeedsToMove(): boolean {\r\n        return this._needMoveForGravity || Math.abs(this.cameraDirection.x) > 0 || Math.abs(this.cameraDirection.y) > 0 || Math.abs(this.cameraDirection.z) > 0;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _updatePosition(): void {\r\n        if (this.checkCollisions && this.getScene().collisionsEnabled) {\r\n            this._collideWithWorld(this.cameraDirection);\r\n        } else {\r\n            super._updatePosition();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Restore the Roll to its target value at the rate specified.\r\n     * @param rate - Higher means slower restoring.\r\n     * @hidden\r\n     */\r\n    public restoreRoll(rate: number): void {\r\n        const limit = this._trackRoll; // Target Roll.\r\n        const z = this.rotation.z; // Current Roll.\r\n        const delta = limit - z; // Difference in Roll.\r\n\r\n        const minRad = 0.001; // Tenth of a radian is a barely noticable difference.\r\n\r\n        // If the difference is noticable, restore the Roll.\r\n        if (Math.abs(delta) >= minRad) {\r\n            // Change Z rotation towards the target Roll.\r\n            this.rotation.z += delta / rate;\r\n\r\n            // Match when near enough.\r\n            if (Math.abs(limit - this.rotation.z) <= minRad) {\r\n                this.rotation.z = limit;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy the camera and release the current resources held by it.\r\n     */\r\n    public dispose(): void {\r\n        this.inputs.clear();\r\n        super.dispose();\r\n    }\r\n\r\n    /**\r\n     * Get the current object class name.\r\n     * @returns the class name.\r\n     */\r\n    public getClassName(): string {\r\n        return \"FlyCamera\";\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}