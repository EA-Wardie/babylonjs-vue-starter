{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { serialize, serializeAsTexture, expandToProperty, serializeAsColor3 } from \"../../Misc/decorators.js\";\nimport { Color3 } from \"../../Maths/math.color.js\";\nimport { MaterialFlags } from \"../materialFlags.js\";\nimport { MaterialHelper } from \"../../Materials/materialHelper.js\";\nimport { MaterialPluginBase } from \"../materialPluginBase.js\";\nimport { MaterialDefines } from \"../materialDefines.js\";\n/**\n * @hidden\n */\n\nvar MaterialClearCoatDefines =\n/** @class */\nfunction (_super) {\n  __extends(MaterialClearCoatDefines, _super);\n\n  function MaterialClearCoatDefines() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.CLEARCOAT = false;\n    _this.CLEARCOAT_DEFAULTIOR = false;\n    _this.CLEARCOAT_TEXTURE = false;\n    _this.CLEARCOAT_TEXTURE_ROUGHNESS = false;\n    _this.CLEARCOAT_TEXTUREDIRECTUV = 0;\n    _this.CLEARCOAT_TEXTURE_ROUGHNESSDIRECTUV = 0;\n    _this.CLEARCOAT_BUMP = false;\n    _this.CLEARCOAT_BUMPDIRECTUV = 0;\n    _this.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\n    _this.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL = false;\n    _this.CLEARCOAT_REMAP_F0 = false;\n    _this.CLEARCOAT_TINT = false;\n    _this.CLEARCOAT_TINT_TEXTURE = false;\n    _this.CLEARCOAT_TINT_TEXTUREDIRECTUV = 0;\n    _this.CLEARCOAT_TINT_GAMMATEXTURE = false;\n    return _this;\n  }\n\n  return MaterialClearCoatDefines;\n}(MaterialDefines);\n\nexport { MaterialClearCoatDefines };\n/**\n * Plugin that implements the clear coat component of the PBR material\n */\n\nvar PBRClearCoatConfiguration =\n/** @class */\nfunction (_super) {\n  __extends(PBRClearCoatConfiguration, _super);\n\n  function PBRClearCoatConfiguration(material, addToPluginList) {\n    if (addToPluginList === void 0) {\n      addToPluginList = true;\n    }\n\n    var _this = _super.call(this, material, \"PBRClearCoat\", 100, new MaterialClearCoatDefines(), addToPluginList) || this;\n\n    _this._isEnabled = false;\n    /**\n     * Defines if the clear coat is enabled in the material.\n     */\n\n    _this.isEnabled = false;\n    /**\n     * Defines the clear coat layer strength (between 0 and 1) it defaults to 1.\n     */\n\n    _this.intensity = 1;\n    /**\n     * Defines the clear coat layer roughness.\n     */\n\n    _this.roughness = 0;\n    _this._indexOfRefraction = PBRClearCoatConfiguration._DefaultIndexOfRefraction;\n    /**\n     * Defines the index of refraction of the clear coat.\n     * This defaults to 1.5 corresponding to a 0.04 f0 or a 4% reflectance at normal incidence\n     * The default fits with a polyurethane material.\n     * Changing the default value is more performance intensive.\n     */\n\n    _this.indexOfRefraction = PBRClearCoatConfiguration._DefaultIndexOfRefraction;\n    _this._texture = null;\n    /**\n     * Stores the clear coat values in a texture (red channel is intensity and green channel is roughness)\n     * If useRoughnessFromMainTexture is false, the green channel of texture is not used and the green channel of textureRoughness is used instead\n     * if textureRoughness is not empty, else no texture roughness is used\n     */\n\n    _this.texture = null;\n    _this._useRoughnessFromMainTexture = true;\n    /**\n     * Indicates that the green channel of the texture property will be used for roughness (default: true)\n     * If false, the green channel from textureRoughness is used for roughness\n     */\n\n    _this.useRoughnessFromMainTexture = true;\n    _this._textureRoughness = null;\n    /**\n     * Stores the clear coat roughness in a texture (green channel)\n     * Not used if useRoughnessFromMainTexture is true\n     */\n\n    _this.textureRoughness = null;\n    _this._remapF0OnInterfaceChange = true;\n    /**\n     * Defines if the F0 value should be remapped to account for the interface change in the material.\n     */\n\n    _this.remapF0OnInterfaceChange = true;\n    _this._bumpTexture = null;\n    /**\n     * Define the clear coat specific bump texture.\n     */\n\n    _this.bumpTexture = null;\n    _this._isTintEnabled = false;\n    /**\n     * Defines if the clear coat tint is enabled in the material.\n     */\n\n    _this.isTintEnabled = false;\n    /**\n     * Defines the clear coat tint of the material.\n     * This is only use if tint is enabled\n     */\n\n    _this.tintColor = Color3.White();\n    /**\n     * Defines the distance at which the tint color should be found in the\n     * clear coat media.\n     * This is only use if tint is enabled\n     */\n\n    _this.tintColorAtDistance = 1;\n    /**\n     * Defines the clear coat layer thickness.\n     * This is only use if tint is enabled\n     */\n\n    _this.tintThickness = 1;\n    _this._tintTexture = null;\n    /**\n     * Stores the clear tint values in a texture.\n     * rgb is tint\n     * a is a thickness factor\n     */\n\n    _this.tintTexture = null;\n    _this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[1];\n    return _this;\n  }\n  /** @hidden */\n\n\n  PBRClearCoatConfiguration.prototype._markAllSubMeshesAsTexturesDirty = function () {\n    this._enable(this._isEnabled);\n\n    this._internalMarkAllSubMeshesAsTexturesDirty();\n  };\n\n  PBRClearCoatConfiguration.prototype.isReadyForSubMesh = function (defines, scene, engine) {\n    if (!this._isEnabled) {\n      return true;\n    }\n\n    var disableBumpMap = this._material._disableBumpMap;\n\n    if (defines._areTexturesDirty) {\n      if (scene.texturesEnabled) {\n        if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\n          if (!this._texture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n\n        if (this._textureRoughness && MaterialFlags.ClearCoatTextureEnabled) {\n          if (!this._textureRoughness.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n\n        if (engine.getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.ClearCoatBumpTextureEnabled && !disableBumpMap) {\n          // Bump texture cannot be not blocking.\n          if (!this._bumpTexture.isReady()) {\n            return false;\n          }\n        }\n\n        if (this._isTintEnabled && this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n          if (!this._tintTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  };\n\n  PBRClearCoatConfiguration.prototype.prepareDefines = function (defines, scene) {\n    var _a;\n\n    if (this._isEnabled) {\n      defines.CLEARCOAT = true;\n      defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = this._useRoughnessFromMainTexture;\n      defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL = this._texture !== null && this._texture._texture === ((_a = this._textureRoughness) === null || _a === void 0 ? void 0 : _a._texture) && this._texture.checkTransformsAreIdentical(this._textureRoughness);\n      defines.CLEARCOAT_REMAP_F0 = this._remapF0OnInterfaceChange;\n\n      if (defines._areTexturesDirty) {\n        if (scene.texturesEnabled) {\n          if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"CLEARCOAT_TEXTURE\");\n          } else {\n            defines.CLEARCOAT_TEXTURE = false;\n          }\n\n          if (this._textureRoughness && MaterialFlags.ClearCoatTextureEnabled) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._textureRoughness, defines, \"CLEARCOAT_TEXTURE_ROUGHNESS\");\n          } else {\n            defines.CLEARCOAT_TEXTURE_ROUGHNESS = false;\n          }\n\n          if (this._bumpTexture && MaterialFlags.ClearCoatBumpTextureEnabled) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._bumpTexture, defines, \"CLEARCOAT_BUMP\");\n          } else {\n            defines.CLEARCOAT_BUMP = false;\n          }\n\n          defines.CLEARCOAT_DEFAULTIOR = this._indexOfRefraction === PBRClearCoatConfiguration._DefaultIndexOfRefraction;\n\n          if (this._isTintEnabled) {\n            defines.CLEARCOAT_TINT = true;\n\n            if (this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n              MaterialHelper.PrepareDefinesForMergedUV(this._tintTexture, defines, \"CLEARCOAT_TINT_TEXTURE\");\n              defines.CLEARCOAT_TINT_GAMMATEXTURE = this._tintTexture.gammaSpace;\n            } else {\n              defines.CLEARCOAT_TINT_TEXTURE = false;\n            }\n          } else {\n            defines.CLEARCOAT_TINT = false;\n            defines.CLEARCOAT_TINT_TEXTURE = false;\n          }\n        }\n      }\n    } else {\n      defines.CLEARCOAT = false;\n      defines.CLEARCOAT_TEXTURE = false;\n      defines.CLEARCOAT_TEXTURE_ROUGHNESS = false;\n      defines.CLEARCOAT_BUMP = false;\n      defines.CLEARCOAT_TINT = false;\n      defines.CLEARCOAT_TINT_TEXTURE = false;\n      defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\n      defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL = false;\n    }\n  };\n\n  PBRClearCoatConfiguration.prototype.bindForSubMesh = function (uniformBuffer, scene, engine, subMesh) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n\n    if (!this._isEnabled) {\n      return;\n    }\n\n    var defines = subMesh.materialDefines;\n    var isFrozen = this._material.isFrozen;\n    var disableBumpMap = this._material._disableBumpMap;\n    var invertNormalMapX = this._material._invertNormalMapX;\n    var invertNormalMapY = this._material._invertNormalMapY;\n    var identicalTextures = defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL;\n\n    if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\n      if (identicalTextures && MaterialFlags.ClearCoatTextureEnabled) {\n        uniformBuffer.updateFloat4(\"vClearCoatInfos\", this._texture.coordinatesIndex, this._texture.level, -1, -1);\n        MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"clearCoat\");\n      } else if ((this._texture || this._textureRoughness) && MaterialFlags.ClearCoatTextureEnabled) {\n        uniformBuffer.updateFloat4(\"vClearCoatInfos\", (_b = (_a = this._texture) === null || _a === void 0 ? void 0 : _a.coordinatesIndex) !== null && _b !== void 0 ? _b : 0, (_d = (_c = this._texture) === null || _c === void 0 ? void 0 : _c.level) !== null && _d !== void 0 ? _d : 0, (_f = (_e = this._textureRoughness) === null || _e === void 0 ? void 0 : _e.coordinatesIndex) !== null && _f !== void 0 ? _f : 0, (_h = (_g = this._textureRoughness) === null || _g === void 0 ? void 0 : _g.level) !== null && _h !== void 0 ? _h : 0);\n\n        if (this._texture) {\n          MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"clearCoat\");\n        }\n\n        if (this._textureRoughness && !identicalTextures && !defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE) {\n          MaterialHelper.BindTextureMatrix(this._textureRoughness, uniformBuffer, \"clearCoatRoughness\");\n        }\n      }\n\n      if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.ClearCoatTextureEnabled && !disableBumpMap) {\n        uniformBuffer.updateFloat2(\"vClearCoatBumpInfos\", this._bumpTexture.coordinatesIndex, this._bumpTexture.level);\n        MaterialHelper.BindTextureMatrix(this._bumpTexture, uniformBuffer, \"clearCoatBump\");\n\n        if (scene._mirroredCameraPosition) {\n          uniformBuffer.updateFloat2(\"vClearCoatTangentSpaceParams\", invertNormalMapX ? 1.0 : -1.0, invertNormalMapY ? 1.0 : -1.0);\n        } else {\n          uniformBuffer.updateFloat2(\"vClearCoatTangentSpaceParams\", invertNormalMapX ? -1.0 : 1.0, invertNormalMapY ? -1.0 : 1.0);\n        }\n      }\n\n      if (this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n        uniformBuffer.updateFloat2(\"vClearCoatTintInfos\", this._tintTexture.coordinatesIndex, this._tintTexture.level);\n        MaterialHelper.BindTextureMatrix(this._tintTexture, uniformBuffer, \"clearCoatTint\");\n      } // Clear Coat General params\n\n\n      uniformBuffer.updateFloat2(\"vClearCoatParams\", this.intensity, this.roughness); // Clear Coat Refraction params\n\n      var a = 1 - this._indexOfRefraction;\n      var b = 1 + this._indexOfRefraction;\n      var f0 = Math.pow(-a / b, 2); // Schlicks approx: (ior1 - ior2) / (ior1 + ior2) where ior2 for air is close to vacuum = 1.\n\n      var eta = 1 / this._indexOfRefraction;\n      uniformBuffer.updateFloat4(\"vClearCoatRefractionParams\", f0, eta, a, b);\n\n      if (this._isTintEnabled) {\n        uniformBuffer.updateFloat4(\"vClearCoatTintParams\", this.tintColor.r, this.tintColor.g, this.tintColor.b, Math.max(0.00001, this.tintThickness));\n        uniformBuffer.updateFloat(\"clearCoatColorAtDistance\", Math.max(0.00001, this.tintColorAtDistance));\n      }\n    } // Textures\n\n\n    if (scene.texturesEnabled) {\n      if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\n        uniformBuffer.setTexture(\"clearCoatSampler\", this._texture);\n      }\n\n      if (this._textureRoughness && !identicalTextures && !defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE && MaterialFlags.ClearCoatTextureEnabled) {\n        uniformBuffer.setTexture(\"clearCoatRoughnessSampler\", this._textureRoughness);\n      }\n\n      if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.ClearCoatBumpTextureEnabled && !disableBumpMap) {\n        uniformBuffer.setTexture(\"clearCoatBumpSampler\", this._bumpTexture);\n      }\n\n      if (this._isTintEnabled && this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n        uniformBuffer.setTexture(\"clearCoatTintSampler\", this._tintTexture);\n      }\n    }\n  };\n\n  PBRClearCoatConfiguration.prototype.hasTexture = function (texture) {\n    if (this._texture === texture) {\n      return true;\n    }\n\n    if (this._textureRoughness === texture) {\n      return true;\n    }\n\n    if (this._bumpTexture === texture) {\n      return true;\n    }\n\n    if (this._tintTexture === texture) {\n      return true;\n    }\n\n    return false;\n  };\n\n  PBRClearCoatConfiguration.prototype.getActiveTextures = function (activeTextures) {\n    if (this._texture) {\n      activeTextures.push(this._texture);\n    }\n\n    if (this._textureRoughness) {\n      activeTextures.push(this._textureRoughness);\n    }\n\n    if (this._bumpTexture) {\n      activeTextures.push(this._bumpTexture);\n    }\n\n    if (this._tintTexture) {\n      activeTextures.push(this._tintTexture);\n    }\n  };\n\n  PBRClearCoatConfiguration.prototype.getAnimatables = function (animatables) {\n    if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\n      animatables.push(this._texture);\n    }\n\n    if (this._textureRoughness && this._textureRoughness.animations && this._textureRoughness.animations.length > 0) {\n      animatables.push(this._textureRoughness);\n    }\n\n    if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\n      animatables.push(this._bumpTexture);\n    }\n\n    if (this._tintTexture && this._tintTexture.animations && this._tintTexture.animations.length > 0) {\n      animatables.push(this._tintTexture);\n    }\n  };\n\n  PBRClearCoatConfiguration.prototype.dispose = function (forceDisposeTextures) {\n    var _a, _b, _c, _d;\n\n    if (forceDisposeTextures) {\n      (_a = this._texture) === null || _a === void 0 ? void 0 : _a.dispose();\n      (_b = this._textureRoughness) === null || _b === void 0 ? void 0 : _b.dispose();\n      (_c = this._bumpTexture) === null || _c === void 0 ? void 0 : _c.dispose();\n      (_d = this._tintTexture) === null || _d === void 0 ? void 0 : _d.dispose();\n    }\n  };\n\n  PBRClearCoatConfiguration.prototype.getClassName = function () {\n    return \"PBRClearCoatConfiguration\";\n  };\n\n  PBRClearCoatConfiguration.prototype.addFallbacks = function (defines, fallbacks, currentRank) {\n    if (defines.CLEARCOAT_BUMP) {\n      fallbacks.addFallback(currentRank++, \"CLEARCOAT_BUMP\");\n    }\n\n    if (defines.CLEARCOAT_TINT) {\n      fallbacks.addFallback(currentRank++, \"CLEARCOAT_TINT\");\n    }\n\n    if (defines.CLEARCOAT) {\n      fallbacks.addFallback(currentRank++, \"CLEARCOAT\");\n    }\n\n    return currentRank;\n  };\n\n  PBRClearCoatConfiguration.prototype.getSamplers = function (samplers) {\n    samplers.push(\"clearCoatSampler\", \"clearCoatRoughnessSampler\", \"clearCoatBumpSampler\", \"clearCoatTintSampler\");\n  };\n\n  PBRClearCoatConfiguration.prototype.getUniforms = function () {\n    return {\n      ubo: [{\n        name: \"vClearCoatParams\",\n        size: 2,\n        type: \"vec2\"\n      }, {\n        name: \"vClearCoatRefractionParams\",\n        size: 4,\n        type: \"vec4\"\n      }, {\n        name: \"vClearCoatInfos\",\n        size: 4,\n        type: \"vec4\"\n      }, {\n        name: \"clearCoatMatrix\",\n        size: 16,\n        type: \"mat4\"\n      }, {\n        name: \"clearCoatRoughnessMatrix\",\n        size: 16,\n        type: \"mat4\"\n      }, {\n        name: \"vClearCoatBumpInfos\",\n        size: 2,\n        type: \"vec2\"\n      }, {\n        name: \"vClearCoatTangentSpaceParams\",\n        size: 2,\n        type: \"vec2\"\n      }, {\n        name: \"clearCoatBumpMatrix\",\n        size: 16,\n        type: \"mat4\"\n      }, {\n        name: \"vClearCoatTintParams\",\n        size: 4,\n        type: \"vec4\"\n      }, {\n        name: \"clearCoatColorAtDistance\",\n        size: 1,\n        type: \"float\"\n      }, {\n        name: \"vClearCoatTintInfos\",\n        size: 2,\n        type: \"vec2\"\n      }, {\n        name: \"clearCoatTintMatrix\",\n        size: 16,\n        type: \"mat4\"\n      }]\n    };\n  };\n  /**\n   * This defaults to 1.5 corresponding to a 0.04 f0 or a 4% reflectance at normal incidence\n   * The default fits with a polyurethane material.\n   * @hidden\n   */\n\n\n  PBRClearCoatConfiguration._DefaultIndexOfRefraction = 1.5;\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"isEnabled\", void 0);\n\n  __decorate([serialize()], PBRClearCoatConfiguration.prototype, \"intensity\", void 0);\n\n  __decorate([serialize()], PBRClearCoatConfiguration.prototype, \"roughness\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"indexOfRefraction\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"texture\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"useRoughnessFromMainTexture\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"textureRoughness\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"remapF0OnInterfaceChange\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"bumpTexture\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"isTintEnabled\", void 0);\n\n  __decorate([serializeAsColor3()], PBRClearCoatConfiguration.prototype, \"tintColor\", void 0);\n\n  __decorate([serialize()], PBRClearCoatConfiguration.prototype, \"tintColorAtDistance\", void 0);\n\n  __decorate([serialize()], PBRClearCoatConfiguration.prototype, \"tintThickness\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"tintTexture\", void 0);\n\n  return PBRClearCoatConfiguration;\n}(MaterialPluginBase);\n\nexport { PBRClearCoatConfiguration };","map":{"version":3,"mappings":"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","names":["serialize","serializeAsTexture","expandToProperty","serializeAsColor3","Color3","MaterialFlags","MaterialHelper","MaterialPluginBase","MaterialDefines","__extends","_this","material","addToPluginList","_super","MaterialClearCoatDefines","PBRClearCoatConfiguration","_DefaultIndexOfRefraction","White","_internalMarkAllSubMeshesAsTexturesDirty","_dirtyCallbacks","_enable","_isEnabled","defines","scene","engine","disableBumpMap","_material","_disableBumpMap","_areTexturesDirty","texturesEnabled","_texture","ClearCoatTextureEnabled","isReadyOrNotBlocking","_textureRoughness","getCaps","standardDerivatives","_bumpTexture","ClearCoatBumpTextureEnabled","isReady","_isTintEnabled","_tintTexture","ClearCoatTintTextureEnabled","CLEARCOAT","CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE","_useRoughnessFromMainTexture","CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL","_a","checkTransformsAreIdentical","CLEARCOAT_REMAP_F0","_remapF0OnInterfaceChange","PrepareDefinesForMergedUV","CLEARCOAT_TEXTURE","CLEARCOAT_TEXTURE_ROUGHNESS","CLEARCOAT_BUMP","CLEARCOAT_DEFAULTIOR","_indexOfRefraction","CLEARCOAT_TINT","CLEARCOAT_TINT_GAMMATEXTURE","gammaSpace","CLEARCOAT_TINT_TEXTURE","uniformBuffer","subMesh","materialDefines","isFrozen","invertNormalMapX","_invertNormalMapX","invertNormalMapY","_invertNormalMapY","identicalTextures","useUbo","isSync","updateFloat4","coordinatesIndex","level","BindTextureMatrix","_b","_c","_d","_e","_f","_g","_h","updateFloat2","_mirroredCameraPosition","intensity","roughness","a","b","f0","Math","pow","eta","tintColor","r","g","max","tintThickness","updateFloat","tintColorAtDistance","setTexture","texture","activeTextures","push","animatables","animations","length","forceDisposeTextures","dispose","fallbacks","currentRank","addFallback","samplers","ubo","name","size","type","__decorate"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/PBR/pbrClearCoatConfiguration.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"../../types\";\r\nimport { serialize, serializeAsTexture, expandToProperty, serializeAsColor3 } from \"../../Misc/decorators\";\r\nimport { Color3 } from \"../../Maths/math.color\";\r\nimport type { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport { MaterialFlags } from \"../materialFlags\";\r\nimport type { UniformBuffer } from \"../../Materials/uniformBuffer\";\r\nimport { MaterialHelper } from \"../../Materials/materialHelper\";\r\nimport type { IAnimatable } from \"../../Animations/animatable.interface\";\r\nimport type { EffectFallbacks } from \"../effectFallbacks\";\r\nimport type { SubMesh } from \"../../Meshes/subMesh\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport { MaterialPluginBase } from \"../materialPluginBase\";\r\nimport { MaterialDefines } from \"../materialDefines\";\r\n\r\ndeclare type Engine = import(\"../../Engines/engine\").Engine;\r\ndeclare type Scene = import(\"../../scene\").Scene;\r\ndeclare type PBRBaseMaterial = import(\"./pbrBaseMaterial\").PBRBaseMaterial;\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class MaterialClearCoatDefines extends MaterialDefines {\r\n    public CLEARCOAT = false;\r\n    public CLEARCOAT_DEFAULTIOR = false;\r\n    public CLEARCOAT_TEXTURE = false;\r\n    public CLEARCOAT_TEXTURE_ROUGHNESS = false;\r\n    public CLEARCOAT_TEXTUREDIRECTUV = 0;\r\n    public CLEARCOAT_TEXTURE_ROUGHNESSDIRECTUV = 0;\r\n    public CLEARCOAT_BUMP = false;\r\n    public CLEARCOAT_BUMPDIRECTUV = 0;\r\n    public CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\r\n    public CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL = false;\r\n    public CLEARCOAT_REMAP_F0 = false;\r\n\r\n    public CLEARCOAT_TINT = false;\r\n    public CLEARCOAT_TINT_TEXTURE = false;\r\n    public CLEARCOAT_TINT_TEXTUREDIRECTUV = 0;\r\n    public CLEARCOAT_TINT_GAMMATEXTURE = false;\r\n}\r\n\r\n/**\r\n * Plugin that implements the clear coat component of the PBR material\r\n */\r\nexport class PBRClearCoatConfiguration extends MaterialPluginBase {\r\n    protected _material: PBRBaseMaterial;\r\n\r\n    /**\r\n     * This defaults to 1.5 corresponding to a 0.04 f0 or a 4% reflectance at normal incidence\r\n     * The default fits with a polyurethane material.\r\n     * @hidden\r\n     */\r\n    public static readonly _DefaultIndexOfRefraction = 1.5;\r\n\r\n    private _isEnabled = false;\r\n    /**\r\n     * Defines if the clear coat is enabled in the material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public isEnabled = false;\r\n\r\n    /**\r\n     * Defines the clear coat layer strength (between 0 and 1) it defaults to 1.\r\n     */\r\n    @serialize()\r\n    public intensity: number = 1;\r\n\r\n    /**\r\n     * Defines the clear coat layer roughness.\r\n     */\r\n    @serialize()\r\n    public roughness: number = 0;\r\n\r\n    private _indexOfRefraction = PBRClearCoatConfiguration._DefaultIndexOfRefraction;\r\n    /**\r\n     * Defines the index of refraction of the clear coat.\r\n     * This defaults to 1.5 corresponding to a 0.04 f0 or a 4% reflectance at normal incidence\r\n     * The default fits with a polyurethane material.\r\n     * Changing the default value is more performance intensive.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public indexOfRefraction = PBRClearCoatConfiguration._DefaultIndexOfRefraction;\r\n\r\n    private _texture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Stores the clear coat values in a texture (red channel is intensity and green channel is roughness)\r\n     * If useRoughnessFromMainTexture is false, the green channel of texture is not used and the green channel of textureRoughness is used instead\r\n     * if textureRoughness is not empty, else no texture roughness is used\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public texture: Nullable<BaseTexture> = null;\r\n\r\n    private _useRoughnessFromMainTexture = true;\r\n    /**\r\n     * Indicates that the green channel of the texture property will be used for roughness (default: true)\r\n     * If false, the green channel from textureRoughness is used for roughness\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useRoughnessFromMainTexture = true;\r\n\r\n    private _textureRoughness: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Stores the clear coat roughness in a texture (green channel)\r\n     * Not used if useRoughnessFromMainTexture is true\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public textureRoughness: Nullable<BaseTexture> = null;\r\n\r\n    private _remapF0OnInterfaceChange = true;\r\n    /**\r\n     * Defines if the F0 value should be remapped to account for the interface change in the material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public remapF0OnInterfaceChange = true;\r\n\r\n    private _bumpTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Define the clear coat specific bump texture.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public bumpTexture: Nullable<BaseTexture> = null;\r\n\r\n    private _isTintEnabled = false;\r\n    /**\r\n     * Defines if the clear coat tint is enabled in the material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public isTintEnabled = false;\r\n\r\n    /**\r\n     * Defines the clear coat tint of the material.\r\n     * This is only use if tint is enabled\r\n     */\r\n    @serializeAsColor3()\r\n    public tintColor = Color3.White();\r\n\r\n    /**\r\n     * Defines the distance at which the tint color should be found in the\r\n     * clear coat media.\r\n     * This is only use if tint is enabled\r\n     */\r\n    @serialize()\r\n    public tintColorAtDistance = 1;\r\n\r\n    /**\r\n     * Defines the clear coat layer thickness.\r\n     * This is only use if tint is enabled\r\n     */\r\n    @serialize()\r\n    public tintThickness: number = 1;\r\n\r\n    private _tintTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Stores the clear tint values in a texture.\r\n     * rgb is tint\r\n     * a is a thickness factor\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public tintTexture: Nullable<BaseTexture> = null;\r\n\r\n    /** @hidden */\r\n    private _internalMarkAllSubMeshesAsTexturesDirty: () => void;\r\n\r\n    /** @hidden */\r\n    public _markAllSubMeshesAsTexturesDirty(): void {\r\n        this._enable(this._isEnabled);\r\n        this._internalMarkAllSubMeshesAsTexturesDirty();\r\n    }\r\n\r\n    constructor(material: PBRBaseMaterial, addToPluginList = true) {\r\n        super(material, \"PBRClearCoat\", 100, new MaterialClearCoatDefines(), addToPluginList);\r\n\r\n        this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[Constants.MATERIAL_TextureDirtyFlag];\r\n    }\r\n\r\n    public isReadyForSubMesh(defines: MaterialClearCoatDefines, scene: Scene, engine: Engine): boolean {\r\n        if (!this._isEnabled) {\r\n            return true;\r\n        }\r\n\r\n        const disableBumpMap = this._material._disableBumpMap;\r\n        if (defines._areTexturesDirty) {\r\n            if (scene.texturesEnabled) {\r\n                if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\r\n                    if (!this._texture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._textureRoughness && MaterialFlags.ClearCoatTextureEnabled) {\r\n                    if (!this._textureRoughness.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (engine.getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.ClearCoatBumpTextureEnabled && !disableBumpMap) {\r\n                    // Bump texture cannot be not blocking.\r\n                    if (!this._bumpTexture.isReady()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._isTintEnabled && this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\r\n                    if (!this._tintTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public prepareDefines(defines: MaterialClearCoatDefines, scene: Scene): void {\r\n        if (this._isEnabled) {\r\n            defines.CLEARCOAT = true;\r\n            defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = this._useRoughnessFromMainTexture;\r\n            defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL =\r\n                this._texture !== null && this._texture._texture === this._textureRoughness?._texture && this._texture.checkTransformsAreIdentical(this._textureRoughness);\r\n            defines.CLEARCOAT_REMAP_F0 = this._remapF0OnInterfaceChange;\r\n\r\n            if (defines._areTexturesDirty) {\r\n                if (scene.texturesEnabled) {\r\n                    if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"CLEARCOAT_TEXTURE\");\r\n                    } else {\r\n                        defines.CLEARCOAT_TEXTURE = false;\r\n                    }\r\n\r\n                    if (this._textureRoughness && MaterialFlags.ClearCoatTextureEnabled) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._textureRoughness, defines, \"CLEARCOAT_TEXTURE_ROUGHNESS\");\r\n                    } else {\r\n                        defines.CLEARCOAT_TEXTURE_ROUGHNESS = false;\r\n                    }\r\n\r\n                    if (this._bumpTexture && MaterialFlags.ClearCoatBumpTextureEnabled) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._bumpTexture, defines, \"CLEARCOAT_BUMP\");\r\n                    } else {\r\n                        defines.CLEARCOAT_BUMP = false;\r\n                    }\r\n\r\n                    defines.CLEARCOAT_DEFAULTIOR = this._indexOfRefraction === PBRClearCoatConfiguration._DefaultIndexOfRefraction;\r\n\r\n                    if (this._isTintEnabled) {\r\n                        defines.CLEARCOAT_TINT = true;\r\n                        if (this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\r\n                            MaterialHelper.PrepareDefinesForMergedUV(this._tintTexture, defines, \"CLEARCOAT_TINT_TEXTURE\");\r\n                            defines.CLEARCOAT_TINT_GAMMATEXTURE = this._tintTexture.gammaSpace;\r\n                        } else {\r\n                            defines.CLEARCOAT_TINT_TEXTURE = false;\r\n                        }\r\n                    } else {\r\n                        defines.CLEARCOAT_TINT = false;\r\n                        defines.CLEARCOAT_TINT_TEXTURE = false;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            defines.CLEARCOAT = false;\r\n            defines.CLEARCOAT_TEXTURE = false;\r\n            defines.CLEARCOAT_TEXTURE_ROUGHNESS = false;\r\n            defines.CLEARCOAT_BUMP = false;\r\n            defines.CLEARCOAT_TINT = false;\r\n            defines.CLEARCOAT_TINT_TEXTURE = false;\r\n            defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\r\n            defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL = false;\r\n        }\r\n    }\r\n\r\n    public bindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene, engine: Engine, subMesh: SubMesh): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n\r\n        const defines = subMesh!.materialDefines as unknown as MaterialClearCoatDefines;\r\n\r\n        const isFrozen = this._material.isFrozen;\r\n\r\n        const disableBumpMap = this._material._disableBumpMap;\r\n        const invertNormalMapX = this._material._invertNormalMapX;\r\n        const invertNormalMapY = this._material._invertNormalMapY;\r\n\r\n        const identicalTextures = defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL;\r\n\r\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\r\n            if (identicalTextures && MaterialFlags.ClearCoatTextureEnabled) {\r\n                uniformBuffer.updateFloat4(\"vClearCoatInfos\", this._texture!.coordinatesIndex, this._texture!.level, -1, -1);\r\n                MaterialHelper.BindTextureMatrix(this._texture!, uniformBuffer, \"clearCoat\");\r\n            } else if ((this._texture || this._textureRoughness) && MaterialFlags.ClearCoatTextureEnabled) {\r\n                uniformBuffer.updateFloat4(\r\n                    \"vClearCoatInfos\",\r\n                    this._texture?.coordinatesIndex ?? 0,\r\n                    this._texture?.level ?? 0,\r\n                    this._textureRoughness?.coordinatesIndex ?? 0,\r\n                    this._textureRoughness?.level ?? 0\r\n                );\r\n                if (this._texture) {\r\n                    MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"clearCoat\");\r\n                }\r\n                if (this._textureRoughness && !identicalTextures && !defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE) {\r\n                    MaterialHelper.BindTextureMatrix(this._textureRoughness, uniformBuffer, \"clearCoatRoughness\");\r\n                }\r\n            }\r\n\r\n            if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.ClearCoatTextureEnabled && !disableBumpMap) {\r\n                uniformBuffer.updateFloat2(\"vClearCoatBumpInfos\", this._bumpTexture.coordinatesIndex, this._bumpTexture.level);\r\n                MaterialHelper.BindTextureMatrix(this._bumpTexture, uniformBuffer, \"clearCoatBump\");\r\n\r\n                if (scene._mirroredCameraPosition) {\r\n                    uniformBuffer.updateFloat2(\"vClearCoatTangentSpaceParams\", invertNormalMapX ? 1.0 : -1.0, invertNormalMapY ? 1.0 : -1.0);\r\n                } else {\r\n                    uniformBuffer.updateFloat2(\"vClearCoatTangentSpaceParams\", invertNormalMapX ? -1.0 : 1.0, invertNormalMapY ? -1.0 : 1.0);\r\n                }\r\n            }\r\n\r\n            if (this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\r\n                uniformBuffer.updateFloat2(\"vClearCoatTintInfos\", this._tintTexture.coordinatesIndex, this._tintTexture.level);\r\n                MaterialHelper.BindTextureMatrix(this._tintTexture, uniformBuffer, \"clearCoatTint\");\r\n            }\r\n\r\n            // Clear Coat General params\r\n            uniformBuffer.updateFloat2(\"vClearCoatParams\", this.intensity, this.roughness);\r\n\r\n            // Clear Coat Refraction params\r\n            const a = 1 - this._indexOfRefraction;\r\n            const b = 1 + this._indexOfRefraction;\r\n            const f0 = Math.pow(-a / b, 2); // Schlicks approx: (ior1 - ior2) / (ior1 + ior2) where ior2 for air is close to vacuum = 1.\r\n            const eta = 1 / this._indexOfRefraction;\r\n            uniformBuffer.updateFloat4(\"vClearCoatRefractionParams\", f0, eta, a, b);\r\n\r\n            if (this._isTintEnabled) {\r\n                uniformBuffer.updateFloat4(\"vClearCoatTintParams\", this.tintColor.r, this.tintColor.g, this.tintColor.b, Math.max(0.00001, this.tintThickness));\r\n                uniformBuffer.updateFloat(\"clearCoatColorAtDistance\", Math.max(0.00001, this.tintColorAtDistance));\r\n            }\r\n        }\r\n\r\n        // Textures\r\n        if (scene.texturesEnabled) {\r\n            if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\r\n                uniformBuffer.setTexture(\"clearCoatSampler\", this._texture);\r\n            }\r\n\r\n            if (this._textureRoughness && !identicalTextures && !defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE && MaterialFlags.ClearCoatTextureEnabled) {\r\n                uniformBuffer.setTexture(\"clearCoatRoughnessSampler\", this._textureRoughness);\r\n            }\r\n\r\n            if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.ClearCoatBumpTextureEnabled && !disableBumpMap) {\r\n                uniformBuffer.setTexture(\"clearCoatBumpSampler\", this._bumpTexture);\r\n            }\r\n\r\n            if (this._isTintEnabled && this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\r\n                uniformBuffer.setTexture(\"clearCoatTintSampler\", this._tintTexture);\r\n            }\r\n        }\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (this._texture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._textureRoughness === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._bumpTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._tintTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public getActiveTextures(activeTextures: BaseTexture[]): void {\r\n        if (this._texture) {\r\n            activeTextures.push(this._texture);\r\n        }\r\n\r\n        if (this._textureRoughness) {\r\n            activeTextures.push(this._textureRoughness);\r\n        }\r\n\r\n        if (this._bumpTexture) {\r\n            activeTextures.push(this._bumpTexture);\r\n        }\r\n\r\n        if (this._tintTexture) {\r\n            activeTextures.push(this._tintTexture);\r\n        }\r\n    }\r\n\r\n    public getAnimatables(animatables: IAnimatable[]): void {\r\n        if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\r\n            animatables.push(this._texture);\r\n        }\r\n\r\n        if (this._textureRoughness && this._textureRoughness.animations && this._textureRoughness.animations.length > 0) {\r\n            animatables.push(this._textureRoughness);\r\n        }\r\n\r\n        if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\r\n            animatables.push(this._bumpTexture);\r\n        }\r\n\r\n        if (this._tintTexture && this._tintTexture.animations && this._tintTexture.animations.length > 0) {\r\n            animatables.push(this._tintTexture);\r\n        }\r\n    }\r\n\r\n    public dispose(forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            this._texture?.dispose();\r\n            this._textureRoughness?.dispose();\r\n            this._bumpTexture?.dispose();\r\n            this._tintTexture?.dispose();\r\n        }\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"PBRClearCoatConfiguration\";\r\n    }\r\n\r\n    public addFallbacks(defines: MaterialClearCoatDefines, fallbacks: EffectFallbacks, currentRank: number): number {\r\n        if (defines.CLEARCOAT_BUMP) {\r\n            fallbacks.addFallback(currentRank++, \"CLEARCOAT_BUMP\");\r\n        }\r\n        if (defines.CLEARCOAT_TINT) {\r\n            fallbacks.addFallback(currentRank++, \"CLEARCOAT_TINT\");\r\n        }\r\n        if (defines.CLEARCOAT) {\r\n            fallbacks.addFallback(currentRank++, \"CLEARCOAT\");\r\n        }\r\n        return currentRank;\r\n    }\r\n\r\n    public getSamplers(samplers: string[]): void {\r\n        samplers.push(\"clearCoatSampler\", \"clearCoatRoughnessSampler\", \"clearCoatBumpSampler\", \"clearCoatTintSampler\");\r\n    }\r\n\r\n    public getUniforms(): { ubo?: Array<{ name: string; size: number; type: string }>; vertex?: string; fragment?: string } {\r\n        return {\r\n            ubo: [\r\n                { name: \"vClearCoatParams\", size: 2, type: \"vec2\" },\r\n                { name: \"vClearCoatRefractionParams\", size: 4, type: \"vec4\" },\r\n                { name: \"vClearCoatInfos\", size: 4, type: \"vec4\" },\r\n                { name: \"clearCoatMatrix\", size: 16, type: \"mat4\" },\r\n                { name: \"clearCoatRoughnessMatrix\", size: 16, type: \"mat4\" },\r\n                { name: \"vClearCoatBumpInfos\", size: 2, type: \"vec2\" },\r\n                { name: \"vClearCoatTangentSpaceParams\", size: 2, type: \"vec2\" },\r\n                { name: \"clearCoatBumpMatrix\", size: 16, type: \"mat4\" },\r\n                { name: \"vClearCoatTintParams\", size: 4, type: \"vec4\" },\r\n                { name: \"clearCoatColorAtDistance\", size: 1, type: \"float\" },\r\n                { name: \"vClearCoatTintInfos\", size: 2, type: \"vec2\" },\r\n                { name: \"clearCoatTintMatrix\", size: 16, type: \"mat4\" },\r\n            ],\r\n        };\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}