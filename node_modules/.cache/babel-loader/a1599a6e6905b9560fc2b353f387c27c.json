{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Texture } from \"./texture.js\";\nimport \"../../Engines/Extensions/engine.rawTexture.js\";\n/**\n * Class used to store 3D textures containing user data\n */\n\nvar RawTexture3D =\n/** @class */\nfunction (_super) {\n  __extends(RawTexture3D, _super);\n  /**\n   * Create a new RawTexture3D\n   * @param data defines the data of the texture\n   * @param width defines the width of the texture\n   * @param height defines the height of the texture\n   * @param depth defines the depth of the texture\n   * @param format defines the texture format to use\n   * @param scene defines the hosting scene\n   * @param generateMipMaps defines a boolean indicating if mip levels should be generated (true by default)\n   * @param invertY defines if texture must be stored with Y axis inverted\n   * @param samplingMode defines the sampling mode to use (Texture.TRILINEAR_SAMPLINGMODE by default)\n   * @param textureType defines the texture Type (Engine.TEXTURETYPE_UNSIGNED_INT, Engine.TEXTURETYPE_FLOAT...)\n   */\n\n\n  function RawTexture3D(data, width, height, depth,\n  /** Gets or sets the texture format to use */\n  format, scene, generateMipMaps, invertY, samplingMode, textureType) {\n    if (generateMipMaps === void 0) {\n      generateMipMaps = true;\n    }\n\n    if (invertY === void 0) {\n      invertY = false;\n    }\n\n    if (samplingMode === void 0) {\n      samplingMode = Texture.TRILINEAR_SAMPLINGMODE;\n    }\n\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    var _this = _super.call(this, null, scene, !generateMipMaps, invertY) || this;\n\n    _this.format = format;\n    _this._texture = scene.getEngine().createRawTexture3D(data, width, height, depth, format, generateMipMaps, invertY, samplingMode, null, textureType);\n    _this.is3D = true;\n    return _this;\n  }\n  /**\n   * Update the texture with new data\n   * @param data defines the data to store in the texture\n   */\n\n\n  RawTexture3D.prototype.update = function (data) {\n    if (!this._texture) {\n      return;\n    }\n\n    this._getEngine().updateRawTexture3D(this._texture, data, this._texture.format, this._texture.invertY, null, this._texture.type);\n  };\n\n  return RawTexture3D;\n}(Texture);\n\nexport { RawTexture3D };","map":{"version":3,"mappings":";AACA,SAASA,OAAT,QAAwB,cAAxB;AAEA,OAAO,+CAAP;AACA;;;;AAGA;AAAA;AAAA;AAAkCC;AAC9B;;;;;;;;;;;;;;;AAaA,wBACIC,IADJ,EAEIC,KAFJ,EAGIC,MAHJ,EAIIC,KAJJ;AAKI;AACOC,QANX,EAOIC,KAPJ,EAQIC,eARJ,EASIC,OATJ,EAUIC,YAVJ,EAWIC,WAXJ,EAWoD;AAHhD;AAAAH;AAA+B;;AAC/B;AAAAC;AAAwB;;AACxB;AAAAC,qBAAuBV,OAAO,CAACY,sBAA/B;AAAqD;;AACrD;AAAAD,oBAAc,CAAd;AAAc;;AAXlB,gBAaIE,kBAAM,IAAN,EAAYN,KAAZ,EAAmB,CAACC,eAApB,EAAqCC,OAArC,KAA6C,IAbjD;;AAMWK;AASPA,SAAI,CAACC,QAAL,GAAgBR,KAAK,CAACS,SAAN,GAAkBC,kBAAlB,CAAqCf,IAArC,EAA2CC,KAA3C,EAAkDC,MAAlD,EAA0DC,KAA1D,EAAiEC,MAAjE,EAAyEE,eAAzE,EAA0FC,OAA1F,EAAmGC,YAAnG,EAAiH,IAAjH,EAAuHC,WAAvH,CAAhB;AAEAG,SAAI,CAACI,IAAL,GAAY,IAAZ;;AACH;AAED;;;;;;AAIOC,kCAAP,UAAcjB,IAAd,EAAmC;AAC/B,QAAI,CAAC,KAAKa,QAAV,EAAoB;AAChB;AACH;;AACD,SAAKK,UAAL,GAAmBC,kBAAnB,CAAsC,KAAKN,QAA3C,EAAqDb,IAArD,EAA2D,KAAKa,QAAL,CAAcT,MAAzE,EAAiF,KAAKS,QAAL,CAAeN,OAAhG,EAAyG,IAAzG,EAA+G,KAAKM,QAAL,CAAcO,IAA7H;AACH,GALM;;AAMX;AAAC,CA5CD,CAAkCtB,OAAlC","names":["Texture","__extends","data","width","height","depth","format","scene","generateMipMaps","invertY","samplingMode","textureType","TRILINEAR_SAMPLINGMODE","_super","_this","_texture","getEngine","createRawTexture3D","is3D","RawTexture3D","_getEngine","updateRawTexture3D","type"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Textures/rawTexture3D.ts"],"sourcesContent":["import type { Scene } from \"../../scene\";\r\nimport { Texture } from \"./texture\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport \"../../Engines/Extensions/engine.rawTexture\";\r\n/**\r\n * Class used to store 3D textures containing user data\r\n */\r\nexport class RawTexture3D extends Texture {\r\n    /**\r\n     * Create a new RawTexture3D\r\n     * @param data defines the data of the texture\r\n     * @param width defines the width of the texture\r\n     * @param height defines the height of the texture\r\n     * @param depth defines the depth of the texture\r\n     * @param format defines the texture format to use\r\n     * @param scene defines the hosting scene\r\n     * @param generateMipMaps defines a boolean indicating if mip levels should be generated (true by default)\r\n     * @param invertY defines if texture must be stored with Y axis inverted\r\n     * @param samplingMode defines the sampling mode to use (Texture.TRILINEAR_SAMPLINGMODE by default)\r\n     * @param textureType defines the texture Type (Engine.TEXTURETYPE_UNSIGNED_INT, Engine.TEXTURETYPE_FLOAT...)\r\n     */\r\n    constructor(\r\n        data: ArrayBufferView,\r\n        width: number,\r\n        height: number,\r\n        depth: number,\r\n        /** Gets or sets the texture format to use */\r\n        public format: number,\r\n        scene: Scene,\r\n        generateMipMaps: boolean = true,\r\n        invertY: boolean = false,\r\n        samplingMode: number = Texture.TRILINEAR_SAMPLINGMODE,\r\n        textureType = Constants.TEXTURETYPE_UNSIGNED_INT\r\n    ) {\r\n        super(null, scene, !generateMipMaps, invertY);\r\n\r\n        this._texture = scene.getEngine().createRawTexture3D(data, width, height, depth, format, generateMipMaps, invertY, samplingMode, null, textureType);\r\n\r\n        this.is3D = true;\r\n    }\r\n\r\n    /**\r\n     * Update the texture with new data\r\n     * @param data defines the data to store in the texture\r\n     */\r\n    public update(data: ArrayBufferView): void {\r\n        if (!this._texture) {\r\n            return;\r\n        }\r\n        this._getEngine()!.updateRawTexture3D(this._texture, data, this._texture.format, this._texture!.invertY, null, this._texture.type);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}