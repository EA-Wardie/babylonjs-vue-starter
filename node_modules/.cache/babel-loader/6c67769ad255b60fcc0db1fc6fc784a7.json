{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport { Engine } from \"../engine.js\";\n/**\n * Class used to define an additional view for the engine\n * @see https://doc.babylonjs.com/divingDeeper/scene/multiCanvas\n */\n\nvar EngineView =\n/** @class */\nfunction () {\n  function EngineView() {}\n\n  return EngineView;\n}();\n\nexport { EngineView };\nObject.defineProperty(Engine.prototype, \"inputElement\", {\n  get: function get() {\n    return this._inputElement;\n  },\n  set: function set(value) {\n    var _a;\n\n    if (this._inputElement !== value) {\n      this._inputElement = value;\n      (_a = this._onEngineViewChanged) === null || _a === void 0 ? void 0 : _a.call(this);\n    }\n  }\n});\n\nEngine.prototype.getInputElement = function () {\n  return this.inputElement || this.getRenderingCanvas();\n};\n\nEngine.prototype.registerView = function (canvas, camera, clearBeforeCopy) {\n  var _this = this;\n\n  if (!this.views) {\n    this.views = [];\n  }\n\n  for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n    var view = _a[_i];\n\n    if (view.target === canvas) {\n      return view;\n    }\n  }\n\n  var masterCanvas = this.getRenderingCanvas();\n\n  if (masterCanvas) {\n    canvas.width = masterCanvas.width;\n    canvas.height = masterCanvas.height;\n  }\n\n  var newView = {\n    target: canvas,\n    camera: camera,\n    clearBeforeCopy: clearBeforeCopy,\n    enabled: true\n  };\n  this.views.push(newView);\n\n  if (camera) {\n    camera.onDisposeObservable.add(function () {\n      _this.unRegisterView(canvas);\n    });\n  }\n\n  return newView;\n};\n\nEngine.prototype.unRegisterView = function (canvas) {\n  if (!this.views) {\n    return this;\n  }\n\n  for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n    var view = _a[_i];\n\n    if (view.target === canvas) {\n      var index = this.views.indexOf(view);\n\n      if (index !== -1) {\n        this.views.splice(index, 1);\n      }\n\n      break;\n    }\n  }\n\n  return this;\n};\n\nEngine.prototype._renderViews = function () {\n  if (!this.views) {\n    return false;\n  }\n\n  var parent = this.getRenderingCanvas();\n\n  if (!parent) {\n    return false;\n  }\n\n  for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n    var view = _a[_i];\n\n    if (!view.enabled) {\n      continue;\n    }\n\n    var canvas = view.target;\n    var context_1 = canvas.getContext(\"2d\");\n\n    if (!context_1) {\n      continue;\n    }\n\n    var camera = view.camera;\n    var previewCamera = null;\n    var scene = null;\n\n    if (camera) {\n      scene = camera.getScene();\n\n      if (scene.activeCameras && scene.activeCameras.length) {\n        continue;\n      }\n\n      this.activeView = view;\n      previewCamera = scene.activeCamera;\n      scene.activeCamera = camera;\n    }\n\n    if (view.customResize) {\n      view.customResize(canvas);\n    } else {\n      // Set sizes\n      var width = Math.floor(canvas.clientWidth / this._hardwareScalingLevel);\n      var height = Math.floor(canvas.clientHeight / this._hardwareScalingLevel);\n      var dimsChanged = width !== canvas.width || parent.width !== canvas.width || height !== canvas.height || parent.height !== canvas.height;\n\n      if (canvas.clientWidth && canvas.clientHeight && dimsChanged) {\n        canvas.width = width;\n        canvas.height = height;\n        this.setSize(width, height);\n      }\n    }\n\n    if (!parent.width || !parent.height) {\n      return false;\n    } // Render the frame\n\n\n    this._renderFrame();\n\n    this.flushFramebuffer(); // Copy to target\n\n    if (view.clearBeforeCopy) {\n      context_1.clearRect(0, 0, parent.width, parent.height);\n    }\n\n    context_1.drawImage(parent, 0, 0); // Restore\n\n    if (previewCamera && scene) {\n      scene.activeCamera = previewCamera;\n    }\n  }\n\n  this.activeView = null;\n  return true;\n};","map":{"version":3,"mappings":"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","names":["Engine","Object","defineProperty","prototype","get","_inputElement","set","value","_onEngineViewChanged","_a","getInputElement","inputElement","getRenderingCanvas","registerView","canvas","camera","clearBeforeCopy","views","_i","view","target","masterCanvas","width","height","newView","enabled","push","onDisposeObservable","add","_this","unRegisterView","index","indexOf","splice","_renderViews","parent","context_1","getContext","previewCamera","scene","getScene","activeCameras","length","activeView","activeCamera","customResize","Math","floor","clientWidth","_hardwareScalingLevel","clientHeight","dimsChanged","setSize","_renderFrame","flushFramebuffer","clearRect","drawImage"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/Extensions/engine.views.ts"],"sourcesContent":["import { Engine } from \"../engine\";\r\nimport type { Camera } from \"../../Cameras/camera\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\n\r\n/**\r\n * Class used to define an additional view for the engine\r\n * @see https://doc.babylonjs.com/divingDeeper/scene/multiCanvas\r\n */\r\nexport class EngineView {\r\n    /** Defines the canvas where to render the view */\r\n    target: HTMLCanvasElement;\r\n    /** Defines an optional camera used to render the view (will use active camera else) */\r\n    camera?: Camera;\r\n    /** Indicates if the destination view canvas should be cleared before copying the parent canvas. Can help if the scene clear color has alpha < 1 */\r\n    clearBeforeCopy?: boolean;\r\n    /** Indicates if the view is enabled (true by default) */\r\n    enabled: boolean;\r\n    /** Defines a custom function to handle canvas size changes. (the canvas to render into is provided to the callback) */\r\n    customResize?: (canvas: HTMLCanvasElement) => void;\r\n}\r\n\r\ndeclare module \"../../Engines/engine\" {\r\n    export interface Engine {\r\n        /** @hidden */\r\n        _inputElement: Nullable<HTMLElement>;\r\n\r\n        /**\r\n         * Gets or sets the  HTML element to use for attaching events\r\n         */\r\n        inputElement: Nullable<HTMLElement>;\r\n\r\n        /**\r\n         * Observable to handle when a change to inputElement occurs\r\n         * @hidden\r\n         */\r\n        _onEngineViewChanged?: () => void;\r\n\r\n        /**\r\n         * Gets the current engine view\r\n         * @see https://doc.babylonjs.com/how_to/multi_canvases\r\n         */\r\n        activeView: Nullable<EngineView>;\r\n\r\n        /** Gets or sets the list of views */\r\n        views: EngineView[];\r\n\r\n        /**\r\n         * Register a new child canvas\r\n         * @param canvas defines the canvas to register\r\n         * @param camera defines an optional camera to use with this canvas (it will overwrite the scene.camera for this view)\r\n         * @param clearBeforeCopy Indicates if the destination view canvas should be cleared before copying the parent canvas. Can help if the scene clear color has alpha < 1\r\n         * @returns the associated view\r\n         */\r\n        registerView(canvas: HTMLCanvasElement, camera?: Camera, clearBeforeCopy?: boolean): EngineView;\r\n\r\n        /**\r\n         * Remove a registered child canvas\r\n         * @param canvas defines the canvas to remove\r\n         * @returns the current engine\r\n         */\r\n        unRegisterView(canvas: HTMLCanvasElement): Engine;\r\n    }\r\n}\r\n\r\nObject.defineProperty(Engine.prototype, \"inputElement\", {\r\n    get: function (this: Engine) {\r\n        return this._inputElement;\r\n    },\r\n    set: function (this: Engine, value: HTMLElement) {\r\n        if (this._inputElement !== value) {\r\n            this._inputElement = value;\r\n            this._onEngineViewChanged?.();\r\n        }\r\n    },\r\n});\r\n\r\nEngine.prototype.getInputElement = function (): Nullable<HTMLElement> {\r\n    return this.inputElement || this.getRenderingCanvas();\r\n};\r\n\r\nEngine.prototype.registerView = function (canvas: HTMLCanvasElement, camera?: Camera, clearBeforeCopy?: boolean): EngineView {\r\n    if (!this.views) {\r\n        this.views = [];\r\n    }\r\n\r\n    for (const view of this.views) {\r\n        if (view.target === canvas) {\r\n            return view;\r\n        }\r\n    }\r\n\r\n    const masterCanvas = this.getRenderingCanvas();\r\n    if (masterCanvas) {\r\n        canvas.width = masterCanvas.width;\r\n        canvas.height = masterCanvas.height;\r\n    }\r\n\r\n    const newView = { target: canvas, camera, clearBeforeCopy, enabled: true };\r\n    this.views.push(newView);\r\n\r\n    if (camera) {\r\n        camera.onDisposeObservable.add(() => {\r\n            this.unRegisterView(canvas);\r\n        });\r\n    }\r\n\r\n    return newView;\r\n};\r\n\r\nEngine.prototype.unRegisterView = function (canvas: HTMLCanvasElement): Engine {\r\n    if (!this.views) {\r\n        return this;\r\n    }\r\n\r\n    for (const view of this.views) {\r\n        if (view.target === canvas) {\r\n            const index = this.views.indexOf(view);\r\n\r\n            if (index !== -1) {\r\n                this.views.splice(index, 1);\r\n            }\r\n            break;\r\n        }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\nEngine.prototype._renderViews = function () {\r\n    if (!this.views) {\r\n        return false;\r\n    }\r\n\r\n    const parent = this.getRenderingCanvas();\r\n\r\n    if (!parent) {\r\n        return false;\r\n    }\r\n\r\n    for (const view of this.views) {\r\n        if (!view.enabled) {\r\n            continue;\r\n        }\r\n        const canvas = view.target;\r\n        const context = canvas.getContext(\"2d\");\r\n        if (!context) {\r\n            continue;\r\n        }\r\n        const camera = view.camera;\r\n        let previewCamera: Nullable<Camera> = null;\r\n        let scene: Nullable<Scene> = null;\r\n        if (camera) {\r\n            scene = camera.getScene();\r\n\r\n            if (scene.activeCameras && scene.activeCameras.length) {\r\n                continue;\r\n            }\r\n\r\n            this.activeView = view;\r\n\r\n            previewCamera = scene.activeCamera;\r\n            scene.activeCamera = camera;\r\n        }\r\n\r\n        if (view.customResize) {\r\n            view.customResize(canvas);\r\n        } else {\r\n            // Set sizes\r\n            const width = Math.floor(canvas.clientWidth / this._hardwareScalingLevel);\r\n            const height = Math.floor(canvas.clientHeight / this._hardwareScalingLevel);\r\n\r\n            const dimsChanged = width !== canvas.width || parent.width !== canvas.width || height !== canvas.height || parent.height !== canvas.height;\r\n            if (canvas.clientWidth && canvas.clientHeight && dimsChanged) {\r\n                canvas.width = width;\r\n                canvas.height = height;\r\n                this.setSize(width, height);\r\n            }\r\n        }\r\n\r\n        if (!parent.width || !parent.height) {\r\n            return false;\r\n        }\r\n\r\n        // Render the frame\r\n        this._renderFrame();\r\n\r\n        this.flushFramebuffer();\r\n\r\n        // Copy to target\r\n        if (view.clearBeforeCopy) {\r\n            context.clearRect(0, 0, parent.width, parent.height);\r\n        }\r\n        context.drawImage(parent, 0, 0);\r\n\r\n        // Restore\r\n        if (previewCamera && scene) {\r\n            scene.activeCamera = previewCamera;\r\n        }\r\n    }\r\n\r\n    this.activeView = null;\r\n\r\n    return true;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}