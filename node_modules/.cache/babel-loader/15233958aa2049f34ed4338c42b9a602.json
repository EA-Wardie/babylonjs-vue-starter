{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { SubSurfaceScatteringPostProcess } from \"../PostProcesses/subSurfaceScatteringPostProcess.js\";\nimport { SceneComponentConstants } from \"../sceneComponent.js\";\nimport { _WarnImport } from \"../Misc/devTools.js\";\n/**\n * Contains all parameters needed for the prepass to perform\n * screen space subsurface scattering\n */\n\nvar SubSurfaceConfiguration =\n/** @class */\nfunction () {\n  /**\n   * Builds a subsurface configuration object\n   * @param scene The scene\n   */\n  function SubSurfaceConfiguration(scene) {\n    this._ssDiffusionS = [];\n    this._ssFilterRadii = [];\n    this._ssDiffusionD = [];\n    /**\n     * Is subsurface enabled\n     */\n\n    this.enabled = false;\n    /**\n     * Does the output of this prepass need to go through imageprocessing\n     */\n\n    this.needsImageProcessing = true;\n    /**\n     * Name of the configuration\n     */\n\n    this.name = SceneComponentConstants.NAME_SUBSURFACE;\n    /**\n     * Diffusion profile colors for subsurface scattering\n     * You can add one diffusion color using `addDiffusionProfile` on `scene.prePassRenderer`\n     * See ...\n     * Note that you can only store up to 5 of them\n     */\n\n    this.ssDiffusionProfileColors = [];\n    /**\n     * Defines the ratio real world => scene units.\n     * Used for subsurface scattering\n     */\n\n    this.metersPerUnit = 1;\n    /**\n     * Textures that should be present in the MRT for this effect to work\n     */\n\n    this.texturesRequired = [5, 7, 4, 0]; // Adding default diffusion profile\n\n    this.addDiffusionProfile(new Color3(1, 1, 1));\n    this._scene = scene;\n\n    SubSurfaceConfiguration._SceneComponentInitialization(this._scene);\n  }\n\n  Object.defineProperty(SubSurfaceConfiguration.prototype, \"ssDiffusionS\", {\n    /**\n     * Diffusion profile color for subsurface scattering\n     */\n    get: function get() {\n      return this._ssDiffusionS;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SubSurfaceConfiguration.prototype, \"ssDiffusionD\", {\n    /**\n     * Diffusion profile max color channel value for subsurface scattering\n     */\n    get: function get() {\n      return this._ssDiffusionD;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SubSurfaceConfiguration.prototype, \"ssFilterRadii\", {\n    /**\n     * Diffusion profile filter radius for subsurface scattering\n     */\n    get: function get() {\n      return this._ssFilterRadii;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Adds a new diffusion profile.\n   * Useful for more realistic subsurface scattering on diverse materials.\n   * @param color The color of the diffusion profile. Should be the average color of the material.\n   * @return The index of the diffusion profile for the material subsurface configuration\n   */\n\n  SubSurfaceConfiguration.prototype.addDiffusionProfile = function (color) {\n    if (this.ssDiffusionD.length >= 5) {\n      // We only suppport 5 diffusion profiles\n      Logger.Error(\"You already reached the maximum number of diffusion profiles.\");\n      return 0; // default profile\n    } // Do not add doubles\n\n\n    for (var i = 0; i < this._ssDiffusionS.length / 3; i++) {\n      if (this._ssDiffusionS[i * 3] === color.r && this._ssDiffusionS[i * 3 + 1] === color.g && this._ssDiffusionS[i * 3 + 2] === color.b) {\n        return i;\n      }\n    }\n\n    this._ssDiffusionS.push(color.r, color.b, color.g);\n\n    this._ssDiffusionD.push(Math.max(Math.max(color.r, color.b), color.g));\n\n    this._ssFilterRadii.push(this.getDiffusionProfileParameters(color));\n\n    this.ssDiffusionProfileColors.push(color);\n    return this._ssDiffusionD.length - 1;\n  };\n  /**\n   * Creates the sss post process\n   * @return The created post process\n   */\n\n\n  SubSurfaceConfiguration.prototype.createPostProcess = function () {\n    this.postProcess = new SubSurfaceScatteringPostProcess(\"subSurfaceScattering\", this._scene, 1, null, undefined, this._scene.getEngine());\n    this.postProcess.autoClear = false;\n    return this.postProcess;\n  };\n  /**\n   * Deletes all diffusion profiles.\n   * Note that in order to render subsurface scattering, you should have at least 1 diffusion profile.\n   */\n\n\n  SubSurfaceConfiguration.prototype.clearAllDiffusionProfiles = function () {\n    this._ssDiffusionD = [];\n    this._ssDiffusionS = [];\n    this._ssFilterRadii = [];\n    this.ssDiffusionProfileColors = [];\n  };\n  /**\n   * Disposes this object\n   */\n\n\n  SubSurfaceConfiguration.prototype.dispose = function () {\n    this.clearAllDiffusionProfiles();\n\n    if (this.postProcess) {\n      this.postProcess.dispose();\n    }\n  };\n  /**\n   * @param color\n   * @hidden\n   * https://zero-radiance.github.io/post/sampling-diffusion/\n   *\n   * Importance sample the normalized diffuse reflectance profile for the computed value of 's'.\n   * ------------------------------------------------------------------------------------\n   * R[r, phi, s]   = s * (Exp[-r * s] + Exp[-r * s / 3]) / (8 * Pi * r)\n   * PDF[r, phi, s] = r * R[r, phi, s]\n   * CDF[r, s]      = 1 - 1/4 * Exp[-r * s] - 3/4 * Exp[-r * s / 3]\n   * ------------------------------------------------------------------------------------\n   * We importance sample the color channel with the widest scattering distance.\n   */\n\n\n  SubSurfaceConfiguration.prototype.getDiffusionProfileParameters = function (color) {\n    var cdf = 0.997;\n    var maxScatteringDistance = Math.max(color.r, color.g, color.b);\n    return this._sampleBurleyDiffusionProfile(cdf, maxScatteringDistance);\n  };\n  /**\n   * Performs sampling of a Normalized Burley diffusion profile in polar coordinates.\n   * 'u' is the random number (the value of the CDF): [0, 1).\n   * rcp(s) = 1 / ShapeParam = ScatteringDistance.\n   * Returns the sampled radial distance, s.t. (u = 0 -> r = 0) and (u = 1 -> r = Inf).\n   * @param u\n   * @param rcpS\n   */\n\n\n  SubSurfaceConfiguration.prototype._sampleBurleyDiffusionProfile = function (u, rcpS) {\n    u = 1 - u; // Convert CDF to CCDF\n\n    var g = 1 + 4 * u * (2 * u + Math.sqrt(1 + 4 * u * u));\n    var n = Math.pow(g, -1.0 / 3.0); // g^(-1/3)\n\n    var p = g * n * n; // g^(+1/3)\n\n    var c = 1 + p + n; // 1 + g^(+1/3) + g^(-1/3)\n\n    var x = 3 * Math.log(c / (4 * u));\n    return x * rcpS;\n  };\n  /**\n   * @param _\n   * @hidden\n   */\n\n\n  SubSurfaceConfiguration._SceneComponentInitialization = function (_) {\n    throw _WarnImport(\"SubSurfaceSceneComponent\");\n  };\n\n  return SubSurfaceConfiguration;\n}();\n\nexport { SubSurfaceConfiguration };","map":{"version":3,"mappings":"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","names":["Logger","Color3","SubSurfaceScatteringPostProcess","SceneComponentConstants","_WarnImport","scene","NAME_SUBSURFACE","addDiffusionProfile","_scene","SubSurfaceConfiguration","_SceneComponentInitialization","Object","_ssDiffusionS","_ssDiffusionD","_ssFilterRadii","color","ssDiffusionD","length","Error","i","r","g","b","push","Math","max","getDiffusionProfileParameters","ssDiffusionProfileColors","postProcess","undefined","getEngine","autoClear","clearAllDiffusionProfiles","dispose","cdf","maxScatteringDistance","_sampleBurleyDiffusionProfile","u","rcpS","sqrt","n","pow","p","c","x","log","_"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Rendering/subSurfaceConfiguration.ts"],"sourcesContent":["import { Logger } from \"../Misc/logger\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { SubSurfaceScatteringPostProcess } from \"../PostProcesses/subSurfaceScatteringPostProcess\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\nimport type { PrePassEffectConfiguration } from \"./prePassEffectConfiguration\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\n/**\r\n * Contains all parameters needed for the prepass to perform\r\n * screen space subsurface scattering\r\n */\r\nexport class SubSurfaceConfiguration implements PrePassEffectConfiguration {\r\n    /**\r\n     * @param _\r\n     * @hidden\r\n     */\r\n    public static _SceneComponentInitialization: (scene: Scene) => void = (_) => {\r\n        throw _WarnImport(\"SubSurfaceSceneComponent\");\r\n    };\r\n\r\n    private _ssDiffusionS: number[] = [];\r\n    private _ssFilterRadii: number[] = [];\r\n    private _ssDiffusionD: number[] = [];\r\n\r\n    /**\r\n     * Post process to attach for screen space subsurface scattering\r\n     */\r\n    public postProcess: SubSurfaceScatteringPostProcess;\r\n\r\n    /**\r\n     * Diffusion profile color for subsurface scattering\r\n     */\r\n    public get ssDiffusionS() {\r\n        return this._ssDiffusionS;\r\n    }\r\n\r\n    /**\r\n     * Diffusion profile max color channel value for subsurface scattering\r\n     */\r\n    public get ssDiffusionD() {\r\n        return this._ssDiffusionD;\r\n    }\r\n\r\n    /**\r\n     * Diffusion profile filter radius for subsurface scattering\r\n     */\r\n    public get ssFilterRadii() {\r\n        return this._ssFilterRadii;\r\n    }\r\n\r\n    /**\r\n     * Is subsurface enabled\r\n     */\r\n    public enabled = false;\r\n\r\n    /**\r\n     * Does the output of this prepass need to go through imageprocessing\r\n     */\r\n    public needsImageProcessing = true;\r\n\r\n    /**\r\n     * Name of the configuration\r\n     */\r\n    public name = SceneComponentConstants.NAME_SUBSURFACE;\r\n\r\n    /**\r\n     * Diffusion profile colors for subsurface scattering\r\n     * You can add one diffusion color using `addDiffusionProfile` on `scene.prePassRenderer`\r\n     * See ...\r\n     * Note that you can only store up to 5 of them\r\n     */\r\n    public ssDiffusionProfileColors: Color3[] = [];\r\n\r\n    /**\r\n     * Defines the ratio real world => scene units.\r\n     * Used for subsurface scattering\r\n     */\r\n    public metersPerUnit: number = 1;\r\n\r\n    /**\r\n     * Textures that should be present in the MRT for this effect to work\r\n     */\r\n    public readonly texturesRequired: number[] = [\r\n        Constants.PREPASS_DEPTH_TEXTURE_TYPE,\r\n        Constants.PREPASS_ALBEDO_SQRT_TEXTURE_TYPE,\r\n        Constants.PREPASS_COLOR_TEXTURE_TYPE,\r\n        Constants.PREPASS_IRRADIANCE_TEXTURE_TYPE,\r\n    ];\r\n\r\n    private _scene: Scene;\r\n\r\n    /**\r\n     * Builds a subsurface configuration object\r\n     * @param scene The scene\r\n     */\r\n    constructor(scene: Scene) {\r\n        // Adding default diffusion profile\r\n        this.addDiffusionProfile(new Color3(1, 1, 1));\r\n        this._scene = scene;\r\n\r\n        SubSurfaceConfiguration._SceneComponentInitialization(this._scene);\r\n    }\r\n\r\n    /**\r\n     * Adds a new diffusion profile.\r\n     * Useful for more realistic subsurface scattering on diverse materials.\r\n     * @param color The color of the diffusion profile. Should be the average color of the material.\r\n     * @return The index of the diffusion profile for the material subsurface configuration\r\n     */\r\n    public addDiffusionProfile(color: Color3): number {\r\n        if (this.ssDiffusionD.length >= 5) {\r\n            // We only suppport 5 diffusion profiles\r\n            Logger.Error(\"You already reached the maximum number of diffusion profiles.\");\r\n            return 0; // default profile\r\n        }\r\n\r\n        // Do not add doubles\r\n        for (let i = 0; i < this._ssDiffusionS.length / 3; i++) {\r\n            if (this._ssDiffusionS[i * 3] === color.r && this._ssDiffusionS[i * 3 + 1] === color.g && this._ssDiffusionS[i * 3 + 2] === color.b) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        this._ssDiffusionS.push(color.r, color.b, color.g);\r\n        this._ssDiffusionD.push(Math.max(Math.max(color.r, color.b), color.g));\r\n        this._ssFilterRadii.push(this.getDiffusionProfileParameters(color));\r\n        this.ssDiffusionProfileColors.push(color);\r\n\r\n        return this._ssDiffusionD.length - 1;\r\n    }\r\n\r\n    /**\r\n     * Creates the sss post process\r\n     * @return The created post process\r\n     */\r\n    public createPostProcess(): SubSurfaceScatteringPostProcess {\r\n        this.postProcess = new SubSurfaceScatteringPostProcess(\"subSurfaceScattering\", this._scene, 1, null, undefined, this._scene.getEngine());\r\n        this.postProcess.autoClear = false;\r\n\r\n        return this.postProcess;\r\n    }\r\n\r\n    /**\r\n     * Deletes all diffusion profiles.\r\n     * Note that in order to render subsurface scattering, you should have at least 1 diffusion profile.\r\n     */\r\n    public clearAllDiffusionProfiles() {\r\n        this._ssDiffusionD = [];\r\n        this._ssDiffusionS = [];\r\n        this._ssFilterRadii = [];\r\n        this.ssDiffusionProfileColors = [];\r\n    }\r\n\r\n    /**\r\n     * Disposes this object\r\n     */\r\n    public dispose() {\r\n        this.clearAllDiffusionProfiles();\r\n        if (this.postProcess) {\r\n            this.postProcess.dispose();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param color\r\n     * @hidden\r\n     * https://zero-radiance.github.io/post/sampling-diffusion/\r\n     *\r\n     * Importance sample the normalized diffuse reflectance profile for the computed value of 's'.\r\n     * ------------------------------------------------------------------------------------\r\n     * R[r, phi, s]   = s * (Exp[-r * s] + Exp[-r * s / 3]) / (8 * Pi * r)\r\n     * PDF[r, phi, s] = r * R[r, phi, s]\r\n     * CDF[r, s]      = 1 - 1/4 * Exp[-r * s] - 3/4 * Exp[-r * s / 3]\r\n     * ------------------------------------------------------------------------------------\r\n     * We importance sample the color channel with the widest scattering distance.\r\n     */\r\n    public getDiffusionProfileParameters(color: Color3) {\r\n        const cdf = 0.997;\r\n        const maxScatteringDistance = Math.max(color.r, color.g, color.b);\r\n\r\n        return this._sampleBurleyDiffusionProfile(cdf, maxScatteringDistance);\r\n    }\r\n\r\n    /**\r\n     * Performs sampling of a Normalized Burley diffusion profile in polar coordinates.\r\n     * 'u' is the random number (the value of the CDF): [0, 1).\r\n     * rcp(s) = 1 / ShapeParam = ScatteringDistance.\r\n     * Returns the sampled radial distance, s.t. (u = 0 -> r = 0) and (u = 1 -> r = Inf).\r\n     * @param u\r\n     * @param rcpS\r\n     */\r\n    private _sampleBurleyDiffusionProfile(u: number, rcpS: number) {\r\n        u = 1 - u; // Convert CDF to CCDF\r\n\r\n        const g = 1 + 4 * u * (2 * u + Math.sqrt(1 + 4 * u * u));\r\n        const n = Math.pow(g, -1.0 / 3.0); // g^(-1/3)\r\n        const p = g * n * n; // g^(+1/3)\r\n        const c = 1 + p + n; // 1 + g^(+1/3) + g^(-1/3)\r\n        const x = 3 * Math.log(c / (4 * u));\r\n\r\n        return x * rcpS;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}