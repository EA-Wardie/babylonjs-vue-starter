{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { BoundingBox } from \"../../Culling/boundingBox.js\";\n/**\n * Class used to store a cell in an octree\n * @see https://doc.babylonjs.com/how_to/optimizing_your_scene_with_octrees\n */\n\nvar OctreeBlock =\n/** @class */\nfunction () {\n  /**\n   * Creates a new block\n   * @param minPoint defines the minimum vector (in world space) of the block's bounding box\n   * @param maxPoint defines the maximum vector (in world space) of the block's bounding box\n   * @param capacity defines the maximum capacity of this block (if capacity is reached the block will be split into sub blocks)\n   * @param depth defines the current depth of this block in the octree\n   * @param maxDepth defines the maximal depth allowed (beyond this value, the capacity is ignored)\n   * @param creationFunc defines a callback to call when an element is added to the block\n   */\n  function OctreeBlock(minPoint, maxPoint, capacity, depth, maxDepth, creationFunc) {\n    /**\n     * Gets the content of the current block\n     */\n    this.entries = new Array();\n    this._boundingVectors = new Array();\n    this._capacity = capacity;\n    this._depth = depth;\n    this._maxDepth = maxDepth;\n    this._creationFunc = creationFunc;\n    this._minPoint = minPoint;\n    this._maxPoint = maxPoint;\n\n    this._boundingVectors.push(minPoint.clone());\n\n    this._boundingVectors.push(maxPoint.clone());\n\n    this._boundingVectors.push(minPoint.clone());\n\n    this._boundingVectors[2].x = maxPoint.x;\n\n    this._boundingVectors.push(minPoint.clone());\n\n    this._boundingVectors[3].y = maxPoint.y;\n\n    this._boundingVectors.push(minPoint.clone());\n\n    this._boundingVectors[4].z = maxPoint.z;\n\n    this._boundingVectors.push(maxPoint.clone());\n\n    this._boundingVectors[5].z = minPoint.z;\n\n    this._boundingVectors.push(maxPoint.clone());\n\n    this._boundingVectors[6].x = minPoint.x;\n\n    this._boundingVectors.push(maxPoint.clone());\n\n    this._boundingVectors[7].y = minPoint.y;\n  }\n\n  Object.defineProperty(OctreeBlock.prototype, \"capacity\", {\n    // Property\n\n    /**\n     * Gets the maximum capacity of this block (if capacity is reached the block will be split into sub blocks)\n     */\n    get: function get() {\n      return this._capacity;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(OctreeBlock.prototype, \"minPoint\", {\n    /**\n     * Gets the minimum vector (in world space) of the block's bounding box\n     */\n    get: function get() {\n      return this._minPoint;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(OctreeBlock.prototype, \"maxPoint\", {\n    /**\n     * Gets the maximum vector (in world space) of the block's bounding box\n     */\n    get: function get() {\n      return this._maxPoint;\n    },\n    enumerable: false,\n    configurable: true\n  }); // Methods\n\n  /**\n   * Add a new element to this block\n   * @param entry defines the element to add\n   */\n\n  OctreeBlock.prototype.addEntry = function (entry) {\n    if (this.blocks) {\n      for (var index = 0; index < this.blocks.length; index++) {\n        var block = this.blocks[index];\n        block.addEntry(entry);\n      }\n\n      return;\n    }\n\n    this._creationFunc(entry, this);\n\n    if (this.entries.length > this.capacity && this._depth < this._maxDepth) {\n      this.createInnerBlocks();\n    }\n  };\n  /**\n   * Remove an element from this block\n   * @param entry defines the element to remove\n   */\n\n\n  OctreeBlock.prototype.removeEntry = function (entry) {\n    if (this.blocks) {\n      for (var index = 0; index < this.blocks.length; index++) {\n        var block = this.blocks[index];\n        block.removeEntry(entry);\n      }\n\n      return;\n    }\n\n    var entryIndex = this.entries.indexOf(entry);\n\n    if (entryIndex > -1) {\n      this.entries.splice(entryIndex, 1);\n    }\n  };\n  /**\n   * Add an array of elements to this block\n   * @param entries defines the array of elements to add\n   */\n\n\n  OctreeBlock.prototype.addEntries = function (entries) {\n    for (var index = 0; index < entries.length; index++) {\n      var mesh = entries[index];\n      this.addEntry(mesh);\n    }\n  };\n  /**\n   * Test if the current block intersects the frustum planes and if yes, then add its content to the selection array\n   * @param frustumPlanes defines the frustum planes to test\n   * @param selection defines the array to store current content if selection is positive\n   * @param allowDuplicate defines if the selection array can contains duplicated entries\n   */\n\n\n  OctreeBlock.prototype.select = function (frustumPlanes, selection, allowDuplicate) {\n    if (BoundingBox.IsInFrustum(this._boundingVectors, frustumPlanes)) {\n      if (this.blocks) {\n        for (var index = 0; index < this.blocks.length; index++) {\n          var block = this.blocks[index];\n          block.select(frustumPlanes, selection, allowDuplicate);\n        }\n\n        return;\n      }\n\n      if (allowDuplicate) {\n        selection.concat(this.entries);\n      } else {\n        selection.concatWithNoDuplicate(this.entries);\n      }\n    }\n  };\n  /**\n   * Test if the current block intersect with the given bounding sphere and if yes, then add its content to the selection array\n   * @param sphereCenter defines the bounding sphere center\n   * @param sphereRadius defines the bounding sphere radius\n   * @param selection defines the array to store current content if selection is positive\n   * @param allowDuplicate defines if the selection array can contains duplicated entries\n   */\n\n\n  OctreeBlock.prototype.intersects = function (sphereCenter, sphereRadius, selection, allowDuplicate) {\n    if (BoundingBox.IntersectsSphere(this._minPoint, this._maxPoint, sphereCenter, sphereRadius)) {\n      if (this.blocks) {\n        for (var index = 0; index < this.blocks.length; index++) {\n          var block = this.blocks[index];\n          block.intersects(sphereCenter, sphereRadius, selection, allowDuplicate);\n        }\n\n        return;\n      }\n\n      if (allowDuplicate) {\n        selection.concat(this.entries);\n      } else {\n        selection.concatWithNoDuplicate(this.entries);\n      }\n    }\n  };\n  /**\n   * Test if the current block intersect with the given ray and if yes, then add its content to the selection array\n   * @param ray defines the ray to test with\n   * @param selection defines the array to store current content if selection is positive\n   */\n\n\n  OctreeBlock.prototype.intersectsRay = function (ray, selection) {\n    if (ray.intersectsBoxMinMax(this._minPoint, this._maxPoint)) {\n      if (this.blocks) {\n        for (var index = 0; index < this.blocks.length; index++) {\n          var block = this.blocks[index];\n          block.intersectsRay(ray, selection);\n        }\n\n        return;\n      }\n\n      selection.concatWithNoDuplicate(this.entries);\n    }\n  };\n  /**\n   * Subdivide the content into child blocks (this block will then be empty)\n   */\n\n\n  OctreeBlock.prototype.createInnerBlocks = function () {\n    OctreeBlock._CreateBlocks(this._minPoint, this._maxPoint, this.entries, this._capacity, this._depth, this._maxDepth, this, this._creationFunc);\n  };\n  /**\n   * @param worldMin\n   * @param worldMax\n   * @param entries\n   * @param maxBlockCapacity\n   * @param currentDepth\n   * @param maxDepth\n   * @param target\n   * @param creationFunc\n   * @hidden\n   */\n\n\n  OctreeBlock._CreateBlocks = function (worldMin, worldMax, entries, maxBlockCapacity, currentDepth, maxDepth, target, creationFunc) {\n    target.blocks = new Array();\n    var blockSize = new Vector3((worldMax.x - worldMin.x) / 2, (worldMax.y - worldMin.y) / 2, (worldMax.z - worldMin.z) / 2); // Segmenting space\n\n    for (var x = 0; x < 2; x++) {\n      for (var y = 0; y < 2; y++) {\n        for (var z = 0; z < 2; z++) {\n          var localMin = worldMin.add(blockSize.multiplyByFloats(x, y, z));\n          var localMax = worldMin.add(blockSize.multiplyByFloats(x + 1, y + 1, z + 1));\n          var block = new OctreeBlock(localMin, localMax, maxBlockCapacity, currentDepth + 1, maxDepth, creationFunc);\n          block.addEntries(entries);\n          target.blocks.push(block);\n        }\n      }\n    }\n  };\n\n  return OctreeBlock;\n}();\n\nexport { OctreeBlock };","map":{"version":3,"mappings":"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","names":["Vector3","BoundingBox","minPoint","maxPoint","capacity","depth","maxDepth","creationFunc","Array","_capacity","_depth","_maxDepth","_creationFunc","_minPoint","_maxPoint","_boundingVectors","push","clone","x","y","z","Object","OctreeBlock","entry","blocks","index","length","block","addEntry","entries","createInnerBlocks","removeEntry","entryIndex","indexOf","splice","mesh","frustumPlanes","selection","allowDuplicate","IsInFrustum","select","concat","concatWithNoDuplicate","sphereCenter","sphereRadius","IntersectsSphere","intersects","ray","intersectsBoxMinMax","intersectsRay","_CreateBlocks","worldMin","worldMax","maxBlockCapacity","currentDepth","target","blockSize","localMin","add","multiplyByFloats","localMax","addEntries"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Culling/Octrees/octreeBlock.ts"],"sourcesContent":["import type { SmartArrayNoDuplicate } from \"../../Misc/smartArray\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport type { Ray } from \"../../Culling/ray\";\r\nimport { BoundingBox } from \"../../Culling/boundingBox\";\r\nimport type { Plane } from \"../../Maths/math.plane\";\r\n\r\n/**\r\n * Contains an array of blocks representing the octree\r\n */\r\nexport interface IOctreeContainer<T> {\r\n    /**\r\n     * Blocks within the octree\r\n     */\r\n    blocks: Array<OctreeBlock<T>>;\r\n}\r\n\r\n/**\r\n * Class used to store a cell in an octree\r\n * @see https://doc.babylonjs.com/how_to/optimizing_your_scene_with_octrees\r\n */\r\nexport class OctreeBlock<T> {\r\n    /**\r\n     * Gets the content of the current block\r\n     */\r\n    public entries = new Array<T>();\r\n\r\n    /**\r\n     * Gets the list of block children\r\n     */\r\n    public blocks: Array<OctreeBlock<T>>;\r\n\r\n    private _depth: number;\r\n    private _maxDepth: number;\r\n    private _capacity: number;\r\n    private _minPoint: Vector3;\r\n    private _maxPoint: Vector3;\r\n    private _boundingVectors = new Array<Vector3>();\r\n    private _creationFunc: (entry: T, block: OctreeBlock<T>) => void;\r\n\r\n    /**\r\n     * Creates a new block\r\n     * @param minPoint defines the minimum vector (in world space) of the block's bounding box\r\n     * @param maxPoint defines the maximum vector (in world space) of the block's bounding box\r\n     * @param capacity defines the maximum capacity of this block (if capacity is reached the block will be split into sub blocks)\r\n     * @param depth defines the current depth of this block in the octree\r\n     * @param maxDepth defines the maximal depth allowed (beyond this value, the capacity is ignored)\r\n     * @param creationFunc defines a callback to call when an element is added to the block\r\n     */\r\n    constructor(minPoint: Vector3, maxPoint: Vector3, capacity: number, depth: number, maxDepth: number, creationFunc: (entry: T, block: OctreeBlock<T>) => void) {\r\n        this._capacity = capacity;\r\n        this._depth = depth;\r\n        this._maxDepth = maxDepth;\r\n        this._creationFunc = creationFunc;\r\n\r\n        this._minPoint = minPoint;\r\n        this._maxPoint = maxPoint;\r\n\r\n        this._boundingVectors.push(minPoint.clone());\r\n        this._boundingVectors.push(maxPoint.clone());\r\n\r\n        this._boundingVectors.push(minPoint.clone());\r\n        this._boundingVectors[2].x = maxPoint.x;\r\n\r\n        this._boundingVectors.push(minPoint.clone());\r\n        this._boundingVectors[3].y = maxPoint.y;\r\n\r\n        this._boundingVectors.push(minPoint.clone());\r\n        this._boundingVectors[4].z = maxPoint.z;\r\n\r\n        this._boundingVectors.push(maxPoint.clone());\r\n        this._boundingVectors[5].z = minPoint.z;\r\n\r\n        this._boundingVectors.push(maxPoint.clone());\r\n        this._boundingVectors[6].x = minPoint.x;\r\n\r\n        this._boundingVectors.push(maxPoint.clone());\r\n        this._boundingVectors[7].y = minPoint.y;\r\n    }\r\n\r\n    // Property\r\n\r\n    /**\r\n     * Gets the maximum capacity of this block (if capacity is reached the block will be split into sub blocks)\r\n     */\r\n    public get capacity(): number {\r\n        return this._capacity;\r\n    }\r\n\r\n    /**\r\n     * Gets the minimum vector (in world space) of the block's bounding box\r\n     */\r\n    public get minPoint(): Vector3 {\r\n        return this._minPoint;\r\n    }\r\n\r\n    /**\r\n     * Gets the maximum vector (in world space) of the block's bounding box\r\n     */\r\n    public get maxPoint(): Vector3 {\r\n        return this._maxPoint;\r\n    }\r\n\r\n    // Methods\r\n\r\n    /**\r\n     * Add a new element to this block\r\n     * @param entry defines the element to add\r\n     */\r\n    public addEntry(entry: T): void {\r\n        if (this.blocks) {\r\n            for (let index = 0; index < this.blocks.length; index++) {\r\n                const block = this.blocks[index];\r\n                block.addEntry(entry);\r\n            }\r\n            return;\r\n        }\r\n\r\n        this._creationFunc(entry, this);\r\n\r\n        if (this.entries.length > this.capacity && this._depth < this._maxDepth) {\r\n            this.createInnerBlocks();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove an element from this block\r\n     * @param entry defines the element to remove\r\n     */\r\n    public removeEntry(entry: T): void {\r\n        if (this.blocks) {\r\n            for (let index = 0; index < this.blocks.length; index++) {\r\n                const block = this.blocks[index];\r\n                block.removeEntry(entry);\r\n            }\r\n            return;\r\n        }\r\n\r\n        const entryIndex = this.entries.indexOf(entry);\r\n\r\n        if (entryIndex > -1) {\r\n            this.entries.splice(entryIndex, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add an array of elements to this block\r\n     * @param entries defines the array of elements to add\r\n     */\r\n    public addEntries(entries: T[]): void {\r\n        for (let index = 0; index < entries.length; index++) {\r\n            const mesh = entries[index];\r\n            this.addEntry(mesh);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test if the current block intersects the frustum planes and if yes, then add its content to the selection array\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @param selection defines the array to store current content if selection is positive\r\n     * @param allowDuplicate defines if the selection array can contains duplicated entries\r\n     */\r\n    public select(frustumPlanes: Plane[], selection: SmartArrayNoDuplicate<T>, allowDuplicate?: boolean): void {\r\n        if (BoundingBox.IsInFrustum(this._boundingVectors, frustumPlanes)) {\r\n            if (this.blocks) {\r\n                for (let index = 0; index < this.blocks.length; index++) {\r\n                    const block = this.blocks[index];\r\n                    block.select(frustumPlanes, selection, allowDuplicate);\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (allowDuplicate) {\r\n                selection.concat(this.entries);\r\n            } else {\r\n                selection.concatWithNoDuplicate(this.entries);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test if the current block intersect with the given bounding sphere and if yes, then add its content to the selection array\r\n     * @param sphereCenter defines the bounding sphere center\r\n     * @param sphereRadius defines the bounding sphere radius\r\n     * @param selection defines the array to store current content if selection is positive\r\n     * @param allowDuplicate defines if the selection array can contains duplicated entries\r\n     */\r\n    public intersects(sphereCenter: Vector3, sphereRadius: number, selection: SmartArrayNoDuplicate<T>, allowDuplicate?: boolean): void {\r\n        if (BoundingBox.IntersectsSphere(this._minPoint, this._maxPoint, sphereCenter, sphereRadius)) {\r\n            if (this.blocks) {\r\n                for (let index = 0; index < this.blocks.length; index++) {\r\n                    const block = this.blocks[index];\r\n                    block.intersects(sphereCenter, sphereRadius, selection, allowDuplicate);\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (allowDuplicate) {\r\n                selection.concat(this.entries);\r\n            } else {\r\n                selection.concatWithNoDuplicate(this.entries);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test if the current block intersect with the given ray and if yes, then add its content to the selection array\r\n     * @param ray defines the ray to test with\r\n     * @param selection defines the array to store current content if selection is positive\r\n     */\r\n    public intersectsRay(ray: Ray, selection: SmartArrayNoDuplicate<T>): void {\r\n        if (ray.intersectsBoxMinMax(this._minPoint, this._maxPoint)) {\r\n            if (this.blocks) {\r\n                for (let index = 0; index < this.blocks.length; index++) {\r\n                    const block = this.blocks[index];\r\n                    block.intersectsRay(ray, selection);\r\n                }\r\n                return;\r\n            }\r\n            selection.concatWithNoDuplicate(this.entries);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Subdivide the content into child blocks (this block will then be empty)\r\n     */\r\n    public createInnerBlocks(): void {\r\n        OctreeBlock._CreateBlocks(this._minPoint, this._maxPoint, this.entries, this._capacity, this._depth, this._maxDepth, this, this._creationFunc);\r\n    }\r\n\r\n    /**\r\n     * @param worldMin\r\n     * @param worldMax\r\n     * @param entries\r\n     * @param maxBlockCapacity\r\n     * @param currentDepth\r\n     * @param maxDepth\r\n     * @param target\r\n     * @param creationFunc\r\n     * @hidden\r\n     */\r\n    public static _CreateBlocks<T>(\r\n        worldMin: Vector3,\r\n        worldMax: Vector3,\r\n        entries: T[],\r\n        maxBlockCapacity: number,\r\n        currentDepth: number,\r\n        maxDepth: number,\r\n        target: IOctreeContainer<T>,\r\n        creationFunc: (entry: T, block: OctreeBlock<T>) => void\r\n    ): void {\r\n        target.blocks = new Array<OctreeBlock<T>>();\r\n        const blockSize = new Vector3((worldMax.x - worldMin.x) / 2, (worldMax.y - worldMin.y) / 2, (worldMax.z - worldMin.z) / 2);\r\n\r\n        // Segmenting space\r\n        for (let x = 0; x < 2; x++) {\r\n            for (let y = 0; y < 2; y++) {\r\n                for (let z = 0; z < 2; z++) {\r\n                    const localMin = worldMin.add(blockSize.multiplyByFloats(x, y, z));\r\n                    const localMax = worldMin.add(blockSize.multiplyByFloats(x + 1, y + 1, z + 1));\r\n\r\n                    const block = new OctreeBlock<T>(localMin, localMax, maxBlockCapacity, currentDepth + 1, maxDepth, creationFunc);\r\n                    block.addEntries(entries);\r\n                    target.blocks.push(block);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}