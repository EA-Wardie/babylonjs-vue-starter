{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { PointerEventTypes } from \"../../Events/pointerEvents.js\";\nimport { Tools } from \"../../Misc/tools.js\";\n/**\n * Manage the mouse wheel inputs to control a follow camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\n\nvar FollowCameraMouseWheelInput =\n/** @class */\nfunction () {\n  function FollowCameraMouseWheelInput() {\n    /**\n     * Moue wheel controls zoom. (Mouse wheel modifies camera.radius value.)\n     */\n    this.axisControlRadius = true;\n    /**\n     * Moue wheel controls height. (Mouse wheel modifies camera.heightOffset value.)\n     */\n\n    this.axisControlHeight = false;\n    /**\n     * Moue wheel controls angle. (Mouse wheel modifies camera.rotationOffset value.)\n     */\n\n    this.axisControlRotation = false;\n    /**\n     * Gets or Set the mouse wheel precision or how fast is the camera moves in\n     * relation to mouseWheel events.\n     */\n\n    this.wheelPrecision = 3.0;\n    /**\n     * wheelDeltaPercentage will be used instead of wheelPrecision if different from 0.\n     * It defines the percentage of current camera.radius to use as delta when wheel is used.\n     */\n\n    this.wheelDeltaPercentage = 0;\n  }\n  /**\n   * Attach the input controls to a specific dom element to get the input from.\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n   */\n\n\n  FollowCameraMouseWheelInput.prototype.attachControl = function (noPreventDefault) {\n    var _this = this; // eslint-disable-next-line prefer-rest-params\n\n\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n\n    this._wheel = function (p) {\n      // sanity check - this should be a PointerWheel event.\n      if (p.type !== PointerEventTypes.POINTERWHEEL) {\n        return;\n      }\n\n      var event = p.event;\n      var delta = 0; // Chrome, Safari: event.deltaY\n      // IE: event.wheelDelta\n      // Firefox: event.detail (inverted)\n\n      var wheelDelta = Math.max(-1, Math.min(1, event.deltaY || event.wheelDelta || -event.detail));\n\n      if (_this.wheelDeltaPercentage) {\n        console.assert(_this.axisControlRadius + _this.axisControlHeight + _this.axisControlRotation <= 1, \"wheelDeltaPercentage only usable when mouse wheel \" + \"controls ONE axis. \" + \"Currently enabled: \" + \"axisControlRadius: \" + _this.axisControlRadius + \", axisControlHeightOffset: \" + _this.axisControlHeight + \", axisControlRotationOffset: \" + _this.axisControlRotation);\n\n        if (_this.axisControlRadius) {\n          delta = wheelDelta * 0.01 * _this.wheelDeltaPercentage * _this.camera.radius;\n        } else if (_this.axisControlHeight) {\n          delta = wheelDelta * 0.01 * _this.wheelDeltaPercentage * _this.camera.heightOffset;\n        } else if (_this.axisControlRotation) {\n          delta = wheelDelta * 0.01 * _this.wheelDeltaPercentage * _this.camera.rotationOffset;\n        }\n      } else {\n        delta = wheelDelta * _this.wheelPrecision;\n      }\n\n      if (delta) {\n        if (_this.axisControlRadius) {\n          _this.camera.radius += delta;\n        } else if (_this.axisControlHeight) {\n          _this.camera.heightOffset -= delta;\n        } else if (_this.axisControlRotation) {\n          _this.camera.rotationOffset -= delta;\n        }\n      }\n\n      if (event.preventDefault) {\n        if (!noPreventDefault) {\n          event.preventDefault();\n        }\n      }\n    };\n\n    this._observer = this.camera.getScene().onPointerObservable.add(this._wheel, PointerEventTypes.POINTERWHEEL);\n  };\n  /**\n   * Detach the current controls from the specified dom element.\n   */\n\n\n  FollowCameraMouseWheelInput.prototype.detachControl = function () {\n    if (this._observer) {\n      this.camera.getScene().onPointerObservable.remove(this._observer);\n      this._observer = null;\n      this._wheel = null;\n    }\n  };\n  /**\n   * Gets the class name of the current input.\n   * @returns the class name\n   */\n\n\n  FollowCameraMouseWheelInput.prototype.getClassName = function () {\n    return \"ArcRotateCameraMouseWheelInput\";\n  };\n  /**\n   * Get the friendly name associated with the input class.\n   * @returns the input friendly name\n   */\n\n\n  FollowCameraMouseWheelInput.prototype.getSimpleName = function () {\n    return \"mousewheel\";\n  };\n\n  __decorate([serialize()], FollowCameraMouseWheelInput.prototype, \"axisControlRadius\", void 0);\n\n  __decorate([serialize()], FollowCameraMouseWheelInput.prototype, \"axisControlHeight\", void 0);\n\n  __decorate([serialize()], FollowCameraMouseWheelInput.prototype, \"axisControlRotation\", void 0);\n\n  __decorate([serialize()], FollowCameraMouseWheelInput.prototype, \"wheelPrecision\", void 0);\n\n  __decorate([serialize()], FollowCameraMouseWheelInput.prototype, \"wheelDeltaPercentage\", void 0);\n\n  return FollowCameraMouseWheelInput;\n}();\n\nexport { FollowCameraMouseWheelInput };\nCameraInputTypes[\"FollowCameraMouseWheelInput\"] = FollowCameraMouseWheelInput;","map":{"version":3,"mappings":"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","names":["serialize","CameraInputTypes","PointerEventTypes","Tools","FollowCameraMouseWheelInput","noPreventDefault","BackCompatCameraNoPreventDefault","arguments","_wheel","p","type","POINTERWHEEL","event","delta","wheelDelta","Math","max","min","deltaY","detail","_this","wheelDeltaPercentage","console","assert","axisControlRadius","axisControlHeight","axisControlRotation","camera","radius","heightOffset","rotationOffset","wheelPrecision","preventDefault","_observer","getScene","onPointerObservable","add","remove","__decorate"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Cameras/Inputs/followCameraMouseWheelInput.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport type { EventState, Observer } from \"../../Misc/observable\";\r\nimport type { FollowCamera } from \"../../Cameras/followCamera\";\r\nimport type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport type { PointerInfo } from \"../../Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\r\nimport { Tools } from \"../../Misc/tools\";\r\nimport type { IWheelEvent } from \"../../Events/deviceInputEvents\";\r\n\r\n/**\r\n * Manage the mouse wheel inputs to control a follow camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class FollowCameraMouseWheelInput implements ICameraInput<FollowCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: FollowCamera;\r\n\r\n    /**\r\n     * Moue wheel controls zoom. (Mouse wheel modifies camera.radius value.)\r\n     */\r\n    @serialize()\r\n    public axisControlRadius: boolean = true;\r\n\r\n    /**\r\n     * Moue wheel controls height. (Mouse wheel modifies camera.heightOffset value.)\r\n     */\r\n    @serialize()\r\n    public axisControlHeight: boolean = false;\r\n\r\n    /**\r\n     * Moue wheel controls angle. (Mouse wheel modifies camera.rotationOffset value.)\r\n     */\r\n    @serialize()\r\n    public axisControlRotation: boolean = false;\r\n\r\n    /**\r\n     * Gets or Set the mouse wheel precision or how fast is the camera moves in\r\n     * relation to mouseWheel events.\r\n     */\r\n    @serialize()\r\n    public wheelPrecision = 3.0;\r\n\r\n    /**\r\n     * wheelDeltaPercentage will be used instead of wheelPrecision if different from 0.\r\n     * It defines the percentage of current camera.radius to use as delta when wheel is used.\r\n     */\r\n    @serialize()\r\n    public wheelDeltaPercentage = 0;\r\n\r\n    private _wheel: Nullable<(p: PointerInfo, s: EventState) => void>;\r\n    private _observer: Nullable<Observer<PointerInfo>>;\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        // eslint-disable-next-line prefer-rest-params\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n        this._wheel = (p) => {\r\n            // sanity check - this should be a PointerWheel event.\r\n            if (p.type !== PointerEventTypes.POINTERWHEEL) {\r\n                return;\r\n            }\r\n            const event = <IWheelEvent>p.event;\r\n            let delta = 0;\r\n\r\n            // Chrome, Safari: event.deltaY\r\n            // IE: event.wheelDelta\r\n            // Firefox: event.detail (inverted)\r\n            const wheelDelta = Math.max(-1, Math.min(1, event.deltaY || (<any>event).wheelDelta || -(<any>event).detail));\r\n            if (this.wheelDeltaPercentage) {\r\n                console.assert(\r\n                    <number>(<unknown>this.axisControlRadius) + <number>(<unknown>this.axisControlHeight) + <number>(<unknown>this.axisControlRotation) <= 1,\r\n                    \"wheelDeltaPercentage only usable when mouse wheel \" +\r\n                        \"controls ONE axis. \" +\r\n                        \"Currently enabled: \" +\r\n                        \"axisControlRadius: \" +\r\n                        this.axisControlRadius +\r\n                        \", axisControlHeightOffset: \" +\r\n                        this.axisControlHeight +\r\n                        \", axisControlRotationOffset: \" +\r\n                        this.axisControlRotation\r\n                );\r\n\r\n                if (this.axisControlRadius) {\r\n                    delta = wheelDelta * 0.01 * this.wheelDeltaPercentage * this.camera.radius;\r\n                } else if (this.axisControlHeight) {\r\n                    delta = wheelDelta * 0.01 * this.wheelDeltaPercentage * this.camera.heightOffset;\r\n                } else if (this.axisControlRotation) {\r\n                    delta = wheelDelta * 0.01 * this.wheelDeltaPercentage * this.camera.rotationOffset;\r\n                }\r\n            } else {\r\n                delta = wheelDelta * this.wheelPrecision;\r\n            }\r\n\r\n            if (delta) {\r\n                if (this.axisControlRadius) {\r\n                    this.camera.radius += delta;\r\n                } else if (this.axisControlHeight) {\r\n                    this.camera.heightOffset -= delta;\r\n                } else if (this.axisControlRotation) {\r\n                    this.camera.rotationOffset -= delta;\r\n                }\r\n            }\r\n\r\n            if (event.preventDefault) {\r\n                if (!noPreventDefault) {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        };\r\n\r\n        this._observer = this.camera.getScene().onPointerObservable.add(this._wheel, PointerEventTypes.POINTERWHEEL);\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        if (this._observer) {\r\n            this.camera.getScene().onPointerObservable.remove(this._observer);\r\n            this._observer = null;\r\n            this._wheel = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"ArcRotateCameraMouseWheelInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"mousewheel\";\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FollowCameraMouseWheelInput\"] = FollowCameraMouseWheelInput;\r\n"]},"metadata":{},"sourceType":"module"}