{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport { __extends } from \"tslib\";\nimport { Logger } from \"../../../Misc/logger.js\";\nimport { Vector3, Vector2 } from \"../../../Maths/math.vector.js\";\nimport { Color4, Color3 } from \"../../../Maths/math.color.js\";\nimport { Texture } from \"../../../Materials/Textures/texture.js\";\nimport { ProceduralTexture } from \"./proceduralTexture.js\";\nimport { WebRequest } from \"../../../Misc/webRequest.js\";\n/**\n * Procedural texturing is a way to programmatically create a texture. There are 2 types of procedural textures: code-only, and code that references some classic 2D images, sometimes called 'refMaps' or 'sampler' images.\n * Custom Procedural textures are the easiest way to create your own procedural in your application.\n * @see https://doc.babylonjs.com/how_to/how_to_use_procedural_textures#creating-custom-procedural-textures\n */\n\nvar CustomProceduralTexture =\n/** @class */\nfunction (_super) {\n  __extends(CustomProceduralTexture, _super);\n  /**\n   * Instantiates a new Custom Procedural Texture.\n   * Procedural texturing is a way to programmatically create a texture. There are 2 types of procedural textures: code-only, and code that references some classic 2D images, sometimes called 'refMaps' or 'sampler' images.\n   * Custom Procedural textures are the easiest way to create your own procedural in your application.\n   * @see https://doc.babylonjs.com/how_to/how_to_use_procedural_textures#creating-custom-procedural-textures\n   * @param name Define the name of the texture\n   * @param texturePath Define the folder path containing all the custom texture related files (config, shaders...)\n   * @param size Define the size of the texture to create\n   * @param scene Define the scene the texture belongs to\n   * @param fallbackTexture Define a fallback texture in case there were issues to create the custom texture\n   * @param generateMipMaps Define if the texture should creates mip maps or not\n   */\n\n\n  function CustomProceduralTexture(name, texturePath, size, scene, fallbackTexture, generateMipMaps) {\n    var _this = _super.call(this, name, size, null, scene, fallbackTexture, generateMipMaps) || this;\n\n    _this._animate = true;\n    _this._time = 0;\n    _this._texturePath = texturePath; //Try to load json\n\n    _this._loadJson(texturePath);\n\n    _this.refreshRate = 1;\n    return _this;\n  }\n\n  CustomProceduralTexture.prototype._loadJson = function (jsonUrl) {\n    var _this = this;\n\n    var noConfigFile = function noConfigFile() {\n      try {\n        _this.setFragment(_this._texturePath);\n      } catch (ex) {\n        Logger.Log(\"No json or ShaderStore or DOM element found for CustomProceduralTexture\");\n      }\n    };\n\n    var configFileUrl = jsonUrl + \"/config.json\";\n    var xhr = new WebRequest();\n    xhr.open(\"GET\", configFileUrl);\n    xhr.addEventListener(\"load\", function () {\n      if (xhr.status === 200 || xhr.responseText && xhr.responseText.length > 0) {\n        try {\n          _this._config = JSON.parse(xhr.response);\n\n          _this.updateShaderUniforms();\n\n          _this.updateTextures();\n\n          _this.setFragment(_this._texturePath + \"/custom\");\n\n          _this._animate = _this._config.animate;\n          _this.refreshRate = _this._config.refreshrate;\n        } catch (ex) {\n          noConfigFile();\n        }\n      } else {\n        noConfigFile();\n      }\n    }, false);\n    xhr.addEventListener(\"error\", function () {\n      noConfigFile();\n    }, false);\n\n    try {\n      xhr.send();\n    } catch (ex) {\n      Logger.Error(\"CustomProceduralTexture: Error on XHR send request.\");\n    }\n  };\n  /**\n   * Is the texture ready to be used ? (rendered at least once)\n   * @returns true if ready, otherwise, false.\n   */\n\n\n  CustomProceduralTexture.prototype.isReady = function () {\n    if (!_super.prototype.isReady.call(this)) {\n      return false;\n    }\n\n    for (var name_1 in this._textures) {\n      var texture = this._textures[name_1];\n\n      if (!texture.isReady()) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Render the texture to its associated render target.\n   * @param useCameraPostProcess Define if camera post process should be applied to the texture\n   */\n\n\n  CustomProceduralTexture.prototype.render = function (useCameraPostProcess) {\n    var scene = this.getScene();\n\n    if (this._animate && scene) {\n      this._time += scene.getAnimationRatio() * 0.03;\n      this.updateShaderUniforms();\n    }\n\n    _super.prototype.render.call(this, useCameraPostProcess);\n  };\n  /**\n   * Update the list of dependant textures samplers in the shader.\n   */\n\n\n  CustomProceduralTexture.prototype.updateTextures = function () {\n    for (var i = 0; i < this._config.sampler2Ds.length; i++) {\n      this.setTexture(this._config.sampler2Ds[i].sample2Dname, new Texture(this._texturePath + \"/\" + this._config.sampler2Ds[i].textureRelativeUrl, this.getScene()));\n    }\n  };\n  /**\n   * Update the uniform values of the procedural texture in the shader.\n   */\n\n\n  CustomProceduralTexture.prototype.updateShaderUniforms = function () {\n    if (this._config) {\n      for (var j = 0; j < this._config.uniforms.length; j++) {\n        var uniform = this._config.uniforms[j];\n\n        switch (uniform.type) {\n          case \"float\":\n            this.setFloat(uniform.name, uniform.value);\n            break;\n\n          case \"color3\":\n            this.setColor3(uniform.name, new Color3(uniform.r, uniform.g, uniform.b));\n            break;\n\n          case \"color4\":\n            this.setColor4(uniform.name, new Color4(uniform.r, uniform.g, uniform.b, uniform.a));\n            break;\n\n          case \"vector2\":\n            this.setVector2(uniform.name, new Vector2(uniform.x, uniform.y));\n            break;\n\n          case \"vector3\":\n            this.setVector3(uniform.name, new Vector3(uniform.x, uniform.y, uniform.z));\n            break;\n        }\n      }\n    }\n\n    this.setFloat(\"time\", this._time);\n  };\n\n  Object.defineProperty(CustomProceduralTexture.prototype, \"animate\", {\n    /**\n     * Define if the texture animates or not.\n     */\n    get: function get() {\n      return this._animate;\n    },\n    set: function set(value) {\n      this._animate = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return CustomProceduralTexture;\n}(ProceduralTexture);\n\nexport { CustomProceduralTexture };","map":{"version":3,"mappings":"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","names":["Logger","Vector3","Vector2","Color4","Color3","Texture","ProceduralTexture","WebRequest","__extends","name","texturePath","size","scene","fallbackTexture","generateMipMaps","_super","_this","_texturePath","_loadJson","refreshRate","CustomProceduralTexture","jsonUrl","noConfigFile","setFragment","ex","Log","configFileUrl","xhr","open","addEventListener","status","responseText","length","_config","JSON","parse","response","updateShaderUniforms","updateTextures","_animate","animate","refreshrate","send","Error","isReady","call","name_1","_textures","texture","useCameraPostProcess","getScene","_time","getAnimationRatio","render","i","sampler2Ds","setTexture","sample2Dname","textureRelativeUrl","j","uniforms","uniform","type","setFloat","value","setColor3","r","g","b","setColor4","a","setVector2","x","y","setVector3","z","Object"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Textures/Procedurals/customProceduralTexture.ts"],"sourcesContent":["import { Logger } from \"../../../Misc/logger\";\r\nimport type { Scene } from \"../../../scene\";\r\nimport { Vector3, Vector2 } from \"../../../Maths/math.vector\";\r\nimport { Color4, Color3 } from \"../../../Maths/math.color\";\r\nimport { Texture } from \"../../../Materials/Textures/texture\";\r\nimport { ProceduralTexture } from \"./proceduralTexture\";\r\nimport { WebRequest } from \"../../../Misc/webRequest\";\r\n/**\r\n * Procedural texturing is a way to programmatically create a texture. There are 2 types of procedural textures: code-only, and code that references some classic 2D images, sometimes called 'refMaps' or 'sampler' images.\r\n * Custom Procedural textures are the easiest way to create your own procedural in your application.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_procedural_textures#creating-custom-procedural-textures\r\n */\r\nexport class CustomProceduralTexture extends ProceduralTexture {\r\n    private _animate: boolean = true;\r\n    private _time: number = 0;\r\n    private _config: any;\r\n    private _texturePath: string;\r\n\r\n    /**\r\n     * Instantiates a new Custom Procedural Texture.\r\n     * Procedural texturing is a way to programmatically create a texture. There are 2 types of procedural textures: code-only, and code that references some classic 2D images, sometimes called 'refMaps' or 'sampler' images.\r\n     * Custom Procedural textures are the easiest way to create your own procedural in your application.\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_procedural_textures#creating-custom-procedural-textures\r\n     * @param name Define the name of the texture\r\n     * @param texturePath Define the folder path containing all the custom texture related files (config, shaders...)\r\n     * @param size Define the size of the texture to create\r\n     * @param scene Define the scene the texture belongs to\r\n     * @param fallbackTexture Define a fallback texture in case there were issues to create the custom texture\r\n     * @param generateMipMaps Define if the texture should creates mip maps or not\r\n     */\r\n    constructor(name: string, texturePath: string, size: number, scene: Scene, fallbackTexture?: Texture, generateMipMaps?: boolean) {\r\n        super(name, size, null, scene, fallbackTexture, generateMipMaps);\r\n        this._texturePath = texturePath;\r\n\r\n        //Try to load json\r\n        this._loadJson(texturePath);\r\n        this.refreshRate = 1;\r\n    }\r\n\r\n    private _loadJson(jsonUrl: string): void {\r\n        const noConfigFile = () => {\r\n            try {\r\n                this.setFragment(this._texturePath);\r\n            } catch (ex) {\r\n                Logger.Log(\"No json or ShaderStore or DOM element found for CustomProceduralTexture\");\r\n            }\r\n        };\r\n\r\n        const configFileUrl = jsonUrl + \"/config.json\";\r\n        const xhr = new WebRequest();\r\n\r\n        xhr.open(\"GET\", configFileUrl);\r\n        xhr.addEventListener(\r\n            \"load\",\r\n            () => {\r\n                if (xhr.status === 200 || (xhr.responseText && xhr.responseText.length > 0)) {\r\n                    try {\r\n                        this._config = JSON.parse(xhr.response);\r\n\r\n                        this.updateShaderUniforms();\r\n                        this.updateTextures();\r\n                        this.setFragment(this._texturePath + \"/custom\");\r\n\r\n                        this._animate = this._config.animate;\r\n                        this.refreshRate = this._config.refreshrate;\r\n                    } catch (ex) {\r\n                        noConfigFile();\r\n                    }\r\n                } else {\r\n                    noConfigFile();\r\n                }\r\n            },\r\n            false\r\n        );\r\n\r\n        xhr.addEventListener(\r\n            \"error\",\r\n            () => {\r\n                noConfigFile();\r\n            },\r\n            false\r\n        );\r\n\r\n        try {\r\n            xhr.send();\r\n        } catch (ex) {\r\n            Logger.Error(\"CustomProceduralTexture: Error on XHR send request.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Is the texture ready to be used ? (rendered at least once)\r\n     * @returns true if ready, otherwise, false.\r\n     */\r\n    public isReady(): boolean {\r\n        if (!super.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        for (const name in this._textures) {\r\n            const texture = this._textures[name];\r\n\r\n            if (!texture.isReady()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Render the texture to its associated render target.\r\n     * @param useCameraPostProcess Define if camera post process should be applied to the texture\r\n     */\r\n    public render(useCameraPostProcess?: boolean): void {\r\n        const scene = this.getScene();\r\n        if (this._animate && scene) {\r\n            this._time += scene.getAnimationRatio() * 0.03;\r\n            this.updateShaderUniforms();\r\n        }\r\n\r\n        super.render(useCameraPostProcess);\r\n    }\r\n\r\n    /**\r\n     * Update the list of dependant textures samplers in the shader.\r\n     */\r\n    public updateTextures(): void {\r\n        for (let i = 0; i < this._config.sampler2Ds.length; i++) {\r\n            this.setTexture(this._config.sampler2Ds[i].sample2Dname, new Texture(this._texturePath + \"/\" + this._config.sampler2Ds[i].textureRelativeUrl, this.getScene()));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the uniform values of the procedural texture in the shader.\r\n     */\r\n    public updateShaderUniforms(): void {\r\n        if (this._config) {\r\n            for (let j = 0; j < this._config.uniforms.length; j++) {\r\n                const uniform = this._config.uniforms[j];\r\n\r\n                switch (uniform.type) {\r\n                    case \"float\":\r\n                        this.setFloat(uniform.name, uniform.value);\r\n                        break;\r\n                    case \"color3\":\r\n                        this.setColor3(uniform.name, new Color3(uniform.r, uniform.g, uniform.b));\r\n                        break;\r\n                    case \"color4\":\r\n                        this.setColor4(uniform.name, new Color4(uniform.r, uniform.g, uniform.b, uniform.a));\r\n                        break;\r\n                    case \"vector2\":\r\n                        this.setVector2(uniform.name, new Vector2(uniform.x, uniform.y));\r\n                        break;\r\n                    case \"vector3\":\r\n                        this.setVector3(uniform.name, new Vector3(uniform.x, uniform.y, uniform.z));\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setFloat(\"time\", this._time);\r\n    }\r\n\r\n    /**\r\n     * Define if the texture animates or not.\r\n     */\r\n    public get animate(): boolean {\r\n        return this._animate;\r\n    }\r\n\r\n    public set animate(value: boolean) {\r\n        this._animate = value;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}