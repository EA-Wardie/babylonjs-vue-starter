{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { __assign, __extends } from \"tslib\";\nimport { BaseTexture } from \"../../Materials/Textures/baseTexture.js\";\nimport { Matrix } from \"../../Maths/math.vector.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport \"../../Engines/Extensions/engine.dynamicTexture.js\";\nimport \"../../Engines/Extensions/engine.videoTexture.js\";\n/**\n * This represents the smallest workload to use an already existing element (Canvas or Video) as a texture.\n * To be as efficient as possible depending on your constraints nothing aside the first upload\n * is automatically managed.\n * It is a cheap VideoTexture or DynamicTexture if you prefer to keep full control of the elements\n * in your application.\n *\n * As the update is not automatic, you need to call them manually.\n */\n\nvar HtmlElementTexture =\n/** @class */\nfunction (_super) {\n  __extends(HtmlElementTexture, _super);\n  /**\n   * Instantiates a HtmlElementTexture from the following parameters.\n   *\n   * @param name Defines the name of the texture\n   * @param element Defines the video or canvas the texture is filled with\n   * @param options Defines the other none mandatory texture creation options\n   */\n\n\n  function HtmlElementTexture(name, element, options) {\n    var _this = _super.call(this, options.scene || options.engine) || this;\n    /**\n     * Observable triggered once the texture has been loaded.\n     */\n\n\n    _this.onLoadObservable = new Observable();\n\n    if (!element || !options.engine && !options.scene) {\n      return _this;\n    }\n\n    options = __assign(__assign({}, HtmlElementTexture._DefaultOptions), options);\n    _this._generateMipMaps = options.generateMipMaps;\n    _this._samplingMode = options.samplingMode;\n    _this._textureMatrix = Matrix.Identity();\n    _this.name = name;\n    _this.element = element;\n    _this._isVideo = element instanceof HTMLVideoElement;\n    _this.anisotropicFilteringLevel = 1;\n\n    _this._createInternalTexture();\n\n    return _this;\n  }\n\n  HtmlElementTexture.prototype._createInternalTexture = function () {\n    var width = 0;\n    var height = 0;\n\n    if (this._isVideo) {\n      width = this.element.videoWidth;\n      height = this.element.videoHeight;\n    } else {\n      width = this.element.width;\n      height = this.element.height;\n    }\n\n    var engine = this._getEngine();\n\n    if (engine) {\n      this._texture = engine.createDynamicTexture(width, height, this._generateMipMaps, this._samplingMode);\n    }\n\n    this.update();\n  };\n  /**\n   * Returns the texture matrix used in most of the material.\n   */\n\n\n  HtmlElementTexture.prototype.getTextureMatrix = function () {\n    return this._textureMatrix;\n  };\n  /**\n   * Updates the content of the texture.\n   * @param invertY Defines whether the texture should be inverted on Y (false by default on video and true on canvas)\n   */\n\n\n  HtmlElementTexture.prototype.update = function (invertY) {\n    if (invertY === void 0) {\n      invertY = null;\n    }\n\n    var engine = this._getEngine();\n\n    if (this._texture == null || engine == null) {\n      return;\n    }\n\n    var wasReady = this.isReady();\n\n    if (this._isVideo) {\n      var videoElement = this.element;\n\n      if (videoElement.readyState < videoElement.HAVE_CURRENT_DATA) {\n        return;\n      }\n\n      engine.updateVideoTexture(this._texture, videoElement, invertY === null ? true : invertY);\n    } else {\n      var canvasElement = this.element;\n      engine.updateDynamicTexture(this._texture, canvasElement, invertY === null ? true : invertY, false);\n    }\n\n    if (!wasReady && this.isReady()) {\n      this.onLoadObservable.notifyObservers(this);\n    }\n  };\n  /**\n   * Dispose the texture and release its associated resources.\n   */\n\n\n  HtmlElementTexture.prototype.dispose = function () {\n    this.onLoadObservable.clear();\n\n    _super.prototype.dispose.call(this);\n  };\n\n  HtmlElementTexture._DefaultOptions = {\n    generateMipMaps: false,\n    samplingMode: 2,\n    engine: null,\n    scene: null\n  };\n  return HtmlElementTexture;\n}(BaseTexture);\n\nexport { HtmlElementTexture };","map":{"version":3,"mappings":"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","names":["BaseTexture","Matrix","Observable","__extends","name","element","options","_super","scene","engine","_this","HtmlElementTexture","_DefaultOptions","_generateMipMaps","generateMipMaps","_samplingMode","samplingMode","_textureMatrix","Identity","_isVideo","HTMLVideoElement","anisotropicFilteringLevel","_createInternalTexture","width","height","videoWidth","videoHeight","_getEngine","_texture","createDynamicTexture","update","invertY","wasReady","isReady","videoElement","readyState","HAVE_CURRENT_DATA","updateVideoTexture","canvasElement","updateDynamicTexture","onLoadObservable","notifyObservers","clear","dispose","call"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Textures/htmlElementTexture.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport { Matrix } from \"../../Maths/math.vector\";\r\nimport { Observable } from \"../../Misc/observable\";\r\n\r\nimport \"../../Engines/Extensions/engine.dynamicTexture\";\r\nimport \"../../Engines/Extensions/engine.videoTexture\";\r\n\r\ndeclare type ThinEngine = import(\"../../Engines/thinEngine\").ThinEngine;\r\ndeclare type Scene = import(\"../../scene\").Scene;\r\n\r\n/**\r\n * Defines the options related to the creation of an HtmlElementTexture\r\n */\r\nexport interface IHtmlElementTextureOptions {\r\n    /**\r\n     * Defines whether mip maps should be created or not.\r\n     */\r\n    generateMipMaps?: boolean;\r\n    /**\r\n     * Defines the sampling mode of the texture.\r\n     */\r\n    samplingMode?: number;\r\n    /**\r\n     * Defines the engine instance to use the texture with. It is not mandatory if you define a scene.\r\n     */\r\n    engine: Nullable<ThinEngine>;\r\n    /**\r\n     * Defines the scene the texture belongs to. It is not mandatory if you define an engine.\r\n     */\r\n    scene: Nullable<Scene>;\r\n}\r\n\r\n/**\r\n * This represents the smallest workload to use an already existing element (Canvas or Video) as a texture.\r\n * To be as efficient as possible depending on your constraints nothing aside the first upload\r\n * is automatically managed.\r\n * It is a cheap VideoTexture or DynamicTexture if you prefer to keep full control of the elements\r\n * in your application.\r\n *\r\n * As the update is not automatic, you need to call them manually.\r\n */\r\nexport class HtmlElementTexture extends BaseTexture {\r\n    /**\r\n     * The texture URL.\r\n     */\r\n    public element: HTMLVideoElement | HTMLCanvasElement;\r\n\r\n    /**\r\n     * Observable triggered once the texture has been loaded.\r\n     */\r\n    public onLoadObservable: Observable<HtmlElementTexture> = new Observable<HtmlElementTexture>();\r\n\r\n    private static readonly _DefaultOptions: IHtmlElementTextureOptions = {\r\n        generateMipMaps: false,\r\n        samplingMode: Constants.TEXTURE_BILINEAR_SAMPLINGMODE,\r\n        engine: null,\r\n        scene: null,\r\n    };\r\n\r\n    private _textureMatrix: Matrix;\r\n    private _isVideo: boolean;\r\n    private _generateMipMaps: boolean;\r\n    private _samplingMode: number;\r\n\r\n    /**\r\n     * Instantiates a HtmlElementTexture from the following parameters.\r\n     *\r\n     * @param name Defines the name of the texture\r\n     * @param element Defines the video or canvas the texture is filled with\r\n     * @param options Defines the other none mandatory texture creation options\r\n     */\r\n    constructor(name: string, element: HTMLVideoElement | HTMLCanvasElement, options: IHtmlElementTextureOptions) {\r\n        super(options.scene || options.engine);\r\n\r\n        if (!element || (!options.engine && !options.scene)) {\r\n            return;\r\n        }\r\n\r\n        options = {\r\n            ...HtmlElementTexture._DefaultOptions,\r\n            ...options,\r\n        };\r\n\r\n        this._generateMipMaps = options.generateMipMaps!;\r\n        this._samplingMode = options.samplingMode!;\r\n        this._textureMatrix = Matrix.Identity();\r\n\r\n        this.name = name;\r\n        this.element = element;\r\n        this._isVideo = element instanceof HTMLVideoElement;\r\n\r\n        this.anisotropicFilteringLevel = 1;\r\n\r\n        this._createInternalTexture();\r\n    }\r\n\r\n    private _createInternalTexture(): void {\r\n        let width = 0;\r\n        let height = 0;\r\n        if (this._isVideo) {\r\n            width = (this.element as HTMLVideoElement).videoWidth;\r\n            height = (this.element as HTMLVideoElement).videoHeight;\r\n        } else {\r\n            width = this.element.width;\r\n            height = this.element.height;\r\n        }\r\n\r\n        const engine = this._getEngine();\r\n        if (engine) {\r\n            this._texture = engine.createDynamicTexture(width, height, this._generateMipMaps, this._samplingMode);\r\n        }\r\n\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Returns the texture matrix used in most of the material.\r\n     */\r\n    public getTextureMatrix(): Matrix {\r\n        return this._textureMatrix;\r\n    }\r\n\r\n    /**\r\n     * Updates the content of the texture.\r\n     * @param invertY Defines whether the texture should be inverted on Y (false by default on video and true on canvas)\r\n     */\r\n    public update(invertY: Nullable<boolean> = null): void {\r\n        const engine = this._getEngine();\r\n        if (this._texture == null || engine == null) {\r\n            return;\r\n        }\r\n\r\n        const wasReady = this.isReady();\r\n        if (this._isVideo) {\r\n            const videoElement = this.element as HTMLVideoElement;\r\n            if (videoElement.readyState < videoElement.HAVE_CURRENT_DATA) {\r\n                return;\r\n            }\r\n\r\n            engine.updateVideoTexture(this._texture, videoElement, invertY === null ? true : invertY);\r\n        } else {\r\n            const canvasElement = this.element as HTMLCanvasElement;\r\n            engine.updateDynamicTexture(this._texture, canvasElement, invertY === null ? true : invertY, false);\r\n        }\r\n\r\n        if (!wasReady && this.isReady()) {\r\n            this.onLoadObservable.notifyObservers(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose the texture and release its associated resources.\r\n     */\r\n    public dispose(): void {\r\n        this.onLoadObservable.clear();\r\n        super.dispose();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}