{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { DeepCopier } from \"../Misc/deepCopier.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport { SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * This represents all the required information to add a fresnel effect on a material:\n * @see https://doc.babylonjs.com/divingDeeper/materials/using/fresnelParameters\n */\n\nvar FresnelParameters =\n/** @class */\nfunction () {\n  /**\n   * Creates a new FresnelParameters object.\n   *\n   * @param options provide your own settings to optionally to override defaults\n   */\n  function FresnelParameters(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this._isEnabled = true;\n    this.bias = options.bias === undefined ? 0 : options.bias;\n    this.power = options.power === undefined ? 1 : options.power;\n    this.leftColor = options.leftColor || Color3.White();\n    this.rightColor = options.rightColor || Color3.Black();\n\n    if (options.isEnabled === false) {\n      this.isEnabled = false;\n    }\n  }\n\n  Object.defineProperty(FresnelParameters.prototype, \"isEnabled\", {\n    /**\n     * Define if the fresnel effect is enable or not.\n     */\n    get: function get() {\n      return this._isEnabled;\n    },\n    set: function set(value) {\n      if (this._isEnabled === value) {\n        return;\n      }\n\n      this._isEnabled = value;\n      Engine.MarkAllMaterialsAsDirty(4 | 16);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Clones the current fresnel and its values\n   * @returns a clone fresnel configuration\n   */\n\n  FresnelParameters.prototype.clone = function () {\n    var newFresnelParameters = new FresnelParameters();\n    DeepCopier.DeepCopy(this, newFresnelParameters);\n    return newFresnelParameters;\n  };\n  /**\n   * Determines equality between FresnelParameters objects\n   * @param otherFresnelParameters defines the second operand\n   * @returns true if the power, bias, leftColor, rightColor and isEnabled values are equal to the given ones\n   */\n\n\n  FresnelParameters.prototype.equals = function (otherFresnelParameters) {\n    return otherFresnelParameters && this.bias === otherFresnelParameters.bias && this.power === otherFresnelParameters.power && this.leftColor.equals(otherFresnelParameters.leftColor) && this.rightColor.equals(otherFresnelParameters.rightColor) && this.isEnabled === otherFresnelParameters.isEnabled;\n  };\n  /**\n   * Serializes the current fresnel parameters to a JSON representation.\n   * @return the JSON serialization\n   */\n\n\n  FresnelParameters.prototype.serialize = function () {\n    return {\n      isEnabled: this.isEnabled,\n      leftColor: this.leftColor.asArray(),\n      rightColor: this.rightColor.asArray(),\n      bias: this.bias,\n      power: this.power\n    };\n  };\n  /**\n   * Parse a JSON object and deserialize it to a new Fresnel parameter object.\n   * @param parsedFresnelParameters Define the JSON representation\n   * @returns the parsed parameters\n   */\n\n\n  FresnelParameters.Parse = function (parsedFresnelParameters) {\n    return new FresnelParameters({\n      isEnabled: parsedFresnelParameters.isEnabled,\n      leftColor: Color3.FromArray(parsedFresnelParameters.leftColor),\n      rightColor: Color3.FromArray(parsedFresnelParameters.rightColor),\n      bias: parsedFresnelParameters.bias,\n      power: parsedFresnelParameters.power || 1.0\n    });\n  };\n\n  return FresnelParameters;\n}();\n\nexport { FresnelParameters }; // References the dependencies.\n\nSerializationHelper._FresnelParametersParser = FresnelParameters.Parse;","map":{"version":3,"mappings":";AAAA,SAASA,UAAT,QAA2B,uBAA3B;AAEA,SAASC,MAAT,QAAuB,wBAAvB;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,mBAAT,QAAoC,uBAApC;AA+DA;;;;;AAIA;AAAA;AAAA;AAqCI;;;;;AAKA,6BAAmBC,OAAnB,EAAkE;AAA/C;AAAAA;AAA+C;;AAzC1D,sBAAa,IAAb;AA0CJ,SAAKC,IAAL,GAAYD,OAAO,CAACC,IAAR,KAAiBC,SAAjB,GAA6B,CAA7B,GAAiCF,OAAO,CAACC,IAArD;AACA,SAAKE,KAAL,GAAaH,OAAO,CAACG,KAAR,KAAkBD,SAAlB,GAA8B,CAA9B,GAAkCF,OAAO,CAACG,KAAvD;AACA,SAAKC,SAAL,GAAiBJ,OAAO,CAACI,SAAR,IAAqBP,MAAM,CAACQ,KAAP,EAAtC;AACA,SAAKC,UAAL,GAAkBN,OAAO,CAACM,UAAR,IAAsBT,MAAM,CAACU,KAAP,EAAxC;;AACA,QAAIP,OAAO,CAACQ,SAAR,KAAsB,KAA1B,EAAiC;AAC7B,WAAKA,SAAL,GAAiB,KAAjB;AACH;AACJ;;AA7CDC,wBAAWC,2BAAX,EAAW,WAAX,EAAoB;AAHpB;;;SAGA;AACI,aAAO,KAAKC,UAAZ;AACH,KAFmB;SAGpB,aAAqBC,KAArB,EAAmC;AAC/B,UAAI,KAAKD,UAAL,KAAoBC,KAAxB,EAA+B;AAC3B;AACH;;AAED,WAAKD,UAAL,GAAkBC,KAAlB;AACAd,YAAM,CAACe,uBAAP,CAA+B,MAA/B;AACH,KAVmB;qBAAA;;AAAA,GAApB;AA+CA;;;;;AAIOH,sCAAP;AACI,QAAMI,oBAAoB,GAAG,IAAIJ,iBAAJ,EAA7B;AAEAd,cAAU,CAACmB,QAAX,CAAoB,IAApB,EAA0BD,oBAA1B;AAEA,WAAOA,oBAAP;AACH,GANM;AAQP;;;;;;;AAKOJ,uCAAP,UAAcM,sBAAd,EAAsE;AAClE,WACIA,sBAAsB,IACtB,KAAKf,IAAL,KAAce,sBAAsB,CAACf,IADrC,IAEA,KAAKE,KAAL,KAAea,sBAAsB,CAACb,KAFtC,IAGA,KAAKC,SAAL,CAAea,MAAf,CAAsBD,sBAAsB,CAACZ,SAA7C,CAHA,IAIA,KAAKE,UAAL,CAAgBW,MAAhB,CAAuBD,sBAAsB,CAACV,UAA9C,CAJA,IAKA,KAAKE,SAAL,KAAmBQ,sBAAsB,CAACR,SAN9C;AAQH,GATM;AAWP;;;;;;AAIOE,0CAAP;AACI,WAAO;AACHF,eAAS,EAAE,KAAKA,SADb;AAEHJ,eAAS,EAAE,KAAKA,SAAL,CAAec,OAAf,EAFR;AAGHZ,gBAAU,EAAE,KAAKA,UAAL,CAAgBY,OAAhB,EAHT;AAIHjB,UAAI,EAAE,KAAKA,IAJR;AAKHE,WAAK,EAAE,KAAKA;AALT,KAAP;AAOH,GARM;AAUP;;;;;;;AAKcO,4BAAd,UAAoBS,uBAApB,EAAyE;AACrE,WAAO,IAAIT,iBAAJ,CAAsB;AACzBF,eAAS,EAAEW,uBAAuB,CAACX,SADV;AAEzBJ,eAAS,EAAEP,MAAM,CAACuB,SAAP,CAAiBD,uBAAuB,CAACf,SAAzC,CAFc;AAGzBE,gBAAU,EAAET,MAAM,CAACuB,SAAP,CAAiBD,uBAAuB,CAACb,UAAzC,CAHa;AAIzBL,UAAI,EAAEkB,uBAAuB,CAAClB,IAJL;AAKzBE,WAAK,EAAEgB,uBAAuB,CAAChB,KAAxB,IAAiC;AALf,KAAtB,CAAP;AAOH,GARa;;AASlB;AAAC,CA5GD;;8BA8GA;;AACAJ,mBAAmB,CAACsB,wBAApB,GAA+CX,iBAAiB,CAACY,KAAjE","names":["DeepCopier","Color3","Engine","SerializationHelper","options","bias","undefined","power","leftColor","White","rightColor","Black","isEnabled","Object","FresnelParameters","_isEnabled","value","MarkAllMaterialsAsDirty","newFresnelParameters","DeepCopy","otherFresnelParameters","equals","asArray","parsedFresnelParameters","FromArray","_FresnelParametersParser","Parse"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Materials/fresnelParameters.ts"],"sourcesContent":["import { DeepCopier } from \"../Misc/deepCopier\";\r\nimport type { DeepImmutable } from \"../types\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { SerializationHelper } from \"../Misc/decorators\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\n/**\r\n * Options to be used when creating a FresnelParameters.\r\n */\r\nexport type IFresnelParametersCreationOptions = {\r\n    /**\r\n     * Define the color used on edges (grazing angle)\r\n     */\r\n    leftColor?: Color3;\r\n\r\n    /**\r\n     * Define the color used on center\r\n     */\r\n    rightColor?: Color3;\r\n\r\n    /**\r\n     * Define bias applied to computed fresnel term\r\n     */\r\n    bias?: number;\r\n\r\n    /**\r\n     * Defined the power exponent applied to fresnel term\r\n     */\r\n    power?: number;\r\n\r\n    /**\r\n     * Define if the fresnel effect is enable or not.\r\n     */\r\n    isEnabled?: boolean;\r\n};\r\n\r\n/**\r\n * Serialized format for FresnelParameters.\r\n */\r\nexport type IFresnelParametersSerialized = {\r\n    /**\r\n     * Define the color used on edges (grazing angle) [as an array]\r\n     */\r\n    leftColor: number[];\r\n\r\n    /**\r\n     * Define the color used on center [as an array]\r\n     */\r\n    rightColor: number[];\r\n\r\n    /**\r\n     * Define bias applied to computed fresnel term\r\n     */\r\n    bias: number;\r\n\r\n    /**\r\n     * Defined the power exponent applied to fresnel term\r\n     */\r\n    power?: number;\r\n\r\n    /**\r\n     * Define if the fresnel effect is enable or not.\r\n     */\r\n    isEnabled: boolean;\r\n};\r\n\r\n/**\r\n * This represents all the required information to add a fresnel effect on a material:\r\n * @see https://doc.babylonjs.com/divingDeeper/materials/using/fresnelParameters\r\n */\r\nexport class FresnelParameters {\r\n    private _isEnabled = true;\r\n    /**\r\n     * Define if the fresnel effect is enable or not.\r\n     */\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n    public set isEnabled(value: boolean) {\r\n        if (this._isEnabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._isEnabled = value;\r\n        Engine.MarkAllMaterialsAsDirty(Constants.MATERIAL_FresnelDirtyFlag | Constants.MATERIAL_MiscDirtyFlag);\r\n    }\r\n\r\n    /**\r\n     * Define the color used on edges (grazing angle)\r\n     */\r\n    public leftColor: Color3;\r\n\r\n    /**\r\n     * Define the color used on center\r\n     */\r\n    public rightColor: Color3;\r\n\r\n    /**\r\n     * Define bias applied to computed fresnel term\r\n     */\r\n    public bias: number;\r\n\r\n    /**\r\n     * Defined the power exponent applied to fresnel term\r\n     */\r\n    public power: number;\r\n\r\n    /**\r\n     * Creates a new FresnelParameters object.\r\n     *\r\n     * @param options provide your own settings to optionally to override defaults\r\n     */\r\n    public constructor(options: IFresnelParametersCreationOptions = {}) {\r\n        this.bias = options.bias === undefined ? 0 : options.bias;\r\n        this.power = options.power === undefined ? 1 : options.power;\r\n        this.leftColor = options.leftColor || Color3.White();\r\n        this.rightColor = options.rightColor || Color3.Black();\r\n        if (options.isEnabled === false) {\r\n            this.isEnabled = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clones the current fresnel and its values\r\n     * @returns a clone fresnel configuration\r\n     */\r\n    public clone(): FresnelParameters {\r\n        const newFresnelParameters = new FresnelParameters();\r\n\r\n        DeepCopier.DeepCopy(this, newFresnelParameters);\r\n\r\n        return newFresnelParameters;\r\n    }\r\n\r\n    /**\r\n     * Determines equality between FresnelParameters objects\r\n     * @param otherFresnelParameters defines the second operand\r\n     * @returns true if the power, bias, leftColor, rightColor and isEnabled values are equal to the given ones\r\n     */\r\n    public equals(otherFresnelParameters: DeepImmutable<FresnelParameters>): boolean {\r\n        return (\r\n            otherFresnelParameters &&\r\n            this.bias === otherFresnelParameters.bias &&\r\n            this.power === otherFresnelParameters.power &&\r\n            this.leftColor.equals(otherFresnelParameters.leftColor) &&\r\n            this.rightColor.equals(otherFresnelParameters.rightColor) &&\r\n            this.isEnabled === otherFresnelParameters.isEnabled\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Serializes the current fresnel parameters to a JSON representation.\r\n     * @return the JSON serialization\r\n     */\r\n    public serialize(): IFresnelParametersSerialized {\r\n        return {\r\n            isEnabled: this.isEnabled,\r\n            leftColor: this.leftColor.asArray(),\r\n            rightColor: this.rightColor.asArray(),\r\n            bias: this.bias,\r\n            power: this.power,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Parse a JSON object and deserialize it to a new Fresnel parameter object.\r\n     * @param parsedFresnelParameters Define the JSON representation\r\n     * @returns the parsed parameters\r\n     */\r\n    public static Parse(parsedFresnelParameters: IFresnelParametersSerialized): FresnelParameters {\r\n        return new FresnelParameters({\r\n            isEnabled: parsedFresnelParameters.isEnabled,\r\n            leftColor: Color3.FromArray(parsedFresnelParameters.leftColor),\r\n            rightColor: Color3.FromArray(parsedFresnelParameters.rightColor),\r\n            bias: parsedFresnelParameters.bias,\r\n            power: parsedFresnelParameters.power || 1.0,\r\n        });\r\n    }\r\n}\r\n\r\n// References the dependencies.\r\nSerializationHelper._FresnelParametersParser = FresnelParameters.Parse;\r\n"]},"metadata":{},"sourceType":"module"}