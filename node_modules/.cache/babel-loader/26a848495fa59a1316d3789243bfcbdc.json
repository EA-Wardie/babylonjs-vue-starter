{"ast":null,"code":"/**\n * Enum defining the type of properties that can be edited in the property pages in the NME\n */\nexport var PropertyTypeForEdition;\n\n(function (PropertyTypeForEdition) {\n  /** property is a boolean */\n  PropertyTypeForEdition[PropertyTypeForEdition[\"Boolean\"] = 0] = \"Boolean\";\n  /** property is a float */\n\n  PropertyTypeForEdition[PropertyTypeForEdition[\"Float\"] = 1] = \"Float\";\n  /** property is a int */\n\n  PropertyTypeForEdition[PropertyTypeForEdition[\"Int\"] = 2] = \"Int\";\n  /** property is a Vector2 */\n\n  PropertyTypeForEdition[PropertyTypeForEdition[\"Vector2\"] = 3] = \"Vector2\";\n  /** property is a list of values */\n\n  PropertyTypeForEdition[PropertyTypeForEdition[\"List\"] = 4] = \"List\";\n})(PropertyTypeForEdition || (PropertyTypeForEdition = {}));\n/**\n * Decorator that flags a property in a node material block as being editable\n * @param displayName\n * @param propertyType\n * @param groupName\n * @param options\n */\n\n\nexport function editableInPropertyPage(displayName, propertyType, groupName, options) {\n  if (propertyType === void 0) {\n    propertyType = PropertyTypeForEdition.Boolean;\n  }\n\n  if (groupName === void 0) {\n    groupName = \"PROPERTIES\";\n  }\n\n  return function (target, propertyKey) {\n    var propStore = target._propStore;\n\n    if (!propStore) {\n      propStore = [];\n      target._propStore = propStore;\n    }\n\n    propStore.push({\n      propertyName: propertyKey,\n      displayName: displayName,\n      type: propertyType,\n      groupName: groupName,\n      options: options !== null && options !== void 0 ? options : {}\n    });\n  };\n}","map":{"version":3,"mappings":"AAEA;;;AAGA,WAAYA,sBAAZ;;AAAA,WAAYA,sBAAZ,EAAkC;AAC9B;AACAA;AACA;;AACAA;AACA;;AACAA;AACA;;AACAA;AACA;;AACAA;AACH,CAXD,EAAYA,sBAAsB,KAAtBA,sBAAsB,MAAlC;AA8DA;;;;;;;;;AAOA,OAAM,SAAUC,sBAAV,CACFC,WADE,EAEFC,YAFE,EAGFC,SAHE,EAIFC,OAJE,EAI+B;AAFjC;AAAAF,mBAAuCH,sBAAsB,CAACM,OAA9D;AAAqE;;AACrE;AAAAF;AAAgC;;AAGhC,SAAO,UAACG,MAAD,EAAcC,WAAd,EAAiC;AACpC,QAAIC,SAAS,GAAqCF,MAAM,CAACG,UAAzD;;AACA,QAAI,CAACD,SAAL,EAAgB;AACZA,eAAS,GAAG,EAAZ;AACAF,YAAM,CAACG,UAAP,GAAoBD,SAApB;AACH;;AACDA,aAAS,CAACE,IAAV,CAAe;AACXC,kBAAY,EAAEJ,WADH;AAEXN,iBAAW,EAAEA,WAFF;AAGXW,UAAI,EAAEV,YAHK;AAIXC,eAAS,EAAEA,SAJA;AAKXC,aAAO,EAAEA,OAAO,SAAP,WAAO,WAAP,aAAW;AALT,KAAf;AAOH,GAbD;AAcH","names":["PropertyTypeForEdition","editableInPropertyPage","displayName","propertyType","groupName","options","Boolean","target","propertyKey","propStore","_propStore","push","propertyName","type"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Node/nodeMaterialDecorator.ts"],"sourcesContent":["declare type Scene = import(\"../../scene\").Scene;\r\n\r\n/**\r\n * Enum defining the type of properties that can be edited in the property pages in the NME\r\n */\r\nexport enum PropertyTypeForEdition {\r\n    /** property is a boolean */\r\n    Boolean,\r\n    /** property is a float */\r\n    Float,\r\n    /** property is a int */\r\n    Int,\r\n    /** property is a Vector2 */\r\n    Vector2,\r\n    /** property is a list of values */\r\n    List,\r\n}\r\n\r\n/**\r\n * Interface that defines an option in a variable of type list\r\n */\r\nexport interface IEditablePropertyListOption {\r\n    /** label of the option */\r\n    label: string;\r\n    /** value of the option */\r\n    value: number;\r\n}\r\n\r\n/**\r\n * Interface that defines the options available for an editable property\r\n */\r\nexport interface IEditablePropertyOption {\r\n    /** min value */\r\n    min?: number;\r\n    /** max value */\r\n    max?: number;\r\n    /** notifiers: indicates which actions to take when the property is changed */\r\n    notifiers?: {\r\n        /** the material should be rebuilt */\r\n        rebuild?: boolean;\r\n        /** the preview should be updated */\r\n        update?: boolean;\r\n        /** the onPreviewCommandActivated observer of the preview manager should be triggered */\r\n        activatePreviewCommand?: boolean;\r\n        /** a callback to trigger */\r\n        callback?: (scene: Scene) => void;\r\n    };\r\n    /** list of the options for a variable of type list */\r\n    options?: IEditablePropertyListOption[];\r\n}\r\n\r\n/**\r\n * Interface that describes an editable property\r\n */\r\nexport interface IPropertyDescriptionForEdition {\r\n    /** name of the property */\r\n    propertyName: string;\r\n    /** display name of the property */\r\n    displayName: string;\r\n    /** type of the property */\r\n    type: PropertyTypeForEdition;\r\n    /** group of the property - all properties with the same group value will be displayed in a specific section */\r\n    groupName: string;\r\n    /** options for the property */\r\n    options: IEditablePropertyOption;\r\n}\r\n\r\n/**\r\n * Decorator that flags a property in a node material block as being editable\r\n * @param displayName\r\n * @param propertyType\r\n * @param groupName\r\n * @param options\r\n */\r\nexport function editableInPropertyPage(\r\n    displayName: string,\r\n    propertyType: PropertyTypeForEdition = PropertyTypeForEdition.Boolean,\r\n    groupName: string = \"PROPERTIES\",\r\n    options?: IEditablePropertyOption\r\n) {\r\n    return (target: any, propertyKey: string) => {\r\n        let propStore: IPropertyDescriptionForEdition[] = target._propStore;\r\n        if (!propStore) {\r\n            propStore = [];\r\n            target._propStore = propStore;\r\n        }\r\n        propStore.push({\r\n            propertyName: propertyKey,\r\n            displayName: displayName,\r\n            type: propertyType,\r\n            groupName: groupName,\r\n            options: options ?? {},\r\n        });\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}