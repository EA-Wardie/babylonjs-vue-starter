{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { __decorate, __extends } from \"tslib\";\nimport { Vector2 } from \"../Maths/math.vector.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/chromaticAberration.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * The ChromaticAberrationPostProcess separates the rgb channels in an image to produce chromatic distortion around the edges of the screen\n */\n\nvar ChromaticAberrationPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(ChromaticAberrationPostProcess, _super);\n  /**\n   * Creates a new instance ChromaticAberrationPostProcess\n   * @param name The name of the effect.\n   * @param screenWidth The width of the screen to apply the effect on.\n   * @param screenHeight The height of the screen to apply the effect on.\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   * @param textureType Type of textures used when performing the post process. (default: 0)\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n   */\n\n\n  function ChromaticAberrationPostProcess(name, screenWidth, screenHeight, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    var _this = _super.call(this, name, \"chromaticAberration\", [\"chromatic_aberration\", \"screen_width\", \"screen_height\", \"direction\", \"radialIntensity\", \"centerPosition\"], [], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation) || this;\n    /**\n     * The amount of separation of rgb channels (default: 30)\n     */\n\n\n    _this.aberrationAmount = 30;\n    /**\n     * The amount the effect will increase for pixels closer to the edge of the screen. (default: 0)\n     */\n\n    _this.radialIntensity = 0;\n    /**\n     * The normalized direction in which the rgb channels should be separated. If set to 0,0 radial direction will be used. (default: Vector2(0.707,0.707))\n     */\n\n    _this.direction = new Vector2(0.707, 0.707);\n    /**\n     * The center position where the radialIntensity should be around. [0.5,0.5 is center of screen, 1,1 is top right corner] (default: Vector2(0.5 ,0.5))\n     */\n\n    _this.centerPosition = new Vector2(0.5, 0.5);\n    _this.screenWidth = screenWidth;\n    _this.screenHeight = screenHeight;\n\n    _this.onApplyObservable.add(function (effect) {\n      effect.setFloat(\"chromatic_aberration\", _this.aberrationAmount);\n      effect.setFloat(\"screen_width\", screenWidth);\n      effect.setFloat(\"screen_height\", screenHeight);\n      effect.setFloat(\"radialIntensity\", _this.radialIntensity);\n      effect.setFloat2(\"direction\", _this.direction.x, _this.direction.y);\n      effect.setFloat2(\"centerPosition\", _this.centerPosition.x, _this.centerPosition.y);\n    });\n\n    return _this;\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"ChromaticAberrationPostProcess\" string\n   */\n\n\n  ChromaticAberrationPostProcess.prototype.getClassName = function () {\n    return \"ChromaticAberrationPostProcess\";\n  };\n  /**\n   * @param parsedPostProcess\n   * @param targetCamera\n   * @param scene\n   * @param rootUrl\n   * @hidden\n   */\n\n\n  ChromaticAberrationPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new ChromaticAberrationPostProcess(parsedPostProcess.name, parsedPostProcess.screenWidth, parsedPostProcess.screenHeight, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable, parsedPostProcess.textureType, false);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  __decorate([serialize()], ChromaticAberrationPostProcess.prototype, \"aberrationAmount\", void 0);\n\n  __decorate([serialize()], ChromaticAberrationPostProcess.prototype, \"radialIntensity\", void 0);\n\n  __decorate([serialize()], ChromaticAberrationPostProcess.prototype, \"direction\", void 0);\n\n  __decorate([serialize()], ChromaticAberrationPostProcess.prototype, \"centerPosition\", void 0);\n\n  __decorate([serialize()], ChromaticAberrationPostProcess.prototype, \"screenWidth\", void 0);\n\n  __decorate([serialize()], ChromaticAberrationPostProcess.prototype, \"screenHeight\", void 0);\n\n  return ChromaticAberrationPostProcess;\n}(PostProcess);\n\nexport { ChromaticAberrationPostProcess };\nRegisterClass(\"BABYLON.ChromaticAberrationPostProcess\", ChromaticAberrationPostProcess);","map":{"version":3,"mappings":"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","names":["Vector2","PostProcess","RegisterClass","serialize","SerializationHelper","__extends","name","screenWidth","screenHeight","options","camera","samplingMode","engine","reusable","textureType","blockCompilation","_super","undefined","_this","onApplyObservable","add","effect","setFloat","aberrationAmount","radialIntensity","setFloat2","direction","x","y","centerPosition","ChromaticAberrationPostProcess","parsedPostProcess","targetCamera","scene","rootUrl","Parse","renderTargetSamplingMode","getEngine","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/PostProcesses/chromaticAberrationPostProcess.ts"],"sourcesContent":["import { Vector2 } from \"../Maths/math.vector\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/chromaticAberration.fragment\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { serialize, SerializationHelper } from \"../Misc/decorators\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * The ChromaticAberrationPostProcess separates the rgb channels in an image to produce chromatic distortion around the edges of the screen\r\n */\r\nexport class ChromaticAberrationPostProcess extends PostProcess {\r\n    /**\r\n     * The amount of separation of rgb channels (default: 30)\r\n     */\r\n    @serialize()\r\n    aberrationAmount = 30;\r\n\r\n    /**\r\n     * The amount the effect will increase for pixels closer to the edge of the screen. (default: 0)\r\n     */\r\n    @serialize()\r\n    radialIntensity = 0;\r\n\r\n    /**\r\n     * The normalized direction in which the rgb channels should be separated. If set to 0,0 radial direction will be used. (default: Vector2(0.707,0.707))\r\n     */\r\n    @serialize()\r\n    direction = new Vector2(0.707, 0.707);\r\n\r\n    /**\r\n     * The center position where the radialIntensity should be around. [0.5,0.5 is center of screen, 1,1 is top right corner] (default: Vector2(0.5 ,0.5))\r\n     */\r\n    @serialize()\r\n    centerPosition = new Vector2(0.5, 0.5);\r\n\r\n    /** The width of the screen to apply the effect on */\r\n    @serialize()\r\n    screenWidth: number;\r\n\r\n    /** The height of the screen to apply the effect on */\r\n    @serialize()\r\n    screenHeight: number;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"ChromaticAberrationPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"ChromaticAberrationPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance ChromaticAberrationPostProcess\r\n     * @param name The name of the effect.\r\n     * @param screenWidth The width of the screen to apply the effect on.\r\n     * @param screenHeight The height of the screen to apply the effect on.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        screenWidth: number,\r\n        screenHeight: number,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        blockCompilation = false\r\n    ) {\r\n        super(\r\n            name,\r\n            \"chromaticAberration\",\r\n            [\"chromatic_aberration\", \"screen_width\", \"screen_height\", \"direction\", \"radialIntensity\", \"centerPosition\"],\r\n            [],\r\n            options,\r\n            camera,\r\n            samplingMode,\r\n            engine,\r\n            reusable,\r\n            null,\r\n            textureType,\r\n            undefined,\r\n            null,\r\n            blockCompilation\r\n        );\r\n\r\n        this.screenWidth = screenWidth;\r\n        this.screenHeight = screenHeight;\r\n\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setFloat(\"chromatic_aberration\", this.aberrationAmount);\r\n            effect.setFloat(\"screen_width\", screenWidth);\r\n            effect.setFloat(\"screen_height\", screenHeight);\r\n            effect.setFloat(\"radialIntensity\", this.radialIntensity);\r\n            effect.setFloat2(\"direction\", this.direction.x, this.direction.y);\r\n            effect.setFloat2(\"centerPosition\", this.centerPosition.x, this.centerPosition.y);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param parsedPostProcess\r\n     * @param targetCamera\r\n     * @param scene\r\n     * @param rootUrl\r\n     * @hidden\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string): Nullable<ChromaticAberrationPostProcess> {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new ChromaticAberrationPostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.screenWidth,\r\n                    parsedPostProcess.screenHeight,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    scene.getEngine(),\r\n                    parsedPostProcess.reusable,\r\n                    parsedPostProcess.textureType,\r\n                    false\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ChromaticAberrationPostProcess\", ChromaticAberrationPostProcess);\r\n"]},"metadata":{},"sourceType":"module"}