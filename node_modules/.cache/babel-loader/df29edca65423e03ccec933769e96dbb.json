{"ast":null,"code":"import \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport { GetTGAHeader, UploadContent } from \"../../../Misc/tga.js\";\nimport { Engine } from \"../../../Engines/engine.js\";\nimport { EndsWith } from \"../../../Misc/stringTools.js\";\n/**\n * Implementation of the TGA Texture Loader.\n * @hidden\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\n\nvar _TGATextureLoader =\n/** @class */\nfunction () {\n  function _TGATextureLoader() {\n    /**\n     * Defines whether the loader supports cascade loading the different faces.\n     */\n    this.supportCascades = false;\n  }\n  /**\n   * This returns if the loader support the current file information.\n   * @param extension defines the file extension of the file being loaded\n   * @returns true if the loader can load the specified file\n   */\n\n\n  _TGATextureLoader.prototype.canLoad = function (extension) {\n    return EndsWith(extension, \".tga\");\n  };\n  /**\n   * Uploads the cube texture data to the WebGL texture. It has already been bound.\n   */\n\n\n  _TGATextureLoader.prototype.loadCubeData = function () {\n    throw \".env not supported in Cube.\";\n  };\n  /**\n   * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n   * @param data contains the texture data\n   * @param texture defines the BabylonJS internal texture\n   * @param callback defines the method to call once ready to upload\n   */\n\n\n  _TGATextureLoader.prototype.loadData = function (data, texture, callback) {\n    var bytes = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n    var header = GetTGAHeader(bytes);\n    callback(header.width, header.height, texture.generateMipMaps, false, function () {\n      UploadContent(texture, bytes);\n    });\n  };\n\n  return _TGATextureLoader;\n}();\n\nexport { _TGATextureLoader }; // Register the loader.\n\nEngine._TextureLoaders.push(new _TGATextureLoader());","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,sBAA5C;AACA,SAASC,MAAT,QAAuB,4BAAvB;AAGA,SAASC,QAAT,QAAyB,8BAAzB;AAEA;;;;AAIA;;AACA;AAAA;AAAA;AAAA;AACI;;;AAGgB,2BAAkB,KAAlB;AAoCnB;AAlCG;;;;;;;AAKOC,wCAAP,UAAeC,SAAf,EAAgC;AAC5B,WAAOF,QAAQ,CAACE,SAAD,EAAY,MAAZ,CAAf;AACH,GAFM;AAIP;;;;;AAGOD,6CAAP;AACI,UAAM,6BAAN;AACH,GAFM;AAIP;;;;;;;;AAMOA,yCAAP,UACIE,IADJ,EAEIC,OAFJ,EAGIC,QAHJ,EAGmH;AAE/G,QAAMC,KAAK,GAAG,IAAIC,UAAJ,CAAeJ,IAAI,CAACK,MAApB,EAA4BL,IAAI,CAACM,UAAjC,EAA6CN,IAAI,CAACO,UAAlD,CAAd;AAEA,QAAMC,MAAM,GAAGd,YAAY,CAACS,KAAD,CAA3B;AACAD,YAAQ,CAACM,MAAM,CAACC,KAAR,EAAeD,MAAM,CAACE,MAAtB,EAA8BT,OAAO,CAACU,eAAtC,EAAuD,KAAvD,EAA8D;AAClEhB,mBAAa,CAACM,OAAD,EAAUE,KAAV,CAAb;AACH,KAFO,CAAR;AAGH,GAXM;;AAYX;AAAC,CAxCD;;8BA0CA;;AACAP,MAAM,CAACgB,eAAP,CAAuBC,IAAvB,CAA4B,IAAIf,iBAAJ,EAA5B","names":["GetTGAHeader","UploadContent","Engine","EndsWith","_TGATextureLoader","extension","data","texture","callback","bytes","Uint8Array","buffer","byteOffset","byteLength","header","width","height","generateMipMaps","_TextureLoaders","push"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Textures/Loaders/tgaTextureLoader.ts"],"sourcesContent":["import { GetTGAHeader, UploadContent } from \"../../../Misc/tga\";\r\nimport { Engine } from \"../../../Engines/engine\";\r\nimport type { InternalTexture } from \"../../../Materials/Textures/internalTexture\";\r\nimport type { IInternalTextureLoader } from \"../../../Materials/Textures/internalTextureLoader\";\r\nimport { EndsWith } from \"../../../Misc/stringTools\";\r\n\r\n/**\r\n * Implementation of the TGA Texture Loader.\r\n * @hidden\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class _TGATextureLoader implements IInternalTextureLoader {\r\n    /**\r\n     * Defines whether the loader supports cascade loading the different faces.\r\n     */\r\n    public readonly supportCascades = false;\r\n\r\n    /**\r\n     * This returns if the loader support the current file information.\r\n     * @param extension defines the file extension of the file being loaded\r\n     * @returns true if the loader can load the specified file\r\n     */\r\n    public canLoad(extension: string): boolean {\r\n        return EndsWith(extension, \".tga\");\r\n    }\r\n\r\n    /**\r\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\r\n     */\r\n    public loadCubeData(): void {\r\n        throw \".env not supported in Cube.\";\r\n    }\r\n\r\n    /**\r\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param callback defines the method to call once ready to upload\r\n     */\r\n    public loadData(\r\n        data: ArrayBufferView,\r\n        texture: InternalTexture,\r\n        callback: (width: number, height: number, loadMipmap: boolean, isCompressed: boolean, done: () => void) => void\r\n    ): void {\r\n        const bytes = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\r\n\r\n        const header = GetTGAHeader(bytes);\r\n        callback(header.width, header.height, texture.generateMipMaps, false, () => {\r\n            UploadContent(texture, bytes);\r\n        });\r\n    }\r\n}\r\n\r\n// Register the loader.\r\nEngine._TextureLoaders.push(new _TGATextureLoader());\r\n"]},"metadata":{},"sourceType":"module"}