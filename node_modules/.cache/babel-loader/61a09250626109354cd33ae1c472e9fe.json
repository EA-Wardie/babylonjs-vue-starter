{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n\n/**\n * This is the base class for all WebXR features.\n * Since most features require almost the same resources and callbacks, this class can be used to simplify the development\n * Note that since the features manager is using the `IWebXRFeature` you are in no way obligated to use this class\n */\nvar WebXRAbstractFeature =\n/** @class */\nfunction () {\n  /**\n   * Construct a new (abstract) WebXR feature\n   * @param _xrSessionManager the xr session manager for this feature\n   */\n  function WebXRAbstractFeature(_xrSessionManager) {\n    this._xrSessionManager = _xrSessionManager;\n    this._attached = false;\n    this._removeOnDetach = [];\n    /**\n     * Is this feature disposed?\n     */\n\n    this.isDisposed = false;\n    /**\n     * Should auto-attach be disabled?\n     */\n\n    this.disableAutoAttach = false;\n    /**\n     * The name of the native xr feature name (like anchor, hit-test, or hand-tracking)\n     */\n\n    this.xrNativeFeatureName = \"\";\n  }\n\n  Object.defineProperty(WebXRAbstractFeature.prototype, \"attached\", {\n    /**\n     * Is this feature attached\n     */\n    get: function get() {\n      return this._attached;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * attach this feature\n   *\n   * @param force should attachment be forced (even when already attached)\n   * @returns true if successful, false is failed or already attached\n   */\n\n  WebXRAbstractFeature.prototype.attach = function (force) {\n    var _this = this; // do not attach a disposed feature\n\n\n    if (this.isDisposed) {\n      return false;\n    }\n\n    if (!force) {\n      if (this.attached) {\n        return false;\n      }\n    } else {\n      if (this.attached) {\n        // detach first, to be sure\n        this.detach();\n      }\n    }\n\n    this._attached = true;\n\n    this._addNewAttachObserver(this._xrSessionManager.onXRFrameObservable, function (frame) {\n      return _this._onXRFrame(frame);\n    });\n\n    return true;\n  };\n  /**\n   * detach this feature.\n   *\n   * @returns true if successful, false if failed or already detached\n   */\n\n\n  WebXRAbstractFeature.prototype.detach = function () {\n    if (!this._attached) {\n      this.disableAutoAttach = true;\n      return false;\n    }\n\n    this._attached = false;\n\n    this._removeOnDetach.forEach(function (toRemove) {\n      toRemove.observable.remove(toRemove.observer);\n    });\n\n    return true;\n  };\n  /**\n   * Dispose this feature and all of the resources attached\n   */\n\n\n  WebXRAbstractFeature.prototype.dispose = function () {\n    this.detach();\n    this.isDisposed = true;\n  };\n  /**\n   * This function will be executed during before enabling the feature and can be used to not-allow enabling it.\n   * Note that at this point the session has NOT started, so this is purely checking if the browser supports it\n   *\n   * @returns whether or not the feature is compatible in this environment\n   */\n\n\n  WebXRAbstractFeature.prototype.isCompatible = function () {\n    return true;\n  };\n  /**\n   * This is used to register callbacks that will automatically be removed when detach is called.\n   * @param observable the observable to which the observer will be attached\n   * @param callback the callback to register\n   */\n\n\n  WebXRAbstractFeature.prototype._addNewAttachObserver = function (observable, callback) {\n    this._removeOnDetach.push({\n      observable: observable,\n      observer: observable.add(callback)\n    });\n  };\n\n  return WebXRAbstractFeature;\n}();\n\nexport { WebXRAbstractFeature };","map":{"version":3,"mappings":";;;;;AAKA;;;;;AAKA;AAAA;AAAA;AAsBI;;;;AAIA,gCAAsBA,iBAAtB,EAA4D;AAAtC;AAzBd,qBAAqB,KAArB;AACA,2BAGF,EAHE;AAKR;;;;AAGO,sBAAsB,KAAtB;AAEP;;;;AAGO,6BAA6B,KAA7B;AAEP;;;;AAGO,+BAA8B,EAA9B;AAMyD;;AAKhEC,wBAAWC,8BAAX,EAAW,UAAX,EAAmB;AAHnB;;;SAGA;AACI,aAAO,KAAKC,SAAZ;AACH,KAFkB;qBAAA;;AAAA,GAAnB;AAIA;;;;;;;AAMOD,0CAAP,UAAcE,KAAd,EAA6B;AAA7B,qBAA6B,CACzB;;;AACA,QAAI,KAAKC,UAAT,EAAqB;AACjB,aAAO,KAAP;AACH;;AACD,QAAI,CAACD,KAAL,EAAY;AACR,UAAI,KAAKE,QAAT,EAAmB;AACf,eAAO,KAAP;AACH;AACJ,KAJD,MAIO;AACH,UAAI,KAAKA,QAAT,EAAmB;AACf;AACA,aAAKC,MAAL;AACH;AACJ;;AAED,SAAKJ,SAAL,GAAiB,IAAjB;;AACA,SAAKK,qBAAL,CAA2B,KAAKR,iBAAL,CAAuBS,mBAAlD,EAAuE,UAACC,KAAD,EAAM;AAAK,kBAAI,CAACC,UAAL,CAAgBD,KAAhB;AAAsB,KAAxG;;AACA,WAAO,IAAP;AACH,GAnBM;AAqBP;;;;;;;AAKOR,0CAAP;AACI,QAAI,CAAC,KAAKC,SAAV,EAAqB;AACjB,WAAKS,iBAAL,GAAyB,IAAzB;AACA,aAAO,KAAP;AACH;;AACD,SAAKT,SAAL,GAAiB,KAAjB;;AACA,SAAKU,eAAL,CAAqBC,OAArB,CAA6B,UAACC,QAAD,EAAS;AAClCA,cAAQ,CAACC,UAAT,CAAoBC,MAApB,CAA2BF,QAAQ,CAACG,QAApC;AACH,KAFD;;AAGA,WAAO,IAAP;AACH,GAVM;AAYP;;;;;AAGOhB,2CAAP;AACI,SAAKK,MAAL;AACA,SAAKF,UAAL,GAAkB,IAAlB;AACH,GAHM;AAKP;;;;;;;;AAMOH,gDAAP;AACI,WAAO,IAAP;AACH,GAFM;AAIP;;;;;;;AAKUA,yDAAV,UAAmCc,UAAnC,EAA8DG,QAA9D,EAAsH;AAClH,SAAKN,eAAL,CAAqBO,IAArB,CAA0B;AACtBJ,gBAAU,YADY;AAEtBE,cAAQ,EAAEF,UAAU,CAACK,GAAX,CAAeF,QAAf;AAFY,KAA1B;AAIH,GALS;;AAad;AAAC,CAnHD","names":["_xrSessionManager","Object","WebXRAbstractFeature","_attached","force","isDisposed","attached","detach","_addNewAttachObserver","onXRFrameObservable","frame","_onXRFrame","disableAutoAttach","_removeOnDetach","forEach","toRemove","observable","remove","observer","callback","push","add"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/XR/features/WebXRAbstractFeature.ts"],"sourcesContent":["import type { IWebXRFeature } from \"../webXRFeaturesManager\";\r\nimport type { Observer, Observable, EventState } from \"../../Misc/observable\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { WebXRSessionManager } from \"../webXRSessionManager\";\r\n\r\n/**\r\n * This is the base class for all WebXR features.\r\n * Since most features require almost the same resources and callbacks, this class can be used to simplify the development\r\n * Note that since the features manager is using the `IWebXRFeature` you are in no way obligated to use this class\r\n */\r\nexport abstract class WebXRAbstractFeature implements IWebXRFeature {\r\n    private _attached: boolean = false;\r\n    private _removeOnDetach: {\r\n        observer: Nullable<Observer<any>>;\r\n        observable: Observable<any>;\r\n    }[] = [];\r\n\r\n    /**\r\n     * Is this feature disposed?\r\n     */\r\n    public isDisposed: boolean = false;\r\n\r\n    /**\r\n     * Should auto-attach be disabled?\r\n     */\r\n    public disableAutoAttach: boolean = false;\r\n\r\n    /**\r\n     * The name of the native xr feature name (like anchor, hit-test, or hand-tracking)\r\n     */\r\n    public xrNativeFeatureName: string = \"\";\r\n\r\n    /**\r\n     * Construct a new (abstract) WebXR feature\r\n     * @param _xrSessionManager the xr session manager for this feature\r\n     */\r\n    constructor(protected _xrSessionManager: WebXRSessionManager) {}\r\n\r\n    /**\r\n     * Is this feature attached\r\n     */\r\n    public get attached() {\r\n        return this._attached;\r\n    }\r\n\r\n    /**\r\n     * attach this feature\r\n     *\r\n     * @param force should attachment be forced (even when already attached)\r\n     * @returns true if successful, false is failed or already attached\r\n     */\r\n    public attach(force?: boolean): boolean {\r\n        // do not attach a disposed feature\r\n        if (this.isDisposed) {\r\n            return false;\r\n        }\r\n        if (!force) {\r\n            if (this.attached) {\r\n                return false;\r\n            }\r\n        } else {\r\n            if (this.attached) {\r\n                // detach first, to be sure\r\n                this.detach();\r\n            }\r\n        }\r\n\r\n        this._attached = true;\r\n        this._addNewAttachObserver(this._xrSessionManager.onXRFrameObservable, (frame) => this._onXRFrame(frame));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * detach this feature.\r\n     *\r\n     * @returns true if successful, false if failed or already detached\r\n     */\r\n    public detach(): boolean {\r\n        if (!this._attached) {\r\n            this.disableAutoAttach = true;\r\n            return false;\r\n        }\r\n        this._attached = false;\r\n        this._removeOnDetach.forEach((toRemove) => {\r\n            toRemove.observable.remove(toRemove.observer);\r\n        });\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Dispose this feature and all of the resources attached\r\n     */\r\n    public dispose(): void {\r\n        this.detach();\r\n        this.isDisposed = true;\r\n    }\r\n\r\n    /**\r\n     * This function will be executed during before enabling the feature and can be used to not-allow enabling it.\r\n     * Note that at this point the session has NOT started, so this is purely checking if the browser supports it\r\n     *\r\n     * @returns whether or not the feature is compatible in this environment\r\n     */\r\n    public isCompatible(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * This is used to register callbacks that will automatically be removed when detach is called.\r\n     * @param observable the observable to which the observer will be attached\r\n     * @param callback the callback to register\r\n     */\r\n    protected _addNewAttachObserver<T>(observable: Observable<T>, callback: (eventData: T, eventState: EventState) => void) {\r\n        this._removeOnDetach.push({\r\n            observable,\r\n            observer: observable.add(callback),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Code in this function will be executed on each xrFrame received from the browser.\r\n     * This function will not execute after the feature is detached.\r\n     * @param _xrFrame the current frame\r\n     */\r\n    protected abstract _onXRFrame(_xrFrame: XRFrame): void;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}