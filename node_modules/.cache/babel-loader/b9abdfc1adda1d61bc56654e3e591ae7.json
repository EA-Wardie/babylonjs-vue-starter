{"ast":null,"code":"import { EngineInstrumentation } from \"../../Instrumentation/engineInstrumentation.js\";\nimport { PrecisionDate } from \"../precisionDate.js\";\nimport { SceneInstrumentation } from \"../../Instrumentation/sceneInstrumentation.js\"; // Dispose which does nothing.\n\nvar defaultDisposeImpl = function defaultDisposeImpl() {};\n/**\n * Defines the predefined strategies used in the performance viewer.\n */\n\n\nvar PerfCollectionStrategy =\n/** @class */\nfunction () {\n  function PerfCollectionStrategy() {}\n  /**\n   * Gets the initializer for the strategy used for collection of fps metrics\n   * @returns the initializer for the fps strategy\n   */\n\n\n  PerfCollectionStrategy.FpsStrategy = function () {\n    return function (scene) {\n      var engine = scene.getEngine();\n      return {\n        id: \"FPS\",\n        getData: function getData() {\n          return engine.getFps();\n        },\n        dispose: defaultDisposeImpl\n      };\n    };\n  };\n  /**\n   * Gets the initializer for the strategy used for collection of cpu utilization metrics.\n   * Needs the experimental compute pressure API.\n   * @returns the initializer for the cpu utilization strategy\n   */\n\n\n  PerfCollectionStrategy.CpuStrategy = function () {\n    return function (scene) {\n      var value = 0;\n      var computePressureObserver = scene.onComputePressureChanged.add(function (update) {\n        value = update.cpuUtilization;\n      });\n      return {\n        id: \"CPU utilization\",\n        getData: function getData() {\n          return value;\n        },\n        dispose: function dispose() {\n          return scene.onComputePressureChanged.remove(computePressureObserver);\n        }\n      };\n    };\n  };\n  /**\n   * Gets the initializer for the strategy used for collection of total meshes metrics.\n   * @returns the initializer for the total meshes strategy\n   */\n\n\n  PerfCollectionStrategy.TotalMeshesStrategy = function () {\n    return function (scene) {\n      return {\n        id: \"Total meshes\",\n        getData: function getData() {\n          return scene.meshes.length;\n        },\n        dispose: defaultDisposeImpl\n      };\n    };\n  };\n  /**\n   * Gets the initializer for the strategy used for collection of active meshes metrics.\n   * @returns the initializer for the active meshes strategy\n   */\n\n\n  PerfCollectionStrategy.ActiveMeshesStrategy = function () {\n    return function (scene) {\n      return {\n        id: \"Active meshes\",\n        getData: function getData() {\n          return scene.getActiveMeshes().length;\n        },\n        dispose: defaultDisposeImpl\n      };\n    };\n  };\n  /**\n   * Gets the initializer for the strategy used for collection of active indices metrics.\n   * @returns the initializer for the active indices strategy\n   */\n\n\n  PerfCollectionStrategy.ActiveIndicesStrategy = function () {\n    return function (scene) {\n      return {\n        id: \"Active indices\",\n        getData: function getData() {\n          return scene.getActiveIndices();\n        },\n        dispose: defaultDisposeImpl\n      };\n    };\n  };\n  /**\n   * Gets the initializer for the strategy used for collection of active faces metrics.\n   * @returns the initializer for the active faces strategy\n   */\n\n\n  PerfCollectionStrategy.ActiveFacesStrategy = function () {\n    return function (scene) {\n      return {\n        id: \"Active faces\",\n        getData: function getData() {\n          return scene.getActiveIndices() / 3;\n        },\n        dispose: defaultDisposeImpl\n      };\n    };\n  };\n  /**\n   * Gets the initializer for the strategy used for collection of active bones metrics.\n   * @returns the initializer for the active bones strategy\n   */\n\n\n  PerfCollectionStrategy.ActiveBonesStrategy = function () {\n    return function (scene) {\n      return {\n        id: \"Active bones\",\n        getData: function getData() {\n          return scene.getActiveBones();\n        },\n        dispose: defaultDisposeImpl\n      };\n    };\n  };\n  /**\n   * Gets the initializer for the strategy used for collection of active particles metrics.\n   * @returns the initializer for the active particles strategy\n   */\n\n\n  PerfCollectionStrategy.ActiveParticlesStrategy = function () {\n    return function (scene) {\n      return {\n        id: \"Active particles\",\n        getData: function getData() {\n          return scene.getActiveParticles();\n        },\n        dispose: defaultDisposeImpl\n      };\n    };\n  };\n  /**\n   * Gets the initializer for the strategy used for collection of draw calls metrics.\n   * @returns the initializer for the draw calls strategy\n   */\n\n\n  PerfCollectionStrategy.DrawCallsStrategy = function () {\n    return function (scene) {\n      var drawCalls = 0;\n      var onBeforeAnimationsObserver = scene.onBeforeAnimationsObservable.add(function () {\n        scene.getEngine()._drawCalls.fetchNewFrame();\n      });\n      var onAfterRenderObserver = scene.onAfterRenderObservable.add(function () {\n        drawCalls = scene.getEngine()._drawCalls.current;\n      });\n      return {\n        id: \"Draw calls\",\n        getData: function getData() {\n          return drawCalls;\n        },\n        dispose: function dispose() {\n          scene.onBeforeAnimationsObservable.remove(onBeforeAnimationsObserver);\n          scene.onAfterRenderObservable.remove(onAfterRenderObserver);\n        }\n      };\n    };\n  };\n  /**\n   * Gets the initializer for the strategy used for collection of total lights metrics.\n   * @returns the initializer for the total lights strategy\n   */\n\n\n  PerfCollectionStrategy.TotalLightsStrategy = function () {\n    return function (scene) {\n      return {\n        id: \"Total lights\",\n        getData: function getData() {\n          return scene.lights.length;\n        },\n        dispose: defaultDisposeImpl\n      };\n    };\n  };\n  /**\n   * Gets the initializer for the strategy used for collection of total vertices metrics.\n   * @returns the initializer for the total vertices strategy\n   */\n\n\n  PerfCollectionStrategy.TotalVerticesStrategy = function () {\n    return function (scene) {\n      return {\n        id: \"Total vertices\",\n        getData: function getData() {\n          return scene.getTotalVertices();\n        },\n        dispose: defaultDisposeImpl\n      };\n    };\n  };\n  /**\n   * Gets the initializer for the strategy used for collection of total materials metrics.\n   * @returns the initializer for the total materials strategy\n   */\n\n\n  PerfCollectionStrategy.TotalMaterialsStrategy = function () {\n    return function (scene) {\n      return {\n        id: \"Total materials\",\n        getData: function getData() {\n          return scene.materials.length;\n        },\n        dispose: defaultDisposeImpl\n      };\n    };\n  };\n  /**\n   * Gets the initializer for the strategy used for collection of total textures metrics.\n   * @returns the initializer for the total textures strategy\n   */\n\n\n  PerfCollectionStrategy.TotalTexturesStrategy = function () {\n    return function (scene) {\n      return {\n        id: \"Total textures\",\n        getData: function getData() {\n          return scene.textures.length;\n        },\n        dispose: defaultDisposeImpl\n      };\n    };\n  };\n  /**\n   * Gets the initializer for the strategy used for collection of absolute fps metrics.\n   * @returns the initializer for the absolute fps strategy\n   */\n\n\n  PerfCollectionStrategy.AbsoluteFpsStrategy = function () {\n    return function (scene) {\n      var sceneInstrumentation = new SceneInstrumentation(scene);\n      sceneInstrumentation.captureFrameTime = true;\n      return {\n        id: \"Absolute FPS\",\n        getData: function getData() {\n          return 1000.0 / sceneInstrumentation.frameTimeCounter.lastSecAverage;\n        },\n        dispose: defaultDisposeImpl\n      };\n    };\n  };\n  /**\n   * Gets the initializer for the strategy used for collection of meshes selection time metrics.\n   * @returns the initializer for the meshes selection time strategy\n   */\n\n\n  PerfCollectionStrategy.MeshesSelectionStrategy = function () {\n    return function (scene) {\n      var startTime = PrecisionDate.Now;\n      var timeTaken = 0;\n      var onBeforeActiveMeshesObserver = scene.onBeforeActiveMeshesEvaluationObservable.add(function () {\n        startTime = PrecisionDate.Now;\n      });\n      var onAfterActiveMeshesObserver = scene.onAfterActiveMeshesEvaluationObservable.add(function () {\n        timeTaken = PrecisionDate.Now - startTime;\n      });\n      return {\n        id: \"Meshes Selection\",\n        getData: function getData() {\n          return timeTaken;\n        },\n        dispose: function dispose() {\n          scene.onBeforeActiveMeshesEvaluationObservable.remove(onBeforeActiveMeshesObserver);\n          scene.onAfterActiveMeshesEvaluationObservable.remove(onAfterActiveMeshesObserver);\n        }\n      };\n    };\n  };\n  /**\n   * Gets the initializer for the strategy used for collection of render targets time metrics.\n   * @returns the initializer for the render targets time strategy\n   */\n\n\n  PerfCollectionStrategy.RenderTargetsStrategy = function () {\n    return function (scene) {\n      var startTime = PrecisionDate.Now;\n      var timeTaken = 0;\n      var onBeforeRenderTargetsObserver = scene.onBeforeRenderTargetsRenderObservable.add(function () {\n        startTime = PrecisionDate.Now;\n      });\n      var onAfterRenderTargetsObserver = scene.onAfterRenderTargetsRenderObservable.add(function () {\n        timeTaken = PrecisionDate.Now - startTime;\n      });\n      return {\n        id: \"Render Targets\",\n        getData: function getData() {\n          return timeTaken;\n        },\n        dispose: function dispose() {\n          scene.onBeforeRenderTargetsRenderObservable.remove(onBeforeRenderTargetsObserver);\n          scene.onAfterRenderTargetsRenderObservable.remove(onAfterRenderTargetsObserver);\n        }\n      };\n    };\n  };\n  /**\n   * Gets the initializer for the strategy used for collection of particles time metrics.\n   * @returns the initializer for the particles time strategy\n   */\n\n\n  PerfCollectionStrategy.ParticlesStrategy = function () {\n    return function (scene) {\n      var startTime = PrecisionDate.Now;\n      var timeTaken = 0;\n      var onBeforeParticlesObserver = scene.onBeforeParticlesRenderingObservable.add(function () {\n        startTime = PrecisionDate.Now;\n      });\n      var onAfterParticlesObserver = scene.onAfterParticlesRenderingObservable.add(function () {\n        timeTaken = PrecisionDate.Now - startTime;\n      });\n      return {\n        id: \"Particles\",\n        getData: function getData() {\n          return timeTaken;\n        },\n        dispose: function dispose() {\n          scene.onBeforeParticlesRenderingObservable.remove(onBeforeParticlesObserver);\n          scene.onAfterParticlesRenderingObservable.remove(onAfterParticlesObserver);\n        }\n      };\n    };\n  };\n  /**\n   * Gets the initializer for the strategy used for collection of sprites time metrics.\n   * @returns the initializer for the sprites time strategy\n   */\n\n\n  PerfCollectionStrategy.SpritesStrategy = function () {\n    return function (scene) {\n      var _a, _b;\n\n      var startTime = PrecisionDate.Now;\n      var timeTaken = 0;\n      var onBeforeSpritesObserver = (_a = scene.onBeforeSpritesRenderingObservable) === null || _a === void 0 ? void 0 : _a.add(function () {\n        startTime = PrecisionDate.Now;\n      });\n      var onAfterSpritesObserver = (_b = scene.onAfterSpritesRenderingObservable) === null || _b === void 0 ? void 0 : _b.add(function () {\n        timeTaken = PrecisionDate.Now - startTime;\n      });\n      return {\n        id: \"Sprites\",\n        getData: function getData() {\n          return timeTaken;\n        },\n        dispose: function dispose() {\n          var _a, _b;\n\n          (_a = scene.onBeforeSpritesRenderingObservable) === null || _a === void 0 ? void 0 : _a.remove(onBeforeSpritesObserver);\n          (_b = scene.onAfterSpritesRenderingObservable) === null || _b === void 0 ? void 0 : _b.remove(onAfterSpritesObserver);\n        }\n      };\n    };\n  };\n  /**\n   * Gets the initializer for the strategy used for collection of animations time metrics.\n   * @returns the initializer for the animations time strategy\n   */\n\n\n  PerfCollectionStrategy.AnimationsStrategy = function () {\n    return function (scene) {\n      var startTime = PrecisionDate.Now;\n      var timeTaken = 0;\n      var onBeforeAnimationsObserver = scene.onBeforeAnimationsObservable.add(function () {\n        startTime = PrecisionDate.Now;\n      });\n      var onAfterAnimationsObserver = scene.onAfterAnimationsObservable.add(function () {\n        timeTaken = PrecisionDate.Now - startTime;\n      });\n      return {\n        id: \"Animations\",\n        getData: function getData() {\n          return timeTaken;\n        },\n        dispose: function dispose() {\n          scene.onBeforeAnimationsObservable.remove(onBeforeAnimationsObserver);\n          scene.onAfterAnimationsObservable.remove(onAfterAnimationsObserver);\n        }\n      };\n    };\n  };\n  /**\n   * Gets the initializer for the strategy used for collection of physics time metrics.\n   * @returns the initializer for the physics time strategy\n   */\n\n\n  PerfCollectionStrategy.PhysicsStrategy = function () {\n    return function (scene) {\n      var _a, _b;\n\n      var startTime = PrecisionDate.Now;\n      var timeTaken = 0;\n      var onBeforePhysicsObserver = (_a = scene.onBeforePhysicsObservable) === null || _a === void 0 ? void 0 : _a.add(function () {\n        startTime = PrecisionDate.Now;\n      });\n      var onAfterPhysicsObserver = (_b = scene.onAfterPhysicsObservable) === null || _b === void 0 ? void 0 : _b.add(function () {\n        timeTaken = PrecisionDate.Now - startTime;\n      });\n      return {\n        id: \"Physics\",\n        getData: function getData() {\n          return timeTaken;\n        },\n        dispose: function dispose() {\n          var _a, _b;\n\n          (_a = scene.onBeforePhysicsObservable) === null || _a === void 0 ? void 0 : _a.remove(onBeforePhysicsObserver);\n          (_b = scene.onAfterPhysicsObservable) === null || _b === void 0 ? void 0 : _b.remove(onAfterPhysicsObserver);\n        }\n      };\n    };\n  };\n  /**\n   * Gets the initializer for the strategy used for collection of render time metrics.\n   * @returns the initializer for the render time strategy\n   */\n\n\n  PerfCollectionStrategy.RenderStrategy = function () {\n    return function (scene) {\n      var startTime = PrecisionDate.Now;\n      var timeTaken = 0;\n      var onBeforeDrawPhaseObserver = scene.onBeforeDrawPhaseObservable.add(function () {\n        startTime = PrecisionDate.Now;\n      });\n      var onAfterDrawPhaseObserver = scene.onAfterDrawPhaseObservable.add(function () {\n        timeTaken = PrecisionDate.Now - startTime;\n      });\n      return {\n        id: \"Render\",\n        getData: function getData() {\n          return timeTaken;\n        },\n        dispose: function dispose() {\n          scene.onBeforeDrawPhaseObservable.remove(onBeforeDrawPhaseObserver);\n          scene.onAfterDrawPhaseObservable.remove(onAfterDrawPhaseObserver);\n        }\n      };\n    };\n  };\n  /**\n   * Gets the initializer for the strategy used for collection of total frame time metrics.\n   * @returns the initializer for the total frame time strategy\n   */\n\n\n  PerfCollectionStrategy.FrameTotalStrategy = function () {\n    return function (scene) {\n      var startTime = PrecisionDate.Now;\n      var timeTaken = 0;\n      var onBeforeAnimationsObserver = scene.onBeforeAnimationsObservable.add(function () {\n        startTime = PrecisionDate.Now;\n      });\n      var onAfterRenderObserver = scene.onAfterRenderObservable.add(function () {\n        timeTaken = PrecisionDate.Now - startTime;\n      });\n      return {\n        id: \"Frame Total\",\n        getData: function getData() {\n          return timeTaken;\n        },\n        dispose: function dispose() {\n          scene.onBeforeAnimationsObservable.remove(onBeforeAnimationsObserver);\n          scene.onAfterRenderObservable.remove(onAfterRenderObserver);\n        }\n      };\n    };\n  };\n  /**\n   * Gets the initializer for the strategy used for collection of inter-frame time metrics.\n   * @returns the initializer for the inter-frame time strategy\n   */\n\n\n  PerfCollectionStrategy.InterFrameStrategy = function () {\n    return function (scene) {\n      var startTime = PrecisionDate.Now;\n      var timeTaken = 0;\n      var onBeforeAnimationsObserver = scene.onBeforeAnimationsObservable.add(function () {\n        timeTaken = PrecisionDate.Now - startTime;\n      });\n      var onAfterRenderObserver = scene.onAfterRenderObservable.add(function () {\n        startTime = PrecisionDate.Now;\n      });\n      return {\n        id: \"Inter-frame\",\n        getData: function getData() {\n          return timeTaken;\n        },\n        dispose: function dispose() {\n          scene.onBeforeAnimationsObservable.remove(onBeforeAnimationsObserver);\n          scene.onAfterRenderObservable.remove(onAfterRenderObserver);\n        }\n      };\n    };\n  };\n  /**\n   * Gets the initializer for the strategy used for collection of gpu frame time metrics.\n   * @returns the initializer for the gpu frame time strategy\n   */\n\n\n  PerfCollectionStrategy.GpuFrameTimeStrategy = function () {\n    return function (scene) {\n      var engineInstrumentation = new EngineInstrumentation(scene.getEngine());\n      engineInstrumentation.captureGPUFrameTime = true;\n      return {\n        id: \"GPU frame time\",\n        getData: function getData() {\n          return Math.max(engineInstrumentation.gpuFrameTimeCounter.current * 0.000001, 0);\n        },\n        dispose: function dispose() {\n          engineInstrumentation.dispose();\n        }\n      };\n    };\n  };\n\n  return PerfCollectionStrategy;\n}();\n\nexport { PerfCollectionStrategy };","map":{"version":3,"mappings":"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","names":["EngineInstrumentation","PrecisionDate","SceneInstrumentation","defaultDisposeImpl","PerfCollectionStrategy","scene","engine","getEngine","id","getData","getFps","dispose","value","computePressureObserver","onComputePressureChanged","add","update","cpuUtilization","remove","meshes","length","getActiveMeshes","getActiveIndices","getActiveBones","getActiveParticles","drawCalls","onBeforeAnimationsObserver","onBeforeAnimationsObservable","_drawCalls","fetchNewFrame","onAfterRenderObserver","onAfterRenderObservable","current","lights","getTotalVertices","materials","textures","sceneInstrumentation","captureFrameTime","frameTimeCounter","lastSecAverage","startTime","Now","timeTaken","onBeforeActiveMeshesObserver","onBeforeActiveMeshesEvaluationObservable","onAfterActiveMeshesObserver","onAfterActiveMeshesEvaluationObservable","onBeforeRenderTargetsObserver","onBeforeRenderTargetsRenderObservable","onAfterRenderTargetsObserver","onAfterRenderTargetsRenderObservable","onBeforeParticlesObserver","onBeforeParticlesRenderingObservable","onAfterParticlesObserver","onAfterParticlesRenderingObservable","onBeforeSpritesObserver","onBeforeSpritesRenderingObservable","_a","onAfterSpritesObserver","onAfterSpritesRenderingObservable","_b","onAfterAnimationsObserver","onAfterAnimationsObservable","onBeforePhysicsObserver","onBeforePhysicsObservable","onAfterPhysicsObserver","onAfterPhysicsObservable","onBeforeDrawPhaseObserver","onBeforeDrawPhaseObservable","onAfterDrawPhaseObserver","onAfterDrawPhaseObservable","engineInstrumentation","captureGPUFrameTime","max","gpuFrameTimeCounter"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Misc/PerformanceViewer/performanceViewerCollectionStrategies.ts"],"sourcesContent":["import { EngineInstrumentation } from \"../../Instrumentation/engineInstrumentation\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { PrecisionDate } from \"../precisionDate\";\r\nimport { SceneInstrumentation } from \"../../Instrumentation/sceneInstrumentation\";\r\n\r\n/**\r\n * Defines the general structure of what is necessary for a collection strategy.\r\n */\r\nexport interface IPerfViewerCollectionStrategy {\r\n    /**\r\n     * The id of the strategy.\r\n     */\r\n    id: string;\r\n    /**\r\n     * Function which gets the data for the strategy.\r\n     */\r\n    getData: () => number;\r\n    /**\r\n     * Function which does any necessary cleanup. Called when performanceViewerCollector.dispose() is called.\r\n     */\r\n    dispose: () => void;\r\n}\r\n// Dispose which does nothing.\r\nconst defaultDisposeImpl = () => {};\r\n\r\n/**\r\n * Initializer callback for a strategy\r\n */\r\nexport type PerfStrategyInitialization = (scene: Scene) => IPerfViewerCollectionStrategy;\r\n/**\r\n * Defines the predefined strategies used in the performance viewer.\r\n */\r\nexport class PerfCollectionStrategy {\r\n    /**\r\n     * Gets the initializer for the strategy used for collection of fps metrics\r\n     * @returns the initializer for the fps strategy\r\n     */\r\n    public static FpsStrategy(): PerfStrategyInitialization {\r\n        return (scene) => {\r\n            const engine = scene.getEngine();\r\n            return {\r\n                id: \"FPS\",\r\n                getData: () => engine.getFps(),\r\n                dispose: defaultDisposeImpl,\r\n            };\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the initializer for the strategy used for collection of cpu utilization metrics.\r\n     * Needs the experimental compute pressure API.\r\n     * @returns the initializer for the cpu utilization strategy\r\n     */\r\n    public static CpuStrategy(): PerfStrategyInitialization {\r\n        return (scene) => {\r\n            let value = 0;\r\n            const computePressureObserver = scene.onComputePressureChanged.add((update) => {\r\n                value = update.cpuUtilization;\r\n            });\r\n            return {\r\n                id: \"CPU utilization\",\r\n                getData: () => value,\r\n                dispose: () => scene.onComputePressureChanged.remove(computePressureObserver),\r\n            };\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the initializer for the strategy used for collection of total meshes metrics.\r\n     * @returns the initializer for the total meshes strategy\r\n     */\r\n    public static TotalMeshesStrategy(): PerfStrategyInitialization {\r\n        return (scene) => {\r\n            return {\r\n                id: \"Total meshes\",\r\n                getData: () => scene.meshes.length,\r\n                dispose: defaultDisposeImpl,\r\n            };\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the initializer for the strategy used for collection of active meshes metrics.\r\n     * @returns the initializer for the active meshes strategy\r\n     */\r\n    public static ActiveMeshesStrategy(): PerfStrategyInitialization {\r\n        return (scene) => {\r\n            return {\r\n                id: \"Active meshes\",\r\n                getData: () => scene.getActiveMeshes().length,\r\n                dispose: defaultDisposeImpl,\r\n            };\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the initializer for the strategy used for collection of active indices metrics.\r\n     * @returns the initializer for the active indices strategy\r\n     */\r\n    public static ActiveIndicesStrategy(): PerfStrategyInitialization {\r\n        return (scene) => {\r\n            return {\r\n                id: \"Active indices\",\r\n                getData: () => scene.getActiveIndices(),\r\n                dispose: defaultDisposeImpl,\r\n            };\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the initializer for the strategy used for collection of active faces metrics.\r\n     * @returns the initializer for the active faces strategy\r\n     */\r\n    public static ActiveFacesStrategy(): PerfStrategyInitialization {\r\n        return (scene) => {\r\n            return {\r\n                id: \"Active faces\",\r\n                getData: () => scene.getActiveIndices() / 3,\r\n                dispose: defaultDisposeImpl,\r\n            };\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the initializer for the strategy used for collection of active bones metrics.\r\n     * @returns the initializer for the active bones strategy\r\n     */\r\n    public static ActiveBonesStrategy(): PerfStrategyInitialization {\r\n        return (scene) => {\r\n            return {\r\n                id: \"Active bones\",\r\n                getData: () => scene.getActiveBones(),\r\n                dispose: defaultDisposeImpl,\r\n            };\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the initializer for the strategy used for collection of active particles metrics.\r\n     * @returns the initializer for the active particles strategy\r\n     */\r\n    public static ActiveParticlesStrategy(): PerfStrategyInitialization {\r\n        return (scene) => {\r\n            return {\r\n                id: \"Active particles\",\r\n                getData: () => scene.getActiveParticles(),\r\n                dispose: defaultDisposeImpl,\r\n            };\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the initializer for the strategy used for collection of draw calls metrics.\r\n     * @returns the initializer for the draw calls strategy\r\n     */\r\n    public static DrawCallsStrategy(): PerfStrategyInitialization {\r\n        return (scene) => {\r\n            let drawCalls = 0;\r\n            const onBeforeAnimationsObserver = scene.onBeforeAnimationsObservable.add(() => {\r\n                scene.getEngine()._drawCalls.fetchNewFrame();\r\n            });\r\n\r\n            const onAfterRenderObserver = scene.onAfterRenderObservable.add(() => {\r\n                drawCalls = scene.getEngine()._drawCalls.current;\r\n            });\r\n\r\n            return {\r\n                id: \"Draw calls\",\r\n                getData: () => drawCalls,\r\n                dispose: () => {\r\n                    scene.onBeforeAnimationsObservable.remove(onBeforeAnimationsObserver);\r\n                    scene.onAfterRenderObservable.remove(onAfterRenderObserver);\r\n                },\r\n            };\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the initializer for the strategy used for collection of total lights metrics.\r\n     * @returns the initializer for the total lights strategy\r\n     */\r\n    public static TotalLightsStrategy(): PerfStrategyInitialization {\r\n        return (scene) => {\r\n            return {\r\n                id: \"Total lights\",\r\n                getData: () => scene.lights.length,\r\n                dispose: defaultDisposeImpl,\r\n            };\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the initializer for the strategy used for collection of total vertices metrics.\r\n     * @returns the initializer for the total vertices strategy\r\n     */\r\n    public static TotalVerticesStrategy(): PerfStrategyInitialization {\r\n        return (scene) => {\r\n            return {\r\n                id: \"Total vertices\",\r\n                getData: () => scene.getTotalVertices(),\r\n                dispose: defaultDisposeImpl,\r\n            };\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the initializer for the strategy used for collection of total materials metrics.\r\n     * @returns the initializer for the total materials strategy\r\n     */\r\n    public static TotalMaterialsStrategy(): PerfStrategyInitialization {\r\n        return (scene) => {\r\n            return {\r\n                id: \"Total materials\",\r\n                getData: () => scene.materials.length,\r\n                dispose: defaultDisposeImpl,\r\n            };\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the initializer for the strategy used for collection of total textures metrics.\r\n     * @returns the initializer for the total textures strategy\r\n     */\r\n    public static TotalTexturesStrategy(): PerfStrategyInitialization {\r\n        return (scene) => {\r\n            return {\r\n                id: \"Total textures\",\r\n                getData: () => scene.textures.length,\r\n                dispose: defaultDisposeImpl,\r\n            };\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the initializer for the strategy used for collection of absolute fps metrics.\r\n     * @returns the initializer for the absolute fps strategy\r\n     */\r\n    public static AbsoluteFpsStrategy(): PerfStrategyInitialization {\r\n        return (scene) => {\r\n            const sceneInstrumentation = new SceneInstrumentation(scene);\r\n            sceneInstrumentation.captureFrameTime = true;\r\n\r\n            return {\r\n                id: \"Absolute FPS\",\r\n                getData: () => {\r\n                    return 1000.0 / sceneInstrumentation.frameTimeCounter.lastSecAverage;\r\n                },\r\n                dispose: defaultDisposeImpl,\r\n            };\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the initializer for the strategy used for collection of meshes selection time metrics.\r\n     * @returns the initializer for the meshes selection time strategy\r\n     */\r\n    public static MeshesSelectionStrategy(): PerfStrategyInitialization {\r\n        return (scene) => {\r\n            let startTime = PrecisionDate.Now;\r\n            let timeTaken = 0;\r\n            const onBeforeActiveMeshesObserver = scene.onBeforeActiveMeshesEvaluationObservable.add(() => {\r\n                startTime = PrecisionDate.Now;\r\n            });\r\n\r\n            const onAfterActiveMeshesObserver = scene.onAfterActiveMeshesEvaluationObservable.add(() => {\r\n                timeTaken = PrecisionDate.Now - startTime;\r\n            });\r\n\r\n            return {\r\n                id: \"Meshes Selection\",\r\n                getData: () => timeTaken,\r\n                dispose: () => {\r\n                    scene.onBeforeActiveMeshesEvaluationObservable.remove(onBeforeActiveMeshesObserver);\r\n                    scene.onAfterActiveMeshesEvaluationObservable.remove(onAfterActiveMeshesObserver);\r\n                },\r\n            };\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the initializer for the strategy used for collection of render targets time metrics.\r\n     * @returns the initializer for the render targets time strategy\r\n     */\r\n    public static RenderTargetsStrategy(): PerfStrategyInitialization {\r\n        return (scene) => {\r\n            let startTime = PrecisionDate.Now;\r\n            let timeTaken = 0;\r\n            const onBeforeRenderTargetsObserver = scene.onBeforeRenderTargetsRenderObservable.add(() => {\r\n                startTime = PrecisionDate.Now;\r\n            });\r\n\r\n            const onAfterRenderTargetsObserver = scene.onAfterRenderTargetsRenderObservable.add(() => {\r\n                timeTaken = PrecisionDate.Now - startTime;\r\n            });\r\n\r\n            return {\r\n                id: \"Render Targets\",\r\n                getData: () => timeTaken,\r\n                dispose: () => {\r\n                    scene.onBeforeRenderTargetsRenderObservable.remove(onBeforeRenderTargetsObserver);\r\n                    scene.onAfterRenderTargetsRenderObservable.remove(onAfterRenderTargetsObserver);\r\n                },\r\n            };\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the initializer for the strategy used for collection of particles time metrics.\r\n     * @returns the initializer for the particles time strategy\r\n     */\r\n    public static ParticlesStrategy(): PerfStrategyInitialization {\r\n        return (scene) => {\r\n            let startTime = PrecisionDate.Now;\r\n            let timeTaken = 0;\r\n            const onBeforeParticlesObserver = scene.onBeforeParticlesRenderingObservable.add(() => {\r\n                startTime = PrecisionDate.Now;\r\n            });\r\n\r\n            const onAfterParticlesObserver = scene.onAfterParticlesRenderingObservable.add(() => {\r\n                timeTaken = PrecisionDate.Now - startTime;\r\n            });\r\n\r\n            return {\r\n                id: \"Particles\",\r\n                getData: () => timeTaken,\r\n                dispose: () => {\r\n                    scene.onBeforeParticlesRenderingObservable.remove(onBeforeParticlesObserver);\r\n                    scene.onAfterParticlesRenderingObservable.remove(onAfterParticlesObserver);\r\n                },\r\n            };\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the initializer for the strategy used for collection of sprites time metrics.\r\n     * @returns the initializer for the sprites time strategy\r\n     */\r\n    public static SpritesStrategy(): PerfStrategyInitialization {\r\n        return (scene) => {\r\n            let startTime = PrecisionDate.Now;\r\n            let timeTaken = 0;\r\n            const onBeforeSpritesObserver = scene.onBeforeSpritesRenderingObservable?.add(() => {\r\n                startTime = PrecisionDate.Now;\r\n            });\r\n\r\n            const onAfterSpritesObserver = scene.onAfterSpritesRenderingObservable?.add(() => {\r\n                timeTaken = PrecisionDate.Now - startTime;\r\n            });\r\n\r\n            return {\r\n                id: \"Sprites\",\r\n                getData: () => timeTaken,\r\n                dispose: () => {\r\n                    scene.onBeforeSpritesRenderingObservable?.remove(onBeforeSpritesObserver);\r\n                    scene.onAfterSpritesRenderingObservable?.remove(onAfterSpritesObserver);\r\n                },\r\n            };\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the initializer for the strategy used for collection of animations time metrics.\r\n     * @returns the initializer for the animations time strategy\r\n     */\r\n    public static AnimationsStrategy(): PerfStrategyInitialization {\r\n        return (scene) => {\r\n            let startTime = PrecisionDate.Now;\r\n            let timeTaken = 0;\r\n            const onBeforeAnimationsObserver = scene.onBeforeAnimationsObservable.add(() => {\r\n                startTime = PrecisionDate.Now;\r\n            });\r\n\r\n            const onAfterAnimationsObserver = scene.onAfterAnimationsObservable.add(() => {\r\n                timeTaken = PrecisionDate.Now - startTime;\r\n            });\r\n\r\n            return {\r\n                id: \"Animations\",\r\n                getData: () => timeTaken,\r\n                dispose: () => {\r\n                    scene.onBeforeAnimationsObservable.remove(onBeforeAnimationsObserver);\r\n                    scene.onAfterAnimationsObservable.remove(onAfterAnimationsObserver);\r\n                },\r\n            };\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the initializer for the strategy used for collection of physics time metrics.\r\n     * @returns the initializer for the physics time strategy\r\n     */\r\n    public static PhysicsStrategy(): PerfStrategyInitialization {\r\n        return (scene) => {\r\n            let startTime = PrecisionDate.Now;\r\n            let timeTaken = 0;\r\n            const onBeforePhysicsObserver = scene.onBeforePhysicsObservable?.add(() => {\r\n                startTime = PrecisionDate.Now;\r\n            });\r\n\r\n            const onAfterPhysicsObserver = scene.onAfterPhysicsObservable?.add(() => {\r\n                timeTaken = PrecisionDate.Now - startTime;\r\n            });\r\n\r\n            return {\r\n                id: \"Physics\",\r\n                getData: () => timeTaken,\r\n                dispose: () => {\r\n                    scene.onBeforePhysicsObservable?.remove(onBeforePhysicsObserver);\r\n                    scene.onAfterPhysicsObservable?.remove(onAfterPhysicsObserver);\r\n                },\r\n            };\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the initializer for the strategy used for collection of render time metrics.\r\n     * @returns the initializer for the render time strategy\r\n     */\r\n    public static RenderStrategy(): PerfStrategyInitialization {\r\n        return (scene) => {\r\n            let startTime = PrecisionDate.Now;\r\n            let timeTaken = 0;\r\n            const onBeforeDrawPhaseObserver = scene.onBeforeDrawPhaseObservable.add(() => {\r\n                startTime = PrecisionDate.Now;\r\n            });\r\n\r\n            const onAfterDrawPhaseObserver = scene.onAfterDrawPhaseObservable.add(() => {\r\n                timeTaken = PrecisionDate.Now - startTime;\r\n            });\r\n\r\n            return {\r\n                id: \"Render\",\r\n                getData: () => timeTaken,\r\n                dispose: () => {\r\n                    scene.onBeforeDrawPhaseObservable.remove(onBeforeDrawPhaseObserver);\r\n                    scene.onAfterDrawPhaseObservable.remove(onAfterDrawPhaseObserver);\r\n                },\r\n            };\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the initializer for the strategy used for collection of total frame time metrics.\r\n     * @returns the initializer for the total frame time strategy\r\n     */\r\n    public static FrameTotalStrategy(): PerfStrategyInitialization {\r\n        return (scene) => {\r\n            let startTime = PrecisionDate.Now;\r\n            let timeTaken = 0;\r\n            const onBeforeAnimationsObserver = scene.onBeforeAnimationsObservable.add(() => {\r\n                startTime = PrecisionDate.Now;\r\n            });\r\n\r\n            const onAfterRenderObserver = scene.onAfterRenderObservable.add(() => {\r\n                timeTaken = PrecisionDate.Now - startTime;\r\n            });\r\n\r\n            return {\r\n                id: \"Frame Total\",\r\n                getData: () => timeTaken,\r\n                dispose: () => {\r\n                    scene.onBeforeAnimationsObservable.remove(onBeforeAnimationsObserver);\r\n                    scene.onAfterRenderObservable.remove(onAfterRenderObserver);\r\n                },\r\n            };\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the initializer for the strategy used for collection of inter-frame time metrics.\r\n     * @returns the initializer for the inter-frame time strategy\r\n     */\r\n    public static InterFrameStrategy(): PerfStrategyInitialization {\r\n        return (scene) => {\r\n            let startTime = PrecisionDate.Now;\r\n            let timeTaken = 0;\r\n\r\n            const onBeforeAnimationsObserver = scene.onBeforeAnimationsObservable.add(() => {\r\n                timeTaken = PrecisionDate.Now - startTime;\r\n            });\r\n\r\n            const onAfterRenderObserver = scene.onAfterRenderObservable.add(() => {\r\n                startTime = PrecisionDate.Now;\r\n            });\r\n\r\n            return {\r\n                id: \"Inter-frame\",\r\n                getData: () => timeTaken,\r\n                dispose: () => {\r\n                    scene.onBeforeAnimationsObservable.remove(onBeforeAnimationsObserver);\r\n                    scene.onAfterRenderObservable.remove(onAfterRenderObserver);\r\n                },\r\n            };\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the initializer for the strategy used for collection of gpu frame time metrics.\r\n     * @returns the initializer for the gpu frame time strategy\r\n     */\r\n    public static GpuFrameTimeStrategy(): PerfStrategyInitialization {\r\n        return (scene) => {\r\n            const engineInstrumentation = new EngineInstrumentation(scene.getEngine());\r\n            engineInstrumentation.captureGPUFrameTime = true;\r\n            return {\r\n                id: \"GPU frame time\",\r\n                getData: () => Math.max(engineInstrumentation.gpuFrameTimeCounter.current * 0.000001, 0),\r\n                dispose: () => {\r\n                    engineInstrumentation.dispose();\r\n                },\r\n            };\r\n        };\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}