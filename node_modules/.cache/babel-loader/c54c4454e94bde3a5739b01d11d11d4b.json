{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { CameraInputsManager } from \"./cameraInputsManager.js\";\nimport { FreeCameraKeyboardMoveInput } from \"../Cameras/Inputs/freeCameraKeyboardMoveInput.js\";\nimport { FreeCameraMouseInput } from \"../Cameras/Inputs/freeCameraMouseInput.js\";\nimport { FreeCameraMouseWheelInput } from \"../Cameras/Inputs/freeCameraMouseWheelInput.js\";\nimport { FreeCameraTouchInput } from \"../Cameras/Inputs/freeCameraTouchInput.js\";\n/**\n * Default Inputs manager for the FreeCamera.\n * It groups all the default supported inputs for ease of use.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\n\nvar FreeCameraInputsManager =\n/** @class */\nfunction (_super) {\n  __extends(FreeCameraInputsManager, _super);\n  /**\n   * Instantiates a new FreeCameraInputsManager.\n   * @param camera Defines the camera the inputs belong to\n   */\n\n\n  function FreeCameraInputsManager(camera) {\n    var _this = _super.call(this, camera) || this;\n    /**\n     * @hidden\n     */\n\n\n    _this._mouseInput = null;\n    /**\n     * @hidden\n     */\n\n    _this._mouseWheelInput = null;\n    return _this;\n  }\n  /**\n   * Add keyboard input support to the input manager.\n   * @returns the current input manager\n   */\n\n\n  FreeCameraInputsManager.prototype.addKeyboard = function () {\n    this.add(new FreeCameraKeyboardMoveInput());\n    return this;\n  };\n  /**\n   * Add mouse input support to the input manager.\n   * @param touchEnabled if the FreeCameraMouseInput should support touch (default: true)\n   * @returns the current input manager\n   */\n\n\n  FreeCameraInputsManager.prototype.addMouse = function (touchEnabled) {\n    if (touchEnabled === void 0) {\n      touchEnabled = true;\n    }\n\n    if (!this._mouseInput) {\n      this._mouseInput = new FreeCameraMouseInput(touchEnabled);\n      this.add(this._mouseInput);\n    }\n\n    return this;\n  };\n  /**\n   * Removes the mouse input support from the manager\n   * @returns the current input manager\n   */\n\n\n  FreeCameraInputsManager.prototype.removeMouse = function () {\n    if (this._mouseInput) {\n      this.remove(this._mouseInput);\n    }\n\n    return this;\n  };\n  /**\n   * Add mouse wheel input support to the input manager.\n   * @returns the current input manager\n   */\n\n\n  FreeCameraInputsManager.prototype.addMouseWheel = function () {\n    if (!this._mouseWheelInput) {\n      this._mouseWheelInput = new FreeCameraMouseWheelInput();\n      this.add(this._mouseWheelInput);\n    }\n\n    return this;\n  };\n  /**\n   * Removes the mouse wheel input support from the manager\n   * @returns the current input manager\n   */\n\n\n  FreeCameraInputsManager.prototype.removeMouseWheel = function () {\n    if (this._mouseWheelInput) {\n      this.remove(this._mouseWheelInput);\n    }\n\n    return this;\n  };\n  /**\n   * Add touch input support to the input manager.\n   * @returns the current input manager\n   */\n\n\n  FreeCameraInputsManager.prototype.addTouch = function () {\n    this.add(new FreeCameraTouchInput());\n    return this;\n  };\n  /**\n   * Remove all attached input methods from a camera\n   */\n\n\n  FreeCameraInputsManager.prototype.clear = function () {\n    _super.prototype.clear.call(this);\n\n    this._mouseInput = null;\n  };\n\n  return FreeCameraInputsManager;\n}(CameraInputsManager);\n\nexport { FreeCameraInputsManager };","map":{"version":3,"mappings":";AACA,SAASA,mBAAT,QAAoC,0BAApC;AACA,SAASC,2BAAT,QAA4C,kDAA5C;AACA,SAASC,oBAAT,QAAqC,2CAArC;AACA,SAASC,yBAAT,QAA0C,gDAA1C;AACA,SAASC,oBAAT,QAAqC,2CAArC;AAGA;;;;;;AAKA;AAAA;AAAA;AAA6CC;AASzC;;;;;;AAIA,mCAAYC,MAAZ,EAA8B;AAA9B,gBACIC,kBAAMD,MAAN,KAAa,IADjB;AAZA;;;;;AAGOE,wBAA8C,IAA9C;AACP;;;;AAGOA,6BAAwD,IAAxD;;AAON;AAED;;;;;;AAIAC;AACI,SAAKC,GAAL,CAAS,IAAIT,2BAAJ,EAAT;AACA,WAAO,IAAP;AACH,GAHD;AAKA;;;;;;;AAKAQ,yDAASE,YAAT,EAA4B;AAAnB;AAAAA;AAAmB;;AACxB,QAAI,CAAC,KAAKC,WAAV,EAAuB;AACnB,WAAKA,WAAL,GAAmB,IAAIV,oBAAJ,CAAyBS,YAAzB,CAAnB;AACA,WAAKD,GAAL,CAAS,KAAKE,WAAd;AACH;;AACD,WAAO,IAAP;AACH,GAND;AAQA;;;;;;AAIAH;AACI,QAAI,KAAKG,WAAT,EAAsB;AAClB,WAAKC,MAAL,CAAY,KAAKD,WAAjB;AACH;;AACD,WAAO,IAAP;AACH,GALD;AAOA;;;;;;AAIAH;AACI,QAAI,CAAC,KAAKK,gBAAV,EAA4B;AACxB,WAAKA,gBAAL,GAAwB,IAAIX,yBAAJ,EAAxB;AACA,WAAKO,GAAL,CAAS,KAAKI,gBAAd;AACH;;AACD,WAAO,IAAP;AACH,GAND;AAQA;;;;;;AAIAL;AACI,QAAI,KAAKK,gBAAT,EAA2B;AACvB,WAAKD,MAAL,CAAY,KAAKC,gBAAjB;AACH;;AACD,WAAO,IAAP;AACH,GALD;AAOA;;;;;;AAIAL;AACI,SAAKC,GAAL,CAAS,IAAIN,oBAAJ,EAAT;AACA,WAAO,IAAP;AACH,GAHD;AAKA;;;;;AAGOK,4CAAP;AACIF,qBAAMQ,KAAN,CAAWC,IAAX,CAAW,IAAX;;AACA,SAAKJ,WAAL,GAAmB,IAAnB;AACH,GAHM;;AAIX;AAAC,CAzFD,CAA6CZ,mBAA7C","names":["CameraInputsManager","FreeCameraKeyboardMoveInput","FreeCameraMouseInput","FreeCameraMouseWheelInput","FreeCameraTouchInput","__extends","camera","_super","_this","FreeCameraInputsManager","add","touchEnabled","_mouseInput","remove","_mouseWheelInput","clear","call"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Cameras/freeCameraInputsManager.ts"],"sourcesContent":["import type { FreeCamera } from \"./freeCamera\";\r\nimport { CameraInputsManager } from \"./cameraInputsManager\";\r\nimport { FreeCameraKeyboardMoveInput } from \"../Cameras/Inputs/freeCameraKeyboardMoveInput\";\r\nimport { FreeCameraMouseInput } from \"../Cameras/Inputs/freeCameraMouseInput\";\r\nimport { FreeCameraMouseWheelInput } from \"../Cameras/Inputs/freeCameraMouseWheelInput\";\r\nimport { FreeCameraTouchInput } from \"../Cameras/Inputs/freeCameraTouchInput\";\r\nimport type { Nullable } from \"../types\";\r\n\r\n/**\r\n * Default Inputs manager for the FreeCamera.\r\n * It groups all the default supported inputs for ease of use.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class FreeCameraInputsManager extends CameraInputsManager<FreeCamera> {\r\n    /**\r\n     * @hidden\r\n     */\r\n    public _mouseInput: Nullable<FreeCameraMouseInput> = null;\r\n    /**\r\n     * @hidden\r\n     */\r\n    public _mouseWheelInput: Nullable<FreeCameraMouseWheelInput> = null;\r\n    /**\r\n     * Instantiates a new FreeCameraInputsManager.\r\n     * @param camera Defines the camera the inputs belong to\r\n     */\r\n    constructor(camera: FreeCamera) {\r\n        super(camera);\r\n    }\r\n\r\n    /**\r\n     * Add keyboard input support to the input manager.\r\n     * @returns the current input manager\r\n     */\r\n    addKeyboard(): FreeCameraInputsManager {\r\n        this.add(new FreeCameraKeyboardMoveInput());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add mouse input support to the input manager.\r\n     * @param touchEnabled if the FreeCameraMouseInput should support touch (default: true)\r\n     * @returns the current input manager\r\n     */\r\n    addMouse(touchEnabled = true): FreeCameraInputsManager {\r\n        if (!this._mouseInput) {\r\n            this._mouseInput = new FreeCameraMouseInput(touchEnabled);\r\n            this.add(this._mouseInput);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes the mouse input support from the manager\r\n     * @returns the current input manager\r\n     */\r\n    removeMouse(): FreeCameraInputsManager {\r\n        if (this._mouseInput) {\r\n            this.remove(this._mouseInput);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add mouse wheel input support to the input manager.\r\n     * @returns the current input manager\r\n     */\r\n    addMouseWheel(): FreeCameraInputsManager {\r\n        if (!this._mouseWheelInput) {\r\n            this._mouseWheelInput = new FreeCameraMouseWheelInput();\r\n            this.add(this._mouseWheelInput);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes the mouse wheel input support from the manager\r\n     * @returns the current input manager\r\n     */\r\n    removeMouseWheel(): FreeCameraInputsManager {\r\n        if (this._mouseWheelInput) {\r\n            this.remove(this._mouseWheelInput);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add touch input support to the input manager.\r\n     * @returns the current input manager\r\n     */\r\n    addTouch(): FreeCameraInputsManager {\r\n        this.add(new FreeCameraTouchInput());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove all attached input methods from a camera\r\n     */\r\n    public clear(): void {\r\n        super.clear();\r\n        this._mouseInput = null;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}