{"ast":null,"code":"import \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport { __assign, __extends, __spreadArray } from \"tslib\";\nimport { WebXRFeatureName, WebXRFeaturesManager } from \"../webXRFeaturesManager.js\";\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature.js\";\nimport { WebXRLayerRenderTargetTextureProvider } from \"../webXRRenderTargetTextureProvider.js\";\nimport { WebXRLayerWrapper } from \"../webXRLayerWrapper.js\";\nimport { WebXRWebGLLayerWrapper } from \"../webXRWebGLLayer.js\";\n/**\n * Wraps xr composition layers.\n * @hidden\n */\n\nvar WebXRCompositionLayerWrapper =\n/** @class */\nfunction (_super) {\n  __extends(WebXRCompositionLayerWrapper, _super);\n\n  function WebXRCompositionLayerWrapper(getWidth, getHeight, layer, layerType, isMultiview, createRTTProvider) {\n    var _this = _super.call(this, getWidth, getHeight, layer, layerType, createRTTProvider) || this;\n\n    _this.getWidth = getWidth;\n    _this.getHeight = getHeight;\n    _this.layer = layer;\n    _this.layerType = layerType;\n    _this.isMultiview = isMultiview;\n    _this.createRTTProvider = createRTTProvider;\n    return _this;\n  }\n\n  return WebXRCompositionLayerWrapper;\n}(WebXRLayerWrapper);\n\nexport { WebXRCompositionLayerWrapper };\n/**\n * Provides render target textures and other important rendering information for a given XRCompositionLayer.\n * @hidden\n */\n\nvar WebXRCompositionLayerRenderTargetTextureProvider =\n/** @class */\nfunction (_super) {\n  __extends(WebXRCompositionLayerRenderTargetTextureProvider, _super);\n\n  function WebXRCompositionLayerRenderTargetTextureProvider(_xrSessionManager, _xrWebGLBinding, layerWrapper) {\n    var _this = _super.call(this, _xrSessionManager.scene, layerWrapper) || this;\n\n    _this._xrSessionManager = _xrSessionManager;\n    _this._xrWebGLBinding = _xrWebGLBinding;\n    _this.layerWrapper = layerWrapper;\n    _this._lastSubImages = new Map();\n    _this._compositionLayer = layerWrapper.layer;\n    return _this;\n  }\n\n  WebXRCompositionLayerRenderTargetTextureProvider.prototype._getRenderTargetForSubImage = function (subImage, eye) {\n    var lastSubImage = this._lastSubImages.get(eye);\n\n    var eyeIndex = eye == \"left\" ? 0 : 1;\n\n    if (!this._renderTargetTextures[eyeIndex] || (lastSubImage === null || lastSubImage === void 0 ? void 0 : lastSubImage.textureWidth) !== subImage.textureWidth || (lastSubImage === null || lastSubImage === void 0 ? void 0 : lastSubImage.textureHeight) != subImage.textureHeight) {\n      this._renderTargetTextures[eyeIndex] = this._createRenderTargetTexture(subImage.textureWidth, subImage.textureHeight, null, subImage.colorTexture, subImage.depthStencilTexture, this.layerWrapper.isMultiview);\n      this._framebufferDimensions = {\n        framebufferWidth: subImage.textureWidth,\n        framebufferHeight: subImage.textureHeight\n      };\n    }\n\n    this._lastSubImages.set(eye, subImage);\n\n    return this._renderTargetTextures[eyeIndex];\n  };\n\n  WebXRCompositionLayerRenderTargetTextureProvider.prototype._getSubImageForEye = function (eye) {\n    var currentFrame = this._xrSessionManager.currentFrame;\n\n    if (currentFrame) {\n      return this._xrWebGLBinding.getSubImage(this._compositionLayer, currentFrame, eye);\n    }\n\n    return null;\n  };\n\n  WebXRCompositionLayerRenderTargetTextureProvider.prototype.getRenderTargetTextureForEye = function (eye) {\n    var subImage = this._getSubImageForEye(eye);\n\n    if (subImage) {\n      return this._getRenderTargetForSubImage(subImage, eye);\n    }\n\n    return null;\n  };\n\n  WebXRCompositionLayerRenderTargetTextureProvider.prototype.getRenderTargetTextureForView = function (view) {\n    return this.getRenderTargetTextureForEye(view.eye);\n  };\n\n  WebXRCompositionLayerRenderTargetTextureProvider.prototype._setViewportForSubImage = function (viewport, subImage) {\n    var textureWidth = subImage.textureWidth;\n    var textureHeight = subImage.textureHeight;\n    var xrViewport = subImage.viewport;\n    viewport.x = xrViewport.x / textureWidth;\n    viewport.y = xrViewport.y / textureHeight;\n    viewport.width = xrViewport.width / textureWidth;\n    viewport.height = xrViewport.height / textureHeight;\n  };\n\n  WebXRCompositionLayerRenderTargetTextureProvider.prototype.trySetViewportForView = function (viewport, view) {\n    var subImage = this._lastSubImages.get(view.eye) || this._getSubImageForEye(view.eye);\n\n    if (subImage) {\n      this._setViewportForSubImage(viewport, subImage);\n\n      return true;\n    }\n\n    return false;\n  };\n\n  return WebXRCompositionLayerRenderTargetTextureProvider;\n}(WebXRLayerRenderTargetTextureProvider);\n/**\n * Wraps xr projection layers.\n * @hidden\n */\n\n\nvar WebXRProjectionLayerWrapper =\n/** @class */\nfunction (_super) {\n  __extends(WebXRProjectionLayerWrapper, _super);\n\n  function WebXRProjectionLayerWrapper(layer, isMultiview, xrGLBinding) {\n    var _this = _super.call(this, function () {\n      return layer.textureWidth;\n    }, function () {\n      return layer.textureHeight;\n    }, layer, \"XRProjectionLayer\", isMultiview, function (sessionManager) {\n      return new WebXRProjectionLayerRenderTargetTextureProvider(sessionManager, xrGLBinding, _this);\n    }) || this;\n\n    _this.layer = layer;\n    return _this;\n  }\n\n  return WebXRProjectionLayerWrapper;\n}(WebXRCompositionLayerWrapper);\n\nexport { WebXRProjectionLayerWrapper };\n/**\n * Provides render target textures and other important rendering information for a given XRProjectionLayer.\n * @hidden\n */\n\nvar WebXRProjectionLayerRenderTargetTextureProvider =\n/** @class */\nfunction (_super) {\n  __extends(WebXRProjectionLayerRenderTargetTextureProvider, _super);\n\n  function WebXRProjectionLayerRenderTargetTextureProvider(_xrSessionManager, _xrWebGLBinding, layerWrapper) {\n    var _this = _super.call(this, _xrSessionManager, _xrWebGLBinding, layerWrapper) || this;\n\n    _this.layerWrapper = layerWrapper;\n    _this._projectionLayer = layerWrapper.layer;\n    return _this;\n  }\n\n  WebXRProjectionLayerRenderTargetTextureProvider.prototype._getSubImageForView = function (view) {\n    return this._xrWebGLBinding.getViewSubImage(this._projectionLayer, view);\n  };\n\n  WebXRProjectionLayerRenderTargetTextureProvider.prototype.getRenderTargetTextureForView = function (view) {\n    return this._getRenderTargetForSubImage(this._getSubImageForView(view), view.eye);\n  };\n\n  WebXRProjectionLayerRenderTargetTextureProvider.prototype.getRenderTargetTextureForEye = function (eye) {\n    var lastSubImage = this._lastSubImages.get(eye);\n\n    if (lastSubImage) {\n      return this._getRenderTargetForSubImage(lastSubImage, eye);\n    }\n\n    return null;\n  };\n\n  WebXRProjectionLayerRenderTargetTextureProvider.prototype.trySetViewportForView = function (viewport, view) {\n    var subImage = this._lastSubImages.get(view.eye) || this._getSubImageForView(view);\n\n    if (subImage) {\n      this._setViewportForSubImage(viewport, subImage);\n\n      return true;\n    }\n\n    return false;\n  };\n\n  return WebXRProjectionLayerRenderTargetTextureProvider;\n}(WebXRCompositionLayerRenderTargetTextureProvider);\n\nvar defaultXRWebGLLayerInit = {};\nvar defaultXRProjectionLayerInit = {\n  textureType: \"texture\",\n  colorFormat: 0x1908\n  /* WebGLRenderingContext.RGBA */\n  ,\n  depthFormat: 0x88f0\n  /* WebGLRenderingContext.DEPTH24_STENCIL8 */\n  ,\n  scaleFactor: 1.0\n};\n/**\n * Exposes the WebXR Layers API.\n */\n\nvar WebXRLayers =\n/** @class */\nfunction (_super) {\n  __extends(WebXRLayers, _super);\n\n  function WebXRLayers(_xrSessionManager, _options) {\n    if (_options === void 0) {\n      _options = {};\n    }\n\n    var _this = _super.call(this, _xrSessionManager) || this;\n\n    _this._options = _options;\n    /**\n     * Already-created layers\n     */\n\n    _this._existingLayers = [];\n    _this.xrNativeFeatureName = \"layers\";\n    return _this;\n  }\n  /**\n   * Attach this feature.\n   * Will usually be called by the features manager.\n   *\n   * @returns true if successful.\n   */\n\n\n  WebXRLayers.prototype.attach = function () {\n    if (!_super.prototype.attach.call(this)) {\n      return false;\n    }\n\n    var engine = this._xrSessionManager.scene.getEngine();\n\n    this._glContext = engine._gl;\n    this._xrWebGLBinding = new XRWebGLBinding(this._xrSessionManager.session, this._glContext);\n    this._existingLayers = [];\n\n    var projectionLayerInit = __assign({}, defaultXRProjectionLayerInit);\n\n    var projectionLayerMultiview = this._options.preferMultiviewOnInit && engine.getCaps().multiview;\n\n    if (projectionLayerMultiview) {\n      projectionLayerInit.textureType = \"texture-array\";\n    }\n\n    this.addXRSessionLayer(this.createProjectionLayer(projectionLayerInit, projectionLayerMultiview));\n    return true;\n  };\n\n  WebXRLayers.prototype.detach = function () {\n    if (!_super.prototype.detach.call(this)) {\n      return false;\n    }\n\n    this._existingLayers.length = 0;\n    return true;\n  };\n  /**\n   * Creates a new XRWebGLLayer.\n   * @param params an object providing configuration options for the new XRWebGLLayer\n   * @returns the XRWebGLLayer\n   */\n\n\n  WebXRLayers.prototype.createXRWebGLLayer = function (params) {\n    if (params === void 0) {\n      params = defaultXRWebGLLayerInit;\n    }\n\n    var layer = new XRWebGLLayer(this._xrSessionManager.session, this._glContext, params);\n    return new WebXRWebGLLayerWrapper(layer);\n  };\n  /**\n   * Creates a new XRProjectionLayer.\n   * @param params an object providing configuration options for the new XRProjectionLayer.\n   * @param multiview whether the projection layer should render with multiview.\n   * @returns the projection layer\n   */\n\n\n  WebXRLayers.prototype.createProjectionLayer = function (params, multiview) {\n    if (params === void 0) {\n      params = defaultXRProjectionLayerInit;\n    }\n\n    if (multiview === void 0) {\n      multiview = false;\n    }\n\n    if (multiview && params.textureType !== \"texture-array\") {\n      throw new Error(\"Projection layers can only be made multiview if they use texture arrays. Set the textureType parameter to 'texture-array'.\");\n    } // TODO (rgerd): Support RTT's that are bound to sub-images in the texture array.\n\n\n    if (!multiview && params.textureType === \"texture-array\") {\n      throw new Error(\"We currently only support multiview rendering when the textureType parameter is set to 'texture-array'.\");\n    }\n\n    var projLayer = this._xrWebGLBinding.createProjectionLayer(params);\n\n    return new WebXRProjectionLayerWrapper(projLayer, multiview, this._xrWebGLBinding);\n  };\n  /**\n   * Add a new layer to the already-existing list of layers\n   * @param wrappedLayer the new layer to add to the existing ones\n   */\n\n\n  WebXRLayers.prototype.addXRSessionLayer = function (wrappedLayer) {\n    this.setXRSessionLayers(__spreadArray(__spreadArray([], this._existingLayers, true), [wrappedLayer], false));\n  };\n  /**\n   * Sets the layers to be used by the XR session.\n   * Note that you must call this function with any layers you wish to render to\n   * since it adds them to the XR session's render state\n   * (replacing any layers that were added in a previous call to setXRSessionLayers or updateRenderState).\n   * This method also sets up the session manager's render target texture provider\n   * as the first layer in the array, which feeds the WebXR camera(s) attached to the session.\n   * @param wrappedLayers An array of WebXRLayerWrapper, usually returned from the WebXRLayers createLayer functions.\n   */\n\n\n  WebXRLayers.prototype.setXRSessionLayers = function (wrappedLayers) {\n    this._existingLayers = wrappedLayers;\n\n    var renderStateInit = __assign({}, this._xrSessionManager.session.renderState); // Clear out the layer-related fields.\n\n\n    renderStateInit.baseLayer = undefined;\n    renderStateInit.layers = wrappedLayers.map(function (wrappedLayer) {\n      return wrappedLayer.layer;\n    });\n\n    this._xrSessionManager.updateRenderState(renderStateInit);\n\n    this._xrSessionManager._setBaseLayerWrapper(wrappedLayers.length > 0 ? wrappedLayers[0] : null);\n  };\n\n  WebXRLayers.prototype.isCompatible = function () {\n    // TODO (rgerd): Add native support.\n    return !this._xrSessionManager.isNative && typeof XRWebGLBinding !== \"undefined\" && !!XRWebGLBinding.prototype.createProjectionLayer;\n  };\n  /**\n   * Dispose this feature and all of the resources attached.\n   */\n\n\n  WebXRLayers.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n  };\n\n  WebXRLayers.prototype._onXRFrame = function (_xrFrame) {\n    /* empty */\n  };\n  /**\n   * The module's name\n   */\n\n\n  WebXRLayers.Name = WebXRFeatureName.LAYERS;\n  /**\n   * The (Babylon) version of this module.\n   * This is an integer representing the implementation version.\n   * This number does not correspond to the WebXR specs version\n   */\n\n  WebXRLayers.Version = 1;\n  return WebXRLayers;\n}(WebXRAbstractFeature);\n\nexport { WebXRLayers }; //register the plugin\n\nWebXRFeaturesManager.AddWebXRFeature(WebXRLayers.Name, function (xrSessionManager, options) {\n  return function () {\n    return new WebXRLayers(xrSessionManager, options);\n  };\n}, WebXRLayers.Version, false);","map":{"version":3,"mappings":"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","names":["WebXRFeatureName","WebXRFeaturesManager","WebXRAbstractFeature","WebXRLayerRenderTargetTextureProvider","WebXRLayerWrapper","WebXRWebGLLayerWrapper","__extends","getWidth","getHeight","layer","layerType","isMultiview","createRTTProvider","_super","_this","_xrSessionManager","_xrWebGLBinding","layerWrapper","scene","Map","_compositionLayer","WebXRCompositionLayerRenderTargetTextureProvider","subImage","eye","lastSubImage","_lastSubImages","get","eyeIndex","_renderTargetTextures","textureWidth","textureHeight","_createRenderTargetTexture","colorTexture","depthStencilTexture","_framebufferDimensions","framebufferWidth","framebufferHeight","set","currentFrame","getSubImage","_getSubImageForEye","_getRenderTargetForSubImage","view","getRenderTargetTextureForEye","viewport","xrViewport","x","y","width","height","_setViewportForSubImage","xrGLBinding","sessionManager","WebXRProjectionLayerRenderTargetTextureProvider","WebXRCompositionLayerWrapper","_projectionLayer","getViewSubImage","_getSubImageForView","defaultXRWebGLLayerInit","defaultXRProjectionLayerInit","textureType","colorFormat","depthFormat","scaleFactor","_options","xrNativeFeatureName","WebXRLayers","attach","call","engine","getEngine","_glContext","_gl","XRWebGLBinding","session","_existingLayers","projectionLayerInit","projectionLayerMultiview","preferMultiviewOnInit","getCaps","multiview","addXRSessionLayer","createProjectionLayer","detach","length","params","XRWebGLLayer","Error","projLayer","WebXRProjectionLayerWrapper","wrappedLayer","setXRSessionLayers","__spreadArray","wrappedLayers","renderStateInit","renderState","baseLayer","undefined","layers","map","updateRenderState","_setBaseLayerWrapper","isNative","prototype","dispose","_xrFrame","LAYERS","AddWebXRFeature","Name","xrSessionManager","options","Version"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/XR/features/WebXRLayers.ts"],"sourcesContent":["import { WebXRFeatureName, WebXRFeaturesManager } from \"../webXRFeaturesManager\";\r\nimport type { WebXRSessionManager } from \"../webXRSessionManager\";\r\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { WebXRLayerRenderTargetTextureProvider } from \"../webXRRenderTargetTextureProvider\";\r\nimport type { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture\";\r\nimport type { WebXRLayerType } from \"../webXRLayerWrapper\";\r\nimport { WebXRLayerWrapper } from \"../webXRLayerWrapper\";\r\nimport type { Viewport } from \"../../Maths/math.viewport\";\r\nimport { WebXRWebGLLayerWrapper } from \"../webXRWebGLLayer\";\r\n\r\n/**\r\n * Wraps xr composition layers.\r\n * @hidden\r\n */\r\nexport class WebXRCompositionLayerWrapper extends WebXRLayerWrapper {\r\n    constructor(\r\n        public getWidth: () => number,\r\n        public getHeight: () => number,\r\n        public readonly layer: XRCompositionLayer,\r\n        public readonly layerType: WebXRLayerType,\r\n        public readonly isMultiview: boolean,\r\n        public createRTTProvider: (xrSessionManager: WebXRSessionManager) => WebXRLayerRenderTargetTextureProvider\r\n    ) {\r\n        super(getWidth, getHeight, layer, layerType, createRTTProvider);\r\n    }\r\n}\r\n\r\n/**\r\n * Provides render target textures and other important rendering information for a given XRCompositionLayer.\r\n * @hidden\r\n */\r\nclass WebXRCompositionLayerRenderTargetTextureProvider extends WebXRLayerRenderTargetTextureProvider {\r\n    protected _lastSubImages = new Map<XREye, XRWebGLSubImage>();\r\n    private _compositionLayer: XRCompositionLayer;\r\n\r\n    constructor(\r\n        protected readonly _xrSessionManager: WebXRSessionManager,\r\n        protected readonly _xrWebGLBinding: XRWebGLBinding,\r\n        public readonly layerWrapper: WebXRCompositionLayerWrapper\r\n    ) {\r\n        super(_xrSessionManager.scene, layerWrapper);\r\n        this._compositionLayer = layerWrapper.layer;\r\n    }\r\n\r\n    protected _getRenderTargetForSubImage(subImage: XRWebGLSubImage, eye: XREye) {\r\n        const lastSubImage = this._lastSubImages.get(eye);\r\n        const eyeIndex = eye == \"left\" ? 0 : 1;\r\n        if (!this._renderTargetTextures[eyeIndex] || lastSubImage?.textureWidth !== subImage.textureWidth || lastSubImage?.textureHeight != subImage.textureHeight) {\r\n            this._renderTargetTextures[eyeIndex] = this._createRenderTargetTexture(\r\n                subImage.textureWidth,\r\n                subImage.textureHeight,\r\n                null,\r\n                subImage.colorTexture,\r\n                subImage.depthStencilTexture,\r\n                this.layerWrapper.isMultiview\r\n            );\r\n\r\n            this._framebufferDimensions = {\r\n                framebufferWidth: subImage.textureWidth,\r\n                framebufferHeight: subImage.textureHeight,\r\n            };\r\n        }\r\n\r\n        this._lastSubImages.set(eye, subImage);\r\n\r\n        return this._renderTargetTextures[eyeIndex];\r\n    }\r\n\r\n    private _getSubImageForEye(eye: XREye): Nullable<XRWebGLSubImage> {\r\n        const currentFrame = this._xrSessionManager.currentFrame;\r\n        if (currentFrame) {\r\n            return this._xrWebGLBinding.getSubImage(this._compositionLayer, currentFrame, eye);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public getRenderTargetTextureForEye(eye: XREye): Nullable<RenderTargetTexture> {\r\n        const subImage = this._getSubImageForEye(eye);\r\n        if (subImage) {\r\n            return this._getRenderTargetForSubImage(subImage, eye);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public getRenderTargetTextureForView(view: XRView): Nullable<RenderTargetTexture> {\r\n        return this.getRenderTargetTextureForEye(view.eye);\r\n    }\r\n\r\n    protected _setViewportForSubImage(viewport: Viewport, subImage: XRWebGLSubImage) {\r\n        const textureWidth = subImage.textureWidth;\r\n        const textureHeight = subImage.textureHeight;\r\n        const xrViewport = subImage.viewport;\r\n        viewport.x = xrViewport.x / textureWidth;\r\n        viewport.y = xrViewport.y / textureHeight;\r\n        viewport.width = xrViewport.width / textureWidth;\r\n        viewport.height = xrViewport.height / textureHeight;\r\n    }\r\n\r\n    public trySetViewportForView(viewport: Viewport, view: XRView): boolean {\r\n        const subImage = this._lastSubImages.get(view.eye) || this._getSubImageForEye(view.eye);\r\n        if (subImage) {\r\n            this._setViewportForSubImage(viewport, subImage);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Wraps xr projection layers.\r\n * @hidden\r\n */\r\nexport class WebXRProjectionLayerWrapper extends WebXRCompositionLayerWrapper {\r\n    constructor(public readonly layer: XRProjectionLayer, isMultiview: boolean, xrGLBinding: XRWebGLBinding) {\r\n        super(\r\n            () => layer.textureWidth,\r\n            () => layer.textureHeight,\r\n            layer,\r\n            \"XRProjectionLayer\",\r\n            isMultiview,\r\n            (sessionManager) => new WebXRProjectionLayerRenderTargetTextureProvider(sessionManager, xrGLBinding, this)\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Provides render target textures and other important rendering information for a given XRProjectionLayer.\r\n * @hidden\r\n */\r\nclass WebXRProjectionLayerRenderTargetTextureProvider extends WebXRCompositionLayerRenderTargetTextureProvider {\r\n    private readonly _projectionLayer: XRProjectionLayer;\r\n\r\n    constructor(_xrSessionManager: WebXRSessionManager, _xrWebGLBinding: XRWebGLBinding, public readonly layerWrapper: WebXRProjectionLayerWrapper) {\r\n        super(_xrSessionManager, _xrWebGLBinding, layerWrapper);\r\n        this._projectionLayer = layerWrapper.layer;\r\n    }\r\n\r\n    private _getSubImageForView(view: XRView): XRWebGLSubImage {\r\n        return this._xrWebGLBinding.getViewSubImage(this._projectionLayer, view);\r\n    }\r\n\r\n    public getRenderTargetTextureForView(view: XRView): Nullable<RenderTargetTexture> {\r\n        return this._getRenderTargetForSubImage(this._getSubImageForView(view), view.eye);\r\n    }\r\n\r\n    public getRenderTargetTextureForEye(eye: XREye): Nullable<RenderTargetTexture> {\r\n        const lastSubImage = this._lastSubImages.get(eye);\r\n        if (lastSubImage) {\r\n            return this._getRenderTargetForSubImage(lastSubImage, eye);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public trySetViewportForView(viewport: Viewport, view: XRView): boolean {\r\n        const subImage = this._lastSubImages.get(view.eye) || this._getSubImageForView(view);\r\n        if (subImage) {\r\n            this._setViewportForSubImage(viewport, subImage);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nconst defaultXRWebGLLayerInit: XRWebGLLayerInit = {};\r\n\r\nconst defaultXRProjectionLayerInit: XRProjectionLayerInit = {\r\n    textureType: \"texture\",\r\n    colorFormat: 0x1908 /* WebGLRenderingContext.RGBA */,\r\n    depthFormat: 0x88f0 /* WebGLRenderingContext.DEPTH24_STENCIL8 */,\r\n    scaleFactor: 1.0,\r\n};\r\n\r\n/**\r\n * Configuration options of the layers feature\r\n */\r\nexport interface IWebXRLayersOptions {\r\n    /**\r\n     * Whether to try initializing the base projection layer as a multiview render target, if multiview is supported.\r\n     * Defaults to false.\r\n     */\r\n    preferMultiviewOnInit?: boolean;\r\n}\r\n\r\n/**\r\n * Exposes the WebXR Layers API.\r\n */\r\nexport class WebXRLayers extends WebXRAbstractFeature {\r\n    /**\r\n     * The module's name\r\n     */\r\n    public static readonly Name = WebXRFeatureName.LAYERS;\r\n    /**\r\n     * The (Babylon) version of this module.\r\n     * This is an integer representing the implementation version.\r\n     * This number does not correspond to the WebXR specs version\r\n     */\r\n    public static readonly Version = 1;\r\n    /**\r\n     * Already-created layers\r\n     */\r\n    private _existingLayers: WebXRLayerWrapper[] = [];\r\n\r\n    private _glContext: WebGLRenderingContext | WebGL2RenderingContext;\r\n    private _xrWebGLBinding: XRWebGLBinding;\r\n\r\n    constructor(_xrSessionManager: WebXRSessionManager, private readonly _options: IWebXRLayersOptions = {}) {\r\n        super(_xrSessionManager);\r\n        this.xrNativeFeatureName = \"layers\";\r\n    }\r\n\r\n    /**\r\n     * Attach this feature.\r\n     * Will usually be called by the features manager.\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    public attach(): boolean {\r\n        if (!super.attach()) {\r\n            return false;\r\n        }\r\n\r\n        const engine = this._xrSessionManager.scene.getEngine();\r\n        this._glContext = engine._gl;\r\n        this._xrWebGLBinding = new XRWebGLBinding(this._xrSessionManager.session, this._glContext);\r\n        this._existingLayers = [];\r\n\r\n        const projectionLayerInit = { ...defaultXRProjectionLayerInit };\r\n        const projectionLayerMultiview = this._options.preferMultiviewOnInit && engine.getCaps().multiview;\r\n        if (projectionLayerMultiview) {\r\n            projectionLayerInit.textureType = \"texture-array\";\r\n        }\r\n        this.addXRSessionLayer(this.createProjectionLayer(projectionLayerInit, projectionLayerMultiview));\r\n\r\n        return true;\r\n    }\r\n\r\n    public detach(): boolean {\r\n        if (!super.detach()) {\r\n            return false;\r\n        }\r\n        this._existingLayers.length = 0;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates a new XRWebGLLayer.\r\n     * @param params an object providing configuration options for the new XRWebGLLayer\r\n     * @returns the XRWebGLLayer\r\n     */\r\n    public createXRWebGLLayer(params = defaultXRWebGLLayerInit): WebXRWebGLLayerWrapper {\r\n        const layer = new XRWebGLLayer(this._xrSessionManager.session, this._glContext, params);\r\n        return new WebXRWebGLLayerWrapper(layer);\r\n    }\r\n\r\n    /**\r\n     * Creates a new XRProjectionLayer.\r\n     * @param params an object providing configuration options for the new XRProjectionLayer.\r\n     * @param multiview whether the projection layer should render with multiview.\r\n     * @returns the projection layer\r\n     */\r\n    public createProjectionLayer(params = defaultXRProjectionLayerInit, multiview = false): WebXRProjectionLayerWrapper {\r\n        if (multiview && params.textureType !== \"texture-array\") {\r\n            throw new Error(\"Projection layers can only be made multiview if they use texture arrays. Set the textureType parameter to 'texture-array'.\");\r\n        }\r\n\r\n        // TODO (rgerd): Support RTT's that are bound to sub-images in the texture array.\r\n        if (!multiview && params.textureType === \"texture-array\") {\r\n            throw new Error(\"We currently only support multiview rendering when the textureType parameter is set to 'texture-array'.\");\r\n        }\r\n\r\n        const projLayer = this._xrWebGLBinding.createProjectionLayer(params);\r\n        return new WebXRProjectionLayerWrapper(projLayer, multiview, this._xrWebGLBinding);\r\n    }\r\n\r\n    /**\r\n     * Add a new layer to the already-existing list of layers\r\n     * @param wrappedLayer the new layer to add to the existing ones\r\n     */\r\n    public addXRSessionLayer(wrappedLayer: WebXRLayerWrapper) {\r\n        this.setXRSessionLayers([...this._existingLayers, wrappedLayer]);\r\n    }\r\n\r\n    /**\r\n     * Sets the layers to be used by the XR session.\r\n     * Note that you must call this function with any layers you wish to render to\r\n     * since it adds them to the XR session's render state\r\n     * (replacing any layers that were added in a previous call to setXRSessionLayers or updateRenderState).\r\n     * This method also sets up the session manager's render target texture provider\r\n     * as the first layer in the array, which feeds the WebXR camera(s) attached to the session.\r\n     * @param wrappedLayers An array of WebXRLayerWrapper, usually returned from the WebXRLayers createLayer functions.\r\n     */\r\n    public setXRSessionLayers(wrappedLayers: Array<WebXRLayerWrapper>): void {\r\n        this._existingLayers = wrappedLayers;\r\n        const renderStateInit: XRRenderStateInit = { ...this._xrSessionManager.session.renderState };\r\n        // Clear out the layer-related fields.\r\n        renderStateInit.baseLayer = undefined;\r\n        renderStateInit.layers = wrappedLayers.map((wrappedLayer) => wrappedLayer.layer);\r\n        this._xrSessionManager.updateRenderState(renderStateInit);\r\n        this._xrSessionManager._setBaseLayerWrapper(wrappedLayers.length > 0 ? wrappedLayers[0] : null);\r\n    }\r\n\r\n    public isCompatible(): boolean {\r\n        // TODO (rgerd): Add native support.\r\n        return !this._xrSessionManager.isNative && typeof XRWebGLBinding !== \"undefined\" && !!XRWebGLBinding.prototype.createProjectionLayer;\r\n    }\r\n\r\n    /**\r\n     * Dispose this feature and all of the resources attached.\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n    }\r\n\r\n    protected _onXRFrame(_xrFrame: XRFrame): void {\r\n        /* empty */\r\n    }\r\n}\r\n\r\n//register the plugin\r\nWebXRFeaturesManager.AddWebXRFeature(\r\n    WebXRLayers.Name,\r\n    (xrSessionManager, options) => {\r\n        return () => new WebXRLayers(xrSessionManager, options);\r\n    },\r\n    WebXRLayers.Version,\r\n    false\r\n);\r\n"]},"metadata":{},"sourceType":"module"}