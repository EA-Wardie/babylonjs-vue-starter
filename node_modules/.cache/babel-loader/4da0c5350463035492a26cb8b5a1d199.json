{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { Scene } from \"../scene.js\";\nimport { SceneComponentConstants } from \"../sceneComponent.js\";\nimport { SubSurfaceConfiguration } from \"./subSurfaceConfiguration.js\";\nimport { AbstractScene } from \"../abstractScene.js\";\nimport { Color3 } from \"../Maths/math.color.js\"; // Adds the parser to the scene parsers.\n\nAbstractScene.AddParser(SceneComponentConstants.NAME_SUBSURFACE, function (parsedData, scene) {\n  // Diffusion profiles\n  if (parsedData.ssDiffusionProfileColors !== undefined && parsedData.ssDiffusionProfileColors !== null) {\n    scene.enableSubSurfaceForPrePass();\n\n    if (scene.subSurfaceConfiguration) {\n      for (var index = 0, cache = parsedData.ssDiffusionProfileColors.length; index < cache; index++) {\n        var color = parsedData.ssDiffusionProfileColors[index];\n        scene.subSurfaceConfiguration.addDiffusionProfile(new Color3(color.r, color.g, color.b));\n      }\n    }\n  }\n});\nObject.defineProperty(Scene.prototype, \"subSurfaceConfiguration\", {\n  get: function get() {\n    return this._subSurfaceConfiguration;\n  },\n  set: function set(value) {\n    if (value) {\n      if (this.enablePrePassRenderer()) {\n        this._subSurfaceConfiguration = value;\n      }\n    }\n  },\n  enumerable: true,\n  configurable: true\n});\n\nScene.prototype.enableSubSurfaceForPrePass = function () {\n  if (this._subSurfaceConfiguration) {\n    return this._subSurfaceConfiguration;\n  }\n\n  var prePassRenderer = this.enablePrePassRenderer();\n\n  if (prePassRenderer) {\n    this._subSurfaceConfiguration = new SubSurfaceConfiguration(this);\n    prePassRenderer.addEffectConfiguration(this._subSurfaceConfiguration);\n    return this._subSurfaceConfiguration;\n  }\n\n  return null;\n};\n\nScene.prototype.disableSubSurfaceForPrePass = function () {\n  if (!this._subSurfaceConfiguration) {\n    return;\n  }\n\n  this._subSurfaceConfiguration.dispose();\n\n  this._subSurfaceConfiguration = null;\n};\n/**\n * Defines the Geometry Buffer scene component responsible to manage a G-Buffer useful\n * in several rendering techniques.\n */\n\n\nvar SubSurfaceSceneComponent =\n/** @class */\nfunction () {\n  /**\n   * Creates a new instance of the component for the given scene\n   * @param scene Defines the scene to register the component in\n   */\n  function SubSurfaceSceneComponent(scene) {\n    /**\n     * The component name helpful to identify the component in the list of scene components.\n     */\n    this.name = SceneComponentConstants.NAME_PREPASSRENDERER;\n    this.scene = scene;\n  }\n  /**\n   * Registers the component in a given scene\n   */\n\n\n  SubSurfaceSceneComponent.prototype.register = function () {};\n  /**\n   * Serializes the component data to the specified json object\n   * @param serializationObject The object to serialize to\n   */\n\n\n  SubSurfaceSceneComponent.prototype.serialize = function (serializationObject) {\n    if (!this.scene.subSurfaceConfiguration) {\n      return;\n    }\n\n    var ssDiffusionProfileColors = this.scene.subSurfaceConfiguration.ssDiffusionProfileColors;\n    serializationObject.ssDiffusionProfileColors = [];\n\n    for (var i = 0; i < ssDiffusionProfileColors.length; i++) {\n      serializationObject.ssDiffusionProfileColors.push({\n        r: ssDiffusionProfileColors[i].r,\n        g: ssDiffusionProfileColors[i].g,\n        b: ssDiffusionProfileColors[i].b\n      });\n    }\n  };\n  /**\n   * Adds all the elements from the container to the scene\n   */\n\n\n  SubSurfaceSceneComponent.prototype.addFromContainer = function () {// Nothing to do\n  };\n  /**\n   * Removes all the elements in the container from the scene\n   */\n\n\n  SubSurfaceSceneComponent.prototype.removeFromContainer = function () {\n    // Make sure nothing will be serialized\n    if (!this.scene.prePassRenderer) {\n      return;\n    }\n\n    if (this.scene.subSurfaceConfiguration) {\n      this.scene.subSurfaceConfiguration.clearAllDiffusionProfiles();\n    }\n  };\n  /**\n   * Rebuilds the elements related to this component in case of\n   * context lost for instance.\n   */\n\n\n  SubSurfaceSceneComponent.prototype.rebuild = function () {// Nothing to do for this component\n  };\n  /**\n   * Disposes the component and the associated resources\n   */\n\n\n  SubSurfaceSceneComponent.prototype.dispose = function () {// Nothing to do for this component\n  };\n\n  return SubSurfaceSceneComponent;\n}();\n\nexport { SubSurfaceSceneComponent };\n\nSubSurfaceConfiguration._SceneComponentInitialization = function (scene) {\n  // Register the G Buffer component to the scene.\n  var component = scene._getComponent(SceneComponentConstants.NAME_SUBSURFACE);\n\n  if (!component) {\n    component = new SubSurfaceSceneComponent(scene);\n\n    scene._addComponent(component);\n  }\n};","map":{"version":3,"mappings":"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","names":["Scene","SceneComponentConstants","SubSurfaceConfiguration","AbstractScene","Color3","AddParser","NAME_SUBSURFACE","parsedData","scene","ssDiffusionProfileColors","undefined","enableSubSurfaceForPrePass","subSurfaceConfiguration","index","cache","length","color","addDiffusionProfile","r","g","b","Object","defineProperty","prototype","get","_subSurfaceConfiguration","set","value","enablePrePassRenderer","enumerable","configurable","prePassRenderer","addEffectConfiguration","disableSubSurfaceForPrePass","dispose","NAME_PREPASSRENDERER","SubSurfaceSceneComponent","serializationObject","i","push","clearAllDiffusionProfiles","_SceneComponentInitialization","component","_getComponent","_addComponent"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Rendering/subSurfaceSceneComponent.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport type { ISceneSerializableComponent } from \"../sceneComponent\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\nimport { SubSurfaceConfiguration } from \"./subSurfaceConfiguration\";\r\nimport { AbstractScene } from \"../abstractScene\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\n\r\n// Adds the parser to the scene parsers.\r\nAbstractScene.AddParser(SceneComponentConstants.NAME_SUBSURFACE, (parsedData: any, scene: Scene) => {\r\n    // Diffusion profiles\r\n    if (parsedData.ssDiffusionProfileColors !== undefined && parsedData.ssDiffusionProfileColors !== null) {\r\n        scene.enableSubSurfaceForPrePass();\r\n        if (scene.subSurfaceConfiguration) {\r\n            for (let index = 0, cache = parsedData.ssDiffusionProfileColors.length; index < cache; index++) {\r\n                const color = parsedData.ssDiffusionProfileColors[index];\r\n                scene.subSurfaceConfiguration.addDiffusionProfile(new Color3(color.r, color.g, color.b));\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ndeclare module \"../abstractScene\" {\r\n    export interface AbstractScene {\r\n        /** @hidden (Backing field) */\r\n        _subSurfaceConfiguration: Nullable<SubSurfaceConfiguration>;\r\n\r\n        /**\r\n         * Gets or Sets the current prepass renderer associated to the scene.\r\n         */\r\n        subSurfaceConfiguration: Nullable<SubSurfaceConfiguration>;\r\n\r\n        /**\r\n         * Enables the subsurface effect for prepass\r\n         * @returns the SubSurfaceConfiguration\r\n         */\r\n        enableSubSurfaceForPrePass(): Nullable<SubSurfaceConfiguration>;\r\n\r\n        /**\r\n         * Disables the subsurface effect for prepass\r\n         */\r\n        disableSubSurfaceForPrePass(): void;\r\n    }\r\n}\r\n\r\nObject.defineProperty(Scene.prototype, \"subSurfaceConfiguration\", {\r\n    get: function (this: Scene) {\r\n        return this._subSurfaceConfiguration;\r\n    },\r\n    set: function (this: Scene, value: Nullable<SubSurfaceConfiguration>) {\r\n        if (value) {\r\n            if (this.enablePrePassRenderer()) {\r\n                this._subSurfaceConfiguration = value;\r\n            }\r\n        }\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nScene.prototype.enableSubSurfaceForPrePass = function (): Nullable<SubSurfaceConfiguration> {\r\n    if (this._subSurfaceConfiguration) {\r\n        return this._subSurfaceConfiguration;\r\n    }\r\n\r\n    const prePassRenderer = this.enablePrePassRenderer();\r\n    if (prePassRenderer) {\r\n        this._subSurfaceConfiguration = new SubSurfaceConfiguration(this);\r\n        prePassRenderer.addEffectConfiguration(this._subSurfaceConfiguration);\r\n        return this._subSurfaceConfiguration;\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nScene.prototype.disableSubSurfaceForPrePass = function (): void {\r\n    if (!this._subSurfaceConfiguration) {\r\n        return;\r\n    }\r\n\r\n    this._subSurfaceConfiguration.dispose();\r\n    this._subSurfaceConfiguration = null;\r\n};\r\n\r\n/**\r\n * Defines the Geometry Buffer scene component responsible to manage a G-Buffer useful\r\n * in several rendering techniques.\r\n */\r\nexport class SubSurfaceSceneComponent implements ISceneSerializableComponent {\r\n    /**\r\n     * The component name helpful to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_PREPASSRENDERER;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {}\r\n\r\n    /**\r\n     * Serializes the component data to the specified json object\r\n     * @param serializationObject The object to serialize to\r\n     */\r\n    public serialize(serializationObject: any): void {\r\n        if (!this.scene.subSurfaceConfiguration) {\r\n            return;\r\n        }\r\n\r\n        const ssDiffusionProfileColors = this.scene.subSurfaceConfiguration.ssDiffusionProfileColors;\r\n        serializationObject.ssDiffusionProfileColors = [];\r\n\r\n        for (let i = 0; i < ssDiffusionProfileColors.length; i++) {\r\n            serializationObject.ssDiffusionProfileColors.push({\r\n                r: ssDiffusionProfileColors[i].r,\r\n                g: ssDiffusionProfileColors[i].g,\r\n                b: ssDiffusionProfileColors[i].b,\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds all the elements from the container to the scene\r\n     */\r\n    public addFromContainer(): void {\r\n        // Nothing to do\r\n    }\r\n\r\n    /**\r\n     * Removes all the elements in the container from the scene\r\n     */\r\n    public removeFromContainer(): void {\r\n        // Make sure nothing will be serialized\r\n        if (!this.scene.prePassRenderer) {\r\n            return;\r\n        }\r\n\r\n        if (this.scene.subSurfaceConfiguration) {\r\n            this.scene.subSurfaceConfiguration.clearAllDiffusionProfiles();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        // Nothing to do for this component\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated resources\r\n     */\r\n    public dispose(): void {\r\n        // Nothing to do for this component\r\n    }\r\n}\r\n\r\nSubSurfaceConfiguration._SceneComponentInitialization = (scene: Scene) => {\r\n    // Register the G Buffer component to the scene.\r\n    let component = scene._getComponent(SceneComponentConstants.NAME_SUBSURFACE) as SubSurfaceSceneComponent;\r\n    if (!component) {\r\n        component = new SubSurfaceSceneComponent(scene);\r\n        scene._addComponent(component);\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}