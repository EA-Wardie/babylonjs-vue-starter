{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.function.name.js\";\n\n/* eslint-disable @typescript-eslint/naming-convention */\nimport * as WebGPUConstants from \"./webgpuConstants.js\";\nimport { VertexBuffer } from \"../../Buffers/buffer.js\";\nimport { WebGPUShaderProcessor } from \"./webgpuShaderProcessor.js\";\nimport { renderableTextureFormatToIndex, WebGPUTextureHelper } from \"./webgpuTextureHelper.js\";\nvar StatePosition;\n\n(function (StatePosition) {\n  StatePosition[StatePosition[\"StencilReadMask\"] = 0] = \"StencilReadMask\";\n  StatePosition[StatePosition[\"StencilWriteMask\"] = 1] = \"StencilWriteMask\"; //DepthBiasClamp = 1, // not used, so remove it to improve perf\n\n  StatePosition[StatePosition[\"DepthBias\"] = 2] = \"DepthBias\";\n  StatePosition[StatePosition[\"DepthBiasSlopeScale\"] = 3] = \"DepthBiasSlopeScale\";\n  StatePosition[StatePosition[\"DepthStencilState\"] = 4] = \"DepthStencilState\";\n  StatePosition[StatePosition[\"MRTAttachments1\"] = 5] = \"MRTAttachments1\";\n  StatePosition[StatePosition[\"MRTAttachments2\"] = 6] = \"MRTAttachments2\";\n  StatePosition[StatePosition[\"RasterizationState\"] = 7] = \"RasterizationState\";\n  StatePosition[StatePosition[\"ColorStates\"] = 8] = \"ColorStates\";\n  StatePosition[StatePosition[\"ShaderStage\"] = 9] = \"ShaderStage\";\n  StatePosition[StatePosition[\"TextureStage\"] = 10] = \"TextureStage\";\n  StatePosition[StatePosition[\"VertexState\"] = 11] = \"VertexState\";\n  StatePosition[StatePosition[\"NumStates\"] = 12] = \"NumStates\";\n})(StatePosition || (StatePosition = {}));\n\nvar alphaBlendFactorToIndex = {\n  0: 1,\n  1: 2,\n  0x0300: 3,\n  0x0301: 4,\n  0x0302: 5,\n  0x0303: 6,\n  0x0304: 7,\n  0x0305: 8,\n  0x0306: 9,\n  0x0307: 10,\n  0x0308: 11,\n  0x8001: 12,\n  0x8002: 13,\n  0x8003: 12,\n  0x8004: 13 // OneMinusBlendColor (alpha)\n\n};\nvar stencilOpToIndex = {\n  0x0000: 0,\n  0x1e00: 1,\n  0x1e01: 2,\n  0x1e02: 3,\n  0x1e03: 4,\n  0x150a: 5,\n  0x8507: 6,\n  0x8508: 7 // DECR_WRAP\n\n};\n/** @hidden */\n\nvar WebGPUCacheRenderPipeline =\n/** @class */\nfunction () {\n  function WebGPUCacheRenderPipeline(device, emptyVertexBuffer, useTextureStage) {\n    this.mrtTextureCount = 0;\n    this._device = device;\n    this._useTextureStage = useTextureStage;\n    this._states = new Array(30); // pre-allocate enough room so that no new allocation will take place afterwards\n\n    this._statesLength = 0;\n    this._stateDirtyLowestIndex = 0;\n    this._emptyVertexBuffer = emptyVertexBuffer;\n    this._mrtFormats = [];\n    this._parameter = {\n      token: undefined,\n      pipeline: null\n    };\n    this.disabled = false;\n    this.vertexBuffers = [];\n    this._kMaxVertexBufferStride = device.limits.maxVertexBufferArrayStride || 2048;\n    this.reset();\n  }\n\n  WebGPUCacheRenderPipeline.prototype.reset = function () {\n    this._isDirty = true;\n    this.vertexBuffers.length = 0;\n    this.setAlphaToCoverage(false);\n    this.resetDepthCullingState();\n    this.setClampDepth(false);\n    this.setDepthBias(0); //this.setDepthBiasClamp(0);\n\n    this._webgpuColorFormat = [WebGPUConstants.TextureFormat.BGRA8Unorm];\n    this.setColorFormat(WebGPUConstants.TextureFormat.BGRA8Unorm);\n    this.setMRT([]);\n    this.setAlphaBlendEnabled(false);\n    this.setAlphaBlendFactors([null, null, null, null], [null, null]);\n    this.setWriteMask(0xf);\n    this.setDepthStencilFormat(WebGPUConstants.TextureFormat.Depth24PlusStencil8);\n    this.setStencilEnabled(false);\n    this.resetStencilState();\n    this.setBuffers(null, null, null);\n\n    this._setTextureState(0);\n  };\n\n  Object.defineProperty(WebGPUCacheRenderPipeline.prototype, \"colorFormats\", {\n    get: function get() {\n      return this._mrtAttachments1 > 0 ? this._mrtFormats : this._webgpuColorFormat;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  WebGPUCacheRenderPipeline.prototype.getRenderPipeline = function (fillMode, effect, sampleCount, textureState) {\n    if (textureState === void 0) {\n      textureState = 0;\n    }\n\n    if (sampleCount > 1) {\n      // WebGPU only supports 1 or 4\n      sampleCount = 4;\n    }\n\n    if (this.disabled) {\n      var topology_1 = WebGPUCacheRenderPipeline._GetTopology(fillMode);\n\n      this._setVertexState(effect); // to fill this.vertexBuffers with correct data\n\n\n      this._parameter.pipeline = this._createRenderPipeline(effect, topology_1, sampleCount);\n      WebGPUCacheRenderPipeline.NumCacheMiss++;\n      WebGPUCacheRenderPipeline._NumPipelineCreationCurrentFrame++;\n      return this._parameter.pipeline;\n    }\n\n    this._setShaderStage(effect.uniqueId);\n\n    this._setRasterizationState(fillMode, sampleCount);\n\n    this._setColorStates();\n\n    this._setDepthStencilState();\n\n    this._setVertexState(effect);\n\n    this._setTextureState(textureState);\n\n    this.lastStateDirtyLowestIndex = this._stateDirtyLowestIndex;\n\n    if (!this._isDirty && this._parameter.pipeline) {\n      this._stateDirtyLowestIndex = this._statesLength;\n      WebGPUCacheRenderPipeline.NumCacheHitWithoutHash++;\n      return this._parameter.pipeline;\n    }\n\n    this._getRenderPipeline(this._parameter);\n\n    this._isDirty = false;\n    this._stateDirtyLowestIndex = this._statesLength;\n\n    if (this._parameter.pipeline) {\n      WebGPUCacheRenderPipeline.NumCacheHitWithHash++;\n      return this._parameter.pipeline;\n    }\n\n    var topology = WebGPUCacheRenderPipeline._GetTopology(fillMode);\n\n    this._parameter.pipeline = this._createRenderPipeline(effect, topology, sampleCount);\n\n    this._setRenderPipeline(this._parameter);\n\n    WebGPUCacheRenderPipeline.NumCacheMiss++;\n    WebGPUCacheRenderPipeline._NumPipelineCreationCurrentFrame++;\n    return this._parameter.pipeline;\n  };\n\n  WebGPUCacheRenderPipeline.prototype.endFrame = function () {\n    WebGPUCacheRenderPipeline.NumPipelineCreationLastFrame = WebGPUCacheRenderPipeline._NumPipelineCreationCurrentFrame;\n    WebGPUCacheRenderPipeline._NumPipelineCreationCurrentFrame = 0;\n  };\n\n  WebGPUCacheRenderPipeline.prototype.setAlphaToCoverage = function (enabled) {\n    this._alphaToCoverageEnabled = enabled;\n  };\n\n  WebGPUCacheRenderPipeline.prototype.setFrontFace = function (frontFace) {\n    this._frontFace = frontFace;\n  };\n\n  WebGPUCacheRenderPipeline.prototype.setCullEnabled = function (enabled) {\n    this._cullEnabled = enabled;\n  };\n\n  WebGPUCacheRenderPipeline.prototype.setCullFace = function (cullFace) {\n    this._cullFace = cullFace;\n  };\n\n  WebGPUCacheRenderPipeline.prototype.setClampDepth = function (clampDepth) {\n    this._clampDepth = clampDepth;\n  };\n\n  WebGPUCacheRenderPipeline.prototype.resetDepthCullingState = function () {\n    this.setDepthCullingState(false, 2, 1, 0, 0, true, true, 519);\n  };\n\n  WebGPUCacheRenderPipeline.prototype.setDepthCullingState = function (cullEnabled, frontFace, cullFace, zOffset, zOffsetUnits, depthTestEnabled, depthWriteEnabled, depthCompare) {\n    this._depthWriteEnabled = depthWriteEnabled;\n    this._depthTestEnabled = depthTestEnabled;\n    this._depthCompare = (depthCompare !== null && depthCompare !== void 0 ? depthCompare : 519) - 0x0200;\n    this._cullFace = cullFace;\n    this._cullEnabled = cullEnabled;\n    this._frontFace = frontFace;\n    this.setDepthBiasSlopeScale(zOffset);\n    this.setDepthBias(zOffsetUnits);\n  };\n\n  WebGPUCacheRenderPipeline.prototype.setDepthBias = function (depthBias) {\n    if (this._depthBias !== depthBias) {\n      this._depthBias = depthBias;\n      this._states[StatePosition.DepthBias] = depthBias;\n      this._isDirty = true;\n      this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.DepthBias);\n    }\n  };\n  /*public setDepthBiasClamp(depthBiasClamp: number): void {\n      if (this._depthBiasClamp !== depthBiasClamp) {\n          this._depthBiasClamp = depthBiasClamp;\n          this._states[StatePosition.DepthBiasClamp] = depthBiasClamp.toString();\n          this._isDirty = true;\n      }\n  }*/\n\n\n  WebGPUCacheRenderPipeline.prototype.setDepthBiasSlopeScale = function (depthBiasSlopeScale) {\n    if (this._depthBiasSlopeScale !== depthBiasSlopeScale) {\n      this._depthBiasSlopeScale = depthBiasSlopeScale;\n      this._states[StatePosition.DepthBiasSlopeScale] = depthBiasSlopeScale;\n      this._isDirty = true;\n      this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.DepthBiasSlopeScale);\n    }\n  };\n\n  WebGPUCacheRenderPipeline.prototype.setColorFormat = function (format) {\n    this._webgpuColorFormat[0] = format;\n    this._colorFormat = renderableTextureFormatToIndex[format];\n  };\n\n  WebGPUCacheRenderPipeline.prototype.setMRTAttachments = function (attachments) {\n    this.mrtAttachments = attachments;\n    var mask = 0;\n\n    for (var i = 0; i < attachments.length; ++i) {\n      if (attachments[i] !== 0) {\n        mask += 1 << i;\n      }\n    }\n\n    if (this._mrtEnabledMask !== mask) {\n      this._mrtEnabledMask = mask;\n      this._isDirty = true;\n      this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.MRTAttachments1);\n    }\n  };\n\n  WebGPUCacheRenderPipeline.prototype.setMRT = function (textureArray, textureCount) {\n    var _a;\n\n    textureCount = textureCount !== null && textureCount !== void 0 ? textureCount : textureArray.length;\n\n    if (textureCount > 10) {\n      // If we want more than 10 attachments we need to change this method (and the StatePosition enum) but 10 seems plenty: note that WebGPU only supports 8 at the time (2021/12/13)!\n      // As we need 39 different values we are using 6 bits to encode a texture format, meaning we can encode 5 texture formats in 32 bits\n      // We are using 2x32 bit values to handle 10 textures\n      throw \"Can't handle more than 10 attachments for a MRT in cache render pipeline!\";\n    }\n\n    this.mrtTextureArray = textureArray;\n    this.mrtTextureCount = textureCount;\n    this._mrtEnabledMask = 0xffff; // all textures are enabled at start (meaning we can write to them). Calls to setMRTAttachments may disable some\n\n    var bits = [0, 0];\n    var indexBits = 0,\n        mask = 0,\n        numRT = 0;\n\n    for (var i = 0; i < textureCount; ++i) {\n      var texture = textureArray[i];\n      var gpuWrapper = texture === null || texture === void 0 ? void 0 : texture._hardwareTexture;\n      this._mrtFormats[numRT] = (_a = gpuWrapper === null || gpuWrapper === void 0 ? void 0 : gpuWrapper.format) !== null && _a !== void 0 ? _a : this._webgpuColorFormat[0];\n      bits[indexBits] += renderableTextureFormatToIndex[this._mrtFormats[numRT]] << mask;\n      mask += 6;\n      numRT++;\n\n      if (mask >= 32) {\n        mask = 0;\n        indexBits++;\n      }\n    }\n\n    this._mrtFormats.length = numRT;\n\n    if (this._mrtAttachments1 !== bits[0] || this._mrtAttachments2 !== bits[1]) {\n      this._mrtAttachments1 = bits[0];\n      this._mrtAttachments2 = bits[1];\n      this._states[StatePosition.MRTAttachments1] = bits[0];\n      this._states[StatePosition.MRTAttachments2] = bits[1];\n      this._isDirty = true;\n      this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.MRTAttachments1);\n    }\n  };\n\n  WebGPUCacheRenderPipeline.prototype.setAlphaBlendEnabled = function (enabled) {\n    this._alphaBlendEnabled = enabled;\n  };\n\n  WebGPUCacheRenderPipeline.prototype.setAlphaBlendFactors = function (factors, operations) {\n    this._alphaBlendFuncParams = factors;\n    this._alphaBlendEqParams = operations;\n  };\n\n  WebGPUCacheRenderPipeline.prototype.setWriteMask = function (mask) {\n    this._writeMask = mask;\n  };\n\n  WebGPUCacheRenderPipeline.prototype.setDepthStencilFormat = function (format) {\n    this._webgpuDepthStencilFormat = format;\n    this._depthStencilFormat = format === undefined ? 0 : renderableTextureFormatToIndex[format];\n  };\n\n  WebGPUCacheRenderPipeline.prototype.setDepthTestEnabled = function (enabled) {\n    this._depthTestEnabled = enabled;\n  };\n\n  WebGPUCacheRenderPipeline.prototype.setDepthWriteEnabled = function (enabled) {\n    this._depthWriteEnabled = enabled;\n  };\n\n  WebGPUCacheRenderPipeline.prototype.setDepthCompare = function (func) {\n    this._depthCompare = (func !== null && func !== void 0 ? func : 519) - 0x0200;\n  };\n\n  WebGPUCacheRenderPipeline.prototype.setStencilEnabled = function (enabled) {\n    this._stencilEnabled = enabled;\n  };\n\n  WebGPUCacheRenderPipeline.prototype.setStencilCompare = function (func) {\n    this._stencilFrontCompare = (func !== null && func !== void 0 ? func : 519) - 0x0200;\n  };\n\n  WebGPUCacheRenderPipeline.prototype.setStencilDepthFailOp = function (op) {\n    this._stencilFrontDepthFailOp = op === null ? 1\n    /* KEEP */\n    : stencilOpToIndex[op];\n  };\n\n  WebGPUCacheRenderPipeline.prototype.setStencilPassOp = function (op) {\n    this._stencilFrontPassOp = op === null ? 2\n    /* REPLACE */\n    : stencilOpToIndex[op];\n  };\n\n  WebGPUCacheRenderPipeline.prototype.setStencilFailOp = function (op) {\n    this._stencilFrontFailOp = op === null ? 1\n    /* KEEP */\n    : stencilOpToIndex[op];\n  };\n\n  WebGPUCacheRenderPipeline.prototype.setStencilReadMask = function (mask) {\n    if (this._stencilReadMask !== mask) {\n      this._stencilReadMask = mask;\n      this._states[StatePosition.StencilReadMask] = mask;\n      this._isDirty = true;\n      this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.StencilReadMask);\n    }\n  };\n\n  WebGPUCacheRenderPipeline.prototype.setStencilWriteMask = function (mask) {\n    if (this._stencilWriteMask !== mask) {\n      this._stencilWriteMask = mask;\n      this._states[StatePosition.StencilWriteMask] = mask;\n      this._isDirty = true;\n      this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.StencilWriteMask);\n    }\n  };\n\n  WebGPUCacheRenderPipeline.prototype.resetStencilState = function () {\n    this.setStencilState(false, 519, 7680, 7681, 7680, 0xff, 0xff);\n  };\n\n  WebGPUCacheRenderPipeline.prototype.setStencilState = function (stencilEnabled, compare, depthFailOp, passOp, failOp, readMask, writeMask) {\n    this._stencilEnabled = stencilEnabled;\n    this._stencilFrontCompare = (compare !== null && compare !== void 0 ? compare : 519) - 0x0200;\n    this._stencilFrontDepthFailOp = depthFailOp === null ? 1\n    /* KEEP */\n    : stencilOpToIndex[depthFailOp];\n    this._stencilFrontPassOp = passOp === null ? 2\n    /* REPLACE */\n    : stencilOpToIndex[passOp];\n    this._stencilFrontFailOp = failOp === null ? 1\n    /* KEEP */\n    : stencilOpToIndex[failOp];\n    this.setStencilReadMask(readMask);\n    this.setStencilWriteMask(writeMask);\n  };\n\n  WebGPUCacheRenderPipeline.prototype.setBuffers = function (vertexBuffers, indexBuffer, overrideVertexBuffers) {\n    this._vertexBuffers = vertexBuffers;\n    this._overrideVertexBuffers = overrideVertexBuffers;\n    this._indexBuffer = indexBuffer;\n  };\n\n  WebGPUCacheRenderPipeline._GetTopology = function (fillMode) {\n    switch (fillMode) {\n      // Triangle views\n      case 0:\n        return WebGPUConstants.PrimitiveTopology.TriangleList;\n\n      case 2:\n        return WebGPUConstants.PrimitiveTopology.PointList;\n\n      case 1:\n        return WebGPUConstants.PrimitiveTopology.LineList;\n      // Draw modes\n\n      case 3:\n        return WebGPUConstants.PrimitiveTopology.PointList;\n\n      case 4:\n        return WebGPUConstants.PrimitiveTopology.LineList;\n\n      case 5:\n        // return this._gl.LINE_LOOP;\n        // TODO WEBGPU. Line Loop Mode Fallback at buffer load time.\n        throw \"LineLoop is an unsupported fillmode in WebGPU\";\n\n      case 6:\n        return WebGPUConstants.PrimitiveTopology.LineStrip;\n\n      case 7:\n        return WebGPUConstants.PrimitiveTopology.TriangleStrip;\n\n      case 8:\n        // return this._gl.TRIANGLE_FAN;\n        // TODO WEBGPU. Triangle Fan Mode Fallback at buffer load time.\n        throw \"TriangleFan is an unsupported fillmode in WebGPU\";\n\n      default:\n        return WebGPUConstants.PrimitiveTopology.TriangleList;\n    }\n  };\n\n  WebGPUCacheRenderPipeline._GetAphaBlendOperation = function (operation) {\n    switch (operation) {\n      case 32774:\n        return WebGPUConstants.BlendOperation.Add;\n\n      case 32778:\n        return WebGPUConstants.BlendOperation.Subtract;\n\n      case 32779:\n        return WebGPUConstants.BlendOperation.ReverseSubtract;\n\n      case 32775:\n        return WebGPUConstants.BlendOperation.Min;\n\n      case 32776:\n        return WebGPUConstants.BlendOperation.Max;\n\n      default:\n        return WebGPUConstants.BlendOperation.Add;\n    }\n  };\n\n  WebGPUCacheRenderPipeline._GetAphaBlendFactor = function (factor) {\n    switch (factor) {\n      case 0:\n        return WebGPUConstants.BlendFactor.Zero;\n\n      case 1:\n        return WebGPUConstants.BlendFactor.One;\n\n      case 768:\n        return WebGPUConstants.BlendFactor.Src;\n\n      case 769:\n        return WebGPUConstants.BlendFactor.OneMinusSrc;\n\n      case 770:\n        return WebGPUConstants.BlendFactor.SrcAlpha;\n\n      case 771:\n        return WebGPUConstants.BlendFactor.OneMinusSrcAlpha;\n\n      case 772:\n        return WebGPUConstants.BlendFactor.DstAlpha;\n\n      case 773:\n        return WebGPUConstants.BlendFactor.OneMinusDstAlpha;\n\n      case 774:\n        return WebGPUConstants.BlendFactor.Dst;\n\n      case 775:\n        return WebGPUConstants.BlendFactor.OneMinusDst;\n\n      case 776:\n        return WebGPUConstants.BlendFactor.SrcAlphaSaturated;\n\n      case 32769:\n        return WebGPUConstants.BlendFactor.Constant;\n\n      case 32770:\n        return WebGPUConstants.BlendFactor.OneMinusConstant;\n\n      case 32771:\n        return WebGPUConstants.BlendFactor.Constant;\n\n      case 32772:\n        return WebGPUConstants.BlendFactor.OneMinusConstant;\n\n      default:\n        return WebGPUConstants.BlendFactor.One;\n    }\n  };\n\n  WebGPUCacheRenderPipeline._GetCompareFunction = function (compareFunction) {\n    switch (compareFunction) {\n      case 0:\n        // NEVER\n        return WebGPUConstants.CompareFunction.Never;\n\n      case 1:\n        // LESS\n        return WebGPUConstants.CompareFunction.Less;\n\n      case 2:\n        // EQUAL\n        return WebGPUConstants.CompareFunction.Equal;\n\n      case 3:\n        // LEQUAL\n        return WebGPUConstants.CompareFunction.LessEqual;\n\n      case 4:\n        // GREATER\n        return WebGPUConstants.CompareFunction.Greater;\n\n      case 5:\n        // NOTEQUAL\n        return WebGPUConstants.CompareFunction.NotEqual;\n\n      case 6:\n        // GEQUAL\n        return WebGPUConstants.CompareFunction.GreaterEqual;\n\n      case 7:\n        // ALWAYS\n        return WebGPUConstants.CompareFunction.Always;\n    }\n\n    return WebGPUConstants.CompareFunction.Never;\n  };\n\n  WebGPUCacheRenderPipeline._GetStencilOpFunction = function (operation) {\n    switch (operation) {\n      case 0:\n        return WebGPUConstants.StencilOperation.Zero;\n\n      case 1:\n        return WebGPUConstants.StencilOperation.Keep;\n\n      case 2:\n        return WebGPUConstants.StencilOperation.Replace;\n\n      case 3:\n        return WebGPUConstants.StencilOperation.IncrementClamp;\n\n      case 4:\n        return WebGPUConstants.StencilOperation.DecrementClamp;\n\n      case 5:\n        return WebGPUConstants.StencilOperation.Invert;\n\n      case 6:\n        return WebGPUConstants.StencilOperation.IncrementWrap;\n\n      case 7:\n        return WebGPUConstants.StencilOperation.DecrementWrap;\n    }\n\n    return WebGPUConstants.StencilOperation.Keep;\n  };\n\n  WebGPUCacheRenderPipeline._GetVertexInputDescriptorFormat = function (vertexBuffer) {\n    var type = vertexBuffer.type;\n    var normalized = vertexBuffer.normalized;\n    var size = vertexBuffer.getSize();\n\n    switch (type) {\n      case VertexBuffer.BYTE:\n        switch (size) {\n          case 1:\n          case 2:\n            return normalized ? WebGPUConstants.VertexFormat.Snorm8x2 : WebGPUConstants.VertexFormat.Sint8x2;\n\n          case 3:\n          case 4:\n            return normalized ? WebGPUConstants.VertexFormat.Snorm8x4 : WebGPUConstants.VertexFormat.Sint8x4;\n        }\n\n        break;\n\n      case VertexBuffer.UNSIGNED_BYTE:\n        switch (size) {\n          case 1:\n          case 2:\n            return normalized ? WebGPUConstants.VertexFormat.Unorm8x2 : WebGPUConstants.VertexFormat.Uint8x2;\n\n          case 3:\n          case 4:\n            return normalized ? WebGPUConstants.VertexFormat.Unorm8x4 : WebGPUConstants.VertexFormat.Uint8x4;\n        }\n\n        break;\n\n      case VertexBuffer.SHORT:\n        switch (size) {\n          case 1:\n          case 2:\n            return normalized ? WebGPUConstants.VertexFormat.Snorm16x2 : WebGPUConstants.VertexFormat.Sint16x2;\n\n          case 3:\n          case 4:\n            return normalized ? WebGPUConstants.VertexFormat.Snorm16x4 : WebGPUConstants.VertexFormat.Sint16x4;\n        }\n\n        break;\n\n      case VertexBuffer.UNSIGNED_SHORT:\n        switch (size) {\n          case 1:\n          case 2:\n            return normalized ? WebGPUConstants.VertexFormat.Unorm16x2 : WebGPUConstants.VertexFormat.Uint16x2;\n\n          case 3:\n          case 4:\n            return normalized ? WebGPUConstants.VertexFormat.Unorm16x4 : WebGPUConstants.VertexFormat.Uint16x4;\n        }\n\n        break;\n\n      case VertexBuffer.INT:\n        switch (size) {\n          case 1:\n            return WebGPUConstants.VertexFormat.Sint32;\n\n          case 2:\n            return WebGPUConstants.VertexFormat.Sint32x2;\n\n          case 3:\n            return WebGPUConstants.VertexFormat.Sint32x3;\n\n          case 4:\n            return WebGPUConstants.VertexFormat.Sint32x4;\n        }\n\n        break;\n\n      case VertexBuffer.UNSIGNED_INT:\n        switch (size) {\n          case 1:\n            return WebGPUConstants.VertexFormat.Uint32;\n\n          case 2:\n            return WebGPUConstants.VertexFormat.Uint32x2;\n\n          case 3:\n            return WebGPUConstants.VertexFormat.Uint32x3;\n\n          case 4:\n            return WebGPUConstants.VertexFormat.Uint32x4;\n        }\n\n        break;\n\n      case VertexBuffer.FLOAT:\n        switch (size) {\n          case 1:\n            return WebGPUConstants.VertexFormat.Float32;\n\n          case 2:\n            return WebGPUConstants.VertexFormat.Float32x2;\n\n          case 3:\n            return WebGPUConstants.VertexFormat.Float32x3;\n\n          case 4:\n            return WebGPUConstants.VertexFormat.Float32x4;\n        }\n\n        break;\n    }\n\n    throw new Error(\"Invalid Format '\".concat(vertexBuffer.getKind(), \"' - type=\").concat(type, \", normalized=\").concat(normalized, \", size=\").concat(size));\n  };\n\n  WebGPUCacheRenderPipeline.prototype._getAphaBlendState = function () {\n    if (!this._alphaBlendEnabled) {\n      return null;\n    }\n\n    return {\n      srcFactor: WebGPUCacheRenderPipeline._GetAphaBlendFactor(this._alphaBlendFuncParams[2]),\n      dstFactor: WebGPUCacheRenderPipeline._GetAphaBlendFactor(this._alphaBlendFuncParams[3]),\n      operation: WebGPUCacheRenderPipeline._GetAphaBlendOperation(this._alphaBlendEqParams[1])\n    };\n  };\n\n  WebGPUCacheRenderPipeline.prototype._getColorBlendState = function () {\n    if (!this._alphaBlendEnabled) {\n      return null;\n    }\n\n    return {\n      srcFactor: WebGPUCacheRenderPipeline._GetAphaBlendFactor(this._alphaBlendFuncParams[0]),\n      dstFactor: WebGPUCacheRenderPipeline._GetAphaBlendFactor(this._alphaBlendFuncParams[1]),\n      operation: WebGPUCacheRenderPipeline._GetAphaBlendOperation(this._alphaBlendEqParams[0])\n    };\n  };\n\n  WebGPUCacheRenderPipeline.prototype._setShaderStage = function (id) {\n    if (this._shaderId !== id) {\n      this._shaderId = id;\n      this._states[StatePosition.ShaderStage] = id;\n      this._isDirty = true;\n      this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.ShaderStage);\n    }\n  };\n\n  WebGPUCacheRenderPipeline.prototype._setRasterizationState = function (topology, sampleCount) {\n    var frontFace = this._frontFace;\n    var cullMode = this._cullEnabled ? this._cullFace : 0;\n    var clampDepth = this._clampDepth ? 1 : 0;\n    var alphaToCoverage = this._alphaToCoverageEnabled ? 1 : 0;\n    var rasterizationState = frontFace - 1 + (cullMode << 1) + (clampDepth << 3) + (alphaToCoverage << 4) + (topology << 5) + (sampleCount << 8);\n\n    if (this._rasterizationState !== rasterizationState) {\n      this._rasterizationState = rasterizationState;\n      this._states[StatePosition.RasterizationState] = this._rasterizationState;\n      this._isDirty = true;\n      this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.RasterizationState);\n    }\n  };\n\n  WebGPUCacheRenderPipeline.prototype._setColorStates = function () {\n    var colorStates = ((this._writeMask ? 1 : 0) << 22) + (this._colorFormat << 23) + ((this._depthWriteEnabled ? 1 : 0) << 29); // this state has been moved from depthStencilState here because alpha and depth are related (generally when alpha is on, depth write is off and the other way around)\n\n    if (this._alphaBlendEnabled) {\n      colorStates += ((this._alphaBlendFuncParams[0] === null ? 2 : alphaBlendFactorToIndex[this._alphaBlendFuncParams[0]]) << 0) + ((this._alphaBlendFuncParams[1] === null ? 2 : alphaBlendFactorToIndex[this._alphaBlendFuncParams[1]]) << 4) + ((this._alphaBlendFuncParams[2] === null ? 2 : alphaBlendFactorToIndex[this._alphaBlendFuncParams[2]]) << 8) + ((this._alphaBlendFuncParams[3] === null ? 2 : alphaBlendFactorToIndex[this._alphaBlendFuncParams[3]]) << 12) + ((this._alphaBlendEqParams[0] === null ? 1 : this._alphaBlendEqParams[0] - 0x8005) << 16) + ((this._alphaBlendEqParams[1] === null ? 1 : this._alphaBlendEqParams[1] - 0x8005) << 19);\n    }\n\n    if (colorStates !== this._colorStates) {\n      this._colorStates = colorStates;\n      this._states[StatePosition.ColorStates] = this._colorStates;\n      this._isDirty = true;\n      this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.ColorStates);\n    }\n  };\n\n  WebGPUCacheRenderPipeline.prototype._setDepthStencilState = function () {\n    var stencilState = !this._stencilEnabled ? 7\n    /* ALWAYS */\n    + (1\n    /* KEEP */\n    << 3) + (1\n    /* KEEP */\n    << 6) + (1\n    /* KEEP */\n    << 9) : this._stencilFrontCompare + (this._stencilFrontDepthFailOp << 3) + (this._stencilFrontPassOp << 6) + (this._stencilFrontFailOp << 9);\n    var depthStencilState = this._depthStencilFormat + ((this._depthTestEnabled ? this._depthCompare : 7\n    /* ALWAYS */\n    ) << 6) + (stencilState << 10); // stencil front - stencil back is the same\n\n    if (this._depthStencilState !== depthStencilState) {\n      this._depthStencilState = depthStencilState;\n      this._states[StatePosition.DepthStencilState] = this._depthStencilState;\n      this._isDirty = true;\n      this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.DepthStencilState);\n    }\n  };\n\n  WebGPUCacheRenderPipeline.prototype._setVertexState = function (effect) {\n    var _a, _b;\n\n    var currStateLen = this._statesLength;\n    var newNumStates = StatePosition.VertexState;\n    var webgpuPipelineContext = effect._pipelineContext;\n    var attributes = webgpuPipelineContext.shaderProcessingContext.attributeNamesFromEffect;\n    var locations = webgpuPipelineContext.shaderProcessingContext.attributeLocationsFromEffect;\n    var currentGPUBuffer;\n    var numVertexBuffers = 0;\n\n    for (var index = 0; index < attributes.length; index++) {\n      var location_1 = locations[index];\n      var vertexBuffer = (_a = this._overrideVertexBuffers && this._overrideVertexBuffers[attributes[index]]) !== null && _a !== void 0 ? _a : this._vertexBuffers[attributes[index]];\n\n      if (!vertexBuffer) {\n        // In WebGL it's valid to not bind a vertex buffer to an attribute, but it's not valid in WebGPU\n        // So we must bind a dummy buffer when we are not given one for a specific attribute\n        vertexBuffer = this._emptyVertexBuffer;\n      }\n\n      var buffer = (_b = vertexBuffer.getBuffer()) === null || _b === void 0 ? void 0 : _b.underlyingResource; // We optimize usage of GPUVertexBufferLayout: we will create a single GPUVertexBufferLayout for all the attributes which follow each other and which use the same GPU buffer\n      // However, there are some constraints in the attribute.offset value range, so we must check for them before being able to reuse the same GPUVertexBufferLayout\n      // See _getVertexInputDescriptor() below\n\n      if (vertexBuffer._validOffsetRange === undefined) {\n        var offset = vertexBuffer.byteOffset;\n        var formatSize = vertexBuffer.getSize(true);\n        var byteStride = vertexBuffer.byteStride;\n        vertexBuffer._validOffsetRange = offset <= this._kMaxVertexBufferStride - formatSize && (byteStride === 0 || offset + formatSize <= byteStride);\n      }\n\n      if (!(currentGPUBuffer && currentGPUBuffer === buffer && vertexBuffer._validOffsetRange)) {\n        // we can't combine the previous vertexBuffer with the current one\n        this.vertexBuffers[numVertexBuffers++] = vertexBuffer;\n        currentGPUBuffer = vertexBuffer._validOffsetRange ? buffer : null;\n      }\n\n      var vid = vertexBuffer.hashCode + (location_1 << 7);\n      this._isDirty = this._isDirty || this._states[newNumStates] !== vid;\n      this._states[newNumStates++] = vid;\n    }\n\n    this.vertexBuffers.length = numVertexBuffers;\n    this._statesLength = newNumStates;\n    this._isDirty = this._isDirty || newNumStates !== currStateLen;\n\n    if (this._isDirty) {\n      this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.VertexState);\n    }\n  };\n\n  WebGPUCacheRenderPipeline.prototype._setTextureState = function (textureState) {\n    if (this._textureState !== textureState) {\n      this._textureState = textureState;\n      this._states[StatePosition.TextureStage] = this._textureState;\n      this._isDirty = true;\n      this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.TextureStage);\n    }\n  };\n\n  WebGPUCacheRenderPipeline.prototype._createPipelineLayout = function (webgpuPipelineContext) {\n    if (this._useTextureStage) {\n      return this._createPipelineLayoutWithTextureStage(webgpuPipelineContext);\n    }\n\n    var bindGroupLayouts = [];\n    var bindGroupLayoutEntries = webgpuPipelineContext.shaderProcessingContext.bindGroupLayoutEntries;\n\n    for (var i = 0; i < bindGroupLayoutEntries.length; i++) {\n      var setDefinition = bindGroupLayoutEntries[i];\n      bindGroupLayouts[i] = this._device.createBindGroupLayout({\n        entries: setDefinition\n      });\n    }\n\n    webgpuPipelineContext.bindGroupLayouts = bindGroupLayouts;\n    return this._device.createPipelineLayout({\n      bindGroupLayouts: bindGroupLayouts\n    });\n  };\n\n  WebGPUCacheRenderPipeline.prototype._createPipelineLayoutWithTextureStage = function (webgpuPipelineContext) {\n    var _a;\n\n    var shaderProcessingContext = webgpuPipelineContext.shaderProcessingContext;\n    var bindGroupLayoutEntries = shaderProcessingContext.bindGroupLayoutEntries;\n    var bitVal = 1;\n\n    for (var i = 0; i < bindGroupLayoutEntries.length; i++) {\n      var setDefinition = bindGroupLayoutEntries[i];\n\n      for (var j = 0; j < setDefinition.length; j++) {\n        var entry = bindGroupLayoutEntries[i][j];\n\n        if (entry.texture) {\n          var name_1 = shaderProcessingContext.bindGroupLayoutEntryInfo[i][entry.binding].name;\n          var textureInfo = shaderProcessingContext.availableTextures[name_1];\n          var samplerInfo = textureInfo.autoBindSampler ? shaderProcessingContext.availableSamplers[name_1 + WebGPUShaderProcessor.AutoSamplerSuffix] : null;\n          var sampleType = textureInfo.sampleType;\n          var samplerType = (_a = samplerInfo === null || samplerInfo === void 0 ? void 0 : samplerInfo.type) !== null && _a !== void 0 ? _a : WebGPUConstants.SamplerBindingType.Filtering;\n\n          if (this._textureState & bitVal && sampleType !== WebGPUConstants.TextureSampleType.Depth) {\n            // The texture is a 32 bits float texture but the system does not support linear filtering for them:\n            // we set the sampler to \"non-filtering\" and the texture sample type to \"unfilterable-float\"\n            if (textureInfo.autoBindSampler) {\n              samplerType = WebGPUConstants.SamplerBindingType.NonFiltering;\n            }\n\n            sampleType = WebGPUConstants.TextureSampleType.UnfilterableFloat;\n          }\n\n          entry.texture.sampleType = sampleType;\n\n          if (samplerInfo) {\n            var binding = shaderProcessingContext.bindGroupLayoutEntryInfo[samplerInfo.binding.groupIndex][samplerInfo.binding.bindingIndex].index;\n            bindGroupLayoutEntries[samplerInfo.binding.groupIndex][binding].sampler.type = samplerType;\n          }\n\n          bitVal = bitVal << 1;\n        }\n      }\n    }\n\n    var bindGroupLayouts = [];\n\n    for (var i = 0; i < bindGroupLayoutEntries.length; ++i) {\n      bindGroupLayouts[i] = this._device.createBindGroupLayout({\n        entries: bindGroupLayoutEntries[i]\n      });\n    }\n\n    webgpuPipelineContext.bindGroupLayouts = bindGroupLayouts;\n    return this._device.createPipelineLayout({\n      bindGroupLayouts: bindGroupLayouts\n    });\n  };\n\n  WebGPUCacheRenderPipeline.prototype._getVertexInputDescriptor = function (effect) {\n    var _a, _b;\n\n    var descriptors = [];\n    var webgpuPipelineContext = effect._pipelineContext;\n    var attributes = webgpuPipelineContext.shaderProcessingContext.attributeNamesFromEffect;\n    var locations = webgpuPipelineContext.shaderProcessingContext.attributeLocationsFromEffect;\n    var currentGPUBuffer;\n    var currentGPUAttributes;\n\n    for (var index = 0; index < attributes.length; index++) {\n      var location_2 = locations[index];\n      var vertexBuffer = (_a = this._overrideVertexBuffers && this._overrideVertexBuffers[attributes[index]]) !== null && _a !== void 0 ? _a : this._vertexBuffers[attributes[index]];\n\n      if (!vertexBuffer) {\n        // In WebGL it's valid to not bind a vertex buffer to an attribute, but it's not valid in WebGPU\n        // So we must bind a dummy buffer when we are not given one for a specific attribute\n        vertexBuffer = this._emptyVertexBuffer;\n      }\n\n      var buffer = (_b = vertexBuffer.getBuffer()) === null || _b === void 0 ? void 0 : _b.underlyingResource; // We reuse the same GPUVertexBufferLayout for all attributes that use the same underlying GPU buffer (and for attributes that follow each other in the attributes array)\n\n      var offset = vertexBuffer.byteOffset;\n      var invalidOffsetRange = !vertexBuffer._validOffsetRange;\n\n      if (!(currentGPUBuffer && currentGPUAttributes && currentGPUBuffer === buffer) || invalidOffsetRange) {\n        var vertexBufferDescriptor = {\n          arrayStride: vertexBuffer.byteStride,\n          stepMode: vertexBuffer.getIsInstanced() ? WebGPUConstants.InputStepMode.Instance : WebGPUConstants.InputStepMode.Vertex,\n          attributes: []\n        };\n        descriptors.push(vertexBufferDescriptor);\n        currentGPUAttributes = vertexBufferDescriptor.attributes;\n\n        if (invalidOffsetRange) {\n          offset = 0; // the offset will be set directly in the setVertexBuffer call\n\n          buffer = null; // buffer can't be reused\n        }\n      }\n\n      currentGPUAttributes.push({\n        shaderLocation: location_2,\n        offset: offset,\n        format: WebGPUCacheRenderPipeline._GetVertexInputDescriptorFormat(vertexBuffer)\n      });\n      currentGPUBuffer = buffer;\n    }\n\n    return descriptors;\n  };\n\n  WebGPUCacheRenderPipeline.prototype._createRenderPipeline = function (effect, topology, sampleCount) {\n    var webgpuPipelineContext = effect._pipelineContext;\n\n    var inputStateDescriptor = this._getVertexInputDescriptor(effect);\n\n    var pipelineLayout = this._createPipelineLayout(webgpuPipelineContext);\n\n    var colorStates = [];\n\n    var alphaBlend = this._getAphaBlendState();\n\n    var colorBlend = this._getColorBlendState();\n\n    if (this._mrtAttachments1 > 0) {\n      for (var i = 0; i < this._mrtFormats.length; ++i) {\n        var descr = {\n          format: this._mrtFormats[i],\n          writeMask: (this._mrtEnabledMask & 1 << i) !== 0 ? this._writeMask : 0\n        };\n\n        if (alphaBlend && colorBlend) {\n          descr.blend = {\n            alpha: alphaBlend,\n            color: colorBlend\n          };\n        }\n\n        colorStates.push(descr);\n      }\n    } else {\n      var descr = {\n        format: this._webgpuColorFormat[0],\n        writeMask: this._writeMask\n      };\n\n      if (alphaBlend && colorBlend) {\n        descr.blend = {\n          alpha: alphaBlend,\n          color: colorBlend\n        };\n      }\n\n      colorStates.push(descr);\n    }\n\n    var stencilFrontBack = {\n      compare: WebGPUCacheRenderPipeline._GetCompareFunction(this._stencilEnabled ? this._stencilFrontCompare : 7\n      /* ALWAYS */\n      ),\n      depthFailOp: WebGPUCacheRenderPipeline._GetStencilOpFunction(this._stencilEnabled ? this._stencilFrontDepthFailOp : 1\n      /* KEEP */\n      ),\n      failOp: WebGPUCacheRenderPipeline._GetStencilOpFunction(this._stencilEnabled ? this._stencilFrontFailOp : 1\n      /* KEEP */\n      ),\n      passOp: WebGPUCacheRenderPipeline._GetStencilOpFunction(this._stencilEnabled ? this._stencilFrontPassOp : 1\n      /* KEEP */\n      )\n    };\n    var stripIndexFormat = undefined;\n\n    if (topology === WebGPUConstants.PrimitiveTopology.LineStrip || topology === WebGPUConstants.PrimitiveTopology.TriangleStrip) {\n      stripIndexFormat = !this._indexBuffer || this._indexBuffer.is32Bits ? WebGPUConstants.IndexFormat.Uint32 : WebGPUConstants.IndexFormat.Uint16;\n    }\n\n    var depthStencilFormatHasStencil = this._webgpuDepthStencilFormat ? WebGPUTextureHelper.HasStencilAspect(this._webgpuDepthStencilFormat) : false;\n    return this._device.createRenderPipeline({\n      layout: pipelineLayout,\n      vertex: {\n        module: webgpuPipelineContext.stages.vertexStage.module,\n        entryPoint: webgpuPipelineContext.stages.vertexStage.entryPoint,\n        buffers: inputStateDescriptor\n      },\n      primitive: {\n        topology: topology,\n        stripIndexFormat: stripIndexFormat,\n        frontFace: this._frontFace === 1 ? WebGPUConstants.FrontFace.CCW : WebGPUConstants.FrontFace.CW,\n        cullMode: !this._cullEnabled ? WebGPUConstants.CullMode.None : this._cullFace === 2 ? WebGPUConstants.CullMode.Front : WebGPUConstants.CullMode.Back\n      },\n      fragment: !webgpuPipelineContext.stages.fragmentStage ? undefined : {\n        module: webgpuPipelineContext.stages.fragmentStage.module,\n        entryPoint: webgpuPipelineContext.stages.fragmentStage.entryPoint,\n        targets: colorStates\n      },\n      multisample: {\n        count: sampleCount\n        /*mask,\n        alphaToCoverageEnabled,*/\n\n      },\n      depthStencil: this._webgpuDepthStencilFormat === undefined ? undefined : {\n        depthWriteEnabled: this._depthWriteEnabled,\n        depthCompare: this._depthTestEnabled ? WebGPUCacheRenderPipeline._GetCompareFunction(this._depthCompare) : WebGPUConstants.CompareFunction.Always,\n        format: this._webgpuDepthStencilFormat,\n        stencilFront: this._stencilEnabled && depthStencilFormatHasStencil ? stencilFrontBack : undefined,\n        stencilBack: this._stencilEnabled && depthStencilFormatHasStencil ? stencilFrontBack : undefined,\n        stencilReadMask: this._stencilEnabled && depthStencilFormatHasStencil ? this._stencilReadMask : undefined,\n        stencilWriteMask: this._stencilEnabled && depthStencilFormatHasStencil ? this._stencilWriteMask : undefined,\n        depthBias: this._depthBias,\n        depthBiasClamp: this._depthBiasClamp,\n        depthBiasSlopeScale: this._depthBiasSlopeScale\n      }\n    });\n  };\n\n  WebGPUCacheRenderPipeline.NumCacheHitWithoutHash = 0;\n  WebGPUCacheRenderPipeline.NumCacheHitWithHash = 0;\n  WebGPUCacheRenderPipeline.NumCacheMiss = 0;\n  WebGPUCacheRenderPipeline.NumPipelineCreationLastFrame = 0;\n  WebGPUCacheRenderPipeline._NumPipelineCreationCurrentFrame = 0;\n  return WebGPUCacheRenderPipeline;\n}();\n\nexport { WebGPUCacheRenderPipeline };","map":{"version":3,"mappings":"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","names":["WebGPUConstants","VertexBuffer","WebGPUShaderProcessor","renderableTextureFormatToIndex","WebGPUTextureHelper","StatePosition","alphaBlendFactorToIndex","stencilOpToIndex","device","emptyVertexBuffer","useTextureStage","_device","_useTextureStage","_states","Array","_statesLength","_stateDirtyLowestIndex","_emptyVertexBuffer","_mrtFormats","_parameter","token","undefined","pipeline","disabled","vertexBuffers","_kMaxVertexBufferStride","limits","maxVertexBufferArrayStride","reset","WebGPUCacheRenderPipeline","_isDirty","length","setAlphaToCoverage","resetDepthCullingState","setClampDepth","setDepthBias","_webgpuColorFormat","TextureFormat","BGRA8Unorm","setColorFormat","setMRT","setAlphaBlendEnabled","setAlphaBlendFactors","setWriteMask","setDepthStencilFormat","Depth24PlusStencil8","setStencilEnabled","resetStencilState","setBuffers","_setTextureState","Object","_mrtAttachments1","fillMode","effect","sampleCount","textureState","topology_1","_GetTopology","_setVertexState","_createRenderPipeline","NumCacheMiss","_NumPipelineCreationCurrentFrame","_setShaderStage","uniqueId","_setRasterizationState","_setColorStates","_setDepthStencilState","lastStateDirtyLowestIndex","NumCacheHitWithoutHash","_getRenderPipeline","NumCacheHitWithHash","topology","_setRenderPipeline","NumPipelineCreationLastFrame","enabled","_alphaToCoverageEnabled","frontFace","_frontFace","_cullEnabled","cullFace","_cullFace","clampDepth","_clampDepth","setDepthCullingState","cullEnabled","zOffset","zOffsetUnits","depthTestEnabled","depthWriteEnabled","depthCompare","_depthWriteEnabled","_depthTestEnabled","_depthCompare","setDepthBiasSlopeScale","depthBias","_depthBias","DepthBias","Math","min","depthBiasSlopeScale","_depthBiasSlopeScale","DepthBiasSlopeScale","format","_colorFormat","attachments","mrtAttachments","mask","i","_mrtEnabledMask","MRTAttachments1","textureArray","textureCount","mrtTextureArray","mrtTextureCount","bits","indexBits","numRT","texture","gpuWrapper","_hardwareTexture","_a","_mrtAttachments2","MRTAttachments2","_alphaBlendEnabled","factors","operations","_alphaBlendFuncParams","_alphaBlendEqParams","_writeMask","_webgpuDepthStencilFormat","_depthStencilFormat","func","_stencilEnabled","_stencilFrontCompare","op","_stencilFrontDepthFailOp","_stencilFrontPassOp","_stencilFrontFailOp","_stencilReadMask","StencilReadMask","_stencilWriteMask","StencilWriteMask","setStencilState","stencilEnabled","compare","depthFailOp","passOp","failOp","readMask","writeMask","setStencilReadMask","setStencilWriteMask","indexBuffer","overrideVertexBuffers","_vertexBuffers","_overrideVertexBuffers","_indexBuffer","PrimitiveTopology","TriangleList","PointList","LineList","LineStrip","TriangleStrip","operation","BlendOperation","Add","Subtract","ReverseSubtract","Min","Max","factor","BlendFactor","Zero","One","Src","OneMinusSrc","SrcAlpha","OneMinusSrcAlpha","DstAlpha","OneMinusDstAlpha","Dst","OneMinusDst","SrcAlphaSaturated","Constant","OneMinusConstant","compareFunction","CompareFunction","Never","Less","Equal","LessEqual","Greater","NotEqual","GreaterEqual","Always","StencilOperation","Keep","Replace","IncrementClamp","DecrementClamp","Invert","IncrementWrap","DecrementWrap","vertexBuffer","type","normalized","size","getSize","BYTE","VertexFormat","Snorm8x2","Sint8x2","Snorm8x4","Sint8x4","UNSIGNED_BYTE","Unorm8x2","Uint8x2","Unorm8x4","Uint8x4","SHORT","Snorm16x2","Sint16x2","Snorm16x4","Sint16x4","UNSIGNED_SHORT","Unorm16x2","Uint16x2","Unorm16x4","Uint16x4","INT","Sint32","Sint32x2","Sint32x3","Sint32x4","UNSIGNED_INT","Uint32","Uint32x2","Uint32x3","Uint32x4","FLOAT","Float32","Float32x2","Float32x3","Float32x4","Error","getKind","concat","srcFactor","_GetAphaBlendFactor","dstFactor","_GetAphaBlendOperation","id","_shaderId","ShaderStage","cullMode","alphaToCoverage","rasterizationState","_rasterizationState","RasterizationState","colorStates","_colorStates","ColorStates","stencilState","depthStencilState","_depthStencilState","DepthStencilState","currStateLen","newNumStates","VertexState","webgpuPipelineContext","_pipelineContext","attributes","shaderProcessingContext","attributeNamesFromEffect","locations","attributeLocationsFromEffect","currentGPUBuffer","numVertexBuffers","index","location_1","buffer","getBuffer","_b","underlyingResource","_validOffsetRange","offset","byteOffset","formatSize","byteStride","vid","hashCode","_textureState","TextureStage","_createPipelineLayoutWithTextureStage","bindGroupLayouts","bindGroupLayoutEntries","setDefinition","createBindGroupLayout","entries","createPipelineLayout","bitVal","j","entry","name_1","bindGroupLayoutEntryInfo","binding","name","textureInfo","availableTextures","samplerInfo","autoBindSampler","availableSamplers","AutoSamplerSuffix","sampleType","samplerType","SamplerBindingType","Filtering","TextureSampleType","Depth","NonFiltering","UnfilterableFloat","groupIndex","bindingIndex","sampler","descriptors","currentGPUAttributes","location_2","invalidOffsetRange","vertexBufferDescriptor","arrayStride","stepMode","getIsInstanced","InputStepMode","Instance","Vertex","push","shaderLocation","_GetVertexInputDescriptorFormat","inputStateDescriptor","_getVertexInputDescriptor","pipelineLayout","_createPipelineLayout","alphaBlend","_getAphaBlendState","colorBlend","_getColorBlendState","descr","blend","alpha","color","stencilFrontBack","_GetCompareFunction","_GetStencilOpFunction","stripIndexFormat","is32Bits","IndexFormat","Uint16","depthStencilFormatHasStencil","HasStencilAspect","createRenderPipeline","layout","vertex","module","stages","vertexStage","entryPoint","buffers","primitive","FrontFace","CCW","CW","CullMode","None","Front","Back","fragment","fragmentStage","targets","multisample","count","depthStencil","stencilFront","stencilBack","stencilReadMask","stencilWriteMask","depthBiasClamp","_depthBiasClamp"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/WebGPU/webgpuCacheRenderPipeline.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { Constants } from \"../constants\";\r\nimport * as WebGPUConstants from \"./webgpuConstants\";\r\nimport type { Effect } from \"../../Materials/effect\";\r\nimport type { InternalTexture } from \"../../Materials/Textures/internalTexture\";\r\nimport { VertexBuffer } from \"../../Buffers/buffer\";\r\nimport type { DataBuffer } from \"../../Buffers/dataBuffer\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { WebGPUHardwareTexture } from \"./webgpuHardwareTexture\";\r\nimport type { WebGPUPipelineContext } from \"./webgpuPipelineContext\";\r\nimport { WebGPUShaderProcessor } from \"./webgpuShaderProcessor\";\r\nimport { renderableTextureFormatToIndex, WebGPUTextureHelper } from \"./webgpuTextureHelper\";\r\n\r\nenum StatePosition {\r\n    StencilReadMask = 0,\r\n    StencilWriteMask = 1,\r\n    //DepthBiasClamp = 1, // not used, so remove it to improve perf\r\n    DepthBias = 2,\r\n    DepthBiasSlopeScale = 3,\r\n    DepthStencilState = 4,\r\n    MRTAttachments1 = 5,\r\n    MRTAttachments2 = 6,\r\n    RasterizationState = 7,\r\n    ColorStates = 8,\r\n    ShaderStage = 9,\r\n    TextureStage = 10,\r\n    VertexState = 11, // vertex state will consume positions 11, 12, ... depending on the number of vertex inputs\r\n\r\n    NumStates = 12,\r\n}\r\n\r\nconst alphaBlendFactorToIndex: { [name: number]: number } = {\r\n    0: 1, // Zero\r\n    1: 2, // One\r\n    0x0300: 3, // SrcColor\r\n    0x0301: 4, // OneMinusSrcColor\r\n    0x0302: 5, // SrcAlpha\r\n    0x0303: 6, // OneMinusSrcAlpha\r\n    0x0304: 7, // DstAlpha\r\n    0x0305: 8, // OneMinusDstAlpha\r\n    0x0306: 9, // DstColor\r\n    0x0307: 10, // OneMinusDstColor\r\n    0x0308: 11, // SrcAlphaSaturated\r\n    0x8001: 12, // BlendColor\r\n    0x8002: 13, // OneMinusBlendColor\r\n    0x8003: 12, // BlendColor (alpha)\r\n    0x8004: 13, // OneMinusBlendColor (alpha)\r\n};\r\n\r\nconst stencilOpToIndex: { [name: number]: number } = {\r\n    0x0000: 0, // ZERO\r\n    0x1e00: 1, // KEEP\r\n    0x1e01: 2, // REPLACE\r\n    0x1e02: 3, // INCR\r\n    0x1e03: 4, // DECR\r\n    0x150a: 5, // INVERT\r\n    0x8507: 6, // INCR_WRAP\r\n    0x8508: 7, // DECR_WRAP\r\n};\r\n\r\n/** @hidden */\r\nexport abstract class WebGPUCacheRenderPipeline {\r\n    public static NumCacheHitWithoutHash = 0;\r\n    public static NumCacheHitWithHash = 0;\r\n    public static NumCacheMiss = 0;\r\n    public static NumPipelineCreationLastFrame = 0;\r\n\r\n    public disabled: boolean;\r\n\r\n    private static _NumPipelineCreationCurrentFrame = 0;\r\n\r\n    protected _states: number[];\r\n    protected _statesLength: number;\r\n    protected _stateDirtyLowestIndex: number;\r\n    public lastStateDirtyLowestIndex: number; // for stats only\r\n\r\n    private _device: GPUDevice;\r\n    private _isDirty: boolean;\r\n    private _emptyVertexBuffer: VertexBuffer;\r\n    private _parameter: { token: any; pipeline: Nullable<GPURenderPipeline> };\r\n    private _kMaxVertexBufferStride;\r\n\r\n    private _shaderId: number;\r\n    private _alphaToCoverageEnabled: boolean;\r\n    private _frontFace: number;\r\n    private _cullEnabled: boolean;\r\n    private _cullFace: number;\r\n    private _clampDepth: boolean;\r\n    private _rasterizationState: number;\r\n    private _depthBias: number;\r\n    private _depthBiasClamp: number;\r\n    private _depthBiasSlopeScale: number;\r\n    private _colorFormat: number;\r\n    private _webgpuColorFormat: GPUTextureFormat[];\r\n    private _mrtAttachments1: number;\r\n    private _mrtAttachments2: number;\r\n    private _mrtFormats: GPUTextureFormat[];\r\n    private _mrtEnabledMask: number;\r\n    private _alphaBlendEnabled: boolean;\r\n    private _alphaBlendFuncParams: Array<Nullable<number>>;\r\n    private _alphaBlendEqParams: Array<Nullable<number>>;\r\n    private _writeMask: number;\r\n    private _colorStates: number;\r\n    private _depthStencilFormat: number;\r\n    private _webgpuDepthStencilFormat: GPUTextureFormat | undefined;\r\n    private _depthTestEnabled: boolean;\r\n    private _depthWriteEnabled: boolean;\r\n    private _depthCompare: number;\r\n    private _stencilEnabled: boolean;\r\n    private _stencilFrontCompare: number;\r\n    private _stencilFrontDepthFailOp: number;\r\n    private _stencilFrontPassOp: number;\r\n    private _stencilFrontFailOp: number;\r\n    private _stencilReadMask: number;\r\n    private _stencilWriteMask: number;\r\n    private _depthStencilState: number;\r\n    private _vertexBuffers: Nullable<{ [key: string]: Nullable<VertexBuffer> }>;\r\n    private _overrideVertexBuffers: Nullable<{ [key: string]: Nullable<VertexBuffer> }>;\r\n    private _indexBuffer: Nullable<DataBuffer>;\r\n    private _textureState: number;\r\n    private _useTextureStage: boolean;\r\n\r\n    constructor(device: GPUDevice, emptyVertexBuffer: VertexBuffer, useTextureStage: boolean) {\r\n        this._device = device;\r\n        this._useTextureStage = useTextureStage;\r\n        this._states = new Array(30); // pre-allocate enough room so that no new allocation will take place afterwards\r\n        this._statesLength = 0;\r\n        this._stateDirtyLowestIndex = 0;\r\n        this._emptyVertexBuffer = emptyVertexBuffer;\r\n        this._mrtFormats = [];\r\n        this._parameter = { token: undefined, pipeline: null };\r\n        this.disabled = false;\r\n        this.vertexBuffers = [];\r\n        this._kMaxVertexBufferStride = device.limits.maxVertexBufferArrayStride || 2048;\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        this._isDirty = true;\r\n        this.vertexBuffers.length = 0;\r\n        this.setAlphaToCoverage(false);\r\n        this.resetDepthCullingState();\r\n        this.setClampDepth(false);\r\n        this.setDepthBias(0);\r\n        //this.setDepthBiasClamp(0);\r\n        this._webgpuColorFormat = [WebGPUConstants.TextureFormat.BGRA8Unorm];\r\n        this.setColorFormat(WebGPUConstants.TextureFormat.BGRA8Unorm);\r\n        this.setMRT([]);\r\n        this.setAlphaBlendEnabled(false);\r\n        this.setAlphaBlendFactors([null, null, null, null], [null, null]);\r\n        this.setWriteMask(0xf);\r\n        this.setDepthStencilFormat(WebGPUConstants.TextureFormat.Depth24PlusStencil8);\r\n        this.setStencilEnabled(false);\r\n        this.resetStencilState();\r\n        this.setBuffers(null, null, null);\r\n        this._setTextureState(0);\r\n    }\r\n\r\n    protected abstract _getRenderPipeline(param: { token: any; pipeline: Nullable<GPURenderPipeline> }): void;\r\n    protected abstract _setRenderPipeline(param: { token: any; pipeline: Nullable<GPURenderPipeline> }): void;\r\n\r\n    public readonly vertexBuffers: VertexBuffer[];\r\n\r\n    public get colorFormats(): GPUTextureFormat[] {\r\n        return this._mrtAttachments1 > 0 ? this._mrtFormats : this._webgpuColorFormat;\r\n    }\r\n\r\n    public readonly mrtAttachments: number[];\r\n    public readonly mrtTextureArray: InternalTexture[];\r\n    public readonly mrtTextureCount: number = 0;\r\n\r\n    public getRenderPipeline(fillMode: number, effect: Effect, sampleCount: number, textureState = 0): GPURenderPipeline {\r\n        if (sampleCount > 1) {\r\n            // WebGPU only supports 1 or 4\r\n            sampleCount = 4;\r\n        }\r\n        if (this.disabled) {\r\n            const topology = WebGPUCacheRenderPipeline._GetTopology(fillMode);\r\n\r\n            this._setVertexState(effect); // to fill this.vertexBuffers with correct data\r\n\r\n            this._parameter.pipeline = this._createRenderPipeline(effect, topology, sampleCount);\r\n\r\n            WebGPUCacheRenderPipeline.NumCacheMiss++;\r\n            WebGPUCacheRenderPipeline._NumPipelineCreationCurrentFrame++;\r\n\r\n            return this._parameter.pipeline;\r\n        }\r\n\r\n        this._setShaderStage(effect.uniqueId);\r\n        this._setRasterizationState(fillMode, sampleCount);\r\n        this._setColorStates();\r\n        this._setDepthStencilState();\r\n        this._setVertexState(effect);\r\n        this._setTextureState(textureState);\r\n\r\n        this.lastStateDirtyLowestIndex = this._stateDirtyLowestIndex;\r\n\r\n        if (!this._isDirty && this._parameter.pipeline) {\r\n            this._stateDirtyLowestIndex = this._statesLength;\r\n            WebGPUCacheRenderPipeline.NumCacheHitWithoutHash++;\r\n            return this._parameter.pipeline;\r\n        }\r\n\r\n        this._getRenderPipeline(this._parameter);\r\n\r\n        this._isDirty = false;\r\n        this._stateDirtyLowestIndex = this._statesLength;\r\n\r\n        if (this._parameter.pipeline) {\r\n            WebGPUCacheRenderPipeline.NumCacheHitWithHash++;\r\n            return this._parameter.pipeline;\r\n        }\r\n\r\n        const topology = WebGPUCacheRenderPipeline._GetTopology(fillMode);\r\n\r\n        this._parameter.pipeline = this._createRenderPipeline(effect, topology, sampleCount);\r\n        this._setRenderPipeline(this._parameter);\r\n\r\n        WebGPUCacheRenderPipeline.NumCacheMiss++;\r\n        WebGPUCacheRenderPipeline._NumPipelineCreationCurrentFrame++;\r\n\r\n        return this._parameter.pipeline;\r\n    }\r\n\r\n    public endFrame(): void {\r\n        WebGPUCacheRenderPipeline.NumPipelineCreationLastFrame = WebGPUCacheRenderPipeline._NumPipelineCreationCurrentFrame;\r\n        WebGPUCacheRenderPipeline._NumPipelineCreationCurrentFrame = 0;\r\n    }\r\n\r\n    public setAlphaToCoverage(enabled: boolean): void {\r\n        this._alphaToCoverageEnabled = enabled;\r\n    }\r\n\r\n    public setFrontFace(frontFace: number): void {\r\n        this._frontFace = frontFace;\r\n    }\r\n\r\n    public setCullEnabled(enabled: boolean): void {\r\n        this._cullEnabled = enabled;\r\n    }\r\n\r\n    public setCullFace(cullFace: number): void {\r\n        this._cullFace = cullFace;\r\n    }\r\n\r\n    public setClampDepth(clampDepth: boolean): void {\r\n        this._clampDepth = clampDepth;\r\n    }\r\n\r\n    public resetDepthCullingState(): void {\r\n        this.setDepthCullingState(false, 2, 1, 0, 0, true, true, Constants.ALWAYS);\r\n    }\r\n\r\n    public setDepthCullingState(\r\n        cullEnabled: boolean,\r\n        frontFace: number,\r\n        cullFace: number,\r\n        zOffset: number,\r\n        zOffsetUnits: number,\r\n        depthTestEnabled: boolean,\r\n        depthWriteEnabled: boolean,\r\n        depthCompare: Nullable<number>\r\n    ): void {\r\n        this._depthWriteEnabled = depthWriteEnabled;\r\n        this._depthTestEnabled = depthTestEnabled;\r\n        this._depthCompare = (depthCompare ?? Constants.ALWAYS) - 0x0200;\r\n        this._cullFace = cullFace;\r\n        this._cullEnabled = cullEnabled;\r\n        this._frontFace = frontFace;\r\n        this.setDepthBiasSlopeScale(zOffset);\r\n        this.setDepthBias(zOffsetUnits);\r\n    }\r\n\r\n    public setDepthBias(depthBias: number): void {\r\n        if (this._depthBias !== depthBias) {\r\n            this._depthBias = depthBias;\r\n            this._states[StatePosition.DepthBias] = depthBias;\r\n            this._isDirty = true;\r\n            this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.DepthBias);\r\n        }\r\n    }\r\n\r\n    /*public setDepthBiasClamp(depthBiasClamp: number): void {\r\n        if (this._depthBiasClamp !== depthBiasClamp) {\r\n            this._depthBiasClamp = depthBiasClamp;\r\n            this._states[StatePosition.DepthBiasClamp] = depthBiasClamp.toString();\r\n            this._isDirty = true;\r\n        }\r\n    }*/\r\n\r\n    public setDepthBiasSlopeScale(depthBiasSlopeScale: number): void {\r\n        if (this._depthBiasSlopeScale !== depthBiasSlopeScale) {\r\n            this._depthBiasSlopeScale = depthBiasSlopeScale;\r\n            this._states[StatePosition.DepthBiasSlopeScale] = depthBiasSlopeScale;\r\n            this._isDirty = true;\r\n            this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.DepthBiasSlopeScale);\r\n        }\r\n    }\r\n\r\n    public setColorFormat(format: GPUTextureFormat): void {\r\n        this._webgpuColorFormat[0] = format;\r\n        this._colorFormat = renderableTextureFormatToIndex[format];\r\n    }\r\n\r\n    public setMRTAttachments(attachments: number[]): void {\r\n        (this.mrtAttachments as any) = attachments;\r\n        let mask = 0;\r\n        for (let i = 0; i < attachments.length; ++i) {\r\n            if (attachments[i] !== 0) {\r\n                mask += 1 << i;\r\n            }\r\n        }\r\n        if (this._mrtEnabledMask !== mask) {\r\n            this._mrtEnabledMask = mask;\r\n            this._isDirty = true;\r\n            this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.MRTAttachments1);\r\n        }\r\n    }\r\n\r\n    public setMRT(textureArray: InternalTexture[], textureCount?: number): void {\r\n        textureCount = textureCount ?? textureArray.length;\r\n        if (textureCount > 10) {\r\n            // If we want more than 10 attachments we need to change this method (and the StatePosition enum) but 10 seems plenty: note that WebGPU only supports 8 at the time (2021/12/13)!\r\n            // As we need 39 different values we are using 6 bits to encode a texture format, meaning we can encode 5 texture formats in 32 bits\r\n            // We are using 2x32 bit values to handle 10 textures\r\n            throw \"Can't handle more than 10 attachments for a MRT in cache render pipeline!\";\r\n        }\r\n        (this.mrtTextureArray as any) = textureArray;\r\n        (this.mrtTextureCount as any) = textureCount;\r\n\r\n        this._mrtEnabledMask = 0xffff; // all textures are enabled at start (meaning we can write to them). Calls to setMRTAttachments may disable some\r\n\r\n        const bits: number[] = [0, 0];\r\n        let indexBits = 0,\r\n            mask = 0,\r\n            numRT = 0;\r\n        for (let i = 0; i < textureCount; ++i) {\r\n            const texture = textureArray[i];\r\n            const gpuWrapper = texture?._hardwareTexture as Nullable<WebGPUHardwareTexture>;\r\n\r\n            this._mrtFormats[numRT] = gpuWrapper?.format ?? this._webgpuColorFormat[0];\r\n\r\n            bits[indexBits] += renderableTextureFormatToIndex[this._mrtFormats[numRT]] << mask;\r\n            mask += 6;\r\n            numRT++;\r\n\r\n            if (mask >= 32) {\r\n                mask = 0;\r\n                indexBits++;\r\n            }\r\n        }\r\n        this._mrtFormats.length = numRT;\r\n        if (this._mrtAttachments1 !== bits[0] || this._mrtAttachments2 !== bits[1]) {\r\n            this._mrtAttachments1 = bits[0];\r\n            this._mrtAttachments2 = bits[1];\r\n            this._states[StatePosition.MRTAttachments1] = bits[0];\r\n            this._states[StatePosition.MRTAttachments2] = bits[1];\r\n            this._isDirty = true;\r\n            this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.MRTAttachments1);\r\n        }\r\n    }\r\n\r\n    public setAlphaBlendEnabled(enabled: boolean): void {\r\n        this._alphaBlendEnabled = enabled;\r\n    }\r\n\r\n    public setAlphaBlendFactors(factors: Array<Nullable<number>>, operations: Array<Nullable<number>>): void {\r\n        this._alphaBlendFuncParams = factors;\r\n        this._alphaBlendEqParams = operations;\r\n    }\r\n\r\n    public setWriteMask(mask: number): void {\r\n        this._writeMask = mask;\r\n    }\r\n\r\n    public setDepthStencilFormat(format: GPUTextureFormat | undefined): void {\r\n        this._webgpuDepthStencilFormat = format;\r\n        this._depthStencilFormat = format === undefined ? 0 : renderableTextureFormatToIndex[format];\r\n    }\r\n\r\n    public setDepthTestEnabled(enabled: boolean): void {\r\n        this._depthTestEnabled = enabled;\r\n    }\r\n\r\n    public setDepthWriteEnabled(enabled: boolean): void {\r\n        this._depthWriteEnabled = enabled;\r\n    }\r\n\r\n    public setDepthCompare(func: Nullable<number>): void {\r\n        this._depthCompare = (func ?? Constants.ALWAYS) - 0x0200;\r\n    }\r\n\r\n    public setStencilEnabled(enabled: boolean): void {\r\n        this._stencilEnabled = enabled;\r\n    }\r\n\r\n    public setStencilCompare(func: Nullable<number>): void {\r\n        this._stencilFrontCompare = (func ?? Constants.ALWAYS) - 0x0200;\r\n    }\r\n\r\n    public setStencilDepthFailOp(op: Nullable<number>): void {\r\n        this._stencilFrontDepthFailOp = op === null ? 1 /* KEEP */ : stencilOpToIndex[op];\r\n    }\r\n\r\n    public setStencilPassOp(op: Nullable<number>): void {\r\n        this._stencilFrontPassOp = op === null ? 2 /* REPLACE */ : stencilOpToIndex[op];\r\n    }\r\n\r\n    public setStencilFailOp(op: Nullable<number>): void {\r\n        this._stencilFrontFailOp = op === null ? 1 /* KEEP */ : stencilOpToIndex[op];\r\n    }\r\n\r\n    public setStencilReadMask(mask: number): void {\r\n        if (this._stencilReadMask !== mask) {\r\n            this._stencilReadMask = mask;\r\n            this._states[StatePosition.StencilReadMask] = mask;\r\n            this._isDirty = true;\r\n            this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.StencilReadMask);\r\n        }\r\n    }\r\n\r\n    public setStencilWriteMask(mask: number): void {\r\n        if (this._stencilWriteMask !== mask) {\r\n            this._stencilWriteMask = mask;\r\n            this._states[StatePosition.StencilWriteMask] = mask;\r\n            this._isDirty = true;\r\n            this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.StencilWriteMask);\r\n        }\r\n    }\r\n\r\n    public resetStencilState(): void {\r\n        this.setStencilState(false, Constants.ALWAYS, Constants.KEEP, Constants.REPLACE, Constants.KEEP, 0xff, 0xff);\r\n    }\r\n\r\n    public setStencilState(\r\n        stencilEnabled: boolean,\r\n        compare: Nullable<number>,\r\n        depthFailOp: Nullable<number>,\r\n        passOp: Nullable<number>,\r\n        failOp: Nullable<number>,\r\n        readMask: number,\r\n        writeMask: number\r\n    ): void {\r\n        this._stencilEnabled = stencilEnabled;\r\n        this._stencilFrontCompare = (compare ?? Constants.ALWAYS) - 0x0200;\r\n        this._stencilFrontDepthFailOp = depthFailOp === null ? 1 /* KEEP */ : stencilOpToIndex[depthFailOp];\r\n        this._stencilFrontPassOp = passOp === null ? 2 /* REPLACE */ : stencilOpToIndex[passOp];\r\n        this._stencilFrontFailOp = failOp === null ? 1 /* KEEP */ : stencilOpToIndex[failOp];\r\n        this.setStencilReadMask(readMask);\r\n        this.setStencilWriteMask(writeMask);\r\n    }\r\n\r\n    public setBuffers(\r\n        vertexBuffers: Nullable<{ [key: string]: Nullable<VertexBuffer> }>,\r\n        indexBuffer: Nullable<DataBuffer>,\r\n        overrideVertexBuffers: Nullable<{ [key: string]: Nullable<VertexBuffer> }>\r\n    ): void {\r\n        this._vertexBuffers = vertexBuffers;\r\n        this._overrideVertexBuffers = overrideVertexBuffers;\r\n        this._indexBuffer = indexBuffer;\r\n    }\r\n\r\n    private static _GetTopology(fillMode: number): GPUPrimitiveTopology {\r\n        switch (fillMode) {\r\n            // Triangle views\r\n            case Constants.MATERIAL_TriangleFillMode:\r\n                return WebGPUConstants.PrimitiveTopology.TriangleList;\r\n            case Constants.MATERIAL_PointFillMode:\r\n                return WebGPUConstants.PrimitiveTopology.PointList;\r\n            case Constants.MATERIAL_WireFrameFillMode:\r\n                return WebGPUConstants.PrimitiveTopology.LineList;\r\n            // Draw modes\r\n            case Constants.MATERIAL_PointListDrawMode:\r\n                return WebGPUConstants.PrimitiveTopology.PointList;\r\n            case Constants.MATERIAL_LineListDrawMode:\r\n                return WebGPUConstants.PrimitiveTopology.LineList;\r\n            case Constants.MATERIAL_LineLoopDrawMode:\r\n                // return this._gl.LINE_LOOP;\r\n                // TODO WEBGPU. Line Loop Mode Fallback at buffer load time.\r\n                throw \"LineLoop is an unsupported fillmode in WebGPU\";\r\n            case Constants.MATERIAL_LineStripDrawMode:\r\n                return WebGPUConstants.PrimitiveTopology.LineStrip;\r\n            case Constants.MATERIAL_TriangleStripDrawMode:\r\n                return WebGPUConstants.PrimitiveTopology.TriangleStrip;\r\n            case Constants.MATERIAL_TriangleFanDrawMode:\r\n                // return this._gl.TRIANGLE_FAN;\r\n                // TODO WEBGPU. Triangle Fan Mode Fallback at buffer load time.\r\n                throw \"TriangleFan is an unsupported fillmode in WebGPU\";\r\n            default:\r\n                return WebGPUConstants.PrimitiveTopology.TriangleList;\r\n        }\r\n    }\r\n\r\n    private static _GetAphaBlendOperation(operation: Nullable<number>): GPUBlendOperation {\r\n        switch (operation) {\r\n            case Constants.GL_ALPHA_EQUATION_ADD:\r\n                return WebGPUConstants.BlendOperation.Add;\r\n            case Constants.GL_ALPHA_EQUATION_SUBTRACT:\r\n                return WebGPUConstants.BlendOperation.Subtract;\r\n            case Constants.GL_ALPHA_EQUATION_REVERSE_SUBTRACT:\r\n                return WebGPUConstants.BlendOperation.ReverseSubtract;\r\n            case Constants.GL_ALPHA_EQUATION_MIN:\r\n                return WebGPUConstants.BlendOperation.Min;\r\n            case Constants.GL_ALPHA_EQUATION_MAX:\r\n                return WebGPUConstants.BlendOperation.Max;\r\n            default:\r\n                return WebGPUConstants.BlendOperation.Add;\r\n        }\r\n    }\r\n\r\n    private static _GetAphaBlendFactor(factor: Nullable<number>): GPUBlendFactor {\r\n        switch (factor) {\r\n            case 0:\r\n                return WebGPUConstants.BlendFactor.Zero;\r\n            case 1:\r\n                return WebGPUConstants.BlendFactor.One;\r\n            case Constants.GL_ALPHA_FUNCTION_SRC:\r\n                return WebGPUConstants.BlendFactor.Src;\r\n            case Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_COLOR:\r\n                return WebGPUConstants.BlendFactor.OneMinusSrc;\r\n            case Constants.GL_ALPHA_FUNCTION_SRC_ALPHA:\r\n                return WebGPUConstants.BlendFactor.SrcAlpha;\r\n            case Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_ALPHA:\r\n                return WebGPUConstants.BlendFactor.OneMinusSrcAlpha;\r\n            case Constants.GL_ALPHA_FUNCTION_DST_ALPHA:\r\n                return WebGPUConstants.BlendFactor.DstAlpha;\r\n            case Constants.GL_ALPHA_FUNCTION_ONE_MINUS_DST_ALPHA:\r\n                return WebGPUConstants.BlendFactor.OneMinusDstAlpha;\r\n            case Constants.GL_ALPHA_FUNCTION_DST_COLOR:\r\n                return WebGPUConstants.BlendFactor.Dst;\r\n            case Constants.GL_ALPHA_FUNCTION_ONE_MINUS_DST_COLOR:\r\n                return WebGPUConstants.BlendFactor.OneMinusDst;\r\n            case Constants.GL_ALPHA_FUNCTION_SRC_ALPHA_SATURATED:\r\n                return WebGPUConstants.BlendFactor.SrcAlphaSaturated;\r\n            case Constants.GL_ALPHA_FUNCTION_CONSTANT_COLOR:\r\n                return WebGPUConstants.BlendFactor.Constant;\r\n            case Constants.GL_ALPHA_FUNCTION_ONE_MINUS_CONSTANT_COLOR:\r\n                return WebGPUConstants.BlendFactor.OneMinusConstant;\r\n            case Constants.GL_ALPHA_FUNCTION_CONSTANT_ALPHA:\r\n                return WebGPUConstants.BlendFactor.Constant;\r\n            case Constants.GL_ALPHA_FUNCTION_ONE_MINUS_CONSTANT_ALPHA:\r\n                return WebGPUConstants.BlendFactor.OneMinusConstant;\r\n            default:\r\n                return WebGPUConstants.BlendFactor.One;\r\n        }\r\n    }\r\n\r\n    private static _GetCompareFunction(compareFunction: number): GPUCompareFunction {\r\n        switch (compareFunction) {\r\n            case 0: // NEVER\r\n                return WebGPUConstants.CompareFunction.Never;\r\n            case 1: // LESS\r\n                return WebGPUConstants.CompareFunction.Less;\r\n            case 2: // EQUAL\r\n                return WebGPUConstants.CompareFunction.Equal;\r\n            case 3: // LEQUAL\r\n                return WebGPUConstants.CompareFunction.LessEqual;\r\n            case 4: // GREATER\r\n                return WebGPUConstants.CompareFunction.Greater;\r\n            case 5: // NOTEQUAL\r\n                return WebGPUConstants.CompareFunction.NotEqual;\r\n            case 6: // GEQUAL\r\n                return WebGPUConstants.CompareFunction.GreaterEqual;\r\n            case 7: // ALWAYS\r\n                return WebGPUConstants.CompareFunction.Always;\r\n        }\r\n        return WebGPUConstants.CompareFunction.Never;\r\n    }\r\n\r\n    private static _GetStencilOpFunction(operation: number): GPUStencilOperation {\r\n        switch (operation) {\r\n            case 0:\r\n                return WebGPUConstants.StencilOperation.Zero;\r\n            case 1:\r\n                return WebGPUConstants.StencilOperation.Keep;\r\n            case 2:\r\n                return WebGPUConstants.StencilOperation.Replace;\r\n            case 3:\r\n                return WebGPUConstants.StencilOperation.IncrementClamp;\r\n            case 4:\r\n                return WebGPUConstants.StencilOperation.DecrementClamp;\r\n            case 5:\r\n                return WebGPUConstants.StencilOperation.Invert;\r\n            case 6:\r\n                return WebGPUConstants.StencilOperation.IncrementWrap;\r\n            case 7:\r\n                return WebGPUConstants.StencilOperation.DecrementWrap;\r\n        }\r\n        return WebGPUConstants.StencilOperation.Keep;\r\n    }\r\n\r\n    private static _GetVertexInputDescriptorFormat(vertexBuffer: VertexBuffer): GPUVertexFormat {\r\n        const type = vertexBuffer.type;\r\n        const normalized = vertexBuffer.normalized;\r\n        const size = vertexBuffer.getSize();\r\n\r\n        switch (type) {\r\n            case VertexBuffer.BYTE:\r\n                switch (size) {\r\n                    case 1:\r\n                    case 2:\r\n                        return normalized ? WebGPUConstants.VertexFormat.Snorm8x2 : WebGPUConstants.VertexFormat.Sint8x2;\r\n                    case 3:\r\n                    case 4:\r\n                        return normalized ? WebGPUConstants.VertexFormat.Snorm8x4 : WebGPUConstants.VertexFormat.Sint8x4;\r\n                }\r\n                break;\r\n            case VertexBuffer.UNSIGNED_BYTE:\r\n                switch (size) {\r\n                    case 1:\r\n                    case 2:\r\n                        return normalized ? WebGPUConstants.VertexFormat.Unorm8x2 : WebGPUConstants.VertexFormat.Uint8x2;\r\n                    case 3:\r\n                    case 4:\r\n                        return normalized ? WebGPUConstants.VertexFormat.Unorm8x4 : WebGPUConstants.VertexFormat.Uint8x4;\r\n                }\r\n                break;\r\n            case VertexBuffer.SHORT:\r\n                switch (size) {\r\n                    case 1:\r\n                    case 2:\r\n                        return normalized ? WebGPUConstants.VertexFormat.Snorm16x2 : WebGPUConstants.VertexFormat.Sint16x2;\r\n                    case 3:\r\n                    case 4:\r\n                        return normalized ? WebGPUConstants.VertexFormat.Snorm16x4 : WebGPUConstants.VertexFormat.Sint16x4;\r\n                }\r\n                break;\r\n            case VertexBuffer.UNSIGNED_SHORT:\r\n                switch (size) {\r\n                    case 1:\r\n                    case 2:\r\n                        return normalized ? WebGPUConstants.VertexFormat.Unorm16x2 : WebGPUConstants.VertexFormat.Uint16x2;\r\n                    case 3:\r\n                    case 4:\r\n                        return normalized ? WebGPUConstants.VertexFormat.Unorm16x4 : WebGPUConstants.VertexFormat.Uint16x4;\r\n                }\r\n                break;\r\n            case VertexBuffer.INT:\r\n                switch (size) {\r\n                    case 1:\r\n                        return WebGPUConstants.VertexFormat.Sint32;\r\n                    case 2:\r\n                        return WebGPUConstants.VertexFormat.Sint32x2;\r\n                    case 3:\r\n                        return WebGPUConstants.VertexFormat.Sint32x3;\r\n                    case 4:\r\n                        return WebGPUConstants.VertexFormat.Sint32x4;\r\n                }\r\n                break;\r\n            case VertexBuffer.UNSIGNED_INT:\r\n                switch (size) {\r\n                    case 1:\r\n                        return WebGPUConstants.VertexFormat.Uint32;\r\n                    case 2:\r\n                        return WebGPUConstants.VertexFormat.Uint32x2;\r\n                    case 3:\r\n                        return WebGPUConstants.VertexFormat.Uint32x3;\r\n                    case 4:\r\n                        return WebGPUConstants.VertexFormat.Uint32x4;\r\n                }\r\n                break;\r\n            case VertexBuffer.FLOAT:\r\n                switch (size) {\r\n                    case 1:\r\n                        return WebGPUConstants.VertexFormat.Float32;\r\n                    case 2:\r\n                        return WebGPUConstants.VertexFormat.Float32x2;\r\n                    case 3:\r\n                        return WebGPUConstants.VertexFormat.Float32x3;\r\n                    case 4:\r\n                        return WebGPUConstants.VertexFormat.Float32x4;\r\n                }\r\n                break;\r\n        }\r\n\r\n        throw new Error(`Invalid Format '${vertexBuffer.getKind()}' - type=${type}, normalized=${normalized}, size=${size}`);\r\n    }\r\n\r\n    private _getAphaBlendState(): Nullable<GPUBlendComponent> {\r\n        if (!this._alphaBlendEnabled) {\r\n            return null;\r\n        }\r\n\r\n        return {\r\n            srcFactor: WebGPUCacheRenderPipeline._GetAphaBlendFactor(this._alphaBlendFuncParams[2]),\r\n            dstFactor: WebGPUCacheRenderPipeline._GetAphaBlendFactor(this._alphaBlendFuncParams[3]),\r\n            operation: WebGPUCacheRenderPipeline._GetAphaBlendOperation(this._alphaBlendEqParams[1]),\r\n        };\r\n    }\r\n\r\n    private _getColorBlendState(): Nullable<GPUBlendComponent> {\r\n        if (!this._alphaBlendEnabled) {\r\n            return null;\r\n        }\r\n\r\n        return {\r\n            srcFactor: WebGPUCacheRenderPipeline._GetAphaBlendFactor(this._alphaBlendFuncParams[0]),\r\n            dstFactor: WebGPUCacheRenderPipeline._GetAphaBlendFactor(this._alphaBlendFuncParams[1]),\r\n            operation: WebGPUCacheRenderPipeline._GetAphaBlendOperation(this._alphaBlendEqParams[0]),\r\n        };\r\n    }\r\n\r\n    private _setShaderStage(id: number): void {\r\n        if (this._shaderId !== id) {\r\n            this._shaderId = id;\r\n            this._states[StatePosition.ShaderStage] = id;\r\n            this._isDirty = true;\r\n            this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.ShaderStage);\r\n        }\r\n    }\r\n\r\n    private _setRasterizationState(topology: number, sampleCount: number): void {\r\n        const frontFace = this._frontFace;\r\n        const cullMode = this._cullEnabled ? this._cullFace : 0;\r\n        const clampDepth = this._clampDepth ? 1 : 0;\r\n        const alphaToCoverage = this._alphaToCoverageEnabled ? 1 : 0;\r\n        const rasterizationState = frontFace - 1 + (cullMode << 1) + (clampDepth << 3) + (alphaToCoverage << 4) + (topology << 5) + (sampleCount << 8);\r\n\r\n        if (this._rasterizationState !== rasterizationState) {\r\n            this._rasterizationState = rasterizationState;\r\n            this._states[StatePosition.RasterizationState] = this._rasterizationState;\r\n            this._isDirty = true;\r\n            this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.RasterizationState);\r\n        }\r\n    }\r\n\r\n    private _setColorStates(): void {\r\n        let colorStates = ((this._writeMask ? 1 : 0) << 22) + (this._colorFormat << 23) + ((this._depthWriteEnabled ? 1 : 0) << 29); // this state has been moved from depthStencilState here because alpha and depth are related (generally when alpha is on, depth write is off and the other way around)\r\n\r\n        if (this._alphaBlendEnabled) {\r\n            colorStates +=\r\n                ((this._alphaBlendFuncParams[0] === null ? 2 : alphaBlendFactorToIndex[this._alphaBlendFuncParams[0]]) << 0) +\r\n                ((this._alphaBlendFuncParams[1] === null ? 2 : alphaBlendFactorToIndex[this._alphaBlendFuncParams[1]]) << 4) +\r\n                ((this._alphaBlendFuncParams[2] === null ? 2 : alphaBlendFactorToIndex[this._alphaBlendFuncParams[2]]) << 8) +\r\n                ((this._alphaBlendFuncParams[3] === null ? 2 : alphaBlendFactorToIndex[this._alphaBlendFuncParams[3]]) << 12) +\r\n                ((this._alphaBlendEqParams[0] === null ? 1 : this._alphaBlendEqParams[0] - 0x8005) << 16) +\r\n                ((this._alphaBlendEqParams[1] === null ? 1 : this._alphaBlendEqParams[1] - 0x8005) << 19);\r\n        }\r\n\r\n        if (colorStates !== this._colorStates) {\r\n            this._colorStates = colorStates;\r\n            this._states[StatePosition.ColorStates] = this._colorStates;\r\n            this._isDirty = true;\r\n            this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.ColorStates);\r\n        }\r\n    }\r\n\r\n    private _setDepthStencilState(): void {\r\n        const stencilState = !this._stencilEnabled\r\n            ? 7 /* ALWAYS */ + (1 /* KEEP */ << 3) + (1 /* KEEP */ << 6) + (1 /* KEEP */ << 9)\r\n            : this._stencilFrontCompare + (this._stencilFrontDepthFailOp << 3) + (this._stencilFrontPassOp << 6) + (this._stencilFrontFailOp << 9);\r\n\r\n        const depthStencilState = this._depthStencilFormat + ((this._depthTestEnabled ? this._depthCompare : 7) /* ALWAYS */ << 6) + (stencilState << 10); // stencil front - stencil back is the same\r\n\r\n        if (this._depthStencilState !== depthStencilState) {\r\n            this._depthStencilState = depthStencilState;\r\n            this._states[StatePosition.DepthStencilState] = this._depthStencilState;\r\n            this._isDirty = true;\r\n            this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.DepthStencilState);\r\n        }\r\n    }\r\n\r\n    private _setVertexState(effect: Effect): void {\r\n        const currStateLen = this._statesLength;\r\n        let newNumStates = StatePosition.VertexState;\r\n\r\n        const webgpuPipelineContext = effect._pipelineContext as WebGPUPipelineContext;\r\n        const attributes = webgpuPipelineContext.shaderProcessingContext.attributeNamesFromEffect;\r\n        const locations = webgpuPipelineContext.shaderProcessingContext.attributeLocationsFromEffect;\r\n\r\n        let currentGPUBuffer;\r\n        let numVertexBuffers = 0;\r\n        for (let index = 0; index < attributes.length; index++) {\r\n            const location = locations[index];\r\n            let vertexBuffer = (this._overrideVertexBuffers && this._overrideVertexBuffers[attributes[index]]) ?? this._vertexBuffers![attributes[index]];\r\n            if (!vertexBuffer) {\r\n                // In WebGL it's valid to not bind a vertex buffer to an attribute, but it's not valid in WebGPU\r\n                // So we must bind a dummy buffer when we are not given one for a specific attribute\r\n                vertexBuffer = this._emptyVertexBuffer;\r\n            }\r\n\r\n            const buffer = vertexBuffer.getBuffer()?.underlyingResource;\r\n\r\n            // We optimize usage of GPUVertexBufferLayout: we will create a single GPUVertexBufferLayout for all the attributes which follow each other and which use the same GPU buffer\r\n            // However, there are some constraints in the attribute.offset value range, so we must check for them before being able to reuse the same GPUVertexBufferLayout\r\n            // See _getVertexInputDescriptor() below\r\n            if (vertexBuffer._validOffsetRange === undefined) {\r\n                const offset = vertexBuffer.byteOffset;\r\n                const formatSize = vertexBuffer.getSize(true);\r\n                const byteStride = vertexBuffer.byteStride;\r\n                vertexBuffer._validOffsetRange = offset <= this._kMaxVertexBufferStride - formatSize && (byteStride === 0 || offset + formatSize <= byteStride);\r\n            }\r\n\r\n            if (!(currentGPUBuffer && currentGPUBuffer === buffer && vertexBuffer._validOffsetRange)) {\r\n                // we can't combine the previous vertexBuffer with the current one\r\n                this.vertexBuffers[numVertexBuffers++] = vertexBuffer;\r\n                currentGPUBuffer = vertexBuffer._validOffsetRange ? buffer : null;\r\n            }\r\n\r\n            const vid = vertexBuffer.hashCode + (location << 7);\r\n\r\n            this._isDirty = this._isDirty || this._states[newNumStates] !== vid;\r\n            this._states[newNumStates++] = vid;\r\n        }\r\n\r\n        this.vertexBuffers.length = numVertexBuffers;\r\n\r\n        this._statesLength = newNumStates;\r\n        this._isDirty = this._isDirty || newNumStates !== currStateLen;\r\n        if (this._isDirty) {\r\n            this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.VertexState);\r\n        }\r\n    }\r\n\r\n    private _setTextureState(textureState: number): void {\r\n        if (this._textureState !== textureState) {\r\n            this._textureState = textureState;\r\n            this._states[StatePosition.TextureStage] = this._textureState;\r\n            this._isDirty = true;\r\n            this._stateDirtyLowestIndex = Math.min(this._stateDirtyLowestIndex, StatePosition.TextureStage);\r\n        }\r\n    }\r\n\r\n    private _createPipelineLayout(webgpuPipelineContext: WebGPUPipelineContext): GPUPipelineLayout {\r\n        if (this._useTextureStage) {\r\n            return this._createPipelineLayoutWithTextureStage(webgpuPipelineContext);\r\n        }\r\n\r\n        const bindGroupLayouts: GPUBindGroupLayout[] = [];\r\n        const bindGroupLayoutEntries = webgpuPipelineContext.shaderProcessingContext.bindGroupLayoutEntries;\r\n\r\n        for (let i = 0; i < bindGroupLayoutEntries.length; i++) {\r\n            const setDefinition = bindGroupLayoutEntries[i];\r\n\r\n            bindGroupLayouts[i] = this._device.createBindGroupLayout({\r\n                entries: setDefinition,\r\n            });\r\n        }\r\n\r\n        webgpuPipelineContext.bindGroupLayouts = bindGroupLayouts;\r\n\r\n        return this._device.createPipelineLayout({ bindGroupLayouts });\r\n    }\r\n\r\n    private _createPipelineLayoutWithTextureStage(webgpuPipelineContext: WebGPUPipelineContext): GPUPipelineLayout {\r\n        const shaderProcessingContext = webgpuPipelineContext.shaderProcessingContext;\r\n        const bindGroupLayoutEntries = shaderProcessingContext.bindGroupLayoutEntries;\r\n\r\n        let bitVal = 1;\r\n        for (let i = 0; i < bindGroupLayoutEntries.length; i++) {\r\n            const setDefinition = bindGroupLayoutEntries[i];\r\n\r\n            for (let j = 0; j < setDefinition.length; j++) {\r\n                const entry = bindGroupLayoutEntries[i][j];\r\n\r\n                if (entry.texture) {\r\n                    const name = shaderProcessingContext.bindGroupLayoutEntryInfo[i][entry.binding].name;\r\n                    const textureInfo = shaderProcessingContext.availableTextures[name];\r\n                    const samplerInfo = textureInfo.autoBindSampler ? shaderProcessingContext.availableSamplers[name + WebGPUShaderProcessor.AutoSamplerSuffix] : null;\r\n\r\n                    let sampleType = textureInfo.sampleType;\r\n                    let samplerType = samplerInfo?.type ?? WebGPUConstants.SamplerBindingType.Filtering;\r\n\r\n                    if (this._textureState & bitVal && sampleType !== WebGPUConstants.TextureSampleType.Depth) {\r\n                        // The texture is a 32 bits float texture but the system does not support linear filtering for them:\r\n                        // we set the sampler to \"non-filtering\" and the texture sample type to \"unfilterable-float\"\r\n                        if (textureInfo.autoBindSampler) {\r\n                            samplerType = WebGPUConstants.SamplerBindingType.NonFiltering;\r\n                        }\r\n                        sampleType = WebGPUConstants.TextureSampleType.UnfilterableFloat;\r\n                    }\r\n\r\n                    entry.texture!.sampleType = sampleType;\r\n\r\n                    if (samplerInfo) {\r\n                        const binding = shaderProcessingContext.bindGroupLayoutEntryInfo[samplerInfo.binding.groupIndex][samplerInfo.binding.bindingIndex].index;\r\n                        bindGroupLayoutEntries[samplerInfo.binding.groupIndex][binding].sampler!.type = samplerType;\r\n                    }\r\n\r\n                    bitVal = bitVal << 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        const bindGroupLayouts: GPUBindGroupLayout[] = [];\r\n\r\n        for (let i = 0; i < bindGroupLayoutEntries.length; ++i) {\r\n            bindGroupLayouts[i] = this._device.createBindGroupLayout({\r\n                entries: bindGroupLayoutEntries[i],\r\n            });\r\n        }\r\n\r\n        webgpuPipelineContext.bindGroupLayouts = bindGroupLayouts;\r\n\r\n        return this._device.createPipelineLayout({ bindGroupLayouts });\r\n    }\r\n\r\n    private _getVertexInputDescriptor(effect: Effect): GPUVertexBufferLayout[] {\r\n        const descriptors: GPUVertexBufferLayout[] = [];\r\n        const webgpuPipelineContext = effect._pipelineContext as WebGPUPipelineContext;\r\n        const attributes = webgpuPipelineContext.shaderProcessingContext.attributeNamesFromEffect;\r\n        const locations = webgpuPipelineContext.shaderProcessingContext.attributeLocationsFromEffect;\r\n\r\n        let currentGPUBuffer;\r\n        let currentGPUAttributes: GPUVertexAttribute[] | undefined;\r\n        for (let index = 0; index < attributes.length; index++) {\r\n            const location = locations[index];\r\n            let vertexBuffer = (this._overrideVertexBuffers && this._overrideVertexBuffers[attributes[index]]) ?? this._vertexBuffers![attributes[index]];\r\n            if (!vertexBuffer) {\r\n                // In WebGL it's valid to not bind a vertex buffer to an attribute, but it's not valid in WebGPU\r\n                // So we must bind a dummy buffer when we are not given one for a specific attribute\r\n                vertexBuffer = this._emptyVertexBuffer;\r\n            }\r\n\r\n            let buffer = vertexBuffer.getBuffer()?.underlyingResource;\r\n\r\n            // We reuse the same GPUVertexBufferLayout for all attributes that use the same underlying GPU buffer (and for attributes that follow each other in the attributes array)\r\n            let offset = vertexBuffer.byteOffset;\r\n            const invalidOffsetRange = !vertexBuffer._validOffsetRange;\r\n            if (!(currentGPUBuffer && currentGPUAttributes && currentGPUBuffer === buffer) || invalidOffsetRange) {\r\n                const vertexBufferDescriptor: GPUVertexBufferLayout = {\r\n                    arrayStride: vertexBuffer.byteStride,\r\n                    stepMode: vertexBuffer.getIsInstanced() ? WebGPUConstants.InputStepMode.Instance : WebGPUConstants.InputStepMode.Vertex,\r\n                    attributes: [],\r\n                };\r\n\r\n                descriptors.push(vertexBufferDescriptor);\r\n                currentGPUAttributes = vertexBufferDescriptor.attributes;\r\n                if (invalidOffsetRange) {\r\n                    offset = 0; // the offset will be set directly in the setVertexBuffer call\r\n                    buffer = null; // buffer can't be reused\r\n                }\r\n            }\r\n\r\n            currentGPUAttributes.push({\r\n                shaderLocation: location,\r\n                offset,\r\n                format: WebGPUCacheRenderPipeline._GetVertexInputDescriptorFormat(vertexBuffer),\r\n            });\r\n\r\n            currentGPUBuffer = buffer;\r\n        }\r\n\r\n        return descriptors;\r\n    }\r\n\r\n    private _createRenderPipeline(effect: Effect, topology: GPUPrimitiveTopology, sampleCount: number): GPURenderPipeline {\r\n        const webgpuPipelineContext = effect._pipelineContext as WebGPUPipelineContext;\r\n        const inputStateDescriptor = this._getVertexInputDescriptor(effect);\r\n        const pipelineLayout = this._createPipelineLayout(webgpuPipelineContext);\r\n\r\n        const colorStates: Array<GPUColorTargetState> = [];\r\n        const alphaBlend = this._getAphaBlendState();\r\n        const colorBlend = this._getColorBlendState();\r\n\r\n        if (this._mrtAttachments1 > 0) {\r\n            for (let i = 0; i < this._mrtFormats.length; ++i) {\r\n                const descr: GPUColorTargetState = {\r\n                    format: this._mrtFormats[i],\r\n                    writeMask: (this._mrtEnabledMask & (1 << i)) !== 0 ? this._writeMask : 0,\r\n                };\r\n                if (alphaBlend && colorBlend) {\r\n                    descr.blend = {\r\n                        alpha: alphaBlend,\r\n                        color: colorBlend,\r\n                    };\r\n                }\r\n                colorStates.push(descr);\r\n            }\r\n        } else {\r\n            const descr: GPUColorTargetState = {\r\n                format: this._webgpuColorFormat[0],\r\n                writeMask: this._writeMask,\r\n            };\r\n            if (alphaBlend && colorBlend) {\r\n                descr.blend = {\r\n                    alpha: alphaBlend,\r\n                    color: colorBlend,\r\n                };\r\n            }\r\n            colorStates.push(descr);\r\n        }\r\n\r\n        const stencilFrontBack: GPUStencilStateFace = {\r\n            compare: WebGPUCacheRenderPipeline._GetCompareFunction(this._stencilEnabled ? this._stencilFrontCompare : 7 /* ALWAYS */),\r\n            depthFailOp: WebGPUCacheRenderPipeline._GetStencilOpFunction(this._stencilEnabled ? this._stencilFrontDepthFailOp : 1 /* KEEP */),\r\n            failOp: WebGPUCacheRenderPipeline._GetStencilOpFunction(this._stencilEnabled ? this._stencilFrontFailOp : 1 /* KEEP */),\r\n            passOp: WebGPUCacheRenderPipeline._GetStencilOpFunction(this._stencilEnabled ? this._stencilFrontPassOp : 1 /* KEEP */),\r\n        };\r\n\r\n        let stripIndexFormat: GPUIndexFormat | undefined = undefined;\r\n        if (topology === WebGPUConstants.PrimitiveTopology.LineStrip || topology === WebGPUConstants.PrimitiveTopology.TriangleStrip) {\r\n            stripIndexFormat = !this._indexBuffer || this._indexBuffer.is32Bits ? WebGPUConstants.IndexFormat.Uint32 : WebGPUConstants.IndexFormat.Uint16;\r\n        }\r\n\r\n        const depthStencilFormatHasStencil = this._webgpuDepthStencilFormat ? WebGPUTextureHelper.HasStencilAspect(this._webgpuDepthStencilFormat) : false;\r\n\r\n        return this._device.createRenderPipeline({\r\n            layout: pipelineLayout,\r\n            vertex: {\r\n                module: webgpuPipelineContext.stages!.vertexStage.module,\r\n                entryPoint: webgpuPipelineContext.stages!.vertexStage.entryPoint,\r\n                buffers: inputStateDescriptor,\r\n            },\r\n            primitive: {\r\n                topology,\r\n                stripIndexFormat,\r\n                frontFace: this._frontFace === 1 ? WebGPUConstants.FrontFace.CCW : WebGPUConstants.FrontFace.CW,\r\n                cullMode: !this._cullEnabled ? WebGPUConstants.CullMode.None : this._cullFace === 2 ? WebGPUConstants.CullMode.Front : WebGPUConstants.CullMode.Back,\r\n            },\r\n            fragment: !webgpuPipelineContext.stages!.fragmentStage\r\n                ? undefined\r\n                : {\r\n                      module: webgpuPipelineContext.stages!.fragmentStage.module,\r\n                      entryPoint: webgpuPipelineContext.stages!.fragmentStage.entryPoint,\r\n                      targets: colorStates,\r\n                  },\r\n\r\n            multisample: {\r\n                count: sampleCount,\r\n                /*mask,\r\n                alphaToCoverageEnabled,*/\r\n            },\r\n            depthStencil:\r\n                this._webgpuDepthStencilFormat === undefined\r\n                    ? undefined\r\n                    : {\r\n                          depthWriteEnabled: this._depthWriteEnabled,\r\n                          depthCompare: this._depthTestEnabled ? WebGPUCacheRenderPipeline._GetCompareFunction(this._depthCompare) : WebGPUConstants.CompareFunction.Always,\r\n                          format: this._webgpuDepthStencilFormat,\r\n                          stencilFront: this._stencilEnabled && depthStencilFormatHasStencil ? stencilFrontBack : undefined,\r\n                          stencilBack: this._stencilEnabled && depthStencilFormatHasStencil ? stencilFrontBack : undefined,\r\n                          stencilReadMask: this._stencilEnabled && depthStencilFormatHasStencil ? this._stencilReadMask : undefined,\r\n                          stencilWriteMask: this._stencilEnabled && depthStencilFormatHasStencil ? this._stencilWriteMask : undefined,\r\n                          depthBias: this._depthBias,\r\n                          depthBiasClamp: this._depthBiasClamp,\r\n                          depthBiasSlopeScale: this._depthBiasSlopeScale,\r\n                      },\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}