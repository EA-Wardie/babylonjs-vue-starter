{"ast":null,"code":"import \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport { Effect } from \"./effect.js\";\nimport { RandomGUID } from \"../Misc/guid.js\";\nimport { DrawWrapper } from \"./drawWrapper.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\n\nvar MapMap =\n/** @class */\nfunction () {\n  function MapMap() {\n    this.mm = new Map();\n  }\n\n  MapMap.prototype.get = function (a, b) {\n    var m = this.mm.get(a);\n\n    if (m !== undefined) {\n      return m.get(b);\n    }\n\n    return undefined;\n  };\n\n  MapMap.prototype.set = function (a, b, v) {\n    var m = this.mm.get(a);\n\n    if (m === undefined) {\n      this.mm.set(a, m = new Map());\n    }\n\n    m.set(b, v);\n  };\n\n  return MapMap;\n}();\n/**\n * Class that can be used to wrap a base material to generate accurate shadows when using custom vertex/fragment code in the base material\n */\n\n\nvar ShadowDepthWrapper =\n/** @class */\nfunction () {\n  /**\n   * Instantiate a new shadow depth wrapper.\n   * It works by injecting some specific code in the vertex/fragment shaders of the base material and is used by a shadow generator to\n   * generate the shadow depth map. For more information, please refer to the documentation:\n   * https://doc.babylonjs.com/babylon101/shadows\n   * @param baseMaterial Material to wrap\n   * @param scene Define the scene the material belongs to\n   * @param options Options used to create the wrapper\n   */\n  function ShadowDepthWrapper(baseMaterial, scene, options) {\n    var _this = this;\n\n    this._baseMaterial = baseMaterial;\n    this._scene = scene !== null && scene !== void 0 ? scene : EngineStore.LastCreatedScene;\n    this._options = options;\n    this._subMeshToEffect = new Map();\n    this._subMeshToDepthWrapper = new MapMap();\n    this._meshes = new Map(); // Register for onEffectCreated to store the effect of the base material when it is (re)generated. This effect will be used\n    // to create the depth effect later on\n\n    this._onEffectCreatedObserver = this._baseMaterial.onEffectCreatedObservable.add(function (params) {\n      var _a;\n\n      var mesh = (_a = params.subMesh) === null || _a === void 0 ? void 0 : _a.getMesh();\n\n      if (mesh && !_this._meshes.has(mesh)) {\n        // Register for mesh onDispose to clean up our internal maps when a mesh is disposed\n        _this._meshes.set(mesh, mesh.onDisposeObservable.add(function (mesh) {\n          var iterator = _this._subMeshToEffect.keys();\n\n          for (var key = iterator.next(); key.done !== true; key = iterator.next()) {\n            var subMesh = key.value;\n\n            if ((subMesh === null || subMesh === void 0 ? void 0 : subMesh.getMesh()) === mesh) {\n              _this._subMeshToEffect[\"delete\"](subMesh);\n\n              _this._subMeshToDepthWrapper.mm[\"delete\"](subMesh);\n            }\n          }\n        }));\n      }\n\n      _this._subMeshToEffect.set(params.subMesh, [params.effect, _this._scene.getEngine().currentRenderPassId]);\n\n      _this._subMeshToDepthWrapper.mm[\"delete\"](params.subMesh); // trigger a depth effect recreation\n\n    });\n  }\n\n  Object.defineProperty(ShadowDepthWrapper.prototype, \"standalone\", {\n    /** Gets the standalone status of the wrapper */\n    get: function get() {\n      var _a, _b;\n\n      return (_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.standalone) !== null && _b !== void 0 ? _b : false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ShadowDepthWrapper.prototype, \"baseMaterial\", {\n    /** Gets the base material the wrapper is built upon */\n    get: function get() {\n      return this._baseMaterial;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Gets the effect to use to generate the depth map\n   * @param subMesh subMesh to get the effect for\n   * @param shadowGenerator shadow generator to get the effect for\n   * @param passIdForDrawWrapper Id of the pass for which the effect from the draw wrapper must be retrieved from\n   * @returns the effect to use to generate the depth map for the subMesh + shadow generator specified\n   */\n\n  ShadowDepthWrapper.prototype.getEffect = function (subMesh, shadowGenerator, passIdForDrawWrapper) {\n    var _a;\n\n    var entry = (_a = this._subMeshToDepthWrapper.mm.get(subMesh)) === null || _a === void 0 ? void 0 : _a.get(shadowGenerator);\n\n    if (!entry) {\n      return null;\n    }\n\n    var drawWrapper = entry.drawWrapper[passIdForDrawWrapper];\n\n    if (!drawWrapper) {\n      drawWrapper = entry.drawWrapper[passIdForDrawWrapper] = new DrawWrapper(this._scene.getEngine());\n      drawWrapper.setEffect(entry.mainDrawWrapper.effect, entry.mainDrawWrapper.defines);\n    }\n\n    return drawWrapper;\n  };\n  /**\n   * Specifies that the submesh is ready to be used for depth rendering\n   * @param subMesh submesh to check\n   * @param defines the list of defines to take into account when checking the effect\n   * @param shadowGenerator combined with subMesh, it defines the effect to check\n   * @param useInstances specifies that instances should be used\n   * @param passIdForDrawWrapper Id of the pass for which the draw wrapper should be created\n   * @returns a boolean indicating that the submesh is ready or not\n   */\n\n\n  ShadowDepthWrapper.prototype.isReadyForSubMesh = function (subMesh, defines, shadowGenerator, useInstances, passIdForDrawWrapper) {\n    var _a, _b;\n\n    if (this.standalone) {\n      // will ensure the effect is (re)created for the base material\n      if (!this._baseMaterial.isReadyForSubMesh(subMesh.getMesh(), subMesh, useInstances)) {\n        return false;\n      }\n    }\n\n    return (_b = (_a = this._makeEffect(subMesh, defines, shadowGenerator, passIdForDrawWrapper)) === null || _a === void 0 ? void 0 : _a.isReady()) !== null && _b !== void 0 ? _b : false;\n  };\n  /**\n   * Disposes the resources\n   */\n\n\n  ShadowDepthWrapper.prototype.dispose = function () {\n    this._baseMaterial.onEffectCreatedObservable.remove(this._onEffectCreatedObserver);\n\n    this._onEffectCreatedObserver = null;\n\n    var iterator = this._meshes.entries();\n\n    for (var entry = iterator.next(); entry.done !== true; entry = iterator.next()) {\n      var _a = entry.value,\n          mesh = _a[0],\n          observer = _a[1];\n      mesh.onDisposeObservable.remove(observer);\n    }\n  };\n\n  ShadowDepthWrapper.prototype._makeEffect = function (subMesh, defines, shadowGenerator, passIdForDrawWrapper) {\n    var _a, _b, _c;\n\n    var engine = this._scene.getEngine();\n\n    var origEffectAndRenderPassId = this._subMeshToEffect.get(subMesh);\n\n    if (!origEffectAndRenderPassId) {\n      return null;\n    }\n\n    var origEffect = origEffectAndRenderPassId[0],\n        origRenderPassId = origEffectAndRenderPassId[1];\n\n    var params = this._subMeshToDepthWrapper.get(subMesh, shadowGenerator);\n\n    if (!params) {\n      var mainDrawWrapper = new DrawWrapper(engine);\n      mainDrawWrapper.defines = (_b = (_a = subMesh._getDrawWrapper(origRenderPassId)) === null || _a === void 0 ? void 0 : _a.defines) !== null && _b !== void 0 ? _b : null;\n      params = {\n        drawWrapper: [],\n        mainDrawWrapper: mainDrawWrapper,\n        depthDefines: \"\",\n        token: RandomGUID()\n      };\n      params.drawWrapper[passIdForDrawWrapper] = mainDrawWrapper;\n\n      this._subMeshToDepthWrapper.set(subMesh, shadowGenerator, params);\n    }\n\n    var join = defines.join(\"\\n\");\n\n    if (params.mainDrawWrapper.effect) {\n      if (join === params.depthDefines) {\n        // we already created the depth effect and it is still up to date for this submesh + shadow generator\n        return params.mainDrawWrapper.effect;\n      }\n    }\n\n    params.depthDefines = join; // the depth effect is either out of date or has not been created yet\n\n    var vertexCode = origEffect.rawVertexSourceCode,\n        fragmentCode = origEffect.rawFragmentSourceCode; // vertex code\n\n    var vertexNormalBiasCode = this._options && this._options.remappedVariables ? \"#include<shadowMapVertexNormalBias>(\".concat(this._options.remappedVariables.join(\",\"), \")\") : Effect.IncludesShadersStore[\"shadowMapVertexNormalBias\"],\n        vertexMetricCode = this._options && this._options.remappedVariables ? \"#include<shadowMapVertexMetric>(\".concat(this._options.remappedVariables.join(\",\"), \")\") : Effect.IncludesShadersStore[\"shadowMapVertexMetric\"],\n        fragmentSoftTransparentShadow = this._options && this._options.remappedVariables ? \"#include<shadowMapFragmentSoftTransparentShadow>(\".concat(this._options.remappedVariables.join(\",\"), \")\") : Effect.IncludesShadersStore[\"shadowMapFragmentSoftTransparentShadow\"],\n        fragmentBlockCode = Effect.IncludesShadersStore[\"shadowMapFragment\"];\n    vertexCode = vertexCode.replace(/void\\s+?main/g, Effect.IncludesShadersStore[\"shadowMapVertexExtraDeclaration\"] + \"\\r\\nvoid main\");\n    vertexCode = vertexCode.replace(/#define SHADOWDEPTH_NORMALBIAS|#define CUSTOM_VERTEX_UPDATE_WORLDPOS/g, vertexNormalBiasCode);\n\n    if (vertexCode.indexOf(\"#define SHADOWDEPTH_METRIC\") !== -1) {\n      vertexCode = vertexCode.replace(/#define SHADOWDEPTH_METRIC/g, vertexMetricCode);\n    } else {\n      vertexCode = vertexCode.replace(/}\\s*$/g, vertexMetricCode + \"\\r\\n}\");\n    }\n\n    vertexCode = vertexCode.replace(/#define SHADER_NAME.*?\\n|out vec4 glFragColor;\\n/g, \"\"); // fragment code\n\n    var hasLocationForSoftTransparentShadow = fragmentCode.indexOf(\"#define SHADOWDEPTH_SOFTTRANSPARENTSHADOW\") >= 0 || fragmentCode.indexOf(\"#define CUSTOM_FRAGMENT_BEFORE_FOG\") >= 0;\n    var hasLocationForFragment = fragmentCode.indexOf(\"#define SHADOWDEPTH_FRAGMENT\") !== -1;\n    var fragmentCodeToInjectAtEnd = \"\";\n\n    if (!hasLocationForSoftTransparentShadow) {\n      fragmentCodeToInjectAtEnd = fragmentSoftTransparentShadow + \"\\r\\n\";\n    } else {\n      fragmentCode = fragmentCode.replace(/#define SHADOWDEPTH_SOFTTRANSPARENTSHADOW|#define CUSTOM_FRAGMENT_BEFORE_FOG/g, fragmentSoftTransparentShadow);\n    }\n\n    fragmentCode = fragmentCode.replace(/void\\s+?main/g, Effect.IncludesShadersStore[\"shadowMapFragmentExtraDeclaration\"] + \"\\r\\nvoid main\");\n\n    if (hasLocationForFragment) {\n      fragmentCode = fragmentCode.replace(/#define SHADOWDEPTH_FRAGMENT/g, fragmentBlockCode);\n    } else {\n      fragmentCodeToInjectAtEnd += fragmentBlockCode + \"\\r\\n\";\n    }\n\n    if (fragmentCodeToInjectAtEnd) {\n      fragmentCode = fragmentCode.replace(/}\\s*$/g, fragmentCodeToInjectAtEnd + \"}\");\n    }\n\n    fragmentCode = fragmentCode.replace(/#define SHADER_NAME.*?\\n|out vec4 glFragColor;\\n/g, \"\");\n    var uniforms = origEffect.getUniformNames().slice();\n    uniforms.push(\"biasAndScaleSM\", \"depthValuesSM\", \"lightDataSM\", \"softTransparentShadowSM\");\n    params.mainDrawWrapper.effect = engine.createEffect({\n      vertexSource: vertexCode,\n      fragmentSource: fragmentCode,\n      vertexToken: params.token,\n      fragmentToken: params.token\n    }, {\n      attributes: origEffect.getAttributesNames(),\n      uniformsNames: uniforms,\n      uniformBuffersNames: origEffect.getUniformBuffersNames(),\n      samplers: origEffect.getSamplers(),\n      defines: join + \"\\n\" + origEffect.defines.replace(\"#define SHADOWS\", \"\").replace(/#define SHADOW\\d/g, \"\"),\n      indexParameters: origEffect.getIndexParameters()\n    }, engine);\n\n    for (var id = 0; id < params.drawWrapper.length; ++id) {\n      if (id !== passIdForDrawWrapper) {\n        (_c = params.drawWrapper[id]) === null || _c === void 0 ? void 0 : _c.setEffect(params.mainDrawWrapper.effect, params.mainDrawWrapper.defines);\n      }\n    }\n\n    return params.mainDrawWrapper.effect;\n  };\n\n  return ShadowDepthWrapper;\n}();\n\nexport { ShadowDepthWrapper };","map":{"version":3,"mappings":"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","names":["Effect","RandomGUID","DrawWrapper","EngineStore","Map","MapMap","a","b","m","mm","get","undefined","v","set","baseMaterial","scene","options","_baseMaterial","_scene","LastCreatedScene","_options","_subMeshToEffect","_subMeshToDepthWrapper","_meshes","_onEffectCreatedObserver","onEffectCreatedObservable","add","params","mesh","subMesh","_a","getMesh","_this","has","onDisposeObservable","iterator","keys","key","next","done","value","effect","getEngine","currentRenderPassId","Object","ShadowDepthWrapper","standalone","_b","shadowGenerator","passIdForDrawWrapper","entry","drawWrapper","setEffect","mainDrawWrapper","defines","useInstances","isReadyForSubMesh","_makeEffect","isReady","remove","entries","observer","engine","origEffectAndRenderPassId","origRenderPassId","_getDrawWrapper","depthDefines","token","join","vertexCode","origEffect","rawVertexSourceCode","fragmentCode","rawFragmentSourceCode","vertexNormalBiasCode","remappedVariables","IncludesShadersStore","vertexMetricCode","fragmentSoftTransparentShadow","fragmentBlockCode","replace","indexOf","hasLocationForSoftTransparentShadow","hasLocationForFragment","fragmentCodeToInjectAtEnd","uniforms","getUniformNames","slice","push","createEffect","vertexSource","fragmentSource","vertexToken","fragmentToken","attributes","getAttributesNames","uniformsNames","uniformBuffersNames","getUniformBuffersNames","samplers","getSamplers","indexParameters","getIndexParameters","id","length","_c"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Materials/shadowDepthWrapper.ts"],"sourcesContent":["import type { Observer } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { Material } from \"./material\";\r\nimport type { IEffectCreationOptions } from \"./effect\";\r\nimport { Effect } from \"./effect\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Node } from \"../node\";\r\nimport type { ShadowGenerator } from \"../Lights/Shadows/shadowGenerator\";\r\nimport { RandomGUID } from \"../Misc/guid\";\r\nimport { DrawWrapper } from \"./drawWrapper\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\n\r\n/**\r\n * Options to be used when creating a shadow depth material\r\n */\r\nexport interface IIOptionShadowDepthMaterial {\r\n    /** Variables in the vertex shader code that need to have their names remapped.\r\n     * The format is: [\"var_name\", \"var_remapped_name\", \"var_name\", \"var_remapped_name\", ...]\r\n     * \"var_name\" should be either: worldPos or vNormalW\r\n     * So, if the variable holding the world position in your vertex shader is not named worldPos, you must tell the system\r\n     * the name to use instead by using: [\"worldPos\", \"myWorldPosVar\"] assuming the variable is named myWorldPosVar in your code.\r\n     * If the normal must also be remapped: [\"worldPos\", \"myWorldPosVar\", \"vNormalW\", \"myWorldNormal\"]\r\n     */\r\n    remappedVariables?: string[];\r\n\r\n    /** Set standalone to true if the base material wrapped by ShadowDepthMaterial is not used for a regular object but for depth shadow generation only */\r\n    standalone?: boolean;\r\n}\r\n\r\nclass MapMap<Ka, Kb, V> {\r\n    readonly mm = new Map<Ka, Map<Kb, V>>();\r\n\r\n    get(a: Ka, b: Kb): V | undefined {\r\n        const m = this.mm.get(a);\r\n        if (m !== undefined) {\r\n            return m.get(b);\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    set(a: Ka, b: Kb, v: V): void {\r\n        let m = this.mm.get(a);\r\n        if (m === undefined) {\r\n            this.mm.set(a, (m = new Map()));\r\n        }\r\n        m.set(b, v);\r\n    }\r\n}\r\n\r\n/**\r\n * Class that can be used to wrap a base material to generate accurate shadows when using custom vertex/fragment code in the base material\r\n */\r\nexport class ShadowDepthWrapper {\r\n    private _scene: Scene;\r\n    private _options?: IIOptionShadowDepthMaterial;\r\n    private _baseMaterial: Material;\r\n    private _onEffectCreatedObserver: Nullable<Observer<{ effect: Effect; subMesh: Nullable<SubMesh> }>>;\r\n    private _subMeshToEffect: Map<Nullable<SubMesh>, [Effect, number]>;\r\n    private _subMeshToDepthWrapper: MapMap<\r\n        Nullable<SubMesh>,\r\n        ShadowGenerator,\r\n        { drawWrapper: Array<Nullable<DrawWrapper>>; mainDrawWrapper: DrawWrapper; depthDefines: string; token: string }\r\n    >; // key is (subMesh + shadowGenerator)\r\n    private _meshes: Map<AbstractMesh, Nullable<Observer<Node>>>;\r\n\r\n    /** Gets the standalone status of the wrapper */\r\n    public get standalone(): boolean {\r\n        return this._options?.standalone ?? false;\r\n    }\r\n\r\n    /** Gets the base material the wrapper is built upon */\r\n    public get baseMaterial(): Material {\r\n        return this._baseMaterial;\r\n    }\r\n\r\n    /**\r\n     * Instantiate a new shadow depth wrapper.\r\n     * It works by injecting some specific code in the vertex/fragment shaders of the base material and is used by a shadow generator to\r\n     * generate the shadow depth map. For more information, please refer to the documentation:\r\n     * https://doc.babylonjs.com/babylon101/shadows\r\n     * @param baseMaterial Material to wrap\r\n     * @param scene Define the scene the material belongs to\r\n     * @param options Options used to create the wrapper\r\n     */\r\n    constructor(baseMaterial: Material, scene?: Scene, options?: IIOptionShadowDepthMaterial) {\r\n        this._baseMaterial = baseMaterial;\r\n        this._scene = scene ?? <Scene>EngineStore.LastCreatedScene;\r\n        this._options = options;\r\n\r\n        this._subMeshToEffect = new Map();\r\n        this._subMeshToDepthWrapper = new MapMap();\r\n        this._meshes = new Map();\r\n\r\n        // Register for onEffectCreated to store the effect of the base material when it is (re)generated. This effect will be used\r\n        // to create the depth effect later on\r\n        this._onEffectCreatedObserver = this._baseMaterial.onEffectCreatedObservable.add((params: { effect: Effect; subMesh: Nullable<SubMesh> }) => {\r\n            const mesh = params.subMesh?.getMesh();\r\n\r\n            if (mesh && !this._meshes.has(mesh)) {\r\n                // Register for mesh onDispose to clean up our internal maps when a mesh is disposed\r\n                this._meshes.set(\r\n                    mesh,\r\n                    mesh.onDisposeObservable.add((mesh: Node) => {\r\n                        const iterator = this._subMeshToEffect.keys();\r\n                        for (let key = iterator.next(); key.done !== true; key = iterator.next()) {\r\n                            const subMesh = key.value;\r\n                            if (subMesh?.getMesh() === (mesh as AbstractMesh)) {\r\n                                this._subMeshToEffect.delete(subMesh);\r\n                                this._subMeshToDepthWrapper.mm.delete(subMesh);\r\n                            }\r\n                        }\r\n                    })\r\n                );\r\n            }\r\n\r\n            this._subMeshToEffect.set(params.subMesh, [params.effect, this._scene.getEngine().currentRenderPassId]);\r\n            this._subMeshToDepthWrapper.mm.delete(params.subMesh); // trigger a depth effect recreation\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the effect to use to generate the depth map\r\n     * @param subMesh subMesh to get the effect for\r\n     * @param shadowGenerator shadow generator to get the effect for\r\n     * @param passIdForDrawWrapper Id of the pass for which the effect from the draw wrapper must be retrieved from\r\n     * @returns the effect to use to generate the depth map for the subMesh + shadow generator specified\r\n     */\r\n    public getEffect(subMesh: Nullable<SubMesh>, shadowGenerator: ShadowGenerator, passIdForDrawWrapper: number): Nullable<DrawWrapper> {\r\n        const entry = this._subMeshToDepthWrapper.mm.get(subMesh)?.get(shadowGenerator);\r\n        if (!entry) {\r\n            return null;\r\n        }\r\n        let drawWrapper = entry.drawWrapper[passIdForDrawWrapper];\r\n        if (!drawWrapper) {\r\n            drawWrapper = entry.drawWrapper[passIdForDrawWrapper] = new DrawWrapper(this._scene.getEngine());\r\n            drawWrapper.setEffect(entry.mainDrawWrapper.effect, entry.mainDrawWrapper.defines);\r\n        }\r\n\r\n        return drawWrapper;\r\n    }\r\n\r\n    /**\r\n     * Specifies that the submesh is ready to be used for depth rendering\r\n     * @param subMesh submesh to check\r\n     * @param defines the list of defines to take into account when checking the effect\r\n     * @param shadowGenerator combined with subMesh, it defines the effect to check\r\n     * @param useInstances specifies that instances should be used\r\n     * @param passIdForDrawWrapper Id of the pass for which the draw wrapper should be created\r\n     * @returns a boolean indicating that the submesh is ready or not\r\n     */\r\n    public isReadyForSubMesh(subMesh: SubMesh, defines: string[], shadowGenerator: ShadowGenerator, useInstances: boolean, passIdForDrawWrapper: number): boolean {\r\n        if (this.standalone) {\r\n            // will ensure the effect is (re)created for the base material\r\n            if (!this._baseMaterial.isReadyForSubMesh(subMesh.getMesh(), subMesh, useInstances)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return this._makeEffect(subMesh, defines, shadowGenerator, passIdForDrawWrapper)?.isReady() ?? false;\r\n    }\r\n\r\n    /**\r\n     * Disposes the resources\r\n     */\r\n    public dispose(): void {\r\n        this._baseMaterial.onEffectCreatedObservable.remove(this._onEffectCreatedObserver);\r\n        this._onEffectCreatedObserver = null;\r\n\r\n        const iterator = this._meshes.entries();\r\n        for (let entry = iterator.next(); entry.done !== true; entry = iterator.next()) {\r\n            const [mesh, observer] = entry.value;\r\n\r\n            mesh.onDisposeObservable.remove(observer);\r\n        }\r\n    }\r\n\r\n    private _makeEffect(subMesh: SubMesh, defines: string[], shadowGenerator: ShadowGenerator, passIdForDrawWrapper: number): Nullable<Effect> {\r\n        const engine = this._scene.getEngine();\r\n        const origEffectAndRenderPassId = this._subMeshToEffect.get(subMesh);\r\n\r\n        if (!origEffectAndRenderPassId) {\r\n            return null;\r\n        }\r\n\r\n        const [origEffect, origRenderPassId] = origEffectAndRenderPassId;\r\n\r\n        let params = this._subMeshToDepthWrapper.get(subMesh, shadowGenerator);\r\n        if (!params) {\r\n            const mainDrawWrapper = new DrawWrapper(engine);\r\n            mainDrawWrapper.defines = subMesh._getDrawWrapper(origRenderPassId)?.defines ?? null;\r\n\r\n            params = {\r\n                drawWrapper: [],\r\n                mainDrawWrapper,\r\n                depthDefines: \"\",\r\n                token: RandomGUID(),\r\n            };\r\n            params.drawWrapper[passIdForDrawWrapper] = mainDrawWrapper;\r\n            this._subMeshToDepthWrapper.set(subMesh, shadowGenerator, params);\r\n        }\r\n\r\n        const join = defines.join(\"\\n\");\r\n\r\n        if (params.mainDrawWrapper.effect) {\r\n            if (join === params.depthDefines) {\r\n                // we already created the depth effect and it is still up to date for this submesh + shadow generator\r\n                return params.mainDrawWrapper.effect;\r\n            }\r\n        }\r\n\r\n        params.depthDefines = join;\r\n\r\n        // the depth effect is either out of date or has not been created yet\r\n        let vertexCode = origEffect.rawVertexSourceCode,\r\n            fragmentCode = origEffect.rawFragmentSourceCode;\r\n\r\n        // vertex code\r\n        const vertexNormalBiasCode =\r\n                this._options && this._options.remappedVariables\r\n                    ? `#include<shadowMapVertexNormalBias>(${this._options.remappedVariables.join(\",\")})`\r\n                    : Effect.IncludesShadersStore[\"shadowMapVertexNormalBias\"],\r\n            vertexMetricCode =\r\n                this._options && this._options.remappedVariables\r\n                    ? `#include<shadowMapVertexMetric>(${this._options.remappedVariables.join(\",\")})`\r\n                    : Effect.IncludesShadersStore[\"shadowMapVertexMetric\"],\r\n            fragmentSoftTransparentShadow =\r\n                this._options && this._options.remappedVariables\r\n                    ? `#include<shadowMapFragmentSoftTransparentShadow>(${this._options.remappedVariables.join(\",\")})`\r\n                    : Effect.IncludesShadersStore[\"shadowMapFragmentSoftTransparentShadow\"],\r\n            fragmentBlockCode = Effect.IncludesShadersStore[\"shadowMapFragment\"];\r\n\r\n        vertexCode = vertexCode.replace(/void\\s+?main/g, Effect.IncludesShadersStore[\"shadowMapVertexExtraDeclaration\"] + \"\\r\\nvoid main\");\r\n        vertexCode = vertexCode.replace(/#define SHADOWDEPTH_NORMALBIAS|#define CUSTOM_VERTEX_UPDATE_WORLDPOS/g, vertexNormalBiasCode);\r\n\r\n        if (vertexCode.indexOf(\"#define SHADOWDEPTH_METRIC\") !== -1) {\r\n            vertexCode = vertexCode.replace(/#define SHADOWDEPTH_METRIC/g, vertexMetricCode);\r\n        } else {\r\n            vertexCode = vertexCode.replace(/}\\s*$/g, vertexMetricCode + \"\\r\\n}\");\r\n        }\r\n        vertexCode = vertexCode.replace(/#define SHADER_NAME.*?\\n|out vec4 glFragColor;\\n/g, \"\");\r\n\r\n        // fragment code\r\n        const hasLocationForSoftTransparentShadow =\r\n            fragmentCode.indexOf(\"#define SHADOWDEPTH_SOFTTRANSPARENTSHADOW\") >= 0 || fragmentCode.indexOf(\"#define CUSTOM_FRAGMENT_BEFORE_FOG\") >= 0;\r\n        const hasLocationForFragment = fragmentCode.indexOf(\"#define SHADOWDEPTH_FRAGMENT\") !== -1;\r\n\r\n        let fragmentCodeToInjectAtEnd = \"\";\r\n\r\n        if (!hasLocationForSoftTransparentShadow) {\r\n            fragmentCodeToInjectAtEnd = fragmentSoftTransparentShadow + \"\\r\\n\";\r\n        } else {\r\n            fragmentCode = fragmentCode.replace(/#define SHADOWDEPTH_SOFTTRANSPARENTSHADOW|#define CUSTOM_FRAGMENT_BEFORE_FOG/g, fragmentSoftTransparentShadow);\r\n        }\r\n\r\n        fragmentCode = fragmentCode.replace(/void\\s+?main/g, Effect.IncludesShadersStore[\"shadowMapFragmentExtraDeclaration\"] + \"\\r\\nvoid main\");\r\n\r\n        if (hasLocationForFragment) {\r\n            fragmentCode = fragmentCode.replace(/#define SHADOWDEPTH_FRAGMENT/g, fragmentBlockCode);\r\n        } else {\r\n            fragmentCodeToInjectAtEnd += fragmentBlockCode + \"\\r\\n\";\r\n        }\r\n        if (fragmentCodeToInjectAtEnd) {\r\n            fragmentCode = fragmentCode.replace(/}\\s*$/g, fragmentCodeToInjectAtEnd + \"}\");\r\n        }\r\n\r\n        fragmentCode = fragmentCode.replace(/#define SHADER_NAME.*?\\n|out vec4 glFragColor;\\n/g, \"\");\r\n\r\n        const uniforms = origEffect.getUniformNames().slice();\r\n\r\n        uniforms.push(\"biasAndScaleSM\", \"depthValuesSM\", \"lightDataSM\", \"softTransparentShadowSM\");\r\n\r\n        params.mainDrawWrapper.effect = engine.createEffect(\r\n            {\r\n                vertexSource: vertexCode,\r\n                fragmentSource: fragmentCode,\r\n                vertexToken: params.token,\r\n                fragmentToken: params.token,\r\n            },\r\n            <IEffectCreationOptions>{\r\n                attributes: origEffect.getAttributesNames(),\r\n                uniformsNames: uniforms,\r\n                uniformBuffersNames: origEffect.getUniformBuffersNames(),\r\n                samplers: origEffect.getSamplers(),\r\n                defines: join + \"\\n\" + origEffect.defines.replace(\"#define SHADOWS\", \"\").replace(/#define SHADOW\\d/g, \"\"),\r\n                indexParameters: origEffect.getIndexParameters(),\r\n            },\r\n            engine\r\n        );\r\n\r\n        for (let id = 0; id < params.drawWrapper.length; ++id) {\r\n            if (id !== passIdForDrawWrapper) {\r\n                params.drawWrapper[id]?.setEffect(params.mainDrawWrapper.effect, params.mainDrawWrapper.defines);\r\n            }\r\n        }\r\n        return params.mainDrawWrapper.effect;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}