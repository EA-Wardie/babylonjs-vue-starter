{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport { __extends } from \"tslib\";\nimport { WebXRFeaturesManager, WebXRFeatureName } from \"../webXRFeaturesManager.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { Vector3, Matrix } from \"../../Maths/math.vector.js\";\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature.js\";\nvar planeIdProvider = 0;\n/**\n * The plane detector is used to detect planes in the real world when in AR\n * For more information see https://github.com/immersive-web/real-world-geometry/\n */\n\nvar WebXRPlaneDetector =\n/** @class */\nfunction (_super) {\n  __extends(WebXRPlaneDetector, _super);\n  /**\n   * construct a new Plane Detector\n   * @param _xrSessionManager an instance of xr Session manager\n   * @param _options configuration to use when constructing this feature\n   */\n\n\n  function WebXRPlaneDetector(_xrSessionManager, _options) {\n    if (_options === void 0) {\n      _options = {};\n    }\n\n    var _this = _super.call(this, _xrSessionManager) || this;\n\n    _this._options = _options;\n    _this._detectedPlanes = [];\n    _this._enabled = false;\n    _this._lastFrameDetected = new Set();\n    /**\n     * Observers registered here will be executed when a new plane was added to the session\n     */\n\n    _this.onPlaneAddedObservable = new Observable();\n    /**\n     * Observers registered here will be executed when a plane is no longer detected in the session\n     */\n\n    _this.onPlaneRemovedObservable = new Observable();\n    /**\n     * Observers registered here will be executed when an existing plane updates (for example - expanded)\n     * This can execute N times every frame\n     */\n\n    _this.onPlaneUpdatedObservable = new Observable();\n    _this.xrNativeFeatureName = \"plane-detection\";\n\n    if (_this._xrSessionManager.session) {\n      _this._init();\n    } else {\n      _this._xrSessionManager.onXRSessionInit.addOnce(function () {\n        _this._init();\n      });\n    }\n\n    return _this;\n  }\n  /**\n   * detach this feature.\n   * Will usually be called by the features manager\n   *\n   * @returns true if successful.\n   */\n\n\n  WebXRPlaneDetector.prototype.detach = function () {\n    if (!_super.prototype.detach.call(this)) {\n      return false;\n    }\n\n    if (!this._options.doNotRemovePlanesOnSessionEnded) {\n      while (this._detectedPlanes.length) {\n        var toRemove = this._detectedPlanes.pop();\n\n        if (toRemove) {\n          this.onPlaneRemovedObservable.notifyObservers(toRemove);\n        }\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Dispose this feature and all of the resources attached\n   */\n\n\n  WebXRPlaneDetector.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.onPlaneAddedObservable.clear();\n    this.onPlaneRemovedObservable.clear();\n    this.onPlaneUpdatedObservable.clear();\n  };\n  /**\n   * Check if the needed objects are defined.\n   * This does not mean that the feature is enabled, but that the objects needed are well defined.\n   */\n\n\n  WebXRPlaneDetector.prototype.isCompatible = function () {\n    return typeof XRPlane !== \"undefined\";\n  };\n\n  WebXRPlaneDetector.prototype._onXRFrame = function (frame) {\n    var _this = this;\n\n    var _a;\n\n    if (!this.attached || !this._enabled || !frame) {\n      return;\n    }\n\n    var detectedPlanes = frame.detectedPlanes || ((_a = frame.worldInformation) === null || _a === void 0 ? void 0 : _a.detectedPlanes);\n\n    if (detectedPlanes) {\n      // remove all planes that are not currently detected in the frame\n      for (var planeIdx = 0; planeIdx < this._detectedPlanes.length; planeIdx++) {\n        var plane = this._detectedPlanes[planeIdx];\n\n        if (!detectedPlanes.has(plane.xrPlane)) {\n          this._detectedPlanes.splice(planeIdx--, 1);\n\n          this.onPlaneRemovedObservable.notifyObservers(plane);\n        }\n      } // now check for new ones\n\n\n      detectedPlanes.forEach(function (xrPlane) {\n        if (!_this._lastFrameDetected.has(xrPlane)) {\n          var newPlane = {\n            id: planeIdProvider++,\n            xrPlane: xrPlane,\n            polygonDefinition: []\n          };\n\n          var plane = _this._updatePlaneWithXRPlane(xrPlane, newPlane, frame);\n\n          _this._detectedPlanes.push(plane);\n\n          _this.onPlaneAddedObservable.notifyObservers(plane);\n        } else {\n          // updated?\n          if (xrPlane.lastChangedTime === _this._xrSessionManager.currentTimestamp) {\n            var index = _this._findIndexInPlaneArray(xrPlane);\n\n            var plane = _this._detectedPlanes[index];\n\n            _this._updatePlaneWithXRPlane(xrPlane, plane, frame);\n\n            _this.onPlaneUpdatedObservable.notifyObservers(plane);\n          }\n        }\n      });\n      this._lastFrameDetected = detectedPlanes;\n    }\n  };\n\n  WebXRPlaneDetector.prototype._init = function () {\n    var _this = this;\n\n    var internalInit = function internalInit() {\n      _this._enabled = true;\n\n      if (_this._detectedPlanes.length) {\n        _this._detectedPlanes.length = 0;\n      }\n    }; // Only supported by BabylonNative\n\n\n    if (!!this._xrSessionManager.isNative && !!this._options.preferredDetectorOptions && !!this._xrSessionManager.session.trySetPreferredPlaneDetectorOptions) {\n      this._xrSessionManager.session.trySetPreferredPlaneDetectorOptions(this._options.preferredDetectorOptions);\n    }\n\n    if (!this._xrSessionManager.session.updateWorldTrackingState) {\n      internalInit();\n      return;\n    }\n\n    this._xrSessionManager.session.updateWorldTrackingState({\n      planeDetectionState: {\n        enabled: true\n      }\n    });\n\n    internalInit();\n  };\n\n  WebXRPlaneDetector.prototype._updatePlaneWithXRPlane = function (xrPlane, plane, xrFrame) {\n    var _this = this;\n\n    plane.polygonDefinition = xrPlane.polygon.map(function (xrPoint) {\n      var rightHandedSystem = _this._xrSessionManager.scene.useRightHandedSystem ? 1 : -1;\n      return new Vector3(xrPoint.x, xrPoint.y, xrPoint.z * rightHandedSystem);\n    }); // matrix\n\n    var pose = xrFrame.getPose(xrPlane.planeSpace, this._xrSessionManager.referenceSpace);\n\n    if (pose) {\n      var mat = plane.transformationMatrix || new Matrix();\n      Matrix.FromArrayToRef(pose.transform.matrix, 0, mat);\n\n      if (!this._xrSessionManager.scene.useRightHandedSystem) {\n        mat.toggleModelMatrixHandInPlace();\n      }\n\n      plane.transformationMatrix = mat;\n\n      if (this._options.worldParentNode) {\n        mat.multiplyToRef(this._options.worldParentNode.getWorldMatrix(), mat);\n      }\n    }\n\n    return plane;\n  };\n  /**\n   * avoiding using Array.find for global support.\n   * @param xrPlane the plane to find in the array\n   */\n\n\n  WebXRPlaneDetector.prototype._findIndexInPlaneArray = function (xrPlane) {\n    for (var i = 0; i < this._detectedPlanes.length; ++i) {\n      if (this._detectedPlanes[i].xrPlane === xrPlane) {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n  /**\n   * The module's name\n   */\n\n\n  WebXRPlaneDetector.Name = WebXRFeatureName.PLANE_DETECTION;\n  /**\n   * The (Babylon) version of this module.\n   * This is an integer representing the implementation version.\n   * This number does not correspond to the WebXR specs version\n   */\n\n  WebXRPlaneDetector.Version = 1;\n  return WebXRPlaneDetector;\n}(WebXRAbstractFeature);\n\nexport { WebXRPlaneDetector }; //register the plugin\n\nWebXRFeaturesManager.AddWebXRFeature(WebXRPlaneDetector.Name, function (xrSessionManager, options) {\n  return function () {\n    return new WebXRPlaneDetector(xrSessionManager, options);\n  };\n}, WebXRPlaneDetector.Version);","map":{"version":3,"mappings":"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","names":["WebXRFeaturesManager","WebXRFeatureName","Observable","Vector3","Matrix","WebXRAbstractFeature","planeIdProvider","__extends","_xrSessionManager","_options","_super","_this","Set","xrNativeFeatureName","session","_init","onXRSessionInit","addOnce","WebXRPlaneDetector","detach","call","doNotRemovePlanesOnSessionEnded","_detectedPlanes","length","toRemove","pop","onPlaneRemovedObservable","notifyObservers","dispose","onPlaneAddedObservable","clear","onPlaneUpdatedObservable","XRPlane","frame","attached","_enabled","detectedPlanes","worldInformation","_a","planeIdx","plane","has","xrPlane","splice","forEach","_lastFrameDetected","newPlane","id","polygonDefinition","_updatePlaneWithXRPlane","push","lastChangedTime","currentTimestamp","index","_findIndexInPlaneArray","internalInit","isNative","preferredDetectorOptions","trySetPreferredPlaneDetectorOptions","updateWorldTrackingState","planeDetectionState","enabled","xrFrame","polygon","map","xrPoint","rightHandedSystem","scene","useRightHandedSystem","x","y","z","pose","getPose","planeSpace","referenceSpace","mat","transformationMatrix","FromArrayToRef","transform","matrix","toggleModelMatrixHandInPlace","worldParentNode","multiplyToRef","getWorldMatrix","i","PLANE_DETECTION","AddWebXRFeature","Name","xrSessionManager","options","Version"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/XR/features/WebXRPlaneDetector.ts"],"sourcesContent":["import { WebXRFeaturesManager, WebXRFeatureName } from \"../webXRFeaturesManager\";\r\nimport type { TransformNode } from \"../../Meshes/transformNode\";\r\nimport type { WebXRSessionManager } from \"../webXRSessionManager\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { Vector3, Matrix } from \"../../Maths/math.vector\";\r\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature\";\r\n\r\ndeclare const XRPlane: XRPlane;\r\n\r\n/**\r\n * Options used in the plane detector module\r\n */\r\nexport interface IWebXRPlaneDetectorOptions {\r\n    /**\r\n     * The node to use to transform the local results to world coordinates\r\n     */\r\n    worldParentNode?: TransformNode;\r\n    /**\r\n     * If set to true a reference of the created planes will be kept until the next session starts\r\n     * If not defined, planes will be removed from the array when the feature is detached or the session ended.\r\n     */\r\n    doNotRemovePlanesOnSessionEnded?: boolean;\r\n    /**\r\n     * Preferred detector configuration, not all preferred options will be supported by all platforms.\r\n     */\r\n    preferredDetectorOptions?: XRGeometryDetectorOptions;\r\n}\r\n\r\n/**\r\n * A babylon interface for a WebXR plane.\r\n * A Plane is actually a polygon, built from N points in space\r\n *\r\n * Supported in chrome 79, not supported in canary 81 ATM\r\n */\r\nexport interface IWebXRPlane {\r\n    /**\r\n     * a babylon-assigned ID for this polygon\r\n     */\r\n    id: number;\r\n    /**\r\n     * an array of vector3 points in babylon space. right/left hand system is taken into account.\r\n     */\r\n    polygonDefinition: Array<Vector3>;\r\n    /**\r\n     * A transformation matrix to apply on the mesh that will be built using the polygonDefinition\r\n     * Local vs. World are decided if worldParentNode was provided or not in the options when constructing the module\r\n     */\r\n    transformationMatrix: Matrix;\r\n    /**\r\n     * the native xr-plane object\r\n     */\r\n    xrPlane: XRPlane;\r\n}\r\n\r\nlet planeIdProvider = 0;\r\n\r\n/**\r\n * The plane detector is used to detect planes in the real world when in AR\r\n * For more information see https://github.com/immersive-web/real-world-geometry/\r\n */\r\nexport class WebXRPlaneDetector extends WebXRAbstractFeature {\r\n    private _detectedPlanes: Array<IWebXRPlane> = [];\r\n    private _enabled: boolean = false;\r\n    private _lastFrameDetected: XRPlaneSet = new Set();\r\n\r\n    /**\r\n     * The module's name\r\n     */\r\n    public static readonly Name = WebXRFeatureName.PLANE_DETECTION;\r\n    /**\r\n     * The (Babylon) version of this module.\r\n     * This is an integer representing the implementation version.\r\n     * This number does not correspond to the WebXR specs version\r\n     */\r\n    public static readonly Version = 1;\r\n\r\n    /**\r\n     * Observers registered here will be executed when a new plane was added to the session\r\n     */\r\n    public onPlaneAddedObservable: Observable<IWebXRPlane> = new Observable();\r\n    /**\r\n     * Observers registered here will be executed when a plane is no longer detected in the session\r\n     */\r\n    public onPlaneRemovedObservable: Observable<IWebXRPlane> = new Observable();\r\n    /**\r\n     * Observers registered here will be executed when an existing plane updates (for example - expanded)\r\n     * This can execute N times every frame\r\n     */\r\n    public onPlaneUpdatedObservable: Observable<IWebXRPlane> = new Observable();\r\n\r\n    /**\r\n     * construct a new Plane Detector\r\n     * @param _xrSessionManager an instance of xr Session manager\r\n     * @param _options configuration to use when constructing this feature\r\n     */\r\n    constructor(_xrSessionManager: WebXRSessionManager, private _options: IWebXRPlaneDetectorOptions = {}) {\r\n        super(_xrSessionManager);\r\n        this.xrNativeFeatureName = \"plane-detection\";\r\n        if (this._xrSessionManager.session) {\r\n            this._init();\r\n        } else {\r\n            this._xrSessionManager.onXRSessionInit.addOnce(() => {\r\n                this._init();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * detach this feature.\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    public detach(): boolean {\r\n        if (!super.detach()) {\r\n            return false;\r\n        }\r\n\r\n        if (!this._options.doNotRemovePlanesOnSessionEnded) {\r\n            while (this._detectedPlanes.length) {\r\n                const toRemove = this._detectedPlanes.pop();\r\n                if (toRemove) {\r\n                    this.onPlaneRemovedObservable.notifyObservers(toRemove);\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Dispose this feature and all of the resources attached\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n        this.onPlaneAddedObservable.clear();\r\n        this.onPlaneRemovedObservable.clear();\r\n        this.onPlaneUpdatedObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * Check if the needed objects are defined.\r\n     * This does not mean that the feature is enabled, but that the objects needed are well defined.\r\n     */\r\n    public isCompatible(): boolean {\r\n        return typeof XRPlane !== \"undefined\";\r\n    }\r\n\r\n    protected _onXRFrame(frame: XRFrame) {\r\n        if (!this.attached || !this._enabled || !frame) {\r\n            return;\r\n        }\r\n\r\n        const detectedPlanes = frame.detectedPlanes || frame.worldInformation?.detectedPlanes;\r\n        if (detectedPlanes) {\r\n            // remove all planes that are not currently detected in the frame\r\n            for (let planeIdx = 0; planeIdx < this._detectedPlanes.length; planeIdx++) {\r\n                const plane = this._detectedPlanes[planeIdx];\r\n                if (!detectedPlanes.has(plane.xrPlane)) {\r\n                    this._detectedPlanes.splice(planeIdx--, 1);\r\n                    this.onPlaneRemovedObservable.notifyObservers(plane);\r\n                }\r\n            }\r\n\r\n            // now check for new ones\r\n            detectedPlanes.forEach((xrPlane) => {\r\n                if (!this._lastFrameDetected.has(xrPlane)) {\r\n                    const newPlane: Partial<IWebXRPlane> = {\r\n                        id: planeIdProvider++,\r\n                        xrPlane: xrPlane,\r\n                        polygonDefinition: [],\r\n                    };\r\n                    const plane = this._updatePlaneWithXRPlane(xrPlane, newPlane, frame);\r\n                    this._detectedPlanes.push(plane);\r\n                    this.onPlaneAddedObservable.notifyObservers(plane);\r\n                } else {\r\n                    // updated?\r\n                    if (xrPlane.lastChangedTime === this._xrSessionManager.currentTimestamp) {\r\n                        const index = this._findIndexInPlaneArray(xrPlane);\r\n                        const plane = this._detectedPlanes[index];\r\n                        this._updatePlaneWithXRPlane(xrPlane, plane, frame);\r\n                        this.onPlaneUpdatedObservable.notifyObservers(plane);\r\n                    }\r\n                }\r\n            });\r\n            this._lastFrameDetected = detectedPlanes;\r\n        }\r\n    }\r\n\r\n    private _init() {\r\n        const internalInit = () => {\r\n            this._enabled = true;\r\n            if (this._detectedPlanes.length) {\r\n                this._detectedPlanes.length = 0;\r\n            }\r\n        };\r\n\r\n        // Only supported by BabylonNative\r\n        if (!!this._xrSessionManager.isNative && !!this._options.preferredDetectorOptions && !!this._xrSessionManager.session.trySetPreferredPlaneDetectorOptions) {\r\n            this._xrSessionManager.session.trySetPreferredPlaneDetectorOptions(this._options.preferredDetectorOptions);\r\n        }\r\n\r\n        if (!this._xrSessionManager.session.updateWorldTrackingState) {\r\n            internalInit();\r\n            return;\r\n        }\r\n        this._xrSessionManager.session.updateWorldTrackingState({ planeDetectionState: { enabled: true } });\r\n        internalInit();\r\n    }\r\n\r\n    private _updatePlaneWithXRPlane(xrPlane: XRPlane, plane: Partial<IWebXRPlane>, xrFrame: XRFrame): IWebXRPlane {\r\n        plane.polygonDefinition = xrPlane.polygon.map((xrPoint) => {\r\n            const rightHandedSystem = this._xrSessionManager.scene.useRightHandedSystem ? 1 : -1;\r\n            return new Vector3(xrPoint.x, xrPoint.y, xrPoint.z * rightHandedSystem);\r\n        });\r\n        // matrix\r\n        const pose = xrFrame.getPose(xrPlane.planeSpace, this._xrSessionManager.referenceSpace);\r\n        if (pose) {\r\n            const mat = plane.transformationMatrix || new Matrix();\r\n            Matrix.FromArrayToRef(pose.transform.matrix, 0, mat);\r\n            if (!this._xrSessionManager.scene.useRightHandedSystem) {\r\n                mat.toggleModelMatrixHandInPlace();\r\n            }\r\n            plane.transformationMatrix = mat;\r\n            if (this._options.worldParentNode) {\r\n                mat.multiplyToRef(this._options.worldParentNode.getWorldMatrix(), mat);\r\n            }\r\n        }\r\n\r\n        return <IWebXRPlane>plane;\r\n    }\r\n\r\n    /**\r\n     * avoiding using Array.find for global support.\r\n     * @param xrPlane the plane to find in the array\r\n     */\r\n    private _findIndexInPlaneArray(xrPlane: XRPlane) {\r\n        for (let i = 0; i < this._detectedPlanes.length; ++i) {\r\n            if (this._detectedPlanes[i].xrPlane === xrPlane) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n}\r\n\r\n//register the plugin\r\nWebXRFeaturesManager.AddWebXRFeature(\r\n    WebXRPlaneDetector.Name,\r\n    (xrSessionManager, options) => {\r\n        return () => new WebXRPlaneDetector(xrSessionManager, options);\r\n    },\r\n    WebXRPlaneDetector.Version\r\n);\r\n"]},"metadata":{},"sourceType":"module"}