{"ast":null,"code":"import { EventConstants } from \"../../Events/deviceInputEvents.js\";\nimport { DeviceType, NativePointerInput, PointerInput } from \"../InputDevices/deviceEnums.js\";\n/**\n * Class to wrap DeviceInputSystem data into an event object\n */\n\nvar DeviceEventFactory =\n/** @class */\nfunction () {\n  function DeviceEventFactory() {}\n  /**\n   * Create device input events based on provided type and slot\n   *\n   * @param deviceType Type of device\n   * @param deviceSlot \"Slot\" or index that device is referenced in\n   * @param inputIndex Id of input to be checked\n   * @param currentState Current value for given input\n   * @param deviceInputSystem Reference to DeviceInputSystem\n   * @param elementToAttachTo HTMLElement to reference as target for inputs\n   * @returns IUIEvent object\n   */\n\n\n  DeviceEventFactory.CreateDeviceEvent = function (deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo) {\n    switch (deviceType) {\n      case DeviceType.Keyboard:\n        return this._CreateKeyboardEvent(inputIndex, currentState, deviceInputSystem, elementToAttachTo);\n\n      case DeviceType.Mouse:\n        if (inputIndex === PointerInput.MouseWheelX || inputIndex === PointerInput.MouseWheelY || inputIndex === PointerInput.MouseWheelZ) {\n          return this._CreateWheelEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\n        }\n\n      // eslint-disable-next-line no-fallthrough\n\n      case DeviceType.Touch:\n        return this._CreatePointerEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\n\n      default:\n        throw \"Unable to generate event for device \".concat(DeviceType[deviceType]);\n    }\n  };\n  /**\n   * Creates pointer event\n   *\n   * @param deviceType Type of device\n   * @param deviceSlot \"Slot\" or index that device is referenced in\n   * @param inputIndex Id of input to be checked\n   * @param currentState Current value for given input\n   * @param deviceInputSystem Reference to DeviceInputSystem\n   * @param elementToAttachTo HTMLElement to reference as target for inputs\n   * @returns IUIEvent object (Pointer)\n   */\n\n\n  DeviceEventFactory._CreatePointerEvent = function (deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo) {\n    var evt = this._CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\n\n    if (deviceType === DeviceType.Mouse) {\n      evt.deviceType = DeviceType.Mouse;\n      evt.pointerId = 1;\n      evt.pointerType = \"mouse\";\n    } else {\n      evt.deviceType = DeviceType.Touch;\n      evt.pointerId = deviceSlot;\n      evt.pointerType = \"touch\";\n    }\n\n    if (inputIndex === PointerInput.Move) {\n      evt.type = \"pointermove\";\n    } else if (inputIndex >= PointerInput.LeftClick && inputIndex <= PointerInput.RightClick) {\n      evt.type = currentState === 1 ? \"pointerdown\" : \"pointerup\";\n      evt.button = inputIndex - 2;\n    }\n\n    return evt;\n  };\n  /**\n   * Create Mouse Wheel Event\n   * @param deviceType Type of device\n   * @param deviceSlot \"Slot\" or index that device is referenced in\n   * @param inputIndex Id of input to be checked\n   * @param currentState Current value for given input\n   * @param deviceInputSystem Reference to DeviceInputSystem\n   * @param elementToAttachTo HTMLElement to reference as target for inputs\n   * @returns IUIEvent object (Wheel)\n   */\n\n\n  DeviceEventFactory._CreateWheelEvent = function (deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo) {\n    var evt = this._CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\n\n    evt.type = \"wheel\";\n    evt.deltaMode = EventConstants.DOM_DELTA_PIXEL;\n    evt.deltaX = 0;\n    evt.deltaY = 0;\n    evt.deltaZ = 0;\n\n    switch (inputIndex) {\n      case PointerInput.MouseWheelX:\n        evt.deltaX = currentState;\n        break;\n\n      case PointerInput.MouseWheelY:\n        evt.deltaY = currentState;\n        break;\n\n      case PointerInput.MouseWheelZ:\n        evt.deltaZ = currentState;\n        break;\n    }\n\n    return evt;\n  };\n  /**\n   * Create Mouse Event\n   * @param deviceType Type of device\n   * @param deviceSlot \"Slot\" or index that device is referenced in\n   * @param inputIndex Id of input to be checked\n   * @param currentState Current value for given input\n   * @param deviceInputSystem Reference to DeviceInputSystem\n   * @param elementToAttachTo HTMLElement to reference as target for inputs\n   * @returns IUIEvent object (Mouse)\n   */\n\n\n  DeviceEventFactory._CreateMouseEvent = function (deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo) {\n    var evt = this._CreateEvent(elementToAttachTo);\n\n    var pointerX = deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.Horizontal);\n    var pointerY = deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.Vertical); // Handle offsets/deltas based on existence of HTMLElement\n\n    if (elementToAttachTo) {\n      evt.movementX = 0;\n      evt.movementY = 0;\n      evt.offsetX = evt.movementX - elementToAttachTo.getBoundingClientRect().x;\n      evt.offsetY = evt.movementY - elementToAttachTo.getBoundingClientRect().y;\n    } else {\n      evt.movementX = deviceInputSystem.pollInput(deviceType, deviceSlot, NativePointerInput.DeltaHorizontal); // DeltaHorizontal\n\n      evt.movementY = deviceInputSystem.pollInput(deviceType, deviceSlot, NativePointerInput.DeltaVertical); // DeltaVertical\n\n      evt.offsetX = 0;\n      evt.offsetY = 0;\n    }\n\n    this._CheckNonCharacterKeys(evt, deviceInputSystem);\n\n    evt.clientX = pointerX;\n    evt.clientY = pointerY;\n    evt.x = pointerX;\n    evt.y = pointerY;\n    evt.deviceType = deviceType;\n    evt.deviceSlot = deviceSlot;\n    evt.inputIndex = inputIndex;\n    return evt;\n  };\n  /**\n   * Create Keyboard Event\n   * @param inputIndex Id of input to be checked\n   * @param currentState Current value for given input\n   * @param deviceInputSystem Reference to DeviceInputSystem\n   * @param elementToAttachTo HTMLElement to reference as target for inputs\n   * @returns IEvent object (Keyboard)\n   */\n\n\n  DeviceEventFactory._CreateKeyboardEvent = function (inputIndex, currentState, deviceInputSystem, elementToAttachTo) {\n    var evt = this._CreateEvent(elementToAttachTo);\n\n    this._CheckNonCharacterKeys(evt, deviceInputSystem);\n\n    evt.deviceType = DeviceType.Keyboard;\n    evt.deviceSlot = 0;\n    evt.inputIndex = inputIndex;\n    evt.type = currentState === 1 ? \"keydown\" : \"keyup\";\n    evt.key = String.fromCharCode(inputIndex);\n    evt.keyCode = inputIndex;\n    return evt;\n  };\n  /**\n   * Add parameters for non-character keys (Ctrl, Alt, Meta, Shift)\n   * @param evt Event object to add parameters to\n   * @param deviceInputSystem DeviceInputSystem to pull values from\n   */\n\n\n  DeviceEventFactory._CheckNonCharacterKeys = function (evt, deviceInputSystem) {\n    var isKeyboardActive = deviceInputSystem.isDeviceAvailable(DeviceType.Keyboard);\n    var altKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, 18) === 1;\n    var ctrlKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, 17) === 1;\n    var metaKey = isKeyboardActive && (deviceInputSystem.pollInput(DeviceType.Keyboard, 0, 91) === 1 || deviceInputSystem.pollInput(DeviceType.Keyboard, 0, 92) === 1 || deviceInputSystem.pollInput(DeviceType.Keyboard, 0, 93) === 1);\n    var shiftKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, 16) === 1;\n    evt.altKey = altKey;\n    evt.ctrlKey = ctrlKey;\n    evt.metaKey = metaKey;\n    evt.shiftKey = shiftKey;\n  };\n  /**\n   * Create base event object\n   * @param elementToAttachTo Value to use as event target\n   * @returns\n   */\n\n\n  DeviceEventFactory._CreateEvent = function (elementToAttachTo) {\n    var evt = {};\n\n    evt.preventDefault = function () {};\n\n    evt.target = elementToAttachTo;\n    return evt;\n  };\n\n  return DeviceEventFactory;\n}();\n\nexport { DeviceEventFactory };","map":{"version":3,"mappings":"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","names":["EventConstants","DeviceType","NativePointerInput","PointerInput","DeviceEventFactory","deviceType","deviceSlot","inputIndex","currentState","deviceInputSystem","elementToAttachTo","Keyboard","_CreateKeyboardEvent","Mouse","MouseWheelX","MouseWheelY","MouseWheelZ","_CreateWheelEvent","Touch","_CreatePointerEvent","evt","_CreateMouseEvent","pointerId","pointerType","Move","type","LeftClick","RightClick","button","deltaMode","DOM_DELTA_PIXEL","deltaX","deltaY","deltaZ","_CreateEvent","pointerX","pollInput","Horizontal","pointerY","Vertical","movementX","movementY","offsetX","getBoundingClientRect","x","offsetY","y","DeltaHorizontal","DeltaVertical","_CheckNonCharacterKeys","clientX","clientY","key","String","fromCharCode","keyCode","isKeyboardActive","isDeviceAvailable","altKey","ctrlKey","metaKey","shiftKey","preventDefault","target"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/DeviceInput/Helpers/eventFactory.ts"],"sourcesContent":["import { Constants } from \"../../Engines/constants\";\r\nimport type { IUIEvent } from \"../../Events/deviceInputEvents\";\r\nimport { EventConstants } from \"../../Events/deviceInputEvents\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { DeviceType, NativePointerInput, PointerInput } from \"../InputDevices/deviceEnums\";\r\nimport type { IDeviceInputSystem } from \"../InputDevices/inputInterfaces\";\r\n\r\n/**\r\n * Class to wrap DeviceInputSystem data into an event object\r\n */\r\nexport class DeviceEventFactory {\r\n    /**\r\n     * Create device input events based on provided type and slot\r\n     *\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IUIEvent object\r\n     */\r\n    public static CreateDeviceEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo?: any\r\n    ): IUIEvent {\r\n        switch (deviceType) {\r\n            case DeviceType.Keyboard:\r\n                return this._CreateKeyboardEvent(inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n            case DeviceType.Mouse:\r\n                if (inputIndex === PointerInput.MouseWheelX || inputIndex === PointerInput.MouseWheelY || inputIndex === PointerInput.MouseWheelZ) {\r\n                    return this._CreateWheelEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n                }\r\n            // eslint-disable-next-line no-fallthrough\r\n            case DeviceType.Touch:\r\n                return this._CreatePointerEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n            default:\r\n                throw `Unable to generate event for device ${DeviceType[deviceType]}`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates pointer event\r\n     *\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IUIEvent object (Pointer)\r\n     */\r\n    private static _CreatePointerEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo?: any\r\n    ): any {\r\n        const evt = this._CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n\r\n        if (deviceType === DeviceType.Mouse) {\r\n            evt.deviceType = DeviceType.Mouse;\r\n            evt.pointerId = 1;\r\n            evt.pointerType = \"mouse\";\r\n        } else {\r\n            evt.deviceType = DeviceType.Touch;\r\n            evt.pointerId = deviceSlot;\r\n            evt.pointerType = \"touch\";\r\n        }\r\n\r\n        if (inputIndex === PointerInput.Move) {\r\n            evt.type = \"pointermove\";\r\n        } else if (inputIndex >= PointerInput.LeftClick && inputIndex <= PointerInput.RightClick) {\r\n            evt.type = currentState === 1 ? \"pointerdown\" : \"pointerup\";\r\n            evt.button = inputIndex - 2;\r\n        }\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Create Mouse Wheel Event\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IUIEvent object (Wheel)\r\n     */\r\n    private static _CreateWheelEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo: any\r\n    ): any {\r\n        const evt = this._CreateMouseEvent(deviceType, deviceSlot, inputIndex, currentState, deviceInputSystem, elementToAttachTo);\r\n\r\n        evt.type = \"wheel\";\r\n        evt.deltaMode = EventConstants.DOM_DELTA_PIXEL;\r\n        evt.deltaX = 0;\r\n        evt.deltaY = 0;\r\n        evt.deltaZ = 0;\r\n\r\n        switch (inputIndex) {\r\n            case PointerInput.MouseWheelX:\r\n                evt.deltaX = currentState;\r\n                break;\r\n            case PointerInput.MouseWheelY:\r\n                evt.deltaY = currentState;\r\n                break;\r\n            case PointerInput.MouseWheelZ:\r\n                evt.deltaZ = currentState;\r\n                break;\r\n        }\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Create Mouse Event\r\n     * @param deviceType Type of device\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IUIEvent object (Mouse)\r\n     */\r\n    private static _CreateMouseEvent(\r\n        deviceType: DeviceType,\r\n        deviceSlot: number,\r\n        inputIndex: number,\r\n        currentState: Nullable<number>,\r\n        deviceInputSystem: IDeviceInputSystem,\r\n        elementToAttachTo?: any\r\n    ): any {\r\n        const evt = this._CreateEvent(elementToAttachTo);\r\n        const pointerX = deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.Horizontal);\r\n        const pointerY = deviceInputSystem.pollInput(deviceType, deviceSlot, PointerInput.Vertical);\r\n\r\n        // Handle offsets/deltas based on existence of HTMLElement\r\n        if (elementToAttachTo) {\r\n            evt.movementX = 0;\r\n            evt.movementY = 0;\r\n            evt.offsetX = evt.movementX - elementToAttachTo.getBoundingClientRect().x;\r\n            evt.offsetY = evt.movementY - elementToAttachTo.getBoundingClientRect().y;\r\n        } else {\r\n            evt.movementX = deviceInputSystem.pollInput(deviceType, deviceSlot, NativePointerInput.DeltaHorizontal); // DeltaHorizontal\r\n            evt.movementY = deviceInputSystem.pollInput(deviceType, deviceSlot, NativePointerInput.DeltaVertical); // DeltaVertical\r\n            evt.offsetX = 0;\r\n            evt.offsetY = 0;\r\n        }\r\n        this._CheckNonCharacterKeys(evt, deviceInputSystem);\r\n\r\n        evt.clientX = pointerX;\r\n        evt.clientY = pointerY;\r\n        evt.x = pointerX;\r\n        evt.y = pointerY;\r\n\r\n        evt.deviceType = deviceType;\r\n        evt.deviceSlot = deviceSlot;\r\n        evt.inputIndex = inputIndex;\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Create Keyboard Event\r\n     * @param inputIndex Id of input to be checked\r\n     * @param currentState Current value for given input\r\n     * @param deviceInputSystem Reference to DeviceInputSystem\r\n     * @param elementToAttachTo HTMLElement to reference as target for inputs\r\n     * @returns IEvent object (Keyboard)\r\n     */\r\n    private static _CreateKeyboardEvent(inputIndex: number, currentState: Nullable<number>, deviceInputSystem: IDeviceInputSystem, elementToAttachTo?: any): any {\r\n        const evt = this._CreateEvent(elementToAttachTo);\r\n        this._CheckNonCharacterKeys(evt, deviceInputSystem);\r\n        evt.deviceType = DeviceType.Keyboard;\r\n        evt.deviceSlot = 0;\r\n        evt.inputIndex = inputIndex;\r\n\r\n        evt.type = currentState === 1 ? \"keydown\" : \"keyup\";\r\n        evt.key = String.fromCharCode(inputIndex);\r\n        evt.keyCode = inputIndex;\r\n\r\n        return evt;\r\n    }\r\n\r\n    /**\r\n     * Add parameters for non-character keys (Ctrl, Alt, Meta, Shift)\r\n     * @param evt Event object to add parameters to\r\n     * @param deviceInputSystem DeviceInputSystem to pull values from\r\n     */\r\n    private static _CheckNonCharacterKeys(evt: any, deviceInputSystem: IDeviceInputSystem): void {\r\n        const isKeyboardActive = deviceInputSystem.isDeviceAvailable(DeviceType.Keyboard);\r\n        const altKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_ALT_KEY) === 1;\r\n        const ctrlKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_CTRL_KEY) === 1;\r\n        const metaKey =\r\n            isKeyboardActive &&\r\n            (deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_META_KEY1) === 1 ||\r\n                deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_META_KEY2) === 1 ||\r\n                deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_META_KEY3) === 1);\r\n        const shiftKey = isKeyboardActive && deviceInputSystem.pollInput(DeviceType.Keyboard, 0, Constants.INPUT_SHIFT_KEY) === 1;\r\n\r\n        evt.altKey = altKey;\r\n        evt.ctrlKey = ctrlKey;\r\n        evt.metaKey = metaKey;\r\n        evt.shiftKey = shiftKey;\r\n    }\r\n\r\n    /**\r\n     * Create base event object\r\n     * @param elementToAttachTo Value to use as event target\r\n     * @returns\r\n     */\r\n    private static _CreateEvent(elementToAttachTo: any): any {\r\n        const evt: { [k: string]: any } = {};\r\n        evt.preventDefault = () => {};\r\n        evt.target = elementToAttachTo;\r\n\r\n        return evt;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}