{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { __decorate } from \"tslib\";\nimport { SerializationHelper, serialize } from \"../Misc/decorators.js\";\n/**\n * Class that holds the different stencil states of a material\n * Usage example: https://playground.babylonjs.com/#CW5PRI#10\n */\n\nvar MaterialStencilState =\n/** @class */\nfunction () {\n  /**\n   * Creates a material stencil state instance\n   */\n  function MaterialStencilState() {\n    this.reset();\n  }\n  /**\n   * Resets all the stencil states to default values\n   */\n\n\n  MaterialStencilState.prototype.reset = function () {\n    this.enabled = false;\n    this.mask = 0xff;\n    this.func = 519;\n    this.funcRef = 1;\n    this.funcMask = 0xff;\n    this.opStencilFail = 7680;\n    this.opDepthFail = 7680;\n    this.opStencilDepthPass = 7681;\n  };\n\n  Object.defineProperty(MaterialStencilState.prototype, \"func\", {\n    /**\n     * Gets or sets the stencil function\n     */\n    get: function get() {\n      return this._func;\n    },\n    set: function set(value) {\n      this._func = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MaterialStencilState.prototype, \"funcRef\", {\n    /**\n     * Gets or sets the stencil function reference\n     */\n    get: function get() {\n      return this._funcRef;\n    },\n    set: function set(value) {\n      this._funcRef = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MaterialStencilState.prototype, \"funcMask\", {\n    /**\n     * Gets or sets the stencil function mask\n     */\n    get: function get() {\n      return this._funcMask;\n    },\n    set: function set(value) {\n      this._funcMask = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MaterialStencilState.prototype, \"opStencilFail\", {\n    /**\n     * Gets or sets the operation when the stencil test fails\n     */\n    get: function get() {\n      return this._opStencilFail;\n    },\n    set: function set(value) {\n      this._opStencilFail = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MaterialStencilState.prototype, \"opDepthFail\", {\n    /**\n     * Gets or sets the operation when the depth test fails\n     */\n    get: function get() {\n      return this._opDepthFail;\n    },\n    set: function set(value) {\n      this._opDepthFail = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MaterialStencilState.prototype, \"opStencilDepthPass\", {\n    /**\n     * Gets or sets the operation when the stencil+depth test succeeds\n     */\n    get: function get() {\n      return this._opStencilDepthPass;\n    },\n    set: function set(value) {\n      this._opStencilDepthPass = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MaterialStencilState.prototype, \"mask\", {\n    /**\n     * Gets or sets the stencil mask\n     */\n    get: function get() {\n      return this._mask;\n    },\n    set: function set(value) {\n      this._mask = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MaterialStencilState.prototype, \"enabled\", {\n    /**\n     * Enables or disables the stencil test\n     */\n    get: function get() {\n      return this._enabled;\n    },\n    set: function set(value) {\n      this._enabled = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Get the current class name, useful for serialization or dynamic coding.\n   * @returns \"MaterialStencilState\"\n   */\n\n  MaterialStencilState.prototype.getClassName = function () {\n    return \"MaterialStencilState\";\n  };\n  /**\n   * Makes a duplicate of the current configuration into another one.\n   * @param stencilState defines stencil state where to copy the info\n   */\n\n\n  MaterialStencilState.prototype.copyTo = function (stencilState) {\n    SerializationHelper.Clone(function () {\n      return stencilState;\n    }, this);\n  };\n  /**\n   * Serializes this stencil configuration.\n   * @returns - An object with the serialized config.\n   */\n\n\n  MaterialStencilState.prototype.serialize = function () {\n    return SerializationHelper.Serialize(this);\n  };\n  /**\n   * Parses a stencil state configuration from a serialized object.\n   * @param source - Serialized object.\n   * @param scene Defines the scene we are parsing for\n   * @param rootUrl Defines the rootUrl to load from\n   */\n\n\n  MaterialStencilState.prototype.parse = function (source, scene, rootUrl) {\n    var _this = this;\n\n    SerializationHelper.Parse(function () {\n      return _this;\n    }, source, scene, rootUrl);\n  };\n\n  __decorate([serialize()], MaterialStencilState.prototype, \"func\", null);\n\n  __decorate([serialize()], MaterialStencilState.prototype, \"funcRef\", null);\n\n  __decorate([serialize()], MaterialStencilState.prototype, \"funcMask\", null);\n\n  __decorate([serialize()], MaterialStencilState.prototype, \"opStencilFail\", null);\n\n  __decorate([serialize()], MaterialStencilState.prototype, \"opDepthFail\", null);\n\n  __decorate([serialize()], MaterialStencilState.prototype, \"opStencilDepthPass\", null);\n\n  __decorate([serialize()], MaterialStencilState.prototype, \"mask\", null);\n\n  __decorate([serialize()], MaterialStencilState.prototype, \"enabled\", null);\n\n  return MaterialStencilState;\n}();\n\nexport { MaterialStencilState };","map":{"version":3,"mappings":"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","names":["SerializationHelper","serialize","reset","MaterialStencilState","enabled","mask","func","funcRef","funcMask","opStencilFail","opDepthFail","opStencilDepthPass","Object","_func","value","_funcRef","_funcMask","_opStencilFail","_opDepthFail","_opStencilDepthPass","_mask","_enabled","stencilState","Clone","Serialize","source","scene","rootUrl","Parse","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Materials/materialStencilState.ts"],"sourcesContent":["import { Constants } from \"../Engines/constants\";\r\nimport { SerializationHelper, serialize } from \"../Misc/decorators\";\r\nimport type { IStencilState } from \"../States/IStencilState\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * Class that holds the different stencil states of a material\r\n * Usage example: https://playground.babylonjs.com/#CW5PRI#10\r\n */\r\nexport class MaterialStencilState implements IStencilState {\r\n    /**\r\n     * Creates a material stencil state instance\r\n     */\r\n    public constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Resets all the stencil states to default values\r\n     */\r\n    public reset() {\r\n        this.enabled = false;\r\n        this.mask = 0xff;\r\n\r\n        this.func = Constants.ALWAYS;\r\n        this.funcRef = 1;\r\n        this.funcMask = 0xff;\r\n\r\n        this.opStencilFail = Constants.KEEP;\r\n        this.opDepthFail = Constants.KEEP;\r\n        this.opStencilDepthPass = Constants.REPLACE;\r\n    }\r\n\r\n    private _func: number;\r\n    /**\r\n     * Gets or sets the stencil function\r\n     */\r\n    @serialize()\r\n    public get func(): number {\r\n        return this._func;\r\n    }\r\n\r\n    public set func(value: number) {\r\n        this._func = value;\r\n    }\r\n\r\n    private _funcRef: number;\r\n    /**\r\n     * Gets or sets the stencil function reference\r\n     */\r\n    @serialize()\r\n    public get funcRef(): number {\r\n        return this._funcRef;\r\n    }\r\n\r\n    public set funcRef(value: number) {\r\n        this._funcRef = value;\r\n    }\r\n\r\n    private _funcMask: number;\r\n    /**\r\n     * Gets or sets the stencil function mask\r\n     */\r\n    @serialize()\r\n    public get funcMask(): number {\r\n        return this._funcMask;\r\n    }\r\n\r\n    public set funcMask(value: number) {\r\n        this._funcMask = value;\r\n    }\r\n\r\n    private _opStencilFail: number;\r\n    /**\r\n     * Gets or sets the operation when the stencil test fails\r\n     */\r\n    @serialize()\r\n    public get opStencilFail(): number {\r\n        return this._opStencilFail;\r\n    }\r\n\r\n    public set opStencilFail(value: number) {\r\n        this._opStencilFail = value;\r\n    }\r\n\r\n    private _opDepthFail: number;\r\n    /**\r\n     * Gets or sets the operation when the depth test fails\r\n     */\r\n    @serialize()\r\n    public get opDepthFail(): number {\r\n        return this._opDepthFail;\r\n    }\r\n\r\n    public set opDepthFail(value: number) {\r\n        this._opDepthFail = value;\r\n    }\r\n\r\n    private _opStencilDepthPass: number;\r\n    /**\r\n     * Gets or sets the operation when the stencil+depth test succeeds\r\n     */\r\n    @serialize()\r\n    public get opStencilDepthPass(): number {\r\n        return this._opStencilDepthPass;\r\n    }\r\n\r\n    public set opStencilDepthPass(value: number) {\r\n        this._opStencilDepthPass = value;\r\n    }\r\n\r\n    private _mask: number;\r\n    /**\r\n     * Gets or sets the stencil mask\r\n     */\r\n    @serialize()\r\n    public get mask(): number {\r\n        return this._mask;\r\n    }\r\n\r\n    public set mask(value: number) {\r\n        this._mask = value;\r\n    }\r\n\r\n    private _enabled: boolean;\r\n    /**\r\n     * Enables or disables the stencil test\r\n     */\r\n    @serialize()\r\n    public get enabled(): boolean {\r\n        return this._enabled;\r\n    }\r\n\r\n    public set enabled(value: boolean) {\r\n        this._enabled = value;\r\n    }\r\n\r\n    /**\r\n     * Get the current class name, useful for serialization or dynamic coding.\r\n     * @returns \"MaterialStencilState\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"MaterialStencilState\";\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the current configuration into another one.\r\n     * @param stencilState defines stencil state where to copy the info\r\n     */\r\n    public copyTo(stencilState: MaterialStencilState): void {\r\n        SerializationHelper.Clone(() => stencilState, this);\r\n    }\r\n\r\n    /**\r\n     * Serializes this stencil configuration.\r\n     * @returns - An object with the serialized config.\r\n     */\r\n    public serialize(): any {\r\n        return SerializationHelper.Serialize(this);\r\n    }\r\n\r\n    /**\r\n     * Parses a stencil state configuration from a serialized object.\r\n     * @param source - Serialized object.\r\n     * @param scene Defines the scene we are parsing for\r\n     * @param rootUrl Defines the rootUrl to load from\r\n     */\r\n    public parse(source: any, scene: Scene, rootUrl: string): void {\r\n        SerializationHelper.Parse(() => this, source, scene, rootUrl);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}