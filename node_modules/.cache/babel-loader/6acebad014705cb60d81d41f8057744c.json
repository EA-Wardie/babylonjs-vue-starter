{"ast":null,"code":"import \"core-js/modules/es.function.bind.js\";\nimport { __extends } from \"tslib\";\nimport { Camera } from \"../../Cameras/camera.js\";\nimport { ArcRotateCamera } from \"../../Cameras/arcRotateCamera.js\";\nimport { VRCameraMetrics } from \"./vrCameraMetrics.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Node } from \"../../node.js\";\nimport { setVRRigMode } from \"../RigModes/vrRigMode.js\";\nimport \"../Inputs/arcRotateCameraVRDeviceOrientationInput.js\";\nNode.AddNodeConstructor(\"VRDeviceOrientationArcRotateCamera\", function (name, scene) {\n  return function () {\n    return new VRDeviceOrientationArcRotateCamera(name, 0, 0, 1.0, Vector3.Zero(), scene);\n  };\n});\n/**\n * Camera used to simulate VR rendering (based on ArcRotateCamera)\n * @see https://doc.babylonjs.com/babylon101/cameras#vr-device-orientation-cameras\n */\n\nvar VRDeviceOrientationArcRotateCamera =\n/** @class */\nfunction (_super) {\n  __extends(VRDeviceOrientationArcRotateCamera, _super);\n  /**\n   * Creates a new VRDeviceOrientationArcRotateCamera\n   * @param name defines camera name\n   * @param alpha defines the camera rotation along the longitudinal axis\n   * @param beta defines the camera rotation along the latitudinal axis\n   * @param radius defines the camera distance from its target\n   * @param target defines the camera target\n   * @param scene defines the scene the camera belongs to\n   * @param compensateDistortion defines if the camera needs to compensate the lens distortion\n   * @param vrCameraMetrics defines the vr metrics associated to the camera\n   */\n\n\n  function VRDeviceOrientationArcRotateCamera(name, alpha, beta, radius, target, scene, compensateDistortion, vrCameraMetrics) {\n    if (compensateDistortion === void 0) {\n      compensateDistortion = true;\n    }\n\n    if (vrCameraMetrics === void 0) {\n      vrCameraMetrics = VRCameraMetrics.GetDefault();\n    }\n\n    var _this = _super.call(this, name, alpha, beta, radius, target, scene) || this;\n\n    _this._setRigMode = setVRRigMode.bind(null, _this);\n    vrCameraMetrics.compensateDistortion = compensateDistortion;\n\n    _this.setCameraRigMode(Camera.RIG_MODE_VR, {\n      vrCameraMetrics: vrCameraMetrics\n    });\n\n    _this.inputs.addVRDeviceOrientation();\n\n    return _this;\n  }\n  /**\n   * Gets camera class name\n   * @returns VRDeviceOrientationArcRotateCamera\n   */\n\n\n  VRDeviceOrientationArcRotateCamera.prototype.getClassName = function () {\n    return \"VRDeviceOrientationArcRotateCamera\";\n  };\n\n  return VRDeviceOrientationArcRotateCamera;\n}(ArcRotateCamera);\n\nexport { VRDeviceOrientationArcRotateCamera };","map":{"version":3,"mappings":";;AAAA,SAASA,MAAT,QAAuB,yBAAvB;AACA,SAASC,eAAT,QAAgC,kCAAhC;AACA,SAASC,eAAT,QAAgC,sBAAhC;AAEA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,IAAT,QAAqB,eAArB;AACA,SAASC,YAAT,QAA6B,0BAA7B;AAEA,OAAO,sDAAP;AAEAD,IAAI,CAACE,kBAAL,CAAwB,oCAAxB,EAA8D,UAACC,IAAD,EAAOC,KAAP,EAAY;AACtE,SAAO;AAAM,eAAIC,kCAAJ,CAAuCF,IAAvC,EAA6C,CAA7C,EAAgD,CAAhD,EAAmD,GAAnD,EAAwDJ,OAAO,CAACO,IAAR,EAAxD,EAAwEF,KAAxE;AAA8E,GAA3F;AACH,CAFD;AAIA;;;;;AAIA;AAAA;AAAA;AAAwDG;AACpD;;;;;;;;;;;;;AAWA,8CACIJ,IADJ,EAEIK,KAFJ,EAGIC,IAHJ,EAIIC,MAJJ,EAKIC,MALJ,EAMIP,KANJ,EAOIQ,oBAPJ,EAQIC,eARJ,EAQmE;AAD/D;AAAAD;AAA2B;;AAC3B;AAAAC,wBAAmCf,eAAe,CAACgB,UAAhB,EAAnC;AAA+D;;AARnE,gBAUIC,kBAAMZ,IAAN,EAAYK,KAAZ,EAAmBC,IAAnB,EAAyBC,MAAzB,EAAiCC,MAAjC,EAAyCP,KAAzC,KAA+C,IAVnD;;AA0BUY,wBAAcf,YAAY,CAACgB,IAAb,CAAkB,IAAlB,EAAwBD,KAAxB,CAAd;AAdNH,mBAAe,CAACD,oBAAhB,GAAuCA,oBAAvC;;AACAI,SAAI,CAACE,gBAAL,CAAsBtB,MAAM,CAACuB,WAA7B,EAA0C;AAAEN,qBAAe,EAAEA;AAAnB,KAA1C;;AAEAG,SAAI,CAACI,MAAL,CAAYC,sBAAZ;;;AACH;AAED;;;;;;AAIOhB,8DAAP;AACI,WAAO,oCAAP;AACH,GAFM;;AAKX;AAAC,CAvCD,CAAwDR,eAAxD","names":["Camera","ArcRotateCamera","VRCameraMetrics","Vector3","Node","setVRRigMode","AddNodeConstructor","name","scene","VRDeviceOrientationArcRotateCamera","Zero","__extends","alpha","beta","radius","target","compensateDistortion","vrCameraMetrics","GetDefault","_super","_this","bind","setCameraRigMode","RIG_MODE_VR","inputs","addVRDeviceOrientation"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Cameras/VR/vrDeviceOrientationArcRotateCamera.ts"],"sourcesContent":["import { Camera } from \"../../Cameras/camera\";\r\nimport { ArcRotateCamera } from \"../../Cameras/arcRotateCamera\";\r\nimport { VRCameraMetrics } from \"./vrCameraMetrics\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Node } from \"../../node\";\r\nimport { setVRRigMode } from \"../RigModes/vrRigMode\";\r\n\r\nimport \"../Inputs/arcRotateCameraVRDeviceOrientationInput\";\r\n\r\nNode.AddNodeConstructor(\"VRDeviceOrientationArcRotateCamera\", (name, scene) => {\r\n    return () => new VRDeviceOrientationArcRotateCamera(name, 0, 0, 1.0, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * Camera used to simulate VR rendering (based on ArcRotateCamera)\r\n * @see https://doc.babylonjs.com/babylon101/cameras#vr-device-orientation-cameras\r\n */\r\nexport class VRDeviceOrientationArcRotateCamera extends ArcRotateCamera {\r\n    /**\r\n     * Creates a new VRDeviceOrientationArcRotateCamera\r\n     * @param name defines camera name\r\n     * @param alpha defines the camera rotation along the longitudinal axis\r\n     * @param beta defines the camera rotation along the latitudinal axis\r\n     * @param radius defines the camera distance from its target\r\n     * @param target defines the camera target\r\n     * @param scene defines the scene the camera belongs to\r\n     * @param compensateDistortion defines if the camera needs to compensate the lens distortion\r\n     * @param vrCameraMetrics defines the vr metrics associated to the camera\r\n     */\r\n    constructor(\r\n        name: string,\r\n        alpha: number,\r\n        beta: number,\r\n        radius: number,\r\n        target: Vector3,\r\n        scene?: Scene,\r\n        compensateDistortion = true,\r\n        vrCameraMetrics: VRCameraMetrics = VRCameraMetrics.GetDefault()\r\n    ) {\r\n        super(name, alpha, beta, radius, target, scene);\r\n\r\n        vrCameraMetrics.compensateDistortion = compensateDistortion;\r\n        this.setCameraRigMode(Camera.RIG_MODE_VR, { vrCameraMetrics: vrCameraMetrics });\r\n\r\n        this.inputs.addVRDeviceOrientation();\r\n    }\r\n\r\n    /**\r\n     * Gets camera class name\r\n     * @returns VRDeviceOrientationArcRotateCamera\r\n     */\r\n    public getClassName(): string {\r\n        return \"VRDeviceOrientationArcRotateCamera\";\r\n    }\r\n\r\n    protected _setRigMode = setVRRigMode.bind(null, this);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}