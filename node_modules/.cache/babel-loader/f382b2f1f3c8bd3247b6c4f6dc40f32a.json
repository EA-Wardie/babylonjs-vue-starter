{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport { Effect } from \"../Materials/effect.js\";\nimport { CustomParticleEmitter } from \"./EmitterTypes/customParticleEmitter.js\";\nimport { UniformBufferEffectCommonAccessor } from \"../Materials/uniformBufferEffectCommonAccessor.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport \"../Shaders/gpuUpdateParticles.fragment.js\";\nimport \"../Shaders/gpuUpdateParticles.vertex.js\";\n/** @hidden */\n\nvar WebGL2ParticleSystem =\n/** @class */\nfunction () {\n  function WebGL2ParticleSystem(parent, engine) {\n    this._renderVAO = [];\n    this._updateVAO = [];\n    this.alignDataInBuffer = false;\n    this._parent = parent;\n    this._engine = engine;\n    this._updateEffectOptions = {\n      attributes: [\"position\", \"initialPosition\", \"age\", \"life\", \"seed\", \"size\", \"color\", \"direction\", \"initialDirection\", \"angle\", \"cellIndex\", \"cellStartOffset\", \"noiseCoordinates1\", \"noiseCoordinates2\"],\n      uniformsNames: [\"currentCount\", \"timeDelta\", \"emitterWM\", \"lifeTime\", \"color1\", \"color2\", \"sizeRange\", \"scaleRange\", \"gravity\", \"emitPower\", \"direction1\", \"direction2\", \"minEmitBox\", \"maxEmitBox\", \"radius\", \"directionRandomizer\", \"height\", \"coneAngle\", \"stopFactor\", \"angleRange\", \"radiusRange\", \"cellInfos\", \"noiseStrength\", \"limitVelocityDamping\"],\n      uniformBuffersNames: [],\n      samplers: [\"randomSampler\", \"randomSampler2\", \"sizeGradientSampler\", \"angularSpeedGradientSampler\", \"velocityGradientSampler\", \"limitVelocityGradientSampler\", \"noiseSampler\", \"dragGradientSampler\"],\n      defines: \"\",\n      fallbacks: null,\n      onCompiled: null,\n      onError: null,\n      indexParameters: null,\n      maxSimultaneousLights: 0,\n      transformFeedbackVaryings: []\n    };\n  }\n\n  WebGL2ParticleSystem.prototype.isUpdateBufferCreated = function () {\n    return !!this._updateEffect;\n  };\n\n  WebGL2ParticleSystem.prototype.isUpdateBufferReady = function () {\n    var _a, _b;\n\n    return (_b = (_a = this._updateEffect) === null || _a === void 0 ? void 0 : _a.isReady()) !== null && _b !== void 0 ? _b : false;\n  };\n\n  WebGL2ParticleSystem.prototype.createUpdateBuffer = function (defines) {\n    this._updateEffectOptions.transformFeedbackVaryings = [\"outPosition\"];\n\n    this._updateEffectOptions.transformFeedbackVaryings.push(\"outAge\");\n\n    this._updateEffectOptions.transformFeedbackVaryings.push(\"outSize\");\n\n    this._updateEffectOptions.transformFeedbackVaryings.push(\"outLife\");\n\n    this._updateEffectOptions.transformFeedbackVaryings.push(\"outSeed\");\n\n    this._updateEffectOptions.transformFeedbackVaryings.push(\"outDirection\");\n\n    if (this._parent.particleEmitterType instanceof CustomParticleEmitter) {\n      this._updateEffectOptions.transformFeedbackVaryings.push(\"outInitialPosition\");\n    }\n\n    if (!this._parent._colorGradientsTexture) {\n      this._updateEffectOptions.transformFeedbackVaryings.push(\"outColor\");\n    }\n\n    if (!this._parent._isBillboardBased) {\n      this._updateEffectOptions.transformFeedbackVaryings.push(\"outInitialDirection\");\n    }\n\n    if (this._parent.noiseTexture) {\n      this._updateEffectOptions.transformFeedbackVaryings.push(\"outNoiseCoordinates1\");\n\n      this._updateEffectOptions.transformFeedbackVaryings.push(\"outNoiseCoordinates2\");\n    }\n\n    this._updateEffectOptions.transformFeedbackVaryings.push(\"outAngle\");\n\n    if (this._parent.isAnimationSheetEnabled) {\n      this._updateEffectOptions.transformFeedbackVaryings.push(\"outCellIndex\");\n\n      if (this._parent.spriteRandomStartCell) {\n        this._updateEffectOptions.transformFeedbackVaryings.push(\"outCellStartOffset\");\n      }\n    }\n\n    this._updateEffectOptions.defines = defines;\n    this._updateEffect = new Effect(\"gpuUpdateParticles\", this._updateEffectOptions, this._engine);\n    return new UniformBufferEffectCommonAccessor(this._updateEffect);\n  };\n\n  WebGL2ParticleSystem.prototype.createVertexBuffers = function (updateBuffer, renderVertexBuffers) {\n    this._updateVAO.push(this._createUpdateVAO(updateBuffer));\n\n    this._renderVAO.push(this._engine.recordVertexArrayObject(renderVertexBuffers, null, this._parent._getWrapper(this._parent.blendMode).effect));\n\n    this._engine.bindArrayBuffer(null);\n  };\n\n  WebGL2ParticleSystem.prototype.createParticleBuffer = function (data) {\n    return data;\n  };\n\n  WebGL2ParticleSystem.prototype.bindDrawBuffers = function (index) {\n    this._engine.bindVertexArrayObject(this._renderVAO[index], null);\n  };\n\n  WebGL2ParticleSystem.prototype.preUpdateParticleBuffer = function () {\n    var engine = this._engine;\n\n    this._engine.enableEffect(this._updateEffect);\n\n    if (!engine.setState) {\n      throw new Error(\"GPU particles cannot work without a full Engine. ThinEngine is not supported\");\n    }\n  };\n\n  WebGL2ParticleSystem.prototype.updateParticleBuffer = function (index, targetBuffer, currentActiveCount) {\n    this._updateEffect.setTexture(\"randomSampler\", this._parent._randomTexture);\n\n    this._updateEffect.setTexture(\"randomSampler2\", this._parent._randomTexture2);\n\n    if (this._parent._sizeGradientsTexture) {\n      this._updateEffect.setTexture(\"sizeGradientSampler\", this._parent._sizeGradientsTexture);\n    }\n\n    if (this._parent._angularSpeedGradientsTexture) {\n      this._updateEffect.setTexture(\"angularSpeedGradientSampler\", this._parent._angularSpeedGradientsTexture);\n    }\n\n    if (this._parent._velocityGradientsTexture) {\n      this._updateEffect.setTexture(\"velocityGradientSampler\", this._parent._velocityGradientsTexture);\n    }\n\n    if (this._parent._limitVelocityGradientsTexture) {\n      this._updateEffect.setTexture(\"limitVelocityGradientSampler\", this._parent._limitVelocityGradientsTexture);\n    }\n\n    if (this._parent._dragGradientsTexture) {\n      this._updateEffect.setTexture(\"dragGradientSampler\", this._parent._dragGradientsTexture);\n    }\n\n    if (this._parent.noiseTexture) {\n      this._updateEffect.setTexture(\"noiseSampler\", this._parent.noiseTexture);\n    } // Bind source VAO\n\n\n    this._engine.bindVertexArrayObject(this._updateVAO[index], null); // Update\n\n\n    var engine = this._engine;\n    engine.bindTransformFeedbackBuffer(targetBuffer.getBuffer());\n    engine.setRasterizerState(false);\n    engine.beginTransformFeedback(true);\n    engine.drawArraysType(3, 0, currentActiveCount);\n    engine.endTransformFeedback();\n    engine.setRasterizerState(true);\n    engine.bindTransformFeedbackBuffer(null);\n  };\n\n  WebGL2ParticleSystem.prototype.releaseBuffers = function () {};\n\n  WebGL2ParticleSystem.prototype.releaseVertexBuffers = function () {\n    for (var index = 0; index < this._updateVAO.length; index++) {\n      this._engine.releaseVertexArrayObject(this._updateVAO[index]);\n    }\n\n    this._updateVAO = [];\n\n    for (var index = 0; index < this._renderVAO.length; index++) {\n      this._engine.releaseVertexArrayObject(this._renderVAO[index]);\n    }\n\n    this._renderVAO = [];\n  };\n\n  WebGL2ParticleSystem.prototype._createUpdateVAO = function (source) {\n    var updateVertexBuffers = {};\n    updateVertexBuffers[\"position\"] = source.createVertexBuffer(\"position\", 0, 3);\n    var offset = 3;\n    updateVertexBuffers[\"age\"] = source.createVertexBuffer(\"age\", offset, 1);\n    offset += 1;\n    updateVertexBuffers[\"size\"] = source.createVertexBuffer(\"size\", offset, 3);\n    offset += 3;\n    updateVertexBuffers[\"life\"] = source.createVertexBuffer(\"life\", offset, 1);\n    offset += 1;\n    updateVertexBuffers[\"seed\"] = source.createVertexBuffer(\"seed\", offset, 4);\n    offset += 4;\n    updateVertexBuffers[\"direction\"] = source.createVertexBuffer(\"direction\", offset, 3);\n    offset += 3;\n\n    if (this._parent.particleEmitterType instanceof CustomParticleEmitter) {\n      updateVertexBuffers[\"initialPosition\"] = source.createVertexBuffer(\"initialPosition\", offset, 3);\n      offset += 3;\n    }\n\n    if (!this._parent._colorGradientsTexture) {\n      updateVertexBuffers[\"color\"] = source.createVertexBuffer(\"color\", offset, 4);\n      offset += 4;\n    }\n\n    if (!this._parent._isBillboardBased) {\n      updateVertexBuffers[\"initialDirection\"] = source.createVertexBuffer(\"initialDirection\", offset, 3);\n      offset += 3;\n    }\n\n    if (this._parent.noiseTexture) {\n      updateVertexBuffers[\"noiseCoordinates1\"] = source.createVertexBuffer(\"noiseCoordinates1\", offset, 3);\n      offset += 3;\n      updateVertexBuffers[\"noiseCoordinates2\"] = source.createVertexBuffer(\"noiseCoordinates2\", offset, 3);\n      offset += 3;\n    }\n\n    if (this._parent._angularSpeedGradientsTexture) {\n      updateVertexBuffers[\"angle\"] = source.createVertexBuffer(\"angle\", offset, 1);\n      offset += 1;\n    } else {\n      updateVertexBuffers[\"angle\"] = source.createVertexBuffer(\"angle\", offset, 2);\n      offset += 2;\n    }\n\n    if (this._parent._isAnimationSheetEnabled) {\n      updateVertexBuffers[\"cellIndex\"] = source.createVertexBuffer(\"cellIndex\", offset, 1);\n      offset += 1;\n\n      if (this._parent.spriteRandomStartCell) {\n        updateVertexBuffers[\"cellStartOffset\"] = source.createVertexBuffer(\"cellStartOffset\", offset, 1);\n        offset += 1;\n      }\n    }\n\n    var vao = this._engine.recordVertexArrayObject(updateVertexBuffers, null, this._updateEffect);\n\n    this._engine.bindArrayBuffer(null);\n\n    return vao;\n  };\n\n  return WebGL2ParticleSystem;\n}();\n\nexport { WebGL2ParticleSystem };\nRegisterClass(\"BABYLON.WebGL2ParticleSystem\", WebGL2ParticleSystem);","map":{"version":3,"mappings":"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","names":["Effect","CustomParticleEmitter","UniformBufferEffectCommonAccessor","RegisterClass","parent","engine","_parent","_engine","_updateEffectOptions","attributes","uniformsNames","uniformBuffersNames","samplers","defines","fallbacks","onCompiled","onError","indexParameters","maxSimultaneousLights","transformFeedbackVaryings","WebGL2ParticleSystem","_updateEffect","_a","isReady","_b","push","particleEmitterType","_colorGradientsTexture","_isBillboardBased","noiseTexture","isAnimationSheetEnabled","spriteRandomStartCell","updateBuffer","renderVertexBuffers","_updateVAO","_createUpdateVAO","_renderVAO","recordVertexArrayObject","_getWrapper","blendMode","effect","bindArrayBuffer","data","index","bindVertexArrayObject","enableEffect","setState","Error","targetBuffer","currentActiveCount","setTexture","_randomTexture","_randomTexture2","_sizeGradientsTexture","_angularSpeedGradientsTexture","_velocityGradientsTexture","_limitVelocityGradientsTexture","_dragGradientsTexture","bindTransformFeedbackBuffer","getBuffer","setRasterizerState","beginTransformFeedback","drawArraysType","endTransformFeedback","length","releaseVertexArrayObject","source","updateVertexBuffers","createVertexBuffer","offset","_isAnimationSheetEnabled","vao"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Particles/webgl2ParticleSystem.ts"],"sourcesContent":["import type { VertexBuffer, Buffer } from \"../Buffers/buffer\";\r\nimport type { ThinEngine } from \"../Engines/thinEngine\";\r\nimport type { IEffectCreationOptions } from \"../Materials/effect\";\r\nimport { Effect } from \"../Materials/effect\";\r\nimport type { IGPUParticleSystemPlatform } from \"./IGPUParticleSystemPlatform\";\r\n\r\nimport { CustomParticleEmitter } from \"./EmitterTypes/customParticleEmitter\";\r\nimport type { GPUParticleSystem } from \"./gpuParticleSystem\";\r\nimport type { DataArray } from \"../types\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport { UniformBufferEffectCommonAccessor } from \"../Materials/uniformBufferEffectCommonAccessor\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\nimport \"../Shaders/gpuUpdateParticles.fragment\";\r\nimport \"../Shaders/gpuUpdateParticles.vertex\";\r\n\r\ndeclare type Engine = import(\"../Engines/engine\").Engine;\r\n\r\n/** @hidden */\r\nexport class WebGL2ParticleSystem implements IGPUParticleSystemPlatform {\r\n    private _parent: GPUParticleSystem;\r\n    private _engine: ThinEngine;\r\n    private _updateEffect: Effect;\r\n    private _updateEffectOptions: IEffectCreationOptions;\r\n    private _renderVAO: WebGLVertexArrayObject[] = [];\r\n    private _updateVAO: WebGLVertexArrayObject[] = [];\r\n\r\n    public readonly alignDataInBuffer = false;\r\n\r\n    constructor(parent: GPUParticleSystem, engine: ThinEngine) {\r\n        this._parent = parent;\r\n        this._engine = engine;\r\n\r\n        this._updateEffectOptions = {\r\n            attributes: [\r\n                \"position\",\r\n                \"initialPosition\",\r\n                \"age\",\r\n                \"life\",\r\n                \"seed\",\r\n                \"size\",\r\n                \"color\",\r\n                \"direction\",\r\n                \"initialDirection\",\r\n                \"angle\",\r\n                \"cellIndex\",\r\n                \"cellStartOffset\",\r\n                \"noiseCoordinates1\",\r\n                \"noiseCoordinates2\",\r\n            ],\r\n            uniformsNames: [\r\n                \"currentCount\",\r\n                \"timeDelta\",\r\n                \"emitterWM\",\r\n                \"lifeTime\",\r\n                \"color1\",\r\n                \"color2\",\r\n                \"sizeRange\",\r\n                \"scaleRange\",\r\n                \"gravity\",\r\n                \"emitPower\",\r\n                \"direction1\",\r\n                \"direction2\",\r\n                \"minEmitBox\",\r\n                \"maxEmitBox\",\r\n                \"radius\",\r\n                \"directionRandomizer\",\r\n                \"height\",\r\n                \"coneAngle\",\r\n                \"stopFactor\",\r\n                \"angleRange\",\r\n                \"radiusRange\",\r\n                \"cellInfos\",\r\n                \"noiseStrength\",\r\n                \"limitVelocityDamping\",\r\n            ],\r\n            uniformBuffersNames: [],\r\n            samplers: [\r\n                \"randomSampler\",\r\n                \"randomSampler2\",\r\n                \"sizeGradientSampler\",\r\n                \"angularSpeedGradientSampler\",\r\n                \"velocityGradientSampler\",\r\n                \"limitVelocityGradientSampler\",\r\n                \"noiseSampler\",\r\n                \"dragGradientSampler\",\r\n            ],\r\n            defines: \"\",\r\n            fallbacks: null,\r\n            onCompiled: null,\r\n            onError: null,\r\n            indexParameters: null,\r\n            maxSimultaneousLights: 0,\r\n            transformFeedbackVaryings: [],\r\n        };\r\n    }\r\n\r\n    public isUpdateBufferCreated(): boolean {\r\n        return !!this._updateEffect;\r\n    }\r\n\r\n    public isUpdateBufferReady(): boolean {\r\n        return this._updateEffect?.isReady() ?? false;\r\n    }\r\n\r\n    public createUpdateBuffer(defines: string): UniformBufferEffectCommonAccessor {\r\n        this._updateEffectOptions.transformFeedbackVaryings = [\"outPosition\"];\r\n        this._updateEffectOptions.transformFeedbackVaryings.push(\"outAge\");\r\n        this._updateEffectOptions.transformFeedbackVaryings.push(\"outSize\");\r\n        this._updateEffectOptions.transformFeedbackVaryings.push(\"outLife\");\r\n        this._updateEffectOptions.transformFeedbackVaryings.push(\"outSeed\");\r\n        this._updateEffectOptions.transformFeedbackVaryings.push(\"outDirection\");\r\n\r\n        if (this._parent.particleEmitterType instanceof CustomParticleEmitter) {\r\n            this._updateEffectOptions.transformFeedbackVaryings.push(\"outInitialPosition\");\r\n        }\r\n\r\n        if (!this._parent._colorGradientsTexture) {\r\n            this._updateEffectOptions.transformFeedbackVaryings.push(\"outColor\");\r\n        }\r\n\r\n        if (!this._parent._isBillboardBased) {\r\n            this._updateEffectOptions.transformFeedbackVaryings.push(\"outInitialDirection\");\r\n        }\r\n\r\n        if (this._parent.noiseTexture) {\r\n            this._updateEffectOptions.transformFeedbackVaryings.push(\"outNoiseCoordinates1\");\r\n            this._updateEffectOptions.transformFeedbackVaryings.push(\"outNoiseCoordinates2\");\r\n        }\r\n\r\n        this._updateEffectOptions.transformFeedbackVaryings.push(\"outAngle\");\r\n\r\n        if (this._parent.isAnimationSheetEnabled) {\r\n            this._updateEffectOptions.transformFeedbackVaryings.push(\"outCellIndex\");\r\n            if (this._parent.spriteRandomStartCell) {\r\n                this._updateEffectOptions.transformFeedbackVaryings.push(\"outCellStartOffset\");\r\n            }\r\n        }\r\n\r\n        this._updateEffectOptions.defines = defines;\r\n        this._updateEffect = new Effect(\"gpuUpdateParticles\", this._updateEffectOptions, this._engine);\r\n\r\n        return new UniformBufferEffectCommonAccessor(this._updateEffect);\r\n    }\r\n\r\n    public createVertexBuffers(updateBuffer: Buffer, renderVertexBuffers: { [key: string]: VertexBuffer }): void {\r\n        this._updateVAO.push(this._createUpdateVAO(updateBuffer));\r\n\r\n        this._renderVAO.push(this._engine.recordVertexArrayObject(renderVertexBuffers, null, this._parent._getWrapper(this._parent.blendMode).effect!));\r\n        this._engine.bindArrayBuffer(null);\r\n    }\r\n\r\n    public createParticleBuffer(data: number[]): DataArray | DataBuffer {\r\n        return data;\r\n    }\r\n\r\n    public bindDrawBuffers(index: number): void {\r\n        this._engine.bindVertexArrayObject(this._renderVAO[index], null);\r\n    }\r\n\r\n    public preUpdateParticleBuffer(): void {\r\n        const engine = this._engine as Engine;\r\n\r\n        this._engine.enableEffect(this._updateEffect);\r\n\r\n        if (!engine.setState) {\r\n            throw new Error(\"GPU particles cannot work without a full Engine. ThinEngine is not supported\");\r\n        }\r\n    }\r\n\r\n    public updateParticleBuffer(index: number, targetBuffer: Buffer, currentActiveCount: number): void {\r\n        this._updateEffect.setTexture(\"randomSampler\", this._parent._randomTexture);\r\n        this._updateEffect.setTexture(\"randomSampler2\", this._parent._randomTexture2);\r\n\r\n        if (this._parent._sizeGradientsTexture) {\r\n            this._updateEffect.setTexture(\"sizeGradientSampler\", this._parent._sizeGradientsTexture);\r\n        }\r\n\r\n        if (this._parent._angularSpeedGradientsTexture) {\r\n            this._updateEffect.setTexture(\"angularSpeedGradientSampler\", this._parent._angularSpeedGradientsTexture);\r\n        }\r\n\r\n        if (this._parent._velocityGradientsTexture) {\r\n            this._updateEffect.setTexture(\"velocityGradientSampler\", this._parent._velocityGradientsTexture);\r\n        }\r\n\r\n        if (this._parent._limitVelocityGradientsTexture) {\r\n            this._updateEffect.setTexture(\"limitVelocityGradientSampler\", this._parent._limitVelocityGradientsTexture);\r\n        }\r\n\r\n        if (this._parent._dragGradientsTexture) {\r\n            this._updateEffect.setTexture(\"dragGradientSampler\", this._parent._dragGradientsTexture);\r\n        }\r\n\r\n        if (this._parent.noiseTexture) {\r\n            this._updateEffect.setTexture(\"noiseSampler\", this._parent.noiseTexture);\r\n        }\r\n\r\n        // Bind source VAO\r\n        this._engine.bindVertexArrayObject(this._updateVAO[index], null);\r\n\r\n        // Update\r\n        const engine = this._engine as Engine;\r\n\r\n        engine.bindTransformFeedbackBuffer(targetBuffer.getBuffer());\r\n        engine.setRasterizerState(false);\r\n        engine.beginTransformFeedback(true);\r\n        engine.drawArraysType(Constants.MATERIAL_PointListDrawMode, 0, currentActiveCount);\r\n        engine.endTransformFeedback();\r\n        engine.setRasterizerState(true);\r\n        engine.bindTransformFeedbackBuffer(null);\r\n    }\r\n\r\n    public releaseBuffers(): void {}\r\n\r\n    public releaseVertexBuffers(): void {\r\n        for (let index = 0; index < this._updateVAO.length; index++) {\r\n            this._engine.releaseVertexArrayObject(this._updateVAO[index]);\r\n        }\r\n        this._updateVAO = [];\r\n\r\n        for (let index = 0; index < this._renderVAO.length; index++) {\r\n            this._engine.releaseVertexArrayObject(this._renderVAO[index]);\r\n        }\r\n        this._renderVAO = [];\r\n    }\r\n\r\n    private _createUpdateVAO(source: Buffer): WebGLVertexArrayObject {\r\n        const updateVertexBuffers: { [key: string]: VertexBuffer } = {};\r\n        updateVertexBuffers[\"position\"] = source.createVertexBuffer(\"position\", 0, 3);\r\n\r\n        let offset = 3;\r\n        updateVertexBuffers[\"age\"] = source.createVertexBuffer(\"age\", offset, 1);\r\n        offset += 1;\r\n        updateVertexBuffers[\"size\"] = source.createVertexBuffer(\"size\", offset, 3);\r\n        offset += 3;\r\n        updateVertexBuffers[\"life\"] = source.createVertexBuffer(\"life\", offset, 1);\r\n        offset += 1;\r\n        updateVertexBuffers[\"seed\"] = source.createVertexBuffer(\"seed\", offset, 4);\r\n        offset += 4;\r\n        updateVertexBuffers[\"direction\"] = source.createVertexBuffer(\"direction\", offset, 3);\r\n        offset += 3;\r\n\r\n        if (this._parent.particleEmitterType instanceof CustomParticleEmitter) {\r\n            updateVertexBuffers[\"initialPosition\"] = source.createVertexBuffer(\"initialPosition\", offset, 3);\r\n            offset += 3;\r\n        }\r\n\r\n        if (!this._parent._colorGradientsTexture) {\r\n            updateVertexBuffers[\"color\"] = source.createVertexBuffer(\"color\", offset, 4);\r\n            offset += 4;\r\n        }\r\n\r\n        if (!this._parent._isBillboardBased) {\r\n            updateVertexBuffers[\"initialDirection\"] = source.createVertexBuffer(\"initialDirection\", offset, 3);\r\n            offset += 3;\r\n        }\r\n\r\n        if (this._parent.noiseTexture) {\r\n            updateVertexBuffers[\"noiseCoordinates1\"] = source.createVertexBuffer(\"noiseCoordinates1\", offset, 3);\r\n            offset += 3;\r\n            updateVertexBuffers[\"noiseCoordinates2\"] = source.createVertexBuffer(\"noiseCoordinates2\", offset, 3);\r\n            offset += 3;\r\n        }\r\n\r\n        if (this._parent._angularSpeedGradientsTexture) {\r\n            updateVertexBuffers[\"angle\"] = source.createVertexBuffer(\"angle\", offset, 1);\r\n            offset += 1;\r\n        } else {\r\n            updateVertexBuffers[\"angle\"] = source.createVertexBuffer(\"angle\", offset, 2);\r\n            offset += 2;\r\n        }\r\n\r\n        if (this._parent._isAnimationSheetEnabled) {\r\n            updateVertexBuffers[\"cellIndex\"] = source.createVertexBuffer(\"cellIndex\", offset, 1);\r\n            offset += 1;\r\n            if (this._parent.spriteRandomStartCell) {\r\n                updateVertexBuffers[\"cellStartOffset\"] = source.createVertexBuffer(\"cellStartOffset\", offset, 1);\r\n                offset += 1;\r\n            }\r\n        }\r\n\r\n        const vao = this._engine.recordVertexArrayObject(updateVertexBuffers, null, this._updateEffect);\r\n        this._engine.bindArrayBuffer(null);\r\n\r\n        return vao;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.WebGL2ParticleSystem\", WebGL2ParticleSystem);\r\n"]},"metadata":{},"sourceType":"module"}