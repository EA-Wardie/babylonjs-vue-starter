{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { __decorate, __extends } from \"tslib\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/refraction.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { SerializationHelper, serialize } from \"../Misc/decorators.js\";\n/**\n * Post process which applies a refraction texture\n * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#refraction\n */\n\nvar RefractionPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(RefractionPostProcess, _super);\n  /**\n   * Initializes the RefractionPostProcess\n   * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#refraction\n   * @param name The name of the effect.\n   * @param refractionTextureUrl Url of the refraction texture to use\n   * @param color the base color of the refraction (used to taint the rendering)\n   * @param depth simulated refraction depth\n   * @param colorLevel the coefficient of the base color (0 to remove base color tainting)\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   */\n\n\n  function RefractionPostProcess(name, refractionTextureUrl, color, depth, colorLevel, options, camera, samplingMode, engine, reusable) {\n    var _this = _super.call(this, name, \"refraction\", [\"baseColor\", \"depth\", \"colorLevel\"], [\"refractionSampler\"], options, camera, samplingMode, engine, reusable) || this;\n\n    _this._ownRefractionTexture = true;\n    _this.color = color;\n    _this.depth = depth;\n    _this.colorLevel = colorLevel;\n    _this.refractionTextureUrl = refractionTextureUrl;\n\n    _this.onActivateObservable.add(function (cam) {\n      _this._refTexture = _this._refTexture || new Texture(refractionTextureUrl, cam.getScene());\n    });\n\n    _this.onApplyObservable.add(function (effect) {\n      effect.setColor3(\"baseColor\", _this.color);\n      effect.setFloat(\"depth\", _this.depth);\n      effect.setFloat(\"colorLevel\", _this.colorLevel);\n      effect.setTexture(\"refractionSampler\", _this._refTexture);\n    });\n\n    return _this;\n  }\n\n  Object.defineProperty(RefractionPostProcess.prototype, \"refractionTexture\", {\n    /**\n     * Gets or sets the refraction texture\n     * Please note that you are responsible for disposing the texture if you set it manually\n     */\n    get: function get() {\n      return this._refTexture;\n    },\n    set: function set(value) {\n      if (this._refTexture && this._ownRefractionTexture) {\n        this._refTexture.dispose();\n      }\n\n      this._refTexture = value;\n      this._ownRefractionTexture = false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"RefractionPostProcess\" string\n   */\n\n  RefractionPostProcess.prototype.getClassName = function () {\n    return \"RefractionPostProcess\";\n  }; // Methods\n\n  /**\n   * Disposes of the post process\n   * @param camera Camera to dispose post process on\n   */\n\n\n  RefractionPostProcess.prototype.dispose = function (camera) {\n    if (this._refTexture && this._ownRefractionTexture) {\n      this._refTexture.dispose();\n\n      this._refTexture = null;\n    }\n\n    _super.prototype.dispose.call(this, camera);\n  };\n  /**\n   * @param parsedPostProcess\n   * @param targetCamera\n   * @param scene\n   * @param rootUrl\n   * @hidden\n   */\n\n\n  RefractionPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new RefractionPostProcess(parsedPostProcess.name, parsedPostProcess.refractionTextureUrl, parsedPostProcess.color, parsedPostProcess.depth, parsedPostProcess.colorLevel, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  __decorate([serialize()], RefractionPostProcess.prototype, \"color\", void 0);\n\n  __decorate([serialize()], RefractionPostProcess.prototype, \"depth\", void 0);\n\n  __decorate([serialize()], RefractionPostProcess.prototype, \"colorLevel\", void 0);\n\n  __decorate([serialize()], RefractionPostProcess.prototype, \"refractionTextureUrl\", void 0);\n\n  return RefractionPostProcess;\n}(PostProcess);\n\nexport { RefractionPostProcess };\nRegisterClass(\"BABYLON.RefractionPostProcess\", RefractionPostProcess);","map":{"version":3,"mappings":"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","names":["Texture","PostProcess","RegisterClass","SerializationHelper","serialize","__extends","name","refractionTextureUrl","color","depth","colorLevel","options","camera","samplingMode","engine","reusable","_super","_this","onActivateObservable","add","cam","_refTexture","getScene","onApplyObservable","effect","setColor3","setFloat","setTexture","Object","RefractionPostProcess","value","_ownRefractionTexture","dispose","call","parsedPostProcess","targetCamera","scene","rootUrl","Parse","renderTargetSamplingMode","getEngine","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/PostProcesses/refractionPostProcess.ts"],"sourcesContent":["import type { Color3 } from \"../Maths/math.color\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Engine } from \"../Engines/engine\";\r\n\r\nimport \"../Shaders/refraction.fragment\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { SerializationHelper, serialize } from \"../Misc/decorators\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * Post process which applies a refraction texture\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#refraction\r\n */\r\nexport class RefractionPostProcess extends PostProcess {\r\n    private _refTexture: Texture;\r\n    private _ownRefractionTexture = true;\r\n\r\n    /** the base color of the refraction (used to taint the rendering) */\r\n    @serialize()\r\n    public color: Color3;\r\n\r\n    /** simulated refraction depth */\r\n    @serialize()\r\n    public depth: number;\r\n\r\n    /** the coefficient of the base color (0 to remove base color tainting) */\r\n    @serialize()\r\n    public colorLevel: number;\r\n\r\n    /** Gets the url used to load the refraction texture */\r\n    @serialize()\r\n    public refractionTextureUrl: string;\r\n\r\n    /**\r\n     * Gets or sets the refraction texture\r\n     * Please note that you are responsible for disposing the texture if you set it manually\r\n     */\r\n    public get refractionTexture(): Texture {\r\n        return this._refTexture;\r\n    }\r\n\r\n    public set refractionTexture(value: Texture) {\r\n        if (this._refTexture && this._ownRefractionTexture) {\r\n            this._refTexture.dispose();\r\n        }\r\n\r\n        this._refTexture = value;\r\n        this._ownRefractionTexture = false;\r\n    }\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"RefractionPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"RefractionPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Initializes the RefractionPostProcess\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#refraction\r\n     * @param name The name of the effect.\r\n     * @param refractionTextureUrl Url of the refraction texture to use\r\n     * @param color the base color of the refraction (used to taint the rendering)\r\n     * @param depth simulated refraction depth\r\n     * @param colorLevel the coefficient of the base color (0 to remove base color tainting)\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        refractionTextureUrl: string,\r\n        color: Color3,\r\n        depth: number,\r\n        colorLevel: number,\r\n        options: number | PostProcessOptions,\r\n        camera: Camera,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean\r\n    ) {\r\n        super(name, \"refraction\", [\"baseColor\", \"depth\", \"colorLevel\"], [\"refractionSampler\"], options, camera, samplingMode, engine, reusable);\r\n\r\n        this.color = color;\r\n        this.depth = depth;\r\n        this.colorLevel = colorLevel;\r\n        this.refractionTextureUrl = refractionTextureUrl;\r\n\r\n        this.onActivateObservable.add((cam: Camera) => {\r\n            this._refTexture = this._refTexture || new Texture(refractionTextureUrl, cam.getScene());\r\n        });\r\n\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setColor3(\"baseColor\", this.color);\r\n            effect.setFloat(\"depth\", this.depth);\r\n            effect.setFloat(\"colorLevel\", this.colorLevel);\r\n\r\n            effect.setTexture(\"refractionSampler\", this._refTexture);\r\n        });\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * Disposes of the post process\r\n     * @param camera Camera to dispose post process on\r\n     */\r\n    public dispose(camera: Camera): void {\r\n        if (this._refTexture && this._ownRefractionTexture) {\r\n            this._refTexture.dispose();\r\n            (<any>this._refTexture) = null;\r\n        }\r\n\r\n        super.dispose(camera);\r\n    }\r\n\r\n    /**\r\n     * @param parsedPostProcess\r\n     * @param targetCamera\r\n     * @param scene\r\n     * @param rootUrl\r\n     * @hidden\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string) {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new RefractionPostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.refractionTextureUrl,\r\n                    parsedPostProcess.color,\r\n                    parsedPostProcess.depth,\r\n                    parsedPostProcess.colorLevel,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    scene.getEngine(),\r\n                    parsedPostProcess.reusable\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.RefractionPostProcess\", RefractionPostProcess);\r\n"]},"metadata":{},"sourceType":"module"}