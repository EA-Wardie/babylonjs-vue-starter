{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { __decorate, __extends } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { BaseCameraMouseWheelInput } from \"../../Cameras/Inputs/BaseCameraMouseWheelInput.js\";\nimport { Matrix, Vector3 } from \"../../Maths/math.vector.js\";\nimport { Coordinate } from \"../../Maths/math.axis.js\"; // eslint-disable-next-line @typescript-eslint/naming-convention\n\nvar _CameraProperty;\n\n(function (_CameraProperty) {\n  _CameraProperty[_CameraProperty[\"MoveRelative\"] = 0] = \"MoveRelative\";\n  _CameraProperty[_CameraProperty[\"RotateRelative\"] = 1] = \"RotateRelative\";\n  _CameraProperty[_CameraProperty[\"MoveScene\"] = 2] = \"MoveScene\";\n})(_CameraProperty || (_CameraProperty = {}));\n/**\n * Manage the mouse wheel inputs to control a free camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\n\n\nvar FreeCameraMouseWheelInput =\n/** @class */\nfunction (_super) {\n  __extends(FreeCameraMouseWheelInput, _super);\n\n  function FreeCameraMouseWheelInput() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._moveRelative = Vector3.Zero();\n    _this._rotateRelative = Vector3.Zero();\n    _this._moveScene = Vector3.Zero();\n    /**\n     * These are set to the desired default behaviour.\n     */\n\n    _this._wheelXAction = _CameraProperty.MoveRelative;\n    _this._wheelXActionCoordinate = Coordinate.X;\n    _this._wheelYAction = _CameraProperty.MoveRelative;\n    _this._wheelYActionCoordinate = Coordinate.Z;\n    _this._wheelZAction = null;\n    _this._wheelZActionCoordinate = null;\n    return _this;\n  }\n  /**\n   * Gets the class name of the current input.\n   * @returns the class name\n   */\n\n\n  FreeCameraMouseWheelInput.prototype.getClassName = function () {\n    return \"FreeCameraMouseWheelInput\";\n  };\n\n  Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelXMoveRelative\", {\n    /**\n     * Get the configured movement axis (relative to camera's orientation) the\n     * mouse wheel's X axis controls.\n     * @returns The configured axis or null if none.\n     */\n    get: function get() {\n      if (this._wheelXAction !== _CameraProperty.MoveRelative) {\n        return null;\n      }\n\n      return this._wheelXActionCoordinate;\n    },\n\n    /**\n     * Set which movement axis (relative to camera's orientation) the mouse\n     * wheel's X axis controls.\n     * @param axis The axis to be moved. Set null to clear.\n     */\n    set: function set(axis) {\n      if (axis === null && this._wheelXAction !== _CameraProperty.MoveRelative) {\n        // Attempting to clear different _wheelXAction.\n        return;\n      }\n\n      this._wheelXAction = _CameraProperty.MoveRelative;\n      this._wheelXActionCoordinate = axis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelYMoveRelative\", {\n    /**\n     * Get the configured movement axis (relative to camera's orientation) the\n     * mouse wheel's Y axis controls.\n     * @returns The configured axis or null if none.\n     */\n    get: function get() {\n      if (this._wheelYAction !== _CameraProperty.MoveRelative) {\n        return null;\n      }\n\n      return this._wheelYActionCoordinate;\n    },\n\n    /**\n     * Set which movement axis (relative to camera's orientation) the mouse\n     * wheel's Y axis controls.\n     * @param axis The axis to be moved. Set null to clear.\n     */\n    set: function set(axis) {\n      if (axis === null && this._wheelYAction !== _CameraProperty.MoveRelative) {\n        // Attempting to clear different _wheelYAction.\n        return;\n      }\n\n      this._wheelYAction = _CameraProperty.MoveRelative;\n      this._wheelYActionCoordinate = axis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelZMoveRelative\", {\n    /**\n     * Get the configured movement axis (relative to camera's orientation) the\n     * mouse wheel's Z axis controls.\n     * @returns The configured axis or null if none.\n     */\n    get: function get() {\n      if (this._wheelZAction !== _CameraProperty.MoveRelative) {\n        return null;\n      }\n\n      return this._wheelZActionCoordinate;\n    },\n\n    /**\n     * Set which movement axis (relative to camera's orientation) the mouse\n     * wheel's Z axis controls.\n     * @param axis The axis to be moved. Set null to clear.\n     */\n    set: function set(axis) {\n      if (axis === null && this._wheelZAction !== _CameraProperty.MoveRelative) {\n        // Attempting to clear different _wheelZAction.\n        return;\n      }\n\n      this._wheelZAction = _CameraProperty.MoveRelative;\n      this._wheelZActionCoordinate = axis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelXRotateRelative\", {\n    /**\n     * Get the configured rotation axis (relative to camera's orientation) the\n     * mouse wheel's X axis controls.\n     * @returns The configured axis or null if none.\n     */\n    get: function get() {\n      if (this._wheelXAction !== _CameraProperty.RotateRelative) {\n        return null;\n      }\n\n      return this._wheelXActionCoordinate;\n    },\n\n    /**\n     * Set which rotation axis (relative to camera's orientation) the mouse\n     * wheel's X axis controls.\n     * @param axis The axis to be moved. Set null to clear.\n     */\n    set: function set(axis) {\n      if (axis === null && this._wheelXAction !== _CameraProperty.RotateRelative) {\n        // Attempting to clear different _wheelXAction.\n        return;\n      }\n\n      this._wheelXAction = _CameraProperty.RotateRelative;\n      this._wheelXActionCoordinate = axis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelYRotateRelative\", {\n    /**\n     * Get the configured rotation axis (relative to camera's orientation) the\n     * mouse wheel's Y axis controls.\n     * @returns The configured axis or null if none.\n     */\n    get: function get() {\n      if (this._wheelYAction !== _CameraProperty.RotateRelative) {\n        return null;\n      }\n\n      return this._wheelYActionCoordinate;\n    },\n\n    /**\n     * Set which rotation axis (relative to camera's orientation) the mouse\n     * wheel's Y axis controls.\n     * @param axis The axis to be moved. Set null to clear.\n     */\n    set: function set(axis) {\n      if (axis === null && this._wheelYAction !== _CameraProperty.RotateRelative) {\n        // Attempting to clear different _wheelYAction.\n        return;\n      }\n\n      this._wheelYAction = _CameraProperty.RotateRelative;\n      this._wheelYActionCoordinate = axis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelZRotateRelative\", {\n    /**\n     * Get the configured rotation axis (relative to camera's orientation) the\n     * mouse wheel's Z axis controls.\n     * @returns The configured axis or null if none.\n     */\n    get: function get() {\n      if (this._wheelZAction !== _CameraProperty.RotateRelative) {\n        return null;\n      }\n\n      return this._wheelZActionCoordinate;\n    },\n\n    /**\n     * Set which rotation axis (relative to camera's orientation) the mouse\n     * wheel's Z axis controls.\n     * @param axis The axis to be moved. Set null to clear.\n     */\n    set: function set(axis) {\n      if (axis === null && this._wheelZAction !== _CameraProperty.RotateRelative) {\n        // Attempting to clear different _wheelZAction.\n        return;\n      }\n\n      this._wheelZAction = _CameraProperty.RotateRelative;\n      this._wheelZActionCoordinate = axis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelXMoveScene\", {\n    /**\n     * Get the configured movement axis (relative to the scene) the mouse wheel's\n     * X axis controls.\n     * @returns The configured axis or null if none.\n     */\n    get: function get() {\n      if (this._wheelXAction !== _CameraProperty.MoveScene) {\n        return null;\n      }\n\n      return this._wheelXActionCoordinate;\n    },\n\n    /**\n     * Set which movement axis (relative to the scene) the mouse wheel's X axis\n     * controls.\n     * @param axis The axis to be moved. Set null to clear.\n     */\n    set: function set(axis) {\n      if (axis === null && this._wheelXAction !== _CameraProperty.MoveScene) {\n        // Attempting to clear different _wheelXAction.\n        return;\n      }\n\n      this._wheelXAction = _CameraProperty.MoveScene;\n      this._wheelXActionCoordinate = axis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelYMoveScene\", {\n    /**\n     * Get the configured movement axis (relative to the scene) the mouse wheel's\n     * Y axis controls.\n     * @returns The configured axis or null if none.\n     */\n    get: function get() {\n      if (this._wheelYAction !== _CameraProperty.MoveScene) {\n        return null;\n      }\n\n      return this._wheelYActionCoordinate;\n    },\n\n    /**\n     * Set which movement axis (relative to the scene) the mouse wheel's Y axis\n     * controls.\n     * @param axis The axis to be moved. Set null to clear.\n     */\n    set: function set(axis) {\n      if (axis === null && this._wheelYAction !== _CameraProperty.MoveScene) {\n        // Attempting to clear different _wheelYAction.\n        return;\n      }\n\n      this._wheelYAction = _CameraProperty.MoveScene;\n      this._wheelYActionCoordinate = axis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelZMoveScene\", {\n    /**\n     * Get the configured movement axis (relative to the scene) the mouse wheel's\n     * Z axis controls.\n     * @returns The configured axis or null if none.\n     */\n    get: function get() {\n      if (this._wheelZAction !== _CameraProperty.MoveScene) {\n        return null;\n      }\n\n      return this._wheelZActionCoordinate;\n    },\n\n    /**\n     * Set which movement axis (relative to the scene) the mouse wheel's Z axis\n     * controls.\n     * @param axis The axis to be moved. Set null to clear.\n     */\n    set: function set(axis) {\n      if (axis === null && this._wheelZAction !== _CameraProperty.MoveScene) {\n        // Attempting to clear different _wheelZAction.\n        return;\n      }\n\n      this._wheelZAction = _CameraProperty.MoveScene;\n      this._wheelZActionCoordinate = axis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Called for each rendered frame.\n   */\n\n  FreeCameraMouseWheelInput.prototype.checkInputs = function () {\n    if (this._wheelDeltaX === 0 && this._wheelDeltaY === 0 && this._wheelDeltaZ == 0) {\n      return;\n    } // Clear the camera properties that we might be updating.\n\n\n    this._moveRelative.setAll(0);\n\n    this._rotateRelative.setAll(0);\n\n    this._moveScene.setAll(0); // Set the camera properties that are to be updated.\n\n\n    this._updateCamera();\n\n    if (this.camera.getScene().useRightHandedSystem) {\n      // TODO: Does this need done for worldUpdate too?\n      this._moveRelative.z *= -1;\n    } // Convert updates relative to camera to world position update.\n\n\n    var cameraTransformMatrix = Matrix.Zero();\n    this.camera.getViewMatrix().invertToRef(cameraTransformMatrix);\n    var transformedDirection = Vector3.Zero();\n    Vector3.TransformNormalToRef(this._moveRelative, cameraTransformMatrix, transformedDirection); // Apply updates to camera position.\n\n    this.camera.cameraRotation.x += this._rotateRelative.x / 200;\n    this.camera.cameraRotation.y += this._rotateRelative.y / 200;\n    this.camera.cameraDirection.addInPlace(transformedDirection);\n    this.camera.cameraDirection.addInPlace(this._moveScene); // Call the base class implementation to handle observers and do cleanup.\n\n    _super.prototype.checkInputs.call(this);\n  };\n  /**\n   * Update the camera according to any configured properties for the 3\n   * mouse-wheel axis.\n   */\n\n\n  FreeCameraMouseWheelInput.prototype._updateCamera = function () {\n    // Do the camera updates for each of the 3 touch-wheel axis.\n    this._updateCameraProperty(this._wheelDeltaX, this._wheelXAction, this._wheelXActionCoordinate);\n\n    this._updateCameraProperty(this._wheelDeltaY, this._wheelYAction, this._wheelYActionCoordinate);\n\n    this._updateCameraProperty(this._wheelDeltaZ, this._wheelZAction, this._wheelZActionCoordinate);\n  };\n  /**\n   * Update one property of the camera.\n   * @param value\n   * @param cameraProperty\n   * @param coordinate\n   */\n\n\n  FreeCameraMouseWheelInput.prototype._updateCameraProperty = function (\n  /* Mouse-wheel delta. */\n  value,\n  /* Camera property to be changed. */\n  cameraProperty,\n  /* Axis of Camera property to be changed. */\n  coordinate) {\n    if (value === 0) {\n      // Mouse wheel has not moved.\n      return;\n    }\n\n    if (cameraProperty === null || coordinate === null) {\n      // Mouse wheel axis not configured.\n      return;\n    }\n\n    var action = null;\n\n    switch (cameraProperty) {\n      case _CameraProperty.MoveRelative:\n        action = this._moveRelative;\n        break;\n\n      case _CameraProperty.RotateRelative:\n        action = this._rotateRelative;\n        break;\n\n      case _CameraProperty.MoveScene:\n        action = this._moveScene;\n        break;\n    }\n\n    switch (coordinate) {\n      case Coordinate.X:\n        action.set(value, 0, 0);\n        break;\n\n      case Coordinate.Y:\n        action.set(0, value, 0);\n        break;\n\n      case Coordinate.Z:\n        action.set(0, 0, value);\n        break;\n    }\n  };\n\n  __decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelXMoveRelative\", null);\n\n  __decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelYMoveRelative\", null);\n\n  __decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelZMoveRelative\", null);\n\n  __decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelXRotateRelative\", null);\n\n  __decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelYRotateRelative\", null);\n\n  __decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelZRotateRelative\", null);\n\n  __decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelXMoveScene\", null);\n\n  __decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelYMoveScene\", null);\n\n  __decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelZMoveScene\", null);\n\n  return FreeCameraMouseWheelInput;\n}(BaseCameraMouseWheelInput);\n\nexport { FreeCameraMouseWheelInput };\nCameraInputTypes[\"FreeCameraMouseWheelInput\"] = FreeCameraMouseWheelInput;","map":{"version":3,"mappings":"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","names":["serialize","CameraInputTypes","BaseCameraMouseWheelInput","Matrix","Vector3","Coordinate","_CameraProperty","__extends","_this","Zero","MoveRelative","X","Z","FreeCameraMouseWheelInput","Object","_wheelXAction","_wheelXActionCoordinate","axis","_wheelYAction","_wheelYActionCoordinate","_wheelZAction","_wheelZActionCoordinate","RotateRelative","MoveScene","_wheelDeltaX","_wheelDeltaY","_wheelDeltaZ","_moveRelative","setAll","_rotateRelative","_moveScene","_updateCamera","camera","getScene","useRightHandedSystem","z","cameraTransformMatrix","getViewMatrix","invertToRef","transformedDirection","TransformNormalToRef","cameraRotation","x","y","cameraDirection","addInPlace","_super","checkInputs","call","_updateCameraProperty","value","cameraProperty","coordinate","action","set","Y","__decorate"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Cameras/Inputs/freeCameraMouseWheelInput.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport type { FreeCamera } from \"../../Cameras/freeCamera\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport { BaseCameraMouseWheelInput } from \"../../Cameras/Inputs/BaseCameraMouseWheelInput\";\r\nimport { Matrix, Vector3 } from \"../../Maths/math.vector\";\r\nimport { Coordinate } from \"../../Maths/math.axis\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nenum _CameraProperty {\r\n    MoveRelative,\r\n    RotateRelative,\r\n    MoveScene,\r\n}\r\n\r\n/**\r\n * Manage the mouse wheel inputs to control a free camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class FreeCameraMouseWheelInput extends BaseCameraMouseWheelInput {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: FreeCamera;\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FreeCameraMouseWheelInput\";\r\n    }\r\n\r\n    /**\r\n     * Set which movement axis (relative to camera's orientation) the mouse\r\n     * wheel's X axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelXMoveRelative(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelXAction !== _CameraProperty.MoveRelative) {\r\n            // Attempting to clear different _wheelXAction.\r\n            return;\r\n        }\r\n        this._wheelXAction = _CameraProperty.MoveRelative;\r\n        this._wheelXActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured movement axis (relative to camera's orientation) the\r\n     * mouse wheel's X axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelXMoveRelative(): Nullable<Coordinate> {\r\n        if (this._wheelXAction !== _CameraProperty.MoveRelative) {\r\n            return null;\r\n        }\r\n        return this._wheelXActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which movement axis (relative to camera's orientation) the mouse\r\n     * wheel's Y axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelYMoveRelative(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelYAction !== _CameraProperty.MoveRelative) {\r\n            // Attempting to clear different _wheelYAction.\r\n            return;\r\n        }\r\n        this._wheelYAction = _CameraProperty.MoveRelative;\r\n        this._wheelYActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured movement axis (relative to camera's orientation) the\r\n     * mouse wheel's Y axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelYMoveRelative(): Nullable<Coordinate> {\r\n        if (this._wheelYAction !== _CameraProperty.MoveRelative) {\r\n            return null;\r\n        }\r\n        return this._wheelYActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which movement axis (relative to camera's orientation) the mouse\r\n     * wheel's Z axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelZMoveRelative(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelZAction !== _CameraProperty.MoveRelative) {\r\n            // Attempting to clear different _wheelZAction.\r\n            return;\r\n        }\r\n        this._wheelZAction = _CameraProperty.MoveRelative;\r\n        this._wheelZActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured movement axis (relative to camera's orientation) the\r\n     * mouse wheel's Z axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelZMoveRelative(): Nullable<Coordinate> {\r\n        if (this._wheelZAction !== _CameraProperty.MoveRelative) {\r\n            return null;\r\n        }\r\n        return this._wheelZActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which rotation axis (relative to camera's orientation) the mouse\r\n     * wheel's X axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelXRotateRelative(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelXAction !== _CameraProperty.RotateRelative) {\r\n            // Attempting to clear different _wheelXAction.\r\n            return;\r\n        }\r\n        this._wheelXAction = _CameraProperty.RotateRelative;\r\n        this._wheelXActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured rotation axis (relative to camera's orientation) the\r\n     * mouse wheel's X axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelXRotateRelative(): Nullable<Coordinate> {\r\n        if (this._wheelXAction !== _CameraProperty.RotateRelative) {\r\n            return null;\r\n        }\r\n        return this._wheelXActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which rotation axis (relative to camera's orientation) the mouse\r\n     * wheel's Y axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelYRotateRelative(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelYAction !== _CameraProperty.RotateRelative) {\r\n            // Attempting to clear different _wheelYAction.\r\n            return;\r\n        }\r\n        this._wheelYAction = _CameraProperty.RotateRelative;\r\n        this._wheelYActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured rotation axis (relative to camera's orientation) the\r\n     * mouse wheel's Y axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelYRotateRelative(): Nullable<Coordinate> {\r\n        if (this._wheelYAction !== _CameraProperty.RotateRelative) {\r\n            return null;\r\n        }\r\n        return this._wheelYActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which rotation axis (relative to camera's orientation) the mouse\r\n     * wheel's Z axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelZRotateRelative(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelZAction !== _CameraProperty.RotateRelative) {\r\n            // Attempting to clear different _wheelZAction.\r\n            return;\r\n        }\r\n        this._wheelZAction = _CameraProperty.RotateRelative;\r\n        this._wheelZActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured rotation axis (relative to camera's orientation) the\r\n     * mouse wheel's Z axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelZRotateRelative(): Nullable<Coordinate> {\r\n        if (this._wheelZAction !== _CameraProperty.RotateRelative) {\r\n            return null;\r\n        }\r\n        return this._wheelZActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which movement axis (relative to the scene) the mouse wheel's X axis\r\n     * controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelXMoveScene(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelXAction !== _CameraProperty.MoveScene) {\r\n            // Attempting to clear different _wheelXAction.\r\n            return;\r\n        }\r\n        this._wheelXAction = _CameraProperty.MoveScene;\r\n        this._wheelXActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured movement axis (relative to the scene) the mouse wheel's\r\n     * X axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelXMoveScene(): Nullable<Coordinate> {\r\n        if (this._wheelXAction !== _CameraProperty.MoveScene) {\r\n            return null;\r\n        }\r\n        return this._wheelXActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which movement axis (relative to the scene) the mouse wheel's Y axis\r\n     * controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelYMoveScene(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelYAction !== _CameraProperty.MoveScene) {\r\n            // Attempting to clear different _wheelYAction.\r\n            return;\r\n        }\r\n        this._wheelYAction = _CameraProperty.MoveScene;\r\n        this._wheelYActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured movement axis (relative to the scene) the mouse wheel's\r\n     * Y axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelYMoveScene(): Nullable<Coordinate> {\r\n        if (this._wheelYAction !== _CameraProperty.MoveScene) {\r\n            return null;\r\n        }\r\n        return this._wheelYActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Set which movement axis (relative to the scene) the mouse wheel's Z axis\r\n     * controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\r\n    @serialize()\r\n    public set wheelZMoveScene(axis: Nullable<Coordinate>) {\r\n        if (axis === null && this._wheelZAction !== _CameraProperty.MoveScene) {\r\n            // Attempting to clear different _wheelZAction.\r\n            return;\r\n        }\r\n        this._wheelZAction = _CameraProperty.MoveScene;\r\n        this._wheelZActionCoordinate = axis;\r\n    }\r\n\r\n    /**\r\n     * Get the configured movement axis (relative to the scene) the mouse wheel's\r\n     * Z axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\r\n    public get wheelZMoveScene(): Nullable<Coordinate> {\r\n        if (this._wheelZAction !== _CameraProperty.MoveScene) {\r\n            return null;\r\n        }\r\n        return this._wheelZActionCoordinate;\r\n    }\r\n\r\n    /**\r\n     * Called for each rendered frame.\r\n     */\r\n    public checkInputs(): void {\r\n        if (this._wheelDeltaX === 0 && this._wheelDeltaY === 0 && this._wheelDeltaZ == 0) {\r\n            return;\r\n        }\r\n\r\n        // Clear the camera properties that we might be updating.\r\n        this._moveRelative.setAll(0);\r\n        this._rotateRelative.setAll(0);\r\n        this._moveScene.setAll(0);\r\n\r\n        // Set the camera properties that are to be updated.\r\n        this._updateCamera();\r\n\r\n        if (this.camera.getScene().useRightHandedSystem) {\r\n            // TODO: Does this need done for worldUpdate too?\r\n            this._moveRelative.z *= -1;\r\n        }\r\n\r\n        // Convert updates relative to camera to world position update.\r\n        const cameraTransformMatrix = Matrix.Zero();\r\n        this.camera.getViewMatrix().invertToRef(cameraTransformMatrix);\r\n\r\n        const transformedDirection = Vector3.Zero();\r\n        Vector3.TransformNormalToRef(this._moveRelative, cameraTransformMatrix, transformedDirection);\r\n\r\n        // Apply updates to camera position.\r\n        this.camera.cameraRotation.x += this._rotateRelative.x / 200;\r\n        this.camera.cameraRotation.y += this._rotateRelative.y / 200;\r\n        this.camera.cameraDirection.addInPlace(transformedDirection);\r\n        this.camera.cameraDirection.addInPlace(this._moveScene);\r\n\r\n        // Call the base class implementation to handle observers and do cleanup.\r\n        super.checkInputs();\r\n    }\r\n\r\n    private _moveRelative = Vector3.Zero();\r\n    private _rotateRelative = Vector3.Zero();\r\n    private _moveScene = Vector3.Zero();\r\n\r\n    /**\r\n     * These are set to the desired default behaviour.\r\n     */\r\n    private _wheelXAction: Nullable<_CameraProperty> = _CameraProperty.MoveRelative;\r\n    private _wheelXActionCoordinate: Nullable<Coordinate> = Coordinate.X;\r\n    private _wheelYAction: Nullable<_CameraProperty> = _CameraProperty.MoveRelative;\r\n    private _wheelYActionCoordinate: Nullable<Coordinate> = Coordinate.Z;\r\n    private _wheelZAction: Nullable<_CameraProperty> = null;\r\n    private _wheelZActionCoordinate: Nullable<Coordinate> = null;\r\n\r\n    /**\r\n     * Update the camera according to any configured properties for the 3\r\n     * mouse-wheel axis.\r\n     */\r\n    private _updateCamera(): void {\r\n        // Do the camera updates for each of the 3 touch-wheel axis.\r\n        this._updateCameraProperty(this._wheelDeltaX, this._wheelXAction, this._wheelXActionCoordinate);\r\n        this._updateCameraProperty(this._wheelDeltaY, this._wheelYAction, this._wheelYActionCoordinate);\r\n        this._updateCameraProperty(this._wheelDeltaZ, this._wheelZAction, this._wheelZActionCoordinate);\r\n    }\r\n\r\n    /**\r\n     * Update one property of the camera.\r\n     * @param value\r\n     * @param cameraProperty\r\n     * @param coordinate\r\n     */\r\n    private _updateCameraProperty(\r\n        /* Mouse-wheel delta. */\r\n        value: number,\r\n        /* Camera property to be changed. */\r\n        cameraProperty: Nullable<_CameraProperty>,\r\n        /* Axis of Camera property to be changed. */\r\n        coordinate: Nullable<Coordinate>\r\n    ): void {\r\n        if (value === 0) {\r\n            // Mouse wheel has not moved.\r\n            return;\r\n        }\r\n        if (cameraProperty === null || coordinate === null) {\r\n            // Mouse wheel axis not configured.\r\n            return;\r\n        }\r\n\r\n        let action = null;\r\n        switch (cameraProperty) {\r\n            case _CameraProperty.MoveRelative:\r\n                action = this._moveRelative;\r\n                break;\r\n            case _CameraProperty.RotateRelative:\r\n                action = this._rotateRelative;\r\n                break;\r\n            case _CameraProperty.MoveScene:\r\n                action = this._moveScene;\r\n                break;\r\n        }\r\n\r\n        switch (coordinate) {\r\n            case Coordinate.X:\r\n                action.set(value, 0, 0);\r\n                break;\r\n            case Coordinate.Y:\r\n                action.set(0, value, 0);\r\n                break;\r\n            case Coordinate.Z:\r\n                action.set(0, 0, value);\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FreeCameraMouseWheelInput\"] = FreeCameraMouseWheelInput;\r\n"]},"metadata":{},"sourceType":"module"}