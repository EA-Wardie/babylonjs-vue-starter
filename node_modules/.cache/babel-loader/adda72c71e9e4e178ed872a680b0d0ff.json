{"ast":null,"code":"/**\n * States of the webXR experience\n */\nexport var WebXRState;\n\n(function (WebXRState) {\n  /**\n   * Transitioning to being in XR mode\n   */\n  WebXRState[WebXRState[\"ENTERING_XR\"] = 0] = \"ENTERING_XR\";\n  /**\n   * Transitioning to non XR mode\n   */\n\n  WebXRState[WebXRState[\"EXITING_XR\"] = 1] = \"EXITING_XR\";\n  /**\n   * In XR mode and presenting\n   */\n\n  WebXRState[WebXRState[\"IN_XR\"] = 2] = \"IN_XR\";\n  /**\n   * Not entered XR mode\n   */\n\n  WebXRState[WebXRState[\"NOT_IN_XR\"] = 3] = \"NOT_IN_XR\";\n})(WebXRState || (WebXRState = {}));\n/**\n * The state of the XR camera's tracking\n */\n\n\nexport var WebXRTrackingState;\n\n(function (WebXRTrackingState) {\n  /**\n   * No transformation received, device is not being tracked\n   */\n  WebXRTrackingState[WebXRTrackingState[\"NOT_TRACKING\"] = 0] = \"NOT_TRACKING\";\n  /**\n   * Tracking lost - using emulated position\n   */\n\n  WebXRTrackingState[WebXRTrackingState[\"TRACKING_LOST\"] = 1] = \"TRACKING_LOST\";\n  /**\n   * Transformation tracking works normally\n   */\n\n  WebXRTrackingState[WebXRTrackingState[\"TRACKING\"] = 2] = \"TRACKING\";\n})(WebXRTrackingState || (WebXRTrackingState = {}));","map":{"version":3,"mappings":"AAGA;;;AAGA,WAAYA,UAAZ;;AAAA,WAAYA,UAAZ,EAAsB;AAClB;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACH,CAjBD,EAAYA,UAAU,KAAVA,UAAU,MAAtB;AAmBA;;;;;AAGA,WAAYC,kBAAZ;;AAAA,WAAYA,kBAAZ,EAA8B;AAC1B;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACH,CAbD,EAAYA,kBAAkB,KAAlBA,kBAAkB,MAA9B","names":["WebXRState","WebXRTrackingState"],"sourceRoot":"","sources":["../../../../../lts/core/generated/XR/webXRTypes.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { IDisposable } from \"../scene\";\r\n\r\n/**\r\n * States of the webXR experience\r\n */\r\nexport enum WebXRState {\r\n    /**\r\n     * Transitioning to being in XR mode\r\n     */\r\n    ENTERING_XR,\r\n    /**\r\n     * Transitioning to non XR mode\r\n     */\r\n    EXITING_XR,\r\n    /**\r\n     * In XR mode and presenting\r\n     */\r\n    IN_XR,\r\n    /**\r\n     * Not entered XR mode\r\n     */\r\n    NOT_IN_XR,\r\n}\r\n\r\n/**\r\n * The state of the XR camera's tracking\r\n */\r\nexport enum WebXRTrackingState {\r\n    /**\r\n     * No transformation received, device is not being tracked\r\n     */\r\n    NOT_TRACKING,\r\n    /**\r\n     * Tracking lost - using emulated position\r\n     */\r\n    TRACKING_LOST,\r\n    /**\r\n     * Transformation tracking works normally\r\n     */\r\n    TRACKING,\r\n}\r\n\r\n/**\r\n * Abstraction of the XR render target\r\n */\r\nexport interface WebXRRenderTarget extends IDisposable {\r\n    /**\r\n     * xrpresent context of the canvas which can be used to display/mirror xr content\r\n     */\r\n    canvasContext: WebGLRenderingContext;\r\n\r\n    /**\r\n     * xr layer for the canvas\r\n     */\r\n    xrLayer: Nullable<XRWebGLLayer>;\r\n\r\n    /**\r\n     * Initializes a XRWebGLLayer to be used as the session's baseLayer.\r\n     * @param xrSession xr session\r\n     * @returns a promise that will resolve once the XR Layer has been created\r\n     */\r\n    initializeXRLayerAsync(xrSession: XRSession): Promise<XRWebGLLayer>;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}