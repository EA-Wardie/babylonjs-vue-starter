{"ast":null,"code":"import \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport { __decorate, __extends } from \"tslib\";\nimport { serialize } from \"../Misc/decorators.js\";\nimport { ImageProcessingConfiguration } from \"../Materials/imageProcessingConfiguration.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nimport \"../Shaders/imageProcessing.fragment.js\";\nimport \"../Shaders/postprocess.vertex.js\";\n/**\n * ImageProcessingPostProcess\n * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#imageprocessing\n */\n\nvar ImageProcessingPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(ImageProcessingPostProcess, _super);\n\n  function ImageProcessingPostProcess(name, options, camera, samplingMode, engine, reusable, textureType, imageProcessingConfiguration) {\n    if (camera === void 0) {\n      camera = null;\n    }\n\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    var _this = _super.call(this, name, \"imageProcessing\", [], [], options, camera, samplingMode, engine, reusable, null, textureType, \"postprocess\", null, true) || this;\n\n    _this._fromLinearSpace = true;\n    /**\n     * Defines cache preventing GC.\n     */\n\n    _this._defines = {\n      IMAGEPROCESSING: false,\n      VIGNETTE: false,\n      VIGNETTEBLENDMODEMULTIPLY: false,\n      VIGNETTEBLENDMODEOPAQUE: false,\n      TONEMAPPING: false,\n      TONEMAPPING_ACES: false,\n      CONTRAST: false,\n      COLORCURVES: false,\n      COLORGRADING: false,\n      COLORGRADING3D: false,\n      FROMLINEARSPACE: false,\n      SAMPLER3DGREENDEPTH: false,\n      SAMPLER3DBGRMAP: false,\n      IMAGEPROCESSINGPOSTPROCESS: false,\n      EXPOSURE: false,\n      SKIPFINALCOLORCLAMP: false\n    }; // Setup the configuration as forced by the constructor. This would then not force the\n    // scene materials output in linear space and let untouched the default forward pass.\n\n    if (imageProcessingConfiguration) {\n      imageProcessingConfiguration.applyByPostProcess = true;\n\n      _this._attachImageProcessingConfiguration(imageProcessingConfiguration, true); // This will cause the shader to be compiled\n\n\n      _this._updateParameters();\n    } // Setup the default processing configuration to the scene.\n    else {\n      _this._attachImageProcessingConfiguration(null, true);\n\n      _this.imageProcessingConfiguration.applyByPostProcess = true;\n    }\n\n    _this.onApply = function (effect) {\n      _this.imageProcessingConfiguration.bind(effect, _this.aspectRatio);\n    };\n\n    return _this;\n  }\n\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"imageProcessingConfiguration\", {\n    /**\n     * Gets the image processing configuration used either in this material.\n     */\n    get: function get() {\n      return this._imageProcessingConfiguration;\n    },\n\n    /**\n     * Sets the Default image processing configuration used either in the this material.\n     *\n     * If sets to null, the scene one is in use.\n     */\n    set: function set(value) {\n      // We are almost sure it is applied by post process as\n      // We are in the post process :-)\n      value.applyByPostProcess = true;\n\n      this._attachImageProcessingConfiguration(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Attaches a new image processing configuration to the PBR Material.\n   * @param configuration\n   * @param doNotBuild\n   */\n\n  ImageProcessingPostProcess.prototype._attachImageProcessingConfiguration = function (configuration, doNotBuild) {\n    var _this = this;\n\n    if (doNotBuild === void 0) {\n      doNotBuild = false;\n    }\n\n    if (configuration === this._imageProcessingConfiguration) {\n      return;\n    } // Detaches observer.\n\n\n    if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n      this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n    } // Pick the scene configuration if needed.\n\n\n    if (!configuration) {\n      var scene = null;\n      var engine = this.getEngine();\n      var camera = this.getCamera();\n\n      if (camera) {\n        scene = camera.getScene();\n      } else if (engine && engine.scenes) {\n        var scenes = engine.scenes;\n        scene = scenes[scenes.length - 1];\n      } else {\n        scene = EngineStore.LastCreatedScene;\n      }\n\n      if (scene) {\n        this._imageProcessingConfiguration = scene.imageProcessingConfiguration;\n      } else {\n        this._imageProcessingConfiguration = new ImageProcessingConfiguration();\n      }\n    } else {\n      this._imageProcessingConfiguration = configuration;\n    } // Attaches observer.\n\n\n    if (this._imageProcessingConfiguration) {\n      this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(function () {\n        _this._updateParameters();\n      });\n    } // Ensure the effect will be rebuilt.\n\n\n    if (!doNotBuild) {\n      this._updateParameters();\n    }\n  };\n\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"isSupported\", {\n    /**\n     * If the post process is supported.\n     */\n    get: function get() {\n      var effect = this.getEffect();\n      return !effect || effect.isSupported;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"colorCurves\", {\n    /**\n     * Gets Color curves setup used in the effect if colorCurvesEnabled is set to true .\n     */\n    get: function get() {\n      return this.imageProcessingConfiguration.colorCurves;\n    },\n\n    /**\n     * Sets Color curves setup used in the effect if colorCurvesEnabled is set to true .\n     */\n    set: function set(value) {\n      this.imageProcessingConfiguration.colorCurves = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"colorCurvesEnabled\", {\n    /**\n     * Gets whether the color curves effect is enabled.\n     */\n    get: function get() {\n      return this.imageProcessingConfiguration.colorCurvesEnabled;\n    },\n\n    /**\n     * Sets whether the color curves effect is enabled.\n     */\n    set: function set(value) {\n      this.imageProcessingConfiguration.colorCurvesEnabled = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"colorGradingTexture\", {\n    /**\n     * Gets Color grading LUT texture used in the effect if colorGradingEnabled is set to true.\n     */\n    get: function get() {\n      return this.imageProcessingConfiguration.colorGradingTexture;\n    },\n\n    /**\n     * Sets Color grading LUT texture used in the effect if colorGradingEnabled is set to true.\n     */\n    set: function set(value) {\n      this.imageProcessingConfiguration.colorGradingTexture = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"colorGradingEnabled\", {\n    /**\n     * Gets whether the color grading effect is enabled.\n     */\n    get: function get() {\n      return this.imageProcessingConfiguration.colorGradingEnabled;\n    },\n\n    /**\n     * Gets whether the color grading effect is enabled.\n     */\n    set: function set(value) {\n      this.imageProcessingConfiguration.colorGradingEnabled = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"exposure\", {\n    /**\n     * Gets exposure used in the effect.\n     */\n    get: function get() {\n      return this.imageProcessingConfiguration.exposure;\n    },\n\n    /**\n     * Sets exposure used in the effect.\n     */\n    set: function set(value) {\n      this.imageProcessingConfiguration.exposure = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"toneMappingEnabled\", {\n    /**\n     * Gets whether tonemapping is enabled or not.\n     */\n    get: function get() {\n      return this._imageProcessingConfiguration.toneMappingEnabled;\n    },\n\n    /**\n     * Sets whether tonemapping is enabled or not\n     */\n    set: function set(value) {\n      this._imageProcessingConfiguration.toneMappingEnabled = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"toneMappingType\", {\n    /**\n     * Gets the type of tone mapping effect.\n     */\n    get: function get() {\n      return this._imageProcessingConfiguration.toneMappingType;\n    },\n\n    /**\n     * Sets the type of tone mapping effect.\n     */\n    set: function set(value) {\n      this._imageProcessingConfiguration.toneMappingType = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"contrast\", {\n    /**\n     * Gets contrast used in the effect.\n     */\n    get: function get() {\n      return this.imageProcessingConfiguration.contrast;\n    },\n\n    /**\n     * Sets contrast used in the effect.\n     */\n    set: function set(value) {\n      this.imageProcessingConfiguration.contrast = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"vignetteStretch\", {\n    /**\n     * Gets Vignette stretch size.\n     */\n    get: function get() {\n      return this.imageProcessingConfiguration.vignetteStretch;\n    },\n\n    /**\n     * Sets Vignette stretch size.\n     */\n    set: function set(value) {\n      this.imageProcessingConfiguration.vignetteStretch = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"vignetteCentreX\", {\n    /**\n     * Gets Vignette centre X Offset.\n     */\n    get: function get() {\n      return this.imageProcessingConfiguration.vignetteCentreX;\n    },\n\n    /**\n     * Sets Vignette centre X Offset.\n     */\n    set: function set(value) {\n      this.imageProcessingConfiguration.vignetteCentreX = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"vignetteCentreY\", {\n    /**\n     * Gets Vignette centre Y Offset.\n     */\n    get: function get() {\n      return this.imageProcessingConfiguration.vignetteCentreY;\n    },\n\n    /**\n     * Sets Vignette centre Y Offset.\n     */\n    set: function set(value) {\n      this.imageProcessingConfiguration.vignetteCentreY = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"vignetteWeight\", {\n    /**\n     * Gets Vignette weight or intensity of the vignette effect.\n     */\n    get: function get() {\n      return this.imageProcessingConfiguration.vignetteWeight;\n    },\n\n    /**\n     * Sets Vignette weight or intensity of the vignette effect.\n     */\n    set: function set(value) {\n      this.imageProcessingConfiguration.vignetteWeight = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"vignetteColor\", {\n    /**\n     * Gets Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\n     * if vignetteEnabled is set to true.\n     */\n    get: function get() {\n      return this.imageProcessingConfiguration.vignetteColor;\n    },\n\n    /**\n     * Sets Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\n     * if vignetteEnabled is set to true.\n     */\n    set: function set(value) {\n      this.imageProcessingConfiguration.vignetteColor = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"vignetteCameraFov\", {\n    /**\n     * Gets Camera field of view used by the Vignette effect.\n     */\n    get: function get() {\n      return this.imageProcessingConfiguration.vignetteCameraFov;\n    },\n\n    /**\n     * Sets Camera field of view used by the Vignette effect.\n     */\n    set: function set(value) {\n      this.imageProcessingConfiguration.vignetteCameraFov = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"vignetteBlendMode\", {\n    /**\n     * Gets the vignette blend mode allowing different kind of effect.\n     */\n    get: function get() {\n      return this.imageProcessingConfiguration.vignetteBlendMode;\n    },\n\n    /**\n     * Sets the vignette blend mode allowing different kind of effect.\n     */\n    set: function set(value) {\n      this.imageProcessingConfiguration.vignetteBlendMode = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"vignetteEnabled\", {\n    /**\n     * Gets whether the vignette effect is enabled.\n     */\n    get: function get() {\n      return this.imageProcessingConfiguration.vignetteEnabled;\n    },\n\n    /**\n     * Sets whether the vignette effect is enabled.\n     */\n    set: function set(value) {\n      this.imageProcessingConfiguration.vignetteEnabled = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingPostProcess.prototype, \"fromLinearSpace\", {\n    /**\n     * Gets whether the input of the processing is in Gamma or Linear Space.\n     */\n    get: function get() {\n      return this._fromLinearSpace;\n    },\n\n    /**\n     * Sets whether the input of the processing is in Gamma or Linear Space.\n     */\n    set: function set(value) {\n      if (this._fromLinearSpace === value) {\n        return;\n      }\n\n      this._fromLinearSpace = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   *  \"ImageProcessingPostProcess\"\n   * @returns \"ImageProcessingPostProcess\"\n   */\n\n  ImageProcessingPostProcess.prototype.getClassName = function () {\n    return \"ImageProcessingPostProcess\";\n  };\n  /**\n   * @hidden\n   */\n\n\n  ImageProcessingPostProcess.prototype._updateParameters = function () {\n    this._defines.FROMLINEARSPACE = this._fromLinearSpace;\n    this.imageProcessingConfiguration.prepareDefines(this._defines, true);\n    var defines = \"\";\n\n    for (var define in this._defines) {\n      if (this._defines[define]) {\n        defines += \"#define \".concat(define, \";\\r\\n\");\n      }\n    }\n\n    var samplers = [\"textureSampler\"];\n    var uniforms = [\"scale\"];\n\n    if (ImageProcessingConfiguration) {\n      ImageProcessingConfiguration.PrepareSamplers(samplers, this._defines);\n      ImageProcessingConfiguration.PrepareUniforms(uniforms, this._defines);\n    }\n\n    this.updateEffect(defines, uniforms, samplers);\n  };\n\n  ImageProcessingPostProcess.prototype.dispose = function (camera) {\n    _super.prototype.dispose.call(this, camera);\n\n    if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n      this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n    }\n\n    if (this._imageProcessingConfiguration) {\n      this.imageProcessingConfiguration.applyByPostProcess = false;\n    }\n  };\n\n  __decorate([serialize()], ImageProcessingPostProcess.prototype, \"_fromLinearSpace\", void 0);\n\n  return ImageProcessingPostProcess;\n}(PostProcess);\n\nexport { ImageProcessingPostProcess };","map":{"version":3,"mappings":"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","names":["serialize","ImageProcessingConfiguration","PostProcess","EngineStore","__extends","name","options","camera","samplingMode","engine","reusable","textureType","imageProcessingConfiguration","_super","_this","IMAGEPROCESSING","VIGNETTE","VIGNETTEBLENDMODEMULTIPLY","VIGNETTEBLENDMODEOPAQUE","TONEMAPPING","TONEMAPPING_ACES","CONTRAST","COLORCURVES","COLORGRADING","COLORGRADING3D","FROMLINEARSPACE","SAMPLER3DGREENDEPTH","SAMPLER3DBGRMAP","IMAGEPROCESSINGPOSTPROCESS","EXPOSURE","SKIPFINALCOLORCLAMP","applyByPostProcess","_attachImageProcessingConfiguration","_updateParameters","onApply","effect","bind","aspectRatio","Object","ImageProcessingPostProcess","_imageProcessingConfiguration","value","configuration","doNotBuild","_imageProcessingObserver","onUpdateParameters","remove","scene","getEngine","getCamera","getScene","scenes","length","LastCreatedScene","add","getEffect","isSupported","colorCurves","colorCurvesEnabled","colorGradingTexture","colorGradingEnabled","exposure","toneMappingEnabled","toneMappingType","contrast","vignetteStretch","vignetteCentreX","vignetteCentreY","vignetteWeight","vignetteColor","vignetteCameraFov","vignetteBlendMode","vignetteEnabled","_fromLinearSpace","_defines","prepareDefines","defines","define","samplers","uniforms","PrepareSamplers","PrepareUniforms","updateEffect","dispose","call","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/PostProcesses/imageProcessingPostProcess.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"../types\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { serialize } from \"../Misc/decorators\";\r\nimport type { Color4 } from \"../Maths/math.color\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { ColorCurves } from \"../Materials/colorCurves\";\r\nimport type { IImageProcessingConfigurationDefines } from \"../Materials/imageProcessingConfiguration\";\r\nimport { ImageProcessingConfiguration } from \"../Materials/imageProcessingConfiguration\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/imageProcessing.fragment\";\r\nimport \"../Shaders/postprocess.vertex\";\r\n\r\n/**\r\n * ImageProcessingPostProcess\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#imageprocessing\r\n */\r\nexport class ImageProcessingPostProcess extends PostProcess {\r\n    /**\r\n     * Default configuration related to image processing available in the PBR Material.\r\n     */\r\n    protected _imageProcessingConfiguration: ImageProcessingConfiguration;\r\n\r\n    /**\r\n     * Gets the image processing configuration used either in this material.\r\n     */\r\n    public get imageProcessingConfiguration(): ImageProcessingConfiguration {\r\n        return this._imageProcessingConfiguration;\r\n    }\r\n\r\n    /**\r\n     * Sets the Default image processing configuration used either in the this material.\r\n     *\r\n     * If sets to null, the scene one is in use.\r\n     */\r\n    public set imageProcessingConfiguration(value: ImageProcessingConfiguration) {\r\n        // We are almost sure it is applied by post process as\r\n        // We are in the post process :-)\r\n        value.applyByPostProcess = true;\r\n        this._attachImageProcessingConfiguration(value);\r\n    }\r\n\r\n    /**\r\n     * Keep track of the image processing observer to allow dispose and replace.\r\n     */\r\n    private _imageProcessingObserver: Nullable<Observer<ImageProcessingConfiguration>>;\r\n\r\n    /**\r\n     * Attaches a new image processing configuration to the PBR Material.\r\n     * @param configuration\r\n     * @param doNotBuild\r\n     */\r\n    protected _attachImageProcessingConfiguration(configuration: Nullable<ImageProcessingConfiguration>, doNotBuild = false): void {\r\n        if (configuration === this._imageProcessingConfiguration) {\r\n            return;\r\n        }\r\n\r\n        // Detaches observer.\r\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n        }\r\n\r\n        // Pick the scene configuration if needed.\r\n        if (!configuration) {\r\n            let scene = null;\r\n            const engine = this.getEngine();\r\n            const camera = this.getCamera();\r\n\r\n            if (camera) {\r\n                scene = camera.getScene();\r\n            } else if (engine && engine.scenes) {\r\n                const scenes = engine.scenes;\r\n                scene = scenes[scenes.length - 1];\r\n            } else {\r\n                scene = EngineStore.LastCreatedScene;\r\n            }\r\n\r\n            if (scene) {\r\n                this._imageProcessingConfiguration = scene.imageProcessingConfiguration;\r\n            } else {\r\n                this._imageProcessingConfiguration = new ImageProcessingConfiguration();\r\n            }\r\n        } else {\r\n            this._imageProcessingConfiguration = configuration;\r\n        }\r\n\r\n        // Attaches observer.\r\n        if (this._imageProcessingConfiguration) {\r\n            this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(() => {\r\n                this._updateParameters();\r\n            });\r\n        }\r\n\r\n        // Ensure the effect will be rebuilt.\r\n        if (!doNotBuild) {\r\n            this._updateParameters();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If the post process is supported.\r\n     */\r\n    public get isSupported(): boolean {\r\n        const effect = this.getEffect();\r\n        return !effect || effect.isSupported;\r\n    }\r\n\r\n    /**\r\n     * Gets Color curves setup used in the effect if colorCurvesEnabled is set to true .\r\n     */\r\n    public get colorCurves(): Nullable<ColorCurves> {\r\n        return this.imageProcessingConfiguration.colorCurves;\r\n    }\r\n    /**\r\n     * Sets Color curves setup used in the effect if colorCurvesEnabled is set to true .\r\n     */\r\n    public set colorCurves(value: Nullable<ColorCurves>) {\r\n        this.imageProcessingConfiguration.colorCurves = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the color curves effect is enabled.\r\n     */\r\n    public get colorCurvesEnabled(): boolean {\r\n        return this.imageProcessingConfiguration.colorCurvesEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the color curves effect is enabled.\r\n     */\r\n    public set colorCurvesEnabled(value: boolean) {\r\n        this.imageProcessingConfiguration.colorCurvesEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Gets Color grading LUT texture used in the effect if colorGradingEnabled is set to true.\r\n     */\r\n    public get colorGradingTexture(): Nullable<BaseTexture> {\r\n        return this.imageProcessingConfiguration.colorGradingTexture;\r\n    }\r\n    /**\r\n     * Sets Color grading LUT texture used in the effect if colorGradingEnabled is set to true.\r\n     */\r\n    public set colorGradingTexture(value: Nullable<BaseTexture>) {\r\n        this.imageProcessingConfiguration.colorGradingTexture = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the color grading effect is enabled.\r\n     */\r\n    public get colorGradingEnabled(): boolean {\r\n        return this.imageProcessingConfiguration.colorGradingEnabled;\r\n    }\r\n    /**\r\n     * Gets whether the color grading effect is enabled.\r\n     */\r\n    public set colorGradingEnabled(value: boolean) {\r\n        this.imageProcessingConfiguration.colorGradingEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Gets exposure used in the effect.\r\n     */\r\n    public get exposure(): number {\r\n        return this.imageProcessingConfiguration.exposure;\r\n    }\r\n    /**\r\n     * Sets exposure used in the effect.\r\n     */\r\n    public set exposure(value: number) {\r\n        this.imageProcessingConfiguration.exposure = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether tonemapping is enabled or not.\r\n     */\r\n    public get toneMappingEnabled(): boolean {\r\n        return this._imageProcessingConfiguration.toneMappingEnabled;\r\n    }\r\n    /**\r\n     * Sets whether tonemapping is enabled or not\r\n     */\r\n    public set toneMappingEnabled(value: boolean) {\r\n        this._imageProcessingConfiguration.toneMappingEnabled = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the type of tone mapping effect.\r\n     */\r\n    public get toneMappingType(): number {\r\n        return this._imageProcessingConfiguration.toneMappingType;\r\n    }\r\n    /**\r\n     * Sets the type of tone mapping effect.\r\n     */\r\n    public set toneMappingType(value: number) {\r\n        this._imageProcessingConfiguration.toneMappingType = value;\r\n    }\r\n\r\n    /**\r\n     * Gets contrast used in the effect.\r\n     */\r\n    public get contrast(): number {\r\n        return this.imageProcessingConfiguration.contrast;\r\n    }\r\n    /**\r\n     * Sets contrast used in the effect.\r\n     */\r\n    public set contrast(value: number) {\r\n        this.imageProcessingConfiguration.contrast = value;\r\n    }\r\n\r\n    /**\r\n     * Gets Vignette stretch size.\r\n     */\r\n    public get vignetteStretch(): number {\r\n        return this.imageProcessingConfiguration.vignetteStretch;\r\n    }\r\n    /**\r\n     * Sets Vignette stretch size.\r\n     */\r\n    public set vignetteStretch(value: number) {\r\n        this.imageProcessingConfiguration.vignetteStretch = value;\r\n    }\r\n\r\n    /**\r\n     * Gets Vignette centre X Offset.\r\n     */\r\n    public get vignetteCentreX(): number {\r\n        return this.imageProcessingConfiguration.vignetteCentreX;\r\n    }\r\n    /**\r\n     * Sets Vignette centre X Offset.\r\n     */\r\n    public set vignetteCentreX(value: number) {\r\n        this.imageProcessingConfiguration.vignetteCentreX = value;\r\n    }\r\n\r\n    /**\r\n     * Gets Vignette centre Y Offset.\r\n     */\r\n    public get vignetteCentreY(): number {\r\n        return this.imageProcessingConfiguration.vignetteCentreY;\r\n    }\r\n    /**\r\n     * Sets Vignette centre Y Offset.\r\n     */\r\n    public set vignetteCentreY(value: number) {\r\n        this.imageProcessingConfiguration.vignetteCentreY = value;\r\n    }\r\n\r\n    /**\r\n     * Gets Vignette weight or intensity of the vignette effect.\r\n     */\r\n    public get vignetteWeight(): number {\r\n        return this.imageProcessingConfiguration.vignetteWeight;\r\n    }\r\n    /**\r\n     * Sets Vignette weight or intensity of the vignette effect.\r\n     */\r\n    public set vignetteWeight(value: number) {\r\n        this.imageProcessingConfiguration.vignetteWeight = value;\r\n    }\r\n\r\n    /**\r\n     * Gets Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\r\n     * if vignetteEnabled is set to true.\r\n     */\r\n    public get vignetteColor(): Color4 {\r\n        return this.imageProcessingConfiguration.vignetteColor;\r\n    }\r\n    /**\r\n     * Sets Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\r\n     * if vignetteEnabled is set to true.\r\n     */\r\n    public set vignetteColor(value: Color4) {\r\n        this.imageProcessingConfiguration.vignetteColor = value;\r\n    }\r\n\r\n    /**\r\n     * Gets Camera field of view used by the Vignette effect.\r\n     */\r\n    public get vignetteCameraFov(): number {\r\n        return this.imageProcessingConfiguration.vignetteCameraFov;\r\n    }\r\n    /**\r\n     * Sets Camera field of view used by the Vignette effect.\r\n     */\r\n    public set vignetteCameraFov(value: number) {\r\n        this.imageProcessingConfiguration.vignetteCameraFov = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the vignette blend mode allowing different kind of effect.\r\n     */\r\n    public get vignetteBlendMode(): number {\r\n        return this.imageProcessingConfiguration.vignetteBlendMode;\r\n    }\r\n    /**\r\n     * Sets the vignette blend mode allowing different kind of effect.\r\n     */\r\n    public set vignetteBlendMode(value: number) {\r\n        this.imageProcessingConfiguration.vignetteBlendMode = value;\r\n    }\r\n\r\n    /**\r\n     * Gets whether the vignette effect is enabled.\r\n     */\r\n    public get vignetteEnabled(): boolean {\r\n        return this.imageProcessingConfiguration.vignetteEnabled;\r\n    }\r\n    /**\r\n     * Sets whether the vignette effect is enabled.\r\n     */\r\n    public set vignetteEnabled(value: boolean) {\r\n        this.imageProcessingConfiguration.vignetteEnabled = value;\r\n    }\r\n\r\n    @serialize()\r\n    private _fromLinearSpace = true;\r\n    /**\r\n     * Gets whether the input of the processing is in Gamma or Linear Space.\r\n     */\r\n    public get fromLinearSpace(): boolean {\r\n        return this._fromLinearSpace;\r\n    }\r\n    /**\r\n     * Sets whether the input of the processing is in Gamma or Linear Space.\r\n     */\r\n    public set fromLinearSpace(value: boolean) {\r\n        if (this._fromLinearSpace === value) {\r\n            return;\r\n        }\r\n\r\n        this._fromLinearSpace = value;\r\n        this._updateParameters();\r\n    }\r\n\r\n    /**\r\n     * Defines cache preventing GC.\r\n     */\r\n    private _defines: IImageProcessingConfigurationDefines & { FROMLINEARSPACE: boolean } = {\r\n        IMAGEPROCESSING: false,\r\n        VIGNETTE: false,\r\n        VIGNETTEBLENDMODEMULTIPLY: false,\r\n        VIGNETTEBLENDMODEOPAQUE: false,\r\n        TONEMAPPING: false,\r\n        TONEMAPPING_ACES: false,\r\n        CONTRAST: false,\r\n        COLORCURVES: false,\r\n        COLORGRADING: false,\r\n        COLORGRADING3D: false,\r\n        FROMLINEARSPACE: false,\r\n        SAMPLER3DGREENDEPTH: false,\r\n        SAMPLER3DBGRMAP: false,\r\n        IMAGEPROCESSINGPOSTPROCESS: false,\r\n        EXPOSURE: false,\r\n        SKIPFINALCOLORCLAMP: false,\r\n    };\r\n\r\n    constructor(\r\n        name: string,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera> = null,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        imageProcessingConfiguration?: ImageProcessingConfiguration\r\n    ) {\r\n        super(name, \"imageProcessing\", [], [], options, camera, samplingMode, engine, reusable, null, textureType, \"postprocess\", null, true);\r\n\r\n        // Setup the configuration as forced by the constructor. This would then not force the\r\n        // scene materials output in linear space and let untouched the default forward pass.\r\n        if (imageProcessingConfiguration) {\r\n            imageProcessingConfiguration.applyByPostProcess = true;\r\n            this._attachImageProcessingConfiguration(imageProcessingConfiguration, true);\r\n            // This will cause the shader to be compiled\r\n            this._updateParameters();\r\n        }\r\n        // Setup the default processing configuration to the scene.\r\n        else {\r\n            this._attachImageProcessingConfiguration(null, true);\r\n            this.imageProcessingConfiguration.applyByPostProcess = true;\r\n        }\r\n\r\n        this.onApply = (effect: Effect) => {\r\n            this.imageProcessingConfiguration.bind(effect, this.aspectRatio);\r\n        };\r\n    }\r\n    /**\r\n     *  \"ImageProcessingPostProcess\"\r\n     * @returns \"ImageProcessingPostProcess\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"ImageProcessingPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    public _updateParameters(): void {\r\n        this._defines.FROMLINEARSPACE = this._fromLinearSpace;\r\n        this.imageProcessingConfiguration.prepareDefines(this._defines, true);\r\n        let defines = \"\";\r\n        for (const define in this._defines) {\r\n            if ((<any>this._defines)[define]) {\r\n                defines += `#define ${define};\\r\\n`;\r\n            }\r\n        }\r\n\r\n        const samplers = [\"textureSampler\"];\r\n        const uniforms = [\"scale\"];\r\n\r\n        if (ImageProcessingConfiguration) {\r\n            ImageProcessingConfiguration.PrepareSamplers(samplers, this._defines);\r\n            ImageProcessingConfiguration.PrepareUniforms(uniforms, this._defines);\r\n        }\r\n\r\n        this.updateEffect(defines, uniforms, samplers);\r\n    }\r\n\r\n    public dispose(camera?: Camera): void {\r\n        super.dispose(camera);\r\n\r\n        if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\r\n            this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\r\n        }\r\n\r\n        if (this._imageProcessingConfiguration) {\r\n            this.imageProcessingConfiguration.applyByPostProcess = false;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}