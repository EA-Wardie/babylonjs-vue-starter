{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.timers.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { SubMesh } from \"../Meshes/subMesh.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { AsyncLoop } from \"../Misc/tools.js\";\nimport { Epsilon } from \"../Maths/math.constants.js\";\n/**\n * Class used to specify simplification options\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\n */\n\nvar SimplificationSettings =\n/** @class */\nfunction () {\n  /**\n   * Creates a SimplificationSettings\n   * @param quality expected quality\n   * @param distance distance when this optimized version should be used\n   * @param optimizeMesh already optimized mesh\n   */\n  function SimplificationSettings(\n  /** expected quality */\n  quality,\n  /** distance when this optimized version should be used */\n  distance,\n  /** already optimized mesh  */\n  optimizeMesh) {\n    this.quality = quality;\n    this.distance = distance;\n    this.optimizeMesh = optimizeMesh;\n  }\n\n  return SimplificationSettings;\n}();\n\nexport { SimplificationSettings };\n/**\n * Queue used to order the simplification tasks\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\n */\n\nvar SimplificationQueue =\n/** @class */\nfunction () {\n  /**\n   * Creates a new queue\n   */\n  function SimplificationQueue() {\n    this.running = false;\n    this._simplificationArray = [];\n  }\n  /**\n   * Adds a new simplification task\n   * @param task defines a task to add\n   */\n\n\n  SimplificationQueue.prototype.addTask = function (task) {\n    this._simplificationArray.push(task);\n  };\n  /**\n   * Execute next task\n   */\n\n\n  SimplificationQueue.prototype.executeNext = function () {\n    var task = this._simplificationArray.pop();\n\n    if (task) {\n      this.running = true;\n      this.runSimplification(task);\n    } else {\n      this.running = false;\n    }\n  };\n  /**\n   * Execute a simplification task\n   * @param task defines the task to run\n   */\n\n\n  SimplificationQueue.prototype.runSimplification = function (task) {\n    var _this = this;\n\n    if (task.parallelProcessing) {\n      //parallel simplifier\n      task.settings.forEach(function (setting) {\n        var simplifier = _this._getSimplifier(task);\n\n        simplifier.simplify(setting, function (newMesh) {\n          if (setting.distance !== undefined) {\n            task.mesh.addLODLevel(setting.distance, newMesh);\n          }\n\n          newMesh.isVisible = true; //check if it is the last\n\n          if (setting.quality === task.settings[task.settings.length - 1].quality && task.successCallback) {\n            //all done, run the success callback.\n            task.successCallback();\n          }\n\n          _this.executeNext();\n        });\n      });\n    } else {\n      //single simplifier.\n      var simplifier_1 = this._getSimplifier(task);\n\n      var runDecimation_1 = function runDecimation_1(setting, callback) {\n        simplifier_1.simplify(setting, function (newMesh) {\n          if (setting.distance !== undefined) {\n            task.mesh.addLODLevel(setting.distance, newMesh);\n          }\n\n          newMesh.isVisible = true; //run the next quality level\n\n          callback();\n        });\n      };\n\n      AsyncLoop.Run(task.settings.length, function (loop) {\n        runDecimation_1(task.settings[loop.index], function () {\n          loop.executeNext();\n        });\n      }, function () {\n        //execution ended, run the success callback.\n        if (task.successCallback) {\n          task.successCallback();\n        }\n\n        _this.executeNext();\n      });\n    }\n  };\n\n  SimplificationQueue.prototype._getSimplifier = function (task) {\n    switch (task.simplificationType) {\n      case SimplificationType.QUADRATIC:\n      default:\n        return new QuadraticErrorSimplification(task.mesh);\n    }\n  };\n\n  return SimplificationQueue;\n}();\n\nexport { SimplificationQueue };\n/**\n * The implemented types of simplification\n * At the moment only Quadratic Error Decimation is implemented\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\n */\n\nexport var SimplificationType;\n\n(function (SimplificationType) {\n  /** Quadratic error decimation */\n  SimplificationType[SimplificationType[\"QUADRATIC\"] = 0] = \"QUADRATIC\";\n})(SimplificationType || (SimplificationType = {}));\n\nvar DecimationTriangle =\n/** @class */\nfunction () {\n  function DecimationTriangle(_vertices) {\n    this._vertices = _vertices;\n    this.error = new Array(4);\n    this.deleted = false;\n    this.isDirty = false;\n    this.deletePending = false;\n    this.borderFactor = 0;\n  }\n\n  return DecimationTriangle;\n}();\n\nvar DecimationVertex =\n/** @class */\nfunction () {\n  function DecimationVertex(position, id) {\n    this.position = position;\n    this.id = id;\n    this.isBorder = true;\n    this.q = new QuadraticMatrix();\n    this.triangleCount = 0;\n    this.triangleStart = 0;\n    this.originalOffsets = [];\n  }\n\n  DecimationVertex.prototype.updatePosition = function (newPosition) {\n    this.position.copyFrom(newPosition);\n  };\n\n  return DecimationVertex;\n}();\n\nvar QuadraticMatrix =\n/** @class */\nfunction () {\n  function QuadraticMatrix(data) {\n    this.data = new Array(10);\n\n    for (var i = 0; i < 10; ++i) {\n      if (data && data[i]) {\n        this.data[i] = data[i];\n      } else {\n        this.data[i] = 0;\n      }\n    }\n  }\n\n  QuadraticMatrix.prototype.det = function (a11, a12, a13, a21, a22, a23, a31, a32, a33) {\n    var det = this.data[a11] * this.data[a22] * this.data[a33] + this.data[a13] * this.data[a21] * this.data[a32] + this.data[a12] * this.data[a23] * this.data[a31] - this.data[a13] * this.data[a22] * this.data[a31] - this.data[a11] * this.data[a23] * this.data[a32] - this.data[a12] * this.data[a21] * this.data[a33];\n    return det;\n  };\n\n  QuadraticMatrix.prototype.addInPlace = function (matrix) {\n    for (var i = 0; i < 10; ++i) {\n      this.data[i] += matrix.data[i];\n    }\n  };\n\n  QuadraticMatrix.prototype.addArrayInPlace = function (data) {\n    for (var i = 0; i < 10; ++i) {\n      this.data[i] += data[i];\n    }\n  };\n\n  QuadraticMatrix.prototype.add = function (matrix) {\n    var m = new QuadraticMatrix();\n\n    for (var i = 0; i < 10; ++i) {\n      m.data[i] = this.data[i] + matrix.data[i];\n    }\n\n    return m;\n  };\n\n  QuadraticMatrix.FromData = function (a, b, c, d) {\n    return new QuadraticMatrix(QuadraticMatrix.DataFromNumbers(a, b, c, d));\n  }; //returning an array to avoid garbage collection\n\n\n  QuadraticMatrix.DataFromNumbers = function (a, b, c, d) {\n    return [a * a, a * b, a * c, a * d, b * b, b * c, b * d, c * c, c * d, d * d];\n  };\n\n  return QuadraticMatrix;\n}();\n\nvar Reference =\n/** @class */\nfunction () {\n  function Reference(vertexId, triangleId) {\n    this.vertexId = vertexId;\n    this.triangleId = triangleId;\n  }\n\n  return Reference;\n}();\n/**\n * An implementation of the Quadratic Error simplification algorithm.\n * Original paper : http://www1.cs.columbia.edu/~cs4162/html05s/garland97.pdf\n * Ported mostly from QSlim and http://voxels.blogspot.de/2014/05/quadric-mesh-simplification-with-source.html to babylon JS\n * @author RaananW\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\n */\n\n\nvar QuadraticErrorSimplification =\n/** @class */\nfunction () {\n  /**\n   * Creates a new QuadraticErrorSimplification\n   * @param _mesh defines the target mesh\n   */\n  function QuadraticErrorSimplification(_mesh) {\n    this._mesh = _mesh;\n    /** Gets or sets the number pf sync iterations */\n\n    this.syncIterations = 5000;\n    this.aggressiveness = 7;\n    this.decimationIterations = 100;\n    this.boundingBoxEpsilon = Epsilon;\n  }\n  /**\n   * Simplification of a given mesh according to the given settings.\n   * Since this requires computation, it is assumed that the function runs async.\n   * @param settings The settings of the simplification, including quality and distance\n   * @param successCallback A callback that will be called after the mesh was simplified.\n   */\n\n\n  QuadraticErrorSimplification.prototype.simplify = function (settings, successCallback) {\n    var _this = this;\n\n    this._initDecimatedMesh(); //iterating through the submeshes array, one after the other.\n\n\n    AsyncLoop.Run(this._mesh.subMeshes.length, function (loop) {\n      _this._initWithMesh(loop.index, function () {\n        _this._runDecimation(settings, loop.index, function () {\n          loop.executeNext();\n        });\n      }, settings.optimizeMesh);\n    }, function () {\n      setTimeout(function () {\n        successCallback(_this._reconstructedMesh);\n      }, 0);\n    });\n  };\n\n  QuadraticErrorSimplification.prototype._runDecimation = function (settings, submeshIndex, successCallback) {\n    var _this = this;\n\n    var targetCount = ~~(this._triangles.length * settings.quality);\n    var deletedTriangles = 0;\n    var triangleCount = this._triangles.length;\n\n    var iterationFunction = function iterationFunction(iteration, callback) {\n      setTimeout(function () {\n        if (iteration % 5 === 0) {\n          _this._updateMesh(iteration === 0);\n        }\n\n        for (var i = 0; i < _this._triangles.length; ++i) {\n          _this._triangles[i].isDirty = false;\n        }\n\n        var threshold = 0.000000001 * Math.pow(iteration + 3, _this.aggressiveness);\n\n        var trianglesIterator = function trianglesIterator(i) {\n          var tIdx = ~~((_this._triangles.length / 2 + i) % _this._triangles.length);\n          var t = _this._triangles[tIdx];\n\n          if (!t) {\n            return;\n          }\n\n          if (t.error[3] > threshold || t.deleted || t.isDirty) {\n            return;\n          }\n\n          var _loop_1 = function _loop_1(j) {\n            if (t.error[j] < threshold) {\n              var deleted0 = [];\n              var deleted1 = [];\n              var v0 = t._vertices[j];\n              var v1 = t._vertices[(j + 1) % 3];\n\n              if (v0.isBorder || v1.isBorder) {\n                return \"continue\";\n              }\n\n              var p = Vector3.Zero(); // var n = Vector3.Zero();\n              // var uv = Vector2.Zero();\n              // var color = new Color4(0, 0, 0, 1);\n\n              _this._calculateError(v0, v1, p);\n\n              var delTr = new Array();\n\n              if (_this._isFlipped(v0, v1, p, deleted0, delTr)) {\n                return \"continue\";\n              }\n\n              if (_this._isFlipped(v1, v0, p, deleted1, delTr)) {\n                return \"continue\";\n              }\n\n              if (deleted0.indexOf(true) < 0 || deleted1.indexOf(true) < 0) {\n                return \"continue\";\n              }\n\n              var uniqueArray_1 = new Array();\n              delTr.forEach(function (deletedT) {\n                if (uniqueArray_1.indexOf(deletedT) === -1) {\n                  deletedT.deletePending = true;\n                  uniqueArray_1.push(deletedT);\n                }\n              });\n\n              if (uniqueArray_1.length % 2 !== 0) {\n                return \"continue\";\n              }\n\n              v0.q = v1.q.add(v0.q);\n              v0.updatePosition(p);\n              var tStart = _this._references.length;\n              deletedTriangles = _this._updateTriangles(v0, v0, deleted0, deletedTriangles);\n              deletedTriangles = _this._updateTriangles(v0, v1, deleted1, deletedTriangles);\n              var tCount = _this._references.length - tStart;\n\n              if (tCount <= v0.triangleCount) {\n                if (tCount) {\n                  for (var c = 0; c < tCount; c++) {\n                    _this._references[v0.triangleStart + c] = _this._references[tStart + c];\n                  }\n                }\n              } else {\n                v0.triangleStart = tStart;\n              }\n\n              v0.triangleCount = tCount;\n              return \"break\";\n            }\n          };\n\n          for (var j = 0; j < 3; ++j) {\n            var state_1 = _loop_1(j);\n\n            if (state_1 === \"break\") break;\n          }\n        };\n\n        AsyncLoop.SyncAsyncForLoop(_this._triangles.length, _this.syncIterations, trianglesIterator, callback, function () {\n          return triangleCount - deletedTriangles <= targetCount;\n        });\n      }, 0);\n    };\n\n    AsyncLoop.Run(this.decimationIterations, function (loop) {\n      if (triangleCount - deletedTriangles <= targetCount) {\n        loop.breakLoop();\n      } else {\n        iterationFunction(loop.index, function () {\n          loop.executeNext();\n        });\n      }\n    }, function () {\n      setTimeout(function () {\n        //reconstruct this part of the mesh\n        _this._reconstructMesh(submeshIndex);\n\n        successCallback();\n      }, 0);\n    });\n  };\n\n  QuadraticErrorSimplification.prototype._initWithMesh = function (submeshIndex, callback, optimizeMesh) {\n    var _this = this;\n\n    this._vertices = [];\n    this._triangles = [];\n\n    var positionData = this._mesh.getVerticesData(VertexBuffer.PositionKind);\n\n    var indices = this._mesh.getIndices();\n\n    var submesh = this._mesh.subMeshes[submeshIndex];\n\n    var findInVertices = function findInVertices(positionToSearch) {\n      if (optimizeMesh) {\n        for (var ii = 0; ii < _this._vertices.length; ++ii) {\n          if (_this._vertices[ii].position.equalsWithEpsilon(positionToSearch, 0.0001)) {\n            return _this._vertices[ii];\n          }\n        }\n      }\n\n      return null;\n    };\n\n    var vertexReferences = [];\n\n    var vertexInit = function vertexInit(i) {\n      if (!positionData) {\n        return;\n      }\n\n      var offset = i + submesh.verticesStart;\n      var position = Vector3.FromArray(positionData, offset * 3);\n      var vertex = findInVertices(position) || new DecimationVertex(position, _this._vertices.length);\n      vertex.originalOffsets.push(offset);\n\n      if (vertex.id === _this._vertices.length) {\n        _this._vertices.push(vertex);\n      }\n\n      vertexReferences.push(vertex.id);\n    }; //var totalVertices = mesh.getTotalVertices();\n\n\n    var totalVertices = submesh.verticesCount;\n    AsyncLoop.SyncAsyncForLoop(totalVertices, this.syncIterations / 4 >> 0, vertexInit, function () {\n      var indicesInit = function indicesInit(i) {\n        if (!indices) {\n          return;\n        }\n\n        var offset = submesh.indexStart / 3 + i;\n        var pos = offset * 3;\n        var i0 = indices[pos + 0];\n        var i1 = indices[pos + 1];\n        var i2 = indices[pos + 2];\n        var v0 = _this._vertices[vertexReferences[i0 - submesh.verticesStart]];\n        var v1 = _this._vertices[vertexReferences[i1 - submesh.verticesStart]];\n        var v2 = _this._vertices[vertexReferences[i2 - submesh.verticesStart]];\n        var triangle = new DecimationTriangle([v0, v1, v2]);\n        triangle.originalOffset = pos;\n\n        _this._triangles.push(triangle);\n      };\n\n      AsyncLoop.SyncAsyncForLoop(submesh.indexCount / 3, _this.syncIterations, indicesInit, function () {\n        _this._init(callback);\n      });\n    });\n  };\n\n  QuadraticErrorSimplification.prototype._init = function (callback) {\n    var _this = this;\n\n    var triangleInit1 = function triangleInit1(i) {\n      var t = _this._triangles[i];\n      t.normal = Vector3.Cross(t._vertices[1].position.subtract(t._vertices[0].position), t._vertices[2].position.subtract(t._vertices[0].position)).normalize();\n\n      for (var j = 0; j < 3; j++) {\n        t._vertices[j].q.addArrayInPlace(QuadraticMatrix.DataFromNumbers(t.normal.x, t.normal.y, t.normal.z, -Vector3.Dot(t.normal, t._vertices[0].position)));\n      }\n    };\n\n    AsyncLoop.SyncAsyncForLoop(this._triangles.length, this.syncIterations, triangleInit1, function () {\n      var triangleInit2 = function triangleInit2(i) {\n        var t = _this._triangles[i];\n\n        for (var j = 0; j < 3; ++j) {\n          t.error[j] = _this._calculateError(t._vertices[j], t._vertices[(j + 1) % 3]);\n        }\n\n        t.error[3] = Math.min(t.error[0], t.error[1], t.error[2]);\n      };\n\n      AsyncLoop.SyncAsyncForLoop(_this._triangles.length, _this.syncIterations, triangleInit2, function () {\n        callback();\n      });\n    });\n  };\n\n  QuadraticErrorSimplification.prototype._reconstructMesh = function (submeshIndex) {\n    var newTriangles = [];\n    var i;\n\n    for (i = 0; i < this._vertices.length; ++i) {\n      this._vertices[i].triangleCount = 0;\n    }\n\n    var t;\n    var j;\n\n    for (i = 0; i < this._triangles.length; ++i) {\n      if (!this._triangles[i].deleted) {\n        t = this._triangles[i];\n\n        for (j = 0; j < 3; ++j) {\n          t._vertices[j].triangleCount = 1;\n        }\n\n        newTriangles.push(t);\n      }\n    }\n\n    var newPositionData = this._reconstructedMesh.getVerticesData(VertexBuffer.PositionKind) || [];\n    var newNormalData = this._reconstructedMesh.getVerticesData(VertexBuffer.NormalKind) || [];\n    var newUVsData = this._reconstructedMesh.getVerticesData(VertexBuffer.UVKind) || [];\n    var newColorsData = this._reconstructedMesh.getVerticesData(VertexBuffer.ColorKind) || [];\n\n    var normalData = this._mesh.getVerticesData(VertexBuffer.NormalKind);\n\n    var uvs = this._mesh.getVerticesData(VertexBuffer.UVKind);\n\n    var colorsData = this._mesh.getVerticesData(VertexBuffer.ColorKind);\n\n    var vertexCount = 0;\n\n    var _loop_2 = function _loop_2() {\n      var vertex = this_1._vertices[i];\n      vertex.id = vertexCount;\n\n      if (vertex.triangleCount) {\n        vertex.originalOffsets.forEach(function (originalOffset) {\n          newPositionData.push(vertex.position.x);\n          newPositionData.push(vertex.position.y);\n          newPositionData.push(vertex.position.z);\n\n          if (normalData && normalData.length) {\n            newNormalData.push(normalData[originalOffset * 3]);\n            newNormalData.push(normalData[originalOffset * 3 + 1]);\n            newNormalData.push(normalData[originalOffset * 3 + 2]);\n          }\n\n          if (uvs && uvs.length) {\n            newUVsData.push(uvs[originalOffset * 2]);\n            newUVsData.push(uvs[originalOffset * 2 + 1]);\n          }\n\n          if (colorsData && colorsData.length) {\n            newColorsData.push(colorsData[originalOffset * 4]);\n            newColorsData.push(colorsData[originalOffset * 4 + 1]);\n            newColorsData.push(colorsData[originalOffset * 4 + 2]);\n            newColorsData.push(colorsData[originalOffset * 4 + 3]);\n          }\n\n          ++vertexCount;\n        });\n      }\n    };\n\n    var this_1 = this;\n\n    for (i = 0; i < this._vertices.length; ++i) {\n      _loop_2();\n    }\n\n    var startingIndex = this._reconstructedMesh.getTotalIndices();\n\n    var startingVertex = this._reconstructedMesh.getTotalVertices();\n\n    var submeshesArray = this._reconstructedMesh.subMeshes;\n    this._reconstructedMesh.subMeshes = [];\n\n    var newIndicesArray = this._reconstructedMesh.getIndices(); //[];\n\n\n    var originalIndices = this._mesh.getIndices();\n\n    for (i = 0; i < newTriangles.length; ++i) {\n      t = newTriangles[i]; //now get the new referencing point for each vertex\n\n      [0, 1, 2].forEach(function (idx) {\n        var id = originalIndices[t.originalOffset + idx];\n\n        var offset = t._vertices[idx].originalOffsets.indexOf(id);\n\n        if (offset < 0) {\n          offset = 0;\n        }\n\n        newIndicesArray.push(t._vertices[idx].id + offset + startingVertex);\n      });\n    } //overwriting the old vertex buffers and indices.\n\n\n    this._reconstructedMesh.setIndices(newIndicesArray);\n\n    this._reconstructedMesh.setVerticesData(VertexBuffer.PositionKind, newPositionData);\n\n    if (newNormalData.length > 0) {\n      this._reconstructedMesh.setVerticesData(VertexBuffer.NormalKind, newNormalData);\n    }\n\n    if (newUVsData.length > 0) {\n      this._reconstructedMesh.setVerticesData(VertexBuffer.UVKind, newUVsData);\n    }\n\n    if (newColorsData.length > 0) {\n      this._reconstructedMesh.setVerticesData(VertexBuffer.ColorKind, newColorsData);\n    } //create submesh\n\n\n    var originalSubmesh = this._mesh.subMeshes[submeshIndex];\n\n    if (submeshIndex > 0) {\n      this._reconstructedMesh.subMeshes = [];\n      submeshesArray.forEach(function (submesh) {\n        SubMesh.AddToMesh(submesh.materialIndex, submesh.verticesStart, submesh.verticesCount,\n        /* 0, newPositionData.length/3, */\n        submesh.indexStart, submesh.indexCount, submesh.getMesh());\n      });\n      SubMesh.AddToMesh(originalSubmesh.materialIndex, startingVertex, vertexCount,\n      /* 0, newPositionData.length / 3, */\n      startingIndex, newTriangles.length * 3, this._reconstructedMesh);\n    }\n  };\n\n  QuadraticErrorSimplification.prototype._initDecimatedMesh = function () {\n    this._reconstructedMesh = new Mesh(this._mesh.name + \"Decimated\", this._mesh.getScene());\n    this._reconstructedMesh.material = this._mesh.material;\n    this._reconstructedMesh.parent = this._mesh.parent;\n    this._reconstructedMesh.isVisible = false;\n    this._reconstructedMesh.renderingGroupId = this._mesh.renderingGroupId;\n  };\n\n  QuadraticErrorSimplification.prototype._isFlipped = function (vertex1, vertex2, point, deletedArray, delTr) {\n    for (var i = 0; i < vertex1.triangleCount; ++i) {\n      var t = this._triangles[this._references[vertex1.triangleStart + i].triangleId];\n\n      if (t.deleted) {\n        continue;\n      }\n\n      var s = this._references[vertex1.triangleStart + i].vertexId;\n      var v1 = t._vertices[(s + 1) % 3];\n      var v2 = t._vertices[(s + 2) % 3];\n\n      if (v1 === vertex2 || v2 === vertex2) {\n        deletedArray[i] = true;\n        delTr.push(t);\n        continue;\n      }\n\n      var d1 = v1.position.subtract(point);\n      d1 = d1.normalize();\n      var d2 = v2.position.subtract(point);\n      d2 = d2.normalize();\n\n      if (Math.abs(Vector3.Dot(d1, d2)) > 0.999) {\n        return true;\n      }\n\n      var normal = Vector3.Cross(d1, d2).normalize();\n      deletedArray[i] = false;\n\n      if (Vector3.Dot(normal, t.normal) < 0.2) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  QuadraticErrorSimplification.prototype._updateTriangles = function (origVertex, vertex, deletedArray, deletedTriangles) {\n    var newDeleted = deletedTriangles;\n\n    for (var i = 0; i < vertex.triangleCount; ++i) {\n      var ref = this._references[vertex.triangleStart + i];\n      var t = this._triangles[ref.triangleId];\n\n      if (t.deleted) {\n        continue;\n      }\n\n      if (deletedArray[i] && t.deletePending) {\n        t.deleted = true;\n        newDeleted++;\n        continue;\n      }\n\n      t._vertices[ref.vertexId] = origVertex;\n      t.isDirty = true;\n      t.error[0] = this._calculateError(t._vertices[0], t._vertices[1]) + t.borderFactor / 2;\n      t.error[1] = this._calculateError(t._vertices[1], t._vertices[2]) + t.borderFactor / 2;\n      t.error[2] = this._calculateError(t._vertices[2], t._vertices[0]) + t.borderFactor / 2;\n      t.error[3] = Math.min(t.error[0], t.error[1], t.error[2]);\n\n      this._references.push(ref);\n    }\n\n    return newDeleted;\n  };\n\n  QuadraticErrorSimplification.prototype._identifyBorder = function () {\n    for (var i = 0; i < this._vertices.length; ++i) {\n      var vCount = [];\n      var vId = [];\n      var v = this._vertices[i];\n      var j = void 0;\n\n      for (j = 0; j < v.triangleCount; ++j) {\n        var triangle = this._triangles[this._references[v.triangleStart + j].triangleId];\n\n        for (var ii = 0; ii < 3; ii++) {\n          var ofs = 0;\n          var vv = triangle._vertices[ii];\n\n          while (ofs < vCount.length) {\n            if (vId[ofs] === vv.id) {\n              break;\n            }\n\n            ++ofs;\n          }\n\n          if (ofs === vCount.length) {\n            vCount.push(1);\n            vId.push(vv.id);\n          } else {\n            vCount[ofs]++;\n          }\n        }\n      }\n\n      for (j = 0; j < vCount.length; ++j) {\n        if (vCount[j] === 1) {\n          this._vertices[vId[j]].isBorder = true;\n        } else {\n          this._vertices[vId[j]].isBorder = false;\n        }\n      }\n    }\n  };\n\n  QuadraticErrorSimplification.prototype._updateMesh = function (identifyBorders) {\n    if (identifyBorders === void 0) {\n      identifyBorders = false;\n    }\n\n    var i;\n\n    if (!identifyBorders) {\n      var newTrianglesVector = [];\n\n      for (i = 0; i < this._triangles.length; ++i) {\n        if (!this._triangles[i].deleted) {\n          newTrianglesVector.push(this._triangles[i]);\n        }\n      }\n\n      this._triangles = newTrianglesVector;\n    }\n\n    for (i = 0; i < this._vertices.length; ++i) {\n      this._vertices[i].triangleCount = 0;\n      this._vertices[i].triangleStart = 0;\n    }\n\n    var t;\n    var j;\n    var v;\n\n    for (i = 0; i < this._triangles.length; ++i) {\n      t = this._triangles[i];\n\n      for (j = 0; j < 3; ++j) {\n        v = t._vertices[j];\n        v.triangleCount++;\n      }\n    }\n\n    var tStart = 0;\n\n    for (i = 0; i < this._vertices.length; ++i) {\n      this._vertices[i].triangleStart = tStart;\n      tStart += this._vertices[i].triangleCount;\n      this._vertices[i].triangleCount = 0;\n    }\n\n    var newReferences = new Array(this._triangles.length * 3);\n\n    for (i = 0; i < this._triangles.length; ++i) {\n      t = this._triangles[i];\n\n      for (j = 0; j < 3; ++j) {\n        v = t._vertices[j];\n        newReferences[v.triangleStart + v.triangleCount] = new Reference(j, i);\n        v.triangleCount++;\n      }\n    }\n\n    this._references = newReferences;\n\n    if (identifyBorders) {\n      this._identifyBorder();\n    }\n  };\n\n  QuadraticErrorSimplification.prototype._vertexError = function (q, point) {\n    var x = point.x;\n    var y = point.y;\n    var z = point.z;\n    return q.data[0] * x * x + 2 * q.data[1] * x * y + 2 * q.data[2] * x * z + 2 * q.data[3] * x + q.data[4] * y * y + 2 * q.data[5] * y * z + 2 * q.data[6] * y + q.data[7] * z * z + 2 * q.data[8] * z + q.data[9];\n  };\n\n  QuadraticErrorSimplification.prototype._calculateError = function (vertex1, vertex2, pointResult) {\n    var q = vertex1.q.add(vertex2.q);\n    var border = vertex1.isBorder && vertex2.isBorder;\n    var error = 0;\n    var qDet = q.det(0, 1, 2, 1, 4, 5, 2, 5, 7);\n\n    if (qDet !== 0 && !border) {\n      if (!pointResult) {\n        pointResult = Vector3.Zero();\n      }\n\n      pointResult.x = -1 / qDet * q.det(1, 2, 3, 4, 5, 6, 5, 7, 8);\n      pointResult.y = 1 / qDet * q.det(0, 2, 3, 1, 5, 6, 2, 7, 8);\n      pointResult.z = -1 / qDet * q.det(0, 1, 3, 1, 4, 6, 2, 5, 8);\n      error = this._vertexError(q, pointResult);\n    } else {\n      var p3 = vertex1.position.add(vertex2.position).divide(new Vector3(2, 2, 2)); //var norm3 = (vertex1.normal.add(vertex2.normal)).divide(new Vector3(2, 2, 2)).normalize();\n\n      var error1 = this._vertexError(q, vertex1.position);\n\n      var error2 = this._vertexError(q, vertex2.position);\n\n      var error3 = this._vertexError(q, p3);\n\n      error = Math.min(error1, error2, error3);\n\n      if (error === error1) {\n        if (pointResult) {\n          pointResult.copyFrom(vertex1.position);\n        }\n      } else if (error === error2) {\n        if (pointResult) {\n          pointResult.copyFrom(vertex2.position);\n        }\n      } else {\n        if (pointResult) {\n          pointResult.copyFrom(p3);\n        }\n      }\n    }\n\n    return error;\n  };\n\n  return QuadraticErrorSimplification;\n}();\n\nexport { QuadraticErrorSimplification };","map":{"version":3,"mappings":"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","names":["Vector3","VertexBuffer","SubMesh","Mesh","AsyncLoop","Epsilon","quality","distance","optimizeMesh","running","_simplificationArray","SimplificationQueue","task","push","pop","runSimplification","parallelProcessing","settings","forEach","setting","simplifier","_this","_getSimplifier","simplify","newMesh","undefined","mesh","addLODLevel","isVisible","length","successCallback","executeNext","simplifier_1","runDecimation_1","callback","Run","loop","index","simplificationType","SimplificationType","QUADRATIC","QuadraticErrorSimplification","_vertices","error","Array","deleted","isDirty","deletePending","borderFactor","position","id","isBorder","q","QuadraticMatrix","triangleCount","triangleStart","originalOffsets","DecimationVertex","newPosition","copyFrom","data","i","a11","a12","a13","a21","a22","a23","a31","a32","a33","det","matrix","m","a","b","c","d","DataFromNumbers","vertexId","triangleId","_mesh","aggressiveness","decimationIterations","boundingBoxEpsilon","_initDecimatedMesh","subMeshes","_initWithMesh","_runDecimation","setTimeout","_reconstructedMesh","submeshIndex","targetCount","_triangles","deletedTriangles","iterationFunction","iteration","_updateMesh","threshold","Math","pow","trianglesIterator","tIdx","t","j","deleted0","deleted1","v0","v1","p","Zero","_calculateError","delTr","_isFlipped","indexOf","uniqueArray_1","deletedT","add","updatePosition","tStart","_references","_updateTriangles","tCount","SyncAsyncForLoop","syncIterations","breakLoop","_reconstructMesh","positionData","getVerticesData","PositionKind","indices","getIndices","submesh","findInVertices","positionToSearch","ii","equalsWithEpsilon","vertexReferences","vertexInit","offset","verticesStart","FromArray","vertex","totalVertices","verticesCount","indicesInit","indexStart","pos","i0","i1","i2","v2","triangle","DecimationTriangle","originalOffset","indexCount","_init","triangleInit1","normal","Cross","subtract","normalize","addArrayInPlace","x","y","z","Dot","triangleInit2","min","newTriangles","newPositionData","newNormalData","NormalKind","newUVsData","UVKind","newColorsData","ColorKind","normalData","uvs","colorsData","vertexCount","this_1","startingIndex","getTotalIndices","startingVertex","getTotalVertices","submeshesArray","newIndicesArray","originalIndices","idx","setIndices","setVerticesData","originalSubmesh","AddToMesh","materialIndex","getMesh","name","getScene","material","parent","renderingGroupId","vertex1","vertex2","point","deletedArray","s","d1","d2","abs","origVertex","newDeleted","ref","vCount","vId","v","ofs","vv","identifyBorders","newTrianglesVector","newReferences","Reference","_identifyBorder","pointResult","border","qDet","_vertexError","p3","divide","error1","error2","error3"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Meshes/meshSimplification.ts"],"sourcesContent":["import type { IndicesArray } from \"../types\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { SubMesh } from \"../Meshes/subMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { AsyncLoop } from \"../Misc/tools\";\r\nimport { Epsilon } from \"../Maths/math.constants\";\r\n/**\r\n * A simplifier interface for future simplification implementations\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\r\nexport interface ISimplifier {\r\n    /**\r\n     * Simplification of a given mesh according to the given settings.\r\n     * Since this requires computation, it is assumed that the function runs async.\r\n     * @param settings The settings of the simplification, including quality and distance\r\n     * @param successCallback A callback that will be called after the mesh was simplified.\r\n     * @param errorCallback in case of an error, this callback will be called. optional.\r\n     */\r\n    simplify(settings: ISimplificationSettings, successCallback: (simplifiedMeshes: Mesh) => void, errorCallback?: () => void): void;\r\n}\r\n\r\n/**\r\n * Expected simplification settings.\r\n * Quality should be between 0 and 1 (1 being 100%, 0 being 0%)\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\r\nexport interface ISimplificationSettings {\r\n    /**\r\n     * Gets or sets the expected quality\r\n     */\r\n    quality: number;\r\n    /**\r\n     * Gets or sets the distance when this optimized version should be used\r\n     */\r\n    distance: number;\r\n    /**\r\n     * Gets an already optimized mesh\r\n     */\r\n    optimizeMesh?: boolean;\r\n}\r\n\r\n/**\r\n * Class used to specify simplification options\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\r\nexport class SimplificationSettings implements ISimplificationSettings {\r\n    /**\r\n     * Creates a SimplificationSettings\r\n     * @param quality expected quality\r\n     * @param distance distance when this optimized version should be used\r\n     * @param optimizeMesh already optimized mesh\r\n     */\r\n    constructor(\r\n        /** expected quality */\r\n        public quality: number,\r\n        /** distance when this optimized version should be used */\r\n        public distance: number,\r\n        /** already optimized mesh  */\r\n        public optimizeMesh?: boolean\r\n    ) {}\r\n}\r\n\r\n/**\r\n * Interface used to define a simplification task\r\n */\r\nexport interface ISimplificationTask {\r\n    /**\r\n     * Array of settings\r\n     */\r\n    settings: Array<ISimplificationSettings>;\r\n    /**\r\n     * Simplification type\r\n     */\r\n    simplificationType: SimplificationType;\r\n    /**\r\n     * Mesh to simplify\r\n     */\r\n    mesh: Mesh;\r\n    /**\r\n     * Callback called on success\r\n     */\r\n    successCallback?: () => void;\r\n    /**\r\n     * Defines if parallel processing can be used\r\n     */\r\n    parallelProcessing: boolean;\r\n}\r\n\r\n/**\r\n * Queue used to order the simplification tasks\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\r\nexport class SimplificationQueue {\r\n    private _simplificationArray: Array<ISimplificationTask>;\r\n\r\n    /**\r\n     * Gets a boolean indicating that the process is still running\r\n     */\r\n    public running: boolean;\r\n\r\n    /**\r\n     * Creates a new queue\r\n     */\r\n    constructor() {\r\n        this.running = false;\r\n        this._simplificationArray = [];\r\n    }\r\n\r\n    /**\r\n     * Adds a new simplification task\r\n     * @param task defines a task to add\r\n     */\r\n    public addTask(task: ISimplificationTask) {\r\n        this._simplificationArray.push(task);\r\n    }\r\n\r\n    /**\r\n     * Execute next task\r\n     */\r\n    public executeNext() {\r\n        const task = this._simplificationArray.pop();\r\n        if (task) {\r\n            this.running = true;\r\n            this.runSimplification(task);\r\n        } else {\r\n            this.running = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute a simplification task\r\n     * @param task defines the task to run\r\n     */\r\n    public runSimplification(task: ISimplificationTask) {\r\n        if (task.parallelProcessing) {\r\n            //parallel simplifier\r\n            task.settings.forEach((setting) => {\r\n                const simplifier = this._getSimplifier(task);\r\n                simplifier.simplify(setting, (newMesh) => {\r\n                    if (setting.distance !== undefined) {\r\n                        task.mesh.addLODLevel(setting.distance, newMesh);\r\n                    }\r\n                    newMesh.isVisible = true;\r\n                    //check if it is the last\r\n                    if (setting.quality === task.settings[task.settings.length - 1].quality && task.successCallback) {\r\n                        //all done, run the success callback.\r\n                        task.successCallback();\r\n                    }\r\n                    this.executeNext();\r\n                });\r\n            });\r\n        } else {\r\n            //single simplifier.\r\n            const simplifier = this._getSimplifier(task);\r\n\r\n            const runDecimation = (setting: ISimplificationSettings, callback: () => void) => {\r\n                simplifier.simplify(setting, (newMesh) => {\r\n                    if (setting.distance !== undefined) {\r\n                        task.mesh.addLODLevel(setting.distance, newMesh);\r\n                    }\r\n                    newMesh.isVisible = true;\r\n                    //run the next quality level\r\n                    callback();\r\n                });\r\n            };\r\n\r\n            AsyncLoop.Run(\r\n                task.settings.length,\r\n                (loop: AsyncLoop) => {\r\n                    runDecimation(task.settings[loop.index], () => {\r\n                        loop.executeNext();\r\n                    });\r\n                },\r\n                () => {\r\n                    //execution ended, run the success callback.\r\n                    if (task.successCallback) {\r\n                        task.successCallback();\r\n                    }\r\n                    this.executeNext();\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    private _getSimplifier(task: ISimplificationTask): ISimplifier {\r\n        switch (task.simplificationType) {\r\n            case SimplificationType.QUADRATIC:\r\n            default:\r\n                return new QuadraticErrorSimplification(task.mesh);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * The implemented types of simplification\r\n * At the moment only Quadratic Error Decimation is implemented\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\r\nexport enum SimplificationType {\r\n    /** Quadratic error decimation */\r\n    QUADRATIC,\r\n}\r\n\r\nclass DecimationTriangle {\r\n    public normal: Vector3;\r\n    public error: Array<number>;\r\n    public deleted: boolean;\r\n    public isDirty: boolean;\r\n    public borderFactor: number;\r\n    public deletePending: boolean;\r\n\r\n    public originalOffset: number;\r\n\r\n    constructor(public _vertices: Array<DecimationVertex>) {\r\n        this.error = new Array<number>(4);\r\n        this.deleted = false;\r\n        this.isDirty = false;\r\n        this.deletePending = false;\r\n        this.borderFactor = 0;\r\n    }\r\n}\r\n\r\nclass DecimationVertex {\r\n    public q: QuadraticMatrix;\r\n    public isBorder: boolean;\r\n\r\n    public triangleStart: number;\r\n    public triangleCount: number;\r\n\r\n    public originalOffsets: Array<number>;\r\n\r\n    constructor(public position: Vector3, public id: number) {\r\n        this.isBorder = true;\r\n        this.q = new QuadraticMatrix();\r\n        this.triangleCount = 0;\r\n        this.triangleStart = 0;\r\n        this.originalOffsets = [];\r\n    }\r\n\r\n    public updatePosition(newPosition: Vector3) {\r\n        this.position.copyFrom(newPosition);\r\n    }\r\n}\r\n\r\nclass QuadraticMatrix {\r\n    public data: Array<number>;\r\n\r\n    constructor(data?: Array<number>) {\r\n        this.data = new Array(10);\r\n        for (let i = 0; i < 10; ++i) {\r\n            if (data && data[i]) {\r\n                this.data[i] = data[i];\r\n            } else {\r\n                this.data[i] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    public det(a11: number, a12: number, a13: number, a21: number, a22: number, a23: number, a31: number, a32: number, a33: number): number {\r\n        const det =\r\n            this.data[a11] * this.data[a22] * this.data[a33] +\r\n            this.data[a13] * this.data[a21] * this.data[a32] +\r\n            this.data[a12] * this.data[a23] * this.data[a31] -\r\n            this.data[a13] * this.data[a22] * this.data[a31] -\r\n            this.data[a11] * this.data[a23] * this.data[a32] -\r\n            this.data[a12] * this.data[a21] * this.data[a33];\r\n        return det;\r\n    }\r\n\r\n    public addInPlace(matrix: QuadraticMatrix) {\r\n        for (let i = 0; i < 10; ++i) {\r\n            this.data[i] += matrix.data[i];\r\n        }\r\n    }\r\n\r\n    public addArrayInPlace(data: Array<number>) {\r\n        for (let i = 0; i < 10; ++i) {\r\n            this.data[i] += data[i];\r\n        }\r\n    }\r\n\r\n    public add(matrix: QuadraticMatrix): QuadraticMatrix {\r\n        const m = new QuadraticMatrix();\r\n        for (let i = 0; i < 10; ++i) {\r\n            m.data[i] = this.data[i] + matrix.data[i];\r\n        }\r\n        return m;\r\n    }\r\n\r\n    public static FromData(a: number, b: number, c: number, d: number): QuadraticMatrix {\r\n        return new QuadraticMatrix(QuadraticMatrix.DataFromNumbers(a, b, c, d));\r\n    }\r\n\r\n    //returning an array to avoid garbage collection\r\n    public static DataFromNumbers(a: number, b: number, c: number, d: number) {\r\n        return [a * a, a * b, a * c, a * d, b * b, b * c, b * d, c * c, c * d, d * d];\r\n    }\r\n}\r\n\r\nclass Reference {\r\n    constructor(public vertexId: number, public triangleId: number) {}\r\n}\r\n\r\n/**\r\n * An implementation of the Quadratic Error simplification algorithm.\r\n * Original paper : http://www1.cs.columbia.edu/~cs4162/html05s/garland97.pdf\r\n * Ported mostly from QSlim and http://voxels.blogspot.de/2014/05/quadric-mesh-simplification-with-source.html to babylon JS\r\n * @author RaananW\r\n * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n */\r\nexport class QuadraticErrorSimplification implements ISimplifier {\r\n    private _triangles: Array<DecimationTriangle>;\r\n    private _vertices: Array<DecimationVertex>;\r\n    private _references: Array<Reference>;\r\n\r\n    private _reconstructedMesh: Mesh;\r\n\r\n    /** Gets or sets the number pf sync iterations */\r\n    public syncIterations = 5000;\r\n\r\n    /** Gets or sets the aggressiveness of the simplifier */\r\n    public aggressiveness: number;\r\n\r\n    /** Gets or sets the number of allowed iterations for decimation */\r\n    public decimationIterations: number;\r\n\r\n    /** Gets or sets the espilon to use for bounding box computation */\r\n    public boundingBoxEpsilon: number;\r\n\r\n    /**\r\n     * Creates a new QuadraticErrorSimplification\r\n     * @param _mesh defines the target mesh\r\n     */\r\n    constructor(private _mesh: Mesh) {\r\n        this.aggressiveness = 7;\r\n        this.decimationIterations = 100;\r\n        this.boundingBoxEpsilon = Epsilon;\r\n    }\r\n\r\n    /**\r\n     * Simplification of a given mesh according to the given settings.\r\n     * Since this requires computation, it is assumed that the function runs async.\r\n     * @param settings The settings of the simplification, including quality and distance\r\n     * @param successCallback A callback that will be called after the mesh was simplified.\r\n     */\r\n    public simplify(settings: ISimplificationSettings, successCallback: (simplifiedMesh: Mesh) => void) {\r\n        this._initDecimatedMesh();\r\n        //iterating through the submeshes array, one after the other.\r\n        AsyncLoop.Run(\r\n            this._mesh.subMeshes.length,\r\n            (loop: AsyncLoop) => {\r\n                this._initWithMesh(\r\n                    loop.index,\r\n                    () => {\r\n                        this._runDecimation(settings, loop.index, () => {\r\n                            loop.executeNext();\r\n                        });\r\n                    },\r\n                    settings.optimizeMesh\r\n                );\r\n            },\r\n            () => {\r\n                setTimeout(() => {\r\n                    successCallback(this._reconstructedMesh);\r\n                }, 0);\r\n            }\r\n        );\r\n    }\r\n\r\n    private _runDecimation(settings: ISimplificationSettings, submeshIndex: number, successCallback: () => void) {\r\n        const targetCount = ~~(this._triangles.length * settings.quality);\r\n        let deletedTriangles = 0;\r\n\r\n        const triangleCount = this._triangles.length;\r\n\r\n        const iterationFunction = (iteration: number, callback: () => void) => {\r\n            setTimeout(() => {\r\n                if (iteration % 5 === 0) {\r\n                    this._updateMesh(iteration === 0);\r\n                }\r\n\r\n                for (let i = 0; i < this._triangles.length; ++i) {\r\n                    this._triangles[i].isDirty = false;\r\n                }\r\n\r\n                const threshold = 0.000000001 * Math.pow(iteration + 3, this.aggressiveness);\r\n\r\n                const trianglesIterator = (i: number) => {\r\n                    const tIdx = ~~((this._triangles.length / 2 + i) % this._triangles.length);\r\n                    const t = this._triangles[tIdx];\r\n                    if (!t) {\r\n                        return;\r\n                    }\r\n                    if (t.error[3] > threshold || t.deleted || t.isDirty) {\r\n                        return;\r\n                    }\r\n                    for (let j = 0; j < 3; ++j) {\r\n                        if (t.error[j] < threshold) {\r\n                            const deleted0: Array<boolean> = [];\r\n                            const deleted1: Array<boolean> = [];\r\n\r\n                            const v0 = t._vertices[j];\r\n                            const v1 = t._vertices[(j + 1) % 3];\r\n\r\n                            if (v0.isBorder || v1.isBorder) {\r\n                                continue;\r\n                            }\r\n\r\n                            const p = Vector3.Zero();\r\n                            // var n = Vector3.Zero();\r\n                            // var uv = Vector2.Zero();\r\n                            // var color = new Color4(0, 0, 0, 1);\r\n\r\n                            this._calculateError(v0, v1, p);\r\n\r\n                            const delTr = new Array<DecimationTriangle>();\r\n\r\n                            if (this._isFlipped(v0, v1, p, deleted0, delTr)) {\r\n                                continue;\r\n                            }\r\n                            if (this._isFlipped(v1, v0, p, deleted1, delTr)) {\r\n                                continue;\r\n                            }\r\n\r\n                            if (deleted0.indexOf(true) < 0 || deleted1.indexOf(true) < 0) {\r\n                                continue;\r\n                            }\r\n\r\n                            const uniqueArray = new Array<DecimationTriangle>();\r\n                            delTr.forEach((deletedT) => {\r\n                                if (uniqueArray.indexOf(deletedT) === -1) {\r\n                                    deletedT.deletePending = true;\r\n                                    uniqueArray.push(deletedT);\r\n                                }\r\n                            });\r\n\r\n                            if (uniqueArray.length % 2 !== 0) {\r\n                                continue;\r\n                            }\r\n\r\n                            v0.q = v1.q.add(v0.q);\r\n\r\n                            v0.updatePosition(p);\r\n\r\n                            const tStart = this._references.length;\r\n\r\n                            deletedTriangles = this._updateTriangles(v0, v0, deleted0, deletedTriangles);\r\n                            deletedTriangles = this._updateTriangles(v0, v1, deleted1, deletedTriangles);\r\n\r\n                            const tCount = this._references.length - tStart;\r\n\r\n                            if (tCount <= v0.triangleCount) {\r\n                                if (tCount) {\r\n                                    for (let c = 0; c < tCount; c++) {\r\n                                        this._references[v0.triangleStart + c] = this._references[tStart + c];\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                v0.triangleStart = tStart;\r\n                            }\r\n\r\n                            v0.triangleCount = tCount;\r\n                            break;\r\n                        }\r\n                    }\r\n                };\r\n                AsyncLoop.SyncAsyncForLoop(this._triangles.length, this.syncIterations, trianglesIterator, callback, () => {\r\n                    return triangleCount - deletedTriangles <= targetCount;\r\n                });\r\n            }, 0);\r\n        };\r\n\r\n        AsyncLoop.Run(\r\n            this.decimationIterations,\r\n            (loop: AsyncLoop) => {\r\n                if (triangleCount - deletedTriangles <= targetCount) {\r\n                    loop.breakLoop();\r\n                } else {\r\n                    iterationFunction(loop.index, () => {\r\n                        loop.executeNext();\r\n                    });\r\n                }\r\n            },\r\n            () => {\r\n                setTimeout(() => {\r\n                    //reconstruct this part of the mesh\r\n                    this._reconstructMesh(submeshIndex);\r\n                    successCallback();\r\n                }, 0);\r\n            }\r\n        );\r\n    }\r\n\r\n    private _initWithMesh(submeshIndex: number, callback: Function, optimizeMesh?: boolean) {\r\n        this._vertices = [];\r\n        this._triangles = [];\r\n\r\n        const positionData = this._mesh.getVerticesData(VertexBuffer.PositionKind);\r\n\r\n        const indices = this._mesh.getIndices();\r\n        const submesh = this._mesh.subMeshes[submeshIndex];\r\n\r\n        const findInVertices = (positionToSearch: Vector3) => {\r\n            if (optimizeMesh) {\r\n                for (let ii = 0; ii < this._vertices.length; ++ii) {\r\n                    if (this._vertices[ii].position.equalsWithEpsilon(positionToSearch, 0.0001)) {\r\n                        return this._vertices[ii];\r\n                    }\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n\r\n        const vertexReferences: Array<number> = [];\r\n\r\n        const vertexInit = (i: number) => {\r\n            if (!positionData) {\r\n                return;\r\n            }\r\n\r\n            const offset = i + submesh.verticesStart;\r\n            const position = Vector3.FromArray(positionData, offset * 3);\r\n\r\n            const vertex = findInVertices(position) || new DecimationVertex(position, this._vertices.length);\r\n            vertex.originalOffsets.push(offset);\r\n            if (vertex.id === this._vertices.length) {\r\n                this._vertices.push(vertex);\r\n            }\r\n            vertexReferences.push(vertex.id);\r\n        };\r\n        //var totalVertices = mesh.getTotalVertices();\r\n        const totalVertices = submesh.verticesCount;\r\n        AsyncLoop.SyncAsyncForLoop(totalVertices, (this.syncIterations / 4) >> 0, vertexInit, () => {\r\n            const indicesInit = (i: number) => {\r\n                if (!indices) {\r\n                    return;\r\n                }\r\n\r\n                const offset = submesh.indexStart / 3 + i;\r\n                const pos = offset * 3;\r\n                const i0 = indices[pos + 0];\r\n                const i1 = indices[pos + 1];\r\n                const i2 = indices[pos + 2];\r\n                const v0: DecimationVertex = this._vertices[vertexReferences[i0 - submesh.verticesStart]];\r\n                const v1: DecimationVertex = this._vertices[vertexReferences[i1 - submesh.verticesStart]];\r\n                const v2: DecimationVertex = this._vertices[vertexReferences[i2 - submesh.verticesStart]];\r\n                const triangle = new DecimationTriangle([v0, v1, v2]);\r\n                triangle.originalOffset = pos;\r\n                this._triangles.push(triangle);\r\n            };\r\n            AsyncLoop.SyncAsyncForLoop(submesh.indexCount / 3, this.syncIterations, indicesInit, () => {\r\n                this._init(callback);\r\n            });\r\n        });\r\n    }\r\n\r\n    private _init(callback: Function) {\r\n        const triangleInit1 = (i: number) => {\r\n            const t = this._triangles[i];\r\n            t.normal = Vector3.Cross(t._vertices[1].position.subtract(t._vertices[0].position), t._vertices[2].position.subtract(t._vertices[0].position)).normalize();\r\n            for (let j = 0; j < 3; j++) {\r\n                t._vertices[j].q.addArrayInPlace(QuadraticMatrix.DataFromNumbers(t.normal.x, t.normal.y, t.normal.z, -Vector3.Dot(t.normal, t._vertices[0].position)));\r\n            }\r\n        };\r\n        AsyncLoop.SyncAsyncForLoop(this._triangles.length, this.syncIterations, triangleInit1, () => {\r\n            const triangleInit2 = (i: number) => {\r\n                const t = this._triangles[i];\r\n                for (let j = 0; j < 3; ++j) {\r\n                    t.error[j] = this._calculateError(t._vertices[j], t._vertices[(j + 1) % 3]);\r\n                }\r\n                t.error[3] = Math.min(t.error[0], t.error[1], t.error[2]);\r\n            };\r\n            AsyncLoop.SyncAsyncForLoop(this._triangles.length, this.syncIterations, triangleInit2, () => {\r\n                callback();\r\n            });\r\n        });\r\n    }\r\n\r\n    private _reconstructMesh(submeshIndex: number) {\r\n        const newTriangles: Array<DecimationTriangle> = [];\r\n        let i: number;\r\n        for (i = 0; i < this._vertices.length; ++i) {\r\n            this._vertices[i].triangleCount = 0;\r\n        }\r\n        let t: DecimationTriangle;\r\n        let j: number;\r\n        for (i = 0; i < this._triangles.length; ++i) {\r\n            if (!this._triangles[i].deleted) {\r\n                t = this._triangles[i];\r\n                for (j = 0; j < 3; ++j) {\r\n                    t._vertices[j].triangleCount = 1;\r\n                }\r\n                newTriangles.push(t);\r\n            }\r\n        }\r\n\r\n        const newPositionData = <number[]>(this._reconstructedMesh.getVerticesData(VertexBuffer.PositionKind) || []);\r\n        const newNormalData = <number[]>(this._reconstructedMesh.getVerticesData(VertexBuffer.NormalKind) || []);\r\n        const newUVsData = <number[]>(this._reconstructedMesh.getVerticesData(VertexBuffer.UVKind) || []);\r\n        const newColorsData = <number[]>(this._reconstructedMesh.getVerticesData(VertexBuffer.ColorKind) || []);\r\n\r\n        const normalData = this._mesh.getVerticesData(VertexBuffer.NormalKind);\r\n        const uvs = this._mesh.getVerticesData(VertexBuffer.UVKind);\r\n        const colorsData = this._mesh.getVerticesData(VertexBuffer.ColorKind);\r\n\r\n        let vertexCount = 0;\r\n        for (i = 0; i < this._vertices.length; ++i) {\r\n            const vertex = this._vertices[i];\r\n            vertex.id = vertexCount;\r\n            if (vertex.triangleCount) {\r\n                vertex.originalOffsets.forEach((originalOffset) => {\r\n                    newPositionData.push(vertex.position.x);\r\n                    newPositionData.push(vertex.position.y);\r\n                    newPositionData.push(vertex.position.z);\r\n\r\n                    if (normalData && normalData.length) {\r\n                        newNormalData.push(normalData[originalOffset * 3]);\r\n                        newNormalData.push(normalData[originalOffset * 3 + 1]);\r\n                        newNormalData.push(normalData[originalOffset * 3 + 2]);\r\n                    }\r\n                    if (uvs && uvs.length) {\r\n                        newUVsData.push(uvs[originalOffset * 2]);\r\n                        newUVsData.push(uvs[originalOffset * 2 + 1]);\r\n                    }\r\n                    if (colorsData && colorsData.length) {\r\n                        newColorsData.push(colorsData[originalOffset * 4]);\r\n                        newColorsData.push(colorsData[originalOffset * 4 + 1]);\r\n                        newColorsData.push(colorsData[originalOffset * 4 + 2]);\r\n                        newColorsData.push(colorsData[originalOffset * 4 + 3]);\r\n                    }\r\n                    ++vertexCount;\r\n                });\r\n            }\r\n        }\r\n\r\n        const startingIndex = this._reconstructedMesh.getTotalIndices();\r\n        const startingVertex = this._reconstructedMesh.getTotalVertices();\r\n\r\n        const submeshesArray = this._reconstructedMesh.subMeshes;\r\n        this._reconstructedMesh.subMeshes = [];\r\n\r\n        const newIndicesArray: number[] = <number[]>this._reconstructedMesh.getIndices(); //[];\r\n        const originalIndices = <IndicesArray>this._mesh.getIndices();\r\n        for (i = 0; i < newTriangles.length; ++i) {\r\n            t = newTriangles[i]; //now get the new referencing point for each vertex\r\n            [0, 1, 2].forEach((idx) => {\r\n                const id = originalIndices[t.originalOffset + idx];\r\n                let offset = t._vertices[idx].originalOffsets.indexOf(id);\r\n                if (offset < 0) {\r\n                    offset = 0;\r\n                }\r\n                newIndicesArray.push(t._vertices[idx].id + offset + startingVertex);\r\n            });\r\n        }\r\n\r\n        //overwriting the old vertex buffers and indices.\r\n\r\n        this._reconstructedMesh.setIndices(newIndicesArray);\r\n        this._reconstructedMesh.setVerticesData(VertexBuffer.PositionKind, newPositionData);\r\n        if (newNormalData.length > 0) {\r\n            this._reconstructedMesh.setVerticesData(VertexBuffer.NormalKind, newNormalData);\r\n        }\r\n        if (newUVsData.length > 0) {\r\n            this._reconstructedMesh.setVerticesData(VertexBuffer.UVKind, newUVsData);\r\n        }\r\n        if (newColorsData.length > 0) {\r\n            this._reconstructedMesh.setVerticesData(VertexBuffer.ColorKind, newColorsData);\r\n        }\r\n\r\n        //create submesh\r\n        const originalSubmesh = this._mesh.subMeshes[submeshIndex];\r\n        if (submeshIndex > 0) {\r\n            this._reconstructedMesh.subMeshes = [];\r\n            submeshesArray.forEach((submesh) => {\r\n                SubMesh.AddToMesh(\r\n                    submesh.materialIndex,\r\n                    submesh.verticesStart,\r\n                    submesh.verticesCount,\r\n                    /* 0, newPositionData.length/3, */ submesh.indexStart,\r\n                    submesh.indexCount,\r\n                    submesh.getMesh()\r\n                );\r\n            });\r\n            SubMesh.AddToMesh(\r\n                originalSubmesh.materialIndex,\r\n                startingVertex,\r\n                vertexCount,\r\n                /* 0, newPositionData.length / 3, */ startingIndex,\r\n                newTriangles.length * 3,\r\n                this._reconstructedMesh\r\n            );\r\n        }\r\n    }\r\n\r\n    private _initDecimatedMesh() {\r\n        this._reconstructedMesh = new Mesh(this._mesh.name + \"Decimated\", this._mesh.getScene());\r\n        this._reconstructedMesh.material = this._mesh.material;\r\n        this._reconstructedMesh.parent = this._mesh.parent;\r\n        this._reconstructedMesh.isVisible = false;\r\n        this._reconstructedMesh.renderingGroupId = this._mesh.renderingGroupId;\r\n    }\r\n\r\n    private _isFlipped(vertex1: DecimationVertex, vertex2: DecimationVertex, point: Vector3, deletedArray: Array<boolean>, delTr: Array<DecimationTriangle>): boolean {\r\n        for (let i = 0; i < vertex1.triangleCount; ++i) {\r\n            const t = this._triangles[this._references[vertex1.triangleStart + i].triangleId];\r\n            if (t.deleted) {\r\n                continue;\r\n            }\r\n\r\n            const s = this._references[vertex1.triangleStart + i].vertexId;\r\n\r\n            const v1 = t._vertices[(s + 1) % 3];\r\n            const v2 = t._vertices[(s + 2) % 3];\r\n\r\n            if (v1 === vertex2 || v2 === vertex2) {\r\n                deletedArray[i] = true;\r\n                delTr.push(t);\r\n                continue;\r\n            }\r\n\r\n            let d1 = v1.position.subtract(point);\r\n            d1 = d1.normalize();\r\n            let d2 = v2.position.subtract(point);\r\n            d2 = d2.normalize();\r\n            if (Math.abs(Vector3.Dot(d1, d2)) > 0.999) {\r\n                return true;\r\n            }\r\n            const normal = Vector3.Cross(d1, d2).normalize();\r\n            deletedArray[i] = false;\r\n            if (Vector3.Dot(normal, t.normal) < 0.2) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _updateTriangles(origVertex: DecimationVertex, vertex: DecimationVertex, deletedArray: Array<boolean>, deletedTriangles: number): number {\r\n        let newDeleted = deletedTriangles;\r\n        for (let i = 0; i < vertex.triangleCount; ++i) {\r\n            const ref = this._references[vertex.triangleStart + i];\r\n            const t = this._triangles[ref.triangleId];\r\n            if (t.deleted) {\r\n                continue;\r\n            }\r\n            if (deletedArray[i] && t.deletePending) {\r\n                t.deleted = true;\r\n                newDeleted++;\r\n                continue;\r\n            }\r\n            t._vertices[ref.vertexId] = origVertex;\r\n            t.isDirty = true;\r\n            t.error[0] = this._calculateError(t._vertices[0], t._vertices[1]) + t.borderFactor / 2;\r\n            t.error[1] = this._calculateError(t._vertices[1], t._vertices[2]) + t.borderFactor / 2;\r\n            t.error[2] = this._calculateError(t._vertices[2], t._vertices[0]) + t.borderFactor / 2;\r\n            t.error[3] = Math.min(t.error[0], t.error[1], t.error[2]);\r\n            this._references.push(ref);\r\n        }\r\n        return newDeleted;\r\n    }\r\n\r\n    private _identifyBorder() {\r\n        for (let i = 0; i < this._vertices.length; ++i) {\r\n            const vCount: Array<number> = [];\r\n            const vId: Array<number> = [];\r\n            const v = this._vertices[i];\r\n            let j: number;\r\n            for (j = 0; j < v.triangleCount; ++j) {\r\n                const triangle = this._triangles[this._references[v.triangleStart + j].triangleId];\r\n                for (let ii = 0; ii < 3; ii++) {\r\n                    let ofs = 0;\r\n                    const vv = triangle._vertices[ii];\r\n                    while (ofs < vCount.length) {\r\n                        if (vId[ofs] === vv.id) {\r\n                            break;\r\n                        }\r\n                        ++ofs;\r\n                    }\r\n                    if (ofs === vCount.length) {\r\n                        vCount.push(1);\r\n                        vId.push(vv.id);\r\n                    } else {\r\n                        vCount[ofs]++;\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (j = 0; j < vCount.length; ++j) {\r\n                if (vCount[j] === 1) {\r\n                    this._vertices[vId[j]].isBorder = true;\r\n                } else {\r\n                    this._vertices[vId[j]].isBorder = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _updateMesh(identifyBorders: boolean = false) {\r\n        let i: number;\r\n        if (!identifyBorders) {\r\n            const newTrianglesVector: Array<DecimationTriangle> = [];\r\n            for (i = 0; i < this._triangles.length; ++i) {\r\n                if (!this._triangles[i].deleted) {\r\n                    newTrianglesVector.push(this._triangles[i]);\r\n                }\r\n            }\r\n            this._triangles = newTrianglesVector;\r\n        }\r\n\r\n        for (i = 0; i < this._vertices.length; ++i) {\r\n            this._vertices[i].triangleCount = 0;\r\n            this._vertices[i].triangleStart = 0;\r\n        }\r\n        let t: DecimationTriangle;\r\n        let j: number;\r\n        let v: DecimationVertex;\r\n        for (i = 0; i < this._triangles.length; ++i) {\r\n            t = this._triangles[i];\r\n            for (j = 0; j < 3; ++j) {\r\n                v = t._vertices[j];\r\n                v.triangleCount++;\r\n            }\r\n        }\r\n\r\n        let tStart = 0;\r\n\r\n        for (i = 0; i < this._vertices.length; ++i) {\r\n            this._vertices[i].triangleStart = tStart;\r\n            tStart += this._vertices[i].triangleCount;\r\n            this._vertices[i].triangleCount = 0;\r\n        }\r\n\r\n        const newReferences: Array<Reference> = new Array(this._triangles.length * 3);\r\n        for (i = 0; i < this._triangles.length; ++i) {\r\n            t = this._triangles[i];\r\n            for (j = 0; j < 3; ++j) {\r\n                v = t._vertices[j];\r\n                newReferences[v.triangleStart + v.triangleCount] = new Reference(j, i);\r\n                v.triangleCount++;\r\n            }\r\n        }\r\n        this._references = newReferences;\r\n\r\n        if (identifyBorders) {\r\n            this._identifyBorder();\r\n        }\r\n    }\r\n\r\n    private _vertexError(q: QuadraticMatrix, point: Vector3): number {\r\n        const x = point.x;\r\n        const y = point.y;\r\n        const z = point.z;\r\n        return (\r\n            q.data[0] * x * x +\r\n            2 * q.data[1] * x * y +\r\n            2 * q.data[2] * x * z +\r\n            2 * q.data[3] * x +\r\n            q.data[4] * y * y +\r\n            2 * q.data[5] * y * z +\r\n            2 * q.data[6] * y +\r\n            q.data[7] * z * z +\r\n            2 * q.data[8] * z +\r\n            q.data[9]\r\n        );\r\n    }\r\n\r\n    private _calculateError(vertex1: DecimationVertex, vertex2: DecimationVertex, pointResult?: Vector3): number {\r\n        const q = vertex1.q.add(vertex2.q);\r\n        const border = vertex1.isBorder && vertex2.isBorder;\r\n        let error: number = 0;\r\n        const qDet = q.det(0, 1, 2, 1, 4, 5, 2, 5, 7);\r\n\r\n        if (qDet !== 0 && !border) {\r\n            if (!pointResult) {\r\n                pointResult = Vector3.Zero();\r\n            }\r\n            pointResult.x = (-1 / qDet) * q.det(1, 2, 3, 4, 5, 6, 5, 7, 8);\r\n            pointResult.y = (1 / qDet) * q.det(0, 2, 3, 1, 5, 6, 2, 7, 8);\r\n            pointResult.z = (-1 / qDet) * q.det(0, 1, 3, 1, 4, 6, 2, 5, 8);\r\n            error = this._vertexError(q, pointResult);\r\n        } else {\r\n            const p3 = vertex1.position.add(vertex2.position).divide(new Vector3(2, 2, 2));\r\n            //var norm3 = (vertex1.normal.add(vertex2.normal)).divide(new Vector3(2, 2, 2)).normalize();\r\n            const error1 = this._vertexError(q, vertex1.position);\r\n            const error2 = this._vertexError(q, vertex2.position);\r\n            const error3 = this._vertexError(q, p3);\r\n            error = Math.min(error1, error2, error3);\r\n            if (error === error1) {\r\n                if (pointResult) {\r\n                    pointResult.copyFrom(vertex1.position);\r\n                }\r\n            } else if (error === error2) {\r\n                if (pointResult) {\r\n                    pointResult.copyFrom(vertex2.position);\r\n                }\r\n            } else {\r\n                if (pointResult) {\r\n                    pointResult.copyFrom(p3);\r\n                }\r\n            }\r\n        }\r\n        return error;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}