{"ast":null,"code":"import \"core-js/modules/es.array.index-of.js\";\nimport { __extends } from \"tslib\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Mesh } from \"../../Meshes/mesh.js\";\nimport { SceneLoader } from \"../../Loading/sceneLoader.js\";\nimport { WebVRController } from \"./webVRController.js\";\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController.js\";\n/**\n * Gear VR Controller\n */\n\nvar GearVRController =\n/** @class */\nfunction (_super) {\n  __extends(GearVRController, _super);\n  /**\n   * Creates a new GearVRController from a gamepad\n   * @param vrGamepad the gamepad that the controller should be created from\n   */\n\n\n  function GearVRController(vrGamepad) {\n    var _this = _super.call(this, vrGamepad) || this;\n\n    _this._buttonIndexToObservableNameMap = [\"onPadStateChangedObservable\", \"onTriggerStateChangedObservable\" // Trigger\n    ];\n    _this.controllerType = PoseEnabledControllerType.GEAR_VR; // Initial starting position defaults to where hand would be (incase of only 3dof controller)\n\n    _this._calculatedPosition = new Vector3(_this.hand == \"left\" ? -0.15 : 0.15, -0.5, 0.25);\n\n    _this._disableTrackPosition(_this._calculatedPosition);\n\n    return _this;\n  }\n  /**\n   * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\n   * @param scene scene in which to add meshes\n   * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\n   */\n\n\n  GearVRController.prototype.initControllerMesh = function (scene, meshLoaded) {\n    var _this = this;\n\n    SceneLoader.ImportMesh(\"\", GearVRController.MODEL_BASE_URL, GearVRController.MODEL_FILENAME, scene, function (newMeshes) {\n      // Offset the controller so it will rotate around the users wrist\n      var mesh = new Mesh(\"\", scene);\n      newMeshes[1].parent = mesh;\n      newMeshes[1].position.z = -0.15;\n      _this._defaultModel = mesh;\n\n      _this.attachToMesh(_this._defaultModel);\n\n      if (meshLoaded) {\n        meshLoaded(_this._defaultModel);\n      }\n    });\n  };\n  /**\n   * Called once for each button that changed state since the last frame\n   * @param buttonIdx Which button index changed\n   * @param state New state of the button\n   */\n\n\n  GearVRController.prototype._handleButtonChange = function (buttonIdx, state) {\n    if (buttonIdx < this._buttonIndexToObservableNameMap.length) {\n      var observableName = this._buttonIndexToObservableNameMap[buttonIdx]; // Only emit events for buttons that we know how to map from index to observable\n\n      var observable = this[observableName];\n\n      if (observable) {\n        observable.notifyObservers(state);\n      }\n    }\n  };\n  /**\n   * Base Url for the controller model.\n   */\n\n\n  GearVRController.MODEL_BASE_URL = \"https://controllers.babylonjs.com/generic/\";\n  /**\n   * File name for the controller model.\n   */\n\n  GearVRController.MODEL_FILENAME = \"generic.babylon\";\n  /**\n   * Gamepad Id prefix used to identify this controller.\n   */\n\n  GearVRController.GAMEPAD_ID_PREFIX = \"Gear VR\"; // id is 'Gear VR Controller'\n\n  return GearVRController;\n}(WebVRController);\n\nexport { GearVRController };\n\nPoseEnabledControllerHelper._ControllerFactories.push({\n  canCreate: function canCreate(gamepadInfo) {\n    return gamepadInfo.id.indexOf(GearVRController.GAMEPAD_ID_PREFIX) === 0 || gamepadInfo.id.indexOf(\"Oculus Go\") !== -1 || gamepadInfo.id.indexOf(\"Vive Focus\") !== -1;\n  },\n  create: function create(gamepadInfo) {\n    return new GearVRController(gamepadInfo);\n  }\n});","map":{"version":3,"mappings":";;AACA,SAASA,OAAT,QAAwB,4BAAxB;AAEA,SAASC,IAAT,QAAqB,sBAArB;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,eAAT,QAAgC,sBAAhC;AAEA,SAASC,yBAAT,EAAoCC,2BAApC,QAAuE,4BAAvE;AAEA;;;;AAGA;AAAA;AAAA;AAAsCC;AAoBlC;;;;;;AAIA,4BAAYC,SAAZ,EAA0B;AAA1B,gBACIC,kBAAMD,SAAN,KAAgB,IADpB;;AATiBE,4CAAkC,CAC/C,6BAD+C,EAE/C,iCAF+C,CAEZ;AAFY,KAAlC;AAWbA,SAAI,CAACC,cAAL,GAAsBN,yBAAyB,CAACO,OAAhD,CAFsB,CAGtB;;AACAF,SAAI,CAACG,mBAAL,GAA2B,IAAIZ,OAAJ,CAAYS,KAAI,CAACI,IAAL,IAAa,MAAb,GAAsB,CAAC,IAAvB,GAA8B,IAA1C,EAAgD,CAAC,GAAjD,EAAsD,IAAtD,CAA3B;;AACAJ,SAAI,CAACK,qBAAL,CAA2BL,KAAI,CAACG,mBAAhC;;;AACH;AAED;;;;;;;AAKOG,kDAAP,UAA0BC,KAA1B,EAAwCC,UAAxC,EAAiF;AAAjF;;AACIf,eAAW,CAACgB,UAAZ,CAAuB,EAAvB,EAA2BH,gBAAgB,CAACI,cAA5C,EAA4DJ,gBAAgB,CAACK,cAA7E,EAA6FJ,KAA7F,EAAoG,UAACK,SAAD,EAAU;AAC1G;AACA,UAAMC,IAAI,GAAG,IAAIrB,IAAJ,CAAS,EAAT,EAAae,KAAb,CAAb;AACAK,eAAS,CAAC,CAAD,CAAT,CAAaE,MAAb,GAAsBD,IAAtB;AACAD,eAAS,CAAC,CAAD,CAAT,CAAaG,QAAb,CAAsBC,CAAtB,GAA0B,CAAC,IAA3B;AACAhB,WAAI,CAACiB,aAAL,GAAqBJ,IAArB;;AACAb,WAAI,CAACkB,YAAL,CAAkBlB,KAAI,CAACiB,aAAvB;;AACA,UAAIT,UAAJ,EAAgB;AACZA,kBAAU,CAACR,KAAI,CAACiB,aAAN,CAAV;AACH;AACJ,KAVD;AAWH,GAZM;AAcP;;;;;;;AAKUX,mDAAV,UAA8Ba,SAA9B,EAAiDC,KAAjD,EAA6E;AACzE,QAAID,SAAS,GAAG,KAAKE,+BAAL,CAAqCC,MAArD,EAA6D;AACzD,UAAMC,cAAc,GAAW,KAAKF,+BAAL,CAAqCF,SAArC,CAA/B,CADyD,CAGzD;;AACA,UAAMK,UAAU,GAAS,KAAMD,cAAN,CAAzB;;AACA,UAAIC,UAAJ,EAAgB;AACZA,kBAAU,CAACC,eAAX,CAA2BL,KAA3B;AACH;AACJ;AACJ,GAVS;AAvDV;;;;;AAGcd,oCAAyB,4CAAzB;AACd;;;;AAGcA,oCAAyB,iBAAzB;AAEd;;;;AAGuBA,uCAA4B,SAA5B,CAb3B,CAakE;;AAsDlE;AAAC,CAnED,CAAsCZ,eAAtC;;SAAaY;;AAqEbV,2BAA2B,CAAC8B,oBAA5B,CAAiDC,IAAjD,CAAsD;AAClDC,WAAS,EAAE,mBAACC,WAAD,EAAY;AACnB,WAAOA,WAAW,CAACC,EAAZ,CAAeC,OAAf,CAAuBzB,gBAAgB,CAAC0B,iBAAxC,MAA+D,CAA/D,IAAoEH,WAAW,CAACC,EAAZ,CAAeC,OAAf,CAAuB,WAAvB,MAAwC,CAAC,CAA7G,IAAkHF,WAAW,CAACC,EAAZ,CAAeC,OAAf,CAAuB,YAAvB,MAAyC,CAAC,CAAnK;AACH,GAHiD;AAIlDE,QAAM,EAAE,gBAACJ,WAAD,EAAY;AAChB,WAAO,IAAIvB,gBAAJ,CAAqBuB,WAArB,CAAP;AACH;AANiD,CAAtD","names":["Vector3","Mesh","SceneLoader","WebVRController","PoseEnabledControllerType","PoseEnabledControllerHelper","__extends","vrGamepad","_super","_this","controllerType","GEAR_VR","_calculatedPosition","hand","_disableTrackPosition","GearVRController","scene","meshLoaded","ImportMesh","MODEL_BASE_URL","MODEL_FILENAME","newMeshes","mesh","parent","position","z","_defaultModel","attachToMesh","buttonIdx","state","_buttonIndexToObservableNameMap","length","observableName","observable","notifyObservers","_ControllerFactories","push","canCreate","gamepadInfo","id","indexOf","GAMEPAD_ID_PREFIX","create"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Gamepads/Controllers/gearVRController.ts"],"sourcesContent":["import type { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\r\nimport { WebVRController } from \"./webVRController\";\r\nimport type { ExtendedGamepadButton } from \"./poseEnabledController\";\r\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController\";\r\n\r\n/**\r\n * Gear VR Controller\r\n */\r\nexport class GearVRController extends WebVRController {\r\n    /**\r\n     * Base Url for the controller model.\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://controllers.babylonjs.com/generic/\";\r\n    /**\r\n     * File name for the controller model.\r\n     */\r\n    public static MODEL_FILENAME: string = \"generic.babylon\";\r\n\r\n    /**\r\n     * Gamepad Id prefix used to identify this controller.\r\n     */\r\n    public static readonly GAMEPAD_ID_PREFIX: string = \"Gear VR\"; // id is 'Gear VR Controller'\r\n\r\n    private readonly _buttonIndexToObservableNameMap = [\r\n        \"onPadStateChangedObservable\", // Pad\r\n        \"onTriggerStateChangedObservable\", // Trigger\r\n    ];\r\n\r\n    /**\r\n     * Creates a new GearVRController from a gamepad\r\n     * @param vrGamepad the gamepad that the controller should be created from\r\n     */\r\n    constructor(vrGamepad: any) {\r\n        super(vrGamepad);\r\n        this.controllerType = PoseEnabledControllerType.GEAR_VR;\r\n        // Initial starting position defaults to where hand would be (incase of only 3dof controller)\r\n        this._calculatedPosition = new Vector3(this.hand == \"left\" ? -0.15 : 0.15, -0.5, 0.25);\r\n        this._disableTrackPosition(this._calculatedPosition);\r\n    }\r\n\r\n    /**\r\n     * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\r\n     * @param scene scene in which to add meshes\r\n     * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\r\n     */\r\n    public initControllerMesh(scene: Scene, meshLoaded?: (mesh: AbstractMesh) => void) {\r\n        SceneLoader.ImportMesh(\"\", GearVRController.MODEL_BASE_URL, GearVRController.MODEL_FILENAME, scene, (newMeshes) => {\r\n            // Offset the controller so it will rotate around the users wrist\r\n            const mesh = new Mesh(\"\", scene);\r\n            newMeshes[1].parent = mesh;\r\n            newMeshes[1].position.z = -0.15;\r\n            this._defaultModel = mesh;\r\n            this.attachToMesh(this._defaultModel);\r\n            if (meshLoaded) {\r\n                meshLoaded(this._defaultModel);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called once for each button that changed state since the last frame\r\n     * @param buttonIdx Which button index changed\r\n     * @param state New state of the button\r\n     */\r\n    protected _handleButtonChange(buttonIdx: number, state: ExtendedGamepadButton) {\r\n        if (buttonIdx < this._buttonIndexToObservableNameMap.length) {\r\n            const observableName: string = this._buttonIndexToObservableNameMap[buttonIdx];\r\n\r\n            // Only emit events for buttons that we know how to map from index to observable\r\n            const observable = (<any>this)[observableName];\r\n            if (observable) {\r\n                observable.notifyObservers(state);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nPoseEnabledControllerHelper._ControllerFactories.push({\r\n    canCreate: (gamepadInfo) => {\r\n        return gamepadInfo.id.indexOf(GearVRController.GAMEPAD_ID_PREFIX) === 0 || gamepadInfo.id.indexOf(\"Oculus Go\") !== -1 || gamepadInfo.id.indexOf(\"Vive Focus\") !== -1;\r\n    },\r\n    create: (gamepadInfo) => {\r\n        return new GearVRController(gamepadInfo);\r\n    },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}