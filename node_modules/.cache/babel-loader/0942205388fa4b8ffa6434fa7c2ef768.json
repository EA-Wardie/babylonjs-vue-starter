{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { BaseCameraPointersInput } from \"../../Cameras/Inputs/BaseCameraPointersInput.js\";\n/**\n * Manage the pointers inputs to control an follow camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\n\nvar FollowCameraPointersInput =\n/** @class */\nfunction (_super) {\n  __extends(FollowCameraPointersInput, _super);\n\n  function FollowCameraPointersInput() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * Defines the pointer angular sensibility along the X axis or how fast is\n     * the camera rotating.\n     * A negative number will reverse the axis direction.\n     */\n\n\n    _this.angularSensibilityX = 1;\n    /**\n     * Defines the pointer angular sensibility along the Y axis or how fast is\n     * the camera rotating.\n     * A negative number will reverse the axis direction.\n     */\n\n    _this.angularSensibilityY = 1;\n    /**\n     * Defines the pointer pinch precision or how fast is the camera zooming.\n     * A negative number will reverse the axis direction.\n     */\n\n    _this.pinchPrecision = 10000.0;\n    /**\n     * pinchDeltaPercentage will be used instead of pinchPrecision if different\n     * from 0.\n     * It defines the percentage of current camera.radius to use as delta when\n     * pinch zoom is used.\n     */\n\n    _this.pinchDeltaPercentage = 0;\n    /**\n     * Pointer X axis controls zoom. (X axis modifies camera.radius value.)\n     */\n\n    _this.axisXControlRadius = false;\n    /**\n     * Pointer X axis controls height. (X axis modifies camera.heightOffset value.)\n     */\n\n    _this.axisXControlHeight = false;\n    /**\n     * Pointer X axis controls angle. (X axis modifies camera.rotationOffset value.)\n     */\n\n    _this.axisXControlRotation = true;\n    /**\n     * Pointer Y axis controls zoom. (Y axis modifies camera.radius value.)\n     */\n\n    _this.axisYControlRadius = false;\n    /**\n     * Pointer Y axis controls height. (Y axis modifies camera.heightOffset value.)\n     */\n\n    _this.axisYControlHeight = true;\n    /**\n     * Pointer Y axis controls angle. (Y axis modifies camera.rotationOffset value.)\n     */\n\n    _this.axisYControlRotation = false;\n    /**\n     * Pinch controls zoom. (Pinch modifies camera.radius value.)\n     */\n\n    _this.axisPinchControlRadius = true;\n    /**\n     * Pinch controls height. (Pinch modifies camera.heightOffset value.)\n     */\n\n    _this.axisPinchControlHeight = false;\n    /**\n     * Pinch controls angle. (Pinch modifies camera.rotationOffset value.)\n     */\n\n    _this.axisPinchControlRotation = false;\n    /**\n     * Log error messages if basic misconfiguration has occurred.\n     */\n\n    _this.warningEnable = true;\n    /* Check for obvious misconfiguration. */\n\n    _this._warningCounter = 0;\n    return _this;\n  }\n  /**\n   * Gets the class name of the current input.\n   * @returns the class name\n   */\n\n\n  FollowCameraPointersInput.prototype.getClassName = function () {\n    return \"FollowCameraPointersInput\";\n  };\n\n  FollowCameraPointersInput.prototype.onTouch = function (pointA, offsetX, offsetY) {\n    this._warning();\n\n    if (this.axisXControlRotation) {\n      this.camera.rotationOffset += offsetX / this.angularSensibilityX;\n    } else if (this.axisYControlRotation) {\n      this.camera.rotationOffset += offsetY / this.angularSensibilityX;\n    }\n\n    if (this.axisXControlHeight) {\n      this.camera.heightOffset += offsetX / this.angularSensibilityY;\n    } else if (this.axisYControlHeight) {\n      this.camera.heightOffset += offsetY / this.angularSensibilityY;\n    }\n\n    if (this.axisXControlRadius) {\n      this.camera.radius -= offsetX / this.angularSensibilityY;\n    } else if (this.axisYControlRadius) {\n      this.camera.radius -= offsetY / this.angularSensibilityY;\n    }\n  };\n\n  FollowCameraPointersInput.prototype.onMultiTouch = function (pointA, pointB, previousPinchSquaredDistance, pinchSquaredDistance, previousMultiTouchPanPosition, multiTouchPanPosition) {\n    if (previousPinchSquaredDistance === 0 && previousMultiTouchPanPosition === null) {\n      // First time this method is called for new pinch.\n      // Next time this is called there will be a\n      // previousPinchSquaredDistance and pinchSquaredDistance to compare.\n      return;\n    }\n\n    if (pinchSquaredDistance === 0 && multiTouchPanPosition === null) {\n      // Last time this method is called at the end of a pinch.\n      return;\n    }\n\n    var pinchDelta = (pinchSquaredDistance - previousPinchSquaredDistance) / (this.pinchPrecision * (this.angularSensibilityX + this.angularSensibilityY) / 2);\n\n    if (this.pinchDeltaPercentage) {\n      pinchDelta *= 0.01 * this.pinchDeltaPercentage;\n\n      if (this.axisPinchControlRotation) {\n        this.camera.rotationOffset += pinchDelta * this.camera.rotationOffset;\n      }\n\n      if (this.axisPinchControlHeight) {\n        this.camera.heightOffset += pinchDelta * this.camera.heightOffset;\n      }\n\n      if (this.axisPinchControlRadius) {\n        this.camera.radius -= pinchDelta * this.camera.radius;\n      }\n    } else {\n      if (this.axisPinchControlRotation) {\n        this.camera.rotationOffset += pinchDelta;\n      }\n\n      if (this.axisPinchControlHeight) {\n        this.camera.heightOffset += pinchDelta;\n      }\n\n      if (this.axisPinchControlRadius) {\n        this.camera.radius -= pinchDelta;\n      }\n    }\n  };\n\n  FollowCameraPointersInput.prototype._warning = function () {\n    if (!this.warningEnable || this._warningCounter++ % 100 !== 0) {\n      return;\n    }\n\n    var warn = \"It probably only makes sense to control ONE camera \" + \"property with each pointer axis. Set 'warningEnable = false' \" + \"if you are sure. Currently enabled: \";\n    console.assert(this.axisXControlRotation + this.axisXControlHeight + this.axisXControlRadius <= 1, warn + \"axisXControlRotation: \" + this.axisXControlRotation + \", axisXControlHeight: \" + this.axisXControlHeight + \", axisXControlRadius: \" + this.axisXControlRadius);\n    console.assert(this.axisYControlRotation + this.axisYControlHeight + this.axisYControlRadius <= 1, warn + \"axisYControlRotation: \" + this.axisYControlRotation + \", axisYControlHeight: \" + this.axisYControlHeight + \", axisYControlRadius: \" + this.axisYControlRadius);\n    console.assert(this.axisPinchControlRotation + this.axisPinchControlHeight + this.axisPinchControlRadius <= 1, warn + \"axisPinchControlRotation: \" + this.axisPinchControlRotation + \", axisPinchControlHeight: \" + this.axisPinchControlHeight + \", axisPinchControlRadius: \" + this.axisPinchControlRadius);\n  };\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"angularSensibilityX\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"angularSensibilityY\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"pinchPrecision\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"pinchDeltaPercentage\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"axisXControlRadius\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"axisXControlHeight\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"axisXControlRotation\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"axisYControlRadius\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"axisYControlHeight\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"axisYControlRotation\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"axisPinchControlRadius\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"axisPinchControlHeight\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"axisPinchControlRotation\", void 0);\n\n  return FollowCameraPointersInput;\n}(BaseCameraPointersInput);\n\nexport { FollowCameraPointersInput };\nCameraInputTypes[\"FollowCameraPointersInput\"] = FollowCameraPointersInput;","map":{"version":3,"mappings":"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","names":["serialize","CameraInputTypes","BaseCameraPointersInput","__extends","_this","FollowCameraPointersInput","pointA","offsetX","offsetY","_warning","axisXControlRotation","camera","rotationOffset","angularSensibilityX","axisYControlRotation","axisXControlHeight","heightOffset","angularSensibilityY","axisYControlHeight","axisXControlRadius","radius","axisYControlRadius","pointB","previousPinchSquaredDistance","pinchSquaredDistance","previousMultiTouchPanPosition","multiTouchPanPosition","pinchDelta","pinchPrecision","pinchDeltaPercentage","axisPinchControlRotation","axisPinchControlHeight","axisPinchControlRadius","warningEnable","_warningCounter","warn","console","assert","__decorate"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Cameras/Inputs/followCameraPointersInput.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport type { FollowCamera } from \"../../Cameras/followCamera\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport { BaseCameraPointersInput } from \"../../Cameras/Inputs/BaseCameraPointersInput\";\r\nimport type { PointerTouch } from \"../../Events/pointerEvents\";\r\n\r\n/**\r\n * Manage the pointers inputs to control an follow camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class FollowCameraPointersInput extends BaseCameraPointersInput {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: FollowCamera;\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FollowCameraPointersInput\";\r\n    }\r\n\r\n    /**\r\n     * Defines the pointer angular sensibility along the X axis or how fast is\r\n     * the camera rotating.\r\n     * A negative number will reverse the axis direction.\r\n     */\r\n    @serialize()\r\n    public angularSensibilityX = 1;\r\n\r\n    /**\r\n     * Defines the pointer angular sensibility along the Y axis or how fast is\r\n     * the camera rotating.\r\n     * A negative number will reverse the axis direction.\r\n     */\r\n    @serialize()\r\n    public angularSensibilityY = 1;\r\n\r\n    /**\r\n     * Defines the pointer pinch precision or how fast is the camera zooming.\r\n     * A negative number will reverse the axis direction.\r\n     */\r\n    @serialize()\r\n    public pinchPrecision = 10000.0;\r\n\r\n    /**\r\n     * pinchDeltaPercentage will be used instead of pinchPrecision if different\r\n     * from 0.\r\n     * It defines the percentage of current camera.radius to use as delta when\r\n     * pinch zoom is used.\r\n     */\r\n    @serialize()\r\n    public pinchDeltaPercentage = 0;\r\n\r\n    /**\r\n     * Pointer X axis controls zoom. (X axis modifies camera.radius value.)\r\n     */\r\n    @serialize()\r\n    public axisXControlRadius: boolean = false;\r\n\r\n    /**\r\n     * Pointer X axis controls height. (X axis modifies camera.heightOffset value.)\r\n     */\r\n    @serialize()\r\n    public axisXControlHeight: boolean = false;\r\n\r\n    /**\r\n     * Pointer X axis controls angle. (X axis modifies camera.rotationOffset value.)\r\n     */\r\n    @serialize()\r\n    public axisXControlRotation: boolean = true;\r\n\r\n    /**\r\n     * Pointer Y axis controls zoom. (Y axis modifies camera.radius value.)\r\n     */\r\n    @serialize()\r\n    public axisYControlRadius: boolean = false;\r\n\r\n    /**\r\n     * Pointer Y axis controls height. (Y axis modifies camera.heightOffset value.)\r\n     */\r\n    @serialize()\r\n    public axisYControlHeight: boolean = true;\r\n\r\n    /**\r\n     * Pointer Y axis controls angle. (Y axis modifies camera.rotationOffset value.)\r\n     */\r\n    @serialize()\r\n    public axisYControlRotation: boolean = false;\r\n\r\n    /**\r\n     * Pinch controls zoom. (Pinch modifies camera.radius value.)\r\n     */\r\n    @serialize()\r\n    public axisPinchControlRadius: boolean = true;\r\n\r\n    /**\r\n     * Pinch controls height. (Pinch modifies camera.heightOffset value.)\r\n     */\r\n    @serialize()\r\n    public axisPinchControlHeight: boolean = false;\r\n\r\n    /**\r\n     * Pinch controls angle. (Pinch modifies camera.rotationOffset value.)\r\n     */\r\n    @serialize()\r\n    public axisPinchControlRotation: boolean = false;\r\n\r\n    /**\r\n     * Log error messages if basic misconfiguration has occurred.\r\n     */\r\n    public warningEnable: boolean = true;\r\n\r\n    public onTouch(pointA: Nullable<PointerTouch>, offsetX: number, offsetY: number): void {\r\n        this._warning();\r\n\r\n        if (this.axisXControlRotation) {\r\n            this.camera.rotationOffset += offsetX / this.angularSensibilityX;\r\n        } else if (this.axisYControlRotation) {\r\n            this.camera.rotationOffset += offsetY / this.angularSensibilityX;\r\n        }\r\n\r\n        if (this.axisXControlHeight) {\r\n            this.camera.heightOffset += offsetX / this.angularSensibilityY;\r\n        } else if (this.axisYControlHeight) {\r\n            this.camera.heightOffset += offsetY / this.angularSensibilityY;\r\n        }\r\n\r\n        if (this.axisXControlRadius) {\r\n            this.camera.radius -= offsetX / this.angularSensibilityY;\r\n        } else if (this.axisYControlRadius) {\r\n            this.camera.radius -= offsetY / this.angularSensibilityY;\r\n        }\r\n    }\r\n\r\n    public onMultiTouch(\r\n        pointA: Nullable<PointerTouch>,\r\n        pointB: Nullable<PointerTouch>,\r\n        previousPinchSquaredDistance: number,\r\n        pinchSquaredDistance: number,\r\n        previousMultiTouchPanPosition: Nullable<PointerTouch>,\r\n        multiTouchPanPosition: Nullable<PointerTouch>\r\n    ): void {\r\n        if (previousPinchSquaredDistance === 0 && previousMultiTouchPanPosition === null) {\r\n            // First time this method is called for new pinch.\r\n            // Next time this is called there will be a\r\n            // previousPinchSquaredDistance and pinchSquaredDistance to compare.\r\n            return;\r\n        }\r\n        if (pinchSquaredDistance === 0 && multiTouchPanPosition === null) {\r\n            // Last time this method is called at the end of a pinch.\r\n            return;\r\n        }\r\n        let pinchDelta = (pinchSquaredDistance - previousPinchSquaredDistance) / ((this.pinchPrecision * (this.angularSensibilityX + this.angularSensibilityY)) / 2);\r\n\r\n        if (this.pinchDeltaPercentage) {\r\n            pinchDelta *= 0.01 * this.pinchDeltaPercentage;\r\n            if (this.axisPinchControlRotation) {\r\n                this.camera.rotationOffset += pinchDelta * this.camera.rotationOffset;\r\n            }\r\n            if (this.axisPinchControlHeight) {\r\n                this.camera.heightOffset += pinchDelta * this.camera.heightOffset;\r\n            }\r\n            if (this.axisPinchControlRadius) {\r\n                this.camera.radius -= pinchDelta * this.camera.radius;\r\n            }\r\n        } else {\r\n            if (this.axisPinchControlRotation) {\r\n                this.camera.rotationOffset += pinchDelta;\r\n            }\r\n\r\n            if (this.axisPinchControlHeight) {\r\n                this.camera.heightOffset += pinchDelta;\r\n            }\r\n\r\n            if (this.axisPinchControlRadius) {\r\n                this.camera.radius -= pinchDelta;\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Check for obvious misconfiguration. */\r\n    private _warningCounter: number = 0;\r\n    private _warning(): void {\r\n        if (!this.warningEnable || this._warningCounter++ % 100 !== 0) {\r\n            return;\r\n        }\r\n        const warn =\r\n            \"It probably only makes sense to control ONE camera \" + \"property with each pointer axis. Set 'warningEnable = false' \" + \"if you are sure. Currently enabled: \";\r\n\r\n        console.assert(\r\n            <number>(<unknown>this.axisXControlRotation) + <number>(<unknown>this.axisXControlHeight) + <number>(<unknown>this.axisXControlRadius) <= 1,\r\n            warn + \"axisXControlRotation: \" + this.axisXControlRotation + \", axisXControlHeight: \" + this.axisXControlHeight + \", axisXControlRadius: \" + this.axisXControlRadius\r\n        );\r\n        console.assert(\r\n            <number>(<unknown>this.axisYControlRotation) + <number>(<unknown>this.axisYControlHeight) + <number>(<unknown>this.axisYControlRadius) <= 1,\r\n            warn + \"axisYControlRotation: \" + this.axisYControlRotation + \", axisYControlHeight: \" + this.axisYControlHeight + \", axisYControlRadius: \" + this.axisYControlRadius\r\n        );\r\n        console.assert(\r\n            <number>(<unknown>this.axisPinchControlRotation) + <number>(<unknown>this.axisPinchControlHeight) + <number>(<unknown>this.axisPinchControlRadius) <= 1,\r\n            warn +\r\n                \"axisPinchControlRotation: \" +\r\n                this.axisPinchControlRotation +\r\n                \", axisPinchControlHeight: \" +\r\n                this.axisPinchControlHeight +\r\n                \", axisPinchControlRadius: \" +\r\n                this.axisPinchControlRadius\r\n        );\r\n    }\r\n}\r\n(<any>CameraInputTypes)[\"FollowCameraPointersInput\"] = FollowCameraPointersInput;\r\n"]},"metadata":{},"sourceType":"module"}