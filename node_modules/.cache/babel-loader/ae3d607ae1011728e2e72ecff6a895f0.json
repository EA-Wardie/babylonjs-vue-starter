{"ast":null,"code":"import \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { KeyboardEventTypes } from \"../../Events/keyboardEvents.js\";\nimport { Tools } from \"../../Misc/tools.js\";\n/**\n * Manage the keyboard inputs to control the movement of an arc rotate camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\n\nvar ArcRotateCameraKeyboardMoveInput =\n/** @class */\nfunction () {\n  function ArcRotateCameraKeyboardMoveInput() {\n    /**\n     * Defines the list of key codes associated with the up action (increase alpha)\n     */\n    this.keysUp = [38];\n    /**\n     * Defines the list of key codes associated with the down action (decrease alpha)\n     */\n\n    this.keysDown = [40];\n    /**\n     * Defines the list of key codes associated with the left action (increase beta)\n     */\n\n    this.keysLeft = [37];\n    /**\n     * Defines the list of key codes associated with the right action (decrease beta)\n     */\n\n    this.keysRight = [39];\n    /**\n     * Defines the list of key codes associated with the reset action.\n     * Those keys reset the camera to its last stored state (with the method camera.storeState())\n     */\n\n    this.keysReset = [220];\n    /**\n     * Defines the panning sensibility of the inputs.\n     * (How fast is the camera panning)\n     */\n\n    this.panningSensibility = 50.0;\n    /**\n     * Defines the zooming sensibility of the inputs.\n     * (How fast is the camera zooming)\n     */\n\n    this.zoomingSensibility = 25.0;\n    /**\n     * Defines whether maintaining the alt key down switch the movement mode from\n     * orientation to zoom.\n     */\n\n    this.useAltToZoom = true;\n    /**\n     * Rotation speed of the camera\n     */\n\n    this.angularSpeed = 0.01;\n    this._keys = new Array();\n  }\n  /**\n   * Attach the input controls to a specific dom element to get the input from.\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n   */\n\n\n  ArcRotateCameraKeyboardMoveInput.prototype.attachControl = function (noPreventDefault) {\n    var _this = this; // was there a second variable defined?\n    // eslint-disable-next-line prefer-rest-params\n\n\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n\n    if (this._onCanvasBlurObserver) {\n      return;\n    }\n\n    this._scene = this.camera.getScene();\n    this._engine = this._scene.getEngine();\n    this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(function () {\n      _this._keys = [];\n    });\n    this._onKeyboardObserver = this._scene.onKeyboardObservable.add(function (info) {\n      var evt = info.event;\n\n      if (!evt.metaKey) {\n        if (info.type === KeyboardEventTypes.KEYDOWN) {\n          _this._ctrlPressed = evt.ctrlKey;\n          _this._altPressed = evt.altKey;\n\n          if (_this.keysUp.indexOf(evt.keyCode) !== -1 || _this.keysDown.indexOf(evt.keyCode) !== -1 || _this.keysLeft.indexOf(evt.keyCode) !== -1 || _this.keysRight.indexOf(evt.keyCode) !== -1 || _this.keysReset.indexOf(evt.keyCode) !== -1) {\n            var index = _this._keys.indexOf(evt.keyCode);\n\n            if (index === -1) {\n              _this._keys.push(evt.keyCode);\n            }\n\n            if (evt.preventDefault) {\n              if (!noPreventDefault) {\n                evt.preventDefault();\n              }\n            }\n          }\n        } else {\n          if (_this.keysUp.indexOf(evt.keyCode) !== -1 || _this.keysDown.indexOf(evt.keyCode) !== -1 || _this.keysLeft.indexOf(evt.keyCode) !== -1 || _this.keysRight.indexOf(evt.keyCode) !== -1 || _this.keysReset.indexOf(evt.keyCode) !== -1) {\n            var index = _this._keys.indexOf(evt.keyCode);\n\n            if (index >= 0) {\n              _this._keys.splice(index, 1);\n            }\n\n            if (evt.preventDefault) {\n              if (!noPreventDefault) {\n                evt.preventDefault();\n              }\n            }\n          }\n        }\n      }\n    });\n  };\n  /**\n   * Detach the current controls from the specified dom element.\n   */\n\n\n  ArcRotateCameraKeyboardMoveInput.prototype.detachControl = function () {\n    if (this._scene) {\n      if (this._onKeyboardObserver) {\n        this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\n      }\n\n      if (this._onCanvasBlurObserver) {\n        this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\n      }\n\n      this._onKeyboardObserver = null;\n      this._onCanvasBlurObserver = null;\n    }\n\n    this._keys = [];\n  };\n  /**\n   * Update the current camera state depending on the inputs that have been used this frame.\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n   */\n\n\n  ArcRotateCameraKeyboardMoveInput.prototype.checkInputs = function () {\n    if (this._onKeyboardObserver) {\n      var camera = this.camera;\n\n      for (var index = 0; index < this._keys.length; index++) {\n        var keyCode = this._keys[index];\n\n        if (this.keysLeft.indexOf(keyCode) !== -1) {\n          if (this._ctrlPressed && this.camera._useCtrlForPanning) {\n            camera.inertialPanningX -= 1 / this.panningSensibility;\n          } else {\n            camera.inertialAlphaOffset -= this.angularSpeed;\n          }\n        } else if (this.keysUp.indexOf(keyCode) !== -1) {\n          if (this._ctrlPressed && this.camera._useCtrlForPanning) {\n            camera.inertialPanningY += 1 / this.panningSensibility;\n          } else if (this._altPressed && this.useAltToZoom) {\n            camera.inertialRadiusOffset += 1 / this.zoomingSensibility;\n          } else {\n            camera.inertialBetaOffset -= this.angularSpeed;\n          }\n        } else if (this.keysRight.indexOf(keyCode) !== -1) {\n          if (this._ctrlPressed && this.camera._useCtrlForPanning) {\n            camera.inertialPanningX += 1 / this.panningSensibility;\n          } else {\n            camera.inertialAlphaOffset += this.angularSpeed;\n          }\n        } else if (this.keysDown.indexOf(keyCode) !== -1) {\n          if (this._ctrlPressed && this.camera._useCtrlForPanning) {\n            camera.inertialPanningY -= 1 / this.panningSensibility;\n          } else if (this._altPressed && this.useAltToZoom) {\n            camera.inertialRadiusOffset -= 1 / this.zoomingSensibility;\n          } else {\n            camera.inertialBetaOffset += this.angularSpeed;\n          }\n        } else if (this.keysReset.indexOf(keyCode) !== -1) {\n          if (camera.useInputToRestoreState) {\n            camera.restoreState();\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Gets the class name of the current input.\n   * @returns the class name\n   */\n\n\n  ArcRotateCameraKeyboardMoveInput.prototype.getClassName = function () {\n    return \"ArcRotateCameraKeyboardMoveInput\";\n  };\n  /**\n   * Get the friendly name associated with the input class.\n   * @returns the input friendly name\n   */\n\n\n  ArcRotateCameraKeyboardMoveInput.prototype.getSimpleName = function () {\n    return \"keyboard\";\n  };\n\n  __decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"keysUp\", void 0);\n\n  __decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"keysDown\", void 0);\n\n  __decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"keysLeft\", void 0);\n\n  __decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"keysRight\", void 0);\n\n  __decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"keysReset\", void 0);\n\n  __decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"panningSensibility\", void 0);\n\n  __decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"zoomingSensibility\", void 0);\n\n  __decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"useAltToZoom\", void 0);\n\n  __decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"angularSpeed\", void 0);\n\n  return ArcRotateCameraKeyboardMoveInput;\n}();\n\nexport { ArcRotateCameraKeyboardMoveInput };\nCameraInputTypes[\"ArcRotateCameraKeyboardMoveInput\"] = ArcRotateCameraKeyboardMoveInput;","map":{"version":3,"mappings":"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","names":["serialize","CameraInputTypes","KeyboardEventTypes","Tools","Array","ArcRotateCameraKeyboardMoveInput","noPreventDefault","BackCompatCameraNoPreventDefault","arguments","_onCanvasBlurObserver","_scene","camera","getScene","_engine","getEngine","onCanvasBlurObservable","add","_this","_keys","_onKeyboardObserver","onKeyboardObservable","info","evt","event","metaKey","type","KEYDOWN","_ctrlPressed","ctrlKey","_altPressed","altKey","keysUp","indexOf","keyCode","keysDown","keysLeft","keysRight","keysReset","index","push","preventDefault","splice","remove","length","_useCtrlForPanning","inertialPanningX","panningSensibility","inertialAlphaOffset","angularSpeed","inertialPanningY","useAltToZoom","inertialRadiusOffset","zoomingSensibility","inertialBetaOffset","useInputToRestoreState","restoreState","__decorate"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Cameras/Inputs/arcRotateCameraKeyboardMoveInput.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { ArcRotateCamera } from \"../../Cameras/arcRotateCamera\";\r\nimport type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport type { Engine } from \"../../Engines/engine\";\r\nimport type { KeyboardInfo } from \"../../Events/keyboardEvents\";\r\nimport { KeyboardEventTypes } from \"../../Events/keyboardEvents\";\r\nimport { Tools } from \"../../Misc/tools\";\r\n\r\n/**\r\n * Manage the keyboard inputs to control the movement of an arc rotate camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class ArcRotateCameraKeyboardMoveInput implements ICameraInput<ArcRotateCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: ArcRotateCamera;\r\n\r\n    /**\r\n     * Defines the list of key codes associated with the up action (increase alpha)\r\n     */\r\n    @serialize()\r\n    public keysUp = [38];\r\n\r\n    /**\r\n     * Defines the list of key codes associated with the down action (decrease alpha)\r\n     */\r\n    @serialize()\r\n    public keysDown = [40];\r\n\r\n    /**\r\n     * Defines the list of key codes associated with the left action (increase beta)\r\n     */\r\n    @serialize()\r\n    public keysLeft = [37];\r\n\r\n    /**\r\n     * Defines the list of key codes associated with the right action (decrease beta)\r\n     */\r\n    @serialize()\r\n    public keysRight = [39];\r\n\r\n    /**\r\n     * Defines the list of key codes associated with the reset action.\r\n     * Those keys reset the camera to its last stored state (with the method camera.storeState())\r\n     */\r\n    @serialize()\r\n    public keysReset = [220];\r\n\r\n    /**\r\n     * Defines the panning sensibility of the inputs.\r\n     * (How fast is the camera panning)\r\n     */\r\n    @serialize()\r\n    public panningSensibility: number = 50.0;\r\n\r\n    /**\r\n     * Defines the zooming sensibility of the inputs.\r\n     * (How fast is the camera zooming)\r\n     */\r\n    @serialize()\r\n    public zoomingSensibility: number = 25.0;\r\n\r\n    /**\r\n     * Defines whether maintaining the alt key down switch the movement mode from\r\n     * orientation to zoom.\r\n     */\r\n    @serialize()\r\n    public useAltToZoom: boolean = true;\r\n\r\n    /**\r\n     * Rotation speed of the camera\r\n     */\r\n    @serialize()\r\n    public angularSpeed = 0.01;\r\n\r\n    private _keys = new Array<number>();\r\n    private _ctrlPressed: boolean;\r\n    private _altPressed: boolean;\r\n    private _onCanvasBlurObserver: Nullable<Observer<Engine>>;\r\n    private _onKeyboardObserver: Nullable<Observer<KeyboardInfo>>;\r\n    private _engine: Engine;\r\n    private _scene: Scene;\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        // was there a second variable defined?\r\n        // eslint-disable-next-line prefer-rest-params\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n\r\n        if (this._onCanvasBlurObserver) {\r\n            return;\r\n        }\r\n\r\n        this._scene = this.camera.getScene();\r\n        this._engine = this._scene.getEngine();\r\n\r\n        this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(() => {\r\n            this._keys = [];\r\n        });\r\n\r\n        this._onKeyboardObserver = this._scene.onKeyboardObservable.add((info) => {\r\n            const evt = info.event;\r\n            if (!evt.metaKey) {\r\n                if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                    this._ctrlPressed = evt.ctrlKey;\r\n                    this._altPressed = evt.altKey;\r\n\r\n                    if (\r\n                        this.keysUp.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysDown.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysLeft.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRight.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysReset.indexOf(evt.keyCode) !== -1\r\n                    ) {\r\n                        const index = this._keys.indexOf(evt.keyCode);\r\n\r\n                        if (index === -1) {\r\n                            this._keys.push(evt.keyCode);\r\n                        }\r\n\r\n                        if (evt.preventDefault) {\r\n                            if (!noPreventDefault) {\r\n                                evt.preventDefault();\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (\r\n                        this.keysUp.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysDown.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysLeft.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRight.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysReset.indexOf(evt.keyCode) !== -1\r\n                    ) {\r\n                        const index = this._keys.indexOf(evt.keyCode);\r\n\r\n                        if (index >= 0) {\r\n                            this._keys.splice(index, 1);\r\n                        }\r\n\r\n                        if (evt.preventDefault) {\r\n                            if (!noPreventDefault) {\r\n                                evt.preventDefault();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        if (this._scene) {\r\n            if (this._onKeyboardObserver) {\r\n                this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\r\n            }\r\n            if (this._onCanvasBlurObserver) {\r\n                this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\r\n            }\r\n            this._onKeyboardObserver = null;\r\n            this._onCanvasBlurObserver = null;\r\n        }\r\n\r\n        this._keys = [];\r\n    }\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs(): void {\r\n        if (this._onKeyboardObserver) {\r\n            const camera = this.camera;\r\n\r\n            for (let index = 0; index < this._keys.length; index++) {\r\n                const keyCode = this._keys[index];\r\n                if (this.keysLeft.indexOf(keyCode) !== -1) {\r\n                    if (this._ctrlPressed && this.camera._useCtrlForPanning) {\r\n                        camera.inertialPanningX -= 1 / this.panningSensibility;\r\n                    } else {\r\n                        camera.inertialAlphaOffset -= this.angularSpeed;\r\n                    }\r\n                } else if (this.keysUp.indexOf(keyCode) !== -1) {\r\n                    if (this._ctrlPressed && this.camera._useCtrlForPanning) {\r\n                        camera.inertialPanningY += 1 / this.panningSensibility;\r\n                    } else if (this._altPressed && this.useAltToZoom) {\r\n                        camera.inertialRadiusOffset += 1 / this.zoomingSensibility;\r\n                    } else {\r\n                        camera.inertialBetaOffset -= this.angularSpeed;\r\n                    }\r\n                } else if (this.keysRight.indexOf(keyCode) !== -1) {\r\n                    if (this._ctrlPressed && this.camera._useCtrlForPanning) {\r\n                        camera.inertialPanningX += 1 / this.panningSensibility;\r\n                    } else {\r\n                        camera.inertialAlphaOffset += this.angularSpeed;\r\n                    }\r\n                } else if (this.keysDown.indexOf(keyCode) !== -1) {\r\n                    if (this._ctrlPressed && this.camera._useCtrlForPanning) {\r\n                        camera.inertialPanningY -= 1 / this.panningSensibility;\r\n                    } else if (this._altPressed && this.useAltToZoom) {\r\n                        camera.inertialRadiusOffset -= 1 / this.zoomingSensibility;\r\n                    } else {\r\n                        camera.inertialBetaOffset += this.angularSpeed;\r\n                    }\r\n                } else if (this.keysReset.indexOf(keyCode) !== -1) {\r\n                    if (camera.useInputToRestoreState) {\r\n                        camera.restoreState();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"ArcRotateCameraKeyboardMoveInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"keyboard\";\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"ArcRotateCameraKeyboardMoveInput\"] = ArcRotateCameraKeyboardMoveInput;\r\n"]},"metadata":{},"sourceType":"module"}