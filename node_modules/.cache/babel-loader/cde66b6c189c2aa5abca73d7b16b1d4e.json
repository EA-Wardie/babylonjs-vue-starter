{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/grain.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * The GrainPostProcess adds noise to the image at mid luminance levels\n */\n\nvar GrainPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(GrainPostProcess, _super);\n  /**\n   * Creates a new instance of @see GrainPostProcess\n   * @param name The name of the effect.\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   * @param textureType Type of textures used when performing the post process. (default: 0)\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n   */\n\n\n  function GrainPostProcess(name, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    var _this = _super.call(this, name, \"grain\", [\"intensity\", \"animatedSeed\"], [], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation) || this;\n    /**\n     * The intensity of the grain added (default: 30)\n     */\n\n\n    _this.intensity = 30;\n    /**\n     * If the grain should be randomized on every frame\n     */\n\n    _this.animated = false;\n\n    _this.onApplyObservable.add(function (effect) {\n      effect.setFloat(\"intensity\", _this.intensity);\n      effect.setFloat(\"animatedSeed\", _this.animated ? Math.random() + 1 : 1);\n    });\n\n    return _this;\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"GrainPostProcess\" string\n   */\n\n\n  GrainPostProcess.prototype.getClassName = function () {\n    return \"GrainPostProcess\";\n  };\n  /**\n   * @param parsedPostProcess\n   * @param targetCamera\n   * @param scene\n   * @param rootUrl\n   * @hidden\n   */\n\n\n  GrainPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new GrainPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  __decorate([serialize()], GrainPostProcess.prototype, \"intensity\", void 0);\n\n  __decorate([serialize()], GrainPostProcess.prototype, \"animated\", void 0);\n\n  return GrainPostProcess;\n}(PostProcess);\n\nexport { GrainPostProcess };\nRegisterClass(\"BABYLON.GrainPostProcess\", GrainPostProcess);","map":{"version":3,"mappings":";;AAIA,SAASA,WAAT,QAA4B,kBAA5B;AAIA,OAAO,8BAAP;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,SAAT,EAAoBC,mBAApB,QAA+C,uBAA/C;AAIA;;;;AAGA;AAAA;AAAA;AAAsCC;AAoBlC;;;;;;;;;;;;;AAWA,4BACIC,IADJ,EAEIC,OAFJ,EAGIC,MAHJ,EAIIC,YAJJ,EAKIC,MALJ,EAMIC,QANJ,EAOIC,WAPJ,EAQIC,gBARJ,EAQ4B;AADxB;AAAAD,oBAAsB,CAAtB;AAAsB;;AACtB;AAAAC;AAAwB;;AAR5B,gBAUIC,kBAAMR,IAAN,EAAY,OAAZ,EAAqB,CAAC,WAAD,EAAc,cAAd,CAArB,EAAoD,EAApD,EAAwDC,OAAxD,EAAiEC,MAAjE,EAAyEC,YAAzE,EAAuFC,MAAvF,EAA+FC,QAA/F,EAAyG,IAAzG,EAA+GC,WAA/G,EAA4HG,SAA5H,EAAuI,IAAvI,EAA6IF,gBAA7I,KAA8J,IAVlK;AA9BA;;;;;AAIOG,sBAAoB,EAApB;AACP;;;;AAIOA,qBAAoB,KAApB;;AAgCHA,SAAI,CAACC,iBAAL,CAAuBC,GAAvB,CAA2B,UAACC,MAAD,EAAe;AACtCA,YAAM,CAACC,QAAP,CAAgB,WAAhB,EAA6BJ,KAAI,CAACK,SAAlC;AACAF,YAAM,CAACC,QAAP,CAAgB,cAAhB,EAAgCJ,KAAI,CAACM,QAAL,GAAgBC,IAAI,CAACC,MAAL,KAAgB,CAAhC,GAAoC,CAApE;AACH,KAHD;;;AAIH;AAlCD;;;;;;AAIOC,4CAAP;AACI,WAAO,kBAAP;AACH,GAFM;AAgCP;;;;;;;;;AAOcA,4BAAd,UAAqBC,iBAArB,EAA6CC,YAA7C,EAAmEC,KAAnE,EAAiFC,OAAjF,EAAgG;AAC5F,WAAOzB,mBAAmB,CAAC0B,KAApB,CACH;AACI,aAAO,IAAIL,gBAAJ,CACHC,iBAAiB,CAACpB,IADf,EAEHoB,iBAAiB,CAACnB,OAFf,EAGHoB,YAHG,EAIHD,iBAAiB,CAACK,wBAJf,EAKHH,KAAK,CAACI,SAAN,EALG,EAMHN,iBAAiB,CAACf,QANf,CAAP;AAQH,KAVE,EAWHe,iBAXG,EAYHE,KAZG,EAaHC,OAbG,CAAP;AAeH,GAhBa;;AAlDdI,cADC9B,SAAS,EACV;;AAKA8B,cADC9B,SAAS,EACV;;AA8DJ;AAAC,CAxED,CAAsCF,WAAtC;;SAAawB;AA0EbvB,aAAa,CAAC,0BAAD,EAA6BuB,gBAA7B,CAAb","names":["PostProcess","RegisterClass","serialize","SerializationHelper","__extends","name","options","camera","samplingMode","engine","reusable","textureType","blockCompilation","_super","undefined","_this","onApplyObservable","add","effect","setFloat","intensity","animated","Math","random","GrainPostProcess","parsedPostProcess","targetCamera","scene","rootUrl","Parse","renderTargetSamplingMode","getEngine","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/PostProcesses/grainPostProcess.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/grain.fragment\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { serialize, SerializationHelper } from \"../Misc/decorators\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * The GrainPostProcess adds noise to the image at mid luminance levels\r\n */\r\nexport class GrainPostProcess extends PostProcess {\r\n    /**\r\n     * The intensity of the grain added (default: 30)\r\n     */\r\n    @serialize()\r\n    public intensity: number = 30;\r\n    /**\r\n     * If the grain should be randomized on every frame\r\n     */\r\n    @serialize()\r\n    public animated: boolean = false;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"GrainPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"GrainPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of @see GrainPostProcess\r\n     * @param name The name of the effect.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        blockCompilation = false\r\n    ) {\r\n        super(name, \"grain\", [\"intensity\", \"animatedSeed\"], [], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation);\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setFloat(\"intensity\", this.intensity);\r\n            effect.setFloat(\"animatedSeed\", this.animated ? Math.random() + 1 : 1);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param parsedPostProcess\r\n     * @param targetCamera\r\n     * @param scene\r\n     * @param rootUrl\r\n     * @hidden\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string) {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new GrainPostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    scene.getEngine(),\r\n                    parsedPostProcess.reusable\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.GrainPostProcess\", GrainPostProcess);\r\n"]},"metadata":{},"sourceType":"module"}