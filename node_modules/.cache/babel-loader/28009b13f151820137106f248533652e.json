{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * block used to Generate a Voronoi Noise Pattern\n */\n\nvar VoronoiNoiseBlock =\n/** @class */\nfunction (_super) {\n  __extends(VoronoiNoiseBlock, _super);\n  /**\n   * Creates a new VoronoiNoiseBlock\n   * @param name defines the block name\n   */\n\n\n  function VoronoiNoiseBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Neutral) || this;\n\n    _this.registerInput(\"seed\", NodeMaterialBlockConnectionPointTypes.Vector2);\n\n    _this.registerInput(\"offset\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    _this.registerInput(\"density\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    _this.registerOutput(\"cells\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    return _this;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  VoronoiNoiseBlock.prototype.getClassName = function () {\n    return \"VoronoiNoiseBlock\";\n  };\n\n  Object.defineProperty(VoronoiNoiseBlock.prototype, \"seed\", {\n    /**\n     * Gets the seed input component\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VoronoiNoiseBlock.prototype, \"offset\", {\n    /**\n     * Gets the offset input component\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VoronoiNoiseBlock.prototype, \"density\", {\n    /**\n     * Gets the density input component\n     */\n    get: function get() {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VoronoiNoiseBlock.prototype, \"output\", {\n    /**\n     * Gets the output component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VoronoiNoiseBlock.prototype, \"cells\", {\n    /**\n     * Gets the output component\n     */\n    get: function get() {\n      return this._outputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  VoronoiNoiseBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    if (!this.seed.isConnected) {\n      return;\n    }\n\n    var functionString = \"vec2 voronoiRandom(vec2 seed, float offset){\\n            mat2 m = mat2(15.27, 47.63, 99.41, 89.98);\\n            vec2 uv = fract(sin(m * seed) * 46839.32);\\n            return vec2(sin(uv.y * offset) * 0.5 + 0.5, cos(uv.x * offset) * 0.5 + 0.5);\\n        }\\n        \";\n\n    state._emitFunction(\"voronoiRandom\", functionString, \"// Voronoi random generator\");\n\n    functionString = \"void voronoi(vec2 seed, float offset, float density, out float outValue, out float cells){\\n            vec2 g = floor(seed * density);\\n            vec2 f = fract(seed * density);\\n            float t = 8.0;\\n            vec3 res = vec3(8.0, 0.0, 0.0);\\n\\n            for(int y=-1; y<=1; y++)\\n            {\\n                for(int x=-1; x<=1; x++)\\n                {\\n                    vec2 lattice = vec2(x,y);\\n                    vec2 randomOffset = voronoiRandom(lattice + g, offset);\\n                    float d = distance(lattice + randomOffset, f);\\n                    if(d < res.x)\\n                    {\\n                        res = vec3(d, randomOffset.x, randomOffset.y);\\n                        outValue = res.x;\\n                        cells = res.y;\\n                    }\\n                }\\n            }\\n        }\\n        \";\n\n    state._emitFunction(\"voronoi\", functionString, \"// Voronoi\");\n\n    var tempOutput = state._getFreeVariableName(\"tempOutput\");\n\n    var tempCells = state._getFreeVariableName(\"tempCells\");\n\n    state.compilationString += \"float \".concat(tempOutput, \" = 0.0;\\r\\n\");\n    state.compilationString += \"float \".concat(tempCells, \" = 0.0;\\r\\n\");\n    state.compilationString += \"voronoi(\".concat(this.seed.associatedVariableName, \", \").concat(this.offset.associatedVariableName, \", \").concat(this.density.associatedVariableName, \", \").concat(tempOutput, \", \").concat(tempCells, \");\\r\\n\");\n\n    if (this.output.hasEndpoints) {\n      state.compilationString += this._declareOutput(this.output, state) + \" = \".concat(tempOutput, \";\\r\\n\");\n    }\n\n    if (this.cells.hasEndpoints) {\n      state.compilationString += this._declareOutput(this.cells, state) + \" = \".concat(tempCells, \";\\r\\n\");\n    }\n\n    return this;\n  };\n\n  return VoronoiNoiseBlock;\n}(NodeMaterialBlock);\n\nexport { VoronoiNoiseBlock };\nRegisterClass(\"BABYLON.VoronoiNoiseBlock\", VoronoiNoiseBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","__extends","name","_super","Neutral","_this","registerInput","Vector2","Float","registerOutput","VoronoiNoiseBlock","Object","_inputs","_outputs","state","_buildBlock","call","seed","isConnected","functionString","_emitFunction","tempOutput","_getFreeVariableName","tempCells","compilationString","associatedVariableName","concat","offset","density","output","hasEndpoints","_declareOutput","cells"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Node/Blocks/voronoiNoiseBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\n\r\n/**\r\n * block used to Generate a Voronoi Noise Pattern\r\n */\r\nexport class VoronoiNoiseBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Creates a new VoronoiNoiseBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n        this.registerInput(\"seed\", NodeMaterialBlockConnectionPointTypes.Vector2);\r\n        this.registerInput(\"offset\", NodeMaterialBlockConnectionPointTypes.Float);\r\n        this.registerInput(\"density\", NodeMaterialBlockConnectionPointTypes.Float);\r\n\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Float);\r\n        this.registerOutput(\"cells\", NodeMaterialBlockConnectionPointTypes.Float);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"VoronoiNoiseBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the seed input component\r\n     */\r\n    public get seed(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the offset input component\r\n     */\r\n    public get offset(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the density input component\r\n     */\r\n    public get density(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get cells(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (!this.seed.isConnected) {\r\n            return;\r\n        }\r\n\r\n        let functionString = `vec2 voronoiRandom(vec2 seed, float offset){\r\n            mat2 m = mat2(15.27, 47.63, 99.41, 89.98);\r\n            vec2 uv = fract(sin(m * seed) * 46839.32);\r\n            return vec2(sin(uv.y * offset) * 0.5 + 0.5, cos(uv.x * offset) * 0.5 + 0.5);\r\n        }\r\n        `;\r\n\r\n        state._emitFunction(\"voronoiRandom\", functionString, \"// Voronoi random generator\");\r\n\r\n        functionString = `void voronoi(vec2 seed, float offset, float density, out float outValue, out float cells){\r\n            vec2 g = floor(seed * density);\r\n            vec2 f = fract(seed * density);\r\n            float t = 8.0;\r\n            vec3 res = vec3(8.0, 0.0, 0.0);\r\n\r\n            for(int y=-1; y<=1; y++)\r\n            {\r\n                for(int x=-1; x<=1; x++)\r\n                {\r\n                    vec2 lattice = vec2(x,y);\r\n                    vec2 randomOffset = voronoiRandom(lattice + g, offset);\r\n                    float d = distance(lattice + randomOffset, f);\r\n                    if(d < res.x)\r\n                    {\r\n                        res = vec3(d, randomOffset.x, randomOffset.y);\r\n                        outValue = res.x;\r\n                        cells = res.y;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        `;\r\n\r\n        state._emitFunction(\"voronoi\", functionString, \"// Voronoi\");\r\n\r\n        const tempOutput = state._getFreeVariableName(\"tempOutput\");\r\n        const tempCells = state._getFreeVariableName(\"tempCells\");\r\n\r\n        state.compilationString += `float ${tempOutput} = 0.0;\\r\\n`;\r\n        state.compilationString += `float ${tempCells} = 0.0;\\r\\n`;\r\n        state.compilationString += `voronoi(${this.seed.associatedVariableName}, ${this.offset.associatedVariableName}, ${this.density.associatedVariableName}, ${tempOutput}, ${tempCells});\\r\\n`;\r\n\r\n        if (this.output.hasEndpoints) {\r\n            state.compilationString += this._declareOutput(this.output, state) + ` = ${tempOutput};\\r\\n`;\r\n        }\r\n\r\n        if (this.cells.hasEndpoints) {\r\n            state.compilationString += this._declareOutput(this.cells, state) + ` = ${tempCells};\\r\\n`;\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.VoronoiNoiseBlock\", VoronoiNoiseBlock);\r\n"]},"metadata":{},"sourceType":"module"}