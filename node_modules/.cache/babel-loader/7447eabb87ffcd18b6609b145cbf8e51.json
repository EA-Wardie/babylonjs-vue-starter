{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { IsWindowObjectExist } from \"../../Misc/domManagement.js\";\nimport { Tools } from \"../../Misc/tools.js\";\n/** @hidden */\n\nvar WebGPUTintWASM =\n/** @class */\nfunction () {\n  function WebGPUTintWASM() {\n    this._twgsl = null;\n  }\n\n  WebGPUTintWASM.prototype.initTwgsl = function (twgslOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            twgslOptions = twgslOptions || {};\n            twgslOptions = __assign(__assign({}, WebGPUTintWASM._TWgslDefaultOptions), twgslOptions);\n\n            if (twgslOptions.twgsl) {\n              this._twgsl = twgslOptions.twgsl;\n              return [2\n              /*return*/\n              , Promise.resolve()];\n            }\n\n            if (!(twgslOptions.jsPath && twgslOptions.wasmPath)) return [3\n            /*break*/\n            , 3];\n            if (!IsWindowObjectExist()) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , Tools.LoadScriptAsync(twgslOptions.jsPath)];\n\n          case 1:\n            _b.sent();\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            importScripts(twgslOptions.jsPath);\n            _b.label = 3;\n\n          case 3:\n            if (!self.twgsl) return [3\n            /*break*/\n            , 5];\n            _a = this;\n            return [4\n            /*yield*/\n            , self.twgsl(twgslOptions.wasmPath)];\n\n          case 4:\n            _a._twgsl = _b.sent();\n            return [2\n            /*return*/\n            , Promise.resolve()];\n\n          case 5:\n            return [2\n            /*return*/\n            , Promise.reject(\"twgsl is not available.\")];\n        }\n      });\n    });\n  };\n\n  WebGPUTintWASM.prototype.convertSpirV2WGSL = function (code) {\n    return this._twgsl.convertSpirV2WGSL(code);\n  }; // Default twgsl options.\n\n\n  WebGPUTintWASM._TWgslDefaultOptions = {\n    jsPath: \"https://preview.babylonjs.com/twgsl/twgsl.js\",\n    wasmPath: \"https://preview.babylonjs.com/twgsl/twgsl.wasm\"\n  };\n  return WebGPUTintWASM;\n}();\n\nexport { WebGPUTintWASM };","map":{"version":3,"mappings":";;AAAA,SAASA,mBAAT,QAAoC,6BAApC;AACA,SAASC,KAAT,QAAsB,qBAAtB;AAsBA;;AACA;AAAA;AAAA;AAAA;AAOY,kBAAc,IAAd;AAiCX;;AA/BgBC,uCAAb,UAAuBC,YAAvB,EAAkD;;;;;;;AAC9CA,wBAAY,GAAGA,YAAY,IAAI,EAA/B;AACAA,wBAAY,yBACLD,cAAc,CAACE,oBADV,GAELD,YAFK,CAAZ;;AAKA,gBAAIA,YAAY,CAACE,KAAjB,EAAwB;AACpB,mBAAKC,MAAL,GAAcH,YAAY,CAACE,KAA3B;AACA;AAAA;AAAA,gBAAOE,OAAO,CAACC,OAAR,EAAP;AACH;;kBAEGL,YAAY,CAACM,MAAb,IAAuBN,YAAY,CAACO,WAApC;AAAA;AAAA;iBACIV,mBAAmB,IAAnB;AAAA;AAAA;AACA;AAAA;AAAA,cAAMC,KAAK,CAACU,eAAN,CAAsBR,YAAY,CAACM,MAAnC,CAAN;;;AAAAG;;;;;;;AAEAC,yBAAa,CAACV,YAAY,CAACM,MAAd,CAAb;;;;iBAIHK,IAAY,CAACT,OAAd;AAAA;AAAA;AACAU;AAAc;AAAA;AAAA,cAAOD,IAAY,CAACT,KAAb,CAAmBF,YAAa,CAACO,QAAjC,CAAP;;;AAAdK,eAAKT,MAAL,GAAcM,SAAd;AACA;AAAA;AAAA,cAAOL,OAAO,CAACC,OAAR,EAAP;;;AAGJ;AAAA;AAAA,cAAOD,OAAO,CAACS,MAAR,CAAe,yBAAf,CAAP;;;;AACH,GA1BY;;AA4BNd,+CAAP,UAAyBe,IAAzB,EAA0C;AACtC,WAAO,KAAKX,MAAL,CAAYY,iBAAZ,CAA8BD,IAA9B,CAAP;AACH,GAFM,CArCX,CACI;;;AACwBf,wCAAqC;AACzDO,UAAM,EAAE,8CADiD;AAEzDC,YAAQ,EAAE;AAF+C,GAArC;AAsC5B;AAAC,CAxCD;;SAAaR","names":["IsWindowObjectExist","Tools","WebGPUTintWASM","twgslOptions","_TWgslDefaultOptions","twgsl","_twgsl","Promise","resolve","jsPath","wasmPath","LoadScriptAsync","_b","importScripts","self","_a","reject","code","convertSpirV2WGSL"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/WebGPU/webgpuTintWASM.ts"],"sourcesContent":["import { IsWindowObjectExist } from \"../../Misc/domManagement\";\r\nimport { Tools } from \"../../Misc/tools\";\r\n\r\ndeclare function importScripts(...urls: string[]): void;\r\n\r\n/**\r\n * Options to load the associated Twgsl library\r\n */\r\nexport interface TwgslOptions {\r\n    /**\r\n     * Defines an existing instance of Twgsl (useful in modules who do not access the global instance).\r\n     */\r\n    twgsl?: any;\r\n    /**\r\n     * Defines the URL of the twgsl JS File.\r\n     */\r\n    jsPath?: string;\r\n    /**\r\n     * Defines the URL of the twgsl WASM File.\r\n     */\r\n    wasmPath?: string;\r\n}\r\n\r\n/** @hidden */\r\nexport class WebGPUTintWASM {\r\n    // Default twgsl options.\r\n    private static readonly _TWgslDefaultOptions: TwgslOptions = {\r\n        jsPath: \"https://preview.babylonjs.com/twgsl/twgsl.js\",\r\n        wasmPath: \"https://preview.babylonjs.com/twgsl/twgsl.wasm\",\r\n    };\r\n\r\n    private _twgsl: any = null;\r\n\r\n    public async initTwgsl(twgslOptions?: TwgslOptions): Promise<void> {\r\n        twgslOptions = twgslOptions || {};\r\n        twgslOptions = {\r\n            ...WebGPUTintWASM._TWgslDefaultOptions,\r\n            ...twgslOptions,\r\n        };\r\n\r\n        if (twgslOptions.twgsl) {\r\n            this._twgsl = twgslOptions.twgsl;\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (twgslOptions.jsPath && twgslOptions.wasmPath) {\r\n            if (IsWindowObjectExist()) {\r\n                await Tools.LoadScriptAsync(twgslOptions.jsPath);\r\n            } else {\r\n                importScripts(twgslOptions.jsPath);\r\n            }\r\n        }\r\n\r\n        if ((self as any).twgsl) {\r\n            this._twgsl = await (self as any).twgsl(twgslOptions!.wasmPath);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"twgsl is not available.\");\r\n    }\r\n\r\n    public convertSpirV2WGSL(code: Uint32Array): string {\r\n        return this._twgsl.convertSpirV2WGSL(code);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}