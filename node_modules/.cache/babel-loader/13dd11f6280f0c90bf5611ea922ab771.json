{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial.js\";\nimport { GLTFLoader } from \"../glTFLoader.js\";\nvar NAME = \"KHR_materials_emissive_strength\";\n/**\n * [Experimental Spec](https://github.com/KhronosGroup/glTF/pull/1994)\n */\n\nvar KHR_materials_emissive_strength =\n/** @class */\nfunction () {\n  /**\n   * @param loader\n   * @hidden\n   */\n  function KHR_materials_emissive_strength(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    /**\n     * Defines a number that determines the order the extensions are applied.\n     */\n\n    this.order = 170;\n    this._loader = loader;\n    this.enabled = this._loader.isExtensionUsed(NAME);\n  }\n  /** @hidden */\n\n\n  KHR_materials_emissive_strength.prototype.dispose = function () {\n    this._loader = null;\n  };\n  /**\n   * @param context\n   * @param material\n   * @param babylonMaterial\n   * @hidden\n   */\n\n\n  KHR_materials_emissive_strength.prototype.loadMaterialPropertiesAsync = function (context, material, babylonMaterial) {\n    var _this = this;\n\n    return GLTFLoader.LoadExtensionAsync(context, material, this.name, function (extensionContext, extension) {\n      return _this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial).then(function () {\n        _this._loadEmissiveProperties(extensionContext, extension, babylonMaterial);\n      });\n    });\n  };\n\n  KHR_materials_emissive_strength.prototype._loadEmissiveProperties = function (context, properties, babylonMaterial) {\n    if (!(babylonMaterial instanceof PBRMaterial)) {\n      throw new Error(\"\".concat(context, \": Material type not supported\"));\n    }\n\n    if (properties.emissiveStrength !== undefined) {\n      babylonMaterial.emissiveColor.scaleToRef(properties.emissiveStrength, babylonMaterial.emissiveColor);\n    }\n  };\n\n  return KHR_materials_emissive_strength;\n}();\n\nexport { KHR_materials_emissive_strength };\nGLTFLoader.RegisterExtension(NAME, function (loader) {\n  return new KHR_materials_emissive_strength(loader);\n});","map":{"version":3,"mappings":";;;AAEA,SAASA,WAAT,QAAsB,8CAAtB;AAKA,SAASC,UAAT,QAA2B,kBAA3B;AAGA,IAAMC,IAAI,GAAG,iCAAb;AAEA;;;;AAGA;AAAA;AAAA;AAkBI;;;;AAIA,2CAAYC,MAAZ,EAA8B;AArB9B;;;AAGgB,gBAAOD,IAAP;AAOhB;;;;AAGO,iBAAQ,GAAR;AASH,SAAKE,OAAL,GAAeD,MAAf;AACA,SAAKE,OAAL,GAAe,KAAKD,OAAL,CAAaE,eAAb,CAA6BJ,IAA7B,CAAf;AACH;AAED;;;AACOK,sDAAP;AACK,SAAKH,OAAL,GAAuB,IAAvB;AACJ,GAFM;AAIP;;;;;;;;AAMOG,0EAAP,UAAmCC,OAAnC,EAAoDC,QAApD,EAAyEC,eAAzE,EAAkG;AAAlG;;AACI,WAAOT,UAAU,CAACU,kBAAX,CAA6DH,OAA7D,EAAsEC,QAAtE,EAAgF,KAAKG,IAArF,EAA2F,UAACC,gBAAD,EAAmBC,SAAnB,EAA4B;AAC1H,aAAOC,KAAI,CAACX,OAAL,CAAaY,2BAAb,CAAyCR,OAAzC,EAAkDC,QAAlD,EAA4DC,eAA5D,EAA6EO,IAA7E,CAAkF;AACrFF,aAAI,CAACG,uBAAL,CAA6BL,gBAA7B,EAA+CC,SAA/C,EAA0DJ,eAA1D;AACH,OAFM,CAAP;AAGH,KAJM,CAAP;AAKH,GANM;;AAQCH,sEAAR,UAAgCC,OAAhC,EAAiDW,UAAjD,EAA4FT,eAA5F,EAAqH;AACjH,QAAI,EAAEA,eAAe,YAAYV,WAA7B,CAAJ,EAA+C;AAC3C,YAAM,IAAIoB,KAAJ,CAAU,UAAGZ,OAAH,EAAU,+BAAV,CAAV,CAAN;AACH;;AAED,QAAIW,UAAU,CAACE,gBAAX,KAAgCC,SAApC,EAA+C;AAC3CZ,qBAAe,CAACa,aAAhB,CAA8BC,UAA9B,CAAyCL,UAAU,CAACE,gBAApD,EAAsEX,eAAe,CAACa,aAAtF;AACH;AACJ,GARO;;AASZ;AAAC,CAvDD;;;AAyDAtB,UAAU,CAACwB,iBAAX,CAA6BvB,IAA7B,EAAmC,UAACC,MAAD,EAAO;AAAK,aAAII,+BAAJ,CAAoCJ,MAApC;AAA2C,CAA1F","names":["PBRMaterial","GLTFLoader","NAME","loader","_loader","enabled","isExtensionUsed","KHR_materials_emissive_strength","context","material","babylonMaterial","LoadExtensionAsync","name","extensionContext","extension","_this","loadMaterialPropertiesAsync","then","_loadEmissiveProperties","properties","Error","emissiveStrength","undefined","emissiveColor","scaleToRef","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../../lts/loaders/generated/glTF/2.0/Extensions/KHR_materials_emissive_strength.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsEmissiveStrength } from \"babylonjs-gltf2interface\";\r\n\r\nconst NAME = \"KHR_materials_emissive_strength\";\r\n\r\n/**\r\n * [Experimental Spec](https://github.com/KhronosGroup/glTF/pull/1994)\r\n */\r\nexport class KHR_materials_emissive_strength implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 170;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @param loader\r\n     * @hidden\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @hidden */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @param context\r\n     * @param material\r\n     * @param babylonMaterial\r\n     * @hidden\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsEmissiveStrength>(context, material, this.name, (extensionContext, extension) => {\r\n            return this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial).then(() => {\r\n                this._loadEmissiveProperties(extensionContext, extension, babylonMaterial);\r\n            });\r\n        });\r\n    }\r\n\r\n    private _loadEmissiveProperties(context: string, properties: IKHRMaterialsEmissiveStrength, babylonMaterial: Material): void {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        if (properties.emissiveStrength !== undefined) {\r\n            babylonMaterial.emissiveColor.scaleToRef(properties.emissiveStrength, babylonMaterial.emissiveColor);\r\n        }\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_materials_emissive_strength(loader));\r\n"]},"metadata":{},"sourceType":"module"}