{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { PrePassRenderTarget } from \"../Materials/Textures/prePassRenderTarget.js\";\nimport { _WarnImport } from \"../Misc/devTools.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\nimport { Material } from \"../Materials/material.js\";\nimport { GeometryBufferRenderer } from \"../Rendering/geometryBufferRenderer.js\";\n/**\n * Renders a pre pass of the scene\n * This means every mesh in the scene will be rendered to a render target texture\n * And then this texture will be composited to the rendering canvas with post processes\n * It is necessary for effects like subsurface scattering or deferred shading\n */\n\nvar PrePassRenderer =\n/** @class */\nfunction () {\n  /**\n   * Instantiates a prepass renderer\n   * @param scene The scene\n   */\n  function PrePassRenderer(scene) {\n    /**\n     * To save performance, we can excluded skinned meshes from the prepass\n     */\n    this.excludedSkinnedMesh = [];\n    /**\n     * Force material to be excluded from the prepass\n     * Can be useful when `useGeometryBufferFallback` is set to `true`\n     * and you don't want a material to show in the effect.\n     */\n\n    this.excludedMaterials = [];\n    /**\n     * Number of textures in the multi render target texture where the scene is directly rendered\n     */\n\n    this.mrtCount = 0;\n    this._mrtFormats = [];\n    this._mrtLayout = [];\n    this._mrtNames = [];\n    this._textureIndices = [];\n    this._isDirty = true;\n    /**\n     * Configuration for prepass effects\n     */\n\n    this._effectConfigurations = [];\n    /**\n     * Prevents the PrePassRenderer from using the GeometryBufferRenderer as a fallback\n     */\n\n    this.doNotUseGeometryRendererFallback = true;\n    /**\n     * All the render targets generated by prepass\n     */\n\n    this.renderTargets = [];\n    this._clearColor = new Color4(0, 0, 0, 0);\n    this._enabled = false;\n    this._needsCompositionForThisPass = false;\n    /**\n     * Set to true to disable gamma transform in PrePass.\n     * Can be useful in case you already proceed to gamma transform on a material level\n     * and your post processes don't need to be in linear color space.\n     */\n\n    this.disableGammaTransform = false;\n    this._scene = scene;\n    this._engine = scene.getEngine();\n\n    PrePassRenderer._SceneComponentInitialization(this._scene);\n\n    this.defaultRT = this._createRenderTarget(\"sceneprePassRT\", null);\n    this._currentTarget = this.defaultRT;\n  }\n  /**\n   * Returns the index of a texture in the multi render target texture array.\n   * @param type Texture type\n   * @return The index\n   */\n\n\n  PrePassRenderer.prototype.getIndex = function (type) {\n    return this._textureIndices[type];\n  };\n\n  Object.defineProperty(PrePassRenderer.prototype, \"samples\", {\n    /**\n     * How many samples are used for MSAA of the scene render target\n     */\n    get: function get() {\n      return this.defaultRT.samples;\n    },\n    set: function set(n) {\n      this.defaultRT.samples = n;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * @return the prepass render target for the rendering pass.\n   * If we are currently rendering a render target, it returns the PrePassRenderTarget\n   * associated with that render target. Otherwise, it returns the scene default PrePassRenderTarget\n   */\n\n  PrePassRenderer.prototype.getRenderTarget = function () {\n    return this._currentTarget;\n  };\n  /**\n   * @hidden\n   * Managed by the scene component\n   * @param prePassRenderTarget\n   */\n\n\n  PrePassRenderer.prototype._setRenderTarget = function (prePassRenderTarget) {\n    if (prePassRenderTarget) {\n      this._currentTarget = prePassRenderTarget;\n    } else {\n      this._currentTarget = this.defaultRT;\n    }\n\n    this._engine.currentRenderPassId = this._currentTarget.renderPassId;\n  };\n\n  Object.defineProperty(PrePassRenderer.prototype, \"currentRTisSceneRT\", {\n    /**\n     * Returns true if the currently rendered prePassRenderTarget is the one\n     * associated with the scene.\n     */\n    get: function get() {\n      return this._currentTarget === this.defaultRT;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  PrePassRenderer.prototype._refreshGeometryBufferRendererLink = function () {\n    if (!this.doNotUseGeometryRendererFallback) {\n      this._geometryBuffer = this._scene.enableGeometryBufferRenderer();\n\n      if (!this._geometryBuffer) {\n        // Not supported\n        this.doNotUseGeometryRendererFallback = true;\n        return;\n      }\n\n      this._geometryBuffer._linkPrePassRenderer(this);\n    } else {\n      if (this._geometryBuffer) {\n        this._geometryBuffer._unlinkPrePassRenderer();\n      }\n\n      this._geometryBuffer = null;\n\n      this._scene.disableGeometryBufferRenderer();\n    }\n  };\n\n  Object.defineProperty(PrePassRenderer.prototype, \"enabled\", {\n    /**\n     * Indicates if the prepass is enabled\n     */\n    get: function get() {\n      return this._enabled;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Creates a new PrePassRenderTarget\n   * This should be the only way to instantiate a `PrePassRenderTarget`\n   * @param name Name of the `PrePassRenderTarget`\n   * @param renderTargetTexture RenderTarget the `PrePassRenderTarget` will be attached to.\n   * Can be `null` if the created `PrePassRenderTarget` is attached to the scene (default framebuffer).\n   * @hidden\n   */\n\n  PrePassRenderer.prototype._createRenderTarget = function (name, renderTargetTexture) {\n    var rt = new PrePassRenderTarget(name, renderTargetTexture, {\n      width: this._engine.getRenderWidth(),\n      height: this._engine.getRenderHeight()\n    }, 0, this._scene, {\n      generateMipMaps: false,\n      generateStencilBuffer: this._engine.isStencilEnable,\n      defaultType: 0,\n      types: [],\n      drawOnlyOnFirstAttachmentByDefault: true\n    });\n    this.renderTargets.push(rt);\n    return rt;\n  };\n\n  Object.defineProperty(PrePassRenderer.prototype, \"isSupported\", {\n    /**\n     * Indicates if rendering a prepass is supported\n     */\n    get: function get() {\n      return this._scene.getEngine().getCaps().drawBuffersExtension;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Sets the proper output textures to draw in the engine.\n   * @param effect The effect that is drawn. It can be or not be compatible with drawing to several output textures.\n   * @param subMesh Submesh on which the effect is applied\n   */\n\n  PrePassRenderer.prototype.bindAttachmentsForEffect = function (effect, subMesh) {\n    var material = subMesh.getMaterial();\n    var isPrePassCapable = material && material.isPrePassCapable;\n    var excluded = material && this.excludedMaterials.indexOf(material) !== -1;\n\n    if (this.enabled && this._currentTarget.enabled) {\n      if (effect._multiTarget && isPrePassCapable && !excluded) {\n        this._engine.bindAttachments(this._multiRenderAttachments);\n      } else {\n        if (this._engine._currentRenderTarget) {\n          this._engine.bindAttachments(this._defaultAttachments);\n        } else {\n          this._engine.restoreSingleAttachment();\n        }\n\n        if (this._geometryBuffer && this.currentRTisSceneRT && !excluded) {\n          this._geometryBuffer.renderList.push(subMesh.getRenderingMesh());\n        }\n      }\n    }\n  };\n\n  PrePassRenderer.prototype._reinitializeAttachments = function () {\n    var multiRenderLayout = [];\n    var clearLayout = [false];\n    var defaultLayout = [true];\n\n    for (var i = 0; i < this.mrtCount; i++) {\n      multiRenderLayout.push(true);\n\n      if (i > 0) {\n        clearLayout.push(true);\n        defaultLayout.push(false);\n      }\n    }\n\n    this._multiRenderAttachments = this._engine.buildTextureLayout(multiRenderLayout);\n    this._clearAttachments = this._engine.buildTextureLayout(clearLayout);\n    this._defaultAttachments = this._engine.buildTextureLayout(defaultLayout);\n  };\n\n  PrePassRenderer.prototype._resetLayout = function () {\n    for (var i = 0; i < PrePassRenderer._TextureFormats.length; i++) {\n      this._textureIndices[PrePassRenderer._TextureFormats[i].type] = -1;\n    }\n\n    this._textureIndices[4] = 0;\n    this._mrtLayout = [4];\n    this._mrtFormats = [PrePassRenderer._TextureFormats[4].format];\n    this._mrtNames = [PrePassRenderer._TextureFormats[4].name];\n    this.mrtCount = 1;\n  };\n\n  PrePassRenderer.prototype._updateGeometryBufferLayout = function () {\n    this._refreshGeometryBufferRendererLink();\n\n    if (this._geometryBuffer) {\n      this._geometryBuffer._resetLayout();\n\n      var texturesActivated = [];\n\n      for (var i = 0; i < this._mrtLayout.length; i++) {\n        texturesActivated.push(false);\n      }\n\n      this._geometryBuffer._linkInternalTexture(this.defaultRT.getInternalTexture());\n\n      var matches = [{\n        prePassConstant: 5,\n        geometryBufferConstant: GeometryBufferRenderer.DEPTH_TEXTURE_TYPE\n      }, {\n        prePassConstant: 6,\n        geometryBufferConstant: GeometryBufferRenderer.NORMAL_TEXTURE_TYPE\n      }, {\n        prePassConstant: 1,\n        geometryBufferConstant: GeometryBufferRenderer.POSITION_TEXTURE_TYPE\n      }, {\n        prePassConstant: 3,\n        geometryBufferConstant: GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE\n      }, {\n        prePassConstant: 2,\n        geometryBufferConstant: GeometryBufferRenderer.VELOCITY_TEXTURE_TYPE\n      }]; // replace textures in the geometryBuffer RT\n\n      for (var i = 0; i < matches.length; i++) {\n        var index = this._mrtLayout.indexOf(matches[i].prePassConstant);\n\n        if (index !== -1) {\n          this._geometryBuffer._forceTextureType(matches[i].geometryBufferConstant, index);\n\n          texturesActivated[index] = true;\n        }\n      }\n\n      this._geometryBuffer._setAttachments(this._engine.buildTextureLayout(texturesActivated));\n    }\n  };\n  /**\n   * Restores attachments for single texture draw.\n   */\n\n\n  PrePassRenderer.prototype.restoreAttachments = function () {\n    if (this.enabled && this._currentTarget.enabled && this._defaultAttachments) {\n      if (this._engine._currentRenderTarget) {\n        this._engine.bindAttachments(this._defaultAttachments);\n      } else {\n        this._engine.restoreSingleAttachment();\n      }\n    }\n  };\n  /**\n   * @param camera\n   * @param faceIndex\n   * @param layer\n   * @hidden\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  PrePassRenderer.prototype._beforeDraw = function (camera, faceIndex, layer) {\n    // const previousEnabled = this._enabled && this._currentTarget.enabled;\n    if (this._isDirty) {\n      this._update();\n    }\n\n    if (!this._enabled || !this._currentTarget.enabled) {\n      return;\n    }\n\n    if (this._geometryBuffer) {\n      this._geometryBuffer.renderList = [];\n    }\n\n    this._setupOutputForThisPass(this._currentTarget, camera);\n  };\n\n  PrePassRenderer.prototype._prepareFrame = function (prePassRenderTarget, faceIndex, layer) {\n    if (prePassRenderTarget.renderTargetTexture) {\n      prePassRenderTarget.renderTargetTexture._prepareFrame(this._scene, faceIndex, layer, prePassRenderTarget.renderTargetTexture.useCameraPostProcesses);\n    } else if (this._postProcessesSourceForThisPass.length) {\n      this._scene.postProcessManager._prepareFrame();\n    } else {\n      this._engine.restoreDefaultFramebuffer();\n    }\n  };\n\n  PrePassRenderer.prototype._renderPostProcesses = function (prePassRenderTarget, faceIndex) {\n    var _a;\n\n    var firstPP = this._postProcessesSourceForThisPass[0];\n    var outputTexture = firstPP ? firstPP.inputTexture : prePassRenderTarget.renderTargetTexture ? prePassRenderTarget.renderTargetTexture.renderTarget : null; // Build post process chain for this prepass post draw\n\n    var postProcessChain = this._currentTarget._beforeCompositionPostProcesses;\n\n    if (this._needsCompositionForThisPass) {\n      postProcessChain = postProcessChain.concat([this._currentTarget.imageProcessingPostProcess]);\n    } // Activates and renders the chain\n\n\n    if (postProcessChain.length) {\n      this._scene.postProcessManager._prepareFrame((_a = this._currentTarget.renderTarget) === null || _a === void 0 ? void 0 : _a.texture, postProcessChain);\n\n      this._scene.postProcessManager.directRender(postProcessChain, outputTexture, false, faceIndex);\n    }\n  };\n  /**\n   * @param faceIndex\n   * @param layer\n   * @hidden\n   */\n\n\n  PrePassRenderer.prototype._afterDraw = function (faceIndex, layer) {\n    if (this._enabled && this._currentTarget.enabled) {\n      this._prepareFrame(this._currentTarget, faceIndex, layer);\n\n      this._renderPostProcesses(this._currentTarget, faceIndex);\n    }\n  };\n  /**\n   * Clears the current prepass render target (in the sense of settings pixels to the scene clear color value)\n   * @hidden\n   */\n\n\n  PrePassRenderer.prototype._clear = function () {\n    if (this._enabled && this._currentTarget.enabled) {\n      this._bindFrameBuffer(this._currentTarget); // Clearing other attachment with 0 on all other attachments\n\n\n      this._engine.bindAttachments(this._clearAttachments);\n\n      this._engine.clear(this._clearColor, true, false, false); // Regular clear color with the scene clear color of the 1st attachment\n\n\n      this._engine.bindAttachments(this._defaultAttachments);\n    }\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  PrePassRenderer.prototype._bindFrameBuffer = function (prePassRenderTarget) {\n    if (this._enabled && this._currentTarget.enabled) {\n      this._currentTarget._checkSize();\n\n      var internalTexture = this._currentTarget.renderTarget;\n\n      if (internalTexture) {\n        this._engine.bindFramebuffer(internalTexture);\n      }\n    }\n  };\n\n  PrePassRenderer.prototype._setEnabled = function (enabled) {\n    this._enabled = enabled;\n  };\n\n  PrePassRenderer.prototype._setRenderTargetEnabled = function (prePassRenderTarget, enabled) {\n    prePassRenderTarget.enabled = enabled;\n\n    if (!enabled) {\n      this._unlinkInternalTexture(prePassRenderTarget);\n    }\n  };\n  /**\n   * Adds an effect configuration to the prepass render target.\n   * If an effect has already been added, it won't add it twice and will return the configuration\n   * already present.\n   * @param cfg the effect configuration\n   * @return the effect configuration now used by the prepass\n   */\n\n\n  PrePassRenderer.prototype.addEffectConfiguration = function (cfg) {\n    // Do not add twice\n    for (var i = 0; i < this._effectConfigurations.length; i++) {\n      if (this._effectConfigurations[i].name === cfg.name) {\n        return this._effectConfigurations[i];\n      }\n    }\n\n    this._effectConfigurations.push(cfg);\n\n    return cfg;\n  };\n\n  PrePassRenderer.prototype._enable = function () {\n    var previousMrtCount = this.mrtCount;\n\n    for (var i = 0; i < this._effectConfigurations.length; i++) {\n      if (this._effectConfigurations[i].enabled) {\n        this._enableTextures(this._effectConfigurations[i].texturesRequired);\n      }\n    }\n\n    for (var i = 0; i < this.renderTargets.length; i++) {\n      if (this.mrtCount !== previousMrtCount || this.renderTargets[i].count !== this.mrtCount) {\n        this.renderTargets[i].updateCount(this.mrtCount, {\n          types: this._mrtFormats\n        }, this._mrtNames.concat(\"prePass_DepthBuffer\"));\n      }\n\n      this.renderTargets[i]._resetPostProcessChain();\n\n      for (var j = 0; j < this._effectConfigurations.length; j++) {\n        if (this._effectConfigurations[j].enabled) {\n          // TODO : subsurface scattering has 1 scene-wide effect configuration\n          // solution : do not stock postProcess on effectConfiguration, but in the prepassRenderTarget (hashmap configuration => postProcess)\n          // And call createPostProcess whenever the post process does not exist in the RT\n          if (!this._effectConfigurations[j].postProcess && this._effectConfigurations[j].createPostProcess) {\n            this._effectConfigurations[j].createPostProcess();\n          }\n\n          if (this._effectConfigurations[j].postProcess) {\n            this.renderTargets[i]._beforeCompositionPostProcesses.push(this._effectConfigurations[j].postProcess);\n          }\n        }\n      }\n    }\n\n    this._reinitializeAttachments();\n\n    this._setEnabled(true);\n\n    this._updateGeometryBufferLayout();\n  };\n\n  PrePassRenderer.prototype._disable = function () {\n    this._setEnabled(false);\n\n    for (var i = 0; i < this.renderTargets.length; i++) {\n      this._setRenderTargetEnabled(this.renderTargets[i], false);\n    }\n\n    this._resetLayout();\n\n    for (var i = 0; i < this._effectConfigurations.length; i++) {\n      this._effectConfigurations[i].enabled = false;\n    }\n  };\n\n  PrePassRenderer.prototype._getPostProcessesSource = function (prePassRenderTarget, camera) {\n    if (camera) {\n      return camera._postProcesses;\n    } else if (prePassRenderTarget.renderTargetTexture) {\n      if (prePassRenderTarget.renderTargetTexture.useCameraPostProcesses) {\n        var camera_1 = prePassRenderTarget.renderTargetTexture.activeCamera ? prePassRenderTarget.renderTargetTexture.activeCamera : this._scene.activeCamera;\n        return camera_1 ? camera_1._postProcesses : [];\n      } else if (prePassRenderTarget.renderTargetTexture.postProcesses) {\n        return prePassRenderTarget.renderTargetTexture.postProcesses;\n      } else {\n        return [];\n      }\n    } else {\n      return this._scene.activeCamera ? this._scene.activeCamera._postProcesses : [];\n    }\n  };\n\n  PrePassRenderer.prototype._setupOutputForThisPass = function (prePassRenderTarget, camera) {\n    // Order is : draw ===> prePassRenderTarget._postProcesses ==> ipp ==> camera._postProcesses\n    var secondaryCamera = camera && this._scene.activeCameras && !!this._scene.activeCameras.length && this._scene.activeCameras.indexOf(camera) !== 0;\n    this._postProcessesSourceForThisPass = this._getPostProcessesSource(prePassRenderTarget, camera);\n    this._postProcessesSourceForThisPass = this._postProcessesSourceForThisPass.filter(function (pp) {\n      return pp != null;\n    });\n    this._scene.autoClear = true;\n\n    var cameraHasImageProcessing = this._hasImageProcessing(this._postProcessesSourceForThisPass);\n\n    this._needsCompositionForThisPass = !cameraHasImageProcessing && !this.disableGammaTransform && this._needsImageProcessing() && !secondaryCamera;\n\n    var firstCameraPP = this._getFirstPostProcess(this._postProcessesSourceForThisPass);\n\n    var firstPrePassPP = prePassRenderTarget._beforeCompositionPostProcesses && prePassRenderTarget._beforeCompositionPostProcesses[0];\n    var firstPP = null; // Setting the scene-wide post process configuration\n\n    this._scene.imageProcessingConfiguration.applyByPostProcess = this._needsCompositionForThisPass || cameraHasImageProcessing; // Create composition effect if needed\n\n    if (this._needsCompositionForThisPass && !prePassRenderTarget.imageProcessingPostProcess) {\n      prePassRenderTarget._createCompositionEffect();\n    } // Setting the prePassRenderTarget as input texture of the first PP\n\n\n    if (firstPrePassPP) {\n      firstPP = firstPrePassPP;\n    } else if (this._needsCompositionForThisPass) {\n      firstPP = prePassRenderTarget.imageProcessingPostProcess;\n    } else if (firstCameraPP) {\n      firstPP = firstCameraPP;\n    }\n\n    this._bindFrameBuffer(prePassRenderTarget);\n\n    this._linkInternalTexture(prePassRenderTarget, firstPP);\n  };\n\n  PrePassRenderer.prototype._linkInternalTexture = function (prePassRenderTarget, postProcess) {\n    if (postProcess) {\n      postProcess.autoClear = false;\n      postProcess.inputTexture = prePassRenderTarget.renderTarget;\n    }\n\n    if (prePassRenderTarget._outputPostProcess !== postProcess) {\n      if (prePassRenderTarget._outputPostProcess) {\n        this._unlinkInternalTexture(prePassRenderTarget);\n      }\n\n      prePassRenderTarget._outputPostProcess = postProcess;\n    }\n\n    if (prePassRenderTarget._internalTextureDirty) {\n      this._updateGeometryBufferLayout();\n\n      prePassRenderTarget._internalTextureDirty = false;\n    }\n  };\n  /**\n   * @param prePassRenderTarget\n   * @hidden\n   */\n\n\n  PrePassRenderer.prototype._unlinkInternalTexture = function (prePassRenderTarget) {\n    if (prePassRenderTarget._outputPostProcess) {\n      prePassRenderTarget._outputPostProcess.autoClear = true;\n\n      prePassRenderTarget._outputPostProcess.restoreDefaultInputTexture();\n\n      prePassRenderTarget._outputPostProcess = null;\n    }\n  };\n\n  PrePassRenderer.prototype._needsImageProcessing = function () {\n    for (var i = 0; i < this._effectConfigurations.length; i++) {\n      if (this._effectConfigurations[i].enabled && this._effectConfigurations[i].needsImageProcessing) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  PrePassRenderer.prototype._hasImageProcessing = function (postProcesses) {\n    var _a;\n\n    var isIPPAlreadyPresent = false;\n\n    if (postProcesses) {\n      for (var i = 0; i < postProcesses.length; i++) {\n        if (((_a = postProcesses[i]) === null || _a === void 0 ? void 0 : _a.getClassName()) === \"ImageProcessingPostProcess\") {\n          isIPPAlreadyPresent = true;\n          break;\n        }\n      }\n    }\n\n    return isIPPAlreadyPresent;\n  };\n  /**\n   * Internal, gets the first post proces.\n   * @param postProcesses\n   * @returns the first post process to be run on this camera.\n   */\n\n\n  PrePassRenderer.prototype._getFirstPostProcess = function (postProcesses) {\n    for (var ppIndex = 0; ppIndex < postProcesses.length; ppIndex++) {\n      if (postProcesses[ppIndex] !== null) {\n        return postProcesses[ppIndex];\n      }\n    }\n\n    return null;\n  };\n  /**\n   * Marks the prepass renderer as dirty, triggering a check if the prepass is necessary for the next rendering.\n   */\n\n\n  PrePassRenderer.prototype.markAsDirty = function () {\n    this._isDirty = true;\n  };\n  /**\n   * Enables a texture on the MultiRenderTarget for prepass\n   * @param types\n   */\n\n\n  PrePassRenderer.prototype._enableTextures = function (types) {\n    // For velocity : enable storage of previous matrices for instances\n    this._scene.needsPreviousWorldMatrices = false;\n\n    for (var i = 0; i < types.length; i++) {\n      var type = types[i];\n\n      if (this._textureIndices[type] === -1) {\n        this._textureIndices[type] = this._mrtLayout.length;\n\n        this._mrtLayout.push(type);\n\n        this._mrtFormats.push(PrePassRenderer._TextureFormats[type].format);\n\n        this._mrtNames.push(PrePassRenderer._TextureFormats[type].name);\n\n        this.mrtCount++;\n      }\n\n      if (type === 2) {\n        this._scene.needsPreviousWorldMatrices = true;\n      }\n    }\n  };\n\n  PrePassRenderer.prototype._update = function () {\n    this._disable();\n\n    var enablePrePass = false;\n    this._scene.imageProcessingConfiguration.applyByPostProcess = false;\n\n    if (this._scene._depthPeelingRenderer && this._scene.useOrderIndependentTransparency) {\n      this._scene._depthPeelingRenderer.setPrePassRenderer(this);\n\n      enablePrePass = true;\n    }\n\n    for (var i = 0; i < this._scene.materials.length; i++) {\n      if (this._scene.materials[i].setPrePassRenderer(this)) {\n        enablePrePass = true;\n      }\n    }\n\n    if (enablePrePass) {\n      this._setRenderTargetEnabled(this.defaultRT, true);\n    }\n\n    var postProcesses;\n\n    for (var i = 0; i < this.renderTargets.length; i++) {\n      if (this.renderTargets[i].renderTargetTexture) {\n        postProcesses = this._getPostProcessesSource(this.renderTargets[i]);\n      } else {\n        var camera = this._scene.activeCamera;\n\n        if (!camera) {\n          continue;\n        }\n\n        postProcesses = camera._postProcesses;\n      }\n\n      if (!postProcesses) {\n        continue;\n      }\n\n      postProcesses = postProcesses.filter(function (pp) {\n        return pp != null;\n      });\n\n      if (postProcesses) {\n        for (var j = 0; j < postProcesses.length; j++) {\n          if (postProcesses[j].setPrePassRenderer(this)) {\n            this._setRenderTargetEnabled(this.renderTargets[i], true);\n\n            enablePrePass = true;\n          }\n        }\n\n        if (this._hasImageProcessing(postProcesses)) {\n          this._scene.imageProcessingConfiguration.applyByPostProcess = true;\n        }\n      }\n    }\n\n    this._markAllMaterialsAsPrePassDirty();\n\n    this._isDirty = false;\n\n    if (enablePrePass) {\n      this._enable();\n    }\n  };\n\n  PrePassRenderer.prototype._markAllMaterialsAsPrePassDirty = function () {\n    var materials = this._scene.materials;\n\n    for (var i = 0; i < materials.length; i++) {\n      materials[i].markAsDirty(Material.PrePassDirtyFlag);\n    }\n  };\n  /**\n   * Disposes the prepass renderer.\n   */\n\n\n  PrePassRenderer.prototype.dispose = function () {\n    for (var i = this.renderTargets.length - 1; i >= 0; i--) {\n      this.renderTargets[i].dispose();\n    }\n\n    for (var i = 0; i < this._effectConfigurations.length; i++) {\n      if (this._effectConfigurations[i].dispose) {\n        this._effectConfigurations[i].dispose();\n      }\n    }\n  };\n  /**\n   * @param _\n   * @hidden\n   */\n\n\n  PrePassRenderer._SceneComponentInitialization = function (_) {\n    throw _WarnImport(\"PrePassRendererSceneComponent\");\n  };\n\n  PrePassRenderer._TextureFormats = [{\n    type: 0,\n    format: 2,\n    name: \"prePass_Irradiance\"\n  }, {\n    type: 1,\n    format: 2,\n    name: \"prePass_Position\"\n  }, {\n    type: 2,\n    format: 0,\n    name: \"prePass_Velocity\"\n  }, {\n    type: 3,\n    format: 0,\n    name: \"prePass_Reflectivity\"\n  }, {\n    type: 4,\n    format: 2,\n    name: \"prePass_Color\"\n  }, {\n    type: 5,\n    format: 2,\n    name: \"prePass_Depth\"\n  }, {\n    type: 6,\n    format: 2,\n    name: \"prePass_Normal\"\n  }, {\n    type: 7,\n    format: 0,\n    name: \"prePass_Albedo\"\n  }];\n  return PrePassRenderer;\n}();\n\nexport { PrePassRenderer };","map":{"version":3,"mappings":"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","names":["PrePassRenderTarget","_WarnImport","Color4","Material","GeometryBufferRenderer","scene","_scene","_engine","getEngine","PrePassRenderer","_SceneComponentInitialization","defaultRT","_createRenderTarget","_currentTarget","type","_textureIndices","Object","samples","n","prePassRenderTarget","currentRenderPassId","renderPassId","doNotUseGeometryRendererFallback","_geometryBuffer","enableGeometryBufferRenderer","_linkPrePassRenderer","_unlinkPrePassRenderer","disableGeometryBufferRenderer","_enabled","name","renderTargetTexture","rt","width","getRenderWidth","height","getRenderHeight","generateMipMaps","generateStencilBuffer","isStencilEnable","defaultType","types","drawOnlyOnFirstAttachmentByDefault","renderTargets","push","getCaps","drawBuffersExtension","effect","subMesh","material","getMaterial","isPrePassCapable","excluded","excludedMaterials","indexOf","enabled","_multiTarget","bindAttachments","_multiRenderAttachments","_currentRenderTarget","_defaultAttachments","restoreSingleAttachment","currentRTisSceneRT","renderList","getRenderingMesh","multiRenderLayout","clearLayout","defaultLayout","i","mrtCount","buildTextureLayout","_clearAttachments","_TextureFormats","length","_mrtLayout","_mrtFormats","format","_mrtNames","_refreshGeometryBufferRendererLink","_resetLayout","texturesActivated","_linkInternalTexture","getInternalTexture","matches","prePassConstant","geometryBufferConstant","DEPTH_TEXTURE_TYPE","NORMAL_TEXTURE_TYPE","POSITION_TEXTURE_TYPE","REFLECTIVITY_TEXTURE_TYPE","VELOCITY_TEXTURE_TYPE","index","_forceTextureType","_setAttachments","camera","faceIndex","layer","_isDirty","_update","_setupOutputForThisPass","_prepareFrame","useCameraPostProcesses","_postProcessesSourceForThisPass","postProcessManager","restoreDefaultFramebuffer","firstPP","outputTexture","inputTexture","renderTarget","postProcessChain","_beforeCompositionPostProcesses","_needsCompositionForThisPass","concat","imageProcessingPostProcess","_a","texture","directRender","_renderPostProcesses","_bindFrameBuffer","clear","_clearColor","_checkSize","internalTexture","bindFramebuffer","_unlinkInternalTexture","cfg","_effectConfigurations","previousMrtCount","_enableTextures","texturesRequired","count","updateCount","_resetPostProcessChain","j","postProcess","createPostProcess","_reinitializeAttachments","_setEnabled","_updateGeometryBufferLayout","_setRenderTargetEnabled","_postProcesses","camera_1","activeCamera","postProcesses","secondaryCamera","activeCameras","_getPostProcessesSource","filter","pp","autoClear","cameraHasImageProcessing","_hasImageProcessing","disableGammaTransform","_needsImageProcessing","firstCameraPP","_getFirstPostProcess","firstPrePassPP","imageProcessingConfiguration","applyByPostProcess","_createCompositionEffect","_outputPostProcess","_internalTextureDirty","restoreDefaultInputTexture","needsImageProcessing","isIPPAlreadyPresent","getClassName","ppIndex","needsPreviousWorldMatrices","_disable","enablePrePass","_depthPeelingRenderer","useOrderIndependentTransparency","setPrePassRenderer","materials","_markAllMaterialsAsPrePassDirty","_enable","markAsDirty","PrePassDirtyFlag","dispose","_"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Rendering/prePassRenderer.ts"],"sourcesContent":["import { PrePassRenderTarget } from \"../Materials/Textures/prePassRenderTarget\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { PostProcess } from \"../PostProcesses/postProcess\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport { Material } from \"../Materials/material\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { PrePassEffectConfiguration } from \"./prePassEffectConfiguration\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport { GeometryBufferRenderer } from \"../Rendering/geometryBufferRenderer\";\r\n\r\n/**\r\n * Renders a pre pass of the scene\r\n * This means every mesh in the scene will be rendered to a render target texture\r\n * And then this texture will be composited to the rendering canvas with post processes\r\n * It is necessary for effects like subsurface scattering or deferred shading\r\n */\r\nexport class PrePassRenderer {\r\n    /**\r\n     * @param _\r\n     * @hidden\r\n     */\r\n    public static _SceneComponentInitialization: (scene: Scene) => void = (_) => {\r\n        throw _WarnImport(\"PrePassRendererSceneComponent\");\r\n    };\r\n\r\n    /**\r\n     * To save performance, we can excluded skinned meshes from the prepass\r\n     */\r\n    public excludedSkinnedMesh: AbstractMesh[] = [];\r\n\r\n    /**\r\n     * Force material to be excluded from the prepass\r\n     * Can be useful when `useGeometryBufferFallback` is set to `true`\r\n     * and you don't want a material to show in the effect.\r\n     */\r\n    public excludedMaterials: Material[] = [];\r\n\r\n    private _scene: Scene;\r\n    private _engine: Engine;\r\n\r\n    /**\r\n     * Number of textures in the multi render target texture where the scene is directly rendered\r\n     */\r\n    public mrtCount: number = 0;\r\n\r\n    private _mrtFormats: number[] = [];\r\n    private _mrtLayout: number[] = [];\r\n    private _mrtNames: string[] = [];\r\n    private _textureIndices: number[] = [];\r\n\r\n    private _multiRenderAttachments: number[];\r\n    private _defaultAttachments: number[];\r\n    private _clearAttachments: number[];\r\n\r\n    /**\r\n     * Returns the index of a texture in the multi render target texture array.\r\n     * @param type Texture type\r\n     * @return The index\r\n     */\r\n    public getIndex(type: number): number {\r\n        return this._textureIndices[type];\r\n    }\r\n\r\n    /**\r\n     * How many samples are used for MSAA of the scene render target\r\n     */\r\n    public get samples() {\r\n        return this.defaultRT.samples;\r\n    }\r\n\r\n    public set samples(n: number) {\r\n        this.defaultRT.samples = n;\r\n    }\r\n\r\n    private static _TextureFormats = [\r\n        {\r\n            type: Constants.PREPASS_IRRADIANCE_TEXTURE_TYPE,\r\n            format: Constants.TEXTURETYPE_HALF_FLOAT,\r\n            name: \"prePass_Irradiance\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_POSITION_TEXTURE_TYPE,\r\n            format: Constants.TEXTURETYPE_HALF_FLOAT,\r\n            name: \"prePass_Position\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_VELOCITY_TEXTURE_TYPE,\r\n            format: Constants.TEXTURETYPE_UNSIGNED_INT,\r\n            name: \"prePass_Velocity\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_REFLECTIVITY_TEXTURE_TYPE,\r\n            format: Constants.TEXTURETYPE_UNSIGNED_INT,\r\n            name: \"prePass_Reflectivity\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_COLOR_TEXTURE_TYPE,\r\n            format: Constants.TEXTURETYPE_HALF_FLOAT,\r\n            name: \"prePass_Color\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_DEPTH_TEXTURE_TYPE,\r\n            format: Constants.TEXTURETYPE_HALF_FLOAT,\r\n            name: \"prePass_Depth\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_NORMAL_TEXTURE_TYPE,\r\n            format: Constants.TEXTURETYPE_HALF_FLOAT,\r\n            name: \"prePass_Normal\",\r\n        },\r\n        {\r\n            type: Constants.PREPASS_ALBEDO_SQRT_TEXTURE_TYPE,\r\n            format: Constants.TEXTURETYPE_UNSIGNED_INT,\r\n            name: \"prePass_Albedo\",\r\n        },\r\n    ];\r\n\r\n    private _isDirty: boolean = true;\r\n\r\n    /**\r\n     * The render target where the scene is directly rendered\r\n     */\r\n    public defaultRT: PrePassRenderTarget;\r\n\r\n    /**\r\n     * Configuration for prepass effects\r\n     */\r\n    private _effectConfigurations: PrePassEffectConfiguration[] = [];\r\n\r\n    /**\r\n     * @return the prepass render target for the rendering pass.\r\n     * If we are currently rendering a render target, it returns the PrePassRenderTarget\r\n     * associated with that render target. Otherwise, it returns the scene default PrePassRenderTarget\r\n     */\r\n    public getRenderTarget(): PrePassRenderTarget {\r\n        return this._currentTarget;\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Managed by the scene component\r\n     * @param prePassRenderTarget\r\n     */\r\n    public _setRenderTarget(prePassRenderTarget: Nullable<PrePassRenderTarget>): void {\r\n        if (prePassRenderTarget) {\r\n            this._currentTarget = prePassRenderTarget;\r\n        } else {\r\n            this._currentTarget = this.defaultRT;\r\n        }\r\n        this._engine.currentRenderPassId = this._currentTarget.renderPassId;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the currently rendered prePassRenderTarget is the one\r\n     * associated with the scene.\r\n     */\r\n    public get currentRTisSceneRT(): boolean {\r\n        return this._currentTarget === this.defaultRT;\r\n    }\r\n\r\n    private _geometryBuffer: Nullable<GeometryBufferRenderer>;\r\n\r\n    /**\r\n     * Prevents the PrePassRenderer from using the GeometryBufferRenderer as a fallback\r\n     */\r\n    public doNotUseGeometryRendererFallback = true;\r\n\r\n    private _refreshGeometryBufferRendererLink() {\r\n        if (!this.doNotUseGeometryRendererFallback) {\r\n            this._geometryBuffer = this._scene.enableGeometryBufferRenderer();\r\n\r\n            if (!this._geometryBuffer) {\r\n                // Not supported\r\n                this.doNotUseGeometryRendererFallback = true;\r\n                return;\r\n            }\r\n\r\n            this._geometryBuffer._linkPrePassRenderer(this);\r\n        } else {\r\n            if (this._geometryBuffer) {\r\n                this._geometryBuffer._unlinkPrePassRenderer();\r\n            }\r\n            this._geometryBuffer = null;\r\n            this._scene.disableGeometryBufferRenderer();\r\n        }\r\n    }\r\n\r\n    private _currentTarget: PrePassRenderTarget;\r\n\r\n    /**\r\n     * All the render targets generated by prepass\r\n     */\r\n    public renderTargets: PrePassRenderTarget[] = [];\r\n\r\n    private readonly _clearColor = new Color4(0, 0, 0, 0);\r\n\r\n    private _enabled: boolean = false;\r\n\r\n    private _needsCompositionForThisPass = false;\r\n    private _postProcessesSourceForThisPass: Nullable<PostProcess>[];\r\n\r\n    /**\r\n     * Indicates if the prepass is enabled\r\n     */\r\n    public get enabled() {\r\n        return this._enabled;\r\n    }\r\n\r\n    /**\r\n     * Set to true to disable gamma transform in PrePass.\r\n     * Can be useful in case you already proceed to gamma transform on a material level\r\n     * and your post processes don't need to be in linear color space.\r\n     */\r\n    public disableGammaTransform = false;\r\n\r\n    /**\r\n     * Instantiates a prepass renderer\r\n     * @param scene The scene\r\n     */\r\n    constructor(scene: Scene) {\r\n        this._scene = scene;\r\n        this._engine = scene.getEngine();\r\n\r\n        PrePassRenderer._SceneComponentInitialization(this._scene);\r\n        this.defaultRT = this._createRenderTarget(\"sceneprePassRT\", null);\r\n        this._currentTarget = this.defaultRT;\r\n    }\r\n\r\n    /**\r\n     * Creates a new PrePassRenderTarget\r\n     * This should be the only way to instantiate a `PrePassRenderTarget`\r\n     * @param name Name of the `PrePassRenderTarget`\r\n     * @param renderTargetTexture RenderTarget the `PrePassRenderTarget` will be attached to.\r\n     * Can be `null` if the created `PrePassRenderTarget` is attached to the scene (default framebuffer).\r\n     * @hidden\r\n     */\r\n    public _createRenderTarget(name: string, renderTargetTexture: Nullable<RenderTargetTexture>): PrePassRenderTarget {\r\n        const rt = new PrePassRenderTarget(name, renderTargetTexture, { width: this._engine.getRenderWidth(), height: this._engine.getRenderHeight() }, 0, this._scene, {\r\n            generateMipMaps: false,\r\n            generateStencilBuffer: this._engine.isStencilEnable,\r\n            defaultType: Constants.TEXTURETYPE_UNSIGNED_INT,\r\n            types: [],\r\n            drawOnlyOnFirstAttachmentByDefault: true,\r\n        });\r\n\r\n        this.renderTargets.push(rt);\r\n\r\n        return rt;\r\n    }\r\n\r\n    /**\r\n     * Indicates if rendering a prepass is supported\r\n     */\r\n    public get isSupported() {\r\n        return this._scene.getEngine().getCaps().drawBuffersExtension;\r\n    }\r\n\r\n    /**\r\n     * Sets the proper output textures to draw in the engine.\r\n     * @param effect The effect that is drawn. It can be or not be compatible with drawing to several output textures.\r\n     * @param subMesh Submesh on which the effect is applied\r\n     */\r\n    public bindAttachmentsForEffect(effect: Effect, subMesh: SubMesh) {\r\n        const material = subMesh.getMaterial();\r\n        const isPrePassCapable = material && material.isPrePassCapable;\r\n        const excluded = material && this.excludedMaterials.indexOf(material) !== -1;\r\n\r\n        if (this.enabled && this._currentTarget.enabled) {\r\n            if (effect._multiTarget && isPrePassCapable && !excluded) {\r\n                this._engine.bindAttachments(this._multiRenderAttachments);\r\n            } else {\r\n                if (this._engine._currentRenderTarget) {\r\n                    this._engine.bindAttachments(this._defaultAttachments);\r\n                } else {\r\n                    this._engine.restoreSingleAttachment();\r\n                }\r\n\r\n                if (this._geometryBuffer && this.currentRTisSceneRT && !excluded) {\r\n                    this._geometryBuffer.renderList!.push(subMesh.getRenderingMesh());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _reinitializeAttachments() {\r\n        const multiRenderLayout = [];\r\n        const clearLayout = [false];\r\n        const defaultLayout = [true];\r\n\r\n        for (let i = 0; i < this.mrtCount; i++) {\r\n            multiRenderLayout.push(true);\r\n\r\n            if (i > 0) {\r\n                clearLayout.push(true);\r\n                defaultLayout.push(false);\r\n            }\r\n        }\r\n\r\n        this._multiRenderAttachments = this._engine.buildTextureLayout(multiRenderLayout);\r\n        this._clearAttachments = this._engine.buildTextureLayout(clearLayout);\r\n        this._defaultAttachments = this._engine.buildTextureLayout(defaultLayout);\r\n    }\r\n\r\n    private _resetLayout() {\r\n        for (let i = 0; i < PrePassRenderer._TextureFormats.length; i++) {\r\n            this._textureIndices[PrePassRenderer._TextureFormats[i].type] = -1;\r\n        }\r\n\r\n        this._textureIndices[Constants.PREPASS_COLOR_TEXTURE_TYPE] = 0;\r\n        this._mrtLayout = [Constants.PREPASS_COLOR_TEXTURE_TYPE];\r\n        this._mrtFormats = [PrePassRenderer._TextureFormats[Constants.PREPASS_COLOR_TEXTURE_TYPE].format];\r\n        this._mrtNames = [PrePassRenderer._TextureFormats[Constants.PREPASS_COLOR_TEXTURE_TYPE].name];\r\n        this.mrtCount = 1;\r\n    }\r\n\r\n    private _updateGeometryBufferLayout() {\r\n        this._refreshGeometryBufferRendererLink();\r\n\r\n        if (this._geometryBuffer) {\r\n            this._geometryBuffer._resetLayout();\r\n\r\n            const texturesActivated = [];\r\n\r\n            for (let i = 0; i < this._mrtLayout.length; i++) {\r\n                texturesActivated.push(false);\r\n            }\r\n\r\n            this._geometryBuffer._linkInternalTexture(this.defaultRT.getInternalTexture()!);\r\n\r\n            const matches = [\r\n                {\r\n                    prePassConstant: Constants.PREPASS_DEPTH_TEXTURE_TYPE,\r\n                    geometryBufferConstant: GeometryBufferRenderer.DEPTH_TEXTURE_TYPE,\r\n                },\r\n                {\r\n                    prePassConstant: Constants.PREPASS_NORMAL_TEXTURE_TYPE,\r\n                    geometryBufferConstant: GeometryBufferRenderer.NORMAL_TEXTURE_TYPE,\r\n                },\r\n                {\r\n                    prePassConstant: Constants.PREPASS_POSITION_TEXTURE_TYPE,\r\n                    geometryBufferConstant: GeometryBufferRenderer.POSITION_TEXTURE_TYPE,\r\n                },\r\n                {\r\n                    prePassConstant: Constants.PREPASS_REFLECTIVITY_TEXTURE_TYPE,\r\n                    geometryBufferConstant: GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE,\r\n                },\r\n                {\r\n                    prePassConstant: Constants.PREPASS_VELOCITY_TEXTURE_TYPE,\r\n                    geometryBufferConstant: GeometryBufferRenderer.VELOCITY_TEXTURE_TYPE,\r\n                },\r\n            ];\r\n\r\n            // replace textures in the geometryBuffer RT\r\n            for (let i = 0; i < matches.length; i++) {\r\n                const index = this._mrtLayout.indexOf(matches[i].prePassConstant);\r\n                if (index !== -1) {\r\n                    this._geometryBuffer._forceTextureType(matches[i].geometryBufferConstant, index);\r\n                    texturesActivated[index] = true;\r\n                }\r\n            }\r\n\r\n            this._geometryBuffer._setAttachments(this._engine.buildTextureLayout(texturesActivated));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Restores attachments for single texture draw.\r\n     */\r\n    public restoreAttachments() {\r\n        if (this.enabled && this._currentTarget.enabled && this._defaultAttachments) {\r\n            if (this._engine._currentRenderTarget) {\r\n                this._engine.bindAttachments(this._defaultAttachments);\r\n            } else {\r\n                this._engine.restoreSingleAttachment();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param camera\r\n     * @param faceIndex\r\n     * @param layer\r\n     * @hidden\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public _beforeDraw(camera?: Camera, faceIndex?: number, layer?: number) {\r\n        // const previousEnabled = this._enabled && this._currentTarget.enabled;\r\n\r\n        if (this._isDirty) {\r\n            this._update();\r\n        }\r\n\r\n        if (!this._enabled || !this._currentTarget.enabled) {\r\n            return;\r\n        }\r\n\r\n        if (this._geometryBuffer) {\r\n            this._geometryBuffer.renderList = [];\r\n        }\r\n\r\n        this._setupOutputForThisPass(this._currentTarget, camera);\r\n    }\r\n\r\n    private _prepareFrame(prePassRenderTarget: PrePassRenderTarget, faceIndex?: number, layer?: number) {\r\n        if (prePassRenderTarget.renderTargetTexture) {\r\n            prePassRenderTarget.renderTargetTexture._prepareFrame(this._scene, faceIndex, layer, prePassRenderTarget.renderTargetTexture.useCameraPostProcesses);\r\n        } else if (this._postProcessesSourceForThisPass.length) {\r\n            this._scene.postProcessManager._prepareFrame();\r\n        } else {\r\n            this._engine.restoreDefaultFramebuffer();\r\n        }\r\n    }\r\n\r\n    private _renderPostProcesses(prePassRenderTarget: PrePassRenderTarget, faceIndex?: number) {\r\n        const firstPP = this._postProcessesSourceForThisPass[0];\r\n        const outputTexture = firstPP ? firstPP.inputTexture : prePassRenderTarget.renderTargetTexture ? prePassRenderTarget.renderTargetTexture.renderTarget : null;\r\n\r\n        // Build post process chain for this prepass post draw\r\n        let postProcessChain = this._currentTarget._beforeCompositionPostProcesses;\r\n\r\n        if (this._needsCompositionForThisPass) {\r\n            postProcessChain = postProcessChain.concat([this._currentTarget.imageProcessingPostProcess]);\r\n        }\r\n\r\n        // Activates and renders the chain\r\n        if (postProcessChain.length) {\r\n            this._scene.postProcessManager._prepareFrame(this._currentTarget.renderTarget?.texture, postProcessChain);\r\n            this._scene.postProcessManager.directRender(postProcessChain, outputTexture, false, faceIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param faceIndex\r\n     * @param layer\r\n     * @hidden\r\n     */\r\n    public _afterDraw(faceIndex?: number, layer?: number) {\r\n        if (this._enabled && this._currentTarget.enabled) {\r\n            this._prepareFrame(this._currentTarget, faceIndex, layer);\r\n            this._renderPostProcesses(this._currentTarget, faceIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the current prepass render target (in the sense of settings pixels to the scene clear color value)\r\n     * @hidden\r\n     */\r\n    public _clear() {\r\n        if (this._enabled && this._currentTarget.enabled) {\r\n            this._bindFrameBuffer(this._currentTarget);\r\n\r\n            // Clearing other attachment with 0 on all other attachments\r\n            this._engine.bindAttachments(this._clearAttachments);\r\n            this._engine.clear(this._clearColor, true, false, false);\r\n            // Regular clear color with the scene clear color of the 1st attachment\r\n            this._engine.bindAttachments(this._defaultAttachments);\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _bindFrameBuffer(prePassRenderTarget: PrePassRenderTarget) {\r\n        if (this._enabled && this._currentTarget.enabled) {\r\n            this._currentTarget._checkSize();\r\n            const internalTexture = this._currentTarget.renderTarget;\r\n            if (internalTexture) {\r\n                this._engine.bindFramebuffer(internalTexture);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _setEnabled(enabled: boolean) {\r\n        this._enabled = enabled;\r\n    }\r\n\r\n    private _setRenderTargetEnabled(prePassRenderTarget: PrePassRenderTarget, enabled: boolean) {\r\n        prePassRenderTarget.enabled = enabled;\r\n        if (!enabled) {\r\n            this._unlinkInternalTexture(prePassRenderTarget);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds an effect configuration to the prepass render target.\r\n     * If an effect has already been added, it won't add it twice and will return the configuration\r\n     * already present.\r\n     * @param cfg the effect configuration\r\n     * @return the effect configuration now used by the prepass\r\n     */\r\n    public addEffectConfiguration(cfg: PrePassEffectConfiguration): PrePassEffectConfiguration {\r\n        // Do not add twice\r\n        for (let i = 0; i < this._effectConfigurations.length; i++) {\r\n            if (this._effectConfigurations[i].name === cfg.name) {\r\n                return this._effectConfigurations[i];\r\n            }\r\n        }\r\n\r\n        this._effectConfigurations.push(cfg);\r\n        return cfg;\r\n    }\r\n\r\n    private _enable() {\r\n        const previousMrtCount = this.mrtCount;\r\n\r\n        for (let i = 0; i < this._effectConfigurations.length; i++) {\r\n            if (this._effectConfigurations[i].enabled) {\r\n                this._enableTextures(this._effectConfigurations[i].texturesRequired);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this.renderTargets.length; i++) {\r\n            if (this.mrtCount !== previousMrtCount || this.renderTargets[i].count !== this.mrtCount) {\r\n                this.renderTargets[i].updateCount(this.mrtCount, { types: this._mrtFormats }, this._mrtNames.concat(\"prePass_DepthBuffer\"));\r\n            }\r\n\r\n            this.renderTargets[i]._resetPostProcessChain();\r\n\r\n            for (let j = 0; j < this._effectConfigurations.length; j++) {\r\n                if (this._effectConfigurations[j].enabled) {\r\n                    // TODO : subsurface scattering has 1 scene-wide effect configuration\r\n                    // solution : do not stock postProcess on effectConfiguration, but in the prepassRenderTarget (hashmap configuration => postProcess)\r\n                    // And call createPostProcess whenever the post process does not exist in the RT\r\n                    if (!this._effectConfigurations[j].postProcess && this._effectConfigurations[j].createPostProcess) {\r\n                        this._effectConfigurations[j].createPostProcess!();\r\n                    }\r\n\r\n                    if (this._effectConfigurations[j].postProcess) {\r\n                        this.renderTargets[i]._beforeCompositionPostProcesses.push(this._effectConfigurations[j].postProcess!);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this._reinitializeAttachments();\r\n        this._setEnabled(true);\r\n        this._updateGeometryBufferLayout();\r\n    }\r\n\r\n    private _disable() {\r\n        this._setEnabled(false);\r\n\r\n        for (let i = 0; i < this.renderTargets.length; i++) {\r\n            this._setRenderTargetEnabled(this.renderTargets[i], false);\r\n        }\r\n\r\n        this._resetLayout();\r\n\r\n        for (let i = 0; i < this._effectConfigurations.length; i++) {\r\n            this._effectConfigurations[i].enabled = false;\r\n        }\r\n    }\r\n\r\n    private _getPostProcessesSource(prePassRenderTarget: PrePassRenderTarget, camera?: Camera): Nullable<PostProcess>[] {\r\n        if (camera) {\r\n            return camera._postProcesses;\r\n        } else if (prePassRenderTarget.renderTargetTexture) {\r\n            if (prePassRenderTarget.renderTargetTexture.useCameraPostProcesses) {\r\n                const camera = prePassRenderTarget.renderTargetTexture.activeCamera ? prePassRenderTarget.renderTargetTexture.activeCamera : this._scene.activeCamera;\r\n                return camera ? camera._postProcesses : [];\r\n            } else if (prePassRenderTarget.renderTargetTexture.postProcesses) {\r\n                return prePassRenderTarget.renderTargetTexture.postProcesses;\r\n            } else {\r\n                return [];\r\n            }\r\n        } else {\r\n            return this._scene.activeCamera ? this._scene.activeCamera._postProcesses : [];\r\n        }\r\n    }\r\n\r\n    private _setupOutputForThisPass(prePassRenderTarget: PrePassRenderTarget, camera?: Camera) {\r\n        // Order is : draw ===> prePassRenderTarget._postProcesses ==> ipp ==> camera._postProcesses\r\n        const secondaryCamera = camera && this._scene.activeCameras && !!this._scene.activeCameras.length && this._scene.activeCameras.indexOf(camera) !== 0;\r\n        this._postProcessesSourceForThisPass = this._getPostProcessesSource(prePassRenderTarget, camera);\r\n        this._postProcessesSourceForThisPass = this._postProcessesSourceForThisPass.filter((pp) => {\r\n            return pp != null;\r\n        });\r\n        this._scene.autoClear = true;\r\n\r\n        const cameraHasImageProcessing = this._hasImageProcessing(this._postProcessesSourceForThisPass);\r\n        this._needsCompositionForThisPass = !cameraHasImageProcessing && !this.disableGammaTransform && this._needsImageProcessing() && !secondaryCamera;\r\n\r\n        const firstCameraPP = this._getFirstPostProcess(this._postProcessesSourceForThisPass);\r\n        const firstPrePassPP = prePassRenderTarget._beforeCompositionPostProcesses && prePassRenderTarget._beforeCompositionPostProcesses[0];\r\n        let firstPP = null;\r\n\r\n        // Setting the scene-wide post process configuration\r\n        this._scene.imageProcessingConfiguration.applyByPostProcess = this._needsCompositionForThisPass || cameraHasImageProcessing;\r\n\r\n        // Create composition effect if needed\r\n        if (this._needsCompositionForThisPass && !prePassRenderTarget.imageProcessingPostProcess) {\r\n            prePassRenderTarget._createCompositionEffect();\r\n        }\r\n\r\n        // Setting the prePassRenderTarget as input texture of the first PP\r\n        if (firstPrePassPP) {\r\n            firstPP = firstPrePassPP;\r\n        } else if (this._needsCompositionForThisPass) {\r\n            firstPP = prePassRenderTarget.imageProcessingPostProcess;\r\n        } else if (firstCameraPP) {\r\n            firstPP = firstCameraPP;\r\n        }\r\n\r\n        this._bindFrameBuffer(prePassRenderTarget);\r\n        this._linkInternalTexture(prePassRenderTarget, firstPP);\r\n    }\r\n\r\n    private _linkInternalTexture(prePassRenderTarget: PrePassRenderTarget, postProcess: Nullable<PostProcess>) {\r\n        if (postProcess) {\r\n            postProcess.autoClear = false;\r\n            postProcess.inputTexture = prePassRenderTarget.renderTarget!;\r\n        }\r\n\r\n        if (prePassRenderTarget._outputPostProcess !== postProcess) {\r\n            if (prePassRenderTarget._outputPostProcess) {\r\n                this._unlinkInternalTexture(prePassRenderTarget);\r\n            }\r\n            prePassRenderTarget._outputPostProcess = postProcess;\r\n        }\r\n\r\n        if (prePassRenderTarget._internalTextureDirty) {\r\n            this._updateGeometryBufferLayout();\r\n            prePassRenderTarget._internalTextureDirty = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param prePassRenderTarget\r\n     * @hidden\r\n     */\r\n    public _unlinkInternalTexture(prePassRenderTarget: PrePassRenderTarget) {\r\n        if (prePassRenderTarget._outputPostProcess) {\r\n            prePassRenderTarget._outputPostProcess.autoClear = true;\r\n            prePassRenderTarget._outputPostProcess.restoreDefaultInputTexture();\r\n            prePassRenderTarget._outputPostProcess = null;\r\n        }\r\n    }\r\n\r\n    private _needsImageProcessing(): boolean {\r\n        for (let i = 0; i < this._effectConfigurations.length; i++) {\r\n            if (this._effectConfigurations[i].enabled && this._effectConfigurations[i].needsImageProcessing) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _hasImageProcessing(postProcesses: Nullable<PostProcess>[]): boolean {\r\n        let isIPPAlreadyPresent = false;\r\n        if (postProcesses) {\r\n            for (let i = 0; i < postProcesses.length; i++) {\r\n                if (postProcesses[i]?.getClassName() === \"ImageProcessingPostProcess\") {\r\n                    isIPPAlreadyPresent = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return isIPPAlreadyPresent;\r\n    }\r\n\r\n    /**\r\n     * Internal, gets the first post proces.\r\n     * @param postProcesses\r\n     * @returns the first post process to be run on this camera.\r\n     */\r\n    private _getFirstPostProcess(postProcesses: Nullable<PostProcess>[]): Nullable<PostProcess> {\r\n        for (let ppIndex = 0; ppIndex < postProcesses.length; ppIndex++) {\r\n            if (postProcesses[ppIndex] !== null) {\r\n                return postProcesses[ppIndex];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Marks the prepass renderer as dirty, triggering a check if the prepass is necessary for the next rendering.\r\n     */\r\n    public markAsDirty() {\r\n        this._isDirty = true;\r\n    }\r\n\r\n    /**\r\n     * Enables a texture on the MultiRenderTarget for prepass\r\n     * @param types\r\n     */\r\n    private _enableTextures(types: number[]) {\r\n        // For velocity : enable storage of previous matrices for instances\r\n        this._scene.needsPreviousWorldMatrices = false;\r\n\r\n        for (let i = 0; i < types.length; i++) {\r\n            const type = types[i];\r\n\r\n            if (this._textureIndices[type] === -1) {\r\n                this._textureIndices[type] = this._mrtLayout.length;\r\n                this._mrtLayout.push(type);\r\n\r\n                this._mrtFormats.push(PrePassRenderer._TextureFormats[type].format);\r\n                this._mrtNames.push(PrePassRenderer._TextureFormats[type].name);\r\n                this.mrtCount++;\r\n            }\r\n\r\n            if (type === Constants.PREPASS_VELOCITY_TEXTURE_TYPE) {\r\n                this._scene.needsPreviousWorldMatrices = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _update() {\r\n        this._disable();\r\n        let enablePrePass = false;\r\n        this._scene.imageProcessingConfiguration.applyByPostProcess = false;\r\n\r\n        if (this._scene._depthPeelingRenderer && this._scene.useOrderIndependentTransparency) {\r\n            this._scene._depthPeelingRenderer.setPrePassRenderer(this);\r\n            enablePrePass = true;\r\n        }\r\n\r\n        for (let i = 0; i < this._scene.materials.length; i++) {\r\n            if (this._scene.materials[i].setPrePassRenderer(this)) {\r\n                enablePrePass = true;\r\n            }\r\n        }\r\n\r\n        if (enablePrePass) {\r\n            this._setRenderTargetEnabled(this.defaultRT, true);\r\n        }\r\n\r\n        let postProcesses;\r\n\r\n        for (let i = 0; i < this.renderTargets.length; i++) {\r\n            if (this.renderTargets[i].renderTargetTexture) {\r\n                postProcesses = this._getPostProcessesSource(this.renderTargets[i]);\r\n            } else {\r\n                const camera = this._scene.activeCamera;\r\n                if (!camera) {\r\n                    continue;\r\n                }\r\n\r\n                postProcesses = camera._postProcesses;\r\n            }\r\n\r\n            if (!postProcesses) {\r\n                continue;\r\n            }\r\n\r\n            postProcesses = <Nullable<PostProcess[]>>postProcesses.filter((pp) => {\r\n                return pp != null;\r\n            });\r\n\r\n            if (postProcesses) {\r\n                for (let j = 0; j < postProcesses.length; j++) {\r\n                    if (postProcesses[j].setPrePassRenderer(this)) {\r\n                        this._setRenderTargetEnabled(this.renderTargets[i], true);\r\n                        enablePrePass = true;\r\n                    }\r\n                }\r\n\r\n                if (this._hasImageProcessing(postProcesses)) {\r\n                    this._scene.imageProcessingConfiguration.applyByPostProcess = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._markAllMaterialsAsPrePassDirty();\r\n        this._isDirty = false;\r\n\r\n        if (enablePrePass) {\r\n            this._enable();\r\n        }\r\n    }\r\n\r\n    private _markAllMaterialsAsPrePassDirty() {\r\n        const materials = this._scene.materials;\r\n\r\n        for (let i = 0; i < materials.length; i++) {\r\n            materials[i].markAsDirty(Material.PrePassDirtyFlag);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the prepass renderer.\r\n     */\r\n    public dispose() {\r\n        for (let i = this.renderTargets.length - 1; i >= 0; i--) {\r\n            this.renderTargets[i].dispose();\r\n        }\r\n\r\n        for (let i = 0; i < this._effectConfigurations.length; i++) {\r\n            if (this._effectConfigurations[i].dispose) {\r\n                this._effectConfigurations[i].dispose!();\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}