{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AxesViewer } from \"../Debug/axesViewer.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Axis } from \"../Maths/math.axis.js\";\n/**\n * The BoneAxesViewer will attach 3 axes to a specific bone of a specific mesh\n * @see demo here: https://www.babylonjs-playground.com/#0DE8F4#8\n */\n\nvar BoneAxesViewer =\n/** @class */\nfunction (_super) {\n  __extends(BoneAxesViewer, _super);\n  /**\n   * Creates a new BoneAxesViewer\n   * @param scene defines the hosting scene\n   * @param bone defines the target bone\n   * @param mesh defines the target mesh\n   * @param scaleLines defines a scaling factor for line length (1 by default)\n   */\n\n\n  function BoneAxesViewer(scene, bone, mesh, scaleLines) {\n    if (scaleLines === void 0) {\n      scaleLines = 1;\n    }\n\n    var _this = _super.call(this, scene, scaleLines) || this;\n    /** Gets current position */\n\n\n    _this.pos = Vector3.Zero();\n    /** Gets direction of X axis */\n\n    _this.xaxis = Vector3.Zero();\n    /** Gets direction of Y axis */\n\n    _this.yaxis = Vector3.Zero();\n    /** Gets direction of Z axis */\n\n    _this.zaxis = Vector3.Zero();\n    _this.mesh = mesh;\n    _this.bone = bone;\n    return _this;\n  }\n  /**\n   * Force the viewer to update\n   */\n\n\n  BoneAxesViewer.prototype.update = function () {\n    if (!this.mesh || !this.bone) {\n      return;\n    }\n\n    var bone = this.bone;\n\n    bone._markAsDirtyAndCompose();\n\n    bone.getAbsolutePositionToRef(this.mesh, this.pos);\n    bone.getDirectionToRef(Axis.X, this.mesh, this.xaxis);\n    bone.getDirectionToRef(Axis.Y, this.mesh, this.yaxis);\n    bone.getDirectionToRef(Axis.Z, this.mesh, this.zaxis);\n\n    _super.prototype.update.call(this, this.pos, this.xaxis, this.yaxis, this.zaxis);\n  };\n  /** Releases resources */\n\n\n  BoneAxesViewer.prototype.dispose = function () {\n    if (this.mesh) {\n      this.mesh = null;\n      this.bone = null;\n\n      _super.prototype.dispose.call(this);\n    }\n  };\n\n  return BoneAxesViewer;\n}(AxesViewer);\n\nexport { BoneAxesViewer };","map":{"version":3,"mappings":";AACA,SAASA,UAAT,QAA2B,wBAA3B;AACA,SAASC,OAAT,QAAwB,yBAAxB;AAIA,SAASC,IAAT,QAAqB,uBAArB;AAEA;;;;;AAIA;AAAA;AAAA;AAAoCC;AAmBhC;;;;;;;;;AAOA,0BAAYC,KAAZ,EAA0BC,IAA1B,EAAsCC,IAAtC,EAAkDC,UAAlD,EAAgE;AAAd;AAAAA;AAAc;;AAAhE,gBACIC,kBAAMJ,KAAN,EAAaG,UAAb,KAAwB,IAD5B;AAhBA;;;AACOE,gBAAMR,OAAO,CAACS,IAAR,EAAN;AACP;;AACOD,kBAAQR,OAAO,CAACS,IAAR,EAAR;AACP;;AACOD,kBAAQR,OAAO,CAACS,IAAR,EAAR;AACP;;AACOD,kBAAQR,OAAO,CAACS,IAAR,EAAR;AAYHD,SAAI,CAACH,IAAL,GAAYA,IAAZ;AACAG,SAAI,CAACJ,IAAL,GAAYA,IAAZ;;AACH;AAED;;;;;AAGOM,oCAAP;AACI,QAAI,CAAC,KAAKL,IAAN,IAAc,CAAC,KAAKD,IAAxB,EAA8B;AAC1B;AACH;;AAED,QAAMA,IAAI,GAAG,KAAKA,IAAlB;;AACAA,QAAI,CAACO,sBAAL;;AACAP,QAAI,CAACQ,wBAAL,CAA8B,KAAKP,IAAnC,EAAyC,KAAKQ,GAA9C;AACAT,QAAI,CAACU,iBAAL,CAAuBb,IAAI,CAACc,CAA5B,EAA+B,KAAKV,IAApC,EAA0C,KAAKW,KAA/C;AACAZ,QAAI,CAACU,iBAAL,CAAuBb,IAAI,CAACgB,CAA5B,EAA+B,KAAKZ,IAApC,EAA0C,KAAKa,KAA/C;AACAd,QAAI,CAACU,iBAAL,CAAuBb,IAAI,CAACkB,CAA5B,EAA+B,KAAKd,IAApC,EAA0C,KAAKe,KAA/C;;AAEAb,qBAAMc,MAAN,CAAYC,IAAZ,CAAY,IAAZ,EAAa,KAAKT,GAAlB,EAAuB,KAAKG,KAA5B,EAAmC,KAAKE,KAAxC,EAA+C,KAAKE,KAApD;AACH,GAbM;AAeP;;;AACOV,qCAAP;AACI,QAAI,KAAKL,IAAT,EAAe;AACX,WAAKA,IAAL,GAAY,IAAZ;AACA,WAAKD,IAAL,GAAY,IAAZ;;AAEAG,uBAAMgB,OAAN,CAAaD,IAAb,CAAa,IAAb;AACH;AACJ,GAPM;;AAQX;AAAC,CA5DD,CAAoCvB,UAApC","names":["AxesViewer","Vector3","Axis","__extends","scene","bone","mesh","scaleLines","_super","_this","Zero","BoneAxesViewer","_markAsDirtyAndCompose","getAbsolutePositionToRef","pos","getDirectionToRef","X","xaxis","Y","yaxis","Z","zaxis","update","call","dispose"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Debug/boneAxesViewer.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport { AxesViewer } from \"../Debug/axesViewer\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { Bone } from \"../Bones/bone\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Axis } from \"../Maths/math.axis\";\r\n\r\n/**\r\n * The BoneAxesViewer will attach 3 axes to a specific bone of a specific mesh\r\n * @see demo here: https://www.babylonjs-playground.com/#0DE8F4#8\r\n */\r\nexport class BoneAxesViewer extends AxesViewer {\r\n    /**\r\n     * Gets or sets the target mesh where to display the axes viewer\r\n     */\r\n    public mesh: Nullable<Mesh>;\r\n    /**\r\n     * Gets or sets the target bone where to display the axes viewer\r\n     */\r\n    public bone: Nullable<Bone>;\r\n\r\n    /** Gets current position */\r\n    public pos = Vector3.Zero();\r\n    /** Gets direction of X axis */\r\n    public xaxis = Vector3.Zero();\r\n    /** Gets direction of Y axis */\r\n    public yaxis = Vector3.Zero();\r\n    /** Gets direction of Z axis */\r\n    public zaxis = Vector3.Zero();\r\n\r\n    /**\r\n     * Creates a new BoneAxesViewer\r\n     * @param scene defines the hosting scene\r\n     * @param bone defines the target bone\r\n     * @param mesh defines the target mesh\r\n     * @param scaleLines defines a scaling factor for line length (1 by default)\r\n     */\r\n    constructor(scene: Scene, bone: Bone, mesh: Mesh, scaleLines = 1) {\r\n        super(scene, scaleLines);\r\n\r\n        this.mesh = mesh;\r\n        this.bone = bone;\r\n    }\r\n\r\n    /**\r\n     * Force the viewer to update\r\n     */\r\n    public update(): void {\r\n        if (!this.mesh || !this.bone) {\r\n            return;\r\n        }\r\n\r\n        const bone = this.bone;\r\n        bone._markAsDirtyAndCompose();\r\n        bone.getAbsolutePositionToRef(this.mesh, this.pos);\r\n        bone.getDirectionToRef(Axis.X, this.mesh, this.xaxis);\r\n        bone.getDirectionToRef(Axis.Y, this.mesh, this.yaxis);\r\n        bone.getDirectionToRef(Axis.Z, this.mesh, this.zaxis);\r\n\r\n        super.update(this.pos, this.xaxis, this.yaxis, this.zaxis);\r\n    }\r\n\r\n    /** Releases resources */\r\n    public dispose() {\r\n        if (this.mesh) {\r\n            this.mesh = null;\r\n            this.bone = null;\r\n\r\n            super.dispose();\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}