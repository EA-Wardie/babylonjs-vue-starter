{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { __extends } from \"tslib\";\nimport { FreeCamera } from \"./freeCamera.js\";\nimport { Quaternion, Vector3 } from \"../Maths/math.vector.js\";\nimport { Node } from \"../node.js\";\nimport \"./Inputs/freeCameraDeviceOrientationInput.js\";\nimport { Axis } from \"../Maths/math.axis.js\";\nNode.AddNodeConstructor(\"DeviceOrientationCamera\", function (name, scene) {\n  return function () {\n    return new DeviceOrientationCamera(name, Vector3.Zero(), scene);\n  };\n}); // We're mainly based on the logic defined into the FreeCamera code\n\n/**\n * This is a camera specifically designed to react to device orientation events such as a modern mobile device\n * being tilted forward or back and left or right.\n */\n\nvar DeviceOrientationCamera =\n/** @class */\nfunction (_super) {\n  __extends(DeviceOrientationCamera, _super);\n  /**\n   * Creates a new device orientation camera\n   * @param name The name of the camera\n   * @param position The start position camera\n   * @param scene The scene the camera belongs to\n   */\n\n\n  function DeviceOrientationCamera(name, position, scene) {\n    var _this = _super.call(this, name, position, scene) || this;\n\n    _this._tmpDragQuaternion = new Quaternion();\n    _this._disablePointerInputWhenUsingDeviceOrientation = true;\n    _this._dragFactor = 0;\n    _this._quaternionCache = new Quaternion();\n\n    _this.inputs.addDeviceOrientation(); // When the orientation sensor fires it's first event, disable mouse input\n\n\n    if (_this.inputs._deviceOrientationInput) {\n      _this.inputs._deviceOrientationInput._onDeviceOrientationChangedObservable.addOnce(function () {\n        if (_this._disablePointerInputWhenUsingDeviceOrientation) {\n          if (_this.inputs._mouseInput) {\n            _this.inputs._mouseInput._allowCameraRotation = false;\n\n            _this.inputs._mouseInput.onPointerMovedObservable.add(function (e) {\n              if (_this._dragFactor != 0) {\n                if (!_this._initialQuaternion) {\n                  _this._initialQuaternion = new Quaternion();\n                } // Rotate the initial space around the y axis to allow users to \"turn around\" via touch/mouse\n\n\n                Quaternion.FromEulerAnglesToRef(0, e.offsetX * _this._dragFactor, 0, _this._tmpDragQuaternion);\n\n                _this._initialQuaternion.multiplyToRef(_this._tmpDragQuaternion, _this._initialQuaternion);\n              }\n            });\n          }\n        }\n      });\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(DeviceOrientationCamera.prototype, \"disablePointerInputWhenUsingDeviceOrientation\", {\n    /**\n     * Gets or sets a boolean indicating that pointer input must be disabled on first orientation sensor update (Default: true)\n     */\n    get: function get() {\n      return this._disablePointerInputWhenUsingDeviceOrientation;\n    },\n    set: function set(value) {\n      this._disablePointerInputWhenUsingDeviceOrientation = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Enabled turning on the y axis when the orientation sensor is active\n   * @param dragFactor the factor that controls the turn speed (default: 1/300)\n   */\n\n  DeviceOrientationCamera.prototype.enableHorizontalDragging = function (dragFactor) {\n    if (dragFactor === void 0) {\n      dragFactor = 1 / 300;\n    }\n\n    this._dragFactor = dragFactor;\n  };\n  /**\n   * Gets the current instance class name (\"DeviceOrientationCamera\").\n   * This helps avoiding instanceof at run time.\n   * @returns the class name\n   */\n\n\n  DeviceOrientationCamera.prototype.getClassName = function () {\n    return \"DeviceOrientationCamera\";\n  };\n  /**\n   * @hidden\n   * Checks and applies the current values of the inputs to the camera. (Internal use only)\n   */\n\n\n  DeviceOrientationCamera.prototype._checkInputs = function () {\n    _super.prototype._checkInputs.call(this);\n\n    this._quaternionCache.copyFrom(this.rotationQuaternion);\n\n    if (this._initialQuaternion) {\n      this._initialQuaternion.multiplyToRef(this.rotationQuaternion, this.rotationQuaternion);\n    }\n  };\n  /**\n   * Reset the camera to its default orientation on the specified axis only.\n   * @param axis The axis to reset\n   */\n\n\n  DeviceOrientationCamera.prototype.resetToCurrentRotation = function (axis) {\n    var _this = this;\n\n    if (axis === void 0) {\n      axis = Axis.Y;\n    } //can only work if this camera has a rotation quaternion already.\n\n\n    if (!this.rotationQuaternion) {\n      return;\n    }\n\n    if (!this._initialQuaternion) {\n      this._initialQuaternion = new Quaternion();\n    }\n\n    this._initialQuaternion.copyFrom(this._quaternionCache || this.rotationQuaternion);\n\n    [\"x\", \"y\", \"z\"].forEach(function (axisName) {\n      if (!axis[axisName]) {\n        _this._initialQuaternion[axisName] = 0;\n      } else {\n        _this._initialQuaternion[axisName] *= -1;\n      }\n    });\n\n    this._initialQuaternion.normalize(); //force rotation update\n\n\n    this._initialQuaternion.multiplyToRef(this.rotationQuaternion, this.rotationQuaternion);\n  };\n\n  return DeviceOrientationCamera;\n}(FreeCamera);\n\nexport { DeviceOrientationCamera };","map":{"version":3,"mappings":"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","names":["FreeCamera","Quaternion","Vector3","Node","Axis","AddNodeConstructor","name","scene","DeviceOrientationCamera","Zero","__extends","position","_super","_this","_quaternionCache","inputs","addDeviceOrientation","_deviceOrientationInput","_onDeviceOrientationChangedObservable","addOnce","_disablePointerInputWhenUsingDeviceOrientation","_mouseInput","_allowCameraRotation","onPointerMovedObservable","add","e","_dragFactor","_initialQuaternion","FromEulerAnglesToRef","offsetX","_tmpDragQuaternion","multiplyToRef","Object","value","dragFactor","_checkInputs","call","copyFrom","rotationQuaternion","axis","Y","forEach","axisName","normalize"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Cameras/deviceOrientationCamera.ts"],"sourcesContent":["import { FreeCamera } from \"./freeCamera\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Quaternion, Vector3 } from \"../Maths/math.vector\";\r\nimport { Node } from \"../node\";\r\n\r\nimport \"./Inputs/freeCameraDeviceOrientationInput\";\r\nimport { Axis } from \"../Maths/math.axis\";\r\n\r\nNode.AddNodeConstructor(\"DeviceOrientationCamera\", (name, scene) => {\r\n    return () => new DeviceOrientationCamera(name, Vector3.Zero(), scene);\r\n});\r\n\r\n// We're mainly based on the logic defined into the FreeCamera code\r\n/**\r\n * This is a camera specifically designed to react to device orientation events such as a modern mobile device\r\n * being tilted forward or back and left or right.\r\n */\r\nexport class DeviceOrientationCamera extends FreeCamera {\r\n    private _initialQuaternion: Quaternion;\r\n    private _quaternionCache: Quaternion;\r\n    private _tmpDragQuaternion = new Quaternion();\r\n    private _disablePointerInputWhenUsingDeviceOrientation = true;\r\n\r\n    /**\r\n     * Creates a new device orientation camera\r\n     * @param name The name of the camera\r\n     * @param position The start position camera\r\n     * @param scene The scene the camera belongs to\r\n     */\r\n    constructor(name: string, position: Vector3, scene?: Scene) {\r\n        super(name, position, scene);\r\n        this._quaternionCache = new Quaternion();\r\n        this.inputs.addDeviceOrientation();\r\n\r\n        // When the orientation sensor fires it's first event, disable mouse input\r\n        if (this.inputs._deviceOrientationInput) {\r\n            this.inputs._deviceOrientationInput._onDeviceOrientationChangedObservable.addOnce(() => {\r\n                if (this._disablePointerInputWhenUsingDeviceOrientation) {\r\n                    if (this.inputs._mouseInput) {\r\n                        this.inputs._mouseInput._allowCameraRotation = false;\r\n                        this.inputs._mouseInput.onPointerMovedObservable.add((e) => {\r\n                            if (this._dragFactor != 0) {\r\n                                if (!this._initialQuaternion) {\r\n                                    this._initialQuaternion = new Quaternion();\r\n                                }\r\n                                // Rotate the initial space around the y axis to allow users to \"turn around\" via touch/mouse\r\n                                Quaternion.FromEulerAnglesToRef(0, e.offsetX * this._dragFactor, 0, this._tmpDragQuaternion);\r\n                                this._initialQuaternion.multiplyToRef(this._tmpDragQuaternion, this._initialQuaternion);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that pointer input must be disabled on first orientation sensor update (Default: true)\r\n     */\r\n    public get disablePointerInputWhenUsingDeviceOrientation() {\r\n        return this._disablePointerInputWhenUsingDeviceOrientation;\r\n    }\r\n\r\n    public set disablePointerInputWhenUsingDeviceOrientation(value: boolean) {\r\n        this._disablePointerInputWhenUsingDeviceOrientation = value;\r\n    }\r\n\r\n    private _dragFactor = 0;\r\n    /**\r\n     * Enabled turning on the y axis when the orientation sensor is active\r\n     * @param dragFactor the factor that controls the turn speed (default: 1/300)\r\n     */\r\n    public enableHorizontalDragging(dragFactor = 1 / 300) {\r\n        this._dragFactor = dragFactor;\r\n    }\r\n\r\n    /**\r\n     * Gets the current instance class name (\"DeviceOrientationCamera\").\r\n     * This helps avoiding instanceof at run time.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"DeviceOrientationCamera\";\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Checks and applies the current values of the inputs to the camera. (Internal use only)\r\n     */\r\n    public _checkInputs(): void {\r\n        super._checkInputs();\r\n        this._quaternionCache.copyFrom(this.rotationQuaternion);\r\n        if (this._initialQuaternion) {\r\n            this._initialQuaternion.multiplyToRef(this.rotationQuaternion, this.rotationQuaternion);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset the camera to its default orientation on the specified axis only.\r\n     * @param axis The axis to reset\r\n     */\r\n    public resetToCurrentRotation(axis: Axis = Axis.Y): void {\r\n        //can only work if this camera has a rotation quaternion already.\r\n        if (!this.rotationQuaternion) {\r\n            return;\r\n        }\r\n\r\n        if (!this._initialQuaternion) {\r\n            this._initialQuaternion = new Quaternion();\r\n        }\r\n\r\n        this._initialQuaternion.copyFrom(this._quaternionCache || this.rotationQuaternion);\r\n\r\n        [\"x\", \"y\", \"z\"].forEach((axisName) => {\r\n            if (!(<any>axis)[axisName]) {\r\n                (<any>this._initialQuaternion)[axisName] = 0;\r\n            } else {\r\n                (<any>this._initialQuaternion)[axisName] *= -1;\r\n            }\r\n        });\r\n        this._initialQuaternion.normalize();\r\n        //force rotation update\r\n        this._initialQuaternion.multiplyToRef(this.rotationQuaternion, this.rotationQuaternion);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}