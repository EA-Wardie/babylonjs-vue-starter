{"ast":null,"code":"// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore.js\";\nvar name = \"spriteMapPixelShader\";\nvar shader = \"precision highp float;\\nvarying vec3 vPosition;\\nvarying vec2 vUV;\\nvarying vec2 tUV;\\nuniform float time;\\nuniform float spriteCount;\\nuniform sampler2D spriteSheet;\\nuniform vec2 spriteMapSize;\\nuniform vec2 outputSize;\\nuniform vec2 stageSize;\\nuniform sampler2D frameMap;\\nuniform sampler2D tileMaps[LAYERS];\\nuniform sampler2D animationMap;\\nuniform vec3 colorMul;\\nfloat mt;\\nconst float fdStep=1./4.;\\nconst float aFrameSteps=1./MAX_ANIMATION_FRAMES;\\nmat4 getFrameData(float frameID){\\nfloat fX=frameID/spriteCount;\\nreturn mat4(\\ntexture2D(frameMap,vec2(fX,0.),0.),\\ntexture2D(frameMap,vec2(fX,fdStep*1.),0.),\\ntexture2D(frameMap,vec2(fX,fdStep*2.),0.),\\nvec4(0.)\\n);\\n}\\nvoid main(){\\nvec4 color=vec4(0.);\\nvec2 tileUV=fract(tUV);\\n#ifdef FLIPU\\ntileUV.y=1.0-tileUV.y;\\n#endif\\nvec2 tileID=floor(tUV);\\nvec2 sheetUnits=1./spriteMapSize;\\nfloat spriteUnits=1./spriteCount;\\nvec2 stageUnits=1./stageSize;\\nfor(int i=0; i<LAYERS; i++) {\\nfloat frameID;\\n#define LAYER_ID_SWITCH\\nvec4 animationData=texture2D(animationMap,vec2((frameID+0.5)/spriteCount,0.),0.);\\nif(animationData.y>0.) {\\nmt=mod(time*animationData.z,1.0);\\nfor(float f=0.; f<MAX_ANIMATION_FRAMES; f++){\\nif(animationData.y>mt){\\nframeID=animationData.x;\\nbreak;\\n}\\nanimationData=texture2D(animationMap,vec2((frameID+0.5)/spriteCount,aFrameSteps*f),0.);\\n}\\n}\\nmat4 frameData=getFrameData(frameID+0.5);\\nvec2 frameSize=(frameData[0].zw)/spriteMapSize;\\nvec2 offset=frameData[0].xy*sheetUnits;\\nvec2 ratio=frameData[2].xy/frameData[0].zw;\\nif (frameData[2].z==1.){\\ntileUV.xy=tileUV.yx;\\n}\\nif (i==0){\\ncolor=texture2D(spriteSheet,tileUV*frameSize+offset);\\n} else {\\nvec4 nc=texture2D(spriteSheet,tileUV*frameSize+offset);\\nfloat alpha=min(color.a+nc.a,1.0);\\nvec3 mixed=mix(color.xyz,nc.xyz,nc.a);\\ncolor=vec4(mixed,alpha);\\n}\\n}\\ncolor.xyz*=colorMul;\\ngl_FragColor=color;\\n}\"; // Sideeffect\n\nShaderStore.ShadersStore[name] = shader;\n/** @hidden */\n\nexport var spriteMapPixelShader = {\n  name: name,\n  shader: shader\n};","map":{"version":3,"mappings":"AAAA;AACA,SAASA,WAAT,QAA4B,2BAA5B;AAEA,IAAMC,IAAI,GAAG,sBAAb;AACA,IAAMC,MAAM,GAAG,2zDAAf,C,CAqEA;;AACAF,WAAW,CAACG,YAAZ,CAAyBF,IAAzB,IAAiCC,MAAjC;AACA;;AACA,OAAO,IAAME,oBAAoB,GAAG;AAAEH,MAAI,MAAN;AAAQC,QAAM;AAAd,CAA7B","names":["ShaderStore","name","shader","ShadersStore","spriteMapPixelShader"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Shaders/spriteMap.fragment.ts"],"sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"spriteMapPixelShader\";\nconst shader = `precision highp float;\rvarying vec3 vPosition;\rvarying vec2 vUV;\rvarying vec2 tUV;\runiform float time;\runiform float spriteCount;\runiform sampler2D spriteSheet;\runiform vec2 spriteMapSize;\runiform vec2 outputSize;\runiform vec2 stageSize;\runiform sampler2D frameMap;\runiform sampler2D tileMaps[LAYERS];\runiform sampler2D animationMap;\runiform vec3 colorMul;\rfloat mt;\rconst float fdStep=1./4.;\rconst float aFrameSteps=1./MAX_ANIMATION_FRAMES;\rmat4 getFrameData(float frameID){\rfloat fX=frameID/spriteCount;\rreturn mat4(\rtexture2D(frameMap,vec2(fX,0.),0.),\rtexture2D(frameMap,vec2(fX,fdStep*1.),0.),\rtexture2D(frameMap,vec2(fX,fdStep*2.),0.),\rvec4(0.)\r);\r}\rvoid main(){\rvec4 color=vec4(0.);\rvec2 tileUV=fract(tUV);\r#ifdef FLIPU\ntileUV.y=1.0-tileUV.y;\r#endif\nvec2 tileID=floor(tUV);\rvec2 sheetUnits=1./spriteMapSize;\rfloat spriteUnits=1./spriteCount;\rvec2 stageUnits=1./stageSize;\rfor(int i=0; i<LAYERS; i++) {\rfloat frameID;\r#define LAYER_ID_SWITCH\nvec4 animationData=texture2D(animationMap,vec2((frameID+0.5)/spriteCount,0.),0.);\rif(animationData.y>0.) {\rmt=mod(time*animationData.z,1.0);\rfor(float f=0.; f<MAX_ANIMATION_FRAMES; f++){\rif(animationData.y>mt){\rframeID=animationData.x;\rbreak;\r}\ranimationData=texture2D(animationMap,vec2((frameID+0.5)/spriteCount,aFrameSteps*f),0.);\r}\r}\rmat4 frameData=getFrameData(frameID+0.5);\rvec2 frameSize=(frameData[0].zw)/spriteMapSize;\rvec2 offset=frameData[0].xy*sheetUnits;\rvec2 ratio=frameData[2].xy/frameData[0].zw;\rif (frameData[2].z==1.){\rtileUV.xy=tileUV.yx;\r}\rif (i==0){\rcolor=texture2D(spriteSheet,tileUV*frameSize+offset);\r} else {\rvec4 nc=texture2D(spriteSheet,tileUV*frameSize+offset);\rfloat alpha=min(color.a+nc.a,1.0);\rvec3 mixed=mix(color.xyz,nc.xyz,nc.a);\rcolor=vec4(mixed,alpha);\r}\r}\rcolor.xyz*=colorMul;\rgl_FragColor=color;\r}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @hidden */\nexport const spriteMapPixelShader = { name, shader };\n"]},"metadata":{},"sourceType":"module"}