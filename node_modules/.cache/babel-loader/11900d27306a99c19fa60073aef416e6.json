{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { GLTFLoader } from \"../glTFLoader.js\";\nvar NAME = \"KHR_xmp_json_ld\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_xmp_json_ld)\n * @since 5.0.0\n */\n\nvar KHR_xmp_json_ld =\n/** @class */\nfunction () {\n  /**\n   * @param loader\n   * @hidden\n   */\n  function KHR_xmp_json_ld(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    /**\n     * Defines a number that determines the order the extensions are applied.\n     */\n\n    this.order = 100;\n    this._loader = loader;\n    this.enabled = this._loader.isExtensionUsed(NAME);\n  }\n  /** @hidden */\n\n\n  KHR_xmp_json_ld.prototype.dispose = function () {\n    this._loader = null;\n  };\n  /**\n   * Called after the loader state changes to LOADING.\n   */\n\n\n  KHR_xmp_json_ld.prototype.onLoading = function () {\n    var _a, _b, _c;\n\n    if (this._loader.rootBabylonMesh === null) {\n      return;\n    }\n\n    var xmp_gltf = (_a = this._loader.gltf.extensions) === null || _a === void 0 ? void 0 : _a.KHR_xmp_json_ld;\n    var xmp_node = (_c = (_b = this._loader.gltf.asset) === null || _b === void 0 ? void 0 : _b.extensions) === null || _c === void 0 ? void 0 : _c.KHR_xmp_json_ld;\n\n    if (xmp_gltf && xmp_node) {\n      var packet = +xmp_node.packet;\n\n      if (xmp_gltf.packets && packet < xmp_gltf.packets.length) {\n        this._loader.rootBabylonMesh.metadata = this._loader.rootBabylonMesh.metadata || {};\n        this._loader.rootBabylonMesh.metadata.xmp = xmp_gltf.packets[packet];\n      }\n    }\n  };\n\n  return KHR_xmp_json_ld;\n}();\n\nexport { KHR_xmp_json_ld };\nGLTFLoader.RegisterExtension(NAME, function (loader) {\n  return new KHR_xmp_json_ld(loader);\n});","map":{"version":3,"mappings":";AAEA,SAASA,UAAT,QAA2B,kBAA3B;AAGA,IAAMC,IAAI,GAAG,iBAAb;AAEA;;;;;AAIA;AAAA;AAAA;AAkBI;;;;AAIA,2BAAYC,MAAZ,EAA8B;AArB9B;;;AAGgB,gBAAOD,IAAP;AAOhB;;;;AAGO,iBAAQ,GAAR;AASH,SAAKE,OAAL,GAAeD,MAAf;AACA,SAAKE,OAAL,GAAe,KAAKD,OAAL,CAAaE,eAAb,CAA6BJ,IAA7B,CAAf;AACH;AAED;;;AACOK,sCAAP;AACK,SAAKH,OAAL,GAAuB,IAAvB;AACJ,GAFM;AAIP;;;;;AAGOG,wCAAP;;;AACI,QAAI,KAAKH,OAAL,CAAaI,eAAb,KAAiC,IAArC,EAA2C;AACvC;AACH;;AAED,QAAMC,QAAQ,GAAG,WAAKL,OAAL,CAAaM,IAAb,CAAkBC,UAAlB,MAA4B,IAA5B,IAA4BC,aAA5B,GAA4B,MAA5B,GAA4BA,GAAEL,eAA/C;AACA,QAAMM,QAAQ,GAAG,iBAAKT,OAAL,CAAaM,IAAb,CAAkBI,KAAlB,MAAuB,IAAvB,IAAuBC,aAAvB,GAAuB,MAAvB,GAAuBA,GAAEJ,UAAzB,MAAmC,IAAnC,IAAmCK,aAAnC,GAAmC,MAAnC,GAAmCA,GAAET,eAAtD;;AACA,QAAIE,QAAQ,IAAII,QAAhB,EAA0B;AACtB,UAAMI,MAAM,GAAG,CAACJ,QAAQ,CAACI,MAAzB;;AACA,UAAIR,QAAQ,CAACS,OAAT,IAAoBD,MAAM,GAAGR,QAAQ,CAACS,OAAT,CAAiBC,MAAlD,EAA0D;AACtD,aAAKf,OAAL,CAAaI,eAAb,CAA6BY,QAA7B,GAAwC,KAAKhB,OAAL,CAAaI,eAAb,CAA6BY,QAA7B,IAAyC,EAAjF;AACA,aAAKhB,OAAL,CAAaI,eAAb,CAA6BY,QAA7B,CAAsCC,GAAtC,GAA4CZ,QAAQ,CAACS,OAAT,CAAiBD,MAAjB,CAA5C;AACH;AACJ;AACJ,GAdM;;AAeX;AAAC,CAlDD;;;AAoDAhB,UAAU,CAACqB,iBAAX,CAA6BpB,IAA7B,EAAmC,UAACC,MAAD,EAAO;AAAK,aAAII,eAAJ,CAAoBJ,MAApB;AAA2B,CAA1E","names":["GLTFLoader","NAME","loader","_loader","enabled","isExtensionUsed","KHR_xmp_json_ld","rootBabylonMesh","xmp_gltf","gltf","extensions","_a","xmp_node","asset","_b","_c","packet","packets","length","metadata","xmp","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../../lts/loaders/generated/glTF/2.0/Extensions/KHR_xmp_json_ld.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRXmpJsonLd_Gltf, IKHRXmpJsonLd_Node } from \"babylonjs-gltf2interface\";\r\n\r\nconst NAME = \"KHR_xmp_json_ld\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_xmp_json_ld)\r\n * @since 5.0.0\r\n */\r\nexport class KHR_xmp_json_ld implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 100;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @param loader\r\n     * @hidden\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @hidden */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * Called after the loader state changes to LOADING.\r\n     */\r\n    public onLoading(): void {\r\n        if (this._loader.rootBabylonMesh === null) {\r\n            return;\r\n        }\r\n\r\n        const xmp_gltf = this._loader.gltf.extensions?.KHR_xmp_json_ld as IKHRXmpJsonLd_Gltf;\r\n        const xmp_node = this._loader.gltf.asset?.extensions?.KHR_xmp_json_ld as IKHRXmpJsonLd_Node;\r\n        if (xmp_gltf && xmp_node) {\r\n            const packet = +xmp_node.packet;\r\n            if (xmp_gltf.packets && packet < xmp_gltf.packets.length) {\r\n                this._loader.rootBabylonMesh.metadata = this._loader.rootBabylonMesh.metadata || {};\r\n                this._loader.rootBabylonMesh.metadata.xmp = xmp_gltf.packets[packet];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_xmp_json_ld(loader));\r\n"]},"metadata":{},"sourceType":"module"}