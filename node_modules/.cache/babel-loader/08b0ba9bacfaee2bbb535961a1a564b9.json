{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { InputBlock } from \"./Input/inputBlock.js\";\nimport \"../../../Shaders/ShadersInclude/fresnelFunction.js\";\nimport { ViewDirectionBlock } from \"./viewDirectionBlock.js\";\n/**\n * Block used to compute fresnel value\n */\n\nvar FresnelBlock =\n/** @class */\nfunction (_super) {\n  __extends(FresnelBlock, _super);\n  /**\n   * Create a new FresnelBlock\n   * @param name defines the block name\n   */\n\n\n  function FresnelBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Neutral) || this;\n\n    _this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4);\n\n    _this.registerInput(\"viewDirection\", NodeMaterialBlockConnectionPointTypes.Vector3);\n\n    _this.registerInput(\"bias\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    _this.registerInput(\"power\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    _this.registerOutput(\"fresnel\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    return _this;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  FresnelBlock.prototype.getClassName = function () {\n    return \"FresnelBlock\";\n  };\n\n  Object.defineProperty(FresnelBlock.prototype, \"worldNormal\", {\n    /**\n     * Gets the world normal input component\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FresnelBlock.prototype, \"viewDirection\", {\n    /**\n     * Gets the view direction input component\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FresnelBlock.prototype, \"bias\", {\n    /**\n     * Gets the bias input component\n     */\n    get: function get() {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FresnelBlock.prototype, \"power\", {\n    /**\n     * Gets the camera (or eye) position component\n     */\n    get: function get() {\n      return this._inputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FresnelBlock.prototype, \"fresnel\", {\n    /**\n     * Gets the fresnel output component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  FresnelBlock.prototype.autoConfigure = function (material) {\n    if (!this.viewDirection.isConnected) {\n      var viewDirectionInput = new ViewDirectionBlock(\"View direction\");\n      viewDirectionInput.output.connectTo(this.viewDirection);\n      viewDirectionInput.autoConfigure(material);\n    }\n\n    if (!this.bias.isConnected) {\n      var biasInput = new InputBlock(\"bias\");\n      biasInput.value = 0;\n      biasInput.output.connectTo(this.bias);\n    }\n\n    if (!this.power.isConnected) {\n      var powerInput = new InputBlock(\"power\");\n      powerInput.value = 1;\n      powerInput.output.connectTo(this.power);\n    }\n  };\n\n  FresnelBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var comments = \"//\".concat(this.name);\n\n    state._emitFunctionFromInclude(\"fresnelFunction\", comments, {\n      removeIfDef: true\n    });\n\n    state.compilationString += this._declareOutput(this.fresnel, state) + \" = computeFresnelTerm(\".concat(this.viewDirection.associatedVariableName, \".xyz, \").concat(this.worldNormal.associatedVariableName, \".xyz, \").concat(this.bias.associatedVariableName, \", \").concat(this.power.associatedVariableName, \");\\r\\n\");\n    return this;\n  };\n\n  return FresnelBlock;\n}(NodeMaterialBlock);\n\nexport { FresnelBlock };\nRegisterClass(\"BABYLON.FresnelBlock\", FresnelBlock);","map":{"version":3,"mappings":";;;;AAAA,SAASA,iBAAT,QAAkC,yBAAlC;AACA,SAASC,wBAAT,QAAyC,sCAAzC;AACA,SAASC,qCAAT,QAAsD,mDAAtD;AAGA,SAASC,aAAT,QAA8B,4BAA9B;AACA,SAASC,UAAT,QAA2B,uBAA3B;AAGA,OAAO,oDAAP;AACA,SAASC,kBAAT,QAAmC,yBAAnC;AAEA;;;;AAGA;AAAA;AAAA;AAAkCC;AAC9B;;;;;;AAIA,wBAAmBC,IAAnB,EAA+B;AAA/B,gBACIC,kBAAMD,IAAN,EAAYN,wBAAwB,CAACQ,OAArC,KAA6C,IADjD;;AAGIC,SAAI,CAACC,aAAL,CAAmB,aAAnB,EAAkCT,qCAAqC,CAACU,OAAxE;;AACAF,SAAI,CAACC,aAAL,CAAmB,eAAnB,EAAoCT,qCAAqC,CAACW,OAA1E;;AACAH,SAAI,CAACC,aAAL,CAAmB,MAAnB,EAA2BT,qCAAqC,CAACY,KAAjE;;AACAJ,SAAI,CAACC,aAAL,CAAmB,OAAnB,EAA4BT,qCAAqC,CAACY,KAAlE;;AAEAJ,SAAI,CAACK,cAAL,CAAoB,SAApB,EAA+Bb,qCAAqC,CAACY,KAArE;;;AACH;AAED;;;;;;AAIOE,wCAAP;AACI,WAAO,cAAP;AACH,GAFM;;AAOPC,wBAAWD,sBAAX,EAAW,aAAX,EAAsB;AAHtB;;;SAGA;AACI,aAAO,KAAKE,OAAL,CAAa,CAAb,CAAP;AACH,KAFqB;qBAAA;;AAAA,GAAtB;AAOAD,wBAAWD,sBAAX,EAAW,eAAX,EAAwB;AAHxB;;;SAGA;AACI,aAAO,KAAKE,OAAL,CAAa,CAAb,CAAP;AACH,KAFuB;qBAAA;;AAAA,GAAxB;AAOAD,wBAAWD,sBAAX,EAAW,MAAX,EAAe;AAHf;;;SAGA;AACI,aAAO,KAAKE,OAAL,CAAa,CAAb,CAAP;AACH,KAFc;qBAAA;;AAAA,GAAf;AAOAD,wBAAWD,sBAAX,EAAW,OAAX,EAAgB;AAHhB;;;SAGA;AACI,aAAO,KAAKE,OAAL,CAAa,CAAb,CAAP;AACH,KAFe;qBAAA;;AAAA,GAAhB;AAOAD,wBAAWD,sBAAX,EAAW,SAAX,EAAkB;AAHlB;;;SAGA;AACI,aAAO,KAAKG,QAAL,CAAc,CAAd,CAAP;AACH,KAFiB;qBAAA;;AAAA,GAAlB;;AAIOH,yCAAP,UAAqBI,QAArB,EAA2C;AACvC,QAAI,CAAC,KAAKC,aAAL,CAAmBC,WAAxB,EAAqC;AACjC,UAAMC,kBAAkB,GAAG,IAAIlB,kBAAJ,CAAuB,gBAAvB,CAA3B;AACAkB,wBAAkB,CAACC,MAAnB,CAA0BC,SAA1B,CAAoC,KAAKJ,aAAzC;AACAE,wBAAkB,CAACG,aAAnB,CAAiCN,QAAjC;AACH;;AAED,QAAI,CAAC,KAAKO,IAAL,CAAUL,WAAf,EAA4B;AACxB,UAAMM,SAAS,GAAG,IAAIxB,UAAJ,CAAe,MAAf,CAAlB;AACAwB,eAAS,CAACC,KAAV,GAAkB,CAAlB;AACAD,eAAS,CAACJ,MAAV,CAAiBC,SAAjB,CAA2B,KAAKE,IAAhC;AACH;;AAED,QAAI,CAAC,KAAKG,KAAL,CAAWR,WAAhB,EAA6B;AACzB,UAAMS,UAAU,GAAG,IAAI3B,UAAJ,CAAe,OAAf,CAAnB;AACA2B,gBAAU,CAACF,KAAX,GAAmB,CAAnB;AACAE,gBAAU,CAACP,MAAX,CAAkBC,SAAlB,CAA4B,KAAKK,KAAjC;AACH;AACJ,GAlBM;;AAoBGd,uCAAV,UAAsBgB,KAAtB,EAAmD;AAC/CxB,qBAAMyB,WAAN,CAAiBC,IAAjB,CAAiB,IAAjB,EAAkBF,KAAlB;;AAEA,QAAMG,QAAQ,GAAG,YAAK,KAAK5B,IAAV,CAAjB;;AAEAyB,SAAK,CAACI,wBAAN,CAA+B,iBAA/B,EAAkDD,QAAlD,EAA4D;AAAEE,iBAAW,EAAE;AAAf,KAA5D;;AAEAL,SAAK,CAACM,iBAAN,IACI,KAAKC,cAAL,CAAoB,KAAKC,OAAzB,EAAkCR,KAAlC,IACA,gCAAyB,KAAKX,aAAL,CAAmBoB,sBAA5C,EAAkE,QAAlE,EAAkEC,MAAlE,CAA2E,KAAKC,WAAL,CAAiBF,sBAA5F,EAAkH,QAAlH,EAAkHC,MAAlH,CAA2H,KAAKf,IAAL,CAAUc,sBAArI,EAA2J,IAA3J,EAA2JC,MAA3J,CAAgK,KAAKZ,KAAL,CAAWW,sBAA3K,EAAiM,QAAjM,CAFJ;AAIA,WAAO,IAAP;AACH,GAZS;;AAad;AAAC,CA5FD,CAAkCzC,iBAAlC;;;AA8FAG,aAAa,CAAC,sBAAD,EAAyBa,YAAzB,CAAb","names":["NodeMaterialBlock","NodeMaterialBlockTargets","NodeMaterialBlockConnectionPointTypes","RegisterClass","InputBlock","ViewDirectionBlock","__extends","name","_super","Neutral","_this","registerInput","Vector4","Vector3","Float","registerOutput","FresnelBlock","Object","_inputs","_outputs","material","viewDirection","isConnected","viewDirectionInput","output","connectTo","autoConfigure","bias","biasInput","value","power","powerInput","state","_buildBlock","call","comments","_emitFunctionFromInclude","removeIfDef","compilationString","_declareOutput","fresnel","associatedVariableName","concat","worldNormal"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Node/Blocks/fresnelBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { InputBlock } from \"./Input/inputBlock\";\r\nimport type { NodeMaterial } from \"../nodeMaterial\";\r\n\r\nimport \"../../../Shaders/ShadersInclude/fresnelFunction\";\r\nimport { ViewDirectionBlock } from \"./viewDirectionBlock\";\r\n\r\n/**\r\n * Block used to compute fresnel value\r\n */\r\nexport class FresnelBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Create a new FresnelBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerInput(\"viewDirection\", NodeMaterialBlockConnectionPointTypes.Vector3);\r\n        this.registerInput(\"bias\", NodeMaterialBlockConnectionPointTypes.Float);\r\n        this.registerInput(\"power\", NodeMaterialBlockConnectionPointTypes.Float);\r\n\r\n        this.registerOutput(\"fresnel\", NodeMaterialBlockConnectionPointTypes.Float);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"FresnelBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the world normal input component\r\n     */\r\n    public get worldNormal(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the view direction input component\r\n     */\r\n    public get viewDirection(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the bias input component\r\n     */\r\n    public get bias(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the camera (or eye) position component\r\n     */\r\n    public get power(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the fresnel output component\r\n     */\r\n    public get fresnel(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public autoConfigure(material: NodeMaterial) {\r\n        if (!this.viewDirection.isConnected) {\r\n            const viewDirectionInput = new ViewDirectionBlock(\"View direction\");\r\n            viewDirectionInput.output.connectTo(this.viewDirection);\r\n            viewDirectionInput.autoConfigure(material);\r\n        }\r\n\r\n        if (!this.bias.isConnected) {\r\n            const biasInput = new InputBlock(\"bias\");\r\n            biasInput.value = 0;\r\n            biasInput.output.connectTo(this.bias);\r\n        }\r\n\r\n        if (!this.power.isConnected) {\r\n            const powerInput = new InputBlock(\"power\");\r\n            powerInput.value = 1;\r\n            powerInput.output.connectTo(this.power);\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const comments = `//${this.name}`;\r\n\r\n        state._emitFunctionFromInclude(\"fresnelFunction\", comments, { removeIfDef: true });\r\n\r\n        state.compilationString +=\r\n            this._declareOutput(this.fresnel, state) +\r\n            ` = computeFresnelTerm(${this.viewDirection.associatedVariableName}.xyz, ${this.worldNormal.associatedVariableName}.xyz, ${this.bias.associatedVariableName}, ${this.power.associatedVariableName});\\r\\n`;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.FresnelBlock\", FresnelBlock);\r\n"]},"metadata":{},"sourceType":"module"}