{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport \"../Shaders/colorCorrection.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { SerializationHelper, serialize } from \"../Misc/decorators.js\";\n/**\n *\n * This post-process allows the modification of rendered colors by using\n * a 'look-up table' (LUT). This effect is also called Color Grading.\n *\n * The object needs to be provided an url to a texture containing the color\n * look-up table: the texture must be 256 pixels wide and 16 pixels high.\n * Use an image editing software to tweak the LUT to match your needs.\n *\n * For an example of a color LUT, see here:\n * @see http://udn.epicgames.com/Three/rsrc/Three/ColorGrading/RGBTable16x1.png\n * For explanations on color grading, see here:\n * @see http://udn.epicgames.com/Three/ColorGrading.html\n *\n */\n\nvar ColorCorrectionPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(ColorCorrectionPostProcess, _super);\n\n  function ColorCorrectionPostProcess(name, colorTableUrl, options, camera, samplingMode, engine, reusable) {\n    var _this = _super.call(this, name, \"colorCorrection\", null, [\"colorTable\"], options, camera, samplingMode, engine, reusable) || this;\n\n    _this._colorTableTexture = new Texture(colorTableUrl, camera.getScene(), true, false, Texture.TRILINEAR_SAMPLINGMODE);\n    _this._colorTableTexture.anisotropicFilteringLevel = 1;\n    _this._colorTableTexture.wrapU = Texture.CLAMP_ADDRESSMODE;\n    _this._colorTableTexture.wrapV = Texture.CLAMP_ADDRESSMODE;\n    _this.colorTableUrl = colorTableUrl;\n\n    _this.onApply = function (effect) {\n      effect.setTexture(\"colorTable\", _this._colorTableTexture);\n    };\n\n    return _this;\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"ColorCorrectionPostProcess\" string\n   */\n\n\n  ColorCorrectionPostProcess.prototype.getClassName = function () {\n    return \"ColorCorrectionPostProcess\";\n  };\n  /**\n   * @param parsedPostProcess\n   * @param targetCamera\n   * @param scene\n   * @param rootUrl\n   * @hidden\n   */\n\n\n  ColorCorrectionPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new ColorCorrectionPostProcess(parsedPostProcess.name, parsedPostProcess.colorTableUrl, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  __decorate([serialize()], ColorCorrectionPostProcess.prototype, \"colorTableUrl\", void 0);\n\n  return ColorCorrectionPostProcess;\n}(PostProcess);\n\nexport { ColorCorrectionPostProcess };\nRegisterClass(\"BABYLON.ColorCorrectionPostProcess\", ColorCorrectionPostProcess);","map":{"version":3,"mappings":";;AACA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,SAASC,OAAT,QAAwB,kCAAxB;AAIA,OAAO,wCAAP;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,mBAAT,EAA8BC,SAA9B,QAA+C,uBAA/C;AAKA;;;;;;;;;;;;;;;;AAeA;AAAA;AAAA;AAAgDC;;AAiB5C,sCAAYC,IAAZ,EAA0BC,aAA1B,EAAiDC,OAAjD,EAAuFC,MAAvF,EAAuGC,YAAvG,EAA8HC,MAA9H,EAA+IC,QAA/I,EAAiK;AAAjK,gBACIC,kBAAMP,IAAN,EAAY,iBAAZ,EAA+B,IAA/B,EAAqC,CAAC,YAAD,CAArC,EAAqDE,OAArD,EAA8DC,MAA9D,EAAsEC,YAAtE,EAAoFC,MAApF,EAA4FC,QAA5F,KAAqG,IADzG;;AAGIE,SAAI,CAACC,kBAAL,GAA0B,IAAId,OAAJ,CAAYM,aAAZ,EAA2BE,MAAM,CAACO,QAAP,EAA3B,EAA8C,IAA9C,EAAoD,KAApD,EAA2Df,OAAO,CAACgB,sBAAnE,CAA1B;AACAH,SAAI,CAACC,kBAAL,CAAwBG,yBAAxB,GAAoD,CAApD;AACAJ,SAAI,CAACC,kBAAL,CAAwBI,KAAxB,GAAgClB,OAAO,CAACmB,iBAAxC;AACAN,SAAI,CAACC,kBAAL,CAAwBM,KAAxB,GAAgCpB,OAAO,CAACmB,iBAAxC;AAEAN,SAAI,CAACP,aAAL,GAAqBA,aAArB;;AAEAO,SAAI,CAACQ,OAAL,GAAe,UAACC,MAAD,EAAe;AAC1BA,YAAM,CAACC,UAAP,CAAkB,YAAlB,EAAgCV,KAAI,CAACC,kBAArC;AACH,KAFD;;;AAGH;AArBD;;;;;;AAIOU,sDAAP;AACI,WAAO,4BAAP;AACH,GAFM;AAmBP;;;;;;;;;AAOcA,sCAAd,UAAqBC,iBAArB,EAA6CC,YAA7C,EAAmEC,KAAnE,EAAiFC,OAAjF,EAAgG;AAC5F,WAAO1B,mBAAmB,CAAC2B,KAApB,CACH;AACI,aAAO,IAAIL,0BAAJ,CACHC,iBAAiB,CAACpB,IADf,EAEHoB,iBAAiB,CAACnB,aAFf,EAGHmB,iBAAiB,CAAClB,OAHf,EAIHmB,YAJG,EAKHD,iBAAiB,CAACK,wBALf,EAMHH,KAAK,CAACI,SAAN,EANG,EAOHN,iBAAiB,CAACd,QAPf,CAAP;AASH,KAXE,EAYHc,iBAZG,EAaHE,KAbG,EAcHC,OAdG,CAAP;AAgBH,GAjBa;;AAhCdI,cADC7B,SAAS,EACV;;AAkDJ;AAAC,CAzDD,CAAgDJ,WAAhD;;SAAayB;AA2DbvB,aAAa,CAAC,oCAAD,EAAuCuB,0BAAvC,CAAb","names":["PostProcess","Texture","RegisterClass","SerializationHelper","serialize","__extends","name","colorTableUrl","options","camera","samplingMode","engine","reusable","_super","_this","_colorTableTexture","getScene","TRILINEAR_SAMPLINGMODE","anisotropicFilteringLevel","wrapU","CLAMP_ADDRESSMODE","wrapV","onApply","effect","setTexture","ColorCorrectionPostProcess","parsedPostProcess","targetCamera","scene","rootUrl","Parse","renderTargetSamplingMode","getEngine","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/PostProcesses/colorCorrectionPostProcess.ts"],"sourcesContent":["import type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\n\r\nimport \"../Shaders/colorCorrection.fragment\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { SerializationHelper, serialize } from \"../Misc/decorators\";\r\nimport type { Nullable } from \"../types\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n *\r\n * This post-process allows the modification of rendered colors by using\r\n * a 'look-up table' (LUT). This effect is also called Color Grading.\r\n *\r\n * The object needs to be provided an url to a texture containing the color\r\n * look-up table: the texture must be 256 pixels wide and 16 pixels high.\r\n * Use an image editing software to tweak the LUT to match your needs.\r\n *\r\n * For an example of a color LUT, see here:\r\n * @see http://udn.epicgames.com/Three/rsrc/Three/ColorGrading/RGBTable16x1.png\r\n * For explanations on color grading, see here:\r\n * @see http://udn.epicgames.com/Three/ColorGrading.html\r\n *\r\n */\r\nexport class ColorCorrectionPostProcess extends PostProcess {\r\n    private _colorTableTexture: Texture;\r\n\r\n    /**\r\n     * Gets the color table url used to create the LUT texture\r\n     */\r\n    @serialize()\r\n    public colorTableUrl: string;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"ColorCorrectionPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"ColorCorrectionPostProcess\";\r\n    }\r\n\r\n    constructor(name: string, colorTableUrl: string, options: number | PostProcessOptions, camera: Camera, samplingMode?: number, engine?: Engine, reusable?: boolean) {\r\n        super(name, \"colorCorrection\", null, [\"colorTable\"], options, camera, samplingMode, engine, reusable);\r\n\r\n        this._colorTableTexture = new Texture(colorTableUrl, camera.getScene(), true, false, Texture.TRILINEAR_SAMPLINGMODE);\r\n        this._colorTableTexture.anisotropicFilteringLevel = 1;\r\n        this._colorTableTexture.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n        this._colorTableTexture.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n\r\n        this.colorTableUrl = colorTableUrl;\r\n\r\n        this.onApply = (effect: Effect) => {\r\n            effect.setTexture(\"colorTable\", this._colorTableTexture);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @param parsedPostProcess\r\n     * @param targetCamera\r\n     * @param scene\r\n     * @param rootUrl\r\n     * @hidden\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string): Nullable<ColorCorrectionPostProcess> {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new ColorCorrectionPostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.colorTableUrl,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    scene.getEngine(),\r\n                    parsedPostProcess.reusable\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ColorCorrectionPostProcess\", ColorCorrectionPostProcess);\r\n"]},"metadata":{},"sourceType":"module"}