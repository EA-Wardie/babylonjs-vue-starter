{"ast":null,"code":"import \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport { Tools } from \"../Misc/tools.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\n/**\n * Class used to work with sound analyzer using fast fourier transform (FFT)\n * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music\n */\n\nvar Analyser =\n/** @class */\nfunction () {\n  /**\n   * Creates a new analyser\n   * @param scene defines hosting scene\n   */\n  function Analyser(scene) {\n    /**\n     * Gets or sets the smoothing\n     * @ignorenaming\n     */\n    this.SMOOTHING = 0.75;\n    /**\n     * Gets or sets the FFT table size\n     * @ignorenaming\n     */\n\n    this.FFT_SIZE = 512;\n    /**\n     * Gets or sets the bar graph amplitude\n     * @ignorenaming\n     */\n\n    this.BARGRAPHAMPLITUDE = 256;\n    /**\n     * Gets or sets the position of the debug canvas\n     * @ignorenaming\n     */\n\n    this.DEBUGCANVASPOS = {\n      x: 20,\n      y: 20\n    };\n    /**\n     * Gets or sets the debug canvas size\n     * @ignorenaming\n     */\n\n    this.DEBUGCANVASSIZE = {\n      width: 320,\n      height: 200\n    };\n    scene = scene || EngineStore.LastCreatedScene;\n\n    if (!scene) {\n      return;\n    }\n\n    this._scene = scene;\n\n    if (!Engine.audioEngine) {\n      Tools.Warn(\"No audio engine initialized, failed to create an audio analyser\");\n      return;\n    }\n\n    this._audioEngine = Engine.audioEngine;\n\n    if (this._audioEngine.canUseWebAudio && this._audioEngine.audioContext) {\n      this._webAudioAnalyser = this._audioEngine.audioContext.createAnalyser();\n      this._webAudioAnalyser.minDecibels = -140;\n      this._webAudioAnalyser.maxDecibels = 0;\n      this._byteFreqs = new Uint8Array(this._webAudioAnalyser.frequencyBinCount);\n      this._byteTime = new Uint8Array(this._webAudioAnalyser.frequencyBinCount);\n      this._floatFreqs = new Float32Array(this._webAudioAnalyser.frequencyBinCount);\n    }\n  }\n  /**\n   * Get the number of data values you will have to play with for the visualization\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/frequencyBinCount\n   * @returns a number\n   */\n\n\n  Analyser.prototype.getFrequencyBinCount = function () {\n    if (this._audioEngine.canUseWebAudio) {\n      return this._webAudioAnalyser.frequencyBinCount;\n    } else {\n      return 0;\n    }\n  };\n  /**\n   * Gets the current frequency data as a byte array\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData\n   * @returns a Uint8Array\n   */\n\n\n  Analyser.prototype.getByteFrequencyData = function () {\n    if (this._audioEngine.canUseWebAudio) {\n      this._webAudioAnalyser.smoothingTimeConstant = this.SMOOTHING;\n      this._webAudioAnalyser.fftSize = this.FFT_SIZE;\n\n      this._webAudioAnalyser.getByteFrequencyData(this._byteFreqs);\n    }\n\n    return this._byteFreqs;\n  };\n  /**\n   * Gets the current waveform as a byte array\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteTimeDomainData\n   * @returns a Uint8Array\n   */\n\n\n  Analyser.prototype.getByteTimeDomainData = function () {\n    if (this._audioEngine.canUseWebAudio) {\n      this._webAudioAnalyser.smoothingTimeConstant = this.SMOOTHING;\n      this._webAudioAnalyser.fftSize = this.FFT_SIZE;\n\n      this._webAudioAnalyser.getByteTimeDomainData(this._byteTime);\n    }\n\n    return this._byteTime;\n  };\n  /**\n   * Gets the current frequency data as a float array\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData\n   * @returns a Float32Array\n   */\n\n\n  Analyser.prototype.getFloatFrequencyData = function () {\n    if (this._audioEngine.canUseWebAudio) {\n      this._webAudioAnalyser.smoothingTimeConstant = this.SMOOTHING;\n      this._webAudioAnalyser.fftSize = this.FFT_SIZE;\n\n      this._webAudioAnalyser.getFloatFrequencyData(this._floatFreqs);\n    }\n\n    return this._floatFreqs;\n  };\n  /**\n   * Renders the debug canvas\n   */\n\n\n  Analyser.prototype.drawDebugCanvas = function () {\n    var _this = this;\n\n    if (this._audioEngine.canUseWebAudio) {\n      if (!this._debugCanvas) {\n        this._debugCanvas = document.createElement(\"canvas\");\n        this._debugCanvas.width = this.DEBUGCANVASSIZE.width;\n        this._debugCanvas.height = this.DEBUGCANVASSIZE.height;\n        this._debugCanvas.style.position = \"absolute\";\n        this._debugCanvas.style.top = this.DEBUGCANVASPOS.y + \"px\";\n        this._debugCanvas.style.left = this.DEBUGCANVASPOS.x + \"px\";\n        this._debugCanvasContext = this._debugCanvas.getContext(\"2d\");\n        document.body.appendChild(this._debugCanvas);\n\n        this._registerFunc = function () {\n          _this.drawDebugCanvas();\n        };\n\n        this._scene.registerBeforeRender(this._registerFunc);\n      }\n\n      if (this._registerFunc && this._debugCanvasContext) {\n        var workingArray = this.getByteFrequencyData();\n        this._debugCanvasContext.fillStyle = \"rgb(0, 0, 0)\";\n\n        this._debugCanvasContext.fillRect(0, 0, this.DEBUGCANVASSIZE.width, this.DEBUGCANVASSIZE.height); // Draw the frequency domain chart.\n\n\n        for (var i = 0; i < this.getFrequencyBinCount(); i++) {\n          var value = workingArray[i];\n          var percent = value / this.BARGRAPHAMPLITUDE;\n          var height = this.DEBUGCANVASSIZE.height * percent;\n          var offset = this.DEBUGCANVASSIZE.height - height - 1;\n          var barWidth = this.DEBUGCANVASSIZE.width / this.getFrequencyBinCount();\n          var hue = i / this.getFrequencyBinCount() * 360;\n          this._debugCanvasContext.fillStyle = \"hsl(\" + hue + \", 100%, 50%)\";\n\n          this._debugCanvasContext.fillRect(i * barWidth, offset, barWidth, height);\n        }\n      }\n    }\n  };\n  /**\n   * Stops rendering the debug canvas and removes it\n   */\n\n\n  Analyser.prototype.stopDebugCanvas = function () {\n    if (this._debugCanvas) {\n      if (this._registerFunc) {\n        this._scene.unregisterBeforeRender(this._registerFunc);\n\n        this._registerFunc = null;\n      }\n\n      document.body.removeChild(this._debugCanvas);\n      this._debugCanvas = null;\n      this._debugCanvasContext = null;\n    }\n  };\n  /**\n   * Connects two audio nodes\n   * @param inputAudioNode defines first node to connect\n   * @param outputAudioNode defines second node to connect\n   */\n\n\n  Analyser.prototype.connectAudioNodes = function (inputAudioNode, outputAudioNode) {\n    if (this._audioEngine.canUseWebAudio) {\n      inputAudioNode.connect(this._webAudioAnalyser);\n\n      this._webAudioAnalyser.connect(outputAudioNode);\n    }\n  };\n  /**\n   * Releases all associated resources\n   */\n\n\n  Analyser.prototype.dispose = function () {\n    if (this._audioEngine.canUseWebAudio) {\n      this._webAudioAnalyser.disconnect();\n    }\n  };\n\n  return Analyser;\n}();\n\nexport { Analyser };","map":{"version":3,"mappings":"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","names":["Engine","Tools","EngineStore","scene","x","y","width","height","LastCreatedScene","_scene","audioEngine","Warn","_audioEngine","canUseWebAudio","audioContext","_webAudioAnalyser","createAnalyser","minDecibels","maxDecibels","_byteFreqs","Uint8Array","frequencyBinCount","_byteTime","_floatFreqs","Float32Array","Analyser","smoothingTimeConstant","SMOOTHING","fftSize","FFT_SIZE","getByteFrequencyData","getByteTimeDomainData","getFloatFrequencyData","_debugCanvas","document","createElement","DEBUGCANVASSIZE","style","position","top","DEBUGCANVASPOS","left","_debugCanvasContext","getContext","body","appendChild","_registerFunc","_this","drawDebugCanvas","registerBeforeRender","workingArray","fillStyle","fillRect","i","getFrequencyBinCount","value","percent","BARGRAPHAMPLITUDE","offset","barWidth","hue","unregisterBeforeRender","removeChild","inputAudioNode","outputAudioNode","connect","disconnect"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Audio/analyser.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport type { IAudioEngine } from \"./Interfaces/IAudioEngine\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\n\r\n/**\r\n * Class used to work with sound analyzer using fast fourier transform (FFT)\r\n * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music\r\n */\r\nexport class Analyser {\r\n    /**\r\n     * Gets or sets the smoothing\r\n     * @ignorenaming\r\n     */\r\n    public SMOOTHING = 0.75;\r\n    /**\r\n     * Gets or sets the FFT table size\r\n     * @ignorenaming\r\n     */\r\n    public FFT_SIZE = 512;\r\n    /**\r\n     * Gets or sets the bar graph amplitude\r\n     * @ignorenaming\r\n     */\r\n    public BARGRAPHAMPLITUDE = 256;\r\n    /**\r\n     * Gets or sets the position of the debug canvas\r\n     * @ignorenaming\r\n     */\r\n    public DEBUGCANVASPOS = { x: 20, y: 20 };\r\n    /**\r\n     * Gets or sets the debug canvas size\r\n     * @ignorenaming\r\n     */\r\n    public DEBUGCANVASSIZE = { width: 320, height: 200 };\r\n\r\n    private _byteFreqs: Uint8Array;\r\n    private _byteTime: Uint8Array;\r\n    private _floatFreqs: Float32Array;\r\n    private _webAudioAnalyser: AnalyserNode;\r\n    private _debugCanvas: Nullable<HTMLCanvasElement>;\r\n    private _debugCanvasContext: Nullable<CanvasRenderingContext2D>;\r\n    private _scene: Scene;\r\n    private _registerFunc: Nullable<() => void>;\r\n    private _audioEngine: IAudioEngine;\r\n\r\n    /**\r\n     * Creates a new analyser\r\n     * @param scene defines hosting scene\r\n     */\r\n    constructor(scene?: Nullable<Scene>) {\r\n        scene = scene || EngineStore.LastCreatedScene;\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._scene = scene;\r\n        if (!Engine.audioEngine) {\r\n            Tools.Warn(\"No audio engine initialized, failed to create an audio analyser\");\r\n            return;\r\n        }\r\n        this._audioEngine = Engine.audioEngine;\r\n        if (this._audioEngine.canUseWebAudio && this._audioEngine.audioContext) {\r\n            this._webAudioAnalyser = this._audioEngine.audioContext.createAnalyser();\r\n            this._webAudioAnalyser.minDecibels = -140;\r\n            this._webAudioAnalyser.maxDecibels = 0;\r\n            this._byteFreqs = new Uint8Array(this._webAudioAnalyser.frequencyBinCount);\r\n            this._byteTime = new Uint8Array(this._webAudioAnalyser.frequencyBinCount);\r\n            this._floatFreqs = new Float32Array(this._webAudioAnalyser.frequencyBinCount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the number of data values you will have to play with for the visualization\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/frequencyBinCount\r\n     * @returns a number\r\n     */\r\n    public getFrequencyBinCount(): number {\r\n        if (this._audioEngine.canUseWebAudio) {\r\n            return this._webAudioAnalyser.frequencyBinCount;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current frequency data as a byte array\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData\r\n     * @returns a Uint8Array\r\n     */\r\n    public getByteFrequencyData(): Uint8Array {\r\n        if (this._audioEngine.canUseWebAudio) {\r\n            this._webAudioAnalyser.smoothingTimeConstant = this.SMOOTHING;\r\n            this._webAudioAnalyser.fftSize = this.FFT_SIZE;\r\n            this._webAudioAnalyser.getByteFrequencyData(this._byteFreqs);\r\n        }\r\n        return this._byteFreqs;\r\n    }\r\n\r\n    /**\r\n     * Gets the current waveform as a byte array\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteTimeDomainData\r\n     * @returns a Uint8Array\r\n     */\r\n    public getByteTimeDomainData(): Uint8Array {\r\n        if (this._audioEngine.canUseWebAudio) {\r\n            this._webAudioAnalyser.smoothingTimeConstant = this.SMOOTHING;\r\n            this._webAudioAnalyser.fftSize = this.FFT_SIZE;\r\n            this._webAudioAnalyser.getByteTimeDomainData(this._byteTime);\r\n        }\r\n        return this._byteTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the current frequency data as a float array\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData\r\n     * @returns a Float32Array\r\n     */\r\n    public getFloatFrequencyData(): Float32Array {\r\n        if (this._audioEngine.canUseWebAudio) {\r\n            this._webAudioAnalyser.smoothingTimeConstant = this.SMOOTHING;\r\n            this._webAudioAnalyser.fftSize = this.FFT_SIZE;\r\n            this._webAudioAnalyser.getFloatFrequencyData(this._floatFreqs);\r\n        }\r\n        return this._floatFreqs;\r\n    }\r\n\r\n    /**\r\n     * Renders the debug canvas\r\n     */\r\n    public drawDebugCanvas() {\r\n        if (this._audioEngine.canUseWebAudio) {\r\n            if (!this._debugCanvas) {\r\n                this._debugCanvas = document.createElement(\"canvas\");\r\n                this._debugCanvas.width = this.DEBUGCANVASSIZE.width;\r\n                this._debugCanvas.height = this.DEBUGCANVASSIZE.height;\r\n                this._debugCanvas.style.position = \"absolute\";\r\n                this._debugCanvas.style.top = this.DEBUGCANVASPOS.y + \"px\";\r\n                this._debugCanvas.style.left = this.DEBUGCANVASPOS.x + \"px\";\r\n                this._debugCanvasContext = this._debugCanvas.getContext(\"2d\");\r\n                document.body.appendChild(this._debugCanvas);\r\n                this._registerFunc = () => {\r\n                    this.drawDebugCanvas();\r\n                };\r\n                this._scene.registerBeforeRender(this._registerFunc);\r\n            }\r\n            if (this._registerFunc && this._debugCanvasContext) {\r\n                const workingArray = this.getByteFrequencyData();\r\n\r\n                this._debugCanvasContext.fillStyle = \"rgb(0, 0, 0)\";\r\n                this._debugCanvasContext.fillRect(0, 0, this.DEBUGCANVASSIZE.width, this.DEBUGCANVASSIZE.height);\r\n\r\n                // Draw the frequency domain chart.\r\n                for (let i = 0; i < this.getFrequencyBinCount(); i++) {\r\n                    const value = workingArray[i];\r\n                    const percent = value / this.BARGRAPHAMPLITUDE;\r\n                    const height = this.DEBUGCANVASSIZE.height * percent;\r\n                    const offset = this.DEBUGCANVASSIZE.height - height - 1;\r\n                    const barWidth = this.DEBUGCANVASSIZE.width / this.getFrequencyBinCount();\r\n                    const hue = (i / this.getFrequencyBinCount()) * 360;\r\n                    this._debugCanvasContext.fillStyle = \"hsl(\" + hue + \", 100%, 50%)\";\r\n                    this._debugCanvasContext.fillRect(i * barWidth, offset, barWidth, height);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops rendering the debug canvas and removes it\r\n     */\r\n    public stopDebugCanvas() {\r\n        if (this._debugCanvas) {\r\n            if (this._registerFunc) {\r\n                this._scene.unregisterBeforeRender(this._registerFunc);\r\n                this._registerFunc = null;\r\n            }\r\n            document.body.removeChild(this._debugCanvas);\r\n            this._debugCanvas = null;\r\n            this._debugCanvasContext = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connects two audio nodes\r\n     * @param inputAudioNode defines first node to connect\r\n     * @param outputAudioNode defines second node to connect\r\n     */\r\n    public connectAudioNodes(inputAudioNode: AudioNode, outputAudioNode: AudioNode) {\r\n        if (this._audioEngine.canUseWebAudio) {\r\n            inputAudioNode.connect(this._webAudioAnalyser);\r\n            this._webAudioAnalyser.connect(outputAudioNode);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public dispose() {\r\n        if (this._audioEngine.canUseWebAudio) {\r\n            this._webAudioAnalyser.disconnect();\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}