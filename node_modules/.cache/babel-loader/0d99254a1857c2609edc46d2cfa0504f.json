{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { PerfCounter } from \"../Misc/perfCounter.js\";\n/**\n * This class can be used to get instrumentation data from a Babylon engine\n * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#engineinstrumentation\n */\n\nvar EngineInstrumentation =\n/** @class */\nfunction () {\n  /**\n   * Instantiates a new engine instrumentation.\n   * This class can be used to get instrumentation data from a Babylon engine\n   * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#engineinstrumentation\n   * @param engine Defines the engine to instrument\n   */\n  function EngineInstrumentation(\n  /**\n   * Define the instrumented engine.\n   */\n  engine) {\n    this.engine = engine;\n    this._captureGPUFrameTime = false;\n    this._captureShaderCompilationTime = false;\n    this._shaderCompilationTime = new PerfCounter(); // Observers\n\n    this._onBeginFrameObserver = null;\n    this._onEndFrameObserver = null;\n    this._onBeforeShaderCompilationObserver = null;\n    this._onAfterShaderCompilationObserver = null;\n  }\n\n  Object.defineProperty(EngineInstrumentation.prototype, \"gpuFrameTimeCounter\", {\n    // Properties\n\n    /**\n     * Gets the perf counter used for GPU frame time\n     */\n    get: function get() {\n      return this.engine.getGPUFrameTimeCounter();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EngineInstrumentation.prototype, \"captureGPUFrameTime\", {\n    /**\n     * Gets the GPU frame time capture status\n     */\n    get: function get() {\n      return this._captureGPUFrameTime;\n    },\n\n    /**\n     * Enable or disable the GPU frame time capture\n     */\n    set: function set(value) {\n      if (value === this._captureGPUFrameTime) {\n        return;\n      }\n\n      this._captureGPUFrameTime = value;\n      this.engine.captureGPUFrameTime(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EngineInstrumentation.prototype, \"shaderCompilationTimeCounter\", {\n    /**\n     * Gets the perf counter used for shader compilation time\n     */\n    get: function get() {\n      return this._shaderCompilationTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EngineInstrumentation.prototype, \"captureShaderCompilationTime\", {\n    /**\n     * Gets the shader compilation time capture status\n     */\n    get: function get() {\n      return this._captureShaderCompilationTime;\n    },\n\n    /**\n     * Enable or disable the shader compilation time capture\n     */\n    set: function set(value) {\n      var _this = this;\n\n      if (value === this._captureShaderCompilationTime) {\n        return;\n      }\n\n      this._captureShaderCompilationTime = value;\n\n      if (value) {\n        this._onBeforeShaderCompilationObserver = this.engine.onBeforeShaderCompilationObservable.add(function () {\n          _this._shaderCompilationTime.fetchNewFrame();\n\n          _this._shaderCompilationTime.beginMonitoring();\n        });\n        this._onAfterShaderCompilationObserver = this.engine.onAfterShaderCompilationObservable.add(function () {\n          _this._shaderCompilationTime.endMonitoring();\n        });\n      } else {\n        this.engine.onBeforeShaderCompilationObservable.remove(this._onBeforeShaderCompilationObserver);\n        this._onBeforeShaderCompilationObserver = null;\n        this.engine.onAfterShaderCompilationObservable.remove(this._onAfterShaderCompilationObserver);\n        this._onAfterShaderCompilationObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Dispose and release associated resources.\n   */\n\n  EngineInstrumentation.prototype.dispose = function () {\n    this.engine.onBeginFrameObservable.remove(this._onBeginFrameObserver);\n    this._onBeginFrameObserver = null;\n    this.engine.onEndFrameObservable.remove(this._onEndFrameObserver);\n    this._onEndFrameObserver = null;\n    this.engine.onBeforeShaderCompilationObservable.remove(this._onBeforeShaderCompilationObserver);\n    this._onBeforeShaderCompilationObserver = null;\n    this.engine.onAfterShaderCompilationObservable.remove(this._onAfterShaderCompilationObserver);\n    this._onAfterShaderCompilationObserver = null;\n    this.engine = null;\n  };\n\n  return EngineInstrumentation;\n}();\n\nexport { EngineInstrumentation };","map":{"version":3,"mappings":";AACA,SAASA,WAAT,QAA4B,wBAA5B;AAIA;;;;;AAIA;AAAA;AAAA;AAgFI;;;;;;AAMA;AACI;;;AAGOC,QAJX,EAIyB;AAAd;AAzFH,gCAAuB,KAAvB;AAEA,yCAAgC,KAAhC;AACA,kCAAyB,IAAID,WAAJ,EAAzB,CAsFiB,CApFzB;;AACQ,iCAAoD,IAApD;AACA,+BAAkD,IAAlD;AACA,8CAAiE,IAAjE;AACA,6CAAgE,IAAhE;AAiFJ;;AA3EJE,wBAAWC,+BAAX,EAAW,qBAAX,EAA8B;AAJ9B;;AACA;;;SAGA;AACI,aAAO,KAAKF,MAAL,CAAYG,sBAAZ,EAAP;AACH,KAF6B;qBAAA;;AAAA,GAA9B;AAOAF,wBAAWC,+BAAX,EAAW,qBAAX,EAA8B;AAH9B;;;SAGA;AACI,aAAO,KAAKE,oBAAZ;AACH,KAF6B;;AAI9B;;;SAGA,aAA+BC,KAA/B,EAA6C;AACzC,UAAIA,KAAK,KAAK,KAAKD,oBAAnB,EAAyC;AACrC;AACH;;AAED,WAAKA,oBAAL,GAA4BC,KAA5B;AACA,WAAKL,MAAL,CAAYM,mBAAZ,CAAgCD,KAAhC;AACH,KAd6B;qBAAA;;AAAA,GAA9B;AAmBAJ,wBAAWC,+BAAX,EAAW,8BAAX,EAAuC;AAHvC;;;SAGA;AACI,aAAO,KAAKK,sBAAZ;AACH,KAFsC;qBAAA;;AAAA,GAAvC;AAOAN,wBAAWC,+BAAX,EAAW,8BAAX,EAAuC;AAHvC;;;SAGA;AACI,aAAO,KAAKM,6BAAZ;AACH,KAFsC;;AAIvC;;;SAGA,aAAwCH,KAAxC,EAAsD;AAAtD;;AACI,UAAIA,KAAK,KAAK,KAAKG,6BAAnB,EAAkD;AAC9C;AACH;;AAED,WAAKA,6BAAL,GAAqCH,KAArC;;AAEA,UAAIA,KAAJ,EAAW;AACP,aAAKI,kCAAL,GAA0C,KAAKT,MAAL,CAAYU,mCAAZ,CAAgDC,GAAhD,CAAoD;AAC1FC,eAAI,CAACL,sBAAL,CAA4BM,aAA5B;;AACAD,eAAI,CAACL,sBAAL,CAA4BO,eAA5B;AACH,SAHyC,CAA1C;AAKA,aAAKC,iCAAL,GAAyC,KAAKf,MAAL,CAAYgB,kCAAZ,CAA+CL,GAA/C,CAAmD;AACxFC,eAAI,CAACL,sBAAL,CAA4BU,aAA5B;AACH,SAFwC,CAAzC;AAGH,OATD,MASO;AACH,aAAKjB,MAAL,CAAYU,mCAAZ,CAAgDQ,MAAhD,CAAuD,KAAKT,kCAA5D;AACA,aAAKA,kCAAL,GAA0C,IAA1C;AACA,aAAKT,MAAL,CAAYgB,kCAAZ,CAA+CE,MAA/C,CAAsD,KAAKH,iCAA3D;AACA,aAAKA,iCAAL,GAAyC,IAAzC;AACH;AACJ,KA7BsC;qBAAA;;AAAA,GAAvC;AA4CA;;;;AAGOb,4CAAP;AACI,SAAKF,MAAL,CAAYmB,sBAAZ,CAAmCD,MAAnC,CAA0C,KAAKE,qBAA/C;AACA,SAAKA,qBAAL,GAA6B,IAA7B;AAEA,SAAKpB,MAAL,CAAYqB,oBAAZ,CAAiCH,MAAjC,CAAwC,KAAKI,mBAA7C;AACA,SAAKA,mBAAL,GAA2B,IAA3B;AAEA,SAAKtB,MAAL,CAAYU,mCAAZ,CAAgDQ,MAAhD,CAAuD,KAAKT,kCAA5D;AACA,SAAKA,kCAAL,GAA0C,IAA1C;AAEA,SAAKT,MAAL,CAAYgB,kCAAZ,CAA+CE,MAA/C,CAAsD,KAAKH,iCAA3D;AACA,SAAKA,iCAAL,GAAyC,IAAzC;AAEM,SAAKf,MAAL,GAAe,IAAf;AACT,GAdM;;AAeX;AAAC,CA/GD","names":["PerfCounter","engine","Object","EngineInstrumentation","getGPUFrameTimeCounter","_captureGPUFrameTime","value","captureGPUFrameTime","_shaderCompilationTime","_captureShaderCompilationTime","_onBeforeShaderCompilationObserver","onBeforeShaderCompilationObservable","add","_this","fetchNewFrame","beginMonitoring","_onAfterShaderCompilationObserver","onAfterShaderCompilationObservable","endMonitoring","remove","onBeginFrameObservable","_onBeginFrameObserver","onEndFrameObservable","_onEndFrameObserver"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Instrumentation/engineInstrumentation.ts"],"sourcesContent":["import type { Observer } from \"../Misc/observable\";\r\nimport { PerfCounter } from \"../Misc/perfCounter\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { IDisposable } from \"../scene\";\r\nimport type { Engine } from \"../Engines/engine\";\r\n/**\r\n * This class can be used to get instrumentation data from a Babylon engine\r\n * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#engineinstrumentation\r\n */\r\nexport class EngineInstrumentation implements IDisposable {\r\n    private _captureGPUFrameTime = false;\r\n\r\n    private _captureShaderCompilationTime = false;\r\n    private _shaderCompilationTime = new PerfCounter();\r\n\r\n    // Observers\r\n    private _onBeginFrameObserver: Nullable<Observer<Engine>> = null;\r\n    private _onEndFrameObserver: Nullable<Observer<Engine>> = null;\r\n    private _onBeforeShaderCompilationObserver: Nullable<Observer<Engine>> = null;\r\n    private _onAfterShaderCompilationObserver: Nullable<Observer<Engine>> = null;\r\n\r\n    // Properties\r\n    /**\r\n     * Gets the perf counter used for GPU frame time\r\n     */\r\n    public get gpuFrameTimeCounter(): PerfCounter {\r\n        return this.engine.getGPUFrameTimeCounter();\r\n    }\r\n\r\n    /**\r\n     * Gets the GPU frame time capture status\r\n     */\r\n    public get captureGPUFrameTime(): boolean {\r\n        return this._captureGPUFrameTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the GPU frame time capture\r\n     */\r\n    public set captureGPUFrameTime(value: boolean) {\r\n        if (value === this._captureGPUFrameTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureGPUFrameTime = value;\r\n        this.engine.captureGPUFrameTime(value);\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for shader compilation time\r\n     */\r\n    public get shaderCompilationTimeCounter(): PerfCounter {\r\n        return this._shaderCompilationTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the shader compilation time capture status\r\n     */\r\n    public get captureShaderCompilationTime(): boolean {\r\n        return this._captureShaderCompilationTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the shader compilation time capture\r\n     */\r\n    public set captureShaderCompilationTime(value: boolean) {\r\n        if (value === this._captureShaderCompilationTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureShaderCompilationTime = value;\r\n\r\n        if (value) {\r\n            this._onBeforeShaderCompilationObserver = this.engine.onBeforeShaderCompilationObservable.add(() => {\r\n                this._shaderCompilationTime.fetchNewFrame();\r\n                this._shaderCompilationTime.beginMonitoring();\r\n            });\r\n\r\n            this._onAfterShaderCompilationObserver = this.engine.onAfterShaderCompilationObservable.add(() => {\r\n                this._shaderCompilationTime.endMonitoring();\r\n            });\r\n        } else {\r\n            this.engine.onBeforeShaderCompilationObservable.remove(this._onBeforeShaderCompilationObserver);\r\n            this._onBeforeShaderCompilationObserver = null;\r\n            this.engine.onAfterShaderCompilationObservable.remove(this._onAfterShaderCompilationObserver);\r\n            this._onAfterShaderCompilationObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new engine instrumentation.\r\n     * This class can be used to get instrumentation data from a Babylon engine\r\n     * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#engineinstrumentation\r\n     * @param engine Defines the engine to instrument\r\n     */\r\n    public constructor(\r\n        /**\r\n         * Define the instrumented engine.\r\n         */\r\n        public engine: Engine\r\n    ) {}\r\n\r\n    /**\r\n     * Dispose and release associated resources.\r\n     */\r\n    public dispose() {\r\n        this.engine.onBeginFrameObservable.remove(this._onBeginFrameObserver);\r\n        this._onBeginFrameObserver = null;\r\n\r\n        this.engine.onEndFrameObservable.remove(this._onEndFrameObserver);\r\n        this._onEndFrameObserver = null;\r\n\r\n        this.engine.onBeforeShaderCompilationObservable.remove(this._onBeforeShaderCompilationObserver);\r\n        this._onBeforeShaderCompilationObserver = null;\r\n\r\n        this.engine.onAfterShaderCompilationObservable.remove(this._onAfterShaderCompilationObserver);\r\n        this._onAfterShaderCompilationObserver = null;\r\n\r\n        (<any>this.engine) = null;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}