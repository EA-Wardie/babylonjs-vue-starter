{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/bloomMerge.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize } from \"../Misc/decorators.js\";\n/**\n * The BloomMergePostProcess merges blurred images with the original based on the values of the circle of confusion.\n */\n\nvar BloomMergePostProcess =\n/** @class */\nfunction (_super) {\n  __extends(BloomMergePostProcess, _super);\n  /**\n   * Creates a new instance of @see BloomMergePostProcess\n   * @param name The name of the effect.\n   * @param originalFromInput Post process which's input will be used for the merge.\n   * @param blurred Blurred highlights post process which's output will be used.\n   * @param weight Weight of the bloom to be added to the original input.\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   * @param textureType Type of textures used when performing the post process. (default: 0)\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n   */\n\n\n  function BloomMergePostProcess(name, originalFromInput, blurred,\n  /** Weight of the bloom to be added to the original input. */\n  weight, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    var _this = _super.call(this, name, \"bloomMerge\", [\"bloomWeight\"], [\"bloomBlur\"], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, true) || this;\n    /** Weight of the bloom to be added to the original input. */\n\n\n    _this.weight = 1;\n    _this.weight = weight;\n    _this.externalTextureSamplerBinding = true;\n\n    _this.onApplyObservable.add(function (effect) {\n      effect.setTextureFromPostProcess(\"textureSampler\", originalFromInput);\n      effect.setTextureFromPostProcessOutput(\"bloomBlur\", blurred);\n      effect.setFloat(\"bloomWeight\", _this.weight);\n    });\n\n    if (!blockCompilation) {\n      _this.updateEffect();\n    }\n\n    return _this;\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"BloomMergePostProcess\" string\n   */\n\n\n  BloomMergePostProcess.prototype.getClassName = function () {\n    return \"BloomMergePostProcess\";\n  };\n\n  __decorate([serialize()], BloomMergePostProcess.prototype, \"weight\", void 0);\n\n  return BloomMergePostProcess;\n}(PostProcess);\n\nexport { BloomMergePostProcess };\nRegisterClass(\"BABYLON.BloomMergePostProcess\", BloomMergePostProcess);","map":{"version":3,"mappings":";AACA,SAASA,WAAT,QAA4B,kBAA5B;AAOA,OAAO,mCAAP;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAEA;;;;AAGA;AAAA;AAAA;AAA2CC;AAavC;;;;;;;;;;;;;;;;AAcA,iCACIC,IADJ,EAEIC,iBAFJ,EAGIC,OAHJ;AAII;AACAC,QALJ,EAMIC,OANJ,EAOIC,MAPJ,EAQIC,YARJ,EASIC,MATJ,EAUIC,QAVJ,EAWIC,WAXJ,EAYIC,gBAZJ,EAY4B;AADxB;AAAAD,oBAAsB,CAAtB;AAAsB;;AACtB;AAAAC;AAAwB;;AAZ5B,gBAcIC,kBAAMX,IAAN,EAAY,YAAZ,EAA0B,CAAC,aAAD,CAA1B,EAA2C,CAAC,WAAD,CAA3C,EAA0DI,OAA1D,EAAmEC,MAAnE,EAA2EC,YAA3E,EAAyFC,MAAzF,EAAiGC,QAAjG,EAA2G,IAA3G,EAAiHC,WAAjH,EAA8HG,SAA9H,EAAyI,IAAzI,EAA+I,IAA/I,KAAoJ,IAdxJ;AA1BA;;;AAEOC,mBAAS,CAAT;AAuCHA,SAAI,CAACV,MAAL,GAAcA,MAAd;AACAU,SAAI,CAACC,6BAAL,GAAqC,IAArC;;AACAD,SAAI,CAACE,iBAAL,CAAuBC,GAAvB,CAA2B,UAACC,MAAD,EAAe;AACtCA,YAAM,CAACC,yBAAP,CAAiC,gBAAjC,EAAmDjB,iBAAnD;AACAgB,YAAM,CAACE,+BAAP,CAAuC,WAAvC,EAAoDjB,OAApD;AACAe,YAAM,CAACG,QAAP,CAAgB,aAAhB,EAA+BP,KAAI,CAACV,MAApC;AACH,KAJD;;AAMA,QAAI,CAACO,gBAAL,EAAuB;AACnBG,WAAI,CAACQ,YAAL;AACH;;;AACJ;AAhDD;;;;;;AAIOC,iDAAP;AACI,WAAO,uBAAP;AACH,GAFM;;AANPC,cADCzB,SAAS,EACV;;AAmDJ;AAAC,CAtDD,CAA2CF,WAA3C;;SAAa0B;AAwDbzB,aAAa,CAAC,+BAAD,EAAkCyB,qBAAlC,CAAb","names":["PostProcess","RegisterClass","serialize","__extends","name","originalFromInput","blurred","weight","options","camera","samplingMode","engine","reusable","textureType","blockCompilation","_super","undefined","_this","externalTextureSamplerBinding","onApplyObservable","add","effect","setTextureFromPostProcess","setTextureFromPostProcessOutput","setFloat","updateEffect","BloomMergePostProcess","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/PostProcesses/bloomMergePostProcess.ts"],"sourcesContent":["import type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/bloomMerge.fragment\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { serialize } from \"../Misc/decorators\";\r\n\r\n/**\r\n * The BloomMergePostProcess merges blurred images with the original based on the values of the circle of confusion.\r\n */\r\nexport class BloomMergePostProcess extends PostProcess {\r\n    /** Weight of the bloom to be added to the original input. */\r\n    @serialize()\r\n    public weight = 1;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"BloomMergePostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"BloomMergePostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of @see BloomMergePostProcess\r\n     * @param name The name of the effect.\r\n     * @param originalFromInput Post process which's input will be used for the merge.\r\n     * @param blurred Blurred highlights post process which's output will be used.\r\n     * @param weight Weight of the bloom to be added to the original input.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        originalFromInput: PostProcess,\r\n        blurred: PostProcess,\r\n        /** Weight of the bloom to be added to the original input. */\r\n        weight: number,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        blockCompilation = false\r\n    ) {\r\n        super(name, \"bloomMerge\", [\"bloomWeight\"], [\"bloomBlur\"], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, true);\r\n        this.weight = weight;\r\n        this.externalTextureSamplerBinding = true;\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setTextureFromPostProcess(\"textureSampler\", originalFromInput);\r\n            effect.setTextureFromPostProcessOutput(\"bloomBlur\", blurred);\r\n            effect.setFloat(\"bloomWeight\", this.weight);\r\n        });\r\n\r\n        if (!blockCompilation) {\r\n            this.updateEffect();\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.BloomMergePostProcess\", BloomMergePostProcess);\r\n"]},"metadata":{},"sourceType":"module"}