{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport { __extends } from \"tslib\";\nimport { Action } from \"./action.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\n/**\n * A Condition applied to an Action\n */\n\nvar Condition =\n/** @class */\nfunction () {\n  /**\n   * Creates a new Condition\n   * @param actionManager the manager of the action the condition is applied to\n   */\n  function Condition(actionManager) {\n    this._actionManager = actionManager;\n  }\n  /**\n   * Check if the current condition is valid\n   * @returns a boolean\n   */\n\n\n  Condition.prototype.isValid = function () {\n    return true;\n  };\n  /**\n   * Internal only\n   * @param propertyPath\n   * @hidden\n   */\n\n\n  Condition.prototype._getProperty = function (propertyPath) {\n    return this._actionManager._getProperty(propertyPath);\n  };\n  /**\n   * Internal only\n   * @param target\n   * @param propertyPath\n   * @hidden\n   */\n\n\n  Condition.prototype._getEffectiveTarget = function (target, propertyPath) {\n    return this._actionManager._getEffectiveTarget(target, propertyPath);\n  };\n  /**\n   * Serialize placeholder for child classes\n   * @returns the serialized object\n   */\n\n\n  Condition.prototype.serialize = function () {};\n  /**\n   * Internal only\n   * @param serializedCondition\n   * @hidden\n   */\n\n\n  Condition.prototype._serialize = function (serializedCondition) {\n    return {\n      type: 2,\n      children: [],\n      name: serializedCondition.name,\n      properties: serializedCondition.properties\n    };\n  };\n\n  return Condition;\n}();\n\nexport { Condition };\n/**\n * Defines specific conditional operators as extensions of Condition\n */\n\nvar ValueCondition =\n/** @class */\nfunction (_super) {\n  __extends(ValueCondition, _super);\n  /**\n   * Creates a new ValueCondition\n   * @param actionManager manager for the action the condition applies to\n   * @param target for the action\n   * @param propertyPath path to specify the property of the target the conditional operator uses\n   * @param value the value compared by the conditional operator against the current value of the property\n   * @param operator the conditional operator, default ValueCondition.IsEqual\n   */\n\n\n  function ValueCondition(actionManager, target,\n  /** path to specify the property of the target the conditional operator uses  */\n  propertyPath,\n  /** the value compared by the conditional operator against the current value of the property */\n  value,\n  /** the conditional operator, default ValueCondition.IsEqual */\n  operator) {\n    if (operator === void 0) {\n      operator = ValueCondition.IsEqual;\n    }\n\n    var _this = _super.call(this, actionManager) || this;\n\n    _this.propertyPath = propertyPath;\n    _this.value = value;\n    _this.operator = operator;\n    _this._target = target;\n    _this._effectiveTarget = _this._getEffectiveTarget(target, _this.propertyPath);\n    _this._property = _this._getProperty(_this.propertyPath);\n    return _this;\n  }\n\n  Object.defineProperty(ValueCondition, \"IsEqual\", {\n    /**\n     * returns the number for IsEqual\n     */\n    get: function get() {\n      return ValueCondition._IsEqual;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ValueCondition, \"IsDifferent\", {\n    /**\n     * Returns the number for IsDifferent\n     */\n    get: function get() {\n      return ValueCondition._IsDifferent;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ValueCondition, \"IsGreater\", {\n    /**\n     * Returns the number for IsGreater\n     */\n    get: function get() {\n      return ValueCondition._IsGreater;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ValueCondition, \"IsLesser\", {\n    /**\n     * Returns the number for IsLesser\n     */\n    get: function get() {\n      return ValueCondition._IsLesser;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Compares the given value with the property value for the specified conditional operator\n   * @returns the result of the comparison\n   */\n\n  ValueCondition.prototype.isValid = function () {\n    switch (this.operator) {\n      case ValueCondition.IsGreater:\n        return this._effectiveTarget[this._property] > this.value;\n\n      case ValueCondition.IsLesser:\n        return this._effectiveTarget[this._property] < this.value;\n\n      case ValueCondition.IsEqual:\n      case ValueCondition.IsDifferent:\n        {\n          var check = void 0;\n\n          if (this.value.equals) {\n            check = this.value.equals(this._effectiveTarget[this._property]);\n          } else {\n            check = this.value === this._effectiveTarget[this._property];\n          }\n\n          return this.operator === ValueCondition.IsEqual ? check : !check;\n        }\n    }\n\n    return false;\n  };\n  /**\n   * Serialize the ValueCondition into a JSON compatible object\n   * @returns serialization object\n   */\n\n\n  ValueCondition.prototype.serialize = function () {\n    return this._serialize({\n      name: \"ValueCondition\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"propertyPath\",\n        value: this.propertyPath\n      }, {\n        name: \"value\",\n        value: Action._SerializeValueAsString(this.value)\n      }, {\n        name: \"operator\",\n        value: ValueCondition.GetOperatorName(this.operator)\n      }]\n    });\n  };\n  /**\n   * Gets the name of the conditional operator for the ValueCondition\n   * @param operator the conditional operator\n   * @returns the name\n   */\n\n\n  ValueCondition.GetOperatorName = function (operator) {\n    switch (operator) {\n      case ValueCondition._IsEqual:\n        return \"IsEqual\";\n\n      case ValueCondition._IsDifferent:\n        return \"IsDifferent\";\n\n      case ValueCondition._IsGreater:\n        return \"IsGreater\";\n\n      case ValueCondition._IsLesser:\n        return \"IsLesser\";\n\n      default:\n        return \"\";\n    }\n  };\n  /**\n   * Internal only\n   * @hidden\n   */\n\n\n  ValueCondition._IsEqual = 0;\n  /**\n   * Internal only\n   * @hidden\n   */\n\n  ValueCondition._IsDifferent = 1;\n  /**\n   * Internal only\n   * @hidden\n   */\n\n  ValueCondition._IsGreater = 2;\n  /**\n   * Internal only\n   * @hidden\n   */\n\n  ValueCondition._IsLesser = 3;\n  return ValueCondition;\n}(Condition);\n\nexport { ValueCondition };\n/**\n * Defines a predicate condition as an extension of Condition\n */\n\nvar PredicateCondition =\n/** @class */\nfunction (_super) {\n  __extends(PredicateCondition, _super);\n  /**\n   * Creates a new PredicateCondition\n   * @param actionManager manager for the action the condition applies to\n   * @param predicate defines the predicate function used to validate the condition\n   */\n\n\n  function PredicateCondition(actionManager,\n  /** defines the predicate function used to validate the condition */\n  predicate) {\n    var _this = _super.call(this, actionManager) || this;\n\n    _this.predicate = predicate;\n    return _this;\n  }\n  /**\n   * @returns the validity of the predicate condition\n   */\n\n\n  PredicateCondition.prototype.isValid = function () {\n    return this.predicate();\n  };\n\n  return PredicateCondition;\n}(Condition);\n\nexport { PredicateCondition };\n/**\n * Defines a state condition as an extension of Condition\n */\n\nvar StateCondition =\n/** @class */\nfunction (_super) {\n  __extends(StateCondition, _super);\n  /**\n   * Creates a new StateCondition\n   * @param actionManager manager for the action the condition applies to\n   * @param target of the condition\n   * @param value to compare with target state\n   */\n\n\n  function StateCondition(actionManager, target,\n  /** Value to compare with target state  */\n  value) {\n    var _this = _super.call(this, actionManager) || this;\n\n    _this.value = value;\n    _this._target = target;\n    return _this;\n  }\n  /**\n   * Gets a boolean indicating if the current condition is met\n   * @returns the validity of the state\n   */\n\n\n  StateCondition.prototype.isValid = function () {\n    return this._target.state === this.value;\n  };\n  /**\n   * Serialize the StateCondition into a JSON compatible object\n   * @returns serialization object\n   */\n\n\n  StateCondition.prototype.serialize = function () {\n    return this._serialize({\n      name: \"StateCondition\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"value\",\n        value: this.value\n      }]\n    });\n  };\n\n  return StateCondition;\n}(Condition);\n\nexport { StateCondition };\nRegisterClass(\"BABYLON.ValueCondition\", ValueCondition);\nRegisterClass(\"BABYLON.PredicateCondition\", PredicateCondition);\nRegisterClass(\"BABYLON.StateCondition\", StateCondition);","map":{"version":3,"mappings":"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","names":["Action","RegisterClass","actionManager","_actionManager","Condition","propertyPath","_getProperty","target","_getEffectiveTarget","serializedCondition","type","children","name","properties","__extends","value","operator","ValueCondition","IsEqual","_super","_this","_target","_effectiveTarget","_property","Object","_IsEqual","_IsDifferent","_IsGreater","_IsLesser","IsGreater","IsLesser","IsDifferent","check","equals","_serialize","_GetTargetProperty","_SerializeValueAsString","GetOperatorName","predicate","PredicateCondition","StateCondition","state"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Actions/condition.ts"],"sourcesContent":["import { Action } from \"./action\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\ndeclare type ActionManager = import(\"./actionManager\").ActionManager;\r\n\r\n/**\r\n * A Condition applied to an Action\r\n */\r\nexport class Condition {\r\n    /**\r\n     * Internal only - manager for action\r\n     * @hidden\r\n     */\r\n    public _actionManager: ActionManager;\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    public _evaluationId: number;\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    public _currentResult: boolean;\r\n\r\n    /**\r\n     * Creates a new Condition\r\n     * @param actionManager the manager of the action the condition is applied to\r\n     */\r\n    constructor(actionManager: ActionManager) {\r\n        this._actionManager = actionManager;\r\n    }\r\n\r\n    /**\r\n     * Check if the current condition is valid\r\n     * @returns a boolean\r\n     */\r\n    public isValid(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Internal only\r\n     * @param propertyPath\r\n     * @hidden\r\n     */\r\n    public _getProperty(propertyPath: string): string {\r\n        return this._actionManager._getProperty(propertyPath);\r\n    }\r\n\r\n    /**\r\n     * Internal only\r\n     * @param target\r\n     * @param propertyPath\r\n     * @hidden\r\n     */\r\n    public _getEffectiveTarget(target: any, propertyPath: string): any {\r\n        return this._actionManager._getEffectiveTarget(target, propertyPath);\r\n    }\r\n\r\n    /**\r\n     * Serialize placeholder for child classes\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(): any {}\r\n\r\n    /**\r\n     * Internal only\r\n     * @param serializedCondition\r\n     * @hidden\r\n     */\r\n    protected _serialize(serializedCondition: any): any {\r\n        return {\r\n            type: 2, // Condition\r\n            children: [],\r\n            name: serializedCondition.name,\r\n            properties: serializedCondition.properties,\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Defines specific conditional operators as extensions of Condition\r\n */\r\nexport class ValueCondition extends Condition {\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    private static _IsEqual = 0;\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    private static _IsDifferent = 1;\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    private static _IsGreater = 2;\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    private static _IsLesser = 3;\r\n\r\n    /**\r\n     * returns the number for IsEqual\r\n     */\r\n    public static get IsEqual(): number {\r\n        return ValueCondition._IsEqual;\r\n    }\r\n\r\n    /**\r\n     * Returns the number for IsDifferent\r\n     */\r\n    public static get IsDifferent(): number {\r\n        return ValueCondition._IsDifferent;\r\n    }\r\n\r\n    /**\r\n     * Returns the number for IsGreater\r\n     */\r\n    public static get IsGreater(): number {\r\n        return ValueCondition._IsGreater;\r\n    }\r\n\r\n    /**\r\n     * Returns the number for IsLesser\r\n     */\r\n    public static get IsLesser(): number {\r\n        return ValueCondition._IsLesser;\r\n    }\r\n\r\n    /**\r\n     * Internal only The action manager for the condition\r\n     * @hidden\r\n     */\r\n    public _actionManager: ActionManager;\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    private _target: any;\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    private _effectiveTarget: any;\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    private _property: string;\r\n\r\n    /**\r\n     * Creates a new ValueCondition\r\n     * @param actionManager manager for the action the condition applies to\r\n     * @param target for the action\r\n     * @param propertyPath path to specify the property of the target the conditional operator uses\r\n     * @param value the value compared by the conditional operator against the current value of the property\r\n     * @param operator the conditional operator, default ValueCondition.IsEqual\r\n     */\r\n    constructor(\r\n        actionManager: ActionManager,\r\n        target: any,\r\n        /** path to specify the property of the target the conditional operator uses  */\r\n        public propertyPath: string,\r\n        /** the value compared by the conditional operator against the current value of the property */\r\n        public value: any,\r\n        /** the conditional operator, default ValueCondition.IsEqual */\r\n        public operator: number = ValueCondition.IsEqual\r\n    ) {\r\n        super(actionManager);\r\n\r\n        this._target = target;\r\n        this._effectiveTarget = this._getEffectiveTarget(target, this.propertyPath);\r\n        this._property = this._getProperty(this.propertyPath);\r\n    }\r\n\r\n    /**\r\n     * Compares the given value with the property value for the specified conditional operator\r\n     * @returns the result of the comparison\r\n     */\r\n    public isValid(): boolean {\r\n        switch (this.operator) {\r\n            case ValueCondition.IsGreater:\r\n                return this._effectiveTarget[this._property] > this.value;\r\n            case ValueCondition.IsLesser:\r\n                return this._effectiveTarget[this._property] < this.value;\r\n            case ValueCondition.IsEqual:\r\n            case ValueCondition.IsDifferent: {\r\n                let check: boolean;\r\n\r\n                if (this.value.equals) {\r\n                    check = this.value.equals(this._effectiveTarget[this._property]);\r\n                } else {\r\n                    check = this.value === this._effectiveTarget[this._property];\r\n                }\r\n                return this.operator === ValueCondition.IsEqual ? check : !check;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Serialize the ValueCondition into a JSON compatible object\r\n     * @returns serialization object\r\n     */\r\n    public serialize(): any {\r\n        return this._serialize({\r\n            name: \"ValueCondition\",\r\n            properties: [\r\n                Action._GetTargetProperty(this._target),\r\n                { name: \"propertyPath\", value: this.propertyPath },\r\n                { name: \"value\", value: Action._SerializeValueAsString(this.value) },\r\n                { name: \"operator\", value: ValueCondition.GetOperatorName(this.operator) },\r\n            ],\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the conditional operator for the ValueCondition\r\n     * @param operator the conditional operator\r\n     * @returns the name\r\n     */\r\n    public static GetOperatorName(operator: number): string {\r\n        switch (operator) {\r\n            case ValueCondition._IsEqual:\r\n                return \"IsEqual\";\r\n            case ValueCondition._IsDifferent:\r\n                return \"IsDifferent\";\r\n            case ValueCondition._IsGreater:\r\n                return \"IsGreater\";\r\n            case ValueCondition._IsLesser:\r\n                return \"IsLesser\";\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Defines a predicate condition as an extension of Condition\r\n */\r\nexport class PredicateCondition extends Condition {\r\n    /**\r\n     * Internal only - manager for action\r\n     * @hidden\r\n     */\r\n    public _actionManager: ActionManager;\r\n\r\n    /**\r\n     * Creates a new PredicateCondition\r\n     * @param actionManager manager for the action the condition applies to\r\n     * @param predicate defines the predicate function used to validate the condition\r\n     */\r\n    constructor(\r\n        actionManager: ActionManager,\r\n        /** defines the predicate function used to validate the condition */\r\n        public predicate: () => boolean\r\n    ) {\r\n        super(actionManager);\r\n    }\r\n\r\n    /**\r\n     * @returns the validity of the predicate condition\r\n     */\r\n    public isValid(): boolean {\r\n        return this.predicate();\r\n    }\r\n}\r\n\r\n/**\r\n * Defines a state condition as an extension of Condition\r\n */\r\nexport class StateCondition extends Condition {\r\n    /**\r\n     * Internal only - manager for action\r\n     * @hidden\r\n     */\r\n    public _actionManager: ActionManager;\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    private _target: any;\r\n\r\n    /**\r\n     * Creates a new StateCondition\r\n     * @param actionManager manager for the action the condition applies to\r\n     * @param target of the condition\r\n     * @param value to compare with target state\r\n     */\r\n    constructor(\r\n        actionManager: ActionManager,\r\n        target: any,\r\n        /** Value to compare with target state  */\r\n        public value: string\r\n    ) {\r\n        super(actionManager);\r\n\r\n        this._target = target;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the current condition is met\r\n     * @returns the validity of the state\r\n     */\r\n    public isValid(): boolean {\r\n        return this._target.state === this.value;\r\n    }\r\n\r\n    /**\r\n     * Serialize the StateCondition into a JSON compatible object\r\n     * @returns serialization object\r\n     */\r\n    public serialize(): any {\r\n        return this._serialize({\r\n            name: \"StateCondition\",\r\n            properties: [Action._GetTargetProperty(this._target), { name: \"value\", value: this.value }],\r\n        });\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ValueCondition\", ValueCondition);\r\nRegisterClass(\"BABYLON.PredicateCondition\", PredicateCondition);\r\nRegisterClass(\"BABYLON.StateCondition\", StateCondition);\r\n"]},"metadata":{},"sourceType":"module"}