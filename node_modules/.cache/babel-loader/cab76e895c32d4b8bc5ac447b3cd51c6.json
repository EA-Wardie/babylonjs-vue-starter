{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.index-of.js\";\n\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { DracoCompression } from \"@babylonjs/core/Meshes/Compression/dracoCompression.js\";\nimport { VertexBuffer } from \"@babylonjs/core/Buffers/buffer.js\";\nimport { Geometry } from \"@babylonjs/core/Meshes/geometry.js\";\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader.js\";\nvar NAME = \"KHR_draco_mesh_compression\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression)\n */\n\nvar KHR_draco_mesh_compression =\n/** @class */\nfunction () {\n  /**\n   * @param loader\n   * @hidden\n   */\n  function KHR_draco_mesh_compression(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    this._loader = loader;\n    this.enabled = DracoCompression.DecoderAvailable && this._loader.isExtensionUsed(NAME);\n  }\n  /** @hidden */\n\n\n  KHR_draco_mesh_compression.prototype.dispose = function () {\n    delete this.dracoCompression;\n    this._loader = null;\n  };\n  /**\n   * @param context\n   * @param primitive\n   * @param babylonMesh\n   * @hidden\n   */\n\n\n  KHR_draco_mesh_compression.prototype._loadVertexDataAsync = function (context, primitive, babylonMesh) {\n    var _this = this;\n\n    return GLTFLoader.LoadExtensionAsync(context, primitive, this.name, function (extensionContext, extension) {\n      if (primitive.mode != undefined) {\n        if (primitive.mode !== 5\n        /* TRIANGLE_STRIP */\n        && primitive.mode !== 4\n        /* TRIANGLES */\n        ) {\n          throw new Error(\"\".concat(context, \": Unsupported mode \").concat(primitive.mode));\n        } // TODO: handle triangle strips\n\n\n        if (primitive.mode === 5\n        /* TRIANGLE_STRIP */\n        ) {\n          throw new Error(\"\".concat(context, \": Mode \").concat(primitive.mode, \" is not currently supported\"));\n        }\n      }\n\n      var attributes = {};\n      var dividers = {};\n\n      var loadAttribute = function loadAttribute(name, kind) {\n        var uniqueId = extension.attributes[name];\n\n        if (uniqueId === undefined || primitive.attributes[name] === undefined) {\n          return;\n        }\n\n        attributes[kind] = uniqueId;\n        var accessor = ArrayItem.Get(\"\".concat(context, \"/attributes/\").concat(name), _this._loader.gltf.accessors, primitive.attributes[name]);\n\n        if (accessor.normalized && accessor.componentType !== 5126\n        /* FLOAT */\n        ) {\n          var divider = 1;\n\n          switch (accessor.componentType) {\n            case 5120\n            /* BYTE */\n            :\n              divider = 127.0;\n              break;\n\n            case 5121\n            /* UNSIGNED_BYTE */\n            :\n              divider = 255.0;\n              break;\n\n            case 5122\n            /* SHORT */\n            :\n              divider = 32767.0;\n              break;\n\n            case 5123\n            /* UNSIGNED_SHORT */\n            :\n              divider = 65535.0;\n              break;\n          }\n\n          dividers[kind] = divider;\n        }\n\n        babylonMesh._delayInfo = babylonMesh._delayInfo || [];\n\n        if (babylonMesh._delayInfo.indexOf(kind) === -1) {\n          babylonMesh._delayInfo.push(kind);\n        }\n      };\n\n      loadAttribute(\"POSITION\", VertexBuffer.PositionKind);\n      loadAttribute(\"NORMAL\", VertexBuffer.NormalKind);\n      loadAttribute(\"TANGENT\", VertexBuffer.TangentKind);\n      loadAttribute(\"TEXCOORD_0\", VertexBuffer.UVKind);\n      loadAttribute(\"TEXCOORD_1\", VertexBuffer.UV2Kind);\n      loadAttribute(\"TEXCOORD_2\", VertexBuffer.UV3Kind);\n      loadAttribute(\"TEXCOORD_3\", VertexBuffer.UV4Kind);\n      loadAttribute(\"TEXCOORD_4\", VertexBuffer.UV5Kind);\n      loadAttribute(\"TEXCOORD_5\", VertexBuffer.UV6Kind);\n      loadAttribute(\"JOINTS_0\", VertexBuffer.MatricesIndicesKind);\n      loadAttribute(\"WEIGHTS_0\", VertexBuffer.MatricesWeightsKind);\n      loadAttribute(\"COLOR_0\", VertexBuffer.ColorKind);\n      var bufferView = ArrayItem.Get(extensionContext, _this._loader.gltf.bufferViews, extension.bufferView);\n\n      if (!bufferView._dracoBabylonGeometry) {\n        bufferView._dracoBabylonGeometry = _this._loader.loadBufferViewAsync(\"/bufferViews/\".concat(bufferView.index), bufferView).then(function (data) {\n          var dracoCompression = _this.dracoCompression || DracoCompression.Default;\n          return dracoCompression.decodeMeshAsync(data, attributes, dividers).then(function (babylonVertexData) {\n            var babylonGeometry = new Geometry(babylonMesh.name, _this._loader.babylonScene);\n            babylonVertexData.applyToGeometry(babylonGeometry);\n            return babylonGeometry;\n          })[\"catch\"](function (error) {\n            throw new Error(\"\".concat(context, \": \").concat(error.message));\n          });\n        });\n      }\n\n      return bufferView._dracoBabylonGeometry;\n    });\n  };\n\n  return KHR_draco_mesh_compression;\n}();\n\nexport { KHR_draco_mesh_compression };\nGLTFLoader.RegisterExtension(NAME, function (loader) {\n  return new KHR_draco_mesh_compression(loader);\n});","map":{"version":3,"mappings":"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","names":["DracoCompression","VertexBuffer","Geometry","GLTFLoader","ArrayItem","NAME","loader","_loader","enabled","DecoderAvailable","isExtensionUsed","KHR_draco_mesh_compression","dracoCompression","context","primitive","babylonMesh","LoadExtensionAsync","name","extensionContext","extension","mode","undefined","Error","concat","attributes","dividers","loadAttribute","kind","uniqueId","accessor","Get","_this","gltf","accessors","normalized","componentType","divider","_delayInfo","indexOf","push","PositionKind","NormalKind","TangentKind","UVKind","UV2Kind","UV3Kind","UV4Kind","UV5Kind","UV6Kind","MatricesIndicesKind","MatricesWeightsKind","ColorKind","bufferView","bufferViews","_dracoBabylonGeometry","loadBufferViewAsync","index","then","data","Default","decodeMeshAsync","babylonVertexData","babylonGeometry","babylonScene","applyToGeometry","error","message","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../../lts/loaders/generated/glTF/2.0/Extensions/KHR_draco_mesh_compression.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { DracoCompression } from \"core/Meshes/Compression/dracoCompression\";\r\nimport type { Nullable } from \"core/types\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport { Geometry } from \"core/Meshes/geometry\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\n\r\nimport type { IKHRDracoMeshCompression } from \"babylonjs-gltf2interface\";\r\nimport { MeshPrimitiveMode, AccessorComponentType } from \"babylonjs-gltf2interface\";\r\nimport type { IMeshPrimitive, IBufferView } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\n\r\nconst NAME = \"KHR_draco_mesh_compression\";\r\n\r\ninterface IBufferViewDraco extends IBufferView {\r\n    _dracoBabylonGeometry?: Promise<Geometry>;\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression)\r\n */\r\nexport class KHR_draco_mesh_compression implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * The draco compression used to decode vertex data or DracoCompression.Default if not defined\r\n     */\r\n    public dracoCompression?: DracoCompression;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @param loader\r\n     * @hidden\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = DracoCompression.DecoderAvailable && this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @hidden */\r\n    public dispose(): void {\r\n        delete this.dracoCompression;\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @param context\r\n     * @param primitive\r\n     * @param babylonMesh\r\n     * @hidden\r\n     */\r\n    public _loadVertexDataAsync(context: string, primitive: IMeshPrimitive, babylonMesh: Mesh): Nullable<Promise<Geometry>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRDracoMeshCompression, Geometry>(context, primitive, this.name, (extensionContext, extension) => {\r\n            if (primitive.mode != undefined) {\r\n                if (primitive.mode !== MeshPrimitiveMode.TRIANGLE_STRIP && primitive.mode !== MeshPrimitiveMode.TRIANGLES) {\r\n                    throw new Error(`${context}: Unsupported mode ${primitive.mode}`);\r\n                }\r\n\r\n                // TODO: handle triangle strips\r\n                if (primitive.mode === MeshPrimitiveMode.TRIANGLE_STRIP) {\r\n                    throw new Error(`${context}: Mode ${primitive.mode} is not currently supported`);\r\n                }\r\n            }\r\n\r\n            const attributes: {\r\n                [kind: string]: number;\r\n            } = {};\r\n            const dividers: {\r\n                [kind: string]: number;\r\n            } = {};\r\n            const loadAttribute = (name: string, kind: string) => {\r\n                const uniqueId = extension.attributes[name];\r\n                if (uniqueId === undefined || primitive.attributes[name] === undefined) {\r\n                    return;\r\n                }\r\n\r\n                attributes[kind] = uniqueId;\r\n                const accessor = ArrayItem.Get(`${context}/attributes/${name}`, this._loader.gltf.accessors, primitive.attributes[name]);\r\n                if (accessor.normalized && accessor.componentType !== AccessorComponentType.FLOAT) {\r\n                    let divider = 1;\r\n                    switch (accessor.componentType) {\r\n                        case AccessorComponentType.BYTE:\r\n                            divider = 127.0;\r\n                            break;\r\n                        case AccessorComponentType.UNSIGNED_BYTE:\r\n                            divider = 255.0;\r\n                            break;\r\n                        case AccessorComponentType.SHORT:\r\n                            divider = 32767.0;\r\n                            break;\r\n                        case AccessorComponentType.UNSIGNED_SHORT:\r\n                            divider = 65535.0;\r\n                            break;\r\n                    }\r\n                    dividers[kind] = divider;\r\n                }\r\n\r\n                babylonMesh._delayInfo = babylonMesh._delayInfo || [];\r\n                if (babylonMesh._delayInfo.indexOf(kind) === -1) {\r\n                    babylonMesh._delayInfo.push(kind);\r\n                }\r\n            };\r\n\r\n            loadAttribute(\"POSITION\", VertexBuffer.PositionKind);\r\n            loadAttribute(\"NORMAL\", VertexBuffer.NormalKind);\r\n            loadAttribute(\"TANGENT\", VertexBuffer.TangentKind);\r\n            loadAttribute(\"TEXCOORD_0\", VertexBuffer.UVKind);\r\n            loadAttribute(\"TEXCOORD_1\", VertexBuffer.UV2Kind);\r\n            loadAttribute(\"TEXCOORD_2\", VertexBuffer.UV3Kind);\r\n            loadAttribute(\"TEXCOORD_3\", VertexBuffer.UV4Kind);\r\n            loadAttribute(\"TEXCOORD_4\", VertexBuffer.UV5Kind);\r\n            loadAttribute(\"TEXCOORD_5\", VertexBuffer.UV6Kind);\r\n            loadAttribute(\"JOINTS_0\", VertexBuffer.MatricesIndicesKind);\r\n            loadAttribute(\"WEIGHTS_0\", VertexBuffer.MatricesWeightsKind);\r\n            loadAttribute(\"COLOR_0\", VertexBuffer.ColorKind);\r\n\r\n            const bufferView = ArrayItem.Get(extensionContext, this._loader.gltf.bufferViews, extension.bufferView) as IBufferViewDraco;\r\n            if (!bufferView._dracoBabylonGeometry) {\r\n                bufferView._dracoBabylonGeometry = this._loader.loadBufferViewAsync(`/bufferViews/${bufferView.index}`, bufferView).then((data) => {\r\n                    const dracoCompression = this.dracoCompression || DracoCompression.Default;\r\n                    return dracoCompression\r\n                        .decodeMeshAsync(data, attributes, dividers)\r\n                        .then((babylonVertexData) => {\r\n                            const babylonGeometry = new Geometry(babylonMesh.name, this._loader.babylonScene);\r\n                            babylonVertexData.applyToGeometry(babylonGeometry);\r\n                            return babylonGeometry;\r\n                        })\r\n                        .catch((error) => {\r\n                            throw new Error(`${context}: ${error.message}`);\r\n                        });\r\n                });\r\n            }\r\n\r\n            return bufferView._dracoBabylonGeometry;\r\n        });\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_draco_mesh_compression(loader));\r\n"]},"metadata":{},"sourceType":"module"}