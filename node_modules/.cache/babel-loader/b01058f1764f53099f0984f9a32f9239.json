{"ast":null,"code":"import \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { DrawWrapper } from \"../Materials/drawWrapper.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\n/**\n * This represents one of the lens effect in a `lensFlareSystem`.\n * It controls one of the individual texture used in the effect.\n * @see https://doc.babylonjs.com/how_to/how_to_use_lens_flares\n */\n\nvar LensFlare =\n/** @class */\nfunction () {\n  /**\n   * Instantiates a new Lens Flare.\n   * This represents one of the lens effect in a `lensFlareSystem`.\n   * It controls one of the individual texture used in the effect.\n   * @see https://doc.babylonjs.com/how_to/how_to_use_lens_flares\n   * @param size Define the size of the lens flare in the system (a floating value between 0 and 1)\n   * @param position Define the position of the lens flare in the system. (a floating value between -1 and 1). A value of 0 is located on the emitter. A value greater than 0 is beyond the emitter and a value lesser than 0 is behind.\n   * @param color Define the lens color\n   * @param imgUrl Define the lens texture url\n   * @param system Define the `lensFlareSystem` this flare is part of\n   */\n  function LensFlare(\n  /**\n   * Define the size of the lens flare in the system (a floating value between 0 and 1)\n   */\n  size,\n  /**\n   * Define the position of the lens flare in the system. (a floating value between -1 and 1). A value of 0 is located on the emitter. A value greater than 0 is beyond the emitter and a value lesser than 0 is behind.\n   */\n  position, color, imgUrl, system) {\n    this.size = size;\n    this.position = position;\n    /**\n     * Define the alpha mode to render this particular lens.\n     */\n\n    this.alphaMode = 6;\n    this.color = color || new Color3(1, 1, 1);\n    this.texture = imgUrl ? new Texture(imgUrl, system.getScene(), true) : null;\n    this._system = system;\n    var engine = system.scene.getEngine();\n    this._drawWrapper = new DrawWrapper(engine);\n    this._drawWrapper.effect = engine.createEffect(\"lensFlare\", [VertexBuffer.PositionKind], [\"color\", \"viewportMatrix\"], [\"textureSampler\"], \"\");\n    system.lensFlares.push(this);\n  }\n  /**\n   * Creates a new Lens Flare.\n   * This represents one of the lens effect in a `lensFlareSystem`.\n   * It controls one of the individual texture used in the effect.\n   * @see https://doc.babylonjs.com/how_to/how_to_use_lens_flares\n   * @param size Define the size of the lens flare (a floating value between 0 and 1)\n   * @param position Define the position of the lens flare in the system. (a floating value between -1 and 1). A value of 0 is located on the emitter. A value greater than 0 is beyond the emitter and a value lesser than 0 is behind.\n   * @param color Define the lens color\n   * @param imgUrl Define the lens texture url\n   * @param system Define the `lensFlareSystem` this flare is part of\n   * @returns The newly created Lens Flare\n   */\n\n\n  LensFlare.AddFlare = function (size, position, color, imgUrl, system) {\n    return new LensFlare(size, position, color, imgUrl, system);\n  };\n  /**\n   * Dispose and release the lens flare with its associated resources.\n   */\n\n\n  LensFlare.prototype.dispose = function () {\n    if (this.texture) {\n      this.texture.dispose();\n    } // Remove from scene\n\n\n    var index = this._system.lensFlares.indexOf(this);\n\n    this._system.lensFlares.splice(index, 1);\n  };\n\n  return LensFlare;\n}();\n\nexport { LensFlare };","map":{"version":3,"mappings":";;AACA,SAASA,MAAT,QAAuB,wBAAvB;AACA,SAASC,OAAT,QAAwB,kCAAxB;AAGA,SAASC,WAAT,QAA4B,6BAA5B;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA;;;;;;AAKA;AAAA;AAAA;AAqCI;;;;;;;;;;;AAWA;AACI;;;AAGOC,MAJX;AAKI;;;AAGOC,UARX,EASIC,KATJ,EAUIC,MAVJ,EAWIC,MAXJ,EAW2B;AAPhB;AAIA;AA7CX;;;;AAGO,qBAAoB,CAApB;AA+CH,SAAKF,KAAL,GAAaA,KAAK,IAAI,IAAIN,MAAJ,CAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,CAAtB;AACA,SAAKS,OAAL,GAAeF,MAAM,GAAG,IAAIN,OAAJ,CAAYM,MAAZ,EAAoBC,MAAM,CAACE,QAAP,EAApB,EAAuC,IAAvC,CAAH,GAAkD,IAAvE;AACA,SAAKC,OAAL,GAAeH,MAAf;AAEA,QAAMI,MAAM,GAAGJ,MAAM,CAACK,KAAP,CAAaC,SAAb,EAAf;AAEA,SAAKC,YAAL,GAAoB,IAAIb,WAAJ,CAAgBU,MAAhB,CAApB;AAEA,SAAKG,YAAL,CAAkBC,MAAlB,GAA2BJ,MAAM,CAACK,YAAP,CAAoB,WAApB,EAAiC,CAACd,YAAY,CAACe,YAAd,CAAjC,EAA8D,CAAC,OAAD,EAAU,gBAAV,CAA9D,EAA2F,CAAC,gBAAD,CAA3F,EAA+G,EAA/G,CAA3B;AAEAV,UAAM,CAACW,UAAP,CAAkBC,IAAlB,CAAuB,IAAvB;AACH;AAnDD;;;;;;;;;;;;;;AAYcC,uBAAd,UAAuBjB,IAAvB,EAAqCC,QAArC,EAAuDC,KAAvD,EAAsEC,MAAtE,EAAsFC,MAAtF,EAA6G;AACzG,WAAO,IAAIa,SAAJ,CAAcjB,IAAd,EAAoBC,QAApB,EAA8BC,KAA9B,EAAqCC,MAArC,EAA6CC,MAA7C,CAAP;AACH,GAFa;AAyCd;;;;;AAGOa,gCAAP;AACI,QAAI,KAAKZ,OAAT,EAAkB;AACd,WAAKA,OAAL,CAAaa,OAAb;AACH,KAHL,CAKI;;;AACA,QAAMC,KAAK,GAAG,KAAKZ,OAAL,CAAaQ,UAAb,CAAwBK,OAAxB,CAAgC,IAAhC,CAAd;;AACA,SAAKb,OAAL,CAAaQ,UAAb,CAAwBM,MAAxB,CAA+BF,KAA/B,EAAsC,CAAtC;AACH,GARM;;AASX;AAAC,CAtFD","names":["Color3","Texture","DrawWrapper","VertexBuffer","size","position","color","imgUrl","system","texture","getScene","_system","engine","scene","getEngine","_drawWrapper","effect","createEffect","PositionKind","lensFlares","push","LensFlare","dispose","index","indexOf","splice"],"sourceRoot":"","sources":["../../../../../lts/core/generated/LensFlares/lensFlare.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { LensFlareSystem } from \"./lensFlareSystem\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { DrawWrapper } from \"../Materials/drawWrapper\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\n/**\r\n * This represents one of the lens effect in a `lensFlareSystem`.\r\n * It controls one of the individual texture used in the effect.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_lens_flares\r\n */\r\nexport class LensFlare {\r\n    /**\r\n     * Define the lens color.\r\n     */\r\n    public color: Color3;\r\n\r\n    /**\r\n     * Define the lens texture.\r\n     */\r\n    public texture: Nullable<Texture>;\r\n\r\n    /**\r\n     * Define the alpha mode to render this particular lens.\r\n     */\r\n    public alphaMode: number = Constants.ALPHA_ONEONE;\r\n\r\n    /** @hidden */\r\n    public _drawWrapper: DrawWrapper;\r\n\r\n    private _system: LensFlareSystem;\r\n\r\n    /**\r\n     * Creates a new Lens Flare.\r\n     * This represents one of the lens effect in a `lensFlareSystem`.\r\n     * It controls one of the individual texture used in the effect.\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_lens_flares\r\n     * @param size Define the size of the lens flare (a floating value between 0 and 1)\r\n     * @param position Define the position of the lens flare in the system. (a floating value between -1 and 1). A value of 0 is located on the emitter. A value greater than 0 is beyond the emitter and a value lesser than 0 is behind.\r\n     * @param color Define the lens color\r\n     * @param imgUrl Define the lens texture url\r\n     * @param system Define the `lensFlareSystem` this flare is part of\r\n     * @returns The newly created Lens Flare\r\n     */\r\n    public static AddFlare(size: number, position: number, color: Color3, imgUrl: string, system: LensFlareSystem): LensFlare {\r\n        return new LensFlare(size, position, color, imgUrl, system);\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new Lens Flare.\r\n     * This represents one of the lens effect in a `lensFlareSystem`.\r\n     * It controls one of the individual texture used in the effect.\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_lens_flares\r\n     * @param size Define the size of the lens flare in the system (a floating value between 0 and 1)\r\n     * @param position Define the position of the lens flare in the system. (a floating value between -1 and 1). A value of 0 is located on the emitter. A value greater than 0 is beyond the emitter and a value lesser than 0 is behind.\r\n     * @param color Define the lens color\r\n     * @param imgUrl Define the lens texture url\r\n     * @param system Define the `lensFlareSystem` this flare is part of\r\n     */\r\n    constructor(\r\n        /**\r\n         * Define the size of the lens flare in the system (a floating value between 0 and 1)\r\n         */\r\n        public size: number,\r\n        /**\r\n         * Define the position of the lens flare in the system. (a floating value between -1 and 1). A value of 0 is located on the emitter. A value greater than 0 is beyond the emitter and a value lesser than 0 is behind.\r\n         */\r\n        public position: number,\r\n        color: Color3,\r\n        imgUrl: string,\r\n        system: LensFlareSystem\r\n    ) {\r\n        this.color = color || new Color3(1, 1, 1);\r\n        this.texture = imgUrl ? new Texture(imgUrl, system.getScene(), true) : null;\r\n        this._system = system;\r\n\r\n        const engine = system.scene.getEngine();\r\n\r\n        this._drawWrapper = new DrawWrapper(engine);\r\n\r\n        this._drawWrapper.effect = engine.createEffect(\"lensFlare\", [VertexBuffer.PositionKind], [\"color\", \"viewportMatrix\"], [\"textureSampler\"], \"\");\r\n\r\n        system.lensFlares.push(this);\r\n    }\r\n\r\n    /**\r\n     * Dispose and release the lens flare with its associated resources.\r\n     */\r\n    public dispose(): void {\r\n        if (this.texture) {\r\n            this.texture.dispose();\r\n        }\r\n\r\n        // Remove from scene\r\n        const index = this._system.lensFlares.indexOf(this);\r\n        this._system.lensFlares.splice(index, 1);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}