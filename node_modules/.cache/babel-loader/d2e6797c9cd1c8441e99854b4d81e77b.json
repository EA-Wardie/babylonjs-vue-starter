{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { __decorate, __extends } from \"tslib\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject.js\";\nimport { ReflectionTextureBaseBlock } from \"../Dual/reflectionTextureBaseBlock.js\";\nimport { Texture } from \"../../../Textures/texture.js\";\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator.js\";\nimport { Scalar } from \"../../../../Maths/math.scalar.js\";\n/**\n * Block used to implement the reflection module of the PBR material\n */\n\nvar ReflectionBlock =\n/** @class */\nfunction (_super) {\n  __extends(ReflectionBlock, _super);\n  /**\n   * Create a new ReflectionBlock\n   * @param name defines the block name\n   */\n\n\n  function ReflectionBlock(name) {\n    var _this = _super.call(this, name) || this;\n    /**\n     * Defines if the material uses spherical harmonics vs spherical polynomials for the\n     * diffuse part of the IBL.\n     */\n\n\n    _this.useSphericalHarmonics = true;\n    /**\n     * Force the shader to compute irradiance in the fragment shader in order to take bump in account.\n     */\n\n    _this.forceIrradianceInFragment = false;\n    _this._isUnique = true;\n\n    _this.registerInput(\"position\", NodeMaterialBlockConnectionPointTypes.Vector3, false, NodeMaterialBlockTargets.Vertex);\n\n    _this.registerInput(\"world\", NodeMaterialBlockConnectionPointTypes.Matrix, false, NodeMaterialBlockTargets.Vertex);\n\n    _this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"reflection\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"reflection\", _this, NodeMaterialConnectionPointDirection.Output, ReflectionBlock, \"ReflectionBlock\"));\n\n    return _this;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  ReflectionBlock.prototype.getClassName = function () {\n    return \"ReflectionBlock\";\n  };\n\n  Object.defineProperty(ReflectionBlock.prototype, \"position\", {\n    /**\n     * Gets the position input component\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionBlock.prototype, \"worldPosition\", {\n    /**\n     * Gets the world position input component\n     */\n    get: function get() {\n      return this.worldPositionConnectionPoint;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionBlock.prototype, \"worldNormal\", {\n    /**\n     * Gets the world normal input component\n     */\n    get: function get() {\n      return this.worldNormalConnectionPoint;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionBlock.prototype, \"world\", {\n    /**\n     * Gets the world input component\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionBlock.prototype, \"cameraPosition\", {\n    /**\n     * Gets the camera (or eye) position component\n     */\n    get: function get() {\n      return this.cameraPositionConnectionPoint;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionBlock.prototype, \"view\", {\n    /**\n     * Gets the view input component\n     */\n    get: function get() {\n      return this.viewConnectionPoint;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionBlock.prototype, \"color\", {\n    /**\n     * Gets the color input component\n     */\n    get: function get() {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionBlock.prototype, \"reflection\", {\n    /**\n     * Gets the reflection object output component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionBlock.prototype, \"hasTexture\", {\n    /**\n     * Returns true if the block has a texture (either its own texture or the environment texture from the scene, if set)\n     */\n    get: function get() {\n      return !!this._getTexture();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionBlock.prototype, \"reflectionColor\", {\n    /**\n     * Gets the reflection color (either the name of the variable if the color input is connected, else a default value)\n     */\n    get: function get() {\n      return this.color.isConnected ? this.color.associatedVariableName : \"vec3(1., 1., 1.)\";\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ReflectionBlock.prototype._getTexture = function () {\n    if (this.texture) {\n      return this.texture;\n    }\n\n    return this._scene.environmentTexture;\n  };\n\n  ReflectionBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    _super.prototype.prepareDefines.call(this, mesh, nodeMaterial, defines);\n\n    var reflectionTexture = this._getTexture();\n\n    var reflection = reflectionTexture && reflectionTexture.getTextureMatrix;\n    defines.setValue(\"REFLECTION\", reflection, true);\n\n    if (!reflection) {\n      return;\n    }\n\n    defines.setValue(this._defineLODReflectionAlpha, reflectionTexture.lodLevelInAlpha, true);\n    defines.setValue(this._defineLinearSpecularReflection, reflectionTexture.linearSpecularLOD, true);\n    defines.setValue(this._defineOppositeZ, this._scene.useRightHandedSystem ? !reflectionTexture.invertZ : reflectionTexture.invertZ, true);\n    defines.setValue(\"SPHERICAL_HARMONICS\", this.useSphericalHarmonics, true);\n    defines.setValue(\"GAMMAREFLECTION\", reflectionTexture.gammaSpace, true);\n    defines.setValue(\"RGBDREFLECTION\", reflectionTexture.isRGBD, true);\n\n    if (reflectionTexture && reflectionTexture.coordinatesMode !== Texture.SKYBOX_MODE) {\n      if (reflectionTexture.isCube) {\n        defines.setValue(\"USESPHERICALFROMREFLECTIONMAP\", true);\n        defines.setValue(\"USEIRRADIANCEMAP\", false);\n\n        if (this.forceIrradianceInFragment || this._scene.getEngine().getCaps().maxVaryingVectors <= 8) {\n          defines.setValue(\"USESPHERICALINVERTEX\", false);\n        } else {\n          defines.setValue(\"USESPHERICALINVERTEX\", true);\n        }\n      }\n    }\n  };\n\n  ReflectionBlock.prototype.bind = function (effect, nodeMaterial, mesh, subMesh) {\n    _super.prototype.bind.call(this, effect, nodeMaterial, mesh);\n\n    var reflectionTexture = this._getTexture();\n\n    if (!reflectionTexture || !subMesh) {\n      return;\n    }\n\n    if (reflectionTexture.isCube) {\n      effect.setTexture(this._cubeSamplerName, reflectionTexture);\n    } else {\n      effect.setTexture(this._2DSamplerName, reflectionTexture);\n    }\n\n    var width = reflectionTexture.getSize().width;\n    effect.setFloat3(this._vReflectionMicrosurfaceInfosName, width, reflectionTexture.lodGenerationScale, reflectionTexture.lodGenerationOffset);\n    effect.setFloat2(this._vReflectionFilteringInfoName, width, Scalar.Log2(width));\n    var defines = subMesh.materialDefines;\n    var polynomials = reflectionTexture.sphericalPolynomial;\n\n    if (defines.USESPHERICALFROMREFLECTIONMAP && polynomials) {\n      if (defines.SPHERICAL_HARMONICS) {\n        var preScaledHarmonics = polynomials.preScaledHarmonics;\n        effect.setVector3(\"vSphericalL00\", preScaledHarmonics.l00);\n        effect.setVector3(\"vSphericalL1_1\", preScaledHarmonics.l1_1);\n        effect.setVector3(\"vSphericalL10\", preScaledHarmonics.l10);\n        effect.setVector3(\"vSphericalL11\", preScaledHarmonics.l11);\n        effect.setVector3(\"vSphericalL2_2\", preScaledHarmonics.l2_2);\n        effect.setVector3(\"vSphericalL2_1\", preScaledHarmonics.l2_1);\n        effect.setVector3(\"vSphericalL20\", preScaledHarmonics.l20);\n        effect.setVector3(\"vSphericalL21\", preScaledHarmonics.l21);\n        effect.setVector3(\"vSphericalL22\", preScaledHarmonics.l22);\n      } else {\n        effect.setFloat3(\"vSphericalX\", polynomials.x.x, polynomials.x.y, polynomials.x.z);\n        effect.setFloat3(\"vSphericalY\", polynomials.y.x, polynomials.y.y, polynomials.y.z);\n        effect.setFloat3(\"vSphericalZ\", polynomials.z.x, polynomials.z.y, polynomials.z.z);\n        effect.setFloat3(\"vSphericalXX_ZZ\", polynomials.xx.x - polynomials.zz.x, polynomials.xx.y - polynomials.zz.y, polynomials.xx.z - polynomials.zz.z);\n        effect.setFloat3(\"vSphericalYY_ZZ\", polynomials.yy.x - polynomials.zz.x, polynomials.yy.y - polynomials.zz.y, polynomials.yy.z - polynomials.zz.z);\n        effect.setFloat3(\"vSphericalZZ\", polynomials.zz.x, polynomials.zz.y, polynomials.zz.z);\n        effect.setFloat3(\"vSphericalXY\", polynomials.xy.x, polynomials.xy.y, polynomials.xy.z);\n        effect.setFloat3(\"vSphericalYZ\", polynomials.yz.x, polynomials.yz.y, polynomials.yz.z);\n        effect.setFloat3(\"vSphericalZX\", polynomials.zx.x, polynomials.zx.y, polynomials.zx.z);\n      }\n    }\n  };\n  /**\n   * Gets the code to inject in the vertex shader\n   * @param state current state of the node material building\n   * @returns the shader code\n   */\n\n\n  ReflectionBlock.prototype.handleVertexSide = function (state) {\n    var code = _super.prototype.handleVertexSide.call(this, state);\n\n    state._emitFunctionFromInclude(\"harmonicsFunctions\", \"//\".concat(this.name), {\n      replaceStrings: [{\n        search: /uniform vec3 vSphericalL00;[\\s\\S]*?uniform vec3 vSphericalL22;/g,\n        replace: \"\"\n      }, {\n        search: /uniform vec3 vSphericalX;[\\s\\S]*?uniform vec3 vSphericalZX;/g,\n        replace: \"\"\n      }]\n    });\n\n    var reflectionVectorName = state._getFreeVariableName(\"reflectionVector\");\n\n    this._vEnvironmentIrradianceName = state._getFreeVariableName(\"vEnvironmentIrradiance\");\n\n    state._emitVaryingFromString(this._vEnvironmentIrradianceName, \"vec3\", \"defined(USESPHERICALFROMREFLECTIONMAP) && defined(USESPHERICALINVERTEX)\");\n\n    state._emitUniformFromString(\"vSphericalL00\", \"vec3\", \"SPHERICAL_HARMONICS\");\n\n    state._emitUniformFromString(\"vSphericalL1_1\", \"vec3\", \"SPHERICAL_HARMONICS\");\n\n    state._emitUniformFromString(\"vSphericalL10\", \"vec3\", \"SPHERICAL_HARMONICS\");\n\n    state._emitUniformFromString(\"vSphericalL11\", \"vec3\", \"SPHERICAL_HARMONICS\");\n\n    state._emitUniformFromString(\"vSphericalL2_2\", \"vec3\", \"SPHERICAL_HARMONICS\");\n\n    state._emitUniformFromString(\"vSphericalL2_1\", \"vec3\", \"SPHERICAL_HARMONICS\");\n\n    state._emitUniformFromString(\"vSphericalL20\", \"vec3\", \"SPHERICAL_HARMONICS\");\n\n    state._emitUniformFromString(\"vSphericalL21\", \"vec3\", \"SPHERICAL_HARMONICS\");\n\n    state._emitUniformFromString(\"vSphericalL22\", \"vec3\", \"SPHERICAL_HARMONICS\");\n\n    state._emitUniformFromString(\"vSphericalX\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\n\n    state._emitUniformFromString(\"vSphericalY\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\n\n    state._emitUniformFromString(\"vSphericalZ\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\n\n    state._emitUniformFromString(\"vSphericalXX_ZZ\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\n\n    state._emitUniformFromString(\"vSphericalYY_ZZ\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\n\n    state._emitUniformFromString(\"vSphericalZZ\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\n\n    state._emitUniformFromString(\"vSphericalXY\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\n\n    state._emitUniformFromString(\"vSphericalYZ\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\n\n    state._emitUniformFromString(\"vSphericalZX\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\n\n    code += \"#if defined(USESPHERICALFROMREFLECTIONMAP) && defined(USESPHERICALINVERTEX)\\n                vec3 \".concat(reflectionVectorName, \" = vec3(\").concat(this._reflectionMatrixName, \" * vec4(normalize(\").concat(this.worldNormal.associatedVariableName, \").xyz, 0)).xyz;\\n                #ifdef \").concat(this._defineOppositeZ, \"\\n                    \").concat(reflectionVectorName, \".z *= -1.0;\\n                #endif\\n                \").concat(this._vEnvironmentIrradianceName, \" = computeEnvironmentIrradiance(\").concat(reflectionVectorName, \");\\n            #endif\\r\\n\");\n    return code;\n  };\n  /**\n   * Gets the main code of the block (fragment side)\n   * @param state current state of the node material building\n   * @param normalVarName name of the existing variable corresponding to the normal\n   * @returns the shader code\n   */\n\n\n  ReflectionBlock.prototype.getCode = function (state, normalVarName) {\n    var code = \"\";\n    this.handleFragmentSideInits(state);\n\n    state._emitFunctionFromInclude(\"harmonicsFunctions\", \"//\".concat(this.name), {\n      replaceStrings: [{\n        search: /uniform vec3 vSphericalL00;[\\s\\S]*?uniform vec3 vSphericalL22;/g,\n        replace: \"\"\n      }, {\n        search: /uniform vec3 vSphericalX;[\\s\\S]*?uniform vec3 vSphericalZX;/g,\n        replace: \"\"\n      }]\n    });\n\n    state._emitFunction(\"sampleReflection\", \"\\n            #ifdef \".concat(this._define3DName, \"\\n                #define sampleReflection(s, c) textureCube(s, c)\\n            #else\\n                #define sampleReflection(s, c) texture2D(s, c)\\n            #endif\\r\\n\"), \"//\".concat(this.name));\n\n    state._emitFunction(\"sampleReflectionLod\", \"\\n            #ifdef \".concat(this._define3DName, \"\\n                #define sampleReflectionLod(s, c, l) textureCubeLodEXT(s, c, l)\\n            #else\\n                #define sampleReflectionLod(s, c, l) texture2DLodEXT(s, c, l)\\n            #endif\\r\\n\"), \"//\".concat(this.name));\n\n    var computeReflectionCoordsFunc = \"\\n            vec3 computeReflectionCoordsPBR(vec4 worldPos, vec3 worldNormal) {\\n                \".concat(this.handleFragmentSideCodeReflectionCoords(\"worldNormal\", \"worldPos\", true, true), \"\\n                return \").concat(this._reflectionVectorName, \";\\n            }\\r\\n\");\n\n    state._emitFunction(\"computeReflectionCoordsPBR\", computeReflectionCoordsFunc, \"//\".concat(this.name));\n\n    this._vReflectionMicrosurfaceInfosName = state._getFreeVariableName(\"vReflectionMicrosurfaceInfos\");\n\n    state._emitUniformFromString(this._vReflectionMicrosurfaceInfosName, \"vec3\");\n\n    this._vReflectionInfosName = state._getFreeVariableName(\"vReflectionInfos\");\n    this._vReflectionFilteringInfoName = state._getFreeVariableName(\"vReflectionFilteringInfo\");\n\n    state._emitUniformFromString(this._vReflectionFilteringInfoName, \"vec2\");\n\n    code += \"#ifdef REFLECTION\\n            vec2 \".concat(this._vReflectionInfosName, \" = vec2(1., 0.);\\n\\n            reflectionOutParams reflectionOut;\\n\\n            reflectionBlock(\\n                \").concat(\"v_\" + this.worldPosition.associatedVariableName + \".xyz\", \",\\n                \").concat(normalVarName, \",\\n                alphaG,\\n                \").concat(this._vReflectionMicrosurfaceInfosName, \",\\n                \").concat(this._vReflectionInfosName, \",\\n                \").concat(this.reflectionColor, \",\\n            #ifdef ANISOTROPIC\\n                anisotropicOut,\\n            #endif\\n            #if defined(\").concat(this._defineLODReflectionAlpha, \") && !defined(\").concat(this._defineSkyboxName, \")\\n                NdotVUnclamped,\\n            #endif\\n            #ifdef \").concat(this._defineLinearSpecularReflection, \"\\n                roughness,\\n            #endif\\n            #ifdef \").concat(this._define3DName, \"\\n                \").concat(this._cubeSamplerName, \",\\n            #else\\n                \").concat(this._2DSamplerName, \",\\n            #endif\\n            #if defined(NORMAL) && defined(USESPHERICALINVERTEX)\\n                \").concat(this._vEnvironmentIrradianceName, \",\\n            #endif\\n            #ifdef USESPHERICALFROMREFLECTIONMAP\\n                #if !defined(NORMAL) || !defined(USESPHERICALINVERTEX)\\n                    \").concat(this._reflectionMatrixName, \",\\n                #endif\\n            #endif\\n            #ifdef USEIRRADIANCEMAP\\n                irradianceSampler, // ** not handled **\\n            #endif\\n            #ifndef LODBASEDMICROSFURACE\\n                #ifdef \").concat(this._define3DName, \"\\n                    \").concat(this._cubeSamplerName, \",\\n                    \").concat(this._cubeSamplerName, \",\\n                #else\\n                    \").concat(this._2DSamplerName, \",\\n                    \").concat(this._2DSamplerName, \",\\n                #endif\\n            #endif\\n            #ifdef REALTIME_FILTERING\\n                \").concat(this._vReflectionFilteringInfoName, \",\\n            #endif\\n                reflectionOut\\n            );\\n        #endif\\r\\n\");\n    return code;\n  };\n\n  ReflectionBlock.prototype._buildBlock = function (state) {\n    this._scene = state.sharedData.scene;\n\n    if (state.target !== NodeMaterialBlockTargets.Fragment) {\n      this._defineLODReflectionAlpha = state._getFreeDefineName(\"LODINREFLECTIONALPHA\");\n      this._defineLinearSpecularReflection = state._getFreeDefineName(\"LINEARSPECULARREFLECTION\");\n    }\n\n    return this;\n  };\n\n  ReflectionBlock.prototype._dumpPropertiesCode = function () {\n    var codeString = _super.prototype._dumpPropertiesCode.call(this);\n\n    if (this.texture) {\n      codeString += \"\".concat(this._codeVariableName, \".texture.gammaSpace = \").concat(this.texture.gammaSpace, \";\\r\\n\");\n    }\n\n    codeString += \"\".concat(this._codeVariableName, \".useSphericalHarmonics = \").concat(this.useSphericalHarmonics, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".forceIrradianceInFragment = \").concat(this.forceIrradianceInFragment, \";\\r\\n\");\n    return codeString;\n  };\n\n  ReflectionBlock.prototype.serialize = function () {\n    var _a, _b;\n\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    serializationObject.useSphericalHarmonics = this.useSphericalHarmonics;\n    serializationObject.forceIrradianceInFragment = this.forceIrradianceInFragment;\n    serializationObject.gammaSpace = (_b = (_a = this.texture) === null || _a === void 0 ? void 0 : _a.gammaSpace) !== null && _b !== void 0 ? _b : true;\n    return serializationObject;\n  };\n\n  ReflectionBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    this.useSphericalHarmonics = serializationObject.useSphericalHarmonics;\n    this.forceIrradianceInFragment = serializationObject.forceIrradianceInFragment;\n\n    if (this.texture) {\n      this.texture.gammaSpace = serializationObject.gammaSpace;\n    }\n  };\n\n  __decorate([editableInPropertyPage(\"Spherical Harmonics\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n    notifiers: {\n      update: true\n    }\n  })], ReflectionBlock.prototype, \"useSphericalHarmonics\", void 0);\n\n  __decorate([editableInPropertyPage(\"Force irradiance in fragment\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n    notifiers: {\n      update: true\n    }\n  })], ReflectionBlock.prototype, \"forceIrradianceInFragment\", void 0);\n\n  return ReflectionBlock;\n}(ReflectionTextureBaseBlock);\n\nexport { ReflectionBlock };\nRegisterClass(\"BABYLON.ReflectionBlock\", ReflectionBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlockConnectionPointTypes","NodeMaterialConnectionPointDirection","NodeMaterialBlockTargets","RegisterClass","NodeMaterialConnectionPointCustomObject","ReflectionTextureBaseBlock","Texture","editableInPropertyPage","PropertyTypeForEdition","Scalar","__extends","name","_super","_this","_isUnique","registerInput","Vector3","Vertex","Matrix","Color3","Fragment","registerOutput","Object","Output","ReflectionBlock","_inputs","worldPositionConnectionPoint","worldNormalConnectionPoint","cameraPositionConnectionPoint","viewConnectionPoint","_outputs","_getTexture","color","isConnected","associatedVariableName","texture","_scene","environmentTexture","mesh","nodeMaterial","defines","prepareDefines","call","reflectionTexture","reflection","getTextureMatrix","setValue","_defineLODReflectionAlpha","lodLevelInAlpha","_defineLinearSpecularReflection","linearSpecularLOD","_defineOppositeZ","useRightHandedSystem","invertZ","useSphericalHarmonics","gammaSpace","isRGBD","coordinatesMode","SKYBOX_MODE","isCube","forceIrradianceInFragment","getEngine","getCaps","maxVaryingVectors","effect","subMesh","bind","setTexture","_cubeSamplerName","_2DSamplerName","width","getSize","setFloat3","_vReflectionMicrosurfaceInfosName","lodGenerationScale","lodGenerationOffset","setFloat2","_vReflectionFilteringInfoName","Log2","materialDefines","polynomials","sphericalPolynomial","USESPHERICALFROMREFLECTIONMAP","SPHERICAL_HARMONICS","preScaledHarmonics","setVector3","l00","l1_1","l10","l11","l2_2","l2_1","l20","l21","l22","x","y","z","xx","zz","yy","xy","yz","zx","state","code","handleVertexSide","_emitFunctionFromInclude","replaceStrings","search","replace","reflectionVectorName","_getFreeVariableName","_vEnvironmentIrradianceName","_emitVaryingFromString","_emitUniformFromString","concat","_reflectionMatrixName","worldNormal","normalVarName","handleFragmentSideInits","_emitFunction","_define3DName","computeReflectionCoordsFunc","handleFragmentSideCodeReflectionCoords","_reflectionVectorName","_vReflectionInfosName","worldPosition","reflectionColor","_defineSkyboxName","sharedData","scene","target","_getFreeDefineName","codeString","_dumpPropertiesCode","_codeVariableName","serializationObject","serialize","_a","_b","rootUrl","_deserialize","__decorate","Boolean","notifiers","update"],"sourceRoot":"","sources":["../../../../../../../../lts/core/generated/Materials/Node/Blocks/PBR/reflectionBlock.ts"],"sourcesContent":["import { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterial, NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\r\nimport { ReflectionTextureBaseBlock } from \"../Dual/reflectionTextureBaseBlock\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\nimport type { Nullable } from \"../../../../types\";\r\nimport { Texture } from \"../../../Textures/texture\";\r\nimport type { BaseTexture } from \"../../../Textures/baseTexture\";\r\nimport type { Mesh } from \"../../../../Meshes/mesh\";\r\nimport type { SubMesh } from \"../../../../Meshes/subMesh\";\r\nimport type { Effect } from \"../../../effect\";\r\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator\";\r\nimport type { Scene } from \"../../../../scene\";\r\nimport { Scalar } from \"../../../../Maths/math.scalar\";\r\n\r\n/**\r\n * Block used to implement the reflection module of the PBR material\r\n */\r\nexport class ReflectionBlock extends ReflectionTextureBaseBlock {\r\n    /** @hidden */\r\n    public _defineLODReflectionAlpha: string;\r\n    /** @hidden */\r\n    public _defineLinearSpecularReflection: string;\r\n    private _vEnvironmentIrradianceName: string;\r\n    /** @hidden */\r\n    public _vReflectionMicrosurfaceInfosName: string;\r\n    /** @hidden */\r\n    public _vReflectionInfosName: string;\r\n    /** @hidden */\r\n    public _vReflectionFilteringInfoName: string;\r\n    private _scene: Scene;\r\n\r\n    /**\r\n     * The properties below are set by the main PBR block prior to calling methods of this class.\r\n     * This is to avoid having to add them as inputs here whereas they are already inputs of the main block, so already known.\r\n     * It's less burden on the user side in the editor part.\r\n     */\r\n\r\n    /** @hidden */\r\n    public worldPositionConnectionPoint: NodeMaterialConnectionPoint;\r\n    /** @hidden */\r\n    public worldNormalConnectionPoint: NodeMaterialConnectionPoint;\r\n    /** @hidden */\r\n    public cameraPositionConnectionPoint: NodeMaterialConnectionPoint;\r\n    /** @hidden */\r\n    public viewConnectionPoint: NodeMaterialConnectionPoint;\r\n\r\n    /**\r\n     * Defines if the material uses spherical harmonics vs spherical polynomials for the\r\n     * diffuse part of the IBL.\r\n     */\r\n    @editableInPropertyPage(\"Spherical Harmonics\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { update: true } })\r\n    public useSphericalHarmonics: boolean = true;\r\n\r\n    /**\r\n     * Force the shader to compute irradiance in the fragment shader in order to take bump in account.\r\n     */\r\n    @editableInPropertyPage(\"Force irradiance in fragment\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { update: true } })\r\n    public forceIrradianceInFragment: boolean = false;\r\n\r\n    /**\r\n     * Create a new ReflectionBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this._isUnique = true;\r\n\r\n        this.registerInput(\"position\", NodeMaterialBlockConnectionPointTypes.Vector3, false, NodeMaterialBlockTargets.Vertex);\r\n        this.registerInput(\"world\", NodeMaterialBlockConnectionPointTypes.Matrix, false, NodeMaterialBlockTargets.Vertex);\r\n        this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerOutput(\r\n            \"reflection\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"reflection\", this, NodeMaterialConnectionPointDirection.Output, ReflectionBlock, \"ReflectionBlock\")\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ReflectionBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the position input component\r\n     */\r\n    public get position(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the world position input component\r\n     */\r\n    public get worldPosition(): NodeMaterialConnectionPoint {\r\n        return this.worldPositionConnectionPoint;\r\n    }\r\n\r\n    /**\r\n     * Gets the world normal input component\r\n     */\r\n    public get worldNormal(): NodeMaterialConnectionPoint {\r\n        return this.worldNormalConnectionPoint;\r\n    }\r\n\r\n    /**\r\n     * Gets the world input component\r\n     */\r\n    public get world(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the camera (or eye) position component\r\n     */\r\n    public get cameraPosition(): NodeMaterialConnectionPoint {\r\n        return this.cameraPositionConnectionPoint;\r\n    }\r\n\r\n    /**\r\n     * Gets the view input component\r\n     */\r\n    public get view(): NodeMaterialConnectionPoint {\r\n        return this.viewConnectionPoint;\r\n    }\r\n\r\n    /**\r\n     * Gets the color input component\r\n     */\r\n    public get color(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the reflection object output component\r\n     */\r\n    public get reflection(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Returns true if the block has a texture (either its own texture or the environment texture from the scene, if set)\r\n     */\r\n    public get hasTexture(): boolean {\r\n        return !!this._getTexture();\r\n    }\r\n\r\n    /**\r\n     * Gets the reflection color (either the name of the variable if the color input is connected, else a default value)\r\n     */\r\n    public get reflectionColor(): string {\r\n        return this.color.isConnected ? this.color.associatedVariableName : \"vec3(1., 1., 1.)\";\r\n    }\r\n\r\n    protected _getTexture(): Nullable<BaseTexture> {\r\n        if (this.texture) {\r\n            return this.texture;\r\n        }\r\n\r\n        return this._scene.environmentTexture;\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        super.prepareDefines(mesh, nodeMaterial, defines);\r\n\r\n        const reflectionTexture = this._getTexture();\r\n        const reflection = reflectionTexture && reflectionTexture.getTextureMatrix;\r\n\r\n        defines.setValue(\"REFLECTION\", reflection, true);\r\n\r\n        if (!reflection) {\r\n            return;\r\n        }\r\n\r\n        defines.setValue(this._defineLODReflectionAlpha, reflectionTexture!.lodLevelInAlpha, true);\r\n        defines.setValue(this._defineLinearSpecularReflection, reflectionTexture!.linearSpecularLOD, true);\r\n        defines.setValue(this._defineOppositeZ, this._scene.useRightHandedSystem ? !reflectionTexture!.invertZ : reflectionTexture!.invertZ, true);\r\n\r\n        defines.setValue(\"SPHERICAL_HARMONICS\", this.useSphericalHarmonics, true);\r\n        defines.setValue(\"GAMMAREFLECTION\", reflectionTexture!.gammaSpace, true);\r\n        defines.setValue(\"RGBDREFLECTION\", reflectionTexture!.isRGBD, true);\r\n\r\n        if (reflectionTexture && reflectionTexture.coordinatesMode !== Texture.SKYBOX_MODE) {\r\n            if (reflectionTexture.isCube) {\r\n                defines.setValue(\"USESPHERICALFROMREFLECTIONMAP\", true);\r\n                defines.setValue(\"USEIRRADIANCEMAP\", false);\r\n                if (this.forceIrradianceInFragment || this._scene.getEngine().getCaps().maxVaryingVectors <= 8) {\r\n                    defines.setValue(\"USESPHERICALINVERTEX\", false);\r\n                } else {\r\n                    defines.setValue(\"USESPHERICALINVERTEX\", true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh, subMesh?: SubMesh) {\r\n        super.bind(effect, nodeMaterial, mesh);\r\n\r\n        const reflectionTexture = this._getTexture();\r\n\r\n        if (!reflectionTexture || !subMesh) {\r\n            return;\r\n        }\r\n\r\n        if (reflectionTexture.isCube) {\r\n            effect.setTexture(this._cubeSamplerName, reflectionTexture);\r\n        } else {\r\n            effect.setTexture(this._2DSamplerName, reflectionTexture);\r\n        }\r\n\r\n        const width = reflectionTexture.getSize().width;\r\n\r\n        effect.setFloat3(this._vReflectionMicrosurfaceInfosName, width, reflectionTexture.lodGenerationScale, reflectionTexture.lodGenerationOffset);\r\n        effect.setFloat2(this._vReflectionFilteringInfoName, width, Scalar.Log2(width));\r\n\r\n        const defines = subMesh.materialDefines as NodeMaterialDefines;\r\n\r\n        const polynomials = reflectionTexture.sphericalPolynomial;\r\n        if (defines.USESPHERICALFROMREFLECTIONMAP && polynomials) {\r\n            if (defines.SPHERICAL_HARMONICS) {\r\n                const preScaledHarmonics = polynomials.preScaledHarmonics;\r\n                effect.setVector3(\"vSphericalL00\", preScaledHarmonics.l00);\r\n                effect.setVector3(\"vSphericalL1_1\", preScaledHarmonics.l1_1);\r\n                effect.setVector3(\"vSphericalL10\", preScaledHarmonics.l10);\r\n                effect.setVector3(\"vSphericalL11\", preScaledHarmonics.l11);\r\n                effect.setVector3(\"vSphericalL2_2\", preScaledHarmonics.l2_2);\r\n                effect.setVector3(\"vSphericalL2_1\", preScaledHarmonics.l2_1);\r\n                effect.setVector3(\"vSphericalL20\", preScaledHarmonics.l20);\r\n                effect.setVector3(\"vSphericalL21\", preScaledHarmonics.l21);\r\n                effect.setVector3(\"vSphericalL22\", preScaledHarmonics.l22);\r\n            } else {\r\n                effect.setFloat3(\"vSphericalX\", polynomials.x.x, polynomials.x.y, polynomials.x.z);\r\n                effect.setFloat3(\"vSphericalY\", polynomials.y.x, polynomials.y.y, polynomials.y.z);\r\n                effect.setFloat3(\"vSphericalZ\", polynomials.z.x, polynomials.z.y, polynomials.z.z);\r\n                effect.setFloat3(\"vSphericalXX_ZZ\", polynomials.xx.x - polynomials.zz.x, polynomials.xx.y - polynomials.zz.y, polynomials.xx.z - polynomials.zz.z);\r\n                effect.setFloat3(\"vSphericalYY_ZZ\", polynomials.yy.x - polynomials.zz.x, polynomials.yy.y - polynomials.zz.y, polynomials.yy.z - polynomials.zz.z);\r\n                effect.setFloat3(\"vSphericalZZ\", polynomials.zz.x, polynomials.zz.y, polynomials.zz.z);\r\n                effect.setFloat3(\"vSphericalXY\", polynomials.xy.x, polynomials.xy.y, polynomials.xy.z);\r\n                effect.setFloat3(\"vSphericalYZ\", polynomials.yz.x, polynomials.yz.y, polynomials.yz.z);\r\n                effect.setFloat3(\"vSphericalZX\", polynomials.zx.x, polynomials.zx.y, polynomials.zx.z);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the code to inject in the vertex shader\r\n     * @param state current state of the node material building\r\n     * @returns the shader code\r\n     */\r\n    public handleVertexSide(state: NodeMaterialBuildState): string {\r\n        let code = super.handleVertexSide(state);\r\n\r\n        state._emitFunctionFromInclude(\"harmonicsFunctions\", `//${this.name}`, {\r\n            replaceStrings: [\r\n                { search: /uniform vec3 vSphericalL00;[\\s\\S]*?uniform vec3 vSphericalL22;/g, replace: \"\" },\r\n                { search: /uniform vec3 vSphericalX;[\\s\\S]*?uniform vec3 vSphericalZX;/g, replace: \"\" },\r\n            ],\r\n        });\r\n\r\n        const reflectionVectorName = state._getFreeVariableName(\"reflectionVector\");\r\n\r\n        this._vEnvironmentIrradianceName = state._getFreeVariableName(\"vEnvironmentIrradiance\");\r\n\r\n        state._emitVaryingFromString(this._vEnvironmentIrradianceName, \"vec3\", \"defined(USESPHERICALFROMREFLECTIONMAP) && defined(USESPHERICALINVERTEX)\");\r\n\r\n        state._emitUniformFromString(\"vSphericalL00\", \"vec3\", \"SPHERICAL_HARMONICS\");\r\n        state._emitUniformFromString(\"vSphericalL1_1\", \"vec3\", \"SPHERICAL_HARMONICS\");\r\n        state._emitUniformFromString(\"vSphericalL10\", \"vec3\", \"SPHERICAL_HARMONICS\");\r\n        state._emitUniformFromString(\"vSphericalL11\", \"vec3\", \"SPHERICAL_HARMONICS\");\r\n        state._emitUniformFromString(\"vSphericalL2_2\", \"vec3\", \"SPHERICAL_HARMONICS\");\r\n        state._emitUniformFromString(\"vSphericalL2_1\", \"vec3\", \"SPHERICAL_HARMONICS\");\r\n        state._emitUniformFromString(\"vSphericalL20\", \"vec3\", \"SPHERICAL_HARMONICS\");\r\n        state._emitUniformFromString(\"vSphericalL21\", \"vec3\", \"SPHERICAL_HARMONICS\");\r\n        state._emitUniformFromString(\"vSphericalL22\", \"vec3\", \"SPHERICAL_HARMONICS\");\r\n\r\n        state._emitUniformFromString(\"vSphericalX\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\r\n        state._emitUniformFromString(\"vSphericalY\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\r\n        state._emitUniformFromString(\"vSphericalZ\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\r\n        state._emitUniformFromString(\"vSphericalXX_ZZ\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\r\n        state._emitUniformFromString(\"vSphericalYY_ZZ\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\r\n        state._emitUniformFromString(\"vSphericalZZ\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\r\n        state._emitUniformFromString(\"vSphericalXY\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\r\n        state._emitUniformFromString(\"vSphericalYZ\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\r\n        state._emitUniformFromString(\"vSphericalZX\", \"vec3\", \"SPHERICAL_HARMONICS\", true);\r\n\r\n        code += `#if defined(USESPHERICALFROMREFLECTIONMAP) && defined(USESPHERICALINVERTEX)\r\n                vec3 ${reflectionVectorName} = vec3(${this._reflectionMatrixName} * vec4(normalize(${this.worldNormal.associatedVariableName}).xyz, 0)).xyz;\r\n                #ifdef ${this._defineOppositeZ}\r\n                    ${reflectionVectorName}.z *= -1.0;\r\n                #endif\r\n                ${this._vEnvironmentIrradianceName} = computeEnvironmentIrradiance(${reflectionVectorName});\r\n            #endif\\r\\n`;\r\n\r\n        return code;\r\n    }\r\n\r\n    /**\r\n     * Gets the main code of the block (fragment side)\r\n     * @param state current state of the node material building\r\n     * @param normalVarName name of the existing variable corresponding to the normal\r\n     * @returns the shader code\r\n     */\r\n    public getCode(state: NodeMaterialBuildState, normalVarName: string): string {\r\n        let code = \"\";\r\n\r\n        this.handleFragmentSideInits(state);\r\n\r\n        state._emitFunctionFromInclude(\"harmonicsFunctions\", `//${this.name}`, {\r\n            replaceStrings: [\r\n                { search: /uniform vec3 vSphericalL00;[\\s\\S]*?uniform vec3 vSphericalL22;/g, replace: \"\" },\r\n                { search: /uniform vec3 vSphericalX;[\\s\\S]*?uniform vec3 vSphericalZX;/g, replace: \"\" },\r\n            ],\r\n        });\r\n\r\n        state._emitFunction(\r\n            \"sampleReflection\",\r\n            `\r\n            #ifdef ${this._define3DName}\r\n                #define sampleReflection(s, c) textureCube(s, c)\r\n            #else\r\n                #define sampleReflection(s, c) texture2D(s, c)\r\n            #endif\\r\\n`,\r\n            `//${this.name}`\r\n        );\r\n\r\n        state._emitFunction(\r\n            \"sampleReflectionLod\",\r\n            `\r\n            #ifdef ${this._define3DName}\r\n                #define sampleReflectionLod(s, c, l) textureCubeLodEXT(s, c, l)\r\n            #else\r\n                #define sampleReflectionLod(s, c, l) texture2DLodEXT(s, c, l)\r\n            #endif\\r\\n`,\r\n            `//${this.name}`\r\n        );\r\n\r\n        const computeReflectionCoordsFunc = `\r\n            vec3 computeReflectionCoordsPBR(vec4 worldPos, vec3 worldNormal) {\r\n                ${this.handleFragmentSideCodeReflectionCoords(\"worldNormal\", \"worldPos\", true, true)}\r\n                return ${this._reflectionVectorName};\r\n            }\\r\\n`;\r\n\r\n        state._emitFunction(\"computeReflectionCoordsPBR\", computeReflectionCoordsFunc, `//${this.name}`);\r\n\r\n        this._vReflectionMicrosurfaceInfosName = state._getFreeVariableName(\"vReflectionMicrosurfaceInfos\");\r\n\r\n        state._emitUniformFromString(this._vReflectionMicrosurfaceInfosName, \"vec3\");\r\n\r\n        this._vReflectionInfosName = state._getFreeVariableName(\"vReflectionInfos\");\r\n\r\n        this._vReflectionFilteringInfoName = state._getFreeVariableName(\"vReflectionFilteringInfo\");\r\n\r\n        state._emitUniformFromString(this._vReflectionFilteringInfoName, \"vec2\");\r\n\r\n        code += `#ifdef REFLECTION\r\n            vec2 ${this._vReflectionInfosName} = vec2(1., 0.);\r\n\r\n            reflectionOutParams reflectionOut;\r\n\r\n            reflectionBlock(\r\n                ${\"v_\" + this.worldPosition.associatedVariableName + \".xyz\"},\r\n                ${normalVarName},\r\n                alphaG,\r\n                ${this._vReflectionMicrosurfaceInfosName},\r\n                ${this._vReflectionInfosName},\r\n                ${this.reflectionColor},\r\n            #ifdef ANISOTROPIC\r\n                anisotropicOut,\r\n            #endif\r\n            #if defined(${this._defineLODReflectionAlpha}) && !defined(${this._defineSkyboxName})\r\n                NdotVUnclamped,\r\n            #endif\r\n            #ifdef ${this._defineLinearSpecularReflection}\r\n                roughness,\r\n            #endif\r\n            #ifdef ${this._define3DName}\r\n                ${this._cubeSamplerName},\r\n            #else\r\n                ${this._2DSamplerName},\r\n            #endif\r\n            #if defined(NORMAL) && defined(USESPHERICALINVERTEX)\r\n                ${this._vEnvironmentIrradianceName},\r\n            #endif\r\n            #ifdef USESPHERICALFROMREFLECTIONMAP\r\n                #if !defined(NORMAL) || !defined(USESPHERICALINVERTEX)\r\n                    ${this._reflectionMatrixName},\r\n                #endif\r\n            #endif\r\n            #ifdef USEIRRADIANCEMAP\r\n                irradianceSampler, // ** not handled **\r\n            #endif\r\n            #ifndef LODBASEDMICROSFURACE\r\n                #ifdef ${this._define3DName}\r\n                    ${this._cubeSamplerName},\r\n                    ${this._cubeSamplerName},\r\n                #else\r\n                    ${this._2DSamplerName},\r\n                    ${this._2DSamplerName},\r\n                #endif\r\n            #endif\r\n            #ifdef REALTIME_FILTERING\r\n                ${this._vReflectionFilteringInfoName},\r\n            #endif\r\n                reflectionOut\r\n            );\r\n        #endif\\r\\n`;\r\n\r\n        return code;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        this._scene = state.sharedData.scene;\r\n\r\n        if (state.target !== NodeMaterialBlockTargets.Fragment) {\r\n            this._defineLODReflectionAlpha = state._getFreeDefineName(\"LODINREFLECTIONALPHA\");\r\n            this._defineLinearSpecularReflection = state._getFreeDefineName(\"LINEARSPECULARREFLECTION\");\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString = super._dumpPropertiesCode();\r\n\r\n        if (this.texture) {\r\n            codeString += `${this._codeVariableName}.texture.gammaSpace = ${this.texture.gammaSpace};\\r\\n`;\r\n        }\r\n        codeString += `${this._codeVariableName}.useSphericalHarmonics = ${this.useSphericalHarmonics};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.forceIrradianceInFragment = ${this.forceIrradianceInFragment};\\r\\n`;\r\n\r\n        return codeString;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.useSphericalHarmonics = this.useSphericalHarmonics;\r\n        serializationObject.forceIrradianceInFragment = this.forceIrradianceInFragment;\r\n        serializationObject.gammaSpace = this.texture?.gammaSpace ?? true;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.useSphericalHarmonics = serializationObject.useSphericalHarmonics;\r\n        this.forceIrradianceInFragment = serializationObject.forceIrradianceInFragment;\r\n        if (this.texture) {\r\n            this.texture.gammaSpace = serializationObject.gammaSpace;\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ReflectionBlock\", ReflectionBlock);\r\n"]},"metadata":{},"sourceType":"module"}