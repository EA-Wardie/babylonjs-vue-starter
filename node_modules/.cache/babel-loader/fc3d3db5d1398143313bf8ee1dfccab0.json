{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { __extends } from \"tslib\";\nimport { TouchCamera } from \"./touchCamera.js\";\nimport { Node } from \"../node.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Camera } from \"./camera.js\";\nimport \"../Gamepads/gamepadSceneComponent.js\";\nNode.AddNodeConstructor(\"FreeCamera\", function (name, scene) {\n  // Forcing to use the Universal camera\n  return function () {\n    return new UniversalCamera(name, Vector3.Zero(), scene);\n  };\n});\n/**\n * The Universal Camera is the one to choose for first person shooter type games, and works with all the keyboard, mouse, touch and gamepads. This replaces the earlier Free Camera,\n * which still works and will still be found in many Playgrounds.\n * @see https://doc.babylonjs.com/features/cameras#universal-camera\n */\n\nvar UniversalCamera =\n/** @class */\nfunction (_super) {\n  __extends(UniversalCamera, _super);\n  /**\n   * The Universal Camera is the one to choose for first person shooter type games, and works with all the keyboard, mouse, touch and gamepads. This replaces the earlier Free Camera,\n   * which still works and will still be found in many Playgrounds.\n   * @see https://doc.babylonjs.com/features/cameras#universal-camera\n   * @param name Define the name of the camera in the scene\n   * @param position Define the start position of the camera in the scene\n   * @param scene Define the scene the camera belongs to\n   */\n\n\n  function UniversalCamera(name, position, scene) {\n    var _this = _super.call(this, name, position, scene) || this;\n\n    _this.inputs.addGamepad();\n\n    return _this;\n  }\n\n  Object.defineProperty(UniversalCamera.prototype, \"gamepadAngularSensibility\", {\n    /**\n     * Defines the gamepad rotation sensibility.\n     * This is the threshold from when rotation starts to be accounted for to prevent jittering.\n     */\n    get: function get() {\n      var gamepad = this.inputs.attached[\"gamepad\"];\n\n      if (gamepad) {\n        return gamepad.gamepadAngularSensibility;\n      }\n\n      return 0;\n    },\n    set: function set(value) {\n      var gamepad = this.inputs.attached[\"gamepad\"];\n\n      if (gamepad) {\n        gamepad.gamepadAngularSensibility = value;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UniversalCamera.prototype, \"gamepadMoveSensibility\", {\n    /**\n     * Defines the gamepad move sensibility.\n     * This is the threshold from when moving starts to be accounted for to prevent jittering.\n     */\n    get: function get() {\n      var gamepad = this.inputs.attached[\"gamepad\"];\n\n      if (gamepad) {\n        return gamepad.gamepadMoveSensibility;\n      }\n\n      return 0;\n    },\n    set: function set(value) {\n      var gamepad = this.inputs.attached[\"gamepad\"];\n\n      if (gamepad) {\n        gamepad.gamepadMoveSensibility = value;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Gets the current object class name.\n   * @return the class name\n   */\n\n  UniversalCamera.prototype.getClassName = function () {\n    return \"UniversalCamera\";\n  };\n\n  return UniversalCamera;\n}(TouchCamera);\n\nexport { UniversalCamera };\n\nCamera._CreateDefaultParsedCamera = function (name, scene) {\n  return new UniversalCamera(name, Vector3.Zero(), scene);\n};","map":{"version":3,"mappings":";;AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,IAAT,QAAqB,YAArB;AAGA,SAASC,OAAT,QAAwB,yBAAxB;AACA,SAASC,MAAT,QAAuB,aAAvB;AAEA,OAAO,sCAAP;AAEAF,IAAI,CAACG,kBAAL,CAAwB,YAAxB,EAAsC,UAACC,IAAD,EAAOC,KAAP,EAAY;AAC9C;AACA,SAAO;AAAM,eAAIC,eAAJ,CAAoBF,IAApB,EAA0BH,OAAO,CAACM,IAAR,EAA1B,EAA0CF,KAA1C;AAAgD,GAA7D;AACH,CAHD;AAKA;;;;;;AAKA;AAAA;AAAA;AAAqCG;AAyCjC;;;;;;;;;;AAQA,2BAAYJ,IAAZ,EAA0BK,QAA1B,EAA6CJ,KAA7C,EAA0D;AAA1D,gBACIK,kBAAMN,IAAN,EAAYK,QAAZ,EAAsBJ,KAAtB,KAA4B,IADhC;;AAEIM,SAAI,CAACC,MAAL,CAAYC,UAAZ;;;AACH;;AA/CDC,wBAAWR,yBAAX,EAAW,2BAAX,EAAoC;AAJpC;;;;SAIA;AACI,UAAMS,OAAO,GAA2B,KAAKH,MAAL,CAAYI,QAAZ,CAAqB,SAArB,CAAxC;;AACA,UAAID,OAAJ,EAAa;AACT,eAAOA,OAAO,CAACE,yBAAf;AACH;;AAED,aAAO,CAAP;AACH,KAPmC;SASpC,aAAqCC,KAArC,EAAkD;AAC9C,UAAMH,OAAO,GAA2B,KAAKH,MAAL,CAAYI,QAAZ,CAAqB,SAArB,CAAxC;;AACA,UAAID,OAAJ,EAAa;AACTA,eAAO,CAACE,yBAAR,GAAoCC,KAApC;AACH;AACJ,KAdmC;qBAAA;;AAAA,GAApC;AAoBAJ,wBAAWR,yBAAX,EAAW,wBAAX,EAAiC;AAJjC;;;;SAIA;AACI,UAAMS,OAAO,GAA2B,KAAKH,MAAL,CAAYI,QAAZ,CAAqB,SAArB,CAAxC;;AACA,UAAID,OAAJ,EAAa;AACT,eAAOA,OAAO,CAACI,sBAAf;AACH;;AAED,aAAO,CAAP;AACH,KAPgC;SASjC,aAAkCD,KAAlC,EAA+C;AAC3C,UAAMH,OAAO,GAA2B,KAAKH,MAAL,CAAYI,QAAZ,CAAqB,SAArB,CAAxC;;AACA,UAAID,OAAJ,EAAa;AACTA,eAAO,CAACI,sBAAR,GAAiCD,KAAjC;AACH;AACJ,KAdgC;qBAAA;;AAAA,GAAjC;AA6BA;;;;;AAIOZ,2CAAP;AACI,WAAO,iBAAP;AACH,GAFM;;AAGX;AAAC,CA7DD,CAAqCP,WAArC;;;;AA+DAG,MAAM,CAACkB,0BAAP,GAAoC,UAAChB,IAAD,EAAeC,KAAf,EAA2B;AAC3D,SAAO,IAAIC,eAAJ,CAAoBF,IAApB,EAA0BH,OAAO,CAACM,IAAR,EAA1B,EAA0CF,KAA1C,CAAP;AACH,CAFD","names":["TouchCamera","Node","Vector3","Camera","AddNodeConstructor","name","scene","UniversalCamera","Zero","__extends","position","_super","_this","inputs","addGamepad","Object","gamepad","attached","gamepadAngularSensibility","value","gamepadMoveSensibility","_CreateDefaultParsedCamera"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Cameras/universalCamera.ts"],"sourcesContent":["import { TouchCamera } from \"./touchCamera\";\r\nimport { Node } from \"../node\";\r\nimport type { FreeCameraGamepadInput } from \"../Cameras/Inputs/freeCameraGamepadInput\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Camera } from \"./camera\";\r\n\r\nimport \"../Gamepads/gamepadSceneComponent\";\r\n\r\nNode.AddNodeConstructor(\"FreeCamera\", (name, scene) => {\r\n    // Forcing to use the Universal camera\r\n    return () => new UniversalCamera(name, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * The Universal Camera is the one to choose for first person shooter type games, and works with all the keyboard, mouse, touch and gamepads. This replaces the earlier Free Camera,\r\n * which still works and will still be found in many Playgrounds.\r\n * @see https://doc.babylonjs.com/features/cameras#universal-camera\r\n */\r\nexport class UniversalCamera extends TouchCamera {\r\n    /**\r\n     * Defines the gamepad rotation sensibility.\r\n     * This is the threshold from when rotation starts to be accounted for to prevent jittering.\r\n     */\r\n    public get gamepadAngularSensibility(): number {\r\n        const gamepad = <FreeCameraGamepadInput>this.inputs.attached[\"gamepad\"];\r\n        if (gamepad) {\r\n            return gamepad.gamepadAngularSensibility;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    public set gamepadAngularSensibility(value: number) {\r\n        const gamepad = <FreeCameraGamepadInput>this.inputs.attached[\"gamepad\"];\r\n        if (gamepad) {\r\n            gamepad.gamepadAngularSensibility = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Defines the gamepad move sensibility.\r\n     * This is the threshold from when moving starts to be accounted for to prevent jittering.\r\n     */\r\n    public get gamepadMoveSensibility(): number {\r\n        const gamepad = <FreeCameraGamepadInput>this.inputs.attached[\"gamepad\"];\r\n        if (gamepad) {\r\n            return gamepad.gamepadMoveSensibility;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    public set gamepadMoveSensibility(value: number) {\r\n        const gamepad = <FreeCameraGamepadInput>this.inputs.attached[\"gamepad\"];\r\n        if (gamepad) {\r\n            gamepad.gamepadMoveSensibility = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The Universal Camera is the one to choose for first person shooter type games, and works with all the keyboard, mouse, touch and gamepads. This replaces the earlier Free Camera,\r\n     * which still works and will still be found in many Playgrounds.\r\n     * @see https://doc.babylonjs.com/features/cameras#universal-camera\r\n     * @param name Define the name of the camera in the scene\r\n     * @param position Define the start position of the camera in the scene\r\n     * @param scene Define the scene the camera belongs to\r\n     */\r\n    constructor(name: string, position: Vector3, scene?: Scene) {\r\n        super(name, position, scene);\r\n        this.inputs.addGamepad();\r\n    }\r\n\r\n    /**\r\n     * Gets the current object class name.\r\n     * @return the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"UniversalCamera\";\r\n    }\r\n}\r\n\r\nCamera._CreateDefaultParsedCamera = (name: string, scene: Scene) => {\r\n    return new UniversalCamera(name, Vector3.Zero(), scene);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}