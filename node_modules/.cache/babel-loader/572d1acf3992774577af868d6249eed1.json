{"ast":null,"code":"import \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint16-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint32-array.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.array-buffer.constructor.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport { ThinEngine } from \"../../Engines/thinEngine.js\"; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nThinEngine.prototype.updateDynamicIndexBuffer = function (indexBuffer, indices, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  } // Force cache update\n\n\n  this._currentBoundBuffer[this._gl.ELEMENT_ARRAY_BUFFER] = null;\n  this.bindIndexBuffer(indexBuffer);\n  var arrayBuffer;\n\n  if (indices instanceof Uint16Array || indices instanceof Uint32Array) {\n    arrayBuffer = indices;\n  } else {\n    arrayBuffer = indexBuffer.is32Bits ? new Uint32Array(indices) : new Uint16Array(indices);\n  }\n\n  this._gl.bufferData(this._gl.ELEMENT_ARRAY_BUFFER, arrayBuffer, this._gl.DYNAMIC_DRAW);\n\n  this._resetIndexBufferBinding();\n};\n\nThinEngine.prototype.updateDynamicVertexBuffer = function (vertexBuffer, data, byteOffset, byteLength) {\n  this.bindArrayBuffer(vertexBuffer);\n\n  if (byteOffset === undefined) {\n    byteOffset = 0;\n  }\n\n  var dataLength = data.byteLength || data.length;\n\n  if (byteLength === undefined || byteLength >= dataLength && byteOffset === 0) {\n    if (data instanceof Array) {\n      this._gl.bufferSubData(this._gl.ARRAY_BUFFER, byteOffset, new Float32Array(data));\n    } else {\n      this._gl.bufferSubData(this._gl.ARRAY_BUFFER, byteOffset, data);\n    }\n  } else {\n    if (data instanceof Array) {\n      this._gl.bufferSubData(this._gl.ARRAY_BUFFER, 0, new Float32Array(data).subarray(byteOffset, byteOffset + byteLength));\n    } else {\n      if (data instanceof ArrayBuffer) {\n        data = new Uint8Array(data, byteOffset, byteLength);\n      } else {\n        data = new Uint8Array(data.buffer, data.byteOffset + byteOffset, byteLength);\n      }\n\n      this._gl.bufferSubData(this._gl.ARRAY_BUFFER, 0, data);\n    }\n  }\n\n  this._resetVertexBufferBinding();\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,6BAA3B,C,CAyBA;;AACAA,UAAU,CAACC,SAAX,CAAqBC,wBAArB,GAAgD,UAA4BC,WAA5B,EAAqDC,OAArD,EAA4EC,MAA5E,EAA8F;AAAlB;AAAAA;AAAkB,IAC1I;;;AACA,OAAKC,mBAAL,CAAyB,KAAKC,GAAL,CAASC,oBAAlC,IAA0D,IAA1D;AACA,OAAKC,eAAL,CAAqBN,WAArB;AACA,MAAIO,WAAJ;;AAEA,MAAIN,OAAO,YAAYO,WAAnB,IAAkCP,OAAO,YAAYQ,WAAzD,EAAsE;AAClEF,eAAW,GAAGN,OAAd;AACH,GAFD,MAEO;AACHM,eAAW,GAAGP,WAAW,CAACU,QAAZ,GAAuB,IAAID,WAAJ,CAAgBR,OAAhB,CAAvB,GAAkD,IAAIO,WAAJ,CAAgBP,OAAhB,CAAhE;AACH;;AAED,OAAKG,GAAL,CAASO,UAAT,CAAoB,KAAKP,GAAL,CAASC,oBAA7B,EAAmDE,WAAnD,EAAgE,KAAKH,GAAL,CAASQ,YAAzE;;AAEA,OAAKC,wBAAL;AACH,CAfD;;AAiBAhB,UAAU,CAACC,SAAX,CAAqBgB,yBAArB,GAAiD,UAA4BC,YAA5B,EAAsDC,IAAtD,EAAuEC,UAAvE,EAA4FC,UAA5F,EAA+G;AAC5J,OAAKC,eAAL,CAAqBJ,YAArB;;AAEA,MAAIE,UAAU,KAAKG,SAAnB,EAA8B;AAC1BH,cAAU,GAAG,CAAb;AACH;;AAED,MAAMI,UAAU,GAAIL,IAAoB,CAACE,UAArB,IAAoCF,IAAiB,CAACM,MAA1E;;AAEA,MAAIJ,UAAU,KAAKE,SAAf,IAA6BF,UAAU,IAAIG,UAAd,IAA4BJ,UAAU,KAAK,CAA5E,EAAgF;AAC5E,QAAID,IAAI,YAAYO,KAApB,EAA2B;AACvB,WAAKnB,GAAL,CAASoB,aAAT,CAAuB,KAAKpB,GAAL,CAASqB,YAAhC,EAA8CR,UAA9C,EAA0D,IAAIS,YAAJ,CAAiBV,IAAjB,CAA1D;AACH,KAFD,MAEO;AACH,WAAKZ,GAAL,CAASoB,aAAT,CAAuB,KAAKpB,GAAL,CAASqB,YAAhC,EAA8CR,UAA9C,EAAuED,IAAvE;AACH;AACJ,GAND,MAMO;AACH,QAAIA,IAAI,YAAYO,KAApB,EAA2B;AACvB,WAAKnB,GAAL,CAASoB,aAAT,CAAuB,KAAKpB,GAAL,CAASqB,YAAhC,EAA8C,CAA9C,EAAiD,IAAIC,YAAJ,CAAiBV,IAAjB,EAAuBW,QAAvB,CAAgCV,UAAhC,EAA4CA,UAAU,GAAGC,UAAzD,CAAjD;AACH,KAFD,MAEO;AACH,UAAIF,IAAI,YAAYY,WAApB,EAAiC;AAC7BZ,YAAI,GAAG,IAAIa,UAAJ,CAAeb,IAAf,EAAqBC,UAArB,EAAiCC,UAAjC,CAAP;AACH,OAFD,MAEO;AACHF,YAAI,GAAG,IAAIa,UAAJ,CAAeb,IAAI,CAACc,MAApB,EAA4Bd,IAAI,CAACC,UAAL,GAAkBA,UAA9C,EAA0DC,UAA1D,CAAP;AACH;;AAED,WAAKd,GAAL,CAASoB,aAAT,CAAuB,KAAKpB,GAAL,CAASqB,YAAhC,EAA8C,CAA9C,EAA8DT,IAA9D;AACH;AACJ;;AAED,OAAKe,yBAAL;AACH,CA9BD","names":["ThinEngine","prototype","updateDynamicIndexBuffer","indexBuffer","indices","offset","_currentBoundBuffer","_gl","ELEMENT_ARRAY_BUFFER","bindIndexBuffer","arrayBuffer","Uint16Array","Uint32Array","is32Bits","bufferData","DYNAMIC_DRAW","_resetIndexBufferBinding","updateDynamicVertexBuffer","vertexBuffer","data","byteOffset","byteLength","bindArrayBuffer","undefined","dataLength","length","Array","bufferSubData","ARRAY_BUFFER","Float32Array","subarray","ArrayBuffer","Uint8Array","buffer","_resetVertexBufferBinding"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/Extensions/engine.dynamicBuffer.ts"],"sourcesContent":["import { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport type { DataBuffer } from \"../../Buffers/dataBuffer\";\r\nimport type { IndicesArray, DataArray } from \"../../types\";\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n    export interface ThinEngine {\r\n        /**\r\n         * Update a dynamic index buffer\r\n         * @param indexBuffer defines the target index buffer\r\n         * @param indices defines the data to update\r\n         * @param offset defines the offset in the target index buffer where update should start\r\n         */\r\n        updateDynamicIndexBuffer(indexBuffer: DataBuffer, indices: IndicesArray, offset?: number): void;\r\n\r\n        /**\r\n         * Updates a dynamic vertex buffer.\r\n         * @param vertexBuffer the vertex buffer to update\r\n         * @param data the data used to update the vertex buffer\r\n         * @param byteOffset the byte offset of the data\r\n         * @param byteLength the byte length of the data\r\n         */\r\n        updateDynamicVertexBuffer(vertexBuffer: DataBuffer, data: DataArray, byteOffset?: number, byteLength?: number): void;\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nThinEngine.prototype.updateDynamicIndexBuffer = function (this: ThinEngine, indexBuffer: DataBuffer, indices: IndicesArray, offset: number = 0): void {\r\n    // Force cache update\r\n    this._currentBoundBuffer[this._gl.ELEMENT_ARRAY_BUFFER] = null;\r\n    this.bindIndexBuffer(indexBuffer);\r\n    let arrayBuffer;\r\n\r\n    if (indices instanceof Uint16Array || indices instanceof Uint32Array) {\r\n        arrayBuffer = indices;\r\n    } else {\r\n        arrayBuffer = indexBuffer.is32Bits ? new Uint32Array(indices) : new Uint16Array(indices);\r\n    }\r\n\r\n    this._gl.bufferData(this._gl.ELEMENT_ARRAY_BUFFER, arrayBuffer, this._gl.DYNAMIC_DRAW);\r\n\r\n    this._resetIndexBufferBinding();\r\n};\r\n\r\nThinEngine.prototype.updateDynamicVertexBuffer = function (this: ThinEngine, vertexBuffer: DataBuffer, data: DataArray, byteOffset?: number, byteLength?: number): void {\r\n    this.bindArrayBuffer(vertexBuffer);\r\n\r\n    if (byteOffset === undefined) {\r\n        byteOffset = 0;\r\n    }\r\n\r\n    const dataLength = (data as ArrayBuffer).byteLength || (data as number[]).length;\r\n\r\n    if (byteLength === undefined || (byteLength >= dataLength && byteOffset === 0)) {\r\n        if (data instanceof Array) {\r\n            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, byteOffset, new Float32Array(data));\r\n        } else {\r\n            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, byteOffset, <ArrayBuffer>data);\r\n        }\r\n    } else {\r\n        if (data instanceof Array) {\r\n            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, 0, new Float32Array(data).subarray(byteOffset, byteOffset + byteLength));\r\n        } else {\r\n            if (data instanceof ArrayBuffer) {\r\n                data = new Uint8Array(data, byteOffset, byteLength);\r\n            } else {\r\n                data = new Uint8Array(data.buffer, data.byteOffset + byteOffset, byteLength);\r\n            }\r\n\r\n            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, 0, <ArrayBuffer>data);\r\n        }\r\n    }\r\n\r\n    this._resetVertexBufferBinding();\r\n};\r\n"]},"metadata":{},"sourceType":"module"}