{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\n\n/**\n * Class used to store a texture sampler data\n */\nvar TextureSampler =\n/** @class */\nfunction () {\n  /**\n   * Creates a Sampler instance\n   */\n  function TextureSampler() {\n    /**\n     * Gets the sampling mode of the texture\n     */\n    this.samplingMode = -1;\n    this._useMipMaps = true;\n    /** @hidden */\n\n    this._cachedWrapU = null;\n    /** @hidden */\n\n    this._cachedWrapV = null;\n    /** @hidden */\n\n    this._cachedWrapR = null;\n    /** @hidden */\n\n    this._cachedAnisotropicFilteringLevel = null;\n    /** @hidden */\n\n    this._comparisonFunction = 0;\n  }\n\n  Object.defineProperty(TextureSampler.prototype, \"wrapU\", {\n    /**\n     * | Value | Type               | Description |\n     * | ----- | ------------------ | ----------- |\n     * | 0     | CLAMP_ADDRESSMODE  |             |\n     * | 1     | WRAP_ADDRESSMODE   |             |\n     * | 2     | MIRROR_ADDRESSMODE |             |\n     */\n    get: function get() {\n      return this._cachedWrapU;\n    },\n    set: function set(value) {\n      this._cachedWrapU = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextureSampler.prototype, \"wrapV\", {\n    /**\n     * | Value | Type               | Description |\n     * | ----- | ------------------ | ----------- |\n     * | 0     | CLAMP_ADDRESSMODE  |             |\n     * | 1     | WRAP_ADDRESSMODE   |             |\n     * | 2     | MIRROR_ADDRESSMODE |             |\n     */\n    get: function get() {\n      return this._cachedWrapV;\n    },\n    set: function set(value) {\n      this._cachedWrapV = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextureSampler.prototype, \"wrapR\", {\n    /**\n     * | Value | Type               | Description |\n     * | ----- | ------------------ | ----------- |\n     * | 0     | CLAMP_ADDRESSMODE  |             |\n     * | 1     | WRAP_ADDRESSMODE   |             |\n     * | 2     | MIRROR_ADDRESSMODE |             |\n     */\n    get: function get() {\n      return this._cachedWrapR;\n    },\n    set: function set(value) {\n      this._cachedWrapR = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextureSampler.prototype, \"anisotropicFilteringLevel\", {\n    /**\n     * With compliant hardware and browser (supporting anisotropic filtering)\n     * this defines the level of anisotropic filtering in the texture.\n     * The higher the better but the slower.\n     */\n    get: function get() {\n      return this._cachedAnisotropicFilteringLevel;\n    },\n    set: function set(value) {\n      this._cachedAnisotropicFilteringLevel = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextureSampler.prototype, \"comparisonFunction\", {\n    /**\n     * Gets or sets the comparison function (513, 514, etc). Set 0 to not use a comparison function\n     */\n    get: function get() {\n      return this._comparisonFunction;\n    },\n    set: function set(value) {\n      this._comparisonFunction = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextureSampler.prototype, \"useMipMaps\", {\n    /**\n     * Indicates to use the mip maps (if available on the texture).\n     * Thanks to this flag, you can instruct the sampler to not sample the mipmaps even if they exist (and if the sampling mode is set to a value that normally samples the mipmaps!)\n     */\n    get: function get() {\n      return this._useMipMaps;\n    },\n    set: function set(value) {\n      this._useMipMaps = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Sets all the parameters of the sampler\n   * @param wrapU u address mode (default: TEXTURE_WRAP_ADDRESSMODE)\n   * @param wrapV v address mode (default: TEXTURE_WRAP_ADDRESSMODE)\n   * @param wrapR r address mode (default: TEXTURE_WRAP_ADDRESSMODE)\n   * @param anisotropicFilteringLevel anisotropic level (default: 1)\n   * @param samplingMode sampling mode (default: 2)\n   * @param comparisonFunction comparison function (default: 0 - no comparison function)\n   * @returns the current sampler instance\n   */\n\n  TextureSampler.prototype.setParameters = function (wrapU, wrapV, wrapR, anisotropicFilteringLevel, samplingMode, comparisonFunction) {\n    if (wrapU === void 0) {\n      wrapU = 1;\n    }\n\n    if (wrapV === void 0) {\n      wrapV = 1;\n    }\n\n    if (wrapR === void 0) {\n      wrapR = 1;\n    }\n\n    if (anisotropicFilteringLevel === void 0) {\n      anisotropicFilteringLevel = 1;\n    }\n\n    if (samplingMode === void 0) {\n      samplingMode = 2;\n    }\n\n    if (comparisonFunction === void 0) {\n      comparisonFunction = 0;\n    }\n\n    this._cachedWrapU = wrapU;\n    this._cachedWrapV = wrapV;\n    this._cachedWrapR = wrapR;\n    this._cachedAnisotropicFilteringLevel = anisotropicFilteringLevel;\n    this.samplingMode = samplingMode;\n    this._comparisonFunction = comparisonFunction;\n    return this;\n  };\n  /**\n   * Compares this sampler with another one\n   * @param other sampler to compare with\n   * @returns true if the samplers have the same parametres, else false\n   */\n\n\n  TextureSampler.prototype.compareSampler = function (other) {\n    return this._cachedWrapU === other._cachedWrapU && this._cachedWrapV === other._cachedWrapV && this._cachedWrapR === other._cachedWrapR && this._cachedAnisotropicFilteringLevel === other._cachedAnisotropicFilteringLevel && this.samplingMode === other.samplingMode && this._comparisonFunction === other._comparisonFunction && this._useMipMaps === other._useMipMaps;\n  };\n\n  return TextureSampler;\n}();\n\nexport { TextureSampler };","map":{"version":3,"mappings":"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","names":["Object","TextureSampler","_cachedWrapU","value","_cachedWrapV","_cachedWrapR","_cachedAnisotropicFilteringLevel","_comparisonFunction","_useMipMaps","wrapU","wrapV","wrapR","anisotropicFilteringLevel","samplingMode","comparisonFunction","other"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Textures/textureSampler.ts"],"sourcesContent":["import { Constants } from \"../../Engines/constants\";\r\nimport type { Nullable } from \"../../types\";\r\n\r\n/**\r\n * Class used to store a texture sampler data\r\n */\r\nexport class TextureSampler {\r\n    /**\r\n     * Gets the sampling mode of the texture\r\n     */\r\n    public samplingMode: number = -1;\r\n\r\n    /**\r\n     * | Value | Type               | Description |\r\n     * | ----- | ------------------ | ----------- |\r\n     * | 0     | CLAMP_ADDRESSMODE  |             |\r\n     * | 1     | WRAP_ADDRESSMODE   |             |\r\n     * | 2     | MIRROR_ADDRESSMODE |             |\r\n     */\r\n    public get wrapU() {\r\n        return this._cachedWrapU;\r\n    }\r\n\r\n    public set wrapU(value: Nullable<number>) {\r\n        this._cachedWrapU = value;\r\n    }\r\n\r\n    /**\r\n     * | Value | Type               | Description |\r\n     * | ----- | ------------------ | ----------- |\r\n     * | 0     | CLAMP_ADDRESSMODE  |             |\r\n     * | 1     | WRAP_ADDRESSMODE   |             |\r\n     * | 2     | MIRROR_ADDRESSMODE |             |\r\n     */\r\n    public get wrapV() {\r\n        return this._cachedWrapV;\r\n    }\r\n\r\n    public set wrapV(value: Nullable<number>) {\r\n        this._cachedWrapV = value;\r\n    }\r\n\r\n    /**\r\n     * | Value | Type               | Description |\r\n     * | ----- | ------------------ | ----------- |\r\n     * | 0     | CLAMP_ADDRESSMODE  |             |\r\n     * | 1     | WRAP_ADDRESSMODE   |             |\r\n     * | 2     | MIRROR_ADDRESSMODE |             |\r\n     */\r\n    public get wrapR() {\r\n        return this._cachedWrapR;\r\n    }\r\n\r\n    public set wrapR(value: Nullable<number>) {\r\n        this._cachedWrapR = value;\r\n    }\r\n\r\n    /**\r\n     * With compliant hardware and browser (supporting anisotropic filtering)\r\n     * this defines the level of anisotropic filtering in the texture.\r\n     * The higher the better but the slower.\r\n     */\r\n    public get anisotropicFilteringLevel() {\r\n        return this._cachedAnisotropicFilteringLevel;\r\n    }\r\n\r\n    public set anisotropicFilteringLevel(value: Nullable<number>) {\r\n        this._cachedAnisotropicFilteringLevel = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the comparison function (Constants.LESS, Constants.EQUAL, etc). Set 0 to not use a comparison function\r\n     */\r\n    public get comparisonFunction() {\r\n        return this._comparisonFunction;\r\n    }\r\n\r\n    public set comparisonFunction(value: number) {\r\n        this._comparisonFunction = value;\r\n    }\r\n\r\n    private _useMipMaps = true;\r\n    /**\r\n     * Indicates to use the mip maps (if available on the texture).\r\n     * Thanks to this flag, you can instruct the sampler to not sample the mipmaps even if they exist (and if the sampling mode is set to a value that normally samples the mipmaps!)\r\n     */\r\n    public get useMipMaps() {\r\n        return this._useMipMaps;\r\n    }\r\n\r\n    public set useMipMaps(value: boolean) {\r\n        this._useMipMaps = value;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _cachedWrapU: Nullable<number> = null;\r\n\r\n    /** @hidden */\r\n    public _cachedWrapV: Nullable<number> = null;\r\n\r\n    /** @hidden */\r\n    public _cachedWrapR: Nullable<number> = null;\r\n\r\n    /** @hidden */\r\n    public _cachedAnisotropicFilteringLevel: Nullable<number> = null;\r\n\r\n    /** @hidden */\r\n    public _comparisonFunction: number = 0;\r\n\r\n    /**\r\n     * Creates a Sampler instance\r\n     */\r\n    constructor() {}\r\n\r\n    /**\r\n     * Sets all the parameters of the sampler\r\n     * @param wrapU u address mode (default: TEXTURE_WRAP_ADDRESSMODE)\r\n     * @param wrapV v address mode (default: TEXTURE_WRAP_ADDRESSMODE)\r\n     * @param wrapR r address mode (default: TEXTURE_WRAP_ADDRESSMODE)\r\n     * @param anisotropicFilteringLevel anisotropic level (default: 1)\r\n     * @param samplingMode sampling mode (default: Constants.TEXTURE_BILINEAR_SAMPLINGMODE)\r\n     * @param comparisonFunction comparison function (default: 0 - no comparison function)\r\n     * @returns the current sampler instance\r\n     */\r\n    public setParameters(\r\n        wrapU = Constants.TEXTURE_WRAP_ADDRESSMODE,\r\n        wrapV = Constants.TEXTURE_WRAP_ADDRESSMODE,\r\n        wrapR = Constants.TEXTURE_WRAP_ADDRESSMODE,\r\n        anisotropicFilteringLevel = 1,\r\n        samplingMode = Constants.TEXTURE_BILINEAR_SAMPLINGMODE,\r\n        comparisonFunction = 0\r\n    ): TextureSampler {\r\n        this._cachedWrapU = wrapU;\r\n        this._cachedWrapV = wrapV;\r\n        this._cachedWrapR = wrapR;\r\n        this._cachedAnisotropicFilteringLevel = anisotropicFilteringLevel;\r\n        this.samplingMode = samplingMode;\r\n        this._comparisonFunction = comparisonFunction;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Compares this sampler with another one\r\n     * @param other sampler to compare with\r\n     * @returns true if the samplers have the same parametres, else false\r\n     */\r\n    public compareSampler(other: TextureSampler): boolean {\r\n        return (\r\n            this._cachedWrapU === other._cachedWrapU &&\r\n            this._cachedWrapV === other._cachedWrapV &&\r\n            this._cachedWrapR === other._cachedWrapR &&\r\n            this._cachedAnisotropicFilteringLevel === other._cachedAnisotropicFilteringLevel &&\r\n            this.samplingMode === other.samplingMode &&\r\n            this._comparisonFunction === other._comparisonFunction &&\r\n            this._useMipMaps === other._useMipMaps\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}