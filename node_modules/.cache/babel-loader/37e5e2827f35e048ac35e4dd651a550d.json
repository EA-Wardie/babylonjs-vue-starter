{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\nimport { AxisDragGizmo } from \"../Gizmos/axisDragGizmo.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\n/**\n * The Axes viewer will show 3 axes in a specific point in space\n * @see https://doc.babylonjs.com/toolsAndResources/utilities/World_Axes\n */\n\nvar AxesViewer =\n/** @class */\nfunction () {\n  /**\n   * Creates a new AxesViewer\n   * @param scene defines the hosting scene\n   * @param scaleLines defines a number used to scale line length (1 by default)\n   * @param renderingGroupId defines a number used to set the renderingGroupId of the meshes (2 by default)\n   * @param xAxis defines the node hierarchy used to render the x-axis\n   * @param yAxis defines the node hierarchy used to render the y-axis\n   * @param zAxis defines the node hierarchy used to render the z-axis\n   * @param lineThickness The line thickness to use when creating the arrow. defaults to 1.\n   */\n  function AxesViewer(scene, scaleLines, renderingGroupId, xAxis, yAxis, zAxis, lineThickness) {\n    if (scaleLines === void 0) {\n      scaleLines = 1;\n    }\n\n    if (renderingGroupId === void 0) {\n      renderingGroupId = 2;\n    }\n\n    if (lineThickness === void 0) {\n      lineThickness = 1;\n    }\n\n    this._scaleLinesFactor = 4;\n    this._instanced = false;\n    /**\n     * Gets the hosting scene\n     */\n\n    this.scene = null;\n    /**\n     * Gets or sets a number used to scale line length\n     */\n\n    this.scaleLines = 1;\n    scene = scene || EngineStore.LastCreatedScene;\n\n    if (!scene) {\n      return;\n    }\n\n    this.scaleLines = scaleLines;\n\n    if (!xAxis) {\n      var redColoredMaterial = new StandardMaterial(\"\", scene);\n      redColoredMaterial.disableLighting = true;\n      redColoredMaterial.emissiveColor = Color3.Red().scale(0.5);\n      xAxis = AxisDragGizmo._CreateArrow(scene, redColoredMaterial, lineThickness);\n    }\n\n    if (!yAxis) {\n      var greenColoredMaterial = new StandardMaterial(\"\", scene);\n      greenColoredMaterial.disableLighting = true;\n      greenColoredMaterial.emissiveColor = Color3.Green().scale(0.5);\n      yAxis = AxisDragGizmo._CreateArrow(scene, greenColoredMaterial, lineThickness);\n    }\n\n    if (!zAxis) {\n      var blueColoredMaterial = new StandardMaterial(\"\", scene);\n      blueColoredMaterial.disableLighting = true;\n      blueColoredMaterial.emissiveColor = Color3.Blue().scale(0.5);\n      zAxis = AxisDragGizmo._CreateArrow(scene, blueColoredMaterial, lineThickness);\n    }\n\n    this._xAxis = xAxis;\n\n    this._xAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n\n    this._yAxis = yAxis;\n\n    this._yAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n\n    this._zAxis = zAxis;\n\n    this._zAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n\n    if (renderingGroupId != null) {\n      AxesViewer._SetRenderingGroupId(this._xAxis, renderingGroupId);\n\n      AxesViewer._SetRenderingGroupId(this._yAxis, renderingGroupId);\n\n      AxesViewer._SetRenderingGroupId(this._zAxis, renderingGroupId);\n    }\n\n    this.scene = scene;\n    this.update(new Vector3(), Vector3.Right(), Vector3.Up(), Vector3.Forward());\n  }\n\n  Object.defineProperty(AxesViewer.prototype, \"xAxis\", {\n    /** Gets the node hierarchy used to render x-axis */\n    get: function get() {\n      return this._xAxis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AxesViewer.prototype, \"yAxis\", {\n    /** Gets the node hierarchy used to render y-axis */\n    get: function get() {\n      return this._yAxis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AxesViewer.prototype, \"zAxis\", {\n    /** Gets the node hierarchy used to render z-axis */\n    get: function get() {\n      return this._zAxis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Force the viewer to update\n   * @param position defines the position of the viewer\n   * @param xaxis defines the x axis of the viewer\n   * @param yaxis defines the y axis of the viewer\n   * @param zaxis defines the z axis of the viewer\n   */\n\n  AxesViewer.prototype.update = function (position, xaxis, yaxis, zaxis) {\n    this._xAxis.position.copyFrom(position);\n\n    this._xAxis.setDirection(xaxis);\n\n    this._xAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n\n    this._yAxis.position.copyFrom(position);\n\n    this._yAxis.setDirection(yaxis);\n\n    this._yAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n\n    this._zAxis.position.copyFrom(position);\n\n    this._zAxis.setDirection(zaxis);\n\n    this._zAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n  };\n  /**\n   * Creates an instance of this axes viewer.\n   * @returns a new axes viewer with instanced meshes\n   */\n\n\n  AxesViewer.prototype.createInstance = function () {\n    var xAxis = AxisDragGizmo._CreateArrowInstance(this.scene, this._xAxis);\n\n    var yAxis = AxisDragGizmo._CreateArrowInstance(this.scene, this._yAxis);\n\n    var zAxis = AxisDragGizmo._CreateArrowInstance(this.scene, this._zAxis);\n\n    var axesViewer = new AxesViewer(this.scene, this.scaleLines, null, xAxis, yAxis, zAxis);\n    axesViewer._instanced = true;\n    return axesViewer;\n  };\n  /** Releases resources */\n\n\n  AxesViewer.prototype.dispose = function () {\n    if (this._xAxis) {\n      this._xAxis.dispose(false, !this._instanced);\n    }\n\n    if (this._yAxis) {\n      this._yAxis.dispose(false, !this._instanced);\n    }\n\n    if (this._zAxis) {\n      this._zAxis.dispose(false, !this._instanced);\n    }\n\n    this.scene = null;\n  };\n\n  AxesViewer._SetRenderingGroupId = function (node, id) {\n    node.getChildMeshes().forEach(function (mesh) {\n      mesh.renderingGroupId = id;\n    });\n  };\n\n  return AxesViewer;\n}();\n\nexport { AxesViewer };","map":{"version":3,"mappings":"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","names":["Vector3","StandardMaterial","AxisDragGizmo","Color3","EngineStore","scene","scaleLines","renderingGroupId","xAxis","yAxis","zAxis","lineThickness","LastCreatedScene","redColoredMaterial","disableLighting","emissiveColor","Red","scale","_CreateArrow","greenColoredMaterial","Green","blueColoredMaterial","Blue","_xAxis","scaling","setAll","_scaleLinesFactor","_yAxis","_zAxis","AxesViewer","_SetRenderingGroupId","update","Right","Up","Forward","Object","position","xaxis","yaxis","zaxis","copyFrom","setDirection","_CreateArrowInstance","axesViewer","_instanced","dispose","node","id","getChildMeshes","forEach","mesh"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Debug/axesViewer.ts"],"sourcesContent":["import { Vector3 } from \"../Maths/math.vector\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { TransformNode } from \"../Meshes/transformNode\";\r\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\r\nimport { AxisDragGizmo } from \"../Gizmos/axisDragGizmo\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\n\r\n/**\r\n * The Axes viewer will show 3 axes in a specific point in space\r\n * @see https://doc.babylonjs.com/toolsAndResources/utilities/World_Axes\r\n */\r\nexport class AxesViewer {\r\n    private _xAxis: TransformNode;\r\n    private _yAxis: TransformNode;\r\n    private _zAxis: TransformNode;\r\n    private _scaleLinesFactor = 4;\r\n    private _instanced = false;\r\n\r\n    /**\r\n     * Gets the hosting scene\r\n     */\r\n    public scene: Nullable<Scene> = null;\r\n\r\n    /**\r\n     * Gets or sets a number used to scale line length\r\n     */\r\n    public scaleLines = 1;\r\n\r\n    /** Gets the node hierarchy used to render x-axis */\r\n    public get xAxis(): TransformNode {\r\n        return this._xAxis;\r\n    }\r\n\r\n    /** Gets the node hierarchy used to render y-axis */\r\n    public get yAxis(): TransformNode {\r\n        return this._yAxis;\r\n    }\r\n\r\n    /** Gets the node hierarchy used to render z-axis */\r\n    public get zAxis(): TransformNode {\r\n        return this._zAxis;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AxesViewer\r\n     * @param scene defines the hosting scene\r\n     * @param scaleLines defines a number used to scale line length (1 by default)\r\n     * @param renderingGroupId defines a number used to set the renderingGroupId of the meshes (2 by default)\r\n     * @param xAxis defines the node hierarchy used to render the x-axis\r\n     * @param yAxis defines the node hierarchy used to render the y-axis\r\n     * @param zAxis defines the node hierarchy used to render the z-axis\r\n     * @param lineThickness The line thickness to use when creating the arrow. defaults to 1.\r\n     */\r\n    constructor(scene?: Scene, scaleLines = 1, renderingGroupId: Nullable<number> = 2, xAxis?: TransformNode, yAxis?: TransformNode, zAxis?: TransformNode, lineThickness = 1) {\r\n        scene = scene || <Scene>EngineStore.LastCreatedScene;\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this.scaleLines = scaleLines;\r\n\r\n        if (!xAxis) {\r\n            const redColoredMaterial = new StandardMaterial(\"\", scene);\r\n            redColoredMaterial.disableLighting = true;\r\n            redColoredMaterial.emissiveColor = Color3.Red().scale(0.5);\r\n            xAxis = AxisDragGizmo._CreateArrow(scene, redColoredMaterial, lineThickness);\r\n        }\r\n\r\n        if (!yAxis) {\r\n            const greenColoredMaterial = new StandardMaterial(\"\", scene);\r\n            greenColoredMaterial.disableLighting = true;\r\n            greenColoredMaterial.emissiveColor = Color3.Green().scale(0.5);\r\n            yAxis = AxisDragGizmo._CreateArrow(scene, greenColoredMaterial, lineThickness);\r\n        }\r\n\r\n        if (!zAxis) {\r\n            const blueColoredMaterial = new StandardMaterial(\"\", scene);\r\n            blueColoredMaterial.disableLighting = true;\r\n            blueColoredMaterial.emissiveColor = Color3.Blue().scale(0.5);\r\n            zAxis = AxisDragGizmo._CreateArrow(scene, blueColoredMaterial, lineThickness);\r\n        }\r\n\r\n        this._xAxis = xAxis;\r\n        this._xAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\r\n        this._yAxis = yAxis;\r\n        this._yAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\r\n        this._zAxis = zAxis;\r\n        this._zAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\r\n\r\n        if (renderingGroupId != null) {\r\n            AxesViewer._SetRenderingGroupId(this._xAxis, renderingGroupId);\r\n            AxesViewer._SetRenderingGroupId(this._yAxis, renderingGroupId);\r\n            AxesViewer._SetRenderingGroupId(this._zAxis, renderingGroupId);\r\n        }\r\n\r\n        this.scene = scene;\r\n        this.update(new Vector3(), Vector3.Right(), Vector3.Up(), Vector3.Forward());\r\n    }\r\n\r\n    /**\r\n     * Force the viewer to update\r\n     * @param position defines the position of the viewer\r\n     * @param xaxis defines the x axis of the viewer\r\n     * @param yaxis defines the y axis of the viewer\r\n     * @param zaxis defines the z axis of the viewer\r\n     */\r\n    public update(position: Vector3, xaxis: Vector3, yaxis: Vector3, zaxis: Vector3): void {\r\n        this._xAxis.position.copyFrom(position);\r\n        this._xAxis.setDirection(xaxis);\r\n        this._xAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\r\n\r\n        this._yAxis.position.copyFrom(position);\r\n        this._yAxis.setDirection(yaxis);\r\n        this._yAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\r\n\r\n        this._zAxis.position.copyFrom(position);\r\n        this._zAxis.setDirection(zaxis);\r\n        this._zAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of this axes viewer.\r\n     * @returns a new axes viewer with instanced meshes\r\n     */\r\n    public createInstance(): AxesViewer {\r\n        const xAxis = AxisDragGizmo._CreateArrowInstance(this.scene!, this._xAxis);\r\n        const yAxis = AxisDragGizmo._CreateArrowInstance(this.scene!, this._yAxis);\r\n        const zAxis = AxisDragGizmo._CreateArrowInstance(this.scene!, this._zAxis);\r\n        const axesViewer = new AxesViewer(this.scene!, this.scaleLines, null, xAxis, yAxis, zAxis);\r\n        axesViewer._instanced = true;\r\n        return axesViewer;\r\n    }\r\n\r\n    /** Releases resources */\r\n    public dispose() {\r\n        if (this._xAxis) {\r\n            this._xAxis.dispose(false, !this._instanced);\r\n        }\r\n\r\n        if (this._yAxis) {\r\n            this._yAxis.dispose(false, !this._instanced);\r\n        }\r\n\r\n        if (this._zAxis) {\r\n            this._zAxis.dispose(false, !this._instanced);\r\n        }\r\n\r\n        this.scene = null;\r\n    }\r\n\r\n    private static _SetRenderingGroupId(node: TransformNode, id: number) {\r\n        node.getChildMeshes().forEach((mesh) => {\r\n            mesh.renderingGroupId = id;\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}