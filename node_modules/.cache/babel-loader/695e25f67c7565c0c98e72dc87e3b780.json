{"ast":null,"code":"import \"core-js/modules/es.array.flat.js\";\nimport \"core-js/modules/es.array.unscopables.flat.js\";\nimport { CreatePolyhedron } from \"./polyhedronBuilder.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { _PrimaryIsoTriangle, GeodesicData } from \"../geodesicMesh.js\";\n/**\n * Creates the Mesh for a Geodesic Polyhedron\n * @see https://en.wikipedia.org/wiki/Geodesic_polyhedron\n * @see https://doc.babylonjs.com/divingDeeper/mesh/creation/polyhedra/geodesic_poly\n * @param name defines the name of the mesh\n * @param options an object used to set the following optional parameters for the polyhedron, required but can be empty\n * * m number of horizontal steps along an isogrid\n * * n number of angled steps along an isogrid\n * * size the size of the Geodesic, optional default 1\n * * sizeX allows stretching in the x direction, optional, default size\n * * sizeY allows stretching in the y direction, optional, default size\n * * sizeZ allows stretching in the z direction, optional, default size\n * * faceUV an array of Vector4 elements used to set different images to the top, rings and bottom respectively\n * * faceColors an array of Color3 elements used to set different colors to the top, rings and bottom respectively\n * * flat when true creates a flat shaded mesh, optional, default true\n * * subdivisions increasing the subdivisions increases the number of faces, optional, default 4\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\n * @param options.n\n * @param options.size\n * @param options.sizeX\n * @param options.sizeY\n * @param options.sizeZ\n * @param options.faceUV\n * @param options.faceColors\n * @param options.flat\n * @param options.updatable\n * @param options.sideOrientation\n * @param options.frontUVs\n * @param options.backUVs\n * @param options.m\n * @param scene defines the hosting scene\n * @returns Geodesic mesh\n */\n\nexport function CreateGeodesic(name, options, scene) {\n  if (scene === void 0) {\n    scene = null;\n  }\n\n  var m = options.m || 1;\n\n  if (m !== Math.floor(m)) {\n    m === Math.floor(m);\n    Logger.Warn(\"m not an integer only floor(m) used\");\n  }\n\n  var n = options.n || 0;\n\n  if (n !== Math.floor(n)) {\n    n === Math.floor(n);\n    Logger.Warn(\"n not an integer only floor(n) used\");\n  }\n\n  if (n > m) {\n    var temp = n;\n    n = m;\n    m = temp;\n    Logger.Warn(\"n > m therefore m and n swapped\");\n  }\n\n  var primTri = new _PrimaryIsoTriangle();\n  primTri.build(m, n);\n  var geodesicData = GeodesicData.BuildGeodesicData(primTri);\n  var geoOptions = {\n    custom: geodesicData,\n    size: options.size,\n    sizeX: options.sizeX,\n    sizeY: options.sizeY,\n    sizeZ: options.sizeZ,\n    faceUV: options.faceUV,\n    faceColors: options.faceColors,\n    flat: options.flat,\n    updatable: options.updatable,\n    sideOrientation: options.sideOrientation,\n    frontUVs: options.frontUVs,\n    backUVs: options.backUVs\n  };\n  var geodesic = CreatePolyhedron(name, geoOptions, scene);\n  return geodesic;\n}","map":{"version":3,"mappings":";;AAIA,SAASA,gBAAT,QAAiC,wBAAjC;AAEA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,mBAAT,EAA8BC,YAA9B,QAAkD,oBAAlD;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,OAAM,SAAUC,cAAV,CACFC,IADE,EAEFC,OAFE,EAiBFC,KAjBE,EAiB2B;AAA7B;AAAAA;AAA6B;;AAE7B,MAAIC,CAAC,GAAWF,OAAO,CAACE,CAAR,IAAa,CAA7B;;AACA,MAAIA,CAAC,KAAKC,IAAI,CAACC,KAAL,CAAWF,CAAX,CAAV,EAAyB;AACrBA,KAAC,KAAKC,IAAI,CAACC,KAAL,CAAWF,CAAX,CAAN;AACAP,UAAM,CAACU,IAAP,CAAY,qCAAZ;AACH;;AACD,MAAIC,CAAC,GAAWN,OAAO,CAACM,CAAR,IAAa,CAA7B;;AACA,MAAIA,CAAC,KAAKH,IAAI,CAACC,KAAL,CAAWE,CAAX,CAAV,EAAyB;AACrBA,KAAC,KAAKH,IAAI,CAACC,KAAL,CAAWE,CAAX,CAAN;AACAX,UAAM,CAACU,IAAP,CAAY,qCAAZ;AACH;;AACD,MAAIC,CAAC,GAAGJ,CAAR,EAAW;AACP,QAAMK,IAAI,GAAGD,CAAb;AACAA,KAAC,GAAGJ,CAAJ;AACAA,KAAC,GAAGK,IAAJ;AACAZ,UAAM,CAACU,IAAP,CAAY,iCAAZ;AACH;;AACD,MAAMG,OAAO,GAAwB,IAAIZ,mBAAJ,EAArC;AACAY,SAAO,CAACC,KAAR,CAAcP,CAAd,EAAiBI,CAAjB;AACA,MAAMI,YAAY,GAAGb,YAAY,CAACc,iBAAb,CAA+BH,OAA/B,CAArB;AAEA,MAAMI,UAAU,GAAW;AACvBC,UAAM,EAAEH,YADe;AAEvBI,QAAI,EAAEd,OAAO,CAACc,IAFS;AAGvBC,SAAK,EAAEf,OAAO,CAACe,KAHQ;AAIvBC,SAAK,EAAEhB,OAAO,CAACgB,KAJQ;AAKvBC,SAAK,EAAEjB,OAAO,CAACiB,KALQ;AAMvBC,UAAM,EAAElB,OAAO,CAACkB,MANO;AAOvBC,cAAU,EAAEnB,OAAO,CAACmB,UAPG;AAQvBC,QAAI,EAAEpB,OAAO,CAACoB,IARS;AASvBC,aAAS,EAAErB,OAAO,CAACqB,SATI;AAUvBC,mBAAe,EAAEtB,OAAO,CAACsB,eAVF;AAWvBC,YAAQ,EAAEvB,OAAO,CAACuB,QAXK;AAYvBC,WAAO,EAAExB,OAAO,CAACwB;AAZM,GAA3B;AAcA,MAAMC,QAAQ,GAAG/B,gBAAgB,CAACK,IAAD,EAAOa,UAAP,EAAmBX,KAAnB,CAAjC;AAEA,SAAOwB,QAAP;AACH","names":["CreatePolyhedron","Logger","_PrimaryIsoTriangle","GeodesicData","CreateGeodesic","name","options","scene","m","Math","floor","Warn","n","temp","primTri","build","geodesicData","BuildGeodesicData","geoOptions","custom","size","sizeX","sizeY","sizeZ","faceUV","faceColors","flat","updatable","sideOrientation","frontUVs","backUVs","geodesic"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Meshes/Builders/geodesicBuilder.ts"],"sourcesContent":["import type { Scene } from \"../../scene\";\r\nimport type { Vector4 } from \"../../Maths/math.vector\";\r\nimport type { Color4 } from \"../../Maths/math.color\";\r\nimport type { Mesh } from \"../../Meshes/mesh\";\r\nimport { CreatePolyhedron } from \"./polyhedronBuilder\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { _PrimaryIsoTriangle, GeodesicData } from \"../geodesicMesh\";\r\n\r\n/**\r\n * Creates the Mesh for a Geodesic Polyhedron\r\n * @see https://en.wikipedia.org/wiki/Geodesic_polyhedron\r\n * @see https://doc.babylonjs.com/divingDeeper/mesh/creation/polyhedra/geodesic_poly\r\n * @param name defines the name of the mesh\r\n * @param options an object used to set the following optional parameters for the polyhedron, required but can be empty\r\n * * m number of horizontal steps along an isogrid\r\n * * n number of angled steps along an isogrid\r\n * * size the size of the Geodesic, optional default 1\r\n * * sizeX allows stretching in the x direction, optional, default size\r\n * * sizeY allows stretching in the y direction, optional, default size\r\n * * sizeZ allows stretching in the z direction, optional, default size\r\n * * faceUV an array of Vector4 elements used to set different images to the top, rings and bottom respectively\r\n * * faceColors an array of Color3 elements used to set different colors to the top, rings and bottom respectively\r\n * * flat when true creates a flat shaded mesh, optional, default true\r\n * * subdivisions increasing the subdivisions increases the number of faces, optional, default 4\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @param options.n\r\n * @param options.size\r\n * @param options.sizeX\r\n * @param options.sizeY\r\n * @param options.sizeZ\r\n * @param options.faceUV\r\n * @param options.faceColors\r\n * @param options.flat\r\n * @param options.updatable\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param options.m\r\n * @param scene defines the hosting scene\r\n * @returns Geodesic mesh\r\n */\r\nexport function CreateGeodesic(\r\n    name: string,\r\n    options: {\r\n        m?: number;\r\n        n?: number;\r\n        size?: number;\r\n        sizeX?: number;\r\n        sizeY?: number;\r\n        sizeZ?: number;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        flat?: boolean;\r\n        updatable?: boolean;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n    },\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    let m: number = options.m || 1;\r\n    if (m !== Math.floor(m)) {\r\n        m === Math.floor(m);\r\n        Logger.Warn(\"m not an integer only floor(m) used\");\r\n    }\r\n    let n: number = options.n || 0;\r\n    if (n !== Math.floor(n)) {\r\n        n === Math.floor(n);\r\n        Logger.Warn(\"n not an integer only floor(n) used\");\r\n    }\r\n    if (n > m) {\r\n        const temp = n;\r\n        n = m;\r\n        m = temp;\r\n        Logger.Warn(\"n > m therefore m and n swapped\");\r\n    }\r\n    const primTri: _PrimaryIsoTriangle = new _PrimaryIsoTriangle();\r\n    primTri.build(m, n);\r\n    const geodesicData = GeodesicData.BuildGeodesicData(primTri);\r\n\r\n    const geoOptions: object = {\r\n        custom: geodesicData,\r\n        size: options.size,\r\n        sizeX: options.sizeX,\r\n        sizeY: options.sizeY,\r\n        sizeZ: options.sizeZ,\r\n        faceUV: options.faceUV,\r\n        faceColors: options.faceColors,\r\n        flat: options.flat,\r\n        updatable: options.updatable,\r\n        sideOrientation: options.sideOrientation,\r\n        frontUVs: options.frontUVs,\r\n        backUVs: options.backUVs,\r\n    };\r\n    const geodesic = CreatePolyhedron(name, geoOptions, scene);\r\n\r\n    return geodesic;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}