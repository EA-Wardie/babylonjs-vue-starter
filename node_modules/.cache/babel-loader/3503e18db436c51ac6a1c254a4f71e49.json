{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport { Engine } from \"./engine.js\";\nimport { NullEngine } from \"./nullEngine.js\";\nimport { WebGPUEngine } from \"./webgpuEngine.js\";\n/**\n * Helper class to create the best engine depending on the current hardware\n */\n\nvar EngineFactory =\n/** @class */\nfunction () {\n  function EngineFactory() {}\n  /**\n   * Creates an engine based on the capabilities of the underlying hardware\n   * @param canvas Defines the canvas to use to display the result\n   * @param options Defines the options passed to the engine to create the context dependencies\n   * @returns a promise that resolves with the created engine\n   */\n\n\n  EngineFactory.CreateAsync = function (canvas, options) {\n    return WebGPUEngine.IsSupportedAsync.then(function (supported) {\n      if (supported) {\n        return WebGPUEngine.CreateAsync(canvas, options);\n      } else if (Engine.IsSupported) {\n        return new Promise(function (resolve) {\n          resolve(new Engine(canvas, undefined, options));\n        });\n      }\n\n      return new Promise(function (resolve) {\n        resolve(new NullEngine(options));\n      });\n    });\n  };\n\n  return EngineFactory;\n}();\n\nexport { EngineFactory };","map":{"version":3,"mappings":";AAAA,SAASA,MAAT,QAAuB,aAAvB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AAEA,SAASC,YAAT,QAA6B,mBAA7B;AAEA;;;;AAGA;AAAA;AAAA;AAAA,4BAqBC;AApBG;;;;;;;;AAMcC,8BAAd,UAA0BC,MAA1B,EAAqDC,OAArD,EAAiE;AAC7D,WAAOH,YAAY,CAACI,gBAAb,CAA8BC,IAA9B,CAAmC,UAACC,SAAD,EAAU;AAChD,UAAIA,SAAJ,EAAe;AACX,eAAON,YAAY,CAACO,WAAb,CAAyBL,MAAzB,EAAiCC,OAAjC,CAAP;AACH,OAFD,MAEO,IAAIL,MAAM,CAACU,WAAX,EAAwB;AAC3B,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAQ;AACvBA,iBAAO,CAAC,IAAIZ,MAAJ,CAAWI,MAAX,EAAmBS,SAAnB,EAA8BR,OAA9B,CAAD,CAAP;AACH,SAFM,CAAP;AAGH;;AACD,aAAO,IAAIM,OAAJ,CAAY,UAACC,OAAD,EAAQ;AACvBA,eAAO,CAAC,IAAIX,UAAJ,CAAeI,OAAf,CAAD,CAAP;AACH,OAFM,CAAP;AAGH,KAXM,CAAP;AAYH,GAba;;AAclB;AAAC,CArBD","names":["Engine","NullEngine","WebGPUEngine","EngineFactory","canvas","options","IsSupportedAsync","then","supported","CreateAsync","IsSupported","Promise","resolve","undefined"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/engineFactory.ts"],"sourcesContent":["import { Engine } from \"./engine\";\r\nimport { NullEngine } from \"./nullEngine\";\r\nimport type { ThinEngine } from \"./thinEngine\";\r\nimport { WebGPUEngine } from \"./webgpuEngine\";\r\n\r\n/**\r\n * Helper class to create the best engine depending on the current hardware\r\n */\r\nexport class EngineFactory {\r\n    /**\r\n     * Creates an engine based on the capabilities of the underlying hardware\r\n     * @param canvas Defines the canvas to use to display the result\r\n     * @param options Defines the options passed to the engine to create the context dependencies\r\n     * @returns a promise that resolves with the created engine\r\n     */\r\n    public static CreateAsync(canvas: HTMLCanvasElement, options: any): Promise<ThinEngine> {\r\n        return WebGPUEngine.IsSupportedAsync.then((supported) => {\r\n            if (supported) {\r\n                return WebGPUEngine.CreateAsync(canvas, options);\r\n            } else if (Engine.IsSupported) {\r\n                return new Promise((resolve) => {\r\n                    resolve(new Engine(canvas, undefined, options));\r\n                });\r\n            }\r\n            return new Promise((resolve) => {\r\n                resolve(new NullEngine(options));\r\n            });\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}