{"ast":null,"code":"import _typeof from \"/home/ea/Development/Babylon/red/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport { __assign } from \"tslib\";\nimport { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { ThinEngine } from \"../thinEngine.js\";\nimport { WebGLRenderTargetWrapper } from \"../WebGL/webGLRenderTargetWrapper.js\";\n\nThinEngine.prototype._createHardwareRenderTargetWrapper = function (isMulti, isCube, size) {\n  var rtWrapper = new WebGLRenderTargetWrapper(isMulti, isCube, size, this, this._gl);\n\n  this._renderTargetWrapperCache.push(rtWrapper);\n\n  return rtWrapper;\n};\n\nThinEngine.prototype.createRenderTargetTexture = function (size, options) {\n  var rtWrapper = this._createHardwareRenderTargetWrapper(false, false, size);\n\n  var fullOptions = {};\n\n  if (options !== undefined && _typeof(options) === \"object\") {\n    fullOptions.generateDepthBuffer = !!options.generateDepthBuffer;\n    fullOptions.generateStencilBuffer = !!options.generateStencilBuffer;\n  } else {\n    fullOptions.generateDepthBuffer = true;\n    fullOptions.generateStencilBuffer = false;\n  }\n\n  var texture = this._createInternalTexture(size, options, true, InternalTextureSource.RenderTarget);\n\n  var width = size.width || size;\n  var height = size.height || size;\n  var currentFrameBuffer = this._currentFramebuffer;\n  var gl = this._gl; // Create the framebuffer\n\n  var framebuffer = gl.createFramebuffer();\n\n  this._bindUnboundFramebuffer(framebuffer);\n\n  rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(fullOptions.generateStencilBuffer ? true : false, fullOptions.generateDepthBuffer, width, height); // No need to rebind on every frame\n\n  if (!texture.is2DArray) {\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture._hardwareTexture.underlyingResource, 0);\n  }\n\n  this._bindUnboundFramebuffer(currentFrameBuffer);\n\n  rtWrapper._framebuffer = framebuffer;\n  rtWrapper._generateDepthBuffer = fullOptions.generateDepthBuffer;\n  rtWrapper._generateStencilBuffer = fullOptions.generateStencilBuffer ? true : false;\n  rtWrapper.setTextures(texture);\n  return rtWrapper;\n};\n\nThinEngine.prototype.createDepthStencilTexture = function (size, options, rtWrapper) {\n  if (options.isCube) {\n    var width = size.width || size;\n    return this._createDepthStencilCubeTexture(width, options, rtWrapper);\n  } else {\n    return this._createDepthStencilTexture(size, options, rtWrapper);\n  }\n};\n\nThinEngine.prototype._createDepthStencilTexture = function (size, options, rtWrapper) {\n  var gl = this._gl;\n  var layers = size.layers || 0;\n  var target = layers !== 0 ? gl.TEXTURE_2D_ARRAY : gl.TEXTURE_2D;\n  var internalTexture = new InternalTexture(this, InternalTextureSource.DepthStencil);\n\n  if (!this._caps.depthTextureExtension) {\n    Logger.Error(\"Depth texture is not supported by your browser or hardware.\");\n    return internalTexture;\n  }\n\n  var internalOptions = __assign({\n    bilinearFiltering: false,\n    comparisonFunction: 0,\n    generateStencil: false\n  }, options);\n\n  this._bindTextureDirectly(target, internalTexture, true);\n\n  this._setupDepthStencilTexture(internalTexture, size, internalOptions.generateStencil, internalOptions.comparisonFunction === 0 ? false : internalOptions.bilinearFiltering, internalOptions.comparisonFunction);\n\n  internalTexture.format = internalOptions.generateStencil ? 13 : 16;\n  rtWrapper._depthStencilTexture = internalTexture;\n  rtWrapper._depthStencilTextureWithStencil = internalOptions.generateStencil;\n  var type = internalOptions.generateStencil ? gl.UNSIGNED_INT_24_8 : gl.UNSIGNED_INT;\n  var internalFormat = internalOptions.generateStencil ? gl.DEPTH_STENCIL : gl.DEPTH_COMPONENT;\n  var sizedFormat = internalFormat;\n\n  if (this.webGLVersion > 1) {\n    sizedFormat = internalOptions.generateStencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;\n  }\n\n  if (internalTexture.is2DArray) {\n    gl.texImage3D(target, 0, sizedFormat, internalTexture.width, internalTexture.height, layers, 0, internalFormat, type, null);\n  } else {\n    gl.texImage2D(target, 0, sizedFormat, internalTexture.width, internalTexture.height, 0, internalFormat, type, null);\n  }\n\n  this._bindTextureDirectly(target, null);\n\n  this._internalTexturesCache.push(internalTexture);\n\n  return internalTexture;\n};\n\nThinEngine.prototype.updateRenderTargetTextureSampleCount = function (rtWrapper, samples) {\n  if (this.webGLVersion < 2 || !rtWrapper || !rtWrapper.texture) {\n    return 1;\n  }\n\n  if (rtWrapper.samples === samples) {\n    return samples;\n  }\n\n  var gl = this._gl;\n  samples = Math.min(samples, this.getCaps().maxMSAASamples); // Dispose previous render buffers\n\n  if (rtWrapper._depthStencilBuffer) {\n    gl.deleteRenderbuffer(rtWrapper._depthStencilBuffer);\n    rtWrapper._depthStencilBuffer = null;\n  }\n\n  if (rtWrapper._MSAAFramebuffer) {\n    gl.deleteFramebuffer(rtWrapper._MSAAFramebuffer);\n    rtWrapper._MSAAFramebuffer = null;\n  }\n\n  var hardwareTexture = rtWrapper.texture._hardwareTexture;\n\n  if (hardwareTexture._MSAARenderBuffer) {\n    gl.deleteRenderbuffer(hardwareTexture._MSAARenderBuffer);\n    hardwareTexture._MSAARenderBuffer = null;\n  }\n\n  if (samples > 1 && gl.renderbufferStorageMultisample) {\n    var framebuffer = gl.createFramebuffer();\n\n    if (!framebuffer) {\n      throw new Error(\"Unable to create multi sampled framebuffer\");\n    }\n\n    rtWrapper._MSAAFramebuffer = framebuffer;\n\n    this._bindUnboundFramebuffer(rtWrapper._MSAAFramebuffer);\n\n    var colorRenderbuffer = this._createRenderBuffer(rtWrapper.texture.width, rtWrapper.texture.height, samples, -1\n    /* not used */\n    , this._getRGBAMultiSampleBufferFormat(rtWrapper.texture.type), gl.COLOR_ATTACHMENT0, false);\n\n    if (!colorRenderbuffer) {\n      throw new Error(\"Unable to create multi sampled framebuffer\");\n    }\n\n    hardwareTexture._MSAARenderBuffer = colorRenderbuffer;\n  } else {\n    this._bindUnboundFramebuffer(rtWrapper._framebuffer);\n  }\n\n  rtWrapper.texture.samples = samples;\n  rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(rtWrapper._generateStencilBuffer, rtWrapper._generateDepthBuffer, rtWrapper.texture.width, rtWrapper.texture.height, samples);\n\n  this._bindUnboundFramebuffer(null);\n\n  return samples;\n};","map":{"version":3,"mappings":"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","names":["InternalTexture","InternalTextureSource","Logger","ThinEngine","WebGLRenderTargetWrapper","prototype","_createHardwareRenderTargetWrapper","isMulti","isCube","size","rtWrapper","_gl","_renderTargetWrapperCache","push","createRenderTargetTexture","options","fullOptions","undefined","generateDepthBuffer","generateStencilBuffer","texture","_createInternalTexture","RenderTarget","width","height","currentFrameBuffer","_currentFramebuffer","gl","framebuffer","createFramebuffer","_bindUnboundFramebuffer","_depthStencilBuffer","_setupFramebufferDepthAttachments","is2DArray","framebufferTexture2D","FRAMEBUFFER","COLOR_ATTACHMENT0","TEXTURE_2D","_hardwareTexture","underlyingResource","_framebuffer","_generateDepthBuffer","_generateStencilBuffer","setTextures","createDepthStencilTexture","_createDepthStencilCubeTexture","_createDepthStencilTexture","layers","target","TEXTURE_2D_ARRAY","internalTexture","DepthStencil","_caps","depthTextureExtension","Error","internalOptions","bilinearFiltering","comparisonFunction","generateStencil","_bindTextureDirectly","_setupDepthStencilTexture","format","_depthStencilTexture","_depthStencilTextureWithStencil","type","UNSIGNED_INT_24_8","UNSIGNED_INT","internalFormat","DEPTH_STENCIL","DEPTH_COMPONENT","sizedFormat","webGLVersion","DEPTH24_STENCIL8","DEPTH_COMPONENT24","texImage3D","texImage2D","_internalTexturesCache","updateRenderTargetTextureSampleCount","samples","Math","min","getCaps","maxMSAASamples","deleteRenderbuffer","_MSAAFramebuffer","deleteFramebuffer","hardwareTexture","_MSAARenderBuffer","renderbufferStorageMultisample","colorRenderbuffer","_createRenderBuffer","_getRGBAMultiSampleBufferFormat"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/Extensions/engine.renderTarget.ts"],"sourcesContent":["import { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport type { RenderTargetCreationOptions, DepthTextureCreationOptions, TextureSize } from \"../../Materials/Textures/textureCreationOptions\";\r\nimport { ThinEngine } from \"../thinEngine\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { RenderTargetWrapper } from \"../renderTargetWrapper\";\r\nimport { WebGLRenderTargetWrapper } from \"../WebGL/webGLRenderTargetWrapper\";\r\nimport type { WebGLHardwareTexture } from \"../WebGL/webGLHardwareTexture\";\r\n\r\nimport { Constants } from \"../constants\";\r\n\r\n/**\r\n * Type used to define a texture size (either with a number or with a rect width and height)\r\n * @deprecated please use TextureSize instead\r\n */\r\nexport type RenderTargetTextureSize = TextureSize;\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n    export interface ThinEngine {\r\n        /**\r\n         * Creates a new render target texture\r\n         * @param size defines the size of the texture\r\n         * @param options defines the options used to create the texture\r\n         * @returns a new render target wrapper ready to render texture\r\n         */\r\n        createRenderTargetTexture(size: TextureSize, options: boolean | RenderTargetCreationOptions): RenderTargetWrapper;\r\n\r\n        /**\r\n         * Creates a depth stencil texture.\r\n         * This is only available in WebGL 2 or with the depth texture extension available.\r\n         * @param size The size of face edge in the texture.\r\n         * @param options The options defining the texture.\r\n         * @param rtWrapper The render target wrapper for which the depth/stencil texture must be created\r\n         * @returns The texture\r\n         */\r\n        createDepthStencilTexture(size: TextureSize, options: DepthTextureCreationOptions, rtWrapper: RenderTargetWrapper): InternalTexture;\r\n\r\n        /**\r\n         * Updates the sample count of a render target texture\r\n         * @see https://doc.babylonjs.com/features/webgl2#multisample-render-targets\r\n         * @param rtWrapper defines the render target wrapper to update\r\n         * @param samples defines the sample count to set\r\n         * @returns the effective sample count (could be 0 if multisample render targets are not supported)\r\n         */\r\n        updateRenderTargetTextureSampleCount(rtWrapper: Nullable<RenderTargetWrapper>, samples: number): number;\r\n\r\n        /** @hidden */\r\n        _createDepthStencilTexture(size: TextureSize, options: DepthTextureCreationOptions, rtWrapper: RenderTargetWrapper): InternalTexture;\r\n\r\n        /** @hidden */\r\n        _createHardwareRenderTargetWrapper(isMulti: boolean, isCube: boolean, size: TextureSize): RenderTargetWrapper;\r\n    }\r\n}\r\n\r\nThinEngine.prototype._createHardwareRenderTargetWrapper = function (isMulti: boolean, isCube: boolean, size: TextureSize): RenderTargetWrapper {\r\n    const rtWrapper = new WebGLRenderTargetWrapper(isMulti, isCube, size, this, this._gl);\r\n    this._renderTargetWrapperCache.push(rtWrapper);\r\n    return rtWrapper;\r\n};\r\n\r\nThinEngine.prototype.createRenderTargetTexture = function (this: ThinEngine, size: TextureSize, options: boolean | RenderTargetCreationOptions): RenderTargetWrapper {\r\n    const rtWrapper = this._createHardwareRenderTargetWrapper(false, false, size) as WebGLRenderTargetWrapper;\r\n\r\n    const fullOptions: RenderTargetCreationOptions = {};\r\n    if (options !== undefined && typeof options === \"object\") {\r\n        fullOptions.generateDepthBuffer = !!options.generateDepthBuffer;\r\n        fullOptions.generateStencilBuffer = !!options.generateStencilBuffer;\r\n    } else {\r\n        fullOptions.generateDepthBuffer = true;\r\n        fullOptions.generateStencilBuffer = false;\r\n    }\r\n\r\n    const texture = this._createInternalTexture(size, options, true, InternalTextureSource.RenderTarget);\r\n    const width = (<{ width: number; height: number; layers?: number }>size).width || <number>size;\r\n    const height = (<{ width: number; height: number; layers?: number }>size).height || <number>size;\r\n\r\n    const currentFrameBuffer = this._currentFramebuffer;\r\n    const gl = this._gl;\r\n\r\n    // Create the framebuffer\r\n    const framebuffer = gl.createFramebuffer();\r\n    this._bindUnboundFramebuffer(framebuffer);\r\n    rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(fullOptions.generateStencilBuffer ? true : false, fullOptions.generateDepthBuffer, width, height);\r\n\r\n    // No need to rebind on every frame\r\n    if (!texture.is2DArray) {\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture._hardwareTexture!.underlyingResource, 0);\r\n    }\r\n\r\n    this._bindUnboundFramebuffer(currentFrameBuffer);\r\n\r\n    rtWrapper._framebuffer = framebuffer;\r\n    rtWrapper._generateDepthBuffer = fullOptions.generateDepthBuffer;\r\n    rtWrapper._generateStencilBuffer = fullOptions.generateStencilBuffer ? true : false;\r\n\r\n    rtWrapper.setTextures(texture);\r\n\r\n    return rtWrapper;\r\n};\r\n\r\nThinEngine.prototype.createDepthStencilTexture = function (size: TextureSize, options: DepthTextureCreationOptions, rtWrapper: RenderTargetWrapper): InternalTexture {\r\n    if (options.isCube) {\r\n        const width = (<{ width: number; height: number }>size).width || <number>size;\r\n        return this._createDepthStencilCubeTexture(width, options, rtWrapper);\r\n    } else {\r\n        return this._createDepthStencilTexture(size, options, rtWrapper);\r\n    }\r\n};\r\n\r\nThinEngine.prototype._createDepthStencilTexture = function (size: TextureSize, options: DepthTextureCreationOptions, rtWrapper: RenderTargetWrapper): InternalTexture {\r\n    const gl = this._gl;\r\n    const layers = (<{ width: number; height: number; layers?: number }>size).layers || 0;\r\n    const target = layers !== 0 ? gl.TEXTURE_2D_ARRAY : gl.TEXTURE_2D;\r\n    const internalTexture = new InternalTexture(this, InternalTextureSource.DepthStencil);\r\n    if (!this._caps.depthTextureExtension) {\r\n        Logger.Error(\"Depth texture is not supported by your browser or hardware.\");\r\n        return internalTexture;\r\n    }\r\n\r\n    const internalOptions = {\r\n        bilinearFiltering: false,\r\n        comparisonFunction: 0,\r\n        generateStencil: false,\r\n        ...options,\r\n    };\r\n\r\n    this._bindTextureDirectly(target, internalTexture, true);\r\n\r\n    this._setupDepthStencilTexture(\r\n        internalTexture,\r\n        size,\r\n        internalOptions.generateStencil,\r\n\r\n        internalOptions.comparisonFunction === 0 ? false : internalOptions.bilinearFiltering,\r\n        internalOptions.comparisonFunction\r\n    );\r\n\r\n    internalTexture.format = internalOptions.generateStencil ? Constants.TEXTUREFORMAT_DEPTH24_STENCIL8 : Constants.TEXTUREFORMAT_DEPTH24;\r\n\r\n    rtWrapper._depthStencilTexture = internalTexture;\r\n    rtWrapper._depthStencilTextureWithStencil = internalOptions.generateStencil;\r\n\r\n    const type = internalOptions.generateStencil ? gl.UNSIGNED_INT_24_8 : gl.UNSIGNED_INT;\r\n    const internalFormat = internalOptions.generateStencil ? gl.DEPTH_STENCIL : gl.DEPTH_COMPONENT;\r\n    let sizedFormat = internalFormat;\r\n    if (this.webGLVersion > 1) {\r\n        sizedFormat = internalOptions.generateStencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;\r\n    }\r\n\r\n    if (internalTexture.is2DArray) {\r\n        gl.texImage3D(target, 0, sizedFormat, internalTexture.width, internalTexture.height, layers, 0, internalFormat, type, null);\r\n    } else {\r\n        gl.texImage2D(target, 0, sizedFormat, internalTexture.width, internalTexture.height, 0, internalFormat, type, null);\r\n    }\r\n\r\n    this._bindTextureDirectly(target, null);\r\n\r\n    this._internalTexturesCache.push(internalTexture);\r\n\r\n    return internalTexture;\r\n};\r\n\r\nThinEngine.prototype.updateRenderTargetTextureSampleCount = function (rtWrapper: Nullable<WebGLRenderTargetWrapper>, samples: number): number {\r\n    if (this.webGLVersion < 2 || !rtWrapper || !rtWrapper.texture) {\r\n        return 1;\r\n    }\r\n\r\n    if (rtWrapper.samples === samples) {\r\n        return samples;\r\n    }\r\n\r\n    const gl = this._gl;\r\n\r\n    samples = Math.min(samples, this.getCaps().maxMSAASamples);\r\n\r\n    // Dispose previous render buffers\r\n    if (rtWrapper._depthStencilBuffer) {\r\n        gl.deleteRenderbuffer(rtWrapper._depthStencilBuffer);\r\n        rtWrapper._depthStencilBuffer = null;\r\n    }\r\n\r\n    if (rtWrapper._MSAAFramebuffer) {\r\n        gl.deleteFramebuffer(rtWrapper._MSAAFramebuffer);\r\n        rtWrapper._MSAAFramebuffer = null;\r\n    }\r\n\r\n    const hardwareTexture = rtWrapper.texture._hardwareTexture as WebGLHardwareTexture;\r\n    if (hardwareTexture._MSAARenderBuffer) {\r\n        gl.deleteRenderbuffer(hardwareTexture._MSAARenderBuffer);\r\n        hardwareTexture._MSAARenderBuffer = null;\r\n    }\r\n\r\n    if (samples > 1 && gl.renderbufferStorageMultisample) {\r\n        const framebuffer = gl.createFramebuffer();\r\n\r\n        if (!framebuffer) {\r\n            throw new Error(\"Unable to create multi sampled framebuffer\");\r\n        }\r\n\r\n        rtWrapper._MSAAFramebuffer = framebuffer;\r\n        this._bindUnboundFramebuffer(rtWrapper._MSAAFramebuffer);\r\n\r\n        const colorRenderbuffer = this._createRenderBuffer(\r\n            rtWrapper.texture.width,\r\n            rtWrapper.texture.height,\r\n            samples,\r\n            -1 /* not used */,\r\n            this._getRGBAMultiSampleBufferFormat(rtWrapper.texture.type),\r\n            gl.COLOR_ATTACHMENT0,\r\n            false\r\n        );\r\n\r\n        if (!colorRenderbuffer) {\r\n            throw new Error(\"Unable to create multi sampled framebuffer\");\r\n        }\r\n\r\n        hardwareTexture._MSAARenderBuffer = colorRenderbuffer;\r\n    } else {\r\n        this._bindUnboundFramebuffer(rtWrapper._framebuffer);\r\n    }\r\n\r\n    rtWrapper.texture.samples = samples;\r\n    rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(\r\n        rtWrapper._generateStencilBuffer,\r\n        rtWrapper._generateDepthBuffer,\r\n        rtWrapper.texture.width,\r\n        rtWrapper.texture.height,\r\n        samples\r\n    );\r\n\r\n    this._bindUnboundFramebuffer(null);\r\n\r\n    return samples;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}