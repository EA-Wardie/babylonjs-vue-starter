{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { RenderTargetWrapper } from \"../renderTargetWrapper.js\";\n/** @hidden */\n\nvar WebGLRenderTargetWrapper =\n/** @class */\nfunction (_super) {\n  __extends(WebGLRenderTargetWrapper, _super);\n\n  function WebGLRenderTargetWrapper(isMulti, isCube, size, engine, context) {\n    var _this = _super.call(this, isMulti, isCube, size, engine) || this;\n\n    _this._framebuffer = null;\n    _this._depthStencilBuffer = null; // eslint-disable-next-line @typescript-eslint/naming-convention\n\n    _this._MSAAFramebuffer = null; // Multiview\n\n    _this._colorTextureArray = null;\n    _this._depthStencilTextureArray = null;\n    _this._context = context;\n    return _this;\n  }\n\n  WebGLRenderTargetWrapper.prototype._cloneRenderTargetWrapper = function () {\n    var rtw = null;\n\n    if (this._colorTextureArray && this._depthStencilTextureArray) {\n      rtw = this._engine.createMultiviewRenderTargetTexture(this.width, this.height);\n      rtw.texture.isReady = true;\n    } else {\n      rtw = _super.prototype._cloneRenderTargetWrapper.call(this);\n    }\n\n    return rtw;\n  };\n\n  WebGLRenderTargetWrapper.prototype._swapRenderTargetWrapper = function (target) {\n    _super.prototype._swapRenderTargetWrapper.call(this, target);\n\n    target._framebuffer = this._framebuffer;\n    target._depthStencilBuffer = this._depthStencilBuffer;\n    target._MSAAFramebuffer = this._MSAAFramebuffer;\n    target._colorTextureArray = this._colorTextureArray;\n    target._depthStencilTextureArray = this._depthStencilTextureArray;\n    this._framebuffer = this._depthStencilBuffer = this._MSAAFramebuffer = this._colorTextureArray = this._depthStencilTextureArray = null;\n  };\n  /**\n   * Shares the depth buffer of this render target with another render target.\n   * @hidden\n   * @param renderTarget Destination renderTarget\n   */\n\n\n  WebGLRenderTargetWrapper.prototype._shareDepth = function (renderTarget) {\n    _super.prototype._shareDepth.call(this, renderTarget);\n\n    var gl = this._context;\n    var depthbuffer = this._depthStencilBuffer;\n    var framebuffer = renderTarget._framebuffer;\n\n    if (renderTarget._depthStencilBuffer) {\n      gl.deleteRenderbuffer(renderTarget._depthStencilBuffer);\n    }\n\n    renderTarget._depthStencilBuffer = this._depthStencilBuffer;\n\n    this._engine._bindUnboundFramebuffer(framebuffer);\n\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthbuffer);\n\n    this._engine._bindUnboundFramebuffer(null);\n  };\n  /**\n   * Binds a texture to this render target on a specific attachment\n   * @param texture The texture to bind to the framebuffer\n   * @param attachmentIndex Index of the attachment\n   * @param faceIndex The face of the texture to render to in case of cube texture\n   * @param lodLevel defines the lod level to bind to the frame buffer\n   */\n\n\n  WebGLRenderTargetWrapper.prototype._bindTextureRenderTarget = function (texture, attachmentIndex, faceIndex, lodLevel) {\n    if (attachmentIndex === void 0) {\n      attachmentIndex = 0;\n    }\n\n    if (faceIndex === void 0) {\n      faceIndex = -1;\n    }\n\n    if (lodLevel === void 0) {\n      lodLevel = 0;\n    }\n\n    if (!texture._hardwareTexture) {\n      return;\n    }\n\n    var gl = this._context;\n    var framebuffer = this._framebuffer;\n    var currentFB = this._engine._currentFramebuffer;\n\n    this._engine._bindUnboundFramebuffer(framebuffer);\n\n    var attachment = gl[this._engine.webGLVersion > 1 ? \"COLOR_ATTACHMENT\" + attachmentIndex : \"COLOR_ATTACHMENT\" + attachmentIndex + \"_WEBGL\"];\n    var target = faceIndex !== -1 ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex : gl.TEXTURE_2D;\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, target, texture._hardwareTexture.underlyingResource, lodLevel);\n\n    this._engine._bindUnboundFramebuffer(currentFB);\n  };\n  /**\n   * Set a texture in the textures array\n   * @param texture the texture to set\n   * @param index the index in the textures array to set\n   * @param disposePrevious If this function should dispose the previous texture\n   */\n\n\n  WebGLRenderTargetWrapper.prototype.setTexture = function (texture, index, disposePrevious) {\n    if (index === void 0) {\n      index = 0;\n    }\n\n    if (disposePrevious === void 0) {\n      disposePrevious = true;\n    }\n\n    _super.prototype.setTexture.call(this, texture, index, disposePrevious);\n\n    this._bindTextureRenderTarget(texture, index);\n  };\n\n  WebGLRenderTargetWrapper.prototype.dispose = function (disposeOnlyFramebuffers) {\n    if (disposeOnlyFramebuffers === void 0) {\n      disposeOnlyFramebuffers = false;\n    }\n\n    var gl = this._context;\n\n    if (!disposeOnlyFramebuffers) {\n      if (this._colorTextureArray) {\n        this._context.deleteTexture(this._colorTextureArray);\n\n        this._colorTextureArray = null;\n      }\n\n      if (this._depthStencilTextureArray) {\n        this._context.deleteTexture(this._depthStencilTextureArray);\n\n        this._depthStencilTextureArray = null;\n      }\n    }\n\n    if (this._framebuffer) {\n      gl.deleteFramebuffer(this._framebuffer);\n      this._framebuffer = null;\n    }\n\n    if (this._depthStencilBuffer) {\n      gl.deleteRenderbuffer(this._depthStencilBuffer);\n      this._depthStencilBuffer = null;\n    }\n\n    if (this._MSAAFramebuffer) {\n      gl.deleteFramebuffer(this._MSAAFramebuffer);\n      this._MSAAFramebuffer = null;\n    }\n\n    _super.prototype.dispose.call(this, disposeOnlyFramebuffers);\n  };\n\n  return WebGLRenderTargetWrapper;\n}(RenderTargetWrapper);\n\nexport { WebGLRenderTargetWrapper };","map":{"version":3,"mappings":"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","names":["RenderTargetWrapper","__extends","isMulti","isCube","size","engine","context","_super","_this","_context","WebGLRenderTargetWrapper","rtw","_colorTextureArray","_depthStencilTextureArray","_engine","createMultiviewRenderTargetTexture","width","height","texture","isReady","_cloneRenderTargetWrapper","call","target","_swapRenderTargetWrapper","_framebuffer","_depthStencilBuffer","_MSAAFramebuffer","renderTarget","_shareDepth","gl","depthbuffer","framebuffer","deleteRenderbuffer","_bindUnboundFramebuffer","framebufferRenderbuffer","FRAMEBUFFER","DEPTH_ATTACHMENT","RENDERBUFFER","attachmentIndex","faceIndex","lodLevel","_hardwareTexture","currentFB","_currentFramebuffer","attachment","webGLVersion","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_2D","framebufferTexture2D","underlyingResource","index","disposePrevious","setTexture","_bindTextureRenderTarget","disposeOnlyFramebuffers","deleteTexture","deleteFramebuffer","dispose"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/WebGL/webGLRenderTargetWrapper.ts"],"sourcesContent":["import type { InternalTexture } from \"../../Materials/Textures/internalTexture\";\r\nimport type { TextureSize } from \"../../Materials/Textures/textureCreationOptions\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Engine } from \"../engine\";\r\nimport { RenderTargetWrapper } from \"../renderTargetWrapper\";\r\nimport type { ThinEngine } from \"../thinEngine\";\r\n\r\n/** @hidden */\r\nexport class WebGLRenderTargetWrapper extends RenderTargetWrapper {\r\n    private _context: WebGLRenderingContext;\r\n\r\n    public _framebuffer: Nullable<WebGLFramebuffer> = null;\r\n    public _depthStencilBuffer: Nullable<WebGLRenderbuffer> = null;\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public _MSAAFramebuffer: Nullable<WebGLFramebuffer> = null;\r\n\r\n    // Multiview\r\n    public _colorTextureArray: Nullable<WebGLTexture> = null;\r\n    public _depthStencilTextureArray: Nullable<WebGLTexture> = null;\r\n\r\n    constructor(isMulti: boolean, isCube: boolean, size: TextureSize, engine: ThinEngine, context: WebGLRenderingContext) {\r\n        super(isMulti, isCube, size, engine);\r\n\r\n        this._context = context;\r\n    }\r\n\r\n    protected _cloneRenderTargetWrapper(): Nullable<RenderTargetWrapper> {\r\n        let rtw: Nullable<RenderTargetWrapper> = null;\r\n\r\n        if (this._colorTextureArray && this._depthStencilTextureArray) {\r\n            rtw = (this._engine as Engine).createMultiviewRenderTargetTexture(this.width, this.height);\r\n            rtw.texture!.isReady = true;\r\n        } else {\r\n            rtw = super._cloneRenderTargetWrapper();\r\n        }\r\n\r\n        return rtw;\r\n    }\r\n\r\n    protected _swapRenderTargetWrapper(target: WebGLRenderTargetWrapper): void {\r\n        super._swapRenderTargetWrapper(target);\r\n\r\n        target._framebuffer = this._framebuffer;\r\n        target._depthStencilBuffer = this._depthStencilBuffer;\r\n        target._MSAAFramebuffer = this._MSAAFramebuffer;\r\n        target._colorTextureArray = this._colorTextureArray;\r\n        target._depthStencilTextureArray = this._depthStencilTextureArray;\r\n\r\n        this._framebuffer = this._depthStencilBuffer = this._MSAAFramebuffer = this._colorTextureArray = this._depthStencilTextureArray = null;\r\n    }\r\n\r\n    /**\r\n     * Shares the depth buffer of this render target with another render target.\r\n     * @hidden\r\n     * @param renderTarget Destination renderTarget\r\n     */\r\n    public _shareDepth(renderTarget: WebGLRenderTargetWrapper): void {\r\n        super._shareDepth(renderTarget);\r\n\r\n        const gl = this._context;\r\n        const depthbuffer = this._depthStencilBuffer;\r\n        const framebuffer = renderTarget._framebuffer;\r\n\r\n        if (renderTarget._depthStencilBuffer) {\r\n            gl.deleteRenderbuffer(renderTarget._depthStencilBuffer);\r\n        }\r\n        renderTarget._depthStencilBuffer = this._depthStencilBuffer;\r\n\r\n        this._engine._bindUnboundFramebuffer(framebuffer);\r\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthbuffer);\r\n        this._engine._bindUnboundFramebuffer(null);\r\n    }\r\n\r\n    /**\r\n     * Binds a texture to this render target on a specific attachment\r\n     * @param texture The texture to bind to the framebuffer\r\n     * @param attachmentIndex Index of the attachment\r\n     * @param faceIndex The face of the texture to render to in case of cube texture\r\n     * @param lodLevel defines the lod level to bind to the frame buffer\r\n     */\r\n    private _bindTextureRenderTarget(texture: InternalTexture, attachmentIndex: number = 0, faceIndex: number = -1, lodLevel: number = 0) {\r\n        if (!texture._hardwareTexture) {\r\n            return;\r\n        }\r\n\r\n        const gl = this._context;\r\n        const framebuffer = this._framebuffer;\r\n\r\n        const currentFB = this._engine._currentFramebuffer;\r\n        this._engine._bindUnboundFramebuffer(framebuffer);\r\n        const attachment = (<any>gl)[this._engine.webGLVersion > 1 ? \"COLOR_ATTACHMENT\" + attachmentIndex : \"COLOR_ATTACHMENT\" + attachmentIndex + \"_WEBGL\"];\r\n        const target = faceIndex !== -1 ? gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex : gl.TEXTURE_2D;\r\n\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, target, texture._hardwareTexture.underlyingResource, lodLevel);\r\n        this._engine._bindUnboundFramebuffer(currentFB);\r\n    }\r\n\r\n    /**\r\n     * Set a texture in the textures array\r\n     * @param texture the texture to set\r\n     * @param index the index in the textures array to set\r\n     * @param disposePrevious If this function should dispose the previous texture\r\n     */\r\n    public setTexture(texture: InternalTexture, index: number = 0, disposePrevious: boolean = true) {\r\n        super.setTexture(texture, index, disposePrevious);\r\n        this._bindTextureRenderTarget(texture, index);\r\n    }\r\n\r\n    public dispose(disposeOnlyFramebuffers = false): void {\r\n        const gl = this._context;\r\n\r\n        if (!disposeOnlyFramebuffers) {\r\n            if (this._colorTextureArray) {\r\n                this._context.deleteTexture(this._colorTextureArray);\r\n                this._colorTextureArray = null;\r\n            }\r\n            if (this._depthStencilTextureArray) {\r\n                this._context.deleteTexture(this._depthStencilTextureArray);\r\n                this._depthStencilTextureArray = null;\r\n            }\r\n        }\r\n\r\n        if (this._framebuffer) {\r\n            gl.deleteFramebuffer(this._framebuffer);\r\n            this._framebuffer = null;\r\n        }\r\n\r\n        if (this._depthStencilBuffer) {\r\n            gl.deleteRenderbuffer(this._depthStencilBuffer);\r\n            this._depthStencilBuffer = null;\r\n        }\r\n\r\n        if (this._MSAAFramebuffer) {\r\n            gl.deleteFramebuffer(this._MSAAFramebuffer);\r\n            this._MSAAFramebuffer = null;\r\n        }\r\n\r\n        super.dispose(disposeOnlyFramebuffers);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}