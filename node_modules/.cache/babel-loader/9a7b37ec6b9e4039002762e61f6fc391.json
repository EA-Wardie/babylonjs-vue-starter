{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport { __extends } from \"tslib\";\nimport { WebGPUCacheRenderPipeline } from \"./webgpuCacheRenderPipeline.js\";\n/** @hidden */\n\nvar NodeState =\n/** @class */\nfunction () {\n  function NodeState() {\n    this.values = {};\n  }\n\n  NodeState.prototype.count = function () {\n    var countNode = 0,\n        countPipeline = this.pipeline ? 1 : 0;\n\n    for (var value in this.values) {\n      var node = this.values[value];\n\n      var _a = node.count(),\n          childCountNodes = _a[0],\n          childCoundPipeline = _a[1];\n\n      countNode += childCountNodes;\n      countPipeline += childCoundPipeline;\n      countNode++;\n    }\n\n    return [countNode, countPipeline];\n  };\n\n  return NodeState;\n}();\n/** @hidden */\n\n\nvar WebGPUCacheRenderPipelineTree =\n/** @class */\nfunction (_super) {\n  __extends(WebGPUCacheRenderPipelineTree, _super);\n\n  function WebGPUCacheRenderPipelineTree(device, emptyVertexBuffer, useTextureStage) {\n    var _this = _super.call(this, device, emptyVertexBuffer, useTextureStage) || this;\n\n    _this._nodeStack = [];\n    _this._nodeStack[0] = WebGPUCacheRenderPipelineTree._Cache;\n    return _this;\n  }\n\n  WebGPUCacheRenderPipelineTree.GetNodeCounts = function () {\n    var counts = WebGPUCacheRenderPipelineTree._Cache.count();\n\n    return {\n      nodeCount: counts[0],\n      pipelineCount: counts[1]\n    };\n  };\n\n  WebGPUCacheRenderPipelineTree._GetPipelines = function (node, pipelines, curPath, curPathLen) {\n    if (node.pipeline) {\n      var path = curPath.slice();\n      path.length = curPathLen;\n      pipelines.push(path);\n    }\n\n    for (var value in node.values) {\n      var nnode = node.values[value];\n      curPath[curPathLen] = parseInt(value);\n\n      WebGPUCacheRenderPipelineTree._GetPipelines(nnode, pipelines, curPath, curPathLen + 1);\n    }\n  };\n\n  WebGPUCacheRenderPipelineTree.GetPipelines = function () {\n    var pipelines = [];\n\n    WebGPUCacheRenderPipelineTree._GetPipelines(WebGPUCacheRenderPipelineTree._Cache, pipelines, [], 0);\n\n    return pipelines;\n  };\n\n  WebGPUCacheRenderPipelineTree.prototype._getRenderPipeline = function (param) {\n    var node = this._nodeStack[this._stateDirtyLowestIndex];\n\n    for (var i = this._stateDirtyLowestIndex; i < this._statesLength; ++i) {\n      var nn = node.values[this._states[i]];\n\n      if (!nn) {\n        nn = new NodeState();\n        node.values[this._states[i]] = nn;\n      }\n\n      node = nn;\n      this._nodeStack[i + 1] = node;\n    }\n\n    param.token = node;\n    param.pipeline = node.pipeline;\n  };\n\n  WebGPUCacheRenderPipelineTree.prototype._setRenderPipeline = function (param) {\n    param.token.pipeline = param.pipeline;\n  };\n\n  WebGPUCacheRenderPipelineTree._Cache = new NodeState();\n  return WebGPUCacheRenderPipelineTree;\n}(WebGPUCacheRenderPipeline);\n\nexport { WebGPUCacheRenderPipelineTree };","map":{"version":3,"mappings":"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","names":["WebGPUCacheRenderPipeline","values","NodeState","countNode","countPipeline","pipeline","value","node","count","childCountNodes","childCoundPipeline","__extends","device","emptyVertexBuffer","useTextureStage","_super","_this","_nodeStack","WebGPUCacheRenderPipelineTree","_Cache","counts","nodeCount","pipelineCount","pipelines","curPath","curPathLen","path","slice","length","push","nnode","parseInt","_GetPipelines","param","_stateDirtyLowestIndex","i","_statesLength","nn","_states","token"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/WebGPU/webgpuCacheRenderPipelineTree.ts"],"sourcesContent":["import type { VertexBuffer } from \"../../Buffers/buffer\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { WebGPUCacheRenderPipeline } from \"./webgpuCacheRenderPipeline\";\r\n\r\n/** @hidden */\r\nclass NodeState {\r\n    public values: { [id: number]: NodeState };\r\n    public pipeline: GPURenderPipeline;\r\n\r\n    constructor() {\r\n        this.values = {};\r\n    }\r\n\r\n    public count(): [number, number] {\r\n        let countNode = 0,\r\n            countPipeline = this.pipeline ? 1 : 0;\r\n        for (const value in this.values) {\r\n            const node = this.values[value];\r\n            const [childCountNodes, childCoundPipeline] = node!.count();\r\n            countNode += childCountNodes;\r\n            countPipeline += childCoundPipeline;\r\n            countNode++;\r\n        }\r\n        return [countNode, countPipeline];\r\n    }\r\n}\r\n\r\n/** @hidden */\r\nexport class WebGPUCacheRenderPipelineTree extends WebGPUCacheRenderPipeline {\r\n    private static _Cache: NodeState = new NodeState();\r\n\r\n    private _nodeStack: NodeState[];\r\n\r\n    public static GetNodeCounts(): { nodeCount: number; pipelineCount: number } {\r\n        const counts = WebGPUCacheRenderPipelineTree._Cache.count();\r\n\r\n        return { nodeCount: counts[0], pipelineCount: counts[1] };\r\n    }\r\n\r\n    public static _GetPipelines(node: NodeState, pipelines: Array<Array<number>>, curPath: Array<number>, curPathLen: number): void {\r\n        if (node.pipeline) {\r\n            const path = curPath.slice();\r\n            path.length = curPathLen;\r\n            pipelines.push(path);\r\n        }\r\n        for (const value in node.values) {\r\n            const nnode = node.values[value];\r\n            curPath[curPathLen] = parseInt(value);\r\n            WebGPUCacheRenderPipelineTree._GetPipelines(nnode, pipelines, curPath, curPathLen + 1);\r\n        }\r\n    }\r\n\r\n    public static GetPipelines(): Array<Array<number>> {\r\n        const pipelines: Array<Array<number>> = [];\r\n        WebGPUCacheRenderPipelineTree._GetPipelines(WebGPUCacheRenderPipelineTree._Cache, pipelines, [], 0);\r\n        return pipelines;\r\n    }\r\n\r\n    constructor(device: GPUDevice, emptyVertexBuffer: VertexBuffer, useTextureStage: boolean) {\r\n        super(device, emptyVertexBuffer, useTextureStage);\r\n        this._nodeStack = [];\r\n        this._nodeStack[0] = WebGPUCacheRenderPipelineTree._Cache;\r\n    }\r\n\r\n    protected _getRenderPipeline(param: { token: any; pipeline: Nullable<GPURenderPipeline> }): void {\r\n        let node = this._nodeStack[this._stateDirtyLowestIndex];\r\n        for (let i = this._stateDirtyLowestIndex; i < this._statesLength; ++i) {\r\n            let nn: NodeState | undefined = node!.values[this._states[i]];\r\n            if (!nn) {\r\n                nn = new NodeState();\r\n                node!.values[this._states[i]] = nn;\r\n            }\r\n            node = nn;\r\n            this._nodeStack[i + 1] = node;\r\n        }\r\n\r\n        param.token = node;\r\n        param.pipeline = node.pipeline;\r\n    }\r\n\r\n    protected _setRenderPipeline(param: { token: NodeState; pipeline: Nullable<GPURenderPipeline> }): void {\r\n        param.token.pipeline = param.pipeline!;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}