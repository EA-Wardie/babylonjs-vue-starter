{"ast":null,"code":"import { Observable } from \"./observable.js\";\nimport { runCoroutineAsync, inlineScheduler } from \"./coroutine.js\";\n\nfunction CreateObservableScheduler(observable) {\n  var coroutines = new Array();\n  var onSteps = new Array();\n  var onErrors = new Array();\n  var observer = observable.add(function () {\n    var count = coroutines.length;\n\n    for (var i = 0; i < count; i++) {\n      inlineScheduler(coroutines.shift(), onSteps.shift(), onErrors.shift());\n    }\n  });\n\n  var scheduler = function scheduler(coroutine, onStep, onError) {\n    coroutines.push(coroutine);\n    onSteps.push(onStep);\n    onErrors.push(onError);\n  };\n\n  return {\n    scheduler: scheduler,\n    dispose: function dispose() {\n      observable.remove(observer);\n    }\n  };\n}\n\nObservable.prototype.runCoroutineAsync = function (coroutine) {\n  if (!this._coroutineScheduler) {\n    var schedulerAndDispose = CreateObservableScheduler(this);\n    this._coroutineScheduler = schedulerAndDispose.scheduler;\n    this._coroutineSchedulerDispose = schedulerAndDispose.dispose;\n  }\n\n  return runCoroutineAsync(coroutine, this._coroutineScheduler);\n};\n\nObservable.prototype.cancelAllCoroutines = function () {\n  if (this._coroutineSchedulerDispose) {\n    this._coroutineSchedulerDispose();\n  }\n\n  this._coroutineScheduler = undefined;\n  this._coroutineSchedulerDispose = undefined;\n};","map":{"version":3,"mappings":"AAAA,SAASA,UAAT,QAA2B,iBAA3B;AAEA,SAASC,iBAAT,EAA4BC,eAA5B,QAAmD,gBAAnD;;AAEA,SAASC,yBAAT,CAAsCC,UAAtC,EAAiE;AAC7D,MAAMC,UAAU,GAAG,IAAIC,KAAJ,EAAnB;AACA,MAAMC,OAAO,GAAG,IAAID,KAAJ,EAAhB;AACA,MAAME,QAAQ,GAAG,IAAIF,KAAJ,EAAjB;AAEA,MAAMG,QAAQ,GAAGL,UAAU,CAACM,GAAX,CAAe;AAC5B,QAAMC,KAAK,GAAGN,UAAU,CAACO,MAAzB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAApB,EAA2BE,CAAC,EAA5B,EAAgC;AAC5BX,qBAAe,CAACG,UAAU,CAACS,KAAX,EAAD,EAAsBP,OAAO,CAACO,KAAR,EAAtB,EAAwCN,QAAQ,CAACM,KAAT,EAAxC,CAAf;AACH;AACJ,GALgB,CAAjB;;AAOA,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,SAAD,EAA+BC,MAA/B,EAA+EC,OAA/E,EAAgH;AAC9Hb,cAAU,CAACc,IAAX,CAAgBH,SAAhB;AACAT,WAAO,CAACY,IAAR,CAAaF,MAAb;AACAT,YAAQ,CAACW,IAAT,CAAcD,OAAd;AACH,GAJD;;AAMA,SAAO;AACHH,aAAS,EAAEA,SADR;AAEHK,WAAO,EAAE;AACLhB,gBAAU,CAACiB,MAAX,CAAkBZ,QAAlB;AACH;AAJE,GAAP;AAMH;;AA6BDT,UAAU,CAACsB,SAAX,CAAqBrB,iBAArB,GAAyC,UAAUe,SAAV,EAAyC;AAC9E,MAAI,CAAC,KAAKO,mBAAV,EAA+B;AAC3B,QAAMC,mBAAmB,GAAGrB,yBAAyB,CAAO,IAAP,CAArD;AACA,SAAKoB,mBAAL,GAA2BC,mBAAmB,CAACT,SAA/C;AACA,SAAKU,0BAAL,GAAkCD,mBAAmB,CAACJ,OAAtD;AACH;;AAED,SAAOnB,iBAAiB,CAACe,SAAD,EAAY,KAAKO,mBAAjB,CAAxB;AACH,CARD;;AAUAvB,UAAU,CAACsB,SAAX,CAAqBI,mBAArB,GAA2C;AACvC,MAAI,KAAKD,0BAAT,EAAqC;AACjC,SAAKA,0BAAL;AACH;;AACD,OAAKF,mBAAL,GAA2BI,SAA3B;AACA,OAAKF,0BAAL,GAAkCE,SAAlC;AACH,CAND","names":["Observable","runCoroutineAsync","inlineScheduler","CreateObservableScheduler","observable","coroutines","Array","onSteps","onErrors","observer","add","count","length","i","shift","scheduler","coroutine","onStep","onError","push","dispose","remove","prototype","_coroutineScheduler","schedulerAndDispose","_coroutineSchedulerDispose","cancelAllCoroutines","undefined"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Misc/observableCoroutine.ts"],"sourcesContent":["import { Observable } from \"./observable\";\r\nimport type { AsyncCoroutine, CoroutineStep, CoroutineScheduler } from \"./coroutine\";\r\nimport { runCoroutineAsync, inlineScheduler } from \"./coroutine\";\r\n\r\nfunction CreateObservableScheduler<T>(observable: Observable<any>): { scheduler: CoroutineScheduler<T>; dispose: () => void } {\r\n    const coroutines = new Array<AsyncCoroutine<T>>();\r\n    const onSteps = new Array<(stepResult: CoroutineStep<T>) => void>();\r\n    const onErrors = new Array<(stepError: any) => void>();\r\n\r\n    const observer = observable.add(() => {\r\n        const count = coroutines.length;\r\n        for (let i = 0; i < count; i++) {\r\n            inlineScheduler(coroutines.shift()!, onSteps.shift()!, onErrors.shift()!);\r\n        }\r\n    });\r\n\r\n    const scheduler = (coroutine: AsyncCoroutine<T>, onStep: (stepResult: CoroutineStep<T>) => void, onError: (stepError: any) => void) => {\r\n        coroutines.push(coroutine);\r\n        onSteps.push(onStep);\r\n        onErrors.push(onError);\r\n    };\r\n\r\n    return {\r\n        scheduler: scheduler,\r\n        dispose: () => {\r\n            observable.remove(observer);\r\n        },\r\n    };\r\n}\r\n\r\ndeclare module \"./observable\" {\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    export interface Observable<T> {\r\n        /**\r\n         * Internal observable-based coroutine scheduler instance.\r\n         */\r\n        _coroutineScheduler?: CoroutineScheduler<void>;\r\n\r\n        /**\r\n         * Internal disposal method for observable-based coroutine scheduler instance.\r\n         */\r\n        _coroutineSchedulerDispose?: () => void;\r\n\r\n        /**\r\n         * Runs a coroutine asynchronously on this observable\r\n         * @param coroutine the iterator resulting from having started the coroutine\r\n         * @returns a promise which will be resolved when the coroutine finishes or rejected if the coroutine is cancelled\r\n         */\r\n        runCoroutineAsync(coroutine: AsyncCoroutine<void>): Promise<void>;\r\n\r\n        /**\r\n         * Cancels all coroutines currently running on this observable\r\n         */\r\n        cancelAllCoroutines(): void;\r\n    }\r\n}\r\n\r\nObservable.prototype.runCoroutineAsync = function (coroutine: AsyncCoroutine<void>) {\r\n    if (!this._coroutineScheduler) {\r\n        const schedulerAndDispose = CreateObservableScheduler<void>(this);\r\n        this._coroutineScheduler = schedulerAndDispose.scheduler;\r\n        this._coroutineSchedulerDispose = schedulerAndDispose.dispose;\r\n    }\r\n\r\n    return runCoroutineAsync(coroutine, this._coroutineScheduler);\r\n};\r\n\r\nObservable.prototype.cancelAllCoroutines = function () {\r\n    if (this._coroutineSchedulerDispose) {\r\n        this._coroutineSchedulerDispose();\r\n    }\r\n    this._coroutineScheduler = undefined;\r\n    this._coroutineSchedulerDispose = undefined;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}