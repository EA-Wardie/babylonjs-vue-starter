{"ast":null,"code":"import \"core-js/modules/es.array.join.js\";\nimport { WebGPUCacheRenderPipelineTree } from \"./webgpuCacheRenderPipelineTree.js\";\nimport { WebGPUShaderProcessingContext } from \"./webgpuShaderProcessingContext.js\";\nimport { renderableTextureFormatToIndex, WebGPUTextureHelper } from \"./webgpuTextureHelper.js\";\nimport \"../../Shaders/clearQuad.vertex.js\";\nimport \"../../Shaders/clearQuad.fragment.js\";\n/** @hidden */\n\nvar WebGPUClearQuad =\n/** @class */\nfunction () {\n  function WebGPUClearQuad(device, engine, emptyVertexBuffer) {\n    this._bindGroups = {};\n    this._bundleCache = {};\n    this._keyTemp = [];\n    this._device = device;\n    this._engine = engine;\n    this._cacheRenderPipeline = new WebGPUCacheRenderPipelineTree(this._device, emptyVertexBuffer, !engine._caps.textureFloatLinearFiltering);\n\n    this._cacheRenderPipeline.setDepthTestEnabled(false);\n\n    this._cacheRenderPipeline.setStencilReadMask(0xff);\n\n    this._effect = engine.createEffect(\"clearQuad\", [], [\"color\", \"depthValue\"]);\n  }\n\n  WebGPUClearQuad.prototype.setDepthStencilFormat = function (format) {\n    this._depthTextureFormat = format;\n\n    this._cacheRenderPipeline.setDepthStencilFormat(format);\n  };\n\n  WebGPUClearQuad.prototype.setColorFormat = function (format) {\n    this._cacheRenderPipeline.setColorFormat(format);\n  };\n\n  WebGPUClearQuad.prototype.setMRTAttachments = function (attachments, textureArray, textureCount) {\n    this._cacheRenderPipeline.setMRT(textureArray, textureCount);\n\n    this._cacheRenderPipeline.setMRTAttachments(attachments);\n  };\n\n  WebGPUClearQuad.prototype.clear = function (renderPass, clearColor, clearDepth, clearStencil, sampleCount) {\n    var _a;\n\n    if (sampleCount === void 0) {\n      sampleCount = 1;\n    }\n\n    var renderPass2;\n    var bundle = null;\n    var bundleKey;\n    var isRTTPass = !!this._engine._currentRenderTarget;\n\n    if (renderPass) {\n      renderPass2 = renderPass;\n    } else {\n      var idx = 0;\n      this._keyTemp.length = 0;\n\n      for (var i = 0; i < this._cacheRenderPipeline.colorFormats.length; ++i) {\n        this._keyTemp[idx++] = renderableTextureFormatToIndex[this._cacheRenderPipeline.colorFormats[i]];\n      }\n\n      var depthStencilFormatIndex = renderableTextureFormatToIndex[(_a = this._depthTextureFormat) !== null && _a !== void 0 ? _a : 0];\n      this._keyTemp[idx] = (clearColor ? clearColor.r + clearColor.g * 256 + clearColor.b * 256 * 256 + clearColor.a * 256 * 256 * 256 : 0) + (clearDepth ? Math.pow(2, 32) : 0) + (clearStencil ? Math.pow(2, 33) : 0) + (this._engine.useReverseDepthBuffer ? Math.pow(2, 34) : 0) + (isRTTPass ? Math.pow(2, 35) : 0) + (sampleCount > 1 ? Math.pow(2, 36) : 0) + depthStencilFormatIndex * Math.pow(2, 37);\n      bundleKey = this._keyTemp.join(\"_\");\n      bundle = this._bundleCache[bundleKey];\n\n      if (bundle) {\n        return bundle;\n      }\n\n      renderPass2 = this._device.createRenderBundleEncoder({\n        colorFormats: this._cacheRenderPipeline.colorFormats,\n        depthStencilFormat: this._depthTextureFormat,\n        sampleCount: sampleCount\n      });\n    }\n\n    this._cacheRenderPipeline.setDepthWriteEnabled(!!clearDepth);\n\n    this._cacheRenderPipeline.setStencilEnabled(!!clearStencil && !!this._depthTextureFormat && WebGPUTextureHelper.HasStencilAspect(this._depthTextureFormat));\n\n    this._cacheRenderPipeline.setStencilWriteMask(clearStencil ? 0xff : 0);\n\n    this._cacheRenderPipeline.setStencilCompare(clearStencil ? 519 : 512);\n\n    this._cacheRenderPipeline.setStencilPassOp(clearStencil ? 7681 : 7680);\n\n    this._cacheRenderPipeline.setWriteMask(clearColor ? 0xf : 0);\n\n    var pipeline = this._cacheRenderPipeline.getRenderPipeline(7, this._effect, sampleCount);\n\n    var webgpuPipelineContext = this._effect._pipelineContext;\n\n    if (clearColor) {\n      this._effect.setDirectColor4(\"color\", clearColor);\n    }\n\n    this._effect.setFloat(\"depthValue\", this._engine.useReverseDepthBuffer ? this._engine._clearReverseDepthValue : this._engine._clearDepthValue);\n\n    webgpuPipelineContext.uniformBuffer.update();\n    var bufferInternals = isRTTPass ? this._engine._ubInvertY : this._engine._ubDontInvertY;\n    var bufferLeftOver = webgpuPipelineContext.uniformBuffer.getBuffer();\n    var key = bufferLeftOver.uniqueId + \"-\" + bufferInternals.uniqueId;\n    var bindGroups = this._bindGroups[key];\n\n    if (!bindGroups) {\n      var bindGroupLayouts = webgpuPipelineContext.bindGroupLayouts;\n      bindGroups = this._bindGroups[key] = [];\n      bindGroups.push(this._device.createBindGroup({\n        layout: bindGroupLayouts[0],\n        entries: []\n      }));\n\n      if (!WebGPUShaderProcessingContext._SimplifiedKnownBindings) {\n        bindGroups.push(this._device.createBindGroup({\n          layout: bindGroupLayouts[1],\n          entries: []\n        }));\n      }\n\n      bindGroups.push(this._device.createBindGroup({\n        layout: bindGroupLayouts[WebGPUShaderProcessingContext._SimplifiedKnownBindings ? 1 : 2],\n        entries: [{\n          binding: 0,\n          resource: {\n            buffer: bufferInternals.underlyingResource,\n            size: bufferInternals.capacity\n          }\n        }, {\n          binding: 1,\n          resource: {\n            buffer: bufferLeftOver.underlyingResource,\n            size: bufferLeftOver.capacity\n          }\n        }]\n      }));\n    }\n\n    renderPass2.setPipeline(pipeline);\n\n    for (var i = 0; i < bindGroups.length; ++i) {\n      renderPass2.setBindGroup(i, bindGroups[i]);\n    }\n\n    renderPass2.draw(4, 1, 0, 0);\n\n    if (!renderPass) {\n      bundle = renderPass2.finish();\n      this._bundleCache[bundleKey] = bundle;\n    }\n\n    return bundle;\n  };\n\n  return WebGPUClearQuad;\n}();\n\nexport { WebGPUClearQuad };","map":{"version":3,"mappings":"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","names":["WebGPUCacheRenderPipelineTree","WebGPUShaderProcessingContext","renderableTextureFormatToIndex","WebGPUTextureHelper","device","engine","emptyVertexBuffer","_device","_engine","_cacheRenderPipeline","_caps","textureFloatLinearFiltering","setDepthTestEnabled","setStencilReadMask","_effect","createEffect","WebGPUClearQuad","format","_depthTextureFormat","setDepthStencilFormat","setColorFormat","attachments","textureArray","textureCount","setMRT","setMRTAttachments","renderPass","clearColor","clearDepth","clearStencil","sampleCount","renderPass2","bundle","bundleKey","isRTTPass","_currentRenderTarget","idx","_keyTemp","length","i","colorFormats","depthStencilFormatIndex","_a","r","g","b","a","Math","useReverseDepthBuffer","join","_bundleCache","createRenderBundleEncoder","depthStencilFormat","setDepthWriteEnabled","setStencilEnabled","HasStencilAspect","setStencilWriteMask","setStencilCompare","setStencilPassOp","setWriteMask","pipeline","getRenderPipeline","webgpuPipelineContext","_pipelineContext","setDirectColor4","setFloat","_clearReverseDepthValue","_clearDepthValue","uniformBuffer","update","bufferInternals","_ubInvertY","_ubDontInvertY","bufferLeftOver","getBuffer","key","uniqueId","bindGroups","_bindGroups","bindGroupLayouts","push","createBindGroup","layout","entries","_SimplifiedKnownBindings","binding","resource","buffer","underlyingResource","size","capacity","setPipeline","setBindGroup","draw","finish"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/WebGPU/webgpuClearQuad.ts"],"sourcesContent":["import type { Effect } from \"../../Materials/effect\";\r\nimport type { InternalTexture } from \"../../Materials/Textures/internalTexture\";\r\nimport type { IColor4Like } from \"../../Maths/math.like\";\r\nimport type { VertexBuffer } from \"../../Buffers/buffer\";\r\nimport type { WebGPUDataBuffer } from \"../../Meshes/WebGPU/webgpuDataBuffer\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Constants } from \"../constants\";\r\nimport type { WebGPUEngine } from \"../webgpuEngine\";\r\nimport type { WebGPUCacheRenderPipeline } from \"./webgpuCacheRenderPipeline\";\r\nimport { WebGPUCacheRenderPipelineTree } from \"./webgpuCacheRenderPipelineTree\";\r\nimport type { WebGPUPipelineContext } from \"./webgpuPipelineContext\";\r\nimport { WebGPUShaderProcessingContext } from \"./webgpuShaderProcessingContext\";\r\nimport { renderableTextureFormatToIndex, WebGPUTextureHelper } from \"./webgpuTextureHelper\";\r\n\r\nimport \"../../Shaders/clearQuad.vertex\";\r\nimport \"../../Shaders/clearQuad.fragment\";\r\n\r\n/** @hidden */\r\nexport class WebGPUClearQuad {\r\n    private _device: GPUDevice;\r\n    private _engine: WebGPUEngine;\r\n    private _cacheRenderPipeline: WebGPUCacheRenderPipeline;\r\n    private _effect: Effect;\r\n    private _bindGroups: { [id: string]: GPUBindGroup[] } = {};\r\n    private _depthTextureFormat: GPUTextureFormat | undefined;\r\n    private _bundleCache: { [key: string]: GPURenderBundle } = {};\r\n    private _keyTemp: number[] = [];\r\n\r\n    public setDepthStencilFormat(format: GPUTextureFormat | undefined): void {\r\n        this._depthTextureFormat = format;\r\n        this._cacheRenderPipeline.setDepthStencilFormat(format);\r\n    }\r\n\r\n    public setColorFormat(format: GPUTextureFormat): void {\r\n        this._cacheRenderPipeline.setColorFormat(format);\r\n    }\r\n\r\n    public setMRTAttachments(attachments: number[], textureArray: InternalTexture[], textureCount: number): void {\r\n        this._cacheRenderPipeline.setMRT(textureArray, textureCount);\r\n        this._cacheRenderPipeline.setMRTAttachments(attachments);\r\n    }\r\n\r\n    constructor(device: GPUDevice, engine: WebGPUEngine, emptyVertexBuffer: VertexBuffer) {\r\n        this._device = device;\r\n        this._engine = engine;\r\n\r\n        this._cacheRenderPipeline = new WebGPUCacheRenderPipelineTree(this._device, emptyVertexBuffer, !engine._caps.textureFloatLinearFiltering);\r\n        this._cacheRenderPipeline.setDepthTestEnabled(false);\r\n        this._cacheRenderPipeline.setStencilReadMask(0xff);\r\n\r\n        this._effect = engine.createEffect(\"clearQuad\", [], [\"color\", \"depthValue\"]);\r\n    }\r\n\r\n    public clear(\r\n        renderPass: Nullable<GPURenderPassEncoder>,\r\n        clearColor?: Nullable<IColor4Like>,\r\n        clearDepth?: boolean,\r\n        clearStencil?: boolean,\r\n        sampleCount = 1\r\n    ): Nullable<GPURenderBundle> {\r\n        let renderPass2: GPURenderPassEncoder | GPURenderBundleEncoder;\r\n        let bundle: Nullable<GPURenderBundle> = null;\r\n        let bundleKey: string;\r\n\r\n        const isRTTPass = !!this._engine._currentRenderTarget;\r\n\r\n        if (renderPass) {\r\n            renderPass2 = renderPass;\r\n        } else {\r\n            let idx = 0;\r\n            this._keyTemp.length = 0;\r\n            for (let i = 0; i < this._cacheRenderPipeline.colorFormats.length; ++i) {\r\n                this._keyTemp[idx++] = renderableTextureFormatToIndex[this._cacheRenderPipeline.colorFormats[i]];\r\n            }\r\n\r\n            const depthStencilFormatIndex = renderableTextureFormatToIndex[this._depthTextureFormat ?? 0];\r\n\r\n            this._keyTemp[idx] =\r\n                (clearColor ? clearColor.r + clearColor.g * 256 + clearColor.b * 256 * 256 + clearColor.a * 256 * 256 * 256 : 0) +\r\n                (clearDepth ? 2 ** 32 : 0) +\r\n                (clearStencil ? 2 ** 33 : 0) +\r\n                (this._engine.useReverseDepthBuffer ? 2 ** 34 : 0) +\r\n                (isRTTPass ? 2 ** 35 : 0) +\r\n                (sampleCount > 1 ? 2 ** 36 : 0) +\r\n                depthStencilFormatIndex * 2 ** 37;\r\n\r\n            bundleKey = this._keyTemp.join(\"_\");\r\n            bundle = this._bundleCache[bundleKey];\r\n\r\n            if (bundle) {\r\n                return bundle;\r\n            }\r\n\r\n            renderPass2 = this._device.createRenderBundleEncoder({\r\n                colorFormats: this._cacheRenderPipeline.colorFormats,\r\n                depthStencilFormat: this._depthTextureFormat,\r\n                sampleCount,\r\n            });\r\n        }\r\n\r\n        this._cacheRenderPipeline.setDepthWriteEnabled(!!clearDepth);\r\n        this._cacheRenderPipeline.setStencilEnabled(!!clearStencil && !!this._depthTextureFormat && WebGPUTextureHelper.HasStencilAspect(this._depthTextureFormat));\r\n        this._cacheRenderPipeline.setStencilWriteMask(clearStencil ? 0xff : 0);\r\n        this._cacheRenderPipeline.setStencilCompare(clearStencil ? Constants.ALWAYS : Constants.NEVER);\r\n        this._cacheRenderPipeline.setStencilPassOp(clearStencil ? Constants.REPLACE : Constants.KEEP);\r\n        this._cacheRenderPipeline.setWriteMask(clearColor ? 0xf : 0);\r\n\r\n        const pipeline = this._cacheRenderPipeline.getRenderPipeline(Constants.MATERIAL_TriangleStripDrawMode, this._effect, sampleCount);\r\n\r\n        const webgpuPipelineContext = this._effect._pipelineContext as WebGPUPipelineContext;\r\n\r\n        if (clearColor) {\r\n            this._effect.setDirectColor4(\"color\", clearColor);\r\n        }\r\n\r\n        this._effect.setFloat(\"depthValue\", this._engine.useReverseDepthBuffer ? this._engine._clearReverseDepthValue : this._engine._clearDepthValue);\r\n\r\n        webgpuPipelineContext.uniformBuffer!.update();\r\n\r\n        const bufferInternals = isRTTPass ? this._engine._ubInvertY : this._engine._ubDontInvertY;\r\n        const bufferLeftOver = webgpuPipelineContext.uniformBuffer!.getBuffer() as WebGPUDataBuffer;\r\n\r\n        const key = bufferLeftOver.uniqueId + \"-\" + bufferInternals.uniqueId;\r\n\r\n        let bindGroups = this._bindGroups[key];\r\n\r\n        if (!bindGroups) {\r\n            const bindGroupLayouts = webgpuPipelineContext.bindGroupLayouts;\r\n            bindGroups = this._bindGroups[key] = [];\r\n            bindGroups.push(\r\n                this._device.createBindGroup({\r\n                    layout: bindGroupLayouts[0],\r\n                    entries: [],\r\n                })\r\n            );\r\n            if (!WebGPUShaderProcessingContext._SimplifiedKnownBindings) {\r\n                bindGroups.push(\r\n                    this._device.createBindGroup({\r\n                        layout: bindGroupLayouts[1],\r\n                        entries: [],\r\n                    })\r\n                );\r\n            }\r\n            bindGroups.push(\r\n                this._device.createBindGroup({\r\n                    layout: bindGroupLayouts[WebGPUShaderProcessingContext._SimplifiedKnownBindings ? 1 : 2],\r\n                    entries: [\r\n                        {\r\n                            binding: 0,\r\n                            resource: {\r\n                                buffer: bufferInternals.underlyingResource,\r\n                                size: bufferInternals.capacity,\r\n                            },\r\n                        },\r\n                        {\r\n                            binding: 1,\r\n                            resource: {\r\n                                buffer: bufferLeftOver.underlyingResource,\r\n                                size: bufferLeftOver.capacity,\r\n                            },\r\n                        },\r\n                    ],\r\n                })\r\n            );\r\n        }\r\n\r\n        renderPass2.setPipeline(pipeline);\r\n        for (let i = 0; i < bindGroups.length; ++i) {\r\n            renderPass2.setBindGroup(i, bindGroups[i]);\r\n        }\r\n        renderPass2.draw(4, 1, 0, 0);\r\n\r\n        if (!renderPass) {\r\n            bundle = (renderPass2 as GPURenderBundleEncoder).finish();\r\n            this._bundleCache[bundleKey!] = bundle;\r\n        }\r\n\r\n        return bundle;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}