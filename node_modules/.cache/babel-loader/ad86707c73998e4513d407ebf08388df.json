{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { ArrayItem, GLTFLoader } from \"../glTFLoader.js\";\nimport { MeshoptCompression } from \"@babylonjs/core/Meshes/Compression/meshoptCompression.js\";\nvar NAME = \"EXT_meshopt_compression\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_meshopt_compression)\n *\n * This extension uses a WebAssembly decoder module from https://github.com/zeux/meshoptimizer/tree/master/js\n * @since 5.0.0\n */\n\nvar EXT_meshopt_compression =\n/** @class */\nfunction () {\n  /**\n   * @param loader\n   * @hidden\n   */\n  function EXT_meshopt_compression(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    this.enabled = loader.isExtensionUsed(NAME);\n    this._loader = loader;\n  }\n  /** @hidden */\n\n\n  EXT_meshopt_compression.prototype.dispose = function () {\n    this._loader = null;\n  };\n  /**\n   * @param context\n   * @param bufferView\n   * @hidden\n   */\n\n\n  EXT_meshopt_compression.prototype.loadBufferViewAsync = function (context, bufferView) {\n    var _this = this;\n\n    return GLTFLoader.LoadExtensionAsync(context, bufferView, this.name, function (extensionContext, extension) {\n      var bufferViewMeshopt = bufferView;\n\n      if (bufferViewMeshopt._meshOptData) {\n        return bufferViewMeshopt._meshOptData;\n      }\n\n      var buffer = ArrayItem.Get(\"\".concat(context, \"/buffer\"), _this._loader.gltf.buffers, extension.buffer);\n      bufferViewMeshopt._meshOptData = _this._loader.loadBufferAsync(\"/buffers/\".concat(buffer.index), buffer, extension.byteOffset || 0, extension.byteLength).then(function (buffer) {\n        return MeshoptCompression.Default.decodeGltfBufferAsync(buffer, extension.count, extension.byteStride, extension.mode, extension.filter);\n      });\n      return bufferViewMeshopt._meshOptData;\n    });\n  };\n\n  return EXT_meshopt_compression;\n}();\n\nexport { EXT_meshopt_compression };\nGLTFLoader.RegisterExtension(NAME, function (loader) {\n  return new EXT_meshopt_compression(loader);\n});","map":{"version":3,"mappings":";;;AAGA,SAASA,SAAT,EAAoBC,UAApB,QAAsC,kBAAtC;AAGA,SAASC,kBAAT,QAA6B,0DAA7B;AAEA,IAAMC,IAAI,GAAG,yBAAb;AAMA;;;;;;;AAMA;AAAA;AAAA;AAaI;;;;AAIA,mCAAYC,MAAZ,EAA8B;AAhB9B;;;AAGgB,gBAAOD,IAAP;AAcZ,SAAKE,OAAL,GAAeD,MAAM,CAACE,eAAP,CAAuBH,IAAvB,CAAf;AACA,SAAKI,OAAL,GAAeH,MAAf;AACH;AAED;;;AACOI,8CAAP;AACK,SAAKD,OAAL,GAAuB,IAAvB;AACJ,GAFM;AAIP;;;;;;;AAKOC,0DAAP,UAA2BC,OAA3B,EAA4CC,UAA5C,EAAmE;AAAnE;;AACI,WAAOT,UAAU,CAACU,kBAAX,CAAuEF,OAAvE,EAAgFC,UAAhF,EAA4F,KAAKE,IAAjG,EAAuG,UAACC,gBAAD,EAAmBC,SAAnB,EAA4B;AACtI,UAAMC,iBAAiB,GAAGL,UAA1B;;AACA,UAAIK,iBAAiB,CAACC,YAAtB,EAAoC;AAChC,eAAOD,iBAAiB,CAACC,YAAzB;AACH;;AAED,UAAMC,MAAM,GAAGjB,SAAS,CAACkB,GAAV,CAAc,UAAGT,OAAH,EAAU,SAAV,CAAd,EAAmCU,KAAI,CAACZ,OAAL,CAAaa,IAAb,CAAkBC,OAArD,EAA8DP,SAAS,CAACG,MAAxE,CAAf;AACAF,uBAAiB,CAACC,YAAlB,GAAiCG,KAAI,CAACZ,OAAL,CAAae,eAAb,CAA6B,mBAAYL,MAAM,CAACM,KAAnB,CAA7B,EAAyDN,MAAzD,EAAiEH,SAAS,CAACU,UAAV,IAAwB,CAAzF,EAA4FV,SAAS,CAACW,UAAtG,EAAkHC,IAAlH,CAAuH,UAACT,MAAD,EAAO;AAC3J,eAAOf,kBAAkB,CAACyB,OAAnB,CAA2BC,qBAA3B,CAAiDX,MAAjD,EAAuEH,SAAS,CAACe,KAAjF,EAAwFf,SAAS,CAACgB,UAAlG,EAA8GhB,SAAS,CAACiB,IAAxH,EAA8HjB,SAAS,CAACkB,MAAxI,CAAP;AACH,OAFgC,CAAjC;AAIA,aAAOjB,iBAAiB,CAACC,YAAzB;AACH,KAZM,CAAP;AAaH,GAdM;;AAeX;AAAC,CA/CD;;;AAiDAf,UAAU,CAACgC,iBAAX,CAA6B9B,IAA7B,EAAmC,UAACC,MAAD,EAAO;AAAK,aAAII,uBAAJ,CAA4BJ,MAA5B;AAAmC,CAAlF","names":["ArrayItem","GLTFLoader","MeshoptCompression","NAME","loader","enabled","isExtensionUsed","_loader","EXT_meshopt_compression","context","bufferView","LoadExtensionAsync","name","extensionContext","extension","bufferViewMeshopt","_meshOptData","buffer","Get","_this","gltf","buffers","loadBufferAsync","index","byteOffset","byteLength","then","Default","decodeGltfBufferAsync","count","byteStride","mode","filter","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../../lts/loaders/generated/glTF/2.0/Extensions/EXT_meshopt_compression.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { ArrayItem, GLTFLoader } from \"../glTFLoader\";\r\nimport type { IBufferView } from \"../glTFLoaderInterfaces\";\r\nimport type { IEXTMeshoptCompression } from \"babylonjs-gltf2interface\";\r\nimport { MeshoptCompression } from \"core/Meshes/Compression/meshoptCompression\";\r\n\r\nconst NAME = \"EXT_meshopt_compression\";\r\n\r\ninterface IBufferViewMeshopt extends IBufferView {\r\n    _meshOptData?: Promise<ArrayBufferView>;\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/EXT_meshopt_compression)\r\n *\r\n * This extension uses a WebAssembly decoder module from https://github.com/zeux/meshoptimizer/tree/master/js\r\n * @since 5.0.0\r\n */\r\nexport class EXT_meshopt_compression implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @param loader\r\n     * @hidden\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this.enabled = loader.isExtensionUsed(NAME);\r\n        this._loader = loader;\r\n    }\r\n\r\n    /** @hidden */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @param context\r\n     * @param bufferView\r\n     * @hidden\r\n     */\r\n    public loadBufferViewAsync(context: string, bufferView: IBufferView): Nullable<Promise<ArrayBufferView>> {\r\n        return GLTFLoader.LoadExtensionAsync<IEXTMeshoptCompression, ArrayBufferView>(context, bufferView, this.name, (extensionContext, extension) => {\r\n            const bufferViewMeshopt = bufferView as IBufferViewMeshopt;\r\n            if (bufferViewMeshopt._meshOptData) {\r\n                return bufferViewMeshopt._meshOptData;\r\n            }\r\n\r\n            const buffer = ArrayItem.Get(`${context}/buffer`, this._loader.gltf.buffers, extension.buffer);\r\n            bufferViewMeshopt._meshOptData = this._loader.loadBufferAsync(`/buffers/${buffer.index}`, buffer, extension.byteOffset || 0, extension.byteLength).then((buffer) => {\r\n                return MeshoptCompression.Default.decodeGltfBufferAsync(buffer as Uint8Array, extension.count, extension.byteStride, extension.mode, extension.filter);\r\n            });\r\n\r\n            return bufferViewMeshopt._meshOptData;\r\n        });\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new EXT_meshopt_compression(loader));\r\n"]},"metadata":{},"sourceType":"module"}