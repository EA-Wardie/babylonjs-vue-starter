{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { __extends } from \"tslib\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { PoseEnabledController } from \"./poseEnabledController.js\";\n/**\n * Defines the WebVRController object that represents controllers tracked in 3D space\n * @deprecated Use WebXR instead\n */\n\nvar WebVRController =\n/** @class */\nfunction (_super) {\n  __extends(WebVRController, _super);\n  /**\n   * Creates a new WebVRController from a gamepad\n   * @param vrGamepad the gamepad that the WebVRController should be created from\n   */\n\n\n  function WebVRController(vrGamepad) {\n    var _this = _super.call(this, vrGamepad) || this; // Observables\n\n    /**\n     * Fired when the trigger state has changed\n     */\n\n\n    _this.onTriggerStateChangedObservable = new Observable();\n    /**\n     * Fired when the main button state has changed\n     */\n\n    _this.onMainButtonStateChangedObservable = new Observable();\n    /**\n     * Fired when the secondary button state has changed\n     */\n\n    _this.onSecondaryButtonStateChangedObservable = new Observable();\n    /**\n     * Fired when the pad state has changed\n     */\n\n    _this.onPadStateChangedObservable = new Observable();\n    /**\n     * Fired when controllers stick values have changed\n     */\n\n    _this.onPadValuesChangedObservable = new Observable();\n    /**\n     * X and Y axis corresponding to the controllers joystick\n     */\n\n    _this.pad = {\n      x: 0,\n      y: 0\n    }; // avoid GC, store state in a tmp object\n\n    _this._changes = {\n      pressChanged: false,\n      touchChanged: false,\n      valueChanged: false,\n      changed: false\n    };\n    _this._buttons = new Array(vrGamepad.buttons.length);\n    _this.hand = vrGamepad.hand;\n    return _this;\n  }\n  /**\n   * Fired when a controller button's state has changed\n   * @param callback the callback containing the button that was modified\n   */\n\n\n  WebVRController.prototype.onButtonStateChange = function (callback) {\n    this._onButtonStateChange = callback;\n  };\n\n  Object.defineProperty(WebVRController.prototype, \"defaultModel\", {\n    /**\n     * The default controller model for the controller\n     */\n    get: function get() {\n      return this._defaultModel;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Updates the state of the controller and mesh based on the current position and rotation of the controller\n   */\n\n  WebVRController.prototype.update = function () {\n    _super.prototype.update.call(this);\n\n    for (var index = 0; index < this._buttons.length; index++) {\n      this._setButtonValue(this.browserGamepad.buttons[index], this._buttons[index], index);\n    }\n\n    if (this.leftStick.x !== this.pad.x || this.leftStick.y !== this.pad.y) {\n      this.pad.x = this.leftStick.x;\n      this.pad.y = this.leftStick.y;\n      this.onPadValuesChangedObservable.notifyObservers(this.pad);\n    }\n  };\n\n  WebVRController.prototype._setButtonValue = function (newState, currentState, buttonIndex) {\n    if (!newState) {\n      newState = {\n        pressed: false,\n        touched: false,\n        value: 0\n      };\n    }\n\n    if (!currentState) {\n      this._buttons[buttonIndex] = {\n        pressed: newState.pressed,\n        touched: newState.touched,\n        value: newState.value\n      };\n      return;\n    }\n\n    this._checkChanges(newState, currentState);\n\n    if (this._changes.changed) {\n      this._onButtonStateChange && this._onButtonStateChange(this.index, buttonIndex, newState);\n\n      this._handleButtonChange(buttonIndex, newState, this._changes);\n    }\n\n    this._buttons[buttonIndex].pressed = newState.pressed;\n    this._buttons[buttonIndex].touched = newState.touched; // oculus triggers are never 0, thou not touched.\n\n    this._buttons[buttonIndex].value = newState.value < 0.00000001 ? 0 : newState.value;\n  };\n\n  WebVRController.prototype._checkChanges = function (newState, currentState) {\n    this._changes.pressChanged = newState.pressed !== currentState.pressed;\n    this._changes.touchChanged = newState.touched !== currentState.touched;\n    this._changes.valueChanged = newState.value !== currentState.value;\n    this._changes.changed = this._changes.pressChanged || this._changes.touchChanged || this._changes.valueChanged;\n    return this._changes;\n  };\n  /**\n   * Disposes of th webVRController\n   */\n\n\n  WebVRController.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._defaultModel = null;\n    this.onTriggerStateChangedObservable.clear();\n    this.onMainButtonStateChangedObservable.clear();\n    this.onSecondaryButtonStateChangedObservable.clear();\n    this.onPadStateChangedObservable.clear();\n    this.onPadValuesChangedObservable.clear();\n  };\n\n  return WebVRController;\n}(PoseEnabledController);\n\nexport { WebVRController };","map":{"version":3,"mappings":"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","names":["Observable","PoseEnabledController","__extends","vrGamepad","_super","_this","x","y","pressChanged","touchChanged","valueChanged","changed","_buttons","Array","buttons","length","hand","WebVRController","callback","_onButtonStateChange","Object","_defaultModel","update","call","index","_setButtonValue","browserGamepad","leftStick","pad","onPadValuesChangedObservable","notifyObservers","newState","currentState","buttonIndex","pressed","touched","value","_checkChanges","_changes","_handleButtonChange","dispose","onTriggerStateChangedObservable","clear","onMainButtonStateChangedObservable","onSecondaryButtonStateChangedObservable","onPadStateChangedObservable"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Gamepads/Controllers/webVRController.ts"],"sourcesContent":["import { Observable } from \"../../Misc/observable\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { ExtendedGamepadButton, MutableGamepadButton } from \"./poseEnabledController\";\r\nimport { PoseEnabledController } from \"./poseEnabledController\";\r\nimport type { StickValues, GamepadButtonChanges } from \"../../Gamepads/gamepad\";\r\nimport type { Nullable } from \"../../types\";\r\n\r\n/**\r\n * Defines the WebVRController object that represents controllers tracked in 3D space\r\n * @deprecated Use WebXR instead\r\n */\r\nexport abstract class WebVRController extends PoseEnabledController {\r\n    /**\r\n     * Internal, the default controller model for the controller\r\n     */\r\n    protected _defaultModel: Nullable<AbstractMesh>;\r\n\r\n    // Observables\r\n    /**\r\n     * Fired when the trigger state has changed\r\n     */\r\n    public onTriggerStateChangedObservable = new Observable<ExtendedGamepadButton>();\r\n    /**\r\n     * Fired when the main button state has changed\r\n     */\r\n    public onMainButtonStateChangedObservable = new Observable<ExtendedGamepadButton>();\r\n    /**\r\n     * Fired when the secondary button state has changed\r\n     */\r\n    public onSecondaryButtonStateChangedObservable = new Observable<ExtendedGamepadButton>();\r\n    /**\r\n     * Fired when the pad state has changed\r\n     */\r\n    public onPadStateChangedObservable = new Observable<ExtendedGamepadButton>();\r\n    /**\r\n     * Fired when controllers stick values have changed\r\n     */\r\n    public onPadValuesChangedObservable = new Observable<StickValues>();\r\n\r\n    /**\r\n     * Array of button available on the controller\r\n     */\r\n    protected _buttons: Array<MutableGamepadButton>;\r\n\r\n    private _onButtonStateChange: (controlledIndex: number, buttonIndex: number, state: ExtendedGamepadButton) => void;\r\n\r\n    /**\r\n     * Fired when a controller button's state has changed\r\n     * @param callback the callback containing the button that was modified\r\n     */\r\n    public onButtonStateChange(callback: (controlledIndex: number, buttonIndex: number, state: ExtendedGamepadButton) => void) {\r\n        this._onButtonStateChange = callback;\r\n    }\r\n\r\n    /**\r\n     * X and Y axis corresponding to the controllers joystick\r\n     */\r\n    public pad: StickValues = { x: 0, y: 0 };\r\n\r\n    /**\r\n     * 'left' or 'right', see https://w3c.github.io/gamepad/extensions.html#gamepadhand-enum\r\n     */\r\n    public hand: string;\r\n\r\n    /**\r\n     * The default controller model for the controller\r\n     */\r\n    public get defaultModel(): Nullable<AbstractMesh> {\r\n        return this._defaultModel;\r\n    }\r\n\r\n    /**\r\n     * Creates a new WebVRController from a gamepad\r\n     * @param vrGamepad the gamepad that the WebVRController should be created from\r\n     */\r\n    constructor(vrGamepad: any) {\r\n        super(vrGamepad);\r\n        this._buttons = new Array<ExtendedGamepadButton>(vrGamepad.buttons.length);\r\n        this.hand = vrGamepad.hand;\r\n    }\r\n\r\n    /**\r\n     * Updates the state of the controller and mesh based on the current position and rotation of the controller\r\n     */\r\n    public update() {\r\n        super.update();\r\n        for (let index = 0; index < this._buttons.length; index++) {\r\n            this._setButtonValue(this.browserGamepad.buttons[index], this._buttons[index], index);\r\n        }\r\n        if (this.leftStick.x !== this.pad.x || this.leftStick.y !== this.pad.y) {\r\n            this.pad.x = this.leftStick.x;\r\n            this.pad.y = this.leftStick.y;\r\n            this.onPadValuesChangedObservable.notifyObservers(this.pad);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to be called when a button is modified\r\n     */\r\n    protected abstract _handleButtonChange(buttonIdx: number, value: ExtendedGamepadButton, changes: GamepadButtonChanges): void;\r\n\r\n    /**\r\n     * Loads a mesh and attaches it to the controller\r\n     * @param scene the scene the mesh should be added to\r\n     * @param meshLoaded callback for when the mesh has been loaded\r\n     */\r\n    public abstract initControllerMesh(scene: Scene, meshLoaded?: (mesh: AbstractMesh) => void): void;\r\n\r\n    private _setButtonValue(newState: ExtendedGamepadButton, currentState: ExtendedGamepadButton, buttonIndex: number) {\r\n        if (!newState) {\r\n            newState = {\r\n                pressed: false,\r\n                touched: false,\r\n                value: 0,\r\n            };\r\n        }\r\n        if (!currentState) {\r\n            this._buttons[buttonIndex] = {\r\n                pressed: newState.pressed,\r\n                touched: newState.touched,\r\n                value: newState.value,\r\n            };\r\n            return;\r\n        }\r\n        this._checkChanges(newState, currentState);\r\n        if (this._changes.changed) {\r\n            this._onButtonStateChange && this._onButtonStateChange(this.index, buttonIndex, newState);\r\n\r\n            this._handleButtonChange(buttonIndex, newState, this._changes);\r\n        }\r\n        this._buttons[buttonIndex].pressed = newState.pressed;\r\n        this._buttons[buttonIndex].touched = newState.touched;\r\n        // oculus triggers are never 0, thou not touched.\r\n        this._buttons[buttonIndex].value = newState.value < 0.00000001 ? 0 : newState.value;\r\n    }\r\n\r\n    // avoid GC, store state in a tmp object\r\n    private _changes: GamepadButtonChanges = {\r\n        pressChanged: false,\r\n        touchChanged: false,\r\n        valueChanged: false,\r\n        changed: false,\r\n    };\r\n\r\n    private _checkChanges(newState: ExtendedGamepadButton, currentState: ExtendedGamepadButton) {\r\n        this._changes.pressChanged = newState.pressed !== currentState.pressed;\r\n        this._changes.touchChanged = newState.touched !== currentState.touched;\r\n        this._changes.valueChanged = newState.value !== currentState.value;\r\n        this._changes.changed = this._changes.pressChanged || this._changes.touchChanged || this._changes.valueChanged;\r\n        return this._changes;\r\n    }\r\n\r\n    /**\r\n     * Disposes of th webVRController\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this._defaultModel = null;\r\n\r\n        this.onTriggerStateChangedObservable.clear();\r\n        this.onMainButtonStateChangedObservable.clear();\r\n        this.onSecondaryButtonStateChangedObservable.clear();\r\n        this.onPadStateChangedObservable.clear();\r\n        this.onPadValuesChangedObservable.clear();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}