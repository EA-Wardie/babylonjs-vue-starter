{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { InternalTextureSource } from \"../../Materials/Textures/internalTexture.js\";\nimport { Scalar } from \"../../Maths/math.scalar.js\";\nimport * as WebGPUConstants from \"./webgpuConstants.js\";\n/** @hidden */\n\nvar WebGPUHardwareTexture =\n/** @class */\nfunction () {\n  function WebGPUHardwareTexture(existingTexture) {\n    if (existingTexture === void 0) {\n      existingTexture = null;\n    }\n\n    this.format = WebGPUConstants.TextureFormat.RGBA8Unorm;\n    this.textureUsages = 0;\n    this.textureAdditionalUsages = 0;\n    this._webgpuTexture = existingTexture;\n    this._webgpuMSAATexture = null;\n    this.view = null;\n    this.viewForWriting = null;\n  }\n\n  Object.defineProperty(WebGPUHardwareTexture.prototype, \"underlyingResource\", {\n    get: function get() {\n      return this._webgpuTexture;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebGPUHardwareTexture.prototype, \"msaaTexture\", {\n    get: function get() {\n      return this._webgpuMSAATexture;\n    },\n    set: function set(texture) {\n      this._webgpuMSAATexture = texture;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  WebGPUHardwareTexture.prototype.set = function (hardwareTexture) {\n    this._webgpuTexture = hardwareTexture;\n  };\n\n  WebGPUHardwareTexture.prototype.setUsage = function (textureSource, generateMipMaps, isCube, width, height) {\n    generateMipMaps = textureSource === InternalTextureSource.RenderTarget ? false : generateMipMaps;\n    this.createView({\n      format: this.format,\n      dimension: isCube ? WebGPUConstants.TextureViewDimension.Cube : WebGPUConstants.TextureViewDimension.E2d,\n      mipLevelCount: generateMipMaps ? Scalar.ILog2(Math.max(width, height)) + 1 : 1,\n      baseArrayLayer: 0,\n      baseMipLevel: 0,\n      arrayLayerCount: isCube ? 6 : 1,\n      aspect: WebGPUConstants.TextureAspect.All\n    });\n  };\n\n  WebGPUHardwareTexture.prototype.createView = function (descriptor, createViewForWriting) {\n    if (createViewForWriting === void 0) {\n      createViewForWriting = false;\n    }\n\n    this.view = this._webgpuTexture.createView(descriptor);\n\n    if (createViewForWriting && descriptor) {\n      var saveNumMipMaps = descriptor.mipLevelCount;\n      descriptor.mipLevelCount = 1;\n      this.viewForWriting = this._webgpuTexture.createView(descriptor);\n      descriptor.mipLevelCount = saveNumMipMaps;\n    }\n  };\n\n  WebGPUHardwareTexture.prototype.reset = function () {\n    this._webgpuTexture = null;\n    this._webgpuMSAATexture = null;\n    this.view = null;\n    this.viewForWriting = null;\n  };\n\n  WebGPUHardwareTexture.prototype.release = function () {\n    var _a, _b, _c;\n\n    (_a = this._webgpuTexture) === null || _a === void 0 ? void 0 : _a.destroy();\n    (_b = this._webgpuMSAATexture) === null || _b === void 0 ? void 0 : _b.destroy();\n    (_c = this._copyInvertYTempTexture) === null || _c === void 0 ? void 0 : _c.destroy();\n    this.reset();\n  };\n\n  return WebGPUHardwareTexture;\n}();\n\nexport { WebGPUHardwareTexture };","map":{"version":3,"mappings":"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","names":["InternalTextureSource","Scalar","WebGPUConstants","existingTexture","TextureFormat","RGBA8Unorm","_webgpuTexture","_webgpuMSAATexture","view","viewForWriting","Object","WebGPUHardwareTexture","texture","hardwareTexture","textureSource","generateMipMaps","isCube","width","height","RenderTarget","createView","format","dimension","TextureViewDimension","Cube","E2d","mipLevelCount","ILog2","Math","max","baseArrayLayer","baseMipLevel","arrayLayerCount","aspect","TextureAspect","All","descriptor","createViewForWriting","saveNumMipMaps","_a","destroy","_b","_copyInvertYTempTexture","_c","reset"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/WebGPU/webgpuHardwareTexture.ts"],"sourcesContent":["import type { HardwareTextureWrapper } from \"../../Materials/Textures/hardwareTextureWrapper\";\r\nimport { InternalTextureSource } from \"../../Materials/Textures/internalTexture\";\r\nimport { Scalar } from \"../../Maths/math.scalar\";\r\nimport type { Nullable } from \"../../types\";\r\nimport * as WebGPUConstants from \"./webgpuConstants\";\r\n\r\ndeclare type WebGPUBundleList = import(\"./webgpuBundleList\").WebGPUBundleList;\r\n\r\n/** @hidden */\r\nexport class WebGPUHardwareTexture implements HardwareTextureWrapper {\r\n    /**\r\n     * List of bundles collected in the snapshot rendering mode when the texture is a render target texture\r\n     * The index in this array is the current layer we are rendering into\r\n     * @hidden\r\n     */\r\n    public _bundleLists: WebGPUBundleList[];\r\n    /**\r\n     * Current layer we are rendering into when in snapshot rendering mode (if the texture is a render target texture)\r\n     * @hidden\r\n     */\r\n    public _currentLayer: number;\r\n\r\n    /**\r\n     * Cache of RenderPassDescriptor and BindGroup used when generating mipmaps (see WebGPUTextureHelper.generateMipmaps)\r\n     * @hidden\r\n     */\r\n    public _mipmapGenRenderPassDescr: GPURenderPassDescriptor[][];\r\n    /** @hidden */\r\n    public _mipmapGenBindGroup: GPUBindGroup[][];\r\n\r\n    /**\r\n     * Cache for the invertYPreMultiplyAlpha function (see WebGPUTextureHelper)\r\n     * @hidden\r\n     */\r\n    public _copyInvertYTempTexture?: GPUTexture;\r\n    /** @hidden */\r\n    public _copyInvertYRenderPassDescr: GPURenderPassDescriptor;\r\n    /** @hidden */\r\n    public _copyInvertYBindGroup: GPUBindGroup;\r\n    /** @hidden */\r\n    public _copyInvertYBindGroupWithOfst: GPUBindGroup;\r\n\r\n    private _webgpuTexture: Nullable<GPUTexture>;\r\n    private _webgpuMSAATexture: Nullable<GPUTexture>;\r\n\r\n    public get underlyingResource(): Nullable<GPUTexture> {\r\n        return this._webgpuTexture;\r\n    }\r\n\r\n    public get msaaTexture(): Nullable<GPUTexture> {\r\n        return this._webgpuMSAATexture;\r\n    }\r\n\r\n    public set msaaTexture(texture: Nullable<GPUTexture>) {\r\n        this._webgpuMSAATexture = texture;\r\n    }\r\n\r\n    public view: Nullable<GPUTextureView>;\r\n    public viewForWriting: Nullable<GPUTextureView>;\r\n    public format: GPUTextureFormat = WebGPUConstants.TextureFormat.RGBA8Unorm;\r\n    public textureUsages = 0;\r\n    public textureAdditionalUsages = 0;\r\n\r\n    constructor(existingTexture: Nullable<GPUTexture> = null) {\r\n        this._webgpuTexture = existingTexture;\r\n        this._webgpuMSAATexture = null;\r\n        this.view = null;\r\n        this.viewForWriting = null;\r\n    }\r\n\r\n    public set(hardwareTexture: GPUTexture): void {\r\n        this._webgpuTexture = hardwareTexture;\r\n    }\r\n\r\n    public setUsage(textureSource: number, generateMipMaps: boolean, isCube: boolean, width: number, height: number): void {\r\n        generateMipMaps = textureSource === InternalTextureSource.RenderTarget ? false : generateMipMaps;\r\n\r\n        this.createView({\r\n            format: this.format,\r\n            dimension: isCube ? WebGPUConstants.TextureViewDimension.Cube : WebGPUConstants.TextureViewDimension.E2d,\r\n            mipLevelCount: generateMipMaps ? Scalar.ILog2(Math.max(width, height)) + 1 : 1,\r\n            baseArrayLayer: 0,\r\n            baseMipLevel: 0,\r\n            arrayLayerCount: isCube ? 6 : 1,\r\n            aspect: WebGPUConstants.TextureAspect.All,\r\n        });\r\n    }\r\n\r\n    public createView(descriptor?: GPUTextureViewDescriptor, createViewForWriting = false): void {\r\n        this.view = this._webgpuTexture!.createView(descriptor);\r\n        if (createViewForWriting && descriptor) {\r\n            const saveNumMipMaps = descriptor.mipLevelCount;\r\n            descriptor.mipLevelCount = 1;\r\n            this.viewForWriting = this._webgpuTexture!.createView(descriptor);\r\n            descriptor.mipLevelCount = saveNumMipMaps;\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        this._webgpuTexture = null;\r\n        this._webgpuMSAATexture = null;\r\n        this.view = null;\r\n        this.viewForWriting = null;\r\n    }\r\n\r\n    public release(): void {\r\n        this._webgpuTexture?.destroy();\r\n        this._webgpuMSAATexture?.destroy();\r\n        this._copyInvertYTempTexture?.destroy();\r\n        this.reset();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}