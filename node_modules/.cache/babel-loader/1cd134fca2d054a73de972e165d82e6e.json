{"ast":null,"code":"import \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport { __decorate, __extends } from \"tslib\";\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { Logger } from \"../../../Misc/logger.js\";\nimport { serialize, SerializationHelper } from \"../../../Misc/decorators.js\";\nimport { Vector3, TmpVectors } from \"../../../Maths/math.vector.js\";\nimport { Camera } from \"../../../Cameras/camera.js\";\nimport { Texture } from \"../../../Materials/Textures/texture.js\";\nimport { DynamicTexture } from \"../../../Materials/Textures/dynamicTexture.js\";\nimport { PostProcess } from \"../../../PostProcesses/postProcess.js\";\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline.js\";\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect.js\";\nimport { PassPostProcess } from \"../../../PostProcesses/passPostProcess.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { EngineStore } from \"../../../Engines/engineStore.js\";\nimport { SSAO2Configuration } from \"../../../Rendering/ssao2Configuration.js\";\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent.js\";\nimport \"../../../Shaders/ssao2.fragment.js\";\nimport \"../../../Shaders/ssaoCombine.fragment.js\";\n/**\n * Render pipeline to produce ssao effect\n */\n\nvar SSAO2RenderingPipeline =\n/** @class */\nfunction (_super) {\n  __extends(SSAO2RenderingPipeline, _super);\n  /**\n   * @constructor\n   * @param name The rendering pipeline name\n   * @param scene The scene linked to this pipeline\n   * @param ratio The size of the postprocesses. Can be a number shared between passes or an object for more precision: { ssaoRatio: 0.5, blurRatio: 1.0 }\n   * @param cameras The array of cameras that the rendering pipeline will be attached to\n   * @param forceGeometryBuffer Set to true if you want to use the legacy geometry buffer renderer\n   * @param textureType The texture type used by the different post processes created by SSAO (default: 0)\n   */\n\n\n  function SSAO2RenderingPipeline(name, scene, ratio, cameras, forceGeometryBuffer, textureType) {\n    if (forceGeometryBuffer === void 0) {\n      forceGeometryBuffer = false;\n    }\n\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    var _this = _super.call(this, scene.getEngine(), name) || this; // Members\n\n    /**\n     * @ignore\n     * The PassPostProcess id in the pipeline that contains the original scene color\n     */\n\n\n    _this.SSAOOriginalSceneColorEffect = \"SSAOOriginalSceneColorEffect\";\n    /**\n     * @ignore\n     * The SSAO PostProcess id in the pipeline\n     */\n\n    _this.SSAORenderEffect = \"SSAORenderEffect\";\n    /**\n     * @ignore\n     * The horizontal blur PostProcess id in the pipeline\n     */\n\n    _this.SSAOBlurHRenderEffect = \"SSAOBlurHRenderEffect\";\n    /**\n     * @ignore\n     * The vertical blur PostProcess id in the pipeline\n     */\n\n    _this.SSAOBlurVRenderEffect = \"SSAOBlurVRenderEffect\";\n    /**\n     * @ignore\n     * The PostProcess id in the pipeline that combines the SSAO-Blur output with the original scene color (SSAOOriginalSceneColorEffect)\n     */\n\n    _this.SSAOCombineRenderEffect = \"SSAOCombineRenderEffect\";\n    /**\n     * The output strength of the SSAO post-process. Default value is 1.0.\n     */\n\n    _this.totalStrength = 1.0;\n    /**\n     * Maximum depth value to still render AO. A smooth falloff makes the dimming more natural, so there will be no abrupt shading change.\n     */\n\n    _this.maxZ = 100.0;\n    /**\n     * In order to save performances, SSAO radius is clamped on close geometry. This ratio changes by how much\n     */\n\n    _this.minZAspect = 0.2;\n    _this._samples = 8;\n    _this._textureSamples = 1;\n    /**\n     * Force rendering the geometry through geometry buffer\n     */\n\n    _this._forceGeometryBuffer = false;\n    _this._expensiveBlur = true;\n    /**\n     * The radius around the analyzed pixel used by the SSAO post-process. Default value is 2.0\n     */\n\n    _this.radius = 2.0;\n    /**\n     * The base color of the SSAO post-process\n     * The final result is \"base + ssao\" between [0, 1]\n     */\n\n    _this.base = 0;\n    _this._bits = new Uint32Array(1);\n    _this._scene = scene;\n    _this._ratio = ratio;\n    _this._forceGeometryBuffer = forceGeometryBuffer;\n\n    if (!_this.isSupported) {\n      Logger.Error(\"The current engine does not support SSAO 2.\");\n      return _this;\n    }\n\n    var ssaoRatio = _this._ratio.ssaoRatio || ratio;\n    var blurRatio = _this._ratio.blurRatio || ratio; // Set up assets\n\n    if (_this._forceGeometryBuffer) {\n      scene.enableGeometryBufferRenderer();\n    } else {\n      scene.enablePrePassRenderer();\n    }\n\n    _this._createRandomTexture();\n\n    _this._originalColorPostProcess = new PassPostProcess(\"SSAOOriginalSceneColor\", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), undefined, textureType);\n    _this._originalColorPostProcess.samples = _this.textureSamples;\n\n    _this._createSSAOPostProcess(1.0, textureType);\n\n    _this._createBlurPostProcess(ssaoRatio, blurRatio, textureType);\n\n    _this._createSSAOCombinePostProcess(blurRatio, textureType); // Set up pipeline\n\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOOriginalSceneColorEffect, function () {\n      return _this._originalColorPostProcess;\n    }, true));\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAORenderEffect, function () {\n      return _this._ssaoPostProcess;\n    }, true));\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOBlurHRenderEffect, function () {\n      return _this._blurHPostProcess;\n    }, true));\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOBlurVRenderEffect, function () {\n      return _this._blurVPostProcess;\n    }, true));\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOCombineRenderEffect, function () {\n      return _this._ssaoCombinePostProcess;\n    }, true)); // Finish\n\n\n    scene.postProcessRenderPipelineManager.addPipeline(_this);\n\n    if (cameras) {\n      scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(SSAO2RenderingPipeline.prototype, \"samples\", {\n    get: function get() {\n      return this._samples;\n    },\n\n    /**\n     * Number of samples used for the SSAO calculations. Default value is 8\n     */\n    set: function set(n) {\n      this._samples = n;\n\n      this._ssaoPostProcess.updateEffect(this._getDefinesForSSAO());\n\n      this._sampleSphere = this._generateHemisphere();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SSAO2RenderingPipeline.prototype, \"textureSamples\", {\n    get: function get() {\n      return this._textureSamples;\n    },\n\n    /**\n     * Number of samples to use for antialiasing\n     */\n    set: function set(n) {\n      this._textureSamples = n;\n\n      if (this._prePassRenderer) {\n        this._prePassRenderer.samples = n;\n      } else {\n        this._originalColorPostProcess.samples = n;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SSAO2RenderingPipeline.prototype, \"_geometryBufferRenderer\", {\n    get: function get() {\n      if (!this._forceGeometryBuffer) {\n        return null;\n      }\n\n      return this._scene.geometryBufferRenderer;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SSAO2RenderingPipeline.prototype, \"_prePassRenderer\", {\n    get: function get() {\n      if (this._forceGeometryBuffer) {\n        return null;\n      }\n\n      return this._scene.prePassRenderer;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SSAO2RenderingPipeline.prototype, \"expensiveBlur\", {\n    get: function get() {\n      return this._expensiveBlur;\n    },\n\n    /**\n     * If bilateral blur should be used\n     */\n    set: function set(b) {\n      this._blurHPostProcess.updateEffect(\"#define BILATERAL_BLUR\\n#define BILATERAL_BLUR_H\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (b ? \"1\" : \"0\") + \"\\n\", null, [\"textureSampler\", \"depthSampler\"]);\n\n      this._blurVPostProcess.updateEffect(\"#define BILATERAL_BLUR\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (b ? \"1\" : \"0\") + \"\\n\", null, [\"textureSampler\", \"depthSampler\"]);\n\n      this._expensiveBlur = b;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SSAO2RenderingPipeline, \"IsSupported\", {\n    /**\n     *  Support test.\n     */\n    get: function get() {\n      var engine = EngineStore.LastCreatedEngine;\n\n      if (!engine) {\n        return false;\n      }\n\n      return engine._features.supportSSAO2;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SSAO2RenderingPipeline.prototype, \"scene\", {\n    /**\n     * Gets active scene\n     */\n    get: function get() {\n      return this._scene;\n    },\n    enumerable: false,\n    configurable: true\n  }); // Public Methods\n\n  /**\n   * Get the class name\n   * @returns \"SSAO2RenderingPipeline\"\n   */\n\n  SSAO2RenderingPipeline.prototype.getClassName = function () {\n    return \"SSAO2RenderingPipeline\";\n  };\n  /**\n   * Removes the internal pipeline assets and detaches the pipeline from the scene cameras\n   * @param disableGeometryBufferRenderer\n   */\n\n\n  SSAO2RenderingPipeline.prototype.dispose = function (disableGeometryBufferRenderer) {\n    if (disableGeometryBufferRenderer === void 0) {\n      disableGeometryBufferRenderer = false;\n    }\n\n    for (var i = 0; i < this._scene.cameras.length; i++) {\n      var camera = this._scene.cameras[i];\n\n      this._originalColorPostProcess.dispose(camera);\n\n      this._ssaoPostProcess.dispose(camera);\n\n      this._blurHPostProcess.dispose(camera);\n\n      this._blurVPostProcess.dispose(camera);\n\n      this._ssaoCombinePostProcess.dispose(camera);\n    }\n\n    this._randomTexture.dispose();\n\n    if (disableGeometryBufferRenderer) {\n      this._scene.disableGeometryBufferRenderer();\n    }\n\n    this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\n\n    _super.prototype.dispose.call(this);\n  }; // Private Methods\n\n\n  SSAO2RenderingPipeline.prototype._createBlurPostProcess = function (ssaoRatio, blurRatio, textureType) {\n    var _this = this;\n\n    this._samplerOffsets = [];\n    var expensive = this.expensiveBlur;\n\n    for (var i = -8; i < 8; i++) {\n      this._samplerOffsets.push(i * 2 + 0.5);\n    }\n\n    this._blurHPostProcess = new PostProcess(\"BlurH\", \"ssao2\", [\"outSize\", \"samplerOffsets\", \"near\", \"far\", \"radius\"], [\"depthSampler\"], ssaoRatio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, \"#define BILATERAL_BLUR\\n#define BILATERAL_BLUR_H\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (expensive ? \"1\" : \"0\") + \"\\n\", textureType);\n\n    this._blurHPostProcess.onApply = function (effect) {\n      if (!_this._scene.activeCamera) {\n        return;\n      }\n\n      effect.setFloat(\"outSize\", _this._ssaoCombinePostProcess.width > 0 ? _this._ssaoCombinePostProcess.width : _this._originalColorPostProcess.width);\n      effect.setFloat(\"near\", _this._scene.activeCamera.minZ);\n      effect.setFloat(\"far\", _this._scene.activeCamera.maxZ);\n      effect.setFloat(\"radius\", _this.radius);\n\n      if (_this._geometryBufferRenderer) {\n        effect.setTexture(\"depthSampler\", _this._geometryBufferRenderer.getGBuffer().textures[0]);\n      } else if (_this._prePassRenderer) {\n        effect.setTexture(\"depthSampler\", _this._prePassRenderer.getRenderTarget().textures[_this._prePassRenderer.getIndex(5)]);\n      }\n\n      effect.setArray(\"samplerOffsets\", _this._samplerOffsets);\n    };\n\n    this._blurVPostProcess = new PostProcess(\"BlurV\", \"ssao2\", [\"outSize\", \"samplerOffsets\", \"near\", \"far\", \"radius\"], [\"depthSampler\"], blurRatio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, \"#define BILATERAL_BLUR\\n#define BILATERAL_BLUR_V\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (expensive ? \"1\" : \"0\") + \"\\n\", textureType);\n\n    this._blurVPostProcess.onApply = function (effect) {\n      if (!_this._scene.activeCamera) {\n        return;\n      }\n\n      effect.setFloat(\"outSize\", _this._ssaoCombinePostProcess.height > 0 ? _this._ssaoCombinePostProcess.height : _this._originalColorPostProcess.height);\n      effect.setFloat(\"near\", _this._scene.activeCamera.minZ);\n      effect.setFloat(\"far\", _this._scene.activeCamera.maxZ);\n      effect.setFloat(\"radius\", _this.radius);\n\n      if (_this._geometryBufferRenderer) {\n        effect.setTexture(\"depthSampler\", _this._geometryBufferRenderer.getGBuffer().textures[0]);\n      } else if (_this._prePassRenderer) {\n        effect.setTexture(\"depthSampler\", _this._prePassRenderer.getRenderTarget().textures[_this._prePassRenderer.getIndex(5)]);\n      }\n\n      effect.setArray(\"samplerOffsets\", _this._samplerOffsets);\n    };\n\n    this._blurHPostProcess.samples = this.textureSamples;\n    this._blurVPostProcess.samples = this.textureSamples;\n  };\n  /** @hidden */\n\n\n  SSAO2RenderingPipeline.prototype._rebuild = function () {\n    _super.prototype._rebuild.call(this);\n  }; //Van der Corput radical inverse\n\n\n  SSAO2RenderingPipeline.prototype._radicalInverse_VdC = function (i) {\n    this._bits[0] = i;\n    this._bits[0] = (this._bits[0] << 16 | this._bits[0] >> 16) >>> 0;\n    this._bits[0] = (this._bits[0] & 0x55555555) << 1 | (this._bits[0] & 0xaaaaaaaa) >>> 1 >>> 0;\n    this._bits[0] = (this._bits[0] & 0x33333333) << 2 | (this._bits[0] & 0xcccccccc) >>> 2 >>> 0;\n    this._bits[0] = (this._bits[0] & 0x0f0f0f0f) << 4 | (this._bits[0] & 0xf0f0f0f0) >>> 4 >>> 0;\n    this._bits[0] = (this._bits[0] & 0x00ff00ff) << 8 | (this._bits[0] & 0xff00ff00) >>> 8 >>> 0;\n    return this._bits[0] * 2.3283064365386963e-10; // / 0x100000000 or / 4294967296\n  };\n\n  SSAO2RenderingPipeline.prototype._hammersley = function (i, n) {\n    return [i / n, this._radicalInverse_VdC(i)];\n  };\n\n  SSAO2RenderingPipeline.prototype._hemisphereSample_uniform = function (u, v) {\n    var phi = v * 2.0 * Math.PI; // rejecting samples that are close to tangent plane to avoid z-fighting artifacts\n\n    var cosTheta = 1.0 - (u * 0.85 + 0.15);\n    var sinTheta = Math.sqrt(1.0 - cosTheta * cosTheta);\n    return new Vector3(Math.cos(phi) * sinTheta, Math.sin(phi) * sinTheta, cosTheta);\n  };\n\n  SSAO2RenderingPipeline.prototype._generateHemisphere = function () {\n    var numSamples = this.samples;\n    var result = [];\n    var vector;\n    var i = 0;\n\n    while (i < numSamples) {\n      if (numSamples < 16) {\n        vector = this._hemisphereSample_uniform(Math.random(), Math.random());\n      } else {\n        var rand = this._hammersley(i, numSamples);\n\n        vector = this._hemisphereSample_uniform(rand[0], rand[1]);\n      }\n\n      result.push(vector.x, vector.y, vector.z);\n      i++;\n    }\n\n    return result;\n  };\n\n  SSAO2RenderingPipeline.prototype._getDefinesForSSAO = function () {\n    var defines = \"#define SAMPLES \" + this.samples + \"\\n#define SSAO\";\n    return defines;\n  };\n\n  SSAO2RenderingPipeline.prototype._createSSAOPostProcess = function (ratio, textureType) {\n    var _this = this;\n\n    this._sampleSphere = this._generateHemisphere();\n\n    var defines = this._getDefinesForSSAO();\n\n    var samplers = [\"randomSampler\", \"depthSampler\", \"normalSampler\"];\n    this._ssaoPostProcess = new PostProcess(\"ssao2\", \"ssao2\", [\"sampleSphere\", \"samplesFactor\", \"randTextureTiles\", \"totalStrength\", \"radius\", \"base\", \"range\", \"projection\", \"near\", \"far\", \"texelSize\", \"xViewport\", \"yViewport\", \"maxZ\", \"minZAspect\", \"depthProjection\"], samplers, ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, defines, textureType);\n\n    this._ssaoPostProcess.onApply = function (effect) {\n      var _a, _b, _c, _d;\n\n      if (!_this._scene.activeCamera) {\n        return;\n      }\n\n      effect.setArray3(\"sampleSphere\", _this._sampleSphere);\n      effect.setFloat(\"randTextureTiles\", 32.0);\n      effect.setFloat(\"samplesFactor\", 1 / _this.samples);\n      effect.setFloat(\"totalStrength\", _this.totalStrength);\n      effect.setFloat2(\"texelSize\", 1 / _this._ssaoPostProcess.width, 1 / _this._ssaoPostProcess.height);\n      effect.setFloat(\"radius\", _this.radius);\n      effect.setFloat(\"maxZ\", _this.maxZ);\n      effect.setFloat(\"minZAspect\", _this.minZAspect);\n      effect.setFloat(\"base\", _this.base);\n      effect.setFloat(\"near\", _this._scene.activeCamera.minZ);\n      effect.setFloat(\"far\", _this._scene.activeCamera.maxZ);\n\n      if (_this._scene.activeCamera.mode === Camera.PERSPECTIVE_CAMERA) {\n        effect.setMatrix3x3(\"depthProjection\", SSAO2RenderingPipeline.PERSPECTIVE_DEPTH_PROJECTION);\n        effect.setFloat(\"xViewport\", Math.tan(_this._scene.activeCamera.fov / 2) * _this._scene.getEngine().getAspectRatio(_this._scene.activeCamera, true));\n        effect.setFloat(\"yViewport\", Math.tan(_this._scene.activeCamera.fov / 2));\n      } else {\n        var halfWidth = _this._scene.getEngine().getRenderWidth() / 2.0;\n        var halfHeight = _this._scene.getEngine().getRenderHeight() / 2.0;\n        var orthoLeft = (_a = _this._scene.activeCamera.orthoLeft) !== null && _a !== void 0 ? _a : -halfWidth;\n        var orthoRight = (_b = _this._scene.activeCamera.orthoRight) !== null && _b !== void 0 ? _b : halfWidth;\n        var orthoBottom = (_c = _this._scene.activeCamera.orthoBottom) !== null && _c !== void 0 ? _c : -halfHeight;\n        var orthoTop = (_d = _this._scene.activeCamera.orthoTop) !== null && _d !== void 0 ? _d : halfHeight;\n        effect.setMatrix3x3(\"depthProjection\", SSAO2RenderingPipeline.ORTHO_DEPTH_PROJECTION);\n        effect.setFloat(\"xViewport\", (orthoRight - orthoLeft) * 0.5);\n        effect.setFloat(\"yViewport\", (orthoTop - orthoBottom) * 0.5);\n      }\n\n      effect.setMatrix(\"projection\", _this._scene.getProjectionMatrix());\n\n      if (_this._geometryBufferRenderer) {\n        effect.setTexture(\"depthSampler\", _this._geometryBufferRenderer.getGBuffer().textures[0]);\n        effect.setTexture(\"normalSampler\", _this._geometryBufferRenderer.getGBuffer().textures[1]);\n      } else if (_this._prePassRenderer) {\n        effect.setTexture(\"depthSampler\", _this._prePassRenderer.getRenderTarget().textures[_this._prePassRenderer.getIndex(5)]);\n        effect.setTexture(\"normalSampler\", _this._prePassRenderer.getRenderTarget().textures[_this._prePassRenderer.getIndex(6)]);\n      }\n\n      effect.setTexture(\"randomSampler\", _this._randomTexture);\n    };\n\n    this._ssaoPostProcess.samples = this.textureSamples;\n  };\n\n  SSAO2RenderingPipeline.prototype._createSSAOCombinePostProcess = function (ratio, textureType) {\n    var _this = this;\n\n    this._ssaoCombinePostProcess = new PostProcess(\"ssaoCombine\", \"ssaoCombine\", [], [\"originalColor\", \"viewport\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, undefined, textureType);\n\n    this._ssaoCombinePostProcess.onApply = function (effect) {\n      var viewport = _this._scene.activeCamera.viewport;\n      effect.setVector4(\"viewport\", TmpVectors.Vector4[0].copyFromFloats(viewport.x, viewport.y, viewport.width, viewport.height));\n      effect.setTextureFromPostProcessOutput(\"originalColor\", _this._originalColorPostProcess);\n    };\n\n    this._ssaoCombinePostProcess.samples = this.textureSamples;\n\n    if (!this._forceGeometryBuffer) {\n      this._ssaoCombinePostProcess._prePassEffectConfiguration = new SSAO2Configuration();\n    }\n  };\n\n  SSAO2RenderingPipeline.prototype._createRandomTexture = function () {\n    var size = 128;\n    this._randomTexture = new DynamicTexture(\"SSAORandomTexture\", size, this._scene, false, Texture.TRILINEAR_SAMPLINGMODE);\n    this._randomTexture.wrapU = Texture.WRAP_ADDRESSMODE;\n    this._randomTexture.wrapV = Texture.WRAP_ADDRESSMODE;\n\n    var context = this._randomTexture.getContext();\n\n    var rand = function rand(min, max) {\n      return Math.random() * (max - min) + min;\n    };\n\n    var randVector = Vector3.Zero();\n\n    for (var x = 0; x < size; x++) {\n      for (var y = 0; y < size; y++) {\n        randVector.x = rand(0.0, 1.0);\n        randVector.y = rand(0.0, 1.0);\n        randVector.z = 0.0;\n        randVector.normalize();\n        randVector.scaleInPlace(255);\n        randVector.x = Math.floor(randVector.x);\n        randVector.y = Math.floor(randVector.y);\n        context.fillStyle = \"rgb(\" + randVector.x + \", \" + randVector.y + \", \" + randVector.z + \")\";\n        context.fillRect(x, y, 1, 1);\n      }\n    }\n\n    this._randomTexture.update(false);\n  };\n  /**\n   * Serialize the rendering pipeline (Used when exporting)\n   * @returns the serialized object\n   */\n\n\n  SSAO2RenderingPipeline.prototype.serialize = function () {\n    var serializationObject = SerializationHelper.Serialize(this);\n    serializationObject.customType = \"SSAO2RenderingPipeline\";\n    return serializationObject;\n  };\n  /**\n   * Parse the serialized pipeline\n   * @param source Source pipeline.\n   * @param scene The scene to load the pipeline to.\n   * @param rootUrl The URL of the serialized pipeline.\n   * @returns An instantiated pipeline from the serialized object.\n   */\n\n\n  SSAO2RenderingPipeline.Parse = function (source, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new SSAO2RenderingPipeline(source._name, scene, source._ratio);\n    }, source, scene, rootUrl);\n  };\n\n  SSAO2RenderingPipeline.ORTHO_DEPTH_PROJECTION = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n  SSAO2RenderingPipeline.PERSPECTIVE_DEPTH_PROJECTION = [0, 0, 0, 0, 0, 0, 1, 1, 1];\n\n  __decorate([serialize()], SSAO2RenderingPipeline.prototype, \"totalStrength\", void 0);\n\n  __decorate([serialize()], SSAO2RenderingPipeline.prototype, \"maxZ\", void 0);\n\n  __decorate([serialize()], SSAO2RenderingPipeline.prototype, \"minZAspect\", void 0);\n\n  __decorate([serialize(\"samples\")], SSAO2RenderingPipeline.prototype, \"_samples\", void 0);\n\n  __decorate([serialize(\"textureSamples\")], SSAO2RenderingPipeline.prototype, \"_textureSamples\", void 0);\n\n  __decorate([serialize()], SSAO2RenderingPipeline.prototype, \"_ratio\", void 0);\n\n  __decorate([serialize(\"expensiveBlur\")], SSAO2RenderingPipeline.prototype, \"_expensiveBlur\", void 0);\n\n  __decorate([serialize()], SSAO2RenderingPipeline.prototype, \"radius\", void 0);\n\n  __decorate([serialize()], SSAO2RenderingPipeline.prototype, \"base\", void 0);\n\n  return SSAO2RenderingPipeline;\n}(PostProcessRenderPipeline);\n\nexport { SSAO2RenderingPipeline };\nRegisterClass(\"BABYLON.SSAO2RenderingPipeline\", SSAO2RenderingPipeline);","map":{"version":3,"mappings":"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","names":["Logger","serialize","SerializationHelper","Vector3","TmpVectors","Camera","Texture","DynamicTexture","PostProcess","PostProcessRenderPipeline","PostProcessRenderEffect","PassPostProcess","RegisterClass","EngineStore","SSAO2Configuration","__extends","name","scene","ratio","cameras","forceGeometryBuffer","textureType","_super","getEngine","_this","Uint32Array","_scene","_ratio","_forceGeometryBuffer","isSupported","Error","ssaoRatio","blurRatio","enableGeometryBufferRenderer","enablePrePassRenderer","_createRandomTexture","_originalColorPostProcess","BILINEAR_SAMPLINGMODE","undefined","samples","textureSamples","_createSSAOPostProcess","_createBlurPostProcess","_createSSAOCombinePostProcess","addEffect","SSAOOriginalSceneColorEffect","SSAORenderEffect","_ssaoPostProcess","SSAOBlurHRenderEffect","_blurHPostProcess","SSAOBlurVRenderEffect","_blurVPostProcess","SSAOCombineRenderEffect","_ssaoCombinePostProcess","postProcessRenderPipelineManager","addPipeline","attachCamerasToRenderPipeline","Object","SSAO2RenderingPipeline","_samples","n","updateEffect","_getDefinesForSSAO","_sampleSphere","_generateHemisphere","_textureSamples","_prePassRenderer","geometryBufferRenderer","prePassRenderer","_expensiveBlur","b","engine","LastCreatedEngine","_features","supportSSAO2","disableGeometryBufferRenderer","i","length","camera","dispose","_randomTexture","detachCamerasFromRenderPipeline","_name","call","_samplerOffsets","expensive","expensiveBlur","push","TRILINEAR_SAMPLINGMODE","onApply","effect","activeCamera","setFloat","width","minZ","maxZ","radius","_geometryBufferRenderer","setTexture","getGBuffer","textures","getRenderTarget","getIndex","setArray","height","_rebuild","_bits","_radicalInverse_VdC","u","v","phi","Math","PI","cosTheta","sinTheta","sqrt","cos","sin","numSamples","result","vector","_hemisphereSample_uniform","random","rand","_hammersley","x","y","z","defines","samplers","setArray3","totalStrength","setFloat2","minZAspect","base","mode","PERSPECTIVE_CAMERA","setMatrix3x3","PERSPECTIVE_DEPTH_PROJECTION","tan","fov","getAspectRatio","halfWidth","getRenderWidth","halfHeight","getRenderHeight","orthoLeft","_a","orthoRight","_b","orthoBottom","_c","orthoTop","_d","ORTHO_DEPTH_PROJECTION","setMatrix","getProjectionMatrix","viewport","setVector4","Vector4","copyFromFloats","setTextureFromPostProcessOutput","_prePassEffectConfiguration","size","wrapU","WRAP_ADDRESSMODE","wrapV","context","getContext","min","max","randVector","Zero","normalize","scaleInPlace","floor","fillStyle","fillRect","update","serializationObject","Serialize","customType","source","rootUrl","Parse","__decorate"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/PostProcesses/RenderPipeline/Pipelines/ssao2RenderingPipeline.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { Logger } from \"../../../Misc/logger\";\r\nimport { serialize, SerializationHelper } from \"../../../Misc/decorators\";\r\nimport { Vector3, TmpVectors } from \"../../../Maths/math.vector\";\r\nimport { Camera } from \"../../../Cameras/camera\";\r\nimport type { Effect } from \"../../../Materials/effect\";\r\nimport { Texture } from \"../../../Materials/Textures/texture\";\r\nimport { DynamicTexture } from \"../../../Materials/Textures/dynamicTexture\";\r\nimport { PostProcess } from \"../../../PostProcesses/postProcess\";\r\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline\";\r\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect\";\r\nimport { PassPostProcess } from \"../../../PostProcesses/passPostProcess\";\r\nimport type { Scene } from \"../../../scene\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { EngineStore } from \"../../../Engines/engineStore\";\r\nimport { SSAO2Configuration } from \"../../../Rendering/ssao2Configuration\";\r\nimport type { PrePassRenderer } from \"../../../Rendering/prePassRenderer\";\r\nimport type { GeometryBufferRenderer } from \"../../../Rendering/geometryBufferRenderer\";\r\nimport { Constants } from \"../../../Engines/constants\";\r\nimport type { Nullable } from \"../../../types\";\r\n\r\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent\";\r\n\r\nimport \"../../../Shaders/ssao2.fragment\";\r\nimport \"../../../Shaders/ssaoCombine.fragment\";\r\n\r\n/**\r\n * Render pipeline to produce ssao effect\r\n */\r\nexport class SSAO2RenderingPipeline extends PostProcessRenderPipeline {\r\n    // Members\r\n\r\n    /**\r\n     * @ignore\r\n     * The PassPostProcess id in the pipeline that contains the original scene color\r\n     */\r\n    public SSAOOriginalSceneColorEffect: string = \"SSAOOriginalSceneColorEffect\";\r\n    /**\r\n     * @ignore\r\n     * The SSAO PostProcess id in the pipeline\r\n     */\r\n    public SSAORenderEffect: string = \"SSAORenderEffect\";\r\n    /**\r\n     * @ignore\r\n     * The horizontal blur PostProcess id in the pipeline\r\n     */\r\n    public SSAOBlurHRenderEffect: string = \"SSAOBlurHRenderEffect\";\r\n    /**\r\n     * @ignore\r\n     * The vertical blur PostProcess id in the pipeline\r\n     */\r\n    public SSAOBlurVRenderEffect: string = \"SSAOBlurVRenderEffect\";\r\n    /**\r\n     * @ignore\r\n     * The PostProcess id in the pipeline that combines the SSAO-Blur output with the original scene color (SSAOOriginalSceneColorEffect)\r\n     */\r\n    public SSAOCombineRenderEffect: string = \"SSAOCombineRenderEffect\";\r\n\r\n    /**\r\n     * The output strength of the SSAO post-process. Default value is 1.0.\r\n     */\r\n    @serialize()\r\n    public totalStrength: number = 1.0;\r\n\r\n    /**\r\n     * Maximum depth value to still render AO. A smooth falloff makes the dimming more natural, so there will be no abrupt shading change.\r\n     */\r\n    @serialize()\r\n    public maxZ: number = 100.0;\r\n\r\n    /**\r\n     * In order to save performances, SSAO radius is clamped on close geometry. This ratio changes by how much\r\n     */\r\n    @serialize()\r\n    public minZAspect: number = 0.2;\r\n\r\n    @serialize(\"samples\")\r\n    private _samples: number = 8;\r\n    /**\r\n     * Number of samples used for the SSAO calculations. Default value is 8\r\n     */\r\n    public set samples(n: number) {\r\n        this._samples = n;\r\n        this._ssaoPostProcess.updateEffect(this._getDefinesForSSAO());\r\n        this._sampleSphere = this._generateHemisphere();\r\n    }\r\n    public get samples(): number {\r\n        return this._samples;\r\n    }\r\n\r\n    @serialize(\"textureSamples\")\r\n    private _textureSamples: number = 1;\r\n    /**\r\n     * Number of samples to use for antialiasing\r\n     */\r\n    public set textureSamples(n: number) {\r\n        this._textureSamples = n;\r\n\r\n        if (this._prePassRenderer) {\r\n            this._prePassRenderer.samples = n;\r\n        } else {\r\n            this._originalColorPostProcess.samples = n;\r\n        }\r\n    }\r\n    public get textureSamples(): number {\r\n        return this._textureSamples;\r\n    }\r\n\r\n    /**\r\n     * Force rendering the geometry through geometry buffer\r\n     */\r\n    private _forceGeometryBuffer: boolean = false;\r\n    private get _geometryBufferRenderer(): Nullable<GeometryBufferRenderer> {\r\n        if (!this._forceGeometryBuffer) {\r\n            return null;\r\n        }\r\n        return this._scene.geometryBufferRenderer;\r\n    }\r\n    private get _prePassRenderer(): Nullable<PrePassRenderer> {\r\n        if (this._forceGeometryBuffer) {\r\n            return null;\r\n        }\r\n        return this._scene.prePassRenderer;\r\n    }\r\n    /**\r\n     * Ratio object used for SSAO ratio and blur ratio\r\n     */\r\n    @serialize()\r\n    private _ratio: any;\r\n\r\n    /**\r\n     * Dynamically generated sphere sampler.\r\n     */\r\n    private _sampleSphere: number[];\r\n\r\n    /**\r\n     * Blur filter offsets\r\n     */\r\n    private _samplerOffsets: number[];\r\n\r\n    @serialize(\"expensiveBlur\")\r\n    private _expensiveBlur: boolean = true;\r\n    /**\r\n     * If bilateral blur should be used\r\n     */\r\n    public set expensiveBlur(b: boolean) {\r\n        this._blurHPostProcess.updateEffect(\"#define BILATERAL_BLUR\\n#define BILATERAL_BLUR_H\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (b ? \"1\" : \"0\") + \"\\n\", null, [\r\n            \"textureSampler\",\r\n            \"depthSampler\",\r\n        ]);\r\n        this._blurVPostProcess.updateEffect(\"#define BILATERAL_BLUR\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (b ? \"1\" : \"0\") + \"\\n\", null, [\"textureSampler\", \"depthSampler\"]);\r\n        this._expensiveBlur = b;\r\n    }\r\n\r\n    public get expensiveBlur(): boolean {\r\n        return this._expensiveBlur;\r\n    }\r\n\r\n    /**\r\n     * The radius around the analyzed pixel used by the SSAO post-process. Default value is 2.0\r\n     */\r\n    @serialize()\r\n    public radius: number = 2.0;\r\n\r\n    /**\r\n     * The base color of the SSAO post-process\r\n     * The final result is \"base + ssao\" between [0, 1]\r\n     */\r\n    @serialize()\r\n    public base: number = 0;\r\n\r\n    /**\r\n     *  Support test.\r\n     */\r\n    public static get IsSupported(): boolean {\r\n        const engine = EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            return false;\r\n        }\r\n        return engine._features.supportSSAO2;\r\n    }\r\n\r\n    private _scene: Scene;\r\n    private _randomTexture: DynamicTexture;\r\n    private _originalColorPostProcess: PassPostProcess;\r\n    private _ssaoPostProcess: PostProcess;\r\n    private _blurHPostProcess: PostProcess;\r\n    private _blurVPostProcess: PostProcess;\r\n    private _ssaoCombinePostProcess: PostProcess;\r\n\r\n    /**\r\n     * Gets active scene\r\n     */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * @constructor\r\n     * @param name The rendering pipeline name\r\n     * @param scene The scene linked to this pipeline\r\n     * @param ratio The size of the postprocesses. Can be a number shared between passes or an object for more precision: { ssaoRatio: 0.5, blurRatio: 1.0 }\r\n     * @param cameras The array of cameras that the rendering pipeline will be attached to\r\n     * @param forceGeometryBuffer Set to true if you want to use the legacy geometry buffer renderer\r\n     * @param textureType The texture type used by the different post processes created by SSAO (default: Constants.TEXTURETYPE_UNSIGNED_INT)\r\n     */\r\n    constructor(name: string, scene: Scene, ratio: any, cameras?: Camera[], forceGeometryBuffer = false, textureType = Constants.TEXTURETYPE_UNSIGNED_INT) {\r\n        super(scene.getEngine(), name);\r\n\r\n        this._scene = scene;\r\n        this._ratio = ratio;\r\n        this._forceGeometryBuffer = forceGeometryBuffer;\r\n\r\n        if (!this.isSupported) {\r\n            Logger.Error(\"The current engine does not support SSAO 2.\");\r\n            return;\r\n        }\r\n\r\n        const ssaoRatio = this._ratio.ssaoRatio || ratio;\r\n        const blurRatio = this._ratio.blurRatio || ratio;\r\n\r\n        // Set up assets\r\n        if (this._forceGeometryBuffer) {\r\n            scene.enableGeometryBufferRenderer();\r\n        } else {\r\n            scene.enablePrePassRenderer();\r\n        }\r\n\r\n        this._createRandomTexture();\r\n\r\n        this._originalColorPostProcess = new PassPostProcess(\"SSAOOriginalSceneColor\", 1.0, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), undefined, textureType);\r\n        this._originalColorPostProcess.samples = this.textureSamples;\r\n        this._createSSAOPostProcess(1.0, textureType);\r\n        this._createBlurPostProcess(ssaoRatio, blurRatio, textureType);\r\n        this._createSSAOCombinePostProcess(blurRatio, textureType);\r\n\r\n        // Set up pipeline\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.SSAOOriginalSceneColorEffect,\r\n                () => {\r\n                    return this._originalColorPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.SSAORenderEffect,\r\n                () => {\r\n                    return this._ssaoPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.SSAOBlurHRenderEffect,\r\n                () => {\r\n                    return this._blurHPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.SSAOBlurVRenderEffect,\r\n                () => {\r\n                    return this._blurVPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.SSAOCombineRenderEffect,\r\n                () => {\r\n                    return this._ssaoCombinePostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n\r\n        // Finish\r\n        scene.postProcessRenderPipelineManager.addPipeline(this);\r\n        if (cameras) {\r\n            scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\r\n        }\r\n    }\r\n\r\n    // Public Methods\r\n\r\n    /**\r\n     * Get the class name\r\n     * @returns \"SSAO2RenderingPipeline\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"SSAO2RenderingPipeline\";\r\n    }\r\n\r\n    /**\r\n     * Removes the internal pipeline assets and detaches the pipeline from the scene cameras\r\n     * @param disableGeometryBufferRenderer\r\n     */\r\n    public dispose(disableGeometryBufferRenderer: boolean = false): void {\r\n        for (let i = 0; i < this._scene.cameras.length; i++) {\r\n            const camera = this._scene.cameras[i];\r\n\r\n            this._originalColorPostProcess.dispose(camera);\r\n            this._ssaoPostProcess.dispose(camera);\r\n            this._blurHPostProcess.dispose(camera);\r\n            this._blurVPostProcess.dispose(camera);\r\n            this._ssaoCombinePostProcess.dispose(camera);\r\n        }\r\n\r\n        this._randomTexture.dispose();\r\n\r\n        if (disableGeometryBufferRenderer) {\r\n            this._scene.disableGeometryBufferRenderer();\r\n        }\r\n\r\n        this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    // Private Methods\r\n    private _createBlurPostProcess(ssaoRatio: number, blurRatio: number, textureType: number): void {\r\n        this._samplerOffsets = [];\r\n        const expensive = this.expensiveBlur;\r\n\r\n        for (let i = -8; i < 8; i++) {\r\n            this._samplerOffsets.push(i * 2 + 0.5);\r\n        }\r\n\r\n        this._blurHPostProcess = new PostProcess(\r\n            \"BlurH\",\r\n            \"ssao2\",\r\n            [\"outSize\", \"samplerOffsets\", \"near\", \"far\", \"radius\"],\r\n            [\"depthSampler\"],\r\n            ssaoRatio,\r\n            null,\r\n            Texture.TRILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false,\r\n            \"#define BILATERAL_BLUR\\n#define BILATERAL_BLUR_H\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (expensive ? \"1\" : \"0\") + \"\\n\",\r\n            textureType\r\n        );\r\n        this._blurHPostProcess.onApply = (effect: Effect) => {\r\n            if (!this._scene.activeCamera) {\r\n                return;\r\n            }\r\n\r\n            effect.setFloat(\"outSize\", this._ssaoCombinePostProcess.width > 0 ? this._ssaoCombinePostProcess.width : this._originalColorPostProcess.width);\r\n            effect.setFloat(\"near\", this._scene.activeCamera.minZ);\r\n            effect.setFloat(\"far\", this._scene.activeCamera.maxZ);\r\n            effect.setFloat(\"radius\", this.radius);\r\n            if (this._geometryBufferRenderer) {\r\n                effect.setTexture(\"depthSampler\", this._geometryBufferRenderer.getGBuffer().textures[0]);\r\n            } else if (this._prePassRenderer) {\r\n                effect.setTexture(\"depthSampler\", this._prePassRenderer.getRenderTarget().textures[this._prePassRenderer.getIndex(Constants.PREPASS_DEPTH_TEXTURE_TYPE)]);\r\n            }\r\n            effect.setArray(\"samplerOffsets\", this._samplerOffsets);\r\n        };\r\n\r\n        this._blurVPostProcess = new PostProcess(\r\n            \"BlurV\",\r\n            \"ssao2\",\r\n            [\"outSize\", \"samplerOffsets\", \"near\", \"far\", \"radius\"],\r\n            [\"depthSampler\"],\r\n            blurRatio,\r\n            null,\r\n            Texture.TRILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false,\r\n            \"#define BILATERAL_BLUR\\n#define BILATERAL_BLUR_V\\n#define SAMPLES 16\\n#define EXPENSIVE \" + (expensive ? \"1\" : \"0\") + \"\\n\",\r\n            textureType\r\n        );\r\n        this._blurVPostProcess.onApply = (effect: Effect) => {\r\n            if (!this._scene.activeCamera) {\r\n                return;\r\n            }\r\n\r\n            effect.setFloat(\"outSize\", this._ssaoCombinePostProcess.height > 0 ? this._ssaoCombinePostProcess.height : this._originalColorPostProcess.height);\r\n            effect.setFloat(\"near\", this._scene.activeCamera.minZ);\r\n            effect.setFloat(\"far\", this._scene.activeCamera.maxZ);\r\n            effect.setFloat(\"radius\", this.radius);\r\n            if (this._geometryBufferRenderer) {\r\n                effect.setTexture(\"depthSampler\", this._geometryBufferRenderer.getGBuffer().textures[0]);\r\n            } else if (this._prePassRenderer) {\r\n                effect.setTexture(\"depthSampler\", this._prePassRenderer.getRenderTarget().textures[this._prePassRenderer.getIndex(Constants.PREPASS_DEPTH_TEXTURE_TYPE)]);\r\n            }\r\n            effect.setArray(\"samplerOffsets\", this._samplerOffsets);\r\n        };\r\n\r\n        this._blurHPostProcess.samples = this.textureSamples;\r\n        this._blurVPostProcess.samples = this.textureSamples;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _rebuild() {\r\n        super._rebuild();\r\n    }\r\n\r\n    private _bits = new Uint32Array(1);\r\n\r\n    //Van der Corput radical inverse\r\n    private _radicalInverse_VdC(i: number) {\r\n        this._bits[0] = i;\r\n        this._bits[0] = ((this._bits[0] << 16) | (this._bits[0] >> 16)) >>> 0;\r\n        this._bits[0] = ((this._bits[0] & 0x55555555) << 1) | (((this._bits[0] & 0xaaaaaaaa) >>> 1) >>> 0);\r\n        this._bits[0] = ((this._bits[0] & 0x33333333) << 2) | (((this._bits[0] & 0xcccccccc) >>> 2) >>> 0);\r\n        this._bits[0] = ((this._bits[0] & 0x0f0f0f0f) << 4) | (((this._bits[0] & 0xf0f0f0f0) >>> 4) >>> 0);\r\n        this._bits[0] = ((this._bits[0] & 0x00ff00ff) << 8) | (((this._bits[0] & 0xff00ff00) >>> 8) >>> 0);\r\n        return this._bits[0] * 2.3283064365386963e-10; // / 0x100000000 or / 4294967296\r\n    }\r\n\r\n    private _hammersley(i: number, n: number) {\r\n        return [i / n, this._radicalInverse_VdC(i)];\r\n    }\r\n\r\n    private _hemisphereSample_uniform(u: number, v: number): Vector3 {\r\n        const phi = v * 2.0 * Math.PI;\r\n        // rejecting samples that are close to tangent plane to avoid z-fighting artifacts\r\n        const cosTheta = 1.0 - (u * 0.85 + 0.15);\r\n        const sinTheta = Math.sqrt(1.0 - cosTheta * cosTheta);\r\n        return new Vector3(Math.cos(phi) * sinTheta, Math.sin(phi) * sinTheta, cosTheta);\r\n    }\r\n\r\n    private _generateHemisphere(): number[] {\r\n        const numSamples = this.samples;\r\n        const result = [];\r\n        let vector;\r\n\r\n        let i = 0;\r\n        while (i < numSamples) {\r\n            if (numSamples < 16) {\r\n                vector = this._hemisphereSample_uniform(Math.random(), Math.random());\r\n            } else {\r\n                const rand = this._hammersley(i, numSamples);\r\n                vector = this._hemisphereSample_uniform(rand[0], rand[1]);\r\n            }\r\n\r\n            result.push(vector.x, vector.y, vector.z);\r\n            i++;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private _getDefinesForSSAO() {\r\n        const defines = \"#define SAMPLES \" + this.samples + \"\\n#define SSAO\";\r\n\r\n        return defines;\r\n    }\r\n\r\n    private static readonly ORTHO_DEPTH_PROJECTION = [1, 0, 0, 0, 1, 0, 0, 0, 1];\r\n\r\n    private static readonly PERSPECTIVE_DEPTH_PROJECTION = [0, 0, 0, 0, 0, 0, 1, 1, 1];\r\n\r\n    private _createSSAOPostProcess(ratio: number, textureType: number): void {\r\n        this._sampleSphere = this._generateHemisphere();\r\n\r\n        const defines = this._getDefinesForSSAO();\r\n        const samplers = [\"randomSampler\", \"depthSampler\", \"normalSampler\"];\r\n\r\n        this._ssaoPostProcess = new PostProcess(\r\n            \"ssao2\",\r\n            \"ssao2\",\r\n            [\r\n                \"sampleSphere\",\r\n                \"samplesFactor\",\r\n                \"randTextureTiles\",\r\n                \"totalStrength\",\r\n                \"radius\",\r\n                \"base\",\r\n                \"range\",\r\n                \"projection\",\r\n                \"near\",\r\n                \"far\",\r\n                \"texelSize\",\r\n                \"xViewport\",\r\n                \"yViewport\",\r\n                \"maxZ\",\r\n                \"minZAspect\",\r\n                \"depthProjection\",\r\n            ],\r\n            samplers,\r\n            ratio,\r\n            null,\r\n            Texture.BILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false,\r\n            defines,\r\n            textureType\r\n        );\r\n\r\n        this._ssaoPostProcess.onApply = (effect: Effect) => {\r\n            if (!this._scene.activeCamera) {\r\n                return;\r\n            }\r\n\r\n            effect.setArray3(\"sampleSphere\", this._sampleSphere);\r\n            effect.setFloat(\"randTextureTiles\", 32.0);\r\n            effect.setFloat(\"samplesFactor\", 1 / this.samples);\r\n            effect.setFloat(\"totalStrength\", this.totalStrength);\r\n            effect.setFloat2(\"texelSize\", 1 / this._ssaoPostProcess.width, 1 / this._ssaoPostProcess.height);\r\n            effect.setFloat(\"radius\", this.radius);\r\n            effect.setFloat(\"maxZ\", this.maxZ);\r\n            effect.setFloat(\"minZAspect\", this.minZAspect);\r\n            effect.setFloat(\"base\", this.base);\r\n            effect.setFloat(\"near\", this._scene.activeCamera.minZ);\r\n            effect.setFloat(\"far\", this._scene.activeCamera.maxZ);\r\n            if (this._scene.activeCamera.mode === Camera.PERSPECTIVE_CAMERA) {\r\n                effect.setMatrix3x3(\"depthProjection\", SSAO2RenderingPipeline.PERSPECTIVE_DEPTH_PROJECTION);\r\n                effect.setFloat(\"xViewport\", Math.tan(this._scene.activeCamera.fov / 2) * this._scene.getEngine().getAspectRatio(this._scene.activeCamera, true));\r\n                effect.setFloat(\"yViewport\", Math.tan(this._scene.activeCamera.fov / 2));\r\n            } else {\r\n                const halfWidth = this._scene.getEngine().getRenderWidth() / 2.0;\r\n                const halfHeight = this._scene.getEngine().getRenderHeight() / 2.0;\r\n                const orthoLeft = this._scene.activeCamera.orthoLeft ?? -halfWidth;\r\n                const orthoRight = this._scene.activeCamera.orthoRight ?? halfWidth;\r\n                const orthoBottom = this._scene.activeCamera.orthoBottom ?? -halfHeight;\r\n                const orthoTop = this._scene.activeCamera.orthoTop ?? halfHeight;\r\n                effect.setMatrix3x3(\"depthProjection\", SSAO2RenderingPipeline.ORTHO_DEPTH_PROJECTION);\r\n                effect.setFloat(\"xViewport\", (orthoRight - orthoLeft) * 0.5);\r\n                effect.setFloat(\"yViewport\", (orthoTop - orthoBottom) * 0.5);\r\n            }\r\n            effect.setMatrix(\"projection\", this._scene.getProjectionMatrix());\r\n\r\n            if (this._geometryBufferRenderer) {\r\n                effect.setTexture(\"depthSampler\", this._geometryBufferRenderer.getGBuffer().textures[0]);\r\n                effect.setTexture(\"normalSampler\", this._geometryBufferRenderer.getGBuffer().textures[1]);\r\n            } else if (this._prePassRenderer) {\r\n                effect.setTexture(\"depthSampler\", this._prePassRenderer.getRenderTarget().textures[this._prePassRenderer.getIndex(Constants.PREPASS_DEPTH_TEXTURE_TYPE)]);\r\n                effect.setTexture(\"normalSampler\", this._prePassRenderer.getRenderTarget().textures[this._prePassRenderer.getIndex(Constants.PREPASS_NORMAL_TEXTURE_TYPE)]);\r\n            }\r\n            effect.setTexture(\"randomSampler\", this._randomTexture);\r\n        };\r\n        this._ssaoPostProcess.samples = this.textureSamples;\r\n    }\r\n\r\n    private _createSSAOCombinePostProcess(ratio: number, textureType: number): void {\r\n        this._ssaoCombinePostProcess = new PostProcess(\r\n            \"ssaoCombine\",\r\n            \"ssaoCombine\",\r\n            [],\r\n            [\"originalColor\", \"viewport\"],\r\n            ratio,\r\n            null,\r\n            Texture.BILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false,\r\n            undefined,\r\n            textureType\r\n        );\r\n\r\n        this._ssaoCombinePostProcess.onApply = (effect: Effect) => {\r\n            const viewport = this._scene.activeCamera!.viewport;\r\n            effect.setVector4(\"viewport\", TmpVectors.Vector4[0].copyFromFloats(viewport.x, viewport.y, viewport.width, viewport.height));\r\n            effect.setTextureFromPostProcessOutput(\"originalColor\", this._originalColorPostProcess);\r\n        };\r\n        this._ssaoCombinePostProcess.samples = this.textureSamples;\r\n\r\n        if (!this._forceGeometryBuffer) {\r\n            this._ssaoCombinePostProcess._prePassEffectConfiguration = new SSAO2Configuration();\r\n        }\r\n    }\r\n\r\n    private _createRandomTexture(): void {\r\n        const size = 128;\r\n\r\n        this._randomTexture = new DynamicTexture(\"SSAORandomTexture\", size, this._scene, false, Texture.TRILINEAR_SAMPLINGMODE);\r\n        this._randomTexture.wrapU = Texture.WRAP_ADDRESSMODE;\r\n        this._randomTexture.wrapV = Texture.WRAP_ADDRESSMODE;\r\n\r\n        const context = this._randomTexture.getContext();\r\n\r\n        const rand = (min: number, max: number) => {\r\n            return Math.random() * (max - min) + min;\r\n        };\r\n\r\n        const randVector = Vector3.Zero();\r\n\r\n        for (let x = 0; x < size; x++) {\r\n            for (let y = 0; y < size; y++) {\r\n                randVector.x = rand(0.0, 1.0);\r\n                randVector.y = rand(0.0, 1.0);\r\n                randVector.z = 0.0;\r\n\r\n                randVector.normalize();\r\n\r\n                randVector.scaleInPlace(255);\r\n                randVector.x = Math.floor(randVector.x);\r\n                randVector.y = Math.floor(randVector.y);\r\n\r\n                context.fillStyle = \"rgb(\" + randVector.x + \", \" + randVector.y + \", \" + randVector.z + \")\";\r\n                context.fillRect(x, y, 1, 1);\r\n            }\r\n        }\r\n\r\n        this._randomTexture.update(false);\r\n    }\r\n\r\n    /**\r\n     * Serialize the rendering pipeline (Used when exporting)\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"SSAO2RenderingPipeline\";\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parse the serialized pipeline\r\n     * @param source Source pipeline.\r\n     * @param scene The scene to load the pipeline to.\r\n     * @param rootUrl The URL of the serialized pipeline.\r\n     * @returns An instantiated pipeline from the serialized object.\r\n     */\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): SSAO2RenderingPipeline {\r\n        return SerializationHelper.Parse(() => new SSAO2RenderingPipeline(source._name, scene, source._ratio), source, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.SSAO2RenderingPipeline\", SSAO2RenderingPipeline);\r\n"]},"metadata":{},"sourceType":"module"}