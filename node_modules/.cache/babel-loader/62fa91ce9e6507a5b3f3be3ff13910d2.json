{"ast":null,"code":"import { Logger } from \"../Misc/logger.js\";\nimport { Scene } from \"../scene.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\nimport { PBRMaterial } from \"../Materials/PBR/pbrMaterial.js\";\nimport { HemisphericLight } from \"../Lights/hemisphericLight.js\";\nimport { EnvironmentHelper } from \"./environmentHelper.js\";\nimport { FreeCamera } from \"../Cameras/freeCamera.js\";\nimport { ArcRotateCamera } from \"../Cameras/arcRotateCamera.js\";\nimport { VRExperienceHelper } from \"../Cameras/VR/vrExperienceHelper.js\";\nimport \"../Materials/Textures/Loaders/ddsTextureLoader.js\";\nimport \"../Materials/Textures/Loaders/envTextureLoader.js\";\nimport \"../Materials/Textures/Loaders/ktxTextureLoader.js\";\nimport { CreateBox } from \"../Meshes/Builders/boxBuilder.js\";\nimport { WebXRDefaultExperience } from \"../XR/webXRDefaultExperience.js\";\n/** @hidden */\n// eslint-disable-next-line no-var\n\nexport var _forceSceneHelpersToBundle = true;\n\nScene.prototype.createDefaultLight = function (replace) {\n  if (replace === void 0) {\n    replace = false;\n  } // Dispose existing light in replace mode.\n\n\n  if (replace) {\n    if (this.lights) {\n      for (var i = 0; i < this.lights.length; i++) {\n        this.lights[i].dispose();\n      }\n    }\n  } // Light\n\n\n  if (this.lights.length === 0) {\n    new HemisphericLight(\"default light\", Vector3.Up(), this);\n  }\n};\n\nScene.prototype.createDefaultCamera = function (createArcRotateCamera, replace, attachCameraControls) {\n  if (createArcRotateCamera === void 0) {\n    createArcRotateCamera = false;\n  }\n\n  if (replace === void 0) {\n    replace = false;\n  }\n\n  if (attachCameraControls === void 0) {\n    attachCameraControls = false;\n  } // Dispose existing camera in replace mode.\n\n\n  if (replace) {\n    if (this.activeCamera) {\n      this.activeCamera.dispose();\n      this.activeCamera = null;\n    }\n  } // Camera\n\n\n  if (!this.activeCamera) {\n    var worldExtends = this.getWorldExtends(function (mesh) {\n      return mesh.isVisible && mesh.isEnabled();\n    });\n    var worldSize = worldExtends.max.subtract(worldExtends.min);\n    var worldCenter = worldExtends.min.add(worldSize.scale(0.5));\n    var camera = void 0;\n    var radius = worldSize.length() * 1.5; // empty scene scenario!\n\n    if (!isFinite(radius)) {\n      radius = 1;\n      worldCenter.copyFromFloats(0, 0, 0);\n    }\n\n    if (createArcRotateCamera) {\n      var arcRotateCamera = new ArcRotateCamera(\"default camera\", -(Math.PI / 2), Math.PI / 2, radius, worldCenter, this);\n      arcRotateCamera.lowerRadiusLimit = radius * 0.01;\n      arcRotateCamera.wheelPrecision = 100 / radius;\n      camera = arcRotateCamera;\n    } else {\n      var freeCamera = new FreeCamera(\"default camera\", new Vector3(worldCenter.x, worldCenter.y, -radius), this);\n      freeCamera.setTarget(worldCenter);\n      camera = freeCamera;\n    }\n\n    camera.minZ = radius * 0.01;\n    camera.maxZ = radius * 1000;\n    camera.speed = radius * 0.2;\n    this.activeCamera = camera;\n\n    if (attachCameraControls) {\n      camera.attachControl();\n    }\n  }\n};\n\nScene.prototype.createDefaultCameraOrLight = function (createArcRotateCamera, replace, attachCameraControls) {\n  if (createArcRotateCamera === void 0) {\n    createArcRotateCamera = false;\n  }\n\n  if (replace === void 0) {\n    replace = false;\n  }\n\n  if (attachCameraControls === void 0) {\n    attachCameraControls = false;\n  }\n\n  this.createDefaultLight(replace);\n  this.createDefaultCamera(createArcRotateCamera, replace, attachCameraControls);\n};\n\nScene.prototype.createDefaultSkybox = function (environmentTexture, pbr, scale, blur, setGlobalEnvTexture) {\n  if (pbr === void 0) {\n    pbr = false;\n  }\n\n  if (scale === void 0) {\n    scale = 1000;\n  }\n\n  if (blur === void 0) {\n    blur = 0;\n  }\n\n  if (setGlobalEnvTexture === void 0) {\n    setGlobalEnvTexture = true;\n  }\n\n  if (!environmentTexture) {\n    Logger.Warn(\"Can not create default skybox without environment texture.\");\n    return null;\n  }\n\n  if (setGlobalEnvTexture) {\n    if (environmentTexture) {\n      this.environmentTexture = environmentTexture;\n    }\n  } // Skybox\n\n\n  var hdrSkybox = CreateBox(\"hdrSkyBox\", {\n    size: scale\n  }, this);\n\n  if (pbr) {\n    var hdrSkyboxMaterial = new PBRMaterial(\"skyBox\", this);\n    hdrSkyboxMaterial.backFaceCulling = false;\n    hdrSkyboxMaterial.reflectionTexture = environmentTexture.clone();\n\n    if (hdrSkyboxMaterial.reflectionTexture) {\n      hdrSkyboxMaterial.reflectionTexture.coordinatesMode = Texture.SKYBOX_MODE;\n    }\n\n    hdrSkyboxMaterial.microSurface = 1.0 - blur;\n    hdrSkyboxMaterial.disableLighting = true;\n    hdrSkyboxMaterial.twoSidedLighting = true;\n    hdrSkybox.material = hdrSkyboxMaterial;\n  } else {\n    var skyboxMaterial = new StandardMaterial(\"skyBox\", this);\n    skyboxMaterial.backFaceCulling = false;\n    skyboxMaterial.reflectionTexture = environmentTexture.clone();\n\n    if (skyboxMaterial.reflectionTexture) {\n      skyboxMaterial.reflectionTexture.coordinatesMode = Texture.SKYBOX_MODE;\n    }\n\n    skyboxMaterial.disableLighting = true;\n    hdrSkybox.material = skyboxMaterial;\n  }\n\n  hdrSkybox.isPickable = false;\n  hdrSkybox.infiniteDistance = true;\n  hdrSkybox.ignoreCameraMaxZ = true;\n  return hdrSkybox;\n};\n\nScene.prototype.createDefaultEnvironment = function (options) {\n  if (EnvironmentHelper) {\n    return new EnvironmentHelper(options, this);\n  }\n\n  return null;\n};\n\nScene.prototype.createDefaultVRExperience = function (webVROptions) {\n  if (webVROptions === void 0) {\n    webVROptions = {};\n  }\n\n  return new VRExperienceHelper(this, webVROptions);\n};\n\nScene.prototype.createDefaultXRExperienceAsync = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return WebXRDefaultExperience.CreateAsync(this, options).then(function (helper) {\n    return helper;\n  });\n};","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,QAAuB,mBAAvB;AAEA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,OAAT,QAAwB,yBAAxB;AAGA,SAASC,OAAT,QAAwB,kCAAxB;AACA,SAASC,gBAAT,QAAiC,kCAAjC;AACA,SAASC,WAAT,QAA4B,iCAA5B;AACA,SAASC,gBAAT,QAAiC,+BAAjC;AAEA,SAASC,iBAAT,QAAkC,wBAAlC;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,eAAT,QAAgC,+BAAhC;AAGA,SAASC,kBAAT,QAAmC,qCAAnC;AAEA,OAAO,mDAAP;AACA,OAAO,mDAAP;AACA,OAAO,mDAAP;AACA,SAASC,SAAT,QAA0B,kCAA1B;AAEA,SAASC,sBAAT,QAAuC,iCAAvC;AAEA;AACA;;AACA,OAAO,IAAIC,0BAA0B,GAAG,IAAjC;;AAoEPZ,KAAK,CAACa,SAAN,CAAgBC,kBAAhB,GAAqC,UAAUC,OAAV,EAAyB;AAAf;AAAAA;AAAe,IAC1D;;;AACA,MAAIA,OAAJ,EAAa;AACT,QAAI,KAAKC,MAAT,EAAiB;AACb,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKD,MAAL,CAAYE,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzC,aAAKD,MAAL,CAAYC,CAAZ,EAAeE,OAAf;AACH;AACJ;AACJ,GARyD,CAU1D;;;AACA,MAAI,KAAKH,MAAL,CAAYE,MAAZ,KAAuB,CAA3B,EAA8B;AAC1B,QAAIb,gBAAJ,CAAqB,eAArB,EAAsCJ,OAAO,CAACmB,EAAR,EAAtC,EAAoD,IAApD;AACH;AACJ,CAdD;;AAgBApB,KAAK,CAACa,SAAN,CAAgBQ,mBAAhB,GAAsC,UAAUC,qBAAV,EAAyCP,OAAzC,EAA0DQ,oBAA1D,EAAsF;AAA5E;AAAAD;AAA6B;;AAAE;AAAAP;AAAe;;AAAE;AAAAQ;AAA4B,IACxH;;;AACA,MAAIR,OAAJ,EAAa;AACT,QAAI,KAAKS,YAAT,EAAuB;AACnB,WAAKA,YAAL,CAAkBL,OAAlB;AACA,WAAKK,YAAL,GAAoB,IAApB;AACH;AACJ,GAPuH,CASxH;;;AACA,MAAI,CAAC,KAAKA,YAAV,EAAwB;AACpB,QAAMC,YAAY,GAAG,KAAKC,eAAL,CAAqB,UAACC,IAAD,EAAK;AAAK,iBAAI,CAACC,SAAL,IAAkBD,IAAI,CAACE,SAAL,EAAlB;AAAkC,KAAjE,CAArB;AACA,QAAMC,SAAS,GAAGL,YAAY,CAACM,GAAb,CAAiBC,QAAjB,CAA0BP,YAAY,CAACQ,GAAvC,CAAlB;AACA,QAAMC,WAAW,GAAGT,YAAY,CAACQ,GAAb,CAAiBE,GAAjB,CAAqBL,SAAS,CAACM,KAAV,CAAgB,GAAhB,CAArB,CAApB;AAEA,QAAIC,MAAM,SAAV;AACA,QAAIC,MAAM,GAAGR,SAAS,CAACZ,MAAV,KAAqB,GAAlC,CANoB,CAOpB;;AACA,QAAI,CAACqB,QAAQ,CAACD,MAAD,CAAb,EAAuB;AACnBA,YAAM,GAAG,CAAT;AACAJ,iBAAW,CAACM,cAAZ,CAA2B,CAA3B,EAA8B,CAA9B,EAAiC,CAAjC;AACH;;AACD,QAAIlB,qBAAJ,EAA2B;AACvB,UAAMmB,eAAe,GAAG,IAAIjC,eAAJ,CAAoB,gBAApB,EAAsC,EAAEkC,IAAI,CAACC,EAAL,GAAU,CAAZ,CAAtC,EAAsDD,IAAI,CAACC,EAAL,GAAU,CAAhE,EAAmEL,MAAnE,EAA2EJ,WAA3E,EAAwF,IAAxF,CAAxB;AACAO,qBAAe,CAACG,gBAAhB,GAAmCN,MAAM,GAAG,IAA5C;AACAG,qBAAe,CAACI,cAAhB,GAAiC,MAAMP,MAAvC;AACAD,YAAM,GAAGI,eAAT;AACH,KALD,MAKO;AACH,UAAMK,UAAU,GAAG,IAAIvC,UAAJ,CAAe,gBAAf,EAAiC,IAAIN,OAAJ,CAAYiC,WAAW,CAACa,CAAxB,EAA2Bb,WAAW,CAACc,CAAvC,EAA0C,CAACV,MAA3C,CAAjC,EAAqF,IAArF,CAAnB;AACAQ,gBAAU,CAACG,SAAX,CAAqBf,WAArB;AACAG,YAAM,GAAGS,UAAT;AACH;;AACDT,UAAM,CAACa,IAAP,GAAcZ,MAAM,GAAG,IAAvB;AACAD,UAAM,CAACc,IAAP,GAAcb,MAAM,GAAG,IAAvB;AACAD,UAAM,CAACe,KAAP,GAAed,MAAM,GAAG,GAAxB;AACA,SAAKd,YAAL,GAAoBa,MAApB;;AAEA,QAAId,oBAAJ,EAA0B;AACtBc,YAAM,CAACgB,aAAP;AACH;AACJ;AACJ,CAzCD;;AA2CArD,KAAK,CAACa,SAAN,CAAgByC,0BAAhB,GAA6C,UAAUhC,qBAAV,EAAyCP,OAAzC,EAA0DQ,oBAA1D,EAAsF;AAA5E;AAAAD;AAA6B;;AAAE;AAAAP;AAAe;;AAAE;AAAAQ;AAA4B;;AAC/H,OAAKT,kBAAL,CAAwBC,OAAxB;AACA,OAAKM,mBAAL,CAAyBC,qBAAzB,EAAgDP,OAAhD,EAAyDQ,oBAAzD;AACH,CAHD;;AAKAvB,KAAK,CAACa,SAAN,CAAgB0C,mBAAhB,GAAsC,UAAUC,kBAAV,EAA4CC,GAA5C,EAAyDrB,KAAzD,EAAuEsB,IAAvE,EAAiFC,mBAAjF,EAA2G;AAA/D;AAAAF;AAAW;;AAAE;AAAArB;AAAY;;AAAE;AAAAsB;AAAQ;;AAAE;AAAAC;AAA0B;;AAC7I,MAAI,CAACH,kBAAL,EAAyB;AACrBzD,UAAM,CAAC6D,IAAP,CAAY,4DAAZ;AACA,WAAO,IAAP;AACH;;AAED,MAAID,mBAAJ,EAAyB;AACrB,QAAIH,kBAAJ,EAAwB;AACpB,WAAKA,kBAAL,GAA0BA,kBAA1B;AACH;AACJ,GAV4I,CAY7I;;;AACA,MAAMK,SAAS,GAAGnD,SAAS,CAAC,WAAD,EAAc;AAAEoD,QAAI,EAAE1B;AAAR,GAAd,EAA+B,IAA/B,CAA3B;;AACA,MAAIqB,GAAJ,EAAS;AACL,QAAMM,iBAAiB,GAAG,IAAI3D,WAAJ,CAAgB,QAAhB,EAA0B,IAA1B,CAA1B;AACA2D,qBAAiB,CAACC,eAAlB,GAAoC,KAApC;AACAD,qBAAiB,CAACE,iBAAlB,GAAsCT,kBAAkB,CAACU,KAAnB,EAAtC;;AACA,QAAIH,iBAAiB,CAACE,iBAAtB,EAAyC;AACrCF,uBAAiB,CAACE,iBAAlB,CAAoCE,eAApC,GAAsDjE,OAAO,CAACkE,WAA9D;AACH;;AACDL,qBAAiB,CAACM,YAAlB,GAAiC,MAAMX,IAAvC;AACAK,qBAAiB,CAACO,eAAlB,GAAoC,IAApC;AACAP,qBAAiB,CAACQ,gBAAlB,GAAqC,IAArC;AACAV,aAAS,CAACW,QAAV,GAAqBT,iBAArB;AACH,GAXD,MAWO;AACH,QAAMU,cAAc,GAAG,IAAItE,gBAAJ,CAAqB,QAArB,EAA+B,IAA/B,CAAvB;AACAsE,kBAAc,CAACT,eAAf,GAAiC,KAAjC;AACAS,kBAAc,CAACR,iBAAf,GAAmCT,kBAAkB,CAACU,KAAnB,EAAnC;;AACA,QAAIO,cAAc,CAACR,iBAAnB,EAAsC;AAClCQ,oBAAc,CAACR,iBAAf,CAAiCE,eAAjC,GAAmDjE,OAAO,CAACkE,WAA3D;AACH;;AACDK,kBAAc,CAACH,eAAf,GAAiC,IAAjC;AACAT,aAAS,CAACW,QAAV,GAAqBC,cAArB;AACH;;AACDZ,WAAS,CAACa,UAAV,GAAuB,KAAvB;AACAb,WAAS,CAACc,gBAAV,GAA6B,IAA7B;AACAd,WAAS,CAACe,gBAAV,GAA6B,IAA7B;AACA,SAAOf,SAAP;AACH,CAvCD;;AAyCA7D,KAAK,CAACa,SAAN,CAAgBgE,wBAAhB,GAA2C,UAAUC,OAAV,EAAqD;AAC5F,MAAIxE,iBAAJ,EAAuB;AACnB,WAAO,IAAIA,iBAAJ,CAAsBwE,OAAtB,EAA+B,IAA/B,CAAP;AACH;;AACD,SAAO,IAAP;AACH,CALD;;AAOA9E,KAAK,CAACa,SAAN,CAAgBkE,yBAAhB,GAA4C,UAAUC,YAAV,EAAsD;AAA5C;AAAAA;AAA4C;;AAC9F,SAAO,IAAIvE,kBAAJ,CAAuB,IAAvB,EAA6BuE,YAA7B,CAAP;AACH,CAFD;;AAIAhF,KAAK,CAACa,SAAN,CAAgBoE,8BAAhB,GAAiD,UAAUH,OAAV,EAAqD;AAA3C;AAAAA;AAA2C;;AAClG,SAAOnE,sBAAsB,CAACuE,WAAvB,CAAmC,IAAnC,EAAyCJ,OAAzC,EAAkDK,IAAlD,CAAuD,UAACC,MAAD,EAAO;AACjE,WAAOA,MAAP;AACH,GAFM,CAAP;AAGH,CAJD","names":["Logger","Scene","Vector3","Texture","StandardMaterial","PBRMaterial","HemisphericLight","EnvironmentHelper","FreeCamera","ArcRotateCamera","VRExperienceHelper","CreateBox","WebXRDefaultExperience","_forceSceneHelpersToBundle","prototype","createDefaultLight","replace","lights","i","length","dispose","Up","createDefaultCamera","createArcRotateCamera","attachCameraControls","activeCamera","worldExtends","getWorldExtends","mesh","isVisible","isEnabled","worldSize","max","subtract","min","worldCenter","add","scale","camera","radius","isFinite","copyFromFloats","arcRotateCamera","Math","PI","lowerRadiusLimit","wheelPrecision","freeCamera","x","y","setTarget","minZ","maxZ","speed","attachControl","createDefaultCameraOrLight","createDefaultSkybox","environmentTexture","pbr","blur","setGlobalEnvTexture","Warn","hdrSkybox","size","hdrSkyboxMaterial","backFaceCulling","reflectionTexture","clone","coordinatesMode","SKYBOX_MODE","microSurface","disableLighting","twoSidedLighting","material","skyboxMaterial","isPickable","infiniteDistance","ignoreCameraMaxZ","createDefaultEnvironment","options","createDefaultVRExperience","webVROptions","createDefaultXRExperienceAsync","CreateAsync","then","helper"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Helpers/sceneHelpers.ts"],"sourcesContent":["import { Logger } from \"../Misc/logger\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\r\nimport { PBRMaterial } from \"../Materials/PBR/pbrMaterial\";\r\nimport { HemisphericLight } from \"../Lights/hemisphericLight\";\r\nimport type { IEnvironmentHelperOptions } from \"./environmentHelper\";\r\nimport { EnvironmentHelper } from \"./environmentHelper\";\r\nimport { FreeCamera } from \"../Cameras/freeCamera\";\r\nimport { ArcRotateCamera } from \"../Cameras/arcRotateCamera\";\r\nimport type { TargetCamera } from \"../Cameras/targetCamera\";\r\nimport type { VRExperienceHelperOptions } from \"../Cameras/VR/vrExperienceHelper\";\r\nimport { VRExperienceHelper } from \"../Cameras/VR/vrExperienceHelper\";\r\n\r\nimport \"../Materials/Textures/Loaders/ddsTextureLoader\";\r\nimport \"../Materials/Textures/Loaders/envTextureLoader\";\r\nimport \"../Materials/Textures/Loaders/ktxTextureLoader\";\r\nimport { CreateBox } from \"../Meshes/Builders/boxBuilder\";\r\nimport type { WebXRDefaultExperienceOptions } from \"../XR/webXRDefaultExperience\";\r\nimport { WebXRDefaultExperience } from \"../XR/webXRDefaultExperience\";\r\n\r\n/** @hidden */\r\n// eslint-disable-next-line no-var\r\nexport var _forceSceneHelpersToBundle = true;\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /**\r\n         * Creates a default light for the scene.\r\n         * @see https://doc.babylonjs.com/How_To/Fast_Build#create-default-light\r\n         * @param replace has the default false, when true replaces the existing lights in the scene with a hemispheric light\r\n         */\r\n        createDefaultLight(replace?: boolean): void;\r\n\r\n        /**\r\n         * Creates a default camera for the scene.\r\n         * @see https://doc.babylonjs.com/How_To/Fast_Build#create-default-camera\r\n         * @param createArcRotateCamera has the default false which creates a free camera, when true creates an arc rotate camera\r\n         * @param replace has default false, when true replaces the active camera in the scene\r\n         * @param attachCameraControls has default false, when true attaches camera controls to the canvas.\r\n         */\r\n        createDefaultCamera(createArcRotateCamera?: boolean, replace?: boolean, attachCameraControls?: boolean): void;\r\n\r\n        /**\r\n         * Creates a default camera and a default light.\r\n         * @see https://doc.babylonjs.com/divingDeeper/scene/fastBuildWorld#create-default-camera-or-light\r\n         * @param createArcRotateCamera has the default false which creates a free camera, when true creates an arc rotate camera\r\n         * @param replace has the default false, when true replaces the active camera/light in the scene\r\n         * @param attachCameraControls has the default false, when true attaches camera controls to the canvas.\r\n         */\r\n        createDefaultCameraOrLight(createArcRotateCamera?: boolean, replace?: boolean, attachCameraControls?: boolean): void;\r\n\r\n        /**\r\n         * Creates a new sky box\r\n         * @see https://doc.babylonjs.com/divingDeeper/scene/fastBuildWorld#create-default-skybox\r\n         * @param environmentTexture defines the texture to use as environment texture\r\n         * @param pbr has default false which requires the StandardMaterial to be used, when true PBRMaterial must be used\r\n         * @param scale defines the overall scale of the skybox\r\n         * @param blur is only available when pbr is true, default is 0, no blur, maximum value is 1\r\n         * @param setGlobalEnvTexture has default true indicating that scene.environmentTexture must match the current skybox texture\r\n         * @returns a new mesh holding the sky box\r\n         */\r\n        createDefaultSkybox(environmentTexture?: BaseTexture, pbr?: boolean, scale?: number, blur?: number, setGlobalEnvTexture?: boolean): Nullable<Mesh>;\r\n\r\n        /**\r\n         * Creates a new environment\r\n         * @see https://doc.babylonjs.com/How_To/Fast_Build#create-default-environment\r\n         * @param options defines the options you can use to configure the environment\r\n         * @returns the new EnvironmentHelper\r\n         */\r\n        createDefaultEnvironment(options?: Partial<IEnvironmentHelperOptions>): Nullable<EnvironmentHelper>;\r\n\r\n        /**\r\n         * Creates a new VREXperienceHelper\r\n         * @see https://doc.babylonjs.com/divingDeeper/cameras/webVRHelper\r\n         * @param webVROptions defines the options used to create the new VREXperienceHelper\r\n         * @deprecated Please use createDefaultXRExperienceAsync instead\r\n         * @returns a new VREXperienceHelper\r\n         */\r\n        createDefaultVRExperience(webVROptions?: VRExperienceHelperOptions): VRExperienceHelper;\r\n\r\n        /**\r\n         * Creates a new WebXRDefaultExperience\r\n         * @see https://doc.babylonjs.com/how_to/introduction_to_webxr\r\n         * @param options experience options\r\n         * @returns a promise for a new WebXRDefaultExperience\r\n         */\r\n        createDefaultXRExperienceAsync(options?: WebXRDefaultExperienceOptions): Promise<WebXRDefaultExperience>;\r\n    }\r\n}\r\n\r\nScene.prototype.createDefaultLight = function (replace = false): void {\r\n    // Dispose existing light in replace mode.\r\n    if (replace) {\r\n        if (this.lights) {\r\n            for (let i = 0; i < this.lights.length; i++) {\r\n                this.lights[i].dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    // Light\r\n    if (this.lights.length === 0) {\r\n        new HemisphericLight(\"default light\", Vector3.Up(), this);\r\n    }\r\n};\r\n\r\nScene.prototype.createDefaultCamera = function (createArcRotateCamera = false, replace = false, attachCameraControls = false): void {\r\n    // Dispose existing camera in replace mode.\r\n    if (replace) {\r\n        if (this.activeCamera) {\r\n            this.activeCamera.dispose();\r\n            this.activeCamera = null;\r\n        }\r\n    }\r\n\r\n    // Camera\r\n    if (!this.activeCamera) {\r\n        const worldExtends = this.getWorldExtends((mesh) => mesh.isVisible && mesh.isEnabled());\r\n        const worldSize = worldExtends.max.subtract(worldExtends.min);\r\n        const worldCenter = worldExtends.min.add(worldSize.scale(0.5));\r\n\r\n        let camera: TargetCamera;\r\n        let radius = worldSize.length() * 1.5;\r\n        // empty scene scenario!\r\n        if (!isFinite(radius)) {\r\n            radius = 1;\r\n            worldCenter.copyFromFloats(0, 0, 0);\r\n        }\r\n        if (createArcRotateCamera) {\r\n            const arcRotateCamera = new ArcRotateCamera(\"default camera\", -(Math.PI / 2), Math.PI / 2, radius, worldCenter, this);\r\n            arcRotateCamera.lowerRadiusLimit = radius * 0.01;\r\n            arcRotateCamera.wheelPrecision = 100 / radius;\r\n            camera = arcRotateCamera;\r\n        } else {\r\n            const freeCamera = new FreeCamera(\"default camera\", new Vector3(worldCenter.x, worldCenter.y, -radius), this);\r\n            freeCamera.setTarget(worldCenter);\r\n            camera = freeCamera;\r\n        }\r\n        camera.minZ = radius * 0.01;\r\n        camera.maxZ = radius * 1000;\r\n        camera.speed = radius * 0.2;\r\n        this.activeCamera = camera;\r\n\r\n        if (attachCameraControls) {\r\n            camera.attachControl();\r\n        }\r\n    }\r\n};\r\n\r\nScene.prototype.createDefaultCameraOrLight = function (createArcRotateCamera = false, replace = false, attachCameraControls = false): void {\r\n    this.createDefaultLight(replace);\r\n    this.createDefaultCamera(createArcRotateCamera, replace, attachCameraControls);\r\n};\r\n\r\nScene.prototype.createDefaultSkybox = function (environmentTexture?: BaseTexture, pbr = false, scale = 1000, blur = 0, setGlobalEnvTexture = true): Nullable<Mesh> {\r\n    if (!environmentTexture) {\r\n        Logger.Warn(\"Can not create default skybox without environment texture.\");\r\n        return null;\r\n    }\r\n\r\n    if (setGlobalEnvTexture) {\r\n        if (environmentTexture) {\r\n            this.environmentTexture = environmentTexture;\r\n        }\r\n    }\r\n\r\n    // Skybox\r\n    const hdrSkybox = CreateBox(\"hdrSkyBox\", { size: scale }, this);\r\n    if (pbr) {\r\n        const hdrSkyboxMaterial = new PBRMaterial(\"skyBox\", this);\r\n        hdrSkyboxMaterial.backFaceCulling = false;\r\n        hdrSkyboxMaterial.reflectionTexture = environmentTexture.clone();\r\n        if (hdrSkyboxMaterial.reflectionTexture) {\r\n            hdrSkyboxMaterial.reflectionTexture.coordinatesMode = Texture.SKYBOX_MODE;\r\n        }\r\n        hdrSkyboxMaterial.microSurface = 1.0 - blur;\r\n        hdrSkyboxMaterial.disableLighting = true;\r\n        hdrSkyboxMaterial.twoSidedLighting = true;\r\n        hdrSkybox.material = hdrSkyboxMaterial;\r\n    } else {\r\n        const skyboxMaterial = new StandardMaterial(\"skyBox\", this);\r\n        skyboxMaterial.backFaceCulling = false;\r\n        skyboxMaterial.reflectionTexture = environmentTexture.clone();\r\n        if (skyboxMaterial.reflectionTexture) {\r\n            skyboxMaterial.reflectionTexture.coordinatesMode = Texture.SKYBOX_MODE;\r\n        }\r\n        skyboxMaterial.disableLighting = true;\r\n        hdrSkybox.material = skyboxMaterial;\r\n    }\r\n    hdrSkybox.isPickable = false;\r\n    hdrSkybox.infiniteDistance = true;\r\n    hdrSkybox.ignoreCameraMaxZ = true;\r\n    return hdrSkybox;\r\n};\r\n\r\nScene.prototype.createDefaultEnvironment = function (options: Partial<IEnvironmentHelperOptions>): Nullable<EnvironmentHelper> {\r\n    if (EnvironmentHelper) {\r\n        return new EnvironmentHelper(options, this);\r\n    }\r\n    return null;\r\n};\r\n\r\nScene.prototype.createDefaultVRExperience = function (webVROptions: VRExperienceHelperOptions = {}): VRExperienceHelper {\r\n    return new VRExperienceHelper(this, webVROptions);\r\n};\r\n\r\nScene.prototype.createDefaultXRExperienceAsync = function (options: WebXRDefaultExperienceOptions = {}): Promise<WebXRDefaultExperience> {\r\n    return WebXRDefaultExperience.CreateAsync(this, options).then((helper) => {\r\n        return helper;\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}