{"ast":null,"code":"import \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport { RegisterNativeTypeAsync } from \"../../Engines/nativeEngine.js\";\n/** @hidden */\n\nvar NativeXRFrame =\n/** @class */\nfunction () {\n  function NativeXRFrame(_nativeImpl) {\n    var _this = this;\n\n    this._nativeImpl = _nativeImpl;\n    this._xrTransform = new XRRigidTransform();\n    this._xrPose = {\n      transform: this._xrTransform,\n      emulatedPosition: false\n    }; // Enough space for position, orientation\n\n    this._xrPoseVectorData = new Float32Array(4 + 4);\n    this.fillPoses = this._nativeImpl.fillPoses.bind(this._nativeImpl);\n    this.getViewerPose = this._nativeImpl.getViewerPose.bind(this._nativeImpl);\n    this.getHitTestResults = this._nativeImpl.getHitTestResults.bind(this._nativeImpl);\n\n    this.getHitTestResultsForTransientInput = function () {\n      throw new Error(\"XRFrame.getHitTestResultsForTransientInput not supported on native.\");\n    };\n\n    this.createAnchor = this._nativeImpl.createAnchor.bind(this._nativeImpl);\n    this.getJointPose = this._nativeImpl.getJointPose.bind(this._nativeImpl);\n    this.fillJointRadii = this._nativeImpl.fillJointRadii.bind(this._nativeImpl);\n\n    this.getLightEstimate = function () {\n      throw new Error(\"XRFrame.getLightEstimate not supported on native.\");\n    };\n\n    this.getImageTrackingResults = function () {\n      var _a;\n\n      return (_a = _this._nativeImpl._imageTrackingResults) !== null && _a !== void 0 ? _a : [];\n    };\n  }\n\n  Object.defineProperty(NativeXRFrame.prototype, \"session\", {\n    get: function get() {\n      return this._nativeImpl.session;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  NativeXRFrame.prototype.getPose = function (space, baseSpace) {\n    if (!this._nativeImpl.getPoseData(space, baseSpace, this._xrPoseVectorData.buffer, this._xrTransform.matrix.buffer)) {\n      return undefined;\n    }\n\n    var position = this._xrTransform.position;\n    position.x = this._xrPoseVectorData[0];\n    position.y = this._xrPoseVectorData[1];\n    position.z = this._xrPoseVectorData[2];\n    position.w = this._xrPoseVectorData[3];\n    var orientation = this._xrTransform.orientation;\n    orientation.x = this._xrPoseVectorData[4];\n    orientation.y = this._xrPoseVectorData[5];\n    orientation.z = this._xrPoseVectorData[6];\n    orientation.w = this._xrPoseVectorData[7];\n    return this._xrPose;\n  };\n\n  Object.defineProperty(NativeXRFrame.prototype, \"trackedAnchors\", {\n    get: function get() {\n      return this._nativeImpl.trackedAnchors;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NativeXRFrame.prototype, \"worldInformation\", {\n    get: function get() {\n      return this._nativeImpl.worldInformation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NativeXRFrame.prototype, \"detectedPlanes\", {\n    get: function get() {\n      return this._nativeImpl.detectedPlanes;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NativeXRFrame.prototype, \"featurePointCloud\", {\n    get: function get() {\n      return this._nativeImpl.featurePointCloud;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return NativeXRFrame;\n}();\n\nexport { NativeXRFrame };\nRegisterNativeTypeAsync(\"NativeXRFrame\", NativeXRFrame);","map":{"version":3,"mappings":"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","names":["RegisterNativeTypeAsync","_nativeImpl","XRRigidTransform","transform","_xrTransform","emulatedPosition","Float32Array","fillPoses","bind","getViewerPose","getHitTestResults","Error","createAnchor","getJointPose","fillJointRadii","_imageTrackingResults","_a","Object","NativeXRFrame","session","space","baseSpace","getPoseData","_xrPoseVectorData","buffer","matrix","undefined","position","x","y","z","w","orientation","_xrPose","trackedAnchors","worldInformation","detectedPlanes","featurePointCloud"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/XR/native/nativeXRFrame.ts"],"sourcesContent":["import { RegisterNativeTypeAsync } from \"../../Engines/nativeEngine\";\r\n\r\n/** @hidden */\r\ninterface INativeXRFrame extends XRFrame {\r\n    // Native-only helper functions\r\n    getPoseData: (space: XRSpace, baseSpace: XRReferenceSpace, vectorBuffer: ArrayBuffer, matrixBuffer: ArrayBuffer) => XRPose;\r\n    _imageTrackingResults?: XRImageTrackingResult[];\r\n}\r\n\r\n/** @hidden */\r\nexport class NativeXRFrame implements XRFrame {\r\n    private readonly _xrTransform = new XRRigidTransform();\r\n    private readonly _xrPose: XRPose = {\r\n        transform: this._xrTransform,\r\n        emulatedPosition: false,\r\n    };\r\n    // Enough space for position, orientation\r\n    private readonly _xrPoseVectorData = new Float32Array(4 + 4);\r\n\r\n    public get session(): XRSession {\r\n        return this._nativeImpl.session;\r\n    }\r\n\r\n    constructor(private _nativeImpl: INativeXRFrame) {}\r\n\r\n    public getPose(space: XRSpace, baseSpace: XRReferenceSpace): XRPose | undefined {\r\n        if (!this._nativeImpl.getPoseData(space, baseSpace, this._xrPoseVectorData.buffer, this._xrTransform.matrix.buffer)) {\r\n            return undefined;\r\n        }\r\n        const position = this._xrTransform.position as DOMPoint;\r\n        position.x = this._xrPoseVectorData[0];\r\n        position.y = this._xrPoseVectorData[1];\r\n        position.z = this._xrPoseVectorData[2];\r\n        position.w = this._xrPoseVectorData[3];\r\n\r\n        const orientation = this._xrTransform.orientation as DOMPoint;\r\n        orientation.x = this._xrPoseVectorData[4];\r\n        orientation.y = this._xrPoseVectorData[5];\r\n        orientation.z = this._xrPoseVectorData[6];\r\n        orientation.w = this._xrPoseVectorData[7];\r\n        return this._xrPose;\r\n    }\r\n\r\n    public readonly fillPoses = this._nativeImpl.fillPoses!.bind(this._nativeImpl);\r\n\r\n    public readonly getViewerPose = this._nativeImpl.getViewerPose.bind(this._nativeImpl);\r\n\r\n    public readonly getHitTestResults = this._nativeImpl.getHitTestResults.bind(this._nativeImpl);\r\n\r\n    public readonly getHitTestResultsForTransientInput = () => {\r\n        throw new Error(\"XRFrame.getHitTestResultsForTransientInput not supported on native.\");\r\n    };\r\n\r\n    public get trackedAnchors(): XRAnchorSet | undefined {\r\n        return this._nativeImpl.trackedAnchors;\r\n    }\r\n\r\n    public readonly createAnchor = this._nativeImpl.createAnchor!.bind(this._nativeImpl);\r\n\r\n    public get worldInformation(): XRWorldInformation | undefined {\r\n        return this._nativeImpl.worldInformation;\r\n    }\r\n\r\n    public get detectedPlanes(): XRPlaneSet | undefined {\r\n        return this._nativeImpl.detectedPlanes;\r\n    }\r\n\r\n    public readonly getJointPose = this._nativeImpl.getJointPose!.bind(this._nativeImpl);\r\n\r\n    public readonly fillJointRadii = this._nativeImpl.fillJointRadii!.bind(this._nativeImpl);\r\n\r\n    public readonly getLightEstimate = () => {\r\n        throw new Error(\"XRFrame.getLightEstimate not supported on native.\");\r\n    };\r\n\r\n    public get featurePointCloud(): number[] | undefined {\r\n        return this._nativeImpl.featurePointCloud;\r\n    }\r\n\r\n    public readonly getImageTrackingResults = (): XRImageTrackingResult[] => {\r\n        return this._nativeImpl._imageTrackingResults ?? [];\r\n    };\r\n}\r\n\r\nRegisterNativeTypeAsync(\"NativeXRFrame\", NativeXRFrame);\r\n"]},"metadata":{},"sourceType":"module"}