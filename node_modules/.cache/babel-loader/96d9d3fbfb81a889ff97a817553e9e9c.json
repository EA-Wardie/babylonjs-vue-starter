{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { InputBlock } from \"./Input/inputBlock.js\";\n/**\n * Block used to rotate a 2d vector by a given angle\n */\n\nvar Rotate2dBlock =\n/** @class */\nfunction (_super) {\n  __extends(Rotate2dBlock, _super);\n  /**\n   * Creates a new Rotate2dBlock\n   * @param name defines the block name\n   */\n\n\n  function Rotate2dBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Neutral) || this;\n\n    _this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.Vector2);\n\n    _this.registerInput(\"angle\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector2);\n\n    return _this;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  Rotate2dBlock.prototype.getClassName = function () {\n    return \"Rotate2dBlock\";\n  };\n\n  Object.defineProperty(Rotate2dBlock.prototype, \"input\", {\n    /**\n     * Gets the input vector\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Rotate2dBlock.prototype, \"angle\", {\n    /**\n     * Gets the input angle\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Rotate2dBlock.prototype, \"output\", {\n    /**\n     * Gets the output component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Rotate2dBlock.prototype.autoConfigure = function () {\n    if (!this.angle.isConnected) {\n      var angleInput = new InputBlock(\"angle\");\n      angleInput.value = 0;\n      angleInput.output.connectTo(this.angle);\n    }\n  };\n\n  Rotate2dBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var output = this._outputs[0];\n    var angle = this.angle;\n    var input = this.input;\n    state.compilationString += this._declareOutput(output, state) + \" = vec2(cos(\".concat(angle.associatedVariableName, \") * \").concat(input.associatedVariableName, \".x - sin(\").concat(angle.associatedVariableName, \") * \").concat(input.associatedVariableName, \".y, sin(\").concat(angle.associatedVariableName, \") * \").concat(input.associatedVariableName, \".x + cos(\").concat(angle.associatedVariableName, \") * \").concat(input.associatedVariableName, \".y);\\r\\n\");\n    return this;\n  };\n\n  return Rotate2dBlock;\n}(NodeMaterialBlock);\n\nexport { Rotate2dBlock };\nRegisterClass(\"BABYLON.Rotate2dBlock\", Rotate2dBlock);","map":{"version":3,"mappings":";;;AAAA,SAASA,iBAAT,QAAkC,yBAAlC;AACA,SAASC,qCAAT,QAAsD,mDAAtD;AAEA,SAASC,wBAAT,QAAyC,sCAAzC;AAEA,SAASC,aAAT,QAA8B,4BAA9B;AACA,SAASC,UAAT,QAA2B,uBAA3B;AAEA;;;;AAGA;AAAA;AAAA;AAAmCC;AAC/B;;;;;;AAIA,yBAAmBC,IAAnB,EAA+B;AAA/B,gBACIC,kBAAMD,IAAN,EAAYJ,wBAAwB,CAACM,OAArC,KAA6C,IADjD;;AAGIC,SAAI,CAACC,aAAL,CAAmB,OAAnB,EAA4BT,qCAAqC,CAACU,OAAlE;;AACAF,SAAI,CAACC,aAAL,CAAmB,OAAnB,EAA4BT,qCAAqC,CAACW,KAAlE;;AACAH,SAAI,CAACI,cAAL,CAAoB,QAApB,EAA8BZ,qCAAqC,CAACU,OAApE;;;AACH;AAED;;;;;;AAIOG,yCAAP;AACI,WAAO,eAAP;AACH,GAFM;;AAOPC,wBAAWD,uBAAX,EAAW,OAAX,EAAgB;AAHhB;;;SAGA;AACI,aAAO,KAAKE,OAAL,CAAa,CAAb,CAAP;AACH,KAFe;qBAAA;;AAAA,GAAhB;AAOAD,wBAAWD,uBAAX,EAAW,OAAX,EAAgB;AAHhB;;;SAGA;AACI,aAAO,KAAKE,OAAL,CAAa,CAAb,CAAP;AACH,KAFe;qBAAA;;AAAA,GAAhB;AAOAD,wBAAWD,uBAAX,EAAW,QAAX,EAAiB;AAHjB;;;SAGA;AACI,aAAO,KAAKG,QAAL,CAAc,CAAd,CAAP;AACH,KAFgB;qBAAA;;AAAA,GAAjB;;AAIOH,0CAAP;AACI,QAAI,CAAC,KAAKI,KAAL,CAAWC,WAAhB,EAA6B;AACzB,UAAMC,UAAU,GAAG,IAAIhB,UAAJ,CAAe,OAAf,CAAnB;AACAgB,gBAAU,CAACC,KAAX,GAAmB,CAAnB;AACAD,gBAAU,CAACE,MAAX,CAAkBC,SAAlB,CAA4B,KAAKL,KAAjC;AACH;AACJ,GANM;;AAQGJ,wCAAV,UAAsBU,KAAtB,EAAmD;AAC/CjB,qBAAMkB,WAAN,CAAiBC,IAAjB,CAAiB,IAAjB,EAAkBF,KAAlB;;AAEA,QAAMF,MAAM,GAAG,KAAKL,QAAL,CAAc,CAAd,CAAf;AACA,QAAMC,KAAK,GAAG,KAAKA,KAAnB;AACA,QAAMS,KAAK,GAAG,KAAKA,KAAnB;AAEAH,SAAK,CAACI,iBAAN,IACI,KAAKC,cAAL,CAAoBP,MAApB,EAA4BE,KAA5B,IACA,sBAAeN,KAAK,CAACY,sBAArB,EAA2C,MAA3C,EAA2CC,MAA3C,CAAkDJ,KAAK,CAACG,sBAAxD,EAA8E,WAA9E,EAA8EC,MAA9E,CAA0Fb,KAAK,CAACY,sBAAhG,EAAsH,MAAtH,EAAsHC,MAAtH,CAA6HJ,KAAK,CAACG,sBAAnI,EAAyJ,UAAzJ,EAAyJC,MAAzJ,CAAoKb,KAAK,CAACY,sBAA1K,EAAgM,MAAhM,EAAgMC,MAAhM,CAAuMJ,KAAK,CAACG,sBAA7M,EAAmO,WAAnO,EAAmOC,MAAnO,CAA+Ob,KAAK,CAACY,sBAArP,EAA2Q,MAA3Q,EAA2QC,MAA3Q,CAAkRJ,KAAK,CAACG,sBAAxR,EAA8S,UAA9S,CAFJ;AAIA,WAAO,IAAP;AACH,GAZS;;AAad;AAAC,CA/DD,CAAmC9B,iBAAnC;;;AAiEAG,aAAa,CAAC,uBAAD,EAA0BW,aAA1B,CAAb","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","InputBlock","__extends","name","_super","Neutral","_this","registerInput","Vector2","Float","registerOutput","Rotate2dBlock","Object","_inputs","_outputs","angle","isConnected","angleInput","value","output","connectTo","state","_buildBlock","call","input","compilationString","_declareOutput","associatedVariableName","concat"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Node/Blocks/rotate2dBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { InputBlock } from \"./Input/inputBlock\";\r\n\r\n/**\r\n * Block used to rotate a 2d vector by a given angle\r\n */\r\nexport class Rotate2dBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Creates a new Rotate2dBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.Vector2);\r\n        this.registerInput(\"angle\", NodeMaterialBlockConnectionPointTypes.Float);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector2);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"Rotate2dBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the input vector\r\n     */\r\n    public get input(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the input angle\r\n     */\r\n    public get angle(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public autoConfigure() {\r\n        if (!this.angle.isConnected) {\r\n            const angleInput = new InputBlock(\"angle\");\r\n            angleInput.value = 0;\r\n            angleInput.output.connectTo(this.angle);\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const output = this._outputs[0];\r\n        const angle = this.angle;\r\n        const input = this.input;\r\n\r\n        state.compilationString +=\r\n            this._declareOutput(output, state) +\r\n            ` = vec2(cos(${angle.associatedVariableName}) * ${input.associatedVariableName}.x - sin(${angle.associatedVariableName}) * ${input.associatedVariableName}.y, sin(${angle.associatedVariableName}) * ${input.associatedVariableName}.x + cos(${angle.associatedVariableName}) * ${input.associatedVariableName}.y);\\r\\n`;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.Rotate2dBlock\", Rotate2dBlock);\r\n"]},"metadata":{},"sourceType":"module"}