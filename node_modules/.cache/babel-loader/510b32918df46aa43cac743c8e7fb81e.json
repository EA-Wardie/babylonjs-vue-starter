{"ast":null,"code":"import \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { __extends } from \"tslib\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/fxaa.fragment.js\";\nimport \"../Shaders/fxaa.vertex.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * Fxaa post process\n * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#fxaa\n */\n\nvar FxaaPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(FxaaPostProcess, _super);\n\n  function FxaaPostProcess(name, options, camera, samplingMode, engine, reusable, textureType) {\n    if (camera === void 0) {\n      camera = null;\n    }\n\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    var _this = _super.call(this, name, \"fxaa\", [\"texelSize\"], null, options, camera, samplingMode || Texture.BILINEAR_SAMPLINGMODE, engine, reusable, null, textureType, \"fxaa\", undefined, true) || this;\n\n    var defines = _this._getDefines();\n\n    _this.updateEffect(defines);\n\n    _this.onApplyObservable.add(function (effect) {\n      var texelSize = _this.texelSize;\n      effect.setFloat2(\"texelSize\", texelSize.x, texelSize.y);\n    });\n\n    return _this;\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"FxaaPostProcess\" string\n   */\n\n\n  FxaaPostProcess.prototype.getClassName = function () {\n    return \"FxaaPostProcess\";\n  };\n\n  FxaaPostProcess.prototype._getDefines = function () {\n    var engine = this.getEngine();\n\n    if (!engine) {\n      return null;\n    }\n\n    var glInfo = engine.getGlInfo();\n\n    if (glInfo && glInfo.renderer && glInfo.renderer.toLowerCase().indexOf(\"mali\") > -1) {\n      return \"#define MALI 1\\n\";\n    }\n\n    return null;\n  };\n  /**\n   * @param parsedPostProcess\n   * @param targetCamera\n   * @param scene\n   * @param rootUrl\n   * @hidden\n   */\n\n\n  FxaaPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new FxaaPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  return FxaaPostProcess;\n}(PostProcess);\n\nexport { FxaaPostProcess };\nRegisterClass(\"BABYLON.FxaaPostProcess\", FxaaPostProcess);","map":{"version":3,"mappings":";;;AAGA,SAASA,OAAT,QAAwB,kCAAxB;AAEA,SAASC,WAAT,QAA4B,kBAA5B;AAIA,OAAO,6BAAP;AACA,OAAO,2BAAP;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,mBAAT,QAAoC,uBAApC;AAGA;;;;;AAIA;AAAA;AAAA;AAAqCC;;AASjC,2BACIC,IADJ,EAEIC,OAFJ,EAGIC,MAHJ,EAIIC,YAJJ,EAKIC,MALJ,EAMIC,QANJ,EAOIC,WAPJ,EAO4D;AAJxD;AAAAJ;AAA+B;;AAI/B;AAAAI,oBAAsB,CAAtB;AAAsB;;AAP1B,gBASIC,kBAAMP,IAAN,EAAY,MAAZ,EAAoB,CAAC,WAAD,CAApB,EAAmC,IAAnC,EAAyCC,OAAzC,EAAkDC,MAAlD,EAA0DC,YAAY,IAAIR,OAAO,CAACa,qBAAlF,EAAyGJ,MAAzG,EAAiHC,QAAjH,EAA2H,IAA3H,EAAiIC,WAAjI,EAA8I,MAA9I,EAAsJG,SAAtJ,EAAiK,IAAjK,KAAsK,IAT1K;;AAWI,QAAMC,OAAO,GAAGC,KAAI,CAACC,WAAL,EAAhB;;AACAD,SAAI,CAACE,YAAL,CAAkBH,OAAlB;;AAEAC,SAAI,CAACG,iBAAL,CAAuBC,GAAvB,CAA2B,UAACC,MAAD,EAAe;AACtC,UAAMC,SAAS,GAAGN,KAAI,CAACM,SAAvB;AACAD,YAAM,CAACE,SAAP,CAAiB,WAAjB,EAA8BD,SAAS,CAACE,CAAxC,EAA2CF,SAAS,CAACG,CAArD;AACH,KAHD;;;AAIH;AA1BD;;;;;;AAIOC,2CAAP;AACI,WAAO,iBAAP;AACH,GAFM;;AAwBCA,0CAAR;AACI,QAAMjB,MAAM,GAAG,KAAKkB,SAAL,EAAf;;AACA,QAAI,CAAClB,MAAL,EAAa;AACT,aAAO,IAAP;AACH;;AAED,QAAMmB,MAAM,GAAGnB,MAAM,CAACoB,SAAP,EAAf;;AACA,QAAID,MAAM,IAAIA,MAAM,CAACE,QAAjB,IAA6BF,MAAM,CAACE,QAAP,CAAgBC,WAAhB,GAA8BC,OAA9B,CAAsC,MAAtC,IAAgD,CAAC,CAAlF,EAAqF;AACjF,aAAO,kBAAP;AACH;;AAED,WAAO,IAAP;AACH,GAZO;AAcR;;;;;;;;;AAOcN,2BAAd,UAAqBO,iBAArB,EAA6CC,YAA7C,EAAmEC,KAAnE,EAAiFC,OAAjF,EAAgG;AAC5F,WAAOjC,mBAAmB,CAACkC,KAApB,CACH;AACI,aAAO,IAAIX,eAAJ,CACHO,iBAAiB,CAAC5B,IADf,EAEH4B,iBAAiB,CAAC3B,OAFf,EAGH4B,YAHG,EAIHD,iBAAiB,CAACK,wBAJf,EAKHH,KAAK,CAACR,SAAN,EALG,EAMHM,iBAAiB,CAACvB,QANf,CAAP;AAQH,KAVE,EAWHuB,iBAXG,EAYHE,KAZG,EAaHC,OAbG,CAAP;AAeH,GAhBa;;AAiBlB;AAAC,CAnED,CAAqCnC,WAArC;;;AAqEAC,aAAa,CAAC,yBAAD,EAA4BwB,eAA5B,CAAb","names":["Texture","PostProcess","RegisterClass","SerializationHelper","__extends","name","options","camera","samplingMode","engine","reusable","textureType","_super","BILINEAR_SAMPLINGMODE","undefined","defines","_this","_getDefines","updateEffect","onApplyObservable","add","effect","texelSize","setFloat2","x","y","FxaaPostProcess","getEngine","glInfo","getGlInfo","renderer","toLowerCase","indexOf","parsedPostProcess","targetCamera","scene","rootUrl","Parse","renderTargetSamplingMode"],"sourceRoot":"","sources":["../../../../../lts/core/generated/PostProcesses/fxaaPostProcess.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/fxaa.fragment\";\r\nimport \"../Shaders/fxaa.vertex\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { SerializationHelper } from \"../Misc/decorators\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n/**\r\n * Fxaa post process\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#fxaa\r\n */\r\nexport class FxaaPostProcess extends PostProcess {\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"FxaaPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"FxaaPostProcess\";\r\n    }\r\n\r\n    constructor(\r\n        name: string,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera> = null,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT\r\n    ) {\r\n        super(name, \"fxaa\", [\"texelSize\"], null, options, camera, samplingMode || Texture.BILINEAR_SAMPLINGMODE, engine, reusable, null, textureType, \"fxaa\", undefined, true);\r\n\r\n        const defines = this._getDefines();\r\n        this.updateEffect(defines);\r\n\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            const texelSize = this.texelSize;\r\n            effect.setFloat2(\"texelSize\", texelSize.x, texelSize.y);\r\n        });\r\n    }\r\n\r\n    private _getDefines(): Nullable<string> {\r\n        const engine = this.getEngine();\r\n        if (!engine) {\r\n            return null;\r\n        }\r\n\r\n        const glInfo = engine.getGlInfo();\r\n        if (glInfo && glInfo.renderer && glInfo.renderer.toLowerCase().indexOf(\"mali\") > -1) {\r\n            return \"#define MALI 1\\n\";\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @param parsedPostProcess\r\n     * @param targetCamera\r\n     * @param scene\r\n     * @param rootUrl\r\n     * @hidden\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string) {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new FxaaPostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    scene.getEngine(),\r\n                    parsedPostProcess.reusable\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.FxaaPostProcess\", FxaaPostProcess);\r\n"]},"metadata":{},"sourceType":"module"}