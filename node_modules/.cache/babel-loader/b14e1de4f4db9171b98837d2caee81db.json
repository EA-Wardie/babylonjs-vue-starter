{"ast":null,"code":"import \"core-js/modules/es.parse-float.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\n\n/**\n * Class for storing data to local storage if available or in-memory storage otherwise\n */\nvar DataStorage =\n/** @class */\nfunction () {\n  function DataStorage() {}\n\n  DataStorage._GetStorage = function () {\n    try {\n      localStorage.setItem(\"test\", \"\");\n      localStorage.removeItem(\"test\");\n      return localStorage;\n    } catch (_a) {\n      var inMemoryStorage_1 = {};\n      return {\n        getItem: function getItem(key) {\n          var value = inMemoryStorage_1[key];\n          return value === undefined ? null : value;\n        },\n        setItem: function setItem(key, value) {\n          inMemoryStorage_1[key] = value;\n        }\n      };\n    }\n  };\n  /**\n   * Reads a string from the data storage\n   * @param key The key to read\n   * @param defaultValue The value if the key doesn't exist\n   * @returns The string value\n   */\n\n\n  DataStorage.ReadString = function (key, defaultValue) {\n    var value = this._Storage.getItem(key);\n\n    return value !== null ? value : defaultValue;\n  };\n  /**\n   * Writes a string to the data storage\n   * @param key The key to write\n   * @param value The value to write\n   */\n\n\n  DataStorage.WriteString = function (key, value) {\n    this._Storage.setItem(key, value);\n  };\n  /**\n   * Reads a boolean from the data storage\n   * @param key The key to read\n   * @param defaultValue The value if the key doesn't exist\n   * @returns The boolean value\n   */\n\n\n  DataStorage.ReadBoolean = function (key, defaultValue) {\n    var value = this._Storage.getItem(key);\n\n    return value !== null ? value === \"true\" : defaultValue;\n  };\n  /**\n   * Writes a boolean to the data storage\n   * @param key The key to write\n   * @param value The value to write\n   */\n\n\n  DataStorage.WriteBoolean = function (key, value) {\n    this._Storage.setItem(key, value ? \"true\" : \"false\");\n  };\n  /**\n   * Reads a number from the data storage\n   * @param key The key to read\n   * @param defaultValue The value if the key doesn't exist\n   * @returns The number value\n   */\n\n\n  DataStorage.ReadNumber = function (key, defaultValue) {\n    var value = this._Storage.getItem(key);\n\n    return value !== null ? parseFloat(value) : defaultValue;\n  };\n  /**\n   * Writes a number to the data storage\n   * @param key The key to write\n   * @param value The value to write\n   */\n\n\n  DataStorage.WriteNumber = function (key, value) {\n    this._Storage.setItem(key, value.toString());\n  };\n\n  DataStorage._Storage = DataStorage._GetStorage();\n  return DataStorage;\n}();\n\nexport { DataStorage };","map":{"version":3,"mappings":";;;;;;AAKA;;;AAGA;AAAA;AAAA;AAAA,0BAiFC;;AA9EkBA,4BAAf;AACI,QAAI;AACAC,kBAAY,CAACC,OAAb,CAAqB,MAArB,EAA6B,EAA7B;AACAD,kBAAY,CAACE,UAAb,CAAwB,MAAxB;AACA,aAAOF,YAAP;AACH,KAJD,CAIE,WAAM;AACJ,UAAMG,iBAAe,GAA8B,EAAnD;AACA,aAAO;AACHC,eAAO,EAAE,iBAACC,GAAD,EAAI;AACT,cAAMC,KAAK,GAAGH,iBAAe,CAACE,GAAD,CAA7B;AACA,iBAAOC,KAAK,KAAKC,SAAV,GAAsB,IAAtB,GAA6BD,KAApC;AACH,SAJE;AAKHL,eAAO,EAAE,iBAACI,GAAD,EAAMC,KAAN,EAAW;AAChBH,2BAAe,CAACE,GAAD,CAAf,GAAuBC,KAAvB;AACH;AAPE,OAAP;AASH;AACJ,GAjBc;AAmBf;;;;;;;;AAMcP,2BAAd,UAAyBM,GAAzB,EAAsCG,YAAtC,EAA0D;AACtD,QAAMF,KAAK,GAAG,KAAKG,QAAL,CAAcL,OAAd,CAAsBC,GAAtB,CAAd;;AACA,WAAOC,KAAK,KAAK,IAAV,GAAiBA,KAAjB,GAAyBE,YAAhC;AACH,GAHa;AAKd;;;;;;;AAKcT,4BAAd,UAA0BM,GAA1B,EAAuCC,KAAvC,EAAoD;AAChD,SAAKG,QAAL,CAAcR,OAAd,CAAsBI,GAAtB,EAA2BC,KAA3B;AACH,GAFa;AAId;;;;;;;;AAMcP,4BAAd,UAA0BM,GAA1B,EAAuCG,YAAvC,EAA4D;AACxD,QAAMF,KAAK,GAAG,KAAKG,QAAL,CAAcL,OAAd,CAAsBC,GAAtB,CAAd;;AACA,WAAOC,KAAK,KAAK,IAAV,GAAiBA,KAAK,KAAK,MAA3B,GAAoCE,YAA3C;AACH,GAHa;AAKd;;;;;;;AAKcT,6BAAd,UAA2BM,GAA3B,EAAwCC,KAAxC,EAAsD;AAClD,SAAKG,QAAL,CAAcR,OAAd,CAAsBI,GAAtB,EAA2BC,KAAK,GAAG,MAAH,GAAY,OAA5C;AACH,GAFa;AAId;;;;;;;;AAMcP,2BAAd,UAAyBM,GAAzB,EAAsCG,YAAtC,EAA0D;AACtD,QAAMF,KAAK,GAAG,KAAKG,QAAL,CAAcL,OAAd,CAAsBC,GAAtB,CAAd;;AACA,WAAOC,KAAK,KAAK,IAAV,GAAiBI,UAAU,CAACJ,KAAD,CAA3B,GAAqCE,YAA5C;AACH,GAHa;AAKd;;;;;;;AAKcT,4BAAd,UAA0BM,GAA1B,EAAuCC,KAAvC,EAAoD;AAChD,SAAKG,QAAL,CAAcR,OAAd,CAAsBI,GAAtB,EAA2BC,KAAK,CAACK,QAAN,EAA3B;AACH,GAFa;;AA7ECZ,yBAAqBA,WAAW,CAACa,WAAZ,EAArB;AAgFnB;AAAC,CAjFD;;SAAab","names":["DataStorage","localStorage","setItem","removeItem","inMemoryStorage_1","getItem","key","value","undefined","defaultValue","_Storage","parseFloat","toString","_GetStorage"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Misc/dataStorage.ts"],"sourcesContent":["interface IStorage {\r\n    getItem: (key: string) => string | null;\r\n    setItem: (key: string, value: string) => void;\r\n}\r\n\r\n/**\r\n * Class for storing data to local storage if available or in-memory storage otherwise\r\n */\r\nexport class DataStorage {\r\n    private static _Storage: IStorage = DataStorage._GetStorage();\r\n\r\n    private static _GetStorage(): IStorage {\r\n        try {\r\n            localStorage.setItem(\"test\", \"\");\r\n            localStorage.removeItem(\"test\");\r\n            return localStorage;\r\n        } catch {\r\n            const inMemoryStorage: { [key: string]: string } = {};\r\n            return {\r\n                getItem: (key) => {\r\n                    const value = inMemoryStorage[key];\r\n                    return value === undefined ? null : value;\r\n                },\r\n                setItem: (key, value) => {\r\n                    inMemoryStorage[key] = value;\r\n                },\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reads a string from the data storage\r\n     * @param key The key to read\r\n     * @param defaultValue The value if the key doesn't exist\r\n     * @returns The string value\r\n     */\r\n    public static ReadString(key: string, defaultValue: string): string {\r\n        const value = this._Storage.getItem(key);\r\n        return value !== null ? value : defaultValue;\r\n    }\r\n\r\n    /**\r\n     * Writes a string to the data storage\r\n     * @param key The key to write\r\n     * @param value The value to write\r\n     */\r\n    public static WriteString(key: string, value: string): void {\r\n        this._Storage.setItem(key, value);\r\n    }\r\n\r\n    /**\r\n     * Reads a boolean from the data storage\r\n     * @param key The key to read\r\n     * @param defaultValue The value if the key doesn't exist\r\n     * @returns The boolean value\r\n     */\r\n    public static ReadBoolean(key: string, defaultValue: boolean): boolean {\r\n        const value = this._Storage.getItem(key);\r\n        return value !== null ? value === \"true\" : defaultValue;\r\n    }\r\n\r\n    /**\r\n     * Writes a boolean to the data storage\r\n     * @param key The key to write\r\n     * @param value The value to write\r\n     */\r\n    public static WriteBoolean(key: string, value: boolean) {\r\n        this._Storage.setItem(key, value ? \"true\" : \"false\");\r\n    }\r\n\r\n    /**\r\n     * Reads a number from the data storage\r\n     * @param key The key to read\r\n     * @param defaultValue The value if the key doesn't exist\r\n     * @returns The number value\r\n     */\r\n    public static ReadNumber(key: string, defaultValue: number): number {\r\n        const value = this._Storage.getItem(key);\r\n        return value !== null ? parseFloat(value) : defaultValue;\r\n    }\r\n\r\n    /**\r\n     * Writes a number to the data storage\r\n     * @param key The key to write\r\n     * @param value The value to write\r\n     */\r\n    public static WriteNumber(key: string, value: number) {\r\n        this._Storage.setItem(key, value.toString());\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}