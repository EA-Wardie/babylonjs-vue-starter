{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport { __extends } from \"tslib\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Gamepad } from \"./gamepad.js\";\n/**\n * Defines supported buttons for DualShock compatible gamepads\n */\n\nexport var DualShockButton;\n\n(function (DualShockButton) {\n  /** Cross */\n  DualShockButton[DualShockButton[\"Cross\"] = 0] = \"Cross\";\n  /** Circle */\n\n  DualShockButton[DualShockButton[\"Circle\"] = 1] = \"Circle\";\n  /** Square */\n\n  DualShockButton[DualShockButton[\"Square\"] = 2] = \"Square\";\n  /** Triangle */\n\n  DualShockButton[DualShockButton[\"Triangle\"] = 3] = \"Triangle\";\n  /** L1 */\n\n  DualShockButton[DualShockButton[\"L1\"] = 4] = \"L1\";\n  /** R1 */\n\n  DualShockButton[DualShockButton[\"R1\"] = 5] = \"R1\";\n  /** Share */\n\n  DualShockButton[DualShockButton[\"Share\"] = 8] = \"Share\";\n  /** Options */\n\n  DualShockButton[DualShockButton[\"Options\"] = 9] = \"Options\";\n  /** Left stick */\n\n  DualShockButton[DualShockButton[\"LeftStick\"] = 10] = \"LeftStick\";\n  /** Right stick */\n\n  DualShockButton[DualShockButton[\"RightStick\"] = 11] = \"RightStick\";\n})(DualShockButton || (DualShockButton = {}));\n/** Defines values for DualShock DPad  */\n\n\nexport var DualShockDpad;\n\n(function (DualShockDpad) {\n  /** Up */\n  DualShockDpad[DualShockDpad[\"Up\"] = 12] = \"Up\";\n  /** Down */\n\n  DualShockDpad[DualShockDpad[\"Down\"] = 13] = \"Down\";\n  /** Left */\n\n  DualShockDpad[DualShockDpad[\"Left\"] = 14] = \"Left\";\n  /** Right */\n\n  DualShockDpad[DualShockDpad[\"Right\"] = 15] = \"Right\";\n})(DualShockDpad || (DualShockDpad = {}));\n/**\n * Defines a DualShock gamepad\n */\n\n\nvar DualShockPad =\n/** @class */\nfunction (_super) {\n  __extends(DualShockPad, _super);\n  /**\n   * Creates a new DualShock gamepad object\n   * @param id defines the id of this gamepad\n   * @param index defines its index\n   * @param gamepad defines the internal HTML gamepad object\n   */\n\n\n  function DualShockPad(id, index, gamepad) {\n    var _this = _super.call(this, id.replace(\"STANDARD GAMEPAD\", \"SONY PLAYSTATION DUALSHOCK\"), index, gamepad, 0, 1, 2, 3) || this;\n\n    _this._leftTrigger = 0;\n    _this._rightTrigger = 0;\n    /** Observable raised when a button is pressed */\n\n    _this.onButtonDownObservable = new Observable();\n    /** Observable raised when a button is released */\n\n    _this.onButtonUpObservable = new Observable();\n    /** Observable raised when a pad is pressed */\n\n    _this.onPadDownObservable = new Observable();\n    /** Observable raised when a pad is released */\n\n    _this.onPadUpObservable = new Observable();\n    _this._buttonCross = 0;\n    _this._buttonCircle = 0;\n    _this._buttonSquare = 0;\n    _this._buttonTriangle = 0;\n    _this._buttonShare = 0;\n    _this._buttonOptions = 0;\n    _this._buttonL1 = 0;\n    _this._buttonR1 = 0;\n    _this._buttonLeftStick = 0;\n    _this._buttonRightStick = 0;\n    _this._dPadUp = 0;\n    _this._dPadDown = 0;\n    _this._dPadLeft = 0;\n    _this._dPadRight = 0;\n    _this.type = Gamepad.DUALSHOCK;\n    return _this;\n  }\n  /**\n   * Defines the callback to call when left trigger is pressed\n   * @param callback defines the callback to use\n   */\n\n\n  DualShockPad.prototype.onlefttriggerchanged = function (callback) {\n    this._onlefttriggerchanged = callback;\n  };\n  /**\n   * Defines the callback to call when right trigger is pressed\n   * @param callback defines the callback to use\n   */\n\n\n  DualShockPad.prototype.onrighttriggerchanged = function (callback) {\n    this._onrighttriggerchanged = callback;\n  };\n\n  Object.defineProperty(DualShockPad.prototype, \"leftTrigger\", {\n    /**\n     * Gets the left trigger value\n     */\n    get: function get() {\n      return this._leftTrigger;\n    },\n\n    /**\n     * Sets the left trigger value\n     */\n    set: function set(newValue) {\n      if (this._onlefttriggerchanged && this._leftTrigger !== newValue) {\n        this._onlefttriggerchanged(newValue);\n      }\n\n      this._leftTrigger = newValue;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"rightTrigger\", {\n    /**\n     * Gets the right trigger value\n     */\n    get: function get() {\n      return this._rightTrigger;\n    },\n\n    /**\n     * Sets the right trigger value\n     */\n    set: function set(newValue) {\n      if (this._onrighttriggerchanged && this._rightTrigger !== newValue) {\n        this._onrighttriggerchanged(newValue);\n      }\n\n      this._rightTrigger = newValue;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Defines the callback to call when a button is pressed\n   * @param callback defines the callback to use\n   */\n\n  DualShockPad.prototype.onbuttondown = function (callback) {\n    this._onbuttondown = callback;\n  };\n  /**\n   * Defines the callback to call when a button is released\n   * @param callback defines the callback to use\n   */\n\n\n  DualShockPad.prototype.onbuttonup = function (callback) {\n    this._onbuttonup = callback;\n  };\n  /**\n   * Defines the callback to call when a pad is pressed\n   * @param callback defines the callback to use\n   */\n\n\n  DualShockPad.prototype.ondpaddown = function (callback) {\n    this._ondpaddown = callback;\n  };\n  /**\n   * Defines the callback to call when a pad is released\n   * @param callback defines the callback to use\n   */\n\n\n  DualShockPad.prototype.ondpadup = function (callback) {\n    this._ondpadup = callback;\n  };\n\n  DualShockPad.prototype._setButtonValue = function (newValue, currentValue, buttonType) {\n    if (newValue !== currentValue) {\n      if (newValue === 1) {\n        if (this._onbuttondown) {\n          this._onbuttondown(buttonType);\n        }\n\n        this.onButtonDownObservable.notifyObservers(buttonType);\n      }\n\n      if (newValue === 0) {\n        if (this._onbuttonup) {\n          this._onbuttonup(buttonType);\n        }\n\n        this.onButtonUpObservable.notifyObservers(buttonType);\n      }\n    }\n\n    return newValue;\n  };\n\n  DualShockPad.prototype._setDPadValue = function (newValue, currentValue, buttonType) {\n    if (newValue !== currentValue) {\n      if (newValue === 1) {\n        if (this._ondpaddown) {\n          this._ondpaddown(buttonType);\n        }\n\n        this.onPadDownObservable.notifyObservers(buttonType);\n      }\n\n      if (newValue === 0) {\n        if (this._ondpadup) {\n          this._ondpadup(buttonType);\n        }\n\n        this.onPadUpObservable.notifyObservers(buttonType);\n      }\n    }\n\n    return newValue;\n  };\n\n  Object.defineProperty(DualShockPad.prototype, \"buttonCross\", {\n    /**\n     * Gets the value of the `Cross` button\n     */\n    get: function get() {\n      return this._buttonCross;\n    },\n\n    /**\n     * Sets the value of the `Cross` button\n     */\n    set: function set(value) {\n      this._buttonCross = this._setButtonValue(value, this._buttonCross, DualShockButton.Cross);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"buttonCircle\", {\n    /**\n     * Gets the value of the `Circle` button\n     */\n    get: function get() {\n      return this._buttonCircle;\n    },\n\n    /**\n     * Sets the value of the `Circle` button\n     */\n    set: function set(value) {\n      this._buttonCircle = this._setButtonValue(value, this._buttonCircle, DualShockButton.Circle);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"buttonSquare\", {\n    /**\n     * Gets the value of the `Square` button\n     */\n    get: function get() {\n      return this._buttonSquare;\n    },\n\n    /**\n     * Sets the value of the `Square` button\n     */\n    set: function set(value) {\n      this._buttonSquare = this._setButtonValue(value, this._buttonSquare, DualShockButton.Square);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"buttonTriangle\", {\n    /**\n     * Gets the value of the `Triangle` button\n     */\n    get: function get() {\n      return this._buttonTriangle;\n    },\n\n    /**\n     * Sets the value of the `Triangle` button\n     */\n    set: function set(value) {\n      this._buttonTriangle = this._setButtonValue(value, this._buttonTriangle, DualShockButton.Triangle);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"buttonOptions\", {\n    /**\n     * Gets the value of the `Options` button\n     */\n    get: function get() {\n      return this._buttonOptions;\n    },\n\n    /**\n     * Sets the value of the `Options` button\n     */\n    set: function set(value) {\n      this._buttonOptions = this._setButtonValue(value, this._buttonOptions, DualShockButton.Options);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"buttonShare\", {\n    /**\n     * Gets the value of the `Share` button\n     */\n    get: function get() {\n      return this._buttonShare;\n    },\n\n    /**\n     * Sets the value of the `Share` button\n     */\n    set: function set(value) {\n      this._buttonShare = this._setButtonValue(value, this._buttonShare, DualShockButton.Share);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"buttonL1\", {\n    /**\n     * Gets the value of the `L1` button\n     */\n    get: function get() {\n      return this._buttonL1;\n    },\n\n    /**\n     * Sets the value of the `L1` button\n     */\n    set: function set(value) {\n      this._buttonL1 = this._setButtonValue(value, this._buttonL1, DualShockButton.L1);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"buttonR1\", {\n    /**\n     * Gets the value of the `R1` button\n     */\n    get: function get() {\n      return this._buttonR1;\n    },\n\n    /**\n     * Sets the value of the `R1` button\n     */\n    set: function set(value) {\n      this._buttonR1 = this._setButtonValue(value, this._buttonR1, DualShockButton.R1);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"buttonLeftStick\", {\n    /**\n     * Gets the value of the Left joystick\n     */\n    get: function get() {\n      return this._buttonLeftStick;\n    },\n\n    /**\n     * Sets the value of the Left joystick\n     */\n    set: function set(value) {\n      this._buttonLeftStick = this._setButtonValue(value, this._buttonLeftStick, DualShockButton.LeftStick);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"buttonRightStick\", {\n    /**\n     * Gets the value of the Right joystick\n     */\n    get: function get() {\n      return this._buttonRightStick;\n    },\n\n    /**\n     * Sets the value of the Right joystick\n     */\n    set: function set(value) {\n      this._buttonRightStick = this._setButtonValue(value, this._buttonRightStick, DualShockButton.RightStick);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"dPadUp\", {\n    /**\n     * Gets the value of D-pad up\n     */\n    get: function get() {\n      return this._dPadUp;\n    },\n\n    /**\n     * Sets the value of D-pad up\n     */\n    set: function set(value) {\n      this._dPadUp = this._setDPadValue(value, this._dPadUp, DualShockDpad.Up);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"dPadDown\", {\n    /**\n     * Gets the value of D-pad down\n     */\n    get: function get() {\n      return this._dPadDown;\n    },\n\n    /**\n     * Sets the value of D-pad down\n     */\n    set: function set(value) {\n      this._dPadDown = this._setDPadValue(value, this._dPadDown, DualShockDpad.Down);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"dPadLeft\", {\n    /**\n     * Gets the value of D-pad left\n     */\n    get: function get() {\n      return this._dPadLeft;\n    },\n\n    /**\n     * Sets the value of D-pad left\n     */\n    set: function set(value) {\n      this._dPadLeft = this._setDPadValue(value, this._dPadLeft, DualShockDpad.Left);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"dPadRight\", {\n    /**\n     * Gets the value of D-pad right\n     */\n    get: function get() {\n      return this._dPadRight;\n    },\n\n    /**\n     * Sets the value of D-pad right\n     */\n    set: function set(value) {\n      this._dPadRight = this._setDPadValue(value, this._dPadRight, DualShockDpad.Right);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Force the gamepad to synchronize with device values\n   */\n\n  DualShockPad.prototype.update = function () {\n    _super.prototype.update.call(this);\n\n    this.buttonCross = this.browserGamepad.buttons[0].value;\n    this.buttonCircle = this.browserGamepad.buttons[1].value;\n    this.buttonSquare = this.browserGamepad.buttons[2].value;\n    this.buttonTriangle = this.browserGamepad.buttons[3].value;\n    this.buttonL1 = this.browserGamepad.buttons[4].value;\n    this.buttonR1 = this.browserGamepad.buttons[5].value;\n    this.leftTrigger = this.browserGamepad.buttons[6].value;\n    this.rightTrigger = this.browserGamepad.buttons[7].value;\n    this.buttonShare = this.browserGamepad.buttons[8].value;\n    this.buttonOptions = this.browserGamepad.buttons[9].value;\n    this.buttonLeftStick = this.browserGamepad.buttons[10].value;\n    this.buttonRightStick = this.browserGamepad.buttons[11].value;\n    this.dPadUp = this.browserGamepad.buttons[12].value;\n    this.dPadDown = this.browserGamepad.buttons[13].value;\n    this.dPadLeft = this.browserGamepad.buttons[14].value;\n    this.dPadRight = this.browserGamepad.buttons[15].value;\n  };\n  /**\n   * Disposes the gamepad\n   */\n\n\n  DualShockPad.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.onButtonDownObservable.clear();\n    this.onButtonUpObservable.clear();\n    this.onPadDownObservable.clear();\n    this.onPadUpObservable.clear();\n  };\n\n  return DualShockPad;\n}(Gamepad);\n\nexport { DualShockPad };","map":{"version":3,"mappings":"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","names":["Observable","Gamepad","DualShockButton","DualShockDpad","__extends","id","index","gamepad","_super","replace","_this","type","DUALSHOCK","DualShockPad","callback","_onlefttriggerchanged","_onrighttriggerchanged","Object","_leftTrigger","newValue","_rightTrigger","_onbuttondown","_onbuttonup","_ondpaddown","_ondpadup","currentValue","buttonType","onButtonDownObservable","notifyObservers","onButtonUpObservable","onPadDownObservable","onPadUpObservable","_buttonCross","value","_setButtonValue","Cross","_buttonCircle","Circle","_buttonSquare","Square","_buttonTriangle","Triangle","_buttonOptions","Options","_buttonShare","Share","_buttonL1","L1","_buttonR1","R1","_buttonLeftStick","LeftStick","_buttonRightStick","RightStick","_dPadUp","_setDPadValue","Up","_dPadDown","Down","_dPadLeft","Left","_dPadRight","Right","update","call","buttonCross","browserGamepad","buttons","buttonCircle","buttonSquare","buttonTriangle","buttonL1","buttonR1","leftTrigger","rightTrigger","buttonShare","buttonOptions","buttonLeftStick","buttonRightStick","dPadUp","dPadDown","dPadLeft","dPadRight","dispose","clear"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Gamepads/dualShockGamepad.ts"],"sourcesContent":["import { Observable } from \"../Misc/observable\";\r\nimport { Gamepad } from \"./gamepad\";\r\n\r\n/**\r\n * Defines supported buttons for DualShock compatible gamepads\r\n */\r\nexport enum DualShockButton {\r\n    /** Cross */\r\n    Cross = 0,\r\n    /** Circle */\r\n    Circle = 1,\r\n    /** Square */\r\n    Square = 2,\r\n    /** Triangle */\r\n    Triangle = 3,\r\n    /** L1 */\r\n    L1 = 4,\r\n    /** R1 */\r\n    R1 = 5,\r\n    /** Share */\r\n    Share = 8,\r\n    /** Options */\r\n    Options = 9,\r\n    /** Left stick */\r\n    LeftStick = 10,\r\n    /** Right stick */\r\n    RightStick = 11,\r\n}\r\n\r\n/** Defines values for DualShock DPad  */\r\nexport enum DualShockDpad {\r\n    /** Up */\r\n    Up = 12,\r\n    /** Down */\r\n    Down = 13,\r\n    /** Left */\r\n    Left = 14,\r\n    /** Right */\r\n    Right = 15,\r\n}\r\n\r\n/**\r\n * Defines a DualShock gamepad\r\n */\r\nexport class DualShockPad extends Gamepad {\r\n    private _leftTrigger: number = 0;\r\n    private _rightTrigger: number = 0;\r\n\r\n    private _onlefttriggerchanged: (value: number) => void;\r\n    private _onrighttriggerchanged: (value: number) => void;\r\n\r\n    private _onbuttondown: (buttonPressed: DualShockButton) => void;\r\n    private _onbuttonup: (buttonReleased: DualShockButton) => void;\r\n    private _ondpaddown: (dPadPressed: DualShockDpad) => void;\r\n    private _ondpadup: (dPadReleased: DualShockDpad) => void;\r\n\r\n    /** Observable raised when a button is pressed */\r\n    public onButtonDownObservable = new Observable<DualShockButton>();\r\n    /** Observable raised when a button is released */\r\n    public onButtonUpObservable = new Observable<DualShockButton>();\r\n    /** Observable raised when a pad is pressed */\r\n    public onPadDownObservable = new Observable<DualShockDpad>();\r\n    /** Observable raised when a pad is released */\r\n    public onPadUpObservable = new Observable<DualShockDpad>();\r\n\r\n    private _buttonCross: number = 0;\r\n    private _buttonCircle: number = 0;\r\n    private _buttonSquare: number = 0;\r\n    private _buttonTriangle: number = 0;\r\n    private _buttonShare: number = 0;\r\n    private _buttonOptions: number = 0;\r\n    private _buttonL1: number = 0;\r\n    private _buttonR1: number = 0;\r\n\r\n    private _buttonLeftStick: number = 0;\r\n    private _buttonRightStick: number = 0;\r\n    private _dPadUp: number = 0;\r\n    private _dPadDown: number = 0;\r\n    private _dPadLeft: number = 0;\r\n    private _dPadRight: number = 0;\r\n\r\n    /**\r\n     * Creates a new DualShock gamepad object\r\n     * @param id defines the id of this gamepad\r\n     * @param index defines its index\r\n     * @param gamepad defines the internal HTML gamepad object\r\n     */\r\n    constructor(id: string, index: number, gamepad: any) {\r\n        super(id.replace(\"STANDARD GAMEPAD\", \"SONY PLAYSTATION DUALSHOCK\"), index, gamepad, 0, 1, 2, 3);\r\n        this.type = Gamepad.DUALSHOCK;\r\n    }\r\n\r\n    /**\r\n     * Defines the callback to call when left trigger is pressed\r\n     * @param callback defines the callback to use\r\n     */\r\n    public onlefttriggerchanged(callback: (value: number) => void) {\r\n        this._onlefttriggerchanged = callback;\r\n    }\r\n\r\n    /**\r\n     * Defines the callback to call when right trigger is pressed\r\n     * @param callback defines the callback to use\r\n     */\r\n    public onrighttriggerchanged(callback: (value: number) => void) {\r\n        this._onrighttriggerchanged = callback;\r\n    }\r\n\r\n    /**\r\n     * Gets the left trigger value\r\n     */\r\n    public get leftTrigger(): number {\r\n        return this._leftTrigger;\r\n    }\r\n    /**\r\n     * Sets the left trigger value\r\n     */\r\n    public set leftTrigger(newValue: number) {\r\n        if (this._onlefttriggerchanged && this._leftTrigger !== newValue) {\r\n            this._onlefttriggerchanged(newValue);\r\n        }\r\n        this._leftTrigger = newValue;\r\n    }\r\n\r\n    /**\r\n     * Gets the right trigger value\r\n     */\r\n    public get rightTrigger(): number {\r\n        return this._rightTrigger;\r\n    }\r\n    /**\r\n     * Sets the right trigger value\r\n     */\r\n    public set rightTrigger(newValue: number) {\r\n        if (this._onrighttriggerchanged && this._rightTrigger !== newValue) {\r\n            this._onrighttriggerchanged(newValue);\r\n        }\r\n        this._rightTrigger = newValue;\r\n    }\r\n\r\n    /**\r\n     * Defines the callback to call when a button is pressed\r\n     * @param callback defines the callback to use\r\n     */\r\n    public onbuttondown(callback: (buttonPressed: DualShockButton) => void) {\r\n        this._onbuttondown = callback;\r\n    }\r\n\r\n    /**\r\n     * Defines the callback to call when a button is released\r\n     * @param callback defines the callback to use\r\n     */\r\n    public onbuttonup(callback: (buttonReleased: DualShockButton) => void) {\r\n        this._onbuttonup = callback;\r\n    }\r\n\r\n    /**\r\n     * Defines the callback to call when a pad is pressed\r\n     * @param callback defines the callback to use\r\n     */\r\n    public ondpaddown(callback: (dPadPressed: DualShockDpad) => void) {\r\n        this._ondpaddown = callback;\r\n    }\r\n\r\n    /**\r\n     * Defines the callback to call when a pad is released\r\n     * @param callback defines the callback to use\r\n     */\r\n    public ondpadup(callback: (dPadReleased: DualShockDpad) => void) {\r\n        this._ondpadup = callback;\r\n    }\r\n\r\n    private _setButtonValue(newValue: number, currentValue: number, buttonType: DualShockButton): number {\r\n        if (newValue !== currentValue) {\r\n            if (newValue === 1) {\r\n                if (this._onbuttondown) {\r\n                    this._onbuttondown(buttonType);\r\n                }\r\n\r\n                this.onButtonDownObservable.notifyObservers(buttonType);\r\n            }\r\n            if (newValue === 0) {\r\n                if (this._onbuttonup) {\r\n                    this._onbuttonup(buttonType);\r\n                }\r\n\r\n                this.onButtonUpObservable.notifyObservers(buttonType);\r\n            }\r\n        }\r\n        return newValue;\r\n    }\r\n\r\n    private _setDPadValue(newValue: number, currentValue: number, buttonType: DualShockDpad): number {\r\n        if (newValue !== currentValue) {\r\n            if (newValue === 1) {\r\n                if (this._ondpaddown) {\r\n                    this._ondpaddown(buttonType);\r\n                }\r\n\r\n                this.onPadDownObservable.notifyObservers(buttonType);\r\n            }\r\n            if (newValue === 0) {\r\n                if (this._ondpadup) {\r\n                    this._ondpadup(buttonType);\r\n                }\r\n\r\n                this.onPadUpObservable.notifyObservers(buttonType);\r\n            }\r\n        }\r\n        return newValue;\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the `Cross` button\r\n     */\r\n    public get buttonCross(): number {\r\n        return this._buttonCross;\r\n    }\r\n    /**\r\n     * Sets the value of the `Cross` button\r\n     */\r\n    public set buttonCross(value) {\r\n        this._buttonCross = this._setButtonValue(value, this._buttonCross, DualShockButton.Cross);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the `Circle` button\r\n     */\r\n    public get buttonCircle(): number {\r\n        return this._buttonCircle;\r\n    }\r\n    /**\r\n     * Sets the value of the `Circle` button\r\n     */\r\n    public set buttonCircle(value) {\r\n        this._buttonCircle = this._setButtonValue(value, this._buttonCircle, DualShockButton.Circle);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the `Square` button\r\n     */\r\n    public get buttonSquare(): number {\r\n        return this._buttonSquare;\r\n    }\r\n    /**\r\n     * Sets the value of the `Square` button\r\n     */\r\n    public set buttonSquare(value) {\r\n        this._buttonSquare = this._setButtonValue(value, this._buttonSquare, DualShockButton.Square);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the `Triangle` button\r\n     */\r\n    public get buttonTriangle(): number {\r\n        return this._buttonTriangle;\r\n    }\r\n    /**\r\n     * Sets the value of the `Triangle` button\r\n     */\r\n    public set buttonTriangle(value) {\r\n        this._buttonTriangle = this._setButtonValue(value, this._buttonTriangle, DualShockButton.Triangle);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the `Options` button\r\n     */\r\n    public get buttonOptions(): number {\r\n        return this._buttonOptions;\r\n    }\r\n    /**\r\n     * Sets the value of the `Options` button\r\n     */\r\n    public set buttonOptions(value) {\r\n        this._buttonOptions = this._setButtonValue(value, this._buttonOptions, DualShockButton.Options);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the `Share` button\r\n     */\r\n    public get buttonShare(): number {\r\n        return this._buttonShare;\r\n    }\r\n    /**\r\n     * Sets the value of the `Share` button\r\n     */\r\n    public set buttonShare(value) {\r\n        this._buttonShare = this._setButtonValue(value, this._buttonShare, DualShockButton.Share);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the `L1` button\r\n     */\r\n    public get buttonL1(): number {\r\n        return this._buttonL1;\r\n    }\r\n    /**\r\n     * Sets the value of the `L1` button\r\n     */\r\n    public set buttonL1(value) {\r\n        this._buttonL1 = this._setButtonValue(value, this._buttonL1, DualShockButton.L1);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the `R1` button\r\n     */\r\n    public get buttonR1(): number {\r\n        return this._buttonR1;\r\n    }\r\n    /**\r\n     * Sets the value of the `R1` button\r\n     */\r\n    public set buttonR1(value) {\r\n        this._buttonR1 = this._setButtonValue(value, this._buttonR1, DualShockButton.R1);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the Left joystick\r\n     */\r\n    public get buttonLeftStick(): number {\r\n        return this._buttonLeftStick;\r\n    }\r\n    /**\r\n     * Sets the value of the Left joystick\r\n     */\r\n    public set buttonLeftStick(value) {\r\n        this._buttonLeftStick = this._setButtonValue(value, this._buttonLeftStick, DualShockButton.LeftStick);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of the Right joystick\r\n     */\r\n    public get buttonRightStick(): number {\r\n        return this._buttonRightStick;\r\n    }\r\n    /**\r\n     * Sets the value of the Right joystick\r\n     */\r\n    public set buttonRightStick(value) {\r\n        this._buttonRightStick = this._setButtonValue(value, this._buttonRightStick, DualShockButton.RightStick);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of D-pad up\r\n     */\r\n    public get dPadUp(): number {\r\n        return this._dPadUp;\r\n    }\r\n    /**\r\n     * Sets the value of D-pad up\r\n     */\r\n    public set dPadUp(value) {\r\n        this._dPadUp = this._setDPadValue(value, this._dPadUp, DualShockDpad.Up);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of D-pad down\r\n     */\r\n    public get dPadDown(): number {\r\n        return this._dPadDown;\r\n    }\r\n    /**\r\n     * Sets the value of D-pad down\r\n     */\r\n    public set dPadDown(value) {\r\n        this._dPadDown = this._setDPadValue(value, this._dPadDown, DualShockDpad.Down);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of D-pad left\r\n     */\r\n    public get dPadLeft(): number {\r\n        return this._dPadLeft;\r\n    }\r\n    /**\r\n     * Sets the value of D-pad left\r\n     */\r\n    public set dPadLeft(value) {\r\n        this._dPadLeft = this._setDPadValue(value, this._dPadLeft, DualShockDpad.Left);\r\n    }\r\n\r\n    /**\r\n     * Gets the value of D-pad right\r\n     */\r\n    public get dPadRight(): number {\r\n        return this._dPadRight;\r\n    }\r\n    /**\r\n     * Sets the value of D-pad right\r\n     */\r\n    public set dPadRight(value) {\r\n        this._dPadRight = this._setDPadValue(value, this._dPadRight, DualShockDpad.Right);\r\n    }\r\n\r\n    /**\r\n     * Force the gamepad to synchronize with device values\r\n     */\r\n    public update() {\r\n        super.update();\r\n        this.buttonCross = this.browserGamepad.buttons[0].value;\r\n        this.buttonCircle = this.browserGamepad.buttons[1].value;\r\n        this.buttonSquare = this.browserGamepad.buttons[2].value;\r\n        this.buttonTriangle = this.browserGamepad.buttons[3].value;\r\n        this.buttonL1 = this.browserGamepad.buttons[4].value;\r\n        this.buttonR1 = this.browserGamepad.buttons[5].value;\r\n        this.leftTrigger = this.browserGamepad.buttons[6].value;\r\n        this.rightTrigger = this.browserGamepad.buttons[7].value;\r\n        this.buttonShare = this.browserGamepad.buttons[8].value;\r\n        this.buttonOptions = this.browserGamepad.buttons[9].value;\r\n        this.buttonLeftStick = this.browserGamepad.buttons[10].value;\r\n        this.buttonRightStick = this.browserGamepad.buttons[11].value;\r\n        this.dPadUp = this.browserGamepad.buttons[12].value;\r\n        this.dPadDown = this.browserGamepad.buttons[13].value;\r\n        this.dPadLeft = this.browserGamepad.buttons[14].value;\r\n        this.dPadRight = this.browserGamepad.buttons[15].value;\r\n    }\r\n\r\n    /**\r\n     * Disposes the gamepad\r\n     */\r\n    public dispose() {\r\n        super.dispose();\r\n        this.onButtonDownObservable.clear();\r\n        this.onButtonUpObservable.clear();\r\n        this.onPadDownObservable.clear();\r\n        this.onPadUpObservable.clear();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}