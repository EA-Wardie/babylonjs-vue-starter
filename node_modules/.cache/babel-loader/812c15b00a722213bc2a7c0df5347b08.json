{"ast":null,"code":"import { WebGPUEngine } from \"../../webgpuEngine.js\";\n\nWebGPUEngine.prototype.updateDynamicTexture = function (texture, canvas, invertY, premulAlpha, format, forceBindTexture, allowGPUOptimization) {\n  var _a;\n\n  if (premulAlpha === void 0) {\n    premulAlpha = false;\n  }\n\n  if (!texture) {\n    return;\n  }\n\n  var width = canvas.width,\n      height = canvas.height;\n  var gpuTextureWrapper = texture._hardwareTexture;\n\n  if (!((_a = texture._hardwareTexture) === null || _a === void 0 ? void 0 : _a.underlyingResource)) {\n    gpuTextureWrapper = this._textureHelper.createGPUTextureForInternalTexture(texture, width, height);\n  }\n\n  this._textureHelper.updateTexture(canvas, texture, width, height, texture.depth, gpuTextureWrapper.format, 0, 0, invertY, premulAlpha, 0, 0, allowGPUOptimization);\n\n  if (texture.generateMipMaps) {\n    this._generateMipmaps(texture, this._uploadEncoder);\n  }\n\n  texture.isReady = true;\n};","map":{"version":3,"mappings":"AAEA,SAASA,YAAT,QAA6B,uBAA7B;;AAGAA,YAAY,CAACC,SAAb,CAAuBC,oBAAvB,GAA8C,UAC1CC,OAD0C,EAE1CC,MAF0C,EAG1CC,OAH0C,EAI1CC,WAJ0C,EAK1CC,MAL0C,EAM1CC,gBAN0C,EAO1CC,oBAP0C,EAOZ;;;AAH9B;AAAAH;AAA4B;;AAK5B,MAAI,CAACH,OAAL,EAAc;AACV;AACH;;AAED,MAAMO,KAAK,GAAGN,MAAM,CAACM,KAArB;AAAA,MACIC,MAAM,GAAGP,MAAM,CAACO,MADpB;AAGA,MAAIC,iBAAiB,GAAGT,OAAO,CAACU,gBAAhC;;AAEA,MAAI,EAAC,aAAO,CAACA,gBAAR,MAAwB,IAAxB,IAAwBC,aAAxB,GAAwB,MAAxB,GAAwBA,GAAEC,kBAA3B,CAAJ,EAAmD;AAC/CH,qBAAiB,GAAG,KAAKI,cAAL,CAAoBC,kCAApB,CAAuDd,OAAvD,EAAgEO,KAAhE,EAAuEC,MAAvE,CAApB;AACH;;AAED,OAAKK,cAAL,CAAoBE,aAApB,CAAkCd,MAAlC,EAA0CD,OAA1C,EAAmDO,KAAnD,EAA0DC,MAA1D,EAAkER,OAAO,CAACgB,KAA1E,EAAiFP,iBAAiB,CAACL,MAAnG,EAA2G,CAA3G,EAA8G,CAA9G,EAAiHF,OAAjH,EAA0HC,WAA1H,EAAuI,CAAvI,EAA0I,CAA1I,EAA6IG,oBAA7I;;AACA,MAAIN,OAAO,CAACiB,eAAZ,EAA6B;AACzB,SAAKC,gBAAL,CAAsBlB,OAAtB,EAA+B,KAAKmB,cAApC;AACH;;AAEDnB,SAAO,CAACoB,OAAR,GAAkB,IAAlB;AACH,CA5BD","names":["WebGPUEngine","prototype","updateDynamicTexture","texture","canvas","invertY","premulAlpha","format","forceBindTexture","allowGPUOptimization","width","height","gpuTextureWrapper","_hardwareTexture","_a","underlyingResource","_textureHelper","createGPUTextureForInternalTexture","updateTexture","depth","generateMipMaps","_generateMipmaps","_uploadEncoder","isReady"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Engines/WebGPU/Extensions/engine.dynamicTexture.ts"],"sourcesContent":["import type { InternalTexture } from \"../../../Materials/Textures/internalTexture\";\r\nimport type { Nullable } from \"../../../types\";\r\nimport { WebGPUEngine } from \"../../webgpuEngine\";\r\nimport type { WebGPUHardwareTexture } from \"../webgpuHardwareTexture\";\r\n\r\nWebGPUEngine.prototype.updateDynamicTexture = function (\r\n    texture: Nullable<InternalTexture>,\r\n    canvas: HTMLCanvasElement | OffscreenCanvas,\r\n    invertY: boolean,\r\n    premulAlpha: boolean = false,\r\n    format?: number,\r\n    forceBindTexture?: boolean,\r\n    allowGPUOptimization?: boolean\r\n): void {\r\n    if (!texture) {\r\n        return;\r\n    }\r\n\r\n    const width = canvas.width,\r\n        height = canvas.height;\r\n\r\n    let gpuTextureWrapper = texture._hardwareTexture as WebGPUHardwareTexture;\r\n\r\n    if (!texture._hardwareTexture?.underlyingResource) {\r\n        gpuTextureWrapper = this._textureHelper.createGPUTextureForInternalTexture(texture, width, height);\r\n    }\r\n\r\n    this._textureHelper.updateTexture(canvas, texture, width, height, texture.depth, gpuTextureWrapper.format, 0, 0, invertY, premulAlpha, 0, 0, allowGPUOptimization);\r\n    if (texture.generateMipMaps) {\r\n        this._generateMipmaps(texture, this._uploadEncoder);\r\n    }\r\n\r\n    texture.isReady = true;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}