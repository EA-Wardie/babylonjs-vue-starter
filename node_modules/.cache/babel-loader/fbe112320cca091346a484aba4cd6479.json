{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport { __assign } from \"tslib\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { WebXRInputSource } from \"./webXRInputSource.js\";\nimport { WebXRMotionControllerManager } from \"./motionController/webXRMotionControllerManager.js\";\n/**\n * XR input used to track XR inputs such as controllers/rays\n */\n\nvar WebXRInput =\n/** @class */\nfunction () {\n  /**\n   * Initializes the WebXRInput\n   * @param xrSessionManager the xr session manager for this session\n   * @param xrCamera the WebXR camera for this session. Mainly used for teleportation\n   * @param _options = initialization options for this xr input\n   */\n  function WebXRInput(\n  /**\n   * the xr session manager for this session\n   */\n  xrSessionManager,\n  /**\n   * the WebXR camera for this session. Mainly used for teleportation\n   */\n  xrCamera, _options) {\n    if (_options === void 0) {\n      _options = {};\n    }\n\n    var _this = this;\n\n    this.xrSessionManager = xrSessionManager;\n    this.xrCamera = xrCamera;\n    this._options = _options;\n    /**\n     * XR controllers being tracked\n     */\n\n    this.controllers = [];\n    /**\n     * Event when a controller has been connected/added\n     */\n\n    this.onControllerAddedObservable = new Observable();\n    /**\n     * Event when a controller has been removed/disconnected\n     */\n\n    this.onControllerRemovedObservable = new Observable();\n\n    this._onInputSourcesChange = function (event) {\n      _this._addAndRemoveControllers(event.added, event.removed);\n    }; // Remove controllers when exiting XR\n\n\n    this._sessionEndedObserver = this.xrSessionManager.onXRSessionEnded.add(function () {\n      _this._addAndRemoveControllers([], _this.controllers.map(function (c) {\n        return c.inputSource;\n      }));\n    });\n    this._sessionInitObserver = this.xrSessionManager.onXRSessionInit.add(function (session) {\n      session.addEventListener(\"inputsourceschange\", _this._onInputSourcesChange);\n    });\n    this._frameObserver = this.xrSessionManager.onXRFrameObservable.add(function (frame) {\n      // Update controller pose info\n      _this.controllers.forEach(function (controller) {\n        controller.updateFromXRFrame(frame, _this.xrSessionManager.referenceSpace, _this.xrCamera);\n      });\n    });\n\n    if (this._options.customControllersRepositoryURL) {\n      WebXRMotionControllerManager.BaseRepositoryUrl = this._options.customControllersRepositoryURL;\n    }\n\n    WebXRMotionControllerManager.UseOnlineRepository = !this._options.disableOnlineControllerRepository;\n\n    if (WebXRMotionControllerManager.UseOnlineRepository) {\n      // pre-load the profiles list to load the controllers quicker afterwards\n      try {\n        WebXRMotionControllerManager.UpdateProfilesList()[\"catch\"](function () {\n          WebXRMotionControllerManager.UseOnlineRepository = false;\n        });\n      } catch (e) {\n        WebXRMotionControllerManager.UseOnlineRepository = false;\n      }\n    }\n  }\n\n  WebXRInput.prototype._addAndRemoveControllers = function (addInputs, removeInputs) {\n    var _this = this; // Add controllers if they don't already exist\n\n\n    var sources = this.controllers.map(function (c) {\n      return c.inputSource;\n    });\n\n    for (var _i = 0, addInputs_1 = addInputs; _i < addInputs_1.length; _i++) {\n      var input = addInputs_1[_i];\n\n      if (sources.indexOf(input) === -1) {\n        var controller = new WebXRInputSource(this.xrSessionManager.scene, input, __assign(__assign({}, this._options.controllerOptions || {}), {\n          forceControllerProfile: this._options.forceInputProfile,\n          doNotLoadControllerMesh: this._options.doNotLoadControllerMeshes,\n          disableMotionControllerAnimation: this._options.disableControllerAnimation\n        }));\n        this.controllers.push(controller);\n        this.onControllerAddedObservable.notifyObservers(controller);\n      }\n    } // Remove and dispose of controllers to be disposed\n\n\n    var keepControllers = [];\n    var removedControllers = [];\n    this.controllers.forEach(function (c) {\n      if (removeInputs.indexOf(c.inputSource) === -1) {\n        keepControllers.push(c);\n      } else {\n        removedControllers.push(c);\n      }\n    });\n    this.controllers = keepControllers;\n    removedControllers.forEach(function (c) {\n      _this.onControllerRemovedObservable.notifyObservers(c);\n\n      c.dispose();\n    });\n  };\n  /**\n   * Disposes of the object\n   */\n\n\n  WebXRInput.prototype.dispose = function () {\n    this.controllers.forEach(function (c) {\n      c.dispose();\n    });\n    this.xrSessionManager.onXRFrameObservable.remove(this._frameObserver);\n    this.xrSessionManager.onXRSessionInit.remove(this._sessionInitObserver);\n    this.xrSessionManager.onXRSessionEnded.remove(this._sessionEndedObserver);\n    this.onControllerAddedObservable.clear();\n    this.onControllerRemovedObservable.clear(); // clear the controller cache\n\n    WebXRMotionControllerManager.ClearControllerCache();\n  };\n\n  return WebXRInput;\n}();\n\nexport { WebXRInput };","map":{"version":3,"mappings":"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","names":["Observable","WebXRInputSource","WebXRMotionControllerManager","xrSessionManager","xrCamera","_options","event","_this","_addAndRemoveControllers","added","removed","_sessionEndedObserver","onXRSessionEnded","add","controllers","map","c","inputSource","_sessionInitObserver","onXRSessionInit","session","addEventListener","_onInputSourcesChange","_frameObserver","onXRFrameObservable","frame","forEach","controller","updateFromXRFrame","referenceSpace","customControllersRepositoryURL","BaseRepositoryUrl","UseOnlineRepository","disableOnlineControllerRepository","UpdateProfilesList","e","WebXRInput","addInputs","removeInputs","sources","_i","input","indexOf","scene","__assign","controllerOptions","forceControllerProfile","forceInputProfile","doNotLoadControllerMesh","doNotLoadControllerMeshes","disableMotionControllerAnimation","disableControllerAnimation","push","onControllerAddedObservable","notifyObservers","keepControllers","removedControllers","onControllerRemovedObservable","dispose","remove","clear","ClearControllerCache"],"sourceRoot":"","sources":["../../../../../lts/core/generated/XR/webXRInput.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { IDisposable } from \"../scene\";\r\nimport type { IWebXRControllerOptions } from \"./webXRInputSource\";\r\nimport { WebXRInputSource } from \"./webXRInputSource\";\r\nimport type { WebXRSessionManager } from \"./webXRSessionManager\";\r\nimport type { WebXRCamera } from \"./webXRCamera\";\r\nimport { WebXRMotionControllerManager } from \"./motionController/webXRMotionControllerManager\";\r\n\r\n/**\r\n * The schema for initialization options of the XR Input class\r\n */\r\nexport interface IWebXRInputOptions {\r\n    /**\r\n     * If set to true no model will be automatically loaded\r\n     */\r\n    doNotLoadControllerMeshes?: boolean;\r\n\r\n    /**\r\n     * If set, this profile will be used for all controllers loaded (for example \"microsoft-mixed-reality\")\r\n     * If not found, the xr input profile data will be used.\r\n     * Profiles are defined here - https://github.com/immersive-web/webxr-input-profiles/\r\n     */\r\n    forceInputProfile?: string;\r\n\r\n    /**\r\n     * Do not send a request to the controller repository to load the profile.\r\n     *\r\n     * Instead, use the controllers available in babylon itself.\r\n     */\r\n    disableOnlineControllerRepository?: boolean;\r\n\r\n    /**\r\n     * A custom URL for the controllers repository\r\n     */\r\n    customControllersRepositoryURL?: string;\r\n\r\n    /**\r\n     * Should the controller model's components not move according to the user input\r\n     */\r\n    disableControllerAnimation?: boolean;\r\n\r\n    /**\r\n     * Optional options to pass to the controller. Will be overridden by the Input options where applicable\r\n     */\r\n    controllerOptions?: IWebXRControllerOptions;\r\n}\r\n/**\r\n * XR input used to track XR inputs such as controllers/rays\r\n */\r\nexport class WebXRInput implements IDisposable {\r\n    /**\r\n     * XR controllers being tracked\r\n     */\r\n    public controllers: Array<WebXRInputSource> = [];\r\n    private _frameObserver: Nullable<Observer<any>>;\r\n    private _sessionEndedObserver: Nullable<Observer<any>>;\r\n    private _sessionInitObserver: Nullable<Observer<any>>;\r\n    /**\r\n     * Event when a controller has been connected/added\r\n     */\r\n    public onControllerAddedObservable = new Observable<WebXRInputSource>();\r\n    /**\r\n     * Event when a controller has been removed/disconnected\r\n     */\r\n    public onControllerRemovedObservable = new Observable<WebXRInputSource>();\r\n\r\n    /**\r\n     * Initializes the WebXRInput\r\n     * @param xrSessionManager the xr session manager for this session\r\n     * @param xrCamera the WebXR camera for this session. Mainly used for teleportation\r\n     * @param _options = initialization options for this xr input\r\n     */\r\n    public constructor(\r\n        /**\r\n         * the xr session manager for this session\r\n         */\r\n        public xrSessionManager: WebXRSessionManager,\r\n        /**\r\n         * the WebXR camera for this session. Mainly used for teleportation\r\n         */\r\n        public xrCamera: WebXRCamera,\r\n        private readonly _options: IWebXRInputOptions = {}\r\n    ) {\r\n        // Remove controllers when exiting XR\r\n        this._sessionEndedObserver = this.xrSessionManager.onXRSessionEnded.add(() => {\r\n            this._addAndRemoveControllers(\r\n                [],\r\n                this.controllers.map((c) => {\r\n                    return c.inputSource;\r\n                })\r\n            );\r\n        });\r\n\r\n        this._sessionInitObserver = this.xrSessionManager.onXRSessionInit.add((session) => {\r\n            session.addEventListener(\"inputsourceschange\", this._onInputSourcesChange);\r\n        });\r\n\r\n        this._frameObserver = this.xrSessionManager.onXRFrameObservable.add((frame) => {\r\n            // Update controller pose info\r\n            this.controllers.forEach((controller) => {\r\n                controller.updateFromXRFrame(frame, this.xrSessionManager.referenceSpace, this.xrCamera);\r\n            });\r\n        });\r\n\r\n        if (this._options.customControllersRepositoryURL) {\r\n            WebXRMotionControllerManager.BaseRepositoryUrl = this._options.customControllersRepositoryURL;\r\n        }\r\n\r\n        WebXRMotionControllerManager.UseOnlineRepository = !this._options.disableOnlineControllerRepository;\r\n        if (WebXRMotionControllerManager.UseOnlineRepository) {\r\n            // pre-load the profiles list to load the controllers quicker afterwards\r\n            try {\r\n                WebXRMotionControllerManager.UpdateProfilesList().catch(() => {\r\n                    WebXRMotionControllerManager.UseOnlineRepository = false;\r\n                });\r\n            } catch (e) {\r\n                WebXRMotionControllerManager.UseOnlineRepository = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _onInputSourcesChange = (event: XRInputSourceChangeEvent) => {\r\n        this._addAndRemoveControllers(event.added, event.removed);\r\n    };\r\n\r\n    private _addAndRemoveControllers(addInputs: Array<XRInputSource>, removeInputs: Array<XRInputSource>) {\r\n        // Add controllers if they don't already exist\r\n        const sources = this.controllers.map((c) => {\r\n            return c.inputSource;\r\n        });\r\n        for (const input of addInputs) {\r\n            if (sources.indexOf(input) === -1) {\r\n                const controller = new WebXRInputSource(this.xrSessionManager.scene, input, {\r\n                    ...(this._options.controllerOptions || {}),\r\n                    forceControllerProfile: this._options.forceInputProfile,\r\n                    doNotLoadControllerMesh: this._options.doNotLoadControllerMeshes,\r\n                    disableMotionControllerAnimation: this._options.disableControllerAnimation,\r\n                });\r\n                this.controllers.push(controller);\r\n                this.onControllerAddedObservable.notifyObservers(controller);\r\n            }\r\n        }\r\n\r\n        // Remove and dispose of controllers to be disposed\r\n        const keepControllers: Array<WebXRInputSource> = [];\r\n        const removedControllers: Array<WebXRInputSource> = [];\r\n        this.controllers.forEach((c) => {\r\n            if (removeInputs.indexOf(c.inputSource) === -1) {\r\n                keepControllers.push(c);\r\n            } else {\r\n                removedControllers.push(c);\r\n            }\r\n        });\r\n        this.controllers = keepControllers;\r\n        removedControllers.forEach((c) => {\r\n            this.onControllerRemovedObservable.notifyObservers(c);\r\n            c.dispose();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disposes of the object\r\n     */\r\n    public dispose() {\r\n        this.controllers.forEach((c) => {\r\n            c.dispose();\r\n        });\r\n        this.xrSessionManager.onXRFrameObservable.remove(this._frameObserver);\r\n        this.xrSessionManager.onXRSessionInit.remove(this._sessionInitObserver);\r\n        this.xrSessionManager.onXRSessionEnded.remove(this._sessionEndedObserver);\r\n        this.onControllerAddedObservable.clear();\r\n        this.onControllerRemovedObservable.clear();\r\n\r\n        // clear the controller cache\r\n        WebXRMotionControllerManager.ClearControllerCache();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}