{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { MaterialHelper } from \"../../../materialHelper.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport \"../../../../Shaders/ShadersInclude/fogFragmentDeclaration.js\";\n/**\n * Block used to add support for scene fog\n */\n\nvar FogBlock =\n/** @class */\nfunction (_super) {\n  __extends(FogBlock, _super);\n  /**\n   * Create a new FogBlock\n   * @param name defines the block name\n   */\n\n\n  function FogBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.VertexAndFragment, false) || this; // Vertex\n\n\n    _this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Vertex);\n\n    _this.registerInput(\"view\", NodeMaterialBlockConnectionPointTypes.Matrix, false, NodeMaterialBlockTargets.Vertex); // Fragment\n\n\n    _this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.Color3, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"fogColor\", NodeMaterialBlockConnectionPointTypes.Color3, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.input.acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Color4);\n\n    _this.fogColor.acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Color4);\n\n    return _this;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  FogBlock.prototype.getClassName = function () {\n    return \"FogBlock\";\n  };\n\n  Object.defineProperty(FogBlock.prototype, \"worldPosition\", {\n    /**\n     * Gets the world position input component\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FogBlock.prototype, \"view\", {\n    /**\n     * Gets the view input component\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FogBlock.prototype, \"input\", {\n    /**\n     * Gets the color input component\n     */\n    get: function get() {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FogBlock.prototype, \"fogColor\", {\n    /**\n     * Gets the fog color input component\n     */\n    get: function get() {\n      return this._inputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FogBlock.prototype, \"output\", {\n    /**\n     * Gets the output component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  FogBlock.prototype.autoConfigure = function (material) {\n    if (!this.view.isConnected) {\n      var viewInput = material.getInputBlockByPredicate(function (b) {\n        return b.systemValue === NodeMaterialSystemValues.View;\n      });\n\n      if (!viewInput) {\n        viewInput = new InputBlock(\"view\");\n        viewInput.setAsSystemValue(NodeMaterialSystemValues.View);\n      }\n\n      viewInput.output.connectTo(this.view);\n    }\n\n    if (!this.fogColor.isConnected) {\n      var fogColorInput = material.getInputBlockByPredicate(function (b) {\n        return b.systemValue === NodeMaterialSystemValues.FogColor;\n      });\n\n      if (!fogColorInput) {\n        fogColorInput = new InputBlock(\"fogColor\", undefined, NodeMaterialBlockConnectionPointTypes.Color3);\n        fogColorInput.setAsSystemValue(NodeMaterialSystemValues.FogColor);\n      }\n\n      fogColorInput.output.connectTo(this.fogColor);\n    }\n  };\n\n  FogBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    var scene = mesh.getScene();\n    defines.setValue(\"FOG\", nodeMaterial.fogEnabled && MaterialHelper.GetFogState(mesh, scene));\n  };\n\n  FogBlock.prototype.bind = function (effect, nodeMaterial, mesh) {\n    if (!mesh) {\n      return;\n    }\n\n    var scene = mesh.getScene();\n    effect.setFloat4(this._fogParameters, scene.fogMode, scene.fogStart, scene.fogEnd, scene.fogDensity);\n  };\n\n  FogBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    if (state.target === NodeMaterialBlockTargets.Fragment) {\n      state.sharedData.blocksWithDefines.push(this);\n      state.sharedData.bindableBlocks.push(this);\n\n      state._emitFunctionFromInclude(\"fogFragmentDeclaration\", \"//\".concat(this.name), {\n        removeUniforms: true,\n        removeVaryings: true,\n        removeIfDef: false,\n        replaceStrings: [{\n          search: /float CalcFogFactor\\(\\)/,\n          replace: \"float CalcFogFactor(vec3 vFogDistance, vec4 vFogInfos)\"\n        }]\n      });\n\n      var tempFogVariablename = state._getFreeVariableName(\"fog\");\n\n      var color = this.input;\n      var fogColor = this.fogColor;\n      this._fogParameters = state._getFreeVariableName(\"fogParameters\");\n      var output = this._outputs[0];\n\n      state._emitUniformFromString(this._fogParameters, \"vec4\");\n\n      state.compilationString += \"#ifdef FOG\\r\\n\";\n      state.compilationString += \"float \".concat(tempFogVariablename, \" = CalcFogFactor(\").concat(this._fogDistanceName, \", \").concat(this._fogParameters, \");\\r\\n\");\n      state.compilationString += this._declareOutput(output, state) + \" = \".concat(tempFogVariablename, \" * \").concat(color.associatedVariableName, \".rgb + (1.0 - \").concat(tempFogVariablename, \") * \").concat(fogColor.associatedVariableName, \".rgb;\\r\\n\");\n      state.compilationString += \"#else\\r\\n\".concat(this._declareOutput(output, state), \" =  \").concat(color.associatedVariableName, \".rgb;\\r\\n\");\n      state.compilationString += \"#endif\\r\\n\";\n    } else {\n      var worldPos = this.worldPosition;\n      var view = this.view;\n      this._fogDistanceName = state._getFreeVariableName(\"vFogDistance\");\n\n      state._emitVaryingFromString(this._fogDistanceName, \"vec3\");\n\n      state.compilationString += \"\".concat(this._fogDistanceName, \" = (\").concat(view.associatedVariableName, \" * \").concat(worldPos.associatedVariableName, \").xyz;\\r\\n\");\n    }\n\n    return this;\n  };\n\n  return FogBlock;\n}(NodeMaterialBlock);\n\nexport { FogBlock };\nRegisterClass(\"BABYLON.FogBlock\", FogBlock);","map":{"version":3,"mappings":";;;;;AAAA,SAASA,iBAAT,QAAkC,4BAAlC;AACA,SAASC,qCAAT,QAAsD,sDAAtD;AAEA,SAASC,wBAAT,QAAyC,yCAAzC;AACA,SAASC,wBAAT,QAAyC,yCAAzC;AAKA,SAASC,cAAT,QAA+B,4BAA/B;AAEA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,aAAT,QAA8B,+BAA9B;AAEA,OAAO,8DAAP;AAEA;;;;AAGA;AAAA;AAAA;AAA8BC;AAI1B;;;;;;AAIA,oBAAmBC,IAAnB,EAA+B;AAA/B,gBACIC,kBAAMD,IAAN,EAAYL,wBAAwB,CAACO,iBAArC,EAAwD,KAAxD,KAA8D,IADlE,CAA+B,CAG3B;;;AACAC,SAAI,CAACC,aAAL,CAAmB,eAAnB,EAAoCX,qCAAqC,CAACY,OAA1E,EAAmF,KAAnF,EAA0FV,wBAAwB,CAACW,MAAnH;;AACAH,SAAI,CAACC,aAAL,CAAmB,MAAnB,EAA2BX,qCAAqC,CAACc,MAAjE,EAAyE,KAAzE,EAAgFZ,wBAAwB,CAACW,MAAzG,EAL2B,CAO3B;;;AACAH,SAAI,CAACC,aAAL,CAAmB,OAAnB,EAA4BX,qCAAqC,CAACe,MAAlE,EAA0E,KAA1E,EAAiFb,wBAAwB,CAACc,QAA1G;;AACAN,SAAI,CAACC,aAAL,CAAmB,UAAnB,EAA+BX,qCAAqC,CAACe,MAArE,EAA6E,KAA7E,EAAoFb,wBAAwB,CAACc,QAA7G;;AAEAN,SAAI,CAACO,cAAL,CAAoB,QAApB,EAA8BjB,qCAAqC,CAACe,MAApE,EAA4Eb,wBAAwB,CAACc,QAArG;;AAEAN,SAAI,CAACQ,KAAL,CAAWC,4BAAX,CAAwCC,IAAxC,CAA6CpB,qCAAqC,CAACqB,MAAnF;;AACAX,SAAI,CAACY,QAAL,CAAcH,4BAAd,CAA2CC,IAA3C,CAAgDpB,qCAAqC,CAACqB,MAAtF;;;AACH;AAED;;;;;;AAIOE,oCAAP;AACI,WAAO,UAAP;AACH,GAFM;;AAOPC,wBAAWD,kBAAX,EAAW,eAAX,EAAwB;AAHxB;;;SAGA;AACI,aAAO,KAAKE,OAAL,CAAa,CAAb,CAAP;AACH,KAFuB;qBAAA;;AAAA,GAAxB;AAOAD,wBAAWD,kBAAX,EAAW,MAAX,EAAe;AAHf;;;SAGA;AACI,aAAO,KAAKE,OAAL,CAAa,CAAb,CAAP;AACH,KAFc;qBAAA;;AAAA,GAAf;AAOAD,wBAAWD,kBAAX,EAAW,OAAX,EAAgB;AAHhB;;;SAGA;AACI,aAAO,KAAKE,OAAL,CAAa,CAAb,CAAP;AACH,KAFe;qBAAA;;AAAA,GAAhB;AAOAD,wBAAWD,kBAAX,EAAW,UAAX,EAAmB;AAHnB;;;SAGA;AACI,aAAO,KAAKE,OAAL,CAAa,CAAb,CAAP;AACH,KAFkB;qBAAA;;AAAA,GAAnB;AAOAD,wBAAWD,kBAAX,EAAW,QAAX,EAAiB;AAHjB;;;SAGA;AACI,aAAO,KAAKG,QAAL,CAAc,CAAd,CAAP;AACH,KAFgB;qBAAA;;AAAA,GAAjB;;AAIOH,qCAAP,UAAqBI,QAArB,EAA2C;AACvC,QAAI,CAAC,KAAKC,IAAL,CAAUC,WAAf,EAA4B;AACxB,UAAIC,SAAS,GAAGH,QAAQ,CAACI,wBAAT,CAAkC,UAACC,CAAD,EAAE;AAAK,gBAAC,CAACC,WAAF,KAAkBhC,wBAAwB,CAACiC,IAA3C;AAA+C,OAAxF,CAAhB;;AAEA,UAAI,CAACJ,SAAL,EAAgB;AACZA,iBAAS,GAAG,IAAI1B,UAAJ,CAAe,MAAf,CAAZ;AACA0B,iBAAS,CAACK,gBAAV,CAA2BlC,wBAAwB,CAACiC,IAApD;AACH;;AACDJ,eAAS,CAACM,MAAV,CAAiBC,SAAjB,CAA2B,KAAKT,IAAhC;AACH;;AACD,QAAI,CAAC,KAAKN,QAAL,CAAcO,WAAnB,EAAgC;AAC5B,UAAIS,aAAa,GAAGX,QAAQ,CAACI,wBAAT,CAAkC,UAACC,CAAD,EAAE;AAAK,gBAAC,CAACC,WAAF,KAAkBhC,wBAAwB,CAACsC,QAA3C;AAAmD,OAA5F,CAApB;;AAEA,UAAI,CAACD,aAAL,EAAoB;AAChBA,qBAAa,GAAG,IAAIlC,UAAJ,CAAe,UAAf,EAA2BoC,SAA3B,EAAsCxC,qCAAqC,CAACe,MAA5E,CAAhB;AACAuB,qBAAa,CAACH,gBAAd,CAA+BlC,wBAAwB,CAACsC,QAAxD;AACH;;AACDD,mBAAa,CAACF,MAAd,CAAqBC,SAArB,CAA+B,KAAKf,QAApC;AACH;AACJ,GAnBM;;AAqBAC,sCAAP,UAAsBkB,IAAtB,EAA0CC,YAA1C,EAAsEC,OAAtE,EAAkG;AAC9F,QAAMC,KAAK,GAAGH,IAAI,CAACI,QAAL,EAAd;AACAF,WAAO,CAACG,QAAR,CAAiB,KAAjB,EAAwBJ,YAAY,CAACK,UAAb,IAA2B5C,cAAc,CAAC6C,WAAf,CAA2BP,IAA3B,EAAiCG,KAAjC,CAAnD;AACH,GAHM;;AAKArB,4BAAP,UAAY0B,MAAZ,EAA4BP,YAA5B,EAAwDD,IAAxD,EAAmE;AAC/D,QAAI,CAACA,IAAL,EAAW;AACP;AACH;;AAED,QAAMG,KAAK,GAAGH,IAAI,CAACI,QAAL,EAAd;AACAI,UAAM,CAACC,SAAP,CAAiB,KAAKC,cAAtB,EAAsCP,KAAK,CAACQ,OAA5C,EAAqDR,KAAK,CAACS,QAA3D,EAAqET,KAAK,CAACU,MAA3E,EAAmFV,KAAK,CAACW,UAAzF;AACH,GAPM;;AASGhC,mCAAV,UAAsBiC,KAAtB,EAAmD;AAC/ChD,qBAAMiD,WAAN,CAAiBC,IAAjB,CAAiB,IAAjB,EAAkBF,KAAlB;;AAEA,QAAIA,KAAK,CAACG,MAAN,KAAiBzD,wBAAwB,CAACc,QAA9C,EAAwD;AACpDwC,WAAK,CAACI,UAAN,CAAiBC,iBAAjB,CAAmCzC,IAAnC,CAAwC,IAAxC;AACAoC,WAAK,CAACI,UAAN,CAAiBE,cAAjB,CAAgC1C,IAAhC,CAAqC,IAArC;;AAEAoC,WAAK,CAACO,wBAAN,CAA+B,wBAA/B,EAAyD,YAAK,KAAKxD,IAAV,CAAzD,EAA2E;AACvEyD,sBAAc,EAAE,IADuD;AAEvEC,sBAAc,EAAE,IAFuD;AAGvEC,mBAAW,EAAE,KAH0D;AAIvEC,sBAAc,EAAE,CAAC;AAAEC,gBAAM,EAAE,yBAAV;AAAqCC,iBAAO,EAAE;AAA9C,SAAD;AAJuD,OAA3E;;AAOA,UAAMC,mBAAmB,GAAGd,KAAK,CAACe,oBAAN,CAA2B,KAA3B,CAA5B;;AACA,UAAMC,KAAK,GAAG,KAAKtD,KAAnB;AACA,UAAMI,QAAQ,GAAG,KAAKA,QAAtB;AACA,WAAK6B,cAAL,GAAsBK,KAAK,CAACe,oBAAN,CAA2B,eAA3B,CAAtB;AACA,UAAMnC,MAAM,GAAG,KAAKV,QAAL,CAAc,CAAd,CAAf;;AAEA8B,WAAK,CAACiB,sBAAN,CAA6B,KAAKtB,cAAlC,EAAkD,MAAlD;;AAEAK,WAAK,CAACkB,iBAAN,IAA2B,gBAA3B;AACAlB,WAAK,CAACkB,iBAAN,IAA2B,gBAASJ,mBAAT,EAA4B,mBAA5B,EAA4BK,MAA5B,CAAgD,KAAKC,gBAArD,EAAqE,IAArE,EAAqED,MAArE,CAA0E,KAAKxB,cAA/E,EAA6F,QAA7F,CAA3B;AACAK,WAAK,CAACkB,iBAAN,IACI,KAAKG,cAAL,CAAoBzC,MAApB,EAA4BoB,KAA5B,IACA,aAAMc,mBAAN,EAAyB,KAAzB,EAAyBK,MAAzB,CAA+BH,KAAK,CAACM,sBAArC,EAA2D,gBAA3D,EAA2DH,MAA3D,CAA4EL,mBAA5E,EAA+F,MAA/F,EAA+FK,MAA/F,CAAsGrD,QAAQ,CAACwD,sBAA/G,EAAqI,WAArI,CAFJ;AAGAtB,WAAK,CAACkB,iBAAN,IAA2B,mBAAY,KAAKG,cAAL,CAAoBzC,MAApB,EAA4BoB,KAA5B,CAAZ,EAA8C,MAA9C,EAA8CmB,MAA9C,CAAqDH,KAAK,CAACM,sBAA3D,EAAiF,WAAjF,CAA3B;AACAtB,WAAK,CAACkB,iBAAN,IAA2B,YAA3B;AACH,KA1BD,MA0BO;AACH,UAAMK,QAAQ,GAAG,KAAKC,aAAtB;AACA,UAAMpD,IAAI,GAAG,KAAKA,IAAlB;AACA,WAAKgD,gBAAL,GAAwBpB,KAAK,CAACe,oBAAN,CAA2B,cAA3B,CAAxB;;AACAf,WAAK,CAACyB,sBAAN,CAA6B,KAAKL,gBAAlC,EAAoD,MAApD;;AACApB,WAAK,CAACkB,iBAAN,IAA2B,UAAG,KAAKE,gBAAR,EAAwB,MAAxB,EAAwBD,MAAxB,CAA+B/C,IAAI,CAACkD,sBAApC,EAA0D,KAA1D,EAA0DH,MAA1D,CAAgEI,QAAQ,CAACD,sBAAzE,EAA+F,YAA/F,CAA3B;AACH;;AAED,WAAO,IAAP;AACH,GAtCS;;AAuCd;AAAC,CA9ID,CAA8B/E,iBAA9B;;;AAgJAM,aAAa,CAAC,kBAAD,EAAqBkB,QAArB,CAAb","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialSystemValues","NodeMaterialBlockTargets","MaterialHelper","InputBlock","RegisterClass","__extends","name","_super","VertexAndFragment","_this","registerInput","Vector4","Vertex","Matrix","Color3","Fragment","registerOutput","input","acceptedConnectionPointTypes","push","Color4","fogColor","FogBlock","Object","_inputs","_outputs","material","view","isConnected","viewInput","getInputBlockByPredicate","b","systemValue","View","setAsSystemValue","output","connectTo","fogColorInput","FogColor","undefined","mesh","nodeMaterial","defines","scene","getScene","setValue","fogEnabled","GetFogState","effect","setFloat4","_fogParameters","fogMode","fogStart","fogEnd","fogDensity","state","_buildBlock","call","target","sharedData","blocksWithDefines","bindableBlocks","_emitFunctionFromInclude","removeUniforms","removeVaryings","removeIfDef","replaceStrings","search","replace","tempFogVariablename","_getFreeVariableName","color","_emitUniformFromString","compilationString","concat","_fogDistanceName","_declareOutput","associatedVariableName","worldPos","worldPosition","_emitVaryingFromString"],"sourceRoot":"","sources":["../../../../../../../../lts/core/generated/Materials/Node/Blocks/Dual/fogBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { Mesh } from \"../../../../Meshes/mesh\";\r\nimport type { Effect } from \"../../../effect\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\nimport { MaterialHelper } from \"../../../materialHelper\";\r\nimport type { NodeMaterial, NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport { InputBlock } from \"../Input/inputBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\n\r\nimport \"../../../../Shaders/ShadersInclude/fogFragmentDeclaration\";\r\n\r\n/**\r\n * Block used to add support for scene fog\r\n */\r\nexport class FogBlock extends NodeMaterialBlock {\r\n    private _fogDistanceName: string;\r\n    private _fogParameters: string;\r\n\r\n    /**\r\n     * Create a new FogBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.VertexAndFragment, false);\r\n\r\n        // Vertex\r\n        this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Vertex);\r\n        this.registerInput(\"view\", NodeMaterialBlockConnectionPointTypes.Matrix, false, NodeMaterialBlockTargets.Vertex);\r\n\r\n        // Fragment\r\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.Color3, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"fogColor\", NodeMaterialBlockConnectionPointTypes.Color3, false, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.input.acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Color4);\r\n        this.fogColor.acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Color4);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"FogBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the world position input component\r\n     */\r\n    public get worldPosition(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the view input component\r\n     */\r\n    public get view(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the color input component\r\n     */\r\n    public get input(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the fog color input component\r\n     */\r\n    public get fogColor(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public autoConfigure(material: NodeMaterial) {\r\n        if (!this.view.isConnected) {\r\n            let viewInput = material.getInputBlockByPredicate((b) => b.systemValue === NodeMaterialSystemValues.View);\r\n\r\n            if (!viewInput) {\r\n                viewInput = new InputBlock(\"view\");\r\n                viewInput.setAsSystemValue(NodeMaterialSystemValues.View);\r\n            }\r\n            viewInput.output.connectTo(this.view);\r\n        }\r\n        if (!this.fogColor.isConnected) {\r\n            let fogColorInput = material.getInputBlockByPredicate((b) => b.systemValue === NodeMaterialSystemValues.FogColor);\r\n\r\n            if (!fogColorInput) {\r\n                fogColorInput = new InputBlock(\"fogColor\", undefined, NodeMaterialBlockConnectionPointTypes.Color3);\r\n                fogColorInput.setAsSystemValue(NodeMaterialSystemValues.FogColor);\r\n            }\r\n            fogColorInput.output.connectTo(this.fogColor);\r\n        }\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        const scene = mesh.getScene();\r\n        defines.setValue(\"FOG\", nodeMaterial.fogEnabled && MaterialHelper.GetFogState(mesh, scene));\r\n    }\r\n\r\n    public bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh) {\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        const scene = mesh.getScene();\r\n        effect.setFloat4(this._fogParameters, scene.fogMode, scene.fogStart, scene.fogEnd, scene.fogDensity);\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (state.target === NodeMaterialBlockTargets.Fragment) {\r\n            state.sharedData.blocksWithDefines.push(this);\r\n            state.sharedData.bindableBlocks.push(this);\r\n\r\n            state._emitFunctionFromInclude(\"fogFragmentDeclaration\", `//${this.name}`, {\r\n                removeUniforms: true,\r\n                removeVaryings: true,\r\n                removeIfDef: false,\r\n                replaceStrings: [{ search: /float CalcFogFactor\\(\\)/, replace: \"float CalcFogFactor(vec3 vFogDistance, vec4 vFogInfos)\" }],\r\n            });\r\n\r\n            const tempFogVariablename = state._getFreeVariableName(\"fog\");\r\n            const color = this.input;\r\n            const fogColor = this.fogColor;\r\n            this._fogParameters = state._getFreeVariableName(\"fogParameters\");\r\n            const output = this._outputs[0];\r\n\r\n            state._emitUniformFromString(this._fogParameters, \"vec4\");\r\n\r\n            state.compilationString += `#ifdef FOG\\r\\n`;\r\n            state.compilationString += `float ${tempFogVariablename} = CalcFogFactor(${this._fogDistanceName}, ${this._fogParameters});\\r\\n`;\r\n            state.compilationString +=\r\n                this._declareOutput(output, state) +\r\n                ` = ${tempFogVariablename} * ${color.associatedVariableName}.rgb + (1.0 - ${tempFogVariablename}) * ${fogColor.associatedVariableName}.rgb;\\r\\n`;\r\n            state.compilationString += `#else\\r\\n${this._declareOutput(output, state)} =  ${color.associatedVariableName}.rgb;\\r\\n`;\r\n            state.compilationString += `#endif\\r\\n`;\r\n        } else {\r\n            const worldPos = this.worldPosition;\r\n            const view = this.view;\r\n            this._fogDistanceName = state._getFreeVariableName(\"vFogDistance\");\r\n            state._emitVaryingFromString(this._fogDistanceName, \"vec3\");\r\n            state.compilationString += `${this._fogDistanceName} = (${view.associatedVariableName} * ${worldPos.associatedVariableName}).xyz;\\r\\n`;\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.FogBlock\", FogBlock);\r\n"]},"metadata":{},"sourceType":"module"}