{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport { __awaiter, __generator } from \"tslib\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { WebXRState } from \"./webXRTypes.js\";\nimport { Tools } from \"../Misc/tools.js\";\n/**\n * Button which can be used to enter a different mode of XR\n */\n\nvar WebXREnterExitUIButton =\n/** @class */\nfunction () {\n  /**\n   * Creates a WebXREnterExitUIButton\n   * @param element button element\n   * @param sessionMode XR initialization session mode\n   * @param referenceSpaceType the type of reference space to be used\n   */\n  function WebXREnterExitUIButton(\n  /** button element */\n  element,\n  /** XR initialization options for the button */\n  sessionMode,\n  /** Reference space type */\n  referenceSpaceType) {\n    this.element = element;\n    this.sessionMode = sessionMode;\n    this.referenceSpaceType = referenceSpaceType;\n  }\n  /**\n   * Extendable function which can be used to update the button's visuals when the state changes\n   * @param activeButton the current active button in the UI\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  WebXREnterExitUIButton.prototype.update = function (activeButton) {};\n\n  return WebXREnterExitUIButton;\n}();\n\nexport { WebXREnterExitUIButton };\n/**\n * Options to create the webXR UI\n */\n\nvar WebXREnterExitUIOptions =\n/** @class */\nfunction () {\n  function WebXREnterExitUIOptions() {}\n\n  return WebXREnterExitUIOptions;\n}();\n\nexport { WebXREnterExitUIOptions };\n/**\n * UI to allow the user to enter/exit XR mode\n */\n\nvar WebXREnterExitUI =\n/** @class */\nfunction () {\n  /**\n   * Construct a new EnterExit UI class\n   *\n   * @param _scene babylon scene object to use\n   * @param options (read-only) version of the options passed to this UI\n   */\n  function WebXREnterExitUI(_scene,\n  /** version of the options passed to this UI */\n  options) {\n    var _this = this;\n\n    this._scene = _scene;\n    this.options = options;\n    this._activeButton = null;\n    this._buttons = [];\n    /**\n     * Fired every time the active button is changed.\n     *\n     * When xr is entered via a button that launches xr that button will be the callback parameter\n     *\n     * When exiting xr the callback parameter will be null)\n     */\n\n    this.activeButtonChangedObservable = new Observable(); // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n    this._onSessionGranted = function (evt) {\n      // This section is for future reference.\n      // As per specs, evt.session.mode should have the supported session mode, but no browser supports it for now.\n      // // check if the session granted is the same as the one requested\n      // const grantedMode = (evt.session as any).mode;\n      // if (grantedMode) {\n      //     this._buttons.some((btn, idx) => {\n      //         if (btn.sessionMode === grantedMode) {\n      //             this._enterXRWithButtonIndex(idx);\n      //             return true;\n      //         }\n      //         return false;\n      //     });\n      // } else\n      if (_this._helper) {\n        _this._enterXRWithButtonIndex(0);\n      }\n    };\n\n    this.overlay = document.createElement(\"div\");\n    this.overlay.classList.add(\"xr-button-overlay\");\n    this.overlay.style.cssText = \"z-index:11;position: absolute; right: 20px;bottom: 50px;\"; // prepare for session granted event\n\n    if (!options.ignoreSessionGrantedEvent && navigator.xr) {\n      navigator.xr.addEventListener(\"sessiongranted\", this._onSessionGranted);\n    } // if served over HTTP, warn people.\n    // Hopefully the browsers will catch up\n\n\n    if (typeof window !== \"undefined\") {\n      if (window.location && window.location.protocol === \"http:\" && window.location.hostname !== \"localhost\") {\n        Tools.Warn(\"WebXR can only be served over HTTPS\");\n        throw new Error(\"WebXR can only be served over HTTPS\");\n      }\n    }\n\n    if (options.customButtons) {\n      this._buttons = options.customButtons;\n    } else {\n      var sessionMode = options.sessionMode || \"immersive-vr\";\n      var referenceSpaceType = options.referenceSpaceType || \"local-floor\";\n      var url = typeof SVGSVGElement === \"undefined\" ? \"https://cdn.babylonjs.com/Assets/vrButton.png\" : \"data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20width%3D%222048%22%20height%3D%221152%22%20viewBox%3D%220%200%202048%201152%22%20version%3D%221.1%22%3E%3Cpath%20transform%3D%22rotate%28180%201024%2C576.0000000000001%29%22%20d%3D%22m1109%2C896q17%2C0%2030%2C-12t13%2C-30t-12.5%2C-30.5t-30.5%2C-12.5l-170%2C0q-18%2C0%20-30.5%2C12.5t-12.5%2C30.5t13%2C30t30%2C12l170%2C0zm-85%2C256q59%2C0%20132.5%2C-1.5t154.5%2C-5.5t164.5%2C-11.5t163%2C-20t150%2C-30t124.5%2C-41.5q23%2C-11%2042%2C-24t38%2C-30q27%2C-25%2041%2C-61.5t14%2C-72.5l0%2C-257q0%2C-123%20-47%2C-232t-128%2C-190t-190%2C-128t-232%2C-47l-81%2C0q-37%2C0%20-68.5%2C14t-60.5%2C34.5t-55.5%2C45t-53%2C45t-53%2C34.5t-55.5%2C14t-55.5%2C-14t-53%2C-34.5t-53%2C-45t-55.5%2C-45t-60.5%2C-34.5t-68.5%2C-14l-81%2C0q-123%2C0%20-232%2C47t-190%2C128t-128%2C190t-47%2C232l0%2C257q0%2C68%2038%2C115t97%2C73q54%2C24%20124.5%2C41.5t150%2C30t163%2C20t164.5%2C11.5t154.5%2C5.5t132.5%2C1.5zm939%2C-298q0%2C39%20-24.5%2C67t-58.5%2C42q-54%2C23%20-122%2C39.5t-143.5%2C28t-155.5%2C19t-157%2C11t-148.5%2C5t-129.5%2C1.5q-59%2C0%20-130%2C-1.5t-148%2C-5t-157%2C-11t-155.5%2C-19t-143.5%2C-28t-122%2C-39.5q-34%2C-14%20-58.5%2C-42t-24.5%2C-67l0%2C-257q0%2C-106%2040.5%2C-199t110%2C-162.5t162.5%2C-109.5t199%2C-40l81%2C0q27%2C0%2052%2C14t50%2C34.5t51%2C44.5t55.5%2C44.5t63.5%2C34.5t74%2C14t74%2C-14t63.5%2C-34.5t55.5%2C-44.5t51%2C-44.5t50%2C-34.5t52%2C-14l14%2C0q37%2C0%2070%2C0.5t64.5%2C4.5t63.5%2C12t68%2C23q71%2C30%20128.5%2C78.5t98.5%2C110t63.5%2C133.5t22.5%2C149l0%2C257z%22%20fill%3D%22white%22%20/%3E%3C/svg%3E%0A\";\n      var css = \".babylonVRicon { color: #868686; border-color: #868686; border-style: solid; margin-left: 10px; height: 50px; width: 80px; background-color: rgba(51,51,51,0.7); background-image: url(\" + url + \"); background-size: 80%; background-repeat:no-repeat; background-position: center; border: none; outline: none; transition: transform 0.125s ease-out } .babylonVRicon:hover { transform: scale(1.05) } .babylonVRicon:active {background-color: rgba(51,51,51,1) } .babylonVRicon:focus {background-color: rgba(51,51,51,1) }\";\n      css += '.babylonVRicon.vrdisplaypresenting { background-image: none;} .vrdisplaypresenting::after { content: \"EXIT\"} .xr-error::after { content: \"ERROR\"}';\n      var style = document.createElement(\"style\");\n      style.appendChild(document.createTextNode(css));\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      var hmdBtn_1 = document.createElement(\"button\");\n      hmdBtn_1.className = \"babylonVRicon\";\n      hmdBtn_1.title = \"\".concat(sessionMode, \" - \").concat(referenceSpaceType);\n\n      this._buttons.push(new WebXREnterExitUIButton(hmdBtn_1, sessionMode, referenceSpaceType));\n\n      this._buttons[this._buttons.length - 1].update = function (activeButton) {\n        this.element.style.display = activeButton === null || activeButton === this ? \"\" : \"none\";\n        hmdBtn_1.className = \"babylonVRicon\" + (activeButton === this ? \" vrdisplaypresenting\" : \"\");\n      };\n\n      this._updateButtons(null);\n    }\n\n    var renderCanvas = _scene.getEngine().getInputElement();\n\n    if (renderCanvas && renderCanvas.parentNode) {\n      renderCanvas.parentNode.appendChild(this.overlay);\n\n      _scene.onDisposeObservable.addOnce(function () {\n        _this.dispose();\n      });\n    }\n  }\n  /**\n   * Set the helper to be used with this UI component.\n   * The UI is bound to an experience helper. If not provided the UI can still be used but the events should be registered by the developer.\n   *\n   * @param helper the experience helper to attach\n   * @param renderTarget an optional render target (in case it is created outside of the helper scope)\n   * @returns a promise that resolves when the ui is ready\n   */\n\n\n  WebXREnterExitUI.prototype.setHelperAsync = function (helper, renderTarget) {\n    return __awaiter(this, void 0, void 0, function () {\n      var supportedPromises, results;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this._helper = helper;\n            this._renderTarget = renderTarget;\n            supportedPromises = this._buttons.map(function (btn) {\n              return helper.sessionManager.isSessionSupportedAsync(btn.sessionMode);\n            });\n            helper.onStateChangedObservable.add(function (state) {\n              if (state == WebXRState.NOT_IN_XR) {\n                _this._updateButtons(null);\n              }\n            });\n            return [4\n            /*yield*/\n            , Promise.all(supportedPromises)];\n\n          case 1:\n            results = _a.sent();\n            results.forEach(function (supported, i) {\n              if (supported) {\n                _this.overlay.appendChild(_this._buttons[i].element);\n\n                _this._buttons[i].element.onclick = _this._enterXRWithButtonIndex.bind(_this, i);\n              } else {\n                Tools.Warn(\"Session mode \\\"\".concat(_this._buttons[i].sessionMode, \"\\\" not supported in browser\"));\n              }\n            });\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates UI to allow the user to enter/exit XR mode\n   * @param scene the scene to add the ui to\n   * @param helper the xr experience helper to enter/exit xr with\n   * @param options options to configure the UI\n   * @returns the created ui\n   */\n\n\n  WebXREnterExitUI.CreateAsync = function (scene, helper, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ui;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ui = new WebXREnterExitUI(scene, options);\n            return [4\n            /*yield*/\n            , ui.setHelperAsync(helper, options.renderTarget || undefined)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , ui];\n        }\n      });\n    });\n  };\n\n  WebXREnterExitUI.prototype._enterXRWithButtonIndex = function (idx) {\n    if (idx === void 0) {\n      idx = 0;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var e_1, element, prevTitle;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(this._helper.state == WebXRState.IN_XR)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this._helper.exitXRAsync()];\n\n          case 1:\n            _a.sent();\n\n            this._updateButtons(null);\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 2:\n            if (!(this._helper.state == WebXRState.NOT_IN_XR)) return [3\n            /*break*/\n            , 6];\n            _a.label = 3;\n\n          case 3:\n            _a.trys.push([3, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , this._helper.enterXRAsync(this._buttons[idx].sessionMode, this._buttons[idx].referenceSpaceType, this._renderTarget, {\n              optionalFeatures: this.options.optionalFeatures,\n              requiredFeatures: this.options.requiredFeatures\n            })];\n\n          case 4:\n            _a.sent();\n\n            this._updateButtons(this._buttons[idx]);\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            e_1 = _a.sent(); // make sure button is visible\n\n            this._updateButtons(null);\n\n            element = this._buttons[idx].element;\n            prevTitle = element.title;\n            element.title = \"Error entering XR session : \" + prevTitle;\n            element.classList.add(\"xr-error\");\n\n            if (this.options.onError) {\n              this.options.onError(e_1);\n            }\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Disposes of the XR UI component\n   */\n\n\n  WebXREnterExitUI.prototype.dispose = function () {\n    var renderCanvas = this._scene.getEngine().getInputElement();\n\n    if (renderCanvas && renderCanvas.parentNode && renderCanvas.parentNode.contains(this.overlay)) {\n      renderCanvas.parentNode.removeChild(this.overlay);\n    }\n\n    this.activeButtonChangedObservable.clear();\n    navigator.xr.removeEventListener(\"sessiongranted\", this._onSessionGranted);\n  };\n\n  WebXREnterExitUI.prototype._updateButtons = function (activeButton) {\n    var _this = this;\n\n    this._activeButton = activeButton;\n\n    this._buttons.forEach(function (b) {\n      b.update(_this._activeButton);\n    });\n\n    this.activeButtonChangedObservable.notifyObservers(this._activeButton);\n  };\n\n  return WebXREnterExitUI;\n}();\n\nexport { WebXREnterExitUI };","map":{"version":3,"mappings":"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","names":["Observable","WebXRState","Tools","element","sessionMode","referenceSpaceType","WebXREnterExitUIButton","activeButton","_scene","options","evt","_this","_helper","_enterXRWithButtonIndex","overlay","document","createElement","classList","add","style","cssText","ignoreSessionGrantedEvent","navigator","xr","addEventListener","_onSessionGranted","window","location","protocol","hostname","Warn","Error","customButtons","_buttons","url","SVGSVGElement","css","appendChild","createTextNode","getElementsByTagName","hmdBtn_1","className","title","concat","push","length","update","display","_updateButtons","renderCanvas","getEngine","getInputElement","parentNode","onDisposeObservable","addOnce","dispose","WebXREnterExitUI","helper","renderTarget","_renderTarget","supportedPromises","map","btn","sessionManager","isSessionSupportedAsync","onStateChangedObservable","state","NOT_IN_XR","Promise","all","results","_a","forEach","supported","i","onclick","bind","scene","ui","setHelperAsync","undefined","idx","IN_XR","exitXRAsync","enterXRAsync","optionalFeatures","requiredFeatures","prevTitle","onError","e_1","contains","removeChild","activeButtonChangedObservable","clear","removeEventListener","_activeButton","b","notifyObservers"],"sourceRoot":"","sources":["../../../../../lts/core/generated/XR/webXREnterExitUI.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { IDisposable, Scene } from \"../scene\";\r\nimport type { WebXRExperienceHelper } from \"./webXRExperienceHelper\";\r\nimport type { WebXRRenderTarget } from \"./webXRTypes\";\r\nimport { WebXRState } from \"./webXRTypes\";\r\nimport { Tools } from \"../Misc/tools\";\r\n/**\r\n * Button which can be used to enter a different mode of XR\r\n */\r\nexport class WebXREnterExitUIButton {\r\n    /**\r\n     * Creates a WebXREnterExitUIButton\r\n     * @param element button element\r\n     * @param sessionMode XR initialization session mode\r\n     * @param referenceSpaceType the type of reference space to be used\r\n     */\r\n    constructor(\r\n        /** button element */\r\n        public element: HTMLElement,\r\n        /** XR initialization options for the button */\r\n        public sessionMode: XRSessionMode,\r\n        /** Reference space type */\r\n        public referenceSpaceType: XRReferenceSpaceType\r\n    ) {}\r\n\r\n    /**\r\n     * Extendable function which can be used to update the button's visuals when the state changes\r\n     * @param activeButton the current active button in the UI\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public update(activeButton: Nullable<WebXREnterExitUIButton>) {}\r\n}\r\n\r\n/**\r\n * Options to create the webXR UI\r\n */\r\nexport class WebXREnterExitUIOptions {\r\n    /**\r\n     * User provided buttons to enable/disable WebXR. The system will provide default if not set\r\n     */\r\n    customButtons?: Array<WebXREnterExitUIButton>;\r\n    /**\r\n     * A reference space type to use when creating the default button.\r\n     * Default is local-floor\r\n     */\r\n    referenceSpaceType?: XRReferenceSpaceType;\r\n    /**\r\n     * Context to enter xr with\r\n     */\r\n    renderTarget?: Nullable<WebXRRenderTarget>;\r\n    /**\r\n     * A session mode to use when creating the default button.\r\n     * Default is immersive-vr\r\n     */\r\n    sessionMode?: XRSessionMode;\r\n\r\n    /**\r\n     * A list of optional features to init the session with\r\n     */\r\n    optionalFeatures?: string[];\r\n\r\n    /**\r\n     * A list of optional features to init the session with\r\n     */\r\n    requiredFeatures?: string[];\r\n\r\n    /**\r\n     * If set, the `sessiongranted` event will not be registered. `sessiongranted` is used to move seamlessly between WebXR experiences.\r\n     * If set to true the user will be forced to press the \"enter XR\" button even if sessiongranted event was triggered.\r\n     * If not set and a sessiongranted event was triggered, the XR session will start automatically.\r\n     */\r\n    ignoreSessionGrantedEvent?: boolean;\r\n\r\n    /**\r\n     * If defined, this function will be executed if the UI encounters an error when entering XR\r\n     */\r\n    onError?: (error: any) => void;\r\n}\r\n/**\r\n * UI to allow the user to enter/exit XR mode\r\n */\r\nexport class WebXREnterExitUI implements IDisposable {\r\n    private _activeButton: Nullable<WebXREnterExitUIButton> = null;\r\n    private _buttons: Array<WebXREnterExitUIButton> = [];\r\n    private _helper: WebXRExperienceHelper;\r\n    private _renderTarget?: WebXRRenderTarget;\r\n    /**\r\n     * The HTML Div Element to which buttons are added.\r\n     */\r\n    public readonly overlay: HTMLDivElement;\r\n\r\n    /**\r\n     * Fired every time the active button is changed.\r\n     *\r\n     * When xr is entered via a button that launches xr that button will be the callback parameter\r\n     *\r\n     * When exiting xr the callback parameter will be null)\r\n     */\r\n    public activeButtonChangedObservable = new Observable<Nullable<WebXREnterExitUIButton>>();\r\n\r\n    /**\r\n     * Construct a new EnterExit UI class\r\n     *\r\n     * @param _scene babylon scene object to use\r\n     * @param options (read-only) version of the options passed to this UI\r\n     */\r\n    public constructor(\r\n        private _scene: Scene,\r\n        /** version of the options passed to this UI */\r\n        public options: WebXREnterExitUIOptions\r\n    ) {\r\n        this.overlay = document.createElement(\"div\");\r\n        this.overlay.classList.add(\"xr-button-overlay\");\r\n        this.overlay.style.cssText = \"z-index:11;position: absolute; right: 20px;bottom: 50px;\";\r\n\r\n        // prepare for session granted event\r\n        if (!options.ignoreSessionGrantedEvent && (navigator as any).xr) {\r\n            (navigator as any).xr.addEventListener(\"sessiongranted\", this._onSessionGranted);\r\n        }\r\n\r\n        // if served over HTTP, warn people.\r\n        // Hopefully the browsers will catch up\r\n        if (typeof window !== \"undefined\") {\r\n            if (window.location && window.location.protocol === \"http:\" && window.location.hostname !== \"localhost\") {\r\n                Tools.Warn(\"WebXR can only be served over HTTPS\");\r\n                throw new Error(\"WebXR can only be served over HTTPS\");\r\n            }\r\n        }\r\n\r\n        if (options.customButtons) {\r\n            this._buttons = options.customButtons;\r\n        } else {\r\n            const sessionMode = options.sessionMode || \"immersive-vr\";\r\n            const referenceSpaceType = options.referenceSpaceType || \"local-floor\";\r\n            const url =\r\n                typeof SVGSVGElement === \"undefined\"\r\n                    ? \"https://cdn.babylonjs.com/Assets/vrButton.png\"\r\n                    : \"data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20width%3D%222048%22%20height%3D%221152%22%20viewBox%3D%220%200%202048%201152%22%20version%3D%221.1%22%3E%3Cpath%20transform%3D%22rotate%28180%201024%2C576.0000000000001%29%22%20d%3D%22m1109%2C896q17%2C0%2030%2C-12t13%2C-30t-12.5%2C-30.5t-30.5%2C-12.5l-170%2C0q-18%2C0%20-30.5%2C12.5t-12.5%2C30.5t13%2C30t30%2C12l170%2C0zm-85%2C256q59%2C0%20132.5%2C-1.5t154.5%2C-5.5t164.5%2C-11.5t163%2C-20t150%2C-30t124.5%2C-41.5q23%2C-11%2042%2C-24t38%2C-30q27%2C-25%2041%2C-61.5t14%2C-72.5l0%2C-257q0%2C-123%20-47%2C-232t-128%2C-190t-190%2C-128t-232%2C-47l-81%2C0q-37%2C0%20-68.5%2C14t-60.5%2C34.5t-55.5%2C45t-53%2C45t-53%2C34.5t-55.5%2C14t-55.5%2C-14t-53%2C-34.5t-53%2C-45t-55.5%2C-45t-60.5%2C-34.5t-68.5%2C-14l-81%2C0q-123%2C0%20-232%2C47t-190%2C128t-128%2C190t-47%2C232l0%2C257q0%2C68%2038%2C115t97%2C73q54%2C24%20124.5%2C41.5t150%2C30t163%2C20t164.5%2C11.5t154.5%2C5.5t132.5%2C1.5zm939%2C-298q0%2C39%20-24.5%2C67t-58.5%2C42q-54%2C23%20-122%2C39.5t-143.5%2C28t-155.5%2C19t-157%2C11t-148.5%2C5t-129.5%2C1.5q-59%2C0%20-130%2C-1.5t-148%2C-5t-157%2C-11t-155.5%2C-19t-143.5%2C-28t-122%2C-39.5q-34%2C-14%20-58.5%2C-42t-24.5%2C-67l0%2C-257q0%2C-106%2040.5%2C-199t110%2C-162.5t162.5%2C-109.5t199%2C-40l81%2C0q27%2C0%2052%2C14t50%2C34.5t51%2C44.5t55.5%2C44.5t63.5%2C34.5t74%2C14t74%2C-14t63.5%2C-34.5t55.5%2C-44.5t51%2C-44.5t50%2C-34.5t52%2C-14l14%2C0q37%2C0%2070%2C0.5t64.5%2C4.5t63.5%2C12t68%2C23q71%2C30%20128.5%2C78.5t98.5%2C110t63.5%2C133.5t22.5%2C149l0%2C257z%22%20fill%3D%22white%22%20/%3E%3C/svg%3E%0A\";\r\n            let css =\r\n                \".babylonVRicon { color: #868686; border-color: #868686; border-style: solid; margin-left: 10px; height: 50px; width: 80px; background-color: rgba(51,51,51,0.7); background-image: url(\" +\r\n                url +\r\n                \"); background-size: 80%; background-repeat:no-repeat; background-position: center; border: none; outline: none; transition: transform 0.125s ease-out } .babylonVRicon:hover { transform: scale(1.05) } .babylonVRicon:active {background-color: rgba(51,51,51,1) } .babylonVRicon:focus {background-color: rgba(51,51,51,1) }\";\r\n            css += '.babylonVRicon.vrdisplaypresenting { background-image: none;} .vrdisplaypresenting::after { content: \"EXIT\"} .xr-error::after { content: \"ERROR\"}';\r\n\r\n            const style = document.createElement(\"style\");\r\n            style.appendChild(document.createTextNode(css));\r\n            document.getElementsByTagName(\"head\")[0].appendChild(style);\r\n            const hmdBtn = document.createElement(\"button\");\r\n            hmdBtn.className = \"babylonVRicon\";\r\n            hmdBtn.title = `${sessionMode} - ${referenceSpaceType}`;\r\n            this._buttons.push(new WebXREnterExitUIButton(hmdBtn, sessionMode, referenceSpaceType));\r\n            this._buttons[this._buttons.length - 1].update = function (activeButton: WebXREnterExitUIButton) {\r\n                this.element.style.display = activeButton === null || activeButton === this ? \"\" : \"none\";\r\n                hmdBtn.className = \"babylonVRicon\" + (activeButton === this ? \" vrdisplaypresenting\" : \"\");\r\n            };\r\n            this._updateButtons(null);\r\n        }\r\n\r\n        const renderCanvas = _scene.getEngine().getInputElement();\r\n        if (renderCanvas && renderCanvas.parentNode) {\r\n            renderCanvas.parentNode.appendChild(this.overlay);\r\n            _scene.onDisposeObservable.addOnce(() => {\r\n                this.dispose();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the helper to be used with this UI component.\r\n     * The UI is bound to an experience helper. If not provided the UI can still be used but the events should be registered by the developer.\r\n     *\r\n     * @param helper the experience helper to attach\r\n     * @param renderTarget an optional render target (in case it is created outside of the helper scope)\r\n     * @returns a promise that resolves when the ui is ready\r\n     */\r\n    public async setHelperAsync(helper: WebXRExperienceHelper, renderTarget?: WebXRRenderTarget): Promise<void> {\r\n        this._helper = helper;\r\n        this._renderTarget = renderTarget;\r\n        const supportedPromises = this._buttons.map((btn) => {\r\n            return helper.sessionManager.isSessionSupportedAsync(btn.sessionMode);\r\n        });\r\n        helper.onStateChangedObservable.add((state) => {\r\n            if (state == WebXRState.NOT_IN_XR) {\r\n                this._updateButtons(null);\r\n            }\r\n        });\r\n        const results = await Promise.all(supportedPromises);\r\n        results.forEach((supported, i) => {\r\n            if (supported) {\r\n                this.overlay.appendChild(this._buttons[i].element);\r\n                this._buttons[i].element.onclick = this._enterXRWithButtonIndex.bind(this, i);\r\n            } else {\r\n                Tools.Warn(`Session mode \"${this._buttons[i].sessionMode}\" not supported in browser`);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates UI to allow the user to enter/exit XR mode\r\n     * @param scene the scene to add the ui to\r\n     * @param helper the xr experience helper to enter/exit xr with\r\n     * @param options options to configure the UI\r\n     * @returns the created ui\r\n     */\r\n    public static async CreateAsync(scene: Scene, helper: WebXRExperienceHelper, options: WebXREnterExitUIOptions): Promise<WebXREnterExitUI> {\r\n        const ui = new WebXREnterExitUI(scene, options);\r\n        await ui.setHelperAsync(helper, options.renderTarget || undefined);\r\n        return ui;\r\n    }\r\n\r\n    private async _enterXRWithButtonIndex(idx: number = 0) {\r\n        if (this._helper.state == WebXRState.IN_XR) {\r\n            await this._helper.exitXRAsync();\r\n            this._updateButtons(null);\r\n        } else if (this._helper.state == WebXRState.NOT_IN_XR) {\r\n            try {\r\n                await this._helper.enterXRAsync(this._buttons[idx].sessionMode, this._buttons[idx].referenceSpaceType, this._renderTarget, {\r\n                    optionalFeatures: this.options.optionalFeatures,\r\n                    requiredFeatures: this.options.requiredFeatures,\r\n                });\r\n                this._updateButtons(this._buttons[idx]);\r\n            } catch (e) {\r\n                // make sure button is visible\r\n                this._updateButtons(null);\r\n                const element = this._buttons[idx].element;\r\n                const prevTitle = element.title;\r\n                element.title = \"Error entering XR session : \" + prevTitle;\r\n                element.classList.add(\"xr-error\");\r\n                if (this.options.onError) {\r\n                    this.options.onError(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes of the XR UI component\r\n     */\r\n    public dispose() {\r\n        const renderCanvas = this._scene.getEngine().getInputElement();\r\n        if (renderCanvas && renderCanvas.parentNode && renderCanvas.parentNode.contains(this.overlay)) {\r\n            renderCanvas.parentNode.removeChild(this.overlay);\r\n        }\r\n        this.activeButtonChangedObservable.clear();\r\n        (navigator as any).xr.removeEventListener(\"sessiongranted\", this._onSessionGranted);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private _onSessionGranted = (evt: { session: XRSession }) => {\r\n        // This section is for future reference.\r\n        // As per specs, evt.session.mode should have the supported session mode, but no browser supports it for now.\r\n\r\n        // // check if the session granted is the same as the one requested\r\n        // const grantedMode = (evt.session as any).mode;\r\n        // if (grantedMode) {\r\n        //     this._buttons.some((btn, idx) => {\r\n        //         if (btn.sessionMode === grantedMode) {\r\n        //             this._enterXRWithButtonIndex(idx);\r\n        //             return true;\r\n        //         }\r\n        //         return false;\r\n        //     });\r\n        // } else\r\n\r\n        if (this._helper) {\r\n            this._enterXRWithButtonIndex(0);\r\n        }\r\n    };\r\n\r\n    private _updateButtons(activeButton: Nullable<WebXREnterExitUIButton>) {\r\n        this._activeButton = activeButton;\r\n        this._buttons.forEach((b) => {\r\n            b.update(this._activeButton);\r\n        });\r\n        this.activeButtonChangedObservable.notifyObservers(this._activeButton);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}