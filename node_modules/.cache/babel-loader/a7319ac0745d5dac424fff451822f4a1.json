{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\n/**\n * Block used for the particle ramp gradient section\n */\n\nvar ParticleRampGradientBlock =\n/** @class */\nfunction (_super) {\n  __extends(ParticleRampGradientBlock, _super);\n  /**\n   * Create a new ParticleRampGradientBlock\n   * @param name defines the block name\n   */\n\n\n  function ParticleRampGradientBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;\n\n    _this._isUnique = true;\n\n    _this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color4, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"rampColor\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Fragment);\n\n    return _this;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  ParticleRampGradientBlock.prototype.getClassName = function () {\n    return \"ParticleRampGradientBlock\";\n  };\n\n  Object.defineProperty(ParticleRampGradientBlock.prototype, \"color\", {\n    /**\n     * Gets the color input component\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ParticleRampGradientBlock.prototype, \"rampColor\", {\n    /**\n     * Gets the rampColor output component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Initialize the block and prepare the context for build\n   * @param state defines the state that will be used for the build\n   */\n\n  ParticleRampGradientBlock.prototype.initialize = function (state) {\n    state._excludeVariableName(\"remapRanges\");\n\n    state._excludeVariableName(\"rampSampler\");\n\n    state._excludeVariableName(\"baseColor\");\n\n    state._excludeVariableName(\"alpha\");\n\n    state._excludeVariableName(\"remappedColorIndex\");\n\n    state._excludeVariableName(\"rampColor\");\n\n    state._excludeVariableName(\"finalAlpha\");\n  };\n\n  ParticleRampGradientBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    if (state.target === NodeMaterialBlockTargets.Vertex) {\n      return;\n    }\n\n    state._emit2DSampler(\"rampSampler\");\n\n    state._emitVaryingFromString(\"remapRanges\", \"vec4\", \"RAMPGRADIENT\");\n\n    state.compilationString += \"\\n            #ifdef RAMPGRADIENT\\n                vec4 baseColor = \".concat(this.color.associatedVariableName, \";\\n                float alpha = \").concat(this.color.associatedVariableName, \".a;\\n\\n                float remappedColorIndex = clamp((alpha - remapRanges.x) / remapRanges.y, 0.0, 1.0);\\n\\n                vec4 rampColor = texture2D(rampSampler, vec2(1.0 - remappedColorIndex, 0.));\\n                baseColor.rgb *= rampColor.rgb;\\n\\n                // Remapped alpha\\n                float finalAlpha = baseColor.a;\\n                baseColor.a = clamp((alpha * rampColor.a - remapRanges.z) / remapRanges.w, 0.0, 1.0);\\n\\n                \").concat(this._declareOutput(this.rampColor, state), \" = baseColor;\\n            #else\\n                \").concat(this._declareOutput(this.rampColor, state), \" = \").concat(this.color.associatedVariableName, \";\\n            #endif\\n        \");\n    return this;\n  };\n\n  return ParticleRampGradientBlock;\n}(NodeMaterialBlock);\n\nexport { ParticleRampGradientBlock };\nRegisterClass(\"BABYLON.ParticleRampGradientBlock\", ParticleRampGradientBlock);","map":{"version":3,"mappings":";;;AAAA,SAASA,iBAAT,QAAkC,4BAAlC;AACA,SAASC,qCAAT,QAAsD,sDAAtD;AAEA,SAASC,wBAAT,QAAyC,yCAAzC;AAEA,SAASC,aAAT,QAA8B,+BAA9B;AAEA;;;;AAGA;AAAA;AAAA;AAA+CC;AAC3C;;;;;;AAIA,qCAAmBC,IAAnB,EAA+B;AAA/B,gBACIC,kBAAMD,IAAN,EAAYH,wBAAwB,CAACK,QAArC,KAA8C,IADlD;;AAGIC,SAAI,CAACC,SAAL,GAAiB,IAAjB;;AAEAD,SAAI,CAACE,aAAL,CAAmB,OAAnB,EAA4BT,qCAAqC,CAACU,MAAlE,EAA0E,KAA1E,EAAiFT,wBAAwB,CAACK,QAA1G;;AAEAC,SAAI,CAACI,cAAL,CAAoB,WAApB,EAAiCX,qCAAqC,CAACU,MAAvE,EAA+ET,wBAAwB,CAACK,QAAxG;;;AACH;AAED;;;;;;AAIOM,qDAAP;AACI,WAAO,2BAAP;AACH,GAFM;;AAOPC,wBAAWD,mCAAX,EAAW,OAAX,EAAgB;AAHhB;;;SAGA;AACI,aAAO,KAAKE,OAAL,CAAa,CAAb,CAAP;AACH,KAFe;qBAAA;;AAAA,GAAhB;AAOAD,wBAAWD,mCAAX,EAAW,WAAX,EAAoB;AAHpB;;;SAGA;AACI,aAAO,KAAKG,QAAL,CAAc,CAAd,CAAP;AACH,KAFmB;qBAAA;;AAAA,GAApB;AAIA;;;;;AAIOH,mDAAP,UAAkBI,KAAlB,EAA+C;AAC3CA,SAAK,CAACC,oBAAN,CAA2B,aAA3B;;AACAD,SAAK,CAACC,oBAAN,CAA2B,aAA3B;;AACAD,SAAK,CAACC,oBAAN,CAA2B,WAA3B;;AACAD,SAAK,CAACC,oBAAN,CAA2B,OAA3B;;AACAD,SAAK,CAACC,oBAAN,CAA2B,oBAA3B;;AACAD,SAAK,CAACC,oBAAN,CAA2B,WAA3B;;AACAD,SAAK,CAACC,oBAAN,CAA2B,YAA3B;AACH,GARM;;AAUGL,oDAAV,UAAsBI,KAAtB,EAAmD;AAC/CX,qBAAMa,WAAN,CAAiBC,IAAjB,CAAiB,IAAjB,EAAkBH,KAAlB;;AAEA,QAAIA,KAAK,CAACI,MAAN,KAAiBnB,wBAAwB,CAACoB,MAA9C,EAAsD;AAClD;AACH;;AAEDL,SAAK,CAACM,cAAN,CAAqB,aAArB;;AACAN,SAAK,CAACO,sBAAN,CAA6B,aAA7B,EAA4C,MAA5C,EAAoD,cAApD;;AAEAP,SAAK,CAACQ,iBAAN,IAA2B,8EAEA,KAAKC,KAAL,CAAWC,sBAFX,EAEiC,mCAFjC,EAEiCC,MAFjC,CAGH,KAAKF,KAAL,CAAWC,sBAHR,EAG8B,+cAH9B,EAG8BC,MAH9B,CAcjB,KAAKC,cAAL,CAAoB,KAAKC,SAAzB,EAAoCb,KAApC,CAdiB,EAcyB,oDAdzB,EAcyBW,MAdzB,CAgBjB,KAAKC,cAAL,CAAoB,KAAKC,SAAzB,EAAoCb,KAApC,CAhBiB,EAgByB,KAhBzB,EAgByBW,MAhBzB,CAgB+B,KAAKF,KAAL,CAAWC,sBAhB1C,EAgBgE,iCAhBhE,CAA3B;AAoBA,WAAO,IAAP;AACH,GA/BS;;AAgCd;AAAC,CAnFD,CAA+C3B,iBAA/C;;;AAqFAG,aAAa,CAAC,mCAAD,EAAsCU,yBAAtC,CAAb","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","__extends","name","_super","Fragment","_this","_isUnique","registerInput","Color4","registerOutput","ParticleRampGradientBlock","Object","_inputs","_outputs","state","_excludeVariableName","_buildBlock","call","target","Vertex","_emit2DSampler","_emitVaryingFromString","compilationString","color","associatedVariableName","concat","_declareOutput","rampColor"],"sourceRoot":"","sources":["../../../../../../../../lts/core/generated/Materials/Node/Blocks/Particle/particleRampGradientBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\n\r\n/**\r\n * Block used for the particle ramp gradient section\r\n */\r\nexport class ParticleRampGradientBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Create a new ParticleRampGradientBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this._isUnique = true;\r\n\r\n        this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color4, false, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerOutput(\"rampColor\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Fragment);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ParticleRampGradientBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the color input component\r\n     */\r\n    public get color(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the rampColor output component\r\n     */\r\n    public get rampColor(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"remapRanges\");\r\n        state._excludeVariableName(\"rampSampler\");\r\n        state._excludeVariableName(\"baseColor\");\r\n        state._excludeVariableName(\"alpha\");\r\n        state._excludeVariableName(\"remappedColorIndex\");\r\n        state._excludeVariableName(\"rampColor\");\r\n        state._excludeVariableName(\"finalAlpha\");\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (state.target === NodeMaterialBlockTargets.Vertex) {\r\n            return;\r\n        }\r\n\r\n        state._emit2DSampler(\"rampSampler\");\r\n        state._emitVaryingFromString(\"remapRanges\", \"vec4\", \"RAMPGRADIENT\");\r\n\r\n        state.compilationString += `\r\n            #ifdef RAMPGRADIENT\r\n                vec4 baseColor = ${this.color.associatedVariableName};\r\n                float alpha = ${this.color.associatedVariableName}.a;\r\n\r\n                float remappedColorIndex = clamp((alpha - remapRanges.x) / remapRanges.y, 0.0, 1.0);\r\n\r\n                vec4 rampColor = texture2D(rampSampler, vec2(1.0 - remappedColorIndex, 0.));\r\n                baseColor.rgb *= rampColor.rgb;\r\n\r\n                // Remapped alpha\r\n                float finalAlpha = baseColor.a;\r\n                baseColor.a = clamp((alpha * rampColor.a - remapRanges.z) / remapRanges.w, 0.0, 1.0);\r\n\r\n                ${this._declareOutput(this.rampColor, state)} = baseColor;\r\n            #else\r\n                ${this._declareOutput(this.rampColor, state)} = ${this.color.associatedVariableName};\r\n            #endif\r\n        `;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ParticleRampGradientBlock\", ParticleRampGradientBlock);\r\n"]},"metadata":{},"sourceType":"module"}