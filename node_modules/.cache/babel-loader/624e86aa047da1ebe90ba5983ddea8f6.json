{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Vector2, Vector3 } from \"../Maths/math.vector.js\";\nimport { Color3, Color4 } from \"../Maths/math.color.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\n/**\n * The action to be carried out following a trigger\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions#available-actions\n */\n\nvar Action =\n/** @class */\nfunction () {\n  /**\n   * Creates a new Action\n   * @param triggerOptions the trigger, with or without parameters, for the action\n   * @param condition an optional determinant of action\n   */\n  function Action(\n  /** the trigger, with or without parameters, for the action */\n  triggerOptions, condition) {\n    this.triggerOptions = triggerOptions;\n    /**\n     * An event triggered prior to action being executed.\n     */\n\n    this.onBeforeExecuteObservable = new Observable();\n\n    if (triggerOptions.parameter) {\n      this.trigger = triggerOptions.trigger;\n      this._triggerParameter = triggerOptions.parameter;\n    } else if (triggerOptions.trigger) {\n      this.trigger = triggerOptions.trigger;\n    } else {\n      this.trigger = triggerOptions;\n    }\n\n    this._nextActiveAction = this;\n    this._condition = condition;\n  }\n  /**\n   * Internal only\n   * @hidden\n   */\n\n\n  Action.prototype._prepare = function () {};\n  /**\n   * Gets the trigger parameter\n   * @returns the trigger parameter\n   */\n\n\n  Action.prototype.getTriggerParameter = function () {\n    return this._triggerParameter;\n  };\n  /**\n   * Sets the trigger parameter\n   * @param value defines the new trigger parameter\n   */\n\n\n  Action.prototype.setTriggerParameter = function (value) {\n    this._triggerParameter = value;\n  };\n  /**\n   * Internal only - Returns if the current condition allows to run the action\n   * @hidden\n   */\n\n\n  Action.prototype._evaluateConditionForCurrentFrame = function () {\n    var condition = this._condition;\n\n    if (!condition) {\n      return true;\n    }\n\n    var currentRenderId = this._actionManager.getScene().getRenderId(); // We cache the current evaluation for the current frame\n\n\n    if (condition._evaluationId !== currentRenderId) {\n      condition._evaluationId = currentRenderId;\n      condition._currentResult = condition.isValid();\n    }\n\n    return condition._currentResult;\n  };\n  /**\n   * Internal only - executes current action event\n   * @param evt\n   * @hidden\n   */\n\n\n  Action.prototype._executeCurrent = function (evt) {\n    var isConditionValid = this._evaluateConditionForCurrentFrame();\n\n    if (!isConditionValid) {\n      return;\n    }\n\n    this.onBeforeExecuteObservable.notifyObservers(this);\n\n    this._nextActiveAction.execute(evt);\n\n    this.skipToNextActiveAction();\n  };\n  /**\n   * Execute placeholder for child classes\n   * @param evt optional action event\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  Action.prototype.execute = function (evt) {};\n  /**\n   * Skips to next active action\n   */\n\n\n  Action.prototype.skipToNextActiveAction = function () {\n    if (this._nextActiveAction._child) {\n      if (!this._nextActiveAction._child._actionManager) {\n        this._nextActiveAction._child._actionManager = this._actionManager;\n      }\n\n      this._nextActiveAction = this._nextActiveAction._child;\n    } else {\n      this._nextActiveAction = this;\n    }\n  };\n  /**\n   * Adds action to chain of actions, may be a DoNothingAction\n   * @param action defines the next action to execute\n   * @returns The action passed in\n   * @see https://www.babylonjs-playground.com/#1T30HR#0\n   */\n\n\n  Action.prototype.then = function (action) {\n    this._child = action;\n    action._actionManager = this._actionManager;\n\n    action._prepare();\n\n    return action;\n  };\n  /**\n   * Internal only\n   * @param propertyPath\n   * @hidden\n   */\n\n\n  Action.prototype._getProperty = function (propertyPath) {\n    return this._actionManager._getProperty(propertyPath);\n  };\n  /**\n   * Internal only\n   * @param target\n   * @param propertyPath\n   * @hidden\n   */\n\n\n  Action.prototype._getEffectiveTarget = function (target, propertyPath) {\n    return this._actionManager._getEffectiveTarget(target, propertyPath);\n  };\n  /**\n   * Serialize placeholder for child classes\n   * @param parent of child\n   * @returns the serialized object\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  Action.prototype.serialize = function (parent) {};\n  /**\n   * Internal only called by serialize\n   * @param serializedAction\n   * @param parent\n   * @hidden\n   */\n\n\n  Action.prototype._serialize = function (serializedAction, parent) {\n    var serializationObject = {\n      type: 1,\n      children: [],\n      name: serializedAction.name,\n      properties: serializedAction.properties || []\n    }; // Serialize child\n\n    if (this._child) {\n      this._child.serialize(serializationObject);\n    } // Check if \"this\" has a condition\n\n\n    if (this._condition) {\n      var serializedCondition = this._condition.serialize();\n\n      serializedCondition.children.push(serializationObject);\n\n      if (parent) {\n        parent.children.push(serializedCondition);\n      }\n\n      return serializedCondition;\n    }\n\n    if (parent) {\n      parent.children.push(serializationObject);\n    }\n\n    return serializationObject;\n  };\n  /**\n   * Internal only\n   * @param value\n   * @hidden\n   */\n\n\n  Action._SerializeValueAsString = function (value) {\n    if (typeof value === \"number\") {\n      return value.toString();\n    }\n\n    if (typeof value === \"boolean\") {\n      return value ? \"true\" : \"false\";\n    }\n\n    if (value instanceof Vector2) {\n      return value.x + \", \" + value.y;\n    }\n\n    if (value instanceof Vector3) {\n      return value.x + \", \" + value.y + \", \" + value.z;\n    }\n\n    if (value instanceof Color3) {\n      return value.r + \", \" + value.g + \", \" + value.b;\n    }\n\n    if (value instanceof Color4) {\n      return value.r + \", \" + value.g + \", \" + value.b + \", \" + value.a;\n    }\n\n    return value; // string\n  };\n  /**\n   * Internal only\n   * @param target\n   * @hidden\n   */\n\n\n  Action._GetTargetProperty = function (target) {\n    return {\n      name: \"target\",\n      targetType: target._isMesh ? \"MeshProperties\" : target._isLight ? \"LightProperties\" : target._isCamera ? \"CameraProperties\" : \"SceneProperties\",\n      value: target._isScene ? \"Scene\" : target.name\n    };\n  };\n\n  return Action;\n}();\n\nexport { Action };\nRegisterClass(\"BABYLON.Action\", Action);","map":{"version":3,"mappings":"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","names":["Observable","Vector2","Vector3","Color3","Color4","RegisterClass","triggerOptions","condition","parameter","trigger","_triggerParameter","_nextActiveAction","_condition","Action","value","currentRenderId","_actionManager","getScene","getRenderId","_evaluationId","_currentResult","isValid","evt","isConditionValid","_evaluateConditionForCurrentFrame","onBeforeExecuteObservable","notifyObservers","execute","skipToNextActiveAction","_child","action","_prepare","propertyPath","_getProperty","target","_getEffectiveTarget","parent","serializedAction","serializationObject","type","children","name","properties","serialize","serializedCondition","push","toString","x","y","z","r","g","b","a","targetType","_isMesh","_isLight","_isCamera","_isScene"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Actions/action.ts"],"sourcesContent":["import { Observable } from \"../Misc/observable\";\r\nimport { Vector2, Vector3 } from \"../Maths/math.vector\";\r\nimport { Color3, Color4 } from \"../Maths/math.color\";\r\nimport type { Condition } from \"./condition\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport type { AbstractActionManager } from \"./abstractActionManager\";\r\nimport type { Nullable } from \"../types\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\ndeclare type ActionManager = import(\"./actionManager\").ActionManager;\r\ndeclare type ActionEvent = import(\"./actionEvent\").ActionEvent;\r\ndeclare type Mesh = import(\"../Meshes/mesh\").Mesh;\r\ndeclare type Light = import(\"../Lights/light\").Light;\r\ndeclare type Camera = import(\"../Cameras/camera\").Camera;\r\ndeclare type Node = import(\"../node\").Node;\r\n\r\n/**\r\n * Interface used to define Action\r\n */\r\nexport interface IAction {\r\n    /**\r\n     * Trigger for the action\r\n     */\r\n    trigger: number;\r\n\r\n    /** Options of the trigger */\r\n    triggerOptions: any;\r\n\r\n    /**\r\n     * Gets the trigger parameters\r\n     * @returns the trigger parameters\r\n     */\r\n    getTriggerParameter(): any;\r\n\r\n    /**\r\n     * Internal only - executes current action event\r\n     * @hidden\r\n     */\r\n    _executeCurrent(evt?: ActionEvent): void;\r\n\r\n    /**\r\n     * Serialize placeholder for child classes\r\n     * @param parent of child\r\n     * @returns the serialized object\r\n     */\r\n    serialize(parent: any): any;\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    _prepare(): void;\r\n\r\n    /**\r\n     * Internal only - manager for action\r\n     * @hidden\r\n     */\r\n    _actionManager: Nullable<AbstractActionManager>;\r\n\r\n    /**\r\n     * Adds action to chain of actions, may be a DoNothingAction\r\n     * @param action defines the next action to execute\r\n     * @returns The action passed in\r\n     * @see https://www.babylonjs-playground.com/#1T30HR#0\r\n     */\r\n    then(action: IAction): IAction;\r\n}\r\n\r\n/**\r\n * The action to be carried out following a trigger\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions#available-actions\r\n */\r\nexport class Action implements IAction {\r\n    /**\r\n     * Trigger for the action\r\n     */\r\n    public trigger: number;\r\n\r\n    /**\r\n     * Internal only - manager for action\r\n     * @hidden\r\n     */\r\n    public _actionManager: ActionManager;\r\n\r\n    private _nextActiveAction: Action;\r\n    private _child: Action;\r\n    private _condition?: Condition;\r\n    private _triggerParameter: any;\r\n\r\n    /**\r\n     * An event triggered prior to action being executed.\r\n     */\r\n    public onBeforeExecuteObservable = new Observable<Action>();\r\n\r\n    /**\r\n     * Creates a new Action\r\n     * @param triggerOptions the trigger, with or without parameters, for the action\r\n     * @param condition an optional determinant of action\r\n     */\r\n    constructor(\r\n        /** the trigger, with or without parameters, for the action */\r\n        public triggerOptions: any,\r\n        condition?: Condition\r\n    ) {\r\n        if (triggerOptions.parameter) {\r\n            this.trigger = triggerOptions.trigger;\r\n            this._triggerParameter = triggerOptions.parameter;\r\n        } else if (triggerOptions.trigger) {\r\n            this.trigger = triggerOptions.trigger;\r\n        } else {\r\n            this.trigger = triggerOptions;\r\n        }\r\n\r\n        this._nextActiveAction = this;\r\n        this._condition = condition;\r\n    }\r\n\r\n    /**\r\n     * Internal only\r\n     * @hidden\r\n     */\r\n    public _prepare(): void {}\r\n\r\n    /**\r\n     * Gets the trigger parameter\r\n     * @returns the trigger parameter\r\n     */\r\n    public getTriggerParameter(): any {\r\n        return this._triggerParameter;\r\n    }\r\n\r\n    /**\r\n     * Sets the trigger parameter\r\n     * @param value defines the new trigger parameter\r\n     */\r\n    public setTriggerParameter(value: any) {\r\n        this._triggerParameter = value;\r\n    }\r\n\r\n    /**\r\n     * Internal only - Returns if the current condition allows to run the action\r\n     * @hidden\r\n     */\r\n    public _evaluateConditionForCurrentFrame(): boolean {\r\n        const condition = this._condition;\r\n        if (!condition) {\r\n            return true;\r\n        }\r\n\r\n        const currentRenderId = this._actionManager.getScene().getRenderId();\r\n\r\n        // We cache the current evaluation for the current frame\r\n        if (condition._evaluationId !== currentRenderId) {\r\n            condition._evaluationId = currentRenderId;\r\n            condition._currentResult = condition.isValid();\r\n        }\r\n\r\n        return condition._currentResult;\r\n    }\r\n\r\n    /**\r\n     * Internal only - executes current action event\r\n     * @param evt\r\n     * @hidden\r\n     */\r\n    public _executeCurrent(evt?: ActionEvent): void {\r\n        const isConditionValid = this._evaluateConditionForCurrentFrame();\r\n        if (!isConditionValid) {\r\n            return;\r\n        }\r\n\r\n        this.onBeforeExecuteObservable.notifyObservers(this);\r\n        this._nextActiveAction.execute(evt);\r\n\r\n        this.skipToNextActiveAction();\r\n    }\r\n\r\n    /**\r\n     * Execute placeholder for child classes\r\n     * @param evt optional action event\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public execute(evt?: ActionEvent): void {}\r\n\r\n    /**\r\n     * Skips to next active action\r\n     */\r\n    public skipToNextActiveAction(): void {\r\n        if (this._nextActiveAction._child) {\r\n            if (!this._nextActiveAction._child._actionManager) {\r\n                this._nextActiveAction._child._actionManager = this._actionManager;\r\n            }\r\n\r\n            this._nextActiveAction = this._nextActiveAction._child;\r\n        } else {\r\n            this._nextActiveAction = this;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds action to chain of actions, may be a DoNothingAction\r\n     * @param action defines the next action to execute\r\n     * @returns The action passed in\r\n     * @see https://www.babylonjs-playground.com/#1T30HR#0\r\n     */\r\n    public then(action: Action): Action {\r\n        this._child = action;\r\n\r\n        action._actionManager = this._actionManager;\r\n        action._prepare();\r\n\r\n        return action;\r\n    }\r\n\r\n    /**\r\n     * Internal only\r\n     * @param propertyPath\r\n     * @hidden\r\n     */\r\n    public _getProperty(propertyPath: string): string {\r\n        return this._actionManager._getProperty(propertyPath);\r\n    }\r\n\r\n    /**\r\n     * Internal only\r\n     * @param target\r\n     * @param propertyPath\r\n     * @hidden\r\n     */\r\n    public _getEffectiveTarget(target: any, propertyPath: string): any {\r\n        return this._actionManager._getEffectiveTarget(target, propertyPath);\r\n    }\r\n\r\n    /**\r\n     * Serialize placeholder for child classes\r\n     * @param parent of child\r\n     * @returns the serialized object\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public serialize(parent: any): any {}\r\n\r\n    /**\r\n     * Internal only called by serialize\r\n     * @param serializedAction\r\n     * @param parent\r\n     * @hidden\r\n     */\r\n    protected _serialize(serializedAction: any, parent?: any): any {\r\n        const serializationObject: any = {\r\n            type: 1,\r\n            children: [],\r\n            name: serializedAction.name,\r\n            properties: serializedAction.properties || [],\r\n        };\r\n\r\n        // Serialize child\r\n        if (this._child) {\r\n            this._child.serialize(serializationObject);\r\n        }\r\n\r\n        // Check if \"this\" has a condition\r\n        if (this._condition) {\r\n            const serializedCondition = this._condition.serialize();\r\n            serializedCondition.children.push(serializationObject);\r\n\r\n            if (parent) {\r\n                parent.children.push(serializedCondition);\r\n            }\r\n            return serializedCondition;\r\n        }\r\n\r\n        if (parent) {\r\n            parent.children.push(serializationObject);\r\n        }\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Internal only\r\n     * @param value\r\n     * @hidden\r\n     */\r\n    public static _SerializeValueAsString = (value: any): string => {\r\n        if (typeof value === \"number\") {\r\n            return value.toString();\r\n        }\r\n\r\n        if (typeof value === \"boolean\") {\r\n            return value ? \"true\" : \"false\";\r\n        }\r\n\r\n        if (value instanceof Vector2) {\r\n            return value.x + \", \" + value.y;\r\n        }\r\n        if (value instanceof Vector3) {\r\n            return value.x + \", \" + value.y + \", \" + value.z;\r\n        }\r\n\r\n        if (value instanceof Color3) {\r\n            return value.r + \", \" + value.g + \", \" + value.b;\r\n        }\r\n        if (value instanceof Color4) {\r\n            return value.r + \", \" + value.g + \", \" + value.b + \", \" + value.a;\r\n        }\r\n\r\n        return value; // string\r\n    };\r\n\r\n    /**\r\n     * Internal only\r\n     * @param target\r\n     * @hidden\r\n     */\r\n    public static _GetTargetProperty = (target: Scene | Node) => {\r\n        return {\r\n            name: \"target\",\r\n            targetType: (<Mesh>target)._isMesh\r\n                ? \"MeshProperties\"\r\n                : (<Light>target)._isLight\r\n                ? \"LightProperties\"\r\n                : (<Camera>target)._isCamera\r\n                ? \"CameraProperties\"\r\n                : \"SceneProperties\",\r\n            value: (<Scene>target)._isScene ? \"Scene\" : (<Node>target).name,\r\n        };\r\n    };\r\n}\r\n\r\nRegisterClass(\"BABYLON.Action\", Action);\r\n"]},"metadata":{},"sourceType":"module"}