{"ast":null,"code":"import \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array-buffer.is-view.js\";\nimport \"core-js/modules/es.array-buffer.constructor.js\";\nimport \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/web.atob.js\";\nimport \"core-js/modules/web.dom-exception.constructor.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport \"core-js/modules/web.dom-exception.to-string-tag.js\";\n\n/* eslint-disable @typescript-eslint/naming-convention */\n\n/**\n * Checks for a matching suffix at the end of a string (for ES5 and lower)\n * @param str Source string\n * @param suffix Suffix to search for in the source string\n * @returns Boolean indicating whether the suffix was found (true) or not (false)\n */\nexport var EndsWith = function EndsWith(str, suffix) {\n  return str.indexOf(suffix, str.length - suffix.length) !== -1;\n};\n/**\n * Checks for a matching suffix at the beginning of a string (for ES5 and lower)\n * @param str Source string\n * @param suffix Suffix to search for in the source string\n * @returns Boolean indicating whether the suffix was found (true) or not (false)\n */\n\nexport var StartsWith = function StartsWith(str, suffix) {\n  if (!str) {\n    return false;\n  }\n\n  return str.indexOf(suffix) === 0;\n};\n/**\n * Decodes a buffer into a string\n * @param buffer The buffer to decode\n * @returns The decoded string\n */\n\nexport var Decode = function Decode(buffer) {\n  if (typeof TextDecoder !== \"undefined\") {\n    return new TextDecoder().decode(buffer);\n  }\n\n  var result = \"\";\n\n  for (var i = 0; i < buffer.byteLength; i++) {\n    result += String.fromCharCode(buffer[i]);\n  }\n\n  return result;\n};\n/**\n * Encode a buffer to a base64 string\n * @param buffer defines the buffer to encode\n * @returns the encoded string\n */\n\nexport var EncodeArrayBufferToBase64 = function EncodeArrayBufferToBase64(buffer) {\n  var keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n  var output = \"\";\n  var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n  var i = 0;\n  var bytes = ArrayBuffer.isView(buffer) ? new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength) : new Uint8Array(buffer);\n\n  while (i < bytes.length) {\n    chr1 = bytes[i++];\n    chr2 = i < bytes.length ? bytes[i++] : Number.NaN;\n    chr3 = i < bytes.length ? bytes[i++] : Number.NaN;\n    enc1 = chr1 >> 2;\n    enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n    enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n    enc4 = chr3 & 63;\n\n    if (isNaN(chr2)) {\n      enc3 = enc4 = 64;\n    } else if (isNaN(chr3)) {\n      enc4 = 64;\n    }\n\n    output += keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);\n  }\n\n  return output;\n};\n/**\n * Converts a given base64 string as an ASCII encoded stream of data\n * @param base64Data The base64 encoded string to decode\n * @returns Decoded ASCII string\n */\n\nexport var DecodeBase64ToString = function DecodeBase64ToString(base64Data) {\n  return atob(base64Data);\n};\n/**\n * Converts a given base64 string into an ArrayBuffer of raw byte data\n * @param base64Data The base64 encoded string to decode\n * @returns ArrayBuffer of byte data\n */\n\nexport var DecodeBase64ToBinary = function DecodeBase64ToBinary(base64Data) {\n  var decodedString = DecodeBase64ToString(base64Data);\n  var bufferLength = decodedString.length;\n  var bufferView = new Uint8Array(new ArrayBuffer(bufferLength));\n\n  for (var i = 0; i < bufferLength; i++) {\n    bufferView[i] = decodedString.charCodeAt(i);\n  }\n\n  return bufferView.buffer;\n};\n/**\n * Converts a number to string and pads with preceding zeroes until it is of specified length.\n * @param num the number to convert and pad\n * @param length the expected length of the string\n * @returns the padded string\n */\n\nexport var PadNumber = function PadNumber(num, length) {\n  var str = String(num);\n\n  while (str.length < length) {\n    str = \"0\" + str;\n  }\n\n  return str;\n};\n/**\n * Helper to manipulate strings\n */\n\nexport var StringTools = {\n  EndsWith: EndsWith,\n  StartsWith: StartsWith,\n  Decode: Decode,\n  EncodeArrayBufferToBase64: EncodeArrayBufferToBase64,\n  DecodeBase64ToString: DecodeBase64ToString,\n  DecodeBase64ToBinary: DecodeBase64ToBinary,\n  PadNumber: PadNumber\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;AAMA,OAAO,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAAcC,MAAd,EAA4B;AAChD,SAAOD,GAAG,CAACE,OAAJ,CAAYD,MAAZ,EAAoBD,GAAG,CAACG,MAAJ,GAAaF,MAAM,CAACE,MAAxC,MAAoD,CAAC,CAA5D;AACH,CAFM;AAIP;;;;;;;AAMA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACJ,GAAD,EAAcC,MAAd,EAA4B;AAClD,MAAI,CAACD,GAAL,EAAU;AACN,WAAO,KAAP;AACH;;AACD,SAAOA,GAAG,CAACE,OAAJ,CAAYD,MAAZ,MAAwB,CAA/B;AACH,CALM;AAOP;;;;;;AAKA,OAAO,IAAMI,MAAM,GAAG,SAATA,MAAS,CAACC,MAAD,EAAiC;AACnD,MAAI,OAAOC,WAAP,KAAuB,WAA3B,EAAwC;AACpC,WAAO,IAAIA,WAAJ,GAAkBC,MAAlB,CAAyBF,MAAzB,CAAP;AACH;;AAED,MAAIG,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,UAA3B,EAAuCD,CAAC,EAAxC,EAA4C;AACxCD,UAAM,IAAIG,MAAM,CAACC,YAAP,CAAoBP,MAAM,CAACI,CAAD,CAA1B,CAAV;AACH;;AAED,SAAOD,MAAP;AACH,CAXM;AAaP;;;;;;AAKA,OAAO,IAAMK,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACR,MAAD,EAAsC;AAC3E,MAAMS,MAAM,GAAG,mEAAf;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,IAAJ,EAAUC,IAAV,EAAgBC,IAAhB,EAAsBC,IAAtB,EAA4BC,IAA5B,EAAkCC,IAAlC,EAAwCC,IAAxC;AACA,MAAIb,CAAC,GAAG,CAAR;AACA,MAAMc,KAAK,GAAGC,WAAW,CAACC,MAAZ,CAAmBpB,MAAnB,IAA6B,IAAIqB,UAAJ,CAAerB,MAAM,CAACA,MAAtB,EAA8BA,MAAM,CAACsB,UAArC,EAAiDtB,MAAM,CAACK,UAAxD,CAA7B,GAAmG,IAAIgB,UAAJ,CAAerB,MAAf,CAAjH;;AAEA,SAAOI,CAAC,GAAGc,KAAK,CAACrB,MAAjB,EAAyB;AACrBc,QAAI,GAAGO,KAAK,CAACd,CAAC,EAAF,CAAZ;AACAQ,QAAI,GAAGR,CAAC,GAAGc,KAAK,CAACrB,MAAV,GAAmBqB,KAAK,CAACd,CAAC,EAAF,CAAxB,GAAgCmB,MAAM,CAACC,GAA9C;AACAX,QAAI,GAAGT,CAAC,GAAGc,KAAK,CAACrB,MAAV,GAAmBqB,KAAK,CAACd,CAAC,EAAF,CAAxB,GAAgCmB,MAAM,CAACC,GAA9C;AAEAV,QAAI,GAAGH,IAAI,IAAI,CAAf;AACAI,QAAI,GAAI,CAACJ,IAAI,GAAG,CAAR,KAAc,CAAf,GAAqBC,IAAI,IAAI,CAApC;AACAI,QAAI,GAAI,CAACJ,IAAI,GAAG,EAAR,KAAe,CAAhB,GAAsBC,IAAI,IAAI,CAArC;AACAI,QAAI,GAAGJ,IAAI,GAAG,EAAd;;AAEA,QAAIY,KAAK,CAACb,IAAD,CAAT,EAAiB;AACbI,UAAI,GAAGC,IAAI,GAAG,EAAd;AACH,KAFD,MAEO,IAAIQ,KAAK,CAACZ,IAAD,CAAT,EAAiB;AACpBI,UAAI,GAAG,EAAP;AACH;;AACDP,UAAM,IAAID,MAAM,CAACiB,MAAP,CAAcZ,IAAd,IAAsBL,MAAM,CAACiB,MAAP,CAAcX,IAAd,CAAtB,GAA4CN,MAAM,CAACiB,MAAP,CAAcV,IAAd,CAA5C,GAAkEP,MAAM,CAACiB,MAAP,CAAcT,IAAd,CAA5E;AACH;;AAED,SAAOP,MAAP;AACH,CA1BM;AA4BP;;;;;;AAKA,OAAO,IAAMiB,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,UAAD,EAAmB;AACnD,SAAOC,IAAI,CAACD,UAAD,CAAX;AACH,CAFM;AAIP;;;;;;AAKA,OAAO,IAAME,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACF,UAAD,EAAmB;AACnD,MAAMG,aAAa,GAAGJ,oBAAoB,CAACC,UAAD,CAA1C;AACA,MAAMI,YAAY,GAAGD,aAAa,CAAClC,MAAnC;AACA,MAAMoC,UAAU,GAAG,IAAIZ,UAAJ,CAAe,IAAIF,WAAJ,CAAgBa,YAAhB,CAAf,CAAnB;;AAEA,OAAK,IAAI5B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4B,YAApB,EAAkC5B,CAAC,EAAnC,EAAuC;AACnC6B,cAAU,CAAC7B,CAAD,CAAV,GAAgB2B,aAAa,CAACG,UAAd,CAAyB9B,CAAzB,CAAhB;AACH;;AAED,SAAO6B,UAAU,CAACjC,MAAlB;AACH,CAVM;AAYP;;;;;;;AAMA,OAAO,IAAMmC,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD,EAAcvC,MAAd,EAA4B;AACjD,MAAIH,GAAG,GAAGY,MAAM,CAAC8B,GAAD,CAAhB;;AACA,SAAO1C,GAAG,CAACG,MAAJ,GAAaA,MAApB,EAA4B;AACxBH,OAAG,GAAG,MAAMA,GAAZ;AACH;;AACD,SAAOA,GAAP;AACH,CANM;AAOP;;;;AAGA,OAAO,IAAM2C,WAAW,GAAG;AACvB5C,UAAQ,UADe;AAEvBK,YAAU,YAFa;AAGvBC,QAAM,QAHiB;AAIvBS,2BAAyB,2BAJF;AAKvBmB,sBAAoB,sBALG;AAMvBG,sBAAoB,sBANG;AAOvBK,WAAS;AAPc,CAApB","names":["EndsWith","str","suffix","indexOf","length","StartsWith","Decode","buffer","TextDecoder","decode","result","i","byteLength","String","fromCharCode","EncodeArrayBufferToBase64","keyStr","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","bytes","ArrayBuffer","isView","Uint8Array","byteOffset","Number","NaN","isNaN","charAt","DecodeBase64ToString","base64Data","atob","DecodeBase64ToBinary","decodedString","bufferLength","bufferView","charCodeAt","PadNumber","num","StringTools"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Misc/stringTools.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\n/**\r\n * Checks for a matching suffix at the end of a string (for ES5 and lower)\r\n * @param str Source string\r\n * @param suffix Suffix to search for in the source string\r\n * @returns Boolean indicating whether the suffix was found (true) or not (false)\r\n */\r\nexport const EndsWith = (str: string, suffix: string): boolean => {\r\n    return str.indexOf(suffix, str.length - suffix.length) !== -1;\r\n};\r\n\r\n/**\r\n * Checks for a matching suffix at the beginning of a string (for ES5 and lower)\r\n * @param str Source string\r\n * @param suffix Suffix to search for in the source string\r\n * @returns Boolean indicating whether the suffix was found (true) or not (false)\r\n */\r\nexport const StartsWith = (str: string, suffix: string): boolean => {\r\n    if (!str) {\r\n        return false;\r\n    }\r\n    return str.indexOf(suffix) === 0;\r\n};\r\n\r\n/**\r\n * Decodes a buffer into a string\r\n * @param buffer The buffer to decode\r\n * @returns The decoded string\r\n */\r\nexport const Decode = (buffer: Uint8Array | Uint16Array): string => {\r\n    if (typeof TextDecoder !== \"undefined\") {\r\n        return new TextDecoder().decode(buffer);\r\n    }\r\n\r\n    let result = \"\";\r\n    for (let i = 0; i < buffer.byteLength; i++) {\r\n        result += String.fromCharCode(buffer[i]);\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Encode a buffer to a base64 string\r\n * @param buffer defines the buffer to encode\r\n * @returns the encoded string\r\n */\r\nexport const EncodeArrayBufferToBase64 = (buffer: ArrayBuffer | ArrayBufferView): string => {\r\n    const keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\r\n    let output = \"\";\r\n    let chr1, chr2, chr3, enc1, enc2, enc3, enc4;\r\n    let i = 0;\r\n    const bytes = ArrayBuffer.isView(buffer) ? new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength) : new Uint8Array(buffer);\r\n\r\n    while (i < bytes.length) {\r\n        chr1 = bytes[i++];\r\n        chr2 = i < bytes.length ? bytes[i++] : Number.NaN;\r\n        chr3 = i < bytes.length ? bytes[i++] : Number.NaN;\r\n\r\n        enc1 = chr1 >> 2;\r\n        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n        enc4 = chr3 & 63;\r\n\r\n        if (isNaN(chr2)) {\r\n            enc3 = enc4 = 64;\r\n        } else if (isNaN(chr3)) {\r\n            enc4 = 64;\r\n        }\r\n        output += keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);\r\n    }\r\n\r\n    return output;\r\n};\r\n\r\n/**\r\n * Converts a given base64 string as an ASCII encoded stream of data\r\n * @param base64Data The base64 encoded string to decode\r\n * @returns Decoded ASCII string\r\n */\r\nexport const DecodeBase64ToString = (base64Data: string): string => {\r\n    return atob(base64Data);\r\n};\r\n\r\n/**\r\n * Converts a given base64 string into an ArrayBuffer of raw byte data\r\n * @param base64Data The base64 encoded string to decode\r\n * @returns ArrayBuffer of byte data\r\n */\r\nexport const DecodeBase64ToBinary = (base64Data: string): ArrayBuffer => {\r\n    const decodedString = DecodeBase64ToString(base64Data);\r\n    const bufferLength = decodedString.length;\r\n    const bufferView = new Uint8Array(new ArrayBuffer(bufferLength));\r\n\r\n    for (let i = 0; i < bufferLength; i++) {\r\n        bufferView[i] = decodedString.charCodeAt(i);\r\n    }\r\n\r\n    return bufferView.buffer;\r\n};\r\n\r\n/**\r\n * Converts a number to string and pads with preceding zeroes until it is of specified length.\r\n * @param num the number to convert and pad\r\n * @param length the expected length of the string\r\n * @returns the padded string\r\n */\r\nexport const PadNumber = (num: number, length: number): string => {\r\n    let str = String(num);\r\n    while (str.length < length) {\r\n        str = \"0\" + str;\r\n    }\r\n    return str;\r\n};\r\n/**\r\n * Helper to manipulate strings\r\n */\r\nexport const StringTools = {\r\n    EndsWith,\r\n    StartsWith,\r\n    Decode,\r\n    EncodeArrayBufferToBase64,\r\n    DecodeBase64ToString,\r\n    DecodeBase64ToBinary,\r\n    PadNumber,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}