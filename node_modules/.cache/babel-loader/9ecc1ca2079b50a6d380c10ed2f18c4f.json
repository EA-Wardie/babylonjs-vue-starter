{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial.js\";\nimport { GLTFLoader } from \"../glTFLoader.js\";\nimport { Color3 } from \"@babylonjs/core/Maths/math.color.js\";\nvar NAME = \"KHR_materials_sheen\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_materials_sheen/README.md)\n * [Playground Sample](https://www.babylonjs-playground.com/frame.html#BNIZX6#4)\n */\n\nvar KHR_materials_sheen =\n/** @class */\nfunction () {\n  /**\n   * @param loader\n   * @hidden\n   */\n  function KHR_materials_sheen(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    /**\n     * Defines a number that determines the order the extensions are applied.\n     */\n\n    this.order = 190;\n    this._loader = loader;\n    this.enabled = this._loader.isExtensionUsed(NAME);\n  }\n  /** @hidden */\n\n\n  KHR_materials_sheen.prototype.dispose = function () {\n    this._loader = null;\n  };\n  /**\n   * @param context\n   * @param material\n   * @param babylonMaterial\n   * @hidden\n   */\n\n\n  KHR_materials_sheen.prototype.loadMaterialPropertiesAsync = function (context, material, babylonMaterial) {\n    var _this = this;\n\n    return GLTFLoader.LoadExtensionAsync(context, material, this.name, function (extensionContext, extension) {\n      var promises = new Array();\n      promises.push(_this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n      promises.push(_this._loadSheenPropertiesAsync(extensionContext, extension, babylonMaterial));\n      return Promise.all(promises).then(function () {});\n    });\n  };\n\n  KHR_materials_sheen.prototype._loadSheenPropertiesAsync = function (context, properties, babylonMaterial) {\n    if (!(babylonMaterial instanceof PBRMaterial)) {\n      throw new Error(\"\".concat(context, \": Material type not supported\"));\n    }\n\n    var promises = new Array();\n    babylonMaterial.sheen.isEnabled = true;\n    babylonMaterial.sheen.intensity = 1;\n\n    if (properties.sheenColorFactor != undefined) {\n      babylonMaterial.sheen.color = Color3.FromArray(properties.sheenColorFactor);\n    } else {\n      babylonMaterial.sheen.color = Color3.Black();\n    }\n\n    if (properties.sheenColorTexture) {\n      promises.push(this._loader.loadTextureInfoAsync(\"\".concat(context, \"/sheenColorTexture\"), properties.sheenColorTexture, function (texture) {\n        texture.name = \"\".concat(babylonMaterial.name, \" (Sheen Color)\");\n        babylonMaterial.sheen.texture = texture;\n      }));\n    }\n\n    if (properties.sheenRoughnessFactor !== undefined) {\n      babylonMaterial.sheen.roughness = properties.sheenRoughnessFactor;\n    } else {\n      babylonMaterial.sheen.roughness = 0;\n    }\n\n    if (properties.sheenRoughnessTexture) {\n      properties.sheenRoughnessTexture.nonColorData = true;\n      promises.push(this._loader.loadTextureInfoAsync(\"\".concat(context, \"/sheenRoughnessTexture\"), properties.sheenRoughnessTexture, function (texture) {\n        texture.name = \"\".concat(babylonMaterial.name, \" (Sheen Roughness)\");\n        babylonMaterial.sheen.textureRoughness = texture;\n      }));\n    }\n\n    babylonMaterial.sheen.albedoScaling = true;\n    babylonMaterial.sheen.useRoughnessFromMainTexture = false;\n    return Promise.all(promises).then(function () {});\n  };\n\n  return KHR_materials_sheen;\n}();\n\nexport { KHR_materials_sheen };\nGLTFLoader.RegisterExtension(NAME, function (loader) {\n  return new KHR_materials_sheen(loader);\n});","map":{"version":3,"mappings":"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","names":["PBRMaterial","GLTFLoader","Color3","NAME","loader","_loader","enabled","isExtensionUsed","KHR_materials_sheen","context","material","babylonMaterial","LoadExtensionAsync","name","extensionContext","extension","promises","Array","push","_this","loadMaterialPropertiesAsync","_loadSheenPropertiesAsync","Promise","all","then","properties","Error","sheen","isEnabled","intensity","sheenColorFactor","undefined","color","FromArray","Black","sheenColorTexture","loadTextureInfoAsync","texture","sheenRoughnessFactor","roughness","sheenRoughnessTexture","nonColorData","textureRoughness","albedoScaling","useRoughnessFromMainTexture","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../../lts/loaders/generated/glTF/2.0/Extensions/KHR_materials_sheen.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial, ITextureInfo } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { IKHRMaterialsSheen } from \"babylonjs-gltf2interface\";\r\n\r\nconst NAME = \"KHR_materials_sheen\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_materials_sheen/README.md)\r\n * [Playground Sample](https://www.babylonjs-playground.com/frame.html#BNIZX6#4)\r\n */\r\nexport class KHR_materials_sheen implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 190;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @param loader\r\n     * @hidden\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @hidden */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @param context\r\n     * @param material\r\n     * @param babylonMaterial\r\n     * @hidden\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsSheen>(context, material, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadSheenPropertiesAsync(extensionContext, extension, babylonMaterial));\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    private _loadSheenPropertiesAsync(context: string, properties: IKHRMaterialsSheen, babylonMaterial: Material): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        babylonMaterial.sheen.isEnabled = true;\r\n        babylonMaterial.sheen.intensity = 1;\r\n\r\n        if (properties.sheenColorFactor != undefined) {\r\n            babylonMaterial.sheen.color = Color3.FromArray(properties.sheenColorFactor);\r\n        } else {\r\n            babylonMaterial.sheen.color = Color3.Black();\r\n        }\r\n\r\n        if (properties.sheenColorTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/sheenColorTexture`, properties.sheenColorTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Sheen Color)`;\r\n                    babylonMaterial.sheen.texture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        if (properties.sheenRoughnessFactor !== undefined) {\r\n            babylonMaterial.sheen.roughness = properties.sheenRoughnessFactor;\r\n        } else {\r\n            babylonMaterial.sheen.roughness = 0;\r\n        }\r\n\r\n        if (properties.sheenRoughnessTexture) {\r\n            (properties.sheenRoughnessTexture as ITextureInfo).nonColorData = true;\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/sheenRoughnessTexture`, properties.sheenRoughnessTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Sheen Roughness)`;\r\n                    babylonMaterial.sheen.textureRoughness = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        babylonMaterial.sheen.albedoScaling = true;\r\n        babylonMaterial.sheen.useRoughnessFromMainTexture = false;\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_materials_sheen(loader));\r\n"]},"metadata":{},"sourceType":"module"}