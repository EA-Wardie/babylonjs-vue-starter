{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { MaterialHelper } from \"../../../materialHelper.js\";\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport \"../../../../Shaders/ShadersInclude/lightFragmentDeclaration.js\";\nimport \"../../../../Shaders/ShadersInclude/lightVxFragmentDeclaration.js\";\nimport \"../../../../Shaders/ShadersInclude/lightUboDeclaration.js\";\nimport \"../../../../Shaders/ShadersInclude/lightVxUboDeclaration.js\";\nimport \"../../../../Shaders/ShadersInclude/lightFragment.js\";\nimport \"../../../../Shaders/ShadersInclude/helperFunctions.js\";\nimport \"../../../../Shaders/ShadersInclude/lightsFragmentFunctions.js\";\nimport \"../../../../Shaders/ShadersInclude/shadowsFragmentFunctions.js\";\nimport \"../../../../Shaders/ShadersInclude/shadowsVertex.js\";\n/**\n * Block used to add light in the fragment shader\n */\n\nvar LightBlock =\n/** @class */\nfunction (_super) {\n  __extends(LightBlock, _super);\n  /**\n   * Create a new LightBlock\n   * @param name defines the block name\n   */\n\n\n  function LightBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.VertexAndFragment) || this;\n\n    _this._isUnique = true;\n\n    _this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Vertex);\n\n    _this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"cameraPosition\", NodeMaterialBlockConnectionPointTypes.Vector3, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"glossiness\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"glossPower\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"diffuseColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"specularColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"view\", NodeMaterialBlockConnectionPointTypes.Matrix, true);\n\n    _this.registerOutput(\"diffuseOutput\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"specularOutput\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"shadow\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\n\n    return _this;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  LightBlock.prototype.getClassName = function () {\n    return \"LightBlock\";\n  };\n\n  Object.defineProperty(LightBlock.prototype, \"worldPosition\", {\n    /**\n     * Gets the world position input component\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LightBlock.prototype, \"worldNormal\", {\n    /**\n     * Gets the world normal input component\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LightBlock.prototype, \"cameraPosition\", {\n    /**\n     * Gets the camera (or eye) position component\n     */\n    get: function get() {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LightBlock.prototype, \"glossiness\", {\n    /**\n     * Gets the glossiness component\n     */\n    get: function get() {\n      return this._inputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LightBlock.prototype, \"glossPower\", {\n    /**\n     * Gets the glossiness power component\n     */\n    get: function get() {\n      return this._inputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LightBlock.prototype, \"diffuseColor\", {\n    /**\n     * Gets the diffuse color component\n     */\n    get: function get() {\n      return this._inputs[5];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LightBlock.prototype, \"specularColor\", {\n    /**\n     * Gets the specular color component\n     */\n    get: function get() {\n      return this._inputs[6];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LightBlock.prototype, \"view\", {\n    /**\n     * Gets the view matrix component\n     */\n    get: function get() {\n      return this._inputs[7];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LightBlock.prototype, \"diffuseOutput\", {\n    /**\n     * Gets the diffuse output component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LightBlock.prototype, \"specularOutput\", {\n    /**\n     * Gets the specular output component\n     */\n    get: function get() {\n      return this._outputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LightBlock.prototype, \"shadow\", {\n    /**\n     * Gets the shadow output component\n     */\n    get: function get() {\n      return this._outputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  LightBlock.prototype.autoConfigure = function (material) {\n    if (!this.cameraPosition.isConnected) {\n      var cameraPositionInput = material.getInputBlockByPredicate(function (b) {\n        return b.systemValue === NodeMaterialSystemValues.CameraPosition;\n      });\n\n      if (!cameraPositionInput) {\n        cameraPositionInput = new InputBlock(\"cameraPosition\");\n        cameraPositionInput.setAsSystemValue(NodeMaterialSystemValues.CameraPosition);\n      }\n\n      cameraPositionInput.output.connectTo(this.cameraPosition);\n    }\n  };\n\n  LightBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    if (!defines._areLightsDirty) {\n      return;\n    }\n\n    var scene = mesh.getScene();\n\n    if (!this.light) {\n      MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, true, nodeMaterial.maxSimultaneousLights);\n    } else {\n      var state = {\n        needNormals: false,\n        needRebuild: false,\n        lightmapMode: false,\n        shadowEnabled: false,\n        specularEnabled: false\n      };\n      MaterialHelper.PrepareDefinesForLight(scene, mesh, this.light, this._lightId, defines, true, state);\n\n      if (state.needRebuild) {\n        defines.rebuild();\n      }\n    }\n  };\n\n  LightBlock.prototype.updateUniformsAndSamples = function (state, nodeMaterial, defines, uniformBuffers) {\n    for (var lightIndex = 0; lightIndex < nodeMaterial.maxSimultaneousLights; lightIndex++) {\n      if (!defines[\"LIGHT\" + lightIndex]) {\n        break;\n      }\n\n      var onlyUpdateBuffersList = state.uniforms.indexOf(\"vLightData\" + lightIndex) >= 0;\n      MaterialHelper.PrepareUniformsAndSamplersForLight(lightIndex, state.uniforms, state.samplers, defines[\"PROJECTEDLIGHTTEXTURE\" + lightIndex], uniformBuffers, onlyUpdateBuffersList);\n    }\n  };\n\n  LightBlock.prototype.bind = function (effect, nodeMaterial, mesh) {\n    if (!mesh) {\n      return;\n    }\n\n    var scene = mesh.getScene();\n\n    if (!this.light) {\n      MaterialHelper.BindLights(scene, mesh, effect, true, nodeMaterial.maxSimultaneousLights);\n    } else {\n      MaterialHelper.BindLight(this.light, this._lightId, scene, effect, true);\n    }\n  };\n\n  LightBlock.prototype._injectVertexCode = function (state) {\n    var worldPos = this.worldPosition;\n    var comments = \"//\".concat(this.name); // Declaration\n\n    if (!this.light) {\n      // Emit for all lights\n      state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightVxUboDeclaration\" : \"lightVxFragmentDeclaration\", comments, {\n        repeatKey: \"maxSimultaneousLights\"\n      });\n\n      this._lightId = 0;\n      state.sharedData.dynamicUniformBlocks.push(this);\n    } else {\n      this._lightId = (state.counters[\"lightCounter\"] !== undefined ? state.counters[\"lightCounter\"] : -1) + 1;\n      state.counters[\"lightCounter\"] = this._lightId;\n\n      state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightVxUboDeclaration\" : \"lightVxFragmentDeclaration\", comments, {\n        replaceStrings: [{\n          search: /{X}/g,\n          replace: this._lightId.toString()\n        }]\n      }, this._lightId.toString());\n    } // Inject code in vertex\n\n\n    var worldPosVaryingName = \"v_\" + worldPos.associatedVariableName;\n\n    if (state._emitVaryingFromString(worldPosVaryingName, \"vec4\")) {\n      state.compilationString += \"\".concat(worldPosVaryingName, \" = \").concat(worldPos.associatedVariableName, \";\\r\\n\");\n    }\n\n    if (this.light) {\n      state.compilationString += state._emitCodeFromInclude(\"shadowsVertex\", comments, {\n        replaceStrings: [{\n          search: /{X}/g,\n          replace: this._lightId.toString()\n        }, {\n          search: /worldPos/g,\n          replace: worldPos.associatedVariableName\n        }]\n      });\n    } else {\n      state.compilationString += \"vec4 worldPos = \".concat(worldPos.associatedVariableName, \";\\r\\n\");\n\n      if (this.view.isConnected) {\n        state.compilationString += \"mat4 view = \".concat(this.view.associatedVariableName, \";\\r\\n\");\n      }\n\n      state.compilationString += state._emitCodeFromInclude(\"shadowsVertex\", comments, {\n        repeatKey: \"maxSimultaneousLights\"\n      });\n    }\n  };\n\n  LightBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    if (state.target !== NodeMaterialBlockTargets.Fragment) {\n      // Vertex\n      this._injectVertexCode(state);\n\n      return;\n    } // Fragment\n\n\n    state.sharedData.forcedBindableBlocks.push(this);\n    state.sharedData.blocksWithDefines.push(this);\n    var comments = \"//\".concat(this.name);\n    var worldPos = this.worldPosition;\n\n    state._emitFunctionFromInclude(\"helperFunctions\", comments);\n\n    state._emitFunctionFromInclude(\"lightsFragmentFunctions\", comments, {\n      replaceStrings: [{\n        search: /vPositionW/g,\n        replace: \"v_\" + worldPos.associatedVariableName + \".xyz\"\n      }]\n    });\n\n    state._emitFunctionFromInclude(\"shadowsFragmentFunctions\", comments, {\n      replaceStrings: [{\n        search: /vPositionW/g,\n        replace: \"v_\" + worldPos.associatedVariableName + \".xyz\"\n      }]\n    });\n\n    if (!this.light) {\n      // Emit for all lights\n      state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightUboDeclaration\" : \"lightFragmentDeclaration\", comments, {\n        repeatKey: \"maxSimultaneousLights\"\n      });\n    } else {\n      state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightUboDeclaration\" : \"lightFragmentDeclaration\", comments, {\n        replaceStrings: [{\n          search: /{X}/g,\n          replace: this._lightId.toString()\n        }]\n      }, this._lightId.toString());\n    } // Code\n\n\n    if (this._lightId === 0) {\n      if (state._registerTempVariable(\"viewDirectionW\")) {\n        state.compilationString += \"vec3 viewDirectionW = normalize(\".concat(this.cameraPosition.associatedVariableName, \" - \").concat(\"v_\" + worldPos.associatedVariableName, \".xyz);\\r\\n\");\n      }\n\n      state.compilationString += \"lightingInfo info;\\r\\n\";\n      state.compilationString += \"float shadow = 1.;\\r\\n\";\n      state.compilationString += \"float glossiness = \".concat(this.glossiness.isConnected ? this.glossiness.associatedVariableName : \"1.0\", \" * \").concat(this.glossPower.isConnected ? this.glossPower.associatedVariableName : \"1024.0\", \";\\r\\n\");\n      state.compilationString += \"vec3 diffuseBase = vec3(0., 0., 0.);\\r\\n\";\n      state.compilationString += \"vec3 specularBase = vec3(0., 0., 0.);\\r\\n\";\n      state.compilationString += \"vec3 normalW = \".concat(this.worldNormal.associatedVariableName, \".xyz;\\r\\n\");\n    }\n\n    if (this.light) {\n      state.compilationString += state._emitCodeFromInclude(\"lightFragment\", comments, {\n        replaceStrings: [{\n          search: /{X}/g,\n          replace: this._lightId.toString()\n        }]\n      });\n    } else {\n      state.compilationString += state._emitCodeFromInclude(\"lightFragment\", comments, {\n        repeatKey: \"maxSimultaneousLights\"\n      });\n    }\n\n    var diffuseOutput = this.diffuseOutput;\n    var specularOutput = this.specularOutput;\n    state.compilationString += this._declareOutput(diffuseOutput, state) + \" = diffuseBase\".concat(this.diffuseColor.isConnected ? \" * \" + this.diffuseColor.associatedVariableName : \"\", \";\\r\\n\");\n\n    if (specularOutput.hasEndpoints) {\n      state.compilationString += this._declareOutput(specularOutput, state) + \" = specularBase\".concat(this.specularColor.isConnected ? \" * \" + this.specularColor.associatedVariableName : \"\", \";\\r\\n\");\n    }\n\n    if (this.shadow.hasEndpoints) {\n      state.compilationString += this._declareOutput(this.shadow, state) + \" = shadow;\\r\\n\";\n    }\n\n    return this;\n  };\n\n  LightBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    if (this.light) {\n      serializationObject.lightId = this.light.id;\n    }\n\n    return serializationObject;\n  };\n\n  LightBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    if (serializationObject.lightId) {\n      this.light = scene.getLightById(serializationObject.lightId);\n    }\n  };\n\n  return LightBlock;\n}(NodeMaterialBlock);\n\nexport { LightBlock };\nRegisterClass(\"BABYLON.LightBlock\", LightBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockTargets","NodeMaterialBlockConnectionPointTypes","MaterialHelper","NodeMaterialSystemValues","InputBlock","RegisterClass","__extends","name","_super","VertexAndFragment","_this","_isUnique","registerInput","Vector4","Vertex","Fragment","Vector3","Float","Color3","Matrix","registerOutput","LightBlock","Object","_inputs","_outputs","material","cameraPosition","isConnected","cameraPositionInput","getInputBlockByPredicate","b","systemValue","CameraPosition","setAsSystemValue","output","connectTo","mesh","nodeMaterial","defines","_areLightsDirty","scene","getScene","light","PrepareDefinesForLights","maxSimultaneousLights","state","needNormals","needRebuild","lightmapMode","shadowEnabled","specularEnabled","PrepareDefinesForLight","_lightId","rebuild","uniformBuffers","lightIndex","onlyUpdateBuffersList","uniforms","indexOf","PrepareUniformsAndSamplersForLight","samplers","effect","BindLights","BindLight","worldPos","worldPosition","comments","_emitFunctionFromInclude","supportUniformBuffers","repeatKey","sharedData","dynamicUniformBlocks","push","counters","undefined","replaceStrings","search","replace","toString","worldPosVaryingName","associatedVariableName","_emitVaryingFromString","compilationString","concat","_emitCodeFromInclude","view","_buildBlock","call","target","_injectVertexCode","forcedBindableBlocks","blocksWithDefines","_registerTempVariable","glossiness","glossPower","worldNormal","diffuseOutput","specularOutput","_declareOutput","diffuseColor","hasEndpoints","specularColor","shadow","serializationObject","serialize","lightId","id","rootUrl","_deserialize","getLightById"],"sourceRoot":"","sources":["../../../../../../../../lts/core/generated/Materials/Node/Blocks/Dual/lightBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { MaterialHelper } from \"../../../materialHelper\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\nimport type { NodeMaterial, NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport type { Effect } from \"../../../effect\";\r\nimport type { Mesh } from \"../../../../Meshes/mesh\";\r\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues\";\r\nimport { InputBlock } from \"../Input/inputBlock\";\r\nimport type { Light } from \"../../../../Lights/light\";\r\nimport type { Nullable } from \"../../../../types\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { Scene } from \"../../../../scene\";\r\n\r\nimport \"../../../../Shaders/ShadersInclude/lightFragmentDeclaration\";\r\nimport \"../../../../Shaders/ShadersInclude/lightVxFragmentDeclaration\";\r\nimport \"../../../../Shaders/ShadersInclude/lightUboDeclaration\";\r\nimport \"../../../../Shaders/ShadersInclude/lightVxUboDeclaration\";\r\nimport \"../../../../Shaders/ShadersInclude/lightFragment\";\r\nimport \"../../../../Shaders/ShadersInclude/helperFunctions\";\r\nimport \"../../../../Shaders/ShadersInclude/lightsFragmentFunctions\";\r\nimport \"../../../../Shaders/ShadersInclude/shadowsFragmentFunctions\";\r\nimport \"../../../../Shaders/ShadersInclude/shadowsVertex\";\r\n\r\n/**\r\n * Block used to add light in the fragment shader\r\n */\r\nexport class LightBlock extends NodeMaterialBlock {\r\n    private _lightId: number;\r\n\r\n    /**\r\n     * Gets or sets the light associated with this block\r\n     */\r\n    public light: Nullable<Light>;\r\n\r\n    /**\r\n     * Create a new LightBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.VertexAndFragment);\r\n\r\n        this._isUnique = true;\r\n\r\n        this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Vertex);\r\n        this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"cameraPosition\", NodeMaterialBlockConnectionPointTypes.Vector3, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"glossiness\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"glossPower\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"diffuseColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"specularColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"view\", NodeMaterialBlockConnectionPointTypes.Matrix, true);\r\n\r\n        this.registerOutput(\"diffuseOutput\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"specularOutput\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"shadow\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"LightBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the world position input component\r\n     */\r\n    public get worldPosition(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the world normal input component\r\n     */\r\n    public get worldNormal(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the camera (or eye) position component\r\n     */\r\n    public get cameraPosition(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the glossiness component\r\n     */\r\n    public get glossiness(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the glossiness power component\r\n     */\r\n    public get glossPower(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the diffuse color component\r\n     */\r\n    public get diffuseColor(): NodeMaterialConnectionPoint {\r\n        return this._inputs[5];\r\n    }\r\n\r\n    /**\r\n     * Gets the specular color component\r\n     */\r\n    public get specularColor(): NodeMaterialConnectionPoint {\r\n        return this._inputs[6];\r\n    }\r\n\r\n    /**\r\n     * Gets the view matrix component\r\n     */\r\n    public get view(): NodeMaterialConnectionPoint {\r\n        return this._inputs[7];\r\n    }\r\n\r\n    /**\r\n     * Gets the diffuse output component\r\n     */\r\n    public get diffuseOutput(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the specular output component\r\n     */\r\n    public get specularOutput(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the shadow output component\r\n     */\r\n    public get shadow(): NodeMaterialConnectionPoint {\r\n        return this._outputs[2];\r\n    }\r\n\r\n    public autoConfigure(material: NodeMaterial) {\r\n        if (!this.cameraPosition.isConnected) {\r\n            let cameraPositionInput = material.getInputBlockByPredicate((b) => b.systemValue === NodeMaterialSystemValues.CameraPosition);\r\n\r\n            if (!cameraPositionInput) {\r\n                cameraPositionInput = new InputBlock(\"cameraPosition\");\r\n                cameraPositionInput.setAsSystemValue(NodeMaterialSystemValues.CameraPosition);\r\n            }\r\n            cameraPositionInput.output.connectTo(this.cameraPosition);\r\n        }\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        if (!defines._areLightsDirty) {\r\n            return;\r\n        }\r\n\r\n        const scene = mesh.getScene();\r\n\r\n        if (!this.light) {\r\n            MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, true, nodeMaterial.maxSimultaneousLights);\r\n        } else {\r\n            const state = {\r\n                needNormals: false,\r\n                needRebuild: false,\r\n                lightmapMode: false,\r\n                shadowEnabled: false,\r\n                specularEnabled: false,\r\n            };\r\n\r\n            MaterialHelper.PrepareDefinesForLight(scene, mesh, this.light, this._lightId, defines, true, state);\r\n\r\n            if (state.needRebuild) {\r\n                defines.rebuild();\r\n            }\r\n        }\r\n    }\r\n\r\n    public updateUniformsAndSamples(state: NodeMaterialBuildState, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines, uniformBuffers: string[]) {\r\n        for (let lightIndex = 0; lightIndex < nodeMaterial.maxSimultaneousLights; lightIndex++) {\r\n            if (!defines[\"LIGHT\" + lightIndex]) {\r\n                break;\r\n            }\r\n            const onlyUpdateBuffersList = state.uniforms.indexOf(\"vLightData\" + lightIndex) >= 0;\r\n            MaterialHelper.PrepareUniformsAndSamplersForLight(\r\n                lightIndex,\r\n                state.uniforms,\r\n                state.samplers,\r\n                defines[\"PROJECTEDLIGHTTEXTURE\" + lightIndex],\r\n                uniformBuffers,\r\n                onlyUpdateBuffersList\r\n            );\r\n        }\r\n    }\r\n\r\n    public bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh) {\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        const scene = mesh.getScene();\r\n\r\n        if (!this.light) {\r\n            MaterialHelper.BindLights(scene, mesh, effect, true, nodeMaterial.maxSimultaneousLights);\r\n        } else {\r\n            MaterialHelper.BindLight(this.light, this._lightId, scene, effect, true);\r\n        }\r\n    }\r\n\r\n    private _injectVertexCode(state: NodeMaterialBuildState) {\r\n        const worldPos = this.worldPosition;\r\n        const comments = `//${this.name}`;\r\n\r\n        // Declaration\r\n        if (!this.light) {\r\n            // Emit for all lights\r\n            state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightVxUboDeclaration\" : \"lightVxFragmentDeclaration\", comments, {\r\n                repeatKey: \"maxSimultaneousLights\",\r\n            });\r\n            this._lightId = 0;\r\n\r\n            state.sharedData.dynamicUniformBlocks.push(this);\r\n        } else {\r\n            this._lightId = (state.counters[\"lightCounter\"] !== undefined ? state.counters[\"lightCounter\"] : -1) + 1;\r\n            state.counters[\"lightCounter\"] = this._lightId;\r\n\r\n            state._emitFunctionFromInclude(\r\n                state.supportUniformBuffers ? \"lightVxUboDeclaration\" : \"lightVxFragmentDeclaration\",\r\n                comments,\r\n                {\r\n                    replaceStrings: [{ search: /{X}/g, replace: this._lightId.toString() }],\r\n                },\r\n                this._lightId.toString()\r\n            );\r\n        }\r\n\r\n        // Inject code in vertex\r\n        const worldPosVaryingName = \"v_\" + worldPos.associatedVariableName;\r\n        if (state._emitVaryingFromString(worldPosVaryingName, \"vec4\")) {\r\n            state.compilationString += `${worldPosVaryingName} = ${worldPos.associatedVariableName};\\r\\n`;\r\n        }\r\n\r\n        if (this.light) {\r\n            state.compilationString += state._emitCodeFromInclude(\"shadowsVertex\", comments, {\r\n                replaceStrings: [\r\n                    { search: /{X}/g, replace: this._lightId.toString() },\r\n                    { search: /worldPos/g, replace: worldPos.associatedVariableName },\r\n                ],\r\n            });\r\n        } else {\r\n            state.compilationString += `vec4 worldPos = ${worldPos.associatedVariableName};\\r\\n`;\r\n            if (this.view.isConnected) {\r\n                state.compilationString += `mat4 view = ${this.view.associatedVariableName};\\r\\n`;\r\n            }\r\n            state.compilationString += state._emitCodeFromInclude(\"shadowsVertex\", comments, {\r\n                repeatKey: \"maxSimultaneousLights\",\r\n            });\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (state.target !== NodeMaterialBlockTargets.Fragment) {\r\n            // Vertex\r\n            this._injectVertexCode(state);\r\n\r\n            return;\r\n        }\r\n\r\n        // Fragment\r\n        state.sharedData.forcedBindableBlocks.push(this);\r\n        state.sharedData.blocksWithDefines.push(this);\r\n\r\n        const comments = `//${this.name}`;\r\n        const worldPos = this.worldPosition;\r\n\r\n        state._emitFunctionFromInclude(\"helperFunctions\", comments);\r\n\r\n        state._emitFunctionFromInclude(\"lightsFragmentFunctions\", comments, {\r\n            replaceStrings: [{ search: /vPositionW/g, replace: \"v_\" + worldPos.associatedVariableName + \".xyz\" }],\r\n        });\r\n\r\n        state._emitFunctionFromInclude(\"shadowsFragmentFunctions\", comments, {\r\n            replaceStrings: [{ search: /vPositionW/g, replace: \"v_\" + worldPos.associatedVariableName + \".xyz\" }],\r\n        });\r\n\r\n        if (!this.light) {\r\n            // Emit for all lights\r\n            state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightUboDeclaration\" : \"lightFragmentDeclaration\", comments, {\r\n                repeatKey: \"maxSimultaneousLights\",\r\n            });\r\n        } else {\r\n            state._emitFunctionFromInclude(\r\n                state.supportUniformBuffers ? \"lightUboDeclaration\" : \"lightFragmentDeclaration\",\r\n                comments,\r\n                {\r\n                    replaceStrings: [{ search: /{X}/g, replace: this._lightId.toString() }],\r\n                },\r\n                this._lightId.toString()\r\n            );\r\n        }\r\n\r\n        // Code\r\n        if (this._lightId === 0) {\r\n            if (state._registerTempVariable(\"viewDirectionW\")) {\r\n                state.compilationString += `vec3 viewDirectionW = normalize(${this.cameraPosition.associatedVariableName} - ${\"v_\" + worldPos.associatedVariableName}.xyz);\\r\\n`;\r\n            }\r\n            state.compilationString += `lightingInfo info;\\r\\n`;\r\n            state.compilationString += `float shadow = 1.;\\r\\n`;\r\n            state.compilationString += `float glossiness = ${this.glossiness.isConnected ? this.glossiness.associatedVariableName : \"1.0\"} * ${\r\n                this.glossPower.isConnected ? this.glossPower.associatedVariableName : \"1024.0\"\r\n            };\\r\\n`;\r\n            state.compilationString += `vec3 diffuseBase = vec3(0., 0., 0.);\\r\\n`;\r\n            state.compilationString += `vec3 specularBase = vec3(0., 0., 0.);\\r\\n`;\r\n            state.compilationString += `vec3 normalW = ${this.worldNormal.associatedVariableName}.xyz;\\r\\n`;\r\n        }\r\n\r\n        if (this.light) {\r\n            state.compilationString += state._emitCodeFromInclude(\"lightFragment\", comments, {\r\n                replaceStrings: [{ search: /{X}/g, replace: this._lightId.toString() }],\r\n            });\r\n        } else {\r\n            state.compilationString += state._emitCodeFromInclude(\"lightFragment\", comments, {\r\n                repeatKey: \"maxSimultaneousLights\",\r\n            });\r\n        }\r\n\r\n        const diffuseOutput = this.diffuseOutput;\r\n        const specularOutput = this.specularOutput;\r\n\r\n        state.compilationString +=\r\n            this._declareOutput(diffuseOutput, state) + ` = diffuseBase${this.diffuseColor.isConnected ? \" * \" + this.diffuseColor.associatedVariableName : \"\"};\\r\\n`;\r\n        if (specularOutput.hasEndpoints) {\r\n            state.compilationString +=\r\n                this._declareOutput(specularOutput, state) + ` = specularBase${this.specularColor.isConnected ? \" * \" + this.specularColor.associatedVariableName : \"\"};\\r\\n`;\r\n        }\r\n\r\n        if (this.shadow.hasEndpoints) {\r\n            state.compilationString += this._declareOutput(this.shadow, state) + ` = shadow;\\r\\n`;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        if (this.light) {\r\n            serializationObject.lightId = this.light.id;\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        if (serializationObject.lightId) {\r\n            this.light = scene.getLightById(serializationObject.lightId);\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.LightBlock\", LightBlock);\r\n"]},"metadata":{},"sourceType":"module"}