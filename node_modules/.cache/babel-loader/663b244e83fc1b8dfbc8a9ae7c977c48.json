{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.data-view.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.uint32-array.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport { Tools } from \"@babylonjs/core/Misc/tools.js\";\nimport { VertexBuffer } from \"@babylonjs/core/Buffers/buffer.js\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh.js\";\nimport { SceneLoader } from \"@babylonjs/core/Loading/sceneLoader.js\";\nimport { AssetContainer } from \"@babylonjs/core/assetContainer.js\";\n/**\n * STL file type loader.\n * This is a babylon scene loader plugin.\n */\n\nvar STLFileLoader =\n/** @class */\nfunction () {\n  function STLFileLoader() {\n    /** @hidden */\n    this.solidPattern = /solid (\\S*)([\\S\\s]*?)endsolid[ ]*(\\S*)/g;\n    /** @hidden */\n\n    this.facetsPattern = /facet([\\s\\S]*?)endfacet/g;\n    /** @hidden */\n\n    this.normalPattern = /normal[\\s]+([-+]?[0-9]+\\.?[0-9]*([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+/g;\n    /** @hidden */\n\n    this.vertexPattern = /vertex[\\s]+([-+]?[0-9]+\\.?[0-9]*([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+/g;\n    /**\n     * Defines the name of the plugin.\n     */\n\n    this.name = \"stl\";\n    /**\n     * Defines the extensions the stl loader is able to load.\n     * force data to come in as an ArrayBuffer\n     * we'll convert to string if it looks like it's an ASCII .stl\n     */\n\n    this.extensions = {\n      \".stl\": {\n        isBinary: true\n      }\n    };\n  }\n  /**\n   * Import meshes into a scene.\n   * @param meshesNames An array of mesh names, a single mesh name, or empty string for all meshes that filter what meshes are imported\n   * @param scene The scene to import into\n   * @param data The data to import\n   * @param rootUrl The root url for scene and resources\n   * @param meshes The meshes array to import into\n   * @returns True if successful or false otherwise\n   */\n\n\n  STLFileLoader.prototype.importMesh = function (meshesNames, scene, data, rootUrl, meshes) {\n    var matches;\n\n    if (typeof data !== \"string\") {\n      if (this._isBinary(data)) {\n        // binary .stl\n        var babylonMesh = new Mesh(\"stlmesh\", scene);\n\n        this._parseBinary(babylonMesh, data);\n\n        if (meshes) {\n          meshes.push(babylonMesh);\n        }\n\n        return true;\n      } // ASCII .stl\n      // convert to string\n\n\n      var array_buffer = new Uint8Array(data);\n      var str = \"\";\n\n      for (var i = 0; i < data.byteLength; i++) {\n        str += String.fromCharCode(array_buffer[i]); // implicitly assumes little-endian\n      }\n\n      data = str;\n    } //if arrived here, data is a string, containing the STLA data.\n\n\n    while (matches = this.solidPattern.exec(data)) {\n      var meshName = matches[1];\n      var meshNameFromEnd = matches[3];\n\n      if (meshName != meshNameFromEnd) {\n        Tools.Error(\"Error in STL, solid name != endsolid name\");\n        return false;\n      } // check meshesNames\n\n\n      if (meshesNames && meshName) {\n        if (meshesNames instanceof Array) {\n          if (!meshesNames.indexOf(meshName)) {\n            continue;\n          }\n        } else {\n          if (meshName !== meshesNames) {\n            continue;\n          }\n        }\n      } // stl mesh name can be empty as well\n\n\n      meshName = meshName || \"stlmesh\";\n      var babylonMesh = new Mesh(meshName, scene);\n\n      this._parseASCII(babylonMesh, matches[2]);\n\n      if (meshes) {\n        meshes.push(babylonMesh);\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Load into a scene.\n   * @param scene The scene to load into\n   * @param data The data to import\n   * @param rootUrl The root url for scene and resources\n   * @returns true if successful or false otherwise\n   */\n\n\n  STLFileLoader.prototype.load = function (scene, data, rootUrl) {\n    var result = this.importMesh(null, scene, data, rootUrl, null);\n    return result;\n  };\n  /**\n   * Load into an asset container.\n   * @param scene The scene to load into\n   * @param data The data to import\n   * @param rootUrl The root url for scene and resources\n   * @returns The loaded asset container\n   */\n\n\n  STLFileLoader.prototype.loadAssetContainer = function (scene, data, rootUrl) {\n    var container = new AssetContainer(scene);\n    scene._blockEntityCollection = true;\n    this.importMesh(null, scene, data, rootUrl, container.meshes);\n    scene._blockEntityCollection = false;\n    return container;\n  };\n\n  STLFileLoader.prototype._isBinary = function (data) {\n    // check if file size is correct for binary stl\n    var reader = new DataView(data); // A Binary STL header is 80 bytes, if the data size is not great than\n    // that then it's not a binary STL.\n\n    if (reader.byteLength <= 80) {\n      return false;\n    }\n\n    var faceSize = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n    var nFaces = reader.getUint32(80, true);\n\n    if (80 + 32 / 8 + nFaces * faceSize === reader.byteLength) {\n      return true;\n    } // check characters higher than ASCII to confirm binary\n\n\n    var fileLength = reader.byteLength;\n\n    for (var index = 0; index < fileLength; index++) {\n      if (reader.getUint8(index) > 127) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  STLFileLoader.prototype._parseBinary = function (mesh, data) {\n    var reader = new DataView(data);\n    var faces = reader.getUint32(80, true);\n    var dataOffset = 84;\n    var faceLength = 12 * 4 + 2;\n    var offset = 0;\n    var positions = new Float32Array(faces * 3 * 3);\n    var normals = new Float32Array(faces * 3 * 3);\n    var indices = new Uint32Array(faces * 3);\n    var indicesCount = 0;\n\n    for (var face = 0; face < faces; face++) {\n      var start = dataOffset + face * faceLength;\n      var normalX = reader.getFloat32(start, true);\n      var normalY = reader.getFloat32(start + 4, true);\n      var normalZ = reader.getFloat32(start + 8, true);\n\n      for (var i = 1; i <= 3; i++) {\n        var vertexstart = start + i * 12; // ordering is intentional to match ascii import\n\n        positions[offset] = reader.getFloat32(vertexstart, true);\n        normals[offset] = normalX;\n\n        if (!STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\n          positions[offset + 2] = reader.getFloat32(vertexstart + 4, true);\n          positions[offset + 1] = reader.getFloat32(vertexstart + 8, true);\n          normals[offset + 2] = normalY;\n          normals[offset + 1] = normalZ;\n        } else {\n          positions[offset + 1] = reader.getFloat32(vertexstart + 4, true);\n          positions[offset + 2] = reader.getFloat32(vertexstart + 8, true);\n          normals[offset + 1] = normalY;\n          normals[offset + 2] = normalZ;\n        }\n\n        offset += 3;\n      }\n\n      indices[indicesCount] = indicesCount++;\n      indices[indicesCount] = indicesCount++;\n      indices[indicesCount] = indicesCount++;\n    }\n\n    mesh.setVerticesData(VertexBuffer.PositionKind, positions);\n    mesh.setVerticesData(VertexBuffer.NormalKind, normals);\n    mesh.setIndices(indices);\n    mesh.computeWorldMatrix(true);\n  };\n\n  STLFileLoader.prototype._parseASCII = function (mesh, solidData) {\n    var positions = [];\n    var normals = [];\n    var indices = [];\n    var indicesCount = 0; //load facets, ignoring loop as the standard doesn't define it can contain more than vertices\n\n    var matches;\n\n    while (matches = this.facetsPattern.exec(solidData)) {\n      var facet = matches[1]; //one normal per face\n\n      var normalMatches = this.normalPattern.exec(facet);\n      this.normalPattern.lastIndex = 0;\n\n      if (!normalMatches) {\n        continue;\n      }\n\n      var normal = [Number(normalMatches[1]), Number(normalMatches[5]), Number(normalMatches[3])];\n      var vertexMatch = void 0;\n\n      while (vertexMatch = this.vertexPattern.exec(facet)) {\n        if (!STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\n          positions.push(Number(vertexMatch[1]), Number(vertexMatch[5]), Number(vertexMatch[3]));\n          normals.push(normal[0], normal[1], normal[2]);\n        } else {\n          positions.push(Number(vertexMatch[1]), Number(vertexMatch[3]), Number(vertexMatch[5])); // Flipping the second and third component because inverted\n          // when normal was declared.\n\n          normals.push(normal[0], normal[2], normal[1]);\n        }\n      }\n\n      indices.push(indicesCount++, indicesCount++, indicesCount++);\n      this.vertexPattern.lastIndex = 0;\n    }\n\n    this.facetsPattern.lastIndex = 0;\n    mesh.setVerticesData(VertexBuffer.PositionKind, positions);\n    mesh.setVerticesData(VertexBuffer.NormalKind, normals);\n    mesh.setIndices(indices);\n    mesh.computeWorldMatrix(true);\n  };\n  /**\n   * Defines if Y and Z axes are swapped or not when loading an STL file.\n   * The default is false to maintain backward compatibility. When set to\n   * true, coordinates from the STL file are used without change.\n   */\n\n\n  STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES = false;\n  return STLFileLoader;\n}();\n\nexport { STLFileLoader };\n\nif (SceneLoader) {\n  SceneLoader.RegisterPlugin(new STLFileLoader());\n}","map":{"version":3,"mappings":"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","names":["Tools","VertexBuffer","Mesh","SceneLoader","AssetContainer","isBinary","STLFileLoader","meshesNames","scene","data","rootUrl","meshes","matches","_isBinary","babylonMesh","_parseBinary","push","array_buffer","Uint8Array","str","i","byteLength","String","fromCharCode","solidPattern","exec","meshName","meshNameFromEnd","Error","Array","indexOf","_parseASCII","result","importMesh","container","_blockEntityCollection","reader","DataView","faceSize","nFaces","getUint32","fileLength","index","getUint8","mesh","faces","dataOffset","faceLength","offset","positions","Float32Array","normals","indices","Uint32Array","indicesCount","face","start","normalX","getFloat32","normalY","normalZ","vertexstart","DO_NOT_ALTER_FILE_COORDINATES","setVerticesData","PositionKind","NormalKind","setIndices","computeWorldMatrix","solidData","facetsPattern","facet","normalMatches","normalPattern","lastIndex","normal","Number","vertexMatch","vertexPattern","RegisterPlugin"],"sourceRoot":"","sources":["../../../../../lts/loaders/generated/STL/stlFileLoader.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { Tools } from \"core/Misc/tools\";\r\nimport { VertexBuffer } from \"core/Buffers/buffer\";\r\nimport type { AbstractMesh } from \"core/Meshes/abstractMesh\";\r\nimport { Mesh } from \"core/Meshes/mesh\";\r\nimport type { ISceneLoaderPlugin, ISceneLoaderPluginExtensions } from \"core/Loading/sceneLoader\";\r\nimport { SceneLoader } from \"core/Loading/sceneLoader\";\r\nimport { AssetContainer } from \"core/assetContainer\";\r\nimport type { Scene } from \"core/scene\";\r\n\r\n/**\r\n * STL file type loader.\r\n * This is a babylon scene loader plugin.\r\n */\r\nexport class STLFileLoader implements ISceneLoaderPlugin {\r\n    /** @hidden */\r\n    public solidPattern = /solid (\\S*)([\\S\\s]*?)endsolid[ ]*(\\S*)/g;\r\n\r\n    /** @hidden */\r\n    public facetsPattern = /facet([\\s\\S]*?)endfacet/g;\r\n    /** @hidden */\r\n    public normalPattern = /normal[\\s]+([-+]?[0-9]+\\.?[0-9]*([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+/g;\r\n    /** @hidden */\r\n    public vertexPattern = /vertex[\\s]+([-+]?[0-9]+\\.?[0-9]*([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+[\\s]+([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)+/g;\r\n\r\n    /**\r\n     * Defines the name of the plugin.\r\n     */\r\n    public name = \"stl\";\r\n\r\n    /**\r\n     * Defines the extensions the stl loader is able to load.\r\n     * force data to come in as an ArrayBuffer\r\n     * we'll convert to string if it looks like it's an ASCII .stl\r\n     */\r\n    public extensions: ISceneLoaderPluginExtensions = {\r\n        \".stl\": { isBinary: true },\r\n    };\r\n\r\n    /**\r\n     * Defines if Y and Z axes are swapped or not when loading an STL file.\r\n     * The default is false to maintain backward compatibility. When set to\r\n     * true, coordinates from the STL file are used without change.\r\n     */\r\n    public static DO_NOT_ALTER_FILE_COORDINATES = false;\r\n\r\n    /**\r\n     * Import meshes into a scene.\r\n     * @param meshesNames An array of mesh names, a single mesh name, or empty string for all meshes that filter what meshes are imported\r\n     * @param scene The scene to import into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @param meshes The meshes array to import into\r\n     * @returns True if successful or false otherwise\r\n     */\r\n    public importMesh(meshesNames: any, scene: Scene, data: any, rootUrl: string, meshes: Nullable<AbstractMesh[]>): boolean {\r\n        let matches;\r\n\r\n        if (typeof data !== \"string\") {\r\n            if (this._isBinary(data)) {\r\n                // binary .stl\r\n                const babylonMesh = new Mesh(\"stlmesh\", scene);\r\n                this._parseBinary(babylonMesh, data);\r\n                if (meshes) {\r\n                    meshes.push(babylonMesh);\r\n                }\r\n                return true;\r\n            }\r\n\r\n            // ASCII .stl\r\n\r\n            // convert to string\r\n            const array_buffer = new Uint8Array(data);\r\n            let str = \"\";\r\n            for (let i = 0; i < data.byteLength; i++) {\r\n                str += String.fromCharCode(array_buffer[i]); // implicitly assumes little-endian\r\n            }\r\n            data = str;\r\n        }\r\n\r\n        //if arrived here, data is a string, containing the STLA data.\r\n\r\n        while ((matches = this.solidPattern.exec(data))) {\r\n            let meshName = matches[1];\r\n            const meshNameFromEnd = matches[3];\r\n            if (meshName != meshNameFromEnd) {\r\n                Tools.Error(\"Error in STL, solid name != endsolid name\");\r\n                return false;\r\n            }\r\n\r\n            // check meshesNames\r\n            if (meshesNames && meshName) {\r\n                if (meshesNames instanceof Array) {\r\n                    if (!meshesNames.indexOf(meshName)) {\r\n                        continue;\r\n                    }\r\n                } else {\r\n                    if (meshName !== meshesNames) {\r\n                        continue;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // stl mesh name can be empty as well\r\n            meshName = meshName || \"stlmesh\";\r\n\r\n            const babylonMesh = new Mesh(meshName, scene);\r\n            this._parseASCII(babylonMesh, matches[2]);\r\n            if (meshes) {\r\n                meshes.push(babylonMesh);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Load into a scene.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @returns true if successful or false otherwise\r\n     */\r\n    public load(scene: Scene, data: any, rootUrl: string): boolean {\r\n        const result = this.importMesh(null, scene, data, rootUrl, null);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Load into an asset container.\r\n     * @param scene The scene to load into\r\n     * @param data The data to import\r\n     * @param rootUrl The root url for scene and resources\r\n     * @returns The loaded asset container\r\n     */\r\n    public loadAssetContainer(scene: Scene, data: string, rootUrl: string): AssetContainer {\r\n        const container = new AssetContainer(scene);\r\n        scene._blockEntityCollection = true;\r\n        this.importMesh(null, scene, data, rootUrl, container.meshes);\r\n        scene._blockEntityCollection = false;\r\n        return container;\r\n    }\r\n\r\n    private _isBinary(data: any) {\r\n        // check if file size is correct for binary stl\r\n        const reader = new DataView(data);\r\n\r\n        // A Binary STL header is 80 bytes, if the data size is not great than\r\n        // that then it's not a binary STL.\r\n        if (reader.byteLength <= 80) {\r\n            return false;\r\n        }\r\n\r\n        const faceSize = (32 / 8) * 3 + (32 / 8) * 3 * 3 + 16 / 8;\r\n        const nFaces = reader.getUint32(80, true);\r\n\r\n        if (80 + 32 / 8 + nFaces * faceSize === reader.byteLength) {\r\n            return true;\r\n        }\r\n\r\n        // check characters higher than ASCII to confirm binary\r\n        const fileLength = reader.byteLength;\r\n        for (let index = 0; index < fileLength; index++) {\r\n            if (reader.getUint8(index) > 127) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private _parseBinary(mesh: Mesh, data: ArrayBuffer) {\r\n        const reader = new DataView(data);\r\n        const faces = reader.getUint32(80, true);\r\n\r\n        const dataOffset = 84;\r\n        const faceLength = 12 * 4 + 2;\r\n\r\n        let offset = 0;\r\n\r\n        const positions = new Float32Array(faces * 3 * 3);\r\n        const normals = new Float32Array(faces * 3 * 3);\r\n        const indices = new Uint32Array(faces * 3);\r\n        let indicesCount = 0;\r\n\r\n        for (let face = 0; face < faces; face++) {\r\n            const start = dataOffset + face * faceLength;\r\n            const normalX = reader.getFloat32(start, true);\r\n            const normalY = reader.getFloat32(start + 4, true);\r\n            const normalZ = reader.getFloat32(start + 8, true);\r\n\r\n            for (let i = 1; i <= 3; i++) {\r\n                const vertexstart = start + i * 12;\r\n\r\n                // ordering is intentional to match ascii import\r\n                positions[offset] = reader.getFloat32(vertexstart, true);\r\n                normals[offset] = normalX;\r\n\r\n                if (!STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\r\n                    positions[offset + 2] = reader.getFloat32(vertexstart + 4, true);\r\n                    positions[offset + 1] = reader.getFloat32(vertexstart + 8, true);\r\n\r\n                    normals[offset + 2] = normalY;\r\n                    normals[offset + 1] = normalZ;\r\n                } else {\r\n                    positions[offset + 1] = reader.getFloat32(vertexstart + 4, true);\r\n                    positions[offset + 2] = reader.getFloat32(vertexstart + 8, true);\r\n\r\n                    normals[offset + 1] = normalY;\r\n                    normals[offset + 2] = normalZ;\r\n                }\r\n\r\n                offset += 3;\r\n            }\r\n            indices[indicesCount] = indicesCount++;\r\n            indices[indicesCount] = indicesCount++;\r\n            indices[indicesCount] = indicesCount++;\r\n        }\r\n\r\n        mesh.setVerticesData(VertexBuffer.PositionKind, positions);\r\n        mesh.setVerticesData(VertexBuffer.NormalKind, normals);\r\n        mesh.setIndices(indices);\r\n        mesh.computeWorldMatrix(true);\r\n    }\r\n\r\n    private _parseASCII(mesh: Mesh, solidData: string) {\r\n        const positions = [];\r\n        const normals = [];\r\n        const indices = [];\r\n        let indicesCount = 0;\r\n\r\n        //load facets, ignoring loop as the standard doesn't define it can contain more than vertices\r\n        let matches;\r\n        while ((matches = this.facetsPattern.exec(solidData))) {\r\n            const facet = matches[1];\r\n            //one normal per face\r\n            const normalMatches = this.normalPattern.exec(facet);\r\n            this.normalPattern.lastIndex = 0;\r\n            if (!normalMatches) {\r\n                continue;\r\n            }\r\n            const normal = [Number(normalMatches[1]), Number(normalMatches[5]), Number(normalMatches[3])];\r\n\r\n            let vertexMatch;\r\n            while ((vertexMatch = this.vertexPattern.exec(facet))) {\r\n                if (!STLFileLoader.DO_NOT_ALTER_FILE_COORDINATES) {\r\n                    positions.push(Number(vertexMatch[1]), Number(vertexMatch[5]), Number(vertexMatch[3]));\r\n                    normals.push(normal[0], normal[1], normal[2]);\r\n                } else {\r\n                    positions.push(Number(vertexMatch[1]), Number(vertexMatch[3]), Number(vertexMatch[5]));\r\n\r\n                    // Flipping the second and third component because inverted\r\n                    // when normal was declared.\r\n                    normals.push(normal[0], normal[2], normal[1]);\r\n                }\r\n            }\r\n            indices.push(indicesCount++, indicesCount++, indicesCount++);\r\n            this.vertexPattern.lastIndex = 0;\r\n        }\r\n\r\n        this.facetsPattern.lastIndex = 0;\r\n        mesh.setVerticesData(VertexBuffer.PositionKind, positions);\r\n        mesh.setVerticesData(VertexBuffer.NormalKind, normals);\r\n        mesh.setIndices(indices);\r\n        mesh.computeWorldMatrix(true);\r\n    }\r\n}\r\n\r\nif (SceneLoader) {\r\n    SceneLoader.RegisterPlugin(new STLFileLoader());\r\n}\r\n"]},"metadata":{},"sourceType":"module"}