{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to lerp between 2 values\n */\n\nvar LerpBlock =\n/** @class */\nfunction (_super) {\n  __extends(LerpBlock, _super);\n  /**\n   * Creates a new LerpBlock\n   * @param name defines the block name\n   */\n\n\n  function LerpBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Neutral) || this;\n\n    _this.registerInput(\"left\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n\n    _this.registerInput(\"right\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n\n    _this.registerInput(\"gradient\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n\n    _this._outputs[0]._typeConnectionSource = _this._inputs[0];\n\n    _this._linkConnectionTypes(0, 1);\n\n    _this._linkConnectionTypes(1, 2, true);\n\n    _this._inputs[2].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Float);\n\n    return _this;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  LerpBlock.prototype.getClassName = function () {\n    return \"LerpBlock\";\n  };\n\n  Object.defineProperty(LerpBlock.prototype, \"left\", {\n    /**\n     * Gets the left operand input component\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LerpBlock.prototype, \"right\", {\n    /**\n     * Gets the right operand input component\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LerpBlock.prototype, \"gradient\", {\n    /**\n     * Gets the gradient operand input component\n     */\n    get: function get() {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LerpBlock.prototype, \"output\", {\n    /**\n     * Gets the output component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  LerpBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var output = this._outputs[0];\n    state.compilationString += this._declareOutput(output, state) + \" = mix(\".concat(this.left.associatedVariableName, \" , \").concat(this.right.associatedVariableName, \", \").concat(this.gradient.associatedVariableName, \");\\r\\n\");\n    return this;\n  };\n\n  return LerpBlock;\n}(NodeMaterialBlock);\n\nexport { LerpBlock };\nRegisterClass(\"BABYLON.LerpBlock\", LerpBlock);","map":{"version":3,"mappings":";;;AAAA,SAASA,iBAAT,QAAkC,yBAAlC;AACA,SAASC,qCAAT,QAAsD,mDAAtD;AAGA,SAASC,wBAAT,QAAyC,sCAAzC;AACA,SAASC,aAAT,QAA8B,4BAA9B;AACA;;;;AAGA;AAAA;AAAA;AAA+BC;AAC3B;;;;;;AAIA,qBAAmBC,IAAnB,EAA+B;AAA/B,gBACIC,kBAAMD,IAAN,EAAYH,wBAAwB,CAACK,OAArC,KAA6C,IADjD;;AAGIC,SAAI,CAACC,aAAL,CAAmB,MAAnB,EAA2BR,qCAAqC,CAACS,UAAjE;;AACAF,SAAI,CAACC,aAAL,CAAmB,OAAnB,EAA4BR,qCAAqC,CAACS,UAAlE;;AACAF,SAAI,CAACC,aAAL,CAAmB,UAAnB,EAA+BR,qCAAqC,CAACS,UAArE;;AACAF,SAAI,CAACG,cAAL,CAAoB,QAApB,EAA8BV,qCAAqC,CAACW,YAApE;;AAEAJ,SAAI,CAACK,QAAL,CAAc,CAAd,EAAiBC,qBAAjB,GAAyCN,KAAI,CAACO,OAAL,CAAa,CAAb,CAAzC;;AACAP,SAAI,CAACQ,oBAAL,CAA0B,CAA1B,EAA6B,CAA7B;;AACAR,SAAI,CAACQ,oBAAL,CAA0B,CAA1B,EAA6B,CAA7B,EAAgC,IAAhC;;AAEAR,SAAI,CAACO,OAAL,CAAa,CAAb,EAAgBE,4BAAhB,CAA6CC,IAA7C,CAAkDjB,qCAAqC,CAACkB,KAAxF;;;AACH;AAED;;;;;;AAIOC,qCAAP;AACI,WAAO,WAAP;AACH,GAFM;;AAOPC,wBAAWD,mBAAX,EAAW,MAAX,EAAe;AAHf;;;SAGA;AACI,aAAO,KAAKL,OAAL,CAAa,CAAb,CAAP;AACH,KAFc;qBAAA;;AAAA,GAAf;AAOAM,wBAAWD,mBAAX,EAAW,OAAX,EAAgB;AAHhB;;;SAGA;AACI,aAAO,KAAKL,OAAL,CAAa,CAAb,CAAP;AACH,KAFe;qBAAA;;AAAA,GAAhB;AAOAM,wBAAWD,mBAAX,EAAW,UAAX,EAAmB;AAHnB;;;SAGA;AACI,aAAO,KAAKL,OAAL,CAAa,CAAb,CAAP;AACH,KAFkB;qBAAA;;AAAA,GAAnB;AAOAM,wBAAWD,mBAAX,EAAW,QAAX,EAAiB;AAHjB;;;SAGA;AACI,aAAO,KAAKP,QAAL,CAAc,CAAd,CAAP;AACH,KAFgB;qBAAA;;AAAA,GAAjB;;AAIUO,oCAAV,UAAsBE,KAAtB,EAAmD;AAC/ChB,qBAAMiB,WAAN,CAAiBC,IAAjB,CAAiB,IAAjB,EAAkBF,KAAlB;;AAEA,QAAMG,MAAM,GAAG,KAAKZ,QAAL,CAAc,CAAd,CAAf;AAEAS,SAAK,CAACI,iBAAN,IACI,KAAKC,cAAL,CAAoBF,MAApB,EAA4BH,KAA5B,IAAqC,iBAAU,KAAKM,IAAL,CAAUC,sBAApB,EAA0C,KAA1C,EAA0CC,MAA1C,CAAgD,KAAKC,KAAL,CAAWF,sBAA3D,EAAiF,IAAjF,EAAiFC,MAAjF,CAAsF,KAAKE,QAAL,CAAcH,sBAApG,EAA0H,QAA1H,CADzC;AAGA,WAAO,IAAP;AACH,GATS;;AAUd;AAAC,CAlED,CAA+B7B,iBAA/B;;;AAoEAG,aAAa,CAAC,mBAAD,EAAsBiB,SAAtB,CAAb","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","__extends","name","_super","Neutral","_this","registerInput","AutoDetect","registerOutput","BasedOnInput","_outputs","_typeConnectionSource","_inputs","_linkConnectionTypes","acceptedConnectionPointTypes","push","Float","LerpBlock","Object","state","_buildBlock","call","output","compilationString","_declareOutput","left","associatedVariableName","concat","right","gradient"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Node/Blocks/lerpBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\n/**\r\n * Block used to lerp between 2 values\r\n */\r\nexport class LerpBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Creates a new LerpBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"left\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\r\n        this.registerInput(\"right\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\r\n        this.registerInput(\"gradient\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\r\n        this._linkConnectionTypes(0, 1);\r\n        this._linkConnectionTypes(1, 2, true);\r\n\r\n        this._inputs[2].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Float);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"LerpBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the left operand input component\r\n     */\r\n    public get left(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the right operand input component\r\n     */\r\n    public get right(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the gradient operand input component\r\n     */\r\n    public get gradient(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const output = this._outputs[0];\r\n\r\n        state.compilationString +=\r\n            this._declareOutput(output, state) + ` = mix(${this.left.associatedVariableName} , ${this.right.associatedVariableName}, ${this.gradient.associatedVariableName});\\r\\n`;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.LerpBlock\", LerpBlock);\r\n"]},"metadata":{},"sourceType":"module"}