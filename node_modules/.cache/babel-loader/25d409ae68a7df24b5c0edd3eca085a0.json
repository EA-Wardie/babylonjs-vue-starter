{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { Scene } from \"../scene.js\";\nimport { Mesh } from \"./mesh.js\";\nimport { SimplificationQueue, SimplificationType } from \"./meshSimplification.js\";\nimport { SceneComponentConstants } from \"../sceneComponent.js\";\nObject.defineProperty(Scene.prototype, \"simplificationQueue\", {\n  get: function get() {\n    if (!this._simplificationQueue) {\n      this._simplificationQueue = new SimplificationQueue();\n\n      var component = this._getComponent(SceneComponentConstants.NAME_SIMPLIFICATIONQUEUE);\n\n      if (!component) {\n        component = new SimplicationQueueSceneComponent(this);\n\n        this._addComponent(component);\n      }\n    }\n\n    return this._simplificationQueue;\n  },\n  set: function set(value) {\n    this._simplificationQueue = value;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nMesh.prototype.simplify = function (settings, parallelProcessing, simplificationType, successCallback) {\n  if (parallelProcessing === void 0) {\n    parallelProcessing = true;\n  }\n\n  if (simplificationType === void 0) {\n    simplificationType = SimplificationType.QUADRATIC;\n  }\n\n  this.getScene().simplificationQueue.addTask({\n    settings: settings,\n    parallelProcessing: parallelProcessing,\n    mesh: this,\n    simplificationType: simplificationType,\n    successCallback: successCallback\n  });\n  return this;\n};\n/**\n * Defines the simplification queue scene component responsible to help scheduling the various simplification task\n * created in a scene\n */\n\n\nvar SimplicationQueueSceneComponent =\n/** @class */\nfunction () {\n  /**\n   * Creates a new instance of the component for the given scene\n   * @param scene Defines the scene to register the component in\n   */\n  function SimplicationQueueSceneComponent(scene) {\n    /**\n     * The component name helpfull to identify the component in the list of scene components.\n     */\n    this.name = SceneComponentConstants.NAME_SIMPLIFICATIONQUEUE;\n    this.scene = scene;\n  }\n  /**\n   * Registers the component in a given scene\n   */\n\n\n  SimplicationQueueSceneComponent.prototype.register = function () {\n    this.scene._beforeCameraUpdateStage.registerStep(SceneComponentConstants.STEP_BEFORECAMERAUPDATE_SIMPLIFICATIONQUEUE, this, this._beforeCameraUpdate);\n  };\n  /**\n   * Rebuilds the elements related to this component in case of\n   * context lost for instance.\n   */\n\n\n  SimplicationQueueSceneComponent.prototype.rebuild = function () {// Nothing to do for this component\n  };\n  /**\n   * Disposes the component and the associated resources\n   */\n\n\n  SimplicationQueueSceneComponent.prototype.dispose = function () {// Nothing to do for this component\n  };\n\n  SimplicationQueueSceneComponent.prototype._beforeCameraUpdate = function () {\n    if (this.scene._simplificationQueue && !this.scene._simplificationQueue.running) {\n      this.scene._simplificationQueue.executeNext();\n    }\n  };\n\n  return SimplicationQueueSceneComponent;\n}();\n\nexport { SimplicationQueueSceneComponent };","map":{"version":3,"mappings":";;AAAA,SAASA,KAAT,QAAsB,aAAtB;AACA,SAASC,IAAT,QAAqB,WAArB;AAEA,SAASC,mBAAT,EAA8BC,kBAA9B,QAAwD,yBAAxD;AAEA,SAASC,uBAAT,QAAwC,sBAAxC;AAcAC,MAAM,CAACC,cAAP,CAAsBN,KAAK,CAACO,SAA5B,EAAuC,qBAAvC,EAA8D;AAC1DC,KAAG,EAAE;AACD,QAAI,CAAC,KAAKC,oBAAV,EAAgC;AAC5B,WAAKA,oBAAL,GAA4B,IAAIP,mBAAJ,EAA5B;;AACA,UAAIQ,SAAS,GAAG,KAAKC,aAAL,CAAmBP,uBAAuB,CAACQ,wBAA3C,CAAhB;;AACA,UAAI,CAACF,SAAL,EAAgB;AACZA,iBAAS,GAAG,IAAIG,+BAAJ,CAAoC,IAApC,CAAZ;;AACA,aAAKC,aAAL,CAAmBJ,SAAnB;AACH;AACJ;;AACD,WAAO,KAAKD,oBAAZ;AACH,GAXyD;AAY1DM,KAAG,EAAE,aAAuBC,KAAvB,EAAiD;AAClD,SAAKP,oBAAL,GAA4BO,KAA5B;AACH,GAdyD;AAe1DC,YAAU,EAAE,IAf8C;AAgB1DC,cAAY,EAAE;AAhB4C,CAA9D;;AAuCAjB,IAAI,CAACM,SAAL,CAAeY,QAAf,GAA0B,UACtBC,QADsB,EAEtBC,kBAFsB,EAGtBC,kBAHsB,EAItBC,eAJsB,EAIwC;AAF9D;AAAAF;AAAkC;;AAClC;AAAAC,yBAAyCnB,kBAAkB,CAACqB,SAA5D;AAAqE;;AAGrE,OAAKC,QAAL,GAAgBC,mBAAhB,CAAoCC,OAApC,CAA4C;AACxCP,YAAQ,EAAEA,QAD8B;AAExCC,sBAAkB,EAAEA,kBAFoB;AAGxCO,QAAI,EAAE,IAHkC;AAIxCN,sBAAkB,EAAEA,kBAJoB;AAKxCC,mBAAe,EAAEA;AALuB,GAA5C;AAOA,SAAO,IAAP;AACH,CAdD;AAgBA;;;;;;AAIA;AAAA;AAAA;AAWI;;;;AAIA,2CAAYM,KAAZ,EAAwB;AAdxB;;;AAGgB,gBAAOzB,uBAAuB,CAACQ,wBAA/B;AAYZ,SAAKiB,KAAL,GAAaA,KAAb;AACH;AAED;;;;;AAGOhB,uDAAP;AACI,SAAKgB,KAAL,CAAWC,wBAAX,CAAoCC,YAApC,CAAiD3B,uBAAuB,CAAC4B,2CAAzE,EAAsH,IAAtH,EAA4H,KAAKC,mBAAjI;AACH,GAFM;AAIP;;;;;;AAIOpB,sDAAP,aACI;AACH,GAFM;AAIP;;;;;AAGOA,sDAAP,aACI;AACH,GAFM;;AAICA,kEAAR;AACI,QAAI,KAAKgB,KAAL,CAAWpB,oBAAX,IAAmC,CAAC,KAAKoB,KAAL,CAAWpB,oBAAX,CAAgCyB,OAAxE,EAAiF;AAC7E,WAAKL,KAAL,CAAWpB,oBAAX,CAAgC0B,WAAhC;AACH;AACJ,GAJO;;AAKZ;AAAC,CA9CD","names":["Scene","Mesh","SimplificationQueue","SimplificationType","SceneComponentConstants","Object","defineProperty","prototype","get","_simplificationQueue","component","_getComponent","NAME_SIMPLIFICATIONQUEUE","SimplicationQueueSceneComponent","_addComponent","set","value","enumerable","configurable","simplify","settings","parallelProcessing","simplificationType","successCallback","QUADRATIC","getScene","simplificationQueue","addTask","mesh","scene","_beforeCameraUpdateStage","registerStep","STEP_BEFORECAMERAUPDATE_SIMPLIFICATIONQUEUE","_beforeCameraUpdate","running","executeNext"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Meshes/meshSimplificationSceneComponent.ts"],"sourcesContent":["import { Scene } from \"../scene\";\r\nimport { Mesh } from \"./mesh\";\r\nimport type { ISimplificationSettings } from \"./meshSimplification\";\r\nimport { SimplificationQueue, SimplificationType } from \"./meshSimplification\";\r\nimport type { ISceneComponent } from \"../sceneComponent\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /** @hidden (Backing field) */\r\n        _simplificationQueue: SimplificationQueue;\r\n\r\n        /**\r\n         * Gets or sets the simplification queue attached to the scene\r\n         * @see https://doc.babylonjs.com/how_to/in-browser_mesh_simplification\r\n         */\r\n        simplificationQueue: SimplificationQueue;\r\n    }\r\n}\r\nObject.defineProperty(Scene.prototype, \"simplificationQueue\", {\r\n    get: function (this: Scene) {\r\n        if (!this._simplificationQueue) {\r\n            this._simplificationQueue = new SimplificationQueue();\r\n            let component = this._getComponent(SceneComponentConstants.NAME_SIMPLIFICATIONQUEUE) as SimplicationQueueSceneComponent;\r\n            if (!component) {\r\n                component = new SimplicationQueueSceneComponent(this);\r\n                this._addComponent(component);\r\n            }\r\n        }\r\n        return this._simplificationQueue;\r\n    },\r\n    set: function (this: Scene, value: SimplificationQueue) {\r\n        this._simplificationQueue = value;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\ndeclare module \"../Meshes/mesh\" {\r\n    export interface Mesh {\r\n        /**\r\n         * Simplify the mesh according to the given array of settings.\r\n         * Function will return immediately and will simplify async\r\n         * @param settings a collection of simplification settings\r\n         * @param parallelProcessing should all levels calculate parallel or one after the other\r\n         * @param simplificationType the type of simplification to run\r\n         * @param successCallback optional success callback to be called after the simplification finished processing all settings\r\n         * @returns the current mesh\r\n         */\r\n        simplify(\r\n            settings: Array<ISimplificationSettings>,\r\n            parallelProcessing?: boolean,\r\n            simplificationType?: SimplificationType,\r\n            successCallback?: (mesh?: Mesh, submeshIndex?: number) => void\r\n        ): Mesh;\r\n    }\r\n}\r\n\r\nMesh.prototype.simplify = function (\r\n    settings: Array<ISimplificationSettings>,\r\n    parallelProcessing: boolean = true,\r\n    simplificationType: SimplificationType = SimplificationType.QUADRATIC,\r\n    successCallback?: (mesh?: Mesh, submeshIndex?: number) => void\r\n): Mesh {\r\n    this.getScene().simplificationQueue.addTask({\r\n        settings: settings,\r\n        parallelProcessing: parallelProcessing,\r\n        mesh: this,\r\n        simplificationType: simplificationType,\r\n        successCallback: successCallback,\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Defines the simplification queue scene component responsible to help scheduling the various simplification task\r\n * created in a scene\r\n */\r\nexport class SimplicationQueueSceneComponent implements ISceneComponent {\r\n    /**\r\n     * The component name helpfull to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_SIMPLIFICATIONQUEUE;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._beforeCameraUpdateStage.registerStep(SceneComponentConstants.STEP_BEFORECAMERAUPDATE_SIMPLIFICATIONQUEUE, this, this._beforeCameraUpdate);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        // Nothing to do for this component\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated resources\r\n     */\r\n    public dispose(): void {\r\n        // Nothing to do for this component\r\n    }\r\n\r\n    private _beforeCameraUpdate(): void {\r\n        if (this.scene._simplificationQueue && !this.scene._simplificationQueue.running) {\r\n            this.scene._simplificationQueue.executeNext();\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}