{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/web.timers.js\";\nimport * as WebGPUConstants from \"./webgpuConstants.js\";\nimport { WebGPUQuerySet } from \"./webgpuQuerySet.js\";\n/** @hidden */\n\nvar WebGPUOcclusionQuery =\n/** @class */\nfunction () {\n  function WebGPUOcclusionQuery(engine, device, bufferManager, startCount, incrementCount) {\n    if (startCount === void 0) {\n      startCount = 50;\n    }\n\n    if (incrementCount === void 0) {\n      incrementCount = 100;\n    }\n\n    this._availableIndices = [];\n    this._engine = engine;\n    this._device = device;\n    this._bufferManager = bufferManager;\n    this._frameLastBuffer = -1;\n    this._currentTotalIndices = 0;\n    this._countIncrement = incrementCount;\n\n    this._allocateNewIndices(startCount);\n  }\n\n  Object.defineProperty(WebGPUOcclusionQuery.prototype, \"querySet\", {\n    get: function get() {\n      return this._querySet.querySet;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebGPUOcclusionQuery.prototype, \"hasQueries\", {\n    get: function get() {\n      return this._currentTotalIndices !== this._availableIndices.length;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebGPUOcclusionQuery.prototype, \"canBeginQuery\", {\n    get: function get() {\n      var passIndex = this._engine._getCurrentRenderPassIndex();\n\n      switch (passIndex) {\n        case 0:\n          {\n            return this._engine._mainRenderPassWrapper.renderPassDescriptor.occlusionQuerySet !== undefined;\n          }\n\n        case 1:\n          {\n            return this._engine._rttRenderPassWrapper.renderPassDescriptor.occlusionQuerySet !== undefined;\n          }\n      }\n\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  WebGPUOcclusionQuery.prototype.createQuery = function () {\n    if (this._availableIndices.length === 0) {\n      this._allocateNewIndices();\n    }\n\n    var index = this._availableIndices[this._availableIndices.length - 1];\n    this._availableIndices.length--;\n    return index;\n  };\n\n  WebGPUOcclusionQuery.prototype.deleteQuery = function (index) {\n    this._availableIndices[this._availableIndices.length - 1] = index;\n  };\n\n  WebGPUOcclusionQuery.prototype.isQueryResultAvailable = function (index) {\n    this._retrieveQueryBuffer();\n\n    return !!this._lastBuffer && index < this._lastBuffer.length;\n  };\n\n  WebGPUOcclusionQuery.prototype.getQueryResult = function (index) {\n    var _a, _b;\n\n    return Number((_b = (_a = this._lastBuffer) === null || _a === void 0 ? void 0 : _a[index]) !== null && _b !== void 0 ? _b : -1);\n  };\n\n  WebGPUOcclusionQuery.prototype._retrieveQueryBuffer = function () {\n    var _this = this;\n\n    if (this._lastBuffer && this._frameLastBuffer === this._engine.frameId) {\n      return;\n    }\n\n    if (this._frameLastBuffer !== this._engine.frameId) {\n      this._frameLastBuffer = this._engine.frameId;\n\n      this._querySet.readValues(0, this._currentTotalIndices).then(function (arrayBuffer) {\n        _this._lastBuffer = arrayBuffer;\n      });\n    }\n  };\n\n  WebGPUOcclusionQuery.prototype._allocateNewIndices = function (numIndices) {\n    numIndices = numIndices !== null && numIndices !== void 0 ? numIndices : this._countIncrement;\n\n    this._delayQuerySetDispose();\n\n    for (var i = 0; i < numIndices; ++i) {\n      this._availableIndices.push(this._currentTotalIndices + i);\n    }\n\n    this._currentTotalIndices += numIndices;\n    this._querySet = new WebGPUQuerySet(this._currentTotalIndices, WebGPUConstants.QueryType.Occlusion, this._device, this._bufferManager, false);\n  };\n\n  WebGPUOcclusionQuery.prototype._delayQuerySetDispose = function () {\n    var querySet = this._querySet;\n\n    if (querySet) {\n      // Wait a bit before disposing of the queryset, in case some queries are still running for it\n      setTimeout(function () {\n        return querySet.dispose;\n      }, 1000);\n    }\n  };\n\n  WebGPUOcclusionQuery.prototype.dispose = function () {\n    var _a;\n\n    (_a = this._querySet) === null || _a === void 0 ? void 0 : _a.dispose();\n    this._availableIndices = [];\n  };\n\n  return WebGPUOcclusionQuery;\n}();\n\nexport { WebGPUOcclusionQuery };","map":{"version":3,"mappings":"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","names":["WebGPUConstants","WebGPUQuerySet","engine","device","bufferManager","startCount","incrementCount","_engine","_device","_bufferManager","_frameLastBuffer","_currentTotalIndices","_countIncrement","_allocateNewIndices","Object","WebGPUOcclusionQuery","_querySet","querySet","_availableIndices","length","passIndex","_getCurrentRenderPassIndex","_mainRenderPassWrapper","renderPassDescriptor","occlusionQuerySet","undefined","_rttRenderPassWrapper","index","_retrieveQueryBuffer","_lastBuffer","Number","_a","_b","frameId","readValues","then","arrayBuffer","_this","numIndices","_delayQuerySetDispose","i","push","QueryType","Occlusion","setTimeout","dispose"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/WebGPU/webgpuOcclusionQuery.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport type { WebGPUEngine } from \"../webgpuEngine\";\r\nimport type { WebGPUBufferManager } from \"./webgpuBufferManager\";\r\nimport * as WebGPUConstants from \"./webgpuConstants\";\r\nimport { WebGPUQuerySet } from \"./webgpuQuerySet\";\r\n\r\n/** @hidden */\r\nexport class WebGPUOcclusionQuery {\r\n    private _engine: WebGPUEngine;\r\n    private _device: GPUDevice;\r\n    private _bufferManager: WebGPUBufferManager;\r\n\r\n    private _currentTotalIndices: number;\r\n    private _countIncrement: number;\r\n    private _querySet: WebGPUQuerySet;\r\n    private _availableIndices: number[] = [];\r\n    private _lastBuffer: Nullable<BigUint64Array>;\r\n    private _frameLastBuffer: number;\r\n\r\n    public get querySet(): GPUQuerySet {\r\n        return this._querySet.querySet;\r\n    }\r\n\r\n    public get hasQueries(): boolean {\r\n        return this._currentTotalIndices !== this._availableIndices.length;\r\n    }\r\n\r\n    public get canBeginQuery(): boolean {\r\n        const passIndex = this._engine._getCurrentRenderPassIndex();\r\n        switch (passIndex) {\r\n            case 0: {\r\n                return this._engine._mainRenderPassWrapper.renderPassDescriptor!.occlusionQuerySet !== undefined;\r\n            }\r\n            case 1: {\r\n                return this._engine._rttRenderPassWrapper.renderPassDescriptor!.occlusionQuerySet !== undefined;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    constructor(engine: WebGPUEngine, device: GPUDevice, bufferManager: WebGPUBufferManager, startCount = 50, incrementCount = 100) {\r\n        this._engine = engine;\r\n        this._device = device;\r\n        this._bufferManager = bufferManager;\r\n\r\n        this._frameLastBuffer = -1;\r\n        this._currentTotalIndices = 0;\r\n        this._countIncrement = incrementCount;\r\n\r\n        this._allocateNewIndices(startCount);\r\n    }\r\n\r\n    public createQuery(): number {\r\n        if (this._availableIndices.length === 0) {\r\n            this._allocateNewIndices();\r\n        }\r\n\r\n        const index = this._availableIndices[this._availableIndices.length - 1];\r\n        this._availableIndices.length--;\r\n\r\n        return index;\r\n    }\r\n\r\n    public deleteQuery(index: number): void {\r\n        this._availableIndices[this._availableIndices.length - 1] = index;\r\n    }\r\n\r\n    public isQueryResultAvailable(index: number): boolean {\r\n        this._retrieveQueryBuffer();\r\n\r\n        return !!this._lastBuffer && index < this._lastBuffer.length;\r\n    }\r\n\r\n    public getQueryResult(index: number): number {\r\n        return Number(this._lastBuffer?.[index] ?? -1);\r\n    }\r\n\r\n    private _retrieveQueryBuffer(): void {\r\n        if (this._lastBuffer && this._frameLastBuffer === this._engine.frameId) {\r\n            return;\r\n        }\r\n\r\n        if (this._frameLastBuffer !== this._engine.frameId) {\r\n            this._frameLastBuffer = this._engine.frameId;\r\n            this._querySet.readValues(0, this._currentTotalIndices).then((arrayBuffer) => {\r\n                this._lastBuffer = arrayBuffer;\r\n            });\r\n        }\r\n    }\r\n\r\n    private _allocateNewIndices(numIndices?: number): void {\r\n        numIndices = numIndices ?? this._countIncrement;\r\n\r\n        this._delayQuerySetDispose();\r\n\r\n        for (let i = 0; i < numIndices; ++i) {\r\n            this._availableIndices.push(this._currentTotalIndices + i);\r\n        }\r\n\r\n        this._currentTotalIndices += numIndices;\r\n        this._querySet = new WebGPUQuerySet(this._currentTotalIndices, WebGPUConstants.QueryType.Occlusion, this._device, this._bufferManager, false);\r\n    }\r\n\r\n    private _delayQuerySetDispose(): void {\r\n        const querySet = this._querySet;\r\n        if (querySet) {\r\n            // Wait a bit before disposing of the queryset, in case some queries are still running for it\r\n            setTimeout(() => querySet.dispose, 1000);\r\n        }\r\n    }\r\n\r\n    public dispose(): void {\r\n        this._querySet?.dispose();\r\n        this._availableIndices = [];\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}