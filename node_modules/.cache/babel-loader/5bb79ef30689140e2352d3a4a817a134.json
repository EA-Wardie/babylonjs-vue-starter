{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\n/**\n * Block used to output the vertex position\n */\n\nvar VertexOutputBlock =\n/** @class */\nfunction (_super) {\n  __extends(VertexOutputBlock, _super);\n  /**\n   * Creates a new VertexOutputBlock\n   * @param name defines the block name\n   */\n\n\n  function VertexOutputBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Vertex, true) || this;\n\n    _this.registerInput(\"vector\", NodeMaterialBlockConnectionPointTypes.Vector4);\n\n    return _this;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  VertexOutputBlock.prototype.getClassName = function () {\n    return \"VertexOutputBlock\";\n  };\n\n  Object.defineProperty(VertexOutputBlock.prototype, \"vector\", {\n    /**\n     * Gets the vector input component\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  VertexOutputBlock.prototype._isLogarithmicDepthEnabled = function (nodeList) {\n    for (var _i = 0, nodeList_1 = nodeList; _i < nodeList_1.length; _i++) {\n      var node = nodeList_1[_i];\n\n      if (node.useLogarithmicDepth) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  VertexOutputBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var input = this.vector;\n    state.compilationString += \"gl_Position = \".concat(input.associatedVariableName, \";\\r\\n\");\n\n    if (this._isLogarithmicDepthEnabled(state.sharedData.fragmentOutputNodes)) {\n      state._emitUniformFromString(\"logarithmicDepthConstant\", \"float\");\n\n      state._emitVaryingFromString(\"vFragmentDepth\", \"float\");\n\n      state.compilationString += \"vFragmentDepth = 1.0 + gl_Position.w;\\r\\n\";\n      state.compilationString += \"gl_Position.z = log2(max(0.000001, vFragmentDepth)) * logarithmicDepthConstant;\\r\\n\";\n    }\n\n    return this;\n  };\n\n  return VertexOutputBlock;\n}(NodeMaterialBlock);\n\nexport { VertexOutputBlock };\nRegisterClass(\"BABYLON.VertexOutputBlock\", VertexOutputBlock);","map":{"version":3,"mappings":";;AAAA,SAASA,iBAAT,QAAkC,4BAAlC;AACA,SAASC,qCAAT,QAAsD,sDAAtD;AAEA,SAASC,wBAAT,QAAyC,yCAAzC;AAEA,SAASC,aAAT,QAA8B,+BAA9B;AAKA;;;;AAGA;AAAA;AAAA;AAAuCC;AACnC;;;;;;AAIA,6BAAmBC,IAAnB,EAA+B;AAA/B,gBACIC,kBAAMD,IAAN,EAAYH,wBAAwB,CAACK,MAArC,EAA6C,IAA7C,KAAkD,IADtD;;AAGIC,SAAI,CAACC,aAAL,CAAmB,QAAnB,EAA6BR,qCAAqC,CAACS,OAAnE;;;AACH;AAED;;;;;;AAIOC,6CAAP;AACI,WAAO,mBAAP;AACH,GAFM;;AAOPC,wBAAWD,2BAAX,EAAW,QAAX,EAAiB;AAHjB;;;SAGA;AACI,aAAO,KAAKE,OAAL,CAAa,CAAb,CAAP;AACH,KAFgB;qBAAA;;AAAA,GAAjB;;AAIQF,2DAAR,UAAmCG,QAAnC,EAA2E;AACvE,SAAmB,iCAAnB,EAAmBC,sBAAnB,EAAmBA,IAAnB,EAA6B;AAAxB,UAAMC,IAAI,iBAAV;;AACD,UAAKA,IAA4B,CAACC,mBAAlC,EAAuD;AACnD,eAAO,IAAP;AACH;AACJ;;AACD,WAAO,KAAP;AACH,GAPO;;AASEN,4CAAV,UAAsBO,KAAtB,EAAmD;AAC/CZ,qBAAMa,WAAN,CAAiBC,IAAjB,CAAiB,IAAjB,EAAkBF,KAAlB;;AAEA,QAAMG,KAAK,GAAG,KAAKC,MAAnB;AAEAJ,SAAK,CAACK,iBAAN,IAA2B,wBAAiBF,KAAK,CAACG,sBAAvB,EAA6C,OAA7C,CAA3B;;AAEA,QAAI,KAAKC,0BAAL,CAAgCP,KAAK,CAACQ,UAAN,CAAiBC,mBAAjD,CAAJ,EAA2E;AACvET,WAAK,CAACU,sBAAN,CAA6B,0BAA7B,EAAyD,OAAzD;;AACAV,WAAK,CAACW,sBAAN,CAA6B,gBAA7B,EAA+C,OAA/C;;AAEAX,WAAK,CAACK,iBAAN,IAA2B,2CAA3B;AACAL,WAAK,CAACK,iBAAN,IAA2B,qFAA3B;AACH;;AAED,WAAO,IAAP;AACH,GAhBS;;AAiBd;AAAC,CApDD,CAAuCvB,iBAAvC;;;AAsDAG,aAAa,CAAC,2BAAD,EAA8BQ,iBAA9B,CAAb","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","__extends","name","_super","Vertex","_this","registerInput","Vector4","VertexOutputBlock","Object","_inputs","nodeList","_i","node","useLogarithmicDepth","state","_buildBlock","call","input","vector","compilationString","associatedVariableName","_isLogarithmicDepthEnabled","sharedData","fragmentOutputNodes","_emitUniformFromString","_emitVaryingFromString"],"sourceRoot":"","sources":["../../../../../../../../lts/core/generated/Materials/Node/Blocks/Vertex/vertexOutputBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { Immutable } from \"../../../../types\";\r\n\r\ndeclare type FragmentOutputBlock = import(\"../Fragment/fragmentOutputBlock\").FragmentOutputBlock;\r\n\r\n/**\r\n * Block used to output the vertex position\r\n */\r\nexport class VertexOutputBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Creates a new VertexOutputBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Vertex, true);\r\n\r\n        this.registerInput(\"vector\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"VertexOutputBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the vector input component\r\n     */\r\n    public get vector(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    private _isLogarithmicDepthEnabled(nodeList: Immutable<NodeMaterialBlock[]>): boolean {\r\n        for (const node of nodeList) {\r\n            if ((node as FragmentOutputBlock).useLogarithmicDepth) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const input = this.vector;\r\n\r\n        state.compilationString += `gl_Position = ${input.associatedVariableName};\\r\\n`;\r\n\r\n        if (this._isLogarithmicDepthEnabled(state.sharedData.fragmentOutputNodes)) {\r\n            state._emitUniformFromString(\"logarithmicDepthConstant\", \"float\");\r\n            state._emitVaryingFromString(\"vFragmentDepth\", \"float\");\r\n\r\n            state.compilationString += `vFragmentDepth = 1.0 + gl_Position.w;\\r\\n`;\r\n            state.compilationString += `gl_Position.z = log2(max(0.000001, vFragmentDepth)) * logarithmicDepthConstant;\\r\\n`;\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.VertexOutputBlock\", VertexOutputBlock);\r\n"]},"metadata":{},"sourceType":"module"}