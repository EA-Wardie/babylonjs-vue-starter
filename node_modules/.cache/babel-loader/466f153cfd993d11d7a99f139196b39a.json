{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { __extends } from \"tslib\";\nimport { WebXRAbstractMotionController } from \"./webXRAbstractMotionController.js\";\nimport { WebXRMotionControllerManager } from \"./webXRMotionControllerManager.js\";\nimport { Mesh } from \"../../Meshes/mesh.js\";\nimport { Quaternion } from \"../../Maths/math.vector.js\";\nimport { SceneLoader } from \"../../Loading/sceneLoader.js\";\nimport { Logger } from \"../../Misc/logger.js\";\n/**\n * The motion controller class for all microsoft mixed reality controllers\n */\n\nvar WebXRMicrosoftMixedRealityController =\n/** @class */\nfunction (_super) {\n  __extends(WebXRMicrosoftMixedRealityController, _super);\n\n  function WebXRMicrosoftMixedRealityController(scene, gamepadObject, handedness) {\n    var _this = _super.call(this, scene, MixedRealityProfile[\"left-right\"], gamepadObject, handedness) || this; // use this in the future - https://github.com/immersive-web/webxr-input-profiles/tree/master/packages/assets/profiles/microsoft\n\n\n    _this._mapping = {\n      defaultButton: {\n        valueNodeName: \"VALUE\",\n        unpressedNodeName: \"UNPRESSED\",\n        pressedNodeName: \"PRESSED\"\n      },\n      defaultAxis: {\n        valueNodeName: \"VALUE\",\n        minNodeName: \"MIN\",\n        maxNodeName: \"MAX\"\n      },\n      buttons: {\n        \"xr-standard-trigger\": {\n          rootNodeName: \"SELECT\",\n          componentProperty: \"button\",\n          states: [\"default\", \"touched\", \"pressed\"]\n        },\n        \"xr-standard-squeeze\": {\n          rootNodeName: \"GRASP\",\n          componentProperty: \"state\",\n          states: [\"pressed\"]\n        },\n        \"xr-standard-touchpad\": {\n          rootNodeName: \"TOUCHPAD_PRESS\",\n          labelAnchorNodeName: \"squeeze-label\",\n          touchPointNodeName: \"TOUCH\" // TODO - use this for visual feedback\n\n        },\n        \"xr-standard-thumbstick\": {\n          rootNodeName: \"THUMBSTICK_PRESS\",\n          componentProperty: \"state\",\n          states: [\"pressed\"]\n        }\n      },\n      axes: {\n        \"xr-standard-touchpad\": {\n          \"x-axis\": {\n            rootNodeName: \"TOUCHPAD_TOUCH_X\"\n          },\n          \"y-axis\": {\n            rootNodeName: \"TOUCHPAD_TOUCH_Y\"\n          }\n        },\n        \"xr-standard-thumbstick\": {\n          \"x-axis\": {\n            rootNodeName: \"THUMBSTICK_X\"\n          },\n          \"y-axis\": {\n            rootNodeName: \"THUMBSTICK_Y\"\n          }\n        }\n      }\n    };\n    _this.profileId = \"microsoft-mixed-reality\";\n    return _this;\n  }\n\n  WebXRMicrosoftMixedRealityController.prototype._getFilenameAndPath = function () {\n    var filename = \"\";\n\n    if (this.handedness === \"left\") {\n      filename = WebXRMicrosoftMixedRealityController.MODEL_LEFT_FILENAME;\n    } else {\n      // Right is the default if no hand is specified\n      filename = WebXRMicrosoftMixedRealityController.MODEL_RIGHT_FILENAME;\n    }\n\n    var device = \"default\";\n    var path = WebXRMicrosoftMixedRealityController.MODEL_BASE_URL + device + \"/\";\n    return {\n      filename: filename,\n      path: path\n    };\n  };\n\n  WebXRMicrosoftMixedRealityController.prototype._getModelLoadingConstraints = function () {\n    var glbLoaded = SceneLoader.IsPluginForExtensionAvailable(\".glb\");\n\n    if (!glbLoaded) {\n      Logger.Warn(\"glTF / glb loaded was not registered, using generic controller instead\");\n    }\n\n    return glbLoaded;\n  };\n\n  WebXRMicrosoftMixedRealityController.prototype._processLoadedModel = function (_meshes) {\n    var _this = this;\n\n    if (!this.rootMesh) {\n      return;\n    } // Button Meshes\n\n\n    this.getComponentIds().forEach(function (id, i) {\n      if (_this.disableAnimation) {\n        return;\n      }\n\n      if (id && _this.rootMesh) {\n        var buttonMap_1 = _this._mapping.buttons[id];\n        var buttonMeshName = buttonMap_1.rootNodeName;\n\n        if (!buttonMeshName) {\n          Logger.Log(\"Skipping unknown button at index: \" + i + \" with mapped name: \" + id);\n          return;\n        }\n\n        var buttonMesh = _this._getChildByName(_this.rootMesh, buttonMeshName);\n\n        if (!buttonMesh) {\n          Logger.Warn(\"Missing button mesh with name: \" + buttonMeshName);\n          return;\n        }\n\n        buttonMap_1.valueMesh = _this._getImmediateChildByName(buttonMesh, _this._mapping.defaultButton.valueNodeName);\n        buttonMap_1.pressedMesh = _this._getImmediateChildByName(buttonMesh, _this._mapping.defaultButton.pressedNodeName);\n        buttonMap_1.unpressedMesh = _this._getImmediateChildByName(buttonMesh, _this._mapping.defaultButton.unpressedNodeName);\n\n        if (buttonMap_1.valueMesh && buttonMap_1.pressedMesh && buttonMap_1.unpressedMesh) {\n          var comp = _this.getComponent(id);\n\n          if (comp) {\n            comp.onButtonStateChangedObservable.add(function (component) {\n              _this._lerpTransform(buttonMap_1, component.value);\n            }, undefined, true);\n          }\n        } else {\n          // If we didn't find the mesh, it simply means this button won't have transforms applied as mapped button value changes.\n          Logger.Warn(\"Missing button submesh under mesh with name: \" + buttonMeshName);\n        }\n      }\n    }); // Axis Meshes\n\n    this.getComponentIds().forEach(function (id) {\n      var comp = _this.getComponent(id);\n\n      if (!comp.isAxes()) {\n        return;\n      }\n\n      [\"x-axis\", \"y-axis\"].forEach(function (axis) {\n        if (!_this.rootMesh) {\n          return;\n        }\n\n        var axisMap = _this._mapping.axes[id][axis];\n\n        var axisMesh = _this._getChildByName(_this.rootMesh, axisMap.rootNodeName);\n\n        if (!axisMesh) {\n          Logger.Warn(\"Missing axis mesh with name: \" + axisMap.rootNodeName);\n          return;\n        }\n\n        axisMap.valueMesh = _this._getImmediateChildByName(axisMesh, _this._mapping.defaultAxis.valueNodeName);\n        axisMap.minMesh = _this._getImmediateChildByName(axisMesh, _this._mapping.defaultAxis.minNodeName);\n        axisMap.maxMesh = _this._getImmediateChildByName(axisMesh, _this._mapping.defaultAxis.maxNodeName);\n\n        if (axisMap.valueMesh && axisMap.minMesh && axisMap.maxMesh) {\n          if (comp) {\n            comp.onAxisValueChangedObservable.add(function (axisValues) {\n              var value = axis === \"x-axis\" ? axisValues.x : axisValues.y;\n\n              _this._lerpTransform(axisMap, value, true);\n            }, undefined, true);\n          }\n        } else {\n          // If we didn't find the mesh, it simply means this button won't have transforms applied as mapped button value changes.\n          Logger.Warn(\"Missing axis submesh under mesh with name: \" + axisMap.rootNodeName);\n        }\n      });\n    });\n  };\n\n  WebXRMicrosoftMixedRealityController.prototype._setRootMesh = function (meshes) {\n    this.rootMesh = new Mesh(this.profileId + \" \" + this.handedness, this.scene);\n    this.rootMesh.isPickable = false;\n    var rootMesh; // Find the root node in the loaded glTF scene, and attach it as a child of 'parentMesh'\n\n    for (var i = 0; i < meshes.length; i++) {\n      var mesh = meshes[i];\n      mesh.isPickable = false;\n\n      if (!mesh.parent) {\n        // Handle root node, attach to the new parentMesh\n        rootMesh = mesh;\n      }\n    }\n\n    if (rootMesh) {\n      rootMesh.setParent(this.rootMesh);\n    }\n\n    if (!this.scene.useRightHandedSystem) {\n      this.rootMesh.rotationQuaternion = Quaternion.FromEulerAngles(0, Math.PI, 0);\n    }\n  };\n\n  WebXRMicrosoftMixedRealityController.prototype._updateModel = function () {// no-op. model is updated using observables.\n  };\n  /**\n   * The base url used to load the left and right controller models\n   */\n\n\n  WebXRMicrosoftMixedRealityController.MODEL_BASE_URL = \"https://controllers.babylonjs.com/microsoft/\";\n  /**\n   * The name of the left controller model file\n   */\n\n  WebXRMicrosoftMixedRealityController.MODEL_LEFT_FILENAME = \"left.glb\";\n  /**\n   * The name of the right controller model file\n   */\n\n  WebXRMicrosoftMixedRealityController.MODEL_RIGHT_FILENAME = \"right.glb\";\n  return WebXRMicrosoftMixedRealityController;\n}(WebXRAbstractMotionController);\n\nexport { WebXRMicrosoftMixedRealityController }; // register the profile\n\nWebXRMotionControllerManager.RegisterController(\"windows-mixed-reality\", function (xrInput, scene) {\n  return new WebXRMicrosoftMixedRealityController(scene, xrInput.gamepad, xrInput.handedness);\n}); // https://github.com/immersive-web/webxr-input-profiles/blob/master/packages/registry/profiles/microsoft/microsoft-mixed-reality.json\n\nvar MixedRealityProfile = {\n  left: {\n    selectComponentId: \"xr-standard-trigger\",\n    components: {\n      \"xr-standard-trigger\": {\n        type: \"trigger\",\n        gamepadIndices: {\n          button: 0\n        },\n        rootNodeName: \"xr_standard_trigger\",\n        visualResponses: {\n          xr_standard_trigger_pressed: {\n            componentProperty: \"button\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_trigger_pressed_value\",\n            minNodeName: \"xr_standard_trigger_pressed_min\",\n            maxNodeName: \"xr_standard_trigger_pressed_max\"\n          }\n        }\n      },\n      \"xr-standard-squeeze\": {\n        type: \"squeeze\",\n        gamepadIndices: {\n          button: 1\n        },\n        rootNodeName: \"xr_standard_squeeze\",\n        visualResponses: {\n          xr_standard_squeeze_pressed: {\n            componentProperty: \"button\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_squeeze_pressed_value\",\n            minNodeName: \"xr_standard_squeeze_pressed_min\",\n            maxNodeName: \"xr_standard_squeeze_pressed_max\"\n          }\n        }\n      },\n      \"xr-standard-touchpad\": {\n        type: \"touchpad\",\n        gamepadIndices: {\n          button: 2,\n          xAxis: 0,\n          yAxis: 1\n        },\n        rootNodeName: \"xr_standard_touchpad\",\n        visualResponses: {\n          xr_standard_touchpad_pressed: {\n            componentProperty: \"button\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_pressed_value\",\n            minNodeName: \"xr_standard_touchpad_pressed_min\",\n            maxNodeName: \"xr_standard_touchpad_pressed_max\"\n          },\n          xr_standard_touchpad_xaxis_pressed: {\n            componentProperty: \"xAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_xaxis_pressed_value\",\n            minNodeName: \"xr_standard_touchpad_xaxis_pressed_min\",\n            maxNodeName: \"xr_standard_touchpad_xaxis_pressed_max\"\n          },\n          xr_standard_touchpad_yaxis_pressed: {\n            componentProperty: \"yAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_yaxis_pressed_value\",\n            minNodeName: \"xr_standard_touchpad_yaxis_pressed_min\",\n            maxNodeName: \"xr_standard_touchpad_yaxis_pressed_max\"\n          },\n          xr_standard_touchpad_xaxis_touched: {\n            componentProperty: \"xAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_xaxis_touched_value\",\n            minNodeName: \"xr_standard_touchpad_xaxis_touched_min\",\n            maxNodeName: \"xr_standard_touchpad_xaxis_touched_max\"\n          },\n          xr_standard_touchpad_yaxis_touched: {\n            componentProperty: \"yAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_yaxis_touched_value\",\n            minNodeName: \"xr_standard_touchpad_yaxis_touched_min\",\n            maxNodeName: \"xr_standard_touchpad_yaxis_touched_max\"\n          },\n          xr_standard_touchpad_axes_touched: {\n            componentProperty: \"state\",\n            states: [\"touched\", \"pressed\"],\n            valueNodeProperty: \"visibility\",\n            valueNodeName: \"xr_standard_touchpad_axes_touched_value\"\n          }\n        },\n        touchPointNodeName: \"xr_standard_touchpad_axes_touched_value\"\n      },\n      \"xr-standard-thumbstick\": {\n        type: \"thumbstick\",\n        gamepadIndices: {\n          button: 3,\n          xAxis: 2,\n          yAxis: 3\n        },\n        rootNodeName: \"xr_standard_thumbstick\",\n        visualResponses: {\n          xr_standard_thumbstick_pressed: {\n            componentProperty: \"button\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_thumbstick_pressed_value\",\n            minNodeName: \"xr_standard_thumbstick_pressed_min\",\n            maxNodeName: \"xr_standard_thumbstick_pressed_max\"\n          },\n          xr_standard_thumbstick_xaxis_pressed: {\n            componentProperty: \"xAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_thumbstick_xaxis_pressed_value\",\n            minNodeName: \"xr_standard_thumbstick_xaxis_pressed_min\",\n            maxNodeName: \"xr_standard_thumbstick_xaxis_pressed_max\"\n          },\n          xr_standard_thumbstick_yaxis_pressed: {\n            componentProperty: \"yAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_thumbstick_yaxis_pressed_value\",\n            minNodeName: \"xr_standard_thumbstick_yaxis_pressed_min\",\n            maxNodeName: \"xr_standard_thumbstick_yaxis_pressed_max\"\n          }\n        }\n      }\n    },\n    gamepadMapping: \"xr-standard\",\n    rootNodeName: \"microsoft-mixed-reality-left\",\n    assetPath: \"left.glb\"\n  },\n  right: {\n    selectComponentId: \"xr-standard-trigger\",\n    components: {\n      \"xr-standard-trigger\": {\n        type: \"trigger\",\n        gamepadIndices: {\n          button: 0\n        },\n        rootNodeName: \"xr_standard_trigger\",\n        visualResponses: {\n          xr_standard_trigger_pressed: {\n            componentProperty: \"button\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_trigger_pressed_value\",\n            minNodeName: \"xr_standard_trigger_pressed_min\",\n            maxNodeName: \"xr_standard_trigger_pressed_max\"\n          }\n        }\n      },\n      \"xr-standard-squeeze\": {\n        type: \"squeeze\",\n        gamepadIndices: {\n          button: 1\n        },\n        rootNodeName: \"xr_standard_squeeze\",\n        visualResponses: {\n          xr_standard_squeeze_pressed: {\n            componentProperty: \"button\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_squeeze_pressed_value\",\n            minNodeName: \"xr_standard_squeeze_pressed_min\",\n            maxNodeName: \"xr_standard_squeeze_pressed_max\"\n          }\n        }\n      },\n      \"xr-standard-touchpad\": {\n        type: \"touchpad\",\n        gamepadIndices: {\n          button: 2,\n          xAxis: 0,\n          yAxis: 1\n        },\n        rootNodeName: \"xr_standard_touchpad\",\n        visualResponses: {\n          xr_standard_touchpad_pressed: {\n            componentProperty: \"button\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_pressed_value\",\n            minNodeName: \"xr_standard_touchpad_pressed_min\",\n            maxNodeName: \"xr_standard_touchpad_pressed_max\"\n          },\n          xr_standard_touchpad_xaxis_pressed: {\n            componentProperty: \"xAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_xaxis_pressed_value\",\n            minNodeName: \"xr_standard_touchpad_xaxis_pressed_min\",\n            maxNodeName: \"xr_standard_touchpad_xaxis_pressed_max\"\n          },\n          xr_standard_touchpad_yaxis_pressed: {\n            componentProperty: \"yAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_yaxis_pressed_value\",\n            minNodeName: \"xr_standard_touchpad_yaxis_pressed_min\",\n            maxNodeName: \"xr_standard_touchpad_yaxis_pressed_max\"\n          },\n          xr_standard_touchpad_xaxis_touched: {\n            componentProperty: \"xAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_xaxis_touched_value\",\n            minNodeName: \"xr_standard_touchpad_xaxis_touched_min\",\n            maxNodeName: \"xr_standard_touchpad_xaxis_touched_max\"\n          },\n          xr_standard_touchpad_yaxis_touched: {\n            componentProperty: \"yAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_yaxis_touched_value\",\n            minNodeName: \"xr_standard_touchpad_yaxis_touched_min\",\n            maxNodeName: \"xr_standard_touchpad_yaxis_touched_max\"\n          },\n          xr_standard_touchpad_axes_touched: {\n            componentProperty: \"state\",\n            states: [\"touched\", \"pressed\"],\n            valueNodeProperty: \"visibility\",\n            valueNodeName: \"xr_standard_touchpad_axes_touched_value\"\n          }\n        },\n        touchPointNodeName: \"xr_standard_touchpad_axes_touched_value\"\n      },\n      \"xr-standard-thumbstick\": {\n        type: \"thumbstick\",\n        gamepadIndices: {\n          button: 3,\n          xAxis: 2,\n          yAxis: 3\n        },\n        rootNodeName: \"xr_standard_thumbstick\",\n        visualResponses: {\n          xr_standard_thumbstick_pressed: {\n            componentProperty: \"button\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_thumbstick_pressed_value\",\n            minNodeName: \"xr_standard_thumbstick_pressed_min\",\n            maxNodeName: \"xr_standard_thumbstick_pressed_max\"\n          },\n          xr_standard_thumbstick_xaxis_pressed: {\n            componentProperty: \"xAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_thumbstick_xaxis_pressed_value\",\n            minNodeName: \"xr_standard_thumbstick_xaxis_pressed_min\",\n            maxNodeName: \"xr_standard_thumbstick_xaxis_pressed_max\"\n          },\n          xr_standard_thumbstick_yaxis_pressed: {\n            componentProperty: \"yAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_thumbstick_yaxis_pressed_value\",\n            minNodeName: \"xr_standard_thumbstick_yaxis_pressed_min\",\n            maxNodeName: \"xr_standard_thumbstick_yaxis_pressed_max\"\n          }\n        }\n      }\n    },\n    gamepadMapping: \"xr-standard\",\n    rootNodeName: \"microsoft-mixed-reality-right\",\n    assetPath: \"right.glb\"\n  }\n};","map":{"version":3,"mappings":"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","names":["WebXRAbstractMotionController","WebXRMotionControllerManager","Mesh","Quaternion","SceneLoader","Logger","__extends","scene","gamepadObject","handedness","_super","MixedRealityProfile","_this","defaultButton","valueNodeName","unpressedNodeName","pressedNodeName","defaultAxis","minNodeName","maxNodeName","buttons","rootNodeName","componentProperty","states","labelAnchorNodeName","touchPointNodeName","axes","WebXRMicrosoftMixedRealityController","filename","MODEL_LEFT_FILENAME","MODEL_RIGHT_FILENAME","device","path","MODEL_BASE_URL","glbLoaded","IsPluginForExtensionAvailable","Warn","_meshes","rootMesh","getComponentIds","forEach","id","i","disableAnimation","buttonMap_1","_mapping","buttonMeshName","Log","buttonMesh","_getChildByName","valueMesh","_getImmediateChildByName","pressedMesh","unpressedMesh","comp","getComponent","onButtonStateChangedObservable","add","component","_lerpTransform","value","undefined","isAxes","axis","axisMap","axisMesh","minMesh","maxMesh","onAxisValueChangedObservable","axisValues","x","y","meshes","profileId","isPickable","length","mesh","parent","setParent","useRightHandedSystem","rotationQuaternion","FromEulerAngles","Math","PI","RegisterController","xrInput","gamepad","left","selectComponentId","components","type","gamepadIndices","button","visualResponses","xr_standard_trigger_pressed","valueNodeProperty","xr_standard_squeeze_pressed","xAxis","yAxis","xr_standard_touchpad_pressed","xr_standard_touchpad_xaxis_pressed","xr_standard_touchpad_yaxis_pressed","xr_standard_touchpad_xaxis_touched","xr_standard_touchpad_yaxis_touched","xr_standard_touchpad_axes_touched","xr_standard_thumbstick_pressed","xr_standard_thumbstick_xaxis_pressed","xr_standard_thumbstick_yaxis_pressed","gamepadMapping","assetPath","right"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/XR/motionController/webXRMicrosoftMixedRealityController.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { IMinimalMotionControllerObject, MotionControllerHandedness, IMotionControllerLayoutMap } from \"./webXRAbstractMotionController\";\r\nimport { WebXRAbstractMotionController } from \"./webXRAbstractMotionController\";\r\nimport { WebXRMotionControllerManager } from \"./webXRMotionControllerManager\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport { Quaternion } from \"../../Maths/math.vector\";\r\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\r\nimport { Logger } from \"../../Misc/logger\";\r\n\r\n/**\r\n * The motion controller class for all microsoft mixed reality controllers\r\n */\r\nexport class WebXRMicrosoftMixedRealityController extends WebXRAbstractMotionController {\r\n    // use this in the future - https://github.com/immersive-web/webxr-input-profiles/tree/master/packages/assets/profiles/microsoft\r\n    protected readonly _mapping = {\r\n        defaultButton: {\r\n            valueNodeName: \"VALUE\",\r\n            unpressedNodeName: \"UNPRESSED\",\r\n            pressedNodeName: \"PRESSED\",\r\n        },\r\n        defaultAxis: {\r\n            valueNodeName: \"VALUE\",\r\n            minNodeName: \"MIN\",\r\n            maxNodeName: \"MAX\",\r\n        },\r\n        buttons: {\r\n            \"xr-standard-trigger\": {\r\n                rootNodeName: \"SELECT\",\r\n                componentProperty: \"button\",\r\n                states: [\"default\", \"touched\", \"pressed\"],\r\n            },\r\n            \"xr-standard-squeeze\": {\r\n                rootNodeName: \"GRASP\",\r\n                componentProperty: \"state\",\r\n                states: [\"pressed\"],\r\n            },\r\n            \"xr-standard-touchpad\": {\r\n                rootNodeName: \"TOUCHPAD_PRESS\",\r\n                labelAnchorNodeName: \"squeeze-label\",\r\n                touchPointNodeName: \"TOUCH\", // TODO - use this for visual feedback\r\n            },\r\n            \"xr-standard-thumbstick\": {\r\n                rootNodeName: \"THUMBSTICK_PRESS\",\r\n                componentProperty: \"state\",\r\n                states: [\"pressed\"],\r\n            },\r\n        },\r\n        axes: {\r\n            \"xr-standard-touchpad\": {\r\n                \"x-axis\": {\r\n                    rootNodeName: \"TOUCHPAD_TOUCH_X\",\r\n                },\r\n                \"y-axis\": {\r\n                    rootNodeName: \"TOUCHPAD_TOUCH_Y\",\r\n                },\r\n            },\r\n            \"xr-standard-thumbstick\": {\r\n                \"x-axis\": {\r\n                    rootNodeName: \"THUMBSTICK_X\",\r\n                },\r\n                \"y-axis\": {\r\n                    rootNodeName: \"THUMBSTICK_Y\",\r\n                },\r\n            },\r\n        },\r\n    };\r\n\r\n    /**\r\n     * The base url used to load the left and right controller models\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://controllers.babylonjs.com/microsoft/\";\r\n    /**\r\n     * The name of the left controller model file\r\n     */\r\n    public static MODEL_LEFT_FILENAME: string = \"left.glb\";\r\n    /**\r\n     * The name of the right controller model file\r\n     */\r\n    public static MODEL_RIGHT_FILENAME: string = \"right.glb\";\r\n\r\n    public profileId = \"microsoft-mixed-reality\";\r\n\r\n    constructor(scene: Scene, gamepadObject: IMinimalMotionControllerObject, handedness: MotionControllerHandedness) {\r\n        super(scene, MixedRealityProfile[\"left-right\"], gamepadObject, handedness);\r\n    }\r\n\r\n    protected _getFilenameAndPath(): { filename: string; path: string } {\r\n        let filename = \"\";\r\n        if (this.handedness === \"left\") {\r\n            filename = WebXRMicrosoftMixedRealityController.MODEL_LEFT_FILENAME;\r\n        } else {\r\n            // Right is the default if no hand is specified\r\n            filename = WebXRMicrosoftMixedRealityController.MODEL_RIGHT_FILENAME;\r\n        }\r\n\r\n        const device = \"default\";\r\n        const path = WebXRMicrosoftMixedRealityController.MODEL_BASE_URL + device + \"/\";\r\n        return {\r\n            filename,\r\n            path,\r\n        };\r\n    }\r\n\r\n    protected _getModelLoadingConstraints(): boolean {\r\n        const glbLoaded = SceneLoader.IsPluginForExtensionAvailable(\".glb\");\r\n        if (!glbLoaded) {\r\n            Logger.Warn(\"glTF / glb loaded was not registered, using generic controller instead\");\r\n        }\r\n        return glbLoaded;\r\n    }\r\n\r\n    protected _processLoadedModel(_meshes: AbstractMesh[]): void {\r\n        if (!this.rootMesh) {\r\n            return;\r\n        }\r\n\r\n        // Button Meshes\r\n        this.getComponentIds().forEach((id, i) => {\r\n            if (this.disableAnimation) {\r\n                return;\r\n            }\r\n            if (id && this.rootMesh) {\r\n                const buttonMap = (<any>this._mapping.buttons)[id];\r\n                const buttonMeshName = buttonMap.rootNodeName;\r\n                if (!buttonMeshName) {\r\n                    Logger.Log(\"Skipping unknown button at index: \" + i + \" with mapped name: \" + id);\r\n                    return;\r\n                }\r\n\r\n                const buttonMesh = this._getChildByName(this.rootMesh, buttonMeshName);\r\n                if (!buttonMesh) {\r\n                    Logger.Warn(\"Missing button mesh with name: \" + buttonMeshName);\r\n                    return;\r\n                }\r\n\r\n                buttonMap.valueMesh = this._getImmediateChildByName(buttonMesh, this._mapping.defaultButton.valueNodeName);\r\n                buttonMap.pressedMesh = this._getImmediateChildByName(buttonMesh, this._mapping.defaultButton.pressedNodeName);\r\n                buttonMap.unpressedMesh = this._getImmediateChildByName(buttonMesh, this._mapping.defaultButton.unpressedNodeName);\r\n\r\n                if (buttonMap.valueMesh && buttonMap.pressedMesh && buttonMap.unpressedMesh) {\r\n                    const comp = this.getComponent(id);\r\n                    if (comp) {\r\n                        comp.onButtonStateChangedObservable.add(\r\n                            (component) => {\r\n                                this._lerpTransform(buttonMap, component.value);\r\n                            },\r\n                            undefined,\r\n                            true\r\n                        );\r\n                    }\r\n                } else {\r\n                    // If we didn't find the mesh, it simply means this button won't have transforms applied as mapped button value changes.\r\n                    Logger.Warn(\"Missing button submesh under mesh with name: \" + buttonMeshName);\r\n                }\r\n            }\r\n        });\r\n\r\n        // Axis Meshes\r\n        this.getComponentIds().forEach((id) => {\r\n            const comp = this.getComponent(id);\r\n            if (!comp.isAxes()) {\r\n                return;\r\n            }\r\n\r\n            [\"x-axis\", \"y-axis\"].forEach((axis) => {\r\n                if (!this.rootMesh) {\r\n                    return;\r\n                }\r\n                const axisMap = (<any>this._mapping.axes)[id][axis];\r\n\r\n                const axisMesh = this._getChildByName(this.rootMesh, axisMap.rootNodeName);\r\n                if (!axisMesh) {\r\n                    Logger.Warn(\"Missing axis mesh with name: \" + axisMap.rootNodeName);\r\n                    return;\r\n                }\r\n\r\n                axisMap.valueMesh = this._getImmediateChildByName(axisMesh, this._mapping.defaultAxis.valueNodeName);\r\n                axisMap.minMesh = this._getImmediateChildByName(axisMesh, this._mapping.defaultAxis.minNodeName);\r\n                axisMap.maxMesh = this._getImmediateChildByName(axisMesh, this._mapping.defaultAxis.maxNodeName);\r\n\r\n                if (axisMap.valueMesh && axisMap.minMesh && axisMap.maxMesh) {\r\n                    if (comp) {\r\n                        comp.onAxisValueChangedObservable.add(\r\n                            (axisValues) => {\r\n                                const value = axis === \"x-axis\" ? axisValues.x : axisValues.y;\r\n                                this._lerpTransform(axisMap, value, true);\r\n                            },\r\n                            undefined,\r\n                            true\r\n                        );\r\n                    }\r\n                } else {\r\n                    // If we didn't find the mesh, it simply means this button won't have transforms applied as mapped button value changes.\r\n                    Logger.Warn(\"Missing axis submesh under mesh with name: \" + axisMap.rootNodeName);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    protected _setRootMesh(meshes: AbstractMesh[]): void {\r\n        this.rootMesh = new Mesh(this.profileId + \" \" + this.handedness, this.scene);\r\n        this.rootMesh.isPickable = false;\r\n        let rootMesh;\r\n        // Find the root node in the loaded glTF scene, and attach it as a child of 'parentMesh'\r\n        for (let i = 0; i < meshes.length; i++) {\r\n            const mesh = meshes[i];\r\n\r\n            mesh.isPickable = false;\r\n\r\n            if (!mesh.parent) {\r\n                // Handle root node, attach to the new parentMesh\r\n                rootMesh = mesh;\r\n            }\r\n        }\r\n\r\n        if (rootMesh) {\r\n            rootMesh.setParent(this.rootMesh);\r\n        }\r\n\r\n        if (!this.scene.useRightHandedSystem) {\r\n            this.rootMesh.rotationQuaternion = Quaternion.FromEulerAngles(0, Math.PI, 0);\r\n        }\r\n    }\r\n\r\n    protected _updateModel(): void {\r\n        // no-op. model is updated using observables.\r\n    }\r\n}\r\n\r\n// register the profile\r\nWebXRMotionControllerManager.RegisterController(\"windows-mixed-reality\", (xrInput: XRInputSource, scene: Scene) => {\r\n    return new WebXRMicrosoftMixedRealityController(scene, <any>xrInput.gamepad, xrInput.handedness);\r\n});\r\n\r\n// https://github.com/immersive-web/webxr-input-profiles/blob/master/packages/registry/profiles/microsoft/microsoft-mixed-reality.json\r\nconst MixedRealityProfile: IMotionControllerLayoutMap = {\r\n    left: {\r\n        selectComponentId: \"xr-standard-trigger\",\r\n        components: {\r\n            \"xr-standard-trigger\": {\r\n                type: \"trigger\",\r\n                gamepadIndices: {\r\n                    button: 0,\r\n                },\r\n                rootNodeName: \"xr_standard_trigger\",\r\n                visualResponses: {\r\n                    xr_standard_trigger_pressed: {\r\n                        componentProperty: \"button\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_trigger_pressed_value\",\r\n                        minNodeName: \"xr_standard_trigger_pressed_min\",\r\n                        maxNodeName: \"xr_standard_trigger_pressed_max\",\r\n                    },\r\n                },\r\n            },\r\n            \"xr-standard-squeeze\": {\r\n                type: \"squeeze\",\r\n                gamepadIndices: {\r\n                    button: 1,\r\n                },\r\n                rootNodeName: \"xr_standard_squeeze\",\r\n                visualResponses: {\r\n                    xr_standard_squeeze_pressed: {\r\n                        componentProperty: \"button\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_squeeze_pressed_value\",\r\n                        minNodeName: \"xr_standard_squeeze_pressed_min\",\r\n                        maxNodeName: \"xr_standard_squeeze_pressed_max\",\r\n                    },\r\n                },\r\n            },\r\n            \"xr-standard-touchpad\": {\r\n                type: \"touchpad\",\r\n                gamepadIndices: {\r\n                    button: 2,\r\n                    xAxis: 0,\r\n                    yAxis: 1,\r\n                },\r\n                rootNodeName: \"xr_standard_touchpad\",\r\n                visualResponses: {\r\n                    xr_standard_touchpad_pressed: {\r\n                        componentProperty: \"button\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_touchpad_pressed_value\",\r\n                        minNodeName: \"xr_standard_touchpad_pressed_min\",\r\n                        maxNodeName: \"xr_standard_touchpad_pressed_max\",\r\n                    },\r\n                    xr_standard_touchpad_xaxis_pressed: {\r\n                        componentProperty: \"xAxis\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_touchpad_xaxis_pressed_value\",\r\n                        minNodeName: \"xr_standard_touchpad_xaxis_pressed_min\",\r\n                        maxNodeName: \"xr_standard_touchpad_xaxis_pressed_max\",\r\n                    },\r\n                    xr_standard_touchpad_yaxis_pressed: {\r\n                        componentProperty: \"yAxis\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_touchpad_yaxis_pressed_value\",\r\n                        minNodeName: \"xr_standard_touchpad_yaxis_pressed_min\",\r\n                        maxNodeName: \"xr_standard_touchpad_yaxis_pressed_max\",\r\n                    },\r\n                    xr_standard_touchpad_xaxis_touched: {\r\n                        componentProperty: \"xAxis\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_touchpad_xaxis_touched_value\",\r\n                        minNodeName: \"xr_standard_touchpad_xaxis_touched_min\",\r\n                        maxNodeName: \"xr_standard_touchpad_xaxis_touched_max\",\r\n                    },\r\n                    xr_standard_touchpad_yaxis_touched: {\r\n                        componentProperty: \"yAxis\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_touchpad_yaxis_touched_value\",\r\n                        minNodeName: \"xr_standard_touchpad_yaxis_touched_min\",\r\n                        maxNodeName: \"xr_standard_touchpad_yaxis_touched_max\",\r\n                    },\r\n                    xr_standard_touchpad_axes_touched: {\r\n                        componentProperty: \"state\",\r\n                        states: [\"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"visibility\",\r\n                        valueNodeName: \"xr_standard_touchpad_axes_touched_value\",\r\n                    },\r\n                },\r\n                touchPointNodeName: \"xr_standard_touchpad_axes_touched_value\",\r\n            },\r\n            \"xr-standard-thumbstick\": {\r\n                type: \"thumbstick\",\r\n                gamepadIndices: {\r\n                    button: 3,\r\n                    xAxis: 2,\r\n                    yAxis: 3,\r\n                },\r\n                rootNodeName: \"xr_standard_thumbstick\",\r\n                visualResponses: {\r\n                    xr_standard_thumbstick_pressed: {\r\n                        componentProperty: \"button\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_thumbstick_pressed_value\",\r\n                        minNodeName: \"xr_standard_thumbstick_pressed_min\",\r\n                        maxNodeName: \"xr_standard_thumbstick_pressed_max\",\r\n                    },\r\n                    xr_standard_thumbstick_xaxis_pressed: {\r\n                        componentProperty: \"xAxis\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_thumbstick_xaxis_pressed_value\",\r\n                        minNodeName: \"xr_standard_thumbstick_xaxis_pressed_min\",\r\n                        maxNodeName: \"xr_standard_thumbstick_xaxis_pressed_max\",\r\n                    },\r\n                    xr_standard_thumbstick_yaxis_pressed: {\r\n                        componentProperty: \"yAxis\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_thumbstick_yaxis_pressed_value\",\r\n                        minNodeName: \"xr_standard_thumbstick_yaxis_pressed_min\",\r\n                        maxNodeName: \"xr_standard_thumbstick_yaxis_pressed_max\",\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        gamepadMapping: \"xr-standard\",\r\n        rootNodeName: \"microsoft-mixed-reality-left\",\r\n        assetPath: \"left.glb\",\r\n    },\r\n    right: {\r\n        selectComponentId: \"xr-standard-trigger\",\r\n        components: {\r\n            \"xr-standard-trigger\": {\r\n                type: \"trigger\",\r\n                gamepadIndices: {\r\n                    button: 0,\r\n                },\r\n                rootNodeName: \"xr_standard_trigger\",\r\n                visualResponses: {\r\n                    xr_standard_trigger_pressed: {\r\n                        componentProperty: \"button\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_trigger_pressed_value\",\r\n                        minNodeName: \"xr_standard_trigger_pressed_min\",\r\n                        maxNodeName: \"xr_standard_trigger_pressed_max\",\r\n                    },\r\n                },\r\n            },\r\n            \"xr-standard-squeeze\": {\r\n                type: \"squeeze\",\r\n                gamepadIndices: {\r\n                    button: 1,\r\n                },\r\n                rootNodeName: \"xr_standard_squeeze\",\r\n                visualResponses: {\r\n                    xr_standard_squeeze_pressed: {\r\n                        componentProperty: \"button\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_squeeze_pressed_value\",\r\n                        minNodeName: \"xr_standard_squeeze_pressed_min\",\r\n                        maxNodeName: \"xr_standard_squeeze_pressed_max\",\r\n                    },\r\n                },\r\n            },\r\n            \"xr-standard-touchpad\": {\r\n                type: \"touchpad\",\r\n                gamepadIndices: {\r\n                    button: 2,\r\n                    xAxis: 0,\r\n                    yAxis: 1,\r\n                },\r\n                rootNodeName: \"xr_standard_touchpad\",\r\n                visualResponses: {\r\n                    xr_standard_touchpad_pressed: {\r\n                        componentProperty: \"button\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_touchpad_pressed_value\",\r\n                        minNodeName: \"xr_standard_touchpad_pressed_min\",\r\n                        maxNodeName: \"xr_standard_touchpad_pressed_max\",\r\n                    },\r\n                    xr_standard_touchpad_xaxis_pressed: {\r\n                        componentProperty: \"xAxis\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_touchpad_xaxis_pressed_value\",\r\n                        minNodeName: \"xr_standard_touchpad_xaxis_pressed_min\",\r\n                        maxNodeName: \"xr_standard_touchpad_xaxis_pressed_max\",\r\n                    },\r\n                    xr_standard_touchpad_yaxis_pressed: {\r\n                        componentProperty: \"yAxis\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_touchpad_yaxis_pressed_value\",\r\n                        minNodeName: \"xr_standard_touchpad_yaxis_pressed_min\",\r\n                        maxNodeName: \"xr_standard_touchpad_yaxis_pressed_max\",\r\n                    },\r\n                    xr_standard_touchpad_xaxis_touched: {\r\n                        componentProperty: \"xAxis\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_touchpad_xaxis_touched_value\",\r\n                        minNodeName: \"xr_standard_touchpad_xaxis_touched_min\",\r\n                        maxNodeName: \"xr_standard_touchpad_xaxis_touched_max\",\r\n                    },\r\n                    xr_standard_touchpad_yaxis_touched: {\r\n                        componentProperty: \"yAxis\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_touchpad_yaxis_touched_value\",\r\n                        minNodeName: \"xr_standard_touchpad_yaxis_touched_min\",\r\n                        maxNodeName: \"xr_standard_touchpad_yaxis_touched_max\",\r\n                    },\r\n                    xr_standard_touchpad_axes_touched: {\r\n                        componentProperty: \"state\",\r\n                        states: [\"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"visibility\",\r\n                        valueNodeName: \"xr_standard_touchpad_axes_touched_value\",\r\n                    },\r\n                },\r\n                touchPointNodeName: \"xr_standard_touchpad_axes_touched_value\",\r\n            },\r\n            \"xr-standard-thumbstick\": {\r\n                type: \"thumbstick\",\r\n                gamepadIndices: {\r\n                    button: 3,\r\n                    xAxis: 2,\r\n                    yAxis: 3,\r\n                },\r\n                rootNodeName: \"xr_standard_thumbstick\",\r\n                visualResponses: {\r\n                    xr_standard_thumbstick_pressed: {\r\n                        componentProperty: \"button\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_thumbstick_pressed_value\",\r\n                        minNodeName: \"xr_standard_thumbstick_pressed_min\",\r\n                        maxNodeName: \"xr_standard_thumbstick_pressed_max\",\r\n                    },\r\n                    xr_standard_thumbstick_xaxis_pressed: {\r\n                        componentProperty: \"xAxis\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_thumbstick_xaxis_pressed_value\",\r\n                        minNodeName: \"xr_standard_thumbstick_xaxis_pressed_min\",\r\n                        maxNodeName: \"xr_standard_thumbstick_xaxis_pressed_max\",\r\n                    },\r\n                    xr_standard_thumbstick_yaxis_pressed: {\r\n                        componentProperty: \"yAxis\",\r\n                        states: [\"default\", \"touched\", \"pressed\"],\r\n                        valueNodeProperty: \"transform\",\r\n                        valueNodeName: \"xr_standard_thumbstick_yaxis_pressed_value\",\r\n                        minNodeName: \"xr_standard_thumbstick_yaxis_pressed_min\",\r\n                        maxNodeName: \"xr_standard_thumbstick_yaxis_pressed_max\",\r\n                    },\r\n                },\r\n            },\r\n        },\r\n        gamepadMapping: \"xr-standard\",\r\n        rootNodeName: \"microsoft-mixed-reality-right\",\r\n        assetPath: \"right.glb\",\r\n    },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}