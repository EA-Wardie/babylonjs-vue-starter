{"ast":null,"code":"import \"core-js/modules/es.array.is-array.js\";\nimport { GetEnvInfo, UploadEnvLevelsAsync, UploadEnvSpherical } from \"../../../Misc/environmentTextureTools.js\";\nimport { Engine } from \"../../../Engines/engine.js\";\nimport { EndsWith } from \"../../../Misc/stringTools.js\";\n/**\n * Implementation of the ENV Texture Loader.\n * @hidden\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\n\nvar _ENVTextureLoader =\n/** @class */\nfunction () {\n  function _ENVTextureLoader() {\n    /**\n     * Defines whether the loader supports cascade loading the different faces.\n     */\n    this.supportCascades = false;\n  }\n  /**\n   * This returns if the loader support the current file information.\n   * @param extension defines the file extension of the file being loaded\n   * @returns true if the loader can load the specified file\n   */\n\n\n  _ENVTextureLoader.prototype.canLoad = function (extension) {\n    return EndsWith(extension, \".env\");\n  };\n  /**\n   * Uploads the cube texture data to the WebGL texture. It has already been bound.\n   * @param data contains the texture data\n   * @param texture defines the BabylonJS internal texture\n   * @param createPolynomials will be true if polynomials have been requested\n   * @param onLoad defines the callback to trigger once the texture is ready\n   * @param onError defines the callback to trigger in case of error\n   */\n\n\n  _ENVTextureLoader.prototype.loadCubeData = function (data, texture, createPolynomials, onLoad, onError) {\n    if (Array.isArray(data)) {\n      return;\n    }\n\n    var info = GetEnvInfo(data);\n\n    if (info) {\n      texture.width = info.width;\n      texture.height = info.width;\n\n      try {\n        UploadEnvSpherical(texture, info);\n        UploadEnvLevelsAsync(texture, data, info).then(function () {\n          texture.isReady = true;\n          texture.onLoadedObservable.notifyObservers(texture);\n          texture.onLoadedObservable.clear();\n\n          if (onLoad) {\n            onLoad();\n          }\n        }, function (reason) {\n          onError === null || onError === void 0 ? void 0 : onError(\"Can not upload environment levels\", reason);\n        });\n      } catch (e) {\n        onError === null || onError === void 0 ? void 0 : onError(\"Can not upload environment file\", e);\n      }\n    } else if (onError) {\n      onError(\"Can not parse the environment file\", null);\n    }\n  };\n  /**\n   * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n   */\n\n\n  _ENVTextureLoader.prototype.loadData = function () {\n    throw \".env not supported in 2d.\";\n  };\n\n  return _ENVTextureLoader;\n}();\n\nexport { _ENVTextureLoader }; // Register the loader.\n\nEngine._TextureLoaders.push(new _ENVTextureLoader());","map":{"version":3,"mappings":";AAAA,SAASA,UAAT,EAAqBC,oBAArB,EAA2CC,kBAA3C,QAAqE,0CAArE;AAEA,SAASC,MAAT,QAAuB,4BAAvB;AAGA,SAASC,QAAT,QAAyB,8BAAzB;AAEA;;;;AAIA;;AACA;AAAA;AAAA;AAAA;AACI;;;AAGgB,2BAAkB,KAAlB;AAgEnB;AA9DG;;;;;;;AAKOC,wCAAP,UAAeC,SAAf,EAAgC;AAC5B,WAAOF,QAAQ,CAACE,SAAD,EAAY,MAAZ,CAAf;AACH,GAFM;AAIP;;;;;;;;;;AAQOD,6CAAP,UACIE,IADJ,EAEIC,OAFJ,EAGIC,iBAHJ,EAIIC,MAJJ,EAKIC,OALJ,EAKkE;AAE9D,QAAIC,KAAK,CAACC,OAAN,CAAcN,IAAd,CAAJ,EAAyB;AACrB;AACH;;AAED,QAAMO,IAAI,GAAGd,UAAU,CAACO,IAAD,CAAvB;;AACA,QAAIO,IAAJ,EAAU;AACNN,aAAO,CAACO,KAAR,GAAgBD,IAAI,CAACC,KAArB;AACAP,aAAO,CAACQ,MAAR,GAAiBF,IAAI,CAACC,KAAtB;;AAEA,UAAI;AACAb,0BAAkB,CAACM,OAAD,EAAUM,IAAV,CAAlB;AACAb,4BAAoB,CAACO,OAAD,EAAUD,IAAV,EAAgBO,IAAhB,CAApB,CAA0CG,IAA1C,CACI;AACIT,iBAAO,CAACU,OAAR,GAAkB,IAAlB;AACAV,iBAAO,CAACW,kBAAR,CAA2BC,eAA3B,CAA2CZ,OAA3C;AACAA,iBAAO,CAACW,kBAAR,CAA2BE,KAA3B;;AACA,cAAIX,MAAJ,EAAY;AACRA,kBAAM;AACT;AACJ,SARL,EASI,UAACY,MAAD,EAAO;AACHX,iBAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAG,mCAAH,EAAwCW,MAAxC,CAAP;AACH,SAXL;AAaH,OAfD,CAeE,OAAOC,CAAP,EAAU;AACRZ,eAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAG,iCAAH,EAAsCY,CAAtC,CAAP;AACH;AACJ,KAtBD,MAsBO,IAAIZ,OAAJ,EAAa;AAChBA,aAAO,CAAC,oCAAD,EAAuC,IAAvC,CAAP;AACH;AACJ,GArCM;AAuCP;;;;;AAGON,yCAAP;AACI,UAAM,2BAAN;AACH,GAFM;;AAGX;AAAC,CApED;;8BAsEA;;AACAF,MAAM,CAACqB,eAAP,CAAuBC,IAAvB,CAA4B,IAAIpB,iBAAJ,EAA5B","names":["GetEnvInfo","UploadEnvLevelsAsync","UploadEnvSpherical","Engine","EndsWith","_ENVTextureLoader","extension","data","texture","createPolynomials","onLoad","onError","Array","isArray","info","width","height","then","isReady","onLoadedObservable","notifyObservers","clear","reason","e","_TextureLoaders","push"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Textures/Loaders/envTextureLoader.ts"],"sourcesContent":["import { GetEnvInfo, UploadEnvLevelsAsync, UploadEnvSpherical } from \"../../../Misc/environmentTextureTools\";\r\nimport type { Nullable } from \"../../../types\";\r\nimport { Engine } from \"../../../Engines/engine\";\r\nimport type { InternalTexture } from \"../../../Materials/Textures/internalTexture\";\r\nimport type { IInternalTextureLoader } from \"../../../Materials/Textures/internalTextureLoader\";\r\nimport { EndsWith } from \"../../../Misc/stringTools\";\r\n\r\n/**\r\n * Implementation of the ENV Texture Loader.\r\n * @hidden\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class _ENVTextureLoader implements IInternalTextureLoader {\r\n    /**\r\n     * Defines whether the loader supports cascade loading the different faces.\r\n     */\r\n    public readonly supportCascades = false;\r\n\r\n    /**\r\n     * This returns if the loader support the current file information.\r\n     * @param extension defines the file extension of the file being loaded\r\n     * @returns true if the loader can load the specified file\r\n     */\r\n    public canLoad(extension: string): boolean {\r\n        return EndsWith(extension, \".env\");\r\n    }\r\n\r\n    /**\r\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param createPolynomials will be true if polynomials have been requested\r\n     * @param onLoad defines the callback to trigger once the texture is ready\r\n     * @param onError defines the callback to trigger in case of error\r\n     */\r\n    public loadCubeData(\r\n        data: ArrayBufferView | ArrayBufferView[],\r\n        texture: InternalTexture,\r\n        createPolynomials: boolean,\r\n        onLoad: Nullable<(data?: any) => void>,\r\n        onError: Nullable<(message?: string, exception?: any) => void>\r\n    ): void {\r\n        if (Array.isArray(data)) {\r\n            return;\r\n        }\r\n\r\n        const info = GetEnvInfo(data);\r\n        if (info) {\r\n            texture.width = info.width;\r\n            texture.height = info.width;\r\n\r\n            try {\r\n                UploadEnvSpherical(texture, info);\r\n                UploadEnvLevelsAsync(texture, data, info).then(\r\n                    () => {\r\n                        texture.isReady = true;\r\n                        texture.onLoadedObservable.notifyObservers(texture);\r\n                        texture.onLoadedObservable.clear();\r\n                        if (onLoad) {\r\n                            onLoad();\r\n                        }\r\n                    },\r\n                    (reason) => {\r\n                        onError?.(\"Can not upload environment levels\", reason);\r\n                    }\r\n                );\r\n            } catch (e) {\r\n                onError?.(\"Can not upload environment file\", e);\r\n            }\r\n        } else if (onError) {\r\n            onError(\"Can not parse the environment file\", null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\r\n     */\r\n    public loadData(): void {\r\n        throw \".env not supported in 2d.\";\r\n    }\r\n}\r\n\r\n// Register the loader.\r\nEngine._TextureLoaders.push(new _ENVTextureLoader());\r\n"]},"metadata":{},"sourceType":"module"}