{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport { GLTFLoader } from \"../glTFLoader.js\";\nvar NAME = \"ExtrasAsMetadata\";\n/**\n * Store glTF extras (if present) in BJS objects' metadata\n */\n\nvar ExtrasAsMetadata =\n/** @class */\nfunction () {\n  /**\n   * @param loader\n   * @hidden\n   */\n  function ExtrasAsMetadata(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    /**\n     * Defines whether this extension is enabled.\n     */\n\n    this.enabled = true;\n    this._loader = loader;\n  }\n\n  ExtrasAsMetadata.prototype._assignExtras = function (babylonObject, gltfProp) {\n    if (gltfProp.extras && Object.keys(gltfProp.extras).length > 0) {\n      var metadata = babylonObject.metadata = babylonObject.metadata || {};\n      var gltf = metadata.gltf = metadata.gltf || {};\n      gltf.extras = gltfProp.extras;\n    }\n  };\n  /** @hidden */\n\n\n  ExtrasAsMetadata.prototype.dispose = function () {\n    this._loader = null;\n  };\n  /**\n   * @param context\n   * @param node\n   * @param assign\n   * @hidden\n   */\n\n\n  ExtrasAsMetadata.prototype.loadNodeAsync = function (context, node, assign) {\n    var _this = this;\n\n    return this._loader.loadNodeAsync(context, node, function (babylonTransformNode) {\n      _this._assignExtras(babylonTransformNode, node);\n\n      assign(babylonTransformNode);\n    });\n  };\n  /**\n   * @param context\n   * @param camera\n   * @param assign\n   * @hidden\n   */\n\n\n  ExtrasAsMetadata.prototype.loadCameraAsync = function (context, camera, assign) {\n    var _this = this;\n\n    return this._loader.loadCameraAsync(context, camera, function (babylonCamera) {\n      _this._assignExtras(babylonCamera, camera);\n\n      assign(babylonCamera);\n    });\n  };\n  /**\n   * @param context\n   * @param material\n   * @param babylonDrawMode\n   * @hidden\n   */\n\n\n  ExtrasAsMetadata.prototype.createMaterial = function (context, material, babylonDrawMode) {\n    var babylonMaterial = this._loader.createMaterial(context, material, babylonDrawMode);\n\n    this._assignExtras(babylonMaterial, material);\n\n    return babylonMaterial;\n  };\n\n  return ExtrasAsMetadata;\n}();\n\nexport { ExtrasAsMetadata };\nGLTFLoader.RegisterExtension(NAME, function (loader) {\n  return new ExtrasAsMetadata(loader);\n});","map":{"version":3,"mappings":";;AAOA,SAASA,UAAT,QAA2B,kBAA3B;AAGA,IAAMC,IAAI,GAAG,kBAAb;AAMA;;;;AAGA;AAAA;AAAA;AAqBI;;;;AAIA,4BAAmBC,MAAnB,EAAqC;AAxBrC;;;AAGgB,gBAAOD,IAAP;AAEhB;;;;AAGO,mBAAU,IAAV;AAiBH,SAAKE,OAAL,GAAeD,MAAf;AACH;;AAdOE,6CAAR,UAAsBC,aAAtB,EAAyDC,QAAzD,EAA4E;AACxE,QAAIA,QAAQ,CAACC,MAAT,IAAmBC,MAAM,CAACC,IAAP,CAAYH,QAAQ,CAACC,MAArB,EAA6BG,MAA7B,GAAsC,CAA7D,EAAgE;AAC5D,UAAMC,QAAQ,GAAIN,aAAa,CAACM,QAAd,GAAyBN,aAAa,CAACM,QAAd,IAA0B,EAArE;AACA,UAAMC,IAAI,GAAID,QAAQ,CAACC,IAAT,GAAgBD,QAAQ,CAACC,IAAT,IAAiB,EAA/C;AACAA,UAAI,CAACL,MAAL,GAAcD,QAAQ,CAACC,MAAvB;AACH;AACJ,GANO;AAgBR;;;AACOH,uCAAP;AACK,SAAKD,OAAL,GAAuB,IAAvB;AACJ,GAFM;AAIP;;;;;;;;AAMOC,6CAAP,UAAqBS,OAArB,EAAsCC,IAAtC,EAAmDC,MAAnD,EAAwG;AAAxG;;AACI,WAAO,KAAKZ,OAAL,CAAaa,aAAb,CAA2BH,OAA3B,EAAoCC,IAApC,EAA0C,UAACG,oBAAD,EAAqB;AAClEC,WAAI,CAACC,aAAL,CAAmBF,oBAAnB,EAAyCH,IAAzC;;AACAC,YAAM,CAACE,oBAAD,CAAN;AACH,KAHM,CAAP;AAIH,GALM;AAOP;;;;;;;;AAMOb,+CAAP,UAAuBS,OAAvB,EAAwCO,MAAxC,EAAyDL,MAAzD,EAAgG;AAAhG;;AACI,WAAO,KAAKZ,OAAL,CAAakB,eAAb,CAA6BR,OAA7B,EAAsCO,MAAtC,EAA8C,UAACE,aAAD,EAAc;AAC/DJ,WAAI,CAACC,aAAL,CAAmBG,aAAnB,EAAkCF,MAAlC;;AACAL,YAAM,CAACO,aAAD,CAAN;AACH,KAHM,CAAP;AAIH,GALM;AAOP;;;;;;;;AAMOlB,8CAAP,UAAsBS,OAAtB,EAAuCU,QAAvC,EAA4DC,eAA5D,EAAmF;AAC/E,QAAMC,eAAe,GAAG,KAAKtB,OAAL,CAAauB,cAAb,CAA4Bb,OAA5B,EAAqCU,QAArC,EAA+CC,eAA/C,CAAxB;;AACA,SAAKL,aAAL,CAAmBM,eAAnB,EAAoCF,QAApC;;AACA,WAAOE,eAAP;AACH,GAJM;;AAKX;AAAC,CAvED;;;AAyEAzB,UAAU,CAAC2B,iBAAX,CAA6B1B,IAA7B,EAAmC,UAACC,MAAD,EAAO;AAA2B,aAAIE,gBAAJ,CAAqBF,MAArB;AAA4B,CAAjG","names":["GLTFLoader","NAME","loader","_loader","ExtrasAsMetadata","babylonObject","gltfProp","extras","Object","keys","length","metadata","gltf","context","node","assign","loadNodeAsync","babylonTransformNode","_this","_assignExtras","camera","loadCameraAsync","babylonCamera","material","babylonDrawMode","babylonMaterial","createMaterial","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../../lts/loaders/generated/glTF/2.0/Extensions/ExtrasAsMetadata.ts"],"sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport type { TransformNode } from \"core/Meshes/transformNode\";\r\nimport type { Camera } from \"core/Cameras/camera\";\r\n\r\nimport type { IProperty } from \"babylonjs-gltf2interface\";\r\nimport type { INode, ICamera, IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nconst NAME = \"ExtrasAsMetadata\";\r\n\r\ninterface ObjectWithMetadata {\r\n    metadata: any;\r\n}\r\n\r\n/**\r\n * Store glTF extras (if present) in BJS objects' metadata\r\n */\r\nexport class ExtrasAsMetadata implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled = true;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    private _assignExtras(babylonObject: ObjectWithMetadata, gltfProp: IProperty): void {\r\n        if (gltfProp.extras && Object.keys(gltfProp.extras).length > 0) {\r\n            const metadata = (babylonObject.metadata = babylonObject.metadata || {});\r\n            const gltf = (metadata.gltf = metadata.gltf || {});\r\n            gltf.extras = gltfProp.extras;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param loader\r\n     * @hidden\r\n     */\r\n    public constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n    }\r\n\r\n    /** @hidden */\r\n    public dispose(): void {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @param context\r\n     * @param node\r\n     * @param assign\r\n     * @hidden\r\n     */\r\n    public loadNodeAsync(context: string, node: INode, assign: (babylonTransformNode: TransformNode) => void): Nullable<Promise<TransformNode>> {\r\n        return this._loader.loadNodeAsync(context, node, (babylonTransformNode): void => {\r\n            this._assignExtras(babylonTransformNode, node);\r\n            assign(babylonTransformNode);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param context\r\n     * @param camera\r\n     * @param assign\r\n     * @hidden\r\n     */\r\n    public loadCameraAsync(context: string, camera: ICamera, assign: (babylonCamera: Camera) => void): Nullable<Promise<Camera>> {\r\n        return this._loader.loadCameraAsync(context, camera, (babylonCamera): void => {\r\n            this._assignExtras(babylonCamera, camera);\r\n            assign(babylonCamera);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param context\r\n     * @param material\r\n     * @param babylonDrawMode\r\n     * @hidden\r\n     */\r\n    public createMaterial(context: string, material: IMaterial, babylonDrawMode: number): Nullable<Material> {\r\n        const babylonMaterial = this._loader.createMaterial(context, material, babylonDrawMode);\r\n        this._assignExtras(babylonMaterial, material);\r\n        return babylonMaterial;\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader): IGLTFLoaderExtension => new ExtrasAsMetadata(loader));\r\n"]},"metadata":{},"sourceType":"module"}