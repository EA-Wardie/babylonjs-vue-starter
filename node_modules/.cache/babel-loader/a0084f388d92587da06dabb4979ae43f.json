{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.reverse.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport { __extends } from \"tslib\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { Quaternion, Matrix, Vector3, TmpVectors } from \"../../Maths/math.vector.js\";\nimport { Ray } from \"../../Culling/ray.js\";\nimport { EngineStore } from \"../../Engines/engineStore.js\";\nimport { Gamepad } from \"../../Gamepads/gamepad.js\";\n/**\n * Defines the types of pose enabled controllers that are supported\n */\n\nexport var PoseEnabledControllerType;\n\n(function (PoseEnabledControllerType) {\n  /**\n   * HTC Vive\n   */\n  PoseEnabledControllerType[PoseEnabledControllerType[\"VIVE\"] = 0] = \"VIVE\";\n  /**\n   * Oculus Rift\n   */\n\n  PoseEnabledControllerType[PoseEnabledControllerType[\"OCULUS\"] = 1] = \"OCULUS\";\n  /**\n   * Windows mixed reality\n   */\n\n  PoseEnabledControllerType[PoseEnabledControllerType[\"WINDOWS\"] = 2] = \"WINDOWS\";\n  /**\n   * Samsung gear VR\n   */\n\n  PoseEnabledControllerType[PoseEnabledControllerType[\"GEAR_VR\"] = 3] = \"GEAR_VR\";\n  /**\n   * Google Daydream\n   */\n\n  PoseEnabledControllerType[PoseEnabledControllerType[\"DAYDREAM\"] = 4] = \"DAYDREAM\";\n  /**\n   * Generic\n   */\n\n  PoseEnabledControllerType[PoseEnabledControllerType[\"GENERIC\"] = 5] = \"GENERIC\";\n})(PoseEnabledControllerType || (PoseEnabledControllerType = {}));\n/**\n * Defines the PoseEnabledControllerHelper object that is used initialize a gamepad as the controller type it is specified as (eg. windows mixed reality controller)\n */\n\n\nvar PoseEnabledControllerHelper =\n/** @class */\nfunction () {\n  function PoseEnabledControllerHelper() {}\n  /**\n   * Initializes a gamepad as the controller type it is specified as (eg. windows mixed reality controller)\n   * @param vrGamepad the gamepad to initialized\n   * @returns a vr controller of the type the gamepad identified as\n   */\n\n\n  PoseEnabledControllerHelper.InitiateController = function (vrGamepad) {\n    for (var _i = 0, _a = this._ControllerFactories; _i < _a.length; _i++) {\n      var factory = _a[_i];\n\n      if (factory.canCreate(vrGamepad)) {\n        return factory.create(vrGamepad);\n      }\n    }\n\n    if (this._DefaultControllerFactory) {\n      return this._DefaultControllerFactory(vrGamepad);\n    }\n\n    throw \"The type of gamepad you are trying to load needs to be imported first or is not supported.\";\n  };\n  /** @hidden */\n\n\n  PoseEnabledControllerHelper._ControllerFactories = [];\n  /** @hidden */\n\n  PoseEnabledControllerHelper._DefaultControllerFactory = null;\n  return PoseEnabledControllerHelper;\n}();\n\nexport { PoseEnabledControllerHelper };\n/**\n * Defines the PoseEnabledController object that contains state of a vr capable controller\n */\n\nvar PoseEnabledController =\n/** @class */\nfunction (_super) {\n  __extends(PoseEnabledController, _super);\n  /**\n   * Creates a new PoseEnabledController from a gamepad\n   * @param browserGamepad the gamepad that the PoseEnabledController should be created from\n   */\n\n\n  function PoseEnabledController(browserGamepad) {\n    var _this = _super.call(this, browserGamepad.id, browserGamepad.index, browserGamepad) || this;\n    /**\n     * If the controller is used in a webXR session\n     */\n\n\n    _this.isXR = false; // Represents device position and rotation in room space. Should only be used to help calculate babylon space values\n\n    _this._deviceRoomPosition = Vector3.Zero();\n    _this._deviceRoomRotationQuaternion = new Quaternion();\n    /**\n     * The device position in babylon space\n     */\n\n    _this.devicePosition = Vector3.Zero();\n    /**\n     * The device rotation in babylon space\n     */\n\n    _this.deviceRotationQuaternion = new Quaternion();\n    /**\n     * The scale factor of the device in babylon space\n     */\n\n    _this.deviceScaleFactor = 1; // Used to convert 6dof controllers to 3dof\n\n    _this._trackPosition = true;\n    _this._maxRotationDistFromHeadset = Math.PI / 5;\n    _this._draggedRoomRotation = 0;\n    _this._leftHandSystemQuaternion = new Quaternion();\n    /**\n     * Internal, matrix used to convert room space to babylon space\n     * @hidden\n     */\n\n    _this._deviceToWorld = Matrix.Identity();\n    /**\n     * Node to be used when casting a ray from the controller\n     * @hidden\n     */\n\n    _this._pointingPoseNode = null;\n    _this._workingMatrix = Matrix.Identity();\n    /**\n     * @hidden\n     */\n\n    _this._meshAttachedObservable = new Observable();\n    _this.type = Gamepad.POSE_ENABLED;\n    _this.controllerType = PoseEnabledControllerType.GENERIC;\n    _this.position = Vector3.Zero();\n    _this.rotationQuaternion = new Quaternion();\n    _this._calculatedPosition = Vector3.Zero();\n    _this._calculatedRotation = new Quaternion();\n    Quaternion.RotationYawPitchRollToRef(Math.PI, 0, 0, _this._leftHandSystemQuaternion);\n    return _this;\n  }\n  /**\n   * @param fixedPosition\n   * @hidden\n   */\n\n\n  PoseEnabledController.prototype._disableTrackPosition = function (fixedPosition) {\n    if (this._trackPosition) {\n      this._calculatedPosition.copyFrom(fixedPosition);\n\n      this._trackPosition = false;\n    }\n  };\n  /**\n   * Updates the state of the pose enabled controller and mesh based on the current position and rotation of the controller\n   */\n\n\n  PoseEnabledController.prototype.update = function () {\n    _super.prototype.update.call(this);\n\n    this._updatePoseAndMesh();\n  };\n  /**\n   * Updates only the pose device and mesh without doing any button event checking\n   */\n\n\n  PoseEnabledController.prototype._updatePoseAndMesh = function () {\n    if (this.isXR) {\n      return;\n    }\n\n    var pose = this.browserGamepad.pose;\n    this.updateFromDevice(pose);\n\n    if (!this._trackPosition && EngineStore.LastCreatedScene && EngineStore.LastCreatedScene.activeCamera && EngineStore.LastCreatedScene.activeCamera.devicePosition) {\n      var camera = EngineStore.LastCreatedScene.activeCamera;\n\n      camera._computeDevicePosition();\n\n      this._deviceToWorld.setTranslation(camera.devicePosition);\n\n      if (camera.deviceRotationQuaternion) {\n        camera._deviceRoomRotationQuaternion.toEulerAnglesToRef(TmpVectors.Vector3[0]); // Find the radian distance away that the headset is from the controllers rotation\n\n\n        var distanceAway = Math.atan2(Math.sin(TmpVectors.Vector3[0].y - this._draggedRoomRotation), Math.cos(TmpVectors.Vector3[0].y - this._draggedRoomRotation));\n\n        if (Math.abs(distanceAway) > this._maxRotationDistFromHeadset) {\n          // Only rotate enouph to be within the _maxRotationDistFromHeadset\n          var rotationAmount = distanceAway - (distanceAway < 0 ? -this._maxRotationDistFromHeadset : this._maxRotationDistFromHeadset);\n          this._draggedRoomRotation += rotationAmount; // Rotate controller around headset\n\n          var sin = Math.sin(-rotationAmount);\n          var cos = Math.cos(-rotationAmount);\n          this._calculatedPosition.x = this._calculatedPosition.x * cos - this._calculatedPosition.z * sin;\n          this._calculatedPosition.z = this._calculatedPosition.x * sin + this._calculatedPosition.z * cos;\n        }\n      }\n    }\n\n    Vector3.TransformCoordinatesToRef(this._calculatedPosition, this._deviceToWorld, this.devicePosition);\n\n    this._deviceToWorld.getRotationMatrixToRef(this._workingMatrix);\n\n    Quaternion.FromRotationMatrixToRef(this._workingMatrix, this.deviceRotationQuaternion);\n    this.deviceRotationQuaternion.multiplyInPlace(this._calculatedRotation);\n\n    if (this._mesh) {\n      this._mesh.position.copyFrom(this.devicePosition);\n\n      if (this._mesh.rotationQuaternion) {\n        this._mesh.rotationQuaternion.copyFrom(this.deviceRotationQuaternion);\n      }\n    }\n  };\n  /**\n   * Updates the state of the pose enbaled controller based on the raw pose data from the device\n   * @param poseData raw pose fromthe device\n   */\n\n\n  PoseEnabledController.prototype.updateFromDevice = function (poseData) {\n    if (this.isXR) {\n      return;\n    }\n\n    if (poseData) {\n      this.rawPose = poseData;\n\n      if (poseData.position) {\n        this._deviceRoomPosition.copyFromFloats(poseData.position[0], poseData.position[1], -poseData.position[2]);\n\n        if (this._mesh && this._mesh.getScene().useRightHandedSystem) {\n          this._deviceRoomPosition.z *= -1;\n        }\n\n        if (this._trackPosition) {\n          this._deviceRoomPosition.scaleToRef(this.deviceScaleFactor, this._calculatedPosition);\n        }\n\n        this._calculatedPosition.addInPlace(this.position);\n      }\n\n      var pose = this.rawPose;\n\n      if (poseData.orientation && pose.orientation && pose.orientation.length === 4) {\n        this._deviceRoomRotationQuaternion.copyFromFloats(pose.orientation[0], pose.orientation[1], -pose.orientation[2], -pose.orientation[3]);\n\n        if (this._mesh) {\n          if (this._mesh.getScene().useRightHandedSystem) {\n            this._deviceRoomRotationQuaternion.z *= -1;\n            this._deviceRoomRotationQuaternion.w *= -1;\n          } else {\n            this._deviceRoomRotationQuaternion.multiplyToRef(this._leftHandSystemQuaternion, this._deviceRoomRotationQuaternion);\n          }\n        } // if the camera is set, rotate to the camera's rotation\n\n\n        this._deviceRoomRotationQuaternion.multiplyToRef(this.rotationQuaternion, this._calculatedRotation);\n      }\n    }\n  };\n  /**\n   * Attaches a mesh to the controller\n   * @param mesh the mesh to be attached\n   */\n\n\n  PoseEnabledController.prototype.attachToMesh = function (mesh) {\n    if (this._mesh) {\n      this._mesh.parent = null;\n    }\n\n    this._mesh = mesh;\n\n    if (this._poseControlledCamera) {\n      this._mesh.parent = this._poseControlledCamera;\n    }\n\n    if (!this._mesh.rotationQuaternion) {\n      this._mesh.rotationQuaternion = new Quaternion();\n    } // Sync controller mesh and pointing pose node's state with controller, this is done to avoid a frame where position is 0,0,0 when attaching mesh\n\n\n    if (!this.isXR) {\n      this._updatePoseAndMesh();\n\n      if (this._pointingPoseNode) {\n        var parents = [];\n        var obj = this._pointingPoseNode;\n\n        while (obj.parent) {\n          parents.push(obj.parent);\n          obj = obj.parent;\n        }\n\n        parents.reverse().forEach(function (p) {\n          p.computeWorldMatrix(true);\n        });\n      }\n    }\n\n    this._meshAttachedObservable.notifyObservers(mesh);\n  };\n  /**\n   * Attaches the controllers mesh to a camera\n   * @param camera the camera the mesh should be attached to\n   */\n\n\n  PoseEnabledController.prototype.attachToPoseControlledCamera = function (camera) {\n    this._poseControlledCamera = camera;\n\n    if (this._mesh) {\n      this._mesh.parent = this._poseControlledCamera;\n    }\n  };\n  /**\n   * Disposes of the controller\n   */\n\n\n  PoseEnabledController.prototype.dispose = function () {\n    if (this._mesh) {\n      this._mesh.dispose();\n    }\n\n    this._mesh = null;\n\n    _super.prototype.dispose.call(this);\n  };\n\n  Object.defineProperty(PoseEnabledController.prototype, \"mesh\", {\n    /**\n     * The mesh that is attached to the controller\n     */\n    get: function get() {\n      return this._mesh;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Gets the ray of the controller in the direction the controller is pointing\n   * @param length the length the resulting ray should be\n   * @returns a ray in the direction the controller is pointing\n   */\n\n  PoseEnabledController.prototype.getForwardRay = function (length) {\n    if (length === void 0) {\n      length = 100;\n    }\n\n    if (!this.mesh) {\n      return new Ray(Vector3.Zero(), new Vector3(0, 0, 1), length);\n    }\n\n    var m = this._pointingPoseNode ? this._pointingPoseNode.getWorldMatrix() : this.mesh.getWorldMatrix();\n    var origin = m.getTranslation();\n    var forward = new Vector3(0, 0, -1);\n    var forwardWorld = Vector3.TransformNormal(forward, m);\n    var direction = Vector3.Normalize(forwardWorld);\n    return new Ray(origin, direction, length);\n  };\n  /**\n   * Name of the child mesh that can be used to cast a ray from the controller\n   */\n\n\n  PoseEnabledController.POINTING_POSE = \"POINTING_POSE\";\n  return PoseEnabledController;\n}(Gamepad);\n\nexport { PoseEnabledController };","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,UAAT,QAA2B,0BAA3B;AAEA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,OAA7B,EAAsCC,UAAtC,QAAwD,4BAAxD;AAIA,SAASC,GAAT,QAAoB,sBAApB;AACA,SAASC,WAAT,QAA4B,8BAA5B;AAEA,SAASC,OAAT,QAAwB,2BAAxB;AAIA;;;;AAGA,WAAYC,yBAAZ;;AAAA,WAAYA,yBAAZ,EAAqC;AACjC;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACH,CAzBD,EAAYA,yBAAyB,KAAzBA,yBAAyB,MAArC;AAkFA;;;;;AAGA;AAAA;AAAA;AAAA,0CAyBC;AAlBG;;;;;;;AAKcC,mDAAd,UAAiCC,SAAjC,EAA+C;AAC3C,SAAsB,sBAAKC,oBAA3B,EAAsBC,cAAtB,EAAsBA,IAAtB,EAAiD;AAA5C,UAAMC,OAAO,SAAb;;AACD,UAAIA,OAAO,CAACC,SAAR,CAAkBJ,SAAlB,CAAJ,EAAkC;AAC9B,eAAOG,OAAO,CAACE,MAAR,CAAeL,SAAf,CAAP;AACH;AACJ;;AAED,QAAI,KAAKM,yBAAT,EAAoC;AAChC,aAAO,KAAKA,yBAAL,CAA+BN,SAA/B,CAAP;AACH;;AAED,UAAM,4FAAN;AACH,GAZa;AAXd;;;AACcD,qDAA0C,EAA1C;AAEd;;AACcA,0DAAqE,IAArE;AAoBlB;AAAC,CAzBD;;SAAaA;AA2Bb;;;;AAGA;AAAA;AAAA;AAA2CQ;AAkFvC;;;;;;AAIA,iCAAYC,cAAZ,EAA+B;AAA/B,gBACIC,kBAAMD,cAAc,CAACE,EAArB,EAAyBF,cAAc,CAACG,KAAxC,EAA+CH,cAA/C,KAA8D,IADlE;AArFA;;;;;AAGOI,iBAAO,KAAP,CAkFwB,CAjF/B;;AACQA,gCAAsBnB,OAAO,CAACoB,IAAR,EAAtB;AACAD,0CAAgC,IAAIrB,UAAJ,EAAhC;AAER;;;;AAGOqB,2BAAiBnB,OAAO,CAACoB,IAAR,EAAjB;AACP;;;;AAGOD,qCAA2B,IAAIrB,UAAJ,EAA3B;AACP;;;;AAGOqB,8BAA4B,CAA5B,CAkEwB,CA3C/B;;AACQA,2BAAiB,IAAjB;AACAA,wCAA8BE,IAAI,CAACC,EAAL,GAAU,CAAxC;AACAH,iCAAuB,CAAvB;AAmBAA,sCAAwC,IAAIrB,UAAJ,EAAxC;AAER;;;;;AAIOqB,2BAAiBpB,MAAM,CAACwB,QAAP,EAAjB;AAEP;;;;;AAIOJ,8BAA6C,IAA7C;AAqBCA,2BAAiBpB,MAAM,CAACwB,QAAP,EAAjB;AAoGR;;;;AAGOJ,oCAA0B,IAAItB,UAAJ,EAA1B;AAjHHsB,SAAI,CAACK,IAAL,GAAYpB,OAAO,CAACqB,YAApB;AACAN,SAAI,CAACO,cAAL,GAAsBrB,yBAAyB,CAACsB,OAAhD;AACAR,SAAI,CAACS,QAAL,GAAgB5B,OAAO,CAACoB,IAAR,EAAhB;AACAD,SAAI,CAACU,kBAAL,GAA0B,IAAI/B,UAAJ,EAA1B;AAEAqB,SAAI,CAACW,mBAAL,GAA2B9B,OAAO,CAACoB,IAAR,EAA3B;AACAD,SAAI,CAACY,mBAAL,GAA2B,IAAIjC,UAAJ,EAA3B;AACAA,cAAU,CAACkC,yBAAX,CAAqCX,IAAI,CAACC,EAA1C,EAA8C,CAA9C,EAAiD,CAAjD,EAAoDH,KAAI,CAACc,yBAAzD;;AACH;AAjDD;;;;;;AAIOC,0DAAP,UAA6BC,aAA7B,EAAmD;AAC/C,QAAI,KAAKC,cAAT,EAAyB;AACrB,WAAKN,mBAAL,CAAyBO,QAAzB,CAAkCF,aAAlC;;AACA,WAAKC,cAAL,GAAsB,KAAtB;AACH;AACJ,GALM;AAgDP;;;;;AAGOF,2CAAP;AACIlB,qBAAMsB,MAAN,CAAYC,IAAZ,CAAY,IAAZ;;AACA,SAAKC,kBAAL;AACH,GAHM;AAKP;;;;;AAGUN,uDAAV;AACI,QAAI,KAAKO,IAAT,EAAe;AACX;AACH;;AACD,QAAMC,IAAI,GAAe,KAAK3B,cAAL,CAAoB2B,IAA7C;AACA,SAAKC,gBAAL,CAAsBD,IAAtB;;AAEA,QACI,CAAC,KAAKN,cAAN,IACAjC,WAAW,CAACyC,gBADZ,IAEAzC,WAAW,CAACyC,gBAAZ,CAA6BC,YAF7B,IAGkB1C,WAAW,CAACyC,gBAAZ,CAA6BC,YAA7B,CAA2CC,cAJjE,EAKE;AACE,UAAMC,MAAM,GAAoB5C,WAAW,CAACyC,gBAAZ,CAA6BC,YAA7D;;AACAE,YAAM,CAACC,sBAAP;;AAEA,WAAKC,cAAL,CAAoBC,cAApB,CAAmCH,MAAM,CAACD,cAA1C;;AACA,UAAIC,MAAM,CAACI,wBAAX,EAAqC;AACjCJ,cAAM,CAACK,6BAAP,CAAqCC,kBAArC,CAAwDpD,UAAU,CAACD,OAAX,CAAmB,CAAnB,CAAxD,EADiC,CAGjC;;;AACA,YAAMsD,YAAY,GAAGjC,IAAI,CAACkC,KAAL,CAAWlC,IAAI,CAACmC,GAAL,CAASvD,UAAU,CAACD,OAAX,CAAmB,CAAnB,EAAsByD,CAAtB,GAA0B,KAAKC,oBAAxC,CAAX,EAA0ErC,IAAI,CAACsC,GAAL,CAAS1D,UAAU,CAACD,OAAX,CAAmB,CAAnB,EAAsByD,CAAtB,GAA0B,KAAKC,oBAAxC,CAA1E,CAArB;;AACA,YAAIrC,IAAI,CAACuC,GAAL,CAASN,YAAT,IAAyB,KAAKO,2BAAlC,EAA+D;AAC3D;AACA,cAAMC,cAAc,GAAGR,YAAY,IAAIA,YAAY,GAAG,CAAf,GAAmB,CAAC,KAAKO,2BAAzB,GAAuD,KAAKA,2BAAhE,CAAnC;AACA,eAAKH,oBAAL,IAA6BI,cAA7B,CAH2D,CAK3D;;AACA,cAAMN,GAAG,GAAGnC,IAAI,CAACmC,GAAL,CAAS,CAACM,cAAV,CAAZ;AACA,cAAMH,GAAG,GAAGtC,IAAI,CAACsC,GAAL,CAAS,CAACG,cAAV,CAAZ;AACA,eAAKhC,mBAAL,CAAyBiC,CAAzB,GAA6B,KAAKjC,mBAAL,CAAyBiC,CAAzB,GAA6BJ,GAA7B,GAAmC,KAAK7B,mBAAL,CAAyBkC,CAAzB,GAA6BR,GAA7F;AACA,eAAK1B,mBAAL,CAAyBkC,CAAzB,GAA6B,KAAKlC,mBAAL,CAAyBiC,CAAzB,GAA6BP,GAA7B,GAAmC,KAAK1B,mBAAL,CAAyBkC,CAAzB,GAA6BL,GAA7F;AACH;AACJ;AACJ;;AAED3D,WAAO,CAACiE,yBAAR,CAAkC,KAAKnC,mBAAvC,EAA4D,KAAKmB,cAAjE,EAAiF,KAAKH,cAAtF;;AACA,SAAKG,cAAL,CAAoBiB,sBAApB,CAA2C,KAAKC,cAAhD;;AACArE,cAAU,CAACsE,uBAAX,CAAmC,KAAKD,cAAxC,EAAwD,KAAKhB,wBAA7D;AACA,SAAKA,wBAAL,CAA8BkB,eAA9B,CAA8C,KAAKtC,mBAAnD;;AAEA,QAAI,KAAKuC,KAAT,EAAgB;AACZ,WAAKA,KAAL,CAAW1C,QAAX,CAAoBS,QAApB,CAA6B,KAAKS,cAAlC;;AAEA,UAAI,KAAKwB,KAAL,CAAWzC,kBAAf,EAAmC;AAC/B,aAAKyC,KAAL,CAAWzC,kBAAX,CAA8BQ,QAA9B,CAAuC,KAAKc,wBAA5C;AACH;AACJ;AACJ,GAhDS;AAkDV;;;;;;AAIAjB,+DAAiBqC,QAAjB,EAAqC;AACjC,QAAI,KAAK9B,IAAT,EAAe;AACX;AACH;;AACD,QAAI8B,QAAJ,EAAc;AACV,WAAKC,OAAL,GAAeD,QAAf;;AACA,UAAIA,QAAQ,CAAC3C,QAAb,EAAuB;AACnB,aAAK6C,mBAAL,CAAyBC,cAAzB,CAAwCH,QAAQ,CAAC3C,QAAT,CAAkB,CAAlB,CAAxC,EAA8D2C,QAAQ,CAAC3C,QAAT,CAAkB,CAAlB,CAA9D,EAAoF,CAAC2C,QAAQ,CAAC3C,QAAT,CAAkB,CAAlB,CAArF;;AACA,YAAI,KAAK0C,KAAL,IAAc,KAAKA,KAAL,CAAWK,QAAX,GAAsBC,oBAAxC,EAA8D;AAC1D,eAAKH,mBAAL,CAAyBT,CAAzB,IAA8B,CAAC,CAA/B;AACH;;AACD,YAAI,KAAK5B,cAAT,EAAyB;AACrB,eAAKqC,mBAAL,CAAyBI,UAAzB,CAAoC,KAAKC,iBAAzC,EAA4D,KAAKhD,mBAAjE;AACH;;AACD,aAAKA,mBAAL,CAAyBiD,UAAzB,CAAoC,KAAKnD,QAAzC;AACH;;AACD,UAAMc,IAAI,GAAG,KAAK8B,OAAlB;;AACA,UAAID,QAAQ,CAACS,WAAT,IAAwBtC,IAAI,CAACsC,WAA7B,IAA4CtC,IAAI,CAACsC,WAAL,CAAiBC,MAAjB,KAA4B,CAA5E,EAA+E;AAC3E,aAAK7B,6BAAL,CAAmCsB,cAAnC,CAAkDhC,IAAI,CAACsC,WAAL,CAAiB,CAAjB,CAAlD,EAAuEtC,IAAI,CAACsC,WAAL,CAAiB,CAAjB,CAAvE,EAA4F,CAACtC,IAAI,CAACsC,WAAL,CAAiB,CAAjB,CAA7F,EAAkH,CAACtC,IAAI,CAACsC,WAAL,CAAiB,CAAjB,CAAnH;;AACA,YAAI,KAAKV,KAAT,EAAgB;AACZ,cAAI,KAAKA,KAAL,CAAWK,QAAX,GAAsBC,oBAA1B,EAAgD;AAC5C,iBAAKxB,6BAAL,CAAmCY,CAAnC,IAAwC,CAAC,CAAzC;AACA,iBAAKZ,6BAAL,CAAmC8B,CAAnC,IAAwC,CAAC,CAAzC;AACH,WAHD,MAGO;AACH,iBAAK9B,6BAAL,CAAmC+B,aAAnC,CAAiD,KAAKlD,yBAAtD,EAAiF,KAAKmB,6BAAtF;AACH;AACJ,SAT0E,CAW3E;;;AACA,aAAKA,6BAAL,CAAmC+B,aAAnC,CAAiD,KAAKtD,kBAAtD,EAA0E,KAAKE,mBAA/E;AACH;AACJ;AACJ,GAhCD;AAuCA;;;;;;AAIOG,iDAAP,UAAoBkD,IAApB,EAAsC;AAClC,QAAI,KAAKd,KAAT,EAAgB;AACZ,WAAKA,KAAL,CAAWe,MAAX,GAAoB,IAApB;AACH;;AACD,SAAKf,KAAL,GAAac,IAAb;;AACA,QAAI,KAAKE,qBAAT,EAAgC;AAC5B,WAAKhB,KAAL,CAAWe,MAAX,GAAoB,KAAKC,qBAAzB;AACH;;AACD,QAAI,CAAC,KAAKhB,KAAL,CAAWzC,kBAAhB,EAAoC;AAChC,WAAKyC,KAAL,CAAWzC,kBAAX,GAAgC,IAAI/B,UAAJ,EAAhC;AACH,KAViC,CAYlC;;;AACA,QAAI,CAAC,KAAK2C,IAAV,EAAgB;AACZ,WAAKD,kBAAL;;AACA,UAAI,KAAK+C,iBAAT,EAA4B;AACxB,YAAMC,OAAO,GAAG,EAAhB;AACA,YAAIC,GAAG,GAAS,KAAKF,iBAArB;;AACA,eAAOE,GAAG,CAACJ,MAAX,EAAmB;AACfG,iBAAO,CAACE,IAAR,CAAaD,GAAG,CAACJ,MAAjB;AACAI,aAAG,GAAGA,GAAG,CAACJ,MAAV;AACH;;AACDG,eAAO,CAACG,OAAR,GAAkBC,OAAlB,CAA0B,UAACC,CAAD,EAAE;AACxBA,WAAC,CAACC,kBAAF,CAAqB,IAArB;AACH,SAFD;AAGH;AACJ;;AAED,SAAKC,uBAAL,CAA6BC,eAA7B,CAA6CZ,IAA7C;AACH,GA7BM;AA+BP;;;;;;AAIOlD,iEAAP,UAAoCa,MAApC,EAAwD;AACpD,SAAKuC,qBAAL,GAA6BvC,MAA7B;;AACA,QAAI,KAAKuB,KAAT,EAAgB;AACZ,WAAKA,KAAL,CAAWe,MAAX,GAAoB,KAAKC,qBAAzB;AACH;AACJ,GALM;AAOP;;;;;AAGOpD,4CAAP;AACI,QAAI,KAAKoC,KAAT,EAAgB;AACZ,WAAKA,KAAL,CAAW2B,OAAX;AACH;;AACD,SAAK3B,KAAL,GAAa,IAAb;;AAEAtD,qBAAMiF,OAAN,CAAa1D,IAAb,CAAa,IAAb;AACH,GAPM;;AAYP2D,wBAAWhE,+BAAX,EAAW,MAAX,EAAe;AAHf;;;SAGA;AACI,aAAO,KAAKoC,KAAZ;AACH,KAFc;qBAAA;;AAAA,GAAf;AAIA;;;;;;AAKOpC,kDAAP,UAAqB+C,MAArB,EAAiC;AAAZ;AAAAA;AAAY;;AAC7B,QAAI,CAAC,KAAKG,IAAV,EAAgB;AACZ,aAAO,IAAIlF,GAAJ,CAAQF,OAAO,CAACoB,IAAR,EAAR,EAAwB,IAAIpB,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAxB,EAA8CiF,MAA9C,CAAP;AACH;;AAED,QAAMkB,CAAC,GAAG,KAAKZ,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBa,cAAvB,EAAzB,GAAmE,KAAKhB,IAAL,CAAUgB,cAAV,EAA7E;AACA,QAAMC,MAAM,GAAGF,CAAC,CAACG,cAAF,EAAf;AAEA,QAAMC,OAAO,GAAG,IAAIvG,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAC,CAAnB,CAAhB;AACA,QAAMwG,YAAY,GAAGxG,OAAO,CAACyG,eAAR,CAAwBF,OAAxB,EAAiCJ,CAAjC,CAArB;AAEA,QAAMO,SAAS,GAAG1G,OAAO,CAAC2G,SAAR,CAAkBH,YAAlB,CAAlB;AAEA,WAAO,IAAItG,GAAJ,CAAQmG,MAAR,EAAgBK,SAAhB,EAA2BzB,MAA3B,CAAP;AACH,GAdM;AAnMP;;;;;AAGuB/C,wCAAgB,eAAhB;AA+M3B;AAAC,CAhSD,CAA2C9B,OAA3C;;SAAa8B","names":["Observable","Quaternion","Matrix","Vector3","TmpVectors","Ray","EngineStore","Gamepad","PoseEnabledControllerType","PoseEnabledControllerHelper","vrGamepad","_ControllerFactories","_i","factory","canCreate","create","_DefaultControllerFactory","__extends","browserGamepad","_super","id","index","_this","Zero","Math","PI","Identity","type","POSE_ENABLED","controllerType","GENERIC","position","rotationQuaternion","_calculatedPosition","_calculatedRotation","RotationYawPitchRollToRef","_leftHandSystemQuaternion","PoseEnabledController","fixedPosition","_trackPosition","copyFrom","update","call","_updatePoseAndMesh","isXR","pose","updateFromDevice","LastCreatedScene","activeCamera","devicePosition","camera","_computeDevicePosition","_deviceToWorld","setTranslation","deviceRotationQuaternion","_deviceRoomRotationQuaternion","toEulerAnglesToRef","distanceAway","atan2","sin","y","_draggedRoomRotation","cos","abs","_maxRotationDistFromHeadset","rotationAmount","x","z","TransformCoordinatesToRef","getRotationMatrixToRef","_workingMatrix","FromRotationMatrixToRef","multiplyInPlace","_mesh","poseData","rawPose","_deviceRoomPosition","copyFromFloats","getScene","useRightHandedSystem","scaleToRef","deviceScaleFactor","addInPlace","orientation","length","w","multiplyToRef","mesh","parent","_poseControlledCamera","_pointingPoseNode","parents","obj","push","reverse","forEach","p","computeWorldMatrix","_meshAttachedObservable","notifyObservers","dispose","Object","m","getWorldMatrix","origin","getTranslation","forward","forwardWorld","TransformNormal","direction","Normalize"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Gamepads/Controllers/poseEnabledController.ts"],"sourcesContent":["import { Observable } from \"../../Misc/observable\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Quaternion, Matrix, Vector3, TmpVectors } from \"../../Maths/math.vector\";\r\nimport type { Node } from \"../../node\";\r\nimport type { TransformNode } from \"../../Meshes/transformNode\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Ray } from \"../../Culling/ray\";\r\nimport { EngineStore } from \"../../Engines/engineStore\";\r\n\r\nimport { Gamepad } from \"../../Gamepads/gamepad\";\r\nimport type { WebVRFreeCamera, PoseControlled, DevicePose } from \"../../Cameras/VR/webVRCamera\";\r\nimport type { TargetCamera } from \"../../Cameras/targetCamera\";\r\n\r\n/**\r\n * Defines the types of pose enabled controllers that are supported\r\n */\r\nexport enum PoseEnabledControllerType {\r\n    /**\r\n     * HTC Vive\r\n     */\r\n    VIVE,\r\n    /**\r\n     * Oculus Rift\r\n     */\r\n    OCULUS,\r\n    /**\r\n     * Windows mixed reality\r\n     */\r\n    WINDOWS,\r\n    /**\r\n     * Samsung gear VR\r\n     */\r\n    GEAR_VR,\r\n    /**\r\n     * Google Daydream\r\n     */\r\n    DAYDREAM,\r\n    /**\r\n     * Generic\r\n     */\r\n    GENERIC,\r\n}\r\n\r\n/**\r\n * Defines the MutableGamepadButton interface for the state of a gamepad button\r\n */\r\nexport interface MutableGamepadButton {\r\n    /**\r\n     * Value of the button/trigger\r\n     */\r\n    value: number;\r\n    /**\r\n     * If the button/trigger is currently touched\r\n     */\r\n    touched: boolean;\r\n    /**\r\n     * If the button/trigger is currently pressed\r\n     */\r\n    pressed: boolean;\r\n}\r\n\r\n/**\r\n * Defines the ExtendedGamepadButton interface for a gamepad button which includes state provided by a pose controller\r\n * @hidden\r\n */\r\nexport interface ExtendedGamepadButton extends GamepadButton {\r\n    /**\r\n     * If the button/trigger is currently pressed\r\n     */\r\n    readonly pressed: boolean;\r\n    /**\r\n     * If the button/trigger is currently touched\r\n     */\r\n    readonly touched: boolean;\r\n    /**\r\n     * Value of the button/trigger\r\n     */\r\n    readonly value: number;\r\n}\r\n\r\n/** @hidden */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport interface _GamePadFactory {\r\n    /**\r\n     * Returns whether or not the current gamepad can be created for this type of controller.\r\n     * @param gamepadInfo Defines the gamepad info as received from the controller APIs.\r\n     * @returns true if it can be created, otherwise false\r\n     */\r\n    canCreate(gamepadInfo: any): boolean;\r\n\r\n    /**\r\n     * Creates a new instance of the Gamepad.\r\n     * @param gamepadInfo Defines the gamepad info as received from the controller APIs.\r\n     * @returns the new gamepad instance\r\n     */\r\n    create(gamepadInfo: any): Gamepad;\r\n}\r\n\r\n/**\r\n * Defines the PoseEnabledControllerHelper object that is used initialize a gamepad as the controller type it is specified as (eg. windows mixed reality controller)\r\n */\r\nexport class PoseEnabledControllerHelper {\r\n    /** @hidden */\r\n    public static _ControllerFactories: _GamePadFactory[] = [];\r\n\r\n    /** @hidden */\r\n    public static _DefaultControllerFactory: Nullable<(gamepadInfo: any) => Gamepad> = null;\r\n\r\n    /**\r\n     * Initializes a gamepad as the controller type it is specified as (eg. windows mixed reality controller)\r\n     * @param vrGamepad the gamepad to initialized\r\n     * @returns a vr controller of the type the gamepad identified as\r\n     */\r\n    public static InitiateController(vrGamepad: any) {\r\n        for (const factory of this._ControllerFactories) {\r\n            if (factory.canCreate(vrGamepad)) {\r\n                return factory.create(vrGamepad);\r\n            }\r\n        }\r\n\r\n        if (this._DefaultControllerFactory) {\r\n            return this._DefaultControllerFactory(vrGamepad);\r\n        }\r\n\r\n        throw \"The type of gamepad you are trying to load needs to be imported first or is not supported.\";\r\n    }\r\n}\r\n\r\n/**\r\n * Defines the PoseEnabledController object that contains state of a vr capable controller\r\n */\r\nexport class PoseEnabledController extends Gamepad implements PoseControlled {\r\n    /**\r\n     * If the controller is used in a webXR session\r\n     */\r\n    public isXR = false;\r\n    // Represents device position and rotation in room space. Should only be used to help calculate babylon space values\r\n    private _deviceRoomPosition = Vector3.Zero();\r\n    private _deviceRoomRotationQuaternion = new Quaternion();\r\n\r\n    /**\r\n     * The device position in babylon space\r\n     */\r\n    public devicePosition = Vector3.Zero();\r\n    /**\r\n     * The device rotation in babylon space\r\n     */\r\n    public deviceRotationQuaternion = new Quaternion();\r\n    /**\r\n     * The scale factor of the device in babylon space\r\n     */\r\n    public deviceScaleFactor: number = 1;\r\n\r\n    /**\r\n     * (Likely devicePosition should be used instead) The device position in its room space\r\n     */\r\n    public position: Vector3;\r\n    /**\r\n     * (Likely deviceRotationQuaternion should be used instead) The device rotation in its room space\r\n     */\r\n    public rotationQuaternion: Quaternion;\r\n    /**\r\n     * The type of controller (Eg. Windows mixed reality)\r\n     */\r\n    public controllerType: PoseEnabledControllerType;\r\n\r\n    protected _calculatedPosition: Vector3;\r\n    private _calculatedRotation: Quaternion;\r\n\r\n    /**\r\n     * The raw pose from the device\r\n     */\r\n    public rawPose: DevicePose; //GamepadPose;\r\n\r\n    // Used to convert 6dof controllers to 3dof\r\n    private _trackPosition = true;\r\n    private _maxRotationDistFromHeadset = Math.PI / 5;\r\n    private _draggedRoomRotation = 0;\r\n    /**\r\n     * @param fixedPosition\r\n     * @hidden\r\n     */\r\n    public _disableTrackPosition(fixedPosition: Vector3) {\r\n        if (this._trackPosition) {\r\n            this._calculatedPosition.copyFrom(fixedPosition);\r\n            this._trackPosition = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Internal, the mesh attached to the controller\r\n     * @hidden\r\n     */\r\n    public _mesh: Nullable<AbstractMesh>; // a node that will be attached to this Gamepad\r\n    private _poseControlledCamera: TargetCamera;\r\n\r\n    private _leftHandSystemQuaternion: Quaternion = new Quaternion();\r\n\r\n    /**\r\n     * Internal, matrix used to convert room space to babylon space\r\n     * @hidden\r\n     */\r\n    public _deviceToWorld = Matrix.Identity();\r\n\r\n    /**\r\n     * Node to be used when casting a ray from the controller\r\n     * @hidden\r\n     */\r\n    public _pointingPoseNode: Nullable<TransformNode> = null;\r\n    /**\r\n     * Name of the child mesh that can be used to cast a ray from the controller\r\n     */\r\n    public static readonly POINTING_POSE = \"POINTING_POSE\";\r\n    /**\r\n     * Creates a new PoseEnabledController from a gamepad\r\n     * @param browserGamepad the gamepad that the PoseEnabledController should be created from\r\n     */\r\n    constructor(browserGamepad: any) {\r\n        super(browserGamepad.id, browserGamepad.index, browserGamepad);\r\n        this.type = Gamepad.POSE_ENABLED;\r\n        this.controllerType = PoseEnabledControllerType.GENERIC;\r\n        this.position = Vector3.Zero();\r\n        this.rotationQuaternion = new Quaternion();\r\n\r\n        this._calculatedPosition = Vector3.Zero();\r\n        this._calculatedRotation = new Quaternion();\r\n        Quaternion.RotationYawPitchRollToRef(Math.PI, 0, 0, this._leftHandSystemQuaternion);\r\n    }\r\n\r\n    private _workingMatrix = Matrix.Identity();\r\n    /**\r\n     * Updates the state of the pose enabled controller and mesh based on the current position and rotation of the controller\r\n     */\r\n    public update() {\r\n        super.update();\r\n        this._updatePoseAndMesh();\r\n    }\r\n\r\n    /**\r\n     * Updates only the pose device and mesh without doing any button event checking\r\n     */\r\n    protected _updatePoseAndMesh() {\r\n        if (this.isXR) {\r\n            return;\r\n        }\r\n        const pose: DevicePose = this.browserGamepad.pose;\r\n        this.updateFromDevice(pose);\r\n\r\n        if (\r\n            !this._trackPosition &&\r\n            EngineStore.LastCreatedScene &&\r\n            EngineStore.LastCreatedScene.activeCamera &&\r\n            (<WebVRFreeCamera>EngineStore.LastCreatedScene.activeCamera).devicePosition\r\n        ) {\r\n            const camera = <WebVRFreeCamera>EngineStore.LastCreatedScene.activeCamera;\r\n            camera._computeDevicePosition();\r\n\r\n            this._deviceToWorld.setTranslation(camera.devicePosition);\r\n            if (camera.deviceRotationQuaternion) {\r\n                camera._deviceRoomRotationQuaternion.toEulerAnglesToRef(TmpVectors.Vector3[0]);\r\n\r\n                // Find the radian distance away that the headset is from the controllers rotation\r\n                const distanceAway = Math.atan2(Math.sin(TmpVectors.Vector3[0].y - this._draggedRoomRotation), Math.cos(TmpVectors.Vector3[0].y - this._draggedRoomRotation));\r\n                if (Math.abs(distanceAway) > this._maxRotationDistFromHeadset) {\r\n                    // Only rotate enouph to be within the _maxRotationDistFromHeadset\r\n                    const rotationAmount = distanceAway - (distanceAway < 0 ? -this._maxRotationDistFromHeadset : this._maxRotationDistFromHeadset);\r\n                    this._draggedRoomRotation += rotationAmount;\r\n\r\n                    // Rotate controller around headset\r\n                    const sin = Math.sin(-rotationAmount);\r\n                    const cos = Math.cos(-rotationAmount);\r\n                    this._calculatedPosition.x = this._calculatedPosition.x * cos - this._calculatedPosition.z * sin;\r\n                    this._calculatedPosition.z = this._calculatedPosition.x * sin + this._calculatedPosition.z * cos;\r\n                }\r\n            }\r\n        }\r\n\r\n        Vector3.TransformCoordinatesToRef(this._calculatedPosition, this._deviceToWorld, this.devicePosition);\r\n        this._deviceToWorld.getRotationMatrixToRef(this._workingMatrix);\r\n        Quaternion.FromRotationMatrixToRef(this._workingMatrix, this.deviceRotationQuaternion);\r\n        this.deviceRotationQuaternion.multiplyInPlace(this._calculatedRotation);\r\n\r\n        if (this._mesh) {\r\n            this._mesh.position.copyFrom(this.devicePosition);\r\n\r\n            if (this._mesh.rotationQuaternion) {\r\n                this._mesh.rotationQuaternion.copyFrom(this.deviceRotationQuaternion);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the state of the pose enbaled controller based on the raw pose data from the device\r\n     * @param poseData raw pose fromthe device\r\n     */\r\n    updateFromDevice(poseData: DevicePose) {\r\n        if (this.isXR) {\r\n            return;\r\n        }\r\n        if (poseData) {\r\n            this.rawPose = poseData;\r\n            if (poseData.position) {\r\n                this._deviceRoomPosition.copyFromFloats(poseData.position[0], poseData.position[1], -poseData.position[2]);\r\n                if (this._mesh && this._mesh.getScene().useRightHandedSystem) {\r\n                    this._deviceRoomPosition.z *= -1;\r\n                }\r\n                if (this._trackPosition) {\r\n                    this._deviceRoomPosition.scaleToRef(this.deviceScaleFactor, this._calculatedPosition);\r\n                }\r\n                this._calculatedPosition.addInPlace(this.position);\r\n            }\r\n            const pose = this.rawPose;\r\n            if (poseData.orientation && pose.orientation && pose.orientation.length === 4) {\r\n                this._deviceRoomRotationQuaternion.copyFromFloats(pose.orientation[0], pose.orientation[1], -pose.orientation[2], -pose.orientation[3]);\r\n                if (this._mesh) {\r\n                    if (this._mesh.getScene().useRightHandedSystem) {\r\n                        this._deviceRoomRotationQuaternion.z *= -1;\r\n                        this._deviceRoomRotationQuaternion.w *= -1;\r\n                    } else {\r\n                        this._deviceRoomRotationQuaternion.multiplyToRef(this._leftHandSystemQuaternion, this._deviceRoomRotationQuaternion);\r\n                    }\r\n                }\r\n\r\n                // if the camera is set, rotate to the camera's rotation\r\n                this._deviceRoomRotationQuaternion.multiplyToRef(this.rotationQuaternion, this._calculatedRotation);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    public _meshAttachedObservable = new Observable<AbstractMesh>();\r\n\r\n    /**\r\n     * Attaches a mesh to the controller\r\n     * @param mesh the mesh to be attached\r\n     */\r\n    public attachToMesh(mesh: AbstractMesh) {\r\n        if (this._mesh) {\r\n            this._mesh.parent = null;\r\n        }\r\n        this._mesh = mesh;\r\n        if (this._poseControlledCamera) {\r\n            this._mesh.parent = this._poseControlledCamera;\r\n        }\r\n        if (!this._mesh.rotationQuaternion) {\r\n            this._mesh.rotationQuaternion = new Quaternion();\r\n        }\r\n\r\n        // Sync controller mesh and pointing pose node's state with controller, this is done to avoid a frame where position is 0,0,0 when attaching mesh\r\n        if (!this.isXR) {\r\n            this._updatePoseAndMesh();\r\n            if (this._pointingPoseNode) {\r\n                const parents = [];\r\n                let obj: Node = this._pointingPoseNode;\r\n                while (obj.parent) {\r\n                    parents.push(obj.parent);\r\n                    obj = obj.parent;\r\n                }\r\n                parents.reverse().forEach((p) => {\r\n                    p.computeWorldMatrix(true);\r\n                });\r\n            }\r\n        }\r\n\r\n        this._meshAttachedObservable.notifyObservers(mesh);\r\n    }\r\n\r\n    /**\r\n     * Attaches the controllers mesh to a camera\r\n     * @param camera the camera the mesh should be attached to\r\n     */\r\n    public attachToPoseControlledCamera(camera: TargetCamera) {\r\n        this._poseControlledCamera = camera;\r\n        if (this._mesh) {\r\n            this._mesh.parent = this._poseControlledCamera;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes of the controller\r\n     */\r\n    public dispose() {\r\n        if (this._mesh) {\r\n            this._mesh.dispose();\r\n        }\r\n        this._mesh = null;\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /**\r\n     * The mesh that is attached to the controller\r\n     */\r\n    public get mesh(): Nullable<AbstractMesh> {\r\n        return this._mesh;\r\n    }\r\n\r\n    /**\r\n     * Gets the ray of the controller in the direction the controller is pointing\r\n     * @param length the length the resulting ray should be\r\n     * @returns a ray in the direction the controller is pointing\r\n     */\r\n    public getForwardRay(length = 100): Ray {\r\n        if (!this.mesh) {\r\n            return new Ray(Vector3.Zero(), new Vector3(0, 0, 1), length);\r\n        }\r\n\r\n        const m = this._pointingPoseNode ? this._pointingPoseNode.getWorldMatrix() : this.mesh.getWorldMatrix();\r\n        const origin = m.getTranslation();\r\n\r\n        const forward = new Vector3(0, 0, -1);\r\n        const forwardWorld = Vector3.TransformNormal(forward, m);\r\n\r\n        const direction = Vector3.Normalize(forwardWorld);\r\n\r\n        return new Ray(origin, direction, length);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}