{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Custom block created from user-defined json\n */\n\nvar CustomBlock =\n/** @class */\nfunction (_super) {\n  __extends(CustomBlock, _super);\n  /**\n   * Creates a new CustomBlock\n   * @param name defines the block name\n   */\n\n\n  function CustomBlock(name) {\n    return _super.call(this, name) || this;\n  }\n\n  Object.defineProperty(CustomBlock.prototype, \"options\", {\n    /**\n     * Gets or sets the options for this custom block\n     */\n    get: function get() {\n      return this._options;\n    },\n    set: function set(options) {\n      this._deserializeOptions(options);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n  CustomBlock.prototype.getClassName = function () {\n    return \"CustomBlock\";\n  };\n\n  CustomBlock.prototype._buildBlock = function (state) {\n    var _this = this;\n\n    _super.prototype._buildBlock.call(this, state);\n\n    var code = this._code;\n    var functionName = this._options.functionName; // Replace the TYPE_XXX placeholders (if any)\n\n    this._inputs.forEach(function (input) {\n      var rexp = new RegExp(\"\\\\{TYPE_\" + input.name + \"\\\\}\", \"gm\");\n\n      var type = state._getGLType(input.type);\n\n      code = code.replace(rexp, type);\n      functionName = functionName.replace(rexp, type);\n    });\n\n    this._outputs.forEach(function (output) {\n      var rexp = new RegExp(\"\\\\{TYPE_\" + output.name + \"\\\\}\", \"gm\");\n\n      var type = state._getGLType(output.type);\n\n      code = code.replace(rexp, type);\n      functionName = functionName.replace(rexp, type);\n    });\n\n    state._emitFunction(functionName, code, \"\"); // Declare the output variables\n\n\n    this._outputs.forEach(function (output) {\n      state.compilationString += _this._declareOutput(output, state) + \";\\r\\n\";\n    }); // Generate the function call\n\n\n    state.compilationString += functionName + \"(\";\n    var hasInput = false;\n\n    this._inputs.forEach(function (input, index) {\n      if (index > 0) {\n        state.compilationString += \", \";\n      }\n\n      state.compilationString += input.associatedVariableName;\n      hasInput = true;\n    });\n\n    this._outputs.forEach(function (output, index) {\n      if (index > 0 || hasInput) {\n        state.compilationString += \", \";\n      }\n\n      state.compilationString += output.associatedVariableName;\n    });\n\n    state.compilationString += \");\\r\\n\";\n    return this;\n  };\n\n  CustomBlock.prototype._dumpPropertiesCode = function () {\n    var codeString = _super.prototype._dumpPropertiesCode.call(this);\n\n    codeString += \"\".concat(this._codeVariableName, \".options = \").concat(JSON.stringify(this._options), \";\\r\\n\");\n    return codeString;\n  };\n\n  CustomBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    serializationObject.options = this._options;\n    return serializationObject;\n  };\n\n  CustomBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    this._deserializeOptions(serializationObject.options);\n\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n  };\n\n  CustomBlock.prototype._deserializeOptions = function (options) {\n    var _this = this;\n\n    var _a, _b, _c;\n\n    this._options = options;\n    this._code = options.code.join(\"\\r\\n\") + \"\\r\\n\";\n    this.name = this.name || options.name;\n    this.target = NodeMaterialBlockTargets[options.target];\n    (_a = options.inParameters) === null || _a === void 0 ? void 0 : _a.forEach(function (input, index) {\n      var type = NodeMaterialBlockConnectionPointTypes[input.type];\n\n      _this.registerInput(input.name, type);\n\n      Object.defineProperty(_this, input.name, {\n        get: function get() {\n          return this._inputs[index];\n        },\n        enumerable: true,\n        configurable: true\n      });\n    });\n    (_b = options.outParameters) === null || _b === void 0 ? void 0 : _b.forEach(function (output, index) {\n      _this.registerOutput(output.name, NodeMaterialBlockConnectionPointTypes[output.type]);\n\n      Object.defineProperty(_this, output.name, {\n        get: function get() {\n          return this._outputs[index];\n        },\n        enumerable: true,\n        configurable: true\n      });\n\n      if (output.type === \"BasedOnInput\") {\n        _this._outputs[index]._typeConnectionSource = _this._findInputByName(output.typeFromInput)[0];\n      }\n    });\n    (_c = options.inLinkedConnectionTypes) === null || _c === void 0 ? void 0 : _c.forEach(function (connection) {\n      _this._linkConnectionTypes(_this._findInputByName(connection.input1)[1], _this._findInputByName(connection.input2)[1]);\n    });\n  };\n\n  CustomBlock.prototype._findInputByName = function (name) {\n    if (!name) {\n      return null;\n    }\n\n    for (var i = 0; i < this._inputs.length; i++) {\n      if (this._inputs[i].name === name) {\n        return [this._inputs[i], i];\n      }\n    }\n\n    return null;\n  };\n\n  return CustomBlock;\n}(NodeMaterialBlock);\n\nexport { CustomBlock };\nRegisterClass(\"BABYLON.CustomBlock\", CustomBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","__extends","name","_super","Object","CustomBlock","_options","options","_deserializeOptions","state","_buildBlock","call","code","_code","functionName","_inputs","forEach","input","rexp","RegExp","type","_getGLType","replace","_outputs","output","_emitFunction","compilationString","_this","_declareOutput","hasInput","index","associatedVariableName","codeString","_dumpPropertiesCode","_codeVariableName","concat","JSON","stringify","serializationObject","serialize","scene","rootUrl","_deserialize","join","target","inParameters","_a","registerInput","defineProperty","get","enumerable","configurable","outParameters","_b","registerOutput","_typeConnectionSource","_findInputByName","typeFromInput","inLinkedConnectionTypes","_c","connection","_linkConnectionTypes","input1","input2","i","length"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Node/Blocks/customBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport type { Scene } from \"../../../scene\";\r\nimport type { Nullable } from \"../../../types\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\n\r\n/**\r\n * Custom block created from user-defined json\r\n */\r\nexport class CustomBlock extends NodeMaterialBlock {\r\n    private _options: any;\r\n    private _code: string;\r\n\r\n    /**\r\n     * Gets or sets the options for this custom block\r\n     */\r\n    public get options() {\r\n        return this._options;\r\n    }\r\n\r\n    public set options(options: any) {\r\n        this._deserializeOptions(options);\r\n    }\r\n\r\n    /**\r\n     * Creates a new CustomBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"CustomBlock\";\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        let code = this._code;\r\n\r\n        let functionName = this._options.functionName;\r\n\r\n        // Replace the TYPE_XXX placeholders (if any)\r\n        this._inputs.forEach((input) => {\r\n            const rexp = new RegExp(\"\\\\{TYPE_\" + input.name + \"\\\\}\", \"gm\");\r\n            const type = state._getGLType(input.type);\r\n            code = code.replace(rexp, type);\r\n            functionName = functionName.replace(rexp, type);\r\n        });\r\n        this._outputs.forEach((output) => {\r\n            const rexp = new RegExp(\"\\\\{TYPE_\" + output.name + \"\\\\}\", \"gm\");\r\n            const type = state._getGLType(output.type);\r\n            code = code.replace(rexp, type);\r\n            functionName = functionName.replace(rexp, type);\r\n        });\r\n\r\n        state._emitFunction(functionName, code, \"\");\r\n\r\n        // Declare the output variables\r\n        this._outputs.forEach((output) => {\r\n            state.compilationString += this._declareOutput(output, state) + \";\\r\\n\";\r\n        });\r\n\r\n        // Generate the function call\r\n        state.compilationString += functionName + \"(\";\r\n\r\n        let hasInput = false;\r\n        this._inputs.forEach((input, index) => {\r\n            if (index > 0) {\r\n                state.compilationString += \", \";\r\n            }\r\n            state.compilationString += input.associatedVariableName;\r\n            hasInput = true;\r\n        });\r\n\r\n        this._outputs.forEach((output, index) => {\r\n            if (index > 0 || hasInput) {\r\n                state.compilationString += \", \";\r\n            }\r\n            state.compilationString += output.associatedVariableName;\r\n        });\r\n\r\n        state.compilationString += \");\\r\\n\";\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString = super._dumpPropertiesCode();\r\n\r\n        codeString += `${this._codeVariableName}.options = ${JSON.stringify(this._options)};\\r\\n`;\r\n\r\n        return codeString;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.options = this._options;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        this._deserializeOptions(serializationObject.options);\r\n\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n    }\r\n\r\n    private _deserializeOptions(options: any) {\r\n        this._options = options;\r\n        this._code = options.code.join(\"\\r\\n\") + \"\\r\\n\";\r\n        this.name = this.name || options.name;\r\n        this.target = (<any>NodeMaterialBlockTargets)[options.target];\r\n\r\n        options.inParameters?.forEach((input: any, index: number) => {\r\n            const type = (<any>NodeMaterialBlockConnectionPointTypes)[input.type];\r\n            this.registerInput(input.name, type);\r\n\r\n            Object.defineProperty(this, input.name, {\r\n                get: function () {\r\n                    return this._inputs[index];\r\n                },\r\n                enumerable: true,\r\n                configurable: true,\r\n            });\r\n        });\r\n\r\n        options.outParameters?.forEach((output: any, index: number) => {\r\n            this.registerOutput(output.name, (<any>NodeMaterialBlockConnectionPointTypes)[output.type]);\r\n\r\n            Object.defineProperty(this, output.name, {\r\n                get: function () {\r\n                    return this._outputs[index];\r\n                },\r\n                enumerable: true,\r\n                configurable: true,\r\n            });\r\n\r\n            if (output.type === \"BasedOnInput\") {\r\n                this._outputs[index]._typeConnectionSource = this._findInputByName(output.typeFromInput)![0];\r\n            }\r\n        });\r\n\r\n        options.inLinkedConnectionTypes?.forEach((connection: any) => {\r\n            this._linkConnectionTypes(this._findInputByName(connection.input1)![1], this._findInputByName(connection.input2)![1]);\r\n        });\r\n    }\r\n\r\n    private _findInputByName(name: string): Nullable<[NodeMaterialConnectionPoint, number]> {\r\n        if (!name) {\r\n            return null;\r\n        }\r\n\r\n        for (let i = 0; i < this._inputs.length; i++) {\r\n            if (this._inputs[i].name === name) {\r\n                return [this._inputs[i], i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.CustomBlock\", CustomBlock);\r\n"]},"metadata":{},"sourceType":"module"}