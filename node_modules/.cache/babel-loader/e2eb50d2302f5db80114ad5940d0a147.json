{"ast":null,"code":"import \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport { Scene, Engine, FreeCamera, Vector3, HemisphericLight, MeshBuilder, StandardMaterial, Texture } from \"@babylonjs/core\";\nimport '@babylonjs/loaders';\nexport default {\n  data: function data() {\n    return {\n      engine: null,\n      scene: null,\n      camera: null,\n      light: null,\n      ground: null\n    };\n  },\n  methods: {\n    initGame: function initGame(canvas) {\n      //Setup game environment\n      this.createEngine(canvas);\n      this.createScene();\n      this.createLight();\n      this.createCamera(); // //Create game meshes\n      // this.createGround();\n\n      this.generateTerrain(); //Start game render\n\n      this.renderGame();\n    },\n    //Environment\n    createEngine: function createEngine(canvas) {\n      this.engine = new Engine(canvas, true);\n    },\n    createScene: function createScene() {\n      this.scene = new Scene(this.engine);\n    },\n    createLight: function createLight() {\n      this.light = new HemisphericLight('light', new Vector3(0, 1, 0), this.scene);\n      this.light.intensity = 0.75;\n    },\n    createCamera: function createCamera() {\n      this.camera = new FreeCamera('camera', new Vector3(0, 7, -12), this.scene);\n      this.camera.speed = 0.25;\n      this.camera.rotation = new Vector3(0.5, 0, 0);\n    },\n    //Meshes\n    createGround: function createGround() {\n      this.ground = MeshBuilder.CreateGround('ground', {\n        width: 200,\n        height: 100\n      }, this.scene);\n      this.setGroundTexture();\n    },\n    generateTerrain: function generateTerrain() {\n      var mapSubX = 1000; // point number on X axis\n\n      var mapSubZ = 1000; // point number on Z axis\n\n      var seed = 0.3; // seed\n\n      var noiseScale = 1.03; // noise frequency\n\n      var elevationScale = 1.0;\n      noise.seed(seed);\n      var mapData = new Float32Array(mapSubX * mapSubZ * 3); // x3 float values per point : x, y and z\n\n      var mapColors = new Float32Array(mapSubX * mapSubZ * 3); // SPMap with 3 object types\n\n      var SPmapData = [[], [], []];\n\n      for (var l = 0; l < mapSubZ; l++) {\n        for (var w = 0; w < mapSubX; w++) {\n          var x = (w - mapSubX * 0.5) * 2.0;\n          var z = (l - mapSubZ * 0.5) * 2.0;\n          var y = noise.simplex2(x * noiseScale, z * noiseScale); // altitude\n\n          y *= (0.5 + y) * y * elevationScale;\n          mapData[3 * (l * mapSubX + w)] = x;\n          mapData[3 * (l * mapSubX + w) + 1] = y;\n          mapData[3 * (l * mapSubX + w) + 2] = z; // colors of the map\n\n          mapColors[l * mapSubX * 3 + w * 3] = 0.5 + Math.random() * 0.2;\n          mapColors[l * mapSubX * 3 + w * 3 + 1] = 0.5 + Math.random() * 0.4;\n          mapColors[l * mapSubX * 3 + w * 3 + 1] = 0.5; // objects of the map\n\n          var index = l * mapSubX + w; // let's populate randomly\n\n          if (Math.random() > 0.85) {\n            var xp = x;\n            var yp = y;\n            var zp = z;\n            var ry = Math.random() * 3.6;\n            var sx = 0.5 + Math.random();\n            var sy = 0.5 + Math.random();\n            var sz = 0.5 + Math.random();\n            SPmapData[index % 3].push(xp, yp, zp, 0, ry, 0, sx, sy, sz);\n          }\n        }\n      }\n    },\n    //Render Main Game\n    renderGame: function renderGame() {\n      var _this = this;\n\n      this.engine.runRenderLoop(function () {\n        _this.scene.render();\n      });\n    },\n    //Helpers\n    setGroundTexture: function setGroundTexture() {\n      var groundMaterial = new StandardMaterial('ground_texture', this.scene);\n      groundMaterial.diffuseTexture = new Texture('./assets/textures/mars_1k_color.jpg');\n      this.ground.material = groundMaterial;\n    }\n  }\n};","map":{"version":3,"sources":["/home/ea/Development/Babylon/red/src/framework/GameInitializer.js"],"names":["Scene","Engine","FreeCamera","Vector3","HemisphericLight","MeshBuilder","StandardMaterial","Texture","data","engine","scene","camera","light","ground","methods","initGame","canvas","createEngine","createScene","createLight","createCamera","generateTerrain","renderGame","intensity","speed","rotation","createGround","CreateGround","width","height","setGroundTexture","mapSubX","mapSubZ","seed","noiseScale","elevationScale","noise","mapData","Float32Array","mapColors","SPmapData","l","w","x","z","y","simplex2","Math","random","index","xp","yp","zp","ry","sx","sy","sz","push","runRenderLoop","render","groundMaterial","diffuseTexture","material"],"mappings":"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","sourcesContent":["import {\n    Scene,\n    Engine,\n    FreeCamera,\n    Vector3,\n    HemisphericLight,\n    MeshBuilder,\n    StandardMaterial,\n    Texture,\n} from \"@babylonjs/core\";\nimport '@babylonjs/loaders';\n\nexport default {\n    data() {\n        return {\n            engine: null,\n            scene: null,\n            camera: null,\n            light: null,\n            ground: null,\n        };\n    },\n    methods: {\n        initGame(canvas) {\n            //Setup game environment\n            this.createEngine(canvas);\n            this.createScene();\n            this.createLight();\n            this.createCamera();\n\n            // //Create game meshes\n            // this.createGround();\n            this.generateTerrain();\n\n            //Start game render\n            this.renderGame();\n        },\n\n        //Environment\n        createEngine(canvas) {\n            this.engine = new Engine(canvas, true);\n        },\n        createScene() {\n            this.scene = new Scene(this.engine);\n        },\n        createLight() {\n            this.light = new HemisphericLight('light', new Vector3(0, 1, 0), this.scene);\n            this.light.intensity = 0.75;\n        },\n        createCamera() {\n            this.camera = new FreeCamera('camera', new Vector3(0, 7, -12), this.scene);\n            this.camera.speed = 0.25;\n            this.camera.rotation = new Vector3(0.5, 0, 0);\n        },\n\n        //Meshes\n        createGround() {\n            this.ground = MeshBuilder.CreateGround('ground', {width: 200, height: 100}, this.scene);\n\n            this.setGroundTexture();\n        },\n        generateTerrain() {\n            const mapSubX = 1000;             // point number on X axis\n            const mapSubZ = 1000;              // point number on Z axis\n            const seed = 0.3;                 // seed\n            const noiseScale = 1.03;         // noise frequency\n            const elevationScale = 1.0;\n            noise.seed(seed);\n            const mapData = new Float32Array(mapSubX * mapSubZ * 3); // x3 float values per point : x, y and z\n            const mapColors = new Float32Array(mapSubX * mapSubZ * 3);\n\n            // SPMap with 3 object types\n            var SPmapData = [[], [], []];\n\n            for (var l = 0; l < mapSubZ; l++) {\n                for (var w = 0; w < mapSubX; w++) {\n                    var x = (w - mapSubX * 0.5) * 2.0;\n                    var z = (l - mapSubZ * 0.5) * 2.0;\n                    var y = noise.simplex2(x * noiseScale, z * noiseScale);               // altitude\n                    y *= (0.5 + y) * y * elevationScale;\n\n                    mapData[3 * (l * mapSubX + w)] = x;\n                    mapData[3 * (l * mapSubX + w) + 1] = y;\n                    mapData[3 * (l * mapSubX + w) + 2] = z;\n\n                    // colors of the map\n                    mapColors[l * mapSubX * 3 + w * 3] = (0.5 + Math.random() * 0.2);\n                    mapColors[l * mapSubX * 3 + w * 3 + 1] = (0.5 + Math.random() * 0.4);\n                    mapColors[l * mapSubX * 3 + w * 3 + 1] = (0.5);\n\n                    // objects of the map\n                    let index = l * mapSubX + w;\n                    // let's populate randomly\n                    if (Math.random() > 0.85) {\n                        let xp = x;\n                        let yp = y;\n                        let zp = z;\n\n                        let ry = Math.random() * 3.6;\n                        let sx = 0.5 + Math.random();\n                        let sy = 0.5 + Math.random();\n                        let sz = 0.5 + Math.random();\n\n                        SPmapData[index % 3].push(xp, yp, zp, 0, ry, 0, sx, sy, sz);\n                    }\n                }\n            }\n        },\n\n        //Render Main Game\n        renderGame() {\n            this.engine.runRenderLoop(() => {\n                this.scene.render();\n            });\n        },\n\n        //Helpers\n        setGroundTexture() {\n            const groundMaterial = new StandardMaterial('ground_texture', this.scene);\n            groundMaterial.diffuseTexture = new Texture('./assets/textures/mars_1k_color.jpg');\n\n            this.ground.material = groundMaterial;\n        },\n    },\n}"]},"metadata":{},"sourceType":"module"}