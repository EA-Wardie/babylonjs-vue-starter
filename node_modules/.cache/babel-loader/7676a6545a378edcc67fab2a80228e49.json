{"ast":null,"code":"import { DeviceEventFactory } from \"../Helpers/eventFactory.js\";\nimport { DeviceType } from \"./deviceEnums.js\";\n/** @hidden */\n\nvar NativeDeviceInputSystem =\n/** @class */\nfunction () {\n  function NativeDeviceInputSystem(onDeviceConnected, onDeviceDisconnected, onInputChanged) {\n    var _this = this;\n\n    this._nativeInput = _native.DeviceInputSystem ? new _native.DeviceInputSystem(onDeviceConnected, onDeviceDisconnected, function (deviceType, deviceSlot, inputIndex, currentState) {\n      var evt = DeviceEventFactory.CreateDeviceEvent(deviceType, deviceSlot, inputIndex, currentState, _this);\n      onInputChanged(deviceType, deviceSlot, evt);\n    }) : this._createDummyNativeInput();\n  } // Public functions\n\n  /**\n   * Checks for current device input value, given an id and input index. Throws exception if requested device not initialized.\n   * @param deviceType Enum specifying device type\n   * @param deviceSlot \"Slot\" or index that device is referenced in\n   * @param inputIndex Id of input to be checked\n   * @returns Current value of input\n   */\n\n\n  NativeDeviceInputSystem.prototype.pollInput = function (deviceType, deviceSlot, inputIndex) {\n    return this._nativeInput.pollInput(deviceType, deviceSlot, inputIndex);\n  };\n  /**\n   * Check for a specific device in the DeviceInputSystem\n   * @param deviceType Type of device to check for\n   * @returns bool with status of device's existence\n   */\n\n\n  NativeDeviceInputSystem.prototype.isDeviceAvailable = function (deviceType) {\n    //TODO: FIx native side first\n    return deviceType === DeviceType.Mouse || deviceType === DeviceType.Touch;\n  };\n  /**\n   * Dispose of all the observables\n   */\n\n\n  NativeDeviceInputSystem.prototype.dispose = function () {\n    this._nativeInput.dispose();\n  };\n  /**\n   * For versions of BabylonNative that don't have the NativeInput plugin initialized, create a dummy version\n   * @returns Object with dummy functions\n   */\n\n\n  NativeDeviceInputSystem.prototype._createDummyNativeInput = function () {\n    var nativeInput = {\n      pollInput: function pollInput() {\n        return 0;\n      },\n      isDeviceAvailable: function isDeviceAvailable() {\n        return false;\n      },\n      dispose: function dispose() {}\n    };\n    return nativeInput;\n  };\n\n  return NativeDeviceInputSystem;\n}();\n\nexport { NativeDeviceInputSystem };","map":{"version":3,"mappings":"AAEA,SAASA,kBAAT,QAAmC,4BAAnC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAKA;;AACA;AAAA;AAAA;AAGI,mCACIC,iBADJ,EAEIC,oBAFJ,EAGIC,cAHJ,EAG6F;AAH7F;;AAKI,SAAKC,YAAL,GAAoBC,OAAO,CAACC,iBAAR,GACd,IAAID,OAAO,CAACC,iBAAZ,CAA8BL,iBAA9B,EAAiDC,oBAAjD,EAAuE,UAACK,UAAD,EAAaC,UAAb,EAAyBC,UAAzB,EAAqCC,YAArC,EAAiD;AACpH,UAAMC,GAAG,GAAGZ,kBAAkB,CAACa,iBAAnB,CAAqCL,UAArC,EAAiDC,UAAjD,EAA6DC,UAA7D,EAAyEC,YAAzE,EAAuFG,KAAvF,CAAZ;AAEAV,oBAAc,CAACI,UAAD,EAAaC,UAAb,EAAyBG,GAAzB,CAAd;AACH,KAJD,CADc,GAMd,KAAKG,uBAAL,EANN;AAOH,GAfL,CAiBI;;AACA;;;;;;;;;AAOOC,gDAAP,UAAiBR,UAAjB,EAAyCC,UAAzC,EAA6DC,UAA7D,EAA+E;AAC3E,WAAO,KAAKL,YAAL,CAAkBY,SAAlB,CAA4BT,UAA5B,EAAwCC,UAAxC,EAAoDC,UAApD,CAAP;AACH,GAFM;AAIP;;;;;;;AAKOM,wDAAP,UAAyBR,UAAzB,EAA+C;AAC3C;AACA,WAAOA,UAAU,KAAKP,UAAU,CAACiB,KAA1B,IAAmCV,UAAU,KAAKP,UAAU,CAACkB,KAApE;AACH,GAHM;AAKP;;;;;AAGOH,8CAAP;AACI,SAAKX,YAAL,CAAkBe,OAAlB;AACH,GAFM;AAIP;;;;;;AAIQJ,8DAAR;AACI,QAAMK,WAAW,GAAG;AAChBJ,eAAS,EAAE;AACP,eAAO,CAAP;AACH,OAHe;AAIhBK,uBAAiB,EAAE;AACf,eAAO,KAAP;AACH,OANe;AAOhBF,aAAO,EAAE,oBAAQ;AAPD,KAApB;AAUA,WAAOC,WAAP;AACH,GAZO;;AAaZ;AAAC,CA/DD","names":["DeviceEventFactory","DeviceType","onDeviceConnected","onDeviceDisconnected","onInputChanged","_nativeInput","_native","DeviceInputSystem","deviceType","deviceSlot","inputIndex","currentState","evt","CreateDeviceEvent","_this","_createDummyNativeInput","NativeDeviceInputSystem","pollInput","Mouse","Touch","dispose","nativeInput","isDeviceAvailable"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/DeviceInput/InputDevices/nativeDeviceInputSystem.ts"],"sourcesContent":["import type { INative } from \"../../Engines/Native/nativeInterfaces\";\r\nimport type { IUIEvent } from \"../../Events/deviceInputEvents\";\r\nimport { DeviceEventFactory } from \"../Helpers/eventFactory\";\r\nimport { DeviceType } from \"./deviceEnums\";\r\nimport type { IDeviceInputSystem } from \"./inputInterfaces\";\r\n\r\ndeclare const _native: INative;\r\n\r\n/** @hidden */\r\nexport class NativeDeviceInputSystem implements IDeviceInputSystem {\r\n    private readonly _nativeInput: IDeviceInputSystem;\r\n\r\n    public constructor(\r\n        onDeviceConnected: (deviceType: DeviceType, deviceSlot: number) => void,\r\n        onDeviceDisconnected: (deviceType: DeviceType, deviceSlot: number) => void,\r\n        onInputChanged: (deviceType: DeviceType, deviceSlot: number, eventData: IUIEvent) => void\r\n    ) {\r\n        this._nativeInput = _native.DeviceInputSystem\r\n            ? new _native.DeviceInputSystem(onDeviceConnected, onDeviceDisconnected, (deviceType, deviceSlot, inputIndex, currentState) => {\r\n                  const evt = DeviceEventFactory.CreateDeviceEvent(deviceType, deviceSlot, inputIndex, currentState, this);\r\n\r\n                  onInputChanged(deviceType, deviceSlot, evt);\r\n              })\r\n            : this._createDummyNativeInput();\r\n    }\r\n\r\n    // Public functions\r\n    /**\r\n     * Checks for current device input value, given an id and input index. Throws exception if requested device not initialized.\r\n     * @param deviceType Enum specifying device type\r\n     * @param deviceSlot \"Slot\" or index that device is referenced in\r\n     * @param inputIndex Id of input to be checked\r\n     * @returns Current value of input\r\n     */\r\n    public pollInput(deviceType: DeviceType, deviceSlot: number, inputIndex: number): number {\r\n        return this._nativeInput.pollInput(deviceType, deviceSlot, inputIndex);\r\n    }\r\n\r\n    /**\r\n     * Check for a specific device in the DeviceInputSystem\r\n     * @param deviceType Type of device to check for\r\n     * @returns bool with status of device's existence\r\n     */\r\n    public isDeviceAvailable(deviceType: DeviceType): boolean {\r\n        //TODO: FIx native side first\r\n        return deviceType === DeviceType.Mouse || deviceType === DeviceType.Touch;\r\n    }\r\n\r\n    /**\r\n     * Dispose of all the observables\r\n     */\r\n    public dispose(): void {\r\n        this._nativeInput.dispose();\r\n    }\r\n\r\n    /**\r\n     * For versions of BabylonNative that don't have the NativeInput plugin initialized, create a dummy version\r\n     * @returns Object with dummy functions\r\n     */\r\n    private _createDummyNativeInput() {\r\n        const nativeInput = {\r\n            pollInput: () => {\r\n                return 0;\r\n            },\r\n            isDeviceAvailable: () => {\r\n                return false;\r\n            },\r\n            dispose: () => {},\r\n        };\r\n\r\n        return nativeInput;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}