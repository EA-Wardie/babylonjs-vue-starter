{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { __extends } from \"tslib\";\nimport { WebXRFeaturesManager, WebXRFeatureName } from \"../webXRFeaturesManager.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature.js\";\n/**\n * A module that will automatically disable background meshes when entering AR and will enable them when leaving AR.\n */\n\nvar WebXRBackgroundRemover =\n/** @class */\nfunction (_super) {\n  __extends(WebXRBackgroundRemover, _super);\n  /**\n   * constructs a new background remover module\n   * @param _xrSessionManager the session manager for this module\n   * @param options read-only options to be used in this module\n   */\n\n\n  function WebXRBackgroundRemover(_xrSessionManager,\n  /**\n   * read-only options to be used in this module\n   */\n  options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, _xrSessionManager) || this;\n\n    _this.options = options;\n    /**\n     * registered observers will be triggered when the background state changes\n     */\n\n    _this.onBackgroundStateChangedObservable = new Observable();\n    return _this;\n  }\n  /**\n   * attach this feature\n   * Will usually be called by the features manager\n   *\n   * @returns true if successful.\n   */\n\n\n  WebXRBackgroundRemover.prototype.attach = function () {\n    this._setBackgroundState(false);\n\n    return _super.prototype.attach.call(this);\n  };\n  /**\n   * detach this feature.\n   * Will usually be called by the features manager\n   *\n   * @returns true if successful.\n   */\n\n\n  WebXRBackgroundRemover.prototype.detach = function () {\n    this._setBackgroundState(true);\n\n    return _super.prototype.detach.call(this);\n  };\n  /**\n   * Dispose this feature and all of the resources attached\n   */\n\n\n  WebXRBackgroundRemover.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.onBackgroundStateChangedObservable.clear();\n  };\n\n  WebXRBackgroundRemover.prototype._onXRFrame = function (_xrFrame) {// no-op\n  };\n\n  WebXRBackgroundRemover.prototype._setBackgroundState = function (newState) {\n    var scene = this._xrSessionManager.scene;\n\n    if (!this.options.ignoreEnvironmentHelper) {\n      if (this.options.environmentHelperRemovalFlags) {\n        if (this.options.environmentHelperRemovalFlags.skyBox) {\n          var backgroundSkybox = scene.getMeshByName(\"BackgroundSkybox\");\n\n          if (backgroundSkybox) {\n            backgroundSkybox.setEnabled(newState);\n          }\n        }\n\n        if (this.options.environmentHelperRemovalFlags.ground) {\n          var backgroundPlane = scene.getMeshByName(\"BackgroundPlane\");\n\n          if (backgroundPlane) {\n            backgroundPlane.setEnabled(newState);\n          }\n        }\n      } else {\n        var backgroundHelper = scene.getMeshByName(\"BackgroundHelper\");\n\n        if (backgroundHelper) {\n          backgroundHelper.setEnabled(newState);\n        }\n      }\n    }\n\n    if (this.options.backgroundMeshes) {\n      this.options.backgroundMeshes.forEach(function (mesh) {\n        return mesh.setEnabled(newState);\n      });\n    }\n\n    this.onBackgroundStateChangedObservable.notifyObservers(newState);\n  };\n  /**\n   * The module's name\n   */\n\n\n  WebXRBackgroundRemover.Name = WebXRFeatureName.BACKGROUND_REMOVER;\n  /**\n   * The (Babylon) version of this module.\n   * This is an integer representing the implementation version.\n   * This number does not correspond to the WebXR specs version\n   */\n\n  WebXRBackgroundRemover.Version = 1;\n  return WebXRBackgroundRemover;\n}(WebXRAbstractFeature);\n\nexport { WebXRBackgroundRemover }; //register the plugin\n\nWebXRFeaturesManager.AddWebXRFeature(WebXRBackgroundRemover.Name, function (xrSessionManager, options) {\n  return function () {\n    return new WebXRBackgroundRemover(xrSessionManager, options);\n  };\n}, WebXRBackgroundRemover.Version, true);","map":{"version":3,"mappings":";;;;AAAA,SAASA,oBAAT,EAA+BC,gBAA/B,QAAuD,4BAAvD;AAGA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,oBAAT,QAAqC,2BAArC;AA8BA;;;;AAGA;AAAA;AAAA;AAA4CC;AAiBxC;;;;;;;AAKA,kCACIC,iBADJ;AAEI;;;AAGgBC,SALpB,EAKgE;AAA5C;AAAAA;AAA4C;;AALhE,gBAOIC,kBAAMF,iBAAN,KAAwB,IAP5B;;AAKoBG;AAfpB;;;;AAGOA,+CAA0D,IAAIN,UAAJ,EAA1D;;AAeN;AAED;;;;;;;;AAMOO,4CAAP;AACI,SAAKC,mBAAL,CAAyB,KAAzB;;AACA,WAAOH,iBAAMI,MAAN,CAAYC,IAAZ,CAAY,IAAZ,CAAP;AACH,GAHM;AAKP;;;;;;;;AAMOH,4CAAP;AACI,SAAKC,mBAAL,CAAyB,IAAzB;;AACA,WAAOH,iBAAMM,MAAN,CAAYD,IAAZ,CAAY,IAAZ,CAAP;AACH,GAHM;AAKP;;;;;AAGOH,6CAAP;AACIF,qBAAMO,OAAN,CAAaF,IAAb,CAAa,IAAb;;AACA,SAAKG,kCAAL,CAAwCC,KAAxC;AACH,GAHM;;AAKGP,gDAAV,UAAqBQ,QAArB,EAAsC,CAClC;AACH,GAFS;;AAIFR,yDAAR,UAA4BS,QAA5B,EAA6C;AACzC,QAAMC,KAAK,GAAG,KAAKd,iBAAL,CAAuBc,KAArC;;AACA,QAAI,CAAC,KAAKb,OAAL,CAAac,uBAAlB,EAA2C;AACvC,UAAI,KAAKd,OAAL,CAAae,6BAAjB,EAAgD;AAC5C,YAAI,KAAKf,OAAL,CAAae,6BAAb,CAA2CC,MAA/C,EAAuD;AACnD,cAAMC,gBAAgB,GAAGJ,KAAK,CAACK,aAAN,CAAoB,kBAApB,CAAzB;;AACA,cAAID,gBAAJ,EAAsB;AAClBA,4BAAgB,CAACE,UAAjB,CAA4BP,QAA5B;AACH;AACJ;;AACD,YAAI,KAAKZ,OAAL,CAAae,6BAAb,CAA2CK,MAA/C,EAAuD;AACnD,cAAMC,eAAe,GAAGR,KAAK,CAACK,aAAN,CAAoB,iBAApB,CAAxB;;AACA,cAAIG,eAAJ,EAAqB;AACjBA,2BAAe,CAACF,UAAhB,CAA2BP,QAA3B;AACH;AACJ;AACJ,OAbD,MAaO;AACH,YAAMU,gBAAgB,GAAGT,KAAK,CAACK,aAAN,CAAoB,kBAApB,CAAzB;;AACA,YAAII,gBAAJ,EAAsB;AAClBA,0BAAgB,CAACH,UAAjB,CAA4BP,QAA5B;AACH;AACJ;AACJ;;AAED,QAAI,KAAKZ,OAAL,CAAauB,gBAAjB,EAAmC;AAC/B,WAAKvB,OAAL,CAAauB,gBAAb,CAA8BC,OAA9B,CAAsC,UAACC,IAAD,EAAK;AAAK,mBAAI,CAACN,UAAL,CAAgBP,QAAhB;AAAyB,OAAzE;AACH;;AAED,SAAKH,kCAAL,CAAwCiB,eAAxC,CAAwDd,QAAxD;AACH,GA7BO;AAjER;;;;;AAGuBT,gCAAOR,gBAAgB,CAACgC,kBAAxB;AACvB;;;;;;AAKuBxB,mCAAU,CAAV;AAsF3B;AAAC,CAhGD,CAA4CN,oBAA5C;;SAAaM,yB,CAkGb;;AACAT,oBAAoB,CAACkC,eAArB,CACIzB,sBAAsB,CAAC0B,IAD3B,EAEI,UAACC,gBAAD,EAAmB9B,OAAnB,EAA0B;AACtB,SAAO;AAAM,eAAIG,sBAAJ,CAA2B2B,gBAA3B,EAA6C9B,OAA7C;AAAqD,GAAlE;AACH,CAJL,EAKIG,sBAAsB,CAAC4B,OAL3B,EAMI,IANJ","names":["WebXRFeaturesManager","WebXRFeatureName","Observable","WebXRAbstractFeature","__extends","_xrSessionManager","options","_super","_this","WebXRBackgroundRemover","_setBackgroundState","attach","call","detach","dispose","onBackgroundStateChangedObservable","clear","_xrFrame","newState","scene","ignoreEnvironmentHelper","environmentHelperRemovalFlags","skyBox","backgroundSkybox","getMeshByName","setEnabled","ground","backgroundPlane","backgroundHelper","backgroundMeshes","forEach","mesh","notifyObservers","BACKGROUND_REMOVER","AddWebXRFeature","Name","xrSessionManager","Version"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/XR/features/WebXRBackgroundRemover.ts"],"sourcesContent":["import { WebXRFeaturesManager, WebXRFeatureName } from \"../webXRFeaturesManager\";\r\nimport type { WebXRSessionManager } from \"../webXRSessionManager\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature\";\r\n\r\n/**\r\n * Options interface for the background remover plugin\r\n */\r\nexport interface IWebXRBackgroundRemoverOptions {\r\n    /**\r\n     * Further background meshes to disable when entering AR\r\n     */\r\n    backgroundMeshes?: AbstractMesh[];\r\n    /**\r\n     * flags to configure the removal of the environment helper.\r\n     * If not set, the entire background will be removed. If set, flags should be set as well.\r\n     */\r\n    environmentHelperRemovalFlags?: {\r\n        /**\r\n         * Should the skybox be removed (default false)\r\n         */\r\n        skyBox?: boolean;\r\n        /**\r\n         * Should the ground be removed (default false)\r\n         */\r\n        ground?: boolean;\r\n    };\r\n    /**\r\n     * don't disable the environment helper\r\n     */\r\n    ignoreEnvironmentHelper?: boolean;\r\n}\r\n\r\n/**\r\n * A module that will automatically disable background meshes when entering AR and will enable them when leaving AR.\r\n */\r\nexport class WebXRBackgroundRemover extends WebXRAbstractFeature {\r\n    /**\r\n     * The module's name\r\n     */\r\n    public static readonly Name = WebXRFeatureName.BACKGROUND_REMOVER;\r\n    /**\r\n     * The (Babylon) version of this module.\r\n     * This is an integer representing the implementation version.\r\n     * This number does not correspond to the WebXR specs version\r\n     */\r\n    public static readonly Version = 1;\r\n\r\n    /**\r\n     * registered observers will be triggered when the background state changes\r\n     */\r\n    public onBackgroundStateChangedObservable: Observable<boolean> = new Observable();\r\n\r\n    /**\r\n     * constructs a new background remover module\r\n     * @param _xrSessionManager the session manager for this module\r\n     * @param options read-only options to be used in this module\r\n     */\r\n    constructor(\r\n        _xrSessionManager: WebXRSessionManager,\r\n        /**\r\n         * read-only options to be used in this module\r\n         */\r\n        public readonly options: IWebXRBackgroundRemoverOptions = {}\r\n    ) {\r\n        super(_xrSessionManager);\r\n    }\r\n\r\n    /**\r\n     * attach this feature\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    public attach(): boolean {\r\n        this._setBackgroundState(false);\r\n        return super.attach();\r\n    }\r\n\r\n    /**\r\n     * detach this feature.\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    public detach(): boolean {\r\n        this._setBackgroundState(true);\r\n        return super.detach();\r\n    }\r\n\r\n    /**\r\n     * Dispose this feature and all of the resources attached\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n        this.onBackgroundStateChangedObservable.clear();\r\n    }\r\n\r\n    protected _onXRFrame(_xrFrame: XRFrame) {\r\n        // no-op\r\n    }\r\n\r\n    private _setBackgroundState(newState: boolean) {\r\n        const scene = this._xrSessionManager.scene;\r\n        if (!this.options.ignoreEnvironmentHelper) {\r\n            if (this.options.environmentHelperRemovalFlags) {\r\n                if (this.options.environmentHelperRemovalFlags.skyBox) {\r\n                    const backgroundSkybox = scene.getMeshByName(\"BackgroundSkybox\");\r\n                    if (backgroundSkybox) {\r\n                        backgroundSkybox.setEnabled(newState);\r\n                    }\r\n                }\r\n                if (this.options.environmentHelperRemovalFlags.ground) {\r\n                    const backgroundPlane = scene.getMeshByName(\"BackgroundPlane\");\r\n                    if (backgroundPlane) {\r\n                        backgroundPlane.setEnabled(newState);\r\n                    }\r\n                }\r\n            } else {\r\n                const backgroundHelper = scene.getMeshByName(\"BackgroundHelper\");\r\n                if (backgroundHelper) {\r\n                    backgroundHelper.setEnabled(newState);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.options.backgroundMeshes) {\r\n            this.options.backgroundMeshes.forEach((mesh) => mesh.setEnabled(newState));\r\n        }\r\n\r\n        this.onBackgroundStateChangedObservable.notifyObservers(newState);\r\n    }\r\n}\r\n\r\n//register the plugin\r\nWebXRFeaturesManager.AddWebXRFeature(\r\n    WebXRBackgroundRemover.Name,\r\n    (xrSessionManager, options) => {\r\n        return () => new WebXRBackgroundRemover(xrSessionManager, options);\r\n    },\r\n    WebXRBackgroundRemover.Version,\r\n    true\r\n);\r\n"]},"metadata":{},"sourceType":"module"}