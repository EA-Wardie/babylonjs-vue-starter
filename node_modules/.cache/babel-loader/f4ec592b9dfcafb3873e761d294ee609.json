{"ast":null,"code":"import \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport { __extends } from \"tslib\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { Gizmo } from \"./gizmo.js\";\nimport { AxisDragGizmo } from \"./axisDragGizmo.js\";\nimport { PlaneDragGizmo } from \"./planeDragGizmo.js\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer.js\";\n/**\n * Gizmo that enables dragging a mesh along 3 axis\n */\n\nvar PositionGizmo =\n/** @class */\nfunction (_super) {\n  __extends(PositionGizmo, _super);\n  /**\n   * Creates a PositionGizmo\n   * @param gizmoLayer The utility layer the gizmo will be added to\n    @param thickness display gizmo axis thickness\n   * @param gizmoManager\n   */\n\n\n  function PositionGizmo(gizmoLayer, thickness, gizmoManager) {\n    if (gizmoLayer === void 0) {\n      gizmoLayer = UtilityLayerRenderer.DefaultUtilityLayer;\n    }\n\n    if (thickness === void 0) {\n      thickness = 1;\n    }\n\n    var _this = _super.call(this, gizmoLayer) || this;\n    /**\n     * private variables\n     */\n\n\n    _this._meshAttached = null;\n    _this._nodeAttached = null;\n    _this._observables = [];\n    /** Node Caching for quick lookup */\n\n    _this._gizmoAxisCache = new Map();\n    /** Fires an event when any of it's sub gizmos are dragged */\n\n    _this.onDragStartObservable = new Observable();\n    /** Fires an event when any of it's sub gizmos are released from dragging */\n\n    _this.onDragEndObservable = new Observable();\n    /**\n     * If set to true, planar drag is enabled\n     */\n\n    _this._planarGizmoEnabled = false;\n    _this.xGizmo = new AxisDragGizmo(new Vector3(1, 0, 0), Color3.Red().scale(0.5), gizmoLayer, _this, thickness);\n    _this.yGizmo = new AxisDragGizmo(new Vector3(0, 1, 0), Color3.Green().scale(0.5), gizmoLayer, _this, thickness);\n    _this.zGizmo = new AxisDragGizmo(new Vector3(0, 0, 1), Color3.Blue().scale(0.5), gizmoLayer, _this, thickness);\n    _this.xPlaneGizmo = new PlaneDragGizmo(new Vector3(1, 0, 0), Color3.Red().scale(0.5), _this.gizmoLayer, _this);\n    _this.yPlaneGizmo = new PlaneDragGizmo(new Vector3(0, 1, 0), Color3.Green().scale(0.5), _this.gizmoLayer, _this);\n    _this.zPlaneGizmo = new PlaneDragGizmo(new Vector3(0, 0, 1), Color3.Blue().scale(0.5), _this.gizmoLayer, _this); // Relay drag events\n\n    [_this.xGizmo, _this.yGizmo, _this.zGizmo, _this.xPlaneGizmo, _this.yPlaneGizmo, _this.zPlaneGizmo].forEach(function (gizmo) {\n      gizmo.dragBehavior.onDragStartObservable.add(function () {\n        _this.onDragStartObservable.notifyObservers({});\n      });\n      gizmo.dragBehavior.onDragEndObservable.add(function () {\n        _this.onDragEndObservable.notifyObservers({});\n      });\n    });\n    _this.attachedMesh = null;\n\n    if (gizmoManager) {\n      gizmoManager.addToAxisCache(_this._gizmoAxisCache);\n    } else {\n      // Only subscribe to pointer event if gizmoManager isnt\n      Gizmo.GizmoAxisPointerObserver(gizmoLayer, _this._gizmoAxisCache);\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(PositionGizmo.prototype, \"attachedMesh\", {\n    get: function get() {\n      return this._meshAttached;\n    },\n    set: function set(mesh) {\n      this._meshAttached = mesh;\n      this._nodeAttached = mesh;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n        if (gizmo.isEnabled) {\n          gizmo.attachedMesh = mesh;\n        } else {\n          gizmo.attachedMesh = null;\n        }\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PositionGizmo.prototype, \"attachedNode\", {\n    get: function get() {\n      return this._nodeAttached;\n    },\n    set: function set(node) {\n      this._meshAttached = null;\n      this._nodeAttached = node;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n        if (gizmo.isEnabled) {\n          gizmo.attachedNode = node;\n        } else {\n          gizmo.attachedNode = null;\n        }\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PositionGizmo.prototype, \"isHovered\", {\n    /**\n     * True when the mouse pointer is hovering a gizmo mesh\n     */\n    get: function get() {\n      var hovered = false;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n        hovered = hovered || gizmo.isHovered;\n      });\n      return hovered;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PositionGizmo.prototype, \"planarGizmoEnabled\", {\n    get: function get() {\n      return this._planarGizmoEnabled;\n    },\n\n    /**\n     * If the planar drag gizmo is enabled\n     * setting this will enable/disable XY, XZ and YZ planes regardless of individual gizmo settings.\n     */\n    set: function set(value) {\n      var _this = this;\n\n      this._planarGizmoEnabled = value;\n      [this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n        if (gizmo) {\n          gizmo.isEnabled = value;\n\n          if (value) {\n            if (gizmo.attachedMesh) {\n              gizmo.attachedMesh = _this.attachedMesh;\n            } else {\n              gizmo.attachedNode = _this.attachedNode;\n            }\n          }\n        }\n      }, this);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PositionGizmo.prototype, \"updateGizmoRotationToMatchAttachedMesh\", {\n    get: function get() {\n      return this._updateGizmoRotationToMatchAttachedMesh;\n    },\n    set: function set(value) {\n      this._updateGizmoRotationToMatchAttachedMesh = value;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n        if (gizmo) {\n          gizmo.updateGizmoRotationToMatchAttachedMesh = value;\n        }\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PositionGizmo.prototype, \"snapDistance\", {\n    get: function get() {\n      return this._snapDistance;\n    },\n\n    /**\n     * Drag distance in babylon units that the gizmo will snap to when dragged (Default: 0)\n     */\n    set: function set(value) {\n      this._snapDistance = value;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n        if (gizmo) {\n          gizmo.snapDistance = value;\n        }\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PositionGizmo.prototype, \"scaleRatio\", {\n    get: function get() {\n      return this._scaleRatio;\n    },\n\n    /**\n     * Ratio for the scale of the gizmo (Default: 1)\n     */\n    set: function set(value) {\n      this._scaleRatio = value;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n        if (gizmo) {\n          gizmo.scaleRatio = value;\n        }\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Builds Gizmo Axis Cache to enable features such as hover state preservation and graying out other axis during manipulation\n   * @param mesh Axis gizmo mesh\n   * @param cache Gizmo axis definition used for reactive gizmo UI\n   */\n\n  PositionGizmo.prototype.addToAxisCache = function (mesh, cache) {\n    this._gizmoAxisCache.set(mesh, cache);\n  };\n  /**\n   * Disposes of the gizmo\n   */\n\n\n  PositionGizmo.prototype.dispose = function () {\n    var _this = this;\n\n    [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n      if (gizmo) {\n        gizmo.dispose();\n      }\n    });\n\n    this._observables.forEach(function (obs) {\n      _this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(obs);\n    });\n\n    this.onDragStartObservable.clear();\n    this.onDragEndObservable.clear();\n  };\n  /**\n   * CustomMeshes are not supported by this gizmo\n   */\n\n\n  PositionGizmo.prototype.setCustomMesh = function () {\n    Logger.Error(\"Custom meshes are not supported on this gizmo, please set the custom meshes on the gizmos contained within this one (gizmo.xGizmo, gizmo.yGizmo, gizmo.zGizmo,gizmo.xPlaneGizmo, gizmo.yPlaneGizmo, gizmo.zPlaneGizmo)\");\n  };\n\n  return PositionGizmo;\n}(Gizmo);\n\nexport { PositionGizmo };","map":{"version":3,"mappings":"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","names":["Logger","Observable","Vector3","Color3","Gizmo","AxisDragGizmo","PlaneDragGizmo","UtilityLayerRenderer","__extends","gizmoLayer","thickness","gizmoManager","DefaultUtilityLayer","_super","_this","Map","xGizmo","Red","scale","yGizmo","Green","zGizmo","Blue","xPlaneGizmo","yPlaneGizmo","zPlaneGizmo","forEach","gizmo","dragBehavior","onDragStartObservable","add","notifyObservers","onDragEndObservable","attachedMesh","addToAxisCache","_gizmoAxisCache","GizmoAxisPointerObserver","Object","PositionGizmo","_meshAttached","mesh","_nodeAttached","isEnabled","node","attachedNode","hovered","isHovered","_planarGizmoEnabled","value","_updateGizmoRotationToMatchAttachedMesh","updateGizmoRotationToMatchAttachedMesh","_snapDistance","snapDistance","_scaleRatio","scaleRatio","cache","set","dispose","_observables","obs","utilityLayerScene","onPointerObservable","remove","clear","Error"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Gizmos/positionGizmo.ts"],"sourcesContent":["import { Logger } from \"../Misc/logger\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Node } from \"../node\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { GizmoAxisCache } from \"./gizmo\";\r\nimport { Gizmo } from \"./gizmo\";\r\nimport { AxisDragGizmo } from \"./axisDragGizmo\";\r\nimport { PlaneDragGizmo } from \"./planeDragGizmo\";\r\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\r\nimport type { PointerInfo } from \"../Events/pointerEvents\";\r\nimport type { GizmoManager } from \"./gizmoManager\";\r\n/**\r\n * Gizmo that enables dragging a mesh along 3 axis\r\n */\r\nexport class PositionGizmo extends Gizmo {\r\n    /**\r\n     * Internal gizmo used for interactions on the x axis\r\n     */\r\n    public xGizmo: AxisDragGizmo;\r\n    /**\r\n     * Internal gizmo used for interactions on the y axis\r\n     */\r\n    public yGizmo: AxisDragGizmo;\r\n    /**\r\n     * Internal gizmo used for interactions on the z axis\r\n     */\r\n    public zGizmo: AxisDragGizmo;\r\n    /**\r\n     * Internal gizmo used for interactions on the yz plane\r\n     */\r\n    public xPlaneGizmo: PlaneDragGizmo;\r\n    /**\r\n     * Internal gizmo used for interactions on the xz plane\r\n     */\r\n    public yPlaneGizmo: PlaneDragGizmo;\r\n    /**\r\n     * Internal gizmo used for interactions on the xy plane\r\n     */\r\n    public zPlaneGizmo: PlaneDragGizmo;\r\n\r\n    /**\r\n     * private variables\r\n     */\r\n    private _meshAttached: Nullable<AbstractMesh> = null;\r\n    private _nodeAttached: Nullable<Node> = null;\r\n    private _snapDistance: number;\r\n    private _observables: Observer<PointerInfo>[] = [];\r\n\r\n    /** Node Caching for quick lookup */\r\n    private _gizmoAxisCache: Map<Mesh, GizmoAxisCache> = new Map();\r\n\r\n    /** Fires an event when any of it's sub gizmos are dragged */\r\n    public onDragStartObservable = new Observable();\r\n    /** Fires an event when any of it's sub gizmos are released from dragging */\r\n    public onDragEndObservable = new Observable();\r\n\r\n    /**\r\n     * If set to true, planar drag is enabled\r\n     */\r\n    private _planarGizmoEnabled = false;\r\n\r\n    public get attachedMesh() {\r\n        return this._meshAttached;\r\n    }\r\n    public set attachedMesh(mesh: Nullable<AbstractMesh>) {\r\n        this._meshAttached = mesh;\r\n        this._nodeAttached = mesh;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach((gizmo) => {\r\n            if (gizmo.isEnabled) {\r\n                gizmo.attachedMesh = mesh;\r\n            } else {\r\n                gizmo.attachedMesh = null;\r\n            }\r\n        });\r\n    }\r\n\r\n    public get attachedNode() {\r\n        return this._nodeAttached;\r\n    }\r\n    public set attachedNode(node: Nullable<Node>) {\r\n        this._meshAttached = null;\r\n        this._nodeAttached = node;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach((gizmo) => {\r\n            if (gizmo.isEnabled) {\r\n                gizmo.attachedNode = node;\r\n            } else {\r\n                gizmo.attachedNode = null;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * True when the mouse pointer is hovering a gizmo mesh\r\n     */\r\n    public get isHovered() {\r\n        let hovered = false;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach((gizmo) => {\r\n            hovered = hovered || gizmo.isHovered;\r\n        });\r\n        return hovered;\r\n    }\r\n\r\n    /**\r\n     * Creates a PositionGizmo\r\n     * @param gizmoLayer The utility layer the gizmo will be added to\r\n      @param thickness display gizmo axis thickness\r\n     * @param gizmoManager\r\n     */\r\n    constructor(gizmoLayer: UtilityLayerRenderer = UtilityLayerRenderer.DefaultUtilityLayer, thickness: number = 1, gizmoManager?: GizmoManager) {\r\n        super(gizmoLayer);\r\n        this.xGizmo = new AxisDragGizmo(new Vector3(1, 0, 0), Color3.Red().scale(0.5), gizmoLayer, this, thickness);\r\n        this.yGizmo = new AxisDragGizmo(new Vector3(0, 1, 0), Color3.Green().scale(0.5), gizmoLayer, this, thickness);\r\n        this.zGizmo = new AxisDragGizmo(new Vector3(0, 0, 1), Color3.Blue().scale(0.5), gizmoLayer, this, thickness);\r\n\r\n        this.xPlaneGizmo = new PlaneDragGizmo(new Vector3(1, 0, 0), Color3.Red().scale(0.5), this.gizmoLayer, this);\r\n        this.yPlaneGizmo = new PlaneDragGizmo(new Vector3(0, 1, 0), Color3.Green().scale(0.5), this.gizmoLayer, this);\r\n        this.zPlaneGizmo = new PlaneDragGizmo(new Vector3(0, 0, 1), Color3.Blue().scale(0.5), this.gizmoLayer, this);\r\n        // Relay drag events\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach((gizmo) => {\r\n            gizmo.dragBehavior.onDragStartObservable.add(() => {\r\n                this.onDragStartObservable.notifyObservers({});\r\n            });\r\n            gizmo.dragBehavior.onDragEndObservable.add(() => {\r\n                this.onDragEndObservable.notifyObservers({});\r\n            });\r\n        });\r\n\r\n        this.attachedMesh = null;\r\n\r\n        if (gizmoManager) {\r\n            gizmoManager.addToAxisCache(this._gizmoAxisCache);\r\n        } else {\r\n            // Only subscribe to pointer event if gizmoManager isnt\r\n            Gizmo.GizmoAxisPointerObserver(gizmoLayer, this._gizmoAxisCache);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If the planar drag gizmo is enabled\r\n     * setting this will enable/disable XY, XZ and YZ planes regardless of individual gizmo settings.\r\n     */\r\n    public set planarGizmoEnabled(value: boolean) {\r\n        this._planarGizmoEnabled = value;\r\n        [this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach((gizmo) => {\r\n            if (gizmo) {\r\n                gizmo.isEnabled = value;\r\n                if (value) {\r\n                    if (gizmo.attachedMesh) {\r\n                        gizmo.attachedMesh = this.attachedMesh;\r\n                    } else {\r\n                        gizmo.attachedNode = this.attachedNode;\r\n                    }\r\n                }\r\n            }\r\n        }, this);\r\n    }\r\n    public get planarGizmoEnabled(): boolean {\r\n        return this._planarGizmoEnabled;\r\n    }\r\n\r\n    public set updateGizmoRotationToMatchAttachedMesh(value: boolean) {\r\n        this._updateGizmoRotationToMatchAttachedMesh = value;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach((gizmo) => {\r\n            if (gizmo) {\r\n                gizmo.updateGizmoRotationToMatchAttachedMesh = value;\r\n            }\r\n        });\r\n    }\r\n    public get updateGizmoRotationToMatchAttachedMesh() {\r\n        return this._updateGizmoRotationToMatchAttachedMesh;\r\n    }\r\n\r\n    /**\r\n     * Drag distance in babylon units that the gizmo will snap to when dragged (Default: 0)\r\n     */\r\n    public set snapDistance(value: number) {\r\n        this._snapDistance = value;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach((gizmo) => {\r\n            if (gizmo) {\r\n                gizmo.snapDistance = value;\r\n            }\r\n        });\r\n    }\r\n    public get snapDistance() {\r\n        return this._snapDistance;\r\n    }\r\n\r\n    /**\r\n     * Ratio for the scale of the gizmo (Default: 1)\r\n     */\r\n    public set scaleRatio(value: number) {\r\n        this._scaleRatio = value;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach((gizmo) => {\r\n            if (gizmo) {\r\n                gizmo.scaleRatio = value;\r\n            }\r\n        });\r\n    }\r\n    public get scaleRatio() {\r\n        return this._scaleRatio;\r\n    }\r\n\r\n    /**\r\n     * Builds Gizmo Axis Cache to enable features such as hover state preservation and graying out other axis during manipulation\r\n     * @param mesh Axis gizmo mesh\r\n     * @param cache Gizmo axis definition used for reactive gizmo UI\r\n     */\r\n    public addToAxisCache(mesh: Mesh, cache: GizmoAxisCache) {\r\n        this._gizmoAxisCache.set(mesh, cache);\r\n    }\r\n\r\n    /**\r\n     * Disposes of the gizmo\r\n     */\r\n    public dispose() {\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach((gizmo) => {\r\n            if (gizmo) {\r\n                gizmo.dispose();\r\n            }\r\n        });\r\n        this._observables.forEach((obs) => {\r\n            this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(obs);\r\n        });\r\n        this.onDragStartObservable.clear();\r\n        this.onDragEndObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * CustomMeshes are not supported by this gizmo\r\n     */\r\n    public setCustomMesh() {\r\n        Logger.Error(\r\n            \"Custom meshes are not supported on this gizmo, please set the custom meshes on the gizmos contained within this one (gizmo.xGizmo, gizmo.yGizmo, gizmo.zGizmo,gizmo.xPlaneGizmo, gizmo.yPlaneGizmo, gizmo.zPlaneGizmo)\"\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}