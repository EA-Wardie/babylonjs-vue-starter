{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { WebXRLayerWrapper } from \"./webXRLayerWrapper.js\";\nimport { WebXRLayerRenderTargetTextureProvider } from \"./webXRRenderTargetTextureProvider.js\";\n/**\n * Wraps xr webgl layers.\n * @hidden\n */\n\nvar WebXRWebGLLayerWrapper =\n/** @class */\nfunction (_super) {\n  __extends(WebXRWebGLLayerWrapper, _super);\n  /**\n   * @param layer is the layer to be wrapped.\n   * @returns a new WebXRLayerWrapper wrapping the provided XRWebGLLayer.\n   */\n\n\n  function WebXRWebGLLayerWrapper(layer) {\n    var _this = _super.call(this, function () {\n      return layer.framebufferWidth;\n    }, function () {\n      return layer.framebufferHeight;\n    }, layer, \"XRWebGLLayer\", function (sessionManager) {\n      return new WebXRWebGLLayerRenderTargetTextureProvider(sessionManager.scene, _this);\n    }) || this;\n\n    _this.layer = layer;\n    return _this;\n  }\n\n  return WebXRWebGLLayerWrapper;\n}(WebXRLayerWrapper);\n\nexport { WebXRWebGLLayerWrapper };\n/**\n * Provides render target textures and other important rendering information for a given XRWebGLLayer.\n * @hidden\n */\n\nvar WebXRWebGLLayerRenderTargetTextureProvider =\n/** @class */\nfunction (_super) {\n  __extends(WebXRWebGLLayerRenderTargetTextureProvider, _super);\n\n  function WebXRWebGLLayerRenderTargetTextureProvider(scene, layerWrapper) {\n    var _this = _super.call(this, scene, layerWrapper) || this;\n\n    _this.layerWrapper = layerWrapper;\n    _this._layer = layerWrapper.layer;\n    _this._framebufferDimensions = {\n      framebufferWidth: _this._layer.framebufferWidth,\n      framebufferHeight: _this._layer.framebufferHeight\n    };\n    return _this;\n  }\n\n  WebXRWebGLLayerRenderTargetTextureProvider.prototype.trySetViewportForView = function (viewport, view) {\n    var xrViewport = this._layer.getViewport(view);\n\n    var framebufferWidth = this._framebufferDimensions.framebufferWidth;\n    var framebufferHeight = this._framebufferDimensions.framebufferHeight;\n    viewport.x = xrViewport.x / framebufferWidth;\n    viewport.y = xrViewport.y / framebufferHeight;\n    viewport.width = xrViewport.width / framebufferWidth;\n    viewport.height = xrViewport.height / framebufferHeight;\n    return true;\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  WebXRWebGLLayerRenderTargetTextureProvider.prototype.getRenderTargetTextureForEye = function (eye) {\n    var layerWidth = this._layer.framebufferWidth;\n    var layerHeight = this._layer.framebufferHeight;\n    var framebuffer = this._layer.framebuffer;\n\n    if (!this._rtt || layerWidth !== this._framebufferDimensions.framebufferWidth || layerHeight !== this._framebufferDimensions.framebufferHeight || framebuffer !== this._framebuffer) {\n      this._rtt = this._createRenderTargetTexture(layerWidth, layerHeight, framebuffer);\n      this._framebufferDimensions.framebufferWidth = layerWidth;\n      this._framebufferDimensions.framebufferHeight = layerHeight;\n      this._framebuffer = framebuffer;\n    }\n\n    return this._rtt;\n  };\n\n  WebXRWebGLLayerRenderTargetTextureProvider.prototype.getRenderTargetTextureForView = function (view) {\n    return this.getRenderTargetTextureForEye(view.eye);\n  };\n\n  return WebXRWebGLLayerRenderTargetTextureProvider;\n}(WebXRLayerRenderTargetTextureProvider);\n\nexport { WebXRWebGLLayerRenderTargetTextureProvider };","map":{"version":3,"mappings":";AAIA,SAASA,iBAAT,QAAkC,wBAAlC;AACA,SAASC,qCAAT,QAAsD,uCAAtD;AAEA;;;;;AAIA;AAAA;AAAA;AAA4CC;AACxC;;;;;;AAIA,kCAA4BC,KAA5B,EAA+C;AAA/C,gBACIC,kBACI;AAAM,kBAAK,CAACC,gBAAN;AAAsB,KADhC,EAEI;AAAM,kBAAK,CAACC,iBAAN;AAAuB,KAFjC,EAGIH,KAHJ,EAII,cAJJ,EAKI,UAACI,cAAD,EAAe;AAAK,iBAAIC,0CAAJ,CAA+CD,cAAc,CAACE,KAA9D,EAAqEC,KAArE;AAA0E,KALlG,KAMC,IAPL;;AAA4BA;;AAQ3B;;AACL;AAAC,CAdD,CAA4CV,iBAA5C;;;AAgBA;;;;;AAIA;AAAA;AAAA;AAAgEE;;AAO5D,sDAAYO,KAAZ,EAA0CE,YAA1C,EAA8E;AAA9E,gBACIP,kBAAMK,KAAN,EAAaE,YAAb,KAA0B,IAD9B;;AAA0CD;AAEtCA,SAAI,CAACE,MAAL,GAAcD,YAAY,CAACR,KAA3B;AACAO,SAAI,CAACG,sBAAL,GAA8B;AAC1BR,sBAAgB,EAAEK,KAAI,CAACE,MAAL,CAAYP,gBADJ;AAE1BC,uBAAiB,EAAEI,KAAI,CAACE,MAAL,CAAYN;AAFL,KAA9B;;AAIH;;AAEME,+EAAP,UAA6BM,QAA7B,EAAiDC,IAAjD,EAA6D;AACzD,QAAMC,UAAU,GAAG,KAAKJ,MAAL,CAAYK,WAAZ,CAAwBF,IAAxB,CAAnB;;AACA,QAAMV,gBAAgB,GAAG,KAAKQ,sBAAL,CAA4BR,gBAArD;AACA,QAAMC,iBAAiB,GAAG,KAAKO,sBAAL,CAA4BP,iBAAtD;AACAQ,YAAQ,CAACI,CAAT,GAAaF,UAAU,CAACE,CAAX,GAAeb,gBAA5B;AACAS,YAAQ,CAACK,CAAT,GAAaH,UAAU,CAACG,CAAX,GAAeb,iBAA5B;AACAQ,YAAQ,CAACM,KAAT,GAAiBJ,UAAU,CAACI,KAAX,GAAmBf,gBAApC;AACAS,YAAQ,CAACO,MAAT,GAAkBL,UAAU,CAACK,MAAX,GAAoBf,iBAAtC;AACA,WAAO,IAAP;AACH,GATM,CAhBX,CA2BI;;;AACOE,sFAAP,UAAoCc,GAApC,EAA8C;AAC1C,QAAMC,UAAU,GAAG,KAAKX,MAAL,CAAYP,gBAA/B;AACA,QAAMmB,WAAW,GAAG,KAAKZ,MAAL,CAAYN,iBAAhC;AACA,QAAMmB,WAAW,GAAG,KAAKb,MAAL,CAAYa,WAAhC;;AAEA,QACI,CAAC,KAAKC,IAAN,IACAH,UAAU,KAAK,KAAKV,sBAAL,CAA4BR,gBAD3C,IAEAmB,WAAW,KAAK,KAAKX,sBAAL,CAA4BP,iBAF5C,IAGAmB,WAAW,KAAK,KAAKE,YAJzB,EAKE;AACE,WAAKD,IAAL,GAAY,KAAKE,0BAAL,CAAgCL,UAAhC,EAA4CC,WAA5C,EAAyDC,WAAzD,CAAZ;AACA,WAAKZ,sBAAL,CAA4BR,gBAA5B,GAA+CkB,UAA/C;AACA,WAAKV,sBAAL,CAA4BP,iBAA5B,GAAgDkB,WAAhD;AACA,WAAKG,YAAL,GAAoBF,WAApB;AACH;;AAED,WAAO,KAAKC,IAAZ;AACH,GAlBM;;AAoBAlB,uFAAP,UAAqCO,IAArC,EAAiD;AAC7C,WAAO,KAAKc,4BAAL,CAAkCd,IAAI,CAACO,GAAvC,CAAP;AACH,GAFM;;AAGX;AAAC,CAnDD,CAAgErB,qCAAhE","names":["WebXRLayerWrapper","WebXRLayerRenderTargetTextureProvider","__extends","layer","_super","framebufferWidth","framebufferHeight","sessionManager","WebXRWebGLLayerRenderTargetTextureProvider","scene","_this","layerWrapper","_layer","_framebufferDimensions","viewport","view","xrViewport","getViewport","x","y","width","height","eye","layerWidth","layerHeight","framebuffer","_rtt","_framebuffer","_createRenderTargetTexture","getRenderTargetTextureForEye"],"sourceRoot":"","sources":["../../../../../lts/core/generated/XR/webXRWebGLLayer.ts"],"sourcesContent":["import type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport type { Viewport } from \"../Maths/math.viewport\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Nullable } from \"../types\";\r\nimport { WebXRLayerWrapper } from \"./webXRLayerWrapper\";\r\nimport { WebXRLayerRenderTargetTextureProvider } from \"./webXRRenderTargetTextureProvider\";\r\n\r\n/**\r\n * Wraps xr webgl layers.\r\n * @hidden\r\n */\r\nexport class WebXRWebGLLayerWrapper extends WebXRLayerWrapper {\r\n    /**\r\n     * @param layer is the layer to be wrapped.\r\n     * @returns a new WebXRLayerWrapper wrapping the provided XRWebGLLayer.\r\n     */\r\n    constructor(public readonly layer: XRWebGLLayer) {\r\n        super(\r\n            () => layer.framebufferWidth,\r\n            () => layer.framebufferHeight,\r\n            layer,\r\n            \"XRWebGLLayer\",\r\n            (sessionManager) => new WebXRWebGLLayerRenderTargetTextureProvider(sessionManager.scene, this)\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Provides render target textures and other important rendering information for a given XRWebGLLayer.\r\n * @hidden\r\n */\r\nexport class WebXRWebGLLayerRenderTargetTextureProvider extends WebXRLayerRenderTargetTextureProvider {\r\n    // The dimensions will always be defined in this class.\r\n    protected _framebufferDimensions: { framebufferWidth: number; framebufferHeight: number };\r\n    private _rtt: Nullable<RenderTargetTexture>;\r\n    private _framebuffer: WebGLFramebuffer;\r\n    private _layer: XRWebGLLayer;\r\n\r\n    constructor(scene: Scene, public readonly layerWrapper: WebXRWebGLLayerWrapper) {\r\n        super(scene, layerWrapper);\r\n        this._layer = layerWrapper.layer;\r\n        this._framebufferDimensions = {\r\n            framebufferWidth: this._layer.framebufferWidth,\r\n            framebufferHeight: this._layer.framebufferHeight,\r\n        };\r\n    }\r\n\r\n    public trySetViewportForView(viewport: Viewport, view: XRView): boolean {\r\n        const xrViewport = this._layer.getViewport(view);\r\n        const framebufferWidth = this._framebufferDimensions.framebufferWidth;\r\n        const framebufferHeight = this._framebufferDimensions.framebufferHeight;\r\n        viewport.x = xrViewport.x / framebufferWidth;\r\n        viewport.y = xrViewport.y / framebufferHeight;\r\n        viewport.width = xrViewport.width / framebufferWidth;\r\n        viewport.height = xrViewport.height / framebufferHeight;\r\n        return true;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public getRenderTargetTextureForEye(eye: XREye): Nullable<RenderTargetTexture> {\r\n        const layerWidth = this._layer.framebufferWidth;\r\n        const layerHeight = this._layer.framebufferHeight;\r\n        const framebuffer = this._layer.framebuffer;\r\n\r\n        if (\r\n            !this._rtt ||\r\n            layerWidth !== this._framebufferDimensions.framebufferWidth ||\r\n            layerHeight !== this._framebufferDimensions.framebufferHeight ||\r\n            framebuffer !== this._framebuffer\r\n        ) {\r\n            this._rtt = this._createRenderTargetTexture(layerWidth, layerHeight, framebuffer);\r\n            this._framebufferDimensions.framebufferWidth = layerWidth;\r\n            this._framebufferDimensions.framebufferHeight = layerHeight;\r\n            this._framebuffer = framebuffer;\r\n        }\r\n\r\n        return this._rtt;\r\n    }\r\n\r\n    public getRenderTargetTextureForView(view: XRView): Nullable<RenderTargetTexture> {\r\n        return this.getRenderTargetTextureForEye(view.eye);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}