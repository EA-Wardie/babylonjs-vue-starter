{"ast":null,"code":"import \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.data-view.js\";\nimport \"core-js/modules/es.typed-array.int32-array.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\n\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { Logger } from \"../Misc/logger.js\";\n/**\n * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\n * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\n */\n\nvar KhronosTextureContainer =\n/** @class */\nfunction () {\n  /**\n   * Creates a new KhronosTextureContainer\n   * @param data contents of the KTX container file\n   * @param facesExpected should be either 1 or 6, based whether a cube texture or or\n   */\n  function KhronosTextureContainer(\n  /** contents of the KTX container file */\n  data, facesExpected) {\n    this.data = data;\n    /**\n     * If the container has been made invalid (eg. constructor failed to correctly load array buffer)\n     */\n\n    this.isInvalid = false;\n\n    if (!KhronosTextureContainer.IsValid(data)) {\n      this.isInvalid = true;\n      Logger.Error(\"texture missing KTX identifier\");\n      return;\n    } // load the reset of the header in native 32 bit uint\n\n\n    var dataSize = Uint32Array.BYTES_PER_ELEMENT;\n    var headerDataView = new DataView(this.data.buffer, this.data.byteOffset + 12, 13 * dataSize);\n    var endianness = headerDataView.getUint32(0, true);\n    var littleEndian = endianness === 0x04030201;\n    this.glType = headerDataView.getUint32(1 * dataSize, littleEndian); // must be 0 for compressed textures\n\n    this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian); // must be 1 for compressed textures\n\n    this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian); // must be 0 for compressed textures\n\n    this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian); // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\n\n    this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian); // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\n\n    this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\n\n    this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\n\n    this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\n\n    this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian); // used for texture arrays\n\n    this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian); // used for cubemap textures, should either be 1 or 6\n\n    this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian); // number of levels; disregard possibility of 0 for compressed textures\n\n    this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian); // the amount of space after the header for meta-data\n    // Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\n\n    if (this.glType !== 0) {\n      Logger.Error(\"only compressed formats currently supported\");\n      return;\n    } else {\n      // value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\n      this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);\n    }\n\n    if (this.pixelHeight === 0 || this.pixelDepth !== 0) {\n      Logger.Error(\"only 2D textures currently supported\");\n      return;\n    }\n\n    if (this.numberOfArrayElements !== 0) {\n      Logger.Error(\"texture arrays not currently supported\");\n      return;\n    }\n\n    if (this.numberOfFaces !== facesExpected) {\n      Logger.Error(\"number of faces expected\" + facesExpected + \", but found \" + this.numberOfFaces);\n      return;\n    } // we now have a completely validated file, so could use existence of loadType as success\n    // would need to make this more elaborate & adjust checks above to support more than one load type\n\n\n    this.loadType = KhronosTextureContainer.COMPRESSED_2D;\n  }\n  /**\n   * Uploads KTX content to a Babylon Texture.\n   * It is assumed that the texture has already been created & is currently bound\n   * @param texture\n   * @param loadMipmaps\n   * @hidden\n   */\n\n\n  KhronosTextureContainer.prototype.uploadLevels = function (texture, loadMipmaps) {\n    switch (this.loadType) {\n      case KhronosTextureContainer.COMPRESSED_2D:\n        this._upload2DCompressedLevels(texture, loadMipmaps);\n\n        break;\n\n      case KhronosTextureContainer.TEX_2D:\n      case KhronosTextureContainer.COMPRESSED_3D:\n      case KhronosTextureContainer.TEX_3D:\n    }\n  };\n\n  KhronosTextureContainer.prototype._upload2DCompressedLevels = function (texture, loadMipmaps) {\n    // initialize width & height for level 1\n    var dataOffset = KhronosTextureContainer.HEADER_LEN + this.bytesOfKeyValueData;\n    var width = this.pixelWidth;\n    var height = this.pixelHeight;\n    var mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\n\n    for (var level = 0; level < mipmapCount; level++) {\n      var imageSize = new Int32Array(this.data.buffer, this.data.byteOffset + dataOffset, 1)[0]; // size per face, since not supporting array cubemaps\n\n      dataOffset += 4; //image data starts from next multiple of 4 offset. Each face refers to same imagesize field above.\n\n      for (var face = 0; face < this.numberOfFaces; face++) {\n        var byteArray = new Uint8Array(this.data.buffer, this.data.byteOffset + dataOffset, imageSize);\n        var engine = texture.getEngine();\n\n        engine._uploadCompressedDataToTextureDirectly(texture, texture.format, width, height, byteArray, face, level);\n\n        dataOffset += imageSize; // add size of the image for the next face/mipmap\n\n        dataOffset += 3 - (imageSize + 3) % 4; // add padding for odd sized image\n      }\n\n      width = Math.max(1.0, width * 0.5);\n      height = Math.max(1.0, height * 0.5);\n    }\n  };\n  /**\n   * Checks if the given data starts with a KTX file identifier.\n   * @param data the data to check\n   * @returns true if the data is a KTX file or false otherwise\n   */\n\n\n  KhronosTextureContainer.IsValid = function (data) {\n    if (data.byteLength >= 12) {\n      // '«', 'K', 'T', 'X', ' ', '1', '1', '»', '\\r', '\\n', '\\x1A', '\\n'\n      var identifier = new Uint8Array(data.buffer, data.byteOffset, 12);\n\n      if (identifier[0] === 0xab && identifier[1] === 0x4b && identifier[2] === 0x54 && identifier[3] === 0x58 && identifier[4] === 0x20 && identifier[5] === 0x31 && identifier[6] === 0x31 && identifier[7] === 0xbb && identifier[8] === 0x0d && identifier[9] === 0x0a && identifier[10] === 0x1a && identifier[11] === 0x0a) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  KhronosTextureContainer.HEADER_LEN = 12 + 13 * 4; // identifier + header elements (not including key value meta-data pairs)\n  // load types\n\n  KhronosTextureContainer.COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\n\n  KhronosTextureContainer.COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\n\n  KhronosTextureContainer.TEX_2D = 2; // uses a gl.texImage2D()\n\n  KhronosTextureContainer.TEX_3D = 3; // uses a gl.texImage3D()\n\n  return KhronosTextureContainer;\n}();\n\nexport { KhronosTextureContainer };","map":{"version":3,"mappings":"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","names":["Logger","data","facesExpected","KhronosTextureContainer","IsValid","isInvalid","Error","dataSize","Uint32Array","BYTES_PER_ELEMENT","headerDataView","DataView","buffer","byteOffset","endianness","getUint32","littleEndian","glType","glTypeSize","glFormat","glInternalFormat","glBaseInternalFormat","pixelWidth","pixelHeight","pixelDepth","numberOfArrayElements","numberOfFaces","numberOfMipmapLevels","bytesOfKeyValueData","Math","max","loadType","COMPRESSED_2D","texture","loadMipmaps","_upload2DCompressedLevels","TEX_2D","COMPRESSED_3D","TEX_3D","dataOffset","HEADER_LEN","width","height","mipmapCount","level","imageSize","Int32Array","face","byteArray","Uint8Array","engine","getEngine","_uploadCompressedDataToTextureDirectly","format","byteLength","identifier"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Misc/khronosTextureContainer.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { Logger } from \"../Misc/logger\";\r\nimport type { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\n\r\n/**\r\n * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\r\n * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\r\n */\r\nexport class KhronosTextureContainer {\r\n    private static HEADER_LEN = 12 + 13 * 4; // identifier + header elements (not including key value meta-data pairs)\r\n\r\n    // load types\r\n    private static COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\r\n    private static COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\r\n    private static TEX_2D = 2; // uses a gl.texImage2D()\r\n    private static TEX_3D = 3; // uses a gl.texImage3D()\r\n\r\n    // elements of the header\r\n    /**\r\n     * Gets the openGL type\r\n     */\r\n    public glType: number;\r\n    /**\r\n     * Gets the openGL type size\r\n     */\r\n    public glTypeSize: number;\r\n    /**\r\n     * Gets the openGL format\r\n     */\r\n    public glFormat: number;\r\n    /**\r\n     * Gets the openGL internal format\r\n     */\r\n    public glInternalFormat: number;\r\n    /**\r\n     * Gets the base internal format\r\n     */\r\n    public glBaseInternalFormat: number;\r\n    /**\r\n     * Gets image width in pixel\r\n     */\r\n    public pixelWidth: number;\r\n    /**\r\n     * Gets image height in pixel\r\n     */\r\n    public pixelHeight: number;\r\n    /**\r\n     * Gets image depth in pixels\r\n     */\r\n    public pixelDepth: number;\r\n    /**\r\n     * Gets the number of array elements\r\n     */\r\n    public numberOfArrayElements: number;\r\n    /**\r\n     * Gets the number of faces\r\n     */\r\n    public numberOfFaces: number;\r\n    /**\r\n     * Gets the number of mipmap levels\r\n     */\r\n    public numberOfMipmapLevels: number;\r\n    /**\r\n     * Gets the bytes of key value data\r\n     */\r\n    public bytesOfKeyValueData: number;\r\n    /**\r\n     * Gets the load type\r\n     */\r\n    public loadType: number;\r\n    /**\r\n     * If the container has been made invalid (eg. constructor failed to correctly load array buffer)\r\n     */\r\n    public isInvalid = false;\r\n\r\n    /**\r\n     * Creates a new KhronosTextureContainer\r\n     * @param data contents of the KTX container file\r\n     * @param facesExpected should be either 1 or 6, based whether a cube texture or or\r\n     */\r\n    public constructor(\r\n        /** contents of the KTX container file */\r\n        public data: ArrayBufferView,\r\n        facesExpected: number\r\n    ) {\r\n        if (!KhronosTextureContainer.IsValid(data)) {\r\n            this.isInvalid = true;\r\n            Logger.Error(\"texture missing KTX identifier\");\r\n            return;\r\n        }\r\n\r\n        // load the reset of the header in native 32 bit uint\r\n        const dataSize = Uint32Array.BYTES_PER_ELEMENT;\r\n        const headerDataView = new DataView(this.data.buffer, this.data.byteOffset + 12, 13 * dataSize);\r\n        const endianness = headerDataView.getUint32(0, true);\r\n        const littleEndian = endianness === 0x04030201;\r\n\r\n        this.glType = headerDataView.getUint32(1 * dataSize, littleEndian); // must be 0 for compressed textures\r\n        this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian); // must be 1 for compressed textures\r\n        this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian); // must be 0 for compressed textures\r\n        this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian); // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\r\n        this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian); // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\r\n        this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\r\n        this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\r\n        this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\r\n        this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian); // used for texture arrays\r\n        this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian); // used for cubemap textures, should either be 1 or 6\r\n        this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian); // number of levels; disregard possibility of 0 for compressed textures\r\n        this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian); // the amount of space after the header for meta-data\r\n\r\n        // Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\r\n        if (this.glType !== 0) {\r\n            Logger.Error(\"only compressed formats currently supported\");\r\n            return;\r\n        } else {\r\n            // value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\r\n            this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);\r\n        }\r\n\r\n        if (this.pixelHeight === 0 || this.pixelDepth !== 0) {\r\n            Logger.Error(\"only 2D textures currently supported\");\r\n            return;\r\n        }\r\n\r\n        if (this.numberOfArrayElements !== 0) {\r\n            Logger.Error(\"texture arrays not currently supported\");\r\n            return;\r\n        }\r\n\r\n        if (this.numberOfFaces !== facesExpected) {\r\n            Logger.Error(\"number of faces expected\" + facesExpected + \", but found \" + this.numberOfFaces);\r\n            return;\r\n        }\r\n\r\n        // we now have a completely validated file, so could use existence of loadType as success\r\n        // would need to make this more elaborate & adjust checks above to support more than one load type\r\n        this.loadType = KhronosTextureContainer.COMPRESSED_2D;\r\n    }\r\n\r\n    /**\r\n     * Uploads KTX content to a Babylon Texture.\r\n     * It is assumed that the texture has already been created & is currently bound\r\n     * @param texture\r\n     * @param loadMipmaps\r\n     * @hidden\r\n     */\r\n    public uploadLevels(texture: InternalTexture, loadMipmaps: boolean): void {\r\n        switch (this.loadType) {\r\n            case KhronosTextureContainer.COMPRESSED_2D:\r\n                this._upload2DCompressedLevels(texture, loadMipmaps);\r\n                break;\r\n\r\n            case KhronosTextureContainer.TEX_2D:\r\n            case KhronosTextureContainer.COMPRESSED_3D:\r\n            case KhronosTextureContainer.TEX_3D:\r\n        }\r\n    }\r\n\r\n    private _upload2DCompressedLevels(texture: InternalTexture, loadMipmaps: boolean): void {\r\n        // initialize width & height for level 1\r\n        let dataOffset = KhronosTextureContainer.HEADER_LEN + this.bytesOfKeyValueData;\r\n        let width = this.pixelWidth;\r\n        let height = this.pixelHeight;\r\n\r\n        const mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\r\n        for (let level = 0; level < mipmapCount; level++) {\r\n            const imageSize = new Int32Array(this.data.buffer, this.data.byteOffset + dataOffset, 1)[0]; // size per face, since not supporting array cubemaps\r\n            dataOffset += 4; //image data starts from next multiple of 4 offset. Each face refers to same imagesize field above.\r\n            for (let face = 0; face < this.numberOfFaces; face++) {\r\n                const byteArray = new Uint8Array(this.data.buffer, this.data.byteOffset + dataOffset, imageSize);\r\n\r\n                const engine = texture.getEngine();\r\n                engine._uploadCompressedDataToTextureDirectly(texture, texture.format, width, height, byteArray, face, level);\r\n\r\n                dataOffset += imageSize; // add size of the image for the next face/mipmap\r\n                dataOffset += 3 - ((imageSize + 3) % 4); // add padding for odd sized image\r\n            }\r\n            width = Math.max(1.0, width * 0.5);\r\n            height = Math.max(1.0, height * 0.5);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the given data starts with a KTX file identifier.\r\n     * @param data the data to check\r\n     * @returns true if the data is a KTX file or false otherwise\r\n     */\r\n    public static IsValid(data: ArrayBufferView): boolean {\r\n        if (data.byteLength >= 12) {\r\n            // '«', 'K', 'T', 'X', ' ', '1', '1', '»', '\\r', '\\n', '\\x1A', '\\n'\r\n            const identifier = new Uint8Array(data.buffer, data.byteOffset, 12);\r\n            if (\r\n                identifier[0] === 0xab &&\r\n                identifier[1] === 0x4b &&\r\n                identifier[2] === 0x54 &&\r\n                identifier[3] === 0x58 &&\r\n                identifier[4] === 0x20 &&\r\n                identifier[5] === 0x31 &&\r\n                identifier[6] === 0x31 &&\r\n                identifier[7] === 0xbb &&\r\n                identifier[8] === 0x0d &&\r\n                identifier[9] === 0x0a &&\r\n                identifier[10] === 0x1a &&\r\n                identifier[11] === 0x0a\r\n            ) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}