{"ast":null,"code":"import \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { __extends } from \"tslib\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { CreatePolyhedron } from \"../Meshes/Builders/polyhedronBuilder.js\";\nimport { Gizmo } from \"./gizmo.js\";\nimport { AxisScaleGizmo } from \"./axisScaleGizmo.js\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\n/**\n * Gizmo that enables scaling a mesh along 3 axis\n */\n\nvar ScaleGizmo =\n/** @class */\nfunction (_super) {\n  __extends(ScaleGizmo, _super);\n  /**\n   * Creates a ScaleGizmo\n   * @param gizmoLayer The utility layer the gizmo will be added to\n   * @param thickness display gizmo axis thickness\n   * @param gizmoManager\n   */\n\n\n  function ScaleGizmo(gizmoLayer, thickness, gizmoManager) {\n    if (gizmoLayer === void 0) {\n      gizmoLayer = UtilityLayerRenderer.DefaultUtilityLayer;\n    }\n\n    if (thickness === void 0) {\n      thickness = 1;\n    }\n\n    var _this = _super.call(this, gizmoLayer) || this;\n\n    _this._meshAttached = null;\n    _this._nodeAttached = null;\n    _this._sensitivity = 1;\n    _this._observables = [];\n    /** Node Caching for quick lookup */\n\n    _this._gizmoAxisCache = new Map();\n    /** Fires an event when any of it's sub gizmos are dragged */\n\n    _this.onDragStartObservable = new Observable();\n    /** Fires an event when any of it's sub gizmos are released from dragging */\n\n    _this.onDragEndObservable = new Observable();\n    _this.uniformScaleGizmo = _this._createUniformScaleMesh();\n    _this.xGizmo = new AxisScaleGizmo(new Vector3(1, 0, 0), Color3.Red().scale(0.5), gizmoLayer, _this, thickness);\n    _this.yGizmo = new AxisScaleGizmo(new Vector3(0, 1, 0), Color3.Green().scale(0.5), gizmoLayer, _this, thickness);\n    _this.zGizmo = new AxisScaleGizmo(new Vector3(0, 0, 1), Color3.Blue().scale(0.5), gizmoLayer, _this, thickness); // Relay drag events\n\n    [_this.xGizmo, _this.yGizmo, _this.zGizmo, _this.uniformScaleGizmo].forEach(function (gizmo) {\n      gizmo.dragBehavior.onDragStartObservable.add(function () {\n        _this.onDragStartObservable.notifyObservers({});\n      });\n      gizmo.dragBehavior.onDragEndObservable.add(function () {\n        _this.onDragEndObservable.notifyObservers({});\n      });\n    });\n    _this.attachedMesh = null;\n    _this.attachedNode = null;\n\n    if (gizmoManager) {\n      gizmoManager.addToAxisCache(_this._gizmoAxisCache);\n    } else {\n      // Only subscribe to pointer event if gizmoManager isnt\n      Gizmo.GizmoAxisPointerObserver(gizmoLayer, _this._gizmoAxisCache);\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(ScaleGizmo.prototype, \"attachedMesh\", {\n    get: function get() {\n      return this._meshAttached;\n    },\n    set: function set(mesh) {\n      this._meshAttached = mesh;\n      this._nodeAttached = mesh;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(function (gizmo) {\n        if (gizmo.isEnabled) {\n          gizmo.attachedMesh = mesh;\n        } else {\n          gizmo.attachedMesh = null;\n        }\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ScaleGizmo.prototype, \"attachedNode\", {\n    get: function get() {\n      return this._nodeAttached;\n    },\n    set: function set(node) {\n      this._meshAttached = null;\n      this._nodeAttached = node;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(function (gizmo) {\n        if (gizmo.isEnabled) {\n          gizmo.attachedNode = node;\n        } else {\n          gizmo.attachedNode = null;\n        }\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ScaleGizmo.prototype, \"isHovered\", {\n    /**\n     * True when the mouse pointer is hovering a gizmo mesh\n     */\n    get: function get() {\n      var hovered = false;\n      [this.xGizmo, this.yGizmo, this.zGizmo].forEach(function (gizmo) {\n        hovered = hovered || gizmo.isHovered;\n      });\n      return hovered;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** Create Geometry for Gizmo */\n\n  ScaleGizmo.prototype._createUniformScaleMesh = function () {\n    this._coloredMaterial = new StandardMaterial(\"\", this.gizmoLayer.utilityLayerScene);\n    this._coloredMaterial.diffuseColor = Color3.Gray();\n    this._hoverMaterial = new StandardMaterial(\"\", this.gizmoLayer.utilityLayerScene);\n    this._hoverMaterial.diffuseColor = Color3.Yellow();\n    this._disableMaterial = new StandardMaterial(\"\", this.gizmoLayer.utilityLayerScene);\n    this._disableMaterial.diffuseColor = Color3.Gray();\n    this._disableMaterial.alpha = 0.4;\n    var uniformScaleGizmo = new AxisScaleGizmo(new Vector3(0, 1, 0), Color3.Gray().scale(0.5), this.gizmoLayer, this);\n    uniformScaleGizmo.updateGizmoRotationToMatchAttachedMesh = false;\n    uniformScaleGizmo.uniformScaling = true;\n    this._uniformScalingMesh = CreatePolyhedron(\"uniform\", {\n      type: 1\n    }, uniformScaleGizmo.gizmoLayer.utilityLayerScene);\n\n    this._uniformScalingMesh.scaling.scaleInPlace(0.01);\n\n    this._uniformScalingMesh.visibility = 0;\n    this._octahedron = CreatePolyhedron(\"\", {\n      type: 1\n    }, uniformScaleGizmo.gizmoLayer.utilityLayerScene);\n\n    this._octahedron.scaling.scaleInPlace(0.007);\n\n    this._uniformScalingMesh.addChild(this._octahedron);\n\n    uniformScaleGizmo.setCustomMesh(this._uniformScalingMesh, true);\n\n    var light = this.gizmoLayer._getSharedGizmoLight();\n\n    light.includedOnlyMeshes = light.includedOnlyMeshes.concat(this._octahedron);\n    var cache = {\n      gizmoMeshes: [this._octahedron, this._uniformScalingMesh],\n      colliderMeshes: [this._uniformScalingMesh],\n      material: this._coloredMaterial,\n      hoverMaterial: this._hoverMaterial,\n      disableMaterial: this._disableMaterial,\n      active: false,\n      dragBehavior: uniformScaleGizmo.dragBehavior\n    };\n    this.addToAxisCache(uniformScaleGizmo._rootMesh, cache);\n    return uniformScaleGizmo;\n  };\n\n  Object.defineProperty(ScaleGizmo.prototype, \"updateGizmoRotationToMatchAttachedMesh\", {\n    get: function get() {\n      return this._updateGizmoRotationToMatchAttachedMesh;\n    },\n    set: function set(value) {\n      if (!value) {\n        Logger.Warn(\"Setting updateGizmoRotationToMatchAttachedMesh = false on scaling gizmo is not supported.\");\n      } else {\n        this._updateGizmoRotationToMatchAttachedMesh = value;\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(function (gizmo) {\n          if (gizmo) {\n            gizmo.updateGizmoRotationToMatchAttachedMesh = value;\n          }\n        });\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ScaleGizmo.prototype, \"snapDistance\", {\n    get: function get() {\n      return this._snapDistance;\n    },\n\n    /**\n     * Drag distance in babylon units that the gizmo will snap to when dragged (Default: 0)\n     */\n    set: function set(value) {\n      this._snapDistance = value;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(function (gizmo) {\n        if (gizmo) {\n          gizmo.snapDistance = value;\n        }\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ScaleGizmo.prototype, \"scaleRatio\", {\n    get: function get() {\n      return this._scaleRatio;\n    },\n\n    /**\n     * Ratio for the scale of the gizmo (Default: 1)\n     */\n    set: function set(value) {\n      this._scaleRatio = value;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(function (gizmo) {\n        if (gizmo) {\n          gizmo.scaleRatio = value;\n        }\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ScaleGizmo.prototype, \"sensitivity\", {\n    get: function get() {\n      return this._sensitivity;\n    },\n\n    /**\n     * Sensitivity factor for dragging (Default: 1)\n     */\n    set: function set(value) {\n      this._sensitivity = value;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(function (gizmo) {\n        if (gizmo) {\n          gizmo.sensitivity = value;\n        }\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Builds Gizmo Axis Cache to enable features such as hover state preservation and graying out other axis during manipulation\n   * @param mesh Axis gizmo mesh\n   * @param cache Gizmo axis definition used for reactive gizmo UI\n   */\n\n  ScaleGizmo.prototype.addToAxisCache = function (mesh, cache) {\n    this._gizmoAxisCache.set(mesh, cache);\n  };\n  /**\n   * Disposes of the gizmo\n   */\n\n\n  ScaleGizmo.prototype.dispose = function () {\n    var _this = this;\n\n    [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach(function (gizmo) {\n      if (gizmo) {\n        gizmo.dispose();\n      }\n    });\n\n    this._observables.forEach(function (obs) {\n      _this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(obs);\n    });\n\n    this.onDragStartObservable.clear();\n    this.onDragEndObservable.clear();\n    [this._uniformScalingMesh, this._octahedron].forEach(function (msh) {\n      if (msh) {\n        msh.dispose();\n      }\n    });\n    [this._coloredMaterial, this._hoverMaterial, this._disableMaterial].forEach(function (matl) {\n      if (matl) {\n        matl.dispose();\n      }\n    });\n  };\n\n  return ScaleGizmo;\n}(Gizmo);\n\nexport { ScaleGizmo };","map":{"version":3,"mappings":"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","names":["Logger","Observable","Vector3","Color3","CreatePolyhedron","Gizmo","AxisScaleGizmo","UtilityLayerRenderer","StandardMaterial","__extends","gizmoLayer","thickness","gizmoManager","DefaultUtilityLayer","_super","_this","Map","uniformScaleGizmo","_createUniformScaleMesh","xGizmo","Red","scale","yGizmo","Green","zGizmo","Blue","forEach","gizmo","dragBehavior","onDragStartObservable","add","notifyObservers","onDragEndObservable","attachedMesh","attachedNode","addToAxisCache","_gizmoAxisCache","GizmoAxisPointerObserver","Object","ScaleGizmo","_meshAttached","mesh","_nodeAttached","isEnabled","node","hovered","isHovered","_coloredMaterial","utilityLayerScene","diffuseColor","Gray","_hoverMaterial","Yellow","_disableMaterial","alpha","updateGizmoRotationToMatchAttachedMesh","uniformScaling","_uniformScalingMesh","type","scaling","scaleInPlace","visibility","_octahedron","addChild","setCustomMesh","light","_getSharedGizmoLight","includedOnlyMeshes","concat","cache","gizmoMeshes","colliderMeshes","material","hoverMaterial","disableMaterial","active","_rootMesh","_updateGizmoRotationToMatchAttachedMesh","value","Warn","_snapDistance","snapDistance","_scaleRatio","scaleRatio","_sensitivity","sensitivity","set","dispose","_observables","obs","onPointerObservable","remove","clear","msh","matl"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Gizmos/scaleGizmo.ts"],"sourcesContent":["import { Logger } from \"../Misc/logger\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { CreatePolyhedron } from \"../Meshes/Builders/polyhedronBuilder\";\r\nimport type { GizmoAxisCache } from \"./gizmo\";\r\nimport { Gizmo } from \"./gizmo\";\r\nimport { AxisScaleGizmo } from \"./axisScaleGizmo\";\r\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { Node } from \"../node\";\r\nimport type { PointerInfo } from \"../Events/pointerEvents\";\r\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\r\nimport type { GizmoManager } from \"./gizmoManager\";\r\n/**\r\n * Gizmo that enables scaling a mesh along 3 axis\r\n */\r\nexport class ScaleGizmo extends Gizmo {\r\n    /**\r\n     * Internal gizmo used for interactions on the x axis\r\n     */\r\n    public xGizmo: AxisScaleGizmo;\r\n    /**\r\n     * Internal gizmo used for interactions on the y axis\r\n     */\r\n    public yGizmo: AxisScaleGizmo;\r\n    /**\r\n     * Internal gizmo used for interactions on the z axis\r\n     */\r\n    public zGizmo: AxisScaleGizmo;\r\n\r\n    /**\r\n     * Internal gizmo used to scale all axis equally\r\n     */\r\n    public uniformScaleGizmo: AxisScaleGizmo;\r\n\r\n    private _meshAttached: Nullable<AbstractMesh> = null;\r\n    private _nodeAttached: Nullable<Node> = null;\r\n    private _snapDistance: number;\r\n    private _uniformScalingMesh: Mesh;\r\n    private _octahedron: Mesh;\r\n    private _sensitivity: number = 1;\r\n    private _coloredMaterial: StandardMaterial;\r\n    private _hoverMaterial: StandardMaterial;\r\n    private _disableMaterial: StandardMaterial;\r\n    private _observables: Observer<PointerInfo>[] = [];\r\n\r\n    /** Node Caching for quick lookup */\r\n    private _gizmoAxisCache: Map<Mesh, GizmoAxisCache> = new Map();\r\n\r\n    /** Fires an event when any of it's sub gizmos are dragged */\r\n    public onDragStartObservable = new Observable();\r\n    /** Fires an event when any of it's sub gizmos are released from dragging */\r\n    public onDragEndObservable = new Observable();\r\n\r\n    public get attachedMesh() {\r\n        return this._meshAttached;\r\n    }\r\n    public set attachedMesh(mesh: Nullable<AbstractMesh>) {\r\n        this._meshAttached = mesh;\r\n        this._nodeAttached = mesh;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach((gizmo) => {\r\n            if (gizmo.isEnabled) {\r\n                gizmo.attachedMesh = mesh;\r\n            } else {\r\n                gizmo.attachedMesh = null;\r\n            }\r\n        });\r\n    }\r\n\r\n    public get attachedNode() {\r\n        return this._nodeAttached;\r\n    }\r\n    public set attachedNode(node: Nullable<Node>) {\r\n        this._meshAttached = null;\r\n        this._nodeAttached = node;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach((gizmo) => {\r\n            if (gizmo.isEnabled) {\r\n                gizmo.attachedNode = node;\r\n            } else {\r\n                gizmo.attachedNode = null;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * True when the mouse pointer is hovering a gizmo mesh\r\n     */\r\n    public get isHovered() {\r\n        let hovered = false;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo].forEach((gizmo) => {\r\n            hovered = hovered || gizmo.isHovered;\r\n        });\r\n        return hovered;\r\n    }\r\n\r\n    /**\r\n     * Creates a ScaleGizmo\r\n     * @param gizmoLayer The utility layer the gizmo will be added to\r\n     * @param thickness display gizmo axis thickness\r\n     * @param gizmoManager\r\n     */\r\n    constructor(gizmoLayer: UtilityLayerRenderer = UtilityLayerRenderer.DefaultUtilityLayer, thickness: number = 1, gizmoManager?: GizmoManager) {\r\n        super(gizmoLayer);\r\n        this.uniformScaleGizmo = this._createUniformScaleMesh();\r\n        this.xGizmo = new AxisScaleGizmo(new Vector3(1, 0, 0), Color3.Red().scale(0.5), gizmoLayer, this, thickness);\r\n        this.yGizmo = new AxisScaleGizmo(new Vector3(0, 1, 0), Color3.Green().scale(0.5), gizmoLayer, this, thickness);\r\n        this.zGizmo = new AxisScaleGizmo(new Vector3(0, 0, 1), Color3.Blue().scale(0.5), gizmoLayer, this, thickness);\r\n\r\n        // Relay drag events\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach((gizmo) => {\r\n            gizmo.dragBehavior.onDragStartObservable.add(() => {\r\n                this.onDragStartObservable.notifyObservers({});\r\n            });\r\n            gizmo.dragBehavior.onDragEndObservable.add(() => {\r\n                this.onDragEndObservable.notifyObservers({});\r\n            });\r\n        });\r\n\r\n        this.attachedMesh = null;\r\n        this.attachedNode = null;\r\n\r\n        if (gizmoManager) {\r\n            gizmoManager.addToAxisCache(this._gizmoAxisCache);\r\n        } else {\r\n            // Only subscribe to pointer event if gizmoManager isnt\r\n            Gizmo.GizmoAxisPointerObserver(gizmoLayer, this._gizmoAxisCache);\r\n        }\r\n    }\r\n\r\n    /** Create Geometry for Gizmo */\r\n    private _createUniformScaleMesh(): AxisScaleGizmo {\r\n        this._coloredMaterial = new StandardMaterial(\"\", this.gizmoLayer.utilityLayerScene);\r\n        this._coloredMaterial.diffuseColor = Color3.Gray();\r\n\r\n        this._hoverMaterial = new StandardMaterial(\"\", this.gizmoLayer.utilityLayerScene);\r\n        this._hoverMaterial.diffuseColor = Color3.Yellow();\r\n\r\n        this._disableMaterial = new StandardMaterial(\"\", this.gizmoLayer.utilityLayerScene);\r\n        this._disableMaterial.diffuseColor = Color3.Gray();\r\n        this._disableMaterial.alpha = 0.4;\r\n\r\n        const uniformScaleGizmo = new AxisScaleGizmo(new Vector3(0, 1, 0), Color3.Gray().scale(0.5), this.gizmoLayer, this);\r\n        uniformScaleGizmo.updateGizmoRotationToMatchAttachedMesh = false;\r\n        uniformScaleGizmo.uniformScaling = true;\r\n        this._uniformScalingMesh = CreatePolyhedron(\"uniform\", { type: 1 }, uniformScaleGizmo.gizmoLayer.utilityLayerScene);\r\n        this._uniformScalingMesh.scaling.scaleInPlace(0.01);\r\n        this._uniformScalingMesh.visibility = 0;\r\n        this._octahedron = CreatePolyhedron(\"\", { type: 1 }, uniformScaleGizmo.gizmoLayer.utilityLayerScene);\r\n        this._octahedron.scaling.scaleInPlace(0.007);\r\n        this._uniformScalingMesh.addChild(this._octahedron);\r\n        uniformScaleGizmo.setCustomMesh(this._uniformScalingMesh, true);\r\n        const light = this.gizmoLayer._getSharedGizmoLight();\r\n        light.includedOnlyMeshes = light.includedOnlyMeshes.concat(this._octahedron);\r\n\r\n        const cache: GizmoAxisCache = {\r\n            gizmoMeshes: [this._octahedron, this._uniformScalingMesh],\r\n            colliderMeshes: [this._uniformScalingMesh],\r\n            material: this._coloredMaterial,\r\n            hoverMaterial: this._hoverMaterial,\r\n            disableMaterial: this._disableMaterial,\r\n            active: false,\r\n            dragBehavior: uniformScaleGizmo.dragBehavior,\r\n        };\r\n\r\n        this.addToAxisCache(uniformScaleGizmo._rootMesh, cache);\r\n\r\n        return uniformScaleGizmo;\r\n    }\r\n\r\n    public set updateGizmoRotationToMatchAttachedMesh(value: boolean) {\r\n        if (!value) {\r\n            Logger.Warn(\"Setting updateGizmoRotationToMatchAttachedMesh = false on scaling gizmo is not supported.\");\r\n        } else {\r\n            this._updateGizmoRotationToMatchAttachedMesh = value;\r\n            [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach((gizmo) => {\r\n                if (gizmo) {\r\n                    gizmo.updateGizmoRotationToMatchAttachedMesh = value;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    public get updateGizmoRotationToMatchAttachedMesh() {\r\n        return this._updateGizmoRotationToMatchAttachedMesh;\r\n    }\r\n\r\n    /**\r\n     * Drag distance in babylon units that the gizmo will snap to when dragged (Default: 0)\r\n     */\r\n    public set snapDistance(value: number) {\r\n        this._snapDistance = value;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach((gizmo) => {\r\n            if (gizmo) {\r\n                gizmo.snapDistance = value;\r\n            }\r\n        });\r\n    }\r\n    public get snapDistance() {\r\n        return this._snapDistance;\r\n    }\r\n\r\n    /**\r\n     * Ratio for the scale of the gizmo (Default: 1)\r\n     */\r\n    public set scaleRatio(value: number) {\r\n        this._scaleRatio = value;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach((gizmo) => {\r\n            if (gizmo) {\r\n                gizmo.scaleRatio = value;\r\n            }\r\n        });\r\n    }\r\n    public get scaleRatio() {\r\n        return this._scaleRatio;\r\n    }\r\n\r\n    /**\r\n     * Sensitivity factor for dragging (Default: 1)\r\n     */\r\n    public set sensitivity(value: number) {\r\n        this._sensitivity = value;\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach((gizmo) => {\r\n            if (gizmo) {\r\n                gizmo.sensitivity = value;\r\n            }\r\n        });\r\n    }\r\n    public get sensitivity() {\r\n        return this._sensitivity;\r\n    }\r\n\r\n    /**\r\n     * Builds Gizmo Axis Cache to enable features such as hover state preservation and graying out other axis during manipulation\r\n     * @param mesh Axis gizmo mesh\r\n     * @param cache Gizmo axis definition used for reactive gizmo UI\r\n     */\r\n    public addToAxisCache(mesh: Mesh, cache: GizmoAxisCache) {\r\n        this._gizmoAxisCache.set(mesh, cache);\r\n    }\r\n\r\n    /**\r\n     * Disposes of the gizmo\r\n     */\r\n    public dispose() {\r\n        [this.xGizmo, this.yGizmo, this.zGizmo, this.uniformScaleGizmo].forEach((gizmo) => {\r\n            if (gizmo) {\r\n                gizmo.dispose();\r\n            }\r\n        });\r\n        this._observables.forEach((obs) => {\r\n            this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(obs);\r\n        });\r\n        this.onDragStartObservable.clear();\r\n        this.onDragEndObservable.clear();\r\n        [this._uniformScalingMesh, this._octahedron].forEach((msh) => {\r\n            if (msh) {\r\n                msh.dispose();\r\n            }\r\n        });\r\n        [this._coloredMaterial, this._hoverMaterial, this._disableMaterial].forEach((matl) => {\r\n            if (matl) {\r\n                matl.dispose();\r\n            }\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}