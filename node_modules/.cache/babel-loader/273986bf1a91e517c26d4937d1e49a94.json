{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { __extends } from \"tslib\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { TransformNode } from \"../Meshes/transformNode.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { CreateCylinder } from \"../Meshes/Builders/cylinderBuilder.js\";\nimport { PointerDragBehavior } from \"../Behaviors/Meshes/pointerDragBehavior.js\";\nimport { Gizmo } from \"./gizmo.js\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\n/**\n * Single axis drag gizmo\n */\n\nvar AxisDragGizmo =\n/** @class */\nfunction (_super) {\n  __extends(AxisDragGizmo, _super);\n  /**\n   * Creates an AxisDragGizmo\n   * @param dragAxis The axis which the gizmo will be able to drag on\n   * @param color The color of the gizmo\n   * @param gizmoLayer The utility layer the gizmo will be added to\n   * @param parent\n   * @param thickness display gizmo axis thickness\n   */\n\n\n  function AxisDragGizmo(dragAxis, color, gizmoLayer, parent, thickness) {\n    if (color === void 0) {\n      color = Color3.Gray();\n    }\n\n    if (gizmoLayer === void 0) {\n      gizmoLayer = UtilityLayerRenderer.DefaultUtilityLayer;\n    }\n\n    if (parent === void 0) {\n      parent = null;\n    }\n\n    if (thickness === void 0) {\n      thickness = 1;\n    }\n\n    var _this = this;\n\n    var _a;\n\n    _this = _super.call(this, gizmoLayer) || this;\n    _this._pointerObserver = null;\n    /**\n     * Drag distance in babylon units that the gizmo will snap to when dragged (Default: 0)\n     */\n\n    _this.snapDistance = 0;\n    /**\n     * Event that fires each time the gizmo snaps to a new location.\n     * * snapDistance is the the change in distance\n     */\n\n    _this.onSnapObservable = new Observable();\n    _this._isEnabled = true;\n    _this._parent = null;\n    _this._dragging = false;\n    _this._parent = parent; // Create Material\n\n    _this._coloredMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n    _this._coloredMaterial.diffuseColor = color;\n    _this._coloredMaterial.specularColor = color.subtract(new Color3(0.1, 0.1, 0.1));\n    _this._hoverMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n    _this._hoverMaterial.diffuseColor = Color3.Yellow();\n    _this._disableMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n    _this._disableMaterial.diffuseColor = Color3.Gray();\n    _this._disableMaterial.alpha = 0.4; // Build Mesh + Collider\n\n    var arrow = AxisDragGizmo._CreateArrow(gizmoLayer.utilityLayerScene, _this._coloredMaterial, thickness);\n\n    var collider = AxisDragGizmo._CreateArrow(gizmoLayer.utilityLayerScene, _this._coloredMaterial, thickness + 4, true); // Add to Root Node\n\n\n    _this._gizmoMesh = new Mesh(\"\", gizmoLayer.utilityLayerScene);\n\n    _this._gizmoMesh.addChild(arrow);\n\n    _this._gizmoMesh.addChild(collider);\n\n    _this._gizmoMesh.lookAt(_this._rootMesh.position.add(dragAxis));\n\n    _this._gizmoMesh.scaling.scaleInPlace(1 / 3);\n\n    _this._gizmoMesh.parent = _this._rootMesh;\n    var currentSnapDragDistance = 0;\n    var tmpVector = new Vector3();\n    var tmpVector2 = new Vector3();\n    var tmpSnapEvent = {\n      snapDistance: 0\n    }; // Add drag behavior to handle events when the gizmo is dragged\n\n    _this.dragBehavior = new PointerDragBehavior({\n      dragAxis: dragAxis\n    });\n    _this.dragBehavior.moveAttached = false;\n\n    _this._rootMesh.addBehavior(_this.dragBehavior);\n\n    _this.dragBehavior.onDragObservable.add(function (event) {\n      if (_this.attachedNode) {\n        _this._handlePivot(); // Keep world translation and use it to update world transform\n        // if the node has parent, the local transform properties (position, rotation, scale)\n        // will be recomputed in _matrixChanged function\n\n\n        var matrixChanged = false; // Snapping logic\n\n        if (_this.snapDistance == 0) {\n          _this.attachedNode.getWorldMatrix().getTranslationToRef(tmpVector2);\n\n          tmpVector2.addInPlace(event.delta);\n\n          if (_this.dragBehavior.validateDrag(tmpVector2)) {\n            if (_this.attachedNode.position) {\n              // Required for nodes like lights\n              _this.attachedNode.position.addInPlaceFromFloats(event.delta.x, event.delta.y, event.delta.z);\n            } // use _worldMatrix to not force a matrix update when calling GetWorldMatrix especially with Cameras\n\n\n            _this.attachedNode.getWorldMatrix().addTranslationFromFloats(event.delta.x, event.delta.y, event.delta.z);\n\n            _this.attachedNode.updateCache();\n\n            matrixChanged = true;\n          }\n        } else {\n          currentSnapDragDistance += event.dragDistance;\n\n          if (Math.abs(currentSnapDragDistance) > _this.snapDistance) {\n            var dragSteps = Math.floor(Math.abs(currentSnapDragDistance) / _this.snapDistance);\n            currentSnapDragDistance = currentSnapDragDistance % _this.snapDistance;\n            event.delta.normalizeToRef(tmpVector);\n            tmpVector.scaleInPlace(_this.snapDistance * dragSteps);\n\n            _this.attachedNode.getWorldMatrix().getTranslationToRef(tmpVector2);\n\n            tmpVector2.addInPlace(tmpVector);\n\n            if (_this.dragBehavior.validateDrag(tmpVector2)) {\n              _this.attachedNode.getWorldMatrix().addTranslationFromFloats(tmpVector.x, tmpVector.y, tmpVector.z);\n\n              _this.attachedNode.updateCache();\n\n              tmpSnapEvent.snapDistance = _this.snapDistance * dragSteps;\n\n              _this.onSnapObservable.notifyObservers(tmpSnapEvent);\n\n              matrixChanged = true;\n            }\n          }\n        }\n\n        if (matrixChanged) {\n          _this._matrixChanged();\n        }\n      }\n    });\n\n    _this.dragBehavior.onDragStartObservable.add(function () {\n      _this._dragging = true;\n    });\n\n    _this.dragBehavior.onDragEndObservable.add(function () {\n      _this._dragging = false;\n    });\n\n    var light = gizmoLayer._getSharedGizmoLight();\n\n    light.includedOnlyMeshes = light.includedOnlyMeshes.concat(_this._rootMesh.getChildMeshes(false));\n    var cache = {\n      gizmoMeshes: arrow.getChildMeshes(),\n      colliderMeshes: collider.getChildMeshes(),\n      material: _this._coloredMaterial,\n      hoverMaterial: _this._hoverMaterial,\n      disableMaterial: _this._disableMaterial,\n      active: false,\n      dragBehavior: _this.dragBehavior\n    };\n    (_a = _this._parent) === null || _a === void 0 ? void 0 : _a.addToAxisCache(collider, cache);\n    _this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add(function (pointerInfo) {\n      var _a;\n\n      if (_this._customMeshSet) {\n        return;\n      }\n\n      _this._isHovered = !!(cache.colliderMeshes.indexOf((_a = pointerInfo === null || pointerInfo === void 0 ? void 0 : pointerInfo.pickInfo) === null || _a === void 0 ? void 0 : _a.pickedMesh) != -1);\n\n      if (!_this._parent) {\n        var material = _this.dragBehavior.enabled ? _this._isHovered || _this._dragging ? _this._hoverMaterial : _this._coloredMaterial : _this._disableMaterial;\n\n        _this._setGizmoMeshMaterial(cache.gizmoMeshes, material);\n      }\n    });\n\n    _this.dragBehavior.onEnabledObservable.add(function (newState) {\n      _this._setGizmoMeshMaterial(cache.gizmoMeshes, newState ? cache.material : cache.disableMaterial);\n    });\n\n    return _this;\n  }\n  /**\n   * @param scene\n   * @param material\n   * @param thickness\n   * @param isCollider\n   * @hidden\n   */\n\n\n  AxisDragGizmo._CreateArrow = function (scene, material, thickness, isCollider) {\n    if (thickness === void 0) {\n      thickness = 1;\n    }\n\n    if (isCollider === void 0) {\n      isCollider = false;\n    }\n\n    var arrow = new TransformNode(\"arrow\", scene);\n    var cylinder = CreateCylinder(\"cylinder\", {\n      diameterTop: 0,\n      height: 0.075,\n      diameterBottom: 0.0375 * (1 + (thickness - 1) / 4),\n      tessellation: 96\n    }, scene);\n    var line = CreateCylinder(\"cylinder\", {\n      diameterTop: 0.005 * thickness,\n      height: 0.275,\n      diameterBottom: 0.005 * thickness,\n      tessellation: 96\n    }, scene); // Position arrow pointing in its drag axis\n\n    cylinder.parent = arrow;\n    cylinder.material = material;\n    cylinder.rotation.x = Math.PI / 2;\n    cylinder.position.z += 0.3;\n    line.parent = arrow;\n    line.material = material;\n    line.position.z += 0.275 / 2;\n    line.rotation.x = Math.PI / 2;\n\n    if (isCollider) {\n      line.visibility = 0;\n      cylinder.visibility = 0;\n    }\n\n    return arrow;\n  };\n  /**\n   * @param scene\n   * @param arrow\n   * @hidden\n   */\n\n\n  AxisDragGizmo._CreateArrowInstance = function (scene, arrow) {\n    var instance = new TransformNode(\"arrow\", scene);\n\n    for (var _i = 0, _a = arrow.getChildMeshes(); _i < _a.length; _i++) {\n      var mesh = _a[_i];\n      var childInstance = mesh.createInstance(mesh.name);\n      childInstance.parent = instance;\n    }\n\n    return instance;\n  };\n\n  AxisDragGizmo.prototype._attachedNodeChanged = function (value) {\n    if (this.dragBehavior) {\n      this.dragBehavior.enabled = value ? true : false;\n    }\n  };\n\n  Object.defineProperty(AxisDragGizmo.prototype, \"isEnabled\", {\n    get: function get() {\n      return this._isEnabled;\n    },\n\n    /**\n     * If the gizmo is enabled\n     */\n    set: function set(value) {\n      this._isEnabled = value;\n\n      if (!value) {\n        this.attachedMesh = null;\n        this.attachedNode = null;\n      } else {\n        if (this._parent) {\n          this.attachedMesh = this._parent.attachedMesh;\n          this.attachedNode = this._parent.attachedNode;\n        }\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Disposes of the gizmo\n   */\n\n  AxisDragGizmo.prototype.dispose = function () {\n    this.onSnapObservable.clear();\n    this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\n    this.dragBehavior.detach();\n\n    if (this._gizmoMesh) {\n      this._gizmoMesh.dispose();\n    }\n\n    [this._coloredMaterial, this._hoverMaterial, this._disableMaterial].forEach(function (matl) {\n      if (matl) {\n        matl.dispose();\n      }\n    });\n\n    _super.prototype.dispose.call(this);\n  };\n\n  return AxisDragGizmo;\n}(Gizmo);\n\nexport { AxisDragGizmo };","map":{"version":3,"mappings":"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","names":["Observable","Vector3","TransformNode","Mesh","CreateCylinder","PointerDragBehavior","Gizmo","UtilityLayerRenderer","StandardMaterial","Color3","__extends","dragAxis","color","gizmoLayer","parent","thickness","Gray","DefaultUtilityLayer","_super","_this","_parent","_coloredMaterial","utilityLayerScene","diffuseColor","specularColor","subtract","_hoverMaterial","Yellow","_disableMaterial","alpha","arrow","AxisDragGizmo","_CreateArrow","collider","_gizmoMesh","addChild","lookAt","_rootMesh","position","add","scaling","scaleInPlace","currentSnapDragDistance","tmpVector","tmpVector2","tmpSnapEvent","snapDistance","dragBehavior","moveAttached","addBehavior","onDragObservable","event","attachedNode","_handlePivot","matrixChanged","getWorldMatrix","getTranslationToRef","addInPlace","delta","validateDrag","addInPlaceFromFloats","x","y","z","addTranslationFromFloats","updateCache","dragDistance","Math","abs","dragSteps","floor","normalizeToRef","onSnapObservable","notifyObservers","_matrixChanged","onDragStartObservable","_dragging","onDragEndObservable","light","_getSharedGizmoLight","includedOnlyMeshes","concat","getChildMeshes","cache","gizmoMeshes","colliderMeshes","material","hoverMaterial","disableMaterial","active","_a","addToAxisCache","_pointerObserver","onPointerObservable","pointerInfo","_customMeshSet","_isHovered","indexOf","pickInfo","pickedMesh","enabled","_setGizmoMeshMaterial","onEnabledObservable","newState","scene","isCollider","cylinder","diameterTop","height","diameterBottom","tessellation","line","rotation","PI","visibility","instance","_i","mesh","childInstance","createInstance","name","value","Object","_isEnabled","attachedMesh","clear","remove","detach","dispose","forEach","matl","call"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Gizmos/axisDragGizmo.ts"],"sourcesContent":["import type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { PointerInfo } from \"../Events/pointerEvents\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { TransformNode } from \"../Meshes/transformNode\";\r\nimport type { Node } from \"../node\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { CreateCylinder } from \"../Meshes/Builders/cylinderBuilder\";\r\nimport { PointerDragBehavior } from \"../Behaviors/Meshes/pointerDragBehavior\";\r\nimport type { GizmoAxisCache } from \"./gizmo\";\r\nimport { Gizmo } from \"./gizmo\";\r\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\r\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { PositionGizmo } from \"./positionGizmo\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\n/**\r\n * Single axis drag gizmo\r\n */\r\nexport class AxisDragGizmo extends Gizmo {\r\n    /**\r\n     * Drag behavior responsible for the gizmos dragging interactions\r\n     */\r\n    public dragBehavior: PointerDragBehavior;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>> = null;\r\n    /**\r\n     * Drag distance in babylon units that the gizmo will snap to when dragged (Default: 0)\r\n     */\r\n    public snapDistance = 0;\r\n    /**\r\n     * Event that fires each time the gizmo snaps to a new location.\r\n     * * snapDistance is the the change in distance\r\n     */\r\n    public onSnapObservable = new Observable<{ snapDistance: number }>();\r\n\r\n    private _isEnabled: boolean = true;\r\n    private _parent: Nullable<PositionGizmo> = null;\r\n\r\n    private _gizmoMesh: Mesh;\r\n    private _coloredMaterial: StandardMaterial;\r\n    private _hoverMaterial: StandardMaterial;\r\n    private _disableMaterial: StandardMaterial;\r\n    private _dragging: boolean = false;\r\n\r\n    /**\r\n     * @param scene\r\n     * @param material\r\n     * @param thickness\r\n     * @param isCollider\r\n     * @hidden\r\n     */\r\n    public static _CreateArrow(scene: Scene, material: StandardMaterial, thickness: number = 1, isCollider = false): TransformNode {\r\n        const arrow = new TransformNode(\"arrow\", scene);\r\n        const cylinder = CreateCylinder(\"cylinder\", { diameterTop: 0, height: 0.075, diameterBottom: 0.0375 * (1 + (thickness - 1) / 4), tessellation: 96 }, scene);\r\n        const line = CreateCylinder(\"cylinder\", { diameterTop: 0.005 * thickness, height: 0.275, diameterBottom: 0.005 * thickness, tessellation: 96 }, scene);\r\n\r\n        // Position arrow pointing in its drag axis\r\n        cylinder.parent = arrow;\r\n        cylinder.material = material;\r\n        cylinder.rotation.x = Math.PI / 2;\r\n        cylinder.position.z += 0.3;\r\n\r\n        line.parent = arrow;\r\n        line.material = material;\r\n        line.position.z += 0.275 / 2;\r\n        line.rotation.x = Math.PI / 2;\r\n\r\n        if (isCollider) {\r\n            line.visibility = 0;\r\n            cylinder.visibility = 0;\r\n        }\r\n        return arrow;\r\n    }\r\n\r\n    /**\r\n     * @param scene\r\n     * @param arrow\r\n     * @hidden\r\n     */\r\n    public static _CreateArrowInstance(scene: Scene, arrow: TransformNode): TransformNode {\r\n        const instance = new TransformNode(\"arrow\", scene);\r\n        for (const mesh of arrow.getChildMeshes()) {\r\n            const childInstance = (mesh as Mesh).createInstance(mesh.name);\r\n            childInstance.parent = instance;\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    /**\r\n     * Creates an AxisDragGizmo\r\n     * @param dragAxis The axis which the gizmo will be able to drag on\r\n     * @param color The color of the gizmo\r\n     * @param gizmoLayer The utility layer the gizmo will be added to\r\n     * @param parent\r\n     * @param thickness display gizmo axis thickness\r\n     */\r\n    constructor(\r\n        dragAxis: Vector3,\r\n        color: Color3 = Color3.Gray(),\r\n        gizmoLayer: UtilityLayerRenderer = UtilityLayerRenderer.DefaultUtilityLayer,\r\n        parent: Nullable<PositionGizmo> = null,\r\n        thickness: number = 1\r\n    ) {\r\n        super(gizmoLayer);\r\n        this._parent = parent;\r\n\r\n        // Create Material\r\n        this._coloredMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\r\n        this._coloredMaterial.diffuseColor = color;\r\n        this._coloredMaterial.specularColor = color.subtract(new Color3(0.1, 0.1, 0.1));\r\n\r\n        this._hoverMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\r\n        this._hoverMaterial.diffuseColor = Color3.Yellow();\r\n\r\n        this._disableMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\r\n        this._disableMaterial.diffuseColor = Color3.Gray();\r\n        this._disableMaterial.alpha = 0.4;\r\n\r\n        // Build Mesh + Collider\r\n        const arrow = AxisDragGizmo._CreateArrow(gizmoLayer.utilityLayerScene, this._coloredMaterial, thickness);\r\n        const collider = AxisDragGizmo._CreateArrow(gizmoLayer.utilityLayerScene, this._coloredMaterial, thickness + 4, true);\r\n\r\n        // Add to Root Node\r\n        this._gizmoMesh = new Mesh(\"\", gizmoLayer.utilityLayerScene);\r\n        this._gizmoMesh.addChild(arrow as Mesh);\r\n        this._gizmoMesh.addChild(collider as Mesh);\r\n\r\n        this._gizmoMesh.lookAt(this._rootMesh.position.add(dragAxis));\r\n        this._gizmoMesh.scaling.scaleInPlace(1 / 3);\r\n        this._gizmoMesh.parent = this._rootMesh;\r\n\r\n        let currentSnapDragDistance = 0;\r\n        const tmpVector = new Vector3();\r\n        const tmpVector2 = new Vector3();\r\n        const tmpSnapEvent = { snapDistance: 0 };\r\n        // Add drag behavior to handle events when the gizmo is dragged\r\n        this.dragBehavior = new PointerDragBehavior({ dragAxis: dragAxis });\r\n        this.dragBehavior.moveAttached = false;\r\n        this._rootMesh.addBehavior(this.dragBehavior);\r\n\r\n        this.dragBehavior.onDragObservable.add((event) => {\r\n            if (this.attachedNode) {\r\n                this._handlePivot();\r\n                // Keep world translation and use it to update world transform\r\n                // if the node has parent, the local transform properties (position, rotation, scale)\r\n                // will be recomputed in _matrixChanged function\r\n\r\n                let matrixChanged: boolean = false;\r\n                // Snapping logic\r\n                if (this.snapDistance == 0) {\r\n                    this.attachedNode.getWorldMatrix().getTranslationToRef(tmpVector2);\r\n                    tmpVector2.addInPlace(event.delta);\r\n                    if (this.dragBehavior.validateDrag(tmpVector2)) {\r\n                        if ((this.attachedNode as any).position) {\r\n                            // Required for nodes like lights\r\n                            (this.attachedNode as any).position.addInPlaceFromFloats(event.delta.x, event.delta.y, event.delta.z);\r\n                        }\r\n\r\n                        // use _worldMatrix to not force a matrix update when calling GetWorldMatrix especially with Cameras\r\n                        this.attachedNode.getWorldMatrix().addTranslationFromFloats(event.delta.x, event.delta.y, event.delta.z);\r\n                        this.attachedNode.updateCache();\r\n                        matrixChanged = true;\r\n                    }\r\n                } else {\r\n                    currentSnapDragDistance += event.dragDistance;\r\n                    if (Math.abs(currentSnapDragDistance) > this.snapDistance) {\r\n                        const dragSteps = Math.floor(Math.abs(currentSnapDragDistance) / this.snapDistance);\r\n                        currentSnapDragDistance = currentSnapDragDistance % this.snapDistance;\r\n                        event.delta.normalizeToRef(tmpVector);\r\n                        tmpVector.scaleInPlace(this.snapDistance * dragSteps);\r\n\r\n                        this.attachedNode.getWorldMatrix().getTranslationToRef(tmpVector2);\r\n                        tmpVector2.addInPlace(tmpVector);\r\n                        if (this.dragBehavior.validateDrag(tmpVector2)) {\r\n                            this.attachedNode.getWorldMatrix().addTranslationFromFloats(tmpVector.x, tmpVector.y, tmpVector.z);\r\n                            this.attachedNode.updateCache();\r\n                            tmpSnapEvent.snapDistance = this.snapDistance * dragSteps;\r\n                            this.onSnapObservable.notifyObservers(tmpSnapEvent);\r\n                            matrixChanged = true;\r\n                        }\r\n                    }\r\n                }\r\n                if (matrixChanged) {\r\n                    this._matrixChanged();\r\n                }\r\n            }\r\n        });\r\n        this.dragBehavior.onDragStartObservable.add(() => {\r\n            this._dragging = true;\r\n        });\r\n        this.dragBehavior.onDragEndObservable.add(() => {\r\n            this._dragging = false;\r\n        });\r\n\r\n        const light = gizmoLayer._getSharedGizmoLight();\r\n        light.includedOnlyMeshes = light.includedOnlyMeshes.concat(this._rootMesh.getChildMeshes(false));\r\n\r\n        const cache: GizmoAxisCache = {\r\n            gizmoMeshes: arrow.getChildMeshes() as Mesh[],\r\n            colliderMeshes: collider.getChildMeshes() as Mesh[],\r\n            material: this._coloredMaterial,\r\n            hoverMaterial: this._hoverMaterial,\r\n            disableMaterial: this._disableMaterial,\r\n            active: false,\r\n            dragBehavior: this.dragBehavior,\r\n        };\r\n        this._parent?.addToAxisCache(collider as Mesh, cache);\r\n\r\n        this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add((pointerInfo) => {\r\n            if (this._customMeshSet) {\r\n                return;\r\n            }\r\n            this._isHovered = !!(cache.colliderMeshes.indexOf(<Mesh>pointerInfo?.pickInfo?.pickedMesh) != -1);\r\n            if (!this._parent) {\r\n                const material = this.dragBehavior.enabled ? (this._isHovered || this._dragging ? this._hoverMaterial : this._coloredMaterial) : this._disableMaterial;\r\n                this._setGizmoMeshMaterial(cache.gizmoMeshes, material);\r\n            }\r\n        });\r\n\r\n        this.dragBehavior.onEnabledObservable.add((newState) => {\r\n            this._setGizmoMeshMaterial(cache.gizmoMeshes, newState ? cache.material : cache.disableMaterial);\r\n        });\r\n    }\r\n    protected _attachedNodeChanged(value: Nullable<Node>) {\r\n        if (this.dragBehavior) {\r\n            this.dragBehavior.enabled = value ? true : false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If the gizmo is enabled\r\n     */\r\n    public set isEnabled(value: boolean) {\r\n        this._isEnabled = value;\r\n        if (!value) {\r\n            this.attachedMesh = null;\r\n            this.attachedNode = null;\r\n        } else {\r\n            if (this._parent) {\r\n                this.attachedMesh = this._parent.attachedMesh;\r\n                this.attachedNode = this._parent.attachedNode;\r\n            }\r\n        }\r\n    }\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n\r\n    /**\r\n     * Disposes of the gizmo\r\n     */\r\n    public dispose() {\r\n        this.onSnapObservable.clear();\r\n        this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n        this.dragBehavior.detach();\r\n        if (this._gizmoMesh) {\r\n            this._gizmoMesh.dispose();\r\n        }\r\n        [this._coloredMaterial, this._hoverMaterial, this._disableMaterial].forEach((matl) => {\r\n            if (matl) {\r\n                matl.dispose();\r\n            }\r\n        });\r\n        super.dispose();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}