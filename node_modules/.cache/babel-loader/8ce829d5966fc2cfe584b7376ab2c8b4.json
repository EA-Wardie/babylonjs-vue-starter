{"ast":null,"code":"import _typeof from \"/home/ea/Development/Babylon/red/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport { __assign, __extends } from \"tslib\";\nimport { SerializationHelper } from \"../Misc/decorators.js\";\nimport { Matrix, Vector3, Vector2, Vector4 } from \"../Maths/math.vector.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { MaterialHelper } from \"./materialHelper.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { Color3, Color4 } from \"../Maths/math.color.js\";\nimport { EffectFallbacks } from \"./effectFallbacks.js\";\nimport { WebRequest } from \"../Misc/webRequest.js\";\nimport { PushMaterial } from \"./pushMaterial.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nvar onCreatedEffectParameters = {\n  effect: null,\n  subMesh: null\n};\n/**\n * The ShaderMaterial object has the necessary methods to pass data from your scene to the Vertex and Fragment Shaders and returns a material that can be applied to any mesh.\n *\n * This returned material effects how the mesh will look based on the code in the shaders.\n *\n * @see https://doc.babylonjs.com/advanced_topics/shaders/shaderMaterial\n */\n\nvar ShaderMaterial =\n/** @class */\nfunction (_super) {\n  __extends(ShaderMaterial, _super);\n  /**\n   * Instantiate a new shader material.\n   * The ShaderMaterial object has the necessary methods to pass data from your scene to the Vertex and Fragment Shaders and returns a material that can be applied to any mesh.\n   * This returned material effects how the mesh will look based on the code in the shaders.\n   * @see https://doc.babylonjs.com/how_to/shader_material\n   * @param name Define the name of the material in the scene\n   * @param scene Define the scene the material belongs to\n   * @param shaderPath Defines  the route to the shader code in one of three ways:\n   *  * object: { vertex: \"custom\", fragment: \"custom\" }, used with Effect.ShadersStore[\"customVertexShader\"] and Effect.ShadersStore[\"customFragmentShader\"]\n   *  * object: { vertexElement: \"vertexShaderCode\", fragmentElement: \"fragmentShaderCode\" }, used with shader code in script tags\n   *  * object: { vertexSource: \"vertex shader code string\", fragmentSource: \"fragment shader code string\" } using with strings containing the shaders code\n   *  * string: \"./COMMON_NAME\", used with external files COMMON_NAME.vertex.fx and COMMON_NAME.fragment.fx in index.html folder.\n   * @param options Define the options used to create the shader\n   * @param storeEffectOnSubMeshes true to store effect on submeshes, false to store the effect directly in the material class.\n   */\n\n\n  function ShaderMaterial(name, scene, shaderPath, options, storeEffectOnSubMeshes) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (storeEffectOnSubMeshes === void 0) {\n      storeEffectOnSubMeshes = true;\n    }\n\n    var _this = _super.call(this, name, scene, storeEffectOnSubMeshes) || this;\n\n    _this._textures = {};\n    _this._textureArrays = {};\n    _this._externalTextures = {};\n    _this._floats = {};\n    _this._ints = {};\n    _this._floatsArrays = {};\n    _this._colors3 = {};\n    _this._colors3Arrays = {};\n    _this._colors4 = {};\n    _this._colors4Arrays = {};\n    _this._vectors2 = {};\n    _this._vectors3 = {};\n    _this._vectors4 = {};\n    _this._matrices = {};\n    _this._matrixArrays = {};\n    _this._matrices3x3 = {};\n    _this._matrices2x2 = {};\n    _this._vectors2Arrays = {};\n    _this._vectors3Arrays = {};\n    _this._vectors4Arrays = {};\n    _this._uniformBuffers = {};\n    _this._textureSamplers = {};\n    _this._storageBuffers = {};\n    _this._cachedWorldViewMatrix = new Matrix();\n    _this._cachedWorldViewProjectionMatrix = new Matrix();\n    _this._multiview = false;\n    _this._shaderPath = shaderPath;\n    _this._options = __assign({\n      needAlphaBlending: false,\n      needAlphaTesting: false,\n      attributes: [\"position\", \"normal\", \"uv\"],\n      uniforms: [\"worldViewProjection\"],\n      uniformBuffers: [],\n      samplers: [],\n      externalTextures: [],\n      samplerObjects: [],\n      storageBuffers: [],\n      defines: [],\n      useClipPlane: false\n    }, options);\n    return _this;\n  }\n\n  Object.defineProperty(ShaderMaterial.prototype, \"shaderPath\", {\n    /**\n     * Gets the shader path used to define the shader code\n     * It can be modified to trigger a new compilation\n     */\n    get: function get() {\n      return this._shaderPath;\n    },\n\n    /**\n     * Sets the shader path used to define the shader code\n     * It can be modified to trigger a new compilation\n     */\n    set: function set(shaderPath) {\n      this._shaderPath = shaderPath;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ShaderMaterial.prototype, \"options\", {\n    /**\n     * Gets the options used to compile the shader.\n     * They can be modified to trigger a new compilation\n     */\n    get: function get() {\n      return this._options;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Gets the current class name of the material e.g. \"ShaderMaterial\"\n   * Mainly use in serialization.\n   * @returns the class name\n   */\n\n  ShaderMaterial.prototype.getClassName = function () {\n    return \"ShaderMaterial\";\n  };\n  /**\n   * Specifies if the material will require alpha blending\n   * @returns a boolean specifying if alpha blending is needed\n   */\n\n\n  ShaderMaterial.prototype.needAlphaBlending = function () {\n    return this.alpha < 1.0 || this._options.needAlphaBlending;\n  };\n  /**\n   * Specifies if this material should be rendered in alpha test mode\n   * @returns a boolean specifying if an alpha test is needed.\n   */\n\n\n  ShaderMaterial.prototype.needAlphaTesting = function () {\n    return this._options.needAlphaTesting;\n  };\n\n  ShaderMaterial.prototype._checkUniform = function (uniformName) {\n    if (this._options.uniforms.indexOf(uniformName) === -1) {\n      this._options.uniforms.push(uniformName);\n    }\n  };\n  /**\n   * Set a texture in the shader.\n   * @param name Define the name of the uniform samplers as defined in the shader\n   * @param texture Define the texture to bind to this sampler\n   * @return the material itself allowing \"fluent\" like uniform updates\n   */\n\n\n  ShaderMaterial.prototype.setTexture = function (name, texture) {\n    if (this._options.samplers.indexOf(name) === -1) {\n      this._options.samplers.push(name);\n    }\n\n    this._textures[name] = texture;\n    return this;\n  };\n  /**\n   * Set a texture array in the shader.\n   * @param name Define the name of the uniform sampler array as defined in the shader\n   * @param textures Define the list of textures to bind to this sampler\n   * @return the material itself allowing \"fluent\" like uniform updates\n   */\n\n\n  ShaderMaterial.prototype.setTextureArray = function (name, textures) {\n    if (this._options.samplers.indexOf(name) === -1) {\n      this._options.samplers.push(name);\n    }\n\n    this._checkUniform(name);\n\n    this._textureArrays[name] = textures;\n    return this;\n  };\n  /**\n   * Set an internal texture in the shader.\n   * @param name Define the name of the uniform samplers as defined in the shader\n   * @param texture Define the texture to bind to this sampler\n   * @return the material itself allowing \"fluent\" like uniform updates\n   */\n\n\n  ShaderMaterial.prototype.setExternalTexture = function (name, texture) {\n    if (this._options.externalTextures.indexOf(name) === -1) {\n      this._options.externalTextures.push(name);\n    }\n\n    this._externalTextures[name] = texture;\n    return this;\n  };\n  /**\n   * Set a float in the shader.\n   * @param name Define the name of the uniform as defined in the shader\n   * @param value Define the value to give to the uniform\n   * @return the material itself allowing \"fluent\" like uniform updates\n   */\n\n\n  ShaderMaterial.prototype.setFloat = function (name, value) {\n    this._checkUniform(name);\n\n    this._floats[name] = value;\n    return this;\n  };\n  /**\n   * Set a int in the shader.\n   * @param name Define the name of the uniform as defined in the shader\n   * @param value Define the value to give to the uniform\n   * @return the material itself allowing \"fluent\" like uniform updates\n   */\n\n\n  ShaderMaterial.prototype.setInt = function (name, value) {\n    this._checkUniform(name);\n\n    this._ints[name] = value;\n    return this;\n  };\n  /**\n   * Set an array of floats in the shader.\n   * @param name Define the name of the uniform as defined in the shader\n   * @param value Define the value to give to the uniform\n   * @return the material itself allowing \"fluent\" like uniform updates\n   */\n\n\n  ShaderMaterial.prototype.setFloats = function (name, value) {\n    this._checkUniform(name);\n\n    this._floatsArrays[name] = value;\n    return this;\n  };\n  /**\n   * Set a vec3 in the shader from a Color3.\n   * @param name Define the name of the uniform as defined in the shader\n   * @param value Define the value to give to the uniform\n   * @return the material itself allowing \"fluent\" like uniform updates\n   */\n\n\n  ShaderMaterial.prototype.setColor3 = function (name, value) {\n    this._checkUniform(name);\n\n    this._colors3[name] = value;\n    return this;\n  };\n  /**\n   * Set a vec3 array in the shader from a Color3 array.\n   * @param name Define the name of the uniform as defined in the shader\n   * @param value Define the value to give to the uniform\n   * @return the material itself allowing \"fluent\" like uniform updates\n   */\n\n\n  ShaderMaterial.prototype.setColor3Array = function (name, value) {\n    this._checkUniform(name);\n\n    this._colors3Arrays[name] = value.reduce(function (arr, color) {\n      color.toArray(arr, arr.length);\n      return arr;\n    }, []);\n    return this;\n  };\n  /**\n   * Set a vec4 in the shader from a Color4.\n   * @param name Define the name of the uniform as defined in the shader\n   * @param value Define the value to give to the uniform\n   * @return the material itself allowing \"fluent\" like uniform updates\n   */\n\n\n  ShaderMaterial.prototype.setColor4 = function (name, value) {\n    this._checkUniform(name);\n\n    this._colors4[name] = value;\n    return this;\n  };\n  /**\n   * Set a vec4 array in the shader from a Color4 array.\n   * @param name Define the name of the uniform as defined in the shader\n   * @param value Define the value to give to the uniform\n   * @return the material itself allowing \"fluent\" like uniform updates\n   */\n\n\n  ShaderMaterial.prototype.setColor4Array = function (name, value) {\n    this._checkUniform(name);\n\n    this._colors4Arrays[name] = value.reduce(function (arr, color) {\n      color.toArray(arr, arr.length);\n      return arr;\n    }, []);\n    return this;\n  };\n  /**\n   * Set a vec2 in the shader from a Vector2.\n   * @param name Define the name of the uniform as defined in the shader\n   * @param value Define the value to give to the uniform\n   * @return the material itself allowing \"fluent\" like uniform updates\n   */\n\n\n  ShaderMaterial.prototype.setVector2 = function (name, value) {\n    this._checkUniform(name);\n\n    this._vectors2[name] = value;\n    return this;\n  };\n  /**\n   * Set a vec3 in the shader from a Vector3.\n   * @param name Define the name of the uniform as defined in the shader\n   * @param value Define the value to give to the uniform\n   * @return the material itself allowing \"fluent\" like uniform updates\n   */\n\n\n  ShaderMaterial.prototype.setVector3 = function (name, value) {\n    this._checkUniform(name);\n\n    this._vectors3[name] = value;\n    return this;\n  };\n  /**\n   * Set a vec4 in the shader from a Vector4.\n   * @param name Define the name of the uniform as defined in the shader\n   * @param value Define the value to give to the uniform\n   * @return the material itself allowing \"fluent\" like uniform updates\n   */\n\n\n  ShaderMaterial.prototype.setVector4 = function (name, value) {\n    this._checkUniform(name);\n\n    this._vectors4[name] = value;\n    return this;\n  };\n  /**\n   * Set a mat4 in the shader from a Matrix.\n   * @param name Define the name of the uniform as defined in the shader\n   * @param value Define the value to give to the uniform\n   * @return the material itself allowing \"fluent\" like uniform updates\n   */\n\n\n  ShaderMaterial.prototype.setMatrix = function (name, value) {\n    this._checkUniform(name);\n\n    this._matrices[name] = value;\n    return this;\n  };\n  /**\n   * Set a float32Array in the shader from a matrix array.\n   * @param name Define the name of the uniform as defined in the shader\n   * @param value Define the value to give to the uniform\n   * @return the material itself allowing \"fluent\" like uniform updates\n   */\n\n\n  ShaderMaterial.prototype.setMatrices = function (name, value) {\n    this._checkUniform(name);\n\n    var float32Array = new Float32Array(value.length * 16);\n\n    for (var index = 0; index < value.length; index++) {\n      var matrix = value[index];\n      matrix.copyToArray(float32Array, index * 16);\n    }\n\n    this._matrixArrays[name] = float32Array;\n    return this;\n  };\n  /**\n   * Set a mat3 in the shader from a Float32Array.\n   * @param name Define the name of the uniform as defined in the shader\n   * @param value Define the value to give to the uniform\n   * @return the material itself allowing \"fluent\" like uniform updates\n   */\n\n\n  ShaderMaterial.prototype.setMatrix3x3 = function (name, value) {\n    this._checkUniform(name);\n\n    this._matrices3x3[name] = value;\n    return this;\n  };\n  /**\n   * Set a mat2 in the shader from a Float32Array.\n   * @param name Define the name of the uniform as defined in the shader\n   * @param value Define the value to give to the uniform\n   * @return the material itself allowing \"fluent\" like uniform updates\n   */\n\n\n  ShaderMaterial.prototype.setMatrix2x2 = function (name, value) {\n    this._checkUniform(name);\n\n    this._matrices2x2[name] = value;\n    return this;\n  };\n  /**\n   * Set a vec2 array in the shader from a number array.\n   * @param name Define the name of the uniform as defined in the shader\n   * @param value Define the value to give to the uniform\n   * @return the material itself allowing \"fluent\" like uniform updates\n   */\n\n\n  ShaderMaterial.prototype.setArray2 = function (name, value) {\n    this._checkUniform(name);\n\n    this._vectors2Arrays[name] = value;\n    return this;\n  };\n  /**\n   * Set a vec3 array in the shader from a number array.\n   * @param name Define the name of the uniform as defined in the shader\n   * @param value Define the value to give to the uniform\n   * @return the material itself allowing \"fluent\" like uniform updates\n   */\n\n\n  ShaderMaterial.prototype.setArray3 = function (name, value) {\n    this._checkUniform(name);\n\n    this._vectors3Arrays[name] = value;\n    return this;\n  };\n  /**\n   * Set a vec4 array in the shader from a number array.\n   * @param name Define the name of the uniform as defined in the shader\n   * @param value Define the value to give to the uniform\n   * @return the material itself allowing \"fluent\" like uniform updates\n   */\n\n\n  ShaderMaterial.prototype.setArray4 = function (name, value) {\n    this._checkUniform(name);\n\n    this._vectors4Arrays[name] = value;\n    return this;\n  };\n  /**\n   * Set a uniform buffer in the shader\n   * @param name Define the name of the uniform as defined in the shader\n   * @param buffer Define the value to give to the uniform\n   * @return the material itself allowing \"fluent\" like uniform updates\n   */\n\n\n  ShaderMaterial.prototype.setUniformBuffer = function (name, buffer) {\n    if (this._options.uniformBuffers.indexOf(name) === -1) {\n      this._options.uniformBuffers.push(name);\n    }\n\n    this._uniformBuffers[name] = buffer;\n    return this;\n  };\n  /**\n   * Set a texture sampler in the shader\n   * @param name Define the name of the uniform as defined in the shader\n   * @param sampler Define the value to give to the uniform\n   * @return the material itself allowing \"fluent\" like uniform updates\n   */\n\n\n  ShaderMaterial.prototype.setTextureSampler = function (name, sampler) {\n    if (this._options.samplerObjects.indexOf(name) === -1) {\n      this._options.samplerObjects.push(name);\n    }\n\n    this._textureSamplers[name] = sampler;\n    return this;\n  };\n  /**\n   * Set a storage buffer in the shader\n   * @param name Define the name of the storage buffer as defined in the shader\n   * @param buffer Define the value to give to the uniform\n   * @return the material itself allowing \"fluent\" like uniform updates\n   */\n\n\n  ShaderMaterial.prototype.setStorageBuffer = function (name, buffer) {\n    if (this._options.storageBuffers.indexOf(name) === -1) {\n      this._options.storageBuffers.push(name);\n    }\n\n    this._storageBuffers[name] = buffer;\n    return this;\n  };\n  /**\n   * Specifies that the submesh is ready to be used\n   * @param mesh defines the mesh to check\n   * @param subMesh defines which submesh to check\n   * @param useInstances specifies that instances should be used\n   * @returns a boolean indicating that the submesh is ready or not\n   */\n\n\n  ShaderMaterial.prototype.isReadyForSubMesh = function (mesh, subMesh, useInstances) {\n    return this.isReady(mesh, useInstances, subMesh);\n  };\n  /**\n   * Checks if the material is ready to render the requested mesh\n   * @param mesh Define the mesh to render\n   * @param useInstances Define whether or not the material is used with instances\n   * @param subMesh defines which submesh to render\n   * @returns true if ready, otherwise false\n   */\n\n\n  ShaderMaterial.prototype.isReady = function (mesh, useInstances, subMesh) {\n    var _a, _b, _c, _d;\n\n    var storeEffectOnSubMeshes = subMesh && this._storeEffectOnSubMeshes;\n\n    if (this.isFrozen) {\n      if (storeEffectOnSubMeshes) {\n        if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\n          return true;\n        }\n      } else {\n        var effect_1 = this._drawWrapper.effect;\n\n        if (effect_1 && effect_1._wasPreviouslyReady && this._effectUsesInstances === useInstances) {\n          return true;\n        }\n      }\n    }\n\n    var scene = this.getScene();\n    var engine = scene.getEngine(); // Instances\n\n    var defines = [];\n    var attribs = [];\n    var fallbacks = new EffectFallbacks();\n    var shaderName = this._shaderPath,\n        uniforms = this._options.uniforms,\n        uniformBuffers = this._options.uniformBuffers,\n        samplers = this._options.samplers; // global multiview\n\n    if (engine.getCaps().multiview && scene.activeCamera && scene.activeCamera.outputRenderTarget && scene.activeCamera.outputRenderTarget.getViewCount() > 1) {\n      this._multiview = true;\n      defines.push(\"#define MULTIVIEW\");\n\n      if (this._options.uniforms.indexOf(\"viewProjection\") !== -1 && this._options.uniforms.indexOf(\"viewProjectionR\") === -1) {\n        this._options.uniforms.push(\"viewProjectionR\");\n      }\n    }\n\n    for (var index = 0; index < this._options.defines.length; index++) {\n      var defineToAdd = this._options.defines[index].indexOf(\"#define\") === 0 ? this._options.defines[index] : \"#define \".concat(this._options.defines[index]);\n      defines.push(defineToAdd);\n    }\n\n    for (var index = 0; index < this._options.attributes.length; index++) {\n      attribs.push(this._options.attributes[index]);\n    }\n\n    if (mesh && mesh.isVerticesDataPresent(VertexBuffer.ColorKind)) {\n      attribs.push(VertexBuffer.ColorKind);\n      defines.push(\"#define VERTEXCOLOR\");\n    }\n\n    if (useInstances) {\n      defines.push(\"#define INSTANCES\");\n      MaterialHelper.PushAttributesForInstances(attribs);\n\n      if (mesh === null || mesh === void 0 ? void 0 : mesh.hasThinInstances) {\n        defines.push(\"#define THIN_INSTANCES\");\n\n        if (mesh && mesh.isVerticesDataPresent(VertexBuffer.ColorInstanceKind)) {\n          attribs.push(VertexBuffer.ColorInstanceKind);\n          defines.push(\"#define INSTANCESCOLOR\");\n        }\n      }\n    } // Bones\n\n\n    if (mesh && mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\n      attribs.push(VertexBuffer.MatricesIndicesKind);\n      attribs.push(VertexBuffer.MatricesWeightsKind);\n\n      if (mesh.numBoneInfluencers > 4) {\n        attribs.push(VertexBuffer.MatricesIndicesExtraKind);\n        attribs.push(VertexBuffer.MatricesWeightsExtraKind);\n      }\n\n      var skeleton = mesh.skeleton;\n      defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\n      fallbacks.addCPUSkinningFallback(0, mesh);\n\n      if (skeleton.isUsingTextureForMatrices) {\n        defines.push(\"#define BONETEXTURE\");\n\n        if (this._options.uniforms.indexOf(\"boneTextureWidth\") === -1) {\n          this._options.uniforms.push(\"boneTextureWidth\");\n        }\n\n        if (this._options.samplers.indexOf(\"boneSampler\") === -1) {\n          this._options.samplers.push(\"boneSampler\");\n        }\n      } else {\n        defines.push(\"#define BonesPerMesh \" + (skeleton.bones.length + 1));\n\n        if (this._options.uniforms.indexOf(\"mBones\") === -1) {\n          this._options.uniforms.push(\"mBones\");\n        }\n      }\n    } else {\n      defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\n    } // Morph\n\n\n    var numInfluencers = 0;\n    var manager = mesh ? mesh.morphTargetManager : null;\n\n    if (manager) {\n      var uv = manager.supportsUVs && defines.indexOf(\"#define UV1\") !== -1;\n      var tangent = manager.supportsTangents && defines.indexOf(\"#define TANGENT\") !== -1;\n      var normal = manager.supportsNormals && defines.indexOf(\"#define NORMAL\") !== -1;\n      numInfluencers = manager.numInfluencers;\n\n      if (uv) {\n        defines.push(\"#define MORPHTARGETS_UV\");\n      }\n\n      if (tangent) {\n        defines.push(\"#define MORPHTARGETS_TANGENT\");\n      }\n\n      if (normal) {\n        defines.push(\"#define MORPHTARGETS_NORMAL\");\n      }\n\n      if (numInfluencers > 0) {\n        defines.push(\"#define MORPHTARGETS\");\n      }\n\n      if (manager.isUsingTextureForTargets) {\n        defines.push(\"#define MORPHTARGETS_TEXTURE\");\n\n        if (this._options.uniforms.indexOf(\"morphTargetTextureIndices\") === -1) {\n          this._options.uniforms.push(\"morphTargetTextureIndices\");\n        }\n\n        if (this._options.samplers.indexOf(\"morphTargets\") === -1) {\n          this._options.samplers.push(\"morphTargets\");\n        }\n      }\n\n      defines.push(\"#define NUM_MORPH_INFLUENCERS \" + numInfluencers);\n\n      for (var index = 0; index < numInfluencers; index++) {\n        attribs.push(VertexBuffer.PositionKind + index);\n\n        if (normal) {\n          attribs.push(VertexBuffer.NormalKind + index);\n        }\n\n        if (tangent) {\n          attribs.push(VertexBuffer.TangentKind + index);\n        }\n\n        if (uv) {\n          attribs.push(VertexBuffer.UVKind + \"_\" + index);\n        }\n      }\n\n      if (numInfluencers > 0) {\n        uniforms = uniforms.slice();\n        uniforms.push(\"morphTargetInfluences\");\n        uniforms.push(\"morphTargetTextureInfo\");\n        uniforms.push(\"morphTargetTextureIndices\");\n      }\n    } else {\n      defines.push(\"#define NUM_MORPH_INFLUENCERS 0\");\n    } // Baked Vertex Animation\n\n\n    if (mesh) {\n      var bvaManager = mesh.bakedVertexAnimationManager;\n\n      if (bvaManager && bvaManager.isEnabled) {\n        defines.push(\"#define BAKED_VERTEX_ANIMATION_TEXTURE\");\n\n        if (this._options.uniforms.indexOf(\"bakedVertexAnimationSettings\") === -1) {\n          this._options.uniforms.push(\"bakedVertexAnimationSettings\");\n        }\n\n        if (this._options.uniforms.indexOf(\"bakedVertexAnimationTextureSizeInverted\") === -1) {\n          this._options.uniforms.push(\"bakedVertexAnimationTextureSizeInverted\");\n        }\n\n        if (this._options.uniforms.indexOf(\"bakedVertexAnimationTime\") === -1) {\n          this._options.uniforms.push(\"bakedVertexAnimationTime\");\n        }\n\n        if (this._options.samplers.indexOf(\"bakedVertexAnimationTexture\") === -1) {\n          this._options.samplers.push(\"bakedVertexAnimationTexture\");\n        }\n      }\n\n      MaterialHelper.PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\n    } // Textures\n\n\n    for (var name_1 in this._textures) {\n      if (!this._textures[name_1].isReady()) {\n        return false;\n      }\n    } // Alpha test\n\n\n    if (mesh && this._shouldTurnAlphaTestOn(mesh)) {\n      defines.push(\"#define ALPHATEST\");\n    } // Clip planes\n\n\n    if (this._options.useClipPlane === null && !!scene.clipPlane || this._options.useClipPlane) {\n      defines.push(\"#define CLIPPLANE\");\n\n      if (uniforms.indexOf(\"vClipPlane\") === -1) {\n        uniforms.push(\"vClipPlane\");\n      }\n    }\n\n    if (this._options.useClipPlane === null && !!scene.clipPlane2 || this._options.useClipPlane) {\n      defines.push(\"#define CLIPPLANE2\");\n\n      if (uniforms.indexOf(\"vClipPlane2\") === -1) {\n        uniforms.push(\"vClipPlane2\");\n      }\n    }\n\n    if (this._options.useClipPlane === null && !!scene.clipPlane3 || this._options.useClipPlane) {\n      defines.push(\"#define CLIPPLANE3\");\n\n      if (uniforms.indexOf(\"vClipPlane3\") === -1) {\n        uniforms.push(\"vClipPlane3\");\n      }\n    }\n\n    if (this._options.useClipPlane === null && !!scene.clipPlane4 || this._options.useClipPlane) {\n      defines.push(\"#define CLIPPLANE4\");\n\n      if (uniforms.indexOf(\"vClipPlane4\") === -1) {\n        uniforms.push(\"vClipPlane4\");\n      }\n    }\n\n    if (this._options.useClipPlane === null && !!scene.clipPlane5 || this._options.useClipPlane) {\n      defines.push(\"#define CLIPPLANE5\");\n\n      if (uniforms.indexOf(\"vClipPlane5\") === -1) {\n        uniforms.push(\"vClipPlane5\");\n      }\n    }\n\n    if (this._options.useClipPlane === null && !!scene.clipPlane6 || this._options.useClipPlane) {\n      defines.push(\"#define CLIPPLANE6\");\n\n      if (uniforms.indexOf(\"vClipPlane6\") === -1) {\n        uniforms.push(\"vClipPlane6\");\n      }\n    }\n\n    if (this.customShaderNameResolve) {\n      uniforms = uniforms.slice();\n      uniformBuffers = uniformBuffers.slice();\n      samplers = samplers.slice();\n      shaderName = this.customShaderNameResolve(shaderName, uniforms, uniformBuffers, samplers, defines, attribs);\n    }\n\n    var drawWrapper = storeEffectOnSubMeshes ? subMesh._getDrawWrapper() : this._drawWrapper;\n    var previousEffect = (_a = drawWrapper === null || drawWrapper === void 0 ? void 0 : drawWrapper.effect) !== null && _a !== void 0 ? _a : null;\n    var previousDefines = (_b = drawWrapper === null || drawWrapper === void 0 ? void 0 : drawWrapper.defines) !== null && _b !== void 0 ? _b : null;\n    var join = defines.join(\"\\n\");\n    var effect = previousEffect;\n\n    if (previousDefines !== join) {\n      effect = engine.createEffect(shaderName, {\n        attributes: attribs,\n        uniformsNames: uniforms,\n        uniformBuffersNames: uniformBuffers,\n        samplers: samplers,\n        defines: join,\n        fallbacks: fallbacks,\n        onCompiled: this.onCompiled,\n        onError: this.onError,\n        indexParameters: {\n          maxSimultaneousMorphTargets: numInfluencers\n        },\n        shaderLanguage: this._options.shaderLanguage\n      }, engine);\n\n      if (storeEffectOnSubMeshes) {\n        subMesh.setEffect(effect, join, this._materialContext);\n      } else if (drawWrapper) {\n        drawWrapper.setEffect(effect, join);\n      }\n\n      if (this._onEffectCreatedObservable) {\n        onCreatedEffectParameters.effect = effect;\n        onCreatedEffectParameters.subMesh = (_c = subMesh !== null && subMesh !== void 0 ? subMesh : mesh === null || mesh === void 0 ? void 0 : mesh.subMeshes[0]) !== null && _c !== void 0 ? _c : null;\n\n        this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\n      }\n    }\n\n    this._effectUsesInstances = !!useInstances;\n\n    if ((_d = !(effect === null || effect === void 0 ? void 0 : effect.isReady())) !== null && _d !== void 0 ? _d : true) {\n      return false;\n    }\n\n    if (previousEffect !== effect) {\n      scene.resetCachedMaterial();\n    }\n\n    effect._wasPreviouslyReady = true;\n    return true;\n  };\n  /**\n   * Binds the world matrix to the material\n   * @param world defines the world transformation matrix\n   * @param effectOverride - If provided, use this effect instead of internal effect\n   */\n\n\n  ShaderMaterial.prototype.bindOnlyWorldMatrix = function (world, effectOverride) {\n    var scene = this.getScene();\n    var effect = effectOverride !== null && effectOverride !== void 0 ? effectOverride : this.getEffect();\n\n    if (!effect) {\n      return;\n    }\n\n    if (this._options.uniforms.indexOf(\"world\") !== -1) {\n      effect.setMatrix(\"world\", world);\n    }\n\n    if (this._options.uniforms.indexOf(\"worldView\") !== -1) {\n      world.multiplyToRef(scene.getViewMatrix(), this._cachedWorldViewMatrix);\n      effect.setMatrix(\"worldView\", this._cachedWorldViewMatrix);\n    }\n\n    if (this._options.uniforms.indexOf(\"worldViewProjection\") !== -1) {\n      world.multiplyToRef(scene.getTransformMatrix(), this._cachedWorldViewProjectionMatrix);\n      effect.setMatrix(\"worldViewProjection\", this._cachedWorldViewProjectionMatrix);\n    }\n  };\n  /**\n   * Binds the submesh to this material by preparing the effect and shader to draw\n   * @param world defines the world transformation matrix\n   * @param mesh defines the mesh containing the submesh\n   * @param subMesh defines the submesh to bind the material to\n   */\n\n\n  ShaderMaterial.prototype.bindForSubMesh = function (world, mesh, subMesh) {\n    var _a;\n\n    this.bind(world, mesh, (_a = subMesh._drawWrapperOverride) === null || _a === void 0 ? void 0 : _a.effect, subMesh);\n  };\n  /**\n   * Binds the material to the mesh\n   * @param world defines the world transformation matrix\n   * @param mesh defines the mesh to bind the material to\n   * @param effectOverride - If provided, use this effect instead of internal effect\n   * @param subMesh defines the submesh to bind the material to\n   */\n\n\n  ShaderMaterial.prototype.bind = function (world, mesh, effectOverride, subMesh) {\n    var _a; // Std values\n\n\n    var storeEffectOnSubMeshes = subMesh && this._storeEffectOnSubMeshes;\n    var effect = effectOverride !== null && effectOverride !== void 0 ? effectOverride : storeEffectOnSubMeshes ? subMesh.effect : this.getEffect();\n\n    if (!effect) {\n      return;\n    }\n\n    this._activeEffect = effect;\n    this.bindOnlyWorldMatrix(world, effectOverride);\n    var uniformBuffers = this._options.uniformBuffers;\n    var useSceneUBO = false;\n\n    if (effect && uniformBuffers && uniformBuffers.length > 0 && this.getScene().getEngine().supportsUniformBuffers) {\n      for (var i = 0; i < uniformBuffers.length; ++i) {\n        var bufferName = uniformBuffers[i];\n\n        switch (bufferName) {\n          case \"Mesh\":\n            if (mesh) {\n              mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\n              mesh.transferToEffect(world);\n            }\n\n            break;\n\n          case \"Scene\":\n            MaterialHelper.BindSceneUniformBuffer(effect, this.getScene().getSceneUniformBuffer());\n            this.getScene().finalizeSceneUbo();\n            useSceneUBO = true;\n            break;\n        }\n      }\n    }\n\n    var mustRebind = mesh && storeEffectOnSubMeshes ? this._mustRebind(this.getScene(), effect, mesh.visibility) : this.getScene().getCachedMaterial() !== this;\n\n    if (effect && mustRebind) {\n      if (!useSceneUBO && this._options.uniforms.indexOf(\"view\") !== -1) {\n        effect.setMatrix(\"view\", this.getScene().getViewMatrix());\n      }\n\n      if (!useSceneUBO && this._options.uniforms.indexOf(\"projection\") !== -1) {\n        effect.setMatrix(\"projection\", this.getScene().getProjectionMatrix());\n      }\n\n      if (!useSceneUBO && this._options.uniforms.indexOf(\"viewProjection\") !== -1) {\n        effect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\n\n        if (this._multiview) {\n          effect.setMatrix(\"viewProjectionR\", this.getScene()._transformMatrixR);\n        }\n      }\n\n      if (this.getScene().activeCamera && this._options.uniforms.indexOf(\"cameraPosition\") !== -1) {\n        effect.setVector3(\"cameraPosition\", this.getScene().activeCamera.globalPosition);\n      } // Bones\n\n\n      MaterialHelper.BindBonesParameters(mesh, effect); // Clip plane\n\n      MaterialHelper.BindClipPlane(effect, this.getScene());\n      var name_2; // Texture\n\n      for (name_2 in this._textures) {\n        effect.setTexture(name_2, this._textures[name_2]);\n      } // Texture arrays\n\n\n      for (name_2 in this._textureArrays) {\n        effect.setTextureArray(name_2, this._textureArrays[name_2]);\n      } // External texture\n\n\n      for (name_2 in this._externalTextures) {\n        effect.setExternalTexture(name_2, this._externalTextures[name_2]);\n      } // Int\n\n\n      for (name_2 in this._ints) {\n        effect.setInt(name_2, this._ints[name_2]);\n      } // Float\n\n\n      for (name_2 in this._floats) {\n        effect.setFloat(name_2, this._floats[name_2]);\n      } // Floats\n\n\n      for (name_2 in this._floatsArrays) {\n        effect.setArray(name_2, this._floatsArrays[name_2]);\n      } // Color3\n\n\n      for (name_2 in this._colors3) {\n        effect.setColor3(name_2, this._colors3[name_2]);\n      } // Color3Array\n\n\n      for (name_2 in this._colors3Arrays) {\n        effect.setArray3(name_2, this._colors3Arrays[name_2]);\n      } // Color4\n\n\n      for (name_2 in this._colors4) {\n        var color = this._colors4[name_2];\n        effect.setFloat4(name_2, color.r, color.g, color.b, color.a);\n      } // Color4Array\n\n\n      for (name_2 in this._colors4Arrays) {\n        effect.setArray4(name_2, this._colors4Arrays[name_2]);\n      } // Vector2\n\n\n      for (name_2 in this._vectors2) {\n        effect.setVector2(name_2, this._vectors2[name_2]);\n      } // Vector3\n\n\n      for (name_2 in this._vectors3) {\n        effect.setVector3(name_2, this._vectors3[name_2]);\n      } // Vector4\n\n\n      for (name_2 in this._vectors4) {\n        effect.setVector4(name_2, this._vectors4[name_2]);\n      } // Matrix\n\n\n      for (name_2 in this._matrices) {\n        effect.setMatrix(name_2, this._matrices[name_2]);\n      } // MatrixArray\n\n\n      for (name_2 in this._matrixArrays) {\n        effect.setMatrices(name_2, this._matrixArrays[name_2]);\n      } // Matrix 3x3\n\n\n      for (name_2 in this._matrices3x3) {\n        effect.setMatrix3x3(name_2, this._matrices3x3[name_2]);\n      } // Matrix 2x2\n\n\n      for (name_2 in this._matrices2x2) {\n        effect.setMatrix2x2(name_2, this._matrices2x2[name_2]);\n      } // Vector2Array\n\n\n      for (name_2 in this._vectors2Arrays) {\n        effect.setArray2(name_2, this._vectors2Arrays[name_2]);\n      } // Vector3Array\n\n\n      for (name_2 in this._vectors3Arrays) {\n        effect.setArray3(name_2, this._vectors3Arrays[name_2]);\n      } // Vector4Array\n\n\n      for (name_2 in this._vectors4Arrays) {\n        effect.setArray4(name_2, this._vectors4Arrays[name_2]);\n      } // Uniform buffers\n\n\n      for (name_2 in this._uniformBuffers) {\n        var buffer = this._uniformBuffers[name_2].getBuffer();\n\n        if (buffer) {\n          effect.bindUniformBuffer(buffer, name_2);\n        }\n      } // Samplers\n\n\n      for (name_2 in this._textureSamplers) {\n        effect.setTextureSampler(name_2, this._textureSamplers[name_2]);\n      } // Storage buffers\n\n\n      for (name_2 in this._storageBuffers) {\n        effect.setStorageBuffer(name_2, this._storageBuffers[name_2]);\n      }\n    }\n\n    if (effect && mesh && (mustRebind || !this.isFrozen)) {\n      // Morph targets\n      var manager = mesh.morphTargetManager;\n\n      if (manager && manager.numInfluencers > 0) {\n        MaterialHelper.BindMorphTargetParameters(mesh, effect);\n      }\n\n      var bvaManager = mesh.bakedVertexAnimationManager;\n\n      if (bvaManager && bvaManager.isEnabled) {\n        (_a = mesh.bakedVertexAnimationManager) === null || _a === void 0 ? void 0 : _a.bind(effect, this._effectUsesInstances);\n      }\n    }\n\n    this._afterBind(mesh, effect);\n  };\n  /**\n   * Gets the active textures from the material\n   * @returns an array of textures\n   */\n\n\n  ShaderMaterial.prototype.getActiveTextures = function () {\n    var activeTextures = _super.prototype.getActiveTextures.call(this);\n\n    for (var name_3 in this._textures) {\n      activeTextures.push(this._textures[name_3]);\n    }\n\n    for (var name_4 in this._textureArrays) {\n      var array = this._textureArrays[name_4];\n\n      for (var index = 0; index < array.length; index++) {\n        activeTextures.push(array[index]);\n      }\n    }\n\n    return activeTextures;\n  };\n  /**\n   * Specifies if the material uses a texture\n   * @param texture defines the texture to check against the material\n   * @returns a boolean specifying if the material uses the texture\n   */\n\n\n  ShaderMaterial.prototype.hasTexture = function (texture) {\n    if (_super.prototype.hasTexture.call(this, texture)) {\n      return true;\n    }\n\n    for (var name_5 in this._textures) {\n      if (this._textures[name_5] === texture) {\n        return true;\n      }\n    }\n\n    for (var name_6 in this._textureArrays) {\n      var array = this._textureArrays[name_6];\n\n      for (var index = 0; index < array.length; index++) {\n        if (array[index] === texture) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Makes a duplicate of the material, and gives it a new name\n   * @param name defines the new name for the duplicated material\n   * @returns the cloned material\n   */\n\n\n  ShaderMaterial.prototype.clone = function (name) {\n    var _this = this;\n\n    var result = SerializationHelper.Clone(function () {\n      return new ShaderMaterial(name, _this.getScene(), _this._shaderPath, _this._options, _this._storeEffectOnSubMeshes);\n    }, this);\n    result.name = name;\n    result.id = name; // Shader code path\n\n    if (_typeof(result._shaderPath) === \"object\") {\n      result._shaderPath = __assign({}, result._shaderPath);\n    } // Options\n\n\n    this._options = __assign({}, this._options);\n    Object.keys(this._options).forEach(function (propName) {\n      var propValue = _this._options[propName];\n\n      if (Array.isArray(propValue)) {\n        _this._options[propName] = propValue.slice(0);\n      }\n    }); // Stencil\n\n    this.stencil.copyTo(result.stencil); // Texture\n\n    for (var key in this._textures) {\n      result.setTexture(key, this._textures[key]);\n    } // TextureArray\n\n\n    for (var key in this._textureArrays) {\n      result.setTextureArray(key, this._textureArrays[key]);\n    } // External texture\n\n\n    for (var key in this._externalTextures) {\n      result.setExternalTexture(key, this._externalTextures[key]);\n    } // Int\n\n\n    for (var key in this._ints) {\n      result.setInt(key, this._ints[key]);\n    } // Float\n\n\n    for (var key in this._floats) {\n      result.setFloat(key, this._floats[key]);\n    } // Floats\n\n\n    for (var key in this._floatsArrays) {\n      result.setFloats(key, this._floatsArrays[key]);\n    } // Color3\n\n\n    for (var key in this._colors3) {\n      result.setColor3(key, this._colors3[key]);\n    } // Color3Array\n\n\n    for (var key in this._colors3Arrays) {\n      result._colors3Arrays[key] = this._colors3Arrays[key];\n    } // Color4\n\n\n    for (var key in this._colors4) {\n      result.setColor4(key, this._colors4[key]);\n    } // Color4Array\n\n\n    for (var key in this._colors4Arrays) {\n      result._colors4Arrays[key] = this._colors4Arrays[key];\n    } // Vector2\n\n\n    for (var key in this._vectors2) {\n      result.setVector2(key, this._vectors2[key]);\n    } // Vector3\n\n\n    for (var key in this._vectors3) {\n      result.setVector3(key, this._vectors3[key]);\n    } // Vector4\n\n\n    for (var key in this._vectors4) {\n      result.setVector4(key, this._vectors4[key]);\n    } // Matrix\n\n\n    for (var key in this._matrices) {\n      result.setMatrix(key, this._matrices[key]);\n    } // MatrixArray\n\n\n    for (var key in this._matrixArrays) {\n      result._matrixArrays[key] = this._matrixArrays[key].slice();\n    } // Matrix 3x3\n\n\n    for (var key in this._matrices3x3) {\n      result.setMatrix3x3(key, this._matrices3x3[key]);\n    } // Matrix 2x2\n\n\n    for (var key in this._matrices2x2) {\n      result.setMatrix2x2(key, this._matrices2x2[key]);\n    } // Vector2Array\n\n\n    for (var key in this._vectors2Arrays) {\n      result.setArray2(key, this._vectors2Arrays[key]);\n    } // Vector3Array\n\n\n    for (var key in this._vectors3Arrays) {\n      result.setArray3(key, this._vectors3Arrays[key]);\n    } // Vector4Array\n\n\n    for (var key in this._vectors4Arrays) {\n      result.setArray4(key, this._vectors4Arrays[key]);\n    } // Uniform buffers\n\n\n    for (var key in this._uniformBuffers) {\n      result.setUniformBuffer(key, this._uniformBuffers[key]);\n    } // Samplers\n\n\n    for (var key in this._textureSamplers) {\n      result.setTextureSampler(key, this._textureSamplers[key]);\n    } // Storag buffers\n\n\n    for (var key in this._storageBuffers) {\n      result.setStorageBuffer(key, this._storageBuffers[key]);\n    }\n\n    return result;\n  };\n  /**\n   * Disposes the material\n   * @param forceDisposeEffect specifies if effects should be forcefully disposed\n   * @param forceDisposeTextures specifies if textures should be forcefully disposed\n   * @param notBoundToMesh specifies if the material that is being disposed is known to be not bound to any mesh\n   */\n\n\n  ShaderMaterial.prototype.dispose = function (forceDisposeEffect, forceDisposeTextures, notBoundToMesh) {\n    if (forceDisposeTextures) {\n      var name_7;\n\n      for (name_7 in this._textures) {\n        this._textures[name_7].dispose();\n      }\n\n      for (name_7 in this._textureArrays) {\n        var array = this._textureArrays[name_7];\n\n        for (var index = 0; index < array.length; index++) {\n          array[index].dispose();\n        }\n      }\n    }\n\n    this._textures = {};\n\n    _super.prototype.dispose.call(this, forceDisposeEffect, forceDisposeTextures, notBoundToMesh);\n  };\n  /**\n   * Serializes this material in a JSON representation\n   * @returns the serialized material object\n   */\n\n\n  ShaderMaterial.prototype.serialize = function () {\n    var serializationObject = SerializationHelper.Serialize(this);\n    serializationObject.customType = \"BABYLON.ShaderMaterial\";\n    serializationObject.options = this._options;\n    serializationObject.shaderPath = this._shaderPath;\n    serializationObject.storeEffectOnSubMeshes = this._storeEffectOnSubMeshes;\n    var name; // Stencil\n\n    serializationObject.stencil = this.stencil.serialize(); // Texture\n\n    serializationObject.textures = {};\n\n    for (name in this._textures) {\n      serializationObject.textures[name] = this._textures[name].serialize();\n    } // Texture arrays\n\n\n    serializationObject.textureArrays = {};\n\n    for (name in this._textureArrays) {\n      serializationObject.textureArrays[name] = [];\n      var array = this._textureArrays[name];\n\n      for (var index = 0; index < array.length; index++) {\n        serializationObject.textureArrays[name].push(array[index].serialize());\n      }\n    } // Int\n\n\n    serializationObject.ints = {};\n\n    for (name in this._ints) {\n      serializationObject.ints[name] = this._ints[name];\n    } // Float\n\n\n    serializationObject.floats = {};\n\n    for (name in this._floats) {\n      serializationObject.floats[name] = this._floats[name];\n    } // Floats\n\n\n    serializationObject.FloatArrays = {};\n\n    for (name in this._floatsArrays) {\n      serializationObject.FloatArrays[name] = this._floatsArrays[name];\n    } // Color3\n\n\n    serializationObject.colors3 = {};\n\n    for (name in this._colors3) {\n      serializationObject.colors3[name] = this._colors3[name].asArray();\n    } // Color3 array\n\n\n    serializationObject.colors3Arrays = {};\n\n    for (name in this._colors3Arrays) {\n      serializationObject.colors3Arrays[name] = this._colors3Arrays[name];\n    } // Color4\n\n\n    serializationObject.colors4 = {};\n\n    for (name in this._colors4) {\n      serializationObject.colors4[name] = this._colors4[name].asArray();\n    } // Color4 array\n\n\n    serializationObject.colors4Arrays = {};\n\n    for (name in this._colors4Arrays) {\n      serializationObject.colors4Arrays[name] = this._colors4Arrays[name];\n    } // Vector2\n\n\n    serializationObject.vectors2 = {};\n\n    for (name in this._vectors2) {\n      serializationObject.vectors2[name] = this._vectors2[name].asArray();\n    } // Vector3\n\n\n    serializationObject.vectors3 = {};\n\n    for (name in this._vectors3) {\n      serializationObject.vectors3[name] = this._vectors3[name].asArray();\n    } // Vector4\n\n\n    serializationObject.vectors4 = {};\n\n    for (name in this._vectors4) {\n      serializationObject.vectors4[name] = this._vectors4[name].asArray();\n    } // Matrix\n\n\n    serializationObject.matrices = {};\n\n    for (name in this._matrices) {\n      serializationObject.matrices[name] = this._matrices[name].asArray();\n    } // MatrixArray\n\n\n    serializationObject.matrixArray = {};\n\n    for (name in this._matrixArrays) {\n      serializationObject.matrixArray[name] = this._matrixArrays[name];\n    } // Matrix 3x3\n\n\n    serializationObject.matrices3x3 = {};\n\n    for (name in this._matrices3x3) {\n      serializationObject.matrices3x3[name] = this._matrices3x3[name];\n    } // Matrix 2x2\n\n\n    serializationObject.matrices2x2 = {};\n\n    for (name in this._matrices2x2) {\n      serializationObject.matrices2x2[name] = this._matrices2x2[name];\n    } // Vector2Array\n\n\n    serializationObject.vectors2Arrays = {};\n\n    for (name in this._vectors2Arrays) {\n      serializationObject.vectors2Arrays[name] = this._vectors2Arrays[name];\n    } // Vector3Array\n\n\n    serializationObject.vectors3Arrays = {};\n\n    for (name in this._vectors3Arrays) {\n      serializationObject.vectors3Arrays[name] = this._vectors3Arrays[name];\n    } // Vector4Array\n\n\n    serializationObject.vectors4Arrays = {};\n\n    for (name in this._vectors4Arrays) {\n      serializationObject.vectors4Arrays[name] = this._vectors4Arrays[name];\n    }\n\n    return serializationObject;\n  };\n  /**\n   * Creates a shader material from parsed shader material data\n   * @param source defines the JSON representation of the material\n   * @param scene defines the hosting scene\n   * @param rootUrl defines the root URL to use to load textures and relative dependencies\n   * @returns a new material\n   */\n\n\n  ShaderMaterial.Parse = function (source, scene, rootUrl) {\n    var material = SerializationHelper.Parse(function () {\n      return new ShaderMaterial(source.name, scene, source.shaderPath, source.options, source.storeEffectOnSubMeshes);\n    }, source, scene, rootUrl);\n    var name; // Stencil\n\n    if (source.stencil) {\n      material.stencil.parse(source.stencil, scene, rootUrl);\n    } // Texture\n\n\n    for (name in source.textures) {\n      material.setTexture(name, Texture.Parse(source.textures[name], scene, rootUrl));\n    } // Texture arrays\n\n\n    for (name in source.textureArrays) {\n      var array = source.textureArrays[name];\n      var textureArray = new Array();\n\n      for (var index = 0; index < array.length; index++) {\n        textureArray.push(Texture.Parse(array[index], scene, rootUrl));\n      }\n\n      material.setTextureArray(name, textureArray);\n    } // Int\n\n\n    for (name in source.ints) {\n      material.setInt(name, source.ints[name]);\n    } // Float\n\n\n    for (name in source.floats) {\n      material.setFloat(name, source.floats[name]);\n    } // Floats\n\n\n    for (name in source.floatsArrays) {\n      material.setFloats(name, source.floatsArrays[name]);\n    } // Color3\n\n\n    for (name in source.colors3) {\n      material.setColor3(name, Color3.FromArray(source.colors3[name]));\n    } // Color3 arrays\n\n\n    for (name in source.colors3Arrays) {\n      var colors = source.colors3Arrays[name].reduce(function (arr, num, i) {\n        if (i % 3 === 0) {\n          arr.push([num]);\n        } else {\n          arr[arr.length - 1].push(num);\n        }\n\n        return arr;\n      }, []).map(function (color) {\n        return Color3.FromArray(color);\n      });\n      material.setColor3Array(name, colors);\n    } // Color4\n\n\n    for (name in source.colors4) {\n      material.setColor4(name, Color4.FromArray(source.colors4[name]));\n    } // Color4 arrays\n\n\n    for (name in source.colors4Arrays) {\n      var colors = source.colors4Arrays[name].reduce(function (arr, num, i) {\n        if (i % 4 === 0) {\n          arr.push([num]);\n        } else {\n          arr[arr.length - 1].push(num);\n        }\n\n        return arr;\n      }, []).map(function (color) {\n        return Color4.FromArray(color);\n      });\n      material.setColor4Array(name, colors);\n    } // Vector2\n\n\n    for (name in source.vectors2) {\n      material.setVector2(name, Vector2.FromArray(source.vectors2[name]));\n    } // Vector3\n\n\n    for (name in source.vectors3) {\n      material.setVector3(name, Vector3.FromArray(source.vectors3[name]));\n    } // Vector4\n\n\n    for (name in source.vectors4) {\n      material.setVector4(name, Vector4.FromArray(source.vectors4[name]));\n    } // Matrix\n\n\n    for (name in source.matrices) {\n      material.setMatrix(name, Matrix.FromArray(source.matrices[name]));\n    } // MatrixArray\n\n\n    for (name in source.matrixArray) {\n      material._matrixArrays[name] = new Float32Array(source.matrixArray[name]);\n    } // Matrix 3x3\n\n\n    for (name in source.matrices3x3) {\n      material.setMatrix3x3(name, source.matrices3x3[name]);\n    } // Matrix 2x2\n\n\n    for (name in source.matrices2x2) {\n      material.setMatrix2x2(name, source.matrices2x2[name]);\n    } // Vector2Array\n\n\n    for (name in source.vectors2Arrays) {\n      material.setArray2(name, source.vectors2Arrays[name]);\n    } // Vector3Array\n\n\n    for (name in source.vectors3Arrays) {\n      material.setArray3(name, source.vectors3Arrays[name]);\n    } // Vector4Array\n\n\n    for (name in source.vectors4Arrays) {\n      material.setArray4(name, source.vectors4Arrays[name]);\n    }\n\n    return material;\n  };\n  /**\n   * Creates a new ShaderMaterial from a snippet saved in a remote file\n   * @param name defines the name of the ShaderMaterial to create (can be null or empty to use the one from the json data)\n   * @param url defines the url to load from\n   * @param scene defines the hosting scene\n   * @param rootUrl defines the root URL to use to load textures and relative dependencies\n   * @returns a promise that will resolve to the new ShaderMaterial\n   */\n\n\n  ShaderMaterial.ParseFromFileAsync = function (name, url, scene, rootUrl) {\n    var _this = this;\n\n    if (rootUrl === void 0) {\n      rootUrl = \"\";\n    }\n\n    return new Promise(function (resolve, reject) {\n      var request = new WebRequest();\n      request.addEventListener(\"readystatechange\", function () {\n        if (request.readyState == 4) {\n          if (request.status == 200) {\n            var serializationObject = JSON.parse(request.responseText);\n\n            var output = _this.Parse(serializationObject, scene || EngineStore.LastCreatedScene, rootUrl);\n\n            if (name) {\n              output.name = name;\n            }\n\n            resolve(output);\n          } else {\n            reject(\"Unable to load the ShaderMaterial\");\n          }\n        }\n      });\n      request.open(\"GET\", url);\n      request.send();\n    });\n  };\n  /**\n   * Creates a ShaderMaterial from a snippet saved by the Inspector\n   * @param snippetId defines the snippet to load\n   * @param scene defines the hosting scene\n   * @param rootUrl defines the root URL to use to load textures and relative dependencies\n   * @returns a promise that will resolve to the new ShaderMaterial\n   */\n\n\n  ShaderMaterial.CreateFromSnippetAsync = function (snippetId, scene, rootUrl) {\n    var _this = this;\n\n    if (rootUrl === void 0) {\n      rootUrl = \"\";\n    }\n\n    return new Promise(function (resolve, reject) {\n      var request = new WebRequest();\n      request.addEventListener(\"readystatechange\", function () {\n        if (request.readyState == 4) {\n          if (request.status == 200) {\n            var snippet = JSON.parse(JSON.parse(request.responseText).jsonPayload);\n            var serializationObject = JSON.parse(snippet.shaderMaterial);\n\n            var output = _this.Parse(serializationObject, scene || EngineStore.LastCreatedScene, rootUrl);\n\n            output.snippetId = snippetId;\n            resolve(output);\n          } else {\n            reject(\"Unable to load the snippet \" + snippetId);\n          }\n        }\n      });\n      request.open(\"GET\", _this.SnippetUrl + \"/\" + snippetId.replace(/#/g, \"/\"));\n      request.send();\n    });\n  };\n  /** Define the Url to load snippets */\n\n\n  ShaderMaterial.SnippetUrl = \"https://snippet.babylonjs.com\";\n  return ShaderMaterial;\n}(PushMaterial);\n\nexport { ShaderMaterial };\nRegisterClass(\"BABYLON.ShaderMaterial\", ShaderMaterial);","map":{"version":3,"mappings":"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","names":["SerializationHelper","Matrix","Vector3","Vector2","Vector4","VertexBuffer","Texture","MaterialHelper","RegisterClass","Color3","Color4","EffectFallbacks","WebRequest","PushMaterial","EngineStore","onCreatedEffectParameters","effect","subMesh","__extends","name","scene","shaderPath","options","storeEffectOnSubMeshes","_super","_this","_shaderPath","_options","__assign","needAlphaBlending","needAlphaTesting","attributes","uniforms","uniformBuffers","samplers","externalTextures","samplerObjects","storageBuffers","defines","useClipPlane","Object","ShaderMaterial","alpha","uniformName","indexOf","push","texture","_textures","textures","_checkUniform","_textureArrays","_externalTextures","value","_floats","_ints","_floatsArrays","_colors3","_colors3Arrays","reduce","arr","color","toArray","length","_colors4","_colors4Arrays","_vectors2","_vectors3","_vectors4","_matrices","float32Array","Float32Array","index","matrix","copyToArray","_matrixArrays","_matrices3x3","_matrices2x2","_vectors2Arrays","_vectors3Arrays","_vectors4Arrays","buffer","_uniformBuffers","sampler","_textureSamplers","_storageBuffers","mesh","useInstances","isReady","_storeEffectOnSubMeshes","isFrozen","_wasPreviouslyReady","effect_1","_drawWrapper","_effectUsesInstances","getScene","engine","getEngine","attribs","fallbacks","shaderName","getCaps","multiview","activeCamera","outputRenderTarget","getViewCount","_multiview","defineToAdd","isVerticesDataPresent","ColorKind","PushAttributesForInstances","hasThinInstances","ColorInstanceKind","useBones","computeBonesUsingShaders","skeleton","MatricesIndicesKind","MatricesWeightsKind","numBoneInfluencers","MatricesIndicesExtraKind","MatricesWeightsExtraKind","addCPUSkinningFallback","isUsingTextureForMatrices","bones","numInfluencers","manager","morphTargetManager","uv","supportsUVs","tangent","supportsTangents","normal","supportsNormals","isUsingTextureForTargets","PositionKind","NormalKind","TangentKind","UVKind","slice","bvaManager","bakedVertexAnimationManager","isEnabled","PrepareAttributesForBakedVertexAnimation","name_1","_shouldTurnAlphaTestOn","clipPlane","clipPlane2","clipPlane3","clipPlane4","clipPlane5","clipPlane6","customShaderNameResolve","drawWrapper","_getDrawWrapper","previousEffect","_a","previousDefines","_b","join","createEffect","uniformsNames","uniformBuffersNames","onCompiled","onError","indexParameters","maxSimultaneousMorphTargets","shaderLanguage","setEffect","_materialContext","_onEffectCreatedObservable","subMeshes","_c","notifyObservers","_d","resetCachedMaterial","world","effectOverride","getEffect","setMatrix","multiplyToRef","getViewMatrix","_cachedWorldViewMatrix","getTransformMatrix","_cachedWorldViewProjectionMatrix","bind","_drawWrapperOverride","_activeEffect","bindOnlyWorldMatrix","useSceneUBO","supportsUniformBuffers","i","bufferName","getMeshUniformBuffer","bindToEffect","transferToEffect","BindSceneUniformBuffer","getSceneUniformBuffer","finalizeSceneUbo","mustRebind","_mustRebind","visibility","getCachedMaterial","getProjectionMatrix","_transformMatrixR","setVector3","globalPosition","BindBonesParameters","BindClipPlane","name_2","setTexture","setTextureArray","setExternalTexture","setInt","setFloat","setArray","setColor3","setArray3","setFloat4","r","g","b","a","setArray4","setVector2","setVector4","setMatrices","setMatrix3x3","setMatrix2x2","setArray2","getBuffer","bindUniformBuffer","setTextureSampler","setStorageBuffer","BindMorphTargetParameters","_afterBind","activeTextures","getActiveTextures","call","name_3","name_4","array","hasTexture","name_5","name_6","result","Clone","id","keys","forEach","propName","propValue","Array","isArray","stencil","copyTo","key","setFloats","setColor4","setUniformBuffer","forceDisposeEffect","forceDisposeTextures","notBoundToMesh","name_7","dispose","serializationObject","Serialize","customType","serialize","textureArrays","ints","floats","FloatArrays","colors3","asArray","colors3Arrays","colors4","colors4Arrays","vectors2","vectors3","vectors4","matrices","matrixArray","matrices3x3","matrices2x2","vectors2Arrays","vectors3Arrays","vectors4Arrays","source","rootUrl","material","Parse","parse","textureArray","floatsArrays","FromArray","colors","num","map","setColor3Array","setColor4Array","url","Promise","resolve","reject","request","addEventListener","readyState","status","JSON","responseText","output","LastCreatedScene","open","send","snippetId","snippet","jsonPayload","shaderMaterial","SnippetUrl","replace"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Materials/shaderMaterial.ts"],"sourcesContent":["import { SerializationHelper } from \"../Misc/decorators\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Matrix, Vector3, Vector2, Vector4 } from \"../Maths/math.vector\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { MaterialHelper } from \"./materialHelper\";\r\nimport type { Effect, IEffectCreationOptions } from \"./effect\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { Color3, Color4 } from \"../Maths/math.color\";\r\nimport { EffectFallbacks } from \"./effectFallbacks\";\r\nimport { WebRequest } from \"../Misc/webRequest\";\r\nimport type { ShaderLanguage } from \"./shaderLanguage\";\r\nimport type { UniformBuffer } from \"./uniformBuffer\";\r\nimport type { TextureSampler } from \"./Textures/textureSampler\";\r\nimport type { StorageBuffer } from \"../Buffers/storageBuffer\";\r\nimport { PushMaterial } from \"./pushMaterial\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\n\r\ndeclare type ExternalTexture = import(\"./Textures/externalTexture\").ExternalTexture;\r\n\r\nconst onCreatedEffectParameters = { effect: null as unknown as Effect, subMesh: null as unknown as Nullable<SubMesh> };\r\n\r\n/**\r\n * Defines the options associated with the creation of a shader material.\r\n */\r\nexport interface IShaderMaterialOptions {\r\n    /**\r\n     * Does the material work in alpha blend mode\r\n     */\r\n    needAlphaBlending: boolean;\r\n\r\n    /**\r\n     * Does the material work in alpha test mode\r\n     */\r\n    needAlphaTesting: boolean;\r\n\r\n    /**\r\n     * The list of attribute names used in the shader\r\n     */\r\n    attributes: string[];\r\n\r\n    /**\r\n     * The list of uniform names used in the shader\r\n     */\r\n    uniforms: string[];\r\n\r\n    /**\r\n     * The list of UBO names used in the shader\r\n     */\r\n    uniformBuffers: string[];\r\n\r\n    /**\r\n     * The list of sampler (texture) names used in the shader\r\n     */\r\n    samplers: string[];\r\n\r\n    /**\r\n     * The list of external texture names used in the shader\r\n     */\r\n    externalTextures: string[];\r\n\r\n    /**\r\n     * The list of sampler object names used in the shader\r\n     */\r\n    samplerObjects: string[];\r\n\r\n    /**\r\n     * The list of storage buffer names used in the shader\r\n     */\r\n    storageBuffers: string[];\r\n\r\n    /**\r\n     * The list of defines used in the shader\r\n     */\r\n    defines: string[];\r\n\r\n    /**\r\n     * Defines if clip planes have to be turned on: true to turn them on, false to turn them off and null to turn them on/off depending on the scene configuration (scene.clipPlaneX)\r\n     */\r\n    useClipPlane: Nullable<boolean>;\r\n\r\n    /**\r\n     * The language the shader is written in (default: GLSL)\r\n     */\r\n    shaderLanguage?: ShaderLanguage;\r\n}\r\n\r\n/**\r\n * The ShaderMaterial object has the necessary methods to pass data from your scene to the Vertex and Fragment Shaders and returns a material that can be applied to any mesh.\r\n *\r\n * This returned material effects how the mesh will look based on the code in the shaders.\r\n *\r\n * @see https://doc.babylonjs.com/advanced_topics/shaders/shaderMaterial\r\n */\r\nexport class ShaderMaterial extends PushMaterial {\r\n    private _shaderPath: any;\r\n    private _options: IShaderMaterialOptions;\r\n    private _textures: { [name: string]: BaseTexture } = {};\r\n    private _textureArrays: { [name: string]: BaseTexture[] } = {};\r\n    private _externalTextures: { [name: string]: ExternalTexture } = {};\r\n    private _floats: { [name: string]: number } = {};\r\n    private _ints: { [name: string]: number } = {};\r\n    private _floatsArrays: { [name: string]: number[] } = {};\r\n    private _colors3: { [name: string]: Color3 } = {};\r\n    private _colors3Arrays: { [name: string]: number[] } = {};\r\n    private _colors4: { [name: string]: Color4 } = {};\r\n    private _colors4Arrays: { [name: string]: number[] } = {};\r\n    private _vectors2: { [name: string]: Vector2 } = {};\r\n    private _vectors3: { [name: string]: Vector3 } = {};\r\n    private _vectors4: { [name: string]: Vector4 } = {};\r\n    private _matrices: { [name: string]: Matrix } = {};\r\n    private _matrixArrays: { [name: string]: Float32Array | Array<number> } = {};\r\n    private _matrices3x3: { [name: string]: Float32Array | Array<number> } = {};\r\n    private _matrices2x2: { [name: string]: Float32Array | Array<number> } = {};\r\n    private _vectors2Arrays: { [name: string]: number[] } = {};\r\n    private _vectors3Arrays: { [name: string]: number[] } = {};\r\n    private _vectors4Arrays: { [name: string]: number[] } = {};\r\n    private _uniformBuffers: { [name: string]: UniformBuffer } = {};\r\n    private _textureSamplers: { [name: string]: TextureSampler } = {};\r\n    private _storageBuffers: { [name: string]: StorageBuffer } = {};\r\n    private _cachedWorldViewMatrix = new Matrix();\r\n    private _cachedWorldViewProjectionMatrix = new Matrix();\r\n    private _multiview: boolean = false;\r\n    private _effectUsesInstances: boolean;\r\n\r\n    /** Define the Url to load snippets */\r\n    public static SnippetUrl = \"https://snippet.babylonjs.com\";\r\n\r\n    /** Snippet ID if the material was created from the snippet server */\r\n    public snippetId: string;\r\n\r\n    /**\r\n     * Instantiate a new shader material.\r\n     * The ShaderMaterial object has the necessary methods to pass data from your scene to the Vertex and Fragment Shaders and returns a material that can be applied to any mesh.\r\n     * This returned material effects how the mesh will look based on the code in the shaders.\r\n     * @see https://doc.babylonjs.com/how_to/shader_material\r\n     * @param name Define the name of the material in the scene\r\n     * @param scene Define the scene the material belongs to\r\n     * @param shaderPath Defines  the route to the shader code in one of three ways:\r\n     *  * object: { vertex: \"custom\", fragment: \"custom\" }, used with Effect.ShadersStore[\"customVertexShader\"] and Effect.ShadersStore[\"customFragmentShader\"]\r\n     *  * object: { vertexElement: \"vertexShaderCode\", fragmentElement: \"fragmentShaderCode\" }, used with shader code in script tags\r\n     *  * object: { vertexSource: \"vertex shader code string\", fragmentSource: \"fragment shader code string\" } using with strings containing the shaders code\r\n     *  * string: \"./COMMON_NAME\", used with external files COMMON_NAME.vertex.fx and COMMON_NAME.fragment.fx in index.html folder.\r\n     * @param options Define the options used to create the shader\r\n     * @param storeEffectOnSubMeshes true to store effect on submeshes, false to store the effect directly in the material class.\r\n     */\r\n    constructor(name: string, scene: Scene, shaderPath: any, options: Partial<IShaderMaterialOptions> = {}, storeEffectOnSubMeshes = true) {\r\n        super(name, scene, storeEffectOnSubMeshes);\r\n        this._shaderPath = shaderPath;\r\n\r\n        this._options = {\r\n            needAlphaBlending: false,\r\n            needAlphaTesting: false,\r\n            attributes: [\"position\", \"normal\", \"uv\"],\r\n            uniforms: [\"worldViewProjection\"],\r\n            uniformBuffers: [],\r\n            samplers: [],\r\n            externalTextures: [],\r\n            samplerObjects: [],\r\n            storageBuffers: [],\r\n            defines: [],\r\n            useClipPlane: false,\r\n            ...options,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the shader path used to define the shader code\r\n     * It can be modified to trigger a new compilation\r\n     */\r\n    public get shaderPath(): any {\r\n        return this._shaderPath;\r\n    }\r\n\r\n    /**\r\n     * Sets the shader path used to define the shader code\r\n     * It can be modified to trigger a new compilation\r\n     */\r\n    public set shaderPath(shaderPath: any) {\r\n        this._shaderPath = shaderPath;\r\n    }\r\n\r\n    /**\r\n     * Gets the options used to compile the shader.\r\n     * They can be modified to trigger a new compilation\r\n     */\r\n    public get options(): IShaderMaterialOptions {\r\n        return this._options;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name of the material e.g. \"ShaderMaterial\"\r\n     * Mainly use in serialization.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"ShaderMaterial\";\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material will require alpha blending\r\n     * @returns a boolean specifying if alpha blending is needed\r\n     */\r\n    public needAlphaBlending(): boolean {\r\n        return this.alpha < 1.0 || this._options.needAlphaBlending;\r\n    }\r\n\r\n    /**\r\n     * Specifies if this material should be rendered in alpha test mode\r\n     * @returns a boolean specifying if an alpha test is needed.\r\n     */\r\n    public needAlphaTesting(): boolean {\r\n        return this._options.needAlphaTesting;\r\n    }\r\n\r\n    private _checkUniform(uniformName: string): void {\r\n        if (this._options.uniforms.indexOf(uniformName) === -1) {\r\n            this._options.uniforms.push(uniformName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set a texture in the shader.\r\n     * @param name Define the name of the uniform samplers as defined in the shader\r\n     * @param texture Define the texture to bind to this sampler\r\n     * @return the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setTexture(name: string, texture: BaseTexture): ShaderMaterial {\r\n        if (this._options.samplers.indexOf(name) === -1) {\r\n            this._options.samplers.push(name);\r\n        }\r\n        this._textures[name] = texture;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a texture array in the shader.\r\n     * @param name Define the name of the uniform sampler array as defined in the shader\r\n     * @param textures Define the list of textures to bind to this sampler\r\n     * @return the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setTextureArray(name: string, textures: BaseTexture[]): ShaderMaterial {\r\n        if (this._options.samplers.indexOf(name) === -1) {\r\n            this._options.samplers.push(name);\r\n        }\r\n\r\n        this._checkUniform(name);\r\n\r\n        this._textureArrays[name] = textures;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set an internal texture in the shader.\r\n     * @param name Define the name of the uniform samplers as defined in the shader\r\n     * @param texture Define the texture to bind to this sampler\r\n     * @return the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setExternalTexture(name: string, texture: ExternalTexture): ShaderMaterial {\r\n        if (this._options.externalTextures.indexOf(name) === -1) {\r\n            this._options.externalTextures.push(name);\r\n        }\r\n        this._externalTextures[name] = texture;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a float in the shader.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @return the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setFloat(name: string, value: number): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._floats[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a int in the shader.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @return the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setInt(name: string, value: number): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._ints[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set an array of floats in the shader.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @return the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setFloats(name: string, value: number[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._floatsArrays[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec3 in the shader from a Color3.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @return the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setColor3(name: string, value: Color3): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._colors3[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec3 array in the shader from a Color3 array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @return the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setColor3Array(name: string, value: Color3[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._colors3Arrays[name] = value.reduce((arr, color) => {\r\n            color.toArray(arr, arr.length);\r\n            return arr;\r\n        }, []);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 in the shader from a Color4.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @return the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setColor4(name: string, value: Color4): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._colors4[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 array in the shader from a Color4 array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @return the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setColor4Array(name: string, value: Color4[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._colors4Arrays[name] = value.reduce((arr, color) => {\r\n            color.toArray(arr, arr.length);\r\n            return arr;\r\n        }, []);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec2 in the shader from a Vector2.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @return the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setVector2(name: string, value: Vector2): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors2[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec3 in the shader from a Vector3.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @return the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setVector3(name: string, value: Vector3): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors3[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 in the shader from a Vector4.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @return the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setVector4(name: string, value: Vector4): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors4[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a mat4 in the shader from a Matrix.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @return the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setMatrix(name: string, value: Matrix): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._matrices[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a float32Array in the shader from a matrix array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @return the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setMatrices(name: string, value: Matrix[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n\r\n        const float32Array = new Float32Array(value.length * 16);\r\n\r\n        for (let index = 0; index < value.length; index++) {\r\n            const matrix = value[index];\r\n\r\n            matrix.copyToArray(float32Array, index * 16);\r\n        }\r\n\r\n        this._matrixArrays[name] = float32Array;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a mat3 in the shader from a Float32Array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @return the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setMatrix3x3(name: string, value: Float32Array | Array<number>): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._matrices3x3[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a mat2 in the shader from a Float32Array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @return the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setMatrix2x2(name: string, value: Float32Array | Array<number>): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._matrices2x2[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec2 array in the shader from a number array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @return the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setArray2(name: string, value: number[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors2Arrays[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec3 array in the shader from a number array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @return the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setArray3(name: string, value: number[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors3Arrays[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a vec4 array in the shader from a number array.\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param value Define the value to give to the uniform\r\n     * @return the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setArray4(name: string, value: number[]): ShaderMaterial {\r\n        this._checkUniform(name);\r\n        this._vectors4Arrays[name] = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a uniform buffer in the shader\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param buffer Define the value to give to the uniform\r\n     * @return the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setUniformBuffer(name: string, buffer: UniformBuffer): ShaderMaterial {\r\n        if (this._options.uniformBuffers.indexOf(name) === -1) {\r\n            this._options.uniformBuffers.push(name);\r\n        }\r\n        this._uniformBuffers[name] = buffer;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a texture sampler in the shader\r\n     * @param name Define the name of the uniform as defined in the shader\r\n     * @param sampler Define the value to give to the uniform\r\n     * @return the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setTextureSampler(name: string, sampler: TextureSampler): ShaderMaterial {\r\n        if (this._options.samplerObjects.indexOf(name) === -1) {\r\n            this._options.samplerObjects.push(name);\r\n        }\r\n        this._textureSamplers[name] = sampler;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set a storage buffer in the shader\r\n     * @param name Define the name of the storage buffer as defined in the shader\r\n     * @param buffer Define the value to give to the uniform\r\n     * @return the material itself allowing \"fluent\" like uniform updates\r\n     */\r\n    public setStorageBuffer(name: string, buffer: StorageBuffer): ShaderMaterial {\r\n        if (this._options.storageBuffers.indexOf(name) === -1) {\r\n            this._options.storageBuffers.push(name);\r\n        }\r\n        this._storageBuffers[name] = buffer;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Specifies that the submesh is ready to be used\r\n     * @param mesh defines the mesh to check\r\n     * @param subMesh defines which submesh to check\r\n     * @param useInstances specifies that instances should be used\r\n     * @returns a boolean indicating that the submesh is ready or not\r\n     */\r\n    public isReadyForSubMesh(mesh: AbstractMesh, subMesh: SubMesh, useInstances?: boolean): boolean {\r\n        return this.isReady(mesh, useInstances, subMesh);\r\n    }\r\n\r\n    /**\r\n     * Checks if the material is ready to render the requested mesh\r\n     * @param mesh Define the mesh to render\r\n     * @param useInstances Define whether or not the material is used with instances\r\n     * @param subMesh defines which submesh to render\r\n     * @returns true if ready, otherwise false\r\n     */\r\n    public isReady(mesh?: AbstractMesh, useInstances?: boolean, subMesh?: SubMesh): boolean {\r\n        const storeEffectOnSubMeshes = subMesh && this._storeEffectOnSubMeshes;\r\n\r\n        if (this.isFrozen) {\r\n            if (storeEffectOnSubMeshes) {\r\n                if (subMesh.effect && subMesh.effect._wasPreviouslyReady) {\r\n                    return true;\r\n                }\r\n            } else {\r\n                const effect = this._drawWrapper.effect;\r\n                if (effect && effect._wasPreviouslyReady && this._effectUsesInstances === useInstances) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        const scene = this.getScene();\r\n        const engine = scene.getEngine();\r\n\r\n        // Instances\r\n        const defines = [];\r\n        const attribs = [];\r\n        const fallbacks = new EffectFallbacks();\r\n\r\n        let shaderName = this._shaderPath,\r\n            uniforms = this._options.uniforms,\r\n            uniformBuffers = this._options.uniformBuffers,\r\n            samplers = this._options.samplers;\r\n\r\n        // global multiview\r\n        if (engine.getCaps().multiview && scene.activeCamera && scene.activeCamera.outputRenderTarget && scene.activeCamera.outputRenderTarget.getViewCount() > 1) {\r\n            this._multiview = true;\r\n            defines.push(\"#define MULTIVIEW\");\r\n            if (this._options.uniforms.indexOf(\"viewProjection\") !== -1 && this._options.uniforms.indexOf(\"viewProjectionR\") === -1) {\r\n                this._options.uniforms.push(\"viewProjectionR\");\r\n            }\r\n        }\r\n\r\n        for (let index = 0; index < this._options.defines.length; index++) {\r\n            const defineToAdd = this._options.defines[index].indexOf(\"#define\") === 0 ? this._options.defines[index] : `#define ${this._options.defines[index]}`;\r\n            defines.push(defineToAdd);\r\n        }\r\n\r\n        for (let index = 0; index < this._options.attributes.length; index++) {\r\n            attribs.push(this._options.attributes[index]);\r\n        }\r\n\r\n        if (mesh && mesh.isVerticesDataPresent(VertexBuffer.ColorKind)) {\r\n            attribs.push(VertexBuffer.ColorKind);\r\n            defines.push(\"#define VERTEXCOLOR\");\r\n        }\r\n\r\n        if (useInstances) {\r\n            defines.push(\"#define INSTANCES\");\r\n            MaterialHelper.PushAttributesForInstances(attribs);\r\n            if (mesh?.hasThinInstances) {\r\n                defines.push(\"#define THIN_INSTANCES\");\r\n                if (mesh && mesh.isVerticesDataPresent(VertexBuffer.ColorInstanceKind)) {\r\n                    attribs.push(VertexBuffer.ColorInstanceKind);\r\n                    defines.push(\"#define INSTANCESCOLOR\");\r\n                }\r\n            }\r\n        }\r\n\r\n        // Bones\r\n        if (mesh && mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\r\n            attribs.push(VertexBuffer.MatricesIndicesKind);\r\n            attribs.push(VertexBuffer.MatricesWeightsKind);\r\n            if (mesh.numBoneInfluencers > 4) {\r\n                attribs.push(VertexBuffer.MatricesIndicesExtraKind);\r\n                attribs.push(VertexBuffer.MatricesWeightsExtraKind);\r\n            }\r\n\r\n            const skeleton = mesh.skeleton;\r\n\r\n            defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\r\n            fallbacks.addCPUSkinningFallback(0, mesh);\r\n\r\n            if (skeleton.isUsingTextureForMatrices) {\r\n                defines.push(\"#define BONETEXTURE\");\r\n\r\n                if (this._options.uniforms.indexOf(\"boneTextureWidth\") === -1) {\r\n                    this._options.uniforms.push(\"boneTextureWidth\");\r\n                }\r\n\r\n                if (this._options.samplers.indexOf(\"boneSampler\") === -1) {\r\n                    this._options.samplers.push(\"boneSampler\");\r\n                }\r\n            } else {\r\n                defines.push(\"#define BonesPerMesh \" + (skeleton.bones.length + 1));\r\n\r\n                if (this._options.uniforms.indexOf(\"mBones\") === -1) {\r\n                    this._options.uniforms.push(\"mBones\");\r\n                }\r\n            }\r\n        } else {\r\n            defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\r\n        }\r\n\r\n        // Morph\r\n        let numInfluencers = 0;\r\n        const manager = mesh ? (<Mesh>mesh).morphTargetManager : null;\r\n        if (manager) {\r\n            const uv = manager.supportsUVs && defines.indexOf(\"#define UV1\") !== -1;\r\n            const tangent = manager.supportsTangents && defines.indexOf(\"#define TANGENT\") !== -1;\r\n            const normal = manager.supportsNormals && defines.indexOf(\"#define NORMAL\") !== -1;\r\n            numInfluencers = manager.numInfluencers;\r\n            if (uv) {\r\n                defines.push(\"#define MORPHTARGETS_UV\");\r\n            }\r\n            if (tangent) {\r\n                defines.push(\"#define MORPHTARGETS_TANGENT\");\r\n            }\r\n            if (normal) {\r\n                defines.push(\"#define MORPHTARGETS_NORMAL\");\r\n            }\r\n            if (numInfluencers > 0) {\r\n                defines.push(\"#define MORPHTARGETS\");\r\n            }\r\n            if (manager.isUsingTextureForTargets) {\r\n                defines.push(\"#define MORPHTARGETS_TEXTURE\");\r\n\r\n                if (this._options.uniforms.indexOf(\"morphTargetTextureIndices\") === -1) {\r\n                    this._options.uniforms.push(\"morphTargetTextureIndices\");\r\n                }\r\n\r\n                if (this._options.samplers.indexOf(\"morphTargets\") === -1) {\r\n                    this._options.samplers.push(\"morphTargets\");\r\n                }\r\n            }\r\n            defines.push(\"#define NUM_MORPH_INFLUENCERS \" + numInfluencers);\r\n            for (let index = 0; index < numInfluencers; index++) {\r\n                attribs.push(VertexBuffer.PositionKind + index);\r\n\r\n                if (normal) {\r\n                    attribs.push(VertexBuffer.NormalKind + index);\r\n                }\r\n\r\n                if (tangent) {\r\n                    attribs.push(VertexBuffer.TangentKind + index);\r\n                }\r\n\r\n                if (uv) {\r\n                    attribs.push(VertexBuffer.UVKind + \"_\" + index);\r\n                }\r\n            }\r\n            if (numInfluencers > 0) {\r\n                uniforms = uniforms.slice();\r\n                uniforms.push(\"morphTargetInfluences\");\r\n                uniforms.push(\"morphTargetTextureInfo\");\r\n                uniforms.push(\"morphTargetTextureIndices\");\r\n            }\r\n        } else {\r\n            defines.push(\"#define NUM_MORPH_INFLUENCERS 0\");\r\n        }\r\n\r\n        // Baked Vertex Animation\r\n        if (mesh) {\r\n            const bvaManager = (<Mesh>mesh).bakedVertexAnimationManager;\r\n\r\n            if (bvaManager && bvaManager.isEnabled) {\r\n                defines.push(\"#define BAKED_VERTEX_ANIMATION_TEXTURE\");\r\n                if (this._options.uniforms.indexOf(\"bakedVertexAnimationSettings\") === -1) {\r\n                    this._options.uniforms.push(\"bakedVertexAnimationSettings\");\r\n                }\r\n                if (this._options.uniforms.indexOf(\"bakedVertexAnimationTextureSizeInverted\") === -1) {\r\n                    this._options.uniforms.push(\"bakedVertexAnimationTextureSizeInverted\");\r\n                }\r\n                if (this._options.uniforms.indexOf(\"bakedVertexAnimationTime\") === -1) {\r\n                    this._options.uniforms.push(\"bakedVertexAnimationTime\");\r\n                }\r\n\r\n                if (this._options.samplers.indexOf(\"bakedVertexAnimationTexture\") === -1) {\r\n                    this._options.samplers.push(\"bakedVertexAnimationTexture\");\r\n                }\r\n            }\r\n\r\n            MaterialHelper.PrepareAttributesForBakedVertexAnimation(attribs, mesh, defines);\r\n        }\r\n\r\n        // Textures\r\n        for (const name in this._textures) {\r\n            if (!this._textures[name].isReady()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // Alpha test\r\n        if (mesh && this._shouldTurnAlphaTestOn(mesh)) {\r\n            defines.push(\"#define ALPHATEST\");\r\n        }\r\n\r\n        // Clip planes\r\n        if ((this._options.useClipPlane === null && !!scene.clipPlane) || this._options.useClipPlane) {\r\n            defines.push(\"#define CLIPPLANE\");\r\n            if (uniforms.indexOf(\"vClipPlane\") === -1) {\r\n                uniforms.push(\"vClipPlane\");\r\n            }\r\n        }\r\n\r\n        if ((this._options.useClipPlane === null && !!scene.clipPlane2) || this._options.useClipPlane) {\r\n            defines.push(\"#define CLIPPLANE2\");\r\n            if (uniforms.indexOf(\"vClipPlane2\") === -1) {\r\n                uniforms.push(\"vClipPlane2\");\r\n            }\r\n        }\r\n\r\n        if ((this._options.useClipPlane === null && !!scene.clipPlane3) || this._options.useClipPlane) {\r\n            defines.push(\"#define CLIPPLANE3\");\r\n            if (uniforms.indexOf(\"vClipPlane3\") === -1) {\r\n                uniforms.push(\"vClipPlane3\");\r\n            }\r\n        }\r\n\r\n        if ((this._options.useClipPlane === null && !!scene.clipPlane4) || this._options.useClipPlane) {\r\n            defines.push(\"#define CLIPPLANE4\");\r\n            if (uniforms.indexOf(\"vClipPlane4\") === -1) {\r\n                uniforms.push(\"vClipPlane4\");\r\n            }\r\n        }\r\n\r\n        if ((this._options.useClipPlane === null && !!scene.clipPlane5) || this._options.useClipPlane) {\r\n            defines.push(\"#define CLIPPLANE5\");\r\n            if (uniforms.indexOf(\"vClipPlane5\") === -1) {\r\n                uniforms.push(\"vClipPlane5\");\r\n            }\r\n        }\r\n\r\n        if ((this._options.useClipPlane === null && !!scene.clipPlane6) || this._options.useClipPlane) {\r\n            defines.push(\"#define CLIPPLANE6\");\r\n            if (uniforms.indexOf(\"vClipPlane6\") === -1) {\r\n                uniforms.push(\"vClipPlane6\");\r\n            }\r\n        }\r\n\r\n        if (this.customShaderNameResolve) {\r\n            uniforms = uniforms.slice();\r\n            uniformBuffers = uniformBuffers.slice();\r\n            samplers = samplers.slice();\r\n            shaderName = this.customShaderNameResolve(shaderName, uniforms, uniformBuffers, samplers, defines, attribs);\r\n        }\r\n\r\n        const drawWrapper = storeEffectOnSubMeshes ? subMesh._getDrawWrapper() : this._drawWrapper;\r\n        const previousEffect = drawWrapper?.effect ?? null;\r\n        const previousDefines = drawWrapper?.defines ?? null;\r\n        const join = defines.join(\"\\n\");\r\n\r\n        let effect = previousEffect;\r\n        if (previousDefines !== join) {\r\n            effect = engine.createEffect(\r\n                shaderName,\r\n                <IEffectCreationOptions>{\r\n                    attributes: attribs,\r\n                    uniformsNames: uniforms,\r\n                    uniformBuffersNames: uniformBuffers,\r\n                    samplers: samplers,\r\n                    defines: join,\r\n                    fallbacks: fallbacks,\r\n                    onCompiled: this.onCompiled,\r\n                    onError: this.onError,\r\n                    indexParameters: { maxSimultaneousMorphTargets: numInfluencers },\r\n                    shaderLanguage: this._options.shaderLanguage,\r\n                },\r\n                engine\r\n            );\r\n\r\n            if (storeEffectOnSubMeshes) {\r\n                subMesh.setEffect(effect, join, this._materialContext);\r\n            } else if (drawWrapper) {\r\n                drawWrapper.setEffect(effect, join);\r\n            }\r\n\r\n            if (this._onEffectCreatedObservable) {\r\n                onCreatedEffectParameters.effect = effect;\r\n                onCreatedEffectParameters.subMesh = subMesh ?? mesh?.subMeshes[0] ?? null;\r\n                this._onEffectCreatedObservable.notifyObservers(onCreatedEffectParameters);\r\n            }\r\n        }\r\n\r\n        this._effectUsesInstances = !!useInstances;\r\n\r\n        if (!effect?.isReady() ?? true) {\r\n            return false;\r\n        }\r\n\r\n        if (previousEffect !== effect) {\r\n            scene.resetCachedMaterial();\r\n        }\r\n\r\n        effect._wasPreviouslyReady = true;\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Binds the world matrix to the material\r\n     * @param world defines the world transformation matrix\r\n     * @param effectOverride - If provided, use this effect instead of internal effect\r\n     */\r\n    public bindOnlyWorldMatrix(world: Matrix, effectOverride?: Nullable<Effect>): void {\r\n        const scene = this.getScene();\r\n\r\n        const effect = effectOverride ?? this.getEffect();\r\n\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        if (this._options.uniforms.indexOf(\"world\") !== -1) {\r\n            effect.setMatrix(\"world\", world);\r\n        }\r\n\r\n        if (this._options.uniforms.indexOf(\"worldView\") !== -1) {\r\n            world.multiplyToRef(scene.getViewMatrix(), this._cachedWorldViewMatrix);\r\n            effect.setMatrix(\"worldView\", this._cachedWorldViewMatrix);\r\n        }\r\n\r\n        if (this._options.uniforms.indexOf(\"worldViewProjection\") !== -1) {\r\n            world.multiplyToRef(scene.getTransformMatrix(), this._cachedWorldViewProjectionMatrix);\r\n            effect.setMatrix(\"worldViewProjection\", this._cachedWorldViewProjectionMatrix);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds the submesh to this material by preparing the effect and shader to draw\r\n     * @param world defines the world transformation matrix\r\n     * @param mesh defines the mesh containing the submesh\r\n     * @param subMesh defines the submesh to bind the material to\r\n     */\r\n    public bindForSubMesh(world: Matrix, mesh: Mesh, subMesh: SubMesh): void {\r\n        this.bind(world, mesh, subMesh._drawWrapperOverride?.effect, subMesh);\r\n    }\r\n\r\n    /**\r\n     * Binds the material to the mesh\r\n     * @param world defines the world transformation matrix\r\n     * @param mesh defines the mesh to bind the material to\r\n     * @param effectOverride - If provided, use this effect instead of internal effect\r\n     * @param subMesh defines the submesh to bind the material to\r\n     */\r\n    public bind(world: Matrix, mesh?: Mesh, effectOverride?: Nullable<Effect>, subMesh?: SubMesh): void {\r\n        // Std values\r\n        const storeEffectOnSubMeshes = subMesh && this._storeEffectOnSubMeshes;\r\n        const effect = effectOverride ?? (storeEffectOnSubMeshes ? subMesh.effect : this.getEffect());\r\n\r\n        if (!effect) {\r\n            return;\r\n        }\r\n\r\n        this._activeEffect = effect;\r\n\r\n        this.bindOnlyWorldMatrix(world, effectOverride);\r\n\r\n        const uniformBuffers = this._options.uniformBuffers;\r\n\r\n        let useSceneUBO = false;\r\n\r\n        if (effect && uniformBuffers && uniformBuffers.length > 0 && this.getScene().getEngine().supportsUniformBuffers) {\r\n            for (let i = 0; i < uniformBuffers.length; ++i) {\r\n                const bufferName = uniformBuffers[i];\r\n                switch (bufferName) {\r\n                    case \"Mesh\":\r\n                        if (mesh) {\r\n                            mesh.getMeshUniformBuffer().bindToEffect(effect, \"Mesh\");\r\n                            mesh.transferToEffect(world);\r\n                        }\r\n                        break;\r\n                    case \"Scene\":\r\n                        MaterialHelper.BindSceneUniformBuffer(effect, this.getScene().getSceneUniformBuffer());\r\n                        this.getScene().finalizeSceneUbo();\r\n                        useSceneUBO = true;\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        const mustRebind = mesh && storeEffectOnSubMeshes ? this._mustRebind(this.getScene(), effect, mesh.visibility) : this.getScene().getCachedMaterial() !== this;\r\n\r\n        if (effect && mustRebind) {\r\n            if (!useSceneUBO && this._options.uniforms.indexOf(\"view\") !== -1) {\r\n                effect.setMatrix(\"view\", this.getScene().getViewMatrix());\r\n            }\r\n\r\n            if (!useSceneUBO && this._options.uniforms.indexOf(\"projection\") !== -1) {\r\n                effect.setMatrix(\"projection\", this.getScene().getProjectionMatrix());\r\n            }\r\n\r\n            if (!useSceneUBO && this._options.uniforms.indexOf(\"viewProjection\") !== -1) {\r\n                effect.setMatrix(\"viewProjection\", this.getScene().getTransformMatrix());\r\n                if (this._multiview) {\r\n                    effect.setMatrix(\"viewProjectionR\", this.getScene()._transformMatrixR);\r\n                }\r\n            }\r\n\r\n            if (this.getScene().activeCamera && this._options.uniforms.indexOf(\"cameraPosition\") !== -1) {\r\n                effect.setVector3(\"cameraPosition\", this.getScene().activeCamera!.globalPosition);\r\n            }\r\n\r\n            // Bones\r\n            MaterialHelper.BindBonesParameters(mesh, effect);\r\n\r\n            // Clip plane\r\n            MaterialHelper.BindClipPlane(effect, this.getScene());\r\n\r\n            let name: string;\r\n            // Texture\r\n            for (name in this._textures) {\r\n                effect.setTexture(name, this._textures[name]);\r\n            }\r\n\r\n            // Texture arrays\r\n            for (name in this._textureArrays) {\r\n                effect.setTextureArray(name, this._textureArrays[name]);\r\n            }\r\n\r\n            // External texture\r\n            for (name in this._externalTextures) {\r\n                effect.setExternalTexture(name, this._externalTextures[name]);\r\n            }\r\n\r\n            // Int\r\n            for (name in this._ints) {\r\n                effect.setInt(name, this._ints[name]);\r\n            }\r\n\r\n            // Float\r\n            for (name in this._floats) {\r\n                effect.setFloat(name, this._floats[name]);\r\n            }\r\n\r\n            // Floats\r\n            for (name in this._floatsArrays) {\r\n                effect.setArray(name, this._floatsArrays[name]);\r\n            }\r\n\r\n            // Color3\r\n            for (name in this._colors3) {\r\n                effect.setColor3(name, this._colors3[name]);\r\n            }\r\n\r\n            // Color3Array\r\n            for (name in this._colors3Arrays) {\r\n                effect.setArray3(name, this._colors3Arrays[name]);\r\n            }\r\n\r\n            // Color4\r\n            for (name in this._colors4) {\r\n                const color = this._colors4[name];\r\n                effect.setFloat4(name, color.r, color.g, color.b, color.a);\r\n            }\r\n\r\n            // Color4Array\r\n            for (name in this._colors4Arrays) {\r\n                effect.setArray4(name, this._colors4Arrays[name]);\r\n            }\r\n\r\n            // Vector2\r\n            for (name in this._vectors2) {\r\n                effect.setVector2(name, this._vectors2[name]);\r\n            }\r\n\r\n            // Vector3\r\n            for (name in this._vectors3) {\r\n                effect.setVector3(name, this._vectors3[name]);\r\n            }\r\n\r\n            // Vector4\r\n            for (name in this._vectors4) {\r\n                effect.setVector4(name, this._vectors4[name]);\r\n            }\r\n\r\n            // Matrix\r\n            for (name in this._matrices) {\r\n                effect.setMatrix(name, this._matrices[name]);\r\n            }\r\n\r\n            // MatrixArray\r\n            for (name in this._matrixArrays) {\r\n                effect.setMatrices(name, this._matrixArrays[name]);\r\n            }\r\n\r\n            // Matrix 3x3\r\n            for (name in this._matrices3x3) {\r\n                effect.setMatrix3x3(name, this._matrices3x3[name]);\r\n            }\r\n\r\n            // Matrix 2x2\r\n            for (name in this._matrices2x2) {\r\n                effect.setMatrix2x2(name, this._matrices2x2[name]);\r\n            }\r\n\r\n            // Vector2Array\r\n            for (name in this._vectors2Arrays) {\r\n                effect.setArray2(name, this._vectors2Arrays[name]);\r\n            }\r\n\r\n            // Vector3Array\r\n            for (name in this._vectors3Arrays) {\r\n                effect.setArray3(name, this._vectors3Arrays[name]);\r\n            }\r\n\r\n            // Vector4Array\r\n            for (name in this._vectors4Arrays) {\r\n                effect.setArray4(name, this._vectors4Arrays[name]);\r\n            }\r\n\r\n            // Uniform buffers\r\n            for (name in this._uniformBuffers) {\r\n                const buffer = this._uniformBuffers[name].getBuffer();\r\n                if (buffer) {\r\n                    effect.bindUniformBuffer(buffer, name);\r\n                }\r\n            }\r\n\r\n            // Samplers\r\n            for (name in this._textureSamplers) {\r\n                effect.setTextureSampler(name, this._textureSamplers[name]);\r\n            }\r\n\r\n            // Storage buffers\r\n            for (name in this._storageBuffers) {\r\n                effect.setStorageBuffer(name, this._storageBuffers[name]);\r\n            }\r\n        }\r\n\r\n        if (effect && mesh && (mustRebind || !this.isFrozen)) {\r\n            // Morph targets\r\n            const manager = (<Mesh>mesh).morphTargetManager;\r\n            if (manager && manager.numInfluencers > 0) {\r\n                MaterialHelper.BindMorphTargetParameters(<Mesh>mesh, effect);\r\n            }\r\n\r\n            const bvaManager = (<Mesh>mesh).bakedVertexAnimationManager;\r\n\r\n            if (bvaManager && bvaManager.isEnabled) {\r\n                mesh.bakedVertexAnimationManager?.bind(effect, this._effectUsesInstances);\r\n            }\r\n        }\r\n\r\n        this._afterBind(mesh, effect);\r\n    }\r\n\r\n    /**\r\n     * Gets the active textures from the material\r\n     * @returns an array of textures\r\n     */\r\n    public getActiveTextures(): BaseTexture[] {\r\n        const activeTextures = super.getActiveTextures();\r\n\r\n        for (const name in this._textures) {\r\n            activeTextures.push(this._textures[name]);\r\n        }\r\n\r\n        for (const name in this._textureArrays) {\r\n            const array = this._textureArrays[name];\r\n            for (let index = 0; index < array.length; index++) {\r\n                activeTextures.push(array[index]);\r\n            }\r\n        }\r\n\r\n        return activeTextures;\r\n    }\r\n\r\n    /**\r\n     * Specifies if the material uses a texture\r\n     * @param texture defines the texture to check against the material\r\n     * @returns a boolean specifying if the material uses the texture\r\n     */\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (super.hasTexture(texture)) {\r\n            return true;\r\n        }\r\n\r\n        for (const name in this._textures) {\r\n            if (this._textures[name] === texture) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        for (const name in this._textureArrays) {\r\n            const array = this._textureArrays[name];\r\n            for (let index = 0; index < array.length; index++) {\r\n                if (array[index] === texture) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the material, and gives it a new name\r\n     * @param name defines the new name for the duplicated material\r\n     * @returns the cloned material\r\n     */\r\n    public clone(name: string): ShaderMaterial {\r\n        const result = SerializationHelper.Clone(() => new ShaderMaterial(name, this.getScene(), this._shaderPath, this._options, this._storeEffectOnSubMeshes), this);\r\n\r\n        result.name = name;\r\n        result.id = name;\r\n\r\n        // Shader code path\r\n        if (typeof result._shaderPath === \"object\") {\r\n            result._shaderPath = { ...result._shaderPath };\r\n        }\r\n\r\n        // Options\r\n        this._options = { ...this._options };\r\n\r\n        (Object.keys(this._options) as Array<keyof IShaderMaterialOptions>).forEach((propName) => {\r\n            const propValue = this._options[propName];\r\n            if (Array.isArray(propValue)) {\r\n                (<string[]>this._options[propName]) = propValue.slice(0);\r\n            }\r\n        });\r\n\r\n        // Stencil\r\n        this.stencil.copyTo(result.stencil);\r\n\r\n        // Texture\r\n        for (const key in this._textures) {\r\n            result.setTexture(key, this._textures[key]);\r\n        }\r\n\r\n        // TextureArray\r\n        for (const key in this._textureArrays) {\r\n            result.setTextureArray(key, this._textureArrays[key]);\r\n        }\r\n\r\n        // External texture\r\n        for (const key in this._externalTextures) {\r\n            result.setExternalTexture(key, this._externalTextures[key]);\r\n        }\r\n\r\n        // Int\r\n        for (const key in this._ints) {\r\n            result.setInt(key, this._ints[key]);\r\n        }\r\n\r\n        // Float\r\n        for (const key in this._floats) {\r\n            result.setFloat(key, this._floats[key]);\r\n        }\r\n\r\n        // Floats\r\n        for (const key in this._floatsArrays) {\r\n            result.setFloats(key, this._floatsArrays[key]);\r\n        }\r\n\r\n        // Color3\r\n        for (const key in this._colors3) {\r\n            result.setColor3(key, this._colors3[key]);\r\n        }\r\n\r\n        // Color3Array\r\n        for (const key in this._colors3Arrays) {\r\n            result._colors3Arrays[key] = this._colors3Arrays[key];\r\n        }\r\n\r\n        // Color4\r\n        for (const key in this._colors4) {\r\n            result.setColor4(key, this._colors4[key]);\r\n        }\r\n\r\n        // Color4Array\r\n        for (const key in this._colors4Arrays) {\r\n            result._colors4Arrays[key] = this._colors4Arrays[key];\r\n        }\r\n\r\n        // Vector2\r\n        for (const key in this._vectors2) {\r\n            result.setVector2(key, this._vectors2[key]);\r\n        }\r\n\r\n        // Vector3\r\n        for (const key in this._vectors3) {\r\n            result.setVector3(key, this._vectors3[key]);\r\n        }\r\n\r\n        // Vector4\r\n        for (const key in this._vectors4) {\r\n            result.setVector4(key, this._vectors4[key]);\r\n        }\r\n\r\n        // Matrix\r\n        for (const key in this._matrices) {\r\n            result.setMatrix(key, this._matrices[key]);\r\n        }\r\n\r\n        // MatrixArray\r\n        for (const key in this._matrixArrays) {\r\n            result._matrixArrays[key] = this._matrixArrays[key].slice();\r\n        }\r\n\r\n        // Matrix 3x3\r\n        for (const key in this._matrices3x3) {\r\n            result.setMatrix3x3(key, this._matrices3x3[key]);\r\n        }\r\n\r\n        // Matrix 2x2\r\n        for (const key in this._matrices2x2) {\r\n            result.setMatrix2x2(key, this._matrices2x2[key]);\r\n        }\r\n\r\n        // Vector2Array\r\n        for (const key in this._vectors2Arrays) {\r\n            result.setArray2(key, this._vectors2Arrays[key]);\r\n        }\r\n\r\n        // Vector3Array\r\n        for (const key in this._vectors3Arrays) {\r\n            result.setArray3(key, this._vectors3Arrays[key]);\r\n        }\r\n\r\n        // Vector4Array\r\n        for (const key in this._vectors4Arrays) {\r\n            result.setArray4(key, this._vectors4Arrays[key]);\r\n        }\r\n\r\n        // Uniform buffers\r\n        for (const key in this._uniformBuffers) {\r\n            result.setUniformBuffer(key, this._uniformBuffers[key]);\r\n        }\r\n\r\n        // Samplers\r\n        for (const key in this._textureSamplers) {\r\n            result.setTextureSampler(key, this._textureSamplers[key]);\r\n        }\r\n\r\n        // Storag buffers\r\n        for (const key in this._storageBuffers) {\r\n            result.setStorageBuffer(key, this._storageBuffers[key]);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Disposes the material\r\n     * @param forceDisposeEffect specifies if effects should be forcefully disposed\r\n     * @param forceDisposeTextures specifies if textures should be forcefully disposed\r\n     * @param notBoundToMesh specifies if the material that is being disposed is known to be not bound to any mesh\r\n     */\r\n    public dispose(forceDisposeEffect?: boolean, forceDisposeTextures?: boolean, notBoundToMesh?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            let name: string;\r\n            for (name in this._textures) {\r\n                this._textures[name].dispose();\r\n            }\r\n\r\n            for (name in this._textureArrays) {\r\n                const array = this._textureArrays[name];\r\n                for (let index = 0; index < array.length; index++) {\r\n                    array[index].dispose();\r\n                }\r\n            }\r\n        }\r\n\r\n        this._textures = {};\r\n\r\n        super.dispose(forceDisposeEffect, forceDisposeTextures, notBoundToMesh);\r\n    }\r\n\r\n    /**\r\n     * Serializes this material in a JSON representation\r\n     * @returns the serialized material object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.ShaderMaterial\";\r\n\r\n        serializationObject.options = this._options;\r\n        serializationObject.shaderPath = this._shaderPath;\r\n        serializationObject.storeEffectOnSubMeshes = this._storeEffectOnSubMeshes;\r\n\r\n        let name: string;\r\n\r\n        // Stencil\r\n        serializationObject.stencil = this.stencil.serialize();\r\n\r\n        // Texture\r\n        serializationObject.textures = {};\r\n        for (name in this._textures) {\r\n            serializationObject.textures[name] = this._textures[name].serialize();\r\n        }\r\n\r\n        // Texture arrays\r\n        serializationObject.textureArrays = {};\r\n        for (name in this._textureArrays) {\r\n            serializationObject.textureArrays[name] = [];\r\n            const array = this._textureArrays[name];\r\n            for (let index = 0; index < array.length; index++) {\r\n                serializationObject.textureArrays[name].push(array[index].serialize());\r\n            }\r\n        }\r\n\r\n        // Int\r\n        serializationObject.ints = {};\r\n        for (name in this._ints) {\r\n            serializationObject.ints[name] = this._ints[name];\r\n        }\r\n\r\n        // Float\r\n        serializationObject.floats = {};\r\n        for (name in this._floats) {\r\n            serializationObject.floats[name] = this._floats[name];\r\n        }\r\n\r\n        // Floats\r\n        serializationObject.FloatArrays = {};\r\n        for (name in this._floatsArrays) {\r\n            serializationObject.FloatArrays[name] = this._floatsArrays[name];\r\n        }\r\n\r\n        // Color3\r\n        serializationObject.colors3 = {};\r\n        for (name in this._colors3) {\r\n            serializationObject.colors3[name] = this._colors3[name].asArray();\r\n        }\r\n\r\n        // Color3 array\r\n        serializationObject.colors3Arrays = {};\r\n        for (name in this._colors3Arrays) {\r\n            serializationObject.colors3Arrays[name] = this._colors3Arrays[name];\r\n        }\r\n\r\n        // Color4\r\n        serializationObject.colors4 = {};\r\n        for (name in this._colors4) {\r\n            serializationObject.colors4[name] = this._colors4[name].asArray();\r\n        }\r\n\r\n        // Color4 array\r\n        serializationObject.colors4Arrays = {};\r\n        for (name in this._colors4Arrays) {\r\n            serializationObject.colors4Arrays[name] = this._colors4Arrays[name];\r\n        }\r\n\r\n        // Vector2\r\n        serializationObject.vectors2 = {};\r\n        for (name in this._vectors2) {\r\n            serializationObject.vectors2[name] = this._vectors2[name].asArray();\r\n        }\r\n\r\n        // Vector3\r\n        serializationObject.vectors3 = {};\r\n        for (name in this._vectors3) {\r\n            serializationObject.vectors3[name] = this._vectors3[name].asArray();\r\n        }\r\n\r\n        // Vector4\r\n        serializationObject.vectors4 = {};\r\n        for (name in this._vectors4) {\r\n            serializationObject.vectors4[name] = this._vectors4[name].asArray();\r\n        }\r\n\r\n        // Matrix\r\n        serializationObject.matrices = {};\r\n        for (name in this._matrices) {\r\n            serializationObject.matrices[name] = this._matrices[name].asArray();\r\n        }\r\n\r\n        // MatrixArray\r\n        serializationObject.matrixArray = {};\r\n        for (name in this._matrixArrays) {\r\n            serializationObject.matrixArray[name] = this._matrixArrays[name];\r\n        }\r\n\r\n        // Matrix 3x3\r\n        serializationObject.matrices3x3 = {};\r\n        for (name in this._matrices3x3) {\r\n            serializationObject.matrices3x3[name] = this._matrices3x3[name];\r\n        }\r\n\r\n        // Matrix 2x2\r\n        serializationObject.matrices2x2 = {};\r\n        for (name in this._matrices2x2) {\r\n            serializationObject.matrices2x2[name] = this._matrices2x2[name];\r\n        }\r\n\r\n        // Vector2Array\r\n        serializationObject.vectors2Arrays = {};\r\n        for (name in this._vectors2Arrays) {\r\n            serializationObject.vectors2Arrays[name] = this._vectors2Arrays[name];\r\n        }\r\n\r\n        // Vector3Array\r\n        serializationObject.vectors3Arrays = {};\r\n        for (name in this._vectors3Arrays) {\r\n            serializationObject.vectors3Arrays[name] = this._vectors3Arrays[name];\r\n        }\r\n\r\n        // Vector4Array\r\n        serializationObject.vectors4Arrays = {};\r\n        for (name in this._vectors4Arrays) {\r\n            serializationObject.vectors4Arrays[name] = this._vectors4Arrays[name];\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Creates a shader material from parsed shader material data\r\n     * @param source defines the JSON representation of the material\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a new material\r\n     */\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): ShaderMaterial {\r\n        const material = SerializationHelper.Parse(\r\n            () => new ShaderMaterial(source.name, scene, source.shaderPath, source.options, source.storeEffectOnSubMeshes),\r\n            source,\r\n            scene,\r\n            rootUrl\r\n        );\r\n\r\n        let name: string;\r\n\r\n        // Stencil\r\n        if (source.stencil) {\r\n            material.stencil.parse(source.stencil, scene, rootUrl);\r\n        }\r\n\r\n        // Texture\r\n        for (name in source.textures) {\r\n            material.setTexture(name, <Texture>Texture.Parse(source.textures[name], scene, rootUrl));\r\n        }\r\n\r\n        // Texture arrays\r\n        for (name in source.textureArrays) {\r\n            const array = source.textureArrays[name];\r\n            const textureArray = new Array<Texture>();\r\n\r\n            for (let index = 0; index < array.length; index++) {\r\n                textureArray.push(<Texture>Texture.Parse(array[index], scene, rootUrl));\r\n            }\r\n            material.setTextureArray(name, textureArray);\r\n        }\r\n\r\n        // Int\r\n        for (name in source.ints) {\r\n            material.setInt(name, source.ints[name]);\r\n        }\r\n\r\n        // Float\r\n        for (name in source.floats) {\r\n            material.setFloat(name, source.floats[name]);\r\n        }\r\n\r\n        // Floats\r\n        for (name in source.floatsArrays) {\r\n            material.setFloats(name, source.floatsArrays[name]);\r\n        }\r\n\r\n        // Color3\r\n        for (name in source.colors3) {\r\n            material.setColor3(name, Color3.FromArray(source.colors3[name]));\r\n        }\r\n\r\n        // Color3 arrays\r\n        for (name in source.colors3Arrays) {\r\n            const colors: Color3[] = source.colors3Arrays[name]\r\n                .reduce((arr: Array<Array<number>>, num: number, i: number) => {\r\n                    if (i % 3 === 0) {\r\n                        arr.push([num]);\r\n                    } else {\r\n                        arr[arr.length - 1].push(num);\r\n                    }\r\n                    return arr;\r\n                }, [])\r\n                .map((color: ArrayLike<number>) => Color3.FromArray(color));\r\n            material.setColor3Array(name, colors);\r\n        }\r\n\r\n        // Color4\r\n        for (name in source.colors4) {\r\n            material.setColor4(name, Color4.FromArray(source.colors4[name]));\r\n        }\r\n\r\n        // Color4 arrays\r\n        for (name in source.colors4Arrays) {\r\n            const colors: Color4[] = source.colors4Arrays[name]\r\n                .reduce((arr: Array<Array<number>>, num: number, i: number) => {\r\n                    if (i % 4 === 0) {\r\n                        arr.push([num]);\r\n                    } else {\r\n                        arr[arr.length - 1].push(num);\r\n                    }\r\n                    return arr;\r\n                }, [])\r\n                .map((color: ArrayLike<number>) => Color4.FromArray(color));\r\n            material.setColor4Array(name, colors);\r\n        }\r\n\r\n        // Vector2\r\n        for (name in source.vectors2) {\r\n            material.setVector2(name, Vector2.FromArray(source.vectors2[name]));\r\n        }\r\n\r\n        // Vector3\r\n        for (name in source.vectors3) {\r\n            material.setVector3(name, Vector3.FromArray(source.vectors3[name]));\r\n        }\r\n\r\n        // Vector4\r\n        for (name in source.vectors4) {\r\n            material.setVector4(name, Vector4.FromArray(source.vectors4[name]));\r\n        }\r\n\r\n        // Matrix\r\n        for (name in source.matrices) {\r\n            material.setMatrix(name, Matrix.FromArray(source.matrices[name]));\r\n        }\r\n\r\n        // MatrixArray\r\n        for (name in source.matrixArray) {\r\n            material._matrixArrays[name] = new Float32Array(source.matrixArray[name]);\r\n        }\r\n\r\n        // Matrix 3x3\r\n        for (name in source.matrices3x3) {\r\n            material.setMatrix3x3(name, source.matrices3x3[name]);\r\n        }\r\n\r\n        // Matrix 2x2\r\n        for (name in source.matrices2x2) {\r\n            material.setMatrix2x2(name, source.matrices2x2[name]);\r\n        }\r\n\r\n        // Vector2Array\r\n        for (name in source.vectors2Arrays) {\r\n            material.setArray2(name, source.vectors2Arrays[name]);\r\n        }\r\n\r\n        // Vector3Array\r\n        for (name in source.vectors3Arrays) {\r\n            material.setArray3(name, source.vectors3Arrays[name]);\r\n        }\r\n\r\n        // Vector4Array\r\n        for (name in source.vectors4Arrays) {\r\n            material.setArray4(name, source.vectors4Arrays[name]);\r\n        }\r\n\r\n        return material;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ShaderMaterial from a snippet saved in a remote file\r\n     * @param name defines the name of the ShaderMaterial to create (can be null or empty to use the one from the json data)\r\n     * @param url defines the url to load from\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a promise that will resolve to the new ShaderMaterial\r\n     */\r\n    public static ParseFromFileAsync(name: Nullable<string>, url: string, scene: Scene, rootUrl: string = \"\"): Promise<ShaderMaterial> {\r\n        return new Promise((resolve, reject) => {\r\n            const request = new WebRequest();\r\n            request.addEventListener(\"readystatechange\", () => {\r\n                if (request.readyState == 4) {\r\n                    if (request.status == 200) {\r\n                        const serializationObject = JSON.parse(request.responseText);\r\n                        const output = this.Parse(serializationObject, scene || EngineStore.LastCreatedScene, rootUrl);\r\n\r\n                        if (name) {\r\n                            output.name = name;\r\n                        }\r\n\r\n                        resolve(output);\r\n                    } else {\r\n                        reject(\"Unable to load the ShaderMaterial\");\r\n                    }\r\n                }\r\n            });\r\n\r\n            request.open(\"GET\", url);\r\n            request.send();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a ShaderMaterial from a snippet saved by the Inspector\r\n     * @param snippetId defines the snippet to load\r\n     * @param scene defines the hosting scene\r\n     * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n     * @returns a promise that will resolve to the new ShaderMaterial\r\n     */\r\n    public static CreateFromSnippetAsync(snippetId: string, scene: Scene, rootUrl: string = \"\"): Promise<ShaderMaterial> {\r\n        return new Promise((resolve, reject) => {\r\n            const request = new WebRequest();\r\n            request.addEventListener(\"readystatechange\", () => {\r\n                if (request.readyState == 4) {\r\n                    if (request.status == 200) {\r\n                        const snippet = JSON.parse(JSON.parse(request.responseText).jsonPayload);\r\n                        const serializationObject = JSON.parse(snippet.shaderMaterial);\r\n                        const output = this.Parse(serializationObject, scene || EngineStore.LastCreatedScene, rootUrl);\r\n\r\n                        output.snippetId = snippetId;\r\n\r\n                        resolve(output);\r\n                    } else {\r\n                        reject(\"Unable to load the snippet \" + snippetId);\r\n                    }\r\n                }\r\n            });\r\n\r\n            request.open(\"GET\", this.SnippetUrl + \"/\" + snippetId.replace(/#/g, \"/\"));\r\n            request.send();\r\n        });\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ShaderMaterial\", ShaderMaterial);\r\n"]},"metadata":{},"sourceType":"module"}