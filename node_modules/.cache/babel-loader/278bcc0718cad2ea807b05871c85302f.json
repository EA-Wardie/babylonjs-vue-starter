{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { Texture } from \"../../../Textures/texture.js\";\nimport { NodeMaterial } from \"../../nodeMaterial.js\";\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject.js\";\nimport { EngineStore } from \"../../../../Engines/engineStore.js\";\n/**\n * Block used to provide an image for a TextureBlock\n */\n\nvar ImageSourceBlock =\n/** @class */\nfunction (_super) {\n  __extends(ImageSourceBlock, _super);\n  /**\n   * Creates a new ImageSourceBlock\n   * @param name defines the block name\n   */\n\n\n  function ImageSourceBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.VertexAndFragment) || this;\n\n    _this.registerOutput(\"source\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.VertexAndFragment, new NodeMaterialConnectionPointCustomObject(\"source\", _this, NodeMaterialConnectionPointDirection.Output, ImageSourceBlock, \"ImageSourceBlock\"));\n\n    return _this;\n  }\n\n  Object.defineProperty(ImageSourceBlock.prototype, \"texture\", {\n    /**\n     * Gets or sets the texture associated with the node\n     */\n    get: function get() {\n      return this._texture;\n    },\n    set: function set(texture) {\n      var _this = this;\n\n      var _a;\n\n      if (this._texture === texture) {\n        return;\n      }\n\n      var scene = (_a = texture === null || texture === void 0 ? void 0 : texture.getScene()) !== null && _a !== void 0 ? _a : EngineStore.LastCreatedScene;\n\n      if (!texture && scene) {\n        scene.markAllMaterialsAsDirty(1, function (mat) {\n          return mat.hasTexture(_this._texture);\n        });\n      }\n\n      this._texture = texture;\n\n      if (texture && scene) {\n        scene.markAllMaterialsAsDirty(1, function (mat) {\n          return mat.hasTexture(texture);\n        });\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageSourceBlock.prototype, \"samplerName\", {\n    /**\n     * Gets the sampler name associated with this image source\n     */\n    get: function get() {\n      return this._samplerName;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ImageSourceBlock.prototype.bind = function (effect) {\n    if (!this.texture) {\n      return;\n    }\n\n    effect.setTexture(this._samplerName, this.texture);\n  };\n\n  ImageSourceBlock.prototype.isReady = function () {\n    if (this.texture && !this.texture.isReadyOrNotBlocking()) {\n      return false;\n    }\n\n    return true;\n  };\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  ImageSourceBlock.prototype.getClassName = function () {\n    return \"ImageSourceBlock\";\n  };\n\n  Object.defineProperty(ImageSourceBlock.prototype, \"source\", {\n    /**\n     * Gets the output component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ImageSourceBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    if (state.target === NodeMaterialBlockTargets.Vertex) {\n      this._samplerName = state._getFreeVariableName(this.name + \"Sampler\"); // Declarations\n\n      state.sharedData.blockingBlocks.push(this);\n      state.sharedData.textureBlocks.push(this);\n      state.sharedData.bindableBlocks.push(this);\n    }\n\n    state._emit2DSampler(this._samplerName);\n\n    return this;\n  };\n\n  ImageSourceBlock.prototype._dumpPropertiesCode = function () {\n    var codeString = _super.prototype._dumpPropertiesCode.call(this);\n\n    if (!this.texture) {\n      return codeString;\n    }\n\n    codeString += \"\".concat(this._codeVariableName, \".texture = new BABYLON.Texture(\\\"\").concat(this.texture.name, \"\\\", null, \").concat(this.texture.noMipmap, \", \").concat(this.texture.invertY, \", \").concat(this.texture.samplingMode, \");\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".texture.wrapU = \").concat(this.texture.wrapU, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".texture.wrapV = \").concat(this.texture.wrapV, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".texture.uAng = \").concat(this.texture.uAng, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".texture.vAng = \").concat(this.texture.vAng, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".texture.wAng = \").concat(this.texture.wAng, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".texture.uOffset = \").concat(this.texture.uOffset, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".texture.vOffset = \").concat(this.texture.vOffset, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".texture.uScale = \").concat(this.texture.uScale, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".texture.vScale = \").concat(this.texture.vScale, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".texture.coordinatesMode = \").concat(this.texture.coordinatesMode, \";\\r\\n\");\n    return codeString;\n  };\n\n  ImageSourceBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    if (this.texture && !this.texture.isRenderTarget && this.texture.getClassName() !== \"VideoTexture\") {\n      serializationObject.texture = this.texture.serialize();\n    }\n\n    return serializationObject;\n  };\n\n  ImageSourceBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    if (serializationObject.texture && !NodeMaterial.IgnoreTexturesAtLoadTime && serializationObject.texture.url !== undefined) {\n      rootUrl = serializationObject.texture.url.indexOf(\"data:\") === 0 ? \"\" : rootUrl;\n      this.texture = Texture.Parse(serializationObject.texture, scene, rootUrl);\n    }\n  };\n\n  return ImageSourceBlock;\n}(NodeMaterialBlock);\n\nexport { ImageSourceBlock };\nRegisterClass(\"BABYLON.ImageSourceBlock\", ImageSourceBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialConnectionPointDirection","NodeMaterialBlockTargets","RegisterClass","Texture","NodeMaterial","NodeMaterialConnectionPointCustomObject","EngineStore","__extends","name","_super","VertexAndFragment","_this","registerOutput","Object","Output","ImageSourceBlock","_texture","texture","scene","getScene","_a","LastCreatedScene","markAllMaterialsAsDirty","mat","hasTexture","_samplerName","effect","setTexture","isReadyOrNotBlocking","_outputs","state","_buildBlock","call","target","Vertex","_getFreeVariableName","sharedData","blockingBlocks","push","textureBlocks","bindableBlocks","_emit2DSampler","codeString","_dumpPropertiesCode","_codeVariableName","concat","noMipmap","invertY","samplingMode","wrapU","wrapV","uAng","vAng","wAng","uOffset","vOffset","uScale","vScale","coordinatesMode","serializationObject","serialize","isRenderTarget","getClassName","rootUrl","_deserialize","IgnoreTexturesAtLoadTime","url","undefined","indexOf","Parse"],"sourceRoot":"","sources":["../../../../../../../../lts/core/generated/Materials/Node/Blocks/Dual/imageSourceBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { Nullable } from \"../../../../types\";\r\nimport { Texture } from \"../../../Textures/texture\";\r\nimport { Constants } from \"../../../../Engines/constants\";\r\nimport type { Effect } from \"../../../effect\";\r\nimport { NodeMaterial } from \"../../nodeMaterial\";\r\nimport type { Scene } from \"../../../../scene\";\r\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\r\nimport { EngineStore } from \"../../../../Engines/engineStore\";\r\n/**\r\n * Block used to provide an image for a TextureBlock\r\n */\r\nexport class ImageSourceBlock extends NodeMaterialBlock {\r\n    private _samplerName: string;\r\n    protected _texture: Nullable<Texture>;\r\n    /**\r\n     * Gets or sets the texture associated with the node\r\n     */\r\n    public get texture(): Nullable<Texture> {\r\n        return this._texture;\r\n    }\r\n\r\n    public set texture(texture: Nullable<Texture>) {\r\n        if (this._texture === texture) {\r\n            return;\r\n        }\r\n\r\n        const scene = texture?.getScene() ?? EngineStore.LastCreatedScene;\r\n\r\n        if (!texture && scene) {\r\n            scene.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag, (mat) => {\r\n                return mat.hasTexture(this._texture!);\r\n            });\r\n        }\r\n\r\n        this._texture = texture;\r\n\r\n        if (texture && scene) {\r\n            scene.markAllMaterialsAsDirty(Constants.MATERIAL_TextureDirtyFlag, (mat) => {\r\n                return mat.hasTexture(texture);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the sampler name associated with this image source\r\n     */\r\n    public get samplerName(): string {\r\n        return this._samplerName;\r\n    }\r\n\r\n    /**\r\n     * Creates a new ImageSourceBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.VertexAndFragment);\r\n\r\n        this.registerOutput(\r\n            \"source\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            NodeMaterialBlockTargets.VertexAndFragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"source\", this, NodeMaterialConnectionPointDirection.Output, ImageSourceBlock, \"ImageSourceBlock\")\r\n        );\r\n    }\r\n\r\n    public bind(effect: Effect) {\r\n        if (!this.texture) {\r\n            return;\r\n        }\r\n\r\n        effect.setTexture(this._samplerName, this.texture);\r\n    }\r\n\r\n    public isReady() {\r\n        if (this.texture && !this.texture.isReadyOrNotBlocking()) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ImageSourceBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get source(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (state.target === NodeMaterialBlockTargets.Vertex) {\r\n            this._samplerName = state._getFreeVariableName(this.name + \"Sampler\");\r\n\r\n            // Declarations\r\n            state.sharedData.blockingBlocks.push(this);\r\n            state.sharedData.textureBlocks.push(this);\r\n            state.sharedData.bindableBlocks.push(this);\r\n        }\r\n\r\n        state._emit2DSampler(this._samplerName);\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString = super._dumpPropertiesCode();\r\n\r\n        if (!this.texture) {\r\n            return codeString;\r\n        }\r\n\r\n        codeString += `${this._codeVariableName}.texture = new BABYLON.Texture(\"${this.texture.name}\", null, ${this.texture.noMipmap}, ${this.texture.invertY}, ${this.texture.samplingMode});\\r\\n`;\r\n        codeString += `${this._codeVariableName}.texture.wrapU = ${this.texture.wrapU};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.texture.wrapV = ${this.texture.wrapV};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.texture.uAng = ${this.texture.uAng};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.texture.vAng = ${this.texture.vAng};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.texture.wAng = ${this.texture.wAng};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.texture.uOffset = ${this.texture.uOffset};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.texture.vOffset = ${this.texture.vOffset};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.texture.uScale = ${this.texture.uScale};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.texture.vScale = ${this.texture.vScale};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.texture.coordinatesMode = ${this.texture.coordinatesMode};\\r\\n`;\r\n\r\n        return codeString;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        if (this.texture && !this.texture.isRenderTarget && this.texture.getClassName() !== \"VideoTexture\") {\r\n            serializationObject.texture = this.texture.serialize();\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        if (serializationObject.texture && !NodeMaterial.IgnoreTexturesAtLoadTime && serializationObject.texture.url !== undefined) {\r\n            rootUrl = serializationObject.texture.url.indexOf(\"data:\") === 0 ? \"\" : rootUrl;\r\n            this.texture = Texture.Parse(serializationObject.texture, scene, rootUrl) as Texture;\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ImageSourceBlock\", ImageSourceBlock);\r\n"]},"metadata":{},"sourceType":"module"}