{"ast":null,"code":"import \"core-js/modules/es.function.bind.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { SerializationHelper } from \"../Misc/decorators.js\";\nimport { Camera } from \"./camera.js\";\n/**\n * @ignore\n * This is a list of all the different input types that are available in the application.\n * Fo instance: ArcRotateCameraGamepadInput...\n */\n// eslint-disable-next-line no-var, @typescript-eslint/naming-convention\n\nexport var CameraInputTypes = {};\n/**\n * This represents the input manager used within a camera.\n * It helps dealing with all the different kind of input attached to a camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\n\nvar CameraInputsManager =\n/** @class */\nfunction () {\n  /**\n   * Instantiate a new Camera Input Manager.\n   * @param camera Defines the camera the input manager belongs to\n   */\n  function CameraInputsManager(camera) {\n    /**\n     * Defines the dom element the camera is collecting inputs from.\n     * This is null if the controls have not been attached.\n     */\n    this.attachedToElement = false;\n    this.attached = {};\n    this.camera = camera;\n\n    this.checkInputs = function () {};\n  }\n  /**\n   * Add an input method to a camera\n   * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n   * @param input camera input method\n   */\n\n\n  CameraInputsManager.prototype.add = function (input) {\n    var type = input.getSimpleName();\n\n    if (this.attached[type]) {\n      Logger.Warn(\"camera input of type \" + type + \" already exists on camera\");\n      return;\n    }\n\n    this.attached[type] = input;\n    input.camera = this.camera; //for checkInputs, we are dynamically creating a function\n    //the goal is to avoid the performance penalty of looping for inputs in the render loop\n\n    if (input.checkInputs) {\n      this.checkInputs = this._addCheckInputs(input.checkInputs.bind(input));\n    }\n\n    if (this.attachedToElement) {\n      input.attachControl();\n    }\n  };\n  /**\n   * Remove a specific input method from a camera\n   * example: camera.inputs.remove(camera.inputs.attached.mouse);\n   * @param inputToRemove camera input method\n   */\n\n\n  CameraInputsManager.prototype.remove = function (inputToRemove) {\n    for (var cam in this.attached) {\n      var input = this.attached[cam];\n\n      if (input === inputToRemove) {\n        input.detachControl();\n        input.camera = null;\n        delete this.attached[cam];\n        this.rebuildInputCheck();\n      }\n    }\n  };\n  /**\n   * Remove a specific input type from a camera\n   * example: camera.inputs.remove(\"ArcRotateCameraGamepadInput\");\n   * @param inputType the type of the input to remove\n   */\n\n\n  CameraInputsManager.prototype.removeByType = function (inputType) {\n    for (var cam in this.attached) {\n      var input = this.attached[cam];\n\n      if (input.getClassName() === inputType) {\n        input.detachControl();\n        input.camera = null;\n        delete this.attached[cam];\n        this.rebuildInputCheck();\n      }\n    }\n  };\n\n  CameraInputsManager.prototype._addCheckInputs = function (fn) {\n    var current = this.checkInputs;\n    return function () {\n      current();\n      fn();\n    };\n  };\n  /**\n   * Attach the input controls to the currently attached dom element to listen the events from.\n   * @param input Defines the input to attach\n   */\n\n\n  CameraInputsManager.prototype.attachInput = function (input) {\n    if (this.attachedToElement) {\n      input.attachControl(this.noPreventDefault);\n    }\n  };\n  /**\n   * Attach the current manager inputs controls to a specific dom element to listen the events from.\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n   */\n\n\n  CameraInputsManager.prototype.attachElement = function (noPreventDefault) {\n    if (noPreventDefault === void 0) {\n      noPreventDefault = false;\n    }\n\n    if (this.attachedToElement) {\n      return;\n    }\n\n    noPreventDefault = Camera.ForceAttachControlToAlwaysPreventDefault ? false : noPreventDefault;\n    this.attachedToElement = true;\n    this.noPreventDefault = noPreventDefault;\n\n    for (var cam in this.attached) {\n      this.attached[cam].attachControl(noPreventDefault);\n    }\n  };\n  /**\n   * Detach the current manager inputs controls from a specific dom element.\n   * @param disconnect Defines whether the input should be removed from the current list of attached inputs\n   */\n\n\n  CameraInputsManager.prototype.detachElement = function (disconnect) {\n    if (disconnect === void 0) {\n      disconnect = false;\n    }\n\n    for (var cam in this.attached) {\n      this.attached[cam].detachControl();\n\n      if (disconnect) {\n        this.attached[cam].camera = null;\n      }\n    }\n\n    this.attachedToElement = false;\n  };\n  /**\n   * Rebuild the dynamic inputCheck function from the current list of\n   * defined inputs in the manager.\n   */\n\n\n  CameraInputsManager.prototype.rebuildInputCheck = function () {\n    this.checkInputs = function () {};\n\n    for (var cam in this.attached) {\n      var input = this.attached[cam];\n\n      if (input.checkInputs) {\n        this.checkInputs = this._addCheckInputs(input.checkInputs.bind(input));\n      }\n    }\n  };\n  /**\n   * Remove all attached input methods from a camera\n   */\n\n\n  CameraInputsManager.prototype.clear = function () {\n    if (this.attachedToElement) {\n      this.detachElement(true);\n    }\n\n    this.attached = {};\n    this.attachedToElement = false;\n\n    this.checkInputs = function () {};\n  };\n  /**\n   * Serialize the current input manager attached to a camera.\n   * This ensures than once parsed,\n   * the input associated to the camera will be identical to the current ones\n   * @param serializedCamera Defines the camera serialization JSON the input serialization should write to\n   */\n\n\n  CameraInputsManager.prototype.serialize = function (serializedCamera) {\n    var inputs = {};\n\n    for (var cam in this.attached) {\n      var input = this.attached[cam];\n      var res = SerializationHelper.Serialize(input);\n      inputs[input.getClassName()] = res;\n    }\n\n    serializedCamera.inputsmgr = inputs;\n  };\n  /**\n   * Parses an input manager serialized JSON to restore the previous list of inputs\n   * and states associated to a camera.\n   * @param parsedCamera Defines the JSON to parse\n   */\n\n\n  CameraInputsManager.prototype.parse = function (parsedCamera) {\n    var parsedInputs = parsedCamera.inputsmgr;\n\n    if (parsedInputs) {\n      this.clear();\n\n      var _loop_1 = function _loop_1(n) {\n        var construct = CameraInputTypes[n];\n\n        if (construct) {\n          var parsedinput = parsedInputs[n];\n          var input = SerializationHelper.Parse(function () {\n            return new construct();\n          }, parsedinput, null);\n          this_1.add(input);\n        }\n      };\n\n      var this_1 = this;\n\n      for (var n in parsedInputs) {\n        _loop_1(n);\n      }\n    } else {\n      var _loop_2 = function _loop_2(n) {\n        var construct = CameraInputTypes[this_2.attached[n].getClassName()];\n\n        if (construct) {\n          var input = SerializationHelper.Parse(function () {\n            return new construct();\n          }, parsedCamera, null);\n          this_2.remove(this_2.attached[n]);\n          this_2.add(input);\n        }\n      };\n\n      var this_2 = this; //2016-03-08 this part is for managing backward compatibility\n\n      for (var n in this.attached) {\n        _loop_2(n);\n      }\n    }\n  };\n\n  return CameraInputsManager;\n}();\n\nexport { CameraInputsManager };","map":{"version":3,"mappings":"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","names":["Logger","SerializationHelper","Camera","CameraInputTypes","camera","attached","checkInputs","CameraInputsManager","input","type","getSimpleName","Warn","_addCheckInputs","bind","attachedToElement","attachControl","inputToRemove","cam","detachControl","rebuildInputCheck","inputType","getClassName","fn","current","noPreventDefault","ForceAttachControlToAlwaysPreventDefault","disconnect","detachElement","serializedCamera","inputs","res","Serialize","inputsmgr","parsedCamera","parsedInputs","clear","n","construct","parsedinput","Parse","this_1","add","this_2","remove"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Cameras/cameraInputsManager.ts"],"sourcesContent":["import { Logger } from \"../Misc/logger\";\r\nimport { SerializationHelper } from \"../Misc/decorators\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Camera } from \"./camera\";\r\n/**\r\n * @ignore\r\n * This is a list of all the different input types that are available in the application.\r\n * Fo instance: ArcRotateCameraGamepadInput...\r\n */\r\n// eslint-disable-next-line no-var, @typescript-eslint/naming-convention\r\nexport var CameraInputTypes = {};\r\n\r\n/**\r\n * This is the contract to implement in order to create a new input class.\r\n * Inputs are dealing with listening to user actions and moving the camera accordingly.\r\n */\r\nexport interface ICameraInput<TCamera extends Camera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    camera: Nullable<TCamera>;\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    getClassName(): string;\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    getSimpleName(): string;\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    attachControl(noPreventDefault?: boolean): void;\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    detachControl(): void;\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    checkInputs?: () => void;\r\n}\r\n\r\n/**\r\n * Represents a map of input types to input instance or input index to input instance.\r\n */\r\nexport interface CameraInputsMap<TCamera extends Camera> {\r\n    /**\r\n     * Accessor to the input by input type.\r\n     */\r\n    [name: string]: ICameraInput<TCamera>;\r\n    /**\r\n     * Accessor to the input by input index.\r\n     */\r\n    [idx: number]: ICameraInput<TCamera>;\r\n}\r\n\r\n/**\r\n * This represents the input manager used within a camera.\r\n * It helps dealing with all the different kind of input attached to a camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class CameraInputsManager<TCamera extends Camera> {\r\n    /**\r\n     * Defines the list of inputs attached to the camera.\r\n     */\r\n    public attached: CameraInputsMap<TCamera>;\r\n\r\n    /**\r\n     * Defines the dom element the camera is collecting inputs from.\r\n     * This is null if the controls have not been attached.\r\n     */\r\n    public attachedToElement: boolean = false;\r\n\r\n    /**\r\n     * Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public noPreventDefault: boolean;\r\n\r\n    /**\r\n     * Defined the camera the input manager belongs to.\r\n     */\r\n    public camera: TCamera;\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs: () => void;\r\n\r\n    /**\r\n     * Instantiate a new Camera Input Manager.\r\n     * @param camera Defines the camera the input manager belongs to\r\n     */\r\n    constructor(camera: TCamera) {\r\n        this.attached = {};\r\n        this.camera = camera;\r\n        this.checkInputs = () => {};\r\n    }\r\n\r\n    /**\r\n     * Add an input method to a camera\r\n     * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n     * @param input camera input method\r\n     */\r\n    public add(input: ICameraInput<TCamera>): void {\r\n        const type = input.getSimpleName();\r\n        if (this.attached[type]) {\r\n            Logger.Warn(\"camera input of type \" + type + \" already exists on camera\");\r\n            return;\r\n        }\r\n\r\n        this.attached[type] = input;\r\n\r\n        input.camera = this.camera;\r\n\r\n        //for checkInputs, we are dynamically creating a function\r\n        //the goal is to avoid the performance penalty of looping for inputs in the render loop\r\n        if (input.checkInputs) {\r\n            this.checkInputs = this._addCheckInputs(input.checkInputs.bind(input));\r\n        }\r\n\r\n        if (this.attachedToElement) {\r\n            input.attachControl();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove a specific input method from a camera\r\n     * example: camera.inputs.remove(camera.inputs.attached.mouse);\r\n     * @param inputToRemove camera input method\r\n     */\r\n    public remove(inputToRemove: ICameraInput<TCamera>): void {\r\n        for (const cam in this.attached) {\r\n            const input = this.attached[cam];\r\n            if (input === inputToRemove) {\r\n                input.detachControl();\r\n                input.camera = null;\r\n                delete this.attached[cam];\r\n                this.rebuildInputCheck();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove a specific input type from a camera\r\n     * example: camera.inputs.remove(\"ArcRotateCameraGamepadInput\");\r\n     * @param inputType the type of the input to remove\r\n     */\r\n    public removeByType(inputType: string): void {\r\n        for (const cam in this.attached) {\r\n            const input = this.attached[cam];\r\n            if (input.getClassName() === inputType) {\r\n                input.detachControl();\r\n                input.camera = null;\r\n                delete this.attached[cam];\r\n                this.rebuildInputCheck();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _addCheckInputs(fn: () => void) {\r\n        const current = this.checkInputs;\r\n        return () => {\r\n            current();\r\n            fn();\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Attach the input controls to the currently attached dom element to listen the events from.\r\n     * @param input Defines the input to attach\r\n     */\r\n    public attachInput(input: ICameraInput<TCamera>): void {\r\n        if (this.attachedToElement) {\r\n            input.attachControl(this.noPreventDefault);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attach the current manager inputs controls to a specific dom element to listen the events from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachElement(noPreventDefault: boolean = false): void {\r\n        if (this.attachedToElement) {\r\n            return;\r\n        }\r\n\r\n        noPreventDefault = Camera.ForceAttachControlToAlwaysPreventDefault ? false : noPreventDefault;\r\n        this.attachedToElement = true;\r\n        this.noPreventDefault = noPreventDefault;\r\n\r\n        for (const cam in this.attached) {\r\n            this.attached[cam].attachControl(noPreventDefault);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Detach the current manager inputs controls from a specific dom element.\r\n     * @param disconnect Defines whether the input should be removed from the current list of attached inputs\r\n     */\r\n    public detachElement(disconnect = false): void {\r\n        for (const cam in this.attached) {\r\n            this.attached[cam].detachControl();\r\n\r\n            if (disconnect) {\r\n                this.attached[cam].camera = null;\r\n            }\r\n        }\r\n        this.attachedToElement = false;\r\n    }\r\n\r\n    /**\r\n     * Rebuild the dynamic inputCheck function from the current list of\r\n     * defined inputs in the manager.\r\n     */\r\n    public rebuildInputCheck(): void {\r\n        this.checkInputs = () => {};\r\n\r\n        for (const cam in this.attached) {\r\n            const input = this.attached[cam];\r\n            if (input.checkInputs) {\r\n                this.checkInputs = this._addCheckInputs(input.checkInputs.bind(input));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove all attached input methods from a camera\r\n     */\r\n    public clear(): void {\r\n        if (this.attachedToElement) {\r\n            this.detachElement(true);\r\n        }\r\n        this.attached = {};\r\n        this.attachedToElement = false;\r\n        this.checkInputs = () => {};\r\n    }\r\n\r\n    /**\r\n     * Serialize the current input manager attached to a camera.\r\n     * This ensures than once parsed,\r\n     * the input associated to the camera will be identical to the current ones\r\n     * @param serializedCamera Defines the camera serialization JSON the input serialization should write to\r\n     */\r\n    public serialize(serializedCamera: any): void {\r\n        const inputs: { [key: string]: any } = {};\r\n        for (const cam in this.attached) {\r\n            const input = this.attached[cam];\r\n            const res = SerializationHelper.Serialize(input);\r\n            inputs[input.getClassName()] = res;\r\n        }\r\n\r\n        serializedCamera.inputsmgr = inputs;\r\n    }\r\n\r\n    /**\r\n     * Parses an input manager serialized JSON to restore the previous list of inputs\r\n     * and states associated to a camera.\r\n     * @param parsedCamera Defines the JSON to parse\r\n     */\r\n    public parse(parsedCamera: any): void {\r\n        const parsedInputs = parsedCamera.inputsmgr;\r\n        if (parsedInputs) {\r\n            this.clear();\r\n\r\n            for (const n in parsedInputs) {\r\n                const construct = (<any>CameraInputTypes)[n];\r\n                if (construct) {\r\n                    const parsedinput = parsedInputs[n];\r\n                    const input = SerializationHelper.Parse(\r\n                        () => {\r\n                            return new construct();\r\n                        },\r\n                        parsedinput,\r\n                        null\r\n                    );\r\n                    this.add(input as any);\r\n                }\r\n            }\r\n        } else {\r\n            //2016-03-08 this part is for managing backward compatibility\r\n            for (const n in this.attached) {\r\n                const construct = (<any>CameraInputTypes)[this.attached[n].getClassName()];\r\n                if (construct) {\r\n                    const input = SerializationHelper.Parse(\r\n                        () => {\r\n                            return new construct();\r\n                        },\r\n                        parsedCamera,\r\n                        null\r\n                    );\r\n                    this.remove(this.attached[n]);\r\n                    this.add(input as any);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}