{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\n\n/**\n * @hidden\n **/\nvar AlphaState =\n/** @class */\nfunction () {\n  /**\n   * Initializes the state.\n   */\n  function AlphaState() {\n    this._blendFunctionParameters = new Array(4);\n    this._blendEquationParameters = new Array(2);\n    this._blendConstants = new Array(4);\n    this._isBlendConstantsDirty = false;\n    this._alphaBlend = false;\n    this._isAlphaBlendDirty = false;\n    this._isBlendFunctionParametersDirty = false;\n    this._isBlendEquationParametersDirty = false;\n    this.reset();\n  }\n\n  Object.defineProperty(AlphaState.prototype, \"isDirty\", {\n    get: function get() {\n      return this._isAlphaBlendDirty || this._isBlendFunctionParametersDirty || this._isBlendEquationParametersDirty;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AlphaState.prototype, \"alphaBlend\", {\n    get: function get() {\n      return this._alphaBlend;\n    },\n    set: function set(value) {\n      if (this._alphaBlend === value) {\n        return;\n      }\n\n      this._alphaBlend = value;\n      this._isAlphaBlendDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  AlphaState.prototype.setAlphaBlendConstants = function (r, g, b, a) {\n    if (this._blendConstants[0] === r && this._blendConstants[1] === g && this._blendConstants[2] === b && this._blendConstants[3] === a) {\n      return;\n    }\n\n    this._blendConstants[0] = r;\n    this._blendConstants[1] = g;\n    this._blendConstants[2] = b;\n    this._blendConstants[3] = a;\n    this._isBlendConstantsDirty = true;\n  };\n\n  AlphaState.prototype.setAlphaBlendFunctionParameters = function (value0, value1, value2, value3) {\n    if (this._blendFunctionParameters[0] === value0 && this._blendFunctionParameters[1] === value1 && this._blendFunctionParameters[2] === value2 && this._blendFunctionParameters[3] === value3) {\n      return;\n    }\n\n    this._blendFunctionParameters[0] = value0;\n    this._blendFunctionParameters[1] = value1;\n    this._blendFunctionParameters[2] = value2;\n    this._blendFunctionParameters[3] = value3;\n    this._isBlendFunctionParametersDirty = true;\n  };\n\n  AlphaState.prototype.setAlphaEquationParameters = function (rgb, alpha) {\n    if (this._blendEquationParameters[0] === rgb && this._blendEquationParameters[1] === alpha) {\n      return;\n    }\n\n    this._blendEquationParameters[0] = rgb;\n    this._blendEquationParameters[1] = alpha;\n    this._isBlendEquationParametersDirty = true;\n  };\n\n  AlphaState.prototype.reset = function () {\n    this._alphaBlend = false;\n    this._blendFunctionParameters[0] = null;\n    this._blendFunctionParameters[1] = null;\n    this._blendFunctionParameters[2] = null;\n    this._blendFunctionParameters[3] = null;\n    this._blendEquationParameters[0] = null;\n    this._blendEquationParameters[1] = null;\n    this._blendConstants[0] = null;\n    this._blendConstants[1] = null;\n    this._blendConstants[2] = null;\n    this._blendConstants[3] = null;\n    this._isAlphaBlendDirty = true;\n    this._isBlendFunctionParametersDirty = false;\n    this._isBlendEquationParametersDirty = false;\n    this._isBlendConstantsDirty = false;\n  };\n\n  AlphaState.prototype.apply = function (gl) {\n    if (!this.isDirty) {\n      return;\n    } // Alpha blend\n\n\n    if (this._isAlphaBlendDirty) {\n      if (this._alphaBlend) {\n        gl.enable(gl.BLEND);\n      } else {\n        gl.disable(gl.BLEND);\n      }\n\n      this._isAlphaBlendDirty = false;\n    } // Alpha function\n\n\n    if (this._isBlendFunctionParametersDirty) {\n      gl.blendFuncSeparate(this._blendFunctionParameters[0], this._blendFunctionParameters[1], this._blendFunctionParameters[2], this._blendFunctionParameters[3]);\n      this._isBlendFunctionParametersDirty = false;\n    } // Alpha equation\n\n\n    if (this._isBlendEquationParametersDirty) {\n      gl.blendEquationSeparate(this._blendEquationParameters[0], this._blendEquationParameters[1]);\n      this._isBlendEquationParametersDirty = false;\n    } // Constants\n\n\n    if (this._isBlendConstantsDirty) {\n      gl.blendColor(this._blendConstants[0], this._blendConstants[1], this._blendConstants[2], this._blendConstants[3]);\n      this._isBlendConstantsDirty = false;\n    }\n  };\n\n  return AlphaState;\n}();\n\nexport { AlphaState };","map":{"version":3,"mappings":"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","names":["Array","reset","Object","AlphaState","_isAlphaBlendDirty","_isBlendFunctionParametersDirty","_isBlendEquationParametersDirty","_alphaBlend","value","r","g","b","a","_blendConstants","_isBlendConstantsDirty","value0","value1","value2","value3","_blendFunctionParameters","rgb","alpha","_blendEquationParameters","gl","isDirty","enable","BLEND","disable","blendFuncSeparate","blendEquationSeparate","blendColor"],"sourceRoot":"","sources":["../../../../../lts/core/generated/States/alphaCullingState.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\n\r\n/**\r\n * @hidden\r\n **/\r\nexport class AlphaState {\r\n    public _blendFunctionParameters = new Array<Nullable<number>>(4);\r\n    public _blendEquationParameters = new Array<Nullable<number>>(2);\r\n    public _blendConstants = new Array<Nullable<number>>(4);\r\n    public _isBlendConstantsDirty = false;\r\n\r\n    private _alphaBlend = false;\r\n    private _isAlphaBlendDirty = false;\r\n    private _isBlendFunctionParametersDirty = false;\r\n    private _isBlendEquationParametersDirty = false;\r\n\r\n    /**\r\n     * Initializes the state.\r\n     */\r\n    public constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    public get isDirty(): boolean {\r\n        return this._isAlphaBlendDirty || this._isBlendFunctionParametersDirty || this._isBlendEquationParametersDirty;\r\n    }\r\n\r\n    public get alphaBlend(): boolean {\r\n        return this._alphaBlend;\r\n    }\r\n\r\n    public set alphaBlend(value: boolean) {\r\n        if (this._alphaBlend === value) {\r\n            return;\r\n        }\r\n\r\n        this._alphaBlend = value;\r\n        this._isAlphaBlendDirty = true;\r\n    }\r\n\r\n    public setAlphaBlendConstants(r: number, g: number, b: number, a: number): void {\r\n        if (this._blendConstants[0] === r && this._blendConstants[1] === g && this._blendConstants[2] === b && this._blendConstants[3] === a) {\r\n            return;\r\n        }\r\n\r\n        this._blendConstants[0] = r;\r\n        this._blendConstants[1] = g;\r\n        this._blendConstants[2] = b;\r\n        this._blendConstants[3] = a;\r\n\r\n        this._isBlendConstantsDirty = true;\r\n    }\r\n\r\n    public setAlphaBlendFunctionParameters(value0: number, value1: number, value2: number, value3: number): void {\r\n        if (\r\n            this._blendFunctionParameters[0] === value0 &&\r\n            this._blendFunctionParameters[1] === value1 &&\r\n            this._blendFunctionParameters[2] === value2 &&\r\n            this._blendFunctionParameters[3] === value3\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        this._blendFunctionParameters[0] = value0;\r\n        this._blendFunctionParameters[1] = value1;\r\n        this._blendFunctionParameters[2] = value2;\r\n        this._blendFunctionParameters[3] = value3;\r\n\r\n        this._isBlendFunctionParametersDirty = true;\r\n    }\r\n\r\n    public setAlphaEquationParameters(rgb: number, alpha: number): void {\r\n        if (this._blendEquationParameters[0] === rgb && this._blendEquationParameters[1] === alpha) {\r\n            return;\r\n        }\r\n\r\n        this._blendEquationParameters[0] = rgb;\r\n        this._blendEquationParameters[1] = alpha;\r\n\r\n        this._isBlendEquationParametersDirty = true;\r\n    }\r\n\r\n    public reset() {\r\n        this._alphaBlend = false;\r\n        this._blendFunctionParameters[0] = null;\r\n        this._blendFunctionParameters[1] = null;\r\n        this._blendFunctionParameters[2] = null;\r\n        this._blendFunctionParameters[3] = null;\r\n\r\n        this._blendEquationParameters[0] = null;\r\n        this._blendEquationParameters[1] = null;\r\n\r\n        this._blendConstants[0] = null;\r\n        this._blendConstants[1] = null;\r\n        this._blendConstants[2] = null;\r\n        this._blendConstants[3] = null;\r\n\r\n        this._isAlphaBlendDirty = true;\r\n        this._isBlendFunctionParametersDirty = false;\r\n        this._isBlendEquationParametersDirty = false;\r\n        this._isBlendConstantsDirty = false;\r\n    }\r\n\r\n    public apply(gl: WebGLRenderingContext) {\r\n        if (!this.isDirty) {\r\n            return;\r\n        }\r\n\r\n        // Alpha blend\r\n        if (this._isAlphaBlendDirty) {\r\n            if (this._alphaBlend) {\r\n                gl.enable(gl.BLEND);\r\n            } else {\r\n                gl.disable(gl.BLEND);\r\n            }\r\n\r\n            this._isAlphaBlendDirty = false;\r\n        }\r\n\r\n        // Alpha function\r\n        if (this._isBlendFunctionParametersDirty) {\r\n            gl.blendFuncSeparate(\r\n                <number>this._blendFunctionParameters[0],\r\n                <number>this._blendFunctionParameters[1],\r\n                <number>this._blendFunctionParameters[2],\r\n                <number>this._blendFunctionParameters[3]\r\n            );\r\n            this._isBlendFunctionParametersDirty = false;\r\n        }\r\n\r\n        // Alpha equation\r\n        if (this._isBlendEquationParametersDirty) {\r\n            gl.blendEquationSeparate(this._blendEquationParameters[0]!, this._blendEquationParameters[1]!);\r\n            this._isBlendEquationParametersDirty = false;\r\n        }\r\n\r\n        // Constants\r\n        if (this._isBlendConstantsDirty) {\r\n            gl.blendColor(<number>this._blendConstants[0], <number>this._blendConstants[1], <number>this._blendConstants[2], <number>this._blendConstants[3]);\r\n            this._isBlendConstantsDirty = false;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}