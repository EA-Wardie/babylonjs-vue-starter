{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { __decorate, __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint.js\";\nimport { MaterialHelper } from \"../../../materialHelper.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { PBRBaseMaterial } from \"../../../PBR/pbrBaseMaterial.js\";\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator.js\";\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject.js\";\nimport { SheenBlock } from \"./sheenBlock.js\";\nimport { GetEnvironmentBRDFTexture } from \"../../../../Misc/brdfTextureTools.js\";\nimport { MaterialFlags } from \"../../../materialFlags.js\";\nimport { AnisotropyBlock } from \"./anisotropyBlock.js\";\nimport { ReflectionBlock } from \"./reflectionBlock.js\";\nimport { ClearCoatBlock } from \"./clearCoatBlock.js\";\nimport { IridescenceBlock } from \"./iridescenceBlock.js\";\nimport { SubSurfaceBlock } from \"./subSurfaceBlock.js\";\nimport { Color3, TmpColors } from \"../../../../Maths/math.color.js\";\nvar mapOutputToVariable = {\n  ambientClr: [\"finalAmbient\", \"\"],\n  diffuseDir: [\"finalDiffuse\", \"\"],\n  specularDir: [\"finalSpecularScaled\", \"!defined(UNLIT) && defined(SPECULARTERM)\"],\n  clearcoatDir: [\"finalClearCoatScaled\", \"!defined(UNLIT) && defined(CLEARCOAT)\"],\n  sheenDir: [\"finalSheenScaled\", \"!defined(UNLIT) && defined(SHEEN)\"],\n  diffuseInd: [\"finalIrradiance\", \"!defined(UNLIT) && defined(REFLECTION)\"],\n  specularInd: [\"finalRadianceScaled\", \"!defined(UNLIT) && defined(REFLECTION)\"],\n  clearcoatInd: [\"clearcoatOut.finalClearCoatRadianceScaled\", \"!defined(UNLIT) && defined(REFLECTION) && defined(CLEARCOAT)\"],\n  sheenInd: [\"sheenOut.finalSheenRadianceScaled\", \"!defined(UNLIT) && defined(REFLECTION) && defined(SHEEN) && defined(ENVIRONMENTBRDF)\"],\n  refraction: [\"subSurfaceOut.finalRefraction\", \"!defined(UNLIT) && defined(SS_REFRACTION)\"],\n  lighting: [\"finalColor.rgb\", \"\"],\n  shadow: [\"shadow\", \"\"],\n  alpha: [\"alpha\", \"\"]\n};\n/**\n * Block used to implement the PBR metallic/roughness model\n */\n\nvar PBRMetallicRoughnessBlock =\n/** @class */\nfunction (_super) {\n  __extends(PBRMetallicRoughnessBlock, _super);\n  /**\n   * Create a new ReflectionBlock\n   * @param name defines the block name\n   */\n\n\n  function PBRMetallicRoughnessBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.VertexAndFragment) || this;\n\n    _this._environmentBRDFTexture = null;\n    _this._metallicReflectanceColor = Color3.White();\n    _this._metallicF0Factor = 1;\n    /**\n     * Intensity of the direct lights e.g. the four lights available in your scene.\n     * This impacts both the direct diffuse and specular highlights.\n     */\n\n    _this.directIntensity = 1.0;\n    /**\n     * Intensity of the environment e.g. how much the environment will light the object\n     * either through harmonics for rough material or through the reflection for shiny ones.\n     */\n\n    _this.environmentIntensity = 1.0;\n    /**\n     * This is a special control allowing the reduction of the specular highlights coming from the\n     * four lights of the scene. Those highlights may not be needed in full environment lighting.\n     */\n\n    _this.specularIntensity = 1.0;\n    /**\n     * Defines the  falloff type used in this material.\n     * It by default is Physical.\n     */\n\n    _this.lightFalloff = 0;\n    /**\n     * Specifies that alpha test should be used\n     */\n\n    _this.useAlphaTest = false;\n    /**\n     * Defines the alpha limits in alpha test mode.\n     */\n\n    _this.alphaTestCutoff = 0.5;\n    /**\n     * Specifies that alpha blending should be used\n     */\n\n    _this.useAlphaBlending = false;\n    /**\n     * Specifies that the material will keeps the reflection highlights over a transparent surface (only the most luminous ones).\n     * A car glass is a good example of that. When the street lights reflects on it you can not see what is behind.\n     */\n\n    _this.useRadianceOverAlpha = true;\n    /**\n     * Specifies that the material will keeps the specular highlights over a transparent surface (only the most luminous ones).\n     * A car glass is a good example of that. When sun reflects on it you can not see what is behind.\n     */\n\n    _this.useSpecularOverAlpha = true;\n    /**\n     * Enables specular anti aliasing in the PBR shader.\n     * It will both interacts on the Geometry for analytical and IBL lighting.\n     * It also prefilter the roughness map based on the bump values.\n     */\n\n    _this.enableSpecularAntiAliasing = false;\n    /**\n     * Enables realtime filtering on the texture.\n     */\n\n    _this.realTimeFiltering = false;\n    /**\n     * Quality switch for realtime filtering\n     */\n\n    _this.realTimeFilteringQuality = 8;\n    /**\n     * Defines if the material uses energy conservation.\n     */\n\n    _this.useEnergyConservation = true;\n    /**\n     * This parameters will enable/disable radiance occlusion by preventing the radiance to lit\n     * too much the area relying on ambient texture to define their ambient occlusion.\n     */\n\n    _this.useRadianceOcclusion = true;\n    /**\n     * This parameters will enable/disable Horizon occlusion to prevent normal maps to look shiny when the normal\n     * makes the reflect vector face the model (under horizon).\n     */\n\n    _this.useHorizonOcclusion = true;\n    /**\n     * If set to true, no lighting calculations will be applied.\n     */\n\n    _this.unlit = false;\n    /**\n     * Force normal to face away from face.\n     */\n\n    _this.forceNormalForward = false;\n    /**\n     * Defines the material debug mode.\n     * It helps seeing only some components of the material while troubleshooting.\n     */\n\n    _this.debugMode = 0;\n    /**\n     * Specify from where on screen the debug mode should start.\n     * The value goes from -1 (full screen) to 1 (not visible)\n     * It helps with side by side comparison against the final render\n     * This defaults to 0\n     */\n\n    _this.debugLimit = 0;\n    /**\n     * As the default viewing range might not be enough (if the ambient is really small for instance)\n     * You can use the factor to better multiply the final value.\n     */\n\n    _this.debugFactor = 1;\n    _this._isUnique = true;\n\n    _this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Vertex);\n\n    _this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"view\", NodeMaterialBlockConnectionPointTypes.Matrix, false);\n\n    _this.registerInput(\"cameraPosition\", NodeMaterialBlockConnectionPointTypes.Vector3, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"perturbedNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"baseColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"metallic\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"roughness\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"ambientOcc\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"opacity\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"indexOfRefraction\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"ambientColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"reflection\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"reflection\", _this, NodeMaterialConnectionPointDirection.Input, ReflectionBlock, \"ReflectionBlock\"));\n\n    _this.registerInput(\"clearcoat\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"clearcoat\", _this, NodeMaterialConnectionPointDirection.Input, ClearCoatBlock, \"ClearCoatBlock\"));\n\n    _this.registerInput(\"sheen\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"sheen\", _this, NodeMaterialConnectionPointDirection.Input, SheenBlock, \"SheenBlock\"));\n\n    _this.registerInput(\"subsurface\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"subsurface\", _this, NodeMaterialConnectionPointDirection.Input, SubSurfaceBlock, \"SubSurfaceBlock\"));\n\n    _this.registerInput(\"anisotropy\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"anisotropy\", _this, NodeMaterialConnectionPointDirection.Input, AnisotropyBlock, \"AnisotropyBlock\"));\n\n    _this.registerInput(\"iridescence\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"iridescence\", _this, NodeMaterialConnectionPointDirection.Input, IridescenceBlock, \"IridescenceBlock\"));\n\n    _this.registerOutput(\"ambientClr\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"diffuseDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"specularDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"clearcoatDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"sheenDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"diffuseInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"specularInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"clearcoatInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"sheenInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"refraction\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"lighting\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"shadow\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"alpha\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\n\n    return _this;\n  }\n  /**\n   * Initialize the block and prepare the context for build\n   * @param state defines the state that will be used for the build\n   */\n\n\n  PBRMetallicRoughnessBlock.prototype.initialize = function (state) {\n    state._excludeVariableName(\"vLightingIntensity\");\n\n    state._excludeVariableName(\"geometricNormalW\");\n\n    state._excludeVariableName(\"normalW\");\n\n    state._excludeVariableName(\"faceNormal\");\n\n    state._excludeVariableName(\"albedoOpacityOut\");\n\n    state._excludeVariableName(\"surfaceAlbedo\");\n\n    state._excludeVariableName(\"alpha\");\n\n    state._excludeVariableName(\"aoOut\");\n\n    state._excludeVariableName(\"baseColor\");\n\n    state._excludeVariableName(\"reflectivityOut\");\n\n    state._excludeVariableName(\"microSurface\");\n\n    state._excludeVariableName(\"roughness\");\n\n    state._excludeVariableName(\"NdotVUnclamped\");\n\n    state._excludeVariableName(\"NdotV\");\n\n    state._excludeVariableName(\"alphaG\");\n\n    state._excludeVariableName(\"AARoughnessFactors\");\n\n    state._excludeVariableName(\"environmentBrdf\");\n\n    state._excludeVariableName(\"ambientMonochrome\");\n\n    state._excludeVariableName(\"seo\");\n\n    state._excludeVariableName(\"eho\");\n\n    state._excludeVariableName(\"environmentRadiance\");\n\n    state._excludeVariableName(\"irradianceVector\");\n\n    state._excludeVariableName(\"environmentIrradiance\");\n\n    state._excludeVariableName(\"diffuseBase\");\n\n    state._excludeVariableName(\"specularBase\");\n\n    state._excludeVariableName(\"preInfo\");\n\n    state._excludeVariableName(\"info\");\n\n    state._excludeVariableName(\"shadow\");\n\n    state._excludeVariableName(\"finalDiffuse\");\n\n    state._excludeVariableName(\"finalAmbient\");\n\n    state._excludeVariableName(\"ambientOcclusionForDirectDiffuse\");\n\n    state._excludeVariableName(\"finalColor\");\n\n    state._excludeVariableName(\"vClipSpacePosition\");\n\n    state._excludeVariableName(\"vDebugMode\");\n  };\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  PBRMetallicRoughnessBlock.prototype.getClassName = function () {\n    return \"PBRMetallicRoughnessBlock\";\n  };\n\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"worldPosition\", {\n    /**\n     * Gets the world position input component\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"worldNormal\", {\n    /**\n     * Gets the world normal input component\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"view\", {\n    /**\n     * Gets the view matrix parameter\n     */\n    get: function get() {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"cameraPosition\", {\n    /**\n     * Gets the camera position input component\n     */\n    get: function get() {\n      return this._inputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"perturbedNormal\", {\n    /**\n     * Gets the perturbed normal input component\n     */\n    get: function get() {\n      return this._inputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"baseColor\", {\n    /**\n     * Gets the base color input component\n     */\n    get: function get() {\n      return this._inputs[5];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"metallic\", {\n    /**\n     * Gets the metallic input component\n     */\n    get: function get() {\n      return this._inputs[6];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"roughness\", {\n    /**\n     * Gets the roughness input component\n     */\n    get: function get() {\n      return this._inputs[7];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"ambientOcc\", {\n    /**\n     * Gets the ambient occlusion input component\n     */\n    get: function get() {\n      return this._inputs[8];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"opacity\", {\n    /**\n     * Gets the opacity input component\n     */\n    get: function get() {\n      return this._inputs[9];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"indexOfRefraction\", {\n    /**\n     * Gets the index of refraction input component\n     */\n    get: function get() {\n      return this._inputs[10];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"ambientColor\", {\n    /**\n     * Gets the ambient color input component\n     */\n    get: function get() {\n      return this._inputs[11];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"reflection\", {\n    /**\n     * Gets the reflection object parameters\n     */\n    get: function get() {\n      return this._inputs[12];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"clearcoat\", {\n    /**\n     * Gets the clear coat object parameters\n     */\n    get: function get() {\n      return this._inputs[13];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"sheen\", {\n    /**\n     * Gets the sheen object parameters\n     */\n    get: function get() {\n      return this._inputs[14];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"subsurface\", {\n    /**\n     * Gets the sub surface object parameters\n     */\n    get: function get() {\n      return this._inputs[15];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"anisotropy\", {\n    /**\n     * Gets the anisotropy object parameters\n     */\n    get: function get() {\n      return this._inputs[16];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"iridescence\", {\n    /**\n     * Gets the iridescence object parameters\n     */\n    get: function get() {\n      return this._inputs[17];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"ambientClr\", {\n    /**\n     * Gets the ambient output component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"diffuseDir\", {\n    /**\n     * Gets the diffuse output component\n     */\n    get: function get() {\n      return this._outputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"specularDir\", {\n    /**\n     * Gets the specular output component\n     */\n    get: function get() {\n      return this._outputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"clearcoatDir\", {\n    /**\n     * Gets the clear coat output component\n     */\n    get: function get() {\n      return this._outputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"sheenDir\", {\n    /**\n     * Gets the sheen output component\n     */\n    get: function get() {\n      return this._outputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"diffuseInd\", {\n    /**\n     * Gets the indirect diffuse output component\n     */\n    get: function get() {\n      return this._outputs[5];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"specularInd\", {\n    /**\n     * Gets the indirect specular output component\n     */\n    get: function get() {\n      return this._outputs[6];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"clearcoatInd\", {\n    /**\n     * Gets the indirect clear coat output component\n     */\n    get: function get() {\n      return this._outputs[7];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"sheenInd\", {\n    /**\n     * Gets the indirect sheen output component\n     */\n    get: function get() {\n      return this._outputs[8];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"refraction\", {\n    /**\n     * Gets the refraction output component\n     */\n    get: function get() {\n      return this._outputs[9];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"lighting\", {\n    /**\n     * Gets the global lighting output component\n     */\n    get: function get() {\n      return this._outputs[10];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"shadow\", {\n    /**\n     * Gets the shadow output component\n     */\n    get: function get() {\n      return this._outputs[11];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"alpha\", {\n    /**\n     * Gets the alpha output component\n     */\n    get: function get() {\n      return this._outputs[12];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  PBRMetallicRoughnessBlock.prototype.autoConfigure = function (material) {\n    if (!this.cameraPosition.isConnected) {\n      var cameraPositionInput = material.getInputBlockByPredicate(function (b) {\n        return b.systemValue === NodeMaterialSystemValues.CameraPosition;\n      });\n\n      if (!cameraPositionInput) {\n        cameraPositionInput = new InputBlock(\"cameraPosition\");\n        cameraPositionInput.setAsSystemValue(NodeMaterialSystemValues.CameraPosition);\n      }\n\n      cameraPositionInput.output.connectTo(this.cameraPosition);\n    }\n\n    if (!this.view.isConnected) {\n      var viewInput = material.getInputBlockByPredicate(function (b) {\n        return b.systemValue === NodeMaterialSystemValues.View;\n      });\n\n      if (!viewInput) {\n        viewInput = new InputBlock(\"view\");\n        viewInput.setAsSystemValue(NodeMaterialSystemValues.View);\n      }\n\n      viewInput.output.connectTo(this.view);\n    }\n  };\n\n  PBRMetallicRoughnessBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    // General\n    defines.setValue(\"PBR\", true);\n    defines.setValue(\"METALLICWORKFLOW\", true);\n    defines.setValue(\"DEBUGMODE\", this.debugMode, true);\n    defines.setValue(\"NORMALXYSCALE\", true);\n    defines.setValue(\"BUMP\", this.perturbedNormal.isConnected, true);\n    defines.setValue(\"LODBASEDMICROSFURACE\", this._scene.getEngine().getCaps().textureLOD); // Albedo & Opacity\n\n    defines.setValue(\"ALBEDO\", false, true);\n    defines.setValue(\"OPACITY\", this.opacity.isConnected, true); // Ambient occlusion\n\n    defines.setValue(\"AMBIENT\", true, true);\n    defines.setValue(\"AMBIENTINGRAYSCALE\", false, true); // Reflectivity\n\n    defines.setValue(\"REFLECTIVITY\", false, true);\n    defines.setValue(\"AOSTOREINMETALMAPRED\", false, true);\n    defines.setValue(\"METALLNESSSTOREINMETALMAPBLUE\", false, true);\n    defines.setValue(\"ROUGHNESSSTOREINMETALMAPALPHA\", false, true);\n    defines.setValue(\"ROUGHNESSSTOREINMETALMAPGREEN\", false, true); // Lighting & colors\n\n    if (this.lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_STANDARD) {\n      defines.setValue(\"USEPHYSICALLIGHTFALLOFF\", false);\n      defines.setValue(\"USEGLTFLIGHTFALLOFF\", false);\n    } else if (this.lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_GLTF) {\n      defines.setValue(\"USEPHYSICALLIGHTFALLOFF\", false);\n      defines.setValue(\"USEGLTFLIGHTFALLOFF\", true);\n    } else {\n      defines.setValue(\"USEPHYSICALLIGHTFALLOFF\", true);\n      defines.setValue(\"USEGLTFLIGHTFALLOFF\", false);\n    } // Transparency\n\n\n    var alphaTestCutOffString = this.alphaTestCutoff.toString();\n    defines.setValue(\"ALPHABLEND\", this.useAlphaBlending, true);\n    defines.setValue(\"ALPHAFROMALBEDO\", false, true);\n    defines.setValue(\"ALPHATEST\", this.useAlphaTest, true);\n    defines.setValue(\"ALPHATESTVALUE\", alphaTestCutOffString.indexOf(\".\") < 0 ? alphaTestCutOffString + \".\" : alphaTestCutOffString, true);\n    defines.setValue(\"OPACITYRGB\", false, true); // Rendering\n\n    defines.setValue(\"RADIANCEOVERALPHA\", this.useRadianceOverAlpha, true);\n    defines.setValue(\"SPECULAROVERALPHA\", this.useSpecularOverAlpha, true);\n    defines.setValue(\"SPECULARAA\", this._scene.getEngine().getCaps().standardDerivatives && this.enableSpecularAntiAliasing, true);\n    defines.setValue(\"REALTIME_FILTERING\", this.realTimeFiltering, true);\n    var scene = mesh.getScene();\n\n    if (scene.getEngine()._features.needTypeSuffixInShaderConstants) {\n      defines.setValue(\"NUM_SAMPLES\", this.realTimeFilteringQuality + \"u\", true);\n    } else {\n      defines.setValue(\"NUM_SAMPLES\", \"\" + this.realTimeFilteringQuality, true);\n    } // Advanced\n\n\n    defines.setValue(\"BRDF_V_HEIGHT_CORRELATED\", true);\n    defines.setValue(\"MS_BRDF_ENERGY_CONSERVATION\", this.useEnergyConservation, true);\n    defines.setValue(\"RADIANCEOCCLUSION\", this.useRadianceOcclusion, true);\n    defines.setValue(\"HORIZONOCCLUSION\", this.useHorizonOcclusion, true);\n    defines.setValue(\"UNLIT\", this.unlit, true);\n    defines.setValue(\"FORCENORMALFORWARD\", this.forceNormalForward, true);\n\n    if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\n      defines.setValue(\"ENVIRONMENTBRDF\", true);\n      defines.setValue(\"ENVIRONMENTBRDF_RGBD\", this._environmentBRDFTexture.isRGBD, true);\n    } else {\n      defines.setValue(\"ENVIRONMENTBRDF\", false);\n      defines.setValue(\"ENVIRONMENTBRDF_RGBD\", false);\n    }\n\n    if (defines._areImageProcessingDirty && nodeMaterial.imageProcessingConfiguration) {\n      nodeMaterial.imageProcessingConfiguration.prepareDefines(defines);\n    }\n\n    if (!defines._areLightsDirty) {\n      return;\n    }\n\n    if (!this.light) {\n      // Lights\n      MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, true, nodeMaterial.maxSimultaneousLights);\n      defines._needNormals = true; // Multiview\n\n      MaterialHelper.PrepareDefinesForMultiview(scene, defines);\n    } else {\n      var state = {\n        needNormals: false,\n        needRebuild: false,\n        lightmapMode: false,\n        shadowEnabled: false,\n        specularEnabled: false\n      };\n      MaterialHelper.PrepareDefinesForLight(scene, mesh, this.light, this._lightId, defines, true, state);\n\n      if (state.needRebuild) {\n        defines.rebuild();\n      }\n    }\n  };\n\n  PBRMetallicRoughnessBlock.prototype.updateUniformsAndSamples = function (state, nodeMaterial, defines, uniformBuffers) {\n    for (var lightIndex = 0; lightIndex < nodeMaterial.maxSimultaneousLights; lightIndex++) {\n      if (!defines[\"LIGHT\" + lightIndex]) {\n        break;\n      }\n\n      var onlyUpdateBuffersList = state.uniforms.indexOf(\"vLightData\" + lightIndex) >= 0;\n      MaterialHelper.PrepareUniformsAndSamplersForLight(lightIndex, state.uniforms, state.samplers, defines[\"PROJECTEDLIGHTTEXTURE\" + lightIndex], uniformBuffers, onlyUpdateBuffersList);\n    }\n  };\n\n  PBRMetallicRoughnessBlock.prototype.isReady = function (mesh, nodeMaterial, defines) {\n    if (this._environmentBRDFTexture && !this._environmentBRDFTexture.isReady()) {\n      return false;\n    }\n\n    if (defines._areImageProcessingDirty && nodeMaterial.imageProcessingConfiguration) {\n      if (!nodeMaterial.imageProcessingConfiguration.isReady()) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  PBRMetallicRoughnessBlock.prototype.bind = function (effect, nodeMaterial, mesh) {\n    var _a, _b;\n\n    if (!mesh) {\n      return;\n    }\n\n    var scene = mesh.getScene();\n\n    if (!this.light) {\n      MaterialHelper.BindLights(scene, mesh, effect, true, nodeMaterial.maxSimultaneousLights);\n    } else {\n      MaterialHelper.BindLight(this.light, this._lightId, scene, effect, true);\n    }\n\n    effect.setTexture(this._environmentBrdfSamplerName, this._environmentBRDFTexture);\n    effect.setFloat2(\"vDebugMode\", this.debugLimit, this.debugFactor);\n    var ambientScene = this._scene.ambientColor;\n\n    if (ambientScene) {\n      effect.setColor3(\"ambientFromScene\", ambientScene);\n    }\n\n    var invertNormal = scene.useRightHandedSystem === (scene._mirroredCameraPosition != null);\n    effect.setFloat(this._invertNormalName, invertNormal ? -1 : 1);\n    effect.setFloat4(\"vLightingIntensity\", this.directIntensity, 1, this.environmentIntensity * this._scene.environmentIntensity, this.specularIntensity); // reflectivity bindings\n\n    var outsideIOR = 1; // consider air as clear coat and other layers would remap in the shader.\n\n    var ior = (_b = (_a = this.indexOfRefraction.connectInputBlock) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1.5; // We are here deriving our default reflectance from a common value for none metallic surface.\n    // Based of the schlick fresnel approximation model\n    // for dielectrics.\n\n    var f0 = Math.pow((ior - outsideIOR) / (ior + outsideIOR), 2); // Tweak the default F0 and F90 based on our given setup\n\n    this._metallicReflectanceColor.scaleToRef(f0 * this._metallicF0Factor, TmpColors.Color3[0]);\n\n    var metallicF90 = this._metallicF0Factor;\n    effect.setColor4(this._vMetallicReflectanceFactorsName, TmpColors.Color3[0], metallicF90);\n\n    if (nodeMaterial.imageProcessingConfiguration) {\n      nodeMaterial.imageProcessingConfiguration.bind(effect);\n    }\n  };\n\n  PBRMetallicRoughnessBlock.prototype._injectVertexCode = function (state) {\n    var _a, _b;\n\n    var worldPos = this.worldPosition;\n    var comments = \"//\".concat(this.name); // Declaration\n\n    if (!this.light) {\n      // Emit for all lights\n      state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightVxUboDeclaration\" : \"lightVxFragmentDeclaration\", comments, {\n        repeatKey: \"maxSimultaneousLights\"\n      });\n\n      this._lightId = 0;\n      state.sharedData.dynamicUniformBlocks.push(this);\n    } else {\n      this._lightId = (state.counters[\"lightCounter\"] !== undefined ? state.counters[\"lightCounter\"] : -1) + 1;\n      state.counters[\"lightCounter\"] = this._lightId;\n\n      state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightVxUboDeclaration\" : \"lightVxFragmentDeclaration\", comments, {\n        replaceStrings: [{\n          search: /{X}/g,\n          replace: this._lightId.toString()\n        }]\n      }, this._lightId.toString());\n    } // Inject code in vertex\n\n\n    var worldPosVaryingName = \"v_\" + worldPos.associatedVariableName;\n\n    if (state._emitVaryingFromString(worldPosVaryingName, \"vec4\")) {\n      state.compilationString += \"\".concat(worldPosVaryingName, \" = \").concat(worldPos.associatedVariableName, \";\\r\\n\");\n    }\n\n    var reflectionBlock = this.reflection.isConnected ? (_a = this.reflection.connectedPoint) === null || _a === void 0 ? void 0 : _a.ownerBlock : null;\n\n    if (reflectionBlock) {\n      reflectionBlock.viewConnectionPoint = this.view;\n    }\n\n    state.compilationString += (_b = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock.handleVertexSide(state)) !== null && _b !== void 0 ? _b : \"\";\n\n    state._emitUniformFromString(\"vDebugMode\", \"vec2\", \"defined(IGNORE) || DEBUGMODE > 0\");\n\n    state._emitUniformFromString(\"ambientFromScene\", \"vec3\");\n\n    if (state._emitVaryingFromString(\"vClipSpacePosition\", \"vec4\", \"defined(IGNORE) || DEBUGMODE > 0\")) {\n      state._injectAtEnd += \"#if DEBUGMODE > 0\\r\\n\";\n      state._injectAtEnd += \"vClipSpacePosition = gl_Position;\\r\\n\";\n      state._injectAtEnd += \"#endif\\r\\n\";\n    }\n\n    if (this.light) {\n      state.compilationString += state._emitCodeFromInclude(\"shadowsVertex\", comments, {\n        replaceStrings: [{\n          search: /{X}/g,\n          replace: this._lightId.toString()\n        }, {\n          search: /worldPos/g,\n          replace: worldPos.associatedVariableName\n        }]\n      });\n    } else {\n      state.compilationString += \"vec4 worldPos = \".concat(worldPos.associatedVariableName, \";\\r\\n\");\n\n      if (this.view.isConnected) {\n        state.compilationString += \"mat4 view = \".concat(this.view.associatedVariableName, \";\\r\\n\");\n      }\n\n      state.compilationString += state._emitCodeFromInclude(\"shadowsVertex\", comments, {\n        repeatKey: \"maxSimultaneousLights\"\n      });\n    }\n  };\n\n  PBRMetallicRoughnessBlock.prototype._getAlbedoOpacityCode = function () {\n    var code = \"albedoOpacityOutParams albedoOpacityOut;\\r\\n\";\n    var albedoColor = this.baseColor.isConnected ? this.baseColor.associatedVariableName : \"vec3(1.)\";\n    var opacity = this.opacity.isConnected ? this.opacity.associatedVariableName : \"1.\";\n    code += \"albedoOpacityBlock(\\n                vec4(\".concat(albedoColor, \", 1.),\\n            #ifdef ALBEDO\\n                vec4(1.),\\n                vec2(1., 1.),\\n            #endif\\n            #ifdef OPACITY\\n                vec4(\").concat(opacity, \"),\\n                vec2(1., 1.),\\n            #endif\\n                albedoOpacityOut\\n            );\\n\\n            vec3 surfaceAlbedo = albedoOpacityOut.surfaceAlbedo;\\n            float alpha = albedoOpacityOut.alpha;\\r\\n\");\n    return code;\n  };\n\n  PBRMetallicRoughnessBlock.prototype._getAmbientOcclusionCode = function () {\n    var code = \"ambientOcclusionOutParams aoOut;\\r\\n\";\n    var ao = this.ambientOcc.isConnected ? this.ambientOcc.associatedVariableName : \"1.\";\n    code += \"ambientOcclusionBlock(\\n            #ifdef AMBIENT\\n                vec3(\".concat(ao, \"),\\n                vec4(0., 1.0, 1.0, 0.),\\n            #endif\\n                aoOut\\n            );\\r\\n\");\n    return code;\n  };\n\n  PBRMetallicRoughnessBlock.prototype._getReflectivityCode = function (state) {\n    var code = \"reflectivityOutParams reflectivityOut;\\r\\n\";\n    var aoIntensity = \"1.\";\n    this._vMetallicReflectanceFactorsName = state._getFreeVariableName(\"vMetallicReflectanceFactors\");\n\n    state._emitUniformFromString(this._vMetallicReflectanceFactorsName, \"vec4\");\n\n    code += \"vec3 baseColor = surfaceAlbedo;\\n\\n            reflectivityBlock(\\n                vec4(\".concat(this.metallic.associatedVariableName, \", \").concat(this.roughness.associatedVariableName, \", 0., 0.),\\n            #ifdef METALLICWORKFLOW\\n                surfaceAlbedo,\\n                \").concat(this._vMetallicReflectanceFactorsName, \",\\n            #endif\\n            #ifdef REFLECTIVITY\\n                vec3(0., 0., \").concat(aoIntensity, \"),\\n                vec4(1.),\\n            #endif\\n            #if defined(METALLICWORKFLOW) && defined(REFLECTIVITY)  && defined(AOSTOREINMETALMAPRED)\\n                aoOut.ambientOcclusionColor,\\n            #endif\\n            #ifdef MICROSURFACEMAP\\n                microSurfaceTexel, <== not handled!\\n            #endif\\n                reflectivityOut\\n            );\\n\\n            float microSurface = reflectivityOut.microSurface;\\n            float roughness = reflectivityOut.roughness;\\n\\n            #ifdef METALLICWORKFLOW\\n                surfaceAlbedo = reflectivityOut.surfaceAlbedo;\\n            #endif\\n            #if defined(METALLICWORKFLOW) && defined(REFLECTIVITY) && defined(AOSTOREINMETALMAPRED)\\n                aoOut.ambientOcclusionColor = reflectivityOut.ambientOcclusionColor;\\n            #endif\\r\\n\");\n    return code;\n  };\n\n  PBRMetallicRoughnessBlock.prototype._buildBlock = function (state) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16;\n\n    _super.prototype._buildBlock.call(this, state);\n\n    this._scene = state.sharedData.scene;\n\n    if (!this._environmentBRDFTexture) {\n      this._environmentBRDFTexture = GetEnvironmentBRDFTexture(this._scene);\n    }\n\n    var reflectionBlock = this.reflection.isConnected ? (_a = this.reflection.connectedPoint) === null || _a === void 0 ? void 0 : _a.ownerBlock : null;\n\n    if (reflectionBlock) {\n      // Need those variables to be setup when calling _injectVertexCode\n      reflectionBlock.worldPositionConnectionPoint = this.worldPosition;\n      reflectionBlock.cameraPositionConnectionPoint = this.cameraPosition;\n      reflectionBlock.worldNormalConnectionPoint = this.worldNormal;\n    }\n\n    if (state.target !== NodeMaterialBlockTargets.Fragment) {\n      // Vertex\n      this._injectVertexCode(state);\n\n      return this;\n    } // Fragment\n\n\n    state.sharedData.forcedBindableBlocks.push(this);\n    state.sharedData.blocksWithDefines.push(this);\n    state.sharedData.blockingBlocks.push(this);\n    var comments = \"//\".concat(this.name);\n    var worldPosVarName = \"v_\" + this.worldPosition.associatedVariableName;\n    var normalShading = this.perturbedNormal;\n    this._environmentBrdfSamplerName = state._getFreeVariableName(\"environmentBrdfSampler\");\n\n    state._emit2DSampler(this._environmentBrdfSamplerName);\n\n    state.sharedData.hints.needAlphaBlending = state.sharedData.hints.needAlphaBlending || this.useAlphaBlending;\n    state.sharedData.hints.needAlphaTesting = state.sharedData.hints.needAlphaTesting || this.useAlphaTest;\n\n    state._emitExtension(\"lod\", \"#extension GL_EXT_shader_texture_lod : enable\", \"defined(LODBASEDMICROSFURACE)\");\n\n    state._emitExtension(\"derivatives\", \"#extension GL_OES_standard_derivatives : enable\"); // Image processing uniforms\n\n\n    state.uniforms.push(\"exposureLinear\");\n    state.uniforms.push(\"contrast\");\n    state.uniforms.push(\"vInverseScreenSize\");\n    state.uniforms.push(\"vignetteSettings1\");\n    state.uniforms.push(\"vignetteSettings2\");\n    state.uniforms.push(\"vCameraColorCurveNegative\");\n    state.uniforms.push(\"vCameraColorCurveNeutral\");\n    state.uniforms.push(\"vCameraColorCurvePositive\");\n    state.uniforms.push(\"txColorTransform\");\n    state.uniforms.push(\"colorTransformSettings\"); //\n    // Includes\n    //\n\n    if (!this.light) {\n      // Emit for all lights\n      state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightUboDeclaration\" : \"lightFragmentDeclaration\", comments, {\n        repeatKey: \"maxSimultaneousLights\"\n      });\n    } else {\n      state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightUboDeclaration\" : \"lightFragmentDeclaration\", comments, {\n        replaceStrings: [{\n          search: /{X}/g,\n          replace: this._lightId.toString()\n        }]\n      }, this._lightId.toString());\n    }\n\n    state._emitFunctionFromInclude(\"helperFunctions\", comments);\n\n    state._emitFunctionFromInclude(\"importanceSampling\", comments);\n\n    state._emitFunctionFromInclude(\"pbrHelperFunctions\", comments);\n\n    state._emitFunctionFromInclude(\"imageProcessingDeclaration\", comments);\n\n    state._emitFunctionFromInclude(\"imageProcessingFunctions\", comments);\n\n    state._emitFunctionFromInclude(\"shadowsFragmentFunctions\", comments, {\n      replaceStrings: [{\n        search: /vPositionW/g,\n        replace: worldPosVarName + \".xyz\"\n      }]\n    });\n\n    state._emitFunctionFromInclude(\"pbrDirectLightingSetupFunctions\", comments, {\n      replaceStrings: [{\n        search: /vPositionW/g,\n        replace: worldPosVarName + \".xyz\"\n      }]\n    });\n\n    state._emitFunctionFromInclude(\"pbrDirectLightingFalloffFunctions\", comments);\n\n    state._emitFunctionFromInclude(\"pbrBRDFFunctions\", comments, {\n      replaceStrings: [{\n        search: /REFLECTIONMAP_SKYBOX/g,\n        replace: (_b = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _b !== void 0 ? _b : \"REFLECTIONMAP_SKYBOX\"\n      }]\n    });\n\n    state._emitFunctionFromInclude(\"hdrFilteringFunctions\", comments);\n\n    state._emitFunctionFromInclude(\"pbrDirectLightingFunctions\", comments, {\n      replaceStrings: [{\n        search: /vPositionW/g,\n        replace: worldPosVarName + \".xyz\"\n      }]\n    });\n\n    state._emitFunctionFromInclude(\"pbrIBLFunctions\", comments);\n\n    state._emitFunctionFromInclude(\"pbrBlockAlbedoOpacity\", comments);\n\n    state._emitFunctionFromInclude(\"pbrBlockReflectivity\", comments);\n\n    state._emitFunctionFromInclude(\"pbrBlockAmbientOcclusion\", comments);\n\n    state._emitFunctionFromInclude(\"pbrBlockAlphaFresnel\", comments);\n\n    state._emitFunctionFromInclude(\"pbrBlockAnisotropic\", comments); //\n    // code\n    //\n\n\n    state._emitUniformFromString(\"vLightingIntensity\", \"vec4\"); // _____________________________ Geometry Information ____________________________\n\n\n    this._vNormalWName = state._getFreeVariableName(\"vNormalW\");\n    state.compilationString += \"vec4 \".concat(this._vNormalWName, \" = normalize(\").concat(this.worldNormal.associatedVariableName, \");\\r\\n\");\n\n    if (state._registerTempVariable(\"viewDirectionW\")) {\n      state.compilationString += \"vec3 viewDirectionW = normalize(\".concat(this.cameraPosition.associatedVariableName, \" - \").concat(worldPosVarName, \".xyz);\\r\\n\");\n    }\n\n    state.compilationString += \"vec3 geometricNormalW = \".concat(this._vNormalWName, \".xyz;\\r\\n\");\n    state.compilationString += \"vec3 normalW = \".concat(normalShading.isConnected ? \"normalize(\" + normalShading.associatedVariableName + \".xyz)\" : \"geometricNormalW\", \";\\r\\n\");\n    this._invertNormalName = state._getFreeVariableName(\"invertNormal\");\n\n    state._emitUniformFromString(this._invertNormalName, \"float\");\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockNormalFinal\", comments, {\n      replaceStrings: [{\n        search: /vPositionW/g,\n        replace: worldPosVarName + \".xyz\"\n      }, {\n        search: /vEyePosition.w/g,\n        replace: this._invertNormalName\n      }]\n    }); // _____________________________ Albedo & Opacity ______________________________\n\n    state.compilationString += this._getAlbedoOpacityCode();\n    state.compilationString += state._emitCodeFromInclude(\"depthPrePass\", comments); // _____________________________ AO  _______________________________\n\n    state.compilationString += this._getAmbientOcclusionCode();\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockLightmapInit\", comments); // _____________________________ UNLIT  _______________________________\n\n    state.compilationString += \"#ifdef UNLIT\\n                vec3 diffuseBase = vec3(1., 1., 1.);\\n            #else\\r\\n\"; // _____________________________ Reflectivity _______________________________\n\n    state.compilationString += this._getReflectivityCode(state); // _____________________________ Geometry info _________________________________\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockGeometryInfo\", comments, {\n      replaceStrings: [{\n        search: /REFLECTIONMAP_SKYBOX/g,\n        replace: (_c = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _c !== void 0 ? _c : \"REFLECTIONMAP_SKYBOX\"\n      }, {\n        search: /REFLECTIONMAP_3D/g,\n        replace: (_d = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _d !== void 0 ? _d : \"REFLECTIONMAP_3D\"\n      }]\n    }); // _____________________________ Anisotropy _______________________________________\n\n    var anisotropyBlock = this.anisotropy.isConnected ? (_e = this.anisotropy.connectedPoint) === null || _e === void 0 ? void 0 : _e.ownerBlock : null;\n\n    if (anisotropyBlock) {\n      anisotropyBlock.worldPositionConnectionPoint = this.worldPosition;\n      anisotropyBlock.worldNormalConnectionPoint = this.worldNormal;\n      state.compilationString += anisotropyBlock.getCode(state, !this.perturbedNormal.isConnected);\n    } // _____________________________ Reflection _______________________________________\n\n\n    if (reflectionBlock && reflectionBlock.hasTexture) {\n      state.compilationString += reflectionBlock.getCode(state, anisotropyBlock ? \"anisotropicOut.anisotropicNormal\" : \"normalW\");\n    }\n\n    state._emitFunctionFromInclude(\"pbrBlockReflection\", comments, {\n      replaceStrings: [{\n        search: /computeReflectionCoords/g,\n        replace: \"computeReflectionCoordsPBR\"\n      }, {\n        search: /REFLECTIONMAP_3D/g,\n        replace: (_f = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _f !== void 0 ? _f : \"REFLECTIONMAP_3D\"\n      }, {\n        search: /REFLECTIONMAP_OPPOSITEZ/g,\n        replace: (_g = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineOppositeZ) !== null && _g !== void 0 ? _g : \"REFLECTIONMAP_OPPOSITEZ\"\n      }, {\n        search: /REFLECTIONMAP_PROJECTION/g,\n        replace: (_h = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineProjectionName) !== null && _h !== void 0 ? _h : \"REFLECTIONMAP_PROJECTION\"\n      }, {\n        search: /REFLECTIONMAP_SKYBOX/g,\n        replace: (_j = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _j !== void 0 ? _j : \"REFLECTIONMAP_SKYBOX\"\n      }, {\n        search: /LODINREFLECTIONALPHA/g,\n        replace: (_k = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLODReflectionAlpha) !== null && _k !== void 0 ? _k : \"LODINREFLECTIONALPHA\"\n      }, {\n        search: /LINEARSPECULARREFLECTION/g,\n        replace: (_l = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLinearSpecularReflection) !== null && _l !== void 0 ? _l : \"LINEARSPECULARREFLECTION\"\n      }, {\n        search: /vReflectionFilteringInfo/g,\n        replace: (_m = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._vReflectionFilteringInfoName) !== null && _m !== void 0 ? _m : \"vReflectionFilteringInfo\"\n      }]\n    }); // ___________________ Compute Reflectance aka R0 F0 info _________________________\n\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockReflectance0\", comments, {\n      replaceStrings: [{\n        search: /metallicReflectanceFactors/g,\n        replace: this._vMetallicReflectanceFactorsName\n      }]\n    }); // ________________________________ Sheen ______________________________\n\n    var sheenBlock = this.sheen.isConnected ? (_o = this.sheen.connectedPoint) === null || _o === void 0 ? void 0 : _o.ownerBlock : null;\n\n    if (sheenBlock) {\n      state.compilationString += sheenBlock.getCode(reflectionBlock);\n    }\n\n    state._emitFunctionFromInclude(\"pbrBlockSheen\", comments, {\n      replaceStrings: [{\n        search: /REFLECTIONMAP_3D/g,\n        replace: (_p = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _p !== void 0 ? _p : \"REFLECTIONMAP_3D\"\n      }, {\n        search: /REFLECTIONMAP_SKYBOX/g,\n        replace: (_q = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _q !== void 0 ? _q : \"REFLECTIONMAP_SKYBOX\"\n      }, {\n        search: /LODINREFLECTIONALPHA/g,\n        replace: (_r = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLODReflectionAlpha) !== null && _r !== void 0 ? _r : \"LODINREFLECTIONALPHA\"\n      }, {\n        search: /LINEARSPECULARREFLECTION/g,\n        replace: (_s = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLinearSpecularReflection) !== null && _s !== void 0 ? _s : \"LINEARSPECULARREFLECTION\"\n      }]\n    }); // _____________________________ Iridescence _______________________________\n\n\n    var iridescenceBlock = this.iridescence.isConnected ? (_t = this.iridescence.connectedPoint) === null || _t === void 0 ? void 0 : _t.ownerBlock : null;\n    state.compilationString += IridescenceBlock.GetCode(iridescenceBlock);\n\n    state._emitFunctionFromInclude(\"pbrBlockIridescence\", comments, {\n      replaceStrings: []\n    }); // _____________________________ Clear Coat ____________________________\n\n\n    var clearcoatBlock = this.clearcoat.isConnected ? (_u = this.clearcoat.connectedPoint) === null || _u === void 0 ? void 0 : _u.ownerBlock : null;\n    var generateTBNSpace = !this.perturbedNormal.isConnected && !this.anisotropy.isConnected;\n    var isTangentConnectedToPerturbNormal = this.perturbedNormal.isConnected && ((_w = ((_v = this.perturbedNormal.connectedPoint) === null || _v === void 0 ? void 0 : _v.ownerBlock).worldTangent) === null || _w === void 0 ? void 0 : _w.isConnected);\n    var isTangentConnectedToAnisotropy = this.anisotropy.isConnected && ((_x = this.anisotropy.connectedPoint) === null || _x === void 0 ? void 0 : _x.ownerBlock).worldTangent.isConnected;\n    var vTBNAvailable = isTangentConnectedToPerturbNormal || !this.perturbedNormal.isConnected && isTangentConnectedToAnisotropy;\n    state.compilationString += ClearCoatBlock.GetCode(state, clearcoatBlock, reflectionBlock, worldPosVarName, generateTBNSpace, vTBNAvailable, this.worldNormal.associatedVariableName);\n\n    if (generateTBNSpace) {\n      vTBNAvailable = (_y = clearcoatBlock === null || clearcoatBlock === void 0 ? void 0 : clearcoatBlock.worldTangent.isConnected) !== null && _y !== void 0 ? _y : false;\n    }\n\n    state._emitFunctionFromInclude(\"pbrBlockClearcoat\", comments, {\n      replaceStrings: [{\n        search: /computeReflectionCoords/g,\n        replace: \"computeReflectionCoordsPBR\"\n      }, {\n        search: /REFLECTIONMAP_3D/g,\n        replace: (_z = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _z !== void 0 ? _z : \"REFLECTIONMAP_3D\"\n      }, {\n        search: /REFLECTIONMAP_OPPOSITEZ/g,\n        replace: (_0 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineOppositeZ) !== null && _0 !== void 0 ? _0 : \"REFLECTIONMAP_OPPOSITEZ\"\n      }, {\n        search: /REFLECTIONMAP_PROJECTION/g,\n        replace: (_1 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineProjectionName) !== null && _1 !== void 0 ? _1 : \"REFLECTIONMAP_PROJECTION\"\n      }, {\n        search: /REFLECTIONMAP_SKYBOX/g,\n        replace: (_2 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _2 !== void 0 ? _2 : \"REFLECTIONMAP_SKYBOX\"\n      }, {\n        search: /LODINREFLECTIONALPHA/g,\n        replace: (_3 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLODReflectionAlpha) !== null && _3 !== void 0 ? _3 : \"LODINREFLECTIONALPHA\"\n      }, {\n        search: /LINEARSPECULARREFLECTION/g,\n        replace: (_4 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLinearSpecularReflection) !== null && _4 !== void 0 ? _4 : \"LINEARSPECULARREFLECTION\"\n      }, {\n        search: /defined\\(TANGENT\\)/g,\n        replace: vTBNAvailable ? \"defined(TANGENT)\" : \"defined(IGNORE)\"\n      }]\n    }); // _________________________ Specular Environment Reflectance __________________________\n\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockReflectance\", comments, {\n      replaceStrings: [{\n        search: /REFLECTIONMAP_SKYBOX/g,\n        replace: (_5 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _5 !== void 0 ? _5 : \"REFLECTIONMAP_SKYBOX\"\n      }, {\n        search: /REFLECTIONMAP_3D/g,\n        replace: (_6 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _6 !== void 0 ? _6 : \"REFLECTIONMAP_3D\"\n      }]\n    }); // ___________________________________ SubSurface ______________________________________\n\n    var subsurfaceBlock = this.subsurface.isConnected ? (_7 = this.subsurface.connectedPoint) === null || _7 === void 0 ? void 0 : _7.ownerBlock : null;\n    var refractionBlock = this.subsurface.isConnected ? (_9 = ((_8 = this.subsurface.connectedPoint) === null || _8 === void 0 ? void 0 : _8.ownerBlock).refraction.connectedPoint) === null || _9 === void 0 ? void 0 : _9.ownerBlock : null;\n\n    if (refractionBlock) {\n      refractionBlock.viewConnectionPoint = this.view;\n      refractionBlock.indexOfRefractionConnectionPoint = this.indexOfRefraction;\n    }\n\n    state.compilationString += SubSurfaceBlock.GetCode(state, subsurfaceBlock, reflectionBlock, worldPosVarName);\n\n    state._emitFunctionFromInclude(\"pbrBlockSubSurface\", comments, {\n      replaceStrings: [{\n        search: /REFLECTIONMAP_3D/g,\n        replace: (_10 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _10 !== void 0 ? _10 : \"REFLECTIONMAP_3D\"\n      }, {\n        search: /REFLECTIONMAP_OPPOSITEZ/g,\n        replace: (_11 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineOppositeZ) !== null && _11 !== void 0 ? _11 : \"REFLECTIONMAP_OPPOSITEZ\"\n      }, {\n        search: /REFLECTIONMAP_PROJECTION/g,\n        replace: (_12 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineProjectionName) !== null && _12 !== void 0 ? _12 : \"REFLECTIONMAP_PROJECTION\"\n      }, {\n        search: /SS_REFRACTIONMAP_3D/g,\n        replace: (_13 = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._define3DName) !== null && _13 !== void 0 ? _13 : \"SS_REFRACTIONMAP_3D\"\n      }, {\n        search: /SS_LODINREFRACTIONALPHA/g,\n        replace: (_14 = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._defineLODRefractionAlpha) !== null && _14 !== void 0 ? _14 : \"SS_LODINREFRACTIONALPHA\"\n      }, {\n        search: /SS_LINEARSPECULARREFRACTION/g,\n        replace: (_15 = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._defineLinearSpecularRefraction) !== null && _15 !== void 0 ? _15 : \"SS_LINEARSPECULARREFRACTION\"\n      }, {\n        search: /SS_REFRACTIONMAP_OPPOSITEZ/g,\n        replace: (_16 = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._defineOppositeZ) !== null && _16 !== void 0 ? _16 : \"SS_REFRACTIONMAP_OPPOSITEZ\"\n      }]\n    }); // _____________________________ Direct Lighting Info __________________________________\n\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockDirectLighting\", comments);\n\n    if (this.light) {\n      state.compilationString += state._emitCodeFromInclude(\"lightFragment\", comments, {\n        replaceStrings: [{\n          search: /{X}/g,\n          replace: this._lightId.toString()\n        }]\n      });\n    } else {\n      state.compilationString += state._emitCodeFromInclude(\"lightFragment\", comments, {\n        repeatKey: \"maxSimultaneousLights\"\n      });\n    } // _____________________________ Compute Final Lit Components ________________________\n\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockFinalLitComponents\", comments); // _____________________________ UNLIT (2) ________________________\n\n    state.compilationString += \"#endif\\r\\n\"; // UNLIT\n    // _____________________________ Compute Final Unlit Components ________________________\n\n    var aoColor = this.ambientColor.isConnected ? this.ambientColor.associatedVariableName : \"vec3(0., 0., 0.)\";\n    var aoDirectLightIntensity = PBRBaseMaterial.DEFAULT_AO_ON_ANALYTICAL_LIGHTS.toString();\n\n    if (aoDirectLightIntensity.indexOf(\".\") === -1) {\n      aoDirectLightIntensity += \".\";\n    }\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockFinalUnlitComponents\", comments, {\n      replaceStrings: [{\n        search: /vec3 finalEmissive[\\s\\S]*?finalEmissive\\*=vLightingIntensity\\.y;/g,\n        replace: \"\"\n      }, {\n        search: /vAmbientColor/g,\n        replace: aoColor + \" * ambientFromScene\"\n      }, {\n        search: /vAmbientInfos\\.w/g,\n        replace: aoDirectLightIntensity\n      }]\n    }); // _____________________________ Output Final Color Composition ________________________\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockFinalColorComposition\", comments, {\n      replaceStrings: [{\n        search: /finalEmissive/g,\n        replace: \"vec3(0.)\"\n      }]\n    }); // _____________________________ Apply image processing ________________________\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockImageProcessing\", comments, {\n      replaceStrings: [{\n        search: /visibility/g,\n        replace: \"1.\"\n      }]\n    }); // _____________________________ Generate debug code ________________________\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrDebug\", comments, {\n      replaceStrings: [{\n        search: /vNormalW/g,\n        replace: this._vNormalWName\n      }, {\n        search: /vPositionW/g,\n        replace: worldPosVarName\n      }, {\n        search: /albedoTexture\\.rgb;/g,\n        replace: \"vec3(1.);\\r\\ngl_FragColor.rgb = toGammaSpace(gl_FragColor.rgb);\\r\\n\"\n      }]\n    }); // _____________________________ Generate end points ________________________\n\n    for (var _i = 0, _17 = this._outputs; _i < _17.length; _i++) {\n      var output = _17[_i];\n\n      if (output.hasEndpoints) {\n        var remap = mapOutputToVariable[output.name];\n\n        if (remap) {\n          var varName = remap[0],\n              conditions = remap[1];\n\n          if (conditions) {\n            state.compilationString += \"#if \".concat(conditions, \"\\r\\n\");\n          }\n\n          state.compilationString += \"\".concat(this._declareOutput(output, state), \" = \").concat(varName, \";\\r\\n\");\n\n          if (conditions) {\n            state.compilationString += \"#else\\r\\n\";\n            state.compilationString += \"\".concat(this._declareOutput(output, state), \" = vec3(0.);\\r\\n\");\n            state.compilationString += \"#endif\\r\\n\";\n          }\n        } else {\n          console.error(\"There's no remapping for the \".concat(output.name, \" end point! No code generated\"));\n        }\n      }\n    }\n\n    return this;\n  };\n\n  PBRMetallicRoughnessBlock.prototype._dumpPropertiesCode = function () {\n    var codeString = _super.prototype._dumpPropertiesCode.call(this);\n\n    codeString += \"\".concat(this._codeVariableName, \".lightFalloff = \").concat(this.lightFalloff, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".useAlphaTest = \").concat(this.useAlphaTest, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".alphaTestCutoff = \").concat(this.alphaTestCutoff, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".useAlphaBlending = \").concat(this.useAlphaBlending, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".useRadianceOverAlpha = \").concat(this.useRadianceOverAlpha, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".useSpecularOverAlpha = \").concat(this.useSpecularOverAlpha, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".enableSpecularAntiAliasing = \").concat(this.enableSpecularAntiAliasing, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".realTimeFiltering = \").concat(this.realTimeFiltering, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".realTimeFilteringQuality = \").concat(this.realTimeFilteringQuality, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".useEnergyConservation = \").concat(this.useEnergyConservation, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".useRadianceOcclusion = \").concat(this.useRadianceOcclusion, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".useHorizonOcclusion = \").concat(this.useHorizonOcclusion, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".unlit = \").concat(this.unlit, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".forceNormalForward = \").concat(this.forceNormalForward, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".debugMode = \").concat(this.debugMode, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".debugLimit = \").concat(this.debugLimit, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".debugFactor = \").concat(this.debugFactor, \";\\r\\n\");\n    return codeString;\n  };\n\n  PBRMetallicRoughnessBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    if (this.light) {\n      serializationObject.lightId = this.light.id;\n    }\n\n    serializationObject.lightFalloff = this.lightFalloff;\n    serializationObject.useAlphaTest = this.useAlphaTest;\n    serializationObject.alphaTestCutoff = this.alphaTestCutoff;\n    serializationObject.useAlphaBlending = this.useAlphaBlending;\n    serializationObject.useRadianceOverAlpha = this.useRadianceOverAlpha;\n    serializationObject.useSpecularOverAlpha = this.useSpecularOverAlpha;\n    serializationObject.enableSpecularAntiAliasing = this.enableSpecularAntiAliasing;\n    serializationObject.realTimeFiltering = this.realTimeFiltering;\n    serializationObject.realTimeFilteringQuality = this.realTimeFilteringQuality;\n    serializationObject.useEnergyConservation = this.useEnergyConservation;\n    serializationObject.useRadianceOcclusion = this.useRadianceOcclusion;\n    serializationObject.useHorizonOcclusion = this.useHorizonOcclusion;\n    serializationObject.unlit = this.unlit;\n    serializationObject.forceNormalForward = this.forceNormalForward;\n    serializationObject.debugMode = this.debugMode;\n    serializationObject.debugLimit = this.debugLimit;\n    serializationObject.debugFactor = this.debugFactor;\n    return serializationObject;\n  };\n\n  PBRMetallicRoughnessBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    var _a, _b;\n\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    if (serializationObject.lightId) {\n      this.light = scene.getLightById(serializationObject.lightId);\n    }\n\n    this.lightFalloff = (_a = serializationObject.lightFalloff) !== null && _a !== void 0 ? _a : 0;\n    this.useAlphaTest = serializationObject.useAlphaTest;\n    this.alphaTestCutoff = serializationObject.alphaTestCutoff;\n    this.useAlphaBlending = serializationObject.useAlphaBlending;\n    this.useRadianceOverAlpha = serializationObject.useRadianceOverAlpha;\n    this.useSpecularOverAlpha = serializationObject.useSpecularOverAlpha;\n    this.enableSpecularAntiAliasing = serializationObject.enableSpecularAntiAliasing;\n    this.realTimeFiltering = !!serializationObject.realTimeFiltering;\n    this.realTimeFilteringQuality = (_b = serializationObject.realTimeFilteringQuality) !== null && _b !== void 0 ? _b : 8;\n    this.useEnergyConservation = serializationObject.useEnergyConservation;\n    this.useRadianceOcclusion = serializationObject.useRadianceOcclusion;\n    this.useHorizonOcclusion = serializationObject.useHorizonOcclusion;\n    this.unlit = serializationObject.unlit;\n    this.forceNormalForward = !!serializationObject.forceNormalForward;\n    this.debugMode = serializationObject.debugMode;\n    this.debugLimit = serializationObject.debugLimit;\n    this.debugFactor = serializationObject.debugFactor;\n  };\n\n  __decorate([editableInPropertyPage(\"Direct lights\", PropertyTypeForEdition.Float, \"INTENSITY\", {\n    min: 0,\n    max: 1,\n    notifiers: {\n      update: true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"directIntensity\", void 0);\n\n  __decorate([editableInPropertyPage(\"Environment lights\", PropertyTypeForEdition.Float, \"INTENSITY\", {\n    min: 0,\n    max: 1,\n    notifiers: {\n      update: true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"environmentIntensity\", void 0);\n\n  __decorate([editableInPropertyPage(\"Specular highlights\", PropertyTypeForEdition.Float, \"INTENSITY\", {\n    min: 0,\n    max: 1,\n    notifiers: {\n      update: true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"specularIntensity\", void 0);\n\n  __decorate([editableInPropertyPage(\"Light falloff\", PropertyTypeForEdition.List, \"LIGHTING & COLORS\", {\n    notifiers: {\n      update: true\n    },\n    options: [{\n      label: \"Physical\",\n      value: PBRBaseMaterial.LIGHTFALLOFF_PHYSICAL\n    }, {\n      label: \"GLTF\",\n      value: PBRBaseMaterial.LIGHTFALLOFF_GLTF\n    }, {\n      label: \"Standard\",\n      value: PBRBaseMaterial.LIGHTFALLOFF_STANDARD\n    }]\n  })], PBRMetallicRoughnessBlock.prototype, \"lightFalloff\", void 0);\n\n  __decorate([editableInPropertyPage(\"Alpha Testing\", PropertyTypeForEdition.Boolean, \"OPACITY\")], PBRMetallicRoughnessBlock.prototype, \"useAlphaTest\", void 0);\n\n  __decorate([editableInPropertyPage(\"Alpha CutOff\", PropertyTypeForEdition.Float, \"OPACITY\", {\n    min: 0,\n    max: 1,\n    notifiers: {\n      update: true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"alphaTestCutoff\", void 0);\n\n  __decorate([editableInPropertyPage(\"Alpha blending\", PropertyTypeForEdition.Boolean, \"OPACITY\")], PBRMetallicRoughnessBlock.prototype, \"useAlphaBlending\", void 0);\n\n  __decorate([editableInPropertyPage(\"Radiance over alpha\", PropertyTypeForEdition.Boolean, \"RENDERING\", {\n    notifiers: {\n      update: true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"useRadianceOverAlpha\", void 0);\n\n  __decorate([editableInPropertyPage(\"Specular over alpha\", PropertyTypeForEdition.Boolean, \"RENDERING\", {\n    notifiers: {\n      update: true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"useSpecularOverAlpha\", void 0);\n\n  __decorate([editableInPropertyPage(\"Specular anti-aliasing\", PropertyTypeForEdition.Boolean, \"RENDERING\", {\n    notifiers: {\n      update: true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"enableSpecularAntiAliasing\", void 0);\n\n  __decorate([editableInPropertyPage(\"Realtime filtering\", PropertyTypeForEdition.Boolean, \"RENDERING\", {\n    notifiers: {\n      update: true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"realTimeFiltering\", void 0);\n\n  __decorate([editableInPropertyPage(\"Realtime filtering quality\", PropertyTypeForEdition.List, \"RENDERING\", {\n    notifiers: {\n      update: true\n    },\n    options: [{\n      label: \"Low\",\n      value: 8\n    }, {\n      label: \"Medium\",\n      value: 16\n    }, {\n      label: \"High\",\n      value: 64\n    }]\n  })], PBRMetallicRoughnessBlock.prototype, \"realTimeFilteringQuality\", void 0);\n\n  __decorate([editableInPropertyPage(\"Energy Conservation\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n    notifiers: {\n      update: true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"useEnergyConservation\", void 0);\n\n  __decorate([editableInPropertyPage(\"Radiance occlusion\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n    notifiers: {\n      update: true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"useRadianceOcclusion\", void 0);\n\n  __decorate([editableInPropertyPage(\"Horizon occlusion\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n    notifiers: {\n      update: true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"useHorizonOcclusion\", void 0);\n\n  __decorate([editableInPropertyPage(\"Unlit\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n    notifiers: {\n      update: true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"unlit\", void 0);\n\n  __decorate([editableInPropertyPage(\"Force normal forward\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n    notifiers: {\n      update: true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"forceNormalForward\", void 0);\n\n  __decorate([editableInPropertyPage(\"Debug mode\", PropertyTypeForEdition.List, \"DEBUG\", {\n    notifiers: {\n      update: true\n    },\n    options: [{\n      label: \"None\",\n      value: 0\n    }, // Geometry\n    {\n      label: \"Normalized position\",\n      value: 1\n    }, {\n      label: \"Normals\",\n      value: 2\n    }, {\n      label: \"Tangents\",\n      value: 3\n    }, {\n      label: \"Bitangents\",\n      value: 4\n    }, {\n      label: \"Bump Normals\",\n      value: 5\n    }, //{ label: \"UV1\", value: 6 },\n    //{ label: \"UV2\", value: 7 },\n    {\n      label: \"ClearCoat Normals\",\n      value: 8\n    }, {\n      label: \"ClearCoat Tangents\",\n      value: 9\n    }, {\n      label: \"ClearCoat Bitangents\",\n      value: 10\n    }, {\n      label: \"Anisotropic Normals\",\n      value: 11\n    }, {\n      label: \"Anisotropic Tangents\",\n      value: 12\n    }, {\n      label: \"Anisotropic Bitangents\",\n      value: 13\n    }, // Maps\n    //{ label: \"Emissive Map\", value: 23 },\n    //{ label: \"Light Map\", value: 24 },\n    // Env\n    {\n      label: \"Env Refraction\",\n      value: 40\n    }, {\n      label: \"Env Reflection\",\n      value: 41\n    }, {\n      label: \"Env Clear Coat\",\n      value: 42\n    }, // Lighting\n    {\n      label: \"Direct Diffuse\",\n      value: 50\n    }, {\n      label: \"Direct Specular\",\n      value: 51\n    }, {\n      label: \"Direct Clear Coat\",\n      value: 52\n    }, {\n      label: \"Direct Sheen\",\n      value: 53\n    }, {\n      label: \"Env Irradiance\",\n      value: 54\n    }, // Lighting Params\n    {\n      label: \"Surface Albedo\",\n      value: 60\n    }, {\n      label: \"Reflectance 0\",\n      value: 61\n    }, {\n      label: \"Metallic\",\n      value: 62\n    }, {\n      label: \"Metallic F0\",\n      value: 71\n    }, {\n      label: \"Roughness\",\n      value: 63\n    }, {\n      label: \"AlphaG\",\n      value: 64\n    }, {\n      label: \"NdotV\",\n      value: 65\n    }, {\n      label: \"ClearCoat Color\",\n      value: 66\n    }, {\n      label: \"ClearCoat Roughness\",\n      value: 67\n    }, {\n      label: \"ClearCoat NdotV\",\n      value: 68\n    }, {\n      label: \"Transmittance\",\n      value: 69\n    }, {\n      label: \"Refraction Transmittance\",\n      value: 70\n    }, // Misc\n    {\n      label: \"SEO\",\n      value: 80\n    }, {\n      label: \"EHO\",\n      value: 81\n    }, {\n      label: \"Energy Factor\",\n      value: 82\n    }, {\n      label: \"Specular Reflectance\",\n      value: 83\n    }, {\n      label: \"Clear Coat Reflectance\",\n      value: 84\n    }, {\n      label: \"Sheen Reflectance\",\n      value: 85\n    }, {\n      label: \"Luminance Over Alpha\",\n      value: 86\n    }, {\n      label: \"Alpha\",\n      value: 87\n    }]\n  })], PBRMetallicRoughnessBlock.prototype, \"debugMode\", void 0);\n\n  __decorate([editableInPropertyPage(\"Split position\", PropertyTypeForEdition.Float, \"DEBUG\", {\n    min: -1,\n    max: 1,\n    notifiers: {\n      update: true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"debugLimit\", void 0);\n\n  __decorate([editableInPropertyPage(\"Output factor\", PropertyTypeForEdition.Float, \"DEBUG\", {\n    min: 0,\n    max: 5,\n    notifiers: {\n      update: true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"debugFactor\", void 0);\n\n  return PBRMetallicRoughnessBlock;\n}(NodeMaterialBlock);\n\nexport { PBRMetallicRoughnessBlock };\nRegisterClass(\"BABYLON.PBRMetallicRoughnessBlock\", PBRMetallicRoughnessBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialConnectionPointDirection","MaterialHelper","NodeMaterialBlockTargets","NodeMaterialSystemValues","InputBlock","RegisterClass","PBRBaseMaterial","editableInPropertyPage","PropertyTypeForEdition","NodeMaterialConnectionPointCustomObject","SheenBlock","GetEnvironmentBRDFTexture","MaterialFlags","AnisotropyBlock","ReflectionBlock","ClearCoatBlock","IridescenceBlock","SubSurfaceBlock","Color3","TmpColors","mapOutputToVariable","ambientClr","diffuseDir","specularDir","clearcoatDir","sheenDir","diffuseInd","specularInd","clearcoatInd","sheenInd","refraction","lighting","shadow","alpha","__extends","name","_super","VertexAndFragment","_this","White","_isUnique","registerInput","Vector4","Vertex","Fragment","Matrix","Vector3","Float","Object","Input","registerOutput","PBRMetallicRoughnessBlock","state","_excludeVariableName","_inputs","_outputs","material","cameraPosition","isConnected","cameraPositionInput","getInputBlockByPredicate","b","systemValue","CameraPosition","setAsSystemValue","output","connectTo","view","viewInput","View","mesh","nodeMaterial","defines","setValue","debugMode","perturbedNormal","_scene","getEngine","getCaps","textureLOD","opacity","lightFalloff","LIGHTFALLOFF_STANDARD","LIGHTFALLOFF_GLTF","alphaTestCutOffString","alphaTestCutoff","toString","useAlphaBlending","useAlphaTest","indexOf","useRadianceOverAlpha","useSpecularOverAlpha","standardDerivatives","enableSpecularAntiAliasing","realTimeFiltering","scene","getScene","_features","needTypeSuffixInShaderConstants","realTimeFilteringQuality","useEnergyConservation","useRadianceOcclusion","useHorizonOcclusion","unlit","forceNormalForward","_environmentBRDFTexture","ReflectionTextureEnabled","isRGBD","_areImageProcessingDirty","imageProcessingConfiguration","prepareDefines","_areLightsDirty","light","PrepareDefinesForLights","maxSimultaneousLights","_needNormals","PrepareDefinesForMultiview","needNormals","needRebuild","lightmapMode","shadowEnabled","specularEnabled","PrepareDefinesForLight","_lightId","rebuild","uniformBuffers","lightIndex","onlyUpdateBuffersList","uniforms","PrepareUniformsAndSamplersForLight","samplers","isReady","effect","BindLights","BindLight","setTexture","_environmentBrdfSamplerName","setFloat2","debugLimit","debugFactor","ambientScene","ambientColor","setColor3","invertNormal","useRightHandedSystem","_mirroredCameraPosition","setFloat","_invertNormalName","setFloat4","directIntensity","environmentIntensity","specularIntensity","outsideIOR","ior","indexOfRefraction","connectInputBlock","_a","value","_b","f0","Math","pow","_metallicReflectanceColor","scaleToRef","_metallicF0Factor","metallicF90","setColor4","_vMetallicReflectanceFactorsName","bind","worldPos","worldPosition","comments","_emitFunctionFromInclude","supportUniformBuffers","repeatKey","sharedData","dynamicUniformBlocks","push","counters","undefined","replaceStrings","search","replace","worldPosVaryingName","associatedVariableName","_emitVaryingFromString","compilationString","concat","reflectionBlock","reflection","connectedPoint","ownerBlock","viewConnectionPoint","handleVertexSide","_emitUniformFromString","_injectAtEnd","_emitCodeFromInclude","code","albedoColor","baseColor","ao","ambientOcc","aoIntensity","_getFreeVariableName","metallic","roughness","_buildBlock","call","worldPositionConnectionPoint","cameraPositionConnectionPoint","worldNormalConnectionPoint","worldNormal","target","_injectVertexCode","forcedBindableBlocks","blocksWithDefines","blockingBlocks","worldPosVarName","normalShading","_emit2DSampler","hints","needAlphaBlending","needAlphaTesting","_emitExtension","_defineSkyboxName","_vNormalWName","_registerTempVariable","_getAlbedoOpacityCode","_getAmbientOcclusionCode","_getReflectivityCode","_c","_define3DName","_d","anisotropyBlock","anisotropy","_e","getCode","hasTexture","_f","_defineOppositeZ","_g","_defineProjectionName","_h","_j","_defineLODReflectionAlpha","_k","_defineLinearSpecularReflection","_l","_vReflectionFilteringInfoName","_m","sheenBlock","sheen","_o","_p","_q","_r","_s","iridescenceBlock","iridescence","_t","GetCode","clearcoatBlock","clearcoat","_u","generateTBNSpace","isTangentConnectedToPerturbNormal","_v","worldTangent","_w","isTangentConnectedToAnisotropy","_x","vTBNAvailable","_y","_z","_0","_1","_2","_3","_4","_5","_6","subsurfaceBlock","subsurface","_7","refractionBlock","_8","_9","indexOfRefractionConnectionPoint","_10","_11","_12","_13","_defineLODRefractionAlpha","_14","_defineLinearSpecularRefraction","_15","_16","aoColor","aoDirectLightIntensity","DEFAULT_AO_ON_ANALYTICAL_LIGHTS","_i","hasEndpoints","remap","conditions","_declareOutput","varName","console","error","codeString","_dumpPropertiesCode","_codeVariableName","serializationObject","serialize","lightId","id","rootUrl","_deserialize","getLightById","__decorate","min","max","notifiers","update","List","options","label","LIGHTFALLOFF_PHYSICAL","Boolean"],"sourceRoot":"","sources":["../../../../../../../../lts/core/generated/Materials/Node/Blocks/PBR/pbrMetallicRoughnessBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { MaterialHelper } from \"../../../materialHelper\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterial, NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues\";\r\nimport { InputBlock } from \"../Input/inputBlock\";\r\nimport type { Light } from \"../../../../Lights/light\";\r\nimport type { Nullable } from \"../../../../types\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\nimport type { Effect } from \"../../../effect\";\r\nimport type { Mesh } from \"../../../../Meshes/mesh\";\r\nimport { PBRBaseMaterial } from \"../../../PBR/pbrBaseMaterial\";\r\nimport type { Scene } from \"../../../../scene\";\r\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator\";\r\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\r\nimport { SheenBlock } from \"./sheenBlock\";\r\nimport type { BaseTexture } from \"../../../Textures/baseTexture\";\r\nimport { GetEnvironmentBRDFTexture } from \"../../../../Misc/brdfTextureTools\";\r\nimport { MaterialFlags } from \"../../../materialFlags\";\r\nimport { AnisotropyBlock } from \"./anisotropyBlock\";\r\nimport { ReflectionBlock } from \"./reflectionBlock\";\r\nimport { ClearCoatBlock } from \"./clearCoatBlock\";\r\nimport { IridescenceBlock } from \"./iridescenceBlock\";\r\nimport { SubSurfaceBlock } from \"./subSurfaceBlock\";\r\nimport type { RefractionBlock } from \"./refractionBlock\";\r\nimport type { PerturbNormalBlock } from \"../Fragment/perturbNormalBlock\";\r\nimport { Constants } from \"../../../../Engines/constants\";\r\nimport { Color3, TmpColors } from \"../../../../Maths/math.color\";\r\n\r\nconst mapOutputToVariable: { [name: string]: [string, string] } = {\r\n    ambientClr: [\"finalAmbient\", \"\"],\r\n    diffuseDir: [\"finalDiffuse\", \"\"],\r\n    specularDir: [\"finalSpecularScaled\", \"!defined(UNLIT) && defined(SPECULARTERM)\"],\r\n    clearcoatDir: [\"finalClearCoatScaled\", \"!defined(UNLIT) && defined(CLEARCOAT)\"],\r\n    sheenDir: [\"finalSheenScaled\", \"!defined(UNLIT) && defined(SHEEN)\"],\r\n    diffuseInd: [\"finalIrradiance\", \"!defined(UNLIT) && defined(REFLECTION)\"],\r\n    specularInd: [\"finalRadianceScaled\", \"!defined(UNLIT) && defined(REFLECTION)\"],\r\n    clearcoatInd: [\"clearcoatOut.finalClearCoatRadianceScaled\", \"!defined(UNLIT) && defined(REFLECTION) && defined(CLEARCOAT)\"],\r\n    sheenInd: [\"sheenOut.finalSheenRadianceScaled\", \"!defined(UNLIT) && defined(REFLECTION) && defined(SHEEN) && defined(ENVIRONMENTBRDF)\"],\r\n    refraction: [\"subSurfaceOut.finalRefraction\", \"!defined(UNLIT) && defined(SS_REFRACTION)\"],\r\n    lighting: [\"finalColor.rgb\", \"\"],\r\n    shadow: [\"shadow\", \"\"],\r\n    alpha: [\"alpha\", \"\"],\r\n};\r\n\r\n/**\r\n * Block used to implement the PBR metallic/roughness model\r\n */\r\nexport class PBRMetallicRoughnessBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Gets or sets the light associated with this block\r\n     */\r\n    public light: Nullable<Light>;\r\n\r\n    private _lightId: number;\r\n    private _scene: Scene;\r\n    private _environmentBRDFTexture: Nullable<BaseTexture> = null;\r\n    private _environmentBrdfSamplerName: string;\r\n    private _vNormalWName: string;\r\n    private _invertNormalName: string;\r\n    private _metallicReflectanceColor: Color3 = Color3.White();\r\n    private _metallicF0Factor = 1;\r\n    private _vMetallicReflectanceFactorsName: string;\r\n\r\n    /**\r\n     * Create a new ReflectionBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.VertexAndFragment);\r\n\r\n        this._isUnique = true;\r\n\r\n        this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Vertex);\r\n        this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"view\", NodeMaterialBlockConnectionPointTypes.Matrix, false);\r\n        this.registerInput(\"cameraPosition\", NodeMaterialBlockConnectionPointTypes.Vector3, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"perturbedNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"baseColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"metallic\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"roughness\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"ambientOcc\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"opacity\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"indexOfRefraction\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"ambientColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\r\n            \"reflection\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            true,\r\n            NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"reflection\", this, NodeMaterialConnectionPointDirection.Input, ReflectionBlock, \"ReflectionBlock\")\r\n        );\r\n        this.registerInput(\r\n            \"clearcoat\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            true,\r\n            NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"clearcoat\", this, NodeMaterialConnectionPointDirection.Input, ClearCoatBlock, \"ClearCoatBlock\")\r\n        );\r\n        this.registerInput(\r\n            \"sheen\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            true,\r\n            NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"sheen\", this, NodeMaterialConnectionPointDirection.Input, SheenBlock, \"SheenBlock\")\r\n        );\r\n        this.registerInput(\r\n            \"subsurface\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            true,\r\n            NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"subsurface\", this, NodeMaterialConnectionPointDirection.Input, SubSurfaceBlock, \"SubSurfaceBlock\")\r\n        );\r\n        this.registerInput(\r\n            \"anisotropy\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            true,\r\n            NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"anisotropy\", this, NodeMaterialConnectionPointDirection.Input, AnisotropyBlock, \"AnisotropyBlock\")\r\n        );\r\n        this.registerInput(\r\n            \"iridescence\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            true,\r\n            NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"iridescence\", this, NodeMaterialConnectionPointDirection.Input, IridescenceBlock, \"IridescenceBlock\")\r\n        );\r\n\r\n        this.registerOutput(\"ambientClr\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"diffuseDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"specularDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"clearcoatDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"sheenDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"diffuseInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"specularInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"clearcoatInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"sheenInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"refraction\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"lighting\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"shadow\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"alpha\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\r\n    }\r\n\r\n    /**\r\n     * Intensity of the direct lights e.g. the four lights available in your scene.\r\n     * This impacts both the direct diffuse and specular highlights.\r\n     */\r\n    @editableInPropertyPage(\"Direct lights\", PropertyTypeForEdition.Float, \"INTENSITY\", { min: 0, max: 1, notifiers: { update: true } })\r\n    public directIntensity: number = 1.0;\r\n\r\n    /**\r\n     * Intensity of the environment e.g. how much the environment will light the object\r\n     * either through harmonics for rough material or through the reflection for shiny ones.\r\n     */\r\n    @editableInPropertyPage(\"Environment lights\", PropertyTypeForEdition.Float, \"INTENSITY\", { min: 0, max: 1, notifiers: { update: true } })\r\n    public environmentIntensity: number = 1.0;\r\n\r\n    /**\r\n     * This is a special control allowing the reduction of the specular highlights coming from the\r\n     * four lights of the scene. Those highlights may not be needed in full environment lighting.\r\n     */\r\n    @editableInPropertyPage(\"Specular highlights\", PropertyTypeForEdition.Float, \"INTENSITY\", { min: 0, max: 1, notifiers: { update: true } })\r\n    public specularIntensity: number = 1.0;\r\n\r\n    /**\r\n     * Defines the  falloff type used in this material.\r\n     * It by default is Physical.\r\n     */\r\n    @editableInPropertyPage(\"Light falloff\", PropertyTypeForEdition.List, \"LIGHTING & COLORS\", {\r\n        notifiers: { update: true },\r\n        options: [\r\n            { label: \"Physical\", value: PBRBaseMaterial.LIGHTFALLOFF_PHYSICAL },\r\n            { label: \"GLTF\", value: PBRBaseMaterial.LIGHTFALLOFF_GLTF },\r\n            { label: \"Standard\", value: PBRBaseMaterial.LIGHTFALLOFF_STANDARD },\r\n        ],\r\n    })\r\n    public lightFalloff = 0;\r\n\r\n    /**\r\n     * Specifies that alpha test should be used\r\n     */\r\n    @editableInPropertyPage(\"Alpha Testing\", PropertyTypeForEdition.Boolean, \"OPACITY\")\r\n    public useAlphaTest: boolean = false;\r\n\r\n    /**\r\n     * Defines the alpha limits in alpha test mode.\r\n     */\r\n    @editableInPropertyPage(\"Alpha CutOff\", PropertyTypeForEdition.Float, \"OPACITY\", { min: 0, max: 1, notifiers: { update: true } })\r\n    public alphaTestCutoff: number = 0.5;\r\n\r\n    /**\r\n     * Specifies that alpha blending should be used\r\n     */\r\n    @editableInPropertyPage(\"Alpha blending\", PropertyTypeForEdition.Boolean, \"OPACITY\")\r\n    public useAlphaBlending: boolean = false;\r\n\r\n    /**\r\n     * Specifies that the material will keeps the reflection highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good example of that. When the street lights reflects on it you can not see what is behind.\r\n     */\r\n    @editableInPropertyPage(\"Radiance over alpha\", PropertyTypeForEdition.Boolean, \"RENDERING\", { notifiers: { update: true } })\r\n    public useRadianceOverAlpha: boolean = true;\r\n\r\n    /**\r\n     * Specifies that the material will keeps the specular highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good example of that. When sun reflects on it you can not see what is behind.\r\n     */\r\n    @editableInPropertyPage(\"Specular over alpha\", PropertyTypeForEdition.Boolean, \"RENDERING\", { notifiers: { update: true } })\r\n    public useSpecularOverAlpha: boolean = true;\r\n\r\n    /**\r\n     * Enables specular anti aliasing in the PBR shader.\r\n     * It will both interacts on the Geometry for analytical and IBL lighting.\r\n     * It also prefilter the roughness map based on the bump values.\r\n     */\r\n    @editableInPropertyPage(\"Specular anti-aliasing\", PropertyTypeForEdition.Boolean, \"RENDERING\", { notifiers: { update: true } })\r\n    public enableSpecularAntiAliasing: boolean = false;\r\n\r\n    /**\r\n     * Enables realtime filtering on the texture.\r\n     */\r\n    @editableInPropertyPage(\"Realtime filtering\", PropertyTypeForEdition.Boolean, \"RENDERING\", { notifiers: { update: true } })\r\n    public realTimeFiltering: boolean = false;\r\n\r\n    /**\r\n     * Quality switch for realtime filtering\r\n     */\r\n    @editableInPropertyPage(\"Realtime filtering quality\", PropertyTypeForEdition.List, \"RENDERING\", {\r\n        notifiers: { update: true },\r\n        options: [\r\n            { label: \"Low\", value: Constants.TEXTURE_FILTERING_QUALITY_LOW },\r\n            { label: \"Medium\", value: Constants.TEXTURE_FILTERING_QUALITY_MEDIUM },\r\n            { label: \"High\", value: Constants.TEXTURE_FILTERING_QUALITY_HIGH },\r\n        ],\r\n    })\r\n    public realTimeFilteringQuality = Constants.TEXTURE_FILTERING_QUALITY_LOW;\r\n\r\n    /**\r\n     * Defines if the material uses energy conservation.\r\n     */\r\n    @editableInPropertyPage(\"Energy Conservation\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { update: true } })\r\n    public useEnergyConservation: boolean = true;\r\n\r\n    /**\r\n     * This parameters will enable/disable radiance occlusion by preventing the radiance to lit\r\n     * too much the area relying on ambient texture to define their ambient occlusion.\r\n     */\r\n    @editableInPropertyPage(\"Radiance occlusion\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { update: true } })\r\n    public useRadianceOcclusion: boolean = true;\r\n\r\n    /**\r\n     * This parameters will enable/disable Horizon occlusion to prevent normal maps to look shiny when the normal\r\n     * makes the reflect vector face the model (under horizon).\r\n     */\r\n    @editableInPropertyPage(\"Horizon occlusion\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { update: true } })\r\n    public useHorizonOcclusion: boolean = true;\r\n\r\n    /**\r\n     * If set to true, no lighting calculations will be applied.\r\n     */\r\n    @editableInPropertyPage(\"Unlit\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { update: true } })\r\n    public unlit: boolean = false;\r\n\r\n    /**\r\n     * Force normal to face away from face.\r\n     */\r\n    @editableInPropertyPage(\"Force normal forward\", PropertyTypeForEdition.Boolean, \"ADVANCED\", { notifiers: { update: true } })\r\n    public forceNormalForward: boolean = false;\r\n\r\n    /**\r\n     * Defines the material debug mode.\r\n     * It helps seeing only some components of the material while troubleshooting.\r\n     */\r\n    @editableInPropertyPage(\"Debug mode\", PropertyTypeForEdition.List, \"DEBUG\", {\r\n        notifiers: { update: true },\r\n        options: [\r\n            { label: \"None\", value: 0 },\r\n            // Geometry\r\n            { label: \"Normalized position\", value: 1 },\r\n            { label: \"Normals\", value: 2 },\r\n            { label: \"Tangents\", value: 3 },\r\n            { label: \"Bitangents\", value: 4 },\r\n            { label: \"Bump Normals\", value: 5 },\r\n            //{ label: \"UV1\", value: 6 },\r\n            //{ label: \"UV2\", value: 7 },\r\n            { label: \"ClearCoat Normals\", value: 8 },\r\n            { label: \"ClearCoat Tangents\", value: 9 },\r\n            { label: \"ClearCoat Bitangents\", value: 10 },\r\n            { label: \"Anisotropic Normals\", value: 11 },\r\n            { label: \"Anisotropic Tangents\", value: 12 },\r\n            { label: \"Anisotropic Bitangents\", value: 13 },\r\n            // Maps\r\n            //{ label: \"Emissive Map\", value: 23 },\r\n            //{ label: \"Light Map\", value: 24 },\r\n            // Env\r\n            { label: \"Env Refraction\", value: 40 },\r\n            { label: \"Env Reflection\", value: 41 },\r\n            { label: \"Env Clear Coat\", value: 42 },\r\n            // Lighting\r\n            { label: \"Direct Diffuse\", value: 50 },\r\n            { label: \"Direct Specular\", value: 51 },\r\n            { label: \"Direct Clear Coat\", value: 52 },\r\n            { label: \"Direct Sheen\", value: 53 },\r\n            { label: \"Env Irradiance\", value: 54 },\r\n            // Lighting Params\r\n            { label: \"Surface Albedo\", value: 60 },\r\n            { label: \"Reflectance 0\", value: 61 },\r\n            { label: \"Metallic\", value: 62 },\r\n            { label: \"Metallic F0\", value: 71 },\r\n            { label: \"Roughness\", value: 63 },\r\n            { label: \"AlphaG\", value: 64 },\r\n            { label: \"NdotV\", value: 65 },\r\n            { label: \"ClearCoat Color\", value: 66 },\r\n            { label: \"ClearCoat Roughness\", value: 67 },\r\n            { label: \"ClearCoat NdotV\", value: 68 },\r\n            { label: \"Transmittance\", value: 69 },\r\n            { label: \"Refraction Transmittance\", value: 70 },\r\n            // Misc\r\n            { label: \"SEO\", value: 80 },\r\n            { label: \"EHO\", value: 81 },\r\n            { label: \"Energy Factor\", value: 82 },\r\n            { label: \"Specular Reflectance\", value: 83 },\r\n            { label: \"Clear Coat Reflectance\", value: 84 },\r\n            { label: \"Sheen Reflectance\", value: 85 },\r\n            { label: \"Luminance Over Alpha\", value: 86 },\r\n            { label: \"Alpha\", value: 87 },\r\n        ],\r\n    })\r\n    public debugMode = 0;\r\n\r\n    /**\r\n     * Specify from where on screen the debug mode should start.\r\n     * The value goes from -1 (full screen) to 1 (not visible)\r\n     * It helps with side by side comparison against the final render\r\n     * This defaults to 0\r\n     */\r\n    @editableInPropertyPage(\"Split position\", PropertyTypeForEdition.Float, \"DEBUG\", { min: -1, max: 1, notifiers: { update: true } })\r\n    public debugLimit = 0;\r\n\r\n    /**\r\n     * As the default viewing range might not be enough (if the ambient is really small for instance)\r\n     * You can use the factor to better multiply the final value.\r\n     */\r\n    @editableInPropertyPage(\"Output factor\", PropertyTypeForEdition.Float, \"DEBUG\", { min: 0, max: 5, notifiers: { update: true } })\r\n    public debugFactor = 1;\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"vLightingIntensity\");\r\n\r\n        state._excludeVariableName(\"geometricNormalW\");\r\n        state._excludeVariableName(\"normalW\");\r\n        state._excludeVariableName(\"faceNormal\");\r\n\r\n        state._excludeVariableName(\"albedoOpacityOut\");\r\n        state._excludeVariableName(\"surfaceAlbedo\");\r\n        state._excludeVariableName(\"alpha\");\r\n\r\n        state._excludeVariableName(\"aoOut\");\r\n\r\n        state._excludeVariableName(\"baseColor\");\r\n        state._excludeVariableName(\"reflectivityOut\");\r\n        state._excludeVariableName(\"microSurface\");\r\n        state._excludeVariableName(\"roughness\");\r\n\r\n        state._excludeVariableName(\"NdotVUnclamped\");\r\n        state._excludeVariableName(\"NdotV\");\r\n        state._excludeVariableName(\"alphaG\");\r\n        state._excludeVariableName(\"AARoughnessFactors\");\r\n        state._excludeVariableName(\"environmentBrdf\");\r\n        state._excludeVariableName(\"ambientMonochrome\");\r\n        state._excludeVariableName(\"seo\");\r\n        state._excludeVariableName(\"eho\");\r\n\r\n        state._excludeVariableName(\"environmentRadiance\");\r\n        state._excludeVariableName(\"irradianceVector\");\r\n        state._excludeVariableName(\"environmentIrradiance\");\r\n\r\n        state._excludeVariableName(\"diffuseBase\");\r\n        state._excludeVariableName(\"specularBase\");\r\n        state._excludeVariableName(\"preInfo\");\r\n        state._excludeVariableName(\"info\");\r\n        state._excludeVariableName(\"shadow\");\r\n\r\n        state._excludeVariableName(\"finalDiffuse\");\r\n        state._excludeVariableName(\"finalAmbient\");\r\n        state._excludeVariableName(\"ambientOcclusionForDirectDiffuse\");\r\n\r\n        state._excludeVariableName(\"finalColor\");\r\n\r\n        state._excludeVariableName(\"vClipSpacePosition\");\r\n        state._excludeVariableName(\"vDebugMode\");\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"PBRMetallicRoughnessBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the world position input component\r\n     */\r\n    public get worldPosition(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the world normal input component\r\n     */\r\n    public get worldNormal(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the view matrix parameter\r\n     */\r\n    public get view(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the camera position input component\r\n     */\r\n    public get cameraPosition(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the perturbed normal input component\r\n     */\r\n    public get perturbedNormal(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the base color input component\r\n     */\r\n    public get baseColor(): NodeMaterialConnectionPoint {\r\n        return this._inputs[5];\r\n    }\r\n\r\n    /**\r\n     * Gets the metallic input component\r\n     */\r\n    public get metallic(): NodeMaterialConnectionPoint {\r\n        return this._inputs[6];\r\n    }\r\n\r\n    /**\r\n     * Gets the roughness input component\r\n     */\r\n    public get roughness(): NodeMaterialConnectionPoint {\r\n        return this._inputs[7];\r\n    }\r\n\r\n    /**\r\n     * Gets the ambient occlusion input component\r\n     */\r\n    public get ambientOcc(): NodeMaterialConnectionPoint {\r\n        return this._inputs[8];\r\n    }\r\n\r\n    /**\r\n     * Gets the opacity input component\r\n     */\r\n    public get opacity(): NodeMaterialConnectionPoint {\r\n        return this._inputs[9];\r\n    }\r\n\r\n    /**\r\n     * Gets the index of refraction input component\r\n     */\r\n    public get indexOfRefraction(): NodeMaterialConnectionPoint {\r\n        return this._inputs[10];\r\n    }\r\n\r\n    /**\r\n     * Gets the ambient color input component\r\n     */\r\n    public get ambientColor(): NodeMaterialConnectionPoint {\r\n        return this._inputs[11];\r\n    }\r\n\r\n    /**\r\n     * Gets the reflection object parameters\r\n     */\r\n    public get reflection(): NodeMaterialConnectionPoint {\r\n        return this._inputs[12];\r\n    }\r\n\r\n    /**\r\n     * Gets the clear coat object parameters\r\n     */\r\n    public get clearcoat(): NodeMaterialConnectionPoint {\r\n        return this._inputs[13];\r\n    }\r\n\r\n    /**\r\n     * Gets the sheen object parameters\r\n     */\r\n    public get sheen(): NodeMaterialConnectionPoint {\r\n        return this._inputs[14];\r\n    }\r\n\r\n    /**\r\n     * Gets the sub surface object parameters\r\n     */\r\n    public get subsurface(): NodeMaterialConnectionPoint {\r\n        return this._inputs[15];\r\n    }\r\n\r\n    /**\r\n     * Gets the anisotropy object parameters\r\n     */\r\n    public get anisotropy(): NodeMaterialConnectionPoint {\r\n        return this._inputs[16];\r\n    }\r\n\r\n    /**\r\n     * Gets the iridescence object parameters\r\n     */\r\n    public get iridescence(): NodeMaterialConnectionPoint {\r\n        return this._inputs[17];\r\n    }\r\n\r\n    /**\r\n     * Gets the ambient output component\r\n     */\r\n    public get ambientClr(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the diffuse output component\r\n     */\r\n    public get diffuseDir(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the specular output component\r\n     */\r\n    public get specularDir(): NodeMaterialConnectionPoint {\r\n        return this._outputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the clear coat output component\r\n     */\r\n    public get clearcoatDir(): NodeMaterialConnectionPoint {\r\n        return this._outputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the sheen output component\r\n     */\r\n    public get sheenDir(): NodeMaterialConnectionPoint {\r\n        return this._outputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the indirect diffuse output component\r\n     */\r\n    public get diffuseInd(): NodeMaterialConnectionPoint {\r\n        return this._outputs[5];\r\n    }\r\n\r\n    /**\r\n     * Gets the indirect specular output component\r\n     */\r\n    public get specularInd(): NodeMaterialConnectionPoint {\r\n        return this._outputs[6];\r\n    }\r\n\r\n    /**\r\n     * Gets the indirect clear coat output component\r\n     */\r\n    public get clearcoatInd(): NodeMaterialConnectionPoint {\r\n        return this._outputs[7];\r\n    }\r\n\r\n    /**\r\n     * Gets the indirect sheen output component\r\n     */\r\n    public get sheenInd(): NodeMaterialConnectionPoint {\r\n        return this._outputs[8];\r\n    }\r\n\r\n    /**\r\n     * Gets the refraction output component\r\n     */\r\n    public get refraction(): NodeMaterialConnectionPoint {\r\n        return this._outputs[9];\r\n    }\r\n\r\n    /**\r\n     * Gets the global lighting output component\r\n     */\r\n    public get lighting(): NodeMaterialConnectionPoint {\r\n        return this._outputs[10];\r\n    }\r\n\r\n    /**\r\n     * Gets the shadow output component\r\n     */\r\n    public get shadow(): NodeMaterialConnectionPoint {\r\n        return this._outputs[11];\r\n    }\r\n\r\n    /**\r\n     * Gets the alpha output component\r\n     */\r\n    public get alpha(): NodeMaterialConnectionPoint {\r\n        return this._outputs[12];\r\n    }\r\n\r\n    public autoConfigure(material: NodeMaterial) {\r\n        if (!this.cameraPosition.isConnected) {\r\n            let cameraPositionInput = material.getInputBlockByPredicate((b) => b.systemValue === NodeMaterialSystemValues.CameraPosition);\r\n\r\n            if (!cameraPositionInput) {\r\n                cameraPositionInput = new InputBlock(\"cameraPosition\");\r\n                cameraPositionInput.setAsSystemValue(NodeMaterialSystemValues.CameraPosition);\r\n            }\r\n            cameraPositionInput.output.connectTo(this.cameraPosition);\r\n        }\r\n\r\n        if (!this.view.isConnected) {\r\n            let viewInput = material.getInputBlockByPredicate((b) => b.systemValue === NodeMaterialSystemValues.View);\r\n\r\n            if (!viewInput) {\r\n                viewInput = new InputBlock(\"view\");\r\n                viewInput.setAsSystemValue(NodeMaterialSystemValues.View);\r\n            }\r\n            viewInput.output.connectTo(this.view);\r\n        }\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        // General\r\n        defines.setValue(\"PBR\", true);\r\n        defines.setValue(\"METALLICWORKFLOW\", true);\r\n        defines.setValue(\"DEBUGMODE\", this.debugMode, true);\r\n        defines.setValue(\"NORMALXYSCALE\", true);\r\n        defines.setValue(\"BUMP\", this.perturbedNormal.isConnected, true);\r\n        defines.setValue(\"LODBASEDMICROSFURACE\", this._scene.getEngine().getCaps().textureLOD);\r\n\r\n        // Albedo & Opacity\r\n        defines.setValue(\"ALBEDO\", false, true);\r\n        defines.setValue(\"OPACITY\", this.opacity.isConnected, true);\r\n\r\n        // Ambient occlusion\r\n        defines.setValue(\"AMBIENT\", true, true);\r\n        defines.setValue(\"AMBIENTINGRAYSCALE\", false, true);\r\n\r\n        // Reflectivity\r\n        defines.setValue(\"REFLECTIVITY\", false, true);\r\n        defines.setValue(\"AOSTOREINMETALMAPRED\", false, true);\r\n        defines.setValue(\"METALLNESSSTOREINMETALMAPBLUE\", false, true);\r\n        defines.setValue(\"ROUGHNESSSTOREINMETALMAPALPHA\", false, true);\r\n        defines.setValue(\"ROUGHNESSSTOREINMETALMAPGREEN\", false, true);\r\n\r\n        // Lighting & colors\r\n        if (this.lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_STANDARD) {\r\n            defines.setValue(\"USEPHYSICALLIGHTFALLOFF\", false);\r\n            defines.setValue(\"USEGLTFLIGHTFALLOFF\", false);\r\n        } else if (this.lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_GLTF) {\r\n            defines.setValue(\"USEPHYSICALLIGHTFALLOFF\", false);\r\n            defines.setValue(\"USEGLTFLIGHTFALLOFF\", true);\r\n        } else {\r\n            defines.setValue(\"USEPHYSICALLIGHTFALLOFF\", true);\r\n            defines.setValue(\"USEGLTFLIGHTFALLOFF\", false);\r\n        }\r\n\r\n        // Transparency\r\n        const alphaTestCutOffString = this.alphaTestCutoff.toString();\r\n\r\n        defines.setValue(\"ALPHABLEND\", this.useAlphaBlending, true);\r\n        defines.setValue(\"ALPHAFROMALBEDO\", false, true);\r\n        defines.setValue(\"ALPHATEST\", this.useAlphaTest, true);\r\n        defines.setValue(\"ALPHATESTVALUE\", alphaTestCutOffString.indexOf(\".\") < 0 ? alphaTestCutOffString + \".\" : alphaTestCutOffString, true);\r\n        defines.setValue(\"OPACITYRGB\", false, true);\r\n\r\n        // Rendering\r\n        defines.setValue(\"RADIANCEOVERALPHA\", this.useRadianceOverAlpha, true);\r\n        defines.setValue(\"SPECULAROVERALPHA\", this.useSpecularOverAlpha, true);\r\n        defines.setValue(\"SPECULARAA\", this._scene.getEngine().getCaps().standardDerivatives && this.enableSpecularAntiAliasing, true);\r\n        defines.setValue(\"REALTIME_FILTERING\", this.realTimeFiltering, true);\r\n\r\n        const scene = mesh.getScene();\r\n\r\n        if (scene.getEngine()._features.needTypeSuffixInShaderConstants) {\r\n            defines.setValue(\"NUM_SAMPLES\", this.realTimeFilteringQuality + \"u\", true);\r\n        } else {\r\n            defines.setValue(\"NUM_SAMPLES\", \"\" + this.realTimeFilteringQuality, true);\r\n        }\r\n\r\n        // Advanced\r\n        defines.setValue(\"BRDF_V_HEIGHT_CORRELATED\", true);\r\n        defines.setValue(\"MS_BRDF_ENERGY_CONSERVATION\", this.useEnergyConservation, true);\r\n        defines.setValue(\"RADIANCEOCCLUSION\", this.useRadianceOcclusion, true);\r\n        defines.setValue(\"HORIZONOCCLUSION\", this.useHorizonOcclusion, true);\r\n        defines.setValue(\"UNLIT\", this.unlit, true);\r\n        defines.setValue(\"FORCENORMALFORWARD\", this.forceNormalForward, true);\r\n\r\n        if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\r\n            defines.setValue(\"ENVIRONMENTBRDF\", true);\r\n            defines.setValue(\"ENVIRONMENTBRDF_RGBD\", this._environmentBRDFTexture.isRGBD, true);\r\n        } else {\r\n            defines.setValue(\"ENVIRONMENTBRDF\", false);\r\n            defines.setValue(\"ENVIRONMENTBRDF_RGBD\", false);\r\n        }\r\n\r\n        if (defines._areImageProcessingDirty && nodeMaterial.imageProcessingConfiguration) {\r\n            nodeMaterial.imageProcessingConfiguration.prepareDefines(defines);\r\n        }\r\n\r\n        if (!defines._areLightsDirty) {\r\n            return;\r\n        }\r\n\r\n        if (!this.light) {\r\n            // Lights\r\n            MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, true, nodeMaterial.maxSimultaneousLights);\r\n            defines._needNormals = true;\r\n\r\n            // Multiview\r\n            MaterialHelper.PrepareDefinesForMultiview(scene, defines);\r\n        } else {\r\n            const state = {\r\n                needNormals: false,\r\n                needRebuild: false,\r\n                lightmapMode: false,\r\n                shadowEnabled: false,\r\n                specularEnabled: false,\r\n            };\r\n\r\n            MaterialHelper.PrepareDefinesForLight(scene, mesh, this.light, this._lightId, defines, true, state);\r\n\r\n            if (state.needRebuild) {\r\n                defines.rebuild();\r\n            }\r\n        }\r\n    }\r\n\r\n    public updateUniformsAndSamples(state: NodeMaterialBuildState, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines, uniformBuffers: string[]) {\r\n        for (let lightIndex = 0; lightIndex < nodeMaterial.maxSimultaneousLights; lightIndex++) {\r\n            if (!defines[\"LIGHT\" + lightIndex]) {\r\n                break;\r\n            }\r\n            const onlyUpdateBuffersList = state.uniforms.indexOf(\"vLightData\" + lightIndex) >= 0;\r\n            MaterialHelper.PrepareUniformsAndSamplersForLight(\r\n                lightIndex,\r\n                state.uniforms,\r\n                state.samplers,\r\n                defines[\"PROJECTEDLIGHTTEXTURE\" + lightIndex],\r\n                uniformBuffers,\r\n                onlyUpdateBuffersList\r\n            );\r\n        }\r\n    }\r\n\r\n    public isReady(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        if (this._environmentBRDFTexture && !this._environmentBRDFTexture.isReady()) {\r\n            return false;\r\n        }\r\n\r\n        if (defines._areImageProcessingDirty && nodeMaterial.imageProcessingConfiguration) {\r\n            if (!nodeMaterial.imageProcessingConfiguration.isReady()) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh) {\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        const scene = mesh.getScene();\r\n\r\n        if (!this.light) {\r\n            MaterialHelper.BindLights(scene, mesh, effect, true, nodeMaterial.maxSimultaneousLights);\r\n        } else {\r\n            MaterialHelper.BindLight(this.light, this._lightId, scene, effect, true);\r\n        }\r\n\r\n        effect.setTexture(this._environmentBrdfSamplerName, this._environmentBRDFTexture);\r\n\r\n        effect.setFloat2(\"vDebugMode\", this.debugLimit, this.debugFactor);\r\n\r\n        const ambientScene = this._scene.ambientColor;\r\n\r\n        if (ambientScene) {\r\n            effect.setColor3(\"ambientFromScene\", ambientScene);\r\n        }\r\n\r\n        const invertNormal = scene.useRightHandedSystem === (scene._mirroredCameraPosition != null);\r\n\r\n        effect.setFloat(this._invertNormalName, invertNormal ? -1 : 1);\r\n\r\n        effect.setFloat4(\"vLightingIntensity\", this.directIntensity, 1, this.environmentIntensity * this._scene.environmentIntensity, this.specularIntensity);\r\n\r\n        // reflectivity bindings\r\n        const outsideIOR = 1; // consider air as clear coat and other layers would remap in the shader.\r\n        const ior = this.indexOfRefraction.connectInputBlock?.value ?? 1.5;\r\n\r\n        // We are here deriving our default reflectance from a common value for none metallic surface.\r\n        // Based of the schlick fresnel approximation model\r\n        // for dielectrics.\r\n        const f0 = Math.pow((ior - outsideIOR) / (ior + outsideIOR), 2);\r\n\r\n        // Tweak the default F0 and F90 based on our given setup\r\n        this._metallicReflectanceColor.scaleToRef(f0 * this._metallicF0Factor, TmpColors.Color3[0]);\r\n        const metallicF90 = this._metallicF0Factor;\r\n\r\n        effect.setColor4(this._vMetallicReflectanceFactorsName, TmpColors.Color3[0], metallicF90);\r\n\r\n        if (nodeMaterial.imageProcessingConfiguration) {\r\n            nodeMaterial.imageProcessingConfiguration.bind(effect);\r\n        }\r\n    }\r\n\r\n    private _injectVertexCode(state: NodeMaterialBuildState) {\r\n        const worldPos = this.worldPosition;\r\n        const comments = `//${this.name}`;\r\n\r\n        // Declaration\r\n        if (!this.light) {\r\n            // Emit for all lights\r\n            state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightVxUboDeclaration\" : \"lightVxFragmentDeclaration\", comments, {\r\n                repeatKey: \"maxSimultaneousLights\",\r\n            });\r\n            this._lightId = 0;\r\n\r\n            state.sharedData.dynamicUniformBlocks.push(this);\r\n        } else {\r\n            this._lightId = (state.counters[\"lightCounter\"] !== undefined ? state.counters[\"lightCounter\"] : -1) + 1;\r\n            state.counters[\"lightCounter\"] = this._lightId;\r\n\r\n            state._emitFunctionFromInclude(\r\n                state.supportUniformBuffers ? \"lightVxUboDeclaration\" : \"lightVxFragmentDeclaration\",\r\n                comments,\r\n                {\r\n                    replaceStrings: [{ search: /{X}/g, replace: this._lightId.toString() }],\r\n                },\r\n                this._lightId.toString()\r\n            );\r\n        }\r\n\r\n        // Inject code in vertex\r\n        const worldPosVaryingName = \"v_\" + worldPos.associatedVariableName;\r\n        if (state._emitVaryingFromString(worldPosVaryingName, \"vec4\")) {\r\n            state.compilationString += `${worldPosVaryingName} = ${worldPos.associatedVariableName};\\r\\n`;\r\n        }\r\n\r\n        const reflectionBlock = this.reflection.isConnected ? (this.reflection.connectedPoint?.ownerBlock as ReflectionBlock) : null;\r\n\r\n        if (reflectionBlock) {\r\n            reflectionBlock.viewConnectionPoint = this.view;\r\n        }\r\n\r\n        state.compilationString += reflectionBlock?.handleVertexSide(state) ?? \"\";\r\n\r\n        state._emitUniformFromString(\"vDebugMode\", \"vec2\", \"defined(IGNORE) || DEBUGMODE > 0\");\r\n        state._emitUniformFromString(\"ambientFromScene\", \"vec3\");\r\n\r\n        if (state._emitVaryingFromString(\"vClipSpacePosition\", \"vec4\", \"defined(IGNORE) || DEBUGMODE > 0\")) {\r\n            state._injectAtEnd += `#if DEBUGMODE > 0\\r\\n`;\r\n            state._injectAtEnd += `vClipSpacePosition = gl_Position;\\r\\n`;\r\n            state._injectAtEnd += `#endif\\r\\n`;\r\n        }\r\n\r\n        if (this.light) {\r\n            state.compilationString += state._emitCodeFromInclude(\"shadowsVertex\", comments, {\r\n                replaceStrings: [\r\n                    { search: /{X}/g, replace: this._lightId.toString() },\r\n                    { search: /worldPos/g, replace: worldPos.associatedVariableName },\r\n                ],\r\n            });\r\n        } else {\r\n            state.compilationString += `vec4 worldPos = ${worldPos.associatedVariableName};\\r\\n`;\r\n            if (this.view.isConnected) {\r\n                state.compilationString += `mat4 view = ${this.view.associatedVariableName};\\r\\n`;\r\n            }\r\n            state.compilationString += state._emitCodeFromInclude(\"shadowsVertex\", comments, {\r\n                repeatKey: \"maxSimultaneousLights\",\r\n            });\r\n        }\r\n    }\r\n\r\n    private _getAlbedoOpacityCode(): string {\r\n        let code = `albedoOpacityOutParams albedoOpacityOut;\\r\\n`;\r\n\r\n        const albedoColor = this.baseColor.isConnected ? this.baseColor.associatedVariableName : \"vec3(1.)\";\r\n        const opacity = this.opacity.isConnected ? this.opacity.associatedVariableName : \"1.\";\r\n\r\n        code += `albedoOpacityBlock(\r\n                vec4(${albedoColor}, 1.),\r\n            #ifdef ALBEDO\r\n                vec4(1.),\r\n                vec2(1., 1.),\r\n            #endif\r\n            #ifdef OPACITY\r\n                vec4(${opacity}),\r\n                vec2(1., 1.),\r\n            #endif\r\n                albedoOpacityOut\r\n            );\r\n\r\n            vec3 surfaceAlbedo = albedoOpacityOut.surfaceAlbedo;\r\n            float alpha = albedoOpacityOut.alpha;\\r\\n`;\r\n\r\n        return code;\r\n    }\r\n\r\n    private _getAmbientOcclusionCode(): string {\r\n        let code = `ambientOcclusionOutParams aoOut;\\r\\n`;\r\n\r\n        const ao = this.ambientOcc.isConnected ? this.ambientOcc.associatedVariableName : \"1.\";\r\n\r\n        code += `ambientOcclusionBlock(\r\n            #ifdef AMBIENT\r\n                vec3(${ao}),\r\n                vec4(0., 1.0, 1.0, 0.),\r\n            #endif\r\n                aoOut\r\n            );\\r\\n`;\r\n\r\n        return code;\r\n    }\r\n\r\n    private _getReflectivityCode(state: NodeMaterialBuildState): string {\r\n        let code = `reflectivityOutParams reflectivityOut;\\r\\n`;\r\n\r\n        const aoIntensity = \"1.\";\r\n\r\n        this._vMetallicReflectanceFactorsName = state._getFreeVariableName(\"vMetallicReflectanceFactors\");\r\n        state._emitUniformFromString(this._vMetallicReflectanceFactorsName, \"vec4\");\r\n\r\n        code += `vec3 baseColor = surfaceAlbedo;\r\n\r\n            reflectivityBlock(\r\n                vec4(${this.metallic.associatedVariableName}, ${this.roughness.associatedVariableName}, 0., 0.),\r\n            #ifdef METALLICWORKFLOW\r\n                surfaceAlbedo,\r\n                ${this._vMetallicReflectanceFactorsName},\r\n            #endif\r\n            #ifdef REFLECTIVITY\r\n                vec3(0., 0., ${aoIntensity}),\r\n                vec4(1.),\r\n            #endif\r\n            #if defined(METALLICWORKFLOW) && defined(REFLECTIVITY)  && defined(AOSTOREINMETALMAPRED)\r\n                aoOut.ambientOcclusionColor,\r\n            #endif\r\n            #ifdef MICROSURFACEMAP\r\n                microSurfaceTexel, <== not handled!\r\n            #endif\r\n                reflectivityOut\r\n            );\r\n\r\n            float microSurface = reflectivityOut.microSurface;\r\n            float roughness = reflectivityOut.roughness;\r\n\r\n            #ifdef METALLICWORKFLOW\r\n                surfaceAlbedo = reflectivityOut.surfaceAlbedo;\r\n            #endif\r\n            #if defined(METALLICWORKFLOW) && defined(REFLECTIVITY) && defined(AOSTOREINMETALMAPRED)\r\n                aoOut.ambientOcclusionColor = reflectivityOut.ambientOcclusionColor;\r\n            #endif\\r\\n`;\r\n\r\n        return code;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        this._scene = state.sharedData.scene;\r\n\r\n        if (!this._environmentBRDFTexture) {\r\n            this._environmentBRDFTexture = GetEnvironmentBRDFTexture(this._scene);\r\n        }\r\n\r\n        const reflectionBlock = this.reflection.isConnected ? (this.reflection.connectedPoint?.ownerBlock as ReflectionBlock) : null;\r\n\r\n        if (reflectionBlock) {\r\n            // Need those variables to be setup when calling _injectVertexCode\r\n            reflectionBlock.worldPositionConnectionPoint = this.worldPosition;\r\n            reflectionBlock.cameraPositionConnectionPoint = this.cameraPosition;\r\n            reflectionBlock.worldNormalConnectionPoint = this.worldNormal;\r\n        }\r\n\r\n        if (state.target !== NodeMaterialBlockTargets.Fragment) {\r\n            // Vertex\r\n            this._injectVertexCode(state);\r\n\r\n            return this;\r\n        }\r\n\r\n        // Fragment\r\n        state.sharedData.forcedBindableBlocks.push(this);\r\n        state.sharedData.blocksWithDefines.push(this);\r\n        state.sharedData.blockingBlocks.push(this);\r\n\r\n        const comments = `//${this.name}`;\r\n        const worldPosVarName = \"v_\" + this.worldPosition.associatedVariableName;\r\n        const normalShading = this.perturbedNormal;\r\n\r\n        this._environmentBrdfSamplerName = state._getFreeVariableName(\"environmentBrdfSampler\");\r\n\r\n        state._emit2DSampler(this._environmentBrdfSamplerName);\r\n\r\n        state.sharedData.hints.needAlphaBlending = state.sharedData.hints.needAlphaBlending || this.useAlphaBlending;\r\n        state.sharedData.hints.needAlphaTesting = state.sharedData.hints.needAlphaTesting || this.useAlphaTest;\r\n\r\n        state._emitExtension(\"lod\", \"#extension GL_EXT_shader_texture_lod : enable\", \"defined(LODBASEDMICROSFURACE)\");\r\n        state._emitExtension(\"derivatives\", \"#extension GL_OES_standard_derivatives : enable\");\r\n\r\n        // Image processing uniforms\r\n        state.uniforms.push(\"exposureLinear\");\r\n        state.uniforms.push(\"contrast\");\r\n        state.uniforms.push(\"vInverseScreenSize\");\r\n        state.uniforms.push(\"vignetteSettings1\");\r\n        state.uniforms.push(\"vignetteSettings2\");\r\n        state.uniforms.push(\"vCameraColorCurveNegative\");\r\n        state.uniforms.push(\"vCameraColorCurveNeutral\");\r\n        state.uniforms.push(\"vCameraColorCurvePositive\");\r\n        state.uniforms.push(\"txColorTransform\");\r\n        state.uniforms.push(\"colorTransformSettings\");\r\n\r\n        //\r\n        // Includes\r\n        //\r\n        if (!this.light) {\r\n            // Emit for all lights\r\n            state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightUboDeclaration\" : \"lightFragmentDeclaration\", comments, {\r\n                repeatKey: \"maxSimultaneousLights\",\r\n            });\r\n        } else {\r\n            state._emitFunctionFromInclude(\r\n                state.supportUniformBuffers ? \"lightUboDeclaration\" : \"lightFragmentDeclaration\",\r\n                comments,\r\n                {\r\n                    replaceStrings: [{ search: /{X}/g, replace: this._lightId.toString() }],\r\n                },\r\n                this._lightId.toString()\r\n            );\r\n        }\r\n\r\n        state._emitFunctionFromInclude(\"helperFunctions\", comments);\r\n        state._emitFunctionFromInclude(\"importanceSampling\", comments);\r\n        state._emitFunctionFromInclude(\"pbrHelperFunctions\", comments);\r\n        state._emitFunctionFromInclude(\"imageProcessingDeclaration\", comments);\r\n        state._emitFunctionFromInclude(\"imageProcessingFunctions\", comments);\r\n\r\n        state._emitFunctionFromInclude(\"shadowsFragmentFunctions\", comments, {\r\n            replaceStrings: [{ search: /vPositionW/g, replace: worldPosVarName + \".xyz\" }],\r\n        });\r\n\r\n        state._emitFunctionFromInclude(\"pbrDirectLightingSetupFunctions\", comments, {\r\n            replaceStrings: [{ search: /vPositionW/g, replace: worldPosVarName + \".xyz\" }],\r\n        });\r\n\r\n        state._emitFunctionFromInclude(\"pbrDirectLightingFalloffFunctions\", comments);\r\n        state._emitFunctionFromInclude(\"pbrBRDFFunctions\", comments, {\r\n            replaceStrings: [{ search: /REFLECTIONMAP_SKYBOX/g, replace: reflectionBlock?._defineSkyboxName ?? \"REFLECTIONMAP_SKYBOX\" }],\r\n        });\r\n        state._emitFunctionFromInclude(\"hdrFilteringFunctions\", comments);\r\n\r\n        state._emitFunctionFromInclude(\"pbrDirectLightingFunctions\", comments, {\r\n            replaceStrings: [{ search: /vPositionW/g, replace: worldPosVarName + \".xyz\" }],\r\n        });\r\n\r\n        state._emitFunctionFromInclude(\"pbrIBLFunctions\", comments);\r\n\r\n        state._emitFunctionFromInclude(\"pbrBlockAlbedoOpacity\", comments);\r\n        state._emitFunctionFromInclude(\"pbrBlockReflectivity\", comments);\r\n        state._emitFunctionFromInclude(\"pbrBlockAmbientOcclusion\", comments);\r\n        state._emitFunctionFromInclude(\"pbrBlockAlphaFresnel\", comments);\r\n        state._emitFunctionFromInclude(\"pbrBlockAnisotropic\", comments);\r\n\r\n        //\r\n        // code\r\n        //\r\n\r\n        state._emitUniformFromString(\"vLightingIntensity\", \"vec4\");\r\n\r\n        // _____________________________ Geometry Information ____________________________\r\n        this._vNormalWName = state._getFreeVariableName(\"vNormalW\");\r\n\r\n        state.compilationString += `vec4 ${this._vNormalWName} = normalize(${this.worldNormal.associatedVariableName});\\r\\n`;\r\n\r\n        if (state._registerTempVariable(\"viewDirectionW\")) {\r\n            state.compilationString += `vec3 viewDirectionW = normalize(${this.cameraPosition.associatedVariableName} - ${worldPosVarName}.xyz);\\r\\n`;\r\n        }\r\n\r\n        state.compilationString += `vec3 geometricNormalW = ${this._vNormalWName}.xyz;\\r\\n`;\r\n\r\n        state.compilationString += `vec3 normalW = ${normalShading.isConnected ? \"normalize(\" + normalShading.associatedVariableName + \".xyz)\" : \"geometricNormalW\"};\\r\\n`;\r\n\r\n        this._invertNormalName = state._getFreeVariableName(\"invertNormal\");\r\n\r\n        state._emitUniformFromString(this._invertNormalName, \"float\");\r\n\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockNormalFinal\", comments, {\r\n            replaceStrings: [\r\n                { search: /vPositionW/g, replace: worldPosVarName + \".xyz\" },\r\n                { search: /vEyePosition.w/g, replace: this._invertNormalName },\r\n            ],\r\n        });\r\n\r\n        // _____________________________ Albedo & Opacity ______________________________\r\n        state.compilationString += this._getAlbedoOpacityCode();\r\n\r\n        state.compilationString += state._emitCodeFromInclude(\"depthPrePass\", comments);\r\n\r\n        // _____________________________ AO  _______________________________\r\n        state.compilationString += this._getAmbientOcclusionCode();\r\n\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockLightmapInit\", comments);\r\n\r\n        // _____________________________ UNLIT  _______________________________\r\n        state.compilationString += `#ifdef UNLIT\r\n                vec3 diffuseBase = vec3(1., 1., 1.);\r\n            #else\\r\\n`;\r\n\r\n        // _____________________________ Reflectivity _______________________________\r\n        state.compilationString += this._getReflectivityCode(state);\r\n\r\n        // _____________________________ Geometry info _________________________________\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockGeometryInfo\", comments, {\r\n            replaceStrings: [\r\n                { search: /REFLECTIONMAP_SKYBOX/g, replace: reflectionBlock?._defineSkyboxName ?? \"REFLECTIONMAP_SKYBOX\" },\r\n                { search: /REFLECTIONMAP_3D/g, replace: reflectionBlock?._define3DName ?? \"REFLECTIONMAP_3D\" },\r\n            ],\r\n        });\r\n\r\n        // _____________________________ Anisotropy _______________________________________\r\n        const anisotropyBlock = this.anisotropy.isConnected ? (this.anisotropy.connectedPoint?.ownerBlock as AnisotropyBlock) : null;\r\n\r\n        if (anisotropyBlock) {\r\n            anisotropyBlock.worldPositionConnectionPoint = this.worldPosition;\r\n            anisotropyBlock.worldNormalConnectionPoint = this.worldNormal;\r\n\r\n            state.compilationString += anisotropyBlock.getCode(state, !this.perturbedNormal.isConnected);\r\n        }\r\n\r\n        // _____________________________ Reflection _______________________________________\r\n        if (reflectionBlock && reflectionBlock.hasTexture) {\r\n            state.compilationString += reflectionBlock.getCode(state, anisotropyBlock ? \"anisotropicOut.anisotropicNormal\" : \"normalW\");\r\n        }\r\n\r\n        state._emitFunctionFromInclude(\"pbrBlockReflection\", comments, {\r\n            replaceStrings: [\r\n                { search: /computeReflectionCoords/g, replace: \"computeReflectionCoordsPBR\" },\r\n                { search: /REFLECTIONMAP_3D/g, replace: reflectionBlock?._define3DName ?? \"REFLECTIONMAP_3D\" },\r\n                { search: /REFLECTIONMAP_OPPOSITEZ/g, replace: reflectionBlock?._defineOppositeZ ?? \"REFLECTIONMAP_OPPOSITEZ\" },\r\n                { search: /REFLECTIONMAP_PROJECTION/g, replace: reflectionBlock?._defineProjectionName ?? \"REFLECTIONMAP_PROJECTION\" },\r\n                { search: /REFLECTIONMAP_SKYBOX/g, replace: reflectionBlock?._defineSkyboxName ?? \"REFLECTIONMAP_SKYBOX\" },\r\n                { search: /LODINREFLECTIONALPHA/g, replace: reflectionBlock?._defineLODReflectionAlpha ?? \"LODINREFLECTIONALPHA\" },\r\n                { search: /LINEARSPECULARREFLECTION/g, replace: reflectionBlock?._defineLinearSpecularReflection ?? \"LINEARSPECULARREFLECTION\" },\r\n                { search: /vReflectionFilteringInfo/g, replace: reflectionBlock?._vReflectionFilteringInfoName ?? \"vReflectionFilteringInfo\" },\r\n            ],\r\n        });\r\n\r\n        // ___________________ Compute Reflectance aka R0 F0 info _________________________\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockReflectance0\", comments, {\r\n            replaceStrings: [{ search: /metallicReflectanceFactors/g, replace: this._vMetallicReflectanceFactorsName }],\r\n        });\r\n        // ________________________________ Sheen ______________________________\r\n        const sheenBlock = this.sheen.isConnected ? (this.sheen.connectedPoint?.ownerBlock as SheenBlock) : null;\r\n\r\n        if (sheenBlock) {\r\n            state.compilationString += sheenBlock.getCode(reflectionBlock);\r\n        }\r\n\r\n        state._emitFunctionFromInclude(\"pbrBlockSheen\", comments, {\r\n            replaceStrings: [\r\n                { search: /REFLECTIONMAP_3D/g, replace: reflectionBlock?._define3DName ?? \"REFLECTIONMAP_3D\" },\r\n                { search: /REFLECTIONMAP_SKYBOX/g, replace: reflectionBlock?._defineSkyboxName ?? \"REFLECTIONMAP_SKYBOX\" },\r\n                { search: /LODINREFLECTIONALPHA/g, replace: reflectionBlock?._defineLODReflectionAlpha ?? \"LODINREFLECTIONALPHA\" },\r\n                { search: /LINEARSPECULARREFLECTION/g, replace: reflectionBlock?._defineLinearSpecularReflection ?? \"LINEARSPECULARREFLECTION\" },\r\n            ],\r\n        });\r\n\r\n        // _____________________________ Iridescence _______________________________\r\n        const iridescenceBlock = this.iridescence.isConnected ? (this.iridescence.connectedPoint?.ownerBlock as IridescenceBlock) : null;\r\n        state.compilationString += IridescenceBlock.GetCode(iridescenceBlock);\r\n\r\n        state._emitFunctionFromInclude(\"pbrBlockIridescence\", comments, {\r\n            replaceStrings: [],\r\n        });\r\n\r\n        // _____________________________ Clear Coat ____________________________\r\n        const clearcoatBlock = this.clearcoat.isConnected ? (this.clearcoat.connectedPoint?.ownerBlock as ClearCoatBlock) : null;\r\n        const generateTBNSpace = !this.perturbedNormal.isConnected && !this.anisotropy.isConnected;\r\n        const isTangentConnectedToPerturbNormal =\r\n            this.perturbedNormal.isConnected && (this.perturbedNormal.connectedPoint?.ownerBlock as PerturbNormalBlock).worldTangent?.isConnected;\r\n        const isTangentConnectedToAnisotropy = this.anisotropy.isConnected && (this.anisotropy.connectedPoint?.ownerBlock as AnisotropyBlock).worldTangent.isConnected;\r\n        let vTBNAvailable = isTangentConnectedToPerturbNormal || (!this.perturbedNormal.isConnected && isTangentConnectedToAnisotropy);\r\n\r\n        state.compilationString += ClearCoatBlock.GetCode(\r\n            state,\r\n            clearcoatBlock,\r\n            reflectionBlock,\r\n            worldPosVarName,\r\n            generateTBNSpace,\r\n            vTBNAvailable,\r\n            this.worldNormal.associatedVariableName\r\n        );\r\n\r\n        if (generateTBNSpace) {\r\n            vTBNAvailable = clearcoatBlock?.worldTangent.isConnected ?? false;\r\n        }\r\n\r\n        state._emitFunctionFromInclude(\"pbrBlockClearcoat\", comments, {\r\n            replaceStrings: [\r\n                { search: /computeReflectionCoords/g, replace: \"computeReflectionCoordsPBR\" },\r\n                { search: /REFLECTIONMAP_3D/g, replace: reflectionBlock?._define3DName ?? \"REFLECTIONMAP_3D\" },\r\n                { search: /REFLECTIONMAP_OPPOSITEZ/g, replace: reflectionBlock?._defineOppositeZ ?? \"REFLECTIONMAP_OPPOSITEZ\" },\r\n                { search: /REFLECTIONMAP_PROJECTION/g, replace: reflectionBlock?._defineProjectionName ?? \"REFLECTIONMAP_PROJECTION\" },\r\n                { search: /REFLECTIONMAP_SKYBOX/g, replace: reflectionBlock?._defineSkyboxName ?? \"REFLECTIONMAP_SKYBOX\" },\r\n                { search: /LODINREFLECTIONALPHA/g, replace: reflectionBlock?._defineLODReflectionAlpha ?? \"LODINREFLECTIONALPHA\" },\r\n                { search: /LINEARSPECULARREFLECTION/g, replace: reflectionBlock?._defineLinearSpecularReflection ?? \"LINEARSPECULARREFLECTION\" },\r\n                { search: /defined\\(TANGENT\\)/g, replace: vTBNAvailable ? \"defined(TANGENT)\" : \"defined(IGNORE)\" },\r\n            ],\r\n        });\r\n\r\n        // _________________________ Specular Environment Reflectance __________________________\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockReflectance\", comments, {\r\n            replaceStrings: [\r\n                { search: /REFLECTIONMAP_SKYBOX/g, replace: reflectionBlock?._defineSkyboxName ?? \"REFLECTIONMAP_SKYBOX\" },\r\n                { search: /REFLECTIONMAP_3D/g, replace: reflectionBlock?._define3DName ?? \"REFLECTIONMAP_3D\" },\r\n            ],\r\n        });\r\n\r\n        // ___________________________________ SubSurface ______________________________________\r\n        const subsurfaceBlock = this.subsurface.isConnected ? (this.subsurface.connectedPoint?.ownerBlock as SubSurfaceBlock) : null;\r\n        const refractionBlock = this.subsurface.isConnected\r\n            ? ((this.subsurface.connectedPoint?.ownerBlock as SubSurfaceBlock).refraction.connectedPoint?.ownerBlock as RefractionBlock)\r\n            : null;\r\n\r\n        if (refractionBlock) {\r\n            refractionBlock.viewConnectionPoint = this.view;\r\n            refractionBlock.indexOfRefractionConnectionPoint = this.indexOfRefraction;\r\n        }\r\n\r\n        state.compilationString += SubSurfaceBlock.GetCode(state, subsurfaceBlock, reflectionBlock, worldPosVarName);\r\n\r\n        state._emitFunctionFromInclude(\"pbrBlockSubSurface\", comments, {\r\n            replaceStrings: [\r\n                { search: /REFLECTIONMAP_3D/g, replace: reflectionBlock?._define3DName ?? \"REFLECTIONMAP_3D\" },\r\n                { search: /REFLECTIONMAP_OPPOSITEZ/g, replace: reflectionBlock?._defineOppositeZ ?? \"REFLECTIONMAP_OPPOSITEZ\" },\r\n                { search: /REFLECTIONMAP_PROJECTION/g, replace: reflectionBlock?._defineProjectionName ?? \"REFLECTIONMAP_PROJECTION\" },\r\n                { search: /SS_REFRACTIONMAP_3D/g, replace: refractionBlock?._define3DName ?? \"SS_REFRACTIONMAP_3D\" },\r\n                { search: /SS_LODINREFRACTIONALPHA/g, replace: refractionBlock?._defineLODRefractionAlpha ?? \"SS_LODINREFRACTIONALPHA\" },\r\n                { search: /SS_LINEARSPECULARREFRACTION/g, replace: refractionBlock?._defineLinearSpecularRefraction ?? \"SS_LINEARSPECULARREFRACTION\" },\r\n                { search: /SS_REFRACTIONMAP_OPPOSITEZ/g, replace: refractionBlock?._defineOppositeZ ?? \"SS_REFRACTIONMAP_OPPOSITEZ\" },\r\n            ],\r\n        });\r\n\r\n        // _____________________________ Direct Lighting Info __________________________________\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockDirectLighting\", comments);\r\n\r\n        if (this.light) {\r\n            state.compilationString += state._emitCodeFromInclude(\"lightFragment\", comments, {\r\n                replaceStrings: [{ search: /{X}/g, replace: this._lightId.toString() }],\r\n            });\r\n        } else {\r\n            state.compilationString += state._emitCodeFromInclude(\"lightFragment\", comments, {\r\n                repeatKey: \"maxSimultaneousLights\",\r\n            });\r\n        }\r\n\r\n        // _____________________________ Compute Final Lit Components ________________________\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockFinalLitComponents\", comments);\r\n\r\n        // _____________________________ UNLIT (2) ________________________\r\n        state.compilationString += `#endif\\r\\n`; // UNLIT\r\n\r\n        // _____________________________ Compute Final Unlit Components ________________________\r\n        const aoColor = this.ambientColor.isConnected ? this.ambientColor.associatedVariableName : \"vec3(0., 0., 0.)\";\r\n\r\n        let aoDirectLightIntensity = PBRBaseMaterial.DEFAULT_AO_ON_ANALYTICAL_LIGHTS.toString();\r\n\r\n        if (aoDirectLightIntensity.indexOf(\".\") === -1) {\r\n            aoDirectLightIntensity += \".\";\r\n        }\r\n\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockFinalUnlitComponents\", comments, {\r\n            replaceStrings: [\r\n                { search: /vec3 finalEmissive[\\s\\S]*?finalEmissive\\*=vLightingIntensity\\.y;/g, replace: \"\" },\r\n                { search: /vAmbientColor/g, replace: aoColor + \" * ambientFromScene\" },\r\n                { search: /vAmbientInfos\\.w/g, replace: aoDirectLightIntensity },\r\n            ],\r\n        });\r\n\r\n        // _____________________________ Output Final Color Composition ________________________\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockFinalColorComposition\", comments, {\r\n            replaceStrings: [{ search: /finalEmissive/g, replace: \"vec3(0.)\" }],\r\n        });\r\n\r\n        // _____________________________ Apply image processing ________________________\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrBlockImageProcessing\", comments, {\r\n            replaceStrings: [{ search: /visibility/g, replace: \"1.\" }],\r\n        });\r\n\r\n        // _____________________________ Generate debug code ________________________\r\n        state.compilationString += state._emitCodeFromInclude(\"pbrDebug\", comments, {\r\n            replaceStrings: [\r\n                { search: /vNormalW/g, replace: this._vNormalWName },\r\n                { search: /vPositionW/g, replace: worldPosVarName },\r\n                { search: /albedoTexture\\.rgb;/g, replace: \"vec3(1.);\\r\\ngl_FragColor.rgb = toGammaSpace(gl_FragColor.rgb);\\r\\n\" },\r\n            ],\r\n        });\r\n\r\n        // _____________________________ Generate end points ________________________\r\n        for (const output of this._outputs) {\r\n            if (output.hasEndpoints) {\r\n                const remap = mapOutputToVariable[output.name];\r\n                if (remap) {\r\n                    const [varName, conditions] = remap;\r\n                    if (conditions) {\r\n                        state.compilationString += `#if ${conditions}\\r\\n`;\r\n                    }\r\n                    state.compilationString += `${this._declareOutput(output, state)} = ${varName};\\r\\n`;\r\n                    if (conditions) {\r\n                        state.compilationString += `#else\\r\\n`;\r\n                        state.compilationString += `${this._declareOutput(output, state)} = vec3(0.);\\r\\n`;\r\n                        state.compilationString += `#endif\\r\\n`;\r\n                    }\r\n                } else {\r\n                    console.error(`There's no remapping for the ${output.name} end point! No code generated`);\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString = super._dumpPropertiesCode();\r\n\r\n        codeString += `${this._codeVariableName}.lightFalloff = ${this.lightFalloff};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.useAlphaTest = ${this.useAlphaTest};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.alphaTestCutoff = ${this.alphaTestCutoff};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.useAlphaBlending = ${this.useAlphaBlending};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.useRadianceOverAlpha = ${this.useRadianceOverAlpha};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.useSpecularOverAlpha = ${this.useSpecularOverAlpha};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.enableSpecularAntiAliasing = ${this.enableSpecularAntiAliasing};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.realTimeFiltering = ${this.realTimeFiltering};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.realTimeFilteringQuality = ${this.realTimeFilteringQuality};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.useEnergyConservation = ${this.useEnergyConservation};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.useRadianceOcclusion = ${this.useRadianceOcclusion};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.useHorizonOcclusion = ${this.useHorizonOcclusion};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.unlit = ${this.unlit};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.forceNormalForward = ${this.forceNormalForward};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.debugMode = ${this.debugMode};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.debugLimit = ${this.debugLimit};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.debugFactor = ${this.debugFactor};\\r\\n`;\r\n\r\n        return codeString;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        if (this.light) {\r\n            serializationObject.lightId = this.light.id;\r\n        }\r\n\r\n        serializationObject.lightFalloff = this.lightFalloff;\r\n        serializationObject.useAlphaTest = this.useAlphaTest;\r\n        serializationObject.alphaTestCutoff = this.alphaTestCutoff;\r\n        serializationObject.useAlphaBlending = this.useAlphaBlending;\r\n        serializationObject.useRadianceOverAlpha = this.useRadianceOverAlpha;\r\n        serializationObject.useSpecularOverAlpha = this.useSpecularOverAlpha;\r\n        serializationObject.enableSpecularAntiAliasing = this.enableSpecularAntiAliasing;\r\n        serializationObject.realTimeFiltering = this.realTimeFiltering;\r\n        serializationObject.realTimeFilteringQuality = this.realTimeFilteringQuality;\r\n        serializationObject.useEnergyConservation = this.useEnergyConservation;\r\n        serializationObject.useRadianceOcclusion = this.useRadianceOcclusion;\r\n        serializationObject.useHorizonOcclusion = this.useHorizonOcclusion;\r\n        serializationObject.unlit = this.unlit;\r\n        serializationObject.forceNormalForward = this.forceNormalForward;\r\n        serializationObject.debugMode = this.debugMode;\r\n        serializationObject.debugLimit = this.debugLimit;\r\n        serializationObject.debugFactor = this.debugFactor;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        if (serializationObject.lightId) {\r\n            this.light = scene.getLightById(serializationObject.lightId);\r\n        }\r\n\r\n        this.lightFalloff = serializationObject.lightFalloff ?? 0;\r\n        this.useAlphaTest = serializationObject.useAlphaTest;\r\n        this.alphaTestCutoff = serializationObject.alphaTestCutoff;\r\n        this.useAlphaBlending = serializationObject.useAlphaBlending;\r\n        this.useRadianceOverAlpha = serializationObject.useRadianceOverAlpha;\r\n        this.useSpecularOverAlpha = serializationObject.useSpecularOverAlpha;\r\n        this.enableSpecularAntiAliasing = serializationObject.enableSpecularAntiAliasing;\r\n        this.realTimeFiltering = !!serializationObject.realTimeFiltering;\r\n        this.realTimeFilteringQuality = serializationObject.realTimeFilteringQuality ?? Constants.TEXTURE_FILTERING_QUALITY_LOW;\r\n        this.useEnergyConservation = serializationObject.useEnergyConservation;\r\n        this.useRadianceOcclusion = serializationObject.useRadianceOcclusion;\r\n        this.useHorizonOcclusion = serializationObject.useHorizonOcclusion;\r\n        this.unlit = serializationObject.unlit;\r\n        this.forceNormalForward = !!serializationObject.forceNormalForward;\r\n        this.debugMode = serializationObject.debugMode;\r\n        this.debugLimit = serializationObject.debugLimit;\r\n        this.debugFactor = serializationObject.debugFactor;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.PBRMetallicRoughnessBlock\", PBRMetallicRoughnessBlock);\r\n"]},"metadata":{},"sourceType":"module"}