{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { __decorate, __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../nodeMaterialDecorator.js\";\n/**\n * block used to Generate Fractal Brownian Motion Clouds\n */\n\nvar CloudBlock =\n/** @class */\nfunction (_super) {\n  __extends(CloudBlock, _super);\n  /**\n   * Creates a new CloudBlock\n   * @param name defines the block name\n   */\n\n\n  function CloudBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Neutral) || this;\n    /** Gets or sets the number of octaves */\n\n\n    _this.octaves = 6.0;\n\n    _this.registerInput(\"seed\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n\n    _this.registerInput(\"chaos\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\n\n    _this.registerInput(\"offsetX\", NodeMaterialBlockConnectionPointTypes.Float, true);\n\n    _this.registerInput(\"offsetY\", NodeMaterialBlockConnectionPointTypes.Float, true);\n\n    _this.registerInput(\"offsetZ\", NodeMaterialBlockConnectionPointTypes.Float, true);\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    _this._inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector2);\n\n    _this._inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector3);\n\n    _this._linkConnectionTypes(0, 1);\n\n    return _this;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  CloudBlock.prototype.getClassName = function () {\n    return \"CloudBlock\";\n  };\n\n  Object.defineProperty(CloudBlock.prototype, \"seed\", {\n    /**\n     * Gets the seed input component\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(CloudBlock.prototype, \"chaos\", {\n    /**\n     * Gets the chaos input component\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(CloudBlock.prototype, \"offsetX\", {\n    /**\n     * Gets the offset X input component\n     */\n    get: function get() {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(CloudBlock.prototype, \"offsetY\", {\n    /**\n     * Gets the offset Y input component\n     */\n    get: function get() {\n      return this._inputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(CloudBlock.prototype, \"offsetZ\", {\n    /**\n     * Gets the offset Z input component\n     */\n    get: function get() {\n      return this._inputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(CloudBlock.prototype, \"output\", {\n    /**\n     * Gets the output component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  CloudBlock.prototype._buildBlock = function (state) {\n    var _a, _b;\n\n    _super.prototype._buildBlock.call(this, state);\n\n    if (!this.seed.isConnected) {\n      return;\n    }\n\n    if (!this._outputs[0].hasEndpoints) {\n      return;\n    }\n\n    var functionString = \"\\n\\n        float cloudRandom(in float p) { p = fract(p * 0.011); p *= p + 7.5; p *= p + p; return fract(p); }\\n\\n        // Based on Morgan McGuire @morgan3d\\n        // https://www.shadertoy.com/view/4dS3Wd\\n        float cloudNoise(in vec2 x, in vec2 chaos) {\\n            vec2 step = chaos * vec2(75., 120.) + vec2(75., 120.);\\n\\n            vec2 i = floor(x);\\n            vec2 f = fract(x);\\n\\n            float n = dot(i, step);\\n\\n            vec2 u = f * f * (3.0 - 2.0 * f);\\n            return mix(\\n                    mix(cloudRandom(n + dot(step, vec2(0, 0))), cloudRandom(n + dot(step, vec2(1, 0))), u.x),\\n                    mix(cloudRandom(n + dot(step, vec2(0, 1))), cloudRandom(n + dot(step, vec2(1, 1))), u.x),\\n                    u.y\\n                );\\n        }\\n\\n        float cloudNoise(in vec3 x, in vec3 chaos) {\\n            vec3 step = chaos * vec3(60., 120., 75.) + vec3(60., 120., 75.);\\n\\n            vec3 i = floor(x);\\n            vec3 f = fract(x);\\n\\n            float n = dot(i, step);\\n\\n            vec3 u = f * f * (3.0 - 2.0 * f);\\n            return mix(mix(mix( cloudRandom(n + dot(step, vec3(0, 0, 0))), cloudRandom(n + dot(step, vec3(1, 0, 0))), u.x),\\n                           mix( cloudRandom(n + dot(step, vec3(0, 1, 0))), cloudRandom(n + dot(step, vec3(1, 1, 0))), u.x), u.y),\\n                       mix(mix( cloudRandom(n + dot(step, vec3(0, 0, 1))), cloudRandom(n + dot(step, vec3(1, 0, 1))), u.x),\\n                           mix( cloudRandom(n + dot(step, vec3(0, 1, 1))), cloudRandom(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);\\n        }\";\n    var fractalBrownianString = \"\\n        float fbm(in vec2 st, in vec2 chaos) {\\n            // Initial values\\n            float value = 0.0;\\n            float amplitude = .5;\\n            float frequency = 0.;\\n\\n            // Loop of octaves\\n            for (int i = 0; i < OCTAVES; i++) {\\n                value += amplitude * cloudNoise(st, chaos);\\n                st *= 2.0;\\n                amplitude *= 0.5;\\n            }\\n            return value;\\n        }\\n\\n        float fbm(in vec3 x, in vec3 chaos) {\\n            // Initial values\\n            float value = 0.0;\\n            float amplitude = 0.5;\\n            for (int i = 0; i < OCTAVES; ++i) {\\n                value += amplitude * cloudNoise(x, chaos);\\n                x = x * 2.0;\\n                amplitude *= 0.5;\\n            }\\n            return value;\\n        }\";\n    var fbmNewName = \"fbm\".concat(this.octaves);\n\n    state._emitFunction(\"CloudBlockCode\", functionString, \"// CloudBlockCode\");\n\n    state._emitFunction(\"CloudBlockCodeFBM\" + this.octaves, fractalBrownianString.replace(/fbm/gi, fbmNewName).replace(/OCTAVES/gi, (this.octaves | 0).toString()), \"// CloudBlockCode FBM\");\n\n    var localVariable = state._getFreeVariableName(\"st\");\n\n    var seedType = ((_a = this.seed.connectedPoint) === null || _a === void 0 ? void 0 : _a.type) === NodeMaterialBlockConnectionPointTypes.Vector2 ? \"vec2\" : \"vec3\";\n    state.compilationString += \"\".concat(seedType, \" \").concat(localVariable, \" = \").concat(this.seed.associatedVariableName, \";\\r\\n\");\n\n    if (this.offsetX.isConnected) {\n      state.compilationString += \"\".concat(localVariable, \".x += 0.1 * \").concat(this.offsetX.associatedVariableName, \";\\r\\n\");\n    }\n\n    if (this.offsetY.isConnected) {\n      state.compilationString += \"\".concat(localVariable, \".y += 0.1 * \").concat(this.offsetY.associatedVariableName, \";\\r\\n\");\n    }\n\n    if (this.offsetZ.isConnected && seedType === \"vec3\") {\n      state.compilationString += \"\".concat(localVariable, \".z += 0.1 * \").concat(this.offsetZ.associatedVariableName, \";\\r\\n\");\n    }\n\n    var chaosValue = \"\";\n\n    if (this.chaos.isConnected) {\n      chaosValue = this.chaos.associatedVariableName;\n    } else {\n      chaosValue = ((_b = this.seed.connectedPoint) === null || _b === void 0 ? void 0 : _b.type) === NodeMaterialBlockConnectionPointTypes.Vector2 ? \"vec2(0., 0.)\" : \"vec3(0., 0., 0.)\";\n    }\n\n    state.compilationString += this._declareOutput(this._outputs[0], state) + \" = \".concat(fbmNewName, \"(\").concat(localVariable, \", \").concat(chaosValue, \");\\r\\n\");\n    return this;\n  };\n\n  CloudBlock.prototype._dumpPropertiesCode = function () {\n    var codeString = _super.prototype._dumpPropertiesCode.call(this) + \"\".concat(this._codeVariableName, \".octaves = \").concat(this.octaves, \";\\r\\n\");\n    return codeString;\n  };\n\n  CloudBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    serializationObject.octaves = this.octaves;\n    return serializationObject;\n  };\n\n  CloudBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    this.octaves = serializationObject.octaves;\n  };\n\n  __decorate([editableInPropertyPage(\"Octaves\", PropertyTypeForEdition.Int)], CloudBlock.prototype, \"octaves\", void 0);\n\n  return CloudBlock;\n}(NodeMaterialBlock);\n\nexport { CloudBlock };\nRegisterClass(\"BABYLON.CloudBlock\", CloudBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","editableInPropertyPage","PropertyTypeForEdition","__extends","name","_super","Neutral","_this","registerInput","AutoDetect","Float","registerOutput","_inputs","acceptedConnectionPointTypes","push","Vector2","Vector3","_linkConnectionTypes","CloudBlock","Object","_outputs","state","_buildBlock","call","seed","isConnected","hasEndpoints","functionString","fractalBrownianString","fbmNewName","octaves","_emitFunction","replace","toString","localVariable","_getFreeVariableName","seedType","connectedPoint","_a","type","compilationString","concat","associatedVariableName","offsetX","offsetY","offsetZ","chaosValue","chaos","_b","_declareOutput","codeString","_dumpPropertiesCode","_codeVariableName","serializationObject","serialize","scene","rootUrl","_deserialize","__decorate","Int"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Node/Blocks/cloudBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../nodeMaterialDecorator\";\r\nimport type { Scene } from \"../../../scene\";\r\n/**\r\n * block used to Generate Fractal Brownian Motion Clouds\r\n */\r\nexport class CloudBlock extends NodeMaterialBlock {\r\n    /** Gets or sets the number of octaves */\r\n    @editableInPropertyPage(\"Octaves\", PropertyTypeForEdition.Int)\r\n    public octaves = 6.0;\r\n\r\n    /**\r\n     * Creates a new CloudBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n        this.registerInput(\"seed\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\r\n        this.registerInput(\"chaos\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\r\n        this.registerInput(\"offsetX\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\"offsetY\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\"offsetZ\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Float);\r\n\r\n        this._inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector2);\r\n        this._inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector3);\r\n        this._linkConnectionTypes(0, 1);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"CloudBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the seed input component\r\n     */\r\n    public get seed(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the chaos input component\r\n     */\r\n    public get chaos(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the offset X input component\r\n     */\r\n    public get offsetX(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the offset Y input component\r\n     */\r\n    public get offsetY(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the offset Z input component\r\n     */\r\n    public get offsetZ(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (!this.seed.isConnected) {\r\n            return;\r\n        }\r\n\r\n        if (!this._outputs[0].hasEndpoints) {\r\n            return;\r\n        }\r\n\r\n        const functionString = `\r\n\r\n        float cloudRandom(in float p) { p = fract(p * 0.011); p *= p + 7.5; p *= p + p; return fract(p); }\r\n\r\n        // Based on Morgan McGuire @morgan3d\r\n        // https://www.shadertoy.com/view/4dS3Wd\r\n        float cloudNoise(in vec2 x, in vec2 chaos) {\r\n            vec2 step = chaos * vec2(75., 120.) + vec2(75., 120.);\r\n\r\n            vec2 i = floor(x);\r\n            vec2 f = fract(x);\r\n\r\n            float n = dot(i, step);\r\n\r\n            vec2 u = f * f * (3.0 - 2.0 * f);\r\n            return mix(\r\n                    mix(cloudRandom(n + dot(step, vec2(0, 0))), cloudRandom(n + dot(step, vec2(1, 0))), u.x),\r\n                    mix(cloudRandom(n + dot(step, vec2(0, 1))), cloudRandom(n + dot(step, vec2(1, 1))), u.x),\r\n                    u.y\r\n                );\r\n        }\r\n\r\n        float cloudNoise(in vec3 x, in vec3 chaos) {\r\n            vec3 step = chaos * vec3(60., 120., 75.) + vec3(60., 120., 75.);\r\n\r\n            vec3 i = floor(x);\r\n            vec3 f = fract(x);\r\n\r\n            float n = dot(i, step);\r\n\r\n            vec3 u = f * f * (3.0 - 2.0 * f);\r\n            return mix(mix(mix( cloudRandom(n + dot(step, vec3(0, 0, 0))), cloudRandom(n + dot(step, vec3(1, 0, 0))), u.x),\r\n                           mix( cloudRandom(n + dot(step, vec3(0, 1, 0))), cloudRandom(n + dot(step, vec3(1, 1, 0))), u.x), u.y),\r\n                       mix(mix( cloudRandom(n + dot(step, vec3(0, 0, 1))), cloudRandom(n + dot(step, vec3(1, 0, 1))), u.x),\r\n                           mix( cloudRandom(n + dot(step, vec3(0, 1, 1))), cloudRandom(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);\r\n        }`;\r\n\r\n        const fractalBrownianString = `\r\n        float fbm(in vec2 st, in vec2 chaos) {\r\n            // Initial values\r\n            float value = 0.0;\r\n            float amplitude = .5;\r\n            float frequency = 0.;\r\n\r\n            // Loop of octaves\r\n            for (int i = 0; i < OCTAVES; i++) {\r\n                value += amplitude * cloudNoise(st, chaos);\r\n                st *= 2.0;\r\n                amplitude *= 0.5;\r\n            }\r\n            return value;\r\n        }\r\n\r\n        float fbm(in vec3 x, in vec3 chaos) {\r\n            // Initial values\r\n            float value = 0.0;\r\n            float amplitude = 0.5;\r\n            for (int i = 0; i < OCTAVES; ++i) {\r\n                value += amplitude * cloudNoise(x, chaos);\r\n                x = x * 2.0;\r\n                amplitude *= 0.5;\r\n            }\r\n            return value;\r\n        }`;\r\n\r\n        const fbmNewName = `fbm${this.octaves}`;\r\n        state._emitFunction(\"CloudBlockCode\", functionString, \"// CloudBlockCode\");\r\n        state._emitFunction(\r\n            \"CloudBlockCodeFBM\" + this.octaves,\r\n            fractalBrownianString.replace(/fbm/gi, fbmNewName).replace(/OCTAVES/gi, (this.octaves | 0).toString()),\r\n            \"// CloudBlockCode FBM\"\r\n        );\r\n\r\n        const localVariable = state._getFreeVariableName(\"st\");\r\n        const seedType = this.seed.connectedPoint?.type === NodeMaterialBlockConnectionPointTypes.Vector2 ? \"vec2\" : \"vec3\";\r\n\r\n        state.compilationString += `${seedType} ${localVariable} = ${this.seed.associatedVariableName};\\r\\n`;\r\n        if (this.offsetX.isConnected) {\r\n            state.compilationString += `${localVariable}.x += 0.1 * ${this.offsetX.associatedVariableName};\\r\\n`;\r\n        }\r\n        if (this.offsetY.isConnected) {\r\n            state.compilationString += `${localVariable}.y += 0.1 * ${this.offsetY.associatedVariableName};\\r\\n`;\r\n        }\r\n        if (this.offsetZ.isConnected && seedType === \"vec3\") {\r\n            state.compilationString += `${localVariable}.z += 0.1 * ${this.offsetZ.associatedVariableName};\\r\\n`;\r\n        }\r\n\r\n        let chaosValue = \"\";\r\n        if (this.chaos.isConnected) {\r\n            chaosValue = this.chaos.associatedVariableName;\r\n        } else {\r\n            chaosValue = this.seed.connectedPoint?.type === NodeMaterialBlockConnectionPointTypes.Vector2 ? \"vec2(0., 0.)\" : \"vec3(0., 0., 0.)\";\r\n        }\r\n\r\n        state.compilationString += this._declareOutput(this._outputs[0], state) + ` = ${fbmNewName}(${localVariable}, ${chaosValue});\\r\\n`;\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        const codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.octaves = ${this.octaves};\\r\\n`;\r\n        return codeString;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.octaves = this.octaves;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.octaves = serializationObject.octaves;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.CloudBlock\", CloudBlock);\r\n"]},"metadata":{},"sourceType":"module"}