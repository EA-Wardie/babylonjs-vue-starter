{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { IsWindowObjectExist } from \"./domManagement.js\";\n/**\n * A wrapper for the experimental compute pressure api which allows a callback to be called whenever certain thresholds are met.\n */\n\nvar ComputePressureObserverWrapper =\n/** @class */\nfunction () {\n  /**\n   * A compute pressure observer will call this callback, whenever these thresholds are met.\n   * @param callback The callback that is called whenever thresholds are met.\n   * @param thresholds An object containing the thresholds used to decide what value to to return for each update property (average of start and end of a threshold boundary).\n   */\n  function ComputePressureObserverWrapper(callback, thresholds) {\n    if (ComputePressureObserverWrapper.IsAvailable) {\n      this._observer = new window.ComputePressureObserver(callback, thresholds);\n    }\n  }\n\n  Object.defineProperty(ComputePressureObserverWrapper, \"IsAvailable\", {\n    /**\n     * Returns true if ComputePressureObserver is available for use, false otherwise.\n     */\n    get: function get() {\n      return IsWindowObjectExist() && \"ComputePressureObserver\" in window;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Method that must be called to begin observing changes, and triggering callbacks.\n   */\n\n  ComputePressureObserverWrapper.prototype.observe = function () {\n    var _a, _b;\n\n    ((_a = this._observer) === null || _a === void 0 ? void 0 : _a.observe) && ((_b = this._observer) === null || _b === void 0 ? void 0 : _b.observe());\n  };\n  /**\n   * Method that must be called to stop observing changes and triggering callbacks (cleanup function).\n   */\n\n\n  ComputePressureObserverWrapper.prototype.unobserve = function () {\n    var _a, _b;\n\n    ((_a = this._observer) === null || _a === void 0 ? void 0 : _a.unobserve) && ((_b = this._observer) === null || _b === void 0 ? void 0 : _b.unobserve());\n  };\n\n  return ComputePressureObserverWrapper;\n}();\n\nexport { ComputePressureObserverWrapper };","map":{"version":3,"mappings":";AAAA,SAASA,mBAAT,QAAoC,oBAApC;AAEA;;;;AAGA;AAAA;AAAA;AAEI;;;;;AAKA,0CAAYC,QAAZ,EAA8DC,UAA9D,EAAoG;AAChG,QAAIC,8BAA8B,CAACC,WAAnC,EAAgD;AAC5C,WAAKC,SAAL,GAAiB,IAAUC,MAAO,CAACC,uBAAlB,CAA0CN,QAA1C,EAAoDC,UAApD,CAAjB;AACH;AACJ;;AAKDM,wBAAkBL,8BAAlB,EAAkB,aAAlB,EAA6B;AAH7B;;;SAGA;AACI,aAAOH,mBAAmB,MAAM,6BAA6BM,MAA7D;AACH,KAF4B;qBAAA;;AAAA,GAA7B;AAIA;;;;AAGAH;;;AACI,gBAAKE,SAAL,MAAc,IAAd,IAAcI,aAAd,GAAc,MAAd,GAAcA,GAAEC,OAAhB,MAA2B,WAAKL,SAAL,MAAc,IAAd,IAAcM,aAAd,GAAc,MAAd,GAAcA,GAAED,OAAF,EAAzC;AACH,GAFD;AAIA;;;;;AAGAP;;;AACI,gBAAKE,SAAL,MAAc,IAAd,IAAcI,aAAd,GAAc,MAAd,GAAcA,GAAEG,SAAhB,MAA6B,WAAKP,SAAL,MAAc,IAAd,IAAcM,aAAd,GAAc,MAAd,GAAcA,GAAEC,SAAF,EAA3C;AACH,GAFD;;AAGJ;AAAC,CAjCD","names":["IsWindowObjectExist","callback","thresholds","ComputePressureObserverWrapper","IsAvailable","_observer","window","ComputePressureObserver","Object","_a","observe","_b","unobserve"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Misc/computePressure.ts"],"sourcesContent":["import { IsWindowObjectExist } from \"./domManagement\";\r\n\r\n/**\r\n * A wrapper for the experimental compute pressure api which allows a callback to be called whenever certain thresholds are met.\r\n */\r\nexport class ComputePressureObserverWrapper {\r\n    private _observer: any;\r\n    /**\r\n     * A compute pressure observer will call this callback, whenever these thresholds are met.\r\n     * @param callback The callback that is called whenever thresholds are met.\r\n     * @param thresholds An object containing the thresholds used to decide what value to to return for each update property (average of start and end of a threshold boundary).\r\n     */\r\n    constructor(callback: (update: IComputePressureData) => void, thresholds: IComputePressureThresholds) {\r\n        if (ComputePressureObserverWrapper.IsAvailable) {\r\n            this._observer = new (<any>window).ComputePressureObserver(callback, thresholds);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if ComputePressureObserver is available for use, false otherwise.\r\n     */\r\n    public static get IsAvailable() {\r\n        return IsWindowObjectExist() && \"ComputePressureObserver\" in window;\r\n    }\r\n\r\n    /**\r\n     * Method that must be called to begin observing changes, and triggering callbacks.\r\n     */\r\n    observe(): void {\r\n        this._observer?.observe && this._observer?.observe();\r\n    }\r\n\r\n    /**\r\n     * Method that must be called to stop observing changes and triggering callbacks (cleanup function).\r\n     */\r\n    unobserve(): void {\r\n        this._observer?.unobserve && this._observer?.unobserve();\r\n    }\r\n}\r\n\r\n/**\r\n * An interface defining the shape of the thresholds parameter in the experimental compute pressure api\r\n */\r\nexport interface IComputePressureThresholds {\r\n    /**\r\n     * Thresholds to make buckets out of for the cpu utilization, the average between the start and end points of a threshold will be returned to the callback.\r\n     */\r\n    cpuUtilizationThresholds: number[];\r\n    /**\r\n     * Thresholds to make buckets out of for the cpu speed, the average between the start and end points of a threshold will be returned to the callback.\r\n     * 0.5 represents base speed.\r\n     */\r\n    cpuSpeedThresholds: number[];\r\n}\r\n\r\n/**\r\n * An interface defining the shape of the data sent to the callback in the compute pressure observer.\r\n */\r\nexport interface IComputePressureData {\r\n    /**\r\n     * The cpu utilization which will be a number between 0.0 and 1.0.\r\n     */\r\n    cpuUtilization: number;\r\n    /**\r\n     * The cpu speed which will be a number between 0.0 and 1.0.\r\n     */\r\n    cpuSpeed: number;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}