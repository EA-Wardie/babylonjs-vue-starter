{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture.js\";\nimport { GLTFLoader } from \"../glTFLoader.js\";\nvar NAME = \"KHR_texture_transform\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_texture_transform)\n */\n\nvar KHR_texture_transform =\n/** @class */\nfunction () {\n  /**\n   * @param loader\n   * @hidden\n   */\n  function KHR_texture_transform(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    this._loader = loader;\n    this.enabled = this._loader.isExtensionUsed(NAME);\n  }\n  /** @hidden */\n\n\n  KHR_texture_transform.prototype.dispose = function () {\n    this._loader = null;\n  };\n  /**\n   * @param context\n   * @param textureInfo\n   * @param assign\n   * @hidden\n   */\n\n\n  KHR_texture_transform.prototype.loadTextureInfoAsync = function (context, textureInfo, assign) {\n    var _this = this;\n\n    return GLTFLoader.LoadExtensionAsync(context, textureInfo, this.name, function (extensionContext, extension) {\n      return _this._loader.loadTextureInfoAsync(context, textureInfo, function (babylonTexture) {\n        if (!(babylonTexture instanceof Texture)) {\n          throw new Error(\"\".concat(extensionContext, \": Texture type not supported\"));\n        }\n\n        if (extension.offset) {\n          babylonTexture.uOffset = extension.offset[0];\n          babylonTexture.vOffset = extension.offset[1];\n        } // Always rotate around the origin.\n\n\n        babylonTexture.uRotationCenter = 0;\n        babylonTexture.vRotationCenter = 0;\n\n        if (extension.rotation) {\n          babylonTexture.wAng = -extension.rotation;\n        }\n\n        if (extension.scale) {\n          babylonTexture.uScale = extension.scale[0];\n          babylonTexture.vScale = extension.scale[1];\n        }\n\n        if (extension.texCoord != undefined) {\n          babylonTexture.coordinatesIndex = extension.texCoord;\n        }\n\n        assign(babylonTexture);\n      });\n    });\n  };\n\n  return KHR_texture_transform;\n}();\n\nexport { KHR_texture_transform };\nGLTFLoader.RegisterExtension(NAME, function (loader) {\n  return new KHR_texture_transform(loader);\n});","map":{"version":3,"mappings":";;;AAGA,SAASA,OAAT,QAAkB,+CAAlB;AAIA,SAASC,UAAT,QAA2B,kBAA3B;AAGA,IAAMC,IAAI,GAAG,uBAAb;AAEA;;;;AAGA;AAAA;AAAA;AAaI;;;;AAIA,iCAAYC,MAAZ,EAA8B;AAhB9B;;;AAGgB,gBAAOD,IAAP;AAcZ,SAAKE,OAAL,GAAeD,MAAf;AACA,SAAKE,OAAL,GAAe,KAAKD,OAAL,CAAaE,eAAb,CAA6BJ,IAA7B,CAAf;AACH;AAED;;;AACOK,4CAAP;AACK,SAAKH,OAAL,GAAuB,IAAvB;AACJ,GAFM;AAIP;;;;;;;;AAMOG,yDAAP,UAA4BC,OAA5B,EAA6CC,WAA7C,EAAwEC,MAAxE,EAAqH;AAArH;;AACI,WAAOT,UAAU,CAACU,kBAAX,CAAiEH,OAAjE,EAA0EC,WAA1E,EAAuF,KAAKG,IAA5F,EAAkG,UAACC,gBAAD,EAAmBC,SAAnB,EAA4B;AACjI,aAAOC,KAAI,CAACX,OAAL,CAAaY,oBAAb,CAAkCR,OAAlC,EAA2CC,WAA3C,EAAwD,UAACQ,cAAD,EAAe;AAC1E,YAAI,EAAEA,cAAc,YAAYjB,OAA5B,CAAJ,EAA0C;AACtC,gBAAM,IAAIkB,KAAJ,CAAU,UAAGL,gBAAH,EAAmB,8BAAnB,CAAV,CAAN;AACH;;AAED,YAAIC,SAAS,CAACK,MAAd,EAAsB;AAClBF,wBAAc,CAACG,OAAf,GAAyBN,SAAS,CAACK,MAAV,CAAiB,CAAjB,CAAzB;AACAF,wBAAc,CAACI,OAAf,GAAyBP,SAAS,CAACK,MAAV,CAAiB,CAAjB,CAAzB;AACH,SARyE,CAU1E;;;AACAF,sBAAc,CAACK,eAAf,GAAiC,CAAjC;AACAL,sBAAc,CAACM,eAAf,GAAiC,CAAjC;;AAEA,YAAIT,SAAS,CAACU,QAAd,EAAwB;AACpBP,wBAAc,CAACQ,IAAf,GAAsB,CAACX,SAAS,CAACU,QAAjC;AACH;;AAED,YAAIV,SAAS,CAACY,KAAd,EAAqB;AACjBT,wBAAc,CAACU,MAAf,GAAwBb,SAAS,CAACY,KAAV,CAAgB,CAAhB,CAAxB;AACAT,wBAAc,CAACW,MAAf,GAAwBd,SAAS,CAACY,KAAV,CAAgB,CAAhB,CAAxB;AACH;;AAED,YAAIZ,SAAS,CAACe,QAAV,IAAsBC,SAA1B,EAAqC;AACjCb,wBAAc,CAACc,gBAAf,GAAkCjB,SAAS,CAACe,QAA5C;AACH;;AAEDnB,cAAM,CAACO,cAAD,CAAN;AACH,OA5BM,CAAP;AA6BH,KA9BM,CAAP;AA+BH,GAhCM;;AAiCX;AAAC,CAlED;;;AAoEAhB,UAAU,CAAC+B,iBAAX,CAA6B9B,IAA7B,EAAmC,UAACC,MAAD,EAAO;AAAK,aAAII,qBAAJ,CAA0BJ,MAA1B;AAAiC,CAAhF","names":["Texture","GLTFLoader","NAME","loader","_loader","enabled","isExtensionUsed","KHR_texture_transform","context","textureInfo","assign","LoadExtensionAsync","name","extensionContext","extension","_this","loadTextureInfoAsync","babylonTexture","Error","offset","uOffset","vOffset","uRotationCenter","vRotationCenter","rotation","wAng","scale","uScale","vScale","texCoord","undefined","coordinatesIndex","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../../lts/loaders/generated/glTF/2.0/Extensions/KHR_texture_transform.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { Texture } from \"core/Materials/Textures/texture\";\r\n\r\nimport type { ITextureInfo } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRTextureTransform } from \"babylonjs-gltf2interface\";\r\n\r\nconst NAME = \"KHR_texture_transform\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_texture_transform)\r\n */\r\nexport class KHR_texture_transform implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @param loader\r\n     * @hidden\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @hidden */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @param context\r\n     * @param textureInfo\r\n     * @param assign\r\n     * @hidden\r\n     */\r\n    public loadTextureInfoAsync(context: string, textureInfo: ITextureInfo, assign: (babylonTexture: BaseTexture) => void): Nullable<Promise<BaseTexture>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRTextureTransform, BaseTexture>(context, textureInfo, this.name, (extensionContext, extension) => {\r\n            return this._loader.loadTextureInfoAsync(context, textureInfo, (babylonTexture) => {\r\n                if (!(babylonTexture instanceof Texture)) {\r\n                    throw new Error(`${extensionContext}: Texture type not supported`);\r\n                }\r\n\r\n                if (extension.offset) {\r\n                    babylonTexture.uOffset = extension.offset[0];\r\n                    babylonTexture.vOffset = extension.offset[1];\r\n                }\r\n\r\n                // Always rotate around the origin.\r\n                babylonTexture.uRotationCenter = 0;\r\n                babylonTexture.vRotationCenter = 0;\r\n\r\n                if (extension.rotation) {\r\n                    babylonTexture.wAng = -extension.rotation;\r\n                }\r\n\r\n                if (extension.scale) {\r\n                    babylonTexture.uScale = extension.scale[0];\r\n                    babylonTexture.vScale = extension.scale[1];\r\n                }\r\n\r\n                if (extension.texCoord != undefined) {\r\n                    babylonTexture.coordinatesIndex = extension.texCoord;\r\n                }\r\n\r\n                assign(babylonTexture);\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_texture_transform(loader));\r\n"]},"metadata":{},"sourceType":"module"}