{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/filter.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serializeAsMatrix, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * Applies a kernel filter to the image\n */\n\nvar FilterPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(FilterPostProcess, _super);\n  /**\n   *\n   * @param name The name of the effect.\n   * @param kernelMatrix The matrix to be applied to the image\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   */\n\n\n  function FilterPostProcess(name, kernelMatrix, options, camera, samplingMode, engine, reusable) {\n    var _this = _super.call(this, name, \"filter\", [\"kernelMatrix\"], null, options, camera, samplingMode, engine, reusable) || this;\n\n    _this.kernelMatrix = kernelMatrix;\n\n    _this.onApply = function (effect) {\n      effect.setMatrix(\"kernelMatrix\", _this.kernelMatrix);\n    };\n\n    return _this;\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"FilterPostProcess\" string\n   */\n\n\n  FilterPostProcess.prototype.getClassName = function () {\n    return \"FilterPostProcess\";\n  };\n  /**\n   * @param parsedPostProcess\n   * @param targetCamera\n   * @param scene\n   * @param rootUrl\n   * @hidden\n   */\n\n\n  FilterPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new FilterPostProcess(parsedPostProcess.name, parsedPostProcess.kernelMatrix, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  __decorate([serializeAsMatrix()], FilterPostProcess.prototype, \"kernelMatrix\", void 0);\n\n  return FilterPostProcess;\n}(PostProcess);\n\nexport { FilterPostProcess };\nRegisterClass(\"BABYLON.FilterPostProcess\", FilterPostProcess);","map":{"version":3,"mappings":";;AAKA,SAASA,WAAT,QAA4B,kBAA5B;AAGA,OAAO,+BAAP;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,iBAAT,EAA4BC,mBAA5B,QAAuD,uBAAvD;AAIA;;;;AAGA;AAAA;AAAA;AAAuCC;AAanC;;;;;;;;;;;;AAUA,6BAAYC,IAAZ,EAA0BC,YAA1B,EAAgDC,OAAhD,EAAsFC,MAAtF,EAAgHC,YAAhH,EAAuIC,MAAvI,EAAwJC,QAAxJ,EAA0K;AAA1K,gBACIC,kBAAMP,IAAN,EAAY,QAAZ,EAAsB,CAAC,cAAD,CAAtB,EAAwC,IAAxC,EAA8CE,OAA9C,EAAuDC,MAAvD,EAA+DC,YAA/D,EAA6EC,MAA7E,EAAqFC,QAArF,KAA8F,IADlG;;AAEIE,SAAI,CAACP,YAAL,GAAoBA,YAApB;;AAEAO,SAAI,CAACC,OAAL,GAAe,UAACC,MAAD,EAAe;AAC1BA,YAAM,CAACC,SAAP,CAAiB,cAAjB,EAAiCH,KAAI,CAACP,YAAtC;AACH,KAFD;;;AAGH;AAzBD;;;;;;AAIOW,6CAAP;AACI,WAAO,mBAAP;AACH,GAFM;AAuBP;;;;;;;;;AAOcA,6BAAd,UAAqBC,iBAArB,EAA6CC,YAA7C,EAAmEC,KAAnE,EAAiFC,OAAjF,EAAgG;AAC5F,WAAOlB,mBAAmB,CAACmB,KAApB,CACH;AACI,aAAO,IAAIL,iBAAJ,CACHC,iBAAiB,CAACb,IADf,EAEHa,iBAAiB,CAACZ,YAFf,EAGHY,iBAAiB,CAACX,OAHf,EAIHY,YAJG,EAKHD,iBAAiB,CAACK,wBALf,EAMHH,KAAK,CAACI,SAAN,EANG,EAOHN,iBAAiB,CAACP,QAPf,CAAP;AASH,KAXE,EAYHO,iBAZG,EAaHE,KAbG,EAcHC,OAdG,CAAP;AAgBH,GAjBa;;AApCdI,cADCvB,iBAAiB,EAClB;;AAsDJ;AAAC,CAzDD,CAAuCF,WAAvC;;SAAaiB;AA2DbhB,aAAa,CAAC,2BAAD,EAA8BgB,iBAA9B,CAAb","names":["PostProcess","RegisterClass","serializeAsMatrix","SerializationHelper","__extends","name","kernelMatrix","options","camera","samplingMode","engine","reusable","_super","_this","onApply","effect","setMatrix","FilterPostProcess","parsedPostProcess","targetCamera","scene","rootUrl","Parse","renderTargetSamplingMode","getEngine","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/PostProcesses/filterPostProcess.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { Matrix } from \"../Maths/math.vector\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Engine } from \"../Engines/engine\";\r\n\r\nimport \"../Shaders/filter.fragment\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { serializeAsMatrix, SerializationHelper } from \"../Misc/decorators\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * Applies a kernel filter to the image\r\n */\r\nexport class FilterPostProcess extends PostProcess {\r\n    /** The matrix to be applied to the image */\r\n    @serializeAsMatrix()\r\n    public kernelMatrix: Matrix;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"FilterPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"FilterPostProcess\";\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param name The name of the effect.\r\n     * @param kernelMatrix The matrix to be applied to the image\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     */\r\n    constructor(name: string, kernelMatrix: Matrix, options: number | PostProcessOptions, camera: Nullable<Camera>, samplingMode?: number, engine?: Engine, reusable?: boolean) {\r\n        super(name, \"filter\", [\"kernelMatrix\"], null, options, camera, samplingMode, engine, reusable);\r\n        this.kernelMatrix = kernelMatrix;\r\n\r\n        this.onApply = (effect: Effect) => {\r\n            effect.setMatrix(\"kernelMatrix\", this.kernelMatrix);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @param parsedPostProcess\r\n     * @param targetCamera\r\n     * @param scene\r\n     * @param rootUrl\r\n     * @hidden\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string): Nullable<FilterPostProcess> {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new FilterPostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.kernelMatrix,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    scene.getEngine(),\r\n                    parsedPostProcess.reusable\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.FilterPostProcess\", FilterPostProcess);\r\n"]},"metadata":{},"sourceType":"module"}