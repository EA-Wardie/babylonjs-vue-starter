{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { __awaiter, __generator } from \"tslib\";\nimport * as WebGPUConstants from \"./webgpuConstants.js\";\nimport { PerfCounter } from \"../../Misc/perfCounter.js\";\nimport { WebGPUQuerySet } from \"./webgpuQuerySet.js\";\n/** @hidden */\n\nvar WebGPUTimestampQuery =\n/** @class */\nfunction () {\n  function WebGPUTimestampQuery(device, bufferManager) {\n    this._enabled = false;\n    this._gpuFrameTimeCounter = new PerfCounter();\n    this._measureDurationState = 0;\n    this._device = device;\n    this._bufferManager = bufferManager;\n  }\n\n  Object.defineProperty(WebGPUTimestampQuery.prototype, \"gpuFrameTimeCounter\", {\n    get: function get() {\n      return this._gpuFrameTimeCounter;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebGPUTimestampQuery.prototype, \"enable\", {\n    get: function get() {\n      return this._enabled;\n    },\n    set: function set(value) {\n      if (this._enabled === value) {\n        return;\n      }\n\n      this._enabled = value;\n      this._measureDurationState = 0;\n\n      if (value) {\n        this._measureDuration = new WebGPUDurationMeasure(this._device, this._bufferManager);\n      } else {\n        this._measureDuration.dispose();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  WebGPUTimestampQuery.prototype.startFrame = function (commandEncoder) {\n    if (this._enabled && this._measureDurationState === 0) {\n      this._measureDuration.start(commandEncoder);\n\n      this._measureDurationState = 1;\n    }\n  };\n\n  WebGPUTimestampQuery.prototype.endFrame = function (commandEncoder) {\n    var _this = this;\n\n    if (this._measureDurationState === 1) {\n      this._measureDurationState = 2;\n\n      this._measureDuration.stop(commandEncoder).then(function (duration) {\n        if (duration !== null && duration >= 0) {\n          _this._gpuFrameTimeCounter.fetchNewFrame();\n\n          _this._gpuFrameTimeCounter.addCount(duration, true);\n        }\n\n        _this._measureDurationState = 0;\n      });\n    }\n  };\n\n  return WebGPUTimestampQuery;\n}();\n\nexport { WebGPUTimestampQuery };\n/** @hidden */\n\nvar WebGPUDurationMeasure =\n/** @class */\nfunction () {\n  function WebGPUDurationMeasure(device, bufferManager) {\n    this._querySet = new WebGPUQuerySet(2, WebGPUConstants.QueryType.Timestamp, device, bufferManager);\n  }\n\n  WebGPUDurationMeasure.prototype.start = function (encoder) {\n    encoder.writeTimestamp(this._querySet.querySet, 0);\n  };\n\n  WebGPUDurationMeasure.prototype.stop = function (encoder) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        encoder.writeTimestamp(this._querySet.querySet, 1);\n        return [2\n        /*return*/\n        , this._querySet.readTwoValuesAndSubtract(0)];\n      });\n    });\n  };\n\n  WebGPUDurationMeasure.prototype.dispose = function () {\n    this._querySet.dispose();\n  };\n\n  return WebGPUDurationMeasure;\n}();\n\nexport { WebGPUDurationMeasure };","map":{"version":3,"mappings":";;AACA,OAAO,KAAKA,eAAZ,MAAiC,sBAAjC;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,cAAT,QAA+B,qBAA/B;AAEA;;AACA;AAAA;AAAA;AAaI,gCAAYC,MAAZ,EAA+BC,aAA/B,EAAiE;AATzD,oBAAW,KAAX;AACA,gCAAoC,IAAIH,WAAJ,EAApC;AAEA,iCAAwB,CAAxB;AAOJ,SAAKI,OAAL,GAAeF,MAAf;AACA,SAAKG,cAAL,GAAsBF,aAAtB;AACH;;AAPDG,wBAAWC,8BAAX,EAAW,qBAAX,EAA8B;SAA9B;AACI,aAAO,KAAKC,oBAAZ;AACH,KAF6B;qBAAA;;AAAA,GAA9B;AASAF,wBAAWC,8BAAX,EAAW,QAAX,EAAiB;SAAjB;AACI,aAAO,KAAKE,QAAZ;AACH,KAFgB;SAIjB,aAAkBC,KAAlB,EAAgC;AAC5B,UAAI,KAAKD,QAAL,KAAkBC,KAAtB,EAA6B;AACzB;AACH;;AAED,WAAKD,QAAL,GAAgBC,KAAhB;AACA,WAAKC,qBAAL,GAA6B,CAA7B;;AACA,UAAID,KAAJ,EAAW;AACP,aAAKE,gBAAL,GAAwB,IAAIC,qBAAJ,CAA0B,KAAKT,OAA/B,EAAwC,KAAKC,cAA7C,CAAxB;AACH,OAFD,MAEO;AACH,aAAKO,gBAAL,CAAsBE,OAAtB;AACH;AACJ,KAhBgB;qBAAA;;AAAA,GAAjB;;AAkBOP,8CAAP,UAAkBQ,cAAlB,EAAmD;AAC/C,QAAI,KAAKN,QAAL,IAAiB,KAAKE,qBAAL,KAA+B,CAApD,EAAuD;AACnD,WAAKC,gBAAL,CAAsBI,KAAtB,CAA4BD,cAA5B;;AACA,WAAKJ,qBAAL,GAA6B,CAA7B;AACH;AACJ,GALM;;AAOAJ,4CAAP,UAAgBQ,cAAhB,EAAiD;AAAjD;;AACI,QAAI,KAAKJ,qBAAL,KAA+B,CAAnC,EAAsC;AAClC,WAAKA,qBAAL,GAA6B,CAA7B;;AACA,WAAKC,gBAAL,CAAsBK,IAAtB,CAA2BF,cAA3B,EAA2CG,IAA3C,CAAgD,UAACC,QAAD,EAAS;AACrD,YAAIA,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,IAAI,CAArC,EAAwC;AACpCC,eAAI,CAACZ,oBAAL,CAA0Ba,aAA1B;;AACAD,eAAI,CAACZ,oBAAL,CAA0Bc,QAA1B,CAAmCH,QAAnC,EAA6C,IAA7C;AACH;;AACDC,aAAI,CAACT,qBAAL,GAA6B,CAA7B;AACH,OAND;AAOH;AACJ,GAXM;;AAYX;AAAC,CAvDD;;;AAyDA;;AACA;AAAA;AAAA;AAGI,iCAAYT,MAAZ,EAA+BC,aAA/B,EAAiE;AAC7D,SAAKoB,SAAL,GAAiB,IAAItB,cAAJ,CAAmB,CAAnB,EAAsBF,eAAe,CAACyB,SAAhB,CAA0BC,SAAhD,EAA2DvB,MAA3D,EAAmEC,aAAnE,CAAjB;AACH;;AAEMU,0CAAP,UAAaa,OAAb,EAAuC;AACnCA,WAAO,CAACC,cAAR,CAAuB,KAAKJ,SAAL,CAAeK,QAAtC,EAAgD,CAAhD;AACH,GAFM;;AAIMf,yCAAb,UAAkBa,OAAlB,EAA4C;;;AACxCA,eAAO,CAACC,cAAR,CAAuB,KAAKJ,SAAL,CAAeK,QAAtC,EAAgD,CAAhD;AAEA;AAAA;AAAA,UAAO,KAAKL,SAAL,CAAeM,wBAAf,CAAwC,CAAxC,CAAP;;;AACH,GAJY;;AAMNhB,4CAAP;AACI,SAAKU,SAAL,CAAeT,OAAf;AACH,GAFM;;AAGX;AAAC,CApBD","names":["WebGPUConstants","PerfCounter","WebGPUQuerySet","device","bufferManager","_device","_bufferManager","Object","WebGPUTimestampQuery","_gpuFrameTimeCounter","_enabled","value","_measureDurationState","_measureDuration","WebGPUDurationMeasure","dispose","commandEncoder","start","stop","then","duration","_this","fetchNewFrame","addCount","_querySet","QueryType","Timestamp","encoder","writeTimestamp","querySet","readTwoValuesAndSubtract"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/WebGPU/webgpuTimestampQuery.ts"],"sourcesContent":["import type { WebGPUBufferManager } from \"./webgpuBufferManager\";\r\nimport * as WebGPUConstants from \"./webgpuConstants\";\r\nimport { PerfCounter } from \"../../Misc/perfCounter\";\r\nimport { WebGPUQuerySet } from \"./webgpuQuerySet\";\r\n\r\n/** @hidden */\r\nexport class WebGPUTimestampQuery {\r\n    private _device: GPUDevice;\r\n    private _bufferManager: WebGPUBufferManager;\r\n\r\n    private _enabled = false;\r\n    private _gpuFrameTimeCounter: PerfCounter = new PerfCounter();\r\n    private _measureDuration: WebGPUDurationMeasure;\r\n    private _measureDurationState = 0;\r\n\r\n    public get gpuFrameTimeCounter() {\r\n        return this._gpuFrameTimeCounter;\r\n    }\r\n\r\n    constructor(device: GPUDevice, bufferManager: WebGPUBufferManager) {\r\n        this._device = device;\r\n        this._bufferManager = bufferManager;\r\n    }\r\n\r\n    public get enable(): boolean {\r\n        return this._enabled;\r\n    }\r\n\r\n    public set enable(value: boolean) {\r\n        if (this._enabled === value) {\r\n            return;\r\n        }\r\n\r\n        this._enabled = value;\r\n        this._measureDurationState = 0;\r\n        if (value) {\r\n            this._measureDuration = new WebGPUDurationMeasure(this._device, this._bufferManager);\r\n        } else {\r\n            this._measureDuration.dispose();\r\n        }\r\n    }\r\n\r\n    public startFrame(commandEncoder: GPUCommandEncoder): void {\r\n        if (this._enabled && this._measureDurationState === 0) {\r\n            this._measureDuration.start(commandEncoder);\r\n            this._measureDurationState = 1;\r\n        }\r\n    }\r\n\r\n    public endFrame(commandEncoder: GPUCommandEncoder): void {\r\n        if (this._measureDurationState === 1) {\r\n            this._measureDurationState = 2;\r\n            this._measureDuration.stop(commandEncoder).then((duration) => {\r\n                if (duration !== null && duration >= 0) {\r\n                    this._gpuFrameTimeCounter.fetchNewFrame();\r\n                    this._gpuFrameTimeCounter.addCount(duration, true);\r\n                }\r\n                this._measureDurationState = 0;\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n/** @hidden */\r\nexport class WebGPUDurationMeasure {\r\n    private _querySet: WebGPUQuerySet;\r\n\r\n    constructor(device: GPUDevice, bufferManager: WebGPUBufferManager) {\r\n        this._querySet = new WebGPUQuerySet(2, WebGPUConstants.QueryType.Timestamp, device, bufferManager);\r\n    }\r\n\r\n    public start(encoder: GPUCommandEncoder): void {\r\n        encoder.writeTimestamp(this._querySet.querySet, 0);\r\n    }\r\n\r\n    public async stop(encoder: GPUCommandEncoder): Promise<number | null> {\r\n        encoder.writeTimestamp(this._querySet.querySet, 1);\r\n\r\n        return this._querySet.readTwoValuesAndSubtract(0);\r\n    }\r\n\r\n    public dispose() {\r\n        this._querySet.dispose();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}