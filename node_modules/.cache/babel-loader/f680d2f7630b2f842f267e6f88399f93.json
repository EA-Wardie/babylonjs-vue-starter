{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport \"../Shaders/imageProcessing.fragment.js\";\nimport \"../Shaders/subSurfaceScattering.fragment.js\";\nimport \"../Shaders/postprocess.vertex.js\";\n/**\n * Sub surface scattering post process\n */\n\nvar SubSurfaceScatteringPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(SubSurfaceScatteringPostProcess, _super);\n\n  function SubSurfaceScatteringPostProcess(name, scene, options, camera, samplingMode, engine, reusable, textureType) {\n    if (camera === void 0) {\n      camera = null;\n    }\n\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    var _this = _super.call(this, name, \"subSurfaceScattering\", [\"texelSize\", \"viewportSize\", \"metersPerUnit\"], [\"diffusionS\", \"diffusionD\", \"filterRadii\", \"irradianceSampler\", \"depthSampler\", \"albedoSampler\"], options, camera, samplingMode || Texture.BILINEAR_SAMPLINGMODE, engine, reusable, null, textureType, \"postprocess\", undefined, true) || this;\n\n    _this._scene = scene;\n\n    _this.updateEffect();\n\n    _this.onApplyObservable.add(function (effect) {\n      if (!scene.prePassRenderer || !scene.subSurfaceConfiguration) {\n        Logger.Error(\"PrePass and subsurface configuration needs to be enabled for subsurface scattering.\");\n        return;\n      }\n\n      var texelSize = _this.texelSize;\n      effect.setFloat(\"metersPerUnit\", scene.subSurfaceConfiguration.metersPerUnit);\n      effect.setFloat2(\"texelSize\", texelSize.x, texelSize.y);\n      effect.setTexture(\"irradianceSampler\", scene.prePassRenderer.getRenderTarget().textures[scene.prePassRenderer.getIndex(0)]);\n      effect.setTexture(\"depthSampler\", scene.prePassRenderer.getRenderTarget().textures[scene.prePassRenderer.getIndex(5)]);\n      effect.setTexture(\"albedoSampler\", scene.prePassRenderer.getRenderTarget().textures[scene.prePassRenderer.getIndex(7)]);\n      effect.setFloat2(\"viewportSize\", Math.tan(scene.activeCamera.fov / 2) * scene.getEngine().getAspectRatio(scene.activeCamera, true), Math.tan(scene.activeCamera.fov / 2));\n      effect.setArray3(\"diffusionS\", scene.subSurfaceConfiguration.ssDiffusionS);\n      effect.setArray(\"diffusionD\", scene.subSurfaceConfiguration.ssDiffusionD);\n      effect.setArray(\"filterRadii\", scene.subSurfaceConfiguration.ssFilterRadii);\n    });\n\n    return _this;\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"SubSurfaceScatteringPostProcess\" string\n   */\n\n\n  SubSurfaceScatteringPostProcess.prototype.getClassName = function () {\n    return \"SubSurfaceScatteringPostProcess\";\n  };\n\n  return SubSurfaceScatteringPostProcess;\n}(PostProcess);\n\nexport { SubSurfaceScatteringPostProcess };","map":{"version":3,"mappings":"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","names":["Texture","PostProcess","Logger","__extends","name","scene","options","camera","samplingMode","engine","reusable","textureType","_super","BILINEAR_SAMPLINGMODE","undefined","_this","_scene","updateEffect","onApplyObservable","add","effect","prePassRenderer","subSurfaceConfiguration","Error","texelSize","setFloat","metersPerUnit","setFloat2","x","y","setTexture","getRenderTarget","textures","getIndex","Math","tan","activeCamera","fov","getEngine","getAspectRatio","setArray3","ssDiffusionS","setArray","ssDiffusionD","ssFilterRadii","SubSurfaceScatteringPostProcess"],"sourceRoot":"","sources":["../../../../../lts/core/generated/PostProcesses/subSurfaceScatteringPostProcess.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { Logger } from \"../Misc/logger\";\r\n\r\nimport \"../Shaders/imageProcessing.fragment\";\r\nimport \"../Shaders/subSurfaceScattering.fragment\";\r\nimport \"../Shaders/postprocess.vertex\";\r\n\r\n/**\r\n * Sub surface scattering post process\r\n */\r\nexport class SubSurfaceScatteringPostProcess extends PostProcess {\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"SubSurfaceScatteringPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"SubSurfaceScatteringPostProcess\";\r\n    }\r\n\r\n    constructor(\r\n        name: string,\r\n        scene: Scene,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera> = null,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT\r\n    ) {\r\n        super(\r\n            name,\r\n            \"subSurfaceScattering\",\r\n            [\"texelSize\", \"viewportSize\", \"metersPerUnit\"],\r\n            [\"diffusionS\", \"diffusionD\", \"filterRadii\", \"irradianceSampler\", \"depthSampler\", \"albedoSampler\"],\r\n            options,\r\n            camera,\r\n            samplingMode || Texture.BILINEAR_SAMPLINGMODE,\r\n            engine,\r\n            reusable,\r\n            null,\r\n            textureType,\r\n            \"postprocess\",\r\n            undefined,\r\n            true\r\n        );\r\n        this._scene = scene;\r\n\r\n        this.updateEffect();\r\n\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            if (!scene.prePassRenderer || !scene.subSurfaceConfiguration) {\r\n                Logger.Error(\"PrePass and subsurface configuration needs to be enabled for subsurface scattering.\");\r\n                return;\r\n            }\r\n            const texelSize = this.texelSize;\r\n            effect.setFloat(\"metersPerUnit\", scene.subSurfaceConfiguration.metersPerUnit);\r\n            effect.setFloat2(\"texelSize\", texelSize.x, texelSize.y);\r\n            effect.setTexture(\"irradianceSampler\", scene.prePassRenderer.getRenderTarget().textures[scene.prePassRenderer.getIndex(Constants.PREPASS_IRRADIANCE_TEXTURE_TYPE)]);\r\n            effect.setTexture(\"depthSampler\", scene.prePassRenderer.getRenderTarget().textures[scene.prePassRenderer.getIndex(Constants.PREPASS_DEPTH_TEXTURE_TYPE)]);\r\n            effect.setTexture(\"albedoSampler\", scene.prePassRenderer.getRenderTarget().textures[scene.prePassRenderer.getIndex(Constants.PREPASS_ALBEDO_SQRT_TEXTURE_TYPE)]);\r\n            effect.setFloat2(\r\n                \"viewportSize\",\r\n                Math.tan(scene.activeCamera!.fov / 2) * scene.getEngine().getAspectRatio(scene.activeCamera!, true),\r\n                Math.tan(scene.activeCamera!.fov / 2)\r\n            );\r\n            effect.setArray3(\"diffusionS\", scene.subSurfaceConfiguration.ssDiffusionS);\r\n            effect.setArray(\"diffusionD\", scene.subSurfaceConfiguration.ssDiffusionD);\r\n            effect.setArray(\"filterRadii\", scene.subSurfaceConfiguration.ssFilterRadii);\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}