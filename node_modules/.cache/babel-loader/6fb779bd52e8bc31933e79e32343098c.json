{"ast":null,"code":"import \"core-js/modules/es.object.create.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport { __extends } from \"tslib\";\n/**\n * Groups all the scene component constants in one place to ease maintenance.\n * @hidden\n */\n\nvar SceneComponentConstants =\n/** @class */\nfunction () {\n  function SceneComponentConstants() {}\n\n  SceneComponentConstants.NAME_EFFECTLAYER = \"EffectLayer\";\n  SceneComponentConstants.NAME_LAYER = \"Layer\";\n  SceneComponentConstants.NAME_LENSFLARESYSTEM = \"LensFlareSystem\";\n  SceneComponentConstants.NAME_BOUNDINGBOXRENDERER = \"BoundingBoxRenderer\";\n  SceneComponentConstants.NAME_PARTICLESYSTEM = \"ParticleSystem\";\n  SceneComponentConstants.NAME_GAMEPAD = \"Gamepad\";\n  SceneComponentConstants.NAME_SIMPLIFICATIONQUEUE = \"SimplificationQueue\";\n  SceneComponentConstants.NAME_GEOMETRYBUFFERRENDERER = \"GeometryBufferRenderer\";\n  SceneComponentConstants.NAME_PREPASSRENDERER = \"PrePassRenderer\";\n  SceneComponentConstants.NAME_DEPTHRENDERER = \"DepthRenderer\";\n  SceneComponentConstants.NAME_DEPTHPEELINGRENDERER = \"DepthPeelingRenderer\";\n  SceneComponentConstants.NAME_POSTPROCESSRENDERPIPELINEMANAGER = \"PostProcessRenderPipelineManager\";\n  SceneComponentConstants.NAME_SPRITE = \"Sprite\";\n  SceneComponentConstants.NAME_SUBSURFACE = \"SubSurface\";\n  SceneComponentConstants.NAME_OUTLINERENDERER = \"Outline\";\n  SceneComponentConstants.NAME_PROCEDURALTEXTURE = \"ProceduralTexture\";\n  SceneComponentConstants.NAME_SHADOWGENERATOR = \"ShadowGenerator\";\n  SceneComponentConstants.NAME_OCTREE = \"Octree\";\n  SceneComponentConstants.NAME_PHYSICSENGINE = \"PhysicsEngine\";\n  SceneComponentConstants.NAME_AUDIO = \"Audio\";\n  SceneComponentConstants.STEP_ISREADYFORMESH_EFFECTLAYER = 0;\n  SceneComponentConstants.STEP_BEFOREEVALUATEACTIVEMESH_BOUNDINGBOXRENDERER = 0;\n  SceneComponentConstants.STEP_EVALUATESUBMESH_BOUNDINGBOXRENDERER = 0;\n  SceneComponentConstants.STEP_PREACTIVEMESH_BOUNDINGBOXRENDERER = 0;\n  SceneComponentConstants.STEP_CAMERADRAWRENDERTARGET_EFFECTLAYER = 1;\n  SceneComponentConstants.STEP_BEFORECAMERADRAW_PREPASS = 0;\n  SceneComponentConstants.STEP_BEFORECAMERADRAW_EFFECTLAYER = 1;\n  SceneComponentConstants.STEP_BEFORECAMERADRAW_LAYER = 2;\n  SceneComponentConstants.STEP_BEFORERENDERTARGETDRAW_PREPASS = 0;\n  SceneComponentConstants.STEP_BEFORERENDERTARGETDRAW_LAYER = 1;\n  SceneComponentConstants.STEP_BEFORERENDERINGMESH_PREPASS = 0;\n  SceneComponentConstants.STEP_BEFORERENDERINGMESH_OUTLINE = 1;\n  SceneComponentConstants.STEP_AFTERRENDERINGMESH_PREPASS = 0;\n  SceneComponentConstants.STEP_AFTERRENDERINGMESH_OUTLINE = 1;\n  SceneComponentConstants.STEP_AFTERRENDERINGGROUPDRAW_EFFECTLAYER_DRAW = 0;\n  SceneComponentConstants.STEP_AFTERRENDERINGGROUPDRAW_BOUNDINGBOXRENDERER = 1;\n  SceneComponentConstants.STEP_BEFORECAMERAUPDATE_SIMPLIFICATIONQUEUE = 0;\n  SceneComponentConstants.STEP_BEFORECAMERAUPDATE_GAMEPAD = 1;\n  SceneComponentConstants.STEP_BEFORECLEAR_PROCEDURALTEXTURE = 0;\n  SceneComponentConstants.STEP_AFTERRENDERTARGETDRAW_PREPASS = 0;\n  SceneComponentConstants.STEP_AFTERRENDERTARGETDRAW_LAYER = 1;\n  SceneComponentConstants.STEP_AFTERCAMERADRAW_PREPASS = 0;\n  SceneComponentConstants.STEP_AFTERCAMERADRAW_EFFECTLAYER = 1;\n  SceneComponentConstants.STEP_AFTERCAMERADRAW_LENSFLARESYSTEM = 2;\n  SceneComponentConstants.STEP_AFTERCAMERADRAW_EFFECTLAYER_DRAW = 3;\n  SceneComponentConstants.STEP_AFTERCAMERADRAW_LAYER = 4;\n  SceneComponentConstants.STEP_AFTERRENDER_AUDIO = 0;\n  SceneComponentConstants.STEP_GATHERRENDERTARGETS_DEPTHRENDERER = 0;\n  SceneComponentConstants.STEP_GATHERRENDERTARGETS_GEOMETRYBUFFERRENDERER = 1;\n  SceneComponentConstants.STEP_GATHERRENDERTARGETS_SHADOWGENERATOR = 2;\n  SceneComponentConstants.STEP_GATHERRENDERTARGETS_POSTPROCESSRENDERPIPELINEMANAGER = 3;\n  SceneComponentConstants.STEP_GATHERACTIVECAMERARENDERTARGETS_DEPTHRENDERER = 0;\n  SceneComponentConstants.STEP_BEFORECLEARSTAGE_PREPASS = 0;\n  SceneComponentConstants.STEP_BEFORERENDERTARGETCLEARSTAGE_PREPASS = 0;\n  SceneComponentConstants.STEP_POINTERMOVE_SPRITE = 0;\n  SceneComponentConstants.STEP_POINTERDOWN_SPRITE = 0;\n  SceneComponentConstants.STEP_POINTERUP_SPRITE = 0;\n  return SceneComponentConstants;\n}();\n\nexport { SceneComponentConstants };\n/**\n * Representation of a stage in the scene (Basically a list of ordered steps)\n * @hidden\n */\n\nvar Stage =\n/** @class */\nfunction (_super) {\n  __extends(Stage, _super);\n  /**\n   * Hide ctor from the rest of the world.\n   * @param items The items to add.\n   */\n\n\n  function Stage(items) {\n    return _super.apply(this, items) || this;\n  }\n  /**\n   * Creates a new Stage.\n   * @returns A new instance of a Stage\n   */\n\n\n  Stage.Create = function () {\n    return Object.create(Stage.prototype);\n  };\n  /**\n   * Registers a step in an ordered way in the targeted stage.\n   * @param index Defines the position to register the step in\n   * @param component Defines the component attached to the step\n   * @param action Defines the action to launch during the step\n   */\n\n\n  Stage.prototype.registerStep = function (index, component, action) {\n    var i = 0;\n    var maxIndex = Number.MAX_VALUE;\n\n    for (; i < this.length; i++) {\n      var step = this[i];\n      maxIndex = step.index;\n\n      if (index < maxIndex) {\n        break;\n      }\n    }\n\n    this.splice(i, 0, {\n      index: index,\n      component: component,\n      action: action.bind(component)\n    });\n  };\n  /**\n   * Clears all the steps from the stage.\n   */\n\n\n  Stage.prototype.clear = function () {\n    this.length = 0;\n  };\n\n  return Stage;\n}(Array);\n\nexport { Stage };","map":{"version":3,"mappings":";;;;;AAcA;;;;;AAIA;AAAA;AAAA;AAAA,sCA6EC;;AA5E0BA,6CAAmB,aAAnB;AACAA,uCAAa,OAAb;AACAA,iDAAuB,iBAAvB;AACAA,qDAA2B,qBAA3B;AACAA,gDAAsB,gBAAtB;AACAA,yCAAe,SAAf;AACAA,qDAA2B,qBAA3B;AACAA,wDAA8B,wBAA9B;AACAA,iDAAuB,iBAAvB;AACAA,+CAAqB,eAArB;AACAA,sDAA4B,sBAA5B;AACAA,kEAAwC,kCAAxC;AACAA,wCAAc,QAAd;AACAA,4CAAkB,YAAlB;AACAA,iDAAuB,SAAvB;AACAA,mDAAyB,mBAAzB;AACAA,iDAAuB,iBAAvB;AACAA,wCAAc,QAAd;AACAA,+CAAqB,eAArB;AACAA,uCAAa,OAAb;AAEAA,4DAAkC,CAAlC;AAEAA,8EAAoD,CAApD;AAEAA,qEAA2C,CAA3C;AAEAA,mEAAyC,CAAzC;AAEAA,oEAA0C,CAA1C;AAEAA,0DAAgC,CAAhC;AACAA,8DAAoC,CAApC;AACAA,wDAA8B,CAA9B;AAEAA,gEAAsC,CAAtC;AACAA,8DAAoC,CAApC;AAEAA,6DAAmC,CAAnC;AACAA,6DAAmC,CAAnC;AAEAA,4DAAkC,CAAlC;AACAA,4DAAkC,CAAlC;AAEAA,0EAAgD,CAAhD;AACAA,6EAAmD,CAAnD;AAEAA,wEAA8C,CAA9C;AACAA,4DAAkC,CAAlC;AAEAA,+DAAqC,CAArC;AAEAA,+DAAqC,CAArC;AACAA,6DAAmC,CAAnC;AAEAA,yDAA+B,CAA/B;AACAA,6DAAmC,CAAnC;AACAA,iEAAuC,CAAvC;AACAA,kEAAwC,CAAxC;AACAA,uDAA6B,CAA7B;AAEAA,mDAAyB,CAAzB;AAEAA,mEAAyC,CAAzC;AACAA,4EAAkD,CAAlD;AACAA,qEAA2C,CAA3C;AACAA,sFAA4D,CAA5D;AAEAA,+EAAqD,CAArD;AAEAA,0DAAgC,CAAhC;AACAA,sEAA4C,CAA5C;AAEAA,oDAA0B,CAA1B;AACAA,oDAA0B,CAA1B;AACAA,kDAAwB,CAAxB;AAC3B;AAAC,CA7ED;;SAAaA;AA6Mb;;;;;AAIA;AAAA;AAAA;AAA+CC;AAC3C;;;;;;AAIA,iBAAoBC,KAApB,EAAsF;8BACnEA,UAAM;AACxB;AAED;;;;;;AAIOC,iBAAP;AACI,WAAOC,MAAM,CAACC,MAAP,CAAcF,KAAK,CAACG,SAApB,CAAP;AACH,GAFM;AAIP;;;;;;;;AAMOH,iCAAP,UAAoBI,KAApB,EAAmCC,SAAnC,EAA+DC,MAA/D,EAAwE;AACpE,QAAIC,CAAC,GAAG,CAAR;AACA,QAAIC,QAAQ,GAAGC,MAAM,CAACC,SAAtB;;AACA,WAAOH,CAAC,GAAG,KAAKI,MAAhB,EAAwBJ,CAAC,EAAzB,EAA6B;AACzB,UAAMK,IAAI,GAAG,KAAKL,CAAL,CAAb;AACAC,cAAQ,GAAGI,IAAI,CAACR,KAAhB;;AACA,UAAIA,KAAK,GAAGI,QAAZ,EAAsB;AAClB;AACH;AACJ;;AACD,SAAKK,MAAL,CAAYN,CAAZ,EAAe,CAAf,EAAkB;AAAEH,WAAK,OAAP;AAASC,eAAS,WAAlB;AAAoBC,YAAM,EAAEA,MAAM,CAACQ,IAAP,CAAYT,SAAZ;AAA5B,KAAlB;AACH,GAXM;AAaP;;;;;AAGOL,0BAAP;AACI,SAAKW,MAAL,GAAc,CAAd;AACH,GAFM;;AAGX;AAAC,CA1CD,CAA+CI,KAA/C","names":["SceneComponentConstants","__extends","items","Stage","Object","create","prototype","index","component","action","i","maxIndex","Number","MAX_VALUE","length","step","splice","bind","Array"],"sourceRoot":"","sources":["../../../../lts/core/generated/sceneComponent.ts"],"sourcesContent":["import type { Scene } from \"./scene\";\r\nimport type { SmartArrayNoDuplicate } from \"./Misc/smartArray\";\r\nimport type { Nullable } from \"./types\";\r\nimport type { PickingInfo } from \"./Collisions/pickingInfo\";\r\nimport type { AbstractScene } from \"./abstractScene\";\r\nimport type { IPointerEvent } from \"./Events/deviceInputEvents\";\r\n\r\ndeclare type Mesh = import(\"./Meshes/mesh\").Mesh;\r\ndeclare type Effect = import(\"./Materials/effect\").Effect;\r\ndeclare type Camera = import(\"./Cameras/camera\").Camera;\r\ndeclare type AbstractMesh = import(\"./Meshes/abstractMesh\").AbstractMesh;\r\ndeclare type SubMesh = import(\"./Meshes/subMesh\").SubMesh;\r\ndeclare type RenderTargetTexture = import(\"./Materials/Textures/renderTargetTexture\").RenderTargetTexture;\r\n\r\n/**\r\n * Groups all the scene component constants in one place to ease maintenance.\r\n * @hidden\r\n */\r\nexport class SceneComponentConstants {\r\n    public static readonly NAME_EFFECTLAYER = \"EffectLayer\";\r\n    public static readonly NAME_LAYER = \"Layer\";\r\n    public static readonly NAME_LENSFLARESYSTEM = \"LensFlareSystem\";\r\n    public static readonly NAME_BOUNDINGBOXRENDERER = \"BoundingBoxRenderer\";\r\n    public static readonly NAME_PARTICLESYSTEM = \"ParticleSystem\";\r\n    public static readonly NAME_GAMEPAD = \"Gamepad\";\r\n    public static readonly NAME_SIMPLIFICATIONQUEUE = \"SimplificationQueue\";\r\n    public static readonly NAME_GEOMETRYBUFFERRENDERER = \"GeometryBufferRenderer\";\r\n    public static readonly NAME_PREPASSRENDERER = \"PrePassRenderer\";\r\n    public static readonly NAME_DEPTHRENDERER = \"DepthRenderer\";\r\n    public static readonly NAME_DEPTHPEELINGRENDERER = \"DepthPeelingRenderer\";\r\n    public static readonly NAME_POSTPROCESSRENDERPIPELINEMANAGER = \"PostProcessRenderPipelineManager\";\r\n    public static readonly NAME_SPRITE = \"Sprite\";\r\n    public static readonly NAME_SUBSURFACE = \"SubSurface\";\r\n    public static readonly NAME_OUTLINERENDERER = \"Outline\";\r\n    public static readonly NAME_PROCEDURALTEXTURE = \"ProceduralTexture\";\r\n    public static readonly NAME_SHADOWGENERATOR = \"ShadowGenerator\";\r\n    public static readonly NAME_OCTREE = \"Octree\";\r\n    public static readonly NAME_PHYSICSENGINE = \"PhysicsEngine\";\r\n    public static readonly NAME_AUDIO = \"Audio\";\r\n\r\n    public static readonly STEP_ISREADYFORMESH_EFFECTLAYER = 0;\r\n\r\n    public static readonly STEP_BEFOREEVALUATEACTIVEMESH_BOUNDINGBOXRENDERER = 0;\r\n\r\n    public static readonly STEP_EVALUATESUBMESH_BOUNDINGBOXRENDERER = 0;\r\n\r\n    public static readonly STEP_PREACTIVEMESH_BOUNDINGBOXRENDERER = 0;\r\n\r\n    public static readonly STEP_CAMERADRAWRENDERTARGET_EFFECTLAYER = 1;\r\n\r\n    public static readonly STEP_BEFORECAMERADRAW_PREPASS = 0;\r\n    public static readonly STEP_BEFORECAMERADRAW_EFFECTLAYER = 1;\r\n    public static readonly STEP_BEFORECAMERADRAW_LAYER = 2;\r\n\r\n    public static readonly STEP_BEFORERENDERTARGETDRAW_PREPASS = 0;\r\n    public static readonly STEP_BEFORERENDERTARGETDRAW_LAYER = 1;\r\n\r\n    public static readonly STEP_BEFORERENDERINGMESH_PREPASS = 0;\r\n    public static readonly STEP_BEFORERENDERINGMESH_OUTLINE = 1;\r\n\r\n    public static readonly STEP_AFTERRENDERINGMESH_PREPASS = 0;\r\n    public static readonly STEP_AFTERRENDERINGMESH_OUTLINE = 1;\r\n\r\n    public static readonly STEP_AFTERRENDERINGGROUPDRAW_EFFECTLAYER_DRAW = 0;\r\n    public static readonly STEP_AFTERRENDERINGGROUPDRAW_BOUNDINGBOXRENDERER = 1;\r\n\r\n    public static readonly STEP_BEFORECAMERAUPDATE_SIMPLIFICATIONQUEUE = 0;\r\n    public static readonly STEP_BEFORECAMERAUPDATE_GAMEPAD = 1;\r\n\r\n    public static readonly STEP_BEFORECLEAR_PROCEDURALTEXTURE = 0;\r\n\r\n    public static readonly STEP_AFTERRENDERTARGETDRAW_PREPASS = 0;\r\n    public static readonly STEP_AFTERRENDERTARGETDRAW_LAYER = 1;\r\n\r\n    public static readonly STEP_AFTERCAMERADRAW_PREPASS = 0;\r\n    public static readonly STEP_AFTERCAMERADRAW_EFFECTLAYER = 1;\r\n    public static readonly STEP_AFTERCAMERADRAW_LENSFLARESYSTEM = 2;\r\n    public static readonly STEP_AFTERCAMERADRAW_EFFECTLAYER_DRAW = 3;\r\n    public static readonly STEP_AFTERCAMERADRAW_LAYER = 4;\r\n\r\n    public static readonly STEP_AFTERRENDER_AUDIO = 0;\r\n\r\n    public static readonly STEP_GATHERRENDERTARGETS_DEPTHRENDERER = 0;\r\n    public static readonly STEP_GATHERRENDERTARGETS_GEOMETRYBUFFERRENDERER = 1;\r\n    public static readonly STEP_GATHERRENDERTARGETS_SHADOWGENERATOR = 2;\r\n    public static readonly STEP_GATHERRENDERTARGETS_POSTPROCESSRENDERPIPELINEMANAGER = 3;\r\n\r\n    public static readonly STEP_GATHERACTIVECAMERARENDERTARGETS_DEPTHRENDERER = 0;\r\n\r\n    public static readonly STEP_BEFORECLEARSTAGE_PREPASS = 0;\r\n    public static readonly STEP_BEFORERENDERTARGETCLEARSTAGE_PREPASS = 0;\r\n\r\n    public static readonly STEP_POINTERMOVE_SPRITE = 0;\r\n    public static readonly STEP_POINTERDOWN_SPRITE = 0;\r\n    public static readonly STEP_POINTERUP_SPRITE = 0;\r\n}\r\n\r\n/**\r\n * This represents a scene component.\r\n *\r\n * This is used to decouple the dependency the scene is having on the different workloads like\r\n * layers, post processes...\r\n */\r\nexport interface ISceneComponent {\r\n    /**\r\n     * The name of the component. Each component must have a unique name.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    scene: Scene;\r\n\r\n    /**\r\n     * Register the component to one instance of a scene.\r\n     */\r\n    register(): void;\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    rebuild(): void;\r\n\r\n    /**\r\n     * Disposes the component and the associated ressources.\r\n     */\r\n    dispose(): void;\r\n}\r\n\r\n/**\r\n * This represents a SERIALIZABLE scene component.\r\n *\r\n * This extends Scene Component to add Serialization methods on top.\r\n */\r\nexport interface ISceneSerializableComponent extends ISceneComponent {\r\n    /**\r\n     * Adds all the elements from the container to the scene\r\n     * @param container the container holding the elements\r\n     */\r\n    addFromContainer(container: AbstractScene): void;\r\n\r\n    /**\r\n     * Removes all the elements in the container from the scene\r\n     * @param container contains the elements to remove\r\n     * @param dispose if the removed element should be disposed (default: false)\r\n     */\r\n    removeFromContainer(container: AbstractScene, dispose?: boolean): void;\r\n\r\n    /**\r\n     * Serializes the component data to the specified json object\r\n     * @param serializationObject The object to serialize to\r\n     */\r\n    serialize(serializationObject: any): void;\r\n}\r\n\r\n/**\r\n * Strong typing of a Mesh related stage step action\r\n */\r\nexport type MeshStageAction = (mesh: AbstractMesh, hardwareInstancedRendering: boolean) => boolean;\r\n\r\n/**\r\n * Strong typing of a Evaluate Sub Mesh related stage step action\r\n */\r\nexport type EvaluateSubMeshStageAction = (mesh: AbstractMesh, subMesh: SubMesh) => void;\r\n\r\n/**\r\n * Strong typing of a pre active Mesh related stage step action\r\n */\r\nexport type PreActiveMeshStageAction = (mesh: AbstractMesh) => void;\r\n\r\n/**\r\n * Strong typing of a Camera related stage step action\r\n */\r\nexport type CameraStageAction = (camera: Camera) => void;\r\n\r\n/**\r\n * Strong typing of a Camera Frame buffer related stage step action\r\n */\r\nexport type CameraStageFrameBufferAction = (camera: Camera) => boolean;\r\n\r\n/**\r\n * Strong typing of a Render Target related stage step action\r\n */\r\nexport type RenderTargetStageAction = (renderTarget: RenderTargetTexture, faceIndex?: number, layer?: number) => void;\r\n\r\n/**\r\n * Strong typing of a RenderingGroup related stage step action\r\n */\r\nexport type RenderingGroupStageAction = (renderingGroupId: number) => void;\r\n\r\n/**\r\n * Strong typing of a Mesh Render related stage step action\r\n */\r\nexport type RenderingMeshStageAction = (mesh: Mesh, subMesh: SubMesh, batch: any, effect: Nullable<Effect>) => void;\r\n\r\n/**\r\n * Strong typing of a simple stage step action\r\n */\r\nexport type SimpleStageAction = () => void;\r\n\r\n/**\r\n * Strong typing of a render target action.\r\n */\r\nexport type RenderTargetsStageAction = (renderTargets: SmartArrayNoDuplicate<RenderTargetTexture>) => void;\r\n\r\n/**\r\n * Strong typing of a pointer move action.\r\n */\r\nexport type PointerMoveStageAction = (\r\n    unTranslatedPointerX: number,\r\n    unTranslatedPointerY: number,\r\n    pickResult: Nullable<PickingInfo>,\r\n    isMeshPicked: boolean,\r\n    element: Nullable<HTMLElement>\r\n) => Nullable<PickingInfo>;\r\n\r\n/**\r\n * Strong typing of a pointer up/down action.\r\n */\r\nexport type PointerUpDownStageAction = (unTranslatedPointerX: number, unTranslatedPointerY: number, pickResult: Nullable<PickingInfo>, evt: IPointerEvent) => Nullable<PickingInfo>;\r\n\r\n/**\r\n * Representation of a stage in the scene (Basically a list of ordered steps)\r\n * @hidden\r\n */\r\nexport class Stage<T extends Function> extends Array<{ index: number; component: ISceneComponent; action: T }> {\r\n    /**\r\n     * Hide ctor from the rest of the world.\r\n     * @param items The items to add.\r\n     */\r\n    private constructor(items?: { index: number; component: ISceneComponent; action: T }[]) {\r\n        super(...(<any>items));\r\n    }\r\n\r\n    /**\r\n     * Creates a new Stage.\r\n     * @returns A new instance of a Stage\r\n     */\r\n    static Create<T extends Function>(): Stage<T> {\r\n        return Object.create(Stage.prototype);\r\n    }\r\n\r\n    /**\r\n     * Registers a step in an ordered way in the targeted stage.\r\n     * @param index Defines the position to register the step in\r\n     * @param component Defines the component attached to the step\r\n     * @param action Defines the action to launch during the step\r\n     */\r\n    public registerStep(index: number, component: ISceneComponent, action: T): void {\r\n        let i = 0;\r\n        let maxIndex = Number.MAX_VALUE;\r\n        for (; i < this.length; i++) {\r\n            const step = this[i];\r\n            maxIndex = step.index;\r\n            if (index < maxIndex) {\r\n                break;\r\n            }\r\n        }\r\n        this.splice(i, 0, { index, component, action: action.bind(component) });\r\n    }\r\n\r\n    /**\r\n     * Clears all the steps from the stage.\r\n     */\r\n    public clear(): void {\r\n        this.length = 0;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}