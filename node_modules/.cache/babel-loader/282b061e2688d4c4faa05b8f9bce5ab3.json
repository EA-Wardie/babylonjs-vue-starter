{"ast":null,"code":"import { VirtualJoystick, JoystickAxis } from \"../../Misc/virtualJoystick.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { Matrix, Vector3 } from \"../../Maths/math.vector.js\";\nimport { FreeCameraInputsManager } from \"../../Cameras/freeCameraInputsManager.js\";\n/**\n * Add virtual joystick input support to the input manager.\n * @returns the current input manager\n */\n\nFreeCameraInputsManager.prototype.addVirtualJoystick = function () {\n  this.add(new FreeCameraVirtualJoystickInput());\n  return this;\n};\n/**\n * Manage the Virtual Joystick inputs to control the movement of a free camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\n\n\nvar FreeCameraVirtualJoystickInput =\n/** @class */\nfunction () {\n  function FreeCameraVirtualJoystickInput() {}\n  /**\n   * Gets the left stick of the virtual joystick.\n   * @returns The virtual Joystick\n   */\n\n\n  FreeCameraVirtualJoystickInput.prototype.getLeftJoystick = function () {\n    return this._leftjoystick;\n  };\n  /**\n   * Gets the right stick of the virtual joystick.\n   * @returns The virtual Joystick\n   */\n\n\n  FreeCameraVirtualJoystickInput.prototype.getRightJoystick = function () {\n    return this._rightjoystick;\n  };\n  /**\n   * Update the current camera state depending on the inputs that have been used this frame.\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n   */\n\n\n  FreeCameraVirtualJoystickInput.prototype.checkInputs = function () {\n    if (this._leftjoystick) {\n      var camera = this.camera;\n      var speed = camera._computeLocalCameraSpeed() * 50;\n      var cameraTransform = Matrix.RotationYawPitchRoll(camera.rotation.y, camera.rotation.x, 0);\n      var deltaTransform = Vector3.TransformCoordinates(new Vector3(this._leftjoystick.deltaPosition.x * speed, this._leftjoystick.deltaPosition.y * speed, this._leftjoystick.deltaPosition.z * speed), cameraTransform);\n      camera.cameraDirection = camera.cameraDirection.add(deltaTransform);\n      camera.cameraRotation = camera.cameraRotation.addVector3(this._rightjoystick.deltaPosition);\n\n      if (!this._leftjoystick.pressed) {\n        this._leftjoystick.deltaPosition = this._leftjoystick.deltaPosition.scale(0.9);\n      }\n\n      if (!this._rightjoystick.pressed) {\n        this._rightjoystick.deltaPosition = this._rightjoystick.deltaPosition.scale(0.9);\n      }\n    }\n  };\n  /**\n   * Attach the input controls to a specific dom element to get the input from.\n   */\n\n\n  FreeCameraVirtualJoystickInput.prototype.attachControl = function () {\n    this._leftjoystick = new VirtualJoystick(true);\n\n    this._leftjoystick.setAxisForUpDown(JoystickAxis.Z);\n\n    this._leftjoystick.setAxisForLeftRight(JoystickAxis.X);\n\n    this._leftjoystick.setJoystickSensibility(0.15);\n\n    this._rightjoystick = new VirtualJoystick(false);\n\n    this._rightjoystick.setAxisForUpDown(JoystickAxis.X);\n\n    this._rightjoystick.setAxisForLeftRight(JoystickAxis.Y);\n\n    this._rightjoystick.reverseUpDown = true;\n\n    this._rightjoystick.setJoystickSensibility(0.05);\n\n    this._rightjoystick.setJoystickColor(\"yellow\");\n  };\n  /**\n   * Detach the current controls from the specified dom element.\n   */\n\n\n  FreeCameraVirtualJoystickInput.prototype.detachControl = function () {\n    this._leftjoystick.releaseCanvas();\n\n    this._rightjoystick.releaseCanvas();\n  };\n  /**\n   * Gets the class name of the current input.\n   * @returns the class name\n   */\n\n\n  FreeCameraVirtualJoystickInput.prototype.getClassName = function () {\n    return \"FreeCameraVirtualJoystickInput\";\n  };\n  /**\n   * Get the friendly name associated with the input class.\n   * @returns the input friendly name\n   */\n\n\n  FreeCameraVirtualJoystickInput.prototype.getSimpleName = function () {\n    return \"virtualJoystick\";\n  };\n\n  return FreeCameraVirtualJoystickInput;\n}();\n\nexport { FreeCameraVirtualJoystickInput };\nCameraInputTypes[\"FreeCameraVirtualJoystickInput\"] = FreeCameraVirtualJoystickInput;","map":{"version":3,"mappings":"AAAA,SAASA,eAAT,EAA0BC,YAA1B,QAA8C,+BAA9C;AAEA,SAASC,gBAAT,QAAiC,sCAAjC;AAEA,SAASC,MAAT,EAAiBC,OAAjB,QAAgC,4BAAhC;AACA,SAASC,uBAAT,QAAwC,0CAAxC;AAaA;;;;;AAIAA,uBAAuB,CAACC,SAAxB,CAAkCC,kBAAlC,GAAuD;AACnD,OAAKC,GAAL,CAAS,IAAIC,8BAAJ,EAAT;AACA,SAAO,IAAP;AACH,CAHD;AAKA;;;;;;AAIA;AAAA;AAAA;AAAA,6CAyFC;AAhFG;;;;;;AAIOA,6DAAP;AACI,WAAO,KAAKC,aAAZ;AACH,GAFM;AAIP;;;;;;AAIOD,8DAAP;AACI,WAAO,KAAKE,cAAZ;AACH,GAFM;AAIP;;;;;;AAIOF,yDAAP;AACI,QAAI,KAAKC,aAAT,EAAwB;AACpB,UAAME,MAAM,GAAG,KAAKA,MAApB;AACA,UAAMC,KAAK,GAAGD,MAAM,CAACE,wBAAP,KAAoC,EAAlD;AACA,UAAMC,eAAe,GAAGZ,MAAM,CAACa,oBAAP,CAA4BJ,MAAM,CAACK,QAAP,CAAgBC,CAA5C,EAA+CN,MAAM,CAACK,QAAP,CAAgBE,CAA/D,EAAkE,CAAlE,CAAxB;AACA,UAAMC,cAAc,GAAGhB,OAAO,CAACiB,oBAAR,CACnB,IAAIjB,OAAJ,CAAY,KAAKM,aAAL,CAAmBY,aAAnB,CAAiCH,CAAjC,GAAqCN,KAAjD,EAAwD,KAAKH,aAAL,CAAmBY,aAAnB,CAAiCJ,CAAjC,GAAqCL,KAA7F,EAAoG,KAAKH,aAAL,CAAmBY,aAAnB,CAAiCC,CAAjC,GAAqCV,KAAzI,CADmB,EAEnBE,eAFmB,CAAvB;AAIAH,YAAM,CAACY,eAAP,GAAyBZ,MAAM,CAACY,eAAP,CAAuBhB,GAAvB,CAA2BY,cAA3B,CAAzB;AACAR,YAAM,CAACa,cAAP,GAAwBb,MAAM,CAACa,cAAP,CAAsBC,UAAtB,CAAiC,KAAKf,cAAL,CAAoBW,aAArD,CAAxB;;AAEA,UAAI,CAAC,KAAKZ,aAAL,CAAmBiB,OAAxB,EAAiC;AAC7B,aAAKjB,aAAL,CAAmBY,aAAnB,GAAmC,KAAKZ,aAAL,CAAmBY,aAAnB,CAAiCM,KAAjC,CAAuC,GAAvC,CAAnC;AACH;;AACD,UAAI,CAAC,KAAKjB,cAAL,CAAoBgB,OAAzB,EAAkC;AAC9B,aAAKhB,cAAL,CAAoBW,aAApB,GAAoC,KAAKX,cAAL,CAAoBW,aAApB,CAAkCM,KAAlC,CAAwC,GAAxC,CAApC;AACH;AACJ;AACJ,GAnBM;AAqBP;;;;;AAGOnB,2DAAP;AACI,SAAKC,aAAL,GAAqB,IAAIV,eAAJ,CAAoB,IAApB,CAArB;;AACA,SAAKU,aAAL,CAAmBmB,gBAAnB,CAAoC5B,YAAY,CAAC6B,CAAjD;;AACA,SAAKpB,aAAL,CAAmBqB,mBAAnB,CAAuC9B,YAAY,CAAC+B,CAApD;;AACA,SAAKtB,aAAL,CAAmBuB,sBAAnB,CAA0C,IAA1C;;AACA,SAAKtB,cAAL,GAAsB,IAAIX,eAAJ,CAAoB,KAApB,CAAtB;;AACA,SAAKW,cAAL,CAAoBkB,gBAApB,CAAqC5B,YAAY,CAAC+B,CAAlD;;AACA,SAAKrB,cAAL,CAAoBoB,mBAApB,CAAwC9B,YAAY,CAACiC,CAArD;;AACA,SAAKvB,cAAL,CAAoBwB,aAApB,GAAoC,IAApC;;AACA,SAAKxB,cAAL,CAAoBsB,sBAApB,CAA2C,IAA3C;;AACA,SAAKtB,cAAL,CAAoByB,gBAApB,CAAqC,QAArC;AACH,GAXM;AAaP;;;;;AAGO3B,2DAAP;AACI,SAAKC,aAAL,CAAmB2B,aAAnB;;AACA,SAAK1B,cAAL,CAAoB0B,aAApB;AACH,GAHM;AAKP;;;;;;AAIO5B,0DAAP;AACI,WAAO,gCAAP;AACH,GAFM;AAIP;;;;;;AAIOA,2DAAP;AACI,WAAO,iBAAP;AACH,GAFM;;AAGX;AAAC,CAzFD;;;AA2FMP,gBAAiB,CAAC,gCAAD,CAAjB,GAAsDO,8BAAtD","names":["VirtualJoystick","JoystickAxis","CameraInputTypes","Matrix","Vector3","FreeCameraInputsManager","prototype","addVirtualJoystick","add","FreeCameraVirtualJoystickInput","_leftjoystick","_rightjoystick","camera","speed","_computeLocalCameraSpeed","cameraTransform","RotationYawPitchRoll","rotation","y","x","deltaTransform","TransformCoordinates","deltaPosition","z","cameraDirection","cameraRotation","addVector3","pressed","scale","setAxisForUpDown","Z","setAxisForLeftRight","X","setJoystickSensibility","Y","reverseUpDown","setJoystickColor","releaseCanvas"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Cameras/Inputs/freeCameraVirtualJoystickInput.ts"],"sourcesContent":["import { VirtualJoystick, JoystickAxis } from \"../../Misc/virtualJoystick\";\r\nimport type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport type { FreeCamera } from \"../../Cameras/freeCamera\";\r\nimport { Matrix, Vector3 } from \"../../Maths/math.vector\";\r\nimport { FreeCameraInputsManager } from \"../../Cameras/freeCameraInputsManager\";\r\n\r\n// Module augmentation to abstract virtual joystick from camera.\r\ndeclare module \"../../Cameras/freeCameraInputsManager\" {\r\n    export interface FreeCameraInputsManager {\r\n        /**\r\n         * Add virtual joystick input support to the input manager.\r\n         * @returns the current input manager\r\n         */\r\n        addVirtualJoystick(): FreeCameraInputsManager;\r\n    }\r\n}\r\n\r\n/**\r\n * Add virtual joystick input support to the input manager.\r\n * @returns the current input manager\r\n */\r\nFreeCameraInputsManager.prototype.addVirtualJoystick = function (): FreeCameraInputsManager {\r\n    this.add(new FreeCameraVirtualJoystickInput());\r\n    return this;\r\n};\r\n\r\n/**\r\n * Manage the Virtual Joystick inputs to control the movement of a free camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class FreeCameraVirtualJoystickInput implements ICameraInput<FreeCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: FreeCamera;\r\n\r\n    private _leftjoystick: VirtualJoystick;\r\n    private _rightjoystick: VirtualJoystick;\r\n\r\n    /**\r\n     * Gets the left stick of the virtual joystick.\r\n     * @returns The virtual Joystick\r\n     */\r\n    public getLeftJoystick(): VirtualJoystick {\r\n        return this._leftjoystick;\r\n    }\r\n\r\n    /**\r\n     * Gets the right stick of the virtual joystick.\r\n     * @returns The virtual Joystick\r\n     */\r\n    public getRightJoystick(): VirtualJoystick {\r\n        return this._rightjoystick;\r\n    }\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs() {\r\n        if (this._leftjoystick) {\r\n            const camera = this.camera;\r\n            const speed = camera._computeLocalCameraSpeed() * 50;\r\n            const cameraTransform = Matrix.RotationYawPitchRoll(camera.rotation.y, camera.rotation.x, 0);\r\n            const deltaTransform = Vector3.TransformCoordinates(\r\n                new Vector3(this._leftjoystick.deltaPosition.x * speed, this._leftjoystick.deltaPosition.y * speed, this._leftjoystick.deltaPosition.z * speed),\r\n                cameraTransform\r\n            );\r\n            camera.cameraDirection = camera.cameraDirection.add(deltaTransform);\r\n            camera.cameraRotation = camera.cameraRotation.addVector3(this._rightjoystick.deltaPosition);\r\n\r\n            if (!this._leftjoystick.pressed) {\r\n                this._leftjoystick.deltaPosition = this._leftjoystick.deltaPosition.scale(0.9);\r\n            }\r\n            if (!this._rightjoystick.pressed) {\r\n                this._rightjoystick.deltaPosition = this._rightjoystick.deltaPosition.scale(0.9);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     */\r\n    public attachControl(): void {\r\n        this._leftjoystick = new VirtualJoystick(true);\r\n        this._leftjoystick.setAxisForUpDown(JoystickAxis.Z);\r\n        this._leftjoystick.setAxisForLeftRight(JoystickAxis.X);\r\n        this._leftjoystick.setJoystickSensibility(0.15);\r\n        this._rightjoystick = new VirtualJoystick(false);\r\n        this._rightjoystick.setAxisForUpDown(JoystickAxis.X);\r\n        this._rightjoystick.setAxisForLeftRight(JoystickAxis.Y);\r\n        this._rightjoystick.reverseUpDown = true;\r\n        this._rightjoystick.setJoystickSensibility(0.05);\r\n        this._rightjoystick.setJoystickColor(\"yellow\");\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        this._leftjoystick.releaseCanvas();\r\n        this._rightjoystick.releaseCanvas();\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FreeCameraVirtualJoystickInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"virtualJoystick\";\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FreeCameraVirtualJoystickInput\"] = FreeCameraVirtualJoystickInput;\r\n"]},"metadata":{},"sourceType":"module"}