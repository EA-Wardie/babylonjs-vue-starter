{"ast":null,"code":"import \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { KeyboardEventTypes } from \"../../Events/keyboardEvents.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Tools } from \"../../Misc/tools.js\";\n/**\n * Manage the keyboard inputs to control the movement of a free camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\n\nvar FreeCameraKeyboardMoveInput =\n/** @class */\nfunction () {\n  function FreeCameraKeyboardMoveInput() {\n    /**\n     * Gets or Set the list of keyboard keys used to control the forward move of the camera.\n     */\n    this.keysUp = [38];\n    /**\n     * Gets or Set the list of keyboard keys used to control the upward move of the camera.\n     */\n\n    this.keysUpward = [33];\n    /**\n     * Gets or Set the list of keyboard keys used to control the backward move of the camera.\n     */\n\n    this.keysDown = [40];\n    /**\n     * Gets or Set the list of keyboard keys used to control the downward move of the camera.\n     */\n\n    this.keysDownward = [34];\n    /**\n     * Gets or Set the list of keyboard keys used to control the left strafe move of the camera.\n     */\n\n    this.keysLeft = [37];\n    /**\n     * Gets or Set the list of keyboard keys used to control the right strafe move of the camera.\n     */\n\n    this.keysRight = [39];\n    /**\n     * Defines the pointer angular sensibility  along the X and Y axis or how fast is the camera rotating.\n     */\n\n    this.rotationSpeed = 0.5;\n    /**\n     * Gets or Set the list of keyboard keys used to control the left rotation move of the camera.\n     */\n\n    this.keysRotateLeft = [];\n    /**\n     * Gets or Set the list of keyboard keys used to control the right rotation move of the camera.\n     */\n\n    this.keysRotateRight = [];\n    this._keys = new Array();\n  }\n  /**\n   * Attach the input controls to a specific dom element to get the input from.\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n   */\n\n\n  FreeCameraKeyboardMoveInput.prototype.attachControl = function (noPreventDefault) {\n    var _this = this; // eslint-disable-next-line prefer-rest-params\n\n\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n\n    if (this._onCanvasBlurObserver) {\n      return;\n    }\n\n    this._scene = this.camera.getScene();\n    this._engine = this._scene.getEngine();\n    this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(function () {\n      _this._keys = [];\n    });\n    this._onKeyboardObserver = this._scene.onKeyboardObservable.add(function (info) {\n      var evt = info.event;\n\n      if (!evt.metaKey) {\n        if (info.type === KeyboardEventTypes.KEYDOWN) {\n          if (_this.keysUp.indexOf(evt.keyCode) !== -1 || _this.keysDown.indexOf(evt.keyCode) !== -1 || _this.keysLeft.indexOf(evt.keyCode) !== -1 || _this.keysRight.indexOf(evt.keyCode) !== -1 || _this.keysUpward.indexOf(evt.keyCode) !== -1 || _this.keysDownward.indexOf(evt.keyCode) !== -1 || _this.keysRotateLeft.indexOf(evt.keyCode) !== -1 || _this.keysRotateRight.indexOf(evt.keyCode) !== -1) {\n            var index = _this._keys.indexOf(evt.keyCode);\n\n            if (index === -1) {\n              _this._keys.push(evt.keyCode);\n            }\n\n            if (!noPreventDefault) {\n              evt.preventDefault();\n            }\n          }\n        } else {\n          if (_this.keysUp.indexOf(evt.keyCode) !== -1 || _this.keysDown.indexOf(evt.keyCode) !== -1 || _this.keysLeft.indexOf(evt.keyCode) !== -1 || _this.keysRight.indexOf(evt.keyCode) !== -1 || _this.keysUpward.indexOf(evt.keyCode) !== -1 || _this.keysDownward.indexOf(evt.keyCode) !== -1 || _this.keysRotateLeft.indexOf(evt.keyCode) !== -1 || _this.keysRotateRight.indexOf(evt.keyCode) !== -1) {\n            var index = _this._keys.indexOf(evt.keyCode);\n\n            if (index >= 0) {\n              _this._keys.splice(index, 1);\n            }\n\n            if (!noPreventDefault) {\n              evt.preventDefault();\n            }\n          }\n        }\n      }\n    });\n  };\n  /**\n   * Detach the current controls from the specified dom element.\n   */\n\n\n  FreeCameraKeyboardMoveInput.prototype.detachControl = function () {\n    if (this._scene) {\n      if (this._onKeyboardObserver) {\n        this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\n      }\n\n      if (this._onCanvasBlurObserver) {\n        this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\n      }\n\n      this._onKeyboardObserver = null;\n      this._onCanvasBlurObserver = null;\n    }\n\n    this._keys = [];\n  };\n  /**\n   * Update the current camera state depending on the inputs that have been used this frame.\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n   */\n\n\n  FreeCameraKeyboardMoveInput.prototype.checkInputs = function () {\n    if (this._onKeyboardObserver) {\n      var camera = this.camera; // Keyboard\n\n      for (var index = 0; index < this._keys.length; index++) {\n        var keyCode = this._keys[index];\n\n        var speed = camera._computeLocalCameraSpeed();\n\n        if (this.keysLeft.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(-speed, 0, 0);\n        } else if (this.keysUp.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(0, 0, speed);\n        } else if (this.keysRight.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(speed, 0, 0);\n        } else if (this.keysDown.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(0, 0, -speed);\n        } else if (this.keysUpward.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(0, speed, 0);\n        } else if (this.keysDownward.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(0, -speed, 0);\n        } else if (this.keysRotateLeft.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(0, 0, 0);\n\n          camera.cameraRotation.y -= this._getLocalRotation();\n        } else if (this.keysRotateRight.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(0, 0, 0);\n\n          camera.cameraRotation.y += this._getLocalRotation();\n        }\n\n        if (camera.getScene().useRightHandedSystem) {\n          camera._localDirection.z *= -1;\n        }\n\n        camera.getViewMatrix().invertToRef(camera._cameraTransformMatrix);\n        Vector3.TransformNormalToRef(camera._localDirection, camera._cameraTransformMatrix, camera._transformedDirection);\n        camera.cameraDirection.addInPlace(camera._transformedDirection);\n      }\n    }\n  };\n  /**\n   * Gets the class name of the current input.\n   * @returns the class name\n   */\n\n\n  FreeCameraKeyboardMoveInput.prototype.getClassName = function () {\n    return \"FreeCameraKeyboardMoveInput\";\n  };\n  /** @hidden */\n\n\n  FreeCameraKeyboardMoveInput.prototype._onLostFocus = function () {\n    this._keys = [];\n  };\n  /**\n   * Get the friendly name associated with the input class.\n   * @returns the input friendly name\n   */\n\n\n  FreeCameraKeyboardMoveInput.prototype.getSimpleName = function () {\n    return \"keyboard\";\n  };\n\n  FreeCameraKeyboardMoveInput.prototype._getLocalRotation = function () {\n    var rotation = this.rotationSpeed * this._engine.getDeltaTime() / 1000;\n\n    if (this.camera.getScene().useRightHandedSystem) {\n      rotation *= -1;\n    }\n\n    if (this.camera.parent && this.camera.parent._getWorldMatrixDeterminant() < 0) {\n      rotation *= -1;\n    }\n\n    return rotation;\n  };\n\n  __decorate([serialize()], FreeCameraKeyboardMoveInput.prototype, \"keysUp\", void 0);\n\n  __decorate([serialize()], FreeCameraKeyboardMoveInput.prototype, \"keysUpward\", void 0);\n\n  __decorate([serialize()], FreeCameraKeyboardMoveInput.prototype, \"keysDown\", void 0);\n\n  __decorate([serialize()], FreeCameraKeyboardMoveInput.prototype, \"keysDownward\", void 0);\n\n  __decorate([serialize()], FreeCameraKeyboardMoveInput.prototype, \"keysLeft\", void 0);\n\n  __decorate([serialize()], FreeCameraKeyboardMoveInput.prototype, \"keysRight\", void 0);\n\n  __decorate([serialize()], FreeCameraKeyboardMoveInput.prototype, \"rotationSpeed\", void 0);\n\n  __decorate([serialize()], FreeCameraKeyboardMoveInput.prototype, \"keysRotateLeft\", void 0);\n\n  __decorate([serialize()], FreeCameraKeyboardMoveInput.prototype, \"keysRotateRight\", void 0);\n\n  return FreeCameraKeyboardMoveInput;\n}();\n\nexport { FreeCameraKeyboardMoveInput };\nCameraInputTypes[\"FreeCameraKeyboardMoveInput\"] = FreeCameraKeyboardMoveInput;","map":{"version":3,"mappings":"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","names":["serialize","CameraInputTypes","KeyboardEventTypes","Vector3","Tools","Array","FreeCameraKeyboardMoveInput","noPreventDefault","BackCompatCameraNoPreventDefault","arguments","_onCanvasBlurObserver","_scene","camera","getScene","_engine","getEngine","onCanvasBlurObservable","add","_this","_keys","_onKeyboardObserver","onKeyboardObservable","info","evt","event","metaKey","type","KEYDOWN","keysUp","indexOf","keyCode","keysDown","keysLeft","keysRight","keysUpward","keysDownward","keysRotateLeft","keysRotateRight","index","push","preventDefault","splice","remove","length","speed","_computeLocalCameraSpeed","_localDirection","copyFromFloats","cameraRotation","y","_getLocalRotation","useRightHandedSystem","z","getViewMatrix","invertToRef","_cameraTransformMatrix","TransformNormalToRef","_transformedDirection","cameraDirection","addInPlace","rotation","rotationSpeed","getDeltaTime","parent","_getWorldMatrixDeterminant","__decorate"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Cameras/Inputs/freeCameraKeyboardMoveInput.ts"],"sourcesContent":["import { serialize } from \"../../Misc/decorators\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport type { FreeCamera } from \"../../Cameras/freeCamera\";\r\nimport type { KeyboardInfo } from \"../../Events/keyboardEvents\";\r\nimport { KeyboardEventTypes } from \"../../Events/keyboardEvents\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport type { Engine } from \"../../Engines/engine\";\r\nimport { Tools } from \"../../Misc/tools\";\r\n/**\r\n * Manage the keyboard inputs to control the movement of a free camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class FreeCameraKeyboardMoveInput implements ICameraInput<FreeCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: FreeCamera;\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the forward move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysUp = [38];\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the upward move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysUpward = [33];\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the backward move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysDown = [40];\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the downward move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysDownward = [34];\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the left strafe move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysLeft = [37];\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the right strafe move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysRight = [39];\r\n\r\n    /**\r\n     * Defines the pointer angular sensibility  along the X and Y axis or how fast is the camera rotating.\r\n     */\r\n    @serialize()\r\n    public rotationSpeed = 0.5;\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the left rotation move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysRotateLeft: number[] = [];\r\n\r\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the right rotation move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysRotateRight: number[] = [];\r\n\r\n    private _keys = new Array<number>();\r\n    private _onCanvasBlurObserver: Nullable<Observer<Engine>>;\r\n    private _onKeyboardObserver: Nullable<Observer<KeyboardInfo>>;\r\n    private _engine: Engine;\r\n    private _scene: Scene;\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        // eslint-disable-next-line prefer-rest-params\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n        if (this._onCanvasBlurObserver) {\r\n            return;\r\n        }\r\n\r\n        this._scene = this.camera.getScene();\r\n        this._engine = this._scene.getEngine();\r\n\r\n        this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(() => {\r\n            this._keys = [];\r\n        });\r\n\r\n        this._onKeyboardObserver = this._scene.onKeyboardObservable.add((info) => {\r\n            const evt = info.event;\r\n            if (!evt.metaKey) {\r\n                if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                    if (\r\n                        this.keysUp.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysDown.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysLeft.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRight.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysUpward.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysDownward.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotateLeft.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotateRight.indexOf(evt.keyCode) !== -1\r\n                    ) {\r\n                        const index = this._keys.indexOf(evt.keyCode);\r\n\r\n                        if (index === -1) {\r\n                            this._keys.push(evt.keyCode);\r\n                        }\r\n                        if (!noPreventDefault) {\r\n                            evt.preventDefault();\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (\r\n                        this.keysUp.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysDown.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysLeft.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRight.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysUpward.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysDownward.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotateLeft.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotateRight.indexOf(evt.keyCode) !== -1\r\n                    ) {\r\n                        const index = this._keys.indexOf(evt.keyCode);\r\n\r\n                        if (index >= 0) {\r\n                            this._keys.splice(index, 1);\r\n                        }\r\n                        if (!noPreventDefault) {\r\n                            evt.preventDefault();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        if (this._scene) {\r\n            if (this._onKeyboardObserver) {\r\n                this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\r\n            }\r\n\r\n            if (this._onCanvasBlurObserver) {\r\n                this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\r\n            }\r\n            this._onKeyboardObserver = null;\r\n            this._onCanvasBlurObserver = null;\r\n        }\r\n        this._keys = [];\r\n    }\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs(): void {\r\n        if (this._onKeyboardObserver) {\r\n            const camera = this.camera;\r\n            // Keyboard\r\n            for (let index = 0; index < this._keys.length; index++) {\r\n                const keyCode = this._keys[index];\r\n                const speed = camera._computeLocalCameraSpeed();\r\n\r\n                if (this.keysLeft.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(-speed, 0, 0);\r\n                } else if (this.keysUp.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, 0, speed);\r\n                } else if (this.keysRight.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(speed, 0, 0);\r\n                } else if (this.keysDown.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, 0, -speed);\r\n                } else if (this.keysUpward.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, speed, 0);\r\n                } else if (this.keysDownward.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, -speed, 0);\r\n                } else if (this.keysRotateLeft.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, 0, 0);\r\n                    camera.cameraRotation.y -= this._getLocalRotation();\r\n                } else if (this.keysRotateRight.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, 0, 0);\r\n                    camera.cameraRotation.y += this._getLocalRotation();\r\n                }\r\n\r\n                if (camera.getScene().useRightHandedSystem) {\r\n                    camera._localDirection.z *= -1;\r\n                }\r\n\r\n                camera.getViewMatrix().invertToRef(camera._cameraTransformMatrix);\r\n                Vector3.TransformNormalToRef(camera._localDirection, camera._cameraTransformMatrix, camera._transformedDirection);\r\n                camera.cameraDirection.addInPlace(camera._transformedDirection);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FreeCameraKeyboardMoveInput\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public _onLostFocus(): void {\r\n        this._keys = [];\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"keyboard\";\r\n    }\r\n\r\n    private _getLocalRotation(): number {\r\n        let rotation = (this.rotationSpeed * this._engine.getDeltaTime()) / 1000;\r\n        if (this.camera.getScene().useRightHandedSystem) {\r\n            rotation *= -1;\r\n        }\r\n        if (this.camera.parent && this.camera.parent._getWorldMatrixDeterminant() < 0) {\r\n            rotation *= -1;\r\n        }\r\n        return rotation;\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FreeCameraKeyboardMoveInput\"] = FreeCameraKeyboardMoveInput;\r\n"]},"metadata":{},"sourceType":"module"}