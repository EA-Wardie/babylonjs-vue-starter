{"ast":null,"code":"import { ThinEngine } from \"../../Engines/thinEngine.js\";\n\nThinEngine.prototype.setAlphaConstants = function (r, g, b, a) {\n  this._alphaState.setAlphaBlendConstants(r, g, b, a);\n};\n\nThinEngine.prototype.setAlphaMode = function (mode, noDepthWriteChange) {\n  if (noDepthWriteChange === void 0) {\n    noDepthWriteChange = false;\n  }\n\n  if (this._alphaMode === mode) {\n    return;\n  }\n\n  switch (mode) {\n    case 0:\n      this._alphaState.alphaBlend = false;\n      break;\n\n    case 7:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 8:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 2:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 6:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE, this._gl.ZERO, this._gl.ONE);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 1:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE, this._gl.ZERO, this._gl.ONE);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 3:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ZERO, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE, this._gl.ONE);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 4:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.DST_COLOR, this._gl.ZERO, this._gl.ONE, this._gl.ONE);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 5:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE, this._gl.ONE);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 9:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.CONSTANT_COLOR, this._gl.ONE_MINUS_CONSTANT_COLOR, this._gl.CONSTANT_ALPHA, this._gl.ONE_MINUS_CONSTANT_ALPHA);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 10:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 11:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE, this._gl.ONE, this._gl.ONE);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 12:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.DST_ALPHA, this._gl.ONE, this._gl.ZERO, this._gl.ZERO);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 13:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE_MINUS_DST_COLOR, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE_MINUS_DST_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 14:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 15:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE, this._gl.ONE, this._gl.ZERO);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 16:\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE_MINUS_DST_COLOR, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ZERO, this._gl.ONE);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 17:\n      // Same as ALPHA_COMBINE but accumulates (1 - alpha) values in the alpha channel for a later readout in order independant transparency\n      this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\n\n      this._alphaState.alphaBlend = true;\n      break;\n  }\n\n  if (!noDepthWriteChange) {\n    this.depthCullingState.depthMask = mode === 0;\n  }\n\n  this._alphaMode = mode;\n};\n\nThinEngine.prototype.getAlphaMode = function () {\n  return this._alphaMode;\n};\n\nThinEngine.prototype.setAlphaEquation = function (equation) {\n  if (this._alphaEquation === equation) {\n    return;\n  }\n\n  switch (equation) {\n    case 0:\n      this._alphaState.setAlphaEquationParameters(32774, 32774);\n\n      break;\n\n    case 1:\n      this._alphaState.setAlphaEquationParameters(32778, 32778);\n\n      break;\n\n    case 2:\n      this._alphaState.setAlphaEquationParameters(32779, 32779);\n\n      break;\n\n    case 3:\n      this._alphaState.setAlphaEquationParameters(32776, 32776);\n\n      break;\n\n    case 4:\n      this._alphaState.setAlphaEquationParameters(32775, 32775);\n\n      break;\n\n    case 5:\n      this._alphaState.setAlphaEquationParameters(32775, 32774);\n\n      break;\n  }\n\n  this._alphaEquation = equation;\n};\n\nThinEngine.prototype.getAlphaEquation = function () {\n  return this._alphaEquation;\n};","map":{"version":3,"mappings":"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","names":["ThinEngine","prototype","setAlphaConstants","r","g","b","a","_alphaState","setAlphaBlendConstants","setAlphaMode","mode","noDepthWriteChange","_alphaMode","alphaBlend","setAlphaBlendFunctionParameters","_gl","ONE","ONE_MINUS_SRC_ALPHA","SRC_ALPHA","ZERO","ONE_MINUS_SRC_COLOR","DST_COLOR","CONSTANT_COLOR","ONE_MINUS_CONSTANT_COLOR","CONSTANT_ALPHA","ONE_MINUS_CONSTANT_ALPHA","DST_ALPHA","ONE_MINUS_DST_COLOR","ONE_MINUS_DST_ALPHA","depthCullingState","depthMask","getAlphaMode","setAlphaEquation","equation","_alphaEquation","setAlphaEquationParameters","getAlphaEquation"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/Extensions/engine.alpha.ts"],"sourcesContent":["import { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport { Constants } from \"../constants\";\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n    export interface ThinEngine {\r\n        /**\r\n         * Sets alpha constants used by some alpha blending modes\r\n         * @param r defines the red component\r\n         * @param g defines the green component\r\n         * @param b defines the blue component\r\n         * @param a defines the alpha component\r\n         */\r\n        setAlphaConstants(r: number, g: number, b: number, a: number): void;\r\n\r\n        /**\r\n         * Sets the current alpha mode\r\n         * @param mode defines the mode to use (one of the Engine.ALPHA_XXX)\r\n         * @param noDepthWriteChange defines if depth writing state should remains unchanged (false by default)\r\n         * @see https://doc.babylonjs.com/resources/transparency_and_how_meshes_are_rendered\r\n         */\r\n        setAlphaMode(mode: number, noDepthWriteChange?: boolean): void;\r\n\r\n        /**\r\n         * Gets the current alpha mode\r\n         * @see https://doc.babylonjs.com/resources/transparency_and_how_meshes_are_rendered\r\n         * @returns the current alpha mode\r\n         */\r\n        getAlphaMode(): number;\r\n\r\n        /**\r\n         * Sets the current alpha equation\r\n         * @param equation defines the equation to use (one of the Engine.ALPHA_EQUATION_XXX)\r\n         */\r\n        setAlphaEquation(equation: number): void;\r\n\r\n        /**\r\n         * Gets the current alpha equation.\r\n         * @returns the current alpha equation\r\n         */\r\n        getAlphaEquation(): number;\r\n    }\r\n}\r\n\r\nThinEngine.prototype.setAlphaConstants = function (r: number, g: number, b: number, a: number) {\r\n    this._alphaState.setAlphaBlendConstants(r, g, b, a);\r\n};\r\n\r\nThinEngine.prototype.setAlphaMode = function (mode: number, noDepthWriteChange: boolean = false): void {\r\n    if (this._alphaMode === mode) {\r\n        return;\r\n    }\r\n\r\n    switch (mode) {\r\n        case Constants.ALPHA_DISABLE:\r\n            this._alphaState.alphaBlend = false;\r\n            break;\r\n        case Constants.ALPHA_PREMULTIPLIED:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_PREMULTIPLIED_PORTERDUFF:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_COMBINE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ONEONE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE, this._gl.ZERO, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ADD:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE, this._gl.ZERO, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_SUBTRACT:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ZERO, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_MULTIPLY:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.DST_COLOR, this._gl.ZERO, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_MAXIMIZED:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_INTERPOLATE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(\r\n                this._gl.CONSTANT_COLOR,\r\n                this._gl.ONE_MINUS_CONSTANT_COLOR,\r\n                this._gl.CONSTANT_ALPHA,\r\n                this._gl.ONE_MINUS_CONSTANT_ALPHA\r\n            );\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_SCREENMODE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ONEONE_ONEONE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ALPHATOCOLOR:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.DST_ALPHA, this._gl.ONE, this._gl.ZERO, this._gl.ZERO);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_REVERSEONEMINUS:\r\n            this._alphaState.setAlphaBlendFunctionParameters(\r\n                this._gl.ONE_MINUS_DST_COLOR,\r\n                this._gl.ONE_MINUS_SRC_COLOR,\r\n                this._gl.ONE_MINUS_DST_ALPHA,\r\n                this._gl.ONE_MINUS_SRC_ALPHA\r\n            );\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_SRC_DSTONEMINUSSRCALPHA:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ONEONE_ONEZERO:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE, this._gl.ONE, this._gl.ZERO);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_EXCLUSION:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE_MINUS_DST_COLOR, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ZERO, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_LAYER_ACCUMULATE:\r\n            // Same as ALPHA_COMBINE but accumulates (1 - alpha) values in the alpha channel for a later readout in order independant transparency\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n    }\r\n    if (!noDepthWriteChange) {\r\n        this.depthCullingState.depthMask = mode === Constants.ALPHA_DISABLE;\r\n    }\r\n    this._alphaMode = mode;\r\n};\r\n\r\nThinEngine.prototype.getAlphaMode = function (): number {\r\n    return this._alphaMode;\r\n};\r\n\r\nThinEngine.prototype.setAlphaEquation = function (equation: number): void {\r\n    if (this._alphaEquation === equation) {\r\n        return;\r\n    }\r\n\r\n    switch (equation) {\r\n        case Constants.ALPHA_EQUATION_ADD:\r\n            this._alphaState.setAlphaEquationParameters(Constants.GL_ALPHA_EQUATION_ADD, Constants.GL_ALPHA_EQUATION_ADD);\r\n            break;\r\n        case Constants.ALPHA_EQUATION_SUBSTRACT:\r\n            this._alphaState.setAlphaEquationParameters(Constants.GL_ALPHA_EQUATION_SUBTRACT, Constants.GL_ALPHA_EQUATION_SUBTRACT);\r\n            break;\r\n        case Constants.ALPHA_EQUATION_REVERSE_SUBTRACT:\r\n            this._alphaState.setAlphaEquationParameters(Constants.GL_ALPHA_EQUATION_REVERSE_SUBTRACT, Constants.GL_ALPHA_EQUATION_REVERSE_SUBTRACT);\r\n            break;\r\n        case Constants.ALPHA_EQUATION_MAX:\r\n            this._alphaState.setAlphaEquationParameters(Constants.GL_ALPHA_EQUATION_MAX, Constants.GL_ALPHA_EQUATION_MAX);\r\n            break;\r\n        case Constants.ALPHA_EQUATION_MIN:\r\n            this._alphaState.setAlphaEquationParameters(Constants.GL_ALPHA_EQUATION_MIN, Constants.GL_ALPHA_EQUATION_MIN);\r\n            break;\r\n        case Constants.ALPHA_EQUATION_DARKEN:\r\n            this._alphaState.setAlphaEquationParameters(Constants.GL_ALPHA_EQUATION_MIN, Constants.GL_ALPHA_EQUATION_ADD);\r\n            break;\r\n    }\r\n    this._alphaEquation = equation;\r\n};\r\n\r\nThinEngine.prototype.getAlphaEquation = function () {\r\n    return this._alphaEquation;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}