{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { WebXRExperienceHelper } from \"./webXRExperienceHelper.js\";\nimport { WebXRInput } from \"./webXRInput.js\";\nimport { WebXRControllerPointerSelection } from \"./features/WebXRControllerPointerSelection.js\";\nimport { WebXRNearInteraction } from \"./features/WebXRNearInteraction.js\";\nimport { WebXREnterExitUI } from \"./webXREnterExitUI.js\";\nimport { WebXRMotionControllerTeleportation } from \"./features/WebXRControllerTeleportation.js\";\nimport { Logger } from \"../Misc/logger.js\";\n/**\n * Options for the default xr helper\n */\n\nvar WebXRDefaultExperienceOptions =\n/** @class */\nfunction () {\n  function WebXRDefaultExperienceOptions() {}\n\n  return WebXRDefaultExperienceOptions;\n}();\n\nexport { WebXRDefaultExperienceOptions };\n/**\n * Default experience which provides a similar setup to the previous webVRExperience\n */\n\nvar WebXRDefaultExperience =\n/** @class */\nfunction () {\n  function WebXRDefaultExperience() {}\n  /**\n   * Creates the default xr experience\n   * @param scene scene\n   * @param options options for basic configuration\n   * @returns resulting WebXRDefaultExperience\n   */\n\n\n  WebXRDefaultExperience.CreateAsync = function (scene, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var result = new WebXRDefaultExperience();\n    scene.onDisposeObservable.addOnce(function () {\n      result.dispose();\n    }); // init the UI right after construction\n\n    if (!options.disableDefaultUI) {\n      var uiOptions = __assign({\n        renderTarget: result.renderTarget\n      }, options.uiOptions || {});\n\n      if (options.optionalFeatures) {\n        if (typeof options.optionalFeatures === \"boolean\") {\n          uiOptions.optionalFeatures = [\"hit-test\", \"anchors\", \"plane-detection\", \"hand-tracking\"];\n        } else {\n          uiOptions.optionalFeatures = options.optionalFeatures;\n        }\n      }\n\n      result.enterExitUI = new WebXREnterExitUI(scene, uiOptions);\n    } // Create base experience\n\n\n    return WebXRExperienceHelper.CreateAsync(scene).then(function (xrHelper) {\n      result.baseExperience = xrHelper;\n\n      if (options.ignoreNativeCameraTransformation) {\n        result.baseExperience.camera.compensateOnFirstFrame = false;\n      } // Add controller support\n\n\n      result.input = new WebXRInput(xrHelper.sessionManager, xrHelper.camera, __assign({\n        controllerOptions: {\n          renderingGroupId: options.renderingGroupId\n        }\n      }, options.inputOptions || {}));\n\n      if (!options.disablePointerSelection) {\n        // Add default pointer selection\n        var pointerSelectionOptions = __assign(__assign({}, options.pointerSelectionOptions), {\n          xrInput: result.input,\n          renderingGroupId: options.renderingGroupId\n        });\n\n        result.pointerSelection = result.baseExperience.featuresManager.enableFeature(WebXRControllerPointerSelection.Name, options.useStablePlugins ? \"stable\" : \"latest\", pointerSelectionOptions);\n\n        if (!options.disableTeleportation) {\n          // Add default teleportation, including rotation\n          result.teleportation = result.baseExperience.featuresManager.enableFeature(WebXRMotionControllerTeleportation.Name, options.useStablePlugins ? \"stable\" : \"latest\", {\n            floorMeshes: options.floorMeshes,\n            xrInput: result.input,\n            renderingGroupId: options.renderingGroupId\n          });\n          result.teleportation.setSelectionFeature(result.pointerSelection);\n        }\n      }\n\n      if (!options.disableNearInteraction) {\n        // Add default pointer selection\n        result.nearInteraction = result.baseExperience.featuresManager.enableFeature(WebXRNearInteraction.Name, options.useStablePlugins ? \"stable\" : \"latest\", {\n          xrInput: result.input,\n          farInteractionFeature: result.pointerSelection,\n          renderingGroupId: options.renderingGroupId,\n          useUtilityLayer: true,\n          enableNearInteractionOnAllControllers: true\n        });\n      } // Create the WebXR output target\n\n\n      result.renderTarget = result.baseExperience.sessionManager.getWebXRRenderTarget(options.outputCanvasOptions);\n\n      if (!options.disableDefaultUI) {\n        // Create ui for entering/exiting xr\n        return result.enterExitUI.setHelperAsync(result.baseExperience, result.renderTarget);\n      } else {\n        return;\n      }\n    }).then(function () {\n      return result;\n    })[\"catch\"](function (error) {\n      Logger.Error(\"Error initializing XR\");\n      Logger.Error(error);\n      return result;\n    });\n  };\n  /**\n   * Disposes of the experience helper\n   */\n\n\n  WebXRDefaultExperience.prototype.dispose = function () {\n    if (this.baseExperience) {\n      this.baseExperience.dispose();\n    }\n\n    if (this.input) {\n      this.input.dispose();\n    }\n\n    if (this.enterExitUI) {\n      this.enterExitUI.dispose();\n    }\n\n    if (this.renderTarget) {\n      this.renderTarget.dispose();\n    }\n  };\n\n  return WebXRDefaultExperience;\n}();\n\nexport { WebXRDefaultExperience };","map":{"version":3,"mappings":"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","names":["WebXRExperienceHelper","WebXRInput","WebXRControllerPointerSelection","WebXRNearInteraction","WebXREnterExitUI","WebXRMotionControllerTeleportation","Logger","WebXRDefaultExperience","scene","options","result","onDisposeObservable","addOnce","dispose","disableDefaultUI","uiOptions","renderTarget","optionalFeatures","enterExitUI","CreateAsync","then","xrHelper","baseExperience","ignoreNativeCameraTransformation","camera","compensateOnFirstFrame","input","sessionManager","__assign","controllerOptions","renderingGroupId","inputOptions","disablePointerSelection","pointerSelectionOptions","xrInput","pointerSelection","featuresManager","enableFeature","Name","useStablePlugins","disableTeleportation","teleportation","floorMeshes","setSelectionFeature","disableNearInteraction","nearInteraction","farInteractionFeature","useUtilityLayer","enableNearInteractionOnAllControllers","getWebXRRenderTarget","outputCanvasOptions","setHelperAsync","error","Error"],"sourceRoot":"","sources":["../../../../../lts/core/generated/XR/webXRDefaultExperience.ts"],"sourcesContent":["import { WebXRExperienceHelper } from \"./webXRExperienceHelper\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { IWebXRInputOptions } from \"./webXRInput\";\r\nimport { WebXRInput } from \"./webXRInput\";\r\nimport type { IWebXRControllerPointerSelectionOptions } from \"./features/WebXRControllerPointerSelection\";\r\nimport { WebXRControllerPointerSelection } from \"./features/WebXRControllerPointerSelection\";\r\nimport type { IWebXRNearInteractionOptions } from \"./features/WebXRNearInteraction\";\r\nimport { WebXRNearInteraction } from \"./features/WebXRNearInteraction\";\r\nimport type { WebXRRenderTarget } from \"./webXRTypes\";\r\nimport type { WebXREnterExitUIOptions } from \"./webXREnterExitUI\";\r\nimport { WebXREnterExitUI } from \"./webXREnterExitUI\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { WebXRManagedOutputCanvasOptions } from \"./webXRManagedOutputCanvas\";\r\nimport type { IWebXRTeleportationOptions } from \"./features/WebXRControllerTeleportation\";\r\nimport { WebXRMotionControllerTeleportation } from \"./features/WebXRControllerTeleportation\";\r\nimport { Logger } from \"../Misc/logger\";\r\n\r\n/**\r\n * Options for the default xr helper\r\n */\r\nexport class WebXRDefaultExperienceOptions {\r\n    /**\r\n     * Enable or disable default UI to enter XR\r\n     */\r\n    public disableDefaultUI?: boolean;\r\n    /**\r\n     * Should pointer selection not initialize.\r\n     * Note that disabling pointer selection also disables teleportation.\r\n     * Defaults to false.\r\n     */\r\n    public disablePointerSelection?: boolean;\r\n    /**\r\n     * Should teleportation not initialize. Defaults to false.\r\n     */\r\n    public disableTeleportation?: boolean;\r\n    /**\r\n     * Should nearInteraction not initialize. Defaults to false.\r\n     */\r\n    public disableNearInteraction?: boolean;\r\n    /**\r\n     * Floor meshes that will be used for teleport\r\n     */\r\n    public floorMeshes?: Array<AbstractMesh>;\r\n    /**\r\n     * If set to true, the first frame will not be used to reset position\r\n     * The first frame is mainly used when copying transformation from the old camera\r\n     * Mainly used in AR\r\n     */\r\n    public ignoreNativeCameraTransformation?: boolean;\r\n    /**\r\n     * Disable the controller mesh-loading. Can be used if you want to load your own meshes\r\n     */\r\n    public inputOptions?: IWebXRInputOptions;\r\n    /**\r\n     * optional configuration for pointer selection\r\n     */\r\n    public pointerSelectionOptions?: IWebXRControllerPointerSelectionOptions;\r\n    /**\r\n     * optional configuration for the output canvas\r\n     */\r\n    public outputCanvasOptions?: WebXRManagedOutputCanvasOptions;\r\n    /**\r\n     * optional UI options. This can be used among other to change session mode and reference space type\r\n     */\r\n    public uiOptions?: WebXREnterExitUIOptions;\r\n    /**\r\n     * When loading teleportation and pointer select, use stable versions instead of latest.\r\n     */\r\n    public useStablePlugins?: boolean;\r\n\r\n    /**\r\n     * An optional rendering group id that will be set globally for teleportation, pointer selection and default controller meshes\r\n     */\r\n    public renderingGroupId?: number;\r\n\r\n    /**\r\n     * A list of optional features to init the session with\r\n     * If set to true, all features we support will be added\r\n     */\r\n    optionalFeatures?: boolean | string[];\r\n}\r\n\r\n/**\r\n * Default experience which provides a similar setup to the previous webVRExperience\r\n */\r\nexport class WebXRDefaultExperience {\r\n    /**\r\n     * Base experience\r\n     */\r\n    public baseExperience: WebXRExperienceHelper;\r\n    /**\r\n     * Enables ui for entering/exiting xr\r\n     */\r\n    public enterExitUI: WebXREnterExitUI;\r\n    /**\r\n     * Input experience extension\r\n     */\r\n    public input: WebXRInput;\r\n    /**\r\n     * Enables laser pointer and selection\r\n     */\r\n    public pointerSelection: WebXRControllerPointerSelection;\r\n    /**\r\n     * Default target xr should render to\r\n     */\r\n    public renderTarget: WebXRRenderTarget;\r\n    /**\r\n     * Enables teleportation\r\n     */\r\n    public teleportation: WebXRMotionControllerTeleportation;\r\n\r\n    /**\r\n     * Enables near interaction for hands/controllers\r\n     */\r\n    public nearInteraction: WebXRNearInteraction;\r\n\r\n    private constructor() {}\r\n\r\n    /**\r\n     * Creates the default xr experience\r\n     * @param scene scene\r\n     * @param options options for basic configuration\r\n     * @returns resulting WebXRDefaultExperience\r\n     */\r\n    public static CreateAsync(scene: Scene, options: WebXRDefaultExperienceOptions = {}) {\r\n        const result = new WebXRDefaultExperience();\r\n        scene.onDisposeObservable.addOnce(() => {\r\n            result.dispose();\r\n        });\r\n        // init the UI right after construction\r\n        if (!options.disableDefaultUI) {\r\n            const uiOptions: WebXREnterExitUIOptions = {\r\n                renderTarget: result.renderTarget,\r\n                ...(options.uiOptions || {}),\r\n            };\r\n            if (options.optionalFeatures) {\r\n                if (typeof options.optionalFeatures === \"boolean\") {\r\n                    uiOptions.optionalFeatures = [\"hit-test\", \"anchors\", \"plane-detection\", \"hand-tracking\"];\r\n                } else {\r\n                    uiOptions.optionalFeatures = options.optionalFeatures;\r\n                }\r\n            }\r\n            result.enterExitUI = new WebXREnterExitUI(scene, uiOptions);\r\n        }\r\n\r\n        // Create base experience\r\n        return WebXRExperienceHelper.CreateAsync(scene)\r\n            .then((xrHelper) => {\r\n                result.baseExperience = xrHelper;\r\n\r\n                if (options.ignoreNativeCameraTransformation) {\r\n                    result.baseExperience.camera.compensateOnFirstFrame = false;\r\n                }\r\n\r\n                // Add controller support\r\n                result.input = new WebXRInput(xrHelper.sessionManager, xrHelper.camera, {\r\n                    controllerOptions: {\r\n                        renderingGroupId: options.renderingGroupId,\r\n                    },\r\n                    ...(options.inputOptions || {}),\r\n                });\r\n\r\n                if (!options.disablePointerSelection) {\r\n                    // Add default pointer selection\r\n                    const pointerSelectionOptions = {\r\n                        ...options.pointerSelectionOptions,\r\n                        xrInput: result.input,\r\n                        renderingGroupId: options.renderingGroupId,\r\n                    };\r\n\r\n                    result.pointerSelection = <WebXRControllerPointerSelection>(\r\n                        result.baseExperience.featuresManager.enableFeature(\r\n                            WebXRControllerPointerSelection.Name,\r\n                            options.useStablePlugins ? \"stable\" : \"latest\",\r\n                            <IWebXRControllerPointerSelectionOptions>pointerSelectionOptions\r\n                        )\r\n                    );\r\n\r\n                    if (!options.disableTeleportation) {\r\n                        // Add default teleportation, including rotation\r\n                        result.teleportation = <WebXRMotionControllerTeleportation>result.baseExperience.featuresManager.enableFeature(\r\n                            WebXRMotionControllerTeleportation.Name,\r\n                            options.useStablePlugins ? \"stable\" : \"latest\",\r\n                            <IWebXRTeleportationOptions>{\r\n                                floorMeshes: options.floorMeshes,\r\n                                xrInput: result.input,\r\n                                renderingGroupId: options.renderingGroupId,\r\n                            }\r\n                        );\r\n                        result.teleportation.setSelectionFeature(result.pointerSelection);\r\n                    }\r\n                }\r\n\r\n                if (!options.disableNearInteraction) {\r\n                    // Add default pointer selection\r\n                    result.nearInteraction = <WebXRNearInteraction>result.baseExperience.featuresManager.enableFeature(\r\n                        WebXRNearInteraction.Name,\r\n                        options.useStablePlugins ? \"stable\" : \"latest\",\r\n                        <IWebXRNearInteractionOptions>{\r\n                            xrInput: result.input,\r\n                            farInteractionFeature: result.pointerSelection,\r\n                            renderingGroupId: options.renderingGroupId,\r\n                            useUtilityLayer: true,\r\n                            enableNearInteractionOnAllControllers: true,\r\n                        }\r\n                    );\r\n                }\r\n\r\n                // Create the WebXR output target\r\n                result.renderTarget = result.baseExperience.sessionManager.getWebXRRenderTarget(options.outputCanvasOptions);\r\n\r\n                if (!options.disableDefaultUI) {\r\n                    // Create ui for entering/exiting xr\r\n                    return result.enterExitUI.setHelperAsync(result.baseExperience, result.renderTarget);\r\n                } else {\r\n                    return;\r\n                }\r\n            })\r\n            .then(() => {\r\n                return result;\r\n            })\r\n            .catch((error) => {\r\n                Logger.Error(\"Error initializing XR\");\r\n                Logger.Error(error);\r\n                return result;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Disposes of the experience helper\r\n     */\r\n    public dispose() {\r\n        if (this.baseExperience) {\r\n            this.baseExperience.dispose();\r\n        }\r\n        if (this.input) {\r\n            this.input.dispose();\r\n        }\r\n        if (this.enterExitUI) {\r\n            this.enterExitUI.dispose();\r\n        }\r\n        if (this.renderTarget) {\r\n            this.renderTarget.dispose();\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}