{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { serialize, expandToProperty, serializeAsColor3, serializeAsTexture } from \"../../Misc/decorators.js\";\nimport { Color3 } from \"../../Maths/math.color.js\";\nimport { MaterialFlags } from \"../../Materials/materialFlags.js\";\nimport { MaterialHelper } from \"../../Materials/materialHelper.js\";\nimport { MaterialPluginBase } from \"../materialPluginBase.js\";\nimport { MaterialDefines } from \"../materialDefines.js\";\n/**\n * @hidden\n */\n\nvar MaterialSheenDefines =\n/** @class */\nfunction (_super) {\n  __extends(MaterialSheenDefines, _super);\n\n  function MaterialSheenDefines() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.SHEEN = false;\n    _this.SHEEN_TEXTURE = false;\n    _this.SHEEN_GAMMATEXTURE = false;\n    _this.SHEEN_TEXTURE_ROUGHNESS = false;\n    _this.SHEEN_TEXTUREDIRECTUV = 0;\n    _this.SHEEN_TEXTURE_ROUGHNESSDIRECTUV = 0;\n    _this.SHEEN_LINKWITHALBEDO = false;\n    _this.SHEEN_ROUGHNESS = false;\n    _this.SHEEN_ALBEDOSCALING = false;\n    _this.SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\n    _this.SHEEN_TEXTURE_ROUGHNESS_IDENTICAL = false;\n    return _this;\n  }\n\n  return MaterialSheenDefines;\n}(MaterialDefines);\n\nexport { MaterialSheenDefines };\n/**\n * Plugin that implements the sheen component of the PBR material.\n */\n\nvar PBRSheenConfiguration =\n/** @class */\nfunction (_super) {\n  __extends(PBRSheenConfiguration, _super);\n\n  function PBRSheenConfiguration(material, addToPluginList) {\n    if (addToPluginList === void 0) {\n      addToPluginList = true;\n    }\n\n    var _this = _super.call(this, material, \"Sheen\", 120, new MaterialSheenDefines(), addToPluginList) || this;\n\n    _this._isEnabled = false;\n    /**\n     * Defines if the material uses sheen.\n     */\n\n    _this.isEnabled = false;\n    _this._linkSheenWithAlbedo = false;\n    /**\n     * Defines if the sheen is linked to the sheen color.\n     */\n\n    _this.linkSheenWithAlbedo = false;\n    /**\n     * Defines the sheen intensity.\n     */\n\n    _this.intensity = 1;\n    /**\n     * Defines the sheen color.\n     */\n\n    _this.color = Color3.White();\n    _this._texture = null;\n    /**\n     * Stores the sheen tint values in a texture.\n     * rgb is tint\n     * a is a intensity or roughness if the roughness property has been defined and useRoughnessFromTexture is true (in that case, textureRoughness won't be used)\n     * If the roughness property has been defined and useRoughnessFromTexture is false then the alpha channel is not used to modulate roughness\n     */\n\n    _this.texture = null;\n    _this._useRoughnessFromMainTexture = true;\n    /**\n     * Indicates that the alpha channel of the texture property will be used for roughness.\n     * Has no effect if the roughness (and texture!) property is not defined\n     */\n\n    _this.useRoughnessFromMainTexture = true;\n    _this._roughness = null;\n    /**\n     * Defines the sheen roughness.\n     * It is not taken into account if linkSheenWithAlbedo is true.\n     * To stay backward compatible, material roughness is used instead if sheen roughness = null\n     */\n\n    _this.roughness = null;\n    _this._textureRoughness = null;\n    /**\n     * Stores the sheen roughness in a texture.\n     * alpha channel is the roughness. This texture won't be used if the texture property is not empty and useRoughnessFromTexture is true\n     */\n\n    _this.textureRoughness = null;\n    _this._albedoScaling = false;\n    /**\n     * If true, the sheen effect is layered above the base BRDF with the albedo-scaling technique.\n     * It allows the strength of the sheen effect to not depend on the base color of the material,\n     * making it easier to setup and tweak the effect\n     */\n\n    _this.albedoScaling = false;\n    _this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[1];\n    return _this;\n  }\n  /** @hidden */\n\n\n  PBRSheenConfiguration.prototype._markAllSubMeshesAsTexturesDirty = function () {\n    this._enable(this._isEnabled);\n\n    this._internalMarkAllSubMeshesAsTexturesDirty();\n  };\n\n  PBRSheenConfiguration.prototype.isReadyForSubMesh = function (defines, scene) {\n    if (!this._isEnabled) {\n      return true;\n    }\n\n    if (defines._areTexturesDirty) {\n      if (scene.texturesEnabled) {\n        if (this._texture && MaterialFlags.SheenTextureEnabled) {\n          if (!this._texture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n\n        if (this._textureRoughness && MaterialFlags.SheenTextureEnabled) {\n          if (!this._textureRoughness.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  };\n\n  PBRSheenConfiguration.prototype.prepareDefines = function (defines, scene) {\n    var _a;\n\n    if (this._isEnabled) {\n      defines.SHEEN = true;\n      defines.SHEEN_LINKWITHALBEDO = this._linkSheenWithAlbedo;\n      defines.SHEEN_ROUGHNESS = this._roughness !== null;\n      defines.SHEEN_ALBEDOSCALING = this._albedoScaling;\n      defines.SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE = this._useRoughnessFromMainTexture;\n      defines.SHEEN_TEXTURE_ROUGHNESS_IDENTICAL = this._texture !== null && this._texture._texture === ((_a = this._textureRoughness) === null || _a === void 0 ? void 0 : _a._texture) && this._texture.checkTransformsAreIdentical(this._textureRoughness);\n\n      if (defines._areTexturesDirty) {\n        if (scene.texturesEnabled) {\n          if (this._texture && MaterialFlags.SheenTextureEnabled) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"SHEEN_TEXTURE\");\n            defines.SHEEN_GAMMATEXTURE = this._texture.gammaSpace;\n          } else {\n            defines.SHEEN_TEXTURE = false;\n          }\n\n          if (this._textureRoughness && MaterialFlags.SheenTextureEnabled) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._textureRoughness, defines, \"SHEEN_TEXTURE_ROUGHNESS\");\n          } else {\n            defines.SHEEN_TEXTURE_ROUGHNESS = false;\n          }\n        }\n      }\n    } else {\n      defines.SHEEN = false;\n      defines.SHEEN_TEXTURE = false;\n      defines.SHEEN_TEXTURE_ROUGHNESS = false;\n      defines.SHEEN_LINKWITHALBEDO = false;\n      defines.SHEEN_ROUGHNESS = false;\n      defines.SHEEN_ALBEDOSCALING = false;\n      defines.SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\n      defines.SHEEN_TEXTURE_ROUGHNESS_IDENTICAL = false;\n    }\n  };\n\n  PBRSheenConfiguration.prototype.bindForSubMesh = function (uniformBuffer, scene, engine, subMesh) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n\n    if (!this._isEnabled) {\n      return;\n    }\n\n    var defines = subMesh.materialDefines;\n    var isFrozen = this._material.isFrozen;\n    var identicalTextures = defines.SHEEN_TEXTURE_ROUGHNESS_IDENTICAL;\n\n    if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\n      if (identicalTextures && MaterialFlags.SheenTextureEnabled) {\n        uniformBuffer.updateFloat4(\"vSheenInfos\", this._texture.coordinatesIndex, this._texture.level, -1, -1);\n        MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"sheen\");\n      } else if ((this._texture || this._textureRoughness) && MaterialFlags.SheenTextureEnabled) {\n        uniformBuffer.updateFloat4(\"vSheenInfos\", (_b = (_a = this._texture) === null || _a === void 0 ? void 0 : _a.coordinatesIndex) !== null && _b !== void 0 ? _b : 0, (_d = (_c = this._texture) === null || _c === void 0 ? void 0 : _c.level) !== null && _d !== void 0 ? _d : 0, (_f = (_e = this._textureRoughness) === null || _e === void 0 ? void 0 : _e.coordinatesIndex) !== null && _f !== void 0 ? _f : 0, (_h = (_g = this._textureRoughness) === null || _g === void 0 ? void 0 : _g.level) !== null && _h !== void 0 ? _h : 0);\n\n        if (this._texture) {\n          MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"sheen\");\n        }\n\n        if (this._textureRoughness && !identicalTextures && !defines.SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE) {\n          MaterialHelper.BindTextureMatrix(this._textureRoughness, uniformBuffer, \"sheenRoughness\");\n        }\n      } // Sheen\n\n\n      uniformBuffer.updateFloat4(\"vSheenColor\", this.color.r, this.color.g, this.color.b, this.intensity);\n\n      if (this._roughness !== null) {\n        uniformBuffer.updateFloat(\"vSheenRoughness\", this._roughness);\n      }\n    } // Textures\n\n\n    if (scene.texturesEnabled) {\n      if (this._texture && MaterialFlags.SheenTextureEnabled) {\n        uniformBuffer.setTexture(\"sheenSampler\", this._texture);\n      }\n\n      if (this._textureRoughness && !identicalTextures && !defines.SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE && MaterialFlags.SheenTextureEnabled) {\n        uniformBuffer.setTexture(\"sheenRoughnessSampler\", this._textureRoughness);\n      }\n    }\n  };\n\n  PBRSheenConfiguration.prototype.hasTexture = function (texture) {\n    if (this._texture === texture) {\n      return true;\n    }\n\n    if (this._textureRoughness === texture) {\n      return true;\n    }\n\n    return false;\n  };\n\n  PBRSheenConfiguration.prototype.getActiveTextures = function (activeTextures) {\n    if (this._texture) {\n      activeTextures.push(this._texture);\n    }\n\n    if (this._textureRoughness) {\n      activeTextures.push(this._textureRoughness);\n    }\n  };\n\n  PBRSheenConfiguration.prototype.getAnimatables = function (animatables) {\n    if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\n      animatables.push(this._texture);\n    }\n\n    if (this._textureRoughness && this._textureRoughness.animations && this._textureRoughness.animations.length > 0) {\n      animatables.push(this._textureRoughness);\n    }\n  };\n\n  PBRSheenConfiguration.prototype.dispose = function (forceDisposeTextures) {\n    var _a, _b;\n\n    if (forceDisposeTextures) {\n      (_a = this._texture) === null || _a === void 0 ? void 0 : _a.dispose();\n      (_b = this._textureRoughness) === null || _b === void 0 ? void 0 : _b.dispose();\n    }\n  };\n\n  PBRSheenConfiguration.prototype.getClassName = function () {\n    return \"PBRSheenConfiguration\";\n  };\n\n  PBRSheenConfiguration.prototype.addFallbacks = function (defines, fallbacks, currentRank) {\n    if (defines.SHEEN) {\n      fallbacks.addFallback(currentRank++, \"SHEEN\");\n    }\n\n    return currentRank;\n  };\n\n  PBRSheenConfiguration.prototype.getSamplers = function (samplers) {\n    samplers.push(\"sheenSampler\", \"sheenRoughnessSampler\");\n  };\n\n  PBRSheenConfiguration.prototype.getUniforms = function () {\n    return {\n      ubo: [{\n        name: \"vSheenColor\",\n        size: 4,\n        type: \"vec4\"\n      }, {\n        name: \"vSheenRoughness\",\n        size: 1,\n        type: \"float\"\n      }, {\n        name: \"vSheenInfos\",\n        size: 4,\n        type: \"vec4\"\n      }, {\n        name: \"sheenMatrix\",\n        size: 16,\n        type: \"mat4\"\n      }, {\n        name: \"sheenRoughnessMatrix\",\n        size: 16,\n        type: \"mat4\"\n      }]\n    };\n  };\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRSheenConfiguration.prototype, \"isEnabled\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRSheenConfiguration.prototype, \"linkSheenWithAlbedo\", void 0);\n\n  __decorate([serialize()], PBRSheenConfiguration.prototype, \"intensity\", void 0);\n\n  __decorate([serializeAsColor3()], PBRSheenConfiguration.prototype, \"color\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRSheenConfiguration.prototype, \"texture\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRSheenConfiguration.prototype, \"useRoughnessFromMainTexture\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRSheenConfiguration.prototype, \"roughness\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRSheenConfiguration.prototype, \"textureRoughness\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRSheenConfiguration.prototype, \"albedoScaling\", void 0);\n\n  return PBRSheenConfiguration;\n}(MaterialPluginBase);\n\nexport { PBRSheenConfiguration };","map":{"version":3,"mappings":"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","names":["serialize","expandToProperty","serializeAsColor3","serializeAsTexture","Color3","MaterialFlags","MaterialHelper","MaterialPluginBase","MaterialDefines","__extends","_this","material","addToPluginList","_super","MaterialSheenDefines","White","_internalMarkAllSubMeshesAsTexturesDirty","_dirtyCallbacks","PBRSheenConfiguration","_enable","_isEnabled","defines","scene","_areTexturesDirty","texturesEnabled","_texture","SheenTextureEnabled","isReadyOrNotBlocking","_textureRoughness","SHEEN","SHEEN_LINKWITHALBEDO","_linkSheenWithAlbedo","SHEEN_ROUGHNESS","_roughness","SHEEN_ALBEDOSCALING","_albedoScaling","SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE","_useRoughnessFromMainTexture","SHEEN_TEXTURE_ROUGHNESS_IDENTICAL","_a","checkTransformsAreIdentical","PrepareDefinesForMergedUV","SHEEN_GAMMATEXTURE","gammaSpace","SHEEN_TEXTURE","SHEEN_TEXTURE_ROUGHNESS","uniformBuffer","engine","subMesh","materialDefines","isFrozen","_material","identicalTextures","useUbo","isSync","updateFloat4","coordinatesIndex","level","BindTextureMatrix","_b","_c","_d","_e","_f","_g","_h","color","r","g","b","intensity","updateFloat","setTexture","texture","activeTextures","push","animatables","animations","length","forceDisposeTextures","dispose","fallbacks","currentRank","addFallback","samplers","ubo","name","size","type","__decorate"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/PBR/pbrSheenConfiguration.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { serialize, expandToProperty, serializeAsColor3, serializeAsTexture } from \"../../Misc/decorators\";\r\nimport type { UniformBuffer } from \"../../Materials/uniformBuffer\";\r\nimport { Color3 } from \"../../Maths/math.color\";\r\nimport { MaterialFlags } from \"../../Materials/materialFlags\";\r\nimport { MaterialHelper } from \"../../Materials/materialHelper\";\r\nimport type { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { IAnimatable } from \"../../Animations/animatable.interface\";\r\nimport type { EffectFallbacks } from \"../effectFallbacks\";\r\nimport type { SubMesh } from \"../../Meshes/subMesh\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport { MaterialPluginBase } from \"../materialPluginBase\";\r\nimport { MaterialDefines } from \"../materialDefines\";\r\n\r\ndeclare type Engine = import(\"../../Engines/engine\").Engine;\r\ndeclare type Scene = import(\"../../scene\").Scene;\r\ndeclare type PBRBaseMaterial = import(\"./pbrBaseMaterial\").PBRBaseMaterial;\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class MaterialSheenDefines extends MaterialDefines {\r\n    public SHEEN = false;\r\n    public SHEEN_TEXTURE = false;\r\n    public SHEEN_GAMMATEXTURE = false;\r\n    public SHEEN_TEXTURE_ROUGHNESS = false;\r\n    public SHEEN_TEXTUREDIRECTUV = 0;\r\n    public SHEEN_TEXTURE_ROUGHNESSDIRECTUV = 0;\r\n    public SHEEN_LINKWITHALBEDO = false;\r\n    public SHEEN_ROUGHNESS = false;\r\n    public SHEEN_ALBEDOSCALING = false;\r\n    public SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\r\n    public SHEEN_TEXTURE_ROUGHNESS_IDENTICAL = false;\r\n}\r\n\r\n/**\r\n * Plugin that implements the sheen component of the PBR material.\r\n */\r\nexport class PBRSheenConfiguration extends MaterialPluginBase {\r\n    private _isEnabled = false;\r\n    /**\r\n     * Defines if the material uses sheen.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public isEnabled = false;\r\n\r\n    private _linkSheenWithAlbedo = false;\r\n    /**\r\n     * Defines if the sheen is linked to the sheen color.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public linkSheenWithAlbedo = false;\r\n\r\n    /**\r\n     * Defines the sheen intensity.\r\n     */\r\n    @serialize()\r\n    public intensity = 1;\r\n\r\n    /**\r\n     * Defines the sheen color.\r\n     */\r\n    @serializeAsColor3()\r\n    public color = Color3.White();\r\n\r\n    private _texture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Stores the sheen tint values in a texture.\r\n     * rgb is tint\r\n     * a is a intensity or roughness if the roughness property has been defined and useRoughnessFromTexture is true (in that case, textureRoughness won't be used)\r\n     * If the roughness property has been defined and useRoughnessFromTexture is false then the alpha channel is not used to modulate roughness\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public texture: Nullable<BaseTexture> = null;\r\n\r\n    private _useRoughnessFromMainTexture = true;\r\n    /**\r\n     * Indicates that the alpha channel of the texture property will be used for roughness.\r\n     * Has no effect if the roughness (and texture!) property is not defined\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useRoughnessFromMainTexture = true;\r\n\r\n    private _roughness: Nullable<number> = null;\r\n    /**\r\n     * Defines the sheen roughness.\r\n     * It is not taken into account if linkSheenWithAlbedo is true.\r\n     * To stay backward compatible, material roughness is used instead if sheen roughness = null\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public roughness: Nullable<number> = null;\r\n\r\n    private _textureRoughness: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Stores the sheen roughness in a texture.\r\n     * alpha channel is the roughness. This texture won't be used if the texture property is not empty and useRoughnessFromTexture is true\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public textureRoughness: Nullable<BaseTexture> = null;\r\n\r\n    private _albedoScaling = false;\r\n    /**\r\n     * If true, the sheen effect is layered above the base BRDF with the albedo-scaling technique.\r\n     * It allows the strength of the sheen effect to not depend on the base color of the material,\r\n     * making it easier to setup and tweak the effect\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public albedoScaling = false;\r\n\r\n    /** @hidden */\r\n    private _internalMarkAllSubMeshesAsTexturesDirty: () => void;\r\n\r\n    /** @hidden */\r\n    public _markAllSubMeshesAsTexturesDirty(): void {\r\n        this._enable(this._isEnabled);\r\n        this._internalMarkAllSubMeshesAsTexturesDirty();\r\n    }\r\n\r\n    constructor(material: PBRBaseMaterial, addToPluginList = true) {\r\n        super(material, \"Sheen\", 120, new MaterialSheenDefines(), addToPluginList);\r\n\r\n        this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[Constants.MATERIAL_TextureDirtyFlag];\r\n    }\r\n\r\n    public isReadyForSubMesh(defines: MaterialSheenDefines, scene: Scene): boolean {\r\n        if (!this._isEnabled) {\r\n            return true;\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            if (scene.texturesEnabled) {\r\n                if (this._texture && MaterialFlags.SheenTextureEnabled) {\r\n                    if (!this._texture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._textureRoughness && MaterialFlags.SheenTextureEnabled) {\r\n                    if (!this._textureRoughness.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public prepareDefines(defines: MaterialSheenDefines, scene: Scene): void {\r\n        if (this._isEnabled) {\r\n            defines.SHEEN = true;\r\n            defines.SHEEN_LINKWITHALBEDO = this._linkSheenWithAlbedo;\r\n            defines.SHEEN_ROUGHNESS = this._roughness !== null;\r\n            defines.SHEEN_ALBEDOSCALING = this._albedoScaling;\r\n            defines.SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE = this._useRoughnessFromMainTexture;\r\n            defines.SHEEN_TEXTURE_ROUGHNESS_IDENTICAL =\r\n                this._texture !== null && this._texture._texture === this._textureRoughness?._texture && this._texture.checkTransformsAreIdentical(this._textureRoughness);\r\n\r\n            if (defines._areTexturesDirty) {\r\n                if (scene.texturesEnabled) {\r\n                    if (this._texture && MaterialFlags.SheenTextureEnabled) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"SHEEN_TEXTURE\");\r\n                        defines.SHEEN_GAMMATEXTURE = this._texture.gammaSpace;\r\n                    } else {\r\n                        defines.SHEEN_TEXTURE = false;\r\n                    }\r\n\r\n                    if (this._textureRoughness && MaterialFlags.SheenTextureEnabled) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._textureRoughness, defines, \"SHEEN_TEXTURE_ROUGHNESS\");\r\n                    } else {\r\n                        defines.SHEEN_TEXTURE_ROUGHNESS = false;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            defines.SHEEN = false;\r\n            defines.SHEEN_TEXTURE = false;\r\n            defines.SHEEN_TEXTURE_ROUGHNESS = false;\r\n            defines.SHEEN_LINKWITHALBEDO = false;\r\n            defines.SHEEN_ROUGHNESS = false;\r\n            defines.SHEEN_ALBEDOSCALING = false;\r\n            defines.SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\r\n            defines.SHEEN_TEXTURE_ROUGHNESS_IDENTICAL = false;\r\n        }\r\n    }\r\n\r\n    public bindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene, engine: Engine, subMesh: SubMesh): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n\r\n        const defines = subMesh!.materialDefines as unknown as MaterialSheenDefines;\r\n\r\n        const isFrozen = this._material.isFrozen;\r\n\r\n        const identicalTextures = defines.SHEEN_TEXTURE_ROUGHNESS_IDENTICAL;\r\n\r\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\r\n            if (identicalTextures && MaterialFlags.SheenTextureEnabled) {\r\n                uniformBuffer.updateFloat4(\"vSheenInfos\", this._texture!.coordinatesIndex, this._texture!.level, -1, -1);\r\n                MaterialHelper.BindTextureMatrix(this._texture!, uniformBuffer, \"sheen\");\r\n            } else if ((this._texture || this._textureRoughness) && MaterialFlags.SheenTextureEnabled) {\r\n                uniformBuffer.updateFloat4(\r\n                    \"vSheenInfos\",\r\n                    this._texture?.coordinatesIndex ?? 0,\r\n                    this._texture?.level ?? 0,\r\n                    this._textureRoughness?.coordinatesIndex ?? 0,\r\n                    this._textureRoughness?.level ?? 0\r\n                );\r\n                if (this._texture) {\r\n                    MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"sheen\");\r\n                }\r\n                if (this._textureRoughness && !identicalTextures && !defines.SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE) {\r\n                    MaterialHelper.BindTextureMatrix(this._textureRoughness, uniformBuffer, \"sheenRoughness\");\r\n                }\r\n            }\r\n\r\n            // Sheen\r\n            uniformBuffer.updateFloat4(\"vSheenColor\", this.color.r, this.color.g, this.color.b, this.intensity);\r\n\r\n            if (this._roughness !== null) {\r\n                uniformBuffer.updateFloat(\"vSheenRoughness\", this._roughness);\r\n            }\r\n        }\r\n\r\n        // Textures\r\n        if (scene.texturesEnabled) {\r\n            if (this._texture && MaterialFlags.SheenTextureEnabled) {\r\n                uniformBuffer.setTexture(\"sheenSampler\", this._texture);\r\n            }\r\n\r\n            if (this._textureRoughness && !identicalTextures && !defines.SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE && MaterialFlags.SheenTextureEnabled) {\r\n                uniformBuffer.setTexture(\"sheenRoughnessSampler\", this._textureRoughness);\r\n            }\r\n        }\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (this._texture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._textureRoughness === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public getActiveTextures(activeTextures: BaseTexture[]): void {\r\n        if (this._texture) {\r\n            activeTextures.push(this._texture);\r\n        }\r\n\r\n        if (this._textureRoughness) {\r\n            activeTextures.push(this._textureRoughness);\r\n        }\r\n    }\r\n\r\n    public getAnimatables(animatables: IAnimatable[]): void {\r\n        if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\r\n            animatables.push(this._texture);\r\n        }\r\n\r\n        if (this._textureRoughness && this._textureRoughness.animations && this._textureRoughness.animations.length > 0) {\r\n            animatables.push(this._textureRoughness);\r\n        }\r\n    }\r\n\r\n    public dispose(forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            this._texture?.dispose();\r\n            this._textureRoughness?.dispose();\r\n        }\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"PBRSheenConfiguration\";\r\n    }\r\n\r\n    public addFallbacks(defines: MaterialSheenDefines, fallbacks: EffectFallbacks, currentRank: number): number {\r\n        if (defines.SHEEN) {\r\n            fallbacks.addFallback(currentRank++, \"SHEEN\");\r\n        }\r\n        return currentRank;\r\n    }\r\n\r\n    public getSamplers(samplers: string[]): void {\r\n        samplers.push(\"sheenSampler\", \"sheenRoughnessSampler\");\r\n    }\r\n\r\n    public getUniforms(): { ubo?: Array<{ name: string; size: number; type: string }>; vertex?: string; fragment?: string } {\r\n        return {\r\n            ubo: [\r\n                { name: \"vSheenColor\", size: 4, type: \"vec4\" },\r\n                { name: \"vSheenRoughness\", size: 1, type: \"float\" },\r\n                { name: \"vSheenInfos\", size: 4, type: \"vec4\" },\r\n                { name: \"sheenMatrix\", size: 16, type: \"mat4\" },\r\n                { name: \"sheenRoughnessMatrix\", size: 16, type: \"mat4\" },\r\n            ],\r\n        };\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}