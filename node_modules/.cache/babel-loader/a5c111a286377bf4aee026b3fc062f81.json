{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport { Material } from \"./material.js\";\nimport { MaterialPluginEvent } from \"./materialPluginEvent.js\";\n/**\n * Class that manages the plugins of a material\n * @since 5.0\n */\n\nvar MaterialPluginManager =\n/** @class */\nfunction () {\n  /**\n   * Creates a new instance of the plugin manager\n   * @param material material that this manager will manage the plugins for\n   */\n  function MaterialPluginManager(material) {\n    this._plugins = [];\n    this._activePlugins = [];\n    this._activePluginsForExtraEvents = [];\n    this._material = material;\n    this._scene = material.getScene();\n    this._engine = this._scene.getEngine();\n  }\n  /**\n   * @param plugin\n   * @hidden\n   */\n\n\n  MaterialPluginManager.prototype._addPlugin = function (plugin) {\n    for (var i = 0; i < this._plugins.length; ++i) {\n      if (this._plugins[i].name === plugin.name) {\n        throw \"Plugin \\\"\".concat(plugin.name, \"\\\" already added to the material \\\"\").concat(this._material.name, \"\\\"!\");\n      }\n    }\n\n    if (this._material._uniformBufferLayoutBuilt) {\n      throw \"The plugin \\\"\".concat(plugin.name, \"\\\" can't be added to the material \\\"\").concat(this._material.name, \"\\\" because this material has already been used for rendering! Please add plugins to materials before any rendering with this material occurs.\");\n    }\n\n    this._material._callbackPluginEventGeneric = this._handlePluginEvent.bind(this);\n\n    this._plugins.push(plugin);\n\n    this._plugins.sort(function (a, b) {\n      return a.priority - b.priority;\n    });\n\n    this._codeInjectionPoints = {};\n    var defineNamesFromPlugins = {};\n\n    for (var _i = 0, _a = this._plugins; _i < _a.length; _i++) {\n      var plugin_1 = _a[_i];\n      plugin_1.collectDefines(defineNamesFromPlugins);\n\n      this._collectPointNames(\"vertex\", plugin_1.getCustomCode(\"vertex\"));\n\n      this._collectPointNames(\"fragment\", plugin_1.getCustomCode(\"fragment\"));\n    }\n\n    if (Object.keys(defineNamesFromPlugins).length > 0) {\n      this._defineNamesFromPlugins = defineNamesFromPlugins;\n    } else {\n      delete this._defineNamesFromPlugins;\n    }\n  };\n  /**\n   * @param plugin\n   * @hidden\n   */\n\n\n  MaterialPluginManager.prototype._activatePlugin = function (plugin) {\n    if (this._activePlugins.indexOf(plugin) === -1) {\n      this._activePlugins.push(plugin);\n\n      this._activePlugins.sort(function (a, b) {\n        return a.priority - b.priority;\n      });\n\n      this._material._callbackPluginEventIsReadyForSubMesh = this._handlePluginEventIsReadyForSubMesh.bind(this);\n      this._material._callbackPluginEventPrepareDefines = this._handlePluginEventPrepareDefines.bind(this);\n      this._material._callbackPluginEventBindForSubMesh = this._handlePluginEventBindForSubMesh.bind(this);\n\n      if (plugin.registerForExtraEvents) {\n        this._activePluginsForExtraEvents.push(plugin);\n\n        this._activePluginsForExtraEvents.sort(function (a, b) {\n          return a.priority - b.priority;\n        });\n\n        this._material._callbackPluginEventHasRenderTargetTextures = this._handlePluginEventHasRenderTargetTextures.bind(this);\n        this._material._callbackPluginEventFillRenderTargetTextures = this._handlePluginEventFillRenderTargetTextures.bind(this);\n        this._material._callbackPluginEventHardBindForSubMesh = this._handlePluginEventHardBindForSubMesh.bind(this);\n      }\n    }\n  };\n  /**\n   * Gets a plugin from the list of plugins managed by this manager\n   * @param name name of the plugin\n   * @returns the plugin if found, else null\n   */\n\n\n  MaterialPluginManager.prototype.getPlugin = function (name) {\n    for (var i = 0; i < this._plugins.length; ++i) {\n      if (this._plugins[i].name === name) {\n        return this._plugins[i];\n      }\n    }\n\n    return null;\n  };\n\n  MaterialPluginManager.prototype._handlePluginEventIsReadyForSubMesh = function (eventData) {\n    var isReady = true;\n\n    for (var _i = 0, _a = this._activePlugins; _i < _a.length; _i++) {\n      var plugin = _a[_i];\n      isReady = isReady && plugin.isReadyForSubMesh(eventData.defines, this._scene, this._engine, eventData.subMesh);\n    }\n\n    eventData.isReadyForSubMesh = isReady;\n  };\n\n  MaterialPluginManager.prototype._handlePluginEventPrepareDefines = function (eventData) {\n    for (var _i = 0, _a = this._activePlugins; _i < _a.length; _i++) {\n      var plugin = _a[_i];\n      plugin.prepareDefines(eventData.defines, this._scene, eventData.mesh);\n    }\n  };\n\n  MaterialPluginManager.prototype._handlePluginEventHardBindForSubMesh = function (eventData) {\n    for (var _i = 0, _a = this._activePluginsForExtraEvents; _i < _a.length; _i++) {\n      var plugin = _a[_i];\n      plugin.hardBindForSubMesh(this._material._uniformBuffer, this._scene, this._engine, eventData.subMesh);\n    }\n  };\n\n  MaterialPluginManager.prototype._handlePluginEventBindForSubMesh = function (eventData) {\n    for (var _i = 0, _a = this._activePlugins; _i < _a.length; _i++) {\n      var plugin = _a[_i];\n      plugin.bindForSubMesh(this._material._uniformBuffer, this._scene, this._engine, eventData.subMesh);\n    }\n  };\n\n  MaterialPluginManager.prototype._handlePluginEventHasRenderTargetTextures = function (eventData) {\n    var hasRenderTargetTextures = false;\n\n    for (var _i = 0, _a = this._activePluginsForExtraEvents; _i < _a.length; _i++) {\n      var plugin = _a[_i];\n      hasRenderTargetTextures = plugin.hasRenderTargetTextures();\n\n      if (hasRenderTargetTextures) {\n        break;\n      }\n    }\n\n    eventData.hasRenderTargetTextures = hasRenderTargetTextures;\n  };\n\n  MaterialPluginManager.prototype._handlePluginEventFillRenderTargetTextures = function (eventData) {\n    for (var _i = 0, _a = this._activePluginsForExtraEvents; _i < _a.length; _i++) {\n      var plugin = _a[_i];\n      plugin.fillRenderTargetTextures(eventData.renderTargets);\n    }\n  };\n\n  MaterialPluginManager.prototype._handlePluginEvent = function (id, info) {\n    var _a, _b, _c;\n\n    switch (id) {\n      case MaterialPluginEvent.GetActiveTextures:\n        {\n          var eventData = info;\n\n          for (var _i = 0, _d = this._activePlugins; _i < _d.length; _i++) {\n            var plugin = _d[_i];\n            plugin.getActiveTextures(eventData.activeTextures);\n          }\n\n          break;\n        }\n\n      case MaterialPluginEvent.GetAnimatables:\n        {\n          var eventData = info;\n\n          for (var _e = 0, _f = this._activePlugins; _e < _f.length; _e++) {\n            var plugin = _f[_e];\n            plugin.getAnimatables(eventData.animatables);\n          }\n\n          break;\n        }\n\n      case MaterialPluginEvent.HasTexture:\n        {\n          var eventData = info;\n          var hasTexture = false;\n\n          for (var _g = 0, _h = this._activePlugins; _g < _h.length; _g++) {\n            var plugin = _h[_g];\n            hasTexture = plugin.hasTexture(eventData.texture);\n\n            if (hasTexture) {\n              break;\n            }\n          }\n\n          eventData.hasTexture = hasTexture;\n          break;\n        }\n\n      case MaterialPluginEvent.Disposed:\n        {\n          var eventData = info;\n\n          for (var _j = 0, _k = this._plugins; _j < _k.length; _j++) {\n            var plugin = _k[_j];\n            plugin.dispose(eventData.forceDisposeTextures);\n          }\n\n          break;\n        }\n\n      case MaterialPluginEvent.GetDefineNames:\n        {\n          var eventData = info;\n          eventData.defineNames = this._defineNamesFromPlugins;\n          break;\n        }\n\n      case MaterialPluginEvent.PrepareEffect:\n        {\n          var eventData = info;\n\n          for (var _l = 0, _m = this._activePlugins; _l < _m.length; _l++) {\n            var plugin = _m[_l];\n            eventData.fallbackRank = plugin.addFallbacks(eventData.defines, eventData.fallbacks, eventData.fallbackRank);\n          }\n\n          if (this._uniformList.length > 0) {\n            (_a = eventData.uniforms).push.apply(_a, this._uniformList);\n          }\n\n          if (this._samplerList.length > 0) {\n            (_b = eventData.samplers).push.apply(_b, this._samplerList);\n          }\n\n          if (this._uboList.length > 0) {\n            (_c = eventData.uniformBuffersNames).push.apply(_c, this._uboList);\n          }\n\n          eventData.customCode = this._injectCustomCode(eventData.customCode);\n          break;\n        }\n\n      case MaterialPluginEvent.PrepareUniformBuffer:\n        {\n          var eventData = info;\n          this._uboDeclaration = \"\";\n          this._vertexDeclaration = \"\";\n          this._fragmentDeclaration = \"\";\n          this._uniformList = [];\n          this._samplerList = [];\n          this._uboList = [];\n\n          for (var _o = 0, _p = this._plugins; _o < _p.length; _o++) {\n            var plugin = _p[_o];\n            var uniforms = plugin.getUniforms();\n\n            if (uniforms) {\n              if (uniforms.ubo) {\n                for (var _q = 0, _r = uniforms.ubo; _q < _r.length; _q++) {\n                  var uniform = _r[_q];\n                  eventData.ubo.addUniform(uniform.name, uniform.size);\n                  this._uboDeclaration += \"\".concat(uniform.type, \" \").concat(uniform.name, \";\\r\\n\");\n\n                  this._uniformList.push(uniform.name);\n                }\n              }\n\n              if (uniforms.vertex) {\n                this._vertexDeclaration += uniforms.vertex + \"\\r\\n\";\n              }\n\n              if (uniforms.fragment) {\n                this._fragmentDeclaration += uniforms.fragment + \"\\r\\n\";\n              }\n            }\n\n            plugin.getSamplers(this._samplerList);\n            plugin.getUniformBuffersNames(this._uboList);\n          }\n\n          break;\n        }\n    }\n  };\n\n  MaterialPluginManager.prototype._collectPointNames = function (shaderType, customCode) {\n    if (!customCode) {\n      return;\n    }\n\n    for (var pointName in customCode) {\n      if (!this._codeInjectionPoints[shaderType]) {\n        this._codeInjectionPoints[shaderType] = {};\n      }\n\n      this._codeInjectionPoints[shaderType][pointName] = true;\n    }\n  };\n\n  MaterialPluginManager.prototype._injectCustomCode = function (existingCallback) {\n    var _this = this;\n\n    return function (shaderType, code) {\n      var _a;\n\n      if (existingCallback) {\n        code = existingCallback(shaderType, code);\n      }\n\n      if (_this._uboDeclaration) {\n        code = code.replace(\"#define ADDITIONAL_UBO_DECLARATION\", _this._uboDeclaration);\n      }\n\n      if (_this._vertexDeclaration) {\n        code = code.replace(\"#define ADDITIONAL_VERTEX_DECLARATION\", _this._vertexDeclaration);\n      }\n\n      if (_this._fragmentDeclaration) {\n        code = code.replace(\"#define ADDITIONAL_FRAGMENT_DECLARATION\", _this._fragmentDeclaration);\n      }\n\n      var points = (_a = _this._codeInjectionPoints) === null || _a === void 0 ? void 0 : _a[shaderType];\n\n      if (!points) {\n        return code;\n      }\n\n      for (var pointName in points) {\n        var injectedCode = \"\";\n\n        for (var _i = 0, _b = _this._activePlugins; _i < _b.length; _i++) {\n          var plugin = _b[_i];\n          var customCode = plugin.getCustomCode(shaderType);\n\n          if (customCode === null || customCode === void 0 ? void 0 : customCode[pointName]) {\n            injectedCode += customCode[pointName] + \"\\r\\n\";\n          }\n        }\n\n        if (injectedCode.length > 0) {\n          if (pointName.charAt(0) === \"!\") {\n            // pointName is a regular expression\n            var rx = new RegExp(pointName.substring(1), \"g\");\n            var match = rx.exec(code);\n\n            while (match !== null) {\n              code = code.replace(match[0], injectedCode);\n              match = rx.exec(code);\n            }\n          } else {\n            var fullPointName = \"#define \" + pointName;\n            code = code.replace(fullPointName, \"\\r\\n\" + injectedCode + \"\\r\\n\" + fullPointName);\n          }\n        }\n      }\n\n      return code;\n    };\n  };\n\n  return MaterialPluginManager;\n}();\n\nexport { MaterialPluginManager };\nvar plugins = [];\nvar inited = false;\n/**\n * Registers a new material plugin through a factory, or updates it. This makes the plugin available to all materials instantiated after its registration.\n * @param pluginName The plugin name\n * @param factory The factory function which allows to create the plugin\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\n\nexport function RegisterMaterialPlugin(pluginName, factory) {\n  if (!inited) {\n    Material.OnEventObservable.add(function (material) {\n      for (var _i = 0, plugins_1 = plugins; _i < plugins_1.length; _i++) {\n        var _a = plugins_1[_i],\n            factory_1 = _a[1];\n        factory_1(material);\n      }\n    }, MaterialPluginEvent.Created);\n    inited = true;\n  }\n\n  var existing = plugins.filter(function (_a) {\n    var name = _a[0],\n        _factory = _a[1];\n    return name === pluginName;\n  });\n\n  if (existing.length > 0) {\n    existing[0][1] = factory;\n  } else {\n    plugins.push([pluginName, factory]);\n  }\n}\n/**\n * Removes a material plugin from the list of global plugins.\n * @param pluginName The plugin name\n * @returns true if the plugin has been removed, else false\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\n\nexport function UnregisterMaterialPlugin(pluginName) {\n  for (var i = 0; i < plugins.length; ++i) {\n    if (plugins[i][0] === pluginName) {\n      plugins.splice(i, 1);\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Clear the list of global material plugins\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\n\nexport function UnregisterAllMaterialPlugins() {\n  plugins.length = 0;\n}","map":{"version":3,"mappings":"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","names":["Material","MaterialPluginEvent","material","_material","_scene","getScene","_engine","getEngine","MaterialPluginManager","plugin","i","_plugins","length","name","concat","_uniformBufferLayoutBuilt","_callbackPluginEventGeneric","_handlePluginEvent","bind","push","sort","a","b","priority","_codeInjectionPoints","defineNamesFromPlugins","_i","plugin_1","collectDefines","_collectPointNames","getCustomCode","Object","keys","_defineNamesFromPlugins","_activePlugins","indexOf","_callbackPluginEventIsReadyForSubMesh","_handlePluginEventIsReadyForSubMesh","_callbackPluginEventPrepareDefines","_handlePluginEventPrepareDefines","_callbackPluginEventBindForSubMesh","_handlePluginEventBindForSubMesh","registerForExtraEvents","_activePluginsForExtraEvents","_callbackPluginEventHasRenderTargetTextures","_handlePluginEventHasRenderTargetTextures","_callbackPluginEventFillRenderTargetTextures","_handlePluginEventFillRenderTargetTextures","_callbackPluginEventHardBindForSubMesh","_handlePluginEventHardBindForSubMesh","eventData","isReady","isReadyForSubMesh","defines","subMesh","prepareDefines","mesh","hardBindForSubMesh","_uniformBuffer","bindForSubMesh","hasRenderTargetTextures","fillRenderTargetTextures","renderTargets","id","info","GetActiveTextures","getActiveTextures","activeTextures","GetAnimatables","_e","getAnimatables","animatables","HasTexture","hasTexture","_g","texture","Disposed","_j","dispose","forceDisposeTextures","GetDefineNames","defineNames","PrepareEffect","_l","fallbackRank","addFallbacks","fallbacks","_uniformList","uniforms","apply","_a","_samplerList","samplers","_b","_uboList","uniformBuffersNames","_c","customCode","_injectCustomCode","PrepareUniformBuffer","_uboDeclaration","_vertexDeclaration","_fragmentDeclaration","_o","getUniforms","ubo","_q","uniform","addUniform","size","type","vertex","fragment","getSamplers","getUniformBuffersNames","shaderType","pointName","existingCallback","code","_this","replace","points","injectedCode","charAt","rx","RegExp","substring","match","exec","fullPointName","plugins","inited","RegisterMaterialPlugin","pluginName","factory","OnEventObservable","add","factory_1","Created","existing","filter","_factory","UnregisterMaterialPlugin","splice","UnregisterAllMaterialPlugins"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Materials/materialPluginManager.ts"],"sourcesContent":["import type { ShaderCustomProcessingFunction } from \"../Engines/Processors/shaderProcessingOptions\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Material } from \"./material\";\r\nimport type {\r\n    MaterialPluginPrepareEffect,\r\n    MaterialPluginBindForSubMesh,\r\n    MaterialPluginDisposed,\r\n    MaterialPluginGetActiveTextures,\r\n    MaterialPluginGetAnimatables,\r\n    MaterialPluginGetDefineNames,\r\n    MaterialPluginHasTexture,\r\n    MaterialPluginIsReadyForSubMesh,\r\n    MaterialPluginPrepareDefines,\r\n    MaterialPluginPrepareUniformBuffer,\r\n    MaterialPluginHardBindForSubMesh,\r\n    MaterialPluginHasRenderTargetTextures,\r\n    MaterialPluginFillRenderTargetTextures,\r\n} from \"./materialPluginEvent\";\r\nimport { MaterialPluginEvent } from \"./materialPluginEvent\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\ndeclare type Engine = import(\"../Engines/engine\").Engine;\r\ndeclare type MaterialPluginBase = import(\"./materialPluginBase\").MaterialPluginBase;\r\n\r\ndeclare module \"./material\" {\r\n    export interface Material {\r\n        /**\r\n         * Plugin manager for this material\r\n         */\r\n        pluginManager?: MaterialPluginManager;\r\n    }\r\n}\r\n\r\n/**\r\n * Class that manages the plugins of a material\r\n * @since 5.0\r\n */\r\nexport class MaterialPluginManager {\r\n    protected _material: Material;\r\n    protected _scene: Scene;\r\n    protected _engine: Engine;\r\n    protected _plugins: MaterialPluginBase[] = [];\r\n    protected _activePlugins: MaterialPluginBase[] = [];\r\n    protected _activePluginsForExtraEvents: MaterialPluginBase[] = [];\r\n    protected _codeInjectionPoints: { [shaderType: string]: { [codeName: string]: boolean } };\r\n    protected _defineNamesFromPlugins?: { [name: string]: { type: string; default: any } };\r\n    protected _uboDeclaration: string;\r\n    protected _vertexDeclaration: string;\r\n    protected _fragmentDeclaration: string;\r\n    protected _uniformList: string[];\r\n    protected _samplerList: string[];\r\n    protected _uboList: string[];\r\n\r\n    /**\r\n     * Creates a new instance of the plugin manager\r\n     * @param material material that this manager will manage the plugins for\r\n     */\r\n    constructor(material: Material) {\r\n        this._material = material;\r\n        this._scene = material.getScene();\r\n        this._engine = this._scene.getEngine();\r\n    }\r\n\r\n    /**\r\n     * @param plugin\r\n     * @hidden\r\n     */\r\n    public _addPlugin(plugin: MaterialPluginBase): void {\r\n        for (let i = 0; i < this._plugins.length; ++i) {\r\n            if (this._plugins[i].name === plugin.name) {\r\n                throw `Plugin \"${plugin.name}\" already added to the material \"${this._material.name}\"!`;\r\n            }\r\n        }\r\n\r\n        if (this._material._uniformBufferLayoutBuilt) {\r\n            throw `The plugin \"${plugin.name}\" can't be added to the material \"${this._material.name}\" because this material has already been used for rendering! Please add plugins to materials before any rendering with this material occurs.`;\r\n        }\r\n\r\n        this._material._callbackPluginEventGeneric = this._handlePluginEvent.bind(this);\r\n\r\n        this._plugins.push(plugin);\r\n        this._plugins.sort((a, b) => a.priority - b.priority);\r\n\r\n        this._codeInjectionPoints = {};\r\n\r\n        const defineNamesFromPlugins = {};\r\n        for (const plugin of this._plugins) {\r\n            plugin.collectDefines(defineNamesFromPlugins);\r\n            this._collectPointNames(\"vertex\", plugin.getCustomCode(\"vertex\"));\r\n            this._collectPointNames(\"fragment\", plugin.getCustomCode(\"fragment\"));\r\n        }\r\n\r\n        if (Object.keys(defineNamesFromPlugins).length > 0) {\r\n            this._defineNamesFromPlugins = defineNamesFromPlugins;\r\n        } else {\r\n            delete this._defineNamesFromPlugins;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param plugin\r\n     * @hidden\r\n     */\r\n    public _activatePlugin(plugin: MaterialPluginBase): void {\r\n        if (this._activePlugins.indexOf(plugin) === -1) {\r\n            this._activePlugins.push(plugin);\r\n            this._activePlugins.sort((a, b) => a.priority - b.priority);\r\n\r\n            this._material._callbackPluginEventIsReadyForSubMesh = this._handlePluginEventIsReadyForSubMesh.bind(this);\r\n            this._material._callbackPluginEventPrepareDefines = this._handlePluginEventPrepareDefines.bind(this);\r\n            this._material._callbackPluginEventBindForSubMesh = this._handlePluginEventBindForSubMesh.bind(this);\r\n\r\n            if (plugin.registerForExtraEvents) {\r\n                this._activePluginsForExtraEvents.push(plugin);\r\n                this._activePluginsForExtraEvents.sort((a, b) => a.priority - b.priority);\r\n                this._material._callbackPluginEventHasRenderTargetTextures = this._handlePluginEventHasRenderTargetTextures.bind(this);\r\n                this._material._callbackPluginEventFillRenderTargetTextures = this._handlePluginEventFillRenderTargetTextures.bind(this);\r\n                this._material._callbackPluginEventHardBindForSubMesh = this._handlePluginEventHardBindForSubMesh.bind(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a plugin from the list of plugins managed by this manager\r\n     * @param name name of the plugin\r\n     * @returns the plugin if found, else null\r\n     */\r\n    public getPlugin(name: string): Nullable<MaterialPluginBase> {\r\n        for (let i = 0; i < this._plugins.length; ++i) {\r\n            if (this._plugins[i].name === name) {\r\n                return this._plugins[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    protected _handlePluginEventIsReadyForSubMesh(eventData: MaterialPluginIsReadyForSubMesh): void {\r\n        let isReady = true;\r\n        for (const plugin of this._activePlugins) {\r\n            isReady = isReady && plugin.isReadyForSubMesh(eventData.defines, this._scene, this._engine, eventData.subMesh);\r\n        }\r\n        eventData.isReadyForSubMesh = isReady;\r\n    }\r\n\r\n    protected _handlePluginEventPrepareDefines(eventData: MaterialPluginPrepareDefines): void {\r\n        for (const plugin of this._activePlugins) {\r\n            plugin.prepareDefines(eventData.defines, this._scene, eventData.mesh);\r\n        }\r\n    }\r\n\r\n    protected _handlePluginEventHardBindForSubMesh(eventData: MaterialPluginHardBindForSubMesh): void {\r\n        for (const plugin of this._activePluginsForExtraEvents) {\r\n            plugin.hardBindForSubMesh(this._material._uniformBuffer, this._scene, this._engine, eventData.subMesh);\r\n        }\r\n    }\r\n\r\n    protected _handlePluginEventBindForSubMesh(eventData: MaterialPluginBindForSubMesh): void {\r\n        for (const plugin of this._activePlugins) {\r\n            plugin.bindForSubMesh(this._material._uniformBuffer, this._scene, this._engine, eventData.subMesh);\r\n        }\r\n    }\r\n\r\n    protected _handlePluginEventHasRenderTargetTextures(eventData: MaterialPluginHasRenderTargetTextures): void {\r\n        let hasRenderTargetTextures = false;\r\n        for (const plugin of this._activePluginsForExtraEvents) {\r\n            hasRenderTargetTextures = plugin.hasRenderTargetTextures();\r\n            if (hasRenderTargetTextures) {\r\n                break;\r\n            }\r\n        }\r\n        eventData.hasRenderTargetTextures = hasRenderTargetTextures;\r\n    }\r\n\r\n    protected _handlePluginEventFillRenderTargetTextures(eventData: MaterialPluginFillRenderTargetTextures): void {\r\n        for (const plugin of this._activePluginsForExtraEvents) {\r\n            plugin.fillRenderTargetTextures(eventData.renderTargets);\r\n        }\r\n    }\r\n\r\n    protected _handlePluginEvent(\r\n        id: number,\r\n        info:\r\n            | MaterialPluginGetActiveTextures\r\n            | MaterialPluginGetAnimatables\r\n            | MaterialPluginHasTexture\r\n            | MaterialPluginDisposed\r\n            | MaterialPluginGetDefineNames\r\n            | MaterialPluginPrepareEffect\r\n            | MaterialPluginPrepareUniformBuffer\r\n    ): void {\r\n        switch (id) {\r\n            case MaterialPluginEvent.GetActiveTextures: {\r\n                const eventData = info as MaterialPluginGetActiveTextures;\r\n                for (const plugin of this._activePlugins) {\r\n                    plugin.getActiveTextures(eventData.activeTextures);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.GetAnimatables: {\r\n                const eventData = info as MaterialPluginGetAnimatables;\r\n                for (const plugin of this._activePlugins) {\r\n                    plugin.getAnimatables(eventData.animatables);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.HasTexture: {\r\n                const eventData = info as MaterialPluginHasTexture;\r\n                let hasTexture = false;\r\n                for (const plugin of this._activePlugins) {\r\n                    hasTexture = plugin.hasTexture(eventData.texture);\r\n                    if (hasTexture) {\r\n                        break;\r\n                    }\r\n                }\r\n                eventData.hasTexture = hasTexture;\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.Disposed: {\r\n                const eventData = info as MaterialPluginDisposed;\r\n                for (const plugin of this._plugins) {\r\n                    plugin.dispose(eventData.forceDisposeTextures);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.GetDefineNames: {\r\n                const eventData = info as MaterialPluginGetDefineNames;\r\n                eventData.defineNames = this._defineNamesFromPlugins;\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.PrepareEffect: {\r\n                const eventData = info as MaterialPluginPrepareEffect;\r\n                for (const plugin of this._activePlugins) {\r\n                    eventData.fallbackRank = plugin.addFallbacks(eventData.defines, eventData.fallbacks, eventData.fallbackRank);\r\n                }\r\n                if (this._uniformList.length > 0) {\r\n                    eventData.uniforms.push(...this._uniformList);\r\n                }\r\n                if (this._samplerList.length > 0) {\r\n                    eventData.samplers.push(...this._samplerList);\r\n                }\r\n                if (this._uboList.length > 0) {\r\n                    eventData.uniformBuffersNames.push(...this._uboList);\r\n                }\r\n                eventData.customCode = this._injectCustomCode(eventData.customCode);\r\n                break;\r\n            }\r\n\r\n            case MaterialPluginEvent.PrepareUniformBuffer: {\r\n                const eventData = info as MaterialPluginPrepareUniformBuffer;\r\n                this._uboDeclaration = \"\";\r\n                this._vertexDeclaration = \"\";\r\n                this._fragmentDeclaration = \"\";\r\n                this._uniformList = [];\r\n                this._samplerList = [];\r\n                this._uboList = [];\r\n                for (const plugin of this._plugins) {\r\n                    const uniforms = plugin.getUniforms();\r\n                    if (uniforms) {\r\n                        if (uniforms.ubo) {\r\n                            for (const uniform of uniforms.ubo) {\r\n                                eventData.ubo.addUniform(uniform.name, uniform.size);\r\n                                this._uboDeclaration += `${uniform.type} ${uniform.name};\\r\\n`;\r\n                                this._uniformList.push(uniform.name);\r\n                            }\r\n                        }\r\n                        if (uniforms.vertex) {\r\n                            this._vertexDeclaration += uniforms.vertex + \"\\r\\n\";\r\n                        }\r\n                        if (uniforms.fragment) {\r\n                            this._fragmentDeclaration += uniforms.fragment + \"\\r\\n\";\r\n                        }\r\n                    }\r\n                    plugin.getSamplers(this._samplerList);\r\n                    plugin.getUniformBuffersNames(this._uboList);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected _collectPointNames(shaderType: string, customCode: Nullable<{ [pointName: string]: string }> | undefined): void {\r\n        if (!customCode) {\r\n            return;\r\n        }\r\n        for (const pointName in customCode) {\r\n            if (!this._codeInjectionPoints[shaderType]) {\r\n                this._codeInjectionPoints[shaderType] = {};\r\n            }\r\n            this._codeInjectionPoints[shaderType][pointName] = true;\r\n        }\r\n    }\r\n\r\n    protected _injectCustomCode(existingCallback?: (shaderType: string, code: string) => string): ShaderCustomProcessingFunction {\r\n        return (shaderType: string, code: string) => {\r\n            if (existingCallback) {\r\n                code = existingCallback(shaderType, code);\r\n            }\r\n            if (this._uboDeclaration) {\r\n                code = code.replace(\"#define ADDITIONAL_UBO_DECLARATION\", this._uboDeclaration);\r\n            }\r\n            if (this._vertexDeclaration) {\r\n                code = code.replace(\"#define ADDITIONAL_VERTEX_DECLARATION\", this._vertexDeclaration);\r\n            }\r\n            if (this._fragmentDeclaration) {\r\n                code = code.replace(\"#define ADDITIONAL_FRAGMENT_DECLARATION\", this._fragmentDeclaration);\r\n            }\r\n            const points = this._codeInjectionPoints?.[shaderType];\r\n            if (!points) {\r\n                return code;\r\n            }\r\n            for (const pointName in points) {\r\n                let injectedCode = \"\";\r\n                for (const plugin of this._activePlugins) {\r\n                    const customCode = plugin.getCustomCode(shaderType);\r\n                    if (customCode?.[pointName]) {\r\n                        injectedCode += customCode[pointName] + \"\\r\\n\";\r\n                    }\r\n                }\r\n                if (injectedCode.length > 0) {\r\n                    if (pointName.charAt(0) === \"!\") {\r\n                        // pointName is a regular expression\r\n                        const rx = new RegExp(pointName.substring(1), \"g\");\r\n                        let match = rx.exec(code);\r\n                        while (match !== null) {\r\n                            code = code.replace(match[0], injectedCode);\r\n                            match = rx.exec(code);\r\n                        }\r\n                    } else {\r\n                        const fullPointName = \"#define \" + pointName;\r\n                        code = code.replace(fullPointName, \"\\r\\n\" + injectedCode + \"\\r\\n\" + fullPointName);\r\n                    }\r\n                }\r\n            }\r\n            return code;\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Type for plugin material factories.\r\n */\r\nexport type PluginMaterialFactory = (material: Material) => Nullable<MaterialPluginBase>;\r\n\r\nconst plugins: Array<[string, PluginMaterialFactory]> = [];\r\nlet inited = false;\r\n\r\n/**\r\n * Registers a new material plugin through a factory, or updates it. This makes the plugin available to all materials instantiated after its registration.\r\n * @param pluginName The plugin name\r\n * @param factory The factory function which allows to create the plugin\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function RegisterMaterialPlugin(pluginName: string, factory: PluginMaterialFactory): void {\r\n    if (!inited) {\r\n        Material.OnEventObservable.add((material: Material) => {\r\n            for (const [, factory] of plugins) {\r\n                factory(material);\r\n            }\r\n        }, MaterialPluginEvent.Created);\r\n        inited = true;\r\n    }\r\n    const existing = plugins.filter(([name, _factory]) => name === pluginName);\r\n    if (existing.length > 0) {\r\n        existing[0][1] = factory;\r\n    } else {\r\n        plugins.push([pluginName, factory]);\r\n    }\r\n}\r\n\r\n/**\r\n * Removes a material plugin from the list of global plugins.\r\n * @param pluginName The plugin name\r\n * @returns true if the plugin has been removed, else false\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function UnregisterMaterialPlugin(pluginName: string): boolean {\r\n    for (let i = 0; i < plugins.length; ++i) {\r\n        if (plugins[i][0] === pluginName) {\r\n            plugins.splice(i, 1);\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Clear the list of global material plugins\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport function UnregisterAllMaterialPlugins(): void {\r\n    plugins.length = 0;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}