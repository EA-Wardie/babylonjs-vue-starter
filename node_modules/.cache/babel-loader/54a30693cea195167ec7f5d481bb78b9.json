{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport { __extends } from \"tslib\";\nimport { BezierCurve } from \"../Maths/math.path.js\";\n/**\n * Base class used for every default easing function.\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\n */\n\nvar EasingFunction =\n/** @class */\nfunction () {\n  function EasingFunction() {\n    this._easingMode = EasingFunction.EASINGMODE_EASEIN;\n  }\n  /**\n   * Sets the easing mode of the current function.\n   * @param easingMode Defines the willing mode (EASINGMODE_EASEIN, EASINGMODE_EASEOUT or EASINGMODE_EASEINOUT)\n   */\n\n\n  EasingFunction.prototype.setEasingMode = function (easingMode) {\n    var n = Math.min(Math.max(easingMode, 0), 2);\n    this._easingMode = n;\n  };\n  /**\n   * Gets the current easing mode.\n   * @returns the easing mode\n   */\n\n\n  EasingFunction.prototype.getEasingMode = function () {\n    return this._easingMode;\n  };\n  /**\n   * @param gradient\n   * @hidden\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  EasingFunction.prototype.easeInCore = function (gradient) {\n    throw new Error(\"You must implement this method\");\n  };\n  /**\n   * Given an input gradient between 0 and 1, this returns the corresponding value\n   * of the easing function.\n   * @param gradient Defines the value between 0 and 1 we want the easing value for\n   * @returns the corresponding value on the curve defined by the easing function\n   */\n\n\n  EasingFunction.prototype.ease = function (gradient) {\n    switch (this._easingMode) {\n      case EasingFunction.EASINGMODE_EASEIN:\n        return this.easeInCore(gradient);\n\n      case EasingFunction.EASINGMODE_EASEOUT:\n        return 1 - this.easeInCore(1 - gradient);\n    }\n\n    if (gradient >= 0.5) {\n      return (1 - this.easeInCore((1 - gradient) * 2)) * 0.5 + 0.5;\n    }\n\n    return this.easeInCore(gradient * 2) * 0.5;\n  };\n  /**\n   * Interpolation follows the mathematical formula associated with the easing function.\n   */\n\n\n  EasingFunction.EASINGMODE_EASEIN = 0;\n  /**\n   * Interpolation follows 100% interpolation minus the output of the formula associated with the easing function.\n   */\n\n  EasingFunction.EASINGMODE_EASEOUT = 1;\n  /**\n   * Interpolation uses EaseIn for the first half of the animation and EaseOut for the second half.\n   */\n\n  EasingFunction.EASINGMODE_EASEINOUT = 2;\n  return EasingFunction;\n}();\n\nexport { EasingFunction };\n/**\n * Easing function with a circle shape (see link below).\n * @see https://easings.net/#easeInCirc\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\n */\n\nvar CircleEase =\n/** @class */\nfunction (_super) {\n  __extends(CircleEase, _super);\n\n  function CircleEase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @param gradient\n   * @hidden\n   */\n\n\n  CircleEase.prototype.easeInCore = function (gradient) {\n    gradient = Math.max(0, Math.min(1, gradient));\n    return 1.0 - Math.sqrt(1.0 - gradient * gradient);\n  };\n\n  return CircleEase;\n}(EasingFunction);\n\nexport { CircleEase };\n/**\n * Easing function with a ease back shape (see link below).\n * @see https://easings.net/#easeInBack\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\n */\n\nvar BackEase =\n/** @class */\nfunction (_super) {\n  __extends(BackEase, _super);\n  /**\n   * Instantiates a back ease easing\n   * @see https://easings.net/#easeInBack\n   * @param amplitude Defines the amplitude of the function\n   */\n\n\n  function BackEase(\n  /** Defines the amplitude of the function */\n  amplitude) {\n    if (amplitude === void 0) {\n      amplitude = 1;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.amplitude = amplitude;\n    return _this;\n  }\n  /**\n   * @param gradient\n   * @hidden\n   */\n\n\n  BackEase.prototype.easeInCore = function (gradient) {\n    var num = Math.max(0, this.amplitude);\n    return Math.pow(gradient, 3.0) - gradient * num * Math.sin(3.1415926535897931 * gradient);\n  };\n\n  return BackEase;\n}(EasingFunction);\n\nexport { BackEase };\n/**\n * Easing function with a bouncing shape (see link below).\n * @see https://easings.net/#easeInBounce\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\n */\n\nvar BounceEase =\n/** @class */\nfunction (_super) {\n  __extends(BounceEase, _super);\n  /**\n   * Instantiates a bounce easing\n   * @see https://easings.net/#easeInBounce\n   * @param bounces Defines the number of bounces\n   * @param bounciness Defines the amplitude of the bounce\n   */\n\n\n  function BounceEase(\n  /** Defines the number of bounces */\n  bounces,\n  /** Defines the amplitude of the bounce */\n  bounciness) {\n    if (bounces === void 0) {\n      bounces = 3;\n    }\n\n    if (bounciness === void 0) {\n      bounciness = 2;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.bounces = bounces;\n    _this.bounciness = bounciness;\n    return _this;\n  }\n  /**\n   * @param gradient\n   * @hidden\n   */\n\n\n  BounceEase.prototype.easeInCore = function (gradient) {\n    var y = Math.max(0.0, this.bounces);\n    var bounciness = this.bounciness;\n\n    if (bounciness <= 1.0) {\n      bounciness = 1.001;\n    }\n\n    var num9 = Math.pow(bounciness, y);\n    var num5 = 1.0 - bounciness;\n    var num4 = (1.0 - num9) / num5 + num9 * 0.5;\n    var num15 = gradient * num4;\n    var num65 = Math.log(-num15 * (1.0 - bounciness) + 1.0) / Math.log(bounciness);\n    var num3 = Math.floor(num65);\n    var num13 = num3 + 1.0;\n    var num8 = (1.0 - Math.pow(bounciness, num3)) / (num5 * num4);\n    var num12 = (1.0 - Math.pow(bounciness, num13)) / (num5 * num4);\n    var num7 = (num8 + num12) * 0.5;\n    var num6 = gradient - num7;\n    var num2 = num7 - num8;\n    return -Math.pow(1.0 / bounciness, y - num3) / (num2 * num2) * (num6 - num2) * (num6 + num2);\n  };\n\n  return BounceEase;\n}(EasingFunction);\n\nexport { BounceEase };\n/**\n * Easing function with a power of 3 shape (see link below).\n * @see https://easings.net/#easeInCubic\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\n */\n\nvar CubicEase =\n/** @class */\nfunction (_super) {\n  __extends(CubicEase, _super);\n\n  function CubicEase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @param gradient\n   * @hidden\n   */\n\n\n  CubicEase.prototype.easeInCore = function (gradient) {\n    return gradient * gradient * gradient;\n  };\n\n  return CubicEase;\n}(EasingFunction);\n\nexport { CubicEase };\n/**\n * Easing function with an elastic shape (see link below).\n * @see https://easings.net/#easeInElastic\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\n */\n\nvar ElasticEase =\n/** @class */\nfunction (_super) {\n  __extends(ElasticEase, _super);\n  /**\n   * Instantiates an elastic easing function\n   * @see https://easings.net/#easeInElastic\n   * @param oscillations Defines the number of oscillations\n   * @param springiness Defines the amplitude of the oscillations\n   */\n\n\n  function ElasticEase(\n  /** Defines the number of oscillations*/\n  oscillations,\n  /** Defines the amplitude of the oscillations*/\n  springiness) {\n    if (oscillations === void 0) {\n      oscillations = 3;\n    }\n\n    if (springiness === void 0) {\n      springiness = 3;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.oscillations = oscillations;\n    _this.springiness = springiness;\n    return _this;\n  }\n  /**\n   * @param gradient\n   * @hidden\n   */\n\n\n  ElasticEase.prototype.easeInCore = function (gradient) {\n    var num2;\n    var num3 = Math.max(0.0, this.oscillations);\n    var num = Math.max(0.0, this.springiness);\n\n    if (num == 0) {\n      num2 = gradient;\n    } else {\n      num2 = (Math.exp(num * gradient) - 1.0) / (Math.exp(num) - 1.0);\n    }\n\n    return num2 * Math.sin((6.2831853071795862 * num3 + 1.5707963267948966) * gradient);\n  };\n\n  return ElasticEase;\n}(EasingFunction);\n\nexport { ElasticEase };\n/**\n * Easing function with an exponential shape (see link below).\n * @see https://easings.net/#easeInExpo\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\n */\n\nvar ExponentialEase =\n/** @class */\nfunction (_super) {\n  __extends(ExponentialEase, _super);\n  /**\n   * Instantiates an exponential easing function\n   * @see https://easings.net/#easeInExpo\n   * @param exponent Defines the exponent of the function\n   */\n\n\n  function ExponentialEase(\n  /** Defines the exponent of the function */\n  exponent) {\n    if (exponent === void 0) {\n      exponent = 2;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.exponent = exponent;\n    return _this;\n  }\n  /**\n   * @param gradient\n   * @hidden\n   */\n\n\n  ExponentialEase.prototype.easeInCore = function (gradient) {\n    if (this.exponent <= 0) {\n      return gradient;\n    }\n\n    return (Math.exp(this.exponent * gradient) - 1.0) / (Math.exp(this.exponent) - 1.0);\n  };\n\n  return ExponentialEase;\n}(EasingFunction);\n\nexport { ExponentialEase };\n/**\n * Easing function with a power shape (see link below).\n * @see https://easings.net/#easeInQuad\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\n */\n\nvar PowerEase =\n/** @class */\nfunction (_super) {\n  __extends(PowerEase, _super);\n  /**\n   * Instantiates an power base easing function\n   * @see https://easings.net/#easeInQuad\n   * @param power Defines the power of the function\n   */\n\n\n  function PowerEase(\n  /** Defines the power of the function */\n  power) {\n    if (power === void 0) {\n      power = 2;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.power = power;\n    return _this;\n  }\n  /**\n   * @param gradient\n   * @hidden\n   */\n\n\n  PowerEase.prototype.easeInCore = function (gradient) {\n    var y = Math.max(0.0, this.power);\n    return Math.pow(gradient, y);\n  };\n\n  return PowerEase;\n}(EasingFunction);\n\nexport { PowerEase };\n/**\n * Easing function with a power of 2 shape (see link below).\n * @see https://easings.net/#easeInQuad\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\n */\n\nvar QuadraticEase =\n/** @class */\nfunction (_super) {\n  __extends(QuadraticEase, _super);\n\n  function QuadraticEase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @param gradient\n   * @hidden\n   */\n\n\n  QuadraticEase.prototype.easeInCore = function (gradient) {\n    return gradient * gradient;\n  };\n\n  return QuadraticEase;\n}(EasingFunction);\n\nexport { QuadraticEase };\n/**\n * Easing function with a power of 4 shape (see link below).\n * @see https://easings.net/#easeInQuart\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\n */\n\nvar QuarticEase =\n/** @class */\nfunction (_super) {\n  __extends(QuarticEase, _super);\n\n  function QuarticEase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @param gradient\n   * @hidden\n   */\n\n\n  QuarticEase.prototype.easeInCore = function (gradient) {\n    return gradient * gradient * gradient * gradient;\n  };\n\n  return QuarticEase;\n}(EasingFunction);\n\nexport { QuarticEase };\n/**\n * Easing function with a power of 5 shape (see link below).\n * @see https://easings.net/#easeInQuint\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\n */\n\nvar QuinticEase =\n/** @class */\nfunction (_super) {\n  __extends(QuinticEase, _super);\n\n  function QuinticEase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @param gradient\n   * @hidden\n   */\n\n\n  QuinticEase.prototype.easeInCore = function (gradient) {\n    return gradient * gradient * gradient * gradient * gradient;\n  };\n\n  return QuinticEase;\n}(EasingFunction);\n\nexport { QuinticEase };\n/**\n * Easing function with a sin shape (see link below).\n * @see https://easings.net/#easeInSine\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\n */\n\nvar SineEase =\n/** @class */\nfunction (_super) {\n  __extends(SineEase, _super);\n\n  function SineEase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @param gradient\n   * @hidden\n   */\n\n\n  SineEase.prototype.easeInCore = function (gradient) {\n    return 1.0 - Math.sin(1.5707963267948966 * (1.0 - gradient));\n  };\n\n  return SineEase;\n}(EasingFunction);\n\nexport { SineEase };\n/**\n * Easing function with a bezier shape (see link below).\n * @see http://cubic-bezier.com/#.17,.67,.83,.67\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\n */\n\nvar BezierCurveEase =\n/** @class */\nfunction (_super) {\n  __extends(BezierCurveEase, _super);\n  /**\n   * Instantiates a bezier function\n   * @see http://cubic-bezier.com/#.17,.67,.83,.67\n   * @param x1 Defines the x component of the start tangent in the bezier curve\n   * @param y1 Defines the y component of the start tangent in the bezier curve\n   * @param x2 Defines the x component of the end tangent in the bezier curve\n   * @param y2 Defines the y component of the end tangent in the bezier curve\n   */\n\n\n  function BezierCurveEase(\n  /** Defines the x component of the start tangent in the bezier curve */\n  x1,\n  /** Defines the y component of the start tangent in the bezier curve */\n  y1,\n  /** Defines the x component of the end tangent in the bezier curve */\n  x2,\n  /** Defines the y component of the end tangent in the bezier curve */\n  y2) {\n    if (x1 === void 0) {\n      x1 = 0;\n    }\n\n    if (y1 === void 0) {\n      y1 = 0;\n    }\n\n    if (x2 === void 0) {\n      x2 = 1;\n    }\n\n    if (y2 === void 0) {\n      y2 = 1;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.x1 = x1;\n    _this.y1 = y1;\n    _this.x2 = x2;\n    _this.y2 = y2;\n    return _this;\n  }\n  /**\n   * @param gradient\n   * @hidden\n   */\n\n\n  BezierCurveEase.prototype.easeInCore = function (gradient) {\n    return BezierCurve.Interpolate(gradient, this.x1, this.y1, this.x2, this.y2);\n  };\n\n  return BezierCurveEase;\n}(EasingFunction);\n\nexport { BezierCurveEase };","map":{"version":3,"mappings":"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","names":["BezierCurve","EasingFunction","EASINGMODE_EASEIN","easingMode","n","Math","min","max","_easingMode","gradient","Error","easeInCore","EASINGMODE_EASEOUT","__extends","CircleEase","sqrt","amplitude","_super","_this","BackEase","num","pow","sin","bounces","bounciness","BounceEase","y","num9","num5","num4","num15","num65","log","num3","floor","num13","num8","num12","num7","num6","num2","CubicEase","oscillations","springiness","ElasticEase","exp","exponent","ExponentialEase","power","PowerEase","QuadraticEase","QuarticEase","QuinticEase","SineEase","x1","y1","x2","y2","BezierCurveEase","Interpolate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Animations/easing.ts"],"sourcesContent":["import { BezierCurve } from \"../Maths/math.path\";\r\n\r\n/**\r\n * This represents the main contract an easing function should follow.\r\n * Easing functions are used throughout the animation system.\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\r\nexport interface IEasingFunction {\r\n    /**\r\n     * Given an input gradient between 0 and 1, this returns the corresponding value\r\n     * of the easing function.\r\n     * The link below provides some of the most common examples of easing functions.\r\n     * @see https://easings.net/\r\n     * @param gradient Defines the value between 0 and 1 we want the easing value for\r\n     * @returns the corresponding value on the curve defined by the easing function\r\n     */\r\n    ease(gradient: number): number;\r\n}\r\n\r\n/**\r\n * Base class used for every default easing function.\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\r\nexport class EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Interpolation follows the mathematical formula associated with the easing function.\r\n     */\r\n    public static readonly EASINGMODE_EASEIN = 0;\r\n\r\n    /**\r\n     * Interpolation follows 100% interpolation minus the output of the formula associated with the easing function.\r\n     */\r\n    public static readonly EASINGMODE_EASEOUT = 1;\r\n\r\n    /**\r\n     * Interpolation uses EaseIn for the first half of the animation and EaseOut for the second half.\r\n     */\r\n    public static readonly EASINGMODE_EASEINOUT = 2;\r\n\r\n    private _easingMode = EasingFunction.EASINGMODE_EASEIN;\r\n\r\n    /**\r\n     * Sets the easing mode of the current function.\r\n     * @param easingMode Defines the willing mode (EASINGMODE_EASEIN, EASINGMODE_EASEOUT or EASINGMODE_EASEINOUT)\r\n     */\r\n    public setEasingMode(easingMode: number) {\r\n        const n = Math.min(Math.max(easingMode, 0), 2);\r\n        this._easingMode = n;\r\n    }\r\n    /**\r\n     * Gets the current easing mode.\r\n     * @returns the easing mode\r\n     */\r\n    public getEasingMode(): number {\r\n        return this._easingMode;\r\n    }\r\n\r\n    /**\r\n     * @param gradient\r\n     * @hidden\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public easeInCore(gradient: number): number {\r\n        throw new Error(\"You must implement this method\");\r\n    }\r\n\r\n    /**\r\n     * Given an input gradient between 0 and 1, this returns the corresponding value\r\n     * of the easing function.\r\n     * @param gradient Defines the value between 0 and 1 we want the easing value for\r\n     * @returns the corresponding value on the curve defined by the easing function\r\n     */\r\n    public ease(gradient: number): number {\r\n        switch (this._easingMode) {\r\n            case EasingFunction.EASINGMODE_EASEIN:\r\n                return this.easeInCore(gradient);\r\n            case EasingFunction.EASINGMODE_EASEOUT:\r\n                return 1 - this.easeInCore(1 - gradient);\r\n        }\r\n\r\n        if (gradient >= 0.5) {\r\n            return (1 - this.easeInCore((1 - gradient) * 2)) * 0.5 + 0.5;\r\n        }\r\n\r\n        return this.easeInCore(gradient * 2) * 0.5;\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a circle shape (see link below).\r\n * @see https://easings.net/#easeInCirc\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\r\nexport class CircleEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * @param gradient\r\n     * @hidden\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        gradient = Math.max(0, Math.min(1, gradient));\r\n        return 1.0 - Math.sqrt(1.0 - gradient * gradient);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a ease back shape (see link below).\r\n * @see https://easings.net/#easeInBack\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\r\nexport class BackEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates a back ease easing\r\n     * @see https://easings.net/#easeInBack\r\n     * @param amplitude Defines the amplitude of the function\r\n     */\r\n    constructor(\r\n        /** Defines the amplitude of the function */\r\n        public amplitude: number = 1\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @param gradient\r\n     * @hidden\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        const num = Math.max(0, this.amplitude);\r\n        return Math.pow(gradient, 3.0) - gradient * num * Math.sin(3.1415926535897931 * gradient);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a bouncing shape (see link below).\r\n * @see https://easings.net/#easeInBounce\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\r\nexport class BounceEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates a bounce easing\r\n     * @see https://easings.net/#easeInBounce\r\n     * @param bounces Defines the number of bounces\r\n     * @param bounciness Defines the amplitude of the bounce\r\n     */\r\n    constructor(\r\n        /** Defines the number of bounces */\r\n        public bounces: number = 3,\r\n        /** Defines the amplitude of the bounce */\r\n        public bounciness: number = 2\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @param gradient\r\n     * @hidden\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        const y = Math.max(0.0, this.bounces);\r\n        let bounciness = this.bounciness;\r\n        if (bounciness <= 1.0) {\r\n            bounciness = 1.001;\r\n        }\r\n        const num9 = Math.pow(bounciness, y);\r\n        const num5 = 1.0 - bounciness;\r\n        const num4 = (1.0 - num9) / num5 + num9 * 0.5;\r\n        const num15 = gradient * num4;\r\n        const num65 = Math.log(-num15 * (1.0 - bounciness) + 1.0) / Math.log(bounciness);\r\n        const num3 = Math.floor(num65);\r\n        const num13 = num3 + 1.0;\r\n        const num8 = (1.0 - Math.pow(bounciness, num3)) / (num5 * num4);\r\n        const num12 = (1.0 - Math.pow(bounciness, num13)) / (num5 * num4);\r\n        const num7 = (num8 + num12) * 0.5;\r\n        const num6 = gradient - num7;\r\n        const num2 = num7 - num8;\r\n        return (-Math.pow(1.0 / bounciness, y - num3) / (num2 * num2)) * (num6 - num2) * (num6 + num2);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a power of 3 shape (see link below).\r\n * @see https://easings.net/#easeInCubic\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\r\nexport class CubicEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * @param gradient\r\n     * @hidden\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        return gradient * gradient * gradient;\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with an elastic shape (see link below).\r\n * @see https://easings.net/#easeInElastic\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\r\nexport class ElasticEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates an elastic easing function\r\n     * @see https://easings.net/#easeInElastic\r\n     * @param oscillations Defines the number of oscillations\r\n     * @param springiness Defines the amplitude of the oscillations\r\n     */\r\n    constructor(\r\n        /** Defines the number of oscillations*/\r\n        public oscillations: number = 3,\r\n        /** Defines the amplitude of the oscillations*/\r\n        public springiness: number = 3\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @param gradient\r\n     * @hidden\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        let num2;\r\n        const num3 = Math.max(0.0, this.oscillations);\r\n        const num = Math.max(0.0, this.springiness);\r\n\r\n        if (num == 0) {\r\n            num2 = gradient;\r\n        } else {\r\n            num2 = (Math.exp(num * gradient) - 1.0) / (Math.exp(num) - 1.0);\r\n        }\r\n        return num2 * Math.sin((6.2831853071795862 * num3 + 1.5707963267948966) * gradient);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with an exponential shape (see link below).\r\n * @see https://easings.net/#easeInExpo\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\r\nexport class ExponentialEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates an exponential easing function\r\n     * @see https://easings.net/#easeInExpo\r\n     * @param exponent Defines the exponent of the function\r\n     */\r\n    constructor(\r\n        /** Defines the exponent of the function */\r\n        public exponent: number = 2\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @param gradient\r\n     * @hidden\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        if (this.exponent <= 0) {\r\n            return gradient;\r\n        }\r\n\r\n        return (Math.exp(this.exponent * gradient) - 1.0) / (Math.exp(this.exponent) - 1.0);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a power shape (see link below).\r\n * @see https://easings.net/#easeInQuad\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\r\nexport class PowerEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates an power base easing function\r\n     * @see https://easings.net/#easeInQuad\r\n     * @param power Defines the power of the function\r\n     */\r\n    constructor(\r\n        /** Defines the power of the function */\r\n        public power: number = 2\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @param gradient\r\n     * @hidden\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        const y = Math.max(0.0, this.power);\r\n        return Math.pow(gradient, y);\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a power of 2 shape (see link below).\r\n * @see https://easings.net/#easeInQuad\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\r\nexport class QuadraticEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * @param gradient\r\n     * @hidden\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        return gradient * gradient;\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a power of 4 shape (see link below).\r\n * @see https://easings.net/#easeInQuart\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\r\nexport class QuarticEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * @param gradient\r\n     * @hidden\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        return gradient * gradient * gradient * gradient;\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a power of 5 shape (see link below).\r\n * @see https://easings.net/#easeInQuint\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\r\nexport class QuinticEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * @param gradient\r\n     * @hidden\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        return gradient * gradient * gradient * gradient * gradient;\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a sin shape (see link below).\r\n * @see https://easings.net/#easeInSine\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\r\nexport class SineEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * @param gradient\r\n     * @hidden\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        return 1.0 - Math.sin(1.5707963267948966 * (1.0 - gradient));\r\n    }\r\n}\r\n\r\n/**\r\n * Easing function with a bezier shape (see link below).\r\n * @see http://cubic-bezier.com/#.17,.67,.83,.67\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\r\nexport class BezierCurveEase extends EasingFunction implements IEasingFunction {\r\n    /**\r\n     * Instantiates a bezier function\r\n     * @see http://cubic-bezier.com/#.17,.67,.83,.67\r\n     * @param x1 Defines the x component of the start tangent in the bezier curve\r\n     * @param y1 Defines the y component of the start tangent in the bezier curve\r\n     * @param x2 Defines the x component of the end tangent in the bezier curve\r\n     * @param y2 Defines the y component of the end tangent in the bezier curve\r\n     */\r\n    constructor(\r\n        /** Defines the x component of the start tangent in the bezier curve */\r\n        public x1: number = 0,\r\n        /** Defines the y component of the start tangent in the bezier curve */\r\n        public y1: number = 0,\r\n        /** Defines the x component of the end tangent in the bezier curve */\r\n        public x2: number = 1,\r\n        /** Defines the y component of the end tangent in the bezier curve */\r\n        public y2: number = 1\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @param gradient\r\n     * @hidden\r\n     */\r\n    public easeInCore(gradient: number): number {\r\n        return BezierCurve.Interpolate(gradient, this.x1, this.y1, this.x2, this.y2);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}