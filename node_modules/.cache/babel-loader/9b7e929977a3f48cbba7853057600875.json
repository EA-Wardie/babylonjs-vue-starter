{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport { __awaiter, __generator } from \"tslib\";\nimport * as WebGPUConstants from \"./webgpuConstants.js\";\n/** @hidden */\n\nvar WebGPUQuerySet =\n/** @class */\nfunction () {\n  function WebGPUQuerySet(count, type, device, bufferManager, canUseMultipleBuffers) {\n    if (canUseMultipleBuffers === void 0) {\n      canUseMultipleBuffers = true;\n    }\n\n    this._dstBuffers = [];\n    this._device = device;\n    this._bufferManager = bufferManager;\n    this._count = count;\n    this._canUseMultipleBuffers = canUseMultipleBuffers;\n    this._querySet = device.createQuerySet({\n      type: type,\n      count: count\n    });\n    this._queryBuffer = bufferManager.createRawBuffer(8 * count, WebGPUConstants.BufferUsage.QueryResolve | WebGPUConstants.BufferUsage.CopySrc);\n\n    if (!canUseMultipleBuffers) {\n      this._dstBuffers.push(this._bufferManager.createRawBuffer(8 * this._count, WebGPUConstants.BufferUsage.MapRead | WebGPUConstants.BufferUsage.CopyDst));\n    }\n  }\n\n  Object.defineProperty(WebGPUQuerySet.prototype, \"querySet\", {\n    get: function get() {\n      return this._querySet;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  WebGPUQuerySet.prototype._getBuffer = function (firstQuery, queryCount) {\n    if (!this._canUseMultipleBuffers && this._dstBuffers.length === 0) {\n      return null;\n    }\n\n    var encoderResult = this._device.createCommandEncoder();\n\n    var buffer;\n\n    if (this._dstBuffers.length === 0) {\n      buffer = this._bufferManager.createRawBuffer(8 * this._count, WebGPUConstants.BufferUsage.MapRead | WebGPUConstants.BufferUsage.CopyDst);\n    } else {\n      buffer = this._dstBuffers[this._dstBuffers.length - 1];\n      this._dstBuffers.length--;\n    }\n\n    encoderResult.resolveQuerySet(this._querySet, firstQuery, queryCount, this._queryBuffer, 0);\n    encoderResult.copyBufferToBuffer(this._queryBuffer, 0, buffer, 0, 8 * queryCount);\n\n    this._device.queue.submit([encoderResult.finish()]);\n\n    return buffer;\n  };\n\n  WebGPUQuerySet.prototype.readValues = function (firstQuery, queryCount) {\n    if (firstQuery === void 0) {\n      firstQuery = 0;\n    }\n\n    if (queryCount === void 0) {\n      queryCount = 1;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var buffer, arrayBuf;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            buffer = this._getBuffer(firstQuery, queryCount);\n\n            if (buffer === null) {\n              return [2\n              /*return*/\n              , null];\n            }\n\n            return [4\n            /*yield*/\n            , buffer.mapAsync(WebGPUConstants.MapMode.Read)];\n\n          case 1:\n            _a.sent();\n\n            arrayBuf = new BigUint64Array(buffer.getMappedRange()).slice();\n            buffer.unmap();\n            this._dstBuffers[this._dstBuffers.length] = buffer;\n            return [2\n            /*return*/\n            , arrayBuf];\n        }\n      });\n    });\n  };\n\n  WebGPUQuerySet.prototype.readValue = function (firstQuery) {\n    if (firstQuery === void 0) {\n      firstQuery = 0;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var buffer, arrayBuf, value;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            buffer = this._getBuffer(firstQuery, 1);\n\n            if (buffer === null) {\n              return [2\n              /*return*/\n              , null];\n            }\n\n            return [4\n            /*yield*/\n            , buffer.mapAsync(WebGPUConstants.MapMode.Read)];\n\n          case 1:\n            _a.sent();\n\n            arrayBuf = new BigUint64Array(buffer.getMappedRange());\n            value = Number(arrayBuf[0]);\n            buffer.unmap();\n            this._dstBuffers[this._dstBuffers.length] = buffer;\n            return [2\n            /*return*/\n            , value];\n        }\n      });\n    });\n  };\n\n  WebGPUQuerySet.prototype.readTwoValuesAndSubtract = function (firstQuery) {\n    if (firstQuery === void 0) {\n      firstQuery = 0;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var buffer, arrayBuf, value;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            buffer = this._getBuffer(firstQuery, 2);\n\n            if (buffer === null) {\n              return [2\n              /*return*/\n              , null];\n            }\n\n            return [4\n            /*yield*/\n            , buffer.mapAsync(WebGPUConstants.MapMode.Read)];\n\n          case 1:\n            _a.sent();\n\n            arrayBuf = new BigUint64Array(buffer.getMappedRange());\n            value = Number(arrayBuf[1] - arrayBuf[0]);\n            buffer.unmap();\n            this._dstBuffers[this._dstBuffers.length] = buffer;\n            return [2\n            /*return*/\n            , value];\n        }\n      });\n    });\n  };\n\n  WebGPUQuerySet.prototype.dispose = function () {\n    this._querySet.destroy();\n\n    this._bufferManager.releaseBuffer(this._queryBuffer);\n\n    for (var i = 0; i < this._dstBuffers.length; ++i) {\n      this._bufferManager.releaseBuffer(this._dstBuffers[i]);\n    }\n  };\n\n  return WebGPUQuerySet;\n}();\n\nexport { WebGPUQuerySet };","map":{"version":3,"mappings":"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","names":["WebGPUConstants","count","type","device","bufferManager","canUseMultipleBuffers","_device","_bufferManager","_count","_canUseMultipleBuffers","_querySet","createQuerySet","_queryBuffer","createRawBuffer","BufferUsage","QueryResolve","CopySrc","_dstBuffers","push","MapRead","CopyDst","Object","WebGPUQuerySet","firstQuery","queryCount","length","encoderResult","createCommandEncoder","buffer","resolveQuerySet","copyBufferToBuffer","queue","submit","finish","_getBuffer","mapAsync","MapMode","Read","_a","arrayBuf","BigUint64Array","getMappedRange","slice","unmap","value","Number","destroy","releaseBuffer","i"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/WebGPU/webgpuQuerySet.ts"],"sourcesContent":["import type { WebGPUBufferManager } from \"./webgpuBufferManager\";\r\nimport * as WebGPUConstants from \"./webgpuConstants\";\r\nimport type { QueryType } from \"./webgpuConstants\";\r\n\r\n/** @hidden */\r\nexport class WebGPUQuerySet {\r\n    private _device: GPUDevice;\r\n    private _bufferManager: WebGPUBufferManager;\r\n\r\n    private _count: number;\r\n    private _canUseMultipleBuffers: boolean;\r\n    private _querySet: GPUQuerySet;\r\n    private _queryBuffer: GPUBuffer;\r\n    private _dstBuffers: GPUBuffer[] = [];\r\n\r\n    public get querySet(): GPUQuerySet {\r\n        return this._querySet;\r\n    }\r\n\r\n    constructor(count: number, type: QueryType, device: GPUDevice, bufferManager: WebGPUBufferManager, canUseMultipleBuffers = true) {\r\n        this._device = device;\r\n        this._bufferManager = bufferManager;\r\n        this._count = count;\r\n        this._canUseMultipleBuffers = canUseMultipleBuffers;\r\n\r\n        this._querySet = device.createQuerySet({\r\n            type,\r\n            count,\r\n        });\r\n\r\n        this._queryBuffer = bufferManager.createRawBuffer(8 * count, WebGPUConstants.BufferUsage.QueryResolve | WebGPUConstants.BufferUsage.CopySrc);\r\n\r\n        if (!canUseMultipleBuffers) {\r\n            this._dstBuffers.push(this._bufferManager.createRawBuffer(8 * this._count, WebGPUConstants.BufferUsage.MapRead | WebGPUConstants.BufferUsage.CopyDst));\r\n        }\r\n    }\r\n\r\n    private _getBuffer(firstQuery: number, queryCount: number): GPUBuffer | null {\r\n        if (!this._canUseMultipleBuffers && this._dstBuffers.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        const encoderResult = this._device.createCommandEncoder();\r\n\r\n        let buffer: GPUBuffer;\r\n        if (this._dstBuffers.length === 0) {\r\n            buffer = this._bufferManager.createRawBuffer(8 * this._count, WebGPUConstants.BufferUsage.MapRead | WebGPUConstants.BufferUsage.CopyDst);\r\n        } else {\r\n            buffer = this._dstBuffers[this._dstBuffers.length - 1];\r\n            this._dstBuffers.length--;\r\n        }\r\n\r\n        encoderResult.resolveQuerySet(this._querySet, firstQuery, queryCount, this._queryBuffer, 0);\r\n        encoderResult.copyBufferToBuffer(this._queryBuffer, 0, buffer, 0, 8 * queryCount);\r\n\r\n        this._device.queue.submit([encoderResult.finish()]);\r\n\r\n        return buffer;\r\n    }\r\n\r\n    public async readValues(firstQuery = 0, queryCount = 1): Promise<BigUint64Array | null> {\r\n        const buffer = this._getBuffer(firstQuery, queryCount);\r\n        if (buffer === null) {\r\n            return null;\r\n        }\r\n\r\n        await buffer.mapAsync(WebGPUConstants.MapMode.Read);\r\n\r\n        const arrayBuf = new BigUint64Array(buffer.getMappedRange()).slice();\r\n\r\n        buffer.unmap();\r\n\r\n        this._dstBuffers[this._dstBuffers.length] = buffer;\r\n\r\n        return arrayBuf;\r\n    }\r\n\r\n    public async readValue(firstQuery = 0): Promise<number | null> {\r\n        const buffer = this._getBuffer(firstQuery, 1);\r\n        if (buffer === null) {\r\n            return null;\r\n        }\r\n\r\n        await buffer.mapAsync(WebGPUConstants.MapMode.Read);\r\n\r\n        const arrayBuf = new BigUint64Array(buffer.getMappedRange());\r\n        const value = Number(arrayBuf[0]);\r\n\r\n        buffer.unmap();\r\n\r\n        this._dstBuffers[this._dstBuffers.length] = buffer;\r\n\r\n        return value;\r\n    }\r\n\r\n    public async readTwoValuesAndSubtract(firstQuery = 0): Promise<number | null> {\r\n        const buffer = this._getBuffer(firstQuery, 2);\r\n        if (buffer === null) {\r\n            return null;\r\n        }\r\n\r\n        await buffer.mapAsync(WebGPUConstants.MapMode.Read);\r\n\r\n        const arrayBuf = new BigUint64Array(buffer.getMappedRange());\r\n        const value = Number(arrayBuf[1] - arrayBuf[0]);\r\n\r\n        buffer.unmap();\r\n\r\n        this._dstBuffers[this._dstBuffers.length] = buffer;\r\n\r\n        return value;\r\n    }\r\n\r\n    public dispose() {\r\n        this._querySet.destroy();\r\n        this._bufferManager.releaseBuffer(this._queryBuffer);\r\n        for (let i = 0; i < this._dstBuffers.length; ++i) {\r\n            this._bufferManager.releaseBuffer(this._dstBuffers[i]);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}