{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { WebXRGenericTriggerMotionController } from \"./webXRGenericMotionController.js\";\nimport { Tools } from \"../../Misc/tools.js\";\nimport { WebXRProfiledMotionController } from \"./webXRProfiledMotionController.js\";\n/**\n * The MotionController Manager manages all registered motion controllers and loads the right one when needed.\n *\n * When this repository is complete: https://github.com/immersive-web/webxr-input-profiles/tree/master/packages/assets\n * it should be replaced with auto-loaded controllers.\n *\n * When using a model try to stay as generic as possible. Eventually there will be no need in any of the controller classes\n */\n\nvar controllerCache = [];\n/**\n * Motion controller manager is managing the different webxr profiles and makes sure the right\n * controller is being loaded.\n */\n\nvar WebXRMotionControllerManager =\n/** @class */\nfunction () {\n  function WebXRMotionControllerManager() {}\n  /**\n   * Clear the cache used for profile loading and reload when requested again\n   */\n\n\n  WebXRMotionControllerManager.ClearProfilesCache = function () {\n    this._ProfilesList = null;\n    this._ProfileLoadingPromises = {};\n  };\n  /**\n   * Register the default fallbacks.\n   * This function is called automatically when this file is imported.\n   */\n\n\n  WebXRMotionControllerManager.DefaultFallbacks = function () {\n    this.RegisterFallbacksForProfileId(\"google-daydream\", [\"generic-touchpad\"]);\n    this.RegisterFallbacksForProfileId(\"htc-vive-focus\", [\"generic-trigger-touchpad\"]);\n    this.RegisterFallbacksForProfileId(\"htc-vive\", [\"generic-trigger-squeeze-touchpad\"]);\n    this.RegisterFallbacksForProfileId(\"magicleap-one\", [\"generic-trigger-squeeze-touchpad\"]);\n    this.RegisterFallbacksForProfileId(\"windows-mixed-reality\", [\"generic-trigger-squeeze-touchpad-thumbstick\"]);\n    this.RegisterFallbacksForProfileId(\"microsoft-mixed-reality\", [\"windows-mixed-reality\", \"generic-trigger-squeeze-touchpad-thumbstick\"]);\n    this.RegisterFallbacksForProfileId(\"oculus-go\", [\"generic-trigger-touchpad\"]);\n    this.RegisterFallbacksForProfileId(\"oculus-touch-v2\", [\"oculus-touch\", \"generic-trigger-squeeze-thumbstick\"]);\n    this.RegisterFallbacksForProfileId(\"oculus-touch\", [\"generic-trigger-squeeze-thumbstick\"]);\n    this.RegisterFallbacksForProfileId(\"samsung-gearvr\", [\"windows-mixed-reality\", \"generic-trigger-squeeze-touchpad-thumbstick\"]);\n    this.RegisterFallbacksForProfileId(\"samsung-odyssey\", [\"generic-touchpad\"]);\n    this.RegisterFallbacksForProfileId(\"valve-index\", [\"generic-trigger-squeeze-touchpad-thumbstick\"]);\n    this.RegisterFallbacksForProfileId(\"generic-hand-select\", [\"generic-trigger\"]);\n  };\n  /**\n   * Find a fallback profile if the profile was not found. There are a few predefined generic profiles.\n   * @param profileId the profile to which a fallback needs to be found\n   * @return an array with corresponding fallback profiles\n   */\n\n\n  WebXRMotionControllerManager.FindFallbackWithProfileId = function (profileId) {\n    var returnArray = this._Fallbacks[profileId] || [];\n    returnArray.unshift(profileId);\n    return returnArray;\n  };\n  /**\n   * When acquiring a new xrInput object (usually by the WebXRInput class), match it with the correct profile.\n   * The order of search:\n   *\n   * 1) Iterate the profiles array of the xr input and try finding a corresponding motion controller\n   * 2) (If not found) search in the gamepad id and try using it (legacy versions only)\n   * 3) search for registered fallbacks (should be redundant, nonetheless it makes sense to check)\n   * 4) return the generic trigger controller if none were found\n   *\n   * @param xrInput the xrInput to which a new controller is initialized\n   * @param scene the scene to which the model will be added\n   * @param forceProfile force a certain profile for this controller\n   * @return A promise that fulfils with the motion controller class for this profile id or the generic standard class if none was found\n   */\n\n\n  WebXRMotionControllerManager.GetMotionControllerWithXRInput = function (xrInput, scene, forceProfile) {\n    var _this = this;\n\n    var profileArray = [];\n\n    if (forceProfile) {\n      profileArray.push(forceProfile);\n    }\n\n    profileArray.push.apply(profileArray, xrInput.profiles || []); // emulator support\n\n    if (profileArray.length && !profileArray[0]) {\n      // remove the first \"undefined\" that the emulator is adding\n      profileArray.pop();\n    } // legacy support - try using the gamepad id\n\n\n    if (xrInput.gamepad && xrInput.gamepad.id) {\n      switch (xrInput.gamepad.id) {\n        case xrInput.gamepad.id.match(/oculus touch/gi) ? xrInput.gamepad.id : undefined:\n          // oculus in gamepad id\n          profileArray.push(\"oculus-touch-v2\");\n          break;\n      }\n    } // make sure microsoft/windows mixed reality works correctly\n\n\n    var windowsMRIdx = profileArray.indexOf(\"windows-mixed-reality\");\n\n    if (windowsMRIdx !== -1) {\n      profileArray.splice(windowsMRIdx, 0, \"microsoft-mixed-reality\");\n    }\n\n    if (!profileArray.length) {\n      profileArray.push(\"generic-trigger\");\n    }\n\n    if (this.UseOnlineRepository) {\n      var firstFunction = this.PrioritizeOnlineRepository ? this._LoadProfileFromRepository : this._LoadProfilesFromAvailableControllers;\n      var secondFunction_1 = this.PrioritizeOnlineRepository ? this._LoadProfilesFromAvailableControllers : this._LoadProfileFromRepository;\n      return firstFunction.call(this, profileArray, xrInput, scene)[\"catch\"](function () {\n        return secondFunction_1.call(_this, profileArray, xrInput, scene);\n      });\n    } else {\n      // use only available functions\n      return this._LoadProfilesFromAvailableControllers(profileArray, xrInput, scene);\n    }\n  };\n  /**\n   * Register a new controller based on its profile. This function will be called by the controller classes themselves.\n   *\n   * If you are missing a profile, make sure it is imported in your source, otherwise it will not register.\n   *\n   * @param type the profile type to register\n   * @param constructFunction the function to be called when loading this profile\n   */\n\n\n  WebXRMotionControllerManager.RegisterController = function (type, constructFunction) {\n    this._AvailableControllers[type] = constructFunction;\n  };\n  /**\n   * Register a fallback to a specific profile.\n   * @param profileId the profileId that will receive the fallbacks\n   * @param fallbacks A list of fallback profiles\n   */\n\n\n  WebXRMotionControllerManager.RegisterFallbacksForProfileId = function (profileId, fallbacks) {\n    var _a;\n\n    if (this._Fallbacks[profileId]) {\n      (_a = this._Fallbacks[profileId]).push.apply(_a, fallbacks);\n    } else {\n      this._Fallbacks[profileId] = fallbacks;\n    }\n  };\n  /**\n   * Will update the list of profiles available in the repository\n   * @return a promise that resolves to a map of profiles available online\n   */\n\n\n  WebXRMotionControllerManager.UpdateProfilesList = function () {\n    this._ProfilesList = Tools.LoadFileAsync(this.BaseRepositoryUrl + \"/profiles/profilesList.json\", false).then(function (data) {\n      return JSON.parse(data.toString());\n    });\n    return this._ProfilesList;\n  };\n  /**\n   * Clear the controller's cache (usually happens at the end of a session)\n   */\n\n\n  WebXRMotionControllerManager.ClearControllerCache = function () {\n    controllerCache.forEach(function (cacheItem) {\n      cacheItem.meshes.forEach(function (mesh) {\n        mesh.dispose(false, true);\n      });\n    });\n    controllerCache.length = 0;\n  };\n\n  WebXRMotionControllerManager._LoadProfileFromRepository = function (profileArray, xrInput, scene) {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      if (!_this._ProfilesList) {\n        return _this.UpdateProfilesList();\n      } else {\n        return _this._ProfilesList;\n      }\n    }).then(function (profilesList) {\n      // load the right profile\n      for (var i = 0; i < profileArray.length; ++i) {\n        // defensive\n        if (!profileArray[i]) {\n          continue;\n        }\n\n        if (profilesList[profileArray[i]]) {\n          return profileArray[i];\n        }\n      }\n\n      throw new Error(\"neither controller \".concat(profileArray[0], \" nor all fallbacks were found in the repository,\"));\n    }).then(function (profileToLoad) {\n      // load the profile\n      if (!_this._ProfileLoadingPromises[profileToLoad]) {\n        _this._ProfileLoadingPromises[profileToLoad] = Tools.LoadFileAsync(\"\".concat(_this.BaseRepositoryUrl, \"/profiles/\").concat(profileToLoad, \"/profile.json\"), false).then(function (data) {\n          return JSON.parse(data);\n        });\n      }\n\n      return _this._ProfileLoadingPromises[profileToLoad];\n    }).then(function (profile) {\n      return new WebXRProfiledMotionController(scene, xrInput, profile, _this.BaseRepositoryUrl, _this.DisableControllerCache ? undefined : controllerCache);\n    });\n  };\n\n  WebXRMotionControllerManager._LoadProfilesFromAvailableControllers = function (profileArray, xrInput, scene) {\n    // check fallbacks\n    for (var i = 0; i < profileArray.length; ++i) {\n      // defensive\n      if (!profileArray[i]) {\n        continue;\n      }\n\n      var fallbacks = this.FindFallbackWithProfileId(profileArray[i]);\n\n      for (var j = 0; j < fallbacks.length; ++j) {\n        var constructionFunction = this._AvailableControllers[fallbacks[j]];\n\n        if (constructionFunction) {\n          return Promise.resolve(constructionFunction(xrInput, scene));\n        }\n      }\n    }\n\n    throw new Error(\"no controller requested was found in the available controllers list\");\n  };\n\n  WebXRMotionControllerManager._AvailableControllers = {};\n  WebXRMotionControllerManager._Fallbacks = {}; // cache for loading\n\n  WebXRMotionControllerManager._ProfileLoadingPromises = {};\n  /**\n   * The base URL of the online controller repository. Can be changed at any time.\n   */\n\n  WebXRMotionControllerManager.BaseRepositoryUrl = \"https://immersive-web.github.io/webxr-input-profiles/packages/viewer/dist\";\n  /**\n   * Which repository gets priority - local or online\n   */\n\n  WebXRMotionControllerManager.PrioritizeOnlineRepository = true;\n  /**\n   * Use the online repository, or use only locally-defined controllers\n   */\n\n  WebXRMotionControllerManager.UseOnlineRepository = true;\n  /**\n   * Disable the controller cache and load the models each time a new WebXRProfileMotionController is loaded.\n   * Defaults to true.\n   */\n\n  WebXRMotionControllerManager.DisableControllerCache = true;\n  return WebXRMotionControllerManager;\n}();\n\nexport { WebXRMotionControllerManager }; // register the generic profile(s) here so we will at least have them\n\nWebXRMotionControllerManager.RegisterController(WebXRGenericTriggerMotionController.ProfileId, function (xrInput, scene) {\n  return new WebXRGenericTriggerMotionController(scene, xrInput.gamepad, xrInput.handedness);\n}); // register fallbacks\n\nWebXRMotionControllerManager.DefaultFallbacks();","map":{"version":3,"mappings":"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","names":["WebXRGenericTriggerMotionController","Tools","WebXRProfiledMotionController","controllerCache","WebXRMotionControllerManager","_ProfilesList","_ProfileLoadingPromises","RegisterFallbacksForProfileId","profileId","returnArray","_Fallbacks","unshift","xrInput","scene","forceProfile","profileArray","push","apply","profiles","length","pop","gamepad","id","match","undefined","windowsMRIdx","indexOf","splice","UseOnlineRepository","firstFunction","PrioritizeOnlineRepository","_LoadProfileFromRepository","_LoadProfilesFromAvailableControllers","secondFunction_1","call","_this","type","constructFunction","_AvailableControllers","fallbacks","_a","LoadFileAsync","BaseRepositoryUrl","then","data","JSON","parse","toString","forEach","cacheItem","meshes","mesh","dispose","Promise","resolve","UpdateProfilesList","profilesList","i","Error","profileToLoad","concat","profile","DisableControllerCache","FindFallbackWithProfileId","j","constructionFunction","RegisterController","ProfileId","handedness","DefaultFallbacks"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/XR/motionController/webXRMotionControllerManager.ts"],"sourcesContent":["import type { WebXRAbstractMotionController, IMotionControllerProfile } from \"./webXRAbstractMotionController\";\r\nimport { WebXRGenericTriggerMotionController } from \"./webXRGenericMotionController\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Tools } from \"../../Misc/tools\";\r\nimport { WebXRProfiledMotionController } from \"./webXRProfiledMotionController\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\n\r\n/**\r\n * A construction function type to create a new controller based on an xrInput object\r\n */\r\nexport type MotionControllerConstructor = (xrInput: XRInputSource, scene: Scene) => WebXRAbstractMotionController;\r\n\r\n/**\r\n * The MotionController Manager manages all registered motion controllers and loads the right one when needed.\r\n *\r\n * When this repository is complete: https://github.com/immersive-web/webxr-input-profiles/tree/master/packages/assets\r\n * it should be replaced with auto-loaded controllers.\r\n *\r\n * When using a model try to stay as generic as possible. Eventually there will be no need in any of the controller classes\r\n */\r\n\r\nconst controllerCache: Array<{\r\n    filename: string;\r\n    path: string;\r\n    meshes: AbstractMesh[];\r\n}> = [];\r\n\r\n/**\r\n * Motion controller manager is managing the different webxr profiles and makes sure the right\r\n * controller is being loaded.\r\n */\r\nexport class WebXRMotionControllerManager {\r\n    private static _AvailableControllers: { [type: string]: MotionControllerConstructor } = {};\r\n    private static _Fallbacks: { [profileId: string]: string[] } = {};\r\n    // cache for loading\r\n    private static _ProfileLoadingPromises: { [profileName: string]: Promise<IMotionControllerProfile> } = {};\r\n    private static _ProfilesList: Nullable<Promise<{ [profile: string]: string }>>;\r\n\r\n    /**\r\n     * The base URL of the online controller repository. Can be changed at any time.\r\n     */\r\n    public static BaseRepositoryUrl = \"https://immersive-web.github.io/webxr-input-profiles/packages/viewer/dist\";\r\n    /**\r\n     * Which repository gets priority - local or online\r\n     */\r\n    public static PrioritizeOnlineRepository: boolean = true;\r\n    /**\r\n     * Use the online repository, or use only locally-defined controllers\r\n     */\r\n    public static UseOnlineRepository: boolean = true;\r\n\r\n    /**\r\n     * Disable the controller cache and load the models each time a new WebXRProfileMotionController is loaded.\r\n     * Defaults to true.\r\n     */\r\n    public static DisableControllerCache: boolean = true;\r\n\r\n    /**\r\n     * Clear the cache used for profile loading and reload when requested again\r\n     */\r\n    public static ClearProfilesCache() {\r\n        this._ProfilesList = null;\r\n        this._ProfileLoadingPromises = {};\r\n    }\r\n\r\n    /**\r\n     * Register the default fallbacks.\r\n     * This function is called automatically when this file is imported.\r\n     */\r\n    public static DefaultFallbacks() {\r\n        this.RegisterFallbacksForProfileId(\"google-daydream\", [\"generic-touchpad\"]);\r\n        this.RegisterFallbacksForProfileId(\"htc-vive-focus\", [\"generic-trigger-touchpad\"]);\r\n        this.RegisterFallbacksForProfileId(\"htc-vive\", [\"generic-trigger-squeeze-touchpad\"]);\r\n        this.RegisterFallbacksForProfileId(\"magicleap-one\", [\"generic-trigger-squeeze-touchpad\"]);\r\n        this.RegisterFallbacksForProfileId(\"windows-mixed-reality\", [\"generic-trigger-squeeze-touchpad-thumbstick\"]);\r\n        this.RegisterFallbacksForProfileId(\"microsoft-mixed-reality\", [\"windows-mixed-reality\", \"generic-trigger-squeeze-touchpad-thumbstick\"]);\r\n        this.RegisterFallbacksForProfileId(\"oculus-go\", [\"generic-trigger-touchpad\"]);\r\n        this.RegisterFallbacksForProfileId(\"oculus-touch-v2\", [\"oculus-touch\", \"generic-trigger-squeeze-thumbstick\"]);\r\n        this.RegisterFallbacksForProfileId(\"oculus-touch\", [\"generic-trigger-squeeze-thumbstick\"]);\r\n        this.RegisterFallbacksForProfileId(\"samsung-gearvr\", [\"windows-mixed-reality\", \"generic-trigger-squeeze-touchpad-thumbstick\"]);\r\n        this.RegisterFallbacksForProfileId(\"samsung-odyssey\", [\"generic-touchpad\"]);\r\n        this.RegisterFallbacksForProfileId(\"valve-index\", [\"generic-trigger-squeeze-touchpad-thumbstick\"]);\r\n        this.RegisterFallbacksForProfileId(\"generic-hand-select\", [\"generic-trigger\"]);\r\n    }\r\n\r\n    /**\r\n     * Find a fallback profile if the profile was not found. There are a few predefined generic profiles.\r\n     * @param profileId the profile to which a fallback needs to be found\r\n     * @return an array with corresponding fallback profiles\r\n     */\r\n    public static FindFallbackWithProfileId(profileId: string): string[] {\r\n        const returnArray = this._Fallbacks[profileId] || [];\r\n\r\n        returnArray.unshift(profileId);\r\n        return returnArray;\r\n    }\r\n\r\n    /**\r\n     * When acquiring a new xrInput object (usually by the WebXRInput class), match it with the correct profile.\r\n     * The order of search:\r\n     *\r\n     * 1) Iterate the profiles array of the xr input and try finding a corresponding motion controller\r\n     * 2) (If not found) search in the gamepad id and try using it (legacy versions only)\r\n     * 3) search for registered fallbacks (should be redundant, nonetheless it makes sense to check)\r\n     * 4) return the generic trigger controller if none were found\r\n     *\r\n     * @param xrInput the xrInput to which a new controller is initialized\r\n     * @param scene the scene to which the model will be added\r\n     * @param forceProfile force a certain profile for this controller\r\n     * @return A promise that fulfils with the motion controller class for this profile id or the generic standard class if none was found\r\n     */\r\n    public static GetMotionControllerWithXRInput(xrInput: XRInputSource, scene: Scene, forceProfile?: string): Promise<WebXRAbstractMotionController> {\r\n        const profileArray: string[] = [];\r\n        if (forceProfile) {\r\n            profileArray.push(forceProfile);\r\n        }\r\n        profileArray.push(...(xrInput.profiles || []));\r\n\r\n        // emulator support\r\n        if (profileArray.length && !profileArray[0]) {\r\n            // remove the first \"undefined\" that the emulator is adding\r\n            profileArray.pop();\r\n        }\r\n\r\n        // legacy support - try using the gamepad id\r\n        if (xrInput.gamepad && xrInput.gamepad.id) {\r\n            switch (xrInput.gamepad.id) {\r\n                case xrInput.gamepad.id.match(/oculus touch/gi) ? xrInput.gamepad.id : undefined:\r\n                    // oculus in gamepad id\r\n                    profileArray.push(\"oculus-touch-v2\");\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // make sure microsoft/windows mixed reality works correctly\r\n        const windowsMRIdx = profileArray.indexOf(\"windows-mixed-reality\");\r\n        if (windowsMRIdx !== -1) {\r\n            profileArray.splice(windowsMRIdx, 0, \"microsoft-mixed-reality\");\r\n        }\r\n\r\n        if (!profileArray.length) {\r\n            profileArray.push(\"generic-trigger\");\r\n        }\r\n\r\n        if (this.UseOnlineRepository) {\r\n            const firstFunction = this.PrioritizeOnlineRepository ? this._LoadProfileFromRepository : this._LoadProfilesFromAvailableControllers;\r\n            const secondFunction = this.PrioritizeOnlineRepository ? this._LoadProfilesFromAvailableControllers : this._LoadProfileFromRepository;\r\n\r\n            return firstFunction.call(this, profileArray, xrInput, scene).catch(() => {\r\n                return secondFunction.call(this, profileArray, xrInput, scene);\r\n            });\r\n        } else {\r\n            // use only available functions\r\n            return this._LoadProfilesFromAvailableControllers(profileArray, xrInput, scene);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Register a new controller based on its profile. This function will be called by the controller classes themselves.\r\n     *\r\n     * If you are missing a profile, make sure it is imported in your source, otherwise it will not register.\r\n     *\r\n     * @param type the profile type to register\r\n     * @param constructFunction the function to be called when loading this profile\r\n     */\r\n    public static RegisterController(type: string, constructFunction: MotionControllerConstructor) {\r\n        this._AvailableControllers[type] = constructFunction;\r\n    }\r\n\r\n    /**\r\n     * Register a fallback to a specific profile.\r\n     * @param profileId the profileId that will receive the fallbacks\r\n     * @param fallbacks A list of fallback profiles\r\n     */\r\n    public static RegisterFallbacksForProfileId(profileId: string, fallbacks: string[]): void {\r\n        if (this._Fallbacks[profileId]) {\r\n            this._Fallbacks[profileId].push(...fallbacks);\r\n        } else {\r\n            this._Fallbacks[profileId] = fallbacks;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Will update the list of profiles available in the repository\r\n     * @return a promise that resolves to a map of profiles available online\r\n     */\r\n    public static UpdateProfilesList() {\r\n        this._ProfilesList = Tools.LoadFileAsync(this.BaseRepositoryUrl + \"/profiles/profilesList.json\", false).then((data) => {\r\n            return JSON.parse(data.toString());\r\n        });\r\n        return this._ProfilesList;\r\n    }\r\n\r\n    /**\r\n     * Clear the controller's cache (usually happens at the end of a session)\r\n     */\r\n    public static ClearControllerCache() {\r\n        controllerCache.forEach((cacheItem) => {\r\n            cacheItem.meshes.forEach((mesh) => {\r\n                mesh.dispose(false, true);\r\n            });\r\n        });\r\n        controllerCache.length = 0;\r\n    }\r\n\r\n    private static _LoadProfileFromRepository(profileArray: string[], xrInput: XRInputSource, scene: Scene): Promise<WebXRAbstractMotionController> {\r\n        return Promise.resolve()\r\n            .then(() => {\r\n                if (!this._ProfilesList) {\r\n                    return this.UpdateProfilesList();\r\n                } else {\r\n                    return this._ProfilesList;\r\n                }\r\n            })\r\n            .then((profilesList: { [profile: string]: string }) => {\r\n                // load the right profile\r\n                for (let i = 0; i < profileArray.length; ++i) {\r\n                    // defensive\r\n                    if (!profileArray[i]) {\r\n                        continue;\r\n                    }\r\n                    if (profilesList[profileArray[i]]) {\r\n                        return profileArray[i];\r\n                    }\r\n                }\r\n\r\n                throw new Error(`neither controller ${profileArray[0]} nor all fallbacks were found in the repository,`);\r\n            })\r\n            .then((profileToLoad: string) => {\r\n                // load the profile\r\n                if (!this._ProfileLoadingPromises[profileToLoad]) {\r\n                    this._ProfileLoadingPromises[profileToLoad] = Tools.LoadFileAsync(`${this.BaseRepositoryUrl}/profiles/${profileToLoad}/profile.json`, false).then(\r\n                        (data) => <IMotionControllerProfile>JSON.parse(data as string)\r\n                    );\r\n                }\r\n                return this._ProfileLoadingPromises[profileToLoad];\r\n            })\r\n            .then((profile: IMotionControllerProfile) => {\r\n                return new WebXRProfiledMotionController(scene, xrInput, profile, this.BaseRepositoryUrl, this.DisableControllerCache ? undefined : controllerCache);\r\n            });\r\n    }\r\n\r\n    private static _LoadProfilesFromAvailableControllers(profileArray: string[], xrInput: XRInputSource, scene: Scene) {\r\n        // check fallbacks\r\n        for (let i = 0; i < profileArray.length; ++i) {\r\n            // defensive\r\n            if (!profileArray[i]) {\r\n                continue;\r\n            }\r\n            const fallbacks = this.FindFallbackWithProfileId(profileArray[i]);\r\n            for (let j = 0; j < fallbacks.length; ++j) {\r\n                const constructionFunction = this._AvailableControllers[fallbacks[j]];\r\n                if (constructionFunction) {\r\n                    return Promise.resolve(constructionFunction(xrInput, scene));\r\n                }\r\n            }\r\n        }\r\n\r\n        throw new Error(`no controller requested was found in the available controllers list`);\r\n    }\r\n}\r\n\r\n// register the generic profile(s) here so we will at least have them\r\nWebXRMotionControllerManager.RegisterController(WebXRGenericTriggerMotionController.ProfileId, (xrInput: XRInputSource, scene: Scene) => {\r\n    return new WebXRGenericTriggerMotionController(scene, <any>xrInput.gamepad, xrInput.handedness);\r\n});\r\n\r\n// register fallbacks\r\nWebXRMotionControllerManager.DefaultFallbacks();\r\n"]},"metadata":{},"sourceType":"module"}