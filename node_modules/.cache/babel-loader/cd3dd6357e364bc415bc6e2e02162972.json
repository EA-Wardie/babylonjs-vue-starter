{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Block used to transform a vector (2, 3 or 4) with a matrix. It will generate a Vector4\n */\n\nvar TransformBlock =\n/** @class */\nfunction (_super) {\n  __extends(TransformBlock, _super);\n  /**\n   * Creates a new TransformBlock\n   * @param name defines the block name\n   */\n\n\n  function TransformBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Neutral) || this;\n    /**\n     * Defines the value to use to complement W value to transform it to a Vector4\n     */\n\n\n    _this.complementW = 1;\n    /**\n     * Defines the value to use to complement z value to transform it to a Vector4\n     */\n\n    _this.complementZ = 0;\n    _this.target = NodeMaterialBlockTargets.Vertex;\n\n    _this.registerInput(\"vector\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n\n    _this.registerInput(\"transform\", NodeMaterialBlockConnectionPointTypes.Matrix);\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector4);\n\n    _this.registerOutput(\"xyz\", NodeMaterialBlockConnectionPointTypes.Vector3);\n\n    _this._inputs[0].onConnectionObservable.add(function (other) {\n      if (other.ownerBlock.isInput) {\n        var otherAsInput = other.ownerBlock;\n\n        if (otherAsInput.name === \"normal\" || otherAsInput.name === \"tangent\") {\n          _this.complementW = 0;\n        }\n      }\n    });\n\n    return _this;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  TransformBlock.prototype.getClassName = function () {\n    return \"TransformBlock\";\n  };\n\n  Object.defineProperty(TransformBlock.prototype, \"vector\", {\n    /**\n     * Gets the vector input\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TransformBlock.prototype, \"output\", {\n    /**\n     * Gets the output component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TransformBlock.prototype, \"xyz\", {\n    /**\n     * Gets the xyz output component\n     */\n    get: function get() {\n      return this._outputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TransformBlock.prototype, \"transform\", {\n    /**\n     * Gets the matrix transform input\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  TransformBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var vector = this.vector;\n    var transform = this.transform;\n\n    if (vector.connectedPoint) {\n      // None uniform scaling case.\n      if (this.complementW === 0) {\n        var comments = \"//\".concat(this.name);\n\n        state._emitFunctionFromInclude(\"helperFunctions\", comments);\n\n        state.sharedData.blocksWithDefines.push(this);\n\n        var transformName = state._getFreeVariableName(\"\".concat(transform.associatedVariableName, \"_NUS\"));\n\n        state.compilationString += \"mat3 \".concat(transformName, \" = mat3(\").concat(transform.associatedVariableName, \");\\r\\n\");\n        state.compilationString += \"#ifdef NONUNIFORMSCALING\\r\\n\";\n        state.compilationString += \"\".concat(transformName, \" = transposeMat3(inverseMat3(\").concat(transformName, \"));\\r\\n\");\n        state.compilationString += \"#endif\\r\\n\";\n\n        switch (vector.connectedPoint.type) {\n          case NodeMaterialBlockConnectionPointTypes.Vector2:\n            state.compilationString += this._declareOutput(this.output, state) + \" = vec4(\".concat(transformName, \" * vec3(\").concat(vector.associatedVariableName, \", \").concat(this._writeFloat(this.complementZ), \"), \").concat(this._writeFloat(this.complementW), \");\\r\\n\");\n            break;\n\n          case NodeMaterialBlockConnectionPointTypes.Vector3:\n          case NodeMaterialBlockConnectionPointTypes.Color3:\n            state.compilationString += this._declareOutput(this.output, state) + \" = vec4(\".concat(transformName, \" * \").concat(vector.associatedVariableName, \", \").concat(this._writeFloat(this.complementW), \");\\r\\n\");\n            break;\n\n          default:\n            state.compilationString += this._declareOutput(this.output, state) + \" = vec4(\".concat(transformName, \" * \").concat(vector.associatedVariableName, \".xyz, \").concat(this._writeFloat(this.complementW), \");\\r\\n\");\n            break;\n        }\n      } else {\n        var transformName = transform.associatedVariableName;\n\n        switch (vector.connectedPoint.type) {\n          case NodeMaterialBlockConnectionPointTypes.Vector2:\n            state.compilationString += this._declareOutput(this.output, state) + \" = \".concat(transformName, \" * vec4(\").concat(vector.associatedVariableName, \", \").concat(this._writeFloat(this.complementZ), \", \").concat(this._writeFloat(this.complementW), \");\\r\\n\");\n            break;\n\n          case NodeMaterialBlockConnectionPointTypes.Vector3:\n          case NodeMaterialBlockConnectionPointTypes.Color3:\n            state.compilationString += this._declareOutput(this.output, state) + \" = \".concat(transformName, \" * vec4(\").concat(vector.associatedVariableName, \", \").concat(this._writeFloat(this.complementW), \");\\r\\n\");\n            break;\n\n          default:\n            state.compilationString += this._declareOutput(this.output, state) + \" = \".concat(transformName, \" * \").concat(vector.associatedVariableName, \";\\r\\n\");\n            break;\n        }\n      }\n\n      if (this.xyz.hasEndpoints) {\n        state.compilationString += this._declareOutput(this.xyz, state) + \" = \".concat(this.output.associatedVariableName, \".xyz;\\r\\n\");\n      }\n    }\n\n    return this;\n  };\n  /**\n   * Update defines for shader compilation\n   * @param mesh defines the mesh to be rendered\n   * @param nodeMaterial defines the node material requesting the update\n   * @param defines defines the material defines to update\n   */\n\n\n  TransformBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    // Do nothing\n    if (mesh.nonUniformScaling) {\n      defines.setValue(\"NONUNIFORMSCALING\", true);\n    }\n  };\n\n  TransformBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    serializationObject.complementZ = this.complementZ;\n    serializationObject.complementW = this.complementW;\n    return serializationObject;\n  };\n\n  TransformBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    this.complementZ = serializationObject.complementZ !== undefined ? serializationObject.complementZ : 0.0;\n    this.complementW = serializationObject.complementW !== undefined ? serializationObject.complementW : 1.0;\n  };\n\n  TransformBlock.prototype._dumpPropertiesCode = function () {\n    var codeString = _super.prototype._dumpPropertiesCode.call(this) + \"\".concat(this._codeVariableName, \".complementZ = \").concat(this.complementZ, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".complementW = \").concat(this.complementW, \";\\r\\n\");\n    return codeString;\n  };\n\n  return TransformBlock;\n}(NodeMaterialBlock);\n\nexport { TransformBlock };\nRegisterClass(\"BABYLON.TransformBlock\", TransformBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","__extends","name","_super","Neutral","_this","target","Vertex","registerInput","AutoDetect","Matrix","registerOutput","Vector4","Vector3","_inputs","onConnectionObservable","add","other","ownerBlock","isInput","otherAsInput","complementW","TransformBlock","Object","_outputs","state","_buildBlock","call","vector","transform","connectedPoint","comments","_emitFunctionFromInclude","sharedData","blocksWithDefines","push","transformName","_getFreeVariableName","associatedVariableName","compilationString","concat","type","Vector2","_declareOutput","output","_writeFloat","complementZ","Color3","xyz","hasEndpoints","mesh","nodeMaterial","defines","nonUniformScaling","setValue","serializationObject","serialize","scene","rootUrl","_deserialize","undefined","codeString","_dumpPropertiesCode","_codeVariableName"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Node/Blocks/transformBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport type { Scene } from \"../../../scene\";\r\nimport type { InputBlock } from \"./Input/inputBlock\";\r\nimport type { AbstractMesh } from \"../../../Meshes/abstractMesh\";\r\nimport type { NodeMaterial, NodeMaterialDefines } from \"../nodeMaterial\";\r\n\r\n/**\r\n * Block used to transform a vector (2, 3 or 4) with a matrix. It will generate a Vector4\r\n */\r\nexport class TransformBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Defines the value to use to complement W value to transform it to a Vector4\r\n     */\r\n    public complementW = 1;\r\n\r\n    /**\r\n     * Defines the value to use to complement z value to transform it to a Vector4\r\n     */\r\n    public complementZ = 0;\r\n\r\n    /**\r\n     * Creates a new TransformBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.target = NodeMaterialBlockTargets.Vertex;\r\n\r\n        this.registerInput(\"vector\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\r\n        this.registerInput(\"transform\", NodeMaterialBlockConnectionPointTypes.Matrix);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerOutput(\"xyz\", NodeMaterialBlockConnectionPointTypes.Vector3);\r\n\r\n        this._inputs[0].onConnectionObservable.add((other) => {\r\n            if (other.ownerBlock.isInput) {\r\n                const otherAsInput = other.ownerBlock as InputBlock;\r\n\r\n                if (otherAsInput.name === \"normal\" || otherAsInput.name === \"tangent\") {\r\n                    this.complementW = 0;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"TransformBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the vector input\r\n     */\r\n    public get vector(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the xyz output component\r\n     */\r\n    public get xyz(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the matrix transform input\r\n     */\r\n    public get transform(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const vector = this.vector;\r\n        const transform = this.transform;\r\n\r\n        if (vector.connectedPoint) {\r\n            // None uniform scaling case.\r\n            if (this.complementW === 0) {\r\n                const comments = `//${this.name}`;\r\n                state._emitFunctionFromInclude(\"helperFunctions\", comments);\r\n                state.sharedData.blocksWithDefines.push(this);\r\n\r\n                const transformName = state._getFreeVariableName(`${transform.associatedVariableName}_NUS`);\r\n                state.compilationString += `mat3 ${transformName} = mat3(${transform.associatedVariableName});\\r\\n`;\r\n                state.compilationString += `#ifdef NONUNIFORMSCALING\\r\\n`;\r\n                state.compilationString += `${transformName} = transposeMat3(inverseMat3(${transformName}));\\r\\n`;\r\n                state.compilationString += `#endif\\r\\n`;\r\n                switch (vector.connectedPoint.type) {\r\n                    case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                        state.compilationString +=\r\n                            this._declareOutput(this.output, state) +\r\n                            ` = vec4(${transformName} * vec3(${vector.associatedVariableName}, ${this._writeFloat(this.complementZ)}), ${this._writeFloat(this.complementW)});\\r\\n`;\r\n                        break;\r\n                    case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                    case NodeMaterialBlockConnectionPointTypes.Color3:\r\n                        state.compilationString +=\r\n                            this._declareOutput(this.output, state) + ` = vec4(${transformName} * ${vector.associatedVariableName}, ${this._writeFloat(this.complementW)});\\r\\n`;\r\n                        break;\r\n                    default:\r\n                        state.compilationString +=\r\n                            this._declareOutput(this.output, state) +\r\n                            ` = vec4(${transformName} * ${vector.associatedVariableName}.xyz, ${this._writeFloat(this.complementW)});\\r\\n`;\r\n                        break;\r\n                }\r\n            } else {\r\n                const transformName = transform.associatedVariableName;\r\n                switch (vector.connectedPoint.type) {\r\n                    case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                        state.compilationString +=\r\n                            this._declareOutput(this.output, state) +\r\n                            ` = ${transformName} * vec4(${vector.associatedVariableName}, ${this._writeFloat(this.complementZ)}, ${this._writeFloat(this.complementW)});\\r\\n`;\r\n                        break;\r\n                    case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                    case NodeMaterialBlockConnectionPointTypes.Color3:\r\n                        state.compilationString +=\r\n                            this._declareOutput(this.output, state) + ` = ${transformName} * vec4(${vector.associatedVariableName}, ${this._writeFloat(this.complementW)});\\r\\n`;\r\n                        break;\r\n                    default:\r\n                        state.compilationString += this._declareOutput(this.output, state) + ` = ${transformName} * ${vector.associatedVariableName};\\r\\n`;\r\n                        break;\r\n                }\r\n            }\r\n\r\n            if (this.xyz.hasEndpoints) {\r\n                state.compilationString += this._declareOutput(this.xyz, state) + ` = ${this.output.associatedVariableName}.xyz;\\r\\n`;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update defines for shader compilation\r\n     * @param mesh defines the mesh to be rendered\r\n     * @param nodeMaterial defines the node material requesting the update\r\n     * @param defines defines the material defines to update\r\n     */\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        // Do nothing\r\n        if (mesh.nonUniformScaling) {\r\n            defines.setValue(\"NONUNIFORMSCALING\", true);\r\n        }\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.complementZ = this.complementZ;\r\n        serializationObject.complementW = this.complementW;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.complementZ = serializationObject.complementZ !== undefined ? serializationObject.complementZ : 0.0;\r\n        this.complementW = serializationObject.complementW !== undefined ? serializationObject.complementW : 1.0;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.complementZ = ${this.complementZ};\\r\\n`;\r\n\r\n        codeString += `${this._codeVariableName}.complementW = ${this.complementW};\\r\\n`;\r\n\r\n        return codeString;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.TransformBlock\", TransformBlock);\r\n"]},"metadata":{},"sourceType":"module"}