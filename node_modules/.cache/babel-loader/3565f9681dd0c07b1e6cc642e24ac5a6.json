{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport { Color3 } from \"@babylonjs/core/Maths/math.color.js\";\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial.js\";\nimport { GLTFLoader } from \"../glTFLoader.js\";\nvar NAME = \"KHR_materials_pbrSpecularGlossiness\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness)\n */\n\nvar KHR_materials_pbrSpecularGlossiness =\n/** @class */\nfunction () {\n  /**\n   * @param loader\n   * @hidden\n   */\n  function KHR_materials_pbrSpecularGlossiness(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    /**\n     * Defines a number that determines the order the extensions are applied.\n     */\n\n    this.order = 200;\n    this._loader = loader;\n    this.enabled = this._loader.isExtensionUsed(NAME);\n  }\n  /** @hidden */\n\n\n  KHR_materials_pbrSpecularGlossiness.prototype.dispose = function () {\n    this._loader = null;\n  };\n  /**\n   * @param context\n   * @param material\n   * @param babylonMaterial\n   * @hidden\n   */\n\n\n  KHR_materials_pbrSpecularGlossiness.prototype.loadMaterialPropertiesAsync = function (context, material, babylonMaterial) {\n    var _this = this;\n\n    return GLTFLoader.LoadExtensionAsync(context, material, this.name, function (extensionContext, extension) {\n      var promises = new Array();\n      promises.push(_this._loader.loadMaterialBasePropertiesAsync(context, material, babylonMaterial));\n      promises.push(_this._loadSpecularGlossinessPropertiesAsync(extensionContext, material, extension, babylonMaterial));\n\n      _this._loader.loadMaterialAlphaProperties(context, material, babylonMaterial);\n\n      return Promise.all(promises).then(function () {});\n    });\n  };\n\n  KHR_materials_pbrSpecularGlossiness.prototype._loadSpecularGlossinessPropertiesAsync = function (context, material, properties, babylonMaterial) {\n    if (!(babylonMaterial instanceof PBRMaterial)) {\n      throw new Error(\"\".concat(context, \": Material type not supported\"));\n    }\n\n    var promises = new Array();\n    babylonMaterial.metallic = null;\n    babylonMaterial.roughness = null;\n\n    if (properties.diffuseFactor) {\n      babylonMaterial.albedoColor = Color3.FromArray(properties.diffuseFactor);\n      babylonMaterial.alpha = properties.diffuseFactor[3];\n    } else {\n      babylonMaterial.albedoColor = Color3.White();\n    }\n\n    babylonMaterial.reflectivityColor = properties.specularFactor ? Color3.FromArray(properties.specularFactor) : Color3.White();\n    babylonMaterial.microSurface = properties.glossinessFactor == undefined ? 1 : properties.glossinessFactor;\n\n    if (properties.diffuseTexture) {\n      promises.push(this._loader.loadTextureInfoAsync(\"\".concat(context, \"/diffuseTexture\"), properties.diffuseTexture, function (texture) {\n        texture.name = \"\".concat(babylonMaterial.name, \" (Diffuse)\");\n        babylonMaterial.albedoTexture = texture;\n      }));\n    }\n\n    if (properties.specularGlossinessTexture) {\n      promises.push(this._loader.loadTextureInfoAsync(\"\".concat(context, \"/specularGlossinessTexture\"), properties.specularGlossinessTexture, function (texture) {\n        texture.name = \"\".concat(babylonMaterial.name, \" (Specular Glossiness)\");\n        babylonMaterial.reflectivityTexture = texture;\n      }));\n      babylonMaterial.reflectivityTexture.hasAlpha = true;\n      babylonMaterial.useMicroSurfaceFromReflectivityMapAlpha = true;\n    }\n\n    return Promise.all(promises).then(function () {});\n  };\n\n  return KHR_materials_pbrSpecularGlossiness;\n}();\n\nexport { KHR_materials_pbrSpecularGlossiness };\nGLTFLoader.RegisterExtension(NAME, function (loader) {\n  return new KHR_materials_pbrSpecularGlossiness(loader);\n});","map":{"version":3,"mappings":"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","names":["Color3","PBRMaterial","GLTFLoader","NAME","loader","_loader","enabled","isExtensionUsed","KHR_materials_pbrSpecularGlossiness","context","material","babylonMaterial","LoadExtensionAsync","name","extensionContext","extension","promises","Array","push","_this","loadMaterialBasePropertiesAsync","_loadSpecularGlossinessPropertiesAsync","loadMaterialAlphaProperties","Promise","all","then","properties","Error","metallic","roughness","diffuseFactor","albedoColor","FromArray","alpha","White","reflectivityColor","specularFactor","microSurface","glossinessFactor","undefined","diffuseTexture","loadTextureInfoAsync","texture","albedoTexture","specularGlossinessTexture","reflectivityTexture","hasAlpha","useMicroSurfaceFromReflectivityMapAlpha","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../../lts/loaders/generated/glTF/2.0/Extensions/KHR_materials_pbrSpecularGlossiness.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsPbrSpecularGlossiness } from \"babylonjs-gltf2interface\";\r\n\r\nconst NAME = \"KHR_materials_pbrSpecularGlossiness\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness)\r\n */\r\nexport class KHR_materials_pbrSpecularGlossiness implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 200;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @param loader\r\n     * @hidden\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @hidden */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @param context\r\n     * @param material\r\n     * @param babylonMaterial\r\n     * @hidden\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsPbrSpecularGlossiness>(context, material, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialBasePropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadSpecularGlossinessPropertiesAsync(extensionContext, material, extension, babylonMaterial));\r\n            this._loader.loadMaterialAlphaProperties(context, material, babylonMaterial);\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    private _loadSpecularGlossinessPropertiesAsync(context: string, material: IMaterial, properties: IKHRMaterialsPbrSpecularGlossiness, babylonMaterial: Material): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        babylonMaterial.metallic = null;\r\n        babylonMaterial.roughness = null;\r\n\r\n        if (properties.diffuseFactor) {\r\n            babylonMaterial.albedoColor = Color3.FromArray(properties.diffuseFactor);\r\n            babylonMaterial.alpha = properties.diffuseFactor[3];\r\n        } else {\r\n            babylonMaterial.albedoColor = Color3.White();\r\n        }\r\n\r\n        babylonMaterial.reflectivityColor = properties.specularFactor ? Color3.FromArray(properties.specularFactor) : Color3.White();\r\n        babylonMaterial.microSurface = properties.glossinessFactor == undefined ? 1 : properties.glossinessFactor;\r\n\r\n        if (properties.diffuseTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/diffuseTexture`, properties.diffuseTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Diffuse)`;\r\n                    babylonMaterial.albedoTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        if (properties.specularGlossinessTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/specularGlossinessTexture`, properties.specularGlossinessTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Specular Glossiness)`;\r\n                    babylonMaterial.reflectivityTexture = texture;\r\n                })\r\n            );\r\n\r\n            babylonMaterial.reflectivityTexture.hasAlpha = true;\r\n            babylonMaterial.useMicroSurfaceFromReflectivityMapAlpha = true;\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_materials_pbrSpecularGlossiness(loader));\r\n"]},"metadata":{},"sourceType":"module"}