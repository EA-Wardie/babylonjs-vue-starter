{"ast":null,"code":"/**\n * Class used to represent a viewport on screen\n */\nvar Viewport =\n/** @class */\nfunction () {\n  /**\n   * Creates a Viewport object located at (x, y) and sized (width, height)\n   * @param x defines viewport left coordinate\n   * @param y defines viewport top coordinate\n   * @param width defines the viewport width\n   * @param height defines the viewport height\n   */\n  function Viewport(\n  /** viewport left coordinate */\n  x,\n  /** viewport top coordinate */\n  y,\n  /**viewport width */\n  width,\n  /** viewport height */\n  height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n  /**\n   * Creates a new viewport using absolute sizing (from 0-> width, 0-> height instead of 0->1)\n   * @param renderWidth defines the rendering width\n   * @param renderHeight defines the rendering height\n   * @returns a new Viewport\n   */\n\n\n  Viewport.prototype.toGlobal = function (renderWidth, renderHeight) {\n    return new Viewport(this.x * renderWidth, this.y * renderHeight, this.width * renderWidth, this.height * renderHeight);\n  };\n  /**\n   * Stores absolute viewport value into a target viewport (from 0-> width, 0-> height instead of 0->1)\n   * @param renderWidth defines the rendering width\n   * @param renderHeight defines the rendering height\n   * @param ref defines the target viewport\n   * @returns the current viewport\n   */\n\n\n  Viewport.prototype.toGlobalToRef = function (renderWidth, renderHeight, ref) {\n    ref.x = this.x * renderWidth;\n    ref.y = this.y * renderHeight;\n    ref.width = this.width * renderWidth;\n    ref.height = this.height * renderHeight;\n    return this;\n  };\n  /**\n   * Returns a new Viewport copied from the current one\n   * @returns a new Viewport\n   */\n\n\n  Viewport.prototype.clone = function () {\n    return new Viewport(this.x, this.y, this.width, this.height);\n  };\n\n  return Viewport;\n}();\n\nexport { Viewport };","map":{"version":3,"mappings":"AAAA;;;AAGA;AAAA;AAAA;AACI;;;;;;;AAOA;AACI;AACOA,GAFX;AAGI;AACOC,GAJX;AAKI;AACOC,OANX;AAOI;AACOC,QARX,EAQyB;AANd;AAEA;AAEA;AAEA;AACP;AAEJ;;;;;;;;AAMOC,gCAAP,UAAgBC,WAAhB,EAAqCC,YAArC,EAAyD;AACrD,WAAO,IAAIF,QAAJ,CAAa,KAAKJ,CAAL,GAASK,WAAtB,EAAmC,KAAKJ,CAAL,GAASK,YAA5C,EAA0D,KAAKJ,KAAL,GAAaG,WAAvE,EAAoF,KAAKF,MAAL,GAAcG,YAAlG,CAAP;AACH,GAFM;AAIP;;;;;;;;;AAOOF,qCAAP,UAAqBC,WAArB,EAA0CC,YAA1C,EAAgEC,GAAhE,EAA6E;AACzEA,OAAG,CAACP,CAAJ,GAAQ,KAAKA,CAAL,GAASK,WAAjB;AACAE,OAAG,CAACN,CAAJ,GAAQ,KAAKA,CAAL,GAASK,YAAjB;AACAC,OAAG,CAACL,KAAJ,GAAY,KAAKA,KAAL,GAAaG,WAAzB;AACAE,OAAG,CAACJ,MAAJ,GAAa,KAAKA,MAAL,GAAcG,YAA3B;AACA,WAAO,IAAP;AACH,GANM;AAQP;;;;;;AAIOF,6BAAP;AACI,WAAO,IAAIA,QAAJ,CAAa,KAAKJ,CAAlB,EAAqB,KAAKC,CAA1B,EAA6B,KAAKC,KAAlC,EAAyC,KAAKC,MAA9C,CAAP;AACH,GAFM;;AAGX;AAAC,CAnDD","names":["x","y","width","height","Viewport","renderWidth","renderHeight","ref"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Maths/math.viewport.ts"],"sourcesContent":["/**\r\n * Class used to represent a viewport on screen\r\n */\r\nexport class Viewport {\r\n    /**\r\n     * Creates a Viewport object located at (x, y) and sized (width, height)\r\n     * @param x defines viewport left coordinate\r\n     * @param y defines viewport top coordinate\r\n     * @param width defines the viewport width\r\n     * @param height defines the viewport height\r\n     */\r\n    constructor(\r\n        /** viewport left coordinate */\r\n        public x: number,\r\n        /** viewport top coordinate */\r\n        public y: number,\r\n        /**viewport width */\r\n        public width: number,\r\n        /** viewport height */\r\n        public height: number\r\n    ) {}\r\n\r\n    /**\r\n     * Creates a new viewport using absolute sizing (from 0-> width, 0-> height instead of 0->1)\r\n     * @param renderWidth defines the rendering width\r\n     * @param renderHeight defines the rendering height\r\n     * @returns a new Viewport\r\n     */\r\n    public toGlobal(renderWidth: number, renderHeight: number): Viewport {\r\n        return new Viewport(this.x * renderWidth, this.y * renderHeight, this.width * renderWidth, this.height * renderHeight);\r\n    }\r\n\r\n    /**\r\n     * Stores absolute viewport value into a target viewport (from 0-> width, 0-> height instead of 0->1)\r\n     * @param renderWidth defines the rendering width\r\n     * @param renderHeight defines the rendering height\r\n     * @param ref defines the target viewport\r\n     * @returns the current viewport\r\n     */\r\n    public toGlobalToRef(renderWidth: number, renderHeight: number, ref: Viewport): Viewport {\r\n        ref.x = this.x * renderWidth;\r\n        ref.y = this.y * renderHeight;\r\n        ref.width = this.width * renderWidth;\r\n        ref.height = this.height * renderHeight;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Viewport copied from the current one\r\n     * @returns a new Viewport\r\n     */\r\n    public clone(): Viewport {\r\n        return new Viewport(this.x, this.y, this.width, this.height);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}