{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { InternalTexture, InternalTextureSource } from \"../../../Materials/Textures/internalTexture.js\";\nimport { WebGPUEngine } from \"../../webgpuEngine.js\";\n\nWebGPUEngine.prototype.createRenderTargetCubeTexture = function (size, options) {\n  var rtWrapper = this._createHardwareRenderTargetWrapper(false, true, size);\n\n  var fullOptions = __assign({\n    generateMipMaps: true,\n    generateDepthBuffer: true,\n    generateStencilBuffer: false,\n    type: 0,\n    samplingMode: 3,\n    format: 5,\n    samples: 1\n  }, options);\n\n  fullOptions.generateStencilBuffer = fullOptions.generateDepthBuffer && fullOptions.generateStencilBuffer;\n  rtWrapper._generateDepthBuffer = fullOptions.generateDepthBuffer;\n  rtWrapper._generateStencilBuffer = fullOptions.generateStencilBuffer;\n  var texture = new InternalTexture(this, InternalTextureSource.RenderTarget);\n  texture.width = size;\n  texture.height = size;\n  texture.depth = 0;\n  texture.isReady = true;\n  texture.isCube = true;\n  texture.samples = fullOptions.samples;\n  texture.generateMipMaps = fullOptions.generateMipMaps;\n  texture.samplingMode = fullOptions.samplingMode;\n  texture.type = fullOptions.type;\n  texture.format = fullOptions.format;\n\n  this._internalTexturesCache.push(texture);\n\n  rtWrapper.setTextures(texture);\n\n  if (rtWrapper._generateDepthBuffer || rtWrapper._generateStencilBuffer) {\n    rtWrapper.createDepthStencilTexture(0, fullOptions.samplingMode === undefined || fullOptions.samplingMode === 2 || fullOptions.samplingMode === 2 || fullOptions.samplingMode === 3 || fullOptions.samplingMode === 3 || fullOptions.samplingMode === 5 || fullOptions.samplingMode === 6 || fullOptions.samplingMode === 7 || fullOptions.samplingMode === 11, rtWrapper._generateStencilBuffer, rtWrapper.samples);\n  }\n\n  if (options && options.createMipMaps && !fullOptions.generateMipMaps) {\n    texture.generateMipMaps = true;\n  }\n\n  this._textureHelper.createGPUTextureForInternalTexture(texture);\n\n  if (options && options.createMipMaps && !fullOptions.generateMipMaps) {\n    texture.generateMipMaps = false;\n  }\n\n  return rtWrapper;\n};","map":{"version":3,"mappings":";AAAA,SAASA,eAAT,EAA0BC,qBAA1B,QAAuD,gDAAvD;AAIA,SAASC,YAAT,QAA6B,uBAA7B;;AAEAA,YAAY,CAACC,SAAb,CAAuBC,6BAAvB,GAAuD,UAAUC,IAAV,EAAwBC,OAAxB,EAAsE;AACzH,MAAMC,SAAS,GAAG,KAAKC,kCAAL,CAAwC,KAAxC,EAA+C,IAA/C,EAAqDH,IAArD,CAAlB;;AAEA,MAAMI,WAAW;AACbC,mBAAe,EAAE,IADJ;AAEbC,uBAAmB,EAAE,IAFR;AAGbC,yBAAqB,EAAE,KAHV;AAIbC,QAAI,EAAE,CAJO;AAIPC,gBAAU,GAJH;AAIGC,aAJH;AAIGC,WAChB;AALa,KAKbV,OALa,CAAjB;;AAUAG,aAAW,CAACG,qBAAZ,GAAoCH,WAAW,CAACE,mBAAZ,IAAmCF,WAAW,CAACG,qBAAnF;AAEAL,WAAS,CAACU,oBAAV,GAAiCR,WAAW,CAACE,mBAA7C;AACAJ,WAAS,CAACW,sBAAV,GAAmCT,WAAW,CAACG,qBAA/C;AAEA,MAAMO,OAAO,GAAG,IAAInB,eAAJ,CAAoB,IAApB,EAA0BC,qBAAqB,CAACmB,YAAhD,CAAhB;AAEAD,SAAO,CAACE,KAAR,GAAgBhB,IAAhB;AACAc,SAAO,CAACG,MAAR,GAAiBjB,IAAjB;AACAc,SAAO,CAACI,KAAR,GAAgB,CAAhB;AACAJ,SAAO,CAACK,OAAR,GAAkB,IAAlB;AACAL,SAAO,CAACM,MAAR,GAAiB,IAAjB;AACAN,SAAO,CAACH,OAAR,GAAkBP,WAAW,CAACO,OAA9B;AACAG,SAAO,CAACT,eAAR,GAA0BD,WAAW,CAACC,eAAtC;AACAS,SAAO,CAACL,YAAR,GAAuBL,WAAW,CAACK,YAAnC;AACAK,SAAO,CAACN,IAAR,GAAeJ,WAAW,CAACI,IAA3B;AACAM,SAAO,CAACJ,MAAR,GAAiBN,WAAW,CAACM,MAA7B;;AAEA,OAAKW,sBAAL,CAA4BC,IAA5B,CAAiCR,OAAjC;;AACAZ,WAAS,CAACqB,WAAV,CAAsBT,OAAtB;;AAEA,MAAIZ,SAAS,CAACU,oBAAV,IAAkCV,SAAS,CAACW,sBAAhD,EAAwE;AACpEX,aAAS,CAACsB,yBAAV,CACI,CADJ,EAEIpB,WAAW,CAACK,YAAZ,KAA6BgB,SAA7B,IACIrB,WAAW,CAACK,YAAZ,KAA6B,CADjC,IAEIL,WAAW,CAACK,YAAZ,KAA6B,CAFjC,IAGIL,WAAW,CAACK,YAAZ,KAA6B,CAHjC,IAIIL,WAAW,CAACK,YAAZ,KAA6B,CAJjC,IAKIL,WAAW,CAACK,YAAZ,KAA6B,CALjC,IAMIL,WAAW,CAACK,YAAZ,KAA6B,CANjC,IAOIL,WAAW,CAACK,YAAZ,KAA6B,CAPjC,IAQIL,WAAW,CAACK,YAAZ,KAA6B,EAVrC,EAUqCP,SAAU,uBAV/C,EAU+CA,SAC3C,QAXJ;AAcH;;AAED,MAAID,OAAO,IAAIA,OAAO,CAACyB,aAAnB,IAAoC,CAACtB,WAAW,CAACC,eAArD,EAAsE;AAClES,WAAO,CAACT,eAAR,GAA0B,IAA1B;AACH;;AAED,OAAKsB,cAAL,CAAoBC,kCAApB,CAAuDd,OAAvD;;AAEA,MAAIb,OAAO,IAAIA,OAAO,CAACyB,aAAnB,IAAoC,CAACtB,WAAW,CAACC,eAArD,EAAsE;AAClES,WAAO,CAACT,eAAR,GAA0B,KAA1B;AACH;;AAED,SAAOH,SAAP;AACH,CA9DD","names":["InternalTexture","InternalTextureSource","WebGPUEngine","prototype","createRenderTargetCubeTexture","size","options","rtWrapper","_createHardwareRenderTargetWrapper","fullOptions","generateMipMaps","generateDepthBuffer","generateStencilBuffer","type","samplingMode","format","samples","_generateDepthBuffer","_generateStencilBuffer","texture","RenderTarget","width","height","depth","isReady","isCube","_internalTexturesCache","push","setTextures","createDepthStencilTexture","undefined","createMipMaps","_textureHelper","createGPUTextureForInternalTexture"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Engines/WebGPU/Extensions/engine.renderTargetCube.ts"],"sourcesContent":["import { InternalTexture, InternalTextureSource } from \"../../../Materials/Textures/internalTexture\";\r\nimport type { RenderTargetCreationOptions } from \"../../../Materials/Textures/textureCreationOptions\";\r\nimport { Constants } from \"../../constants\";\r\nimport type { RenderTargetWrapper } from \"../../renderTargetWrapper\";\r\nimport { WebGPUEngine } from \"../../webgpuEngine\";\r\n\r\nWebGPUEngine.prototype.createRenderTargetCubeTexture = function (size: number, options?: Partial<RenderTargetCreationOptions>): RenderTargetWrapper {\r\n    const rtWrapper = this._createHardwareRenderTargetWrapper(false, true, size);\r\n\r\n    const fullOptions = {\r\n        generateMipMaps: true,\r\n        generateDepthBuffer: true,\r\n        generateStencilBuffer: false,\r\n        type: Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        samplingMode: Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n        format: Constants.TEXTUREFORMAT_RGBA,\r\n        samples: 1,\r\n        ...options,\r\n    };\r\n    fullOptions.generateStencilBuffer = fullOptions.generateDepthBuffer && fullOptions.generateStencilBuffer;\r\n\r\n    rtWrapper._generateDepthBuffer = fullOptions.generateDepthBuffer;\r\n    rtWrapper._generateStencilBuffer = fullOptions.generateStencilBuffer;\r\n\r\n    const texture = new InternalTexture(this, InternalTextureSource.RenderTarget);\r\n\r\n    texture.width = size;\r\n    texture.height = size;\r\n    texture.depth = 0;\r\n    texture.isReady = true;\r\n    texture.isCube = true;\r\n    texture.samples = fullOptions.samples;\r\n    texture.generateMipMaps = fullOptions.generateMipMaps;\r\n    texture.samplingMode = fullOptions.samplingMode;\r\n    texture.type = fullOptions.type;\r\n    texture.format = fullOptions.format;\r\n\r\n    this._internalTexturesCache.push(texture);\r\n    rtWrapper.setTextures(texture);\r\n\r\n    if (rtWrapper._generateDepthBuffer || rtWrapper._generateStencilBuffer) {\r\n        rtWrapper.createDepthStencilTexture(\r\n            0,\r\n            fullOptions.samplingMode === undefined ||\r\n                fullOptions.samplingMode === Constants.TEXTURE_BILINEAR_SAMPLINGMODE ||\r\n                fullOptions.samplingMode === Constants.TEXTURE_LINEAR_LINEAR ||\r\n                fullOptions.samplingMode === Constants.TEXTURE_TRILINEAR_SAMPLINGMODE ||\r\n                fullOptions.samplingMode === Constants.TEXTURE_LINEAR_LINEAR_MIPLINEAR ||\r\n                fullOptions.samplingMode === Constants.TEXTURE_NEAREST_LINEAR_MIPNEAREST ||\r\n                fullOptions.samplingMode === Constants.TEXTURE_NEAREST_LINEAR_MIPLINEAR ||\r\n                fullOptions.samplingMode === Constants.TEXTURE_NEAREST_LINEAR ||\r\n                fullOptions.samplingMode === Constants.TEXTURE_LINEAR_LINEAR_MIPNEAREST,\r\n            rtWrapper._generateStencilBuffer,\r\n            rtWrapper.samples\r\n        );\r\n    }\r\n\r\n    if (options && options.createMipMaps && !fullOptions.generateMipMaps) {\r\n        texture.generateMipMaps = true;\r\n    }\r\n\r\n    this._textureHelper.createGPUTextureForInternalTexture(texture);\r\n\r\n    if (options && options.createMipMaps && !fullOptions.generateMipMaps) {\r\n        texture.generateMipMaps = false;\r\n    }\r\n\r\n    return rtWrapper;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}