{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport { __extends } from \"tslib\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { SceneLoader } from \"../../Loading/sceneLoader.js\";\nimport { WebVRController } from \"./webVRController.js\";\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController.js\";\nimport { EngineStore } from \"../../Engines/engineStore.js\";\n/**\n * Oculus Touch Controller\n */\n\nvar OculusTouchController =\n/** @class */\nfunction (_super) {\n  __extends(OculusTouchController, _super);\n  /**\n   * Creates a new OculusTouchController from a gamepad\n   * @param vrGamepad the gamepad that the controller should be created from\n   */\n\n\n  function OculusTouchController(vrGamepad) {\n    var _this = _super.call(this, vrGamepad) || this;\n    /**\n     * Fired when the secondary trigger on this controller is modified\n     */\n\n\n    _this.onSecondaryTriggerStateChangedObservable = new Observable();\n    /**\n     * Fired when the thumb rest on this controller is modified\n     */\n\n    _this.onThumbRestChangedObservable = new Observable();\n    _this.controllerType = PoseEnabledControllerType.OCULUS;\n    return _this;\n  }\n  /**\n   * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\n   * @param scene scene in which to add meshes\n   * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\n   */\n\n\n  OculusTouchController.prototype.initControllerMesh = function (scene, meshLoaded) {\n    var _this = this;\n\n    var meshName; // Hand\n\n    if (this.hand === \"left\") {\n      meshName = OculusTouchController.MODEL_LEFT_FILENAME;\n    } else {\n      // Right is the default if no hand is specified\n      meshName = OculusTouchController.MODEL_RIGHT_FILENAME;\n    }\n\n    SceneLoader.ImportMesh(\"\", OculusTouchController._IsQuest ? OculusTouchController.QUEST_MODEL_BASE_URL : OculusTouchController.MODEL_BASE_URL, meshName, scene, function (newMeshes) {\n      /*\n      Parent Mesh name: oculus_touch_left\n      - body\n      - trigger\n      - thumbstick\n      - grip\n      - button_y\n      - button_x\n      - button_enter\n      */\n      _this._defaultModel = OculusTouchController._IsQuest ? newMeshes[0] : newMeshes[1];\n\n      _this.attachToMesh(_this._defaultModel);\n\n      if (meshLoaded) {\n        meshLoaded(_this._defaultModel);\n      }\n    });\n  };\n\n  Object.defineProperty(OculusTouchController.prototype, \"onAButtonStateChangedObservable\", {\n    /**\n     * Fired when the A button on this controller is modified\n     */\n    get: function get() {\n      if (this.hand === \"right\") {\n        return this.onMainButtonStateChangedObservable;\n      } else {\n        throw new Error(\"No A button on left hand\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(OculusTouchController.prototype, \"onBButtonStateChangedObservable\", {\n    /**\n     * Fired when the B button on this controller is modified\n     */\n    get: function get() {\n      if (this.hand === \"right\") {\n        return this.onSecondaryButtonStateChangedObservable;\n      } else {\n        throw new Error(\"No B button on left hand\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(OculusTouchController.prototype, \"onXButtonStateChangedObservable\", {\n    /**\n     * Fired when the X button on this controller is modified\n     */\n    get: function get() {\n      if (this.hand === \"left\") {\n        return this.onMainButtonStateChangedObservable;\n      } else {\n        throw new Error(\"No X button on right hand\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(OculusTouchController.prototype, \"onYButtonStateChangedObservable\", {\n    /**\n     * Fired when the Y button on this controller is modified\n     */\n    get: function get() {\n      if (this.hand === \"left\") {\n        return this.onSecondaryButtonStateChangedObservable;\n      } else {\n        throw new Error(\"No Y button on right hand\");\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Called once for each button that changed state since the last frame\n   * 0) thumb stick (touch, press, value = pressed (0,1)). value is in this.leftStick\n   * 1) index trigger (touch (?), press (only when value > 0.1), value 0 to 1)\n   * 2) secondary trigger (same)\n   * 3) A (right) X (left), touch, pressed = value\n   * 4) B / Y\n   * 5) thumb rest\n   * @param buttonIdx Which button index changed\n   * @param state New state of the button\n   */\n\n  OculusTouchController.prototype._handleButtonChange = function (buttonIdx, state) {\n    var notifyObject = state; //{ state: state, changes: changes };\n\n    var triggerDirection = this.hand === \"right\" ? -1 : 1;\n\n    switch (buttonIdx) {\n      case 0:\n        this.onPadStateChangedObservable.notifyObservers(notifyObject);\n        return;\n\n      case 1:\n        // index trigger\n        if (!OculusTouchController._IsQuest && this._defaultModel) {\n          this._defaultModel.getChildren()[3].rotation.x = -notifyObject.value * 0.2;\n          this._defaultModel.getChildren()[3].position.y = -notifyObject.value * 0.005;\n          this._defaultModel.getChildren()[3].position.z = -notifyObject.value * 0.005;\n        }\n\n        this.onTriggerStateChangedObservable.notifyObservers(notifyObject);\n        return;\n\n      case 2:\n        // secondary trigger\n        if (!OculusTouchController._IsQuest && this._defaultModel) {\n          this._defaultModel.getChildren()[4].position.x = triggerDirection * notifyObject.value * 0.0035;\n        }\n\n        this.onSecondaryTriggerStateChangedObservable.notifyObservers(notifyObject);\n        return;\n\n      case 3:\n        if (!OculusTouchController._IsQuest && this._defaultModel) {\n          if (notifyObject.pressed) {\n            this._defaultModel.getChildren()[1].position.y = -0.001;\n          } else {\n            this._defaultModel.getChildren()[1].position.y = 0;\n          }\n        }\n\n        this.onMainButtonStateChangedObservable.notifyObservers(notifyObject);\n        return;\n\n      case 4:\n        if (!OculusTouchController._IsQuest && this._defaultModel) {\n          if (notifyObject.pressed) {\n            this._defaultModel.getChildren()[2].position.y = -0.001;\n          } else {\n            this._defaultModel.getChildren()[2].position.y = 0;\n          }\n        }\n\n        this.onSecondaryButtonStateChangedObservable.notifyObservers(notifyObject);\n        return;\n\n      case 5:\n        this.onThumbRestChangedObservable.notifyObservers(notifyObject);\n        return;\n    }\n  };\n  /**\n   * Base Url for the controller model.\n   */\n\n\n  OculusTouchController.MODEL_BASE_URL = \"https://controllers.babylonjs.com/oculus/\";\n  /**\n   * File name for the left controller model.\n   */\n\n  OculusTouchController.MODEL_LEFT_FILENAME = \"left.babylon\";\n  /**\n   * File name for the right controller model.\n   */\n\n  OculusTouchController.MODEL_RIGHT_FILENAME = \"right.babylon\";\n  /**\n   * Base Url for the Quest controller model.\n   */\n\n  OculusTouchController.QUEST_MODEL_BASE_URL = \"https://controllers.babylonjs.com/oculusQuest/\";\n  /**\n   * @hidden\n   * If the controllers are running on a device that needs the updated Quest controller models\n   */\n\n  OculusTouchController._IsQuest = false;\n  return OculusTouchController;\n}(WebVRController);\n\nexport { OculusTouchController };\n\nPoseEnabledControllerHelper._ControllerFactories.push({\n  canCreate: function canCreate(gamepadInfo) {\n    // If the headset reports being an Oculus Quest, use the Quest controller models\n    if (EngineStore.LastCreatedEngine && EngineStore.LastCreatedEngine._vrDisplay && EngineStore.LastCreatedEngine._vrDisplay.displayName === \"Oculus Quest\") {\n      OculusTouchController._IsQuest = true;\n    }\n\n    return gamepadInfo.id.indexOf(\"Oculus Touch\") !== -1;\n  },\n  create: function create(gamepadInfo) {\n    return new OculusTouchController(gamepadInfo);\n  }\n});","map":{"version":3,"mappings":";;;;;AAAA,SAASA,UAAT,QAA2B,0BAA3B;AAGA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,eAAT,QAAgC,sBAAhC;AAEA,SAASC,yBAAT,EAAoCC,2BAApC,QAAuE,4BAAvE;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA;;;;AAGA;AAAA;AAAA;AAA2CC;AAmCvC;;;;;;AAIA,iCAAYC,SAAZ,EAA0B;AAA1B,gBACIC,kBAAMD,SAAN,KAAgB,IADpB;AAdA;;;;;AAGOE,qDAA2C,IAAIT,UAAJ,EAA3C;AAEP;;;;AAGOS,yCAA+B,IAAIT,UAAJ,EAA/B;AAQHS,SAAI,CAACC,cAAL,GAAsBP,yBAAyB,CAACQ,MAAhD;;AACH;AAED;;;;;;;AAKOC,uDAAP,UAA0BC,KAA1B,EAAwCC,UAAxC,EAAiF;AAAjF;;AACI,QAAIC,QAAJ,CAD6E,CAG7E;;AACA,QAAI,KAAKC,IAAL,KAAc,MAAlB,EAA0B;AACtBD,cAAQ,GAAGH,qBAAqB,CAACK,mBAAjC;AACH,KAFD,MAEO;AACH;AACAF,cAAQ,GAAGH,qBAAqB,CAACM,oBAAjC;AACH;;AAEDjB,eAAW,CAACkB,UAAZ,CACI,EADJ,EAEIP,qBAAqB,CAACQ,QAAtB,GAAiCR,qBAAqB,CAACS,oBAAvD,GAA8ET,qBAAqB,CAACU,cAFxG,EAGIP,QAHJ,EAIIF,KAJJ,EAKI,UAACU,SAAD,EAAU;AACN;;;;;;;;;;AAWAd,WAAI,CAACe,aAAL,GAAqBZ,qBAAqB,CAACQ,QAAtB,GAAiCG,SAAS,CAAC,CAAD,CAA1C,GAAgDA,SAAS,CAAC,CAAD,CAA9E;;AACAd,WAAI,CAACgB,YAAL,CAAkBhB,KAAI,CAACe,aAAvB;;AACA,UAAIV,UAAJ,EAAgB;AACZA,kBAAU,CAACL,KAAI,CAACe,aAAN,CAAV;AACH;AACJ,KAtBL;AAwBH,GAnCM;;AAwCPE,wBAAWd,+BAAX,EAAW,iCAAX,EAA0C;AAH1C;;;SAGA;AACI,UAAI,KAAKI,IAAL,KAAc,OAAlB,EAA2B;AACvB,eAAO,KAAKW,kCAAZ;AACH,OAFD,MAEO;AACH,cAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACH;AACJ,KANyC;qBAAA;;AAAA,GAA1C;AAWAF,wBAAWd,+BAAX,EAAW,iCAAX,EAA0C;AAH1C;;;SAGA;AACI,UAAI,KAAKI,IAAL,KAAc,OAAlB,EAA2B;AACvB,eAAO,KAAKa,uCAAZ;AACH,OAFD,MAEO;AACH,cAAM,IAAID,KAAJ,CAAU,0BAAV,CAAN;AACH;AACJ,KANyC;qBAAA;;AAAA,GAA1C;AAWAF,wBAAWd,+BAAX,EAAW,iCAAX,EAA0C;AAH1C;;;SAGA;AACI,UAAI,KAAKI,IAAL,KAAc,MAAlB,EAA0B;AACtB,eAAO,KAAKW,kCAAZ;AACH,OAFD,MAEO;AACH,cAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACH;AACJ,KANyC;qBAAA;;AAAA,GAA1C;AAWAF,wBAAWd,+BAAX,EAAW,iCAAX,EAA0C;AAH1C;;;SAGA;AACI,UAAI,KAAKI,IAAL,KAAc,MAAlB,EAA0B;AACtB,eAAO,KAAKa,uCAAZ;AACH,OAFD,MAEO;AACH,cAAM,IAAID,KAAJ,CAAU,2BAAV,CAAN;AACH;AACJ,KANyC;qBAAA;;AAAA,GAA1C;AAQA;;;;;;;;;;;;AAWUhB,wDAAV,UAA8BkB,SAA9B,EAAiDC,KAAjD,EAA6E;AACzE,QAAMC,YAAY,GAAGD,KAArB,CADyE,CAC7C;;AAC5B,QAAME,gBAAgB,GAAG,KAAKjB,IAAL,KAAc,OAAd,GAAwB,CAAC,CAAzB,GAA6B,CAAtD;;AACA,YAAQc,SAAR;AACI,WAAK,CAAL;AACI,aAAKI,2BAAL,CAAiCC,eAAjC,CAAiDH,YAAjD;AACA;;AACJ,WAAK,CAAL;AAAQ;AACJ,YAAI,CAACpB,qBAAqB,CAACQ,QAAvB,IAAmC,KAAKI,aAA5C,EAA2D;AACxC,eAAKA,aAAL,CAAmBY,WAAnB,GAAiC,CAAjC,EAAqCC,QAArC,CAA8CC,CAA9C,GAAkD,CAACN,YAAY,CAACO,KAAd,GAAsB,GAAxE;AACA,eAAKf,aAAL,CAAmBY,WAAnB,GAAiC,CAAjC,EAAqCI,QAArC,CAA8CC,CAA9C,GAAkD,CAACT,YAAY,CAACO,KAAd,GAAsB,KAAxE;AACA,eAAKf,aAAL,CAAmBY,WAAnB,GAAiC,CAAjC,EAAqCI,QAArC,CAA8CE,CAA9C,GAAkD,CAACV,YAAY,CAACO,KAAd,GAAsB,KAAxE;AAClB;;AACD,aAAKI,+BAAL,CAAqCR,eAArC,CAAqDH,YAArD;AACA;;AACJ,WAAK,CAAL;AAAQ;AACJ,YAAI,CAACpB,qBAAqB,CAACQ,QAAvB,IAAmC,KAAKI,aAA5C,EAA2D;AACxC,eAAKA,aAAL,CAAmBY,WAAnB,GAAiC,CAAjC,EAAqCI,QAArC,CAA8CF,CAA9C,GAAkDL,gBAAgB,GAAGD,YAAY,CAACO,KAAhC,GAAwC,MAA1F;AAClB;;AACD,aAAKK,wCAAL,CAA8CT,eAA9C,CAA8DH,YAA9D;AACA;;AACJ,WAAK,CAAL;AACI,YAAI,CAACpB,qBAAqB,CAACQ,QAAvB,IAAmC,KAAKI,aAA5C,EAA2D;AACvD,cAAIQ,YAAY,CAACa,OAAjB,EAA0B;AACP,iBAAKrB,aAAL,CAAmBY,WAAnB,GAAiC,CAAjC,EAAqCI,QAArC,CAA8CC,CAA9C,GAAkD,CAAC,KAAnD;AAClB,WAFD,MAEO;AACY,iBAAKjB,aAAL,CAAmBY,WAAnB,GAAiC,CAAjC,EAAqCI,QAArC,CAA8CC,CAA9C,GAAkD,CAAlD;AAClB;AACJ;;AACD,aAAKd,kCAAL,CAAwCQ,eAAxC,CAAwDH,YAAxD;AACA;;AACJ,WAAK,CAAL;AACI,YAAI,CAACpB,qBAAqB,CAACQ,QAAvB,IAAmC,KAAKI,aAA5C,EAA2D;AACvD,cAAIQ,YAAY,CAACa,OAAjB,EAA0B;AACP,iBAAKrB,aAAL,CAAmBY,WAAnB,GAAiC,CAAjC,EAAqCI,QAArC,CAA8CC,CAA9C,GAAkD,CAAC,KAAnD;AAClB,WAFD,MAEO;AACY,iBAAKjB,aAAL,CAAmBY,WAAnB,GAAiC,CAAjC,EAAqCI,QAArC,CAA8CC,CAA9C,GAAkD,CAAlD;AAClB;AACJ;;AACD,aAAKZ,uCAAL,CAA6CM,eAA7C,CAA6DH,YAA7D;AACA;;AACJ,WAAK,CAAL;AACI,aAAKc,4BAAL,CAAkCX,eAAlC,CAAkDH,YAAlD;AACA;AAxCR;AA0CH,GA7CS;AA5IV;;;;;AAGcpB,yCAAyB,2CAAzB;AACd;;;;AAGcA,8CAA8B,cAA9B;AACd;;;;AAGcA,+CAA+B,eAA/B;AAEd;;;;AAGcA,+CAA+B,gDAA/B;AAEd;;;;;AAIcA,mCAAW,KAAX;AAoKlB;AAAC,CA3LD,CAA2CV,eAA3C;;SAAaU;;AA6LbR,2BAA2B,CAAC2C,oBAA5B,CAAiDC,IAAjD,CAAsD;AAClDC,WAAS,EAAE,mBAACC,WAAD,EAAY;AACnB;AACA,QAAI7C,WAAW,CAAC8C,iBAAZ,IAAiC9C,WAAW,CAAC8C,iBAAZ,CAA8BC,UAA/D,IAA6E/C,WAAW,CAAC8C,iBAAZ,CAA8BC,UAA9B,CAAyCC,WAAzC,KAAyD,cAA1I,EAA0J;AACtJzC,2BAAqB,CAACQ,QAAtB,GAAiC,IAAjC;AACH;;AACD,WAAO8B,WAAW,CAACI,EAAZ,CAAeC,OAAf,CAAuB,cAAvB,MAA2C,CAAC,CAAnD;AACH,GAPiD;AAQlDC,QAAM,EAAE,gBAACN,WAAD,EAAY;AAChB,WAAO,IAAItC,qBAAJ,CAA0BsC,WAA1B,CAAP;AACH;AAViD,CAAtD","names":["Observable","SceneLoader","WebVRController","PoseEnabledControllerType","PoseEnabledControllerHelper","EngineStore","__extends","vrGamepad","_super","_this","controllerType","OCULUS","OculusTouchController","scene","meshLoaded","meshName","hand","MODEL_LEFT_FILENAME","MODEL_RIGHT_FILENAME","ImportMesh","_IsQuest","QUEST_MODEL_BASE_URL","MODEL_BASE_URL","newMeshes","_defaultModel","attachToMesh","Object","onMainButtonStateChangedObservable","Error","onSecondaryButtonStateChangedObservable","buttonIdx","state","notifyObject","triggerDirection","onPadStateChangedObservable","notifyObservers","getChildren","rotation","x","value","position","y","z","onTriggerStateChangedObservable","onSecondaryTriggerStateChangedObservable","pressed","onThumbRestChangedObservable","_ControllerFactories","push","canCreate","gamepadInfo","LastCreatedEngine","_vrDisplay","displayName","id","indexOf","create"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Gamepads/Controllers/oculusTouchController.ts"],"sourcesContent":["import { Observable } from \"../../Misc/observable\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\r\nimport { WebVRController } from \"./webVRController\";\r\nimport type { ExtendedGamepadButton } from \"./poseEnabledController\";\r\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController\";\r\nimport { EngineStore } from \"../../Engines/engineStore\";\r\n/**\r\n * Oculus Touch Controller\r\n */\r\nexport class OculusTouchController extends WebVRController {\r\n    /**\r\n     * Base Url for the controller model.\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://controllers.babylonjs.com/oculus/\";\r\n    /**\r\n     * File name for the left controller model.\r\n     */\r\n    public static MODEL_LEFT_FILENAME: string = \"left.babylon\";\r\n    /**\r\n     * File name for the right controller model.\r\n     */\r\n    public static MODEL_RIGHT_FILENAME: string = \"right.babylon\";\r\n\r\n    /**\r\n     * Base Url for the Quest controller model.\r\n     */\r\n    public static QUEST_MODEL_BASE_URL: string = \"https://controllers.babylonjs.com/oculusQuest/\";\r\n\r\n    /**\r\n     * @hidden\r\n     * If the controllers are running on a device that needs the updated Quest controller models\r\n     */\r\n    public static _IsQuest = false;\r\n\r\n    /**\r\n     * Fired when the secondary trigger on this controller is modified\r\n     */\r\n    public onSecondaryTriggerStateChangedObservable = new Observable<ExtendedGamepadButton>();\r\n\r\n    /**\r\n     * Fired when the thumb rest on this controller is modified\r\n     */\r\n    public onThumbRestChangedObservable = new Observable<ExtendedGamepadButton>();\r\n\r\n    /**\r\n     * Creates a new OculusTouchController from a gamepad\r\n     * @param vrGamepad the gamepad that the controller should be created from\r\n     */\r\n    constructor(vrGamepad: any) {\r\n        super(vrGamepad);\r\n        this.controllerType = PoseEnabledControllerType.OCULUS;\r\n    }\r\n\r\n    /**\r\n     * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\r\n     * @param scene scene in which to add meshes\r\n     * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\r\n     */\r\n    public initControllerMesh(scene: Scene, meshLoaded?: (mesh: AbstractMesh) => void) {\r\n        let meshName;\r\n\r\n        // Hand\r\n        if (this.hand === \"left\") {\r\n            meshName = OculusTouchController.MODEL_LEFT_FILENAME;\r\n        } else {\r\n            // Right is the default if no hand is specified\r\n            meshName = OculusTouchController.MODEL_RIGHT_FILENAME;\r\n        }\r\n\r\n        SceneLoader.ImportMesh(\r\n            \"\",\r\n            OculusTouchController._IsQuest ? OculusTouchController.QUEST_MODEL_BASE_URL : OculusTouchController.MODEL_BASE_URL,\r\n            meshName,\r\n            scene,\r\n            (newMeshes) => {\r\n                /*\r\n            Parent Mesh name: oculus_touch_left\r\n            - body\r\n            - trigger\r\n            - thumbstick\r\n            - grip\r\n            - button_y\r\n            - button_x\r\n            - button_enter\r\n            */\r\n\r\n                this._defaultModel = OculusTouchController._IsQuest ? newMeshes[0] : newMeshes[1];\r\n                this.attachToMesh(this._defaultModel);\r\n                if (meshLoaded) {\r\n                    meshLoaded(this._defaultModel);\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Fired when the A button on this controller is modified\r\n     */\r\n    public get onAButtonStateChangedObservable() {\r\n        if (this.hand === \"right\") {\r\n            return this.onMainButtonStateChangedObservable;\r\n        } else {\r\n            throw new Error(\"No A button on left hand\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fired when the B button on this controller is modified\r\n     */\r\n    public get onBButtonStateChangedObservable() {\r\n        if (this.hand === \"right\") {\r\n            return this.onSecondaryButtonStateChangedObservable;\r\n        } else {\r\n            throw new Error(\"No B button on left hand\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fired when the X button on this controller is modified\r\n     */\r\n    public get onXButtonStateChangedObservable() {\r\n        if (this.hand === \"left\") {\r\n            return this.onMainButtonStateChangedObservable;\r\n        } else {\r\n            throw new Error(\"No X button on right hand\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fired when the Y button on this controller is modified\r\n     */\r\n    public get onYButtonStateChangedObservable() {\r\n        if (this.hand === \"left\") {\r\n            return this.onSecondaryButtonStateChangedObservable;\r\n        } else {\r\n            throw new Error(\"No Y button on right hand\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called once for each button that changed state since the last frame\r\n     * 0) thumb stick (touch, press, value = pressed (0,1)). value is in this.leftStick\r\n     * 1) index trigger (touch (?), press (only when value > 0.1), value 0 to 1)\r\n     * 2) secondary trigger (same)\r\n     * 3) A (right) X (left), touch, pressed = value\r\n     * 4) B / Y\r\n     * 5) thumb rest\r\n     * @param buttonIdx Which button index changed\r\n     * @param state New state of the button\r\n     */\r\n    protected _handleButtonChange(buttonIdx: number, state: ExtendedGamepadButton) {\r\n        const notifyObject = state; //{ state: state, changes: changes };\r\n        const triggerDirection = this.hand === \"right\" ? -1 : 1;\r\n        switch (buttonIdx) {\r\n            case 0:\r\n                this.onPadStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 1: // index trigger\r\n                if (!OculusTouchController._IsQuest && this._defaultModel) {\r\n                    (<AbstractMesh>this._defaultModel.getChildren()[3]).rotation.x = -notifyObject.value * 0.2;\r\n                    (<AbstractMesh>this._defaultModel.getChildren()[3]).position.y = -notifyObject.value * 0.005;\r\n                    (<AbstractMesh>this._defaultModel.getChildren()[3]).position.z = -notifyObject.value * 0.005;\r\n                }\r\n                this.onTriggerStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 2: // secondary trigger\r\n                if (!OculusTouchController._IsQuest && this._defaultModel) {\r\n                    (<AbstractMesh>this._defaultModel.getChildren()[4]).position.x = triggerDirection * notifyObject.value * 0.0035;\r\n                }\r\n                this.onSecondaryTriggerStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 3:\r\n                if (!OculusTouchController._IsQuest && this._defaultModel) {\r\n                    if (notifyObject.pressed) {\r\n                        (<AbstractMesh>this._defaultModel.getChildren()[1]).position.y = -0.001;\r\n                    } else {\r\n                        (<AbstractMesh>this._defaultModel.getChildren()[1]).position.y = 0;\r\n                    }\r\n                }\r\n                this.onMainButtonStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 4:\r\n                if (!OculusTouchController._IsQuest && this._defaultModel) {\r\n                    if (notifyObject.pressed) {\r\n                        (<AbstractMesh>this._defaultModel.getChildren()[2]).position.y = -0.001;\r\n                    } else {\r\n                        (<AbstractMesh>this._defaultModel.getChildren()[2]).position.y = 0;\r\n                    }\r\n                }\r\n                this.onSecondaryButtonStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 5:\r\n                this.onThumbRestChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n        }\r\n    }\r\n}\r\n\r\nPoseEnabledControllerHelper._ControllerFactories.push({\r\n    canCreate: (gamepadInfo) => {\r\n        // If the headset reports being an Oculus Quest, use the Quest controller models\r\n        if (EngineStore.LastCreatedEngine && EngineStore.LastCreatedEngine._vrDisplay && EngineStore.LastCreatedEngine._vrDisplay.displayName === \"Oculus Quest\") {\r\n            OculusTouchController._IsQuest = true;\r\n        }\r\n        return gamepadInfo.id.indexOf(\"Oculus Touch\") !== -1;\r\n    },\r\n    create: (gamepadInfo) => {\r\n        return new OculusTouchController(gamepadInfo);\r\n    },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}