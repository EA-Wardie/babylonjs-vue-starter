{"ast":null,"code":"import \"core-js/modules/es.parse-int.js\";\nimport { __extends } from \"tslib\";\nimport { ShaderDefineExpression } from \"../shaderDefineExpression.js\";\n/** @hidden */\n\nvar ShaderDefineArithmeticOperator =\n/** @class */\nfunction (_super) {\n  __extends(ShaderDefineArithmeticOperator, _super);\n\n  function ShaderDefineArithmeticOperator(define, operand, testValue) {\n    var _this = _super.call(this) || this;\n\n    _this.define = define;\n    _this.operand = operand;\n    _this.testValue = testValue;\n    return _this;\n  }\n\n  ShaderDefineArithmeticOperator.prototype.isTrue = function (preprocessors) {\n    var value = preprocessors[this.define];\n\n    if (value === undefined) {\n      value = this.define;\n    }\n\n    var condition = false;\n    var left = parseInt(value);\n    var right = parseInt(this.testValue);\n\n    switch (this.operand) {\n      case \">\":\n        condition = left > right;\n        break;\n\n      case \"<\":\n        condition = left < right;\n        break;\n\n      case \"<=\":\n        condition = left <= right;\n        break;\n\n      case \">=\":\n        condition = left >= right;\n        break;\n\n      case \"==\":\n        condition = left === right;\n        break;\n    }\n\n    return condition;\n  };\n\n  return ShaderDefineArithmeticOperator;\n}(ShaderDefineExpression);\n\nexport { ShaderDefineArithmeticOperator };","map":{"version":3,"mappings":";;AAAA,SAASA,sBAAT,QAAuC,8BAAvC;AAEA;;AACA;AAAA;AAAA;AAAoDC;;AAChD,0CAA0BC,MAA1B,EAAiDC,OAAjD,EAAyEC,SAAzE,EAA0F;AAA1F,gBACIC,qBAAO,IADX;;AAA0BC;AAAuBA;AAAwBA;;AAExE;;AAEMC,oDAAP,UAAcC,aAAd,EAAsD;AAClD,QAAIC,KAAK,GAAGD,aAAa,CAAC,KAAKN,MAAN,CAAzB;;AAEA,QAAIO,KAAK,KAAKC,SAAd,EAAyB;AACrBD,WAAK,GAAG,KAAKP,MAAb;AACH;;AAED,QAAIS,SAAS,GAAG,KAAhB;AACA,QAAMC,IAAI,GAAGC,QAAQ,CAACJ,KAAD,CAArB;AACA,QAAMK,KAAK,GAAGD,QAAQ,CAAC,KAAKT,SAAN,CAAtB;;AAEA,YAAQ,KAAKD,OAAb;AACI,WAAK,GAAL;AACIQ,iBAAS,GAAGC,IAAI,GAAGE,KAAnB;AACA;;AACJ,WAAK,GAAL;AACIH,iBAAS,GAAGC,IAAI,GAAGE,KAAnB;AACA;;AACJ,WAAK,IAAL;AACIH,iBAAS,GAAGC,IAAI,IAAIE,KAApB;AACA;;AACJ,WAAK,IAAL;AACIH,iBAAS,GAAGC,IAAI,IAAIE,KAApB;AACA;;AACJ,WAAK,IAAL;AACIH,iBAAS,GAAGC,IAAI,KAAKE,KAArB;AACA;AAfR;;AAkBA,WAAOH,SAAP;AACH,GA9BM;;AA+BX;AAAC,CApCD,CAAoDX,sBAApD","names":["ShaderDefineExpression","__extends","define","operand","testValue","_super","_this","ShaderDefineArithmeticOperator","preprocessors","value","undefined","condition","left","parseInt","right"],"sourceRoot":"","sources":["../../../../../../../../lts/core/generated/Engines/Processors/Expressions/Operators/shaderDefineArithmeticOperator.ts"],"sourcesContent":["import { ShaderDefineExpression } from \"../shaderDefineExpression\";\r\n\r\n/** @hidden */\r\nexport class ShaderDefineArithmeticOperator extends ShaderDefineExpression {\r\n    public constructor(public define: string, public operand: string, public testValue: string) {\r\n        super();\r\n    }\r\n\r\n    public isTrue(preprocessors: { [key: string]: string }) {\r\n        let value = preprocessors[this.define];\r\n\r\n        if (value === undefined) {\r\n            value = this.define;\r\n        }\r\n\r\n        let condition = false;\r\n        const left = parseInt(value);\r\n        const right = parseInt(this.testValue);\r\n\r\n        switch (this.operand) {\r\n            case \">\":\r\n                condition = left > right;\r\n                break;\r\n            case \"<\":\r\n                condition = left < right;\r\n                break;\r\n            case \"<=\":\r\n                condition = left <= right;\r\n                break;\r\n            case \">=\":\r\n                condition = left >= right;\r\n                break;\r\n            case \"==\":\r\n                condition = left === right;\r\n                break;\r\n        }\r\n\r\n        return condition;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}