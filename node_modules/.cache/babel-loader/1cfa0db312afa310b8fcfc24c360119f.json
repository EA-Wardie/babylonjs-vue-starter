{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject.js\";\nimport { PBRIridescenceConfiguration } from \"../../../../Materials/PBR/pbrIridescenceConfiguration.js\";\n/**\n * Block used to implement the iridescence module of the PBR material\n */\n\nvar IridescenceBlock =\n/** @class */\nfunction (_super) {\n  __extends(IridescenceBlock, _super);\n  /**\n   * Create a new IridescenceBlock\n   * @param name defines the block name\n   */\n\n\n  function IridescenceBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;\n\n    _this._isUnique = true;\n\n    _this.registerInput(\"intensity\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"indexOfRefraction\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"thickness\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"iridescence\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"iridescence\", _this, NodeMaterialConnectionPointDirection.Output, IridescenceBlock, \"IridescenceBlock\"));\n\n    return _this;\n  }\n  /**\n   * Initialize the block and prepare the context for build\n   * @param state defines the state that will be used for the build\n   */\n\n\n  IridescenceBlock.prototype.initialize = function (state) {\n    state._excludeVariableName(\"iridescenceOut\");\n\n    state._excludeVariableName(\"vIridescenceParams\");\n  };\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  IridescenceBlock.prototype.getClassName = function () {\n    return \"IridescenceBlock\";\n  };\n\n  Object.defineProperty(IridescenceBlock.prototype, \"intensity\", {\n    /**\n     * Gets the intensity input component\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IridescenceBlock.prototype, \"indexOfRefraction\", {\n    /**\n     * Gets the indexOfRefraction input component\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IridescenceBlock.prototype, \"thickness\", {\n    /**\n     * Gets the thickness input component\n     */\n    get: function get() {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IridescenceBlock.prototype, \"iridescence\", {\n    /**\n     * Gets the iridescence object output component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IridescenceBlock.prototype.autoConfigure = function () {\n    if (!this.intensity.isConnected) {\n      var intensityInput = new InputBlock(\"Iridescence intensity\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\n      intensityInput.value = 1;\n      intensityInput.output.connectTo(this.intensity);\n      var indexOfRefractionInput = new InputBlock(\"Iridescence ior\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\n      indexOfRefractionInput.value = 1.3;\n      indexOfRefractionInput.output.connectTo(this.indexOfRefraction);\n      var thicknessInput = new InputBlock(\"Iridescence thickness\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\n      thicknessInput.value = 400;\n      thicknessInput.output.connectTo(this.thickness);\n    }\n  };\n\n  IridescenceBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    _super.prototype.prepareDefines.call(this, mesh, nodeMaterial, defines);\n\n    defines.setValue(\"IRIDESCENCE\", true, true);\n    defines.setValue(\"IRIDESCENCE_TEXTURE\", false, true);\n    defines.setValue(\"IRIDESCENCE_THICKNESS_TEXTURE\", false, true);\n  };\n  /**\n   * Gets the main code of the block (fragment side)\n   * @param iridescenceBlock instance of a IridescenceBlock or null if the code must be generated without an active iridescence module\n   * @returns the shader code\n   */\n\n\n  IridescenceBlock.GetCode = function (iridescenceBlock) {\n    var code = \"\";\n    var intensityName = (iridescenceBlock === null || iridescenceBlock === void 0 ? void 0 : iridescenceBlock.intensity.isConnected) ? iridescenceBlock.intensity.associatedVariableName : \"1.\";\n    var indexOfRefraction = (iridescenceBlock === null || iridescenceBlock === void 0 ? void 0 : iridescenceBlock.indexOfRefraction.isConnected) ? iridescenceBlock.indexOfRefraction.associatedVariableName : PBRIridescenceConfiguration._DefaultIndexOfRefraction;\n    var thickness = (iridescenceBlock === null || iridescenceBlock === void 0 ? void 0 : iridescenceBlock.thickness.isConnected) ? iridescenceBlock.thickness.associatedVariableName : PBRIridescenceConfiguration._DefaultMaximumThickness;\n    code += \"iridescenceOutParams iridescenceOut;\\n\\n        #ifdef IRIDESCENCE\\n            iridescenceBlock(\\n                vec4(\".concat(intensityName, \", \").concat(indexOfRefraction, \", 1., \").concat(thickness, \"),\\n                NdotV,\\n                specularEnvironmentR0,\\n                #ifdef CLEARCOAT\\n                    NdotVUnclamped,\\n                #endif\\n                iridescenceOut\\n            );\\n\\n            float iridescenceIntensity = iridescenceOut.iridescenceIntensity;\\n            specularEnvironmentR0 = iridescenceOut.specularEnvironmentR0;\\n        #endif\\r\\n\");\n    return code;\n  };\n\n  IridescenceBlock.prototype._buildBlock = function (state) {\n    if (state.target === NodeMaterialBlockTargets.Fragment) {\n      state.sharedData.bindableBlocks.push(this);\n      state.sharedData.blocksWithDefines.push(this);\n    }\n\n    return this;\n  };\n\n  IridescenceBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    return serializationObject;\n  };\n\n  IridescenceBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n  };\n\n  return IridescenceBlock;\n}(NodeMaterialBlock);\n\nexport { IridescenceBlock };\nRegisterClass(\"BABYLON.IridescenceBlock\", IridescenceBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialConnectionPointDirection","NodeMaterialBlockTargets","RegisterClass","InputBlock","NodeMaterialConnectionPointCustomObject","PBRIridescenceConfiguration","__extends","name","_super","Fragment","_this","_isUnique","registerInput","Float","registerOutput","Object","Output","IridescenceBlock","state","_excludeVariableName","_inputs","_outputs","intensity","isConnected","intensityInput","value","output","connectTo","indexOfRefractionInput","indexOfRefraction","thicknessInput","thickness","mesh","nodeMaterial","defines","prepareDefines","call","setValue","iridescenceBlock","code","intensityName","associatedVariableName","_DefaultIndexOfRefraction","_DefaultMaximumThickness","concat","target","sharedData","bindableBlocks","push","blocksWithDefines","serializationObject","serialize","scene","rootUrl","_deserialize"],"sourceRoot":"","sources":["../../../../../../../../lts/core/generated/Materials/Node/Blocks/PBR/iridescenceBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { InputBlock } from \"../Input/inputBlock\";\r\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\r\nimport type { NodeMaterial, NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\nimport type { Scene } from \"../../../../scene\";\r\nimport type { Nullable } from \"../../../../types\";\r\nimport { PBRIridescenceConfiguration } from \"../../../../Materials/PBR/pbrIridescenceConfiguration\";\r\n\r\n/**\r\n * Block used to implement the iridescence module of the PBR material\r\n */\r\nexport class IridescenceBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Create a new IridescenceBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this._isUnique = true;\r\n\r\n        this.registerInput(\"intensity\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"indexOfRefraction\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"thickness\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerOutput(\r\n            \"iridescence\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"iridescence\", this, NodeMaterialConnectionPointDirection.Output, IridescenceBlock, \"IridescenceBlock\")\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"iridescenceOut\");\r\n        state._excludeVariableName(\"vIridescenceParams\");\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"IridescenceBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the intensity input component\r\n     */\r\n    public get intensity(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the indexOfRefraction input component\r\n     */\r\n    public get indexOfRefraction(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the thickness input component\r\n     */\r\n    public get thickness(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the iridescence object output component\r\n     */\r\n    public get iridescence(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public autoConfigure() {\r\n        if (!this.intensity.isConnected) {\r\n            const intensityInput = new InputBlock(\"Iridescence intensity\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\r\n            intensityInput.value = 1;\r\n            intensityInput.output.connectTo(this.intensity);\r\n\r\n            const indexOfRefractionInput = new InputBlock(\"Iridescence ior\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\r\n            indexOfRefractionInput.value = 1.3;\r\n            indexOfRefractionInput.output.connectTo(this.indexOfRefraction);\r\n\r\n            const thicknessInput = new InputBlock(\"Iridescence thickness\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\r\n            thicknessInput.value = 400;\r\n            thicknessInput.output.connectTo(this.thickness);\r\n        }\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        super.prepareDefines(mesh, nodeMaterial, defines);\r\n\r\n        defines.setValue(\"IRIDESCENCE\", true, true);\r\n        defines.setValue(\"IRIDESCENCE_TEXTURE\", false, true);\r\n        defines.setValue(\"IRIDESCENCE_THICKNESS_TEXTURE\", false, true);\r\n    }\r\n\r\n    /**\r\n     * Gets the main code of the block (fragment side)\r\n     * @param iridescenceBlock instance of a IridescenceBlock or null if the code must be generated without an active iridescence module\r\n     * @returns the shader code\r\n     */\r\n    public static GetCode(iridescenceBlock: Nullable<IridescenceBlock>): string {\r\n        let code = \"\";\r\n\r\n        const intensityName = iridescenceBlock?.intensity.isConnected ? iridescenceBlock.intensity.associatedVariableName : \"1.\";\r\n        const indexOfRefraction = iridescenceBlock?.indexOfRefraction.isConnected\r\n            ? iridescenceBlock.indexOfRefraction.associatedVariableName\r\n            : PBRIridescenceConfiguration._DefaultIndexOfRefraction;\r\n        const thickness = iridescenceBlock?.thickness.isConnected ? iridescenceBlock.thickness.associatedVariableName : PBRIridescenceConfiguration._DefaultMaximumThickness;\r\n\r\n        code += `iridescenceOutParams iridescenceOut;\r\n\r\n        #ifdef IRIDESCENCE\r\n            iridescenceBlock(\r\n                vec4(${intensityName}, ${indexOfRefraction}, 1., ${thickness}),\r\n                NdotV,\r\n                specularEnvironmentR0,\r\n                #ifdef CLEARCOAT\r\n                    NdotVUnclamped,\r\n                #endif\r\n                iridescenceOut\r\n            );\r\n\r\n            float iridescenceIntensity = iridescenceOut.iridescenceIntensity;\r\n            specularEnvironmentR0 = iridescenceOut.specularEnvironmentR0;\r\n        #endif\\r\\n`;\r\n\r\n        return code;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        if (state.target === NodeMaterialBlockTargets.Fragment) {\r\n            state.sharedData.bindableBlocks.push(this);\r\n            state.sharedData.blocksWithDefines.push(this);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.IridescenceBlock\", IridescenceBlock);\r\n"]},"metadata":{},"sourceType":"module"}