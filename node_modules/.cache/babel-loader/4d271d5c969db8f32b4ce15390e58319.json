{"ast":null,"code":"import \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\n\n/* eslint-disable @typescript-eslint/naming-convention */\n// License for the mipmap generation code:\n//\n// Copyright 2020 Brandon Jones\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nimport * as WebGPUConstants from \"./webgpuConstants.js\";\nimport { Scalar } from \"../../Maths/math.scalar.js\";\nimport { InternalTextureSource } from \"../../Materials/Textures/internalTexture.js\";\nimport { WebGPUHardwareTexture } from \"./webgpuHardwareTexture.js\"; // TODO WEBGPU improve mipmap generation by using compute shaders\n// TODO WEBGPU use WGSL instead of GLSL\n\nvar mipmapVertexSource = \"\\n    const vec2 pos[4] = vec2[4](vec2(-1.0f, 1.0f), vec2(1.0f, 1.0f), vec2(-1.0f, -1.0f), vec2(1.0f, -1.0f));\\n    const vec2 tex[4] = vec2[4](vec2(0.0f, 0.0f), vec2(1.0f, 0.0f), vec2(0.0f, 1.0f), vec2(1.0f, 1.0f));\\n\\n    layout(location = 0) out vec2 vTex;\\n\\n    void main() {\\n        vTex = tex[gl_VertexIndex];\\n        gl_Position = vec4(pos[gl_VertexIndex], 0.0, 1.0);\\n    }\\n    \";\nvar mipmapFragmentSource = \"\\n    layout(set = 0, binding = 0) uniform sampler imgSampler;\\n    layout(set = 0, binding = 1) uniform texture2D img;\\n\\n    layout(location = 0) in vec2 vTex;\\n    layout(location = 0) out vec4 outColor;\\n\\n    void main() {\\n        outColor = texture(sampler2D(img, imgSampler), vTex);\\n    }\\n    \";\nvar invertYPreMultiplyAlphaVertexSource = \"\\n    #extension GL_EXT_samplerless_texture_functions : enable\\n\\n    const vec2 pos[4] = vec2[4](vec2(-1.0f, 1.0f), vec2(1.0f, 1.0f), vec2(-1.0f, -1.0f), vec2(1.0f, -1.0f));\\n    const vec2 tex[4] = vec2[4](vec2(0.0f, 0.0f), vec2(1.0f, 0.0f), vec2(0.0f, 1.0f), vec2(1.0f, 1.0f));\\n\\n    layout(set = 0, binding = 0) uniform texture2D img;\\n\\n    #ifdef INVERTY\\n        layout(location = 0) out flat ivec2 vTextureSize;\\n    #endif\\n\\n    void main() {\\n        #ifdef INVERTY\\n            vTextureSize = textureSize(img, 0);\\n        #endif\\n        gl_Position = vec4(pos[gl_VertexIndex], 0.0, 1.0);\\n    }\\n    \";\nvar invertYPreMultiplyAlphaFragmentSource = \"\\n    #extension GL_EXT_samplerless_texture_functions : enable\\n\\n    layout(set = 0, binding = 0) uniform texture2D img;\\n\\n    #ifdef INVERTY\\n        layout(location = 0) in flat ivec2 vTextureSize;\\n    #endif\\n    layout(location = 0) out vec4 outColor;\\n\\n    void main() {\\n    #ifdef INVERTY\\n        vec4 color = texelFetch(img, ivec2(gl_FragCoord.x, vTextureSize.y - gl_FragCoord.y), 0);\\n    #else\\n        vec4 color = texelFetch(img, ivec2(gl_FragCoord.xy), 0);\\n    #endif\\n    #ifdef PREMULTIPLYALPHA\\n        color.rgb *= color.a;\\n    #endif\\n        outColor = color;\\n    }\\n    \";\nvar invertYPreMultiplyAlphaWithOfstVertexSource = invertYPreMultiplyAlphaVertexSource;\nvar invertYPreMultiplyAlphaWithOfstFragmentSource = \"\\n    #extension GL_EXT_samplerless_texture_functions : enable\\n\\n    layout(set = 0, binding = 0) uniform texture2D img;\\n    layout(set = 0, binding = 1) uniform Params {\\n        float ofstX;\\n        float ofstY;\\n        float width;\\n        float height;\\n    };\\n\\n    #ifdef INVERTY\\n        layout(location = 0) in flat ivec2 vTextureSize;\\n    #endif\\n    layout(location = 0) out vec4 outColor;\\n\\n    void main() {\\n        if (gl_FragCoord.x < ofstX || gl_FragCoord.x >= ofstX + width) {\\n            discard;\\n        }\\n        if (gl_FragCoord.y < ofstY || gl_FragCoord.y >= ofstY + height) {\\n            discard;\\n        }\\n    #ifdef INVERTY\\n        vec4 color = texelFetch(img, ivec2(gl_FragCoord.x, ofstY + height - (gl_FragCoord.y - ofstY)), 0);\\n    #else\\n        vec4 color = texelFetch(img, ivec2(gl_FragCoord.xy), 0);\\n    #endif\\n    #ifdef PREMULTIPLYALPHA\\n        color.rgb *= color.a;\\n    #endif\\n        outColor = color;\\n    }\\n    \";\nvar clearVertexSource = \"\\n    const vec2 pos[4] = vec2[4](vec2(-1.0f, 1.0f), vec2(1.0f, 1.0f), vec2(-1.0f, -1.0f), vec2(1.0f, -1.0f));\\n\\n    void main() {\\n        gl_Position = vec4(pos[gl_VertexIndex], 0.0, 1.0);\\n    }\\n    \";\nvar clearFragmentSource = \"\\n    layout(set = 0, binding = 0) uniform Uniforms {\\n        uniform vec4 color;\\n    };\\n\\n    layout(location = 0) out vec4 outColor;\\n\\n    void main() {\\n        outColor = color;\\n    }\\n    \";\nvar PipelineType;\n\n(function (PipelineType) {\n  PipelineType[PipelineType[\"MipMap\"] = 0] = \"MipMap\";\n  PipelineType[PipelineType[\"InvertYPremultiplyAlpha\"] = 1] = \"InvertYPremultiplyAlpha\";\n  PipelineType[PipelineType[\"Clear\"] = 2] = \"Clear\";\n  PipelineType[PipelineType[\"InvertYPremultiplyAlphaWithOfst\"] = 3] = \"InvertYPremultiplyAlphaWithOfst\";\n})(PipelineType || (PipelineType = {}));\n\nvar shadersForPipelineType = [{\n  vertex: mipmapVertexSource,\n  fragment: mipmapFragmentSource\n}, {\n  vertex: invertYPreMultiplyAlphaVertexSource,\n  fragment: invertYPreMultiplyAlphaFragmentSource\n}, {\n  vertex: clearVertexSource,\n  fragment: clearFragmentSource\n}, {\n  vertex: invertYPreMultiplyAlphaWithOfstVertexSource,\n  fragment: invertYPreMultiplyAlphaWithOfstFragmentSource\n}];\n/**\n * Map a (renderable) texture format (GPUTextureFormat) to an index for fast lookup (in caches for eg)\n */\n\nexport var renderableTextureFormatToIndex = {\n  \"\": 0,\n  r8unorm: 1,\n  r8uint: 2,\n  r8sint: 3,\n  r16uint: 4,\n  r16sint: 5,\n  r16float: 6,\n  rg8unorm: 7,\n  rg8uint: 8,\n  rg8sint: 9,\n  r32uint: 10,\n  r32sint: 11,\n  r32float: 12,\n  rg16uint: 13,\n  rg16sint: 14,\n  rg16float: 15,\n  rgba8unorm: 16,\n  \"rgba8unorm-srgb\": 17,\n  rgba8uint: 18,\n  rgba8sint: 19,\n  bgra8unorm: 20,\n  \"bgra8unorm-srgb\": 21,\n  rgb10a2unorm: 22,\n  rg32uint: 23,\n  rg32sint: 24,\n  rg32float: 25,\n  rgba16uint: 26,\n  rgba16sint: 27,\n  rgba16float: 28,\n  rgba32uint: 29,\n  rgba32sint: 30,\n  rgba32float: 31,\n  stencil8: 32,\n  depth16unorm: 33,\n  depth24plus: 34,\n  \"depth24plus-stencil8\": 35,\n  depth32float: 36,\n  \"depth24unorm-stencil8\": 37,\n  \"depth32float-stencil8\": 38\n};\n/** @hidden */\n\nvar WebGPUTextureHelper =\n/** @class */\nfunction () {\n  //------------------------------------------------------------------------------\n  //                         Initialization / Helpers\n  //------------------------------------------------------------------------------\n  function WebGPUTextureHelper(device, glslang, tintWASM, bufferManager) {\n    this._pipelines = {};\n    this._compiledShaders = [];\n    this._deferredReleaseTextures = [];\n    this._device = device;\n    this._glslang = glslang;\n    this._tintWASM = tintWASM;\n    this._bufferManager = bufferManager;\n    this._mipmapSampler = device.createSampler({\n      minFilter: WebGPUConstants.FilterMode.Linear\n    });\n    this._ubCopyWithOfst = this._bufferManager.createBuffer(4 * 4, WebGPUConstants.BufferUsage.Uniform | WebGPUConstants.BufferUsage.CopyDst).underlyingResource;\n\n    this._getPipeline(WebGPUConstants.TextureFormat.RGBA8Unorm);\n  }\n\n  WebGPUTextureHelper.ComputeNumMipmapLevels = function (width, height) {\n    return Scalar.ILog2(Math.max(width, height)) + 1;\n  };\n\n  WebGPUTextureHelper.prototype._getPipeline = function (format, type, params) {\n    if (type === void 0) {\n      type = PipelineType.MipMap;\n    }\n\n    var index = type === PipelineType.MipMap ? 1 << 0 : type === PipelineType.InvertYPremultiplyAlpha ? ((params.invertY ? 1 : 0) << 1) + ((params.premultiplyAlpha ? 1 : 0) << 2) : type === PipelineType.Clear ? 1 << 3 : type === PipelineType.InvertYPremultiplyAlphaWithOfst ? ((params.invertY ? 1 : 0) << 4) + ((params.premultiplyAlpha ? 1 : 0) << 5) : 0;\n\n    if (!this._pipelines[format]) {\n      this._pipelines[format] = [];\n    }\n\n    var pipelineAndBGL = this._pipelines[format][index];\n\n    if (!pipelineAndBGL) {\n      var defines = \"#version 450\\r\\n\";\n\n      if (type === PipelineType.InvertYPremultiplyAlpha || type === PipelineType.InvertYPremultiplyAlphaWithOfst) {\n        if (params.invertY) {\n          defines += \"#define INVERTY\\r\\n\";\n        }\n\n        if (params.premultiplyAlpha) {\n          defines += \"#define PREMULTIPLYALPHA\\r\\n\";\n        }\n      }\n\n      var modules = this._compiledShaders[index];\n\n      if (!modules) {\n        var vertexCode = this._glslang.compileGLSL(defines + shadersForPipelineType[type].vertex, \"vertex\");\n\n        var fragmentCode = this._glslang.compileGLSL(defines + shadersForPipelineType[type].fragment, \"fragment\");\n\n        if (this._tintWASM) {\n          vertexCode = this._tintWASM.convertSpirV2WGSL(vertexCode);\n          fragmentCode = this._tintWASM.convertSpirV2WGSL(fragmentCode);\n        }\n\n        var vertexModule = this._device.createShaderModule({\n          code: vertexCode\n        });\n\n        var fragmentModule = this._device.createShaderModule({\n          code: fragmentCode\n        });\n\n        modules = this._compiledShaders[index] = [vertexModule, fragmentModule];\n      }\n\n      var pipeline = this._device.createRenderPipeline({\n        vertex: {\n          module: modules[0],\n          entryPoint: \"main\"\n        },\n        fragment: {\n          module: modules[1],\n          entryPoint: \"main\",\n          targets: [{\n            format: format\n          }]\n        },\n        primitive: {\n          topology: WebGPUConstants.PrimitiveTopology.TriangleStrip,\n          stripIndexFormat: WebGPUConstants.IndexFormat.Uint16\n        }\n      });\n\n      pipelineAndBGL = this._pipelines[format][index] = [pipeline, pipeline.getBindGroupLayout(0)];\n    }\n\n    return pipelineAndBGL;\n  };\n\n  WebGPUTextureHelper._GetTextureTypeFromFormat = function (format) {\n    switch (format) {\n      // One Component = 8 bits\n      case WebGPUConstants.TextureFormat.R8Unorm:\n      case WebGPUConstants.TextureFormat.R8Snorm:\n      case WebGPUConstants.TextureFormat.R8Uint:\n      case WebGPUConstants.TextureFormat.R8Sint:\n      case WebGPUConstants.TextureFormat.RG8Unorm:\n      case WebGPUConstants.TextureFormat.RG8Snorm:\n      case WebGPUConstants.TextureFormat.RG8Uint:\n      case WebGPUConstants.TextureFormat.RG8Sint:\n      case WebGPUConstants.TextureFormat.RGBA8Unorm:\n      case WebGPUConstants.TextureFormat.RGBA8UnormSRGB:\n      case WebGPUConstants.TextureFormat.RGBA8Snorm:\n      case WebGPUConstants.TextureFormat.RGBA8Uint:\n      case WebGPUConstants.TextureFormat.RGBA8Sint:\n      case WebGPUConstants.TextureFormat.BGRA8Unorm:\n      case WebGPUConstants.TextureFormat.BGRA8UnormSRGB:\n      case WebGPUConstants.TextureFormat.RGB10A2Unorm: // composite format - let's say it's byte...\n\n      case WebGPUConstants.TextureFormat.RGB9E5UFloat: // composite format - let's say it's byte...\n\n      case WebGPUConstants.TextureFormat.RG11B10UFloat: // composite format - let's say it's byte...\n\n      case WebGPUConstants.TextureFormat.Depth24UnormStencil8: // composite format - let's say it's byte...\n\n      case WebGPUConstants.TextureFormat.Depth32FloatStencil8: // composite format - let's say it's byte...\n\n      case WebGPUConstants.TextureFormat.BC7RGBAUnorm:\n      case WebGPUConstants.TextureFormat.BC7RGBAUnormSRGB:\n      case WebGPUConstants.TextureFormat.BC6HRGBUFloat:\n      case WebGPUConstants.TextureFormat.BC6HRGBFloat:\n      case WebGPUConstants.TextureFormat.BC5RGUnorm:\n      case WebGPUConstants.TextureFormat.BC5RGSnorm:\n      case WebGPUConstants.TextureFormat.BC3RGBAUnorm:\n      case WebGPUConstants.TextureFormat.BC3RGBAUnormSRGB:\n      case WebGPUConstants.TextureFormat.BC2RGBAUnorm:\n      case WebGPUConstants.TextureFormat.BC2RGBAUnormSRGB:\n      case WebGPUConstants.TextureFormat.BC4RUnorm:\n      case WebGPUConstants.TextureFormat.BC4RSnorm:\n      case WebGPUConstants.TextureFormat.BC1RGBAUnorm:\n      case WebGPUConstants.TextureFormat.BC1RGBAUnormSRGB:\n      case WebGPUConstants.TextureFormat.ETC2RGB8Unorm:\n      case WebGPUConstants.TextureFormat.ETC2RGB8UnormSRGB:\n      case WebGPUConstants.TextureFormat.ETC2RGB8A1Unorm:\n      case WebGPUConstants.TextureFormat.ETC2RGB8A1UnormSRGB:\n      case WebGPUConstants.TextureFormat.ETC2RGBA8Unorm:\n      case WebGPUConstants.TextureFormat.ETC2RGBA8UnormSRGB:\n      case WebGPUConstants.TextureFormat.EACR11Unorm:\n      case WebGPUConstants.TextureFormat.EACR11Snorm:\n      case WebGPUConstants.TextureFormat.EACRG11Unorm:\n      case WebGPUConstants.TextureFormat.EACRG11Snorm:\n      case WebGPUConstants.TextureFormat.ASTC4x4Unorm:\n      case WebGPUConstants.TextureFormat.ASTC4x4UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC5x4Unorm:\n      case WebGPUConstants.TextureFormat.ASTC5x4UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC5x5Unorm:\n      case WebGPUConstants.TextureFormat.ASTC5x5UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC6x5Unorm:\n      case WebGPUConstants.TextureFormat.ASTC6x5UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC6x6Unorm:\n      case WebGPUConstants.TextureFormat.ASTC6x6UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC8x5Unorm:\n      case WebGPUConstants.TextureFormat.ASTC8x5UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC8x6Unorm:\n      case WebGPUConstants.TextureFormat.ASTC8x6UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC8x8Unorm:\n      case WebGPUConstants.TextureFormat.ASTC8x8UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC10x5Unorm:\n      case WebGPUConstants.TextureFormat.ASTC10x5UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC10x6Unorm:\n      case WebGPUConstants.TextureFormat.ASTC10x6UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC10x8Unorm:\n      case WebGPUConstants.TextureFormat.ASTC10x8UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC10x10Unorm:\n      case WebGPUConstants.TextureFormat.ASTC10x10UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC12x10Unorm:\n      case WebGPUConstants.TextureFormat.ASTC12x10UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC12x12Unorm:\n      case WebGPUConstants.TextureFormat.ASTC12x12UnormSRGB:\n        return 0;\n      // One component = 16 bits\n\n      case WebGPUConstants.TextureFormat.R16Uint:\n      case WebGPUConstants.TextureFormat.R16Sint:\n      case WebGPUConstants.TextureFormat.RG16Uint:\n      case WebGPUConstants.TextureFormat.RG16Sint:\n      case WebGPUConstants.TextureFormat.RGBA16Uint:\n      case WebGPUConstants.TextureFormat.RGBA16Sint:\n      case WebGPUConstants.TextureFormat.Depth16Unorm:\n        return 5;\n\n      case WebGPUConstants.TextureFormat.R16Float:\n      case WebGPUConstants.TextureFormat.RG16Float:\n      case WebGPUConstants.TextureFormat.RGBA16Float:\n        return 2;\n      // One component = 32 bits\n\n      case WebGPUConstants.TextureFormat.R32Uint:\n      case WebGPUConstants.TextureFormat.R32Sint:\n      case WebGPUConstants.TextureFormat.RG32Uint:\n      case WebGPUConstants.TextureFormat.RG32Sint:\n      case WebGPUConstants.TextureFormat.RGBA32Uint:\n      case WebGPUConstants.TextureFormat.RGBA32Sint:\n        return 7;\n\n      case WebGPUConstants.TextureFormat.R32Float:\n      case WebGPUConstants.TextureFormat.RG32Float:\n      case WebGPUConstants.TextureFormat.RGBA32Float:\n      case WebGPUConstants.TextureFormat.Depth32Float:\n        return 1;\n\n      case WebGPUConstants.TextureFormat.Stencil8:\n        throw \"No fixed size for Stencil8 format!\";\n\n      case WebGPUConstants.TextureFormat.Depth24Plus:\n        throw \"No fixed size for Depth24Plus format!\";\n\n      case WebGPUConstants.TextureFormat.Depth24PlusStencil8:\n        throw \"No fixed size for Depth24PlusStencil8 format!\";\n    }\n\n    return 0;\n  };\n\n  WebGPUTextureHelper._GetBlockInformationFromFormat = function (format) {\n    switch (format) {\n      // 8 bits formats\n      case WebGPUConstants.TextureFormat.R8Unorm:\n      case WebGPUConstants.TextureFormat.R8Snorm:\n      case WebGPUConstants.TextureFormat.R8Uint:\n      case WebGPUConstants.TextureFormat.R8Sint:\n        return {\n          width: 1,\n          height: 1,\n          length: 1\n        };\n      // 16 bits formats\n\n      case WebGPUConstants.TextureFormat.R16Uint:\n      case WebGPUConstants.TextureFormat.R16Sint:\n      case WebGPUConstants.TextureFormat.R16Float:\n      case WebGPUConstants.TextureFormat.RG8Unorm:\n      case WebGPUConstants.TextureFormat.RG8Snorm:\n      case WebGPUConstants.TextureFormat.RG8Uint:\n      case WebGPUConstants.TextureFormat.RG8Sint:\n        return {\n          width: 1,\n          height: 1,\n          length: 2\n        };\n      // 32 bits formats\n\n      case WebGPUConstants.TextureFormat.R32Uint:\n      case WebGPUConstants.TextureFormat.R32Sint:\n      case WebGPUConstants.TextureFormat.R32Float:\n      case WebGPUConstants.TextureFormat.RG16Uint:\n      case WebGPUConstants.TextureFormat.RG16Sint:\n      case WebGPUConstants.TextureFormat.RG16Float:\n      case WebGPUConstants.TextureFormat.RGBA8Unorm:\n      case WebGPUConstants.TextureFormat.RGBA8UnormSRGB:\n      case WebGPUConstants.TextureFormat.RGBA8Snorm:\n      case WebGPUConstants.TextureFormat.RGBA8Uint:\n      case WebGPUConstants.TextureFormat.RGBA8Sint:\n      case WebGPUConstants.TextureFormat.BGRA8Unorm:\n      case WebGPUConstants.TextureFormat.BGRA8UnormSRGB:\n      case WebGPUConstants.TextureFormat.RGB9E5UFloat:\n      case WebGPUConstants.TextureFormat.RGB10A2Unorm:\n      case WebGPUConstants.TextureFormat.RG11B10UFloat:\n        return {\n          width: 1,\n          height: 1,\n          length: 4\n        };\n      // 64 bits formats\n\n      case WebGPUConstants.TextureFormat.RG32Uint:\n      case WebGPUConstants.TextureFormat.RG32Sint:\n      case WebGPUConstants.TextureFormat.RG32Float:\n      case WebGPUConstants.TextureFormat.RGBA16Uint:\n      case WebGPUConstants.TextureFormat.RGBA16Sint:\n      case WebGPUConstants.TextureFormat.RGBA16Float:\n        return {\n          width: 1,\n          height: 1,\n          length: 8\n        };\n      // 128 bits formats\n\n      case WebGPUConstants.TextureFormat.RGBA32Uint:\n      case WebGPUConstants.TextureFormat.RGBA32Sint:\n      case WebGPUConstants.TextureFormat.RGBA32Float:\n        return {\n          width: 1,\n          height: 1,\n          length: 16\n        };\n      // Depth and stencil formats\n\n      case WebGPUConstants.TextureFormat.Stencil8:\n        throw \"No fixed size for Stencil8 format!\";\n\n      case WebGPUConstants.TextureFormat.Depth16Unorm:\n        return {\n          width: 1,\n          height: 1,\n          length: 2\n        };\n\n      case WebGPUConstants.TextureFormat.Depth24Plus:\n        throw \"No fixed size for Depth24Plus format!\";\n\n      case WebGPUConstants.TextureFormat.Depth24PlusStencil8:\n        throw \"No fixed size for Depth24PlusStencil8 format!\";\n\n      case WebGPUConstants.TextureFormat.Depth32Float:\n        return {\n          width: 1,\n          height: 1,\n          length: 4\n        };\n\n      case WebGPUConstants.TextureFormat.Depth24UnormStencil8:\n        return {\n          width: 1,\n          height: 1,\n          length: 4\n        };\n\n      case WebGPUConstants.TextureFormat.Depth32FloatStencil8:\n        return {\n          width: 1,\n          height: 1,\n          length: 5\n        };\n      // BC compressed formats usable if \"texture-compression-bc\" is both\n      // supported by the device/user agent and enabled in requestDevice.\n\n      case WebGPUConstants.TextureFormat.BC7RGBAUnorm:\n      case WebGPUConstants.TextureFormat.BC7RGBAUnormSRGB:\n      case WebGPUConstants.TextureFormat.BC6HRGBUFloat:\n      case WebGPUConstants.TextureFormat.BC6HRGBFloat:\n      case WebGPUConstants.TextureFormat.BC5RGUnorm:\n      case WebGPUConstants.TextureFormat.BC5RGSnorm:\n      case WebGPUConstants.TextureFormat.BC3RGBAUnorm:\n      case WebGPUConstants.TextureFormat.BC3RGBAUnormSRGB:\n      case WebGPUConstants.TextureFormat.BC2RGBAUnorm:\n      case WebGPUConstants.TextureFormat.BC2RGBAUnormSRGB:\n        return {\n          width: 4,\n          height: 4,\n          length: 16\n        };\n\n      case WebGPUConstants.TextureFormat.BC4RUnorm:\n      case WebGPUConstants.TextureFormat.BC4RSnorm:\n      case WebGPUConstants.TextureFormat.BC1RGBAUnorm:\n      case WebGPUConstants.TextureFormat.BC1RGBAUnormSRGB:\n        return {\n          width: 4,\n          height: 4,\n          length: 8\n        };\n      // ETC2 compressed formats usable if \"texture-compression-etc2\" is both\n      // supported by the device/user agent and enabled in requestDevice.\n\n      case WebGPUConstants.TextureFormat.ETC2RGB8Unorm:\n      case WebGPUConstants.TextureFormat.ETC2RGB8UnormSRGB:\n      case WebGPUConstants.TextureFormat.ETC2RGB8A1Unorm:\n      case WebGPUConstants.TextureFormat.ETC2RGB8A1UnormSRGB:\n      case WebGPUConstants.TextureFormat.EACR11Unorm:\n      case WebGPUConstants.TextureFormat.EACR11Snorm:\n        return {\n          width: 4,\n          height: 4,\n          length: 8\n        };\n\n      case WebGPUConstants.TextureFormat.ETC2RGBA8Unorm:\n      case WebGPUConstants.TextureFormat.ETC2RGBA8UnormSRGB:\n      case WebGPUConstants.TextureFormat.EACRG11Unorm:\n      case WebGPUConstants.TextureFormat.EACRG11Snorm:\n        return {\n          width: 4,\n          height: 4,\n          length: 16\n        };\n      // ASTC compressed formats usable if \"texture-compression-astc\" is both\n      // supported by the device/user agent and enabled in requestDevice.\n\n      case WebGPUConstants.TextureFormat.ASTC4x4Unorm:\n      case WebGPUConstants.TextureFormat.ASTC4x4UnormSRGB:\n        return {\n          width: 4,\n          height: 4,\n          length: 16\n        };\n\n      case WebGPUConstants.TextureFormat.ASTC5x4Unorm:\n      case WebGPUConstants.TextureFormat.ASTC5x4UnormSRGB:\n        return {\n          width: 5,\n          height: 4,\n          length: 16\n        };\n\n      case WebGPUConstants.TextureFormat.ASTC5x5Unorm:\n      case WebGPUConstants.TextureFormat.ASTC5x5UnormSRGB:\n        return {\n          width: 5,\n          height: 5,\n          length: 16\n        };\n\n      case WebGPUConstants.TextureFormat.ASTC6x5Unorm:\n      case WebGPUConstants.TextureFormat.ASTC6x5UnormSRGB:\n        return {\n          width: 6,\n          height: 5,\n          length: 16\n        };\n\n      case WebGPUConstants.TextureFormat.ASTC6x6Unorm:\n      case WebGPUConstants.TextureFormat.ASTC6x6UnormSRGB:\n        return {\n          width: 6,\n          height: 6,\n          length: 16\n        };\n\n      case WebGPUConstants.TextureFormat.ASTC8x5Unorm:\n      case WebGPUConstants.TextureFormat.ASTC8x5UnormSRGB:\n        return {\n          width: 8,\n          height: 5,\n          length: 16\n        };\n\n      case WebGPUConstants.TextureFormat.ASTC8x6Unorm:\n      case WebGPUConstants.TextureFormat.ASTC8x6UnormSRGB:\n        return {\n          width: 8,\n          height: 6,\n          length: 16\n        };\n\n      case WebGPUConstants.TextureFormat.ASTC8x8Unorm:\n      case WebGPUConstants.TextureFormat.ASTC8x8UnormSRGB:\n        return {\n          width: 8,\n          height: 8,\n          length: 16\n        };\n\n      case WebGPUConstants.TextureFormat.ASTC10x5Unorm:\n      case WebGPUConstants.TextureFormat.ASTC10x5UnormSRGB:\n        return {\n          width: 10,\n          height: 5,\n          length: 16\n        };\n\n      case WebGPUConstants.TextureFormat.ASTC10x6Unorm:\n      case WebGPUConstants.TextureFormat.ASTC10x6UnormSRGB:\n        return {\n          width: 10,\n          height: 6,\n          length: 16\n        };\n\n      case WebGPUConstants.TextureFormat.ASTC10x8Unorm:\n      case WebGPUConstants.TextureFormat.ASTC10x8UnormSRGB:\n        return {\n          width: 10,\n          height: 8,\n          length: 16\n        };\n\n      case WebGPUConstants.TextureFormat.ASTC10x10Unorm:\n      case WebGPUConstants.TextureFormat.ASTC10x10UnormSRGB:\n        return {\n          width: 10,\n          height: 10,\n          length: 16\n        };\n\n      case WebGPUConstants.TextureFormat.ASTC12x10Unorm:\n      case WebGPUConstants.TextureFormat.ASTC12x10UnormSRGB:\n        return {\n          width: 12,\n          height: 10,\n          length: 16\n        };\n\n      case WebGPUConstants.TextureFormat.ASTC12x12Unorm:\n      case WebGPUConstants.TextureFormat.ASTC12x12UnormSRGB:\n        return {\n          width: 12,\n          height: 12,\n          length: 16\n        };\n    }\n\n    return {\n      width: 1,\n      height: 1,\n      length: 4\n    };\n  };\n\n  WebGPUTextureHelper._IsHardwareTexture = function (texture) {\n    return !!texture.release;\n  };\n\n  WebGPUTextureHelper._IsInternalTexture = function (texture) {\n    return !!texture.dispose;\n  };\n\n  WebGPUTextureHelper.IsImageBitmap = function (imageBitmap) {\n    return imageBitmap.close !== undefined;\n  };\n\n  WebGPUTextureHelper.IsImageBitmapArray = function (imageBitmap) {\n    return Array.isArray(imageBitmap) && imageBitmap[0].close !== undefined;\n  };\n\n  WebGPUTextureHelper.prototype.setCommandEncoder = function (encoder) {\n    this._commandEncoderForCreation = encoder;\n  };\n\n  WebGPUTextureHelper.IsCompressedFormat = function (format) {\n    switch (format) {\n      case WebGPUConstants.TextureFormat.BC7RGBAUnormSRGB:\n      case WebGPUConstants.TextureFormat.BC7RGBAUnorm:\n      case WebGPUConstants.TextureFormat.BC6HRGBFloat:\n      case WebGPUConstants.TextureFormat.BC6HRGBUFloat:\n      case WebGPUConstants.TextureFormat.BC5RGSnorm:\n      case WebGPUConstants.TextureFormat.BC5RGUnorm:\n      case WebGPUConstants.TextureFormat.BC4RSnorm:\n      case WebGPUConstants.TextureFormat.BC4RUnorm:\n      case WebGPUConstants.TextureFormat.BC3RGBAUnormSRGB:\n      case WebGPUConstants.TextureFormat.BC3RGBAUnorm:\n      case WebGPUConstants.TextureFormat.BC2RGBAUnormSRGB:\n      case WebGPUConstants.TextureFormat.BC2RGBAUnorm:\n      case WebGPUConstants.TextureFormat.BC1RGBAUnormSRGB:\n      case WebGPUConstants.TextureFormat.BC1RGBAUnorm:\n      case WebGPUConstants.TextureFormat.ETC2RGB8Unorm:\n      case WebGPUConstants.TextureFormat.ETC2RGB8UnormSRGB:\n      case WebGPUConstants.TextureFormat.ETC2RGB8A1Unorm:\n      case WebGPUConstants.TextureFormat.ETC2RGB8A1UnormSRGB:\n      case WebGPUConstants.TextureFormat.ETC2RGBA8Unorm:\n      case WebGPUConstants.TextureFormat.ETC2RGBA8UnormSRGB:\n      case WebGPUConstants.TextureFormat.EACR11Unorm:\n      case WebGPUConstants.TextureFormat.EACR11Snorm:\n      case WebGPUConstants.TextureFormat.EACRG11Unorm:\n      case WebGPUConstants.TextureFormat.EACRG11Snorm:\n      case WebGPUConstants.TextureFormat.ASTC4x4Unorm:\n      case WebGPUConstants.TextureFormat.ASTC4x4UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC5x4Unorm:\n      case WebGPUConstants.TextureFormat.ASTC5x4UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC5x5Unorm:\n      case WebGPUConstants.TextureFormat.ASTC5x5UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC6x5Unorm:\n      case WebGPUConstants.TextureFormat.ASTC6x5UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC6x6Unorm:\n      case WebGPUConstants.TextureFormat.ASTC6x6UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC8x5Unorm:\n      case WebGPUConstants.TextureFormat.ASTC8x5UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC8x6Unorm:\n      case WebGPUConstants.TextureFormat.ASTC8x6UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC8x8Unorm:\n      case WebGPUConstants.TextureFormat.ASTC8x8UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC10x5Unorm:\n      case WebGPUConstants.TextureFormat.ASTC10x5UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC10x6Unorm:\n      case WebGPUConstants.TextureFormat.ASTC10x6UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC10x8Unorm:\n      case WebGPUConstants.TextureFormat.ASTC10x8UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC10x10Unorm:\n      case WebGPUConstants.TextureFormat.ASTC10x10UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC12x10Unorm:\n      case WebGPUConstants.TextureFormat.ASTC12x10UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC12x12Unorm:\n      case WebGPUConstants.TextureFormat.ASTC12x12UnormSRGB:\n        return true;\n    }\n\n    return false;\n  };\n\n  WebGPUTextureHelper.GetWebGPUTextureFormat = function (type, format, useSRGBBuffer) {\n    if (useSRGBBuffer === void 0) {\n      useSRGBBuffer = false;\n    }\n\n    switch (format) {\n      case 15:\n        return WebGPUConstants.TextureFormat.Depth16Unorm;\n\n      case 16:\n        return WebGPUConstants.TextureFormat.Depth24Plus;\n\n      case 13:\n        return WebGPUConstants.TextureFormat.Depth24PlusStencil8;\n\n      case 14:\n        return WebGPUConstants.TextureFormat.Depth32Float;\n\n      case 36492:\n        return useSRGBBuffer ? WebGPUConstants.TextureFormat.BC7RGBAUnormSRGB : WebGPUConstants.TextureFormat.BC7RGBAUnorm;\n\n      case 36495:\n        return WebGPUConstants.TextureFormat.BC6HRGBUFloat;\n\n      case 36494:\n        return WebGPUConstants.TextureFormat.BC6HRGBFloat;\n\n      case 33779:\n        return useSRGBBuffer ? WebGPUConstants.TextureFormat.BC3RGBAUnormSRGB : WebGPUConstants.TextureFormat.BC3RGBAUnorm;\n\n      case 33778:\n        return useSRGBBuffer ? WebGPUConstants.TextureFormat.BC2RGBAUnormSRGB : WebGPUConstants.TextureFormat.BC2RGBAUnorm;\n\n      case 33777:\n      case 33776:\n        return useSRGBBuffer ? WebGPUConstants.TextureFormat.BC1RGBAUnormSRGB : WebGPUConstants.TextureFormat.BC1RGBAUnorm;\n\n      case 37808:\n        return useSRGBBuffer ? WebGPUConstants.TextureFormat.ASTC4x4UnormSRGB : WebGPUConstants.TextureFormat.ASTC4x4Unorm;\n\n      case 36196:\n        return useSRGBBuffer ? WebGPUConstants.TextureFormat.ETC2RGB8UnormSRGB : WebGPUConstants.TextureFormat.ETC2RGB8Unorm;\n    }\n\n    switch (type) {\n      case 3:\n        switch (format) {\n          case 6:\n            return WebGPUConstants.TextureFormat.R8Snorm;\n\n          case 7:\n            return WebGPUConstants.TextureFormat.RG8Snorm;\n\n          case 4:\n            throw \"RGB format not supported in WebGPU\";\n\n          case 8:\n            return WebGPUConstants.TextureFormat.R8Sint;\n\n          case 9:\n            return WebGPUConstants.TextureFormat.RG8Sint;\n\n          case 10:\n            throw \"RGB_INTEGER format not supported in WebGPU\";\n\n          case 11:\n            return WebGPUConstants.TextureFormat.RGBA8Sint;\n\n          default:\n            return WebGPUConstants.TextureFormat.RGBA8Snorm;\n        }\n\n      case 0:\n        switch (format) {\n          case 6:\n            return WebGPUConstants.TextureFormat.R8Unorm;\n\n          case 7:\n            return WebGPUConstants.TextureFormat.RG8Unorm;\n\n          case 4:\n            throw \"TEXTUREFORMAT_RGB format not supported in WebGPU\";\n\n          case 5:\n            return useSRGBBuffer ? WebGPUConstants.TextureFormat.RGBA8UnormSRGB : WebGPUConstants.TextureFormat.RGBA8Unorm;\n\n          case 12:\n            return useSRGBBuffer ? WebGPUConstants.TextureFormat.BGRA8UnormSRGB : WebGPUConstants.TextureFormat.BGRA8Unorm;\n\n          case 8:\n            return WebGPUConstants.TextureFormat.R8Uint;\n\n          case 9:\n            return WebGPUConstants.TextureFormat.RG8Uint;\n\n          case 10:\n            throw \"RGB_INTEGER format not supported in WebGPU\";\n\n          case 11:\n            return WebGPUConstants.TextureFormat.RGBA8Uint;\n\n          case 0:\n            throw \"TEXTUREFORMAT_ALPHA format not supported in WebGPU\";\n\n          case 1:\n            throw \"TEXTUREFORMAT_LUMINANCE format not supported in WebGPU\";\n\n          case 2:\n            throw \"TEXTUREFORMAT_LUMINANCE_ALPHA format not supported in WebGPU\";\n\n          default:\n            return WebGPUConstants.TextureFormat.RGBA8Unorm;\n        }\n\n      case 4:\n        switch (format) {\n          case 8:\n            return WebGPUConstants.TextureFormat.R16Sint;\n\n          case 9:\n            return WebGPUConstants.TextureFormat.RG16Sint;\n\n          case 10:\n            throw \"TEXTUREFORMAT_RGB_INTEGER format not supported in WebGPU\";\n\n          case 11:\n            return WebGPUConstants.TextureFormat.RGBA16Sint;\n\n          default:\n            return WebGPUConstants.TextureFormat.RGBA16Sint;\n        }\n\n      case 5:\n        switch (format) {\n          case 8:\n            return WebGPUConstants.TextureFormat.R16Uint;\n\n          case 9:\n            return WebGPUConstants.TextureFormat.RG16Uint;\n\n          case 10:\n            throw \"TEXTUREFORMAT_RGB_INTEGER format not supported in WebGPU\";\n\n          case 11:\n            return WebGPUConstants.TextureFormat.RGBA16Uint;\n\n          default:\n            return WebGPUConstants.TextureFormat.RGBA16Uint;\n        }\n\n      case 6:\n        switch (format) {\n          case 8:\n            return WebGPUConstants.TextureFormat.R32Sint;\n\n          case 9:\n            return WebGPUConstants.TextureFormat.RG32Sint;\n\n          case 10:\n            throw \"TEXTUREFORMAT_RGB_INTEGER format not supported in WebGPU\";\n\n          case 11:\n            return WebGPUConstants.TextureFormat.RGBA32Sint;\n\n          default:\n            return WebGPUConstants.TextureFormat.RGBA32Sint;\n        }\n\n      case 7:\n        // Refers to UNSIGNED_INT\n        switch (format) {\n          case 8:\n            return WebGPUConstants.TextureFormat.R32Uint;\n\n          case 9:\n            return WebGPUConstants.TextureFormat.RG32Uint;\n\n          case 10:\n            throw \"TEXTUREFORMAT_RGB_INTEGER format not supported in WebGPU\";\n\n          case 11:\n            return WebGPUConstants.TextureFormat.RGBA32Uint;\n\n          default:\n            return WebGPUConstants.TextureFormat.RGBA32Uint;\n        }\n\n      case 1:\n        switch (format) {\n          case 6:\n            return WebGPUConstants.TextureFormat.R32Float;\n          // By default. Other possibility is R16Float.\n\n          case 7:\n            return WebGPUConstants.TextureFormat.RG32Float;\n          // By default. Other possibility is RG16Float.\n\n          case 4:\n            throw \"TEXTUREFORMAT_RGB format not supported in WebGPU\";\n\n          case 5:\n            return WebGPUConstants.TextureFormat.RGBA32Float;\n          // By default. Other possibility is RGBA16Float.\n\n          default:\n            return WebGPUConstants.TextureFormat.RGBA32Float;\n        }\n\n      case 2:\n        switch (format) {\n          case 6:\n            return WebGPUConstants.TextureFormat.R16Float;\n\n          case 7:\n            return WebGPUConstants.TextureFormat.RG16Float;\n\n          case 4:\n            throw \"TEXTUREFORMAT_RGB format not supported in WebGPU\";\n\n          case 5:\n            return WebGPUConstants.TextureFormat.RGBA16Float;\n\n          default:\n            return WebGPUConstants.TextureFormat.RGBA16Float;\n        }\n\n      case 10:\n        throw \"TEXTURETYPE_UNSIGNED_SHORT_5_6_5 format not supported in WebGPU\";\n\n      case 13:\n        throw \"TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV format not supported in WebGPU\";\n\n      case 14:\n        throw \"TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV format not supported in WebGPU\";\n\n      case 8:\n        throw \"TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4 format not supported in WebGPU\";\n\n      case 9:\n        throw \"TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1 format not supported in WebGPU\";\n\n      case 11:\n        switch (format) {\n          case 5:\n            return WebGPUConstants.TextureFormat.RGB10A2Unorm;\n\n          case 11:\n            throw \"TEXTUREFORMAT_RGBA_INTEGER format not supported in WebGPU when type is TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV\";\n\n          default:\n            return WebGPUConstants.TextureFormat.RGB10A2Unorm;\n        }\n\n    }\n\n    return useSRGBBuffer ? WebGPUConstants.TextureFormat.RGBA8UnormSRGB : WebGPUConstants.TextureFormat.RGBA8Unorm;\n  };\n\n  WebGPUTextureHelper.GetNumChannelsFromWebGPUTextureFormat = function (format) {\n    switch (format) {\n      case WebGPUConstants.TextureFormat.R8Unorm:\n      case WebGPUConstants.TextureFormat.R8Snorm:\n      case WebGPUConstants.TextureFormat.R8Uint:\n      case WebGPUConstants.TextureFormat.R8Sint:\n      case WebGPUConstants.TextureFormat.BC4RUnorm:\n      case WebGPUConstants.TextureFormat.BC4RSnorm:\n      case WebGPUConstants.TextureFormat.R16Uint:\n      case WebGPUConstants.TextureFormat.R16Sint:\n      case WebGPUConstants.TextureFormat.Depth16Unorm:\n      case WebGPUConstants.TextureFormat.R16Float:\n      case WebGPUConstants.TextureFormat.R32Uint:\n      case WebGPUConstants.TextureFormat.R32Sint:\n      case WebGPUConstants.TextureFormat.R32Float:\n      case WebGPUConstants.TextureFormat.Depth32Float:\n      case WebGPUConstants.TextureFormat.Stencil8:\n      case WebGPUConstants.TextureFormat.Depth24Plus:\n      case WebGPUConstants.TextureFormat.EACR11Unorm:\n      case WebGPUConstants.TextureFormat.EACR11Snorm:\n        return 1;\n\n      case WebGPUConstants.TextureFormat.RG8Unorm:\n      case WebGPUConstants.TextureFormat.RG8Snorm:\n      case WebGPUConstants.TextureFormat.RG8Uint:\n      case WebGPUConstants.TextureFormat.RG8Sint:\n      case WebGPUConstants.TextureFormat.Depth24UnormStencil8: // composite format - let's say it's byte...\n\n      case WebGPUConstants.TextureFormat.Depth32FloatStencil8: // composite format - let's say it's byte...\n\n      case WebGPUConstants.TextureFormat.BC5RGUnorm:\n      case WebGPUConstants.TextureFormat.BC5RGSnorm:\n      case WebGPUConstants.TextureFormat.RG16Uint:\n      case WebGPUConstants.TextureFormat.RG16Sint:\n      case WebGPUConstants.TextureFormat.RG16Float:\n      case WebGPUConstants.TextureFormat.RG32Uint:\n      case WebGPUConstants.TextureFormat.RG32Sint:\n      case WebGPUConstants.TextureFormat.RG32Float:\n      case WebGPUConstants.TextureFormat.Depth24PlusStencil8:\n      case WebGPUConstants.TextureFormat.EACRG11Unorm:\n      case WebGPUConstants.TextureFormat.EACRG11Snorm:\n        return 2;\n\n      case WebGPUConstants.TextureFormat.RGB9E5UFloat: // composite format - let's say it's byte...\n\n      case WebGPUConstants.TextureFormat.RG11B10UFloat: // composite format - let's say it's byte...\n\n      case WebGPUConstants.TextureFormat.BC6HRGBUFloat:\n      case WebGPUConstants.TextureFormat.BC6HRGBFloat:\n      case WebGPUConstants.TextureFormat.ETC2RGB8Unorm:\n      case WebGPUConstants.TextureFormat.ETC2RGB8UnormSRGB:\n        return 3;\n\n      case WebGPUConstants.TextureFormat.RGBA8Unorm:\n      case WebGPUConstants.TextureFormat.RGBA8UnormSRGB:\n      case WebGPUConstants.TextureFormat.RGBA8Snorm:\n      case WebGPUConstants.TextureFormat.RGBA8Uint:\n      case WebGPUConstants.TextureFormat.RGBA8Sint:\n      case WebGPUConstants.TextureFormat.BGRA8Unorm:\n      case WebGPUConstants.TextureFormat.BGRA8UnormSRGB:\n      case WebGPUConstants.TextureFormat.RGB10A2Unorm: // composite format - let's say it's byte...\n\n      case WebGPUConstants.TextureFormat.BC7RGBAUnorm:\n      case WebGPUConstants.TextureFormat.BC7RGBAUnormSRGB:\n      case WebGPUConstants.TextureFormat.BC3RGBAUnorm:\n      case WebGPUConstants.TextureFormat.BC3RGBAUnormSRGB:\n      case WebGPUConstants.TextureFormat.BC2RGBAUnorm:\n      case WebGPUConstants.TextureFormat.BC2RGBAUnormSRGB:\n      case WebGPUConstants.TextureFormat.BC1RGBAUnorm:\n      case WebGPUConstants.TextureFormat.BC1RGBAUnormSRGB:\n      case WebGPUConstants.TextureFormat.RGBA16Uint:\n      case WebGPUConstants.TextureFormat.RGBA16Sint:\n      case WebGPUConstants.TextureFormat.RGBA16Float:\n      case WebGPUConstants.TextureFormat.RGBA32Uint:\n      case WebGPUConstants.TextureFormat.RGBA32Sint:\n      case WebGPUConstants.TextureFormat.RGBA32Float:\n      case WebGPUConstants.TextureFormat.ETC2RGB8A1Unorm:\n      case WebGPUConstants.TextureFormat.ETC2RGB8A1UnormSRGB:\n      case WebGPUConstants.TextureFormat.ETC2RGBA8Unorm:\n      case WebGPUConstants.TextureFormat.ETC2RGBA8UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC4x4Unorm:\n      case WebGPUConstants.TextureFormat.ASTC4x4UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC5x4Unorm:\n      case WebGPUConstants.TextureFormat.ASTC5x4UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC5x5Unorm:\n      case WebGPUConstants.TextureFormat.ASTC5x5UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC6x5Unorm:\n      case WebGPUConstants.TextureFormat.ASTC6x5UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC6x6Unorm:\n      case WebGPUConstants.TextureFormat.ASTC6x6UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC8x5Unorm:\n      case WebGPUConstants.TextureFormat.ASTC8x5UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC8x6Unorm:\n      case WebGPUConstants.TextureFormat.ASTC8x6UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC8x8Unorm:\n      case WebGPUConstants.TextureFormat.ASTC8x8UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC10x5Unorm:\n      case WebGPUConstants.TextureFormat.ASTC10x5UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC10x6Unorm:\n      case WebGPUConstants.TextureFormat.ASTC10x6UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC10x8Unorm:\n      case WebGPUConstants.TextureFormat.ASTC10x8UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC10x10Unorm:\n      case WebGPUConstants.TextureFormat.ASTC10x10UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC12x10Unorm:\n      case WebGPUConstants.TextureFormat.ASTC12x10UnormSRGB:\n      case WebGPUConstants.TextureFormat.ASTC12x12Unorm:\n      case WebGPUConstants.TextureFormat.ASTC12x12UnormSRGB:\n        return 4;\n    }\n\n    throw \"Unknown format \".concat(format, \"!\");\n  };\n\n  WebGPUTextureHelper.HasStencilAspect = function (format) {\n    switch (format) {\n      case WebGPUConstants.TextureFormat.Stencil8:\n      case WebGPUConstants.TextureFormat.Depth24UnormStencil8:\n      case WebGPUConstants.TextureFormat.Depth32FloatStencil8:\n      case WebGPUConstants.TextureFormat.Depth24PlusStencil8:\n        return true;\n    }\n\n    return false;\n  };\n\n  WebGPUTextureHelper.prototype.invertYPreMultiplyAlpha = function (gpuOrHdwTexture, width, height, format, invertY, premultiplyAlpha, faceIndex, mipLevel, layers, ofstX, ofstY, rectWidth, rectHeight, commandEncoder, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  allowGPUOptimization) {\n    var _a, _b, _c, _d, _e, _f;\n\n    if (invertY === void 0) {\n      invertY = false;\n    }\n\n    if (premultiplyAlpha === void 0) {\n      premultiplyAlpha = false;\n    }\n\n    if (faceIndex === void 0) {\n      faceIndex = 0;\n    }\n\n    if (mipLevel === void 0) {\n      mipLevel = 0;\n    }\n\n    if (layers === void 0) {\n      layers = 1;\n    }\n\n    if (ofstX === void 0) {\n      ofstX = 0;\n    }\n\n    if (ofstY === void 0) {\n      ofstY = 0;\n    }\n\n    if (rectWidth === void 0) {\n      rectWidth = 0;\n    }\n\n    if (rectHeight === void 0) {\n      rectHeight = 0;\n    }\n\n    var useRect = rectWidth !== 0;\n    var useOwnCommandEncoder = commandEncoder === undefined;\n\n    var _g = this._getPipeline(format, useRect ? PipelineType.InvertYPremultiplyAlphaWithOfst : PipelineType.InvertYPremultiplyAlpha, {\n      invertY: invertY,\n      premultiplyAlpha: premultiplyAlpha\n    }),\n        pipeline = _g[0],\n        bindGroupLayout = _g[1];\n\n    faceIndex = Math.max(faceIndex, 0);\n\n    if (useOwnCommandEncoder) {\n      commandEncoder = this._device.createCommandEncoder({});\n    }\n\n    (_b = (_a = commandEncoder).pushDebugGroup) === null || _b === void 0 ? void 0 : _b.call(_a, \"internal process texture - invertY=\".concat(invertY, \" premultiplyAlpha=\").concat(premultiplyAlpha));\n    var gpuTexture;\n\n    if (WebGPUTextureHelper._IsHardwareTexture(gpuOrHdwTexture)) {\n      gpuTexture = gpuOrHdwTexture.underlyingResource;\n\n      if (!(invertY && !premultiplyAlpha && layers === 1 && faceIndex === 0)) {\n        // we optimize only for the most likely case (invertY=true, premultiplyAlpha=false, layers=1, faceIndex=0) to avoid dealing with big caches\n        gpuOrHdwTexture = undefined;\n      }\n    } else {\n      gpuTexture = gpuOrHdwTexture;\n      gpuOrHdwTexture = undefined;\n    }\n\n    if (!gpuTexture) {\n      return;\n    }\n\n    if (useRect) {\n      this._bufferManager.setRawData(this._ubCopyWithOfst, 0, new Float32Array([ofstX, ofstY, rectWidth, rectHeight]), 0, 4 * 4);\n    }\n\n    var webgpuHardwareTexture = gpuOrHdwTexture;\n    var outputTexture = (_c = webgpuHardwareTexture === null || webgpuHardwareTexture === void 0 ? void 0 : webgpuHardwareTexture._copyInvertYTempTexture) !== null && _c !== void 0 ? _c : this.createTexture({\n      width: width,\n      height: height,\n      layers: 1\n    }, false, false, false, false, false, format, 1, commandEncoder, WebGPUConstants.TextureUsage.CopySrc | WebGPUConstants.TextureUsage.RenderAttachment | WebGPUConstants.TextureUsage.TextureBinding);\n    var renderPassDescriptor = (_d = webgpuHardwareTexture === null || webgpuHardwareTexture === void 0 ? void 0 : webgpuHardwareTexture._copyInvertYRenderPassDescr) !== null && _d !== void 0 ? _d : {\n      colorAttachments: [{\n        view: outputTexture.createView({\n          format: format,\n          dimension: WebGPUConstants.TextureViewDimension.E2d,\n          baseMipLevel: 0,\n          mipLevelCount: 1,\n          arrayLayerCount: 1,\n          baseArrayLayer: 0\n        }),\n        loadOp: WebGPUConstants.LoadOp.Load,\n        storeOp: WebGPUConstants.StoreOp.Store\n      }]\n    };\n    var passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n    var bindGroup = useRect ? webgpuHardwareTexture === null || webgpuHardwareTexture === void 0 ? void 0 : webgpuHardwareTexture._copyInvertYBindGroupWithOfst : webgpuHardwareTexture === null || webgpuHardwareTexture === void 0 ? void 0 : webgpuHardwareTexture._copyInvertYBindGroup;\n\n    if (!bindGroup) {\n      var descriptor = {\n        layout: bindGroupLayout,\n        entries: [{\n          binding: 0,\n          resource: gpuTexture.createView({\n            format: format,\n            dimension: WebGPUConstants.TextureViewDimension.E2d,\n            baseMipLevel: mipLevel,\n            mipLevelCount: 1,\n            arrayLayerCount: layers,\n            baseArrayLayer: faceIndex\n          })\n        }]\n      };\n\n      if (useRect) {\n        descriptor.entries.push({\n          binding: 1,\n          resource: {\n            buffer: this._ubCopyWithOfst\n          }\n        });\n      }\n\n      bindGroup = this._device.createBindGroup(descriptor);\n    }\n\n    passEncoder.setPipeline(pipeline);\n    passEncoder.setBindGroup(0, bindGroup);\n    passEncoder.draw(4, 1, 0, 0);\n    passEncoder.end();\n    commandEncoder.copyTextureToTexture({\n      texture: outputTexture\n    }, {\n      texture: gpuTexture,\n      mipLevel: mipLevel,\n      origin: {\n        x: 0,\n        y: 0,\n        z: faceIndex\n      }\n    }, {\n      width: width,\n      height: height,\n      depthOrArrayLayers: 1\n    });\n\n    if (webgpuHardwareTexture) {\n      webgpuHardwareTexture._copyInvertYTempTexture = outputTexture;\n      webgpuHardwareTexture._copyInvertYRenderPassDescr = renderPassDescriptor;\n\n      if (useRect) {\n        webgpuHardwareTexture._copyInvertYBindGroupWithOfst = bindGroup;\n      } else {\n        webgpuHardwareTexture._copyInvertYBindGroup = bindGroup;\n      }\n    } else {\n      this._deferredReleaseTextures.push([outputTexture, null]);\n    }\n\n    (_f = (_e = commandEncoder).popDebugGroup) === null || _f === void 0 ? void 0 : _f.call(_e);\n\n    if (useOwnCommandEncoder) {\n      this._device.queue.submit([commandEncoder.finish()]);\n\n      commandEncoder = null;\n    }\n  };\n\n  WebGPUTextureHelper.prototype.copyWithInvertY = function (srcTextureView, format, renderPassDescriptor, commandEncoder) {\n    var _a, _b, _c, _d;\n\n    var useOwnCommandEncoder = commandEncoder === undefined;\n\n    var _e = this._getPipeline(format, PipelineType.InvertYPremultiplyAlpha, {\n      invertY: true,\n      premultiplyAlpha: false\n    }),\n        pipeline = _e[0],\n        bindGroupLayout = _e[1];\n\n    if (useOwnCommandEncoder) {\n      commandEncoder = this._device.createCommandEncoder({});\n    }\n\n    (_b = (_a = commandEncoder).pushDebugGroup) === null || _b === void 0 ? void 0 : _b.call(_a, \"internal copy texture with invertY\");\n    var passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n\n    var bindGroup = this._device.createBindGroup({\n      layout: bindGroupLayout,\n      entries: [{\n        binding: 0,\n        resource: srcTextureView\n      }]\n    });\n\n    passEncoder.setPipeline(pipeline);\n    passEncoder.setBindGroup(0, bindGroup);\n    passEncoder.draw(4, 1, 0, 0);\n    passEncoder.end();\n    (_d = (_c = commandEncoder).popDebugGroup) === null || _d === void 0 ? void 0 : _d.call(_c);\n\n    if (useOwnCommandEncoder) {\n      this._device.queue.submit([commandEncoder.finish()]);\n\n      commandEncoder = null;\n    }\n  }; //------------------------------------------------------------------------------\n  //                               Creation\n  //------------------------------------------------------------------------------\n\n\n  WebGPUTextureHelper.prototype.createTexture = function (imageBitmap, hasMipmaps, generateMipmaps, invertY, premultiplyAlpha, is3D, format, sampleCount, commandEncoder, usage, additionalUsages) {\n    if (hasMipmaps === void 0) {\n      hasMipmaps = false;\n    }\n\n    if (generateMipmaps === void 0) {\n      generateMipmaps = false;\n    }\n\n    if (invertY === void 0) {\n      invertY = false;\n    }\n\n    if (premultiplyAlpha === void 0) {\n      premultiplyAlpha = false;\n    }\n\n    if (is3D === void 0) {\n      is3D = false;\n    }\n\n    if (format === void 0) {\n      format = WebGPUConstants.TextureFormat.RGBA8Unorm;\n    }\n\n    if (sampleCount === void 0) {\n      sampleCount = 1;\n    }\n\n    if (usage === void 0) {\n      usage = -1;\n    }\n\n    if (additionalUsages === void 0) {\n      additionalUsages = 0;\n    }\n\n    if (sampleCount > 1) {\n      // WebGPU only supports 1 or 4\n      sampleCount = 4;\n    }\n\n    var layerCount = imageBitmap.layers || 1;\n    var textureSize = {\n      width: imageBitmap.width,\n      height: imageBitmap.height,\n      depthOrArrayLayers: layerCount\n    };\n    var isCompressedFormat = WebGPUTextureHelper.IsCompressedFormat(format);\n    var mipLevelCount = hasMipmaps ? WebGPUTextureHelper.ComputeNumMipmapLevels(imageBitmap.width, imageBitmap.height) : 1;\n    var usages = usage >= 0 ? usage : WebGPUConstants.TextureUsage.CopySrc | WebGPUConstants.TextureUsage.CopyDst | WebGPUConstants.TextureUsage.TextureBinding;\n    additionalUsages |= hasMipmaps && !isCompressedFormat ? WebGPUConstants.TextureUsage.CopySrc | WebGPUConstants.TextureUsage.RenderAttachment : 0;\n\n    if (!isCompressedFormat) {\n      // we don't know in advance if the texture will be updated with copyExternalImageToTexture (which requires to have those flags), so we need to force the flags all the times\n      additionalUsages |= WebGPUConstants.TextureUsage.RenderAttachment | WebGPUConstants.TextureUsage.CopyDst;\n    }\n\n    var gpuTexture = this._device.createTexture({\n      size: textureSize,\n      dimension: is3D ? WebGPUConstants.TextureDimension.E3d : WebGPUConstants.TextureDimension.E2d,\n      format: format,\n      usage: usages | additionalUsages,\n      sampleCount: sampleCount,\n      mipLevelCount: mipLevelCount\n    });\n\n    if (WebGPUTextureHelper.IsImageBitmap(imageBitmap)) {\n      this.updateTexture(imageBitmap, gpuTexture, imageBitmap.width, imageBitmap.height, layerCount, format, 0, 0, invertY, premultiplyAlpha, 0, 0);\n\n      if (hasMipmaps && generateMipmaps) {\n        this.generateMipmaps(gpuTexture, format, mipLevelCount, 0, commandEncoder);\n      }\n    }\n\n    return gpuTexture;\n  };\n\n  WebGPUTextureHelper.prototype.createCubeTexture = function (imageBitmaps, hasMipmaps, generateMipmaps, invertY, premultiplyAlpha, format, sampleCount, commandEncoder, usage, additionalUsages) {\n    if (hasMipmaps === void 0) {\n      hasMipmaps = false;\n    }\n\n    if (generateMipmaps === void 0) {\n      generateMipmaps = false;\n    }\n\n    if (invertY === void 0) {\n      invertY = false;\n    }\n\n    if (premultiplyAlpha === void 0) {\n      premultiplyAlpha = false;\n    }\n\n    if (format === void 0) {\n      format = WebGPUConstants.TextureFormat.RGBA8Unorm;\n    }\n\n    if (sampleCount === void 0) {\n      sampleCount = 1;\n    }\n\n    if (usage === void 0) {\n      usage = -1;\n    }\n\n    if (additionalUsages === void 0) {\n      additionalUsages = 0;\n    }\n\n    if (sampleCount > 1) {\n      // WebGPU only supports 1 or 4\n      sampleCount = 4;\n    }\n\n    var width = WebGPUTextureHelper.IsImageBitmapArray(imageBitmaps) ? imageBitmaps[0].width : imageBitmaps.width;\n    var height = WebGPUTextureHelper.IsImageBitmapArray(imageBitmaps) ? imageBitmaps[0].height : imageBitmaps.height;\n    var isCompressedFormat = WebGPUTextureHelper.IsCompressedFormat(format);\n    var mipLevelCount = hasMipmaps ? WebGPUTextureHelper.ComputeNumMipmapLevels(width, height) : 1;\n    var usages = usage >= 0 ? usage : WebGPUConstants.TextureUsage.CopySrc | WebGPUConstants.TextureUsage.CopyDst | WebGPUConstants.TextureUsage.TextureBinding;\n    additionalUsages |= hasMipmaps && !isCompressedFormat ? WebGPUConstants.TextureUsage.CopySrc | WebGPUConstants.TextureUsage.RenderAttachment : 0;\n\n    if (!isCompressedFormat) {\n      // we don't know in advance if the texture will be updated with copyExternalImageToTexture (which requires to have those flags), so we need to force the flags all the times\n      additionalUsages |= WebGPUConstants.TextureUsage.RenderAttachment | WebGPUConstants.TextureUsage.CopyDst;\n    }\n\n    var gpuTexture = this._device.createTexture({\n      size: {\n        width: width,\n        height: height,\n        depthOrArrayLayers: 6\n      },\n      dimension: WebGPUConstants.TextureDimension.E2d,\n      format: format,\n      usage: usages | additionalUsages,\n      sampleCount: sampleCount,\n      mipLevelCount: mipLevelCount\n    });\n\n    if (WebGPUTextureHelper.IsImageBitmapArray(imageBitmaps)) {\n      this.updateCubeTextures(imageBitmaps, gpuTexture, width, height, format, invertY, premultiplyAlpha, 0, 0);\n\n      if (hasMipmaps && generateMipmaps) {\n        this.generateCubeMipmaps(gpuTexture, format, mipLevelCount, commandEncoder);\n      }\n    }\n\n    return gpuTexture;\n  };\n\n  WebGPUTextureHelper.prototype.generateCubeMipmaps = function (gpuTexture, format, mipLevelCount, commandEncoder) {\n    var _a, _b, _c, _d;\n\n    var useOwnCommandEncoder = commandEncoder === undefined;\n\n    if (useOwnCommandEncoder) {\n      commandEncoder = this._device.createCommandEncoder({});\n    }\n\n    (_b = (_a = commandEncoder).pushDebugGroup) === null || _b === void 0 ? void 0 : _b.call(_a, \"create cube mipmaps - \".concat(mipLevelCount, \" levels\"));\n\n    for (var f = 0; f < 6; ++f) {\n      this.generateMipmaps(gpuTexture, format, mipLevelCount, f, commandEncoder);\n    }\n\n    (_d = (_c = commandEncoder).popDebugGroup) === null || _d === void 0 ? void 0 : _d.call(_c);\n\n    if (useOwnCommandEncoder) {\n      this._device.queue.submit([commandEncoder.finish()]);\n\n      commandEncoder = null;\n    }\n  };\n\n  WebGPUTextureHelper.prototype.generateMipmaps = function (gpuOrHdwTexture, format, mipLevelCount, faceIndex, commandEncoder) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n\n    if (faceIndex === void 0) {\n      faceIndex = 0;\n    }\n\n    var useOwnCommandEncoder = commandEncoder === undefined;\n\n    var _j = this._getPipeline(format),\n        pipeline = _j[0],\n        bindGroupLayout = _j[1];\n\n    faceIndex = Math.max(faceIndex, 0);\n\n    if (useOwnCommandEncoder) {\n      commandEncoder = this._device.createCommandEncoder({});\n    }\n\n    (_b = (_a = commandEncoder).pushDebugGroup) === null || _b === void 0 ? void 0 : _b.call(_a, \"create mipmaps for face #\".concat(faceIndex, \" - \").concat(mipLevelCount, \" levels\"));\n    var gpuTexture;\n\n    if (WebGPUTextureHelper._IsHardwareTexture(gpuOrHdwTexture)) {\n      gpuTexture = gpuOrHdwTexture.underlyingResource;\n      gpuOrHdwTexture._mipmapGenRenderPassDescr = gpuOrHdwTexture._mipmapGenRenderPassDescr || [];\n      gpuOrHdwTexture._mipmapGenBindGroup = gpuOrHdwTexture._mipmapGenBindGroup || [];\n    } else {\n      gpuTexture = gpuOrHdwTexture;\n      gpuOrHdwTexture = undefined;\n    }\n\n    if (!gpuTexture) {\n      return;\n    }\n\n    var webgpuHardwareTexture = gpuOrHdwTexture;\n\n    for (var i = 1; i < mipLevelCount; ++i) {\n      var renderPassDescriptor = (_d = (_c = webgpuHardwareTexture === null || webgpuHardwareTexture === void 0 ? void 0 : webgpuHardwareTexture._mipmapGenRenderPassDescr[faceIndex]) === null || _c === void 0 ? void 0 : _c[i - 1]) !== null && _d !== void 0 ? _d : {\n        colorAttachments: [{\n          view: gpuTexture.createView({\n            format: format,\n            dimension: WebGPUConstants.TextureViewDimension.E2d,\n            baseMipLevel: i,\n            mipLevelCount: 1,\n            arrayLayerCount: 1,\n            baseArrayLayer: faceIndex\n          }),\n          loadOp: WebGPUConstants.LoadOp.Load,\n          storeOp: WebGPUConstants.StoreOp.Store\n        }]\n      };\n\n      if (webgpuHardwareTexture) {\n        webgpuHardwareTexture._mipmapGenRenderPassDescr[faceIndex] = webgpuHardwareTexture._mipmapGenRenderPassDescr[faceIndex] || [];\n        webgpuHardwareTexture._mipmapGenRenderPassDescr[faceIndex][i - 1] = renderPassDescriptor;\n      }\n\n      var passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      var bindGroup = (_f = (_e = webgpuHardwareTexture === null || webgpuHardwareTexture === void 0 ? void 0 : webgpuHardwareTexture._mipmapGenBindGroup[faceIndex]) === null || _e === void 0 ? void 0 : _e[i - 1]) !== null && _f !== void 0 ? _f : this._device.createBindGroup({\n        layout: bindGroupLayout,\n        entries: [{\n          binding: 0,\n          resource: this._mipmapSampler\n        }, {\n          binding: 1,\n          resource: gpuTexture.createView({\n            format: format,\n            dimension: WebGPUConstants.TextureViewDimension.E2d,\n            baseMipLevel: i - 1,\n            mipLevelCount: 1,\n            arrayLayerCount: 1,\n            baseArrayLayer: faceIndex\n          })\n        }]\n      });\n\n      if (webgpuHardwareTexture) {\n        webgpuHardwareTexture._mipmapGenBindGroup[faceIndex] = webgpuHardwareTexture._mipmapGenBindGroup[faceIndex] || [];\n        webgpuHardwareTexture._mipmapGenBindGroup[faceIndex][i - 1] = bindGroup;\n      }\n\n      passEncoder.setPipeline(pipeline);\n      passEncoder.setBindGroup(0, bindGroup);\n      passEncoder.draw(4, 1, 0, 0);\n      passEncoder.end();\n    }\n\n    (_h = (_g = commandEncoder).popDebugGroup) === null || _h === void 0 ? void 0 : _h.call(_g);\n\n    if (useOwnCommandEncoder) {\n      this._device.queue.submit([commandEncoder.finish()]);\n\n      commandEncoder = null;\n    }\n  };\n\n  WebGPUTextureHelper.prototype.createGPUTextureForInternalTexture = function (texture, width, height, depth, creationFlags) {\n    if (!texture._hardwareTexture) {\n      texture._hardwareTexture = new WebGPUHardwareTexture();\n    }\n\n    if (width === undefined) {\n      width = texture.width;\n    }\n\n    if (height === undefined) {\n      height = texture.height;\n    }\n\n    if (depth === undefined) {\n      depth = texture.depth;\n    }\n\n    var gpuTextureWrapper = texture._hardwareTexture;\n    var isStorageTexture = ((creationFlags !== null && creationFlags !== void 0 ? creationFlags : 0) & 1) !== 0;\n    gpuTextureWrapper.format = WebGPUTextureHelper.GetWebGPUTextureFormat(texture.type, texture.format, texture._useSRGBBuffer);\n    gpuTextureWrapper.textureUsages = texture._source === InternalTextureSource.RenderTarget || texture.source === InternalTextureSource.MultiRenderTarget ? WebGPUConstants.TextureUsage.TextureBinding | WebGPUConstants.TextureUsage.CopySrc | WebGPUConstants.TextureUsage.RenderAttachment : texture._source === InternalTextureSource.DepthStencil ? WebGPUConstants.TextureUsage.TextureBinding | WebGPUConstants.TextureUsage.RenderAttachment : -1;\n    gpuTextureWrapper.textureAdditionalUsages = isStorageTexture ? WebGPUConstants.TextureUsage.StorageBinding : 0;\n    var hasMipMaps = texture.generateMipMaps;\n    var layerCount = depth || 1;\n    var mipmapCount;\n\n    if (texture._maxLodLevel !== null) {\n      mipmapCount = texture._maxLodLevel;\n    } else {\n      mipmapCount = hasMipMaps ? WebGPUTextureHelper.ComputeNumMipmapLevels(width, height) : 1;\n    }\n\n    if (texture.isCube) {\n      var gpuTexture = this.createCubeTexture({\n        width: width,\n        height: height\n      }, texture.generateMipMaps, texture.generateMipMaps, texture.invertY, false, gpuTextureWrapper.format, 1, this._commandEncoderForCreation, gpuTextureWrapper.textureUsages, gpuTextureWrapper.textureAdditionalUsages);\n      gpuTextureWrapper.set(gpuTexture);\n      gpuTextureWrapper.createView({\n        format: gpuTextureWrapper.format,\n        dimension: WebGPUConstants.TextureViewDimension.Cube,\n        mipLevelCount: mipmapCount,\n        baseArrayLayer: 0,\n        baseMipLevel: 0,\n        arrayLayerCount: 6,\n        aspect: WebGPUConstants.TextureAspect.All\n      }, isStorageTexture);\n    } else {\n      var gpuTexture = this.createTexture({\n        width: width,\n        height: height,\n        layers: layerCount\n      }, texture.generateMipMaps, texture.generateMipMaps, texture.invertY, false, texture.is3D, gpuTextureWrapper.format, 1, this._commandEncoderForCreation, gpuTextureWrapper.textureUsages, gpuTextureWrapper.textureAdditionalUsages);\n      gpuTextureWrapper.set(gpuTexture);\n      gpuTextureWrapper.createView({\n        format: gpuTextureWrapper.format,\n        dimension: texture.is2DArray ? WebGPUConstants.TextureViewDimension.E2dArray : texture.is3D ? WebGPUConstants.TextureDimension.E3d : WebGPUConstants.TextureViewDimension.E2d,\n        mipLevelCount: mipmapCount,\n        baseArrayLayer: 0,\n        baseMipLevel: 0,\n        arrayLayerCount: texture.is3D ? 1 : layerCount,\n        aspect: WebGPUConstants.TextureAspect.All\n      }, isStorageTexture);\n    }\n\n    texture.width = texture.baseWidth = width;\n    texture.height = texture.baseHeight = height;\n    texture.depth = texture.baseDepth = depth;\n    this.createMSAATexture(texture, texture.samples);\n    return gpuTextureWrapper;\n  };\n\n  WebGPUTextureHelper.prototype.createMSAATexture = function (texture, samples) {\n    var gpuTextureWrapper = texture._hardwareTexture;\n\n    if (gpuTextureWrapper === null || gpuTextureWrapper === void 0 ? void 0 : gpuTextureWrapper.msaaTexture) {\n      this.releaseTexture(gpuTextureWrapper.msaaTexture);\n      gpuTextureWrapper.msaaTexture = null;\n    }\n\n    if (!gpuTextureWrapper || (samples !== null && samples !== void 0 ? samples : 1) <= 1) {\n      return;\n    }\n\n    var width = texture.width;\n    var height = texture.height;\n    var layerCount = texture.depth || 1;\n\n    if (texture.isCube) {\n      var gpuMSAATexture = this.createCubeTexture({\n        width: width,\n        height: height\n      }, false, false, texture.invertY, false, gpuTextureWrapper.format, samples, this._commandEncoderForCreation, gpuTextureWrapper.textureUsages, gpuTextureWrapper.textureAdditionalUsages);\n      gpuTextureWrapper.msaaTexture = gpuMSAATexture;\n    } else {\n      var gpuMSAATexture = this.createTexture({\n        width: width,\n        height: height,\n        layers: layerCount\n      }, false, false, texture.invertY, false, texture.is3D, gpuTextureWrapper.format, samples, this._commandEncoderForCreation, gpuTextureWrapper.textureUsages, gpuTextureWrapper.textureAdditionalUsages);\n      gpuTextureWrapper.msaaTexture = gpuMSAATexture;\n    }\n  }; //------------------------------------------------------------------------------\n  //                                  Update\n  //------------------------------------------------------------------------------\n\n\n  WebGPUTextureHelper.prototype.updateCubeTextures = function (imageBitmaps, gpuTexture, width, height, format, invertY, premultiplyAlpha, offsetX, offsetY) {\n    if (invertY === void 0) {\n      invertY = false;\n    }\n\n    if (premultiplyAlpha === void 0) {\n      premultiplyAlpha = false;\n    }\n\n    if (offsetX === void 0) {\n      offsetX = 0;\n    }\n\n    if (offsetY === void 0) {\n      offsetY = 0;\n    }\n\n    var faces = [0, 3, 1, 4, 2, 5];\n\n    for (var f = 0; f < faces.length; ++f) {\n      var imageBitmap = imageBitmaps[faces[f]];\n      this.updateTexture(imageBitmap, gpuTexture, width, height, 1, format, f, 0, invertY, premultiplyAlpha, offsetX, offsetY);\n    }\n  }; // TODO WEBGPU handle data source not being in the same format than the destination texture?\n\n\n  WebGPUTextureHelper.prototype.updateTexture = function (imageBitmap, texture, width, height, layers, format, faceIndex, mipLevel, invertY, premultiplyAlpha, offsetX, offsetY, allowGPUOptimization) {\n    if (faceIndex === void 0) {\n      faceIndex = 0;\n    }\n\n    if (mipLevel === void 0) {\n      mipLevel = 0;\n    }\n\n    if (invertY === void 0) {\n      invertY = false;\n    }\n\n    if (premultiplyAlpha === void 0) {\n      premultiplyAlpha = false;\n    }\n\n    if (offsetX === void 0) {\n      offsetX = 0;\n    }\n\n    if (offsetY === void 0) {\n      offsetY = 0;\n    }\n\n    var gpuTexture = WebGPUTextureHelper._IsInternalTexture(texture) ? texture._hardwareTexture.underlyingResource : texture;\n\n    var blockInformation = WebGPUTextureHelper._GetBlockInformationFromFormat(format);\n\n    var gpuOrHdwTexture = WebGPUTextureHelper._IsInternalTexture(texture) ? texture._hardwareTexture : texture;\n    var textureCopyView = {\n      texture: gpuTexture,\n      origin: {\n        x: offsetX,\n        y: offsetY,\n        z: Math.max(faceIndex, 0)\n      },\n      mipLevel: mipLevel,\n      premultipliedAlpha: premultiplyAlpha\n    };\n    var textureExtent = {\n      width: Math.ceil(width / blockInformation.width) * blockInformation.width,\n      height: Math.ceil(height / blockInformation.height) * blockInformation.height,\n      depthOrArrayLayers: layers || 1\n    };\n\n    if (imageBitmap.byteLength !== undefined) {\n      imageBitmap = imageBitmap;\n      var bytesPerRow = Math.ceil(width / blockInformation.width) * blockInformation.length;\n      var aligned = Math.ceil(bytesPerRow / 256) * 256 === bytesPerRow;\n\n      if (aligned) {\n        var commandEncoder = this._device.createCommandEncoder({});\n\n        var buffer = this._bufferManager.createRawBuffer(imageBitmap.byteLength, WebGPUConstants.BufferUsage.MapWrite | WebGPUConstants.BufferUsage.CopySrc, true);\n\n        var arrayBuffer = buffer.getMappedRange();\n        new Uint8Array(arrayBuffer).set(imageBitmap);\n        buffer.unmap();\n        commandEncoder.copyBufferToTexture({\n          buffer: buffer,\n          offset: 0,\n          bytesPerRow: bytesPerRow,\n          rowsPerImage: height\n        }, textureCopyView, textureExtent);\n\n        this._device.queue.submit([commandEncoder.finish()]);\n\n        this._bufferManager.releaseBuffer(buffer);\n      } else {\n        this._device.queue.writeTexture(textureCopyView, imageBitmap, {\n          offset: 0,\n          bytesPerRow: bytesPerRow,\n          rowsPerImage: height\n        }, textureExtent);\n      }\n\n      if (invertY || premultiplyAlpha) {\n        if (WebGPUTextureHelper._IsInternalTexture(texture)) {\n          var dontUseRect = offsetX === 0 && offsetY === 0 && width === texture.width && height === texture.height;\n          this.invertYPreMultiplyAlpha(gpuOrHdwTexture, texture.width, texture.height, format, invertY, premultiplyAlpha, faceIndex, mipLevel, layers || 1, offsetX, offsetY, dontUseRect ? 0 : width, dontUseRect ? 0 : height, undefined, allowGPUOptimization);\n        } else {\n          // we should never take this code path\n          throw \"updateTexture: Can't process the texture data because a GPUTexture was provided instead of an InternalTexture!\";\n        }\n      }\n    } else {\n      imageBitmap = imageBitmap;\n\n      if (invertY) {\n        textureCopyView.premultipliedAlpha = false; // we are going to handle premultiplyAlpha ourselves\n        // we must preprocess the image\n\n        if (WebGPUTextureHelper._IsInternalTexture(texture) && offsetX === 0 && offsetY === 0 && width === texture.width && height === texture.height) {\n          // optimization when the source image is the same size than the destination texture and offsets X/Y == 0:\n          // we simply copy the source to the destination and we apply the preprocessing on the destination\n          this._device.queue.copyExternalImageToTexture({\n            source: imageBitmap\n          }, textureCopyView, textureExtent);\n\n          this.invertYPreMultiplyAlpha(gpuOrHdwTexture, width, height, format, invertY, premultiplyAlpha, faceIndex, mipLevel, layers || 1, 0, 0, 0, 0, undefined, allowGPUOptimization);\n        } else {\n          // we must apply the preprocessing on the source image before copying it into the destination texture\n          var commandEncoder = this._device.createCommandEncoder({}); // create a temp texture and copy the image to it\n\n\n          var srcTexture = this.createTexture({\n            width: width,\n            height: height,\n            layers: 1\n          }, false, false, false, false, false, format, 1, commandEncoder, WebGPUConstants.TextureUsage.CopySrc | WebGPUConstants.TextureUsage.TextureBinding);\n\n          this._deferredReleaseTextures.push([srcTexture, null]);\n\n          textureExtent.depthOrArrayLayers = 1;\n\n          this._device.queue.copyExternalImageToTexture({\n            source: imageBitmap\n          }, {\n            texture: srcTexture\n          }, textureExtent);\n\n          textureExtent.depthOrArrayLayers = layers || 1; // apply the preprocessing to this temp texture\n\n          this.invertYPreMultiplyAlpha(srcTexture, width, height, format, invertY, premultiplyAlpha, faceIndex, mipLevel, layers || 1, 0, 0, 0, 0, commandEncoder, allowGPUOptimization); // copy the temp texture to the destination texture\n\n          commandEncoder.copyTextureToTexture({\n            texture: srcTexture\n          }, textureCopyView, textureExtent);\n\n          this._device.queue.submit([commandEncoder.finish()]);\n        }\n      } else {\n        // no preprocessing: direct copy to destination texture\n        this._device.queue.copyExternalImageToTexture({\n          source: imageBitmap\n        }, textureCopyView, textureExtent);\n      }\n    }\n  };\n\n  WebGPUTextureHelper.prototype.readPixels = function (texture, x, y, width, height, format, faceIndex, mipLevel, buffer, noDataConversion) {\n    if (faceIndex === void 0) {\n      faceIndex = 0;\n    }\n\n    if (mipLevel === void 0) {\n      mipLevel = 0;\n    }\n\n    if (buffer === void 0) {\n      buffer = null;\n    }\n\n    if (noDataConversion === void 0) {\n      noDataConversion = false;\n    }\n\n    var blockInformation = WebGPUTextureHelper._GetBlockInformationFromFormat(format);\n\n    var bytesPerRow = Math.ceil(width / blockInformation.width) * blockInformation.length;\n    var bytesPerRowAligned = Math.ceil(bytesPerRow / 256) * 256;\n    var size = bytesPerRowAligned * height;\n\n    var gpuBuffer = this._bufferManager.createRawBuffer(size, WebGPUConstants.BufferUsage.MapRead | WebGPUConstants.BufferUsage.CopyDst);\n\n    var commandEncoder = this._device.createCommandEncoder({});\n\n    commandEncoder.copyTextureToBuffer({\n      texture: texture,\n      mipLevel: mipLevel,\n      origin: {\n        x: x,\n        y: y,\n        z: Math.max(faceIndex, 0)\n      }\n    }, {\n      buffer: gpuBuffer,\n      offset: 0,\n      bytesPerRow: bytesPerRowAligned\n    }, {\n      width: width,\n      height: height,\n      depthOrArrayLayers: 1\n    });\n\n    this._device.queue.submit([commandEncoder.finish()]);\n\n    return this._bufferManager.readDataFromBuffer(gpuBuffer, size, width, height, bytesPerRow, bytesPerRowAligned, WebGPUTextureHelper._GetTextureTypeFromFormat(format), 0, buffer, true, noDataConversion);\n  }; //------------------------------------------------------------------------------\n  //                              Dispose\n  //------------------------------------------------------------------------------\n\n\n  WebGPUTextureHelper.prototype.releaseTexture = function (texture) {\n    if (WebGPUTextureHelper._IsInternalTexture(texture)) {\n      var hardwareTexture = texture._hardwareTexture;\n      var irradianceTexture = texture._irradianceTexture; // We can't destroy the objects just now because they could be used in the current frame - we delay the destroying after the end of the frame\n\n      this._deferredReleaseTextures.push([hardwareTexture, irradianceTexture]);\n    } else {\n      this._deferredReleaseTextures.push([texture, null]);\n    }\n  };\n\n  WebGPUTextureHelper.prototype.destroyDeferredTextures = function () {\n    for (var i = 0; i < this._deferredReleaseTextures.length; ++i) {\n      var _a = this._deferredReleaseTextures[i],\n          hardwareTexture = _a[0],\n          irradianceTexture = _a[1];\n\n      if (hardwareTexture) {\n        if (WebGPUTextureHelper._IsHardwareTexture(hardwareTexture)) {\n          hardwareTexture.release();\n        } else {\n          hardwareTexture.destroy();\n        }\n      }\n\n      irradianceTexture === null || irradianceTexture === void 0 ? void 0 : irradianceTexture.dispose();\n    }\n\n    this._deferredReleaseTextures.length = 0;\n  };\n\n  return WebGPUTextureHelper;\n}();\n\nexport { WebGPUTextureHelper };","map":{"version":3,"mappings":"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","names":["WebGPUConstants","Scalar","InternalTextureSource","WebGPUHardwareTexture","mipmapVertexSource","mipmapFragmentSource","invertYPreMultiplyAlphaVertexSource","invertYPreMultiplyAlphaFragmentSource","invertYPreMultiplyAlphaWithOfstVertexSource","invertYPreMultiplyAlphaWithOfstFragmentSource","clearVertexSource","clearFragmentSource","PipelineType","shadersForPipelineType","vertex","fragment","renderableTextureFormatToIndex","r8unorm","r8uint","r8sint","r16uint","r16sint","r16float","rg8unorm","rg8uint","rg8sint","r32uint","r32sint","r32float","rg16uint","rg16sint","rg16float","rgba8unorm","rgba8uint","rgba8sint","bgra8unorm","rgb10a2unorm","rg32uint","rg32sint","rg32float","rgba16uint","rgba16sint","rgba16float","rgba32uint","rgba32sint","rgba32float","stencil8","depth16unorm","depth24plus","depth32float","device","glslang","tintWASM","bufferManager","_device","_glslang","_tintWASM","_bufferManager","_mipmapSampler","createSampler","minFilter","FilterMode","Linear","_ubCopyWithOfst","createBuffer","BufferUsage","Uniform","CopyDst","underlyingResource","_getPipeline","TextureFormat","RGBA8Unorm","WebGPUTextureHelper","width","height","ILog2","Math","max","format","type","params","MipMap","index","InvertYPremultiplyAlpha","invertY","premultiplyAlpha","Clear","InvertYPremultiplyAlphaWithOfst","_pipelines","pipelineAndBGL","defines","modules","_compiledShaders","vertexCode","compileGLSL","fragmentCode","convertSpirV2WGSL","vertexModule","createShaderModule","code","fragmentModule","pipeline","createRenderPipeline","module","entryPoint","targets","primitive","topology","PrimitiveTopology","TriangleStrip","stripIndexFormat","IndexFormat","Uint16","getBindGroupLayout","R8Unorm","R8Snorm","R8Uint","R8Sint","RG8Unorm","RG8Snorm","RG8Uint","RG8Sint","RGBA8UnormSRGB","RGBA8Snorm","RGBA8Uint","RGBA8Sint","BGRA8Unorm","BGRA8UnormSRGB","RGB10A2Unorm","RGB9E5UFloat","RG11B10UFloat","Depth24UnormStencil8","Depth32FloatStencil8","BC7RGBAUnorm","BC7RGBAUnormSRGB","BC6HRGBUFloat","BC6HRGBFloat","BC5RGUnorm","BC5RGSnorm","BC3RGBAUnorm","BC3RGBAUnormSRGB","BC2RGBAUnorm","BC2RGBAUnormSRGB","BC4RUnorm","BC4RSnorm","BC1RGBAUnorm","BC1RGBAUnormSRGB","ETC2RGB8Unorm","ETC2RGB8UnormSRGB","ETC2RGB8A1Unorm","ETC2RGB8A1UnormSRGB","ETC2RGBA8Unorm","ETC2RGBA8UnormSRGB","EACR11Unorm","EACR11Snorm","EACRG11Unorm","EACRG11Snorm","ASTC4x4Unorm","ASTC4x4UnormSRGB","ASTC5x4Unorm","ASTC5x4UnormSRGB","ASTC5x5Unorm","ASTC5x5UnormSRGB","ASTC6x5Unorm","ASTC6x5UnormSRGB","ASTC6x6Unorm","ASTC6x6UnormSRGB","ASTC8x5Unorm","ASTC8x5UnormSRGB","ASTC8x6Unorm","ASTC8x6UnormSRGB","ASTC8x8Unorm","ASTC8x8UnormSRGB","ASTC10x5Unorm","ASTC10x5UnormSRGB","ASTC10x6Unorm","ASTC10x6UnormSRGB","ASTC10x8Unorm","ASTC10x8UnormSRGB","ASTC10x10Unorm","ASTC10x10UnormSRGB","ASTC12x10Unorm","ASTC12x10UnormSRGB","ASTC12x12Unorm","ASTC12x12UnormSRGB","R16Uint","R16Sint","RG16Uint","RG16Sint","RGBA16Uint","RGBA16Sint","Depth16Unorm","R16Float","RG16Float","RGBA16Float","R32Uint","R32Sint","RG32Uint","RG32Sint","RGBA32Uint","RGBA32Sint","R32Float","RG32Float","RGBA32Float","Depth32Float","Stencil8","Depth24Plus","Depth24PlusStencil8","length","texture","release","dispose","imageBitmap","close","undefined","Array","isArray","encoder","_commandEncoderForCreation","useSRGBBuffer","gpuOrHdwTexture","faceIndex","mipLevel","layers","ofstX","ofstY","rectWidth","rectHeight","commandEncoder","allowGPUOptimization","useRect","useOwnCommandEncoder","bindGroupLayout","createCommandEncoder","pushDebugGroup","_b","concat","gpuTexture","_IsHardwareTexture","setRawData","Float32Array","webgpuHardwareTexture","outputTexture","_copyInvertYTempTexture","_c","createTexture","TextureUsage","CopySrc","RenderAttachment","TextureBinding","renderPassDescriptor","_copyInvertYRenderPassDescr","_d","colorAttachments","view","createView","dimension","TextureViewDimension","E2d","baseMipLevel","mipLevelCount","arrayLayerCount","baseArrayLayer","loadOp","LoadOp","Load","storeOp","StoreOp","Store","passEncoder","beginRenderPass","bindGroup","_copyInvertYBindGroupWithOfst","_copyInvertYBindGroup","descriptor","layout","entries","binding","resource","push","buffer","createBindGroup","setPipeline","setBindGroup","draw","end","copyTextureToTexture","origin","x","y","z","depthOrArrayLayers","_deferredReleaseTextures","popDebugGroup","_f","queue","submit","finish","srcTextureView","hasMipmaps","generateMipmaps","is3D","sampleCount","usage","additionalUsages","layerCount","textureSize","isCompressedFormat","IsCompressedFormat","ComputeNumMipmapLevels","usages","size","TextureDimension","E3d","IsImageBitmap","updateTexture","imageBitmaps","IsImageBitmapArray","updateCubeTextures","generateCubeMipmaps","f","_mipmapGenRenderPassDescr","_mipmapGenBindGroup","i","_e","_h","depth","creationFlags","_hardwareTexture","gpuTextureWrapper","isStorageTexture","GetWebGPUTextureFormat","_useSRGBBuffer","textureUsages","_source","RenderTarget","source","MultiRenderTarget","DepthStencil","textureAdditionalUsages","StorageBinding","hasMipMaps","generateMipMaps","mipmapCount","_maxLodLevel","isCube","createCubeTexture","set","Cube","aspect","TextureAspect","All","is2DArray","E2dArray","baseWidth","baseHeight","baseDepth","createMSAATexture","samples","msaaTexture","releaseTexture","gpuMSAATexture","offsetX","offsetY","faces","_IsInternalTexture","blockInformation","_GetBlockInformationFromFormat","textureCopyView","premultipliedAlpha","textureExtent","ceil","byteLength","bytesPerRow","aligned","createRawBuffer","MapWrite","arrayBuffer","getMappedRange","Uint8Array","unmap","copyBufferToTexture","offset","rowsPerImage","releaseBuffer","writeTexture","dontUseRect","invertYPreMultiplyAlpha","copyExternalImageToTexture","srcTexture","noDataConversion","bytesPerRowAligned","gpuBuffer","MapRead","copyTextureToBuffer","readDataFromBuffer","_GetTextureTypeFromFormat","hardwareTexture","irradianceTexture","_irradianceTexture","destroy"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/WebGPU/webgpuTextureHelper.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\n// License for the mipmap generation code:\r\n//\r\n// Copyright 2020 Brandon Jones\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n// SOFTWARE.\r\nimport * as WebGPUConstants from \"./webgpuConstants\";\r\nimport { Scalar } from \"../../Maths/math.scalar\";\r\nimport type { WebGPUBufferManager } from \"./webgpuBufferManager\";\r\nimport { Constants } from \"../constants\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { InternalTexture } from \"../../Materials/Textures/internalTexture\";\r\nimport { InternalTextureSource } from \"../../Materials/Textures/internalTexture\";\r\nimport type { HardwareTextureWrapper } from \"../../Materials/Textures/hardwareTextureWrapper\";\r\nimport type { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport { WebGPUHardwareTexture } from \"./webgpuHardwareTexture\";\r\nimport type { WebGPUTintWASM } from \"./webgpuTintWASM\";\r\n\r\n// TODO WEBGPU improve mipmap generation by using compute shaders\r\n\r\n// TODO WEBGPU use WGSL instead of GLSL\r\nconst mipmapVertexSource = `\r\n    const vec2 pos[4] = vec2[4](vec2(-1.0f, 1.0f), vec2(1.0f, 1.0f), vec2(-1.0f, -1.0f), vec2(1.0f, -1.0f));\r\n    const vec2 tex[4] = vec2[4](vec2(0.0f, 0.0f), vec2(1.0f, 0.0f), vec2(0.0f, 1.0f), vec2(1.0f, 1.0f));\r\n\r\n    layout(location = 0) out vec2 vTex;\r\n\r\n    void main() {\r\n        vTex = tex[gl_VertexIndex];\r\n        gl_Position = vec4(pos[gl_VertexIndex], 0.0, 1.0);\r\n    }\r\n    `;\r\n\r\nconst mipmapFragmentSource = `\r\n    layout(set = 0, binding = 0) uniform sampler imgSampler;\r\n    layout(set = 0, binding = 1) uniform texture2D img;\r\n\r\n    layout(location = 0) in vec2 vTex;\r\n    layout(location = 0) out vec4 outColor;\r\n\r\n    void main() {\r\n        outColor = texture(sampler2D(img, imgSampler), vTex);\r\n    }\r\n    `;\r\n\r\nconst invertYPreMultiplyAlphaVertexSource = `\r\n    #extension GL_EXT_samplerless_texture_functions : enable\r\n\r\n    const vec2 pos[4] = vec2[4](vec2(-1.0f, 1.0f), vec2(1.0f, 1.0f), vec2(-1.0f, -1.0f), vec2(1.0f, -1.0f));\r\n    const vec2 tex[4] = vec2[4](vec2(0.0f, 0.0f), vec2(1.0f, 0.0f), vec2(0.0f, 1.0f), vec2(1.0f, 1.0f));\r\n\r\n    layout(set = 0, binding = 0) uniform texture2D img;\r\n\r\n    #ifdef INVERTY\r\n        layout(location = 0) out flat ivec2 vTextureSize;\r\n    #endif\r\n\r\n    void main() {\r\n        #ifdef INVERTY\r\n            vTextureSize = textureSize(img, 0);\r\n        #endif\r\n        gl_Position = vec4(pos[gl_VertexIndex], 0.0, 1.0);\r\n    }\r\n    `;\r\n\r\nconst invertYPreMultiplyAlphaFragmentSource = `\r\n    #extension GL_EXT_samplerless_texture_functions : enable\r\n\r\n    layout(set = 0, binding = 0) uniform texture2D img;\r\n\r\n    #ifdef INVERTY\r\n        layout(location = 0) in flat ivec2 vTextureSize;\r\n    #endif\r\n    layout(location = 0) out vec4 outColor;\r\n\r\n    void main() {\r\n    #ifdef INVERTY\r\n        vec4 color = texelFetch(img, ivec2(gl_FragCoord.x, vTextureSize.y - gl_FragCoord.y), 0);\r\n    #else\r\n        vec4 color = texelFetch(img, ivec2(gl_FragCoord.xy), 0);\r\n    #endif\r\n    #ifdef PREMULTIPLYALPHA\r\n        color.rgb *= color.a;\r\n    #endif\r\n        outColor = color;\r\n    }\r\n    `;\r\n\r\nconst invertYPreMultiplyAlphaWithOfstVertexSource = invertYPreMultiplyAlphaVertexSource;\r\n\r\nconst invertYPreMultiplyAlphaWithOfstFragmentSource = `\r\n    #extension GL_EXT_samplerless_texture_functions : enable\r\n\r\n    layout(set = 0, binding = 0) uniform texture2D img;\r\n    layout(set = 0, binding = 1) uniform Params {\r\n        float ofstX;\r\n        float ofstY;\r\n        float width;\r\n        float height;\r\n    };\r\n\r\n    #ifdef INVERTY\r\n        layout(location = 0) in flat ivec2 vTextureSize;\r\n    #endif\r\n    layout(location = 0) out vec4 outColor;\r\n\r\n    void main() {\r\n        if (gl_FragCoord.x < ofstX || gl_FragCoord.x >= ofstX + width) {\r\n            discard;\r\n        }\r\n        if (gl_FragCoord.y < ofstY || gl_FragCoord.y >= ofstY + height) {\r\n            discard;\r\n        }\r\n    #ifdef INVERTY\r\n        vec4 color = texelFetch(img, ivec2(gl_FragCoord.x, ofstY + height - (gl_FragCoord.y - ofstY)), 0);\r\n    #else\r\n        vec4 color = texelFetch(img, ivec2(gl_FragCoord.xy), 0);\r\n    #endif\r\n    #ifdef PREMULTIPLYALPHA\r\n        color.rgb *= color.a;\r\n    #endif\r\n        outColor = color;\r\n    }\r\n    `;\r\n\r\nconst clearVertexSource = `\r\n    const vec2 pos[4] = vec2[4](vec2(-1.0f, 1.0f), vec2(1.0f, 1.0f), vec2(-1.0f, -1.0f), vec2(1.0f, -1.0f));\r\n\r\n    void main() {\r\n        gl_Position = vec4(pos[gl_VertexIndex], 0.0, 1.0);\r\n    }\r\n    `;\r\n\r\nconst clearFragmentSource = `\r\n    layout(set = 0, binding = 0) uniform Uniforms {\r\n        uniform vec4 color;\r\n    };\r\n\r\n    layout(location = 0) out vec4 outColor;\r\n\r\n    void main() {\r\n        outColor = color;\r\n    }\r\n    `;\r\n\r\nenum PipelineType {\r\n    MipMap = 0,\r\n    InvertYPremultiplyAlpha = 1,\r\n    Clear = 2,\r\n    InvertYPremultiplyAlphaWithOfst = 3,\r\n}\r\n\r\ninterface IPipelineParameters {\r\n    invertY?: boolean;\r\n    premultiplyAlpha?: boolean;\r\n}\r\n\r\nconst shadersForPipelineType = [\r\n    { vertex: mipmapVertexSource, fragment: mipmapFragmentSource },\r\n    { vertex: invertYPreMultiplyAlphaVertexSource, fragment: invertYPreMultiplyAlphaFragmentSource },\r\n    { vertex: clearVertexSource, fragment: clearFragmentSource },\r\n    { vertex: invertYPreMultiplyAlphaWithOfstVertexSource, fragment: invertYPreMultiplyAlphaWithOfstFragmentSource },\r\n];\r\n\r\n/**\r\n * Map a (renderable) texture format (GPUTextureFormat) to an index for fast lookup (in caches for eg)\r\n */\r\nexport const renderableTextureFormatToIndex: { [name: string]: number } = {\r\n    \"\": 0,\r\n    r8unorm: 1,\r\n    r8uint: 2,\r\n    r8sint: 3,\r\n\r\n    r16uint: 4,\r\n    r16sint: 5,\r\n    r16float: 6,\r\n    rg8unorm: 7,\r\n    rg8uint: 8,\r\n    rg8sint: 9,\r\n\r\n    r32uint: 10,\r\n    r32sint: 11,\r\n    r32float: 12,\r\n    rg16uint: 13,\r\n    rg16sint: 14,\r\n    rg16float: 15,\r\n    rgba8unorm: 16,\r\n    \"rgba8unorm-srgb\": 17,\r\n    rgba8uint: 18,\r\n    rgba8sint: 19,\r\n    bgra8unorm: 20,\r\n    \"bgra8unorm-srgb\": 21,\r\n\r\n    rgb10a2unorm: 22,\r\n\r\n    rg32uint: 23,\r\n    rg32sint: 24,\r\n    rg32float: 25,\r\n    rgba16uint: 26,\r\n    rgba16sint: 27,\r\n    rgba16float: 28,\r\n\r\n    rgba32uint: 29,\r\n    rgba32sint: 30,\r\n    rgba32float: 31,\r\n\r\n    stencil8: 32,\r\n    depth16unorm: 33,\r\n    depth24plus: 34,\r\n    \"depth24plus-stencil8\": 35,\r\n    depth32float: 36,\r\n\r\n    \"depth24unorm-stencil8\": 37,\r\n\r\n    \"depth32float-stencil8\": 38,\r\n};\r\n\r\n/** @hidden */\r\nexport class WebGPUTextureHelper {\r\n    private _device: GPUDevice;\r\n    private _glslang: any;\r\n    private _tintWASM: Nullable<WebGPUTintWASM>;\r\n    private _bufferManager: WebGPUBufferManager;\r\n    private _mipmapSampler: GPUSampler;\r\n    private _ubCopyWithOfst: GPUBuffer;\r\n    private _pipelines: { [format: string]: Array<[GPURenderPipeline, GPUBindGroupLayout]> } = {};\r\n    private _compiledShaders: GPUShaderModule[][] = [];\r\n    private _deferredReleaseTextures: Array<[Nullable<HardwareTextureWrapper | GPUTexture>, Nullable<BaseTexture>]> = [];\r\n    private _commandEncoderForCreation: GPUCommandEncoder;\r\n\r\n    public static ComputeNumMipmapLevels(width: number, height: number) {\r\n        return Scalar.ILog2(Math.max(width, height)) + 1;\r\n    }\r\n\r\n    //------------------------------------------------------------------------------\r\n    //                         Initialization / Helpers\r\n    //------------------------------------------------------------------------------\r\n\r\n    constructor(device: GPUDevice, glslang: any, tintWASM: Nullable<WebGPUTintWASM>, bufferManager: WebGPUBufferManager) {\r\n        this._device = device;\r\n        this._glslang = glslang;\r\n        this._tintWASM = tintWASM;\r\n        this._bufferManager = bufferManager;\r\n\r\n        this._mipmapSampler = device.createSampler({ minFilter: WebGPUConstants.FilterMode.Linear });\r\n        this._ubCopyWithOfst = this._bufferManager.createBuffer(4 * 4, WebGPUConstants.BufferUsage.Uniform | WebGPUConstants.BufferUsage.CopyDst).underlyingResource;\r\n\r\n        this._getPipeline(WebGPUConstants.TextureFormat.RGBA8Unorm);\r\n    }\r\n\r\n    private _getPipeline(format: GPUTextureFormat, type: PipelineType = PipelineType.MipMap, params?: IPipelineParameters): [GPURenderPipeline, GPUBindGroupLayout] {\r\n        const index =\r\n            type === PipelineType.MipMap\r\n                ? 1 << 0\r\n                : type === PipelineType.InvertYPremultiplyAlpha\r\n                ? ((params!.invertY ? 1 : 0) << 1) + ((params!.premultiplyAlpha ? 1 : 0) << 2)\r\n                : type === PipelineType.Clear\r\n                ? 1 << 3\r\n                : type === PipelineType.InvertYPremultiplyAlphaWithOfst\r\n                ? ((params!.invertY ? 1 : 0) << 4) + ((params!.premultiplyAlpha ? 1 : 0) << 5)\r\n                : 0;\r\n\r\n        if (!this._pipelines[format]) {\r\n            this._pipelines[format] = [];\r\n        }\r\n\r\n        let pipelineAndBGL = this._pipelines[format][index];\r\n        if (!pipelineAndBGL) {\r\n            let defines = \"#version 450\\r\\n\";\r\n            if (type === PipelineType.InvertYPremultiplyAlpha || type === PipelineType.InvertYPremultiplyAlphaWithOfst) {\r\n                if (params!.invertY) {\r\n                    defines += \"#define INVERTY\\r\\n\";\r\n                }\r\n                if (params!.premultiplyAlpha) {\r\n                    defines += \"#define PREMULTIPLYALPHA\\r\\n\";\r\n                }\r\n            }\r\n\r\n            let modules = this._compiledShaders[index];\r\n            if (!modules) {\r\n                let vertexCode = this._glslang.compileGLSL(defines + shadersForPipelineType[type].vertex, \"vertex\");\r\n                let fragmentCode = this._glslang.compileGLSL(defines + shadersForPipelineType[type].fragment, \"fragment\");\r\n\r\n                if (this._tintWASM) {\r\n                    vertexCode = this._tintWASM.convertSpirV2WGSL(vertexCode);\r\n                    fragmentCode = this._tintWASM.convertSpirV2WGSL(fragmentCode);\r\n                }\r\n\r\n                const vertexModule = this._device.createShaderModule({\r\n                    code: vertexCode,\r\n                });\r\n                const fragmentModule = this._device.createShaderModule({\r\n                    code: fragmentCode,\r\n                });\r\n                modules = this._compiledShaders[index] = [vertexModule, fragmentModule];\r\n            }\r\n\r\n            const pipeline = this._device.createRenderPipeline({\r\n                vertex: {\r\n                    module: modules[0],\r\n                    entryPoint: \"main\",\r\n                },\r\n                fragment: {\r\n                    module: modules[1],\r\n                    entryPoint: \"main\",\r\n                    targets: [\r\n                        {\r\n                            format,\r\n                        },\r\n                    ],\r\n                },\r\n                primitive: {\r\n                    topology: WebGPUConstants.PrimitiveTopology.TriangleStrip,\r\n                    stripIndexFormat: WebGPUConstants.IndexFormat.Uint16,\r\n                },\r\n            });\r\n\r\n            pipelineAndBGL = this._pipelines[format][index] = [pipeline, pipeline.getBindGroupLayout(0)];\r\n        }\r\n\r\n        return pipelineAndBGL;\r\n    }\r\n\r\n    private static _GetTextureTypeFromFormat(format: GPUTextureFormat): number {\r\n        switch (format) {\r\n            // One Component = 8 bits\r\n            case WebGPUConstants.TextureFormat.R8Unorm:\r\n            case WebGPUConstants.TextureFormat.R8Snorm:\r\n            case WebGPUConstants.TextureFormat.R8Uint:\r\n            case WebGPUConstants.TextureFormat.R8Sint:\r\n            case WebGPUConstants.TextureFormat.RG8Unorm:\r\n            case WebGPUConstants.TextureFormat.RG8Snorm:\r\n            case WebGPUConstants.TextureFormat.RG8Uint:\r\n            case WebGPUConstants.TextureFormat.RG8Sint:\r\n            case WebGPUConstants.TextureFormat.RGBA8Unorm:\r\n            case WebGPUConstants.TextureFormat.RGBA8UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.RGBA8Snorm:\r\n            case WebGPUConstants.TextureFormat.RGBA8Uint:\r\n            case WebGPUConstants.TextureFormat.RGBA8Sint:\r\n            case WebGPUConstants.TextureFormat.BGRA8Unorm:\r\n            case WebGPUConstants.TextureFormat.BGRA8UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.RGB10A2Unorm: // composite format - let's say it's byte...\r\n            case WebGPUConstants.TextureFormat.RGB9E5UFloat: // composite format - let's say it's byte...\r\n            case WebGPUConstants.TextureFormat.RG11B10UFloat: // composite format - let's say it's byte...\r\n            case WebGPUConstants.TextureFormat.Depth24UnormStencil8: // composite format - let's say it's byte...\r\n            case WebGPUConstants.TextureFormat.Depth32FloatStencil8: // composite format - let's say it's byte...\r\n            case WebGPUConstants.TextureFormat.BC7RGBAUnorm:\r\n            case WebGPUConstants.TextureFormat.BC7RGBAUnormSRGB:\r\n            case WebGPUConstants.TextureFormat.BC6HRGBUFloat:\r\n            case WebGPUConstants.TextureFormat.BC6HRGBFloat:\r\n            case WebGPUConstants.TextureFormat.BC5RGUnorm:\r\n            case WebGPUConstants.TextureFormat.BC5RGSnorm:\r\n            case WebGPUConstants.TextureFormat.BC3RGBAUnorm:\r\n            case WebGPUConstants.TextureFormat.BC3RGBAUnormSRGB:\r\n            case WebGPUConstants.TextureFormat.BC2RGBAUnorm:\r\n            case WebGPUConstants.TextureFormat.BC2RGBAUnormSRGB:\r\n            case WebGPUConstants.TextureFormat.BC4RUnorm:\r\n            case WebGPUConstants.TextureFormat.BC4RSnorm:\r\n            case WebGPUConstants.TextureFormat.BC1RGBAUnorm:\r\n            case WebGPUConstants.TextureFormat.BC1RGBAUnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ETC2RGB8Unorm:\r\n            case WebGPUConstants.TextureFormat.ETC2RGB8UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ETC2RGB8A1Unorm:\r\n            case WebGPUConstants.TextureFormat.ETC2RGB8A1UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ETC2RGBA8Unorm:\r\n            case WebGPUConstants.TextureFormat.ETC2RGBA8UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.EACR11Unorm:\r\n            case WebGPUConstants.TextureFormat.EACR11Snorm:\r\n            case WebGPUConstants.TextureFormat.EACRG11Unorm:\r\n            case WebGPUConstants.TextureFormat.EACRG11Snorm:\r\n            case WebGPUConstants.TextureFormat.ASTC4x4Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC4x4UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC5x4Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC5x4UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC5x5Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC5x5UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC6x5Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC6x5UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC6x6Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC6x6UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC8x5Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC8x5UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC8x6Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC8x6UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC8x8Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC8x8UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC10x5Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC10x5UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC10x6Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC10x6UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC10x8Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC10x8UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC10x10Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC10x10UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC12x10Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC12x10UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC12x12Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC12x12UnormSRGB:\r\n                return Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n\r\n            // One component = 16 bits\r\n            case WebGPUConstants.TextureFormat.R16Uint:\r\n            case WebGPUConstants.TextureFormat.R16Sint:\r\n            case WebGPUConstants.TextureFormat.RG16Uint:\r\n            case WebGPUConstants.TextureFormat.RG16Sint:\r\n            case WebGPUConstants.TextureFormat.RGBA16Uint:\r\n            case WebGPUConstants.TextureFormat.RGBA16Sint:\r\n            case WebGPUConstants.TextureFormat.Depth16Unorm:\r\n                return Constants.TEXTURETYPE_UNSIGNED_SHORT;\r\n\r\n            case WebGPUConstants.TextureFormat.R16Float:\r\n            case WebGPUConstants.TextureFormat.RG16Float:\r\n            case WebGPUConstants.TextureFormat.RGBA16Float:\r\n                return Constants.TEXTURETYPE_HALF_FLOAT;\r\n\r\n            // One component = 32 bits\r\n            case WebGPUConstants.TextureFormat.R32Uint:\r\n            case WebGPUConstants.TextureFormat.R32Sint:\r\n            case WebGPUConstants.TextureFormat.RG32Uint:\r\n            case WebGPUConstants.TextureFormat.RG32Sint:\r\n            case WebGPUConstants.TextureFormat.RGBA32Uint:\r\n            case WebGPUConstants.TextureFormat.RGBA32Sint:\r\n                return Constants.TEXTURETYPE_UNSIGNED_INTEGER;\r\n\r\n            case WebGPUConstants.TextureFormat.R32Float:\r\n            case WebGPUConstants.TextureFormat.RG32Float:\r\n            case WebGPUConstants.TextureFormat.RGBA32Float:\r\n            case WebGPUConstants.TextureFormat.Depth32Float:\r\n                return Constants.TEXTURETYPE_FLOAT;\r\n\r\n            case WebGPUConstants.TextureFormat.Stencil8:\r\n                throw \"No fixed size for Stencil8 format!\";\r\n            case WebGPUConstants.TextureFormat.Depth24Plus:\r\n                throw \"No fixed size for Depth24Plus format!\";\r\n            case WebGPUConstants.TextureFormat.Depth24PlusStencil8:\r\n                throw \"No fixed size for Depth24PlusStencil8 format!\";\r\n        }\r\n\r\n        return Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n    }\r\n\r\n    private static _GetBlockInformationFromFormat(format: GPUTextureFormat): { width: number; height: number; length: number } {\r\n        switch (format) {\r\n            // 8 bits formats\r\n            case WebGPUConstants.TextureFormat.R8Unorm:\r\n            case WebGPUConstants.TextureFormat.R8Snorm:\r\n            case WebGPUConstants.TextureFormat.R8Uint:\r\n            case WebGPUConstants.TextureFormat.R8Sint:\r\n                return { width: 1, height: 1, length: 1 };\r\n\r\n            // 16 bits formats\r\n            case WebGPUConstants.TextureFormat.R16Uint:\r\n            case WebGPUConstants.TextureFormat.R16Sint:\r\n            case WebGPUConstants.TextureFormat.R16Float:\r\n            case WebGPUConstants.TextureFormat.RG8Unorm:\r\n            case WebGPUConstants.TextureFormat.RG8Snorm:\r\n            case WebGPUConstants.TextureFormat.RG8Uint:\r\n            case WebGPUConstants.TextureFormat.RG8Sint:\r\n                return { width: 1, height: 1, length: 2 };\r\n\r\n            // 32 bits formats\r\n            case WebGPUConstants.TextureFormat.R32Uint:\r\n            case WebGPUConstants.TextureFormat.R32Sint:\r\n            case WebGPUConstants.TextureFormat.R32Float:\r\n            case WebGPUConstants.TextureFormat.RG16Uint:\r\n            case WebGPUConstants.TextureFormat.RG16Sint:\r\n            case WebGPUConstants.TextureFormat.RG16Float:\r\n            case WebGPUConstants.TextureFormat.RGBA8Unorm:\r\n            case WebGPUConstants.TextureFormat.RGBA8UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.RGBA8Snorm:\r\n            case WebGPUConstants.TextureFormat.RGBA8Uint:\r\n            case WebGPUConstants.TextureFormat.RGBA8Sint:\r\n            case WebGPUConstants.TextureFormat.BGRA8Unorm:\r\n            case WebGPUConstants.TextureFormat.BGRA8UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.RGB9E5UFloat:\r\n            case WebGPUConstants.TextureFormat.RGB10A2Unorm:\r\n            case WebGPUConstants.TextureFormat.RG11B10UFloat:\r\n                return { width: 1, height: 1, length: 4 };\r\n\r\n            // 64 bits formats\r\n            case WebGPUConstants.TextureFormat.RG32Uint:\r\n            case WebGPUConstants.TextureFormat.RG32Sint:\r\n            case WebGPUConstants.TextureFormat.RG32Float:\r\n            case WebGPUConstants.TextureFormat.RGBA16Uint:\r\n            case WebGPUConstants.TextureFormat.RGBA16Sint:\r\n            case WebGPUConstants.TextureFormat.RGBA16Float:\r\n                return { width: 1, height: 1, length: 8 };\r\n\r\n            // 128 bits formats\r\n            case WebGPUConstants.TextureFormat.RGBA32Uint:\r\n            case WebGPUConstants.TextureFormat.RGBA32Sint:\r\n            case WebGPUConstants.TextureFormat.RGBA32Float:\r\n                return { width: 1, height: 1, length: 16 };\r\n\r\n            // Depth and stencil formats\r\n            case WebGPUConstants.TextureFormat.Stencil8:\r\n                throw \"No fixed size for Stencil8 format!\";\r\n            case WebGPUConstants.TextureFormat.Depth16Unorm:\r\n                return { width: 1, height: 1, length: 2 };\r\n            case WebGPUConstants.TextureFormat.Depth24Plus:\r\n                throw \"No fixed size for Depth24Plus format!\";\r\n            case WebGPUConstants.TextureFormat.Depth24PlusStencil8:\r\n                throw \"No fixed size for Depth24PlusStencil8 format!\";\r\n            case WebGPUConstants.TextureFormat.Depth32Float:\r\n                return { width: 1, height: 1, length: 4 };\r\n            case WebGPUConstants.TextureFormat.Depth24UnormStencil8:\r\n                return { width: 1, height: 1, length: 4 };\r\n            case WebGPUConstants.TextureFormat.Depth32FloatStencil8:\r\n                return { width: 1, height: 1, length: 5 };\r\n\r\n            // BC compressed formats usable if \"texture-compression-bc\" is both\r\n            // supported by the device/user agent and enabled in requestDevice.\r\n            case WebGPUConstants.TextureFormat.BC7RGBAUnorm:\r\n            case WebGPUConstants.TextureFormat.BC7RGBAUnormSRGB:\r\n            case WebGPUConstants.TextureFormat.BC6HRGBUFloat:\r\n            case WebGPUConstants.TextureFormat.BC6HRGBFloat:\r\n            case WebGPUConstants.TextureFormat.BC5RGUnorm:\r\n            case WebGPUConstants.TextureFormat.BC5RGSnorm:\r\n            case WebGPUConstants.TextureFormat.BC3RGBAUnorm:\r\n            case WebGPUConstants.TextureFormat.BC3RGBAUnormSRGB:\r\n            case WebGPUConstants.TextureFormat.BC2RGBAUnorm:\r\n            case WebGPUConstants.TextureFormat.BC2RGBAUnormSRGB:\r\n                return { width: 4, height: 4, length: 16 };\r\n\r\n            case WebGPUConstants.TextureFormat.BC4RUnorm:\r\n            case WebGPUConstants.TextureFormat.BC4RSnorm:\r\n            case WebGPUConstants.TextureFormat.BC1RGBAUnorm:\r\n            case WebGPUConstants.TextureFormat.BC1RGBAUnormSRGB:\r\n                return { width: 4, height: 4, length: 8 };\r\n\r\n            // ETC2 compressed formats usable if \"texture-compression-etc2\" is both\r\n            // supported by the device/user agent and enabled in requestDevice.\r\n            case WebGPUConstants.TextureFormat.ETC2RGB8Unorm:\r\n            case WebGPUConstants.TextureFormat.ETC2RGB8UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ETC2RGB8A1Unorm:\r\n            case WebGPUConstants.TextureFormat.ETC2RGB8A1UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.EACR11Unorm:\r\n            case WebGPUConstants.TextureFormat.EACR11Snorm:\r\n                return { width: 4, height: 4, length: 8 };\r\n\r\n            case WebGPUConstants.TextureFormat.ETC2RGBA8Unorm:\r\n            case WebGPUConstants.TextureFormat.ETC2RGBA8UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.EACRG11Unorm:\r\n            case WebGPUConstants.TextureFormat.EACRG11Snorm:\r\n                return { width: 4, height: 4, length: 16 };\r\n\r\n            // ASTC compressed formats usable if \"texture-compression-astc\" is both\r\n            // supported by the device/user agent and enabled in requestDevice.\r\n            case WebGPUConstants.TextureFormat.ASTC4x4Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC4x4UnormSRGB:\r\n                return { width: 4, height: 4, length: 16 };\r\n            case WebGPUConstants.TextureFormat.ASTC5x4Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC5x4UnormSRGB:\r\n                return { width: 5, height: 4, length: 16 };\r\n            case WebGPUConstants.TextureFormat.ASTC5x5Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC5x5UnormSRGB:\r\n                return { width: 5, height: 5, length: 16 };\r\n            case WebGPUConstants.TextureFormat.ASTC6x5Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC6x5UnormSRGB:\r\n                return { width: 6, height: 5, length: 16 };\r\n            case WebGPUConstants.TextureFormat.ASTC6x6Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC6x6UnormSRGB:\r\n                return { width: 6, height: 6, length: 16 };\r\n            case WebGPUConstants.TextureFormat.ASTC8x5Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC8x5UnormSRGB:\r\n                return { width: 8, height: 5, length: 16 };\r\n            case WebGPUConstants.TextureFormat.ASTC8x6Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC8x6UnormSRGB:\r\n                return { width: 8, height: 6, length: 16 };\r\n            case WebGPUConstants.TextureFormat.ASTC8x8Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC8x8UnormSRGB:\r\n                return { width: 8, height: 8, length: 16 };\r\n            case WebGPUConstants.TextureFormat.ASTC10x5Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC10x5UnormSRGB:\r\n                return { width: 10, height: 5, length: 16 };\r\n            case WebGPUConstants.TextureFormat.ASTC10x6Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC10x6UnormSRGB:\r\n                return { width: 10, height: 6, length: 16 };\r\n            case WebGPUConstants.TextureFormat.ASTC10x8Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC10x8UnormSRGB:\r\n                return { width: 10, height: 8, length: 16 };\r\n            case WebGPUConstants.TextureFormat.ASTC10x10Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC10x10UnormSRGB:\r\n                return { width: 10, height: 10, length: 16 };\r\n            case WebGPUConstants.TextureFormat.ASTC12x10Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC12x10UnormSRGB:\r\n                return { width: 12, height: 10, length: 16 };\r\n            case WebGPUConstants.TextureFormat.ASTC12x12Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC12x12UnormSRGB:\r\n                return { width: 12, height: 12, length: 16 };\r\n        }\r\n\r\n        return { width: 1, height: 1, length: 4 };\r\n    }\r\n\r\n    private static _IsHardwareTexture(texture: HardwareTextureWrapper | GPUTexture): texture is HardwareTextureWrapper {\r\n        return !!(texture as HardwareTextureWrapper).release;\r\n    }\r\n\r\n    private static _IsInternalTexture(texture: InternalTexture | GPUTexture): texture is InternalTexture {\r\n        return !!(texture as InternalTexture).dispose;\r\n    }\r\n\r\n    public static IsImageBitmap(imageBitmap: ImageBitmap | { width: number; height: number }): imageBitmap is ImageBitmap {\r\n        return (imageBitmap as ImageBitmap).close !== undefined;\r\n    }\r\n\r\n    public static IsImageBitmapArray(imageBitmap: ImageBitmap[] | { width: number; height: number }): imageBitmap is ImageBitmap[] {\r\n        return Array.isArray(imageBitmap as ImageBitmap[]) && (imageBitmap as ImageBitmap[])[0].close !== undefined;\r\n    }\r\n\r\n    public setCommandEncoder(encoder: GPUCommandEncoder): void {\r\n        this._commandEncoderForCreation = encoder;\r\n    }\r\n\r\n    public static IsCompressedFormat(format: GPUTextureFormat): boolean {\r\n        switch (format) {\r\n            case WebGPUConstants.TextureFormat.BC7RGBAUnormSRGB:\r\n            case WebGPUConstants.TextureFormat.BC7RGBAUnorm:\r\n            case WebGPUConstants.TextureFormat.BC6HRGBFloat:\r\n            case WebGPUConstants.TextureFormat.BC6HRGBUFloat:\r\n            case WebGPUConstants.TextureFormat.BC5RGSnorm:\r\n            case WebGPUConstants.TextureFormat.BC5RGUnorm:\r\n            case WebGPUConstants.TextureFormat.BC4RSnorm:\r\n            case WebGPUConstants.TextureFormat.BC4RUnorm:\r\n            case WebGPUConstants.TextureFormat.BC3RGBAUnormSRGB:\r\n            case WebGPUConstants.TextureFormat.BC3RGBAUnorm:\r\n            case WebGPUConstants.TextureFormat.BC2RGBAUnormSRGB:\r\n            case WebGPUConstants.TextureFormat.BC2RGBAUnorm:\r\n            case WebGPUConstants.TextureFormat.BC1RGBAUnormSRGB:\r\n            case WebGPUConstants.TextureFormat.BC1RGBAUnorm:\r\n            case WebGPUConstants.TextureFormat.ETC2RGB8Unorm:\r\n            case WebGPUConstants.TextureFormat.ETC2RGB8UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ETC2RGB8A1Unorm:\r\n            case WebGPUConstants.TextureFormat.ETC2RGB8A1UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ETC2RGBA8Unorm:\r\n            case WebGPUConstants.TextureFormat.ETC2RGBA8UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.EACR11Unorm:\r\n            case WebGPUConstants.TextureFormat.EACR11Snorm:\r\n            case WebGPUConstants.TextureFormat.EACRG11Unorm:\r\n            case WebGPUConstants.TextureFormat.EACRG11Snorm:\r\n            case WebGPUConstants.TextureFormat.ASTC4x4Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC4x4UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC5x4Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC5x4UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC5x5Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC5x5UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC6x5Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC6x5UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC6x6Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC6x6UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC8x5Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC8x5UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC8x6Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC8x6UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC8x8Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC8x8UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC10x5Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC10x5UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC10x6Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC10x6UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC10x8Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC10x8UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC10x10Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC10x10UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC12x10Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC12x10UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC12x12Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC12x12UnormSRGB:\r\n                return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public static GetWebGPUTextureFormat(type: number, format: number, useSRGBBuffer = false): GPUTextureFormat {\r\n        switch (format) {\r\n            case Constants.TEXTUREFORMAT_DEPTH16:\r\n                return WebGPUConstants.TextureFormat.Depth16Unorm;\r\n            case Constants.TEXTUREFORMAT_DEPTH24:\r\n                return WebGPUConstants.TextureFormat.Depth24Plus;\r\n            case Constants.TEXTUREFORMAT_DEPTH24_STENCIL8:\r\n                return WebGPUConstants.TextureFormat.Depth24PlusStencil8;\r\n            case Constants.TEXTUREFORMAT_DEPTH32_FLOAT:\r\n                return WebGPUConstants.TextureFormat.Depth32Float;\r\n\r\n            case Constants.TEXTUREFORMAT_COMPRESSED_RGBA_BPTC_UNORM:\r\n                return useSRGBBuffer ? WebGPUConstants.TextureFormat.BC7RGBAUnormSRGB : WebGPUConstants.TextureFormat.BC7RGBAUnorm;\r\n            case Constants.TEXTUREFORMAT_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT:\r\n                return WebGPUConstants.TextureFormat.BC6HRGBUFloat;\r\n            case Constants.TEXTUREFORMAT_COMPRESSED_RGB_BPTC_SIGNED_FLOAT:\r\n                return WebGPUConstants.TextureFormat.BC6HRGBFloat;\r\n            case Constants.TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT5:\r\n                return useSRGBBuffer ? WebGPUConstants.TextureFormat.BC3RGBAUnormSRGB : WebGPUConstants.TextureFormat.BC3RGBAUnorm;\r\n            case Constants.TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT3:\r\n                return useSRGBBuffer ? WebGPUConstants.TextureFormat.BC2RGBAUnormSRGB : WebGPUConstants.TextureFormat.BC2RGBAUnorm;\r\n            case Constants.TEXTUREFORMAT_COMPRESSED_RGBA_S3TC_DXT1:\r\n            case Constants.TEXTUREFORMAT_COMPRESSED_RGB_S3TC_DXT1:\r\n                return useSRGBBuffer ? WebGPUConstants.TextureFormat.BC1RGBAUnormSRGB : WebGPUConstants.TextureFormat.BC1RGBAUnorm;\r\n            case Constants.TEXTUREFORMAT_COMPRESSED_RGBA_ASTC_4x4:\r\n                return useSRGBBuffer ? WebGPUConstants.TextureFormat.ASTC4x4UnormSRGB : WebGPUConstants.TextureFormat.ASTC4x4Unorm;\r\n            case Constants.TEXTUREFORMAT_COMPRESSED_RGB_ETC1_WEBGL:\r\n                return useSRGBBuffer ? WebGPUConstants.TextureFormat.ETC2RGB8UnormSRGB : WebGPUConstants.TextureFormat.ETC2RGB8Unorm;\r\n        }\r\n\r\n        switch (type) {\r\n            case Constants.TEXTURETYPE_BYTE:\r\n                switch (format) {\r\n                    case Constants.TEXTUREFORMAT_RED:\r\n                        return WebGPUConstants.TextureFormat.R8Snorm;\r\n                    case Constants.TEXTUREFORMAT_RG:\r\n                        return WebGPUConstants.TextureFormat.RG8Snorm;\r\n                    case Constants.TEXTUREFORMAT_RGB:\r\n                        throw \"RGB format not supported in WebGPU\";\r\n                    case Constants.TEXTUREFORMAT_RED_INTEGER:\r\n                        return WebGPUConstants.TextureFormat.R8Sint;\r\n                    case Constants.TEXTUREFORMAT_RG_INTEGER:\r\n                        return WebGPUConstants.TextureFormat.RG8Sint;\r\n                    case Constants.TEXTUREFORMAT_RGB_INTEGER:\r\n                        throw \"RGB_INTEGER format not supported in WebGPU\";\r\n                    case Constants.TEXTUREFORMAT_RGBA_INTEGER:\r\n                        return WebGPUConstants.TextureFormat.RGBA8Sint;\r\n                    default:\r\n                        return WebGPUConstants.TextureFormat.RGBA8Snorm;\r\n                }\r\n            case Constants.TEXTURETYPE_UNSIGNED_BYTE:\r\n                switch (format) {\r\n                    case Constants.TEXTUREFORMAT_RED:\r\n                        return WebGPUConstants.TextureFormat.R8Unorm;\r\n                    case Constants.TEXTUREFORMAT_RG:\r\n                        return WebGPUConstants.TextureFormat.RG8Unorm;\r\n                    case Constants.TEXTUREFORMAT_RGB:\r\n                        throw \"TEXTUREFORMAT_RGB format not supported in WebGPU\";\r\n                    case Constants.TEXTUREFORMAT_RGBA:\r\n                        return useSRGBBuffer ? WebGPUConstants.TextureFormat.RGBA8UnormSRGB : WebGPUConstants.TextureFormat.RGBA8Unorm;\r\n                    case Constants.TEXTUREFORMAT_BGRA:\r\n                        return useSRGBBuffer ? WebGPUConstants.TextureFormat.BGRA8UnormSRGB : WebGPUConstants.TextureFormat.BGRA8Unorm;\r\n                    case Constants.TEXTUREFORMAT_RED_INTEGER:\r\n                        return WebGPUConstants.TextureFormat.R8Uint;\r\n                    case Constants.TEXTUREFORMAT_RG_INTEGER:\r\n                        return WebGPUConstants.TextureFormat.RG8Uint;\r\n                    case Constants.TEXTUREFORMAT_RGB_INTEGER:\r\n                        throw \"RGB_INTEGER format not supported in WebGPU\";\r\n                    case Constants.TEXTUREFORMAT_RGBA_INTEGER:\r\n                        return WebGPUConstants.TextureFormat.RGBA8Uint;\r\n                    case Constants.TEXTUREFORMAT_ALPHA:\r\n                        throw \"TEXTUREFORMAT_ALPHA format not supported in WebGPU\";\r\n                    case Constants.TEXTUREFORMAT_LUMINANCE:\r\n                        throw \"TEXTUREFORMAT_LUMINANCE format not supported in WebGPU\";\r\n                    case Constants.TEXTUREFORMAT_LUMINANCE_ALPHA:\r\n                        throw \"TEXTUREFORMAT_LUMINANCE_ALPHA format not supported in WebGPU\";\r\n                    default:\r\n                        return WebGPUConstants.TextureFormat.RGBA8Unorm;\r\n                }\r\n            case Constants.TEXTURETYPE_SHORT:\r\n                switch (format) {\r\n                    case Constants.TEXTUREFORMAT_RED_INTEGER:\r\n                        return WebGPUConstants.TextureFormat.R16Sint;\r\n                    case Constants.TEXTUREFORMAT_RG_INTEGER:\r\n                        return WebGPUConstants.TextureFormat.RG16Sint;\r\n                    case Constants.TEXTUREFORMAT_RGB_INTEGER:\r\n                        throw \"TEXTUREFORMAT_RGB_INTEGER format not supported in WebGPU\";\r\n                    case Constants.TEXTUREFORMAT_RGBA_INTEGER:\r\n                        return WebGPUConstants.TextureFormat.RGBA16Sint;\r\n                    default:\r\n                        return WebGPUConstants.TextureFormat.RGBA16Sint;\r\n                }\r\n            case Constants.TEXTURETYPE_UNSIGNED_SHORT:\r\n                switch (format) {\r\n                    case Constants.TEXTUREFORMAT_RED_INTEGER:\r\n                        return WebGPUConstants.TextureFormat.R16Uint;\r\n                    case Constants.TEXTUREFORMAT_RG_INTEGER:\r\n                        return WebGPUConstants.TextureFormat.RG16Uint;\r\n                    case Constants.TEXTUREFORMAT_RGB_INTEGER:\r\n                        throw \"TEXTUREFORMAT_RGB_INTEGER format not supported in WebGPU\";\r\n                    case Constants.TEXTUREFORMAT_RGBA_INTEGER:\r\n                        return WebGPUConstants.TextureFormat.RGBA16Uint;\r\n                    default:\r\n                        return WebGPUConstants.TextureFormat.RGBA16Uint;\r\n                }\r\n            case Constants.TEXTURETYPE_INT:\r\n                switch (format) {\r\n                    case Constants.TEXTUREFORMAT_RED_INTEGER:\r\n                        return WebGPUConstants.TextureFormat.R32Sint;\r\n                    case Constants.TEXTUREFORMAT_RG_INTEGER:\r\n                        return WebGPUConstants.TextureFormat.RG32Sint;\r\n                    case Constants.TEXTUREFORMAT_RGB_INTEGER:\r\n                        throw \"TEXTUREFORMAT_RGB_INTEGER format not supported in WebGPU\";\r\n                    case Constants.TEXTUREFORMAT_RGBA_INTEGER:\r\n                        return WebGPUConstants.TextureFormat.RGBA32Sint;\r\n                    default:\r\n                        return WebGPUConstants.TextureFormat.RGBA32Sint;\r\n                }\r\n            case Constants.TEXTURETYPE_UNSIGNED_INTEGER: // Refers to UNSIGNED_INT\r\n                switch (format) {\r\n                    case Constants.TEXTUREFORMAT_RED_INTEGER:\r\n                        return WebGPUConstants.TextureFormat.R32Uint;\r\n                    case Constants.TEXTUREFORMAT_RG_INTEGER:\r\n                        return WebGPUConstants.TextureFormat.RG32Uint;\r\n                    case Constants.TEXTUREFORMAT_RGB_INTEGER:\r\n                        throw \"TEXTUREFORMAT_RGB_INTEGER format not supported in WebGPU\";\r\n                    case Constants.TEXTUREFORMAT_RGBA_INTEGER:\r\n                        return WebGPUConstants.TextureFormat.RGBA32Uint;\r\n                    default:\r\n                        return WebGPUConstants.TextureFormat.RGBA32Uint;\r\n                }\r\n            case Constants.TEXTURETYPE_FLOAT:\r\n                switch (format) {\r\n                    case Constants.TEXTUREFORMAT_RED:\r\n                        return WebGPUConstants.TextureFormat.R32Float; // By default. Other possibility is R16Float.\r\n                    case Constants.TEXTUREFORMAT_RG:\r\n                        return WebGPUConstants.TextureFormat.RG32Float; // By default. Other possibility is RG16Float.\r\n                    case Constants.TEXTUREFORMAT_RGB:\r\n                        throw \"TEXTUREFORMAT_RGB format not supported in WebGPU\";\r\n                    case Constants.TEXTUREFORMAT_RGBA:\r\n                        return WebGPUConstants.TextureFormat.RGBA32Float; // By default. Other possibility is RGBA16Float.\r\n                    default:\r\n                        return WebGPUConstants.TextureFormat.RGBA32Float;\r\n                }\r\n            case Constants.TEXTURETYPE_HALF_FLOAT:\r\n                switch (format) {\r\n                    case Constants.TEXTUREFORMAT_RED:\r\n                        return WebGPUConstants.TextureFormat.R16Float;\r\n                    case Constants.TEXTUREFORMAT_RG:\r\n                        return WebGPUConstants.TextureFormat.RG16Float;\r\n                    case Constants.TEXTUREFORMAT_RGB:\r\n                        throw \"TEXTUREFORMAT_RGB format not supported in WebGPU\";\r\n                    case Constants.TEXTUREFORMAT_RGBA:\r\n                        return WebGPUConstants.TextureFormat.RGBA16Float;\r\n                    default:\r\n                        return WebGPUConstants.TextureFormat.RGBA16Float;\r\n                }\r\n            case Constants.TEXTURETYPE_UNSIGNED_SHORT_5_6_5:\r\n                throw \"TEXTURETYPE_UNSIGNED_SHORT_5_6_5 format not supported in WebGPU\";\r\n            case Constants.TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV:\r\n                throw \"TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV format not supported in WebGPU\";\r\n            case Constants.TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV:\r\n                throw \"TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV format not supported in WebGPU\";\r\n            case Constants.TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4:\r\n                throw \"TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4 format not supported in WebGPU\";\r\n            case Constants.TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1:\r\n                throw \"TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1 format not supported in WebGPU\";\r\n            case Constants.TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV:\r\n                switch (format) {\r\n                    case Constants.TEXTUREFORMAT_RGBA:\r\n                        return WebGPUConstants.TextureFormat.RGB10A2Unorm;\r\n                    case Constants.TEXTUREFORMAT_RGBA_INTEGER:\r\n                        throw \"TEXTUREFORMAT_RGBA_INTEGER format not supported in WebGPU when type is TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV\";\r\n                    default:\r\n                        return WebGPUConstants.TextureFormat.RGB10A2Unorm;\r\n                }\r\n        }\r\n\r\n        return useSRGBBuffer ? WebGPUConstants.TextureFormat.RGBA8UnormSRGB : WebGPUConstants.TextureFormat.RGBA8Unorm;\r\n    }\r\n\r\n    public static GetNumChannelsFromWebGPUTextureFormat(format: GPUTextureFormat): number {\r\n        switch (format) {\r\n            case WebGPUConstants.TextureFormat.R8Unorm:\r\n            case WebGPUConstants.TextureFormat.R8Snorm:\r\n            case WebGPUConstants.TextureFormat.R8Uint:\r\n            case WebGPUConstants.TextureFormat.R8Sint:\r\n            case WebGPUConstants.TextureFormat.BC4RUnorm:\r\n            case WebGPUConstants.TextureFormat.BC4RSnorm:\r\n            case WebGPUConstants.TextureFormat.R16Uint:\r\n            case WebGPUConstants.TextureFormat.R16Sint:\r\n            case WebGPUConstants.TextureFormat.Depth16Unorm:\r\n            case WebGPUConstants.TextureFormat.R16Float:\r\n            case WebGPUConstants.TextureFormat.R32Uint:\r\n            case WebGPUConstants.TextureFormat.R32Sint:\r\n            case WebGPUConstants.TextureFormat.R32Float:\r\n            case WebGPUConstants.TextureFormat.Depth32Float:\r\n            case WebGPUConstants.TextureFormat.Stencil8:\r\n            case WebGPUConstants.TextureFormat.Depth24Plus:\r\n            case WebGPUConstants.TextureFormat.EACR11Unorm:\r\n            case WebGPUConstants.TextureFormat.EACR11Snorm:\r\n                return 1;\r\n\r\n            case WebGPUConstants.TextureFormat.RG8Unorm:\r\n            case WebGPUConstants.TextureFormat.RG8Snorm:\r\n            case WebGPUConstants.TextureFormat.RG8Uint:\r\n            case WebGPUConstants.TextureFormat.RG8Sint:\r\n            case WebGPUConstants.TextureFormat.Depth24UnormStencil8: // composite format - let's say it's byte...\r\n            case WebGPUConstants.TextureFormat.Depth32FloatStencil8: // composite format - let's say it's byte...\r\n            case WebGPUConstants.TextureFormat.BC5RGUnorm:\r\n            case WebGPUConstants.TextureFormat.BC5RGSnorm:\r\n            case WebGPUConstants.TextureFormat.RG16Uint:\r\n            case WebGPUConstants.TextureFormat.RG16Sint:\r\n            case WebGPUConstants.TextureFormat.RG16Float:\r\n            case WebGPUConstants.TextureFormat.RG32Uint:\r\n            case WebGPUConstants.TextureFormat.RG32Sint:\r\n            case WebGPUConstants.TextureFormat.RG32Float:\r\n            case WebGPUConstants.TextureFormat.Depth24PlusStencil8:\r\n            case WebGPUConstants.TextureFormat.EACRG11Unorm:\r\n            case WebGPUConstants.TextureFormat.EACRG11Snorm:\r\n                return 2;\r\n\r\n            case WebGPUConstants.TextureFormat.RGB9E5UFloat: // composite format - let's say it's byte...\r\n            case WebGPUConstants.TextureFormat.RG11B10UFloat: // composite format - let's say it's byte...\r\n            case WebGPUConstants.TextureFormat.BC6HRGBUFloat:\r\n            case WebGPUConstants.TextureFormat.BC6HRGBFloat:\r\n            case WebGPUConstants.TextureFormat.ETC2RGB8Unorm:\r\n            case WebGPUConstants.TextureFormat.ETC2RGB8UnormSRGB:\r\n                return 3;\r\n\r\n            case WebGPUConstants.TextureFormat.RGBA8Unorm:\r\n            case WebGPUConstants.TextureFormat.RGBA8UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.RGBA8Snorm:\r\n            case WebGPUConstants.TextureFormat.RGBA8Uint:\r\n            case WebGPUConstants.TextureFormat.RGBA8Sint:\r\n            case WebGPUConstants.TextureFormat.BGRA8Unorm:\r\n            case WebGPUConstants.TextureFormat.BGRA8UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.RGB10A2Unorm: // composite format - let's say it's byte...\r\n            case WebGPUConstants.TextureFormat.BC7RGBAUnorm:\r\n            case WebGPUConstants.TextureFormat.BC7RGBAUnormSRGB:\r\n            case WebGPUConstants.TextureFormat.BC3RGBAUnorm:\r\n            case WebGPUConstants.TextureFormat.BC3RGBAUnormSRGB:\r\n            case WebGPUConstants.TextureFormat.BC2RGBAUnorm:\r\n            case WebGPUConstants.TextureFormat.BC2RGBAUnormSRGB:\r\n            case WebGPUConstants.TextureFormat.BC1RGBAUnorm:\r\n            case WebGPUConstants.TextureFormat.BC1RGBAUnormSRGB:\r\n            case WebGPUConstants.TextureFormat.RGBA16Uint:\r\n            case WebGPUConstants.TextureFormat.RGBA16Sint:\r\n            case WebGPUConstants.TextureFormat.RGBA16Float:\r\n            case WebGPUConstants.TextureFormat.RGBA32Uint:\r\n            case WebGPUConstants.TextureFormat.RGBA32Sint:\r\n            case WebGPUConstants.TextureFormat.RGBA32Float:\r\n            case WebGPUConstants.TextureFormat.ETC2RGB8A1Unorm:\r\n            case WebGPUConstants.TextureFormat.ETC2RGB8A1UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ETC2RGBA8Unorm:\r\n            case WebGPUConstants.TextureFormat.ETC2RGBA8UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC4x4Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC4x4UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC5x4Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC5x4UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC5x5Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC5x5UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC6x5Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC6x5UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC6x6Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC6x6UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC8x5Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC8x5UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC8x6Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC8x6UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC8x8Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC8x8UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC10x5Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC10x5UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC10x6Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC10x6UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC10x8Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC10x8UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC10x10Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC10x10UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC12x10Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC12x10UnormSRGB:\r\n            case WebGPUConstants.TextureFormat.ASTC12x12Unorm:\r\n            case WebGPUConstants.TextureFormat.ASTC12x12UnormSRGB:\r\n                return 4;\r\n        }\r\n\r\n        throw `Unknown format ${format}!`;\r\n    }\r\n\r\n    public static HasStencilAspect(format: GPUTextureFormat): boolean {\r\n        switch (format) {\r\n            case WebGPUConstants.TextureFormat.Stencil8:\r\n            case WebGPUConstants.TextureFormat.Depth24UnormStencil8:\r\n            case WebGPUConstants.TextureFormat.Depth32FloatStencil8:\r\n            case WebGPUConstants.TextureFormat.Depth24PlusStencil8:\r\n                return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public invertYPreMultiplyAlpha(\r\n        gpuOrHdwTexture: GPUTexture | WebGPUHardwareTexture,\r\n        width: number,\r\n        height: number,\r\n        format: GPUTextureFormat,\r\n        invertY = false,\r\n        premultiplyAlpha = false,\r\n        faceIndex = 0,\r\n        mipLevel = 0,\r\n        layers = 1,\r\n        ofstX = 0,\r\n        ofstY = 0,\r\n        rectWidth = 0,\r\n        rectHeight = 0,\r\n        commandEncoder?: GPUCommandEncoder,\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        allowGPUOptimization?: boolean\r\n    ): void {\r\n        const useRect = rectWidth !== 0;\r\n        const useOwnCommandEncoder = commandEncoder === undefined;\r\n        const [pipeline, bindGroupLayout] = this._getPipeline(format, useRect ? PipelineType.InvertYPremultiplyAlphaWithOfst : PipelineType.InvertYPremultiplyAlpha, {\r\n            invertY,\r\n            premultiplyAlpha,\r\n        });\r\n\r\n        faceIndex = Math.max(faceIndex, 0);\r\n\r\n        if (useOwnCommandEncoder) {\r\n            commandEncoder = this._device.createCommandEncoder({});\r\n        }\r\n\r\n        commandEncoder!.pushDebugGroup?.(`internal process texture - invertY=${invertY} premultiplyAlpha=${premultiplyAlpha}`);\r\n\r\n        let gpuTexture: Nullable<GPUTexture>;\r\n        if (WebGPUTextureHelper._IsHardwareTexture(gpuOrHdwTexture)) {\r\n            gpuTexture = gpuOrHdwTexture.underlyingResource;\r\n            if (!(invertY && !premultiplyAlpha && layers === 1 && faceIndex === 0)) {\r\n                // we optimize only for the most likely case (invertY=true, premultiplyAlpha=false, layers=1, faceIndex=0) to avoid dealing with big caches\r\n                gpuOrHdwTexture = undefined as any;\r\n            }\r\n        } else {\r\n            gpuTexture = gpuOrHdwTexture;\r\n            gpuOrHdwTexture = undefined as any;\r\n        }\r\n        if (!gpuTexture) {\r\n            return;\r\n        }\r\n\r\n        if (useRect) {\r\n            this._bufferManager.setRawData(this._ubCopyWithOfst, 0, new Float32Array([ofstX, ofstY, rectWidth, rectHeight]), 0, 4 * 4);\r\n        }\r\n\r\n        const webgpuHardwareTexture = gpuOrHdwTexture as Nullable<WebGPUHardwareTexture>;\r\n\r\n        const outputTexture =\r\n            webgpuHardwareTexture?._copyInvertYTempTexture ??\r\n            this.createTexture(\r\n                { width, height, layers: 1 },\r\n                false,\r\n                false,\r\n                false,\r\n                false,\r\n                false,\r\n                format,\r\n                1,\r\n                commandEncoder,\r\n                WebGPUConstants.TextureUsage.CopySrc | WebGPUConstants.TextureUsage.RenderAttachment | WebGPUConstants.TextureUsage.TextureBinding\r\n            );\r\n\r\n        const renderPassDescriptor = webgpuHardwareTexture?._copyInvertYRenderPassDescr ?? {\r\n            colorAttachments: [\r\n                {\r\n                    view: outputTexture.createView({\r\n                        format,\r\n                        dimension: WebGPUConstants.TextureViewDimension.E2d,\r\n                        baseMipLevel: 0,\r\n                        mipLevelCount: 1,\r\n                        arrayLayerCount: 1,\r\n                        baseArrayLayer: 0,\r\n                    }),\r\n                    loadOp: WebGPUConstants.LoadOp.Load,\r\n                    storeOp: WebGPUConstants.StoreOp.Store,\r\n                },\r\n            ],\r\n        };\r\n        const passEncoder = commandEncoder!.beginRenderPass(renderPassDescriptor);\r\n\r\n        let bindGroup = useRect ? webgpuHardwareTexture?._copyInvertYBindGroupWithOfst : webgpuHardwareTexture?._copyInvertYBindGroup;\r\n        if (!bindGroup) {\r\n            const descriptor: GPUBindGroupDescriptor = {\r\n                layout: bindGroupLayout,\r\n                entries: [\r\n                    {\r\n                        binding: 0,\r\n                        resource: gpuTexture.createView({\r\n                            format,\r\n                            dimension: WebGPUConstants.TextureViewDimension.E2d,\r\n                            baseMipLevel: mipLevel,\r\n                            mipLevelCount: 1,\r\n                            arrayLayerCount: layers,\r\n                            baseArrayLayer: faceIndex,\r\n                        }),\r\n                    },\r\n                ],\r\n            };\r\n            if (useRect) {\r\n                descriptor.entries.push({\r\n                    binding: 1,\r\n                    resource: {\r\n                        buffer: this._ubCopyWithOfst,\r\n                    },\r\n                });\r\n            }\r\n            bindGroup = this._device.createBindGroup(descriptor);\r\n        }\r\n\r\n        passEncoder.setPipeline(pipeline);\r\n        passEncoder.setBindGroup(0, bindGroup);\r\n        passEncoder.draw(4, 1, 0, 0);\r\n        passEncoder.end();\r\n\r\n        commandEncoder!.copyTextureToTexture(\r\n            {\r\n                texture: outputTexture,\r\n            },\r\n            {\r\n                texture: gpuTexture,\r\n                mipLevel,\r\n                origin: {\r\n                    x: 0,\r\n                    y: 0,\r\n                    z: faceIndex,\r\n                },\r\n            },\r\n            {\r\n                width,\r\n                height,\r\n                depthOrArrayLayers: 1,\r\n            }\r\n        );\r\n\r\n        if (webgpuHardwareTexture) {\r\n            webgpuHardwareTexture._copyInvertYTempTexture = outputTexture;\r\n            webgpuHardwareTexture._copyInvertYRenderPassDescr = renderPassDescriptor;\r\n            if (useRect) {\r\n                webgpuHardwareTexture._copyInvertYBindGroupWithOfst = bindGroup;\r\n            } else {\r\n                webgpuHardwareTexture._copyInvertYBindGroup = bindGroup;\r\n            }\r\n        } else {\r\n            this._deferredReleaseTextures.push([outputTexture, null]);\r\n        }\r\n\r\n        commandEncoder!.popDebugGroup?.();\r\n\r\n        if (useOwnCommandEncoder) {\r\n            this._device.queue.submit([commandEncoder!.finish()]);\r\n            commandEncoder = null as any;\r\n        }\r\n    }\r\n\r\n    public copyWithInvertY(srcTextureView: GPUTextureView, format: GPUTextureFormat, renderPassDescriptor: GPURenderPassDescriptor, commandEncoder?: GPUCommandEncoder): void {\r\n        const useOwnCommandEncoder = commandEncoder === undefined;\r\n        const [pipeline, bindGroupLayout] = this._getPipeline(format, PipelineType.InvertYPremultiplyAlpha, { invertY: true, premultiplyAlpha: false });\r\n\r\n        if (useOwnCommandEncoder) {\r\n            commandEncoder = this._device.createCommandEncoder({});\r\n        }\r\n\r\n        commandEncoder!.pushDebugGroup?.(`internal copy texture with invertY`);\r\n\r\n        const passEncoder = commandEncoder!.beginRenderPass(renderPassDescriptor);\r\n\r\n        const bindGroup = this._device.createBindGroup({\r\n            layout: bindGroupLayout,\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: srcTextureView,\r\n                },\r\n            ],\r\n        });\r\n\r\n        passEncoder.setPipeline(pipeline);\r\n        passEncoder.setBindGroup(0, bindGroup);\r\n        passEncoder.draw(4, 1, 0, 0);\r\n        passEncoder.end();\r\n\r\n        commandEncoder!.popDebugGroup?.();\r\n\r\n        if (useOwnCommandEncoder) {\r\n            this._device.queue.submit([commandEncoder!.finish()]);\r\n            commandEncoder = null as any;\r\n        }\r\n    }\r\n\r\n    //------------------------------------------------------------------------------\r\n    //                               Creation\r\n    //------------------------------------------------------------------------------\r\n\r\n    public createTexture(\r\n        imageBitmap: ImageBitmap | { width: number; height: number; layers: number },\r\n        hasMipmaps = false,\r\n        generateMipmaps = false,\r\n        invertY = false,\r\n        premultiplyAlpha = false,\r\n        is3D = false,\r\n        format: GPUTextureFormat = WebGPUConstants.TextureFormat.RGBA8Unorm,\r\n        sampleCount = 1,\r\n        commandEncoder?: GPUCommandEncoder,\r\n        usage = -1,\r\n        additionalUsages = 0\r\n    ): GPUTexture {\r\n        if (sampleCount > 1) {\r\n            // WebGPU only supports 1 or 4\r\n            sampleCount = 4;\r\n        }\r\n\r\n        const layerCount = (imageBitmap as any).layers || 1;\r\n        const textureSize = {\r\n            width: imageBitmap.width,\r\n            height: imageBitmap.height,\r\n            depthOrArrayLayers: layerCount,\r\n        };\r\n\r\n        const isCompressedFormat = WebGPUTextureHelper.IsCompressedFormat(format);\r\n        const mipLevelCount = hasMipmaps ? WebGPUTextureHelper.ComputeNumMipmapLevels(imageBitmap.width, imageBitmap.height) : 1;\r\n        const usages = usage >= 0 ? usage : WebGPUConstants.TextureUsage.CopySrc | WebGPUConstants.TextureUsage.CopyDst | WebGPUConstants.TextureUsage.TextureBinding;\r\n        additionalUsages |= hasMipmaps && !isCompressedFormat ? WebGPUConstants.TextureUsage.CopySrc | WebGPUConstants.TextureUsage.RenderAttachment : 0;\r\n\r\n        if (!isCompressedFormat) {\r\n            // we don't know in advance if the texture will be updated with copyExternalImageToTexture (which requires to have those flags), so we need to force the flags all the times\r\n            additionalUsages |= WebGPUConstants.TextureUsage.RenderAttachment | WebGPUConstants.TextureUsage.CopyDst;\r\n        }\r\n\r\n        const gpuTexture = this._device.createTexture({\r\n            size: textureSize,\r\n            dimension: is3D ? WebGPUConstants.TextureDimension.E3d : WebGPUConstants.TextureDimension.E2d,\r\n            format,\r\n            usage: usages | additionalUsages,\r\n            sampleCount,\r\n            mipLevelCount,\r\n        });\r\n\r\n        if (WebGPUTextureHelper.IsImageBitmap(imageBitmap)) {\r\n            this.updateTexture(imageBitmap, gpuTexture, imageBitmap.width, imageBitmap.height, layerCount, format, 0, 0, invertY, premultiplyAlpha, 0, 0);\r\n\r\n            if (hasMipmaps && generateMipmaps) {\r\n                this.generateMipmaps(gpuTexture, format, mipLevelCount, 0, commandEncoder);\r\n            }\r\n        }\r\n\r\n        return gpuTexture;\r\n    }\r\n\r\n    public createCubeTexture(\r\n        imageBitmaps: ImageBitmap[] | { width: number; height: number },\r\n        hasMipmaps = false,\r\n        generateMipmaps = false,\r\n        invertY = false,\r\n        premultiplyAlpha = false,\r\n        format: GPUTextureFormat = WebGPUConstants.TextureFormat.RGBA8Unorm,\r\n        sampleCount = 1,\r\n        commandEncoder?: GPUCommandEncoder,\r\n        usage = -1,\r\n        additionalUsages = 0\r\n    ): GPUTexture {\r\n        if (sampleCount > 1) {\r\n            // WebGPU only supports 1 or 4\r\n            sampleCount = 4;\r\n        }\r\n\r\n        const width = WebGPUTextureHelper.IsImageBitmapArray(imageBitmaps) ? imageBitmaps[0].width : imageBitmaps.width;\r\n        const height = WebGPUTextureHelper.IsImageBitmapArray(imageBitmaps) ? imageBitmaps[0].height : imageBitmaps.height;\r\n\r\n        const isCompressedFormat = WebGPUTextureHelper.IsCompressedFormat(format);\r\n        const mipLevelCount = hasMipmaps ? WebGPUTextureHelper.ComputeNumMipmapLevels(width, height) : 1;\r\n        const usages = usage >= 0 ? usage : WebGPUConstants.TextureUsage.CopySrc | WebGPUConstants.TextureUsage.CopyDst | WebGPUConstants.TextureUsage.TextureBinding;\r\n        additionalUsages |= hasMipmaps && !isCompressedFormat ? WebGPUConstants.TextureUsage.CopySrc | WebGPUConstants.TextureUsage.RenderAttachment : 0;\r\n\r\n        if (!isCompressedFormat) {\r\n            // we don't know in advance if the texture will be updated with copyExternalImageToTexture (which requires to have those flags), so we need to force the flags all the times\r\n            additionalUsages |= WebGPUConstants.TextureUsage.RenderAttachment | WebGPUConstants.TextureUsage.CopyDst;\r\n        }\r\n\r\n        const gpuTexture = this._device.createTexture({\r\n            size: {\r\n                width,\r\n                height,\r\n                depthOrArrayLayers: 6,\r\n            },\r\n            dimension: WebGPUConstants.TextureDimension.E2d,\r\n            format,\r\n            usage: usages | additionalUsages,\r\n            sampleCount,\r\n            mipLevelCount,\r\n        });\r\n\r\n        if (WebGPUTextureHelper.IsImageBitmapArray(imageBitmaps)) {\r\n            this.updateCubeTextures(imageBitmaps, gpuTexture, width, height, format, invertY, premultiplyAlpha, 0, 0);\r\n\r\n            if (hasMipmaps && generateMipmaps) {\r\n                this.generateCubeMipmaps(gpuTexture, format, mipLevelCount, commandEncoder);\r\n            }\r\n        }\r\n\r\n        return gpuTexture;\r\n    }\r\n\r\n    public generateCubeMipmaps(gpuTexture: GPUTexture | WebGPUHardwareTexture, format: GPUTextureFormat, mipLevelCount: number, commandEncoder?: GPUCommandEncoder): void {\r\n        const useOwnCommandEncoder = commandEncoder === undefined;\r\n\r\n        if (useOwnCommandEncoder) {\r\n            commandEncoder = this._device.createCommandEncoder({});\r\n        }\r\n\r\n        commandEncoder!.pushDebugGroup?.(`create cube mipmaps - ${mipLevelCount} levels`);\r\n\r\n        for (let f = 0; f < 6; ++f) {\r\n            this.generateMipmaps(gpuTexture, format, mipLevelCount, f, commandEncoder);\r\n        }\r\n\r\n        commandEncoder!.popDebugGroup?.();\r\n\r\n        if (useOwnCommandEncoder) {\r\n            this._device.queue.submit([commandEncoder!.finish()]);\r\n            commandEncoder = null as any;\r\n        }\r\n    }\r\n\r\n    public generateMipmaps(\r\n        gpuOrHdwTexture: GPUTexture | WebGPUHardwareTexture,\r\n        format: GPUTextureFormat,\r\n        mipLevelCount: number,\r\n        faceIndex = 0,\r\n        commandEncoder?: GPUCommandEncoder\r\n    ): void {\r\n        const useOwnCommandEncoder = commandEncoder === undefined;\r\n        const [pipeline, bindGroupLayout] = this._getPipeline(format);\r\n\r\n        faceIndex = Math.max(faceIndex, 0);\r\n\r\n        if (useOwnCommandEncoder) {\r\n            commandEncoder = this._device.createCommandEncoder({});\r\n        }\r\n\r\n        commandEncoder!.pushDebugGroup?.(`create mipmaps for face #${faceIndex} - ${mipLevelCount} levels`);\r\n\r\n        let gpuTexture: Nullable<GPUTexture>;\r\n        if (WebGPUTextureHelper._IsHardwareTexture(gpuOrHdwTexture)) {\r\n            gpuTexture = gpuOrHdwTexture.underlyingResource;\r\n            gpuOrHdwTexture._mipmapGenRenderPassDescr = gpuOrHdwTexture._mipmapGenRenderPassDescr || [];\r\n            gpuOrHdwTexture._mipmapGenBindGroup = gpuOrHdwTexture._mipmapGenBindGroup || [];\r\n        } else {\r\n            gpuTexture = gpuOrHdwTexture;\r\n            gpuOrHdwTexture = undefined as any;\r\n        }\r\n        if (!gpuTexture) {\r\n            return;\r\n        }\r\n\r\n        const webgpuHardwareTexture = gpuOrHdwTexture as Nullable<WebGPUHardwareTexture>;\r\n        for (let i = 1; i < mipLevelCount; ++i) {\r\n            const renderPassDescriptor = webgpuHardwareTexture?._mipmapGenRenderPassDescr[faceIndex]?.[i - 1] ?? {\r\n                colorAttachments: [\r\n                    {\r\n                        view: gpuTexture.createView({\r\n                            format,\r\n                            dimension: WebGPUConstants.TextureViewDimension.E2d,\r\n                            baseMipLevel: i,\r\n                            mipLevelCount: 1,\r\n                            arrayLayerCount: 1,\r\n                            baseArrayLayer: faceIndex,\r\n                        }),\r\n                        loadOp: WebGPUConstants.LoadOp.Load,\r\n                        storeOp: WebGPUConstants.StoreOp.Store,\r\n                    },\r\n                ],\r\n            };\r\n            if (webgpuHardwareTexture) {\r\n                webgpuHardwareTexture._mipmapGenRenderPassDescr[faceIndex] = webgpuHardwareTexture._mipmapGenRenderPassDescr[faceIndex] || [];\r\n                webgpuHardwareTexture._mipmapGenRenderPassDescr[faceIndex][i - 1] = renderPassDescriptor;\r\n            }\r\n            const passEncoder = commandEncoder!.beginRenderPass(renderPassDescriptor);\r\n\r\n            const bindGroup =\r\n                webgpuHardwareTexture?._mipmapGenBindGroup[faceIndex]?.[i - 1] ??\r\n                this._device.createBindGroup({\r\n                    layout: bindGroupLayout,\r\n                    entries: [\r\n                        {\r\n                            binding: 0,\r\n                            resource: this._mipmapSampler,\r\n                        },\r\n                        {\r\n                            binding: 1,\r\n                            resource: gpuTexture.createView({\r\n                                format,\r\n                                dimension: WebGPUConstants.TextureViewDimension.E2d,\r\n                                baseMipLevel: i - 1,\r\n                                mipLevelCount: 1,\r\n                                arrayLayerCount: 1,\r\n                                baseArrayLayer: faceIndex,\r\n                            }),\r\n                        },\r\n                    ],\r\n                });\r\n            if (webgpuHardwareTexture) {\r\n                webgpuHardwareTexture._mipmapGenBindGroup[faceIndex] = webgpuHardwareTexture._mipmapGenBindGroup[faceIndex] || [];\r\n                webgpuHardwareTexture._mipmapGenBindGroup[faceIndex][i - 1] = bindGroup;\r\n            }\r\n\r\n            passEncoder.setPipeline(pipeline);\r\n            passEncoder.setBindGroup(0, bindGroup);\r\n            passEncoder.draw(4, 1, 0, 0);\r\n            passEncoder.end();\r\n        }\r\n\r\n        commandEncoder!.popDebugGroup?.();\r\n\r\n        if (useOwnCommandEncoder) {\r\n            this._device.queue.submit([commandEncoder!.finish()]);\r\n            commandEncoder = null as any;\r\n        }\r\n    }\r\n\r\n    public createGPUTextureForInternalTexture(texture: InternalTexture, width?: number, height?: number, depth?: number, creationFlags?: number): WebGPUHardwareTexture {\r\n        if (!texture._hardwareTexture) {\r\n            texture._hardwareTexture = new WebGPUHardwareTexture();\r\n        }\r\n\r\n        if (width === undefined) {\r\n            width = texture.width;\r\n        }\r\n        if (height === undefined) {\r\n            height = texture.height;\r\n        }\r\n        if (depth === undefined) {\r\n            depth = texture.depth;\r\n        }\r\n\r\n        const gpuTextureWrapper = texture._hardwareTexture as WebGPUHardwareTexture;\r\n        const isStorageTexture = ((creationFlags ?? 0) & Constants.TEXTURE_CREATIONFLAG_STORAGE) !== 0;\r\n\r\n        gpuTextureWrapper.format = WebGPUTextureHelper.GetWebGPUTextureFormat(texture.type, texture.format, texture._useSRGBBuffer);\r\n\r\n        gpuTextureWrapper.textureUsages =\r\n            texture._source === InternalTextureSource.RenderTarget || texture.source === InternalTextureSource.MultiRenderTarget\r\n                ? WebGPUConstants.TextureUsage.TextureBinding | WebGPUConstants.TextureUsage.CopySrc | WebGPUConstants.TextureUsage.RenderAttachment\r\n                : texture._source === InternalTextureSource.DepthStencil\r\n                ? WebGPUConstants.TextureUsage.TextureBinding | WebGPUConstants.TextureUsage.RenderAttachment\r\n                : -1;\r\n\r\n        gpuTextureWrapper.textureAdditionalUsages = isStorageTexture ? WebGPUConstants.TextureUsage.StorageBinding : 0;\r\n\r\n        const hasMipMaps = texture.generateMipMaps;\r\n        const layerCount = depth || 1;\r\n        let mipmapCount;\r\n        if (texture._maxLodLevel !== null) {\r\n            mipmapCount = texture._maxLodLevel;\r\n        } else {\r\n            mipmapCount = hasMipMaps ? WebGPUTextureHelper.ComputeNumMipmapLevels(width!, height!) : 1;\r\n        }\r\n\r\n        if (texture.isCube) {\r\n            const gpuTexture = this.createCubeTexture(\r\n                { width, height },\r\n                texture.generateMipMaps,\r\n                texture.generateMipMaps,\r\n                texture.invertY,\r\n                false,\r\n                gpuTextureWrapper.format,\r\n                1,\r\n                this._commandEncoderForCreation,\r\n                gpuTextureWrapper.textureUsages,\r\n                gpuTextureWrapper.textureAdditionalUsages\r\n            );\r\n\r\n            gpuTextureWrapper.set(gpuTexture);\r\n            gpuTextureWrapper.createView(\r\n                {\r\n                    format: gpuTextureWrapper.format,\r\n                    dimension: WebGPUConstants.TextureViewDimension.Cube,\r\n                    mipLevelCount: mipmapCount,\r\n                    baseArrayLayer: 0,\r\n                    baseMipLevel: 0,\r\n                    arrayLayerCount: 6,\r\n                    aspect: WebGPUConstants.TextureAspect.All,\r\n                },\r\n                isStorageTexture\r\n            );\r\n        } else {\r\n            const gpuTexture = this.createTexture(\r\n                { width, height, layers: layerCount },\r\n                texture.generateMipMaps,\r\n                texture.generateMipMaps,\r\n                texture.invertY,\r\n                false,\r\n                texture.is3D,\r\n                gpuTextureWrapper.format,\r\n                1,\r\n                this._commandEncoderForCreation,\r\n                gpuTextureWrapper.textureUsages,\r\n                gpuTextureWrapper.textureAdditionalUsages\r\n            );\r\n\r\n            gpuTextureWrapper.set(gpuTexture);\r\n            gpuTextureWrapper.createView(\r\n                {\r\n                    format: gpuTextureWrapper.format,\r\n                    dimension: texture.is2DArray\r\n                        ? WebGPUConstants.TextureViewDimension.E2dArray\r\n                        : texture.is3D\r\n                        ? WebGPUConstants.TextureDimension.E3d\r\n                        : WebGPUConstants.TextureViewDimension.E2d,\r\n                    mipLevelCount: mipmapCount,\r\n                    baseArrayLayer: 0,\r\n                    baseMipLevel: 0,\r\n                    arrayLayerCount: texture.is3D ? 1 : layerCount,\r\n                    aspect: WebGPUConstants.TextureAspect.All,\r\n                },\r\n                isStorageTexture\r\n            );\r\n        }\r\n\r\n        texture.width = texture.baseWidth = width;\r\n        texture.height = texture.baseHeight = height;\r\n        texture.depth = texture.baseDepth = depth;\r\n\r\n        this.createMSAATexture(texture, texture.samples);\r\n\r\n        return gpuTextureWrapper;\r\n    }\r\n\r\n    public createMSAATexture(texture: InternalTexture, samples: number): void {\r\n        const gpuTextureWrapper = texture._hardwareTexture as Nullable<WebGPUHardwareTexture>;\r\n\r\n        if (gpuTextureWrapper?.msaaTexture) {\r\n            this.releaseTexture(gpuTextureWrapper.msaaTexture);\r\n            gpuTextureWrapper.msaaTexture = null;\r\n        }\r\n\r\n        if (!gpuTextureWrapper || (samples ?? 1) <= 1) {\r\n            return;\r\n        }\r\n\r\n        const width = texture.width;\r\n        const height = texture.height;\r\n        const layerCount = texture.depth || 1;\r\n\r\n        if (texture.isCube) {\r\n            const gpuMSAATexture = this.createCubeTexture(\r\n                { width, height },\r\n                false,\r\n                false,\r\n                texture.invertY,\r\n                false,\r\n                gpuTextureWrapper.format,\r\n                samples,\r\n                this._commandEncoderForCreation,\r\n                gpuTextureWrapper.textureUsages,\r\n                gpuTextureWrapper.textureAdditionalUsages\r\n            );\r\n            gpuTextureWrapper.msaaTexture = gpuMSAATexture;\r\n        } else {\r\n            const gpuMSAATexture = this.createTexture(\r\n                { width, height, layers: layerCount },\r\n                false,\r\n                false,\r\n                texture.invertY,\r\n                false,\r\n                texture.is3D,\r\n                gpuTextureWrapper.format,\r\n                samples,\r\n                this._commandEncoderForCreation,\r\n                gpuTextureWrapper.textureUsages,\r\n                gpuTextureWrapper.textureAdditionalUsages\r\n            );\r\n            gpuTextureWrapper.msaaTexture = gpuMSAATexture;\r\n        }\r\n    }\r\n\r\n    //------------------------------------------------------------------------------\r\n    //                                  Update\r\n    //------------------------------------------------------------------------------\r\n\r\n    public updateCubeTextures(\r\n        imageBitmaps: ImageBitmap[] | Uint8Array[],\r\n        gpuTexture: GPUTexture,\r\n        width: number,\r\n        height: number,\r\n        format: GPUTextureFormat,\r\n        invertY = false,\r\n        premultiplyAlpha = false,\r\n        offsetX = 0,\r\n        offsetY = 0\r\n    ): void {\r\n        const faces = [0, 3, 1, 4, 2, 5];\r\n\r\n        for (let f = 0; f < faces.length; ++f) {\r\n            const imageBitmap = imageBitmaps[faces[f]];\r\n\r\n            this.updateTexture(imageBitmap, gpuTexture, width, height, 1, format, f, 0, invertY, premultiplyAlpha, offsetX, offsetY);\r\n        }\r\n    }\r\n\r\n    // TODO WEBGPU handle data source not being in the same format than the destination texture?\r\n    public updateTexture(\r\n        imageBitmap: ImageBitmap | Uint8Array | HTMLCanvasElement | OffscreenCanvas,\r\n        texture: GPUTexture | InternalTexture,\r\n        width: number,\r\n        height: number,\r\n        layers: number,\r\n        format: GPUTextureFormat,\r\n        faceIndex: number = 0,\r\n        mipLevel: number = 0,\r\n        invertY = false,\r\n        premultiplyAlpha = false,\r\n        offsetX = 0,\r\n        offsetY = 0,\r\n        allowGPUOptimization?: boolean\r\n    ): void {\r\n        const gpuTexture = WebGPUTextureHelper._IsInternalTexture(texture) ? (texture._hardwareTexture as WebGPUHardwareTexture).underlyingResource! : texture;\r\n        const blockInformation = WebGPUTextureHelper._GetBlockInformationFromFormat(format);\r\n        const gpuOrHdwTexture = WebGPUTextureHelper._IsInternalTexture(texture) ? (texture._hardwareTexture as WebGPUHardwareTexture) : texture;\r\n\r\n        const textureCopyView: GPUImageCopyTextureTagged = {\r\n            texture: gpuTexture,\r\n            origin: {\r\n                x: offsetX,\r\n                y: offsetY,\r\n                z: Math.max(faceIndex, 0),\r\n            },\r\n            mipLevel: mipLevel,\r\n            premultipliedAlpha: premultiplyAlpha,\r\n        };\r\n\r\n        const textureExtent = {\r\n            width: Math.ceil(width / blockInformation.width) * blockInformation.width,\r\n            height: Math.ceil(height / blockInformation.height) * blockInformation.height,\r\n            depthOrArrayLayers: layers || 1,\r\n        };\r\n\r\n        if ((imageBitmap as Uint8Array).byteLength !== undefined) {\r\n            imageBitmap = imageBitmap as Uint8Array;\r\n\r\n            const bytesPerRow = Math.ceil(width / blockInformation.width) * blockInformation.length;\r\n            const aligned = Math.ceil(bytesPerRow / 256) * 256 === bytesPerRow;\r\n\r\n            if (aligned) {\r\n                const commandEncoder = this._device.createCommandEncoder({});\r\n\r\n                const buffer = this._bufferManager.createRawBuffer(imageBitmap.byteLength, WebGPUConstants.BufferUsage.MapWrite | WebGPUConstants.BufferUsage.CopySrc, true);\r\n\r\n                const arrayBuffer = buffer.getMappedRange();\r\n\r\n                new Uint8Array(arrayBuffer).set(imageBitmap);\r\n\r\n                buffer.unmap();\r\n\r\n                commandEncoder!.copyBufferToTexture(\r\n                    {\r\n                        buffer: buffer,\r\n                        offset: 0,\r\n                        bytesPerRow,\r\n                        rowsPerImage: height,\r\n                    },\r\n                    textureCopyView,\r\n                    textureExtent\r\n                );\r\n\r\n                this._device.queue.submit([commandEncoder!.finish()]);\r\n\r\n                this._bufferManager.releaseBuffer(buffer);\r\n            } else {\r\n                this._device.queue.writeTexture(\r\n                    textureCopyView,\r\n                    imageBitmap,\r\n                    {\r\n                        offset: 0,\r\n                        bytesPerRow,\r\n                        rowsPerImage: height,\r\n                    },\r\n                    textureExtent\r\n                );\r\n            }\r\n\r\n            if (invertY || premultiplyAlpha) {\r\n                if (WebGPUTextureHelper._IsInternalTexture(texture)) {\r\n                    const dontUseRect = offsetX === 0 && offsetY === 0 && width === texture.width && height === texture.height;\r\n                    this.invertYPreMultiplyAlpha(\r\n                        gpuOrHdwTexture,\r\n                        texture.width,\r\n                        texture.height,\r\n                        format,\r\n                        invertY,\r\n                        premultiplyAlpha,\r\n                        faceIndex,\r\n                        mipLevel,\r\n                        layers || 1,\r\n                        offsetX,\r\n                        offsetY,\r\n                        dontUseRect ? 0 : width,\r\n                        dontUseRect ? 0 : height,\r\n                        undefined,\r\n                        allowGPUOptimization\r\n                    );\r\n                } else {\r\n                    // we should never take this code path\r\n                    throw \"updateTexture: Can't process the texture data because a GPUTexture was provided instead of an InternalTexture!\";\r\n                }\r\n            }\r\n        } else {\r\n            imageBitmap = imageBitmap as ImageBitmap | HTMLCanvasElement | OffscreenCanvas;\r\n\r\n            if (invertY) {\r\n                textureCopyView.premultipliedAlpha = false; // we are going to handle premultiplyAlpha ourselves\r\n\r\n                // we must preprocess the image\r\n                if (WebGPUTextureHelper._IsInternalTexture(texture) && offsetX === 0 && offsetY === 0 && width === texture.width && height === texture.height) {\r\n                    // optimization when the source image is the same size than the destination texture and offsets X/Y == 0:\r\n                    // we simply copy the source to the destination and we apply the preprocessing on the destination\r\n                    this._device.queue.copyExternalImageToTexture({ source: imageBitmap }, textureCopyView, textureExtent);\r\n\r\n                    this.invertYPreMultiplyAlpha(\r\n                        gpuOrHdwTexture,\r\n                        width,\r\n                        height,\r\n                        format,\r\n                        invertY,\r\n                        premultiplyAlpha,\r\n                        faceIndex,\r\n                        mipLevel,\r\n                        layers || 1,\r\n                        0,\r\n                        0,\r\n                        0,\r\n                        0,\r\n                        undefined,\r\n                        allowGPUOptimization\r\n                    );\r\n                } else {\r\n                    // we must apply the preprocessing on the source image before copying it into the destination texture\r\n                    const commandEncoder = this._device.createCommandEncoder({});\r\n\r\n                    // create a temp texture and copy the image to it\r\n                    const srcTexture = this.createTexture(\r\n                        { width, height, layers: 1 },\r\n                        false,\r\n                        false,\r\n                        false,\r\n                        false,\r\n                        false,\r\n                        format,\r\n                        1,\r\n                        commandEncoder,\r\n                        WebGPUConstants.TextureUsage.CopySrc | WebGPUConstants.TextureUsage.TextureBinding\r\n                    );\r\n\r\n                    this._deferredReleaseTextures.push([srcTexture, null]);\r\n\r\n                    textureExtent.depthOrArrayLayers = 1;\r\n                    this._device.queue.copyExternalImageToTexture({ source: imageBitmap }, { texture: srcTexture }, textureExtent);\r\n                    textureExtent.depthOrArrayLayers = layers || 1;\r\n\r\n                    // apply the preprocessing to this temp texture\r\n                    this.invertYPreMultiplyAlpha(\r\n                        srcTexture,\r\n                        width,\r\n                        height,\r\n                        format,\r\n                        invertY,\r\n                        premultiplyAlpha,\r\n                        faceIndex,\r\n                        mipLevel,\r\n                        layers || 1,\r\n                        0,\r\n                        0,\r\n                        0,\r\n                        0,\r\n                        commandEncoder,\r\n                        allowGPUOptimization\r\n                    );\r\n\r\n                    // copy the temp texture to the destination texture\r\n                    commandEncoder.copyTextureToTexture({ texture: srcTexture }, textureCopyView, textureExtent);\r\n\r\n                    this._device.queue.submit([commandEncoder!.finish()]);\r\n                }\r\n            } else {\r\n                // no preprocessing: direct copy to destination texture\r\n                this._device.queue.copyExternalImageToTexture({ source: imageBitmap }, textureCopyView, textureExtent);\r\n            }\r\n        }\r\n    }\r\n\r\n    public readPixels(\r\n        texture: GPUTexture,\r\n        x: number,\r\n        y: number,\r\n        width: number,\r\n        height: number,\r\n        format: GPUTextureFormat,\r\n        faceIndex: number = 0,\r\n        mipLevel: number = 0,\r\n        buffer: Nullable<ArrayBufferView> = null,\r\n        noDataConversion = false\r\n    ): Promise<ArrayBufferView> {\r\n        const blockInformation = WebGPUTextureHelper._GetBlockInformationFromFormat(format);\r\n\r\n        const bytesPerRow = Math.ceil(width / blockInformation.width) * blockInformation.length;\r\n\r\n        const bytesPerRowAligned = Math.ceil(bytesPerRow / 256) * 256;\r\n\r\n        const size = bytesPerRowAligned * height;\r\n\r\n        const gpuBuffer = this._bufferManager.createRawBuffer(size, WebGPUConstants.BufferUsage.MapRead | WebGPUConstants.BufferUsage.CopyDst);\r\n\r\n        const commandEncoder = this._device.createCommandEncoder({});\r\n\r\n        commandEncoder.copyTextureToBuffer(\r\n            {\r\n                texture,\r\n                mipLevel,\r\n                origin: {\r\n                    x,\r\n                    y,\r\n                    z: Math.max(faceIndex, 0),\r\n                },\r\n            },\r\n            {\r\n                buffer: gpuBuffer,\r\n                offset: 0,\r\n                bytesPerRow: bytesPerRowAligned,\r\n            },\r\n            {\r\n                width,\r\n                height,\r\n                depthOrArrayLayers: 1,\r\n            }\r\n        );\r\n\r\n        this._device.queue.submit([commandEncoder!.finish()]);\r\n\r\n        return this._bufferManager.readDataFromBuffer(\r\n            gpuBuffer,\r\n            size,\r\n            width,\r\n            height,\r\n            bytesPerRow,\r\n            bytesPerRowAligned,\r\n            WebGPUTextureHelper._GetTextureTypeFromFormat(format),\r\n            0,\r\n            buffer,\r\n            true,\r\n            noDataConversion\r\n        );\r\n    }\r\n\r\n    //------------------------------------------------------------------------------\r\n    //                              Dispose\r\n    //------------------------------------------------------------------------------\r\n\r\n    public releaseTexture(texture: InternalTexture | GPUTexture): void {\r\n        if (WebGPUTextureHelper._IsInternalTexture(texture)) {\r\n            const hardwareTexture = texture._hardwareTexture;\r\n            const irradianceTexture = texture._irradianceTexture;\r\n\r\n            // We can't destroy the objects just now because they could be used in the current frame - we delay the destroying after the end of the frame\r\n            this._deferredReleaseTextures.push([hardwareTexture, irradianceTexture]);\r\n        } else {\r\n            this._deferredReleaseTextures.push([texture, null]);\r\n        }\r\n    }\r\n\r\n    public destroyDeferredTextures(): void {\r\n        for (let i = 0; i < this._deferredReleaseTextures.length; ++i) {\r\n            const [hardwareTexture, irradianceTexture] = this._deferredReleaseTextures[i];\r\n\r\n            if (hardwareTexture) {\r\n                if (WebGPUTextureHelper._IsHardwareTexture(hardwareTexture)) {\r\n                    hardwareTexture.release();\r\n                } else {\r\n                    hardwareTexture.destroy();\r\n                }\r\n            }\r\n            irradianceTexture?.dispose();\r\n        }\r\n\r\n        this._deferredReleaseTextures.length = 0;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}