{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { __extends } from \"tslib\";\nimport { Texture } from \"../../../Materials/Textures/texture.js\";\nimport { DynamicTexture } from \"../../../Materials/Textures/dynamicTexture.js\";\nimport { PostProcess } from \"../../../PostProcesses/postProcess.js\";\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline.js\";\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect.js\";\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent.js\";\nimport \"../../../Shaders/chromaticAberration.fragment.js\";\nimport \"../../../Shaders/lensHighlights.fragment.js\";\nimport \"../../../Shaders/depthOfField.fragment.js\";\n/**\n * BABYLON.JS Chromatic Aberration GLSL Shader\n * Author: Olivier Guyot\n * Separates very slightly R, G and B colors on the edges of the screen\n * Inspired by Francois Tarlier & Martins Upitis\n */\n\nvar LensRenderingPipeline =\n/** @class */\nfunction (_super) {\n  __extends(LensRenderingPipeline, _super);\n  /**\n   * @constructor\n   *\n   * Effect parameters are as follow:\n   * {\n   *      chromatic_aberration: number;       // from 0 to x (1 for realism)\n   *      edge_blur: number;                  // from 0 to x (1 for realism)\n   *      distortion: number;                 // from 0 to x (1 for realism), note that this will effect the pointer position precision\n   *      grain_amount: number;               // from 0 to 1\n   *      grain_texture: BABYLON.Texture;     // texture to use for grain effect; if unset, use random B&W noise\n   *      dof_focus_distance: number;         // depth-of-field: focus distance; unset to disable (disabled by default)\n   *      dof_aperture: number;               // depth-of-field: focus blur bias (default: 1)\n   *      dof_darken: number;                 // depth-of-field: darken that which is out of focus (from 0 to 1, disabled by default)\n   *      dof_pentagon: boolean;              // depth-of-field: makes a pentagon-like \"bokeh\" effect\n   *      dof_gain: number;                   // depth-of-field: highlights gain; unset to disable (disabled by default)\n   *      dof_threshold: number;              // depth-of-field: highlights threshold (default: 1)\n   *      blur_noise: boolean;                // add a little bit of noise to the blur (default: true)\n   * }\n   * Note: if an effect parameter is unset, effect is disabled\n   *\n   * @param name The rendering pipeline name\n   * @param parameters - An object containing all parameters (see above)\n   * @param scene The scene linked to this pipeline\n   * @param ratio The size of the postprocesses (0.5 means that your postprocess will have a width = canvas.width 0.5 and a height = canvas.height 0.5)\n   * @param cameras The array of cameras that the rendering pipeline will be attached to\n   */\n\n\n  function LensRenderingPipeline(name, parameters, scene, ratio, cameras) {\n    if (ratio === void 0) {\n      ratio = 1.0;\n    }\n\n    var _this = _super.call(this, scene.getEngine(), name) || this; // Lens effects can be of the following:\n    // - chromatic aberration (slight shift of RGB colors)\n    // - blur on the edge of the lens\n    // - lens distortion\n    // - depth-of-field blur & highlights enhancing\n    // - depth-of-field 'bokeh' effect (shapes appearing in blurred areas)\n    // - grain effect (noise or custom texture)\n    // Two additional texture samplers are needed:\n    // - depth map (for depth-of-field)\n    // - grain texture\n\n    /**\n     * @ignore\n     * The chromatic aberration PostProcess id in the pipeline\n     */\n\n\n    _this.LensChromaticAberrationEffect = \"LensChromaticAberrationEffect\";\n    /**\n     * @ignore\n     * The highlights enhancing PostProcess id in the pipeline\n     */\n\n    _this.HighlightsEnhancingEffect = \"HighlightsEnhancingEffect\";\n    /**\n     * @ignore\n     * The depth-of-field PostProcess id in the pipeline\n     */\n\n    _this.LensDepthOfFieldEffect = \"LensDepthOfFieldEffect\";\n    _this._pentagonBokehIsEnabled = false;\n    _this._scene = scene; // Fetch texture samplers\n\n    _this._depthTexture = scene.enableDepthRenderer().getDepthMap(); // Force depth renderer \"on\"\n\n    if (parameters.grain_texture) {\n      _this._grainTexture = parameters.grain_texture;\n    } else {\n      _this._createGrainTexture();\n    } // save parameters\n\n\n    _this._edgeBlur = parameters.edge_blur ? parameters.edge_blur : 0;\n    _this._grainAmount = parameters.grain_amount ? parameters.grain_amount : 0;\n    _this._chromaticAberration = parameters.chromatic_aberration ? parameters.chromatic_aberration : 0;\n    _this._distortion = parameters.distortion ? parameters.distortion : 0;\n    _this._highlightsGain = parameters.dof_gain !== undefined ? parameters.dof_gain : -1;\n    _this._highlightsThreshold = parameters.dof_threshold ? parameters.dof_threshold : 1;\n    _this._dofDistance = parameters.dof_focus_distance !== undefined ? parameters.dof_focus_distance : -1;\n    _this._dofAperture = parameters.dof_aperture ? parameters.dof_aperture : 1;\n    _this._dofDarken = parameters.dof_darken ? parameters.dof_darken : 0;\n    _this._dofPentagon = parameters.dof_pentagon !== undefined ? parameters.dof_pentagon : true;\n    _this._blurNoise = parameters.blur_noise !== undefined ? parameters.blur_noise : true; // Create effects\n\n    _this._createChromaticAberrationPostProcess(ratio);\n\n    _this._createHighlightsPostProcess(ratio);\n\n    _this._createDepthOfFieldPostProcess(ratio / 4); // Set up pipeline\n\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.LensChromaticAberrationEffect, function () {\n      return _this._chromaticAberrationPostProcess;\n    }, true));\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.HighlightsEnhancingEffect, function () {\n      return _this._highlightsPostProcess;\n    }, true));\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.LensDepthOfFieldEffect, function () {\n      return _this._depthOfFieldPostProcess;\n    }, true));\n\n    if (_this._highlightsGain === -1) {\n      _this._disableEffect(_this.HighlightsEnhancingEffect, null);\n    } // Finish\n\n\n    scene.postProcessRenderPipelineManager.addPipeline(_this);\n\n    if (cameras) {\n      scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\n    }\n\n    return _this;\n  }\n  /**\n   * Get the class name\n   * @returns \"LensRenderingPipeline\"\n   */\n\n\n  LensRenderingPipeline.prototype.getClassName = function () {\n    return \"LensRenderingPipeline\";\n  };\n\n  Object.defineProperty(LensRenderingPipeline.prototype, \"scene\", {\n    // Properties\n\n    /**\n     * Gets associated scene\n     */\n    get: function get() {\n      return this._scene;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"edgeBlur\", {\n    /**\n     * Gets or sets the edge blur\n     */\n    get: function get() {\n      return this._edgeBlur;\n    },\n    set: function set(value) {\n      this.setEdgeBlur(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"grainAmount\", {\n    /**\n     * Gets or sets the grain amount\n     */\n    get: function get() {\n      return this._grainAmount;\n    },\n    set: function set(value) {\n      this.setGrainAmount(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"chromaticAberration\", {\n    /**\n     * Gets or sets the chromatic aberration amount\n     */\n    get: function get() {\n      return this._chromaticAberration;\n    },\n    set: function set(value) {\n      this.setChromaticAberration(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"dofAperture\", {\n    /**\n     * Gets or sets the depth of field aperture\n     */\n    get: function get() {\n      return this._dofAperture;\n    },\n    set: function set(value) {\n      this.setAperture(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"edgeDistortion\", {\n    /**\n     * Gets or sets the edge distortion\n     */\n    get: function get() {\n      return this._distortion;\n    },\n    set: function set(value) {\n      this.setEdgeDistortion(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"dofDistortion\", {\n    /**\n     * Gets or sets the depth of field distortion\n     */\n    get: function get() {\n      return this._dofDistance;\n    },\n    set: function set(value) {\n      this.setFocusDistance(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"darkenOutOfFocus\", {\n    /**\n     * Gets or sets the darken out of focus amount\n     */\n    get: function get() {\n      return this._dofDarken;\n    },\n    set: function set(value) {\n      this.setDarkenOutOfFocus(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"blurNoise\", {\n    /**\n     * Gets or sets a boolean indicating if blur noise is enabled\n     */\n    get: function get() {\n      return this._blurNoise;\n    },\n    set: function set(value) {\n      this._blurNoise = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"pentagonBokeh\", {\n    /**\n     * Gets or sets a boolean indicating if pentagon bokeh is enabled\n     */\n    get: function get() {\n      return this._pentagonBokehIsEnabled;\n    },\n    set: function set(value) {\n      if (value) {\n        this.enablePentagonBokeh();\n      } else {\n        this.disablePentagonBokeh();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"highlightsGain\", {\n    /**\n     * Gets or sets the highlight grain amount\n     */\n    get: function get() {\n      return this._highlightsGain;\n    },\n    set: function set(value) {\n      this.setHighlightsGain(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"highlightsThreshold\", {\n    /**\n     * Gets or sets the highlight threshold\n     */\n    get: function get() {\n      return this._highlightsThreshold;\n    },\n    set: function set(value) {\n      this.setHighlightsThreshold(value);\n    },\n    enumerable: false,\n    configurable: true\n  }); // public methods (self explanatory)\n\n  /**\n   * Sets the amount of blur at the edges\n   * @param amount blur amount\n   */\n\n  LensRenderingPipeline.prototype.setEdgeBlur = function (amount) {\n    this._edgeBlur = amount;\n  };\n  /**\n   * Sets edge blur to 0\n   */\n\n\n  LensRenderingPipeline.prototype.disableEdgeBlur = function () {\n    this._edgeBlur = 0;\n  };\n  /**\n   * Sets the amount of grain\n   * @param amount Amount of grain\n   */\n\n\n  LensRenderingPipeline.prototype.setGrainAmount = function (amount) {\n    this._grainAmount = amount;\n  };\n  /**\n   * Set grain amount to 0\n   */\n\n\n  LensRenderingPipeline.prototype.disableGrain = function () {\n    this._grainAmount = 0;\n  };\n  /**\n   * Sets the chromatic aberration amount\n   * @param amount amount of chromatic aberration\n   */\n\n\n  LensRenderingPipeline.prototype.setChromaticAberration = function (amount) {\n    this._chromaticAberration = amount;\n  };\n  /**\n   * Sets chromatic aberration amount to 0\n   */\n\n\n  LensRenderingPipeline.prototype.disableChromaticAberration = function () {\n    this._chromaticAberration = 0;\n  };\n  /**\n   * Sets the EdgeDistortion amount\n   * @param amount amount of EdgeDistortion\n   */\n\n\n  LensRenderingPipeline.prototype.setEdgeDistortion = function (amount) {\n    this._distortion = amount;\n  };\n  /**\n   * Sets edge distortion to 0\n   */\n\n\n  LensRenderingPipeline.prototype.disableEdgeDistortion = function () {\n    this._distortion = 0;\n  };\n  /**\n   * Sets the FocusDistance amount\n   * @param amount amount of FocusDistance\n   */\n\n\n  LensRenderingPipeline.prototype.setFocusDistance = function (amount) {\n    this._dofDistance = amount;\n  };\n  /**\n   * Disables depth of field\n   */\n\n\n  LensRenderingPipeline.prototype.disableDepthOfField = function () {\n    this._dofDistance = -1;\n  };\n  /**\n   * Sets the Aperture amount\n   * @param amount amount of Aperture\n   */\n\n\n  LensRenderingPipeline.prototype.setAperture = function (amount) {\n    this._dofAperture = amount;\n  };\n  /**\n   * Sets the DarkenOutOfFocus amount\n   * @param amount amount of DarkenOutOfFocus\n   */\n\n\n  LensRenderingPipeline.prototype.setDarkenOutOfFocus = function (amount) {\n    this._dofDarken = amount;\n  };\n  /**\n   * Creates a pentagon bokeh effect\n   */\n\n\n  LensRenderingPipeline.prototype.enablePentagonBokeh = function () {\n    this._highlightsPostProcess.updateEffect(\"#define PENTAGON\\n\");\n\n    this._pentagonBokehIsEnabled = true;\n  };\n  /**\n   * Disables the pentagon bokeh effect\n   */\n\n\n  LensRenderingPipeline.prototype.disablePentagonBokeh = function () {\n    this._pentagonBokehIsEnabled = false;\n\n    this._highlightsPostProcess.updateEffect();\n  };\n  /**\n   * Enables noise blur\n   */\n\n\n  LensRenderingPipeline.prototype.enableNoiseBlur = function () {\n    this._blurNoise = true;\n  };\n  /**\n   * Disables noise blur\n   */\n\n\n  LensRenderingPipeline.prototype.disableNoiseBlur = function () {\n    this._blurNoise = false;\n  };\n  /**\n   * Sets the HighlightsGain amount\n   * @param amount amount of HighlightsGain\n   */\n\n\n  LensRenderingPipeline.prototype.setHighlightsGain = function (amount) {\n    this._highlightsGain = amount;\n  };\n  /**\n   * Sets the HighlightsThreshold amount\n   * @param amount amount of HighlightsThreshold\n   */\n\n\n  LensRenderingPipeline.prototype.setHighlightsThreshold = function (amount) {\n    if (this._highlightsGain === -1) {\n      this._highlightsGain = 1.0;\n    }\n\n    this._highlightsThreshold = amount;\n  };\n  /**\n   * Disables highlights\n   */\n\n\n  LensRenderingPipeline.prototype.disableHighlights = function () {\n    this._highlightsGain = -1;\n  };\n  /**\n   * Removes the internal pipeline assets and detaches the pipeline from the scene cameras\n   * @param disableDepthRender If the scene's depth rendering should be disabled (default: false)\n   */\n\n\n  LensRenderingPipeline.prototype.dispose = function (disableDepthRender) {\n    if (disableDepthRender === void 0) {\n      disableDepthRender = false;\n    }\n\n    this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\n\n    this._chromaticAberrationPostProcess = null;\n    this._highlightsPostProcess = null;\n    this._depthOfFieldPostProcess = null;\n\n    this._grainTexture.dispose();\n\n    if (disableDepthRender) {\n      this._scene.disableDepthRenderer();\n    }\n  }; // colors shifting and distortion\n\n\n  LensRenderingPipeline.prototype._createChromaticAberrationPostProcess = function (ratio) {\n    var _this = this;\n\n    this._chromaticAberrationPostProcess = new PostProcess(\"LensChromaticAberration\", \"chromaticAberration\", [\"chromatic_aberration\", \"screen_width\", \"screen_height\", \"direction\", \"radialIntensity\", \"centerPosition\"], // uniforms\n    [], // samplers\n    ratio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false);\n\n    this._chromaticAberrationPostProcess.onApply = function (effect) {\n      effect.setFloat(\"chromatic_aberration\", _this._chromaticAberration);\n      effect.setFloat(\"screen_width\", _this._scene.getEngine().getRenderWidth());\n      effect.setFloat(\"screen_height\", _this._scene.getEngine().getRenderHeight());\n      effect.setFloat(\"radialIntensity\", 1);\n      effect.setFloat2(\"direction\", 17, 17);\n      effect.setFloat2(\"centerPosition\", 0.5, 0.5);\n    };\n  }; // highlights enhancing\n\n\n  LensRenderingPipeline.prototype._createHighlightsPostProcess = function (ratio) {\n    var _this = this;\n\n    this._highlightsPostProcess = new PostProcess(\"LensHighlights\", \"lensHighlights\", [\"gain\", \"threshold\", \"screen_width\", \"screen_height\"], // uniforms\n    [], // samplers\n    ratio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, this._dofPentagon ? \"#define PENTAGON\\n\" : \"\");\n    this._highlightsPostProcess.externalTextureSamplerBinding = true;\n\n    this._highlightsPostProcess.onApply = function (effect) {\n      effect.setFloat(\"gain\", _this._highlightsGain);\n      effect.setFloat(\"threshold\", _this._highlightsThreshold);\n      effect.setTextureFromPostProcess(\"textureSampler\", _this._chromaticAberrationPostProcess);\n      effect.setFloat(\"screen_width\", _this._scene.getEngine().getRenderWidth());\n      effect.setFloat(\"screen_height\", _this._scene.getEngine().getRenderHeight());\n    };\n  }; // colors shifting and distortion\n\n\n  LensRenderingPipeline.prototype._createDepthOfFieldPostProcess = function (ratio) {\n    var _this = this;\n\n    this._depthOfFieldPostProcess = new PostProcess(\"LensDepthOfField\", \"depthOfField\", [\"grain_amount\", \"blur_noise\", \"screen_width\", \"screen_height\", \"distortion\", \"dof_enabled\", \"screen_distance\", \"aperture\", \"darken\", \"edge_blur\", \"highlights\", \"near\", \"far\"], [\"depthSampler\", \"grainSampler\", \"highlightsSampler\"], ratio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false);\n    this._depthOfFieldPostProcess.externalTextureSamplerBinding = true;\n\n    this._depthOfFieldPostProcess.onApply = function (effect) {\n      effect.setTexture(\"depthSampler\", _this._depthTexture);\n      effect.setTexture(\"grainSampler\", _this._grainTexture);\n      effect.setTextureFromPostProcess(\"textureSampler\", _this._highlightsPostProcess);\n      effect.setTextureFromPostProcess(\"highlightsSampler\", _this._depthOfFieldPostProcess);\n      effect.setFloat(\"grain_amount\", _this._grainAmount);\n      effect.setBool(\"blur_noise\", _this._blurNoise);\n      effect.setFloat(\"screen_width\", _this._scene.getEngine().getRenderWidth());\n      effect.setFloat(\"screen_height\", _this._scene.getEngine().getRenderHeight());\n      effect.setFloat(\"distortion\", _this._distortion);\n      effect.setBool(\"dof_enabled\", _this._dofDistance !== -1);\n      effect.setFloat(\"screen_distance\", 1.0 / (0.1 - 1.0 / _this._dofDistance));\n      effect.setFloat(\"aperture\", _this._dofAperture);\n      effect.setFloat(\"darken\", _this._dofDarken);\n      effect.setFloat(\"edge_blur\", _this._edgeBlur);\n      effect.setBool(\"highlights\", _this._highlightsGain !== -1);\n\n      if (_this._scene.activeCamera) {\n        effect.setFloat(\"near\", _this._scene.activeCamera.minZ);\n        effect.setFloat(\"far\", _this._scene.activeCamera.maxZ);\n      }\n    };\n  }; // creates a black and white random noise texture, 512x512\n\n\n  LensRenderingPipeline.prototype._createGrainTexture = function () {\n    var size = 512;\n    this._grainTexture = new DynamicTexture(\"LensNoiseTexture\", size, this._scene, false, Texture.BILINEAR_SAMPLINGMODE);\n    this._grainTexture.wrapU = Texture.WRAP_ADDRESSMODE;\n    this._grainTexture.wrapV = Texture.WRAP_ADDRESSMODE;\n\n    var context = this._grainTexture.getContext();\n\n    var rand = function rand(min, max) {\n      return Math.random() * (max - min) + min;\n    };\n\n    var value;\n\n    for (var x = 0; x < size; x++) {\n      for (var y = 0; y < size; y++) {\n        value = Math.floor(rand(0.42, 0.58) * 255);\n        context.fillStyle = \"rgb(\" + value + \", \" + value + \", \" + value + \")\";\n        context.fillRect(x, y, 1, 1);\n      }\n    }\n\n    this._grainTexture.update(false);\n  };\n\n  return LensRenderingPipeline;\n}(PostProcessRenderPipeline);\n\nexport { LensRenderingPipeline };","map":{"version":3,"mappings":"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","names":["Texture","DynamicTexture","PostProcess","PostProcessRenderPipeline","PostProcessRenderEffect","__extends","name","parameters","scene","ratio","cameras","_super","getEngine","_this","_scene","_depthTexture","enableDepthRenderer","getDepthMap","grain_texture","_grainTexture","_createGrainTexture","_edgeBlur","edge_blur","_grainAmount","grain_amount","_chromaticAberration","chromatic_aberration","_distortion","distortion","_highlightsGain","dof_gain","undefined","_highlightsThreshold","dof_threshold","_dofDistance","dof_focus_distance","_dofAperture","dof_aperture","_dofDarken","dof_darken","_dofPentagon","dof_pentagon","_blurNoise","blur_noise","_createChromaticAberrationPostProcess","_createHighlightsPostProcess","_createDepthOfFieldPostProcess","addEffect","LensChromaticAberrationEffect","_chromaticAberrationPostProcess","HighlightsEnhancingEffect","_highlightsPostProcess","LensDepthOfFieldEffect","_depthOfFieldPostProcess","_disableEffect","postProcessRenderPipelineManager","addPipeline","attachCamerasToRenderPipeline","LensRenderingPipeline","Object","value","setEdgeBlur","setGrainAmount","setChromaticAberration","setAperture","setEdgeDistortion","setFocusDistance","setDarkenOutOfFocus","_pentagonBokehIsEnabled","enablePentagonBokeh","disablePentagonBokeh","setHighlightsGain","setHighlightsThreshold","amount","updateEffect","disableDepthRender","detachCamerasFromRenderPipeline","_name","dispose","disableDepthRenderer","TRILINEAR_SAMPLINGMODE","onApply","effect","setFloat","getRenderWidth","getRenderHeight","setFloat2","externalTextureSamplerBinding","setTextureFromPostProcess","setTexture","setBool","activeCamera","minZ","maxZ","size","BILINEAR_SAMPLINGMODE","wrapU","WRAP_ADDRESSMODE","wrapV","context","getContext","rand","min","max","Math","random","x","y","floor","fillStyle","fillRect","update"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/PostProcesses/RenderPipeline/Pipelines/lensRenderingPipeline.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Camera } from \"../../../Cameras/camera\";\r\nimport type { Effect } from \"../../../Materials/effect\";\r\nimport { Texture } from \"../../../Materials/Textures/texture\";\r\nimport { DynamicTexture } from \"../../../Materials/Textures/dynamicTexture\";\r\nimport type { RenderTargetTexture } from \"../../../Materials/Textures/renderTargetTexture\";\r\nimport { PostProcess } from \"../../../PostProcesses/postProcess\";\r\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline\";\r\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect\";\r\nimport type { Scene } from \"../../../scene\";\r\n\r\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent\";\r\n\r\nimport \"../../../Shaders/chromaticAberration.fragment\";\r\nimport \"../../../Shaders/lensHighlights.fragment\";\r\nimport \"../../../Shaders/depthOfField.fragment\";\r\n\r\n/**\r\n * BABYLON.JS Chromatic Aberration GLSL Shader\r\n * Author: Olivier Guyot\r\n * Separates very slightly R, G and B colors on the edges of the screen\r\n * Inspired by Francois Tarlier & Martins Upitis\r\n */\r\nexport class LensRenderingPipeline extends PostProcessRenderPipeline {\r\n    // Lens effects can be of the following:\r\n    // - chromatic aberration (slight shift of RGB colors)\r\n    // - blur on the edge of the lens\r\n    // - lens distortion\r\n    // - depth-of-field blur & highlights enhancing\r\n    // - depth-of-field 'bokeh' effect (shapes appearing in blurred areas)\r\n    // - grain effect (noise or custom texture)\r\n\r\n    // Two additional texture samplers are needed:\r\n    // - depth map (for depth-of-field)\r\n    // - grain texture\r\n\r\n    /**\r\n     * @ignore\r\n     * The chromatic aberration PostProcess id in the pipeline\r\n     */\r\n    public LensChromaticAberrationEffect: string = \"LensChromaticAberrationEffect\";\r\n    /**\r\n     * @ignore\r\n     * The highlights enhancing PostProcess id in the pipeline\r\n     */\r\n    public HighlightsEnhancingEffect: string = \"HighlightsEnhancingEffect\";\r\n    /**\r\n     * @ignore\r\n     * The depth-of-field PostProcess id in the pipeline\r\n     */\r\n    public LensDepthOfFieldEffect: string = \"LensDepthOfFieldEffect\";\r\n\r\n    private _scene: Scene;\r\n    private _depthTexture: RenderTargetTexture;\r\n    private _grainTexture: Texture;\r\n\r\n    private _chromaticAberrationPostProcess: PostProcess;\r\n    private _highlightsPostProcess: PostProcess;\r\n    private _depthOfFieldPostProcess: PostProcess;\r\n\r\n    private _edgeBlur: number;\r\n    private _grainAmount: number;\r\n    private _chromaticAberration: number;\r\n    private _distortion: number;\r\n    private _highlightsGain: number;\r\n    private _highlightsThreshold: number;\r\n    private _dofDistance: number;\r\n    private _dofAperture: number;\r\n    private _dofDarken: number;\r\n    private _dofPentagon: boolean;\r\n    private _blurNoise: boolean;\r\n\r\n    /**\r\n     * @constructor\r\n     *\r\n     * Effect parameters are as follow:\r\n     * {\r\n     *      chromatic_aberration: number;       // from 0 to x (1 for realism)\r\n     *      edge_blur: number;                  // from 0 to x (1 for realism)\r\n     *      distortion: number;                 // from 0 to x (1 for realism), note that this will effect the pointer position precision\r\n     *      grain_amount: number;               // from 0 to 1\r\n     *      grain_texture: BABYLON.Texture;     // texture to use for grain effect; if unset, use random B&W noise\r\n     *      dof_focus_distance: number;         // depth-of-field: focus distance; unset to disable (disabled by default)\r\n     *      dof_aperture: number;               // depth-of-field: focus blur bias (default: 1)\r\n     *      dof_darken: number;                 // depth-of-field: darken that which is out of focus (from 0 to 1, disabled by default)\r\n     *      dof_pentagon: boolean;              // depth-of-field: makes a pentagon-like \"bokeh\" effect\r\n     *      dof_gain: number;                   // depth-of-field: highlights gain; unset to disable (disabled by default)\r\n     *      dof_threshold: number;              // depth-of-field: highlights threshold (default: 1)\r\n     *      blur_noise: boolean;                // add a little bit of noise to the blur (default: true)\r\n     * }\r\n     * Note: if an effect parameter is unset, effect is disabled\r\n     *\r\n     * @param name The rendering pipeline name\r\n     * @param parameters - An object containing all parameters (see above)\r\n     * @param scene The scene linked to this pipeline\r\n     * @param ratio The size of the postprocesses (0.5 means that your postprocess will have a width = canvas.width 0.5 and a height = canvas.height 0.5)\r\n     * @param cameras The array of cameras that the rendering pipeline will be attached to\r\n     */\r\n    constructor(name: string, parameters: any, scene: Scene, ratio: number = 1.0, cameras?: Camera[]) {\r\n        super(scene.getEngine(), name);\r\n\r\n        this._scene = scene;\r\n\r\n        // Fetch texture samplers\r\n        this._depthTexture = scene.enableDepthRenderer().getDepthMap(); // Force depth renderer \"on\"\r\n        if (parameters.grain_texture) {\r\n            this._grainTexture = parameters.grain_texture;\r\n        } else {\r\n            this._createGrainTexture();\r\n        }\r\n\r\n        // save parameters\r\n        this._edgeBlur = parameters.edge_blur ? parameters.edge_blur : 0;\r\n        this._grainAmount = parameters.grain_amount ? parameters.grain_amount : 0;\r\n        this._chromaticAberration = parameters.chromatic_aberration ? parameters.chromatic_aberration : 0;\r\n        this._distortion = parameters.distortion ? parameters.distortion : 0;\r\n        this._highlightsGain = parameters.dof_gain !== undefined ? parameters.dof_gain : -1;\r\n        this._highlightsThreshold = parameters.dof_threshold ? parameters.dof_threshold : 1;\r\n        this._dofDistance = parameters.dof_focus_distance !== undefined ? parameters.dof_focus_distance : -1;\r\n        this._dofAperture = parameters.dof_aperture ? parameters.dof_aperture : 1;\r\n        this._dofDarken = parameters.dof_darken ? parameters.dof_darken : 0;\r\n        this._dofPentagon = parameters.dof_pentagon !== undefined ? parameters.dof_pentagon : true;\r\n        this._blurNoise = parameters.blur_noise !== undefined ? parameters.blur_noise : true;\r\n\r\n        // Create effects\r\n        this._createChromaticAberrationPostProcess(ratio);\r\n        this._createHighlightsPostProcess(ratio);\r\n        this._createDepthOfFieldPostProcess(ratio / 4);\r\n\r\n        // Set up pipeline\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.LensChromaticAberrationEffect,\r\n                () => {\r\n                    return this._chromaticAberrationPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.HighlightsEnhancingEffect,\r\n                () => {\r\n                    return this._highlightsPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.LensDepthOfFieldEffect,\r\n                () => {\r\n                    return this._depthOfFieldPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n\r\n        if (this._highlightsGain === -1) {\r\n            this._disableEffect(this.HighlightsEnhancingEffect, null);\r\n        }\r\n\r\n        // Finish\r\n        scene.postProcessRenderPipelineManager.addPipeline(this);\r\n        if (cameras) {\r\n            scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the class name\r\n     * @returns \"LensRenderingPipeline\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"LensRenderingPipeline\";\r\n    }\r\n\r\n    // Properties\r\n\r\n    /**\r\n     * Gets associated scene\r\n     */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the edge blur\r\n     */\r\n    public get edgeBlur(): number {\r\n        return this._edgeBlur;\r\n    }\r\n\r\n    public set edgeBlur(value: number) {\r\n        this.setEdgeBlur(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the grain amount\r\n     */\r\n    public get grainAmount(): number {\r\n        return this._grainAmount;\r\n    }\r\n\r\n    public set grainAmount(value: number) {\r\n        this.setGrainAmount(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the chromatic aberration amount\r\n     */\r\n    public get chromaticAberration(): number {\r\n        return this._chromaticAberration;\r\n    }\r\n\r\n    public set chromaticAberration(value: number) {\r\n        this.setChromaticAberration(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the depth of field aperture\r\n     */\r\n    public get dofAperture(): number {\r\n        return this._dofAperture;\r\n    }\r\n\r\n    public set dofAperture(value: number) {\r\n        this.setAperture(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the edge distortion\r\n     */\r\n    public get edgeDistortion(): number {\r\n        return this._distortion;\r\n    }\r\n\r\n    public set edgeDistortion(value: number) {\r\n        this.setEdgeDistortion(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the depth of field distortion\r\n     */\r\n    public get dofDistortion(): number {\r\n        return this._dofDistance;\r\n    }\r\n\r\n    public set dofDistortion(value: number) {\r\n        this.setFocusDistance(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the darken out of focus amount\r\n     */\r\n    public get darkenOutOfFocus(): number {\r\n        return this._dofDarken;\r\n    }\r\n\r\n    public set darkenOutOfFocus(value: number) {\r\n        this.setDarkenOutOfFocus(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if blur noise is enabled\r\n     */\r\n    public get blurNoise(): boolean {\r\n        return this._blurNoise;\r\n    }\r\n\r\n    public set blurNoise(value: boolean) {\r\n        this._blurNoise = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if pentagon bokeh is enabled\r\n     */\r\n    public get pentagonBokeh(): boolean {\r\n        return this._pentagonBokehIsEnabled;\r\n    }\r\n\r\n    public set pentagonBokeh(value: boolean) {\r\n        if (value) {\r\n            this.enablePentagonBokeh();\r\n        } else {\r\n            this.disablePentagonBokeh();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the highlight grain amount\r\n     */\r\n    public get highlightsGain(): number {\r\n        return this._highlightsGain;\r\n    }\r\n\r\n    public set highlightsGain(value: number) {\r\n        this.setHighlightsGain(value);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the highlight threshold\r\n     */\r\n    public get highlightsThreshold(): number {\r\n        return this._highlightsThreshold;\r\n    }\r\n\r\n    public set highlightsThreshold(value: number) {\r\n        this.setHighlightsThreshold(value);\r\n    }\r\n\r\n    // public methods (self explanatory)\r\n    /**\r\n     * Sets the amount of blur at the edges\r\n     * @param amount blur amount\r\n     */\r\n    public setEdgeBlur(amount: number) {\r\n        this._edgeBlur = amount;\r\n    }\r\n    /**\r\n     * Sets edge blur to 0\r\n     */\r\n    public disableEdgeBlur() {\r\n        this._edgeBlur = 0;\r\n    }\r\n    /**\r\n     * Sets the amount of grain\r\n     * @param amount Amount of grain\r\n     */\r\n    public setGrainAmount(amount: number) {\r\n        this._grainAmount = amount;\r\n    }\r\n    /**\r\n     * Set grain amount to 0\r\n     */\r\n    public disableGrain() {\r\n        this._grainAmount = 0;\r\n    }\r\n    /**\r\n     * Sets the chromatic aberration amount\r\n     * @param amount amount of chromatic aberration\r\n     */\r\n    public setChromaticAberration(amount: number) {\r\n        this._chromaticAberration = amount;\r\n    }\r\n    /**\r\n     * Sets chromatic aberration amount to 0\r\n     */\r\n    public disableChromaticAberration() {\r\n        this._chromaticAberration = 0;\r\n    }\r\n    /**\r\n     * Sets the EdgeDistortion amount\r\n     * @param amount amount of EdgeDistortion\r\n     */\r\n    public setEdgeDistortion(amount: number) {\r\n        this._distortion = amount;\r\n    }\r\n    /**\r\n     * Sets edge distortion to 0\r\n     */\r\n    public disableEdgeDistortion() {\r\n        this._distortion = 0;\r\n    }\r\n    /**\r\n     * Sets the FocusDistance amount\r\n     * @param amount amount of FocusDistance\r\n     */\r\n    public setFocusDistance(amount: number) {\r\n        this._dofDistance = amount;\r\n    }\r\n    /**\r\n     * Disables depth of field\r\n     */\r\n    public disableDepthOfField() {\r\n        this._dofDistance = -1;\r\n    }\r\n    /**\r\n     * Sets the Aperture amount\r\n     * @param amount amount of Aperture\r\n     */\r\n    public setAperture(amount: number) {\r\n        this._dofAperture = amount;\r\n    }\r\n    /**\r\n     * Sets the DarkenOutOfFocus amount\r\n     * @param amount amount of DarkenOutOfFocus\r\n     */\r\n    public setDarkenOutOfFocus(amount: number) {\r\n        this._dofDarken = amount;\r\n    }\r\n\r\n    private _pentagonBokehIsEnabled = false;\r\n    /**\r\n     * Creates a pentagon bokeh effect\r\n     */\r\n    public enablePentagonBokeh() {\r\n        this._highlightsPostProcess.updateEffect(\"#define PENTAGON\\n\");\r\n        this._pentagonBokehIsEnabled = true;\r\n    }\r\n    /**\r\n     * Disables the pentagon bokeh effect\r\n     */\r\n    public disablePentagonBokeh() {\r\n        this._pentagonBokehIsEnabled = false;\r\n        this._highlightsPostProcess.updateEffect();\r\n    }\r\n    /**\r\n     * Enables noise blur\r\n     */\r\n    public enableNoiseBlur() {\r\n        this._blurNoise = true;\r\n    }\r\n    /**\r\n     * Disables noise blur\r\n     */\r\n    public disableNoiseBlur() {\r\n        this._blurNoise = false;\r\n    }\r\n    /**\r\n     * Sets the HighlightsGain amount\r\n     * @param amount amount of HighlightsGain\r\n     */\r\n    public setHighlightsGain(amount: number) {\r\n        this._highlightsGain = amount;\r\n    }\r\n    /**\r\n     * Sets the HighlightsThreshold amount\r\n     * @param amount amount of HighlightsThreshold\r\n     */\r\n    public setHighlightsThreshold(amount: number) {\r\n        if (this._highlightsGain === -1) {\r\n            this._highlightsGain = 1.0;\r\n        }\r\n        this._highlightsThreshold = amount;\r\n    }\r\n    /**\r\n     * Disables highlights\r\n     */\r\n    public disableHighlights() {\r\n        this._highlightsGain = -1;\r\n    }\r\n\r\n    /**\r\n     * Removes the internal pipeline assets and detaches the pipeline from the scene cameras\r\n     * @param disableDepthRender If the scene's depth rendering should be disabled (default: false)\r\n     */\r\n    public dispose(disableDepthRender: boolean = false): void {\r\n        this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\r\n\r\n        (<any>this._chromaticAberrationPostProcess) = null;\r\n        (<any>this._highlightsPostProcess) = null;\r\n        (<any>this._depthOfFieldPostProcess) = null;\r\n\r\n        this._grainTexture.dispose();\r\n\r\n        if (disableDepthRender) {\r\n            this._scene.disableDepthRenderer();\r\n        }\r\n    }\r\n\r\n    // colors shifting and distortion\r\n    private _createChromaticAberrationPostProcess(ratio: number): void {\r\n        this._chromaticAberrationPostProcess = new PostProcess(\r\n            \"LensChromaticAberration\",\r\n            \"chromaticAberration\",\r\n            [\"chromatic_aberration\", \"screen_width\", \"screen_height\", \"direction\", \"radialIntensity\", \"centerPosition\"], // uniforms\r\n            [], // samplers\r\n            ratio,\r\n            null,\r\n            Texture.TRILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false\r\n        );\r\n\r\n        this._chromaticAberrationPostProcess.onApply = (effect: Effect) => {\r\n            effect.setFloat(\"chromatic_aberration\", this._chromaticAberration);\r\n            effect.setFloat(\"screen_width\", this._scene.getEngine().getRenderWidth());\r\n            effect.setFloat(\"screen_height\", this._scene.getEngine().getRenderHeight());\r\n            effect.setFloat(\"radialIntensity\", 1);\r\n            effect.setFloat2(\"direction\", 17, 17);\r\n            effect.setFloat2(\"centerPosition\", 0.5, 0.5);\r\n        };\r\n    }\r\n\r\n    // highlights enhancing\r\n    private _createHighlightsPostProcess(ratio: number): void {\r\n        this._highlightsPostProcess = new PostProcess(\r\n            \"LensHighlights\",\r\n            \"lensHighlights\",\r\n            [\"gain\", \"threshold\", \"screen_width\", \"screen_height\"], // uniforms\r\n            [], // samplers\r\n            ratio,\r\n            null,\r\n            Texture.TRILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false,\r\n            this._dofPentagon ? \"#define PENTAGON\\n\" : \"\"\r\n        );\r\n\r\n        this._highlightsPostProcess.externalTextureSamplerBinding = true;\r\n        this._highlightsPostProcess.onApply = (effect: Effect) => {\r\n            effect.setFloat(\"gain\", this._highlightsGain);\r\n            effect.setFloat(\"threshold\", this._highlightsThreshold);\r\n            effect.setTextureFromPostProcess(\"textureSampler\", this._chromaticAberrationPostProcess);\r\n            effect.setFloat(\"screen_width\", this._scene.getEngine().getRenderWidth());\r\n            effect.setFloat(\"screen_height\", this._scene.getEngine().getRenderHeight());\r\n        };\r\n    }\r\n\r\n    // colors shifting and distortion\r\n    private _createDepthOfFieldPostProcess(ratio: number): void {\r\n        this._depthOfFieldPostProcess = new PostProcess(\r\n            \"LensDepthOfField\",\r\n            \"depthOfField\",\r\n            [\r\n                \"grain_amount\",\r\n                \"blur_noise\",\r\n                \"screen_width\",\r\n                \"screen_height\",\r\n                \"distortion\",\r\n                \"dof_enabled\",\r\n                \"screen_distance\",\r\n                \"aperture\",\r\n                \"darken\",\r\n                \"edge_blur\",\r\n                \"highlights\",\r\n                \"near\",\r\n                \"far\",\r\n            ],\r\n            [\"depthSampler\", \"grainSampler\", \"highlightsSampler\"],\r\n            ratio,\r\n            null,\r\n            Texture.TRILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false\r\n        );\r\n\r\n        this._depthOfFieldPostProcess.externalTextureSamplerBinding = true;\r\n        this._depthOfFieldPostProcess.onApply = (effect: Effect) => {\r\n            effect.setTexture(\"depthSampler\", this._depthTexture);\r\n            effect.setTexture(\"grainSampler\", this._grainTexture);\r\n            effect.setTextureFromPostProcess(\"textureSampler\", this._highlightsPostProcess);\r\n            effect.setTextureFromPostProcess(\"highlightsSampler\", this._depthOfFieldPostProcess);\r\n\r\n            effect.setFloat(\"grain_amount\", this._grainAmount);\r\n            effect.setBool(\"blur_noise\", this._blurNoise);\r\n\r\n            effect.setFloat(\"screen_width\", this._scene.getEngine().getRenderWidth());\r\n            effect.setFloat(\"screen_height\", this._scene.getEngine().getRenderHeight());\r\n\r\n            effect.setFloat(\"distortion\", this._distortion);\r\n\r\n            effect.setBool(\"dof_enabled\", this._dofDistance !== -1);\r\n            effect.setFloat(\"screen_distance\", 1.0 / (0.1 - 1.0 / this._dofDistance));\r\n            effect.setFloat(\"aperture\", this._dofAperture);\r\n            effect.setFloat(\"darken\", this._dofDarken);\r\n\r\n            effect.setFloat(\"edge_blur\", this._edgeBlur);\r\n\r\n            effect.setBool(\"highlights\", this._highlightsGain !== -1);\r\n\r\n            if (this._scene.activeCamera) {\r\n                effect.setFloat(\"near\", this._scene.activeCamera.minZ);\r\n                effect.setFloat(\"far\", this._scene.activeCamera.maxZ);\r\n            }\r\n        };\r\n    }\r\n\r\n    // creates a black and white random noise texture, 512x512\r\n    private _createGrainTexture(): void {\r\n        const size = 512;\r\n\r\n        this._grainTexture = new DynamicTexture(\"LensNoiseTexture\", size, this._scene, false, Texture.BILINEAR_SAMPLINGMODE);\r\n        this._grainTexture.wrapU = Texture.WRAP_ADDRESSMODE;\r\n        this._grainTexture.wrapV = Texture.WRAP_ADDRESSMODE;\r\n\r\n        const context = (<DynamicTexture>this._grainTexture).getContext();\r\n\r\n        const rand = (min: number, max: number) => {\r\n            return Math.random() * (max - min) + min;\r\n        };\r\n\r\n        let value;\r\n        for (let x = 0; x < size; x++) {\r\n            for (let y = 0; y < size; y++) {\r\n                value = Math.floor(rand(0.42, 0.58) * 255);\r\n                context.fillStyle = \"rgb(\" + value + \", \" + value + \", \" + value + \")\";\r\n                context.fillRect(x, y, 1, 1);\r\n            }\r\n        }\r\n        (<DynamicTexture>this._grainTexture).update(false);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}