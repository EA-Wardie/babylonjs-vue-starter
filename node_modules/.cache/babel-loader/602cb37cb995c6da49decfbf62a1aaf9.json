{"ast":null,"code":"import \"core-js/modules/es.function.bind.js\";\nimport { __extends } from \"tslib\";\nimport { Camera } from \"../../Cameras/camera.js\";\nimport { ArcRotateCamera } from \"../../Cameras/arcRotateCamera.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Node } from \"../../node.js\";\nimport { setStereoscopicRigMode } from \"../RigModes/stereoscopicRigMode.js\";\nNode.AddNodeConstructor(\"StereoscopicArcRotateCamera\", function (name, scene, options) {\n  return function () {\n    return new StereoscopicArcRotateCamera(name, 0, 0, 1.0, Vector3.Zero(), options.interaxial_distance, options.isStereoscopicSideBySide, scene);\n  };\n});\n/**\n * Camera used to simulate stereoscopic rendering (based on ArcRotateCamera)\n * @see https://doc.babylonjs.com/features/cameras\n */\n\nvar StereoscopicArcRotateCamera =\n/** @class */\nfunction (_super) {\n  __extends(StereoscopicArcRotateCamera, _super);\n  /**\n   * Creates a new StereoscopicArcRotateCamera\n   * @param name defines camera name\n   * @param alpha defines alpha angle (in radians)\n   * @param beta defines beta angle (in radians)\n   * @param radius defines radius\n   * @param target defines camera target\n   * @param interaxialDistance defines distance between each color axis\n   * @param isStereoscopicSideBySide defines is stereoscopic is done side by side or over under\n   * @param scene defines the hosting scene\n   */\n\n\n  function StereoscopicArcRotateCamera(name, alpha, beta, radius, target, interaxialDistance, isStereoscopicSideBySide, scene) {\n    var _this = _super.call(this, name, alpha, beta, radius, target, scene) || this;\n\n    _this._setRigMode = setStereoscopicRigMode.bind(null, _this);\n    _this.interaxialDistance = interaxialDistance;\n    _this.isStereoscopicSideBySide = isStereoscopicSideBySide;\n\n    _this.setCameraRigMode(isStereoscopicSideBySide ? Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL : Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER, {\n      interaxialDistance: interaxialDistance\n    });\n\n    return _this;\n  }\n  /**\n   * Gets camera class name\n   * @returns StereoscopicArcRotateCamera\n   */\n\n\n  StereoscopicArcRotateCamera.prototype.getClassName = function () {\n    return \"StereoscopicArcRotateCamera\";\n  };\n\n  return StereoscopicArcRotateCamera;\n}(ArcRotateCamera);\n\nexport { StereoscopicArcRotateCamera };","map":{"version":3,"mappings":";;AAAA,SAASA,MAAT,QAAuB,yBAAvB;AACA,SAASC,eAAT,QAAgC,kCAAhC;AAEA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,IAAT,QAAqB,eAArB;AACA,SAASC,sBAAT,QAAuC,oCAAvC;AAEAD,IAAI,CAACE,kBAAL,CAAwB,6BAAxB,EAAuD,UAACC,IAAD,EAAOC,KAAP,EAAcC,OAAd,EAAqB;AACxE,SAAO;AAAM,eAAIC,2BAAJ,CAAgCH,IAAhC,EAAsC,CAAtC,EAAyC,CAAzC,EAA4C,GAA5C,EAAiDJ,OAAO,CAACQ,IAAR,EAAjD,EAAiEF,OAAO,CAACG,mBAAzE,EAA8FH,OAAO,CAACI,wBAAtG,EAAgIL,KAAhI;AAAsI,GAAnJ;AACH,CAFD;AAIA;;;;;AAIA;AAAA;AAAA;AAAiDM;AAC7C;;;;;;;;;;;;;AAWA,uCAAYP,IAAZ,EAA0BQ,KAA1B,EAAyCC,IAAzC,EAAuDC,MAAvD,EAAuEC,MAAvE,EAAwFC,kBAAxF,EAAoHN,wBAApH,EAAuJL,KAAvJ,EAAoK;AAApK,gBACIY,kBAAMb,IAAN,EAAYQ,KAAZ,EAAmBC,IAAnB,EAAyBC,MAAzB,EAAiCC,MAAjC,EAAyCV,KAAzC,KAA+C,IADnD;;AAiBUa,wBAAchB,sBAAsB,CAACiB,IAAvB,CAA4B,IAA5B,EAAkCD,KAAlC,CAAd;AAfNA,SAAI,CAACF,kBAAL,GAA0BA,kBAA1B;AACAE,SAAI,CAACR,wBAAL,GAAgCA,wBAAhC;;AACAQ,SAAI,CAACE,gBAAL,CAAsBV,wBAAwB,GAAGZ,MAAM,CAACuB,yCAAV,GAAsDvB,MAAM,CAACwB,+BAA3G,EAA4I;AACxIN,wBAAkB,EAAEA;AADoH,KAA5I;;;AAGH;AAED;;;;;;AAIOT,uDAAP;AACI,WAAO,6BAAP;AACH,GAFM;;AAKX;AAAC,CA9BD,CAAiDR,eAAjD","names":["Camera","ArcRotateCamera","Vector3","Node","setStereoscopicRigMode","AddNodeConstructor","name","scene","options","StereoscopicArcRotateCamera","Zero","interaxial_distance","isStereoscopicSideBySide","__extends","alpha","beta","radius","target","interaxialDistance","_super","_this","bind","setCameraRigMode","RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL","RIG_MODE_STEREOSCOPIC_OVERUNDER"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Cameras/Stereoscopic/stereoscopicArcRotateCamera.ts"],"sourcesContent":["import { Camera } from \"../../Cameras/camera\";\r\nimport { ArcRotateCamera } from \"../../Cameras/arcRotateCamera\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Node } from \"../../node\";\r\nimport { setStereoscopicRigMode } from \"../RigModes/stereoscopicRigMode\";\r\n\r\nNode.AddNodeConstructor(\"StereoscopicArcRotateCamera\", (name, scene, options) => {\r\n    return () => new StereoscopicArcRotateCamera(name, 0, 0, 1.0, Vector3.Zero(), options.interaxial_distance, options.isStereoscopicSideBySide, scene);\r\n});\r\n\r\n/**\r\n * Camera used to simulate stereoscopic rendering (based on ArcRotateCamera)\r\n * @see https://doc.babylonjs.com/features/cameras\r\n */\r\nexport class StereoscopicArcRotateCamera extends ArcRotateCamera {\r\n    /**\r\n     * Creates a new StereoscopicArcRotateCamera\r\n     * @param name defines camera name\r\n     * @param alpha defines alpha angle (in radians)\r\n     * @param beta defines beta angle (in radians)\r\n     * @param radius defines radius\r\n     * @param target defines camera target\r\n     * @param interaxialDistance defines distance between each color axis\r\n     * @param isStereoscopicSideBySide defines is stereoscopic is done side by side or over under\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, alpha: number, beta: number, radius: number, target: Vector3, interaxialDistance: number, isStereoscopicSideBySide: boolean, scene?: Scene) {\r\n        super(name, alpha, beta, radius, target, scene);\r\n        this.interaxialDistance = interaxialDistance;\r\n        this.isStereoscopicSideBySide = isStereoscopicSideBySide;\r\n        this.setCameraRigMode(isStereoscopicSideBySide ? Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL : Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER, {\r\n            interaxialDistance: interaxialDistance,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets camera class name\r\n     * @returns StereoscopicArcRotateCamera\r\n     */\r\n    public getClassName(): string {\r\n        return \"StereoscopicArcRotateCamera\";\r\n    }\r\n\r\n    protected _setRigMode = setStereoscopicRigMode.bind(null, this);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}