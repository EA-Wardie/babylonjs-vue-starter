{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\n\n/**\n * Wrapper over subclasses of XRLayer.\n * @hidden\n */\nvar WebXRLayerWrapper =\n/** @class */\nfunction () {\n  function WebXRLayerWrapper(\n  /** The width of the layer's framebuffer. */\n  getWidth,\n  /** The height of the layer's framebuffer. */\n  getHeight,\n  /** The XR layer that this WebXRLayerWrapper wraps. */\n  layer,\n  /** The type of XR layer that is being wrapped. */\n  layerType,\n  /** Create a render target provider for the wrapped layer. */\n  createRenderTargetTextureProvider) {\n    this.getWidth = getWidth;\n    this.getHeight = getHeight;\n    this.layer = layer;\n    this.layerType = layerType;\n    this.createRenderTargetTextureProvider = createRenderTargetTextureProvider;\n  }\n\n  Object.defineProperty(WebXRLayerWrapper.prototype, \"isFixedFoveationSupported\", {\n    /**\n     * Check if fixed foveation is supported on this device\n     */\n    get: function get() {\n      return this.layerType == \"XRWebGLLayer\" && typeof this.layer.fixedFoveation == \"number\";\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebXRLayerWrapper.prototype, \"fixedFoveation\", {\n    /**\n     * Get the fixed foveation currently set, as specified by the webxr specs\n     * If this returns null, then fixed foveation is not supported\n     */\n    get: function get() {\n      if (this.isFixedFoveationSupported) {\n        return this.layer.fixedFoveation;\n      }\n\n      return null;\n    },\n\n    /**\n     * Set the fixed foveation to the specified value, as specified by the webxr specs\n     * This value will be normalized to be between 0 and 1, 1 being max foveation, 0 being no foveation\n     */\n    set: function set(value) {\n      if (this.isFixedFoveationSupported) {\n        var val = Math.max(0, Math.min(1, value || 0));\n        this.layer.fixedFoveation = val;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return WebXRLayerWrapper;\n}();\n\nexport { WebXRLayerWrapper };","map":{"version":3,"mappings":";;AAWA;;;;AAIA;AAAA;AAAA;AA8BI;AACI;AACOA,UAFX;AAGI;AACOC,WAJX;AAKI;AACgBC,OANpB;AAOI;AACgBC,WARpB;AASI;AACOC,mCAVX,EAU8H;AARnH;AAEA;AAES;AAEA;AAET;AACP;;AArCJC,wBAAWC,2BAAX,EAAW,2BAAX,EAAoC;AAHpC;;;SAGA;AACI,aAAO,KAAKH,SAAL,IAAkB,cAAlB,IAAoC,OAAQ,KAAKD,KAAL,CAA4BK,cAApC,IAAsD,QAAjG;AACH,KAFmC;qBAAA;;AAAA,GAApC;AAQAF,wBAAWC,2BAAX,EAAW,gBAAX,EAAyB;AAJzB;;;;SAIA;AACI,UAAI,KAAKE,yBAAT,EAAoC;AAChC,eAAQ,KAAKN,KAAL,CAA4BK,cAApC;AACH;;AACD,aAAO,IAAP;AACH,KALwB;;AAOzB;;;;SAIA,aAA0BE,KAA1B,EAAiD;AAC7C,UAAI,KAAKD,yBAAT,EAAoC;AAChC,YAAME,GAAG,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYJ,KAAK,IAAI,CAArB,CAAZ,CAAZ;AACC,aAAKP,KAAL,CAA4BK,cAA5B,GAA6CG,GAA7C;AACJ;AACJ,KAhBwB;qBAAA;;AAAA,GAAzB;AA8BJ;AAAC,CA1CD","names":["getWidth","getHeight","layer","layerType","createRenderTargetTextureProvider","Object","WebXRLayerWrapper","fixedFoveation","isFixedFoveationSupported","value","val","Math","max","min"],"sourceRoot":"","sources":["../../../../../lts/core/generated/XR/webXRLayerWrapper.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { WebXRLayerRenderTargetTextureProvider } from \"./webXRRenderTargetTextureProvider\";\r\nimport type { WebXRSessionManager } from \"./webXRSessionManager\";\r\n\r\n/** Covers all supported subclasses of WebXR's XRCompositionLayer */\r\n// TODO (rgerd): Extend for all other subclasses of XRCompositionLayer.\r\nexport type WebXRCompositionLayerType = \"XRProjectionLayer\";\r\n\r\n/** Covers all supported subclasses of WebXR's XRLayer */\r\nexport type WebXRLayerType = \"XRWebGLLayer\" | WebXRCompositionLayerType;\r\n\r\n/**\r\n * Wrapper over subclasses of XRLayer.\r\n * @hidden\r\n */\r\nexport class WebXRLayerWrapper {\r\n    /**\r\n     * Check if fixed foveation is supported on this device\r\n     */\r\n    public get isFixedFoveationSupported(): boolean {\r\n        return this.layerType == \"XRWebGLLayer\" && typeof (this.layer as XRWebGLLayer).fixedFoveation == \"number\";\r\n    }\r\n\r\n    /**\r\n     * Get the fixed foveation currently set, as specified by the webxr specs\r\n     * If this returns null, then fixed foveation is not supported\r\n     */\r\n    public get fixedFoveation(): Nullable<number> {\r\n        if (this.isFixedFoveationSupported) {\r\n            return (this.layer as XRWebGLLayer).fixedFoveation!;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Set the fixed foveation to the specified value, as specified by the webxr specs\r\n     * This value will be normalized to be between 0 and 1, 1 being max foveation, 0 being no foveation\r\n     */\r\n    public set fixedFoveation(value: Nullable<number>) {\r\n        if (this.isFixedFoveationSupported) {\r\n            const val = Math.max(0, Math.min(1, value || 0));\r\n            (this.layer as XRWebGLLayer).fixedFoveation = val;\r\n        }\r\n    }\r\n\r\n    protected constructor(\r\n        /** The width of the layer's framebuffer. */\r\n        public getWidth: () => number,\r\n        /** The height of the layer's framebuffer. */\r\n        public getHeight: () => number,\r\n        /** The XR layer that this WebXRLayerWrapper wraps. */\r\n        public readonly layer: XRLayer,\r\n        /** The type of XR layer that is being wrapped. */\r\n        public readonly layerType: WebXRLayerType,\r\n        /** Create a render target provider for the wrapped layer. */\r\n        public createRenderTargetTextureProvider: (xrSessionManager: WebXRSessionManager) => WebXRLayerRenderTargetTextureProvider\r\n    ) {}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}