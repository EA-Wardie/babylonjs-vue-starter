{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/depthOfFieldMerge.fragment.js\";\n/**\n * Options to be set when merging outputs from the default pipeline.\n */\n\nvar DepthOfFieldMergePostProcessOptions =\n/** @class */\nfunction () {\n  function DepthOfFieldMergePostProcessOptions() {}\n\n  return DepthOfFieldMergePostProcessOptions;\n}();\n\nexport { DepthOfFieldMergePostProcessOptions };\n/**\n * The DepthOfFieldMergePostProcess merges blurred images with the original based on the values of the circle of confusion.\n */\n\nvar DepthOfFieldMergePostProcess =\n/** @class */\nfunction (_super) {\n  __extends(DepthOfFieldMergePostProcess, _super);\n  /**\n   * Creates a new instance of DepthOfFieldMergePostProcess\n   * @param name The name of the effect.\n   * @param originalFromInput Post process which's input will be used for the merge.\n   * @param circleOfConfusion Circle of confusion post process which's output will be used to blur each pixel.\n   * @param _blurSteps Blur post processes from low to high which will be mixed with the original image.\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   * @param textureType Type of textures used when performing the post process. (default: 0)\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n   */\n\n\n  function DepthOfFieldMergePostProcess(name, originalFromInput, circleOfConfusion, _blurSteps, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    var _this = _super.call(this, name, \"depthOfFieldMerge\", [], [\"circleOfConfusionSampler\", \"blurStep0\", \"blurStep1\", \"blurStep2\"], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, true) || this;\n\n    _this._blurSteps = _blurSteps;\n    _this.externalTextureSamplerBinding = true;\n\n    _this.onApplyObservable.add(function (effect) {\n      effect.setTextureFromPostProcess(\"textureSampler\", originalFromInput);\n      effect.setTextureFromPostProcessOutput(\"circleOfConfusionSampler\", circleOfConfusion);\n\n      _blurSteps.forEach(function (step, index) {\n        effect.setTextureFromPostProcessOutput(\"blurStep\" + (_blurSteps.length - index - 1), step);\n      });\n    });\n\n    if (!blockCompilation) {\n      _this.updateEffect();\n    }\n\n    return _this;\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"DepthOfFieldMergePostProcess\" string\n   */\n\n\n  DepthOfFieldMergePostProcess.prototype.getClassName = function () {\n    return \"DepthOfFieldMergePostProcess\";\n  };\n  /**\n   * Updates the effect with the current post process compile time values and recompiles the shader.\n   * @param defines Define statements that should be added at the beginning of the shader. (default: null)\n   * @param uniforms Set of uniform variables that will be passed to the shader. (default: null)\n   * @param samplers Set of Texture2D variables that will be passed to the shader. (default: null)\n   * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\n   * @param onCompiled Called when the shader has been compiled.\n   * @param onError Called if there is an error when compiling a shader.\n   */\n\n\n  DepthOfFieldMergePostProcess.prototype.updateEffect = function (defines, uniforms, samplers, indexParameters, onCompiled, onError) {\n    if (defines === void 0) {\n      defines = null;\n    }\n\n    if (uniforms === void 0) {\n      uniforms = null;\n    }\n\n    if (samplers === void 0) {\n      samplers = null;\n    }\n\n    if (!defines) {\n      defines = \"\";\n      defines += \"#define BLUR_LEVEL \" + (this._blurSteps.length - 1) + \"\\n\";\n    }\n\n    _super.prototype.updateEffect.call(this, defines, uniforms, samplers, indexParameters, onCompiled, onError);\n  };\n\n  return DepthOfFieldMergePostProcess;\n}(PostProcess);\n\nexport { DepthOfFieldMergePostProcess };","map":{"version":3,"mappings":";;;;AAIA,SAASA,WAAT,QAA4B,kBAA5B;AAIA,OAAO,0CAAP;AAEA;;;;AAGA;AAAA;AAAA;AAAA,kDAmBC;;AAAD;AAAC,CAnBD;;;AAqBA;;;;AAGA;AAAA;AAAA;AAAkDC;AAS9C;;;;;;;;;;;;;;;;AAcA,wCACIC,IADJ,EAEIC,iBAFJ,EAGIC,iBAHJ,EAIYC,UAJZ,EAKIC,OALJ,EAMIC,MANJ,EAOIC,YAPJ,EAQIC,MARJ,EASIC,QATJ,EAUIC,WAVJ,EAWIC,gBAXJ,EAW4B;AADxB;AAAAD,oBAAsB,CAAtB;AAAsB;;AACtB;AAAAC;AAAwB;;AAX5B,gBAaIC,kBACIX,IADJ,EAEI,mBAFJ,EAGI,EAHJ,EAII,CAAC,0BAAD,EAA6B,WAA7B,EAA0C,WAA1C,EAAuD,WAAvD,CAJJ,EAKII,OALJ,EAMIC,MANJ,EAOIC,YAPJ,EAQIC,MARJ,EASIC,QATJ,EAUI,IAVJ,EAWIC,WAXJ,EAYIG,SAZJ,EAaI,IAbJ,EAcI,IAdJ,KAeC,IA5BL;;AAIYC;AAyBRA,SAAI,CAACC,6BAAL,GAAqC,IAArC;;AACAD,SAAI,CAACE,iBAAL,CAAuBC,GAAvB,CAA2B,UAACC,MAAD,EAAe;AACtCA,YAAM,CAACC,yBAAP,CAAiC,gBAAjC,EAAmDjB,iBAAnD;AACAgB,YAAM,CAACE,+BAAP,CAAuC,0BAAvC,EAAmEjB,iBAAnE;;AACAC,gBAAU,CAACiB,OAAX,CAAmB,UAACC,IAAD,EAAOC,KAAP,EAAY;AAC3BL,cAAM,CAACE,+BAAP,CAAuC,cAAchB,UAAU,CAACoB,MAAX,GAAoBD,KAApB,GAA4B,CAA1C,CAAvC,EAAqFD,IAArF;AACH,OAFD;AAGH,KAND;;AAQA,QAAI,CAACX,gBAAL,EAAuB;AACnBG,WAAI,CAACW,YAAL;AACH;;;AACJ;AA/DD;;;;;;AAIOC,wDAAP;AACI,WAAO,8BAAP;AACH,GAFM;AA6DP;;;;;;;;;;;AASOA,wDAAP,UACIC,OADJ,EAEIC,QAFJ,EAGIC,QAHJ,EAIIC,eAJJ,EAKIC,UALJ,EAMIC,OANJ,EAMsD;AALlD;AAAAL;AAAgC;;AAChC;AAAAC;AAAmC;;AACnC;AAAAC;AAAmC;;AAKnC,QAAI,CAACF,OAAL,EAAc;AACVA,aAAO,GAAG,EAAV;AACAA,aAAO,IAAI,yBAAyB,KAAKvB,UAAL,CAAgBoB,MAAhB,GAAyB,CAAlD,IAAuD,IAAlE;AACH;;AACDZ,qBAAMa,YAAN,CAAkBQ,IAAlB,CAAkB,IAAlB,EAAmBN,OAAnB,EAA4BC,QAA5B,EAAsCC,QAAtC,EAAgDC,eAAhD,EAAiEC,UAAjE,EAA6EC,OAA7E;AACH,GAbM;;AAcX;AAAC,CAzFD,CAAkDjC,WAAlD","names":["PostProcess","__extends","name","originalFromInput","circleOfConfusion","_blurSteps","options","camera","samplingMode","engine","reusable","textureType","blockCompilation","_super","undefined","_this","externalTextureSamplerBinding","onApplyObservable","add","effect","setTextureFromPostProcess","setTextureFromPostProcessOutput","forEach","step","index","length","updateEffect","DepthOfFieldMergePostProcess","defines","uniforms","samplers","indexParameters","onCompiled","onError","call"],"sourceRoot":"","sources":["../../../../../lts/core/generated/PostProcesses/depthOfFieldMergePostProcess.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/depthOfFieldMerge.fragment\";\r\n\r\n/**\r\n * Options to be set when merging outputs from the default pipeline.\r\n */\r\nexport class DepthOfFieldMergePostProcessOptions {\r\n    /**\r\n     * The original image to merge on top of\r\n     */\r\n    public originalFromInput: PostProcess;\r\n    /**\r\n     * Parameters to perform the merge of the depth of field effect\r\n     */\r\n    public depthOfField?: {\r\n        circleOfConfusion: PostProcess;\r\n        blurSteps: Array<PostProcess>;\r\n    };\r\n    /**\r\n     * Parameters to perform the merge of bloom effect\r\n     */\r\n    public bloom?: {\r\n        blurred: PostProcess;\r\n        weight: number;\r\n    };\r\n}\r\n\r\n/**\r\n * The DepthOfFieldMergePostProcess merges blurred images with the original based on the values of the circle of confusion.\r\n */\r\nexport class DepthOfFieldMergePostProcess extends PostProcess {\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"DepthOfFieldMergePostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"DepthOfFieldMergePostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of DepthOfFieldMergePostProcess\r\n     * @param name The name of the effect.\r\n     * @param originalFromInput Post process which's input will be used for the merge.\r\n     * @param circleOfConfusion Circle of confusion post process which's output will be used to blur each pixel.\r\n     * @param _blurSteps Blur post processes from low to high which will be mixed with the original image.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        originalFromInput: PostProcess,\r\n        circleOfConfusion: PostProcess,\r\n        private _blurSteps: Array<PostProcess>,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        blockCompilation = false\r\n    ) {\r\n        super(\r\n            name,\r\n            \"depthOfFieldMerge\",\r\n            [],\r\n            [\"circleOfConfusionSampler\", \"blurStep0\", \"blurStep1\", \"blurStep2\"],\r\n            options,\r\n            camera,\r\n            samplingMode,\r\n            engine,\r\n            reusable,\r\n            null,\r\n            textureType,\r\n            undefined,\r\n            null,\r\n            true\r\n        );\r\n        this.externalTextureSamplerBinding = true;\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setTextureFromPostProcess(\"textureSampler\", originalFromInput);\r\n            effect.setTextureFromPostProcessOutput(\"circleOfConfusionSampler\", circleOfConfusion);\r\n            _blurSteps.forEach((step, index) => {\r\n                effect.setTextureFromPostProcessOutput(\"blurStep\" + (_blurSteps.length - index - 1), step);\r\n            });\r\n        });\r\n\r\n        if (!blockCompilation) {\r\n            this.updateEffect();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the effect with the current post process compile time values and recompiles the shader.\r\n     * @param defines Define statements that should be added at the beginning of the shader. (default: null)\r\n     * @param uniforms Set of uniform variables that will be passed to the shader. (default: null)\r\n     * @param samplers Set of Texture2D variables that will be passed to the shader. (default: null)\r\n     * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\r\n     * @param onCompiled Called when the shader has been compiled.\r\n     * @param onError Called if there is an error when compiling a shader.\r\n     */\r\n    public updateEffect(\r\n        defines: Nullable<string> = null,\r\n        uniforms: Nullable<string[]> = null,\r\n        samplers: Nullable<string[]> = null,\r\n        indexParameters?: any,\r\n        onCompiled?: (effect: Effect) => void,\r\n        onError?: (effect: Effect, errors: string) => void\r\n    ) {\r\n        if (!defines) {\r\n            defines = \"\";\r\n            defines += \"#define BLUR_LEVEL \" + (this._blurSteps.length - 1) + \"\\n\";\r\n        }\r\n        super.updateEffect(defines, uniforms, samplers, indexParameters, onCompiled, onError);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}