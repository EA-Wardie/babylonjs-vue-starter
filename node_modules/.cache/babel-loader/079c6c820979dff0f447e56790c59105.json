{"ast":null,"code":"// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nvar name = \"pbrIBLFunctions\";\nvar shader = \"#if defined(REFLECTION) || defined(SS_REFRACTION)\\nfloat getLodFromAlphaG(float cubeMapDimensionPixels,float microsurfaceAverageSlope) {\\nfloat microsurfaceAverageSlopeTexels=cubeMapDimensionPixels*microsurfaceAverageSlope;\\nfloat lod=log2(microsurfaceAverageSlopeTexels);\\nreturn lod;\\n}\\nfloat getLinearLodFromRoughness(float cubeMapDimensionPixels,float roughness) {\\nfloat lod=log2(cubeMapDimensionPixels)*roughness;\\nreturn lod;\\n}\\n#endif\\n#if defined(ENVIRONMENTBRDF) && defined(RADIANCEOCCLUSION)\\nfloat environmentRadianceOcclusion(float ambientOcclusion,float NdotVUnclamped) {\\nfloat temp=NdotVUnclamped+ambientOcclusion;\\nreturn saturate(square(temp)-1.0+ambientOcclusion);\\n}\\n#endif\\n#if defined(ENVIRONMENTBRDF) && defined(HORIZONOCCLUSION)\\nfloat environmentHorizonOcclusion(vec3 view,vec3 normal,vec3 geometricNormal) {\\nvec3 reflection=reflect(view,normal);\\nfloat temp=saturate(1.0+1.1*dot(reflection,geometricNormal));\\nreturn square(temp);\\n}\\n#endif\\n#if defined(LODINREFLECTIONALPHA) || defined(SS_LODINREFRACTIONALPHA)\\n#define UNPACK_LOD(x) (1.0-x)*255.0\\nfloat getLodFromAlphaG(float cubeMapDimensionPixels,float alphaG,float NdotV) {\\nfloat microsurfaceAverageSlope=alphaG;\\nmicrosurfaceAverageSlope*=sqrt(abs(NdotV));\\nreturn getLodFromAlphaG(cubeMapDimensionPixels,microsurfaceAverageSlope);\\n}\\n#endif\\n\"; // Sideeffect\n\nShaderStore.IncludesShadersStore[name] = shader;\n/** @hidden */\n\nexport var pbrIBLFunctions = {\n  name: name,\n  shader: shader\n};","map":{"version":3,"mappings":"AAAA;AACA,SAASA,WAAT,QAA4B,8BAA5B;AAEA,IAAMC,IAAI,GAAG,iBAAb;AACA,IAAMC,MAAM,GAAG,uzCAAf,C,CAiCA;;AACAF,WAAW,CAACG,oBAAZ,CAAiCF,IAAjC,IAAyCC,MAAzC;AACA;;AACA,OAAO,IAAME,eAAe,GAAG;AAAEH,MAAI,MAAN;AAAQC,QAAM;AAAd,CAAxB","names":["ShaderStore","name","shader","IncludesShadersStore","pbrIBLFunctions"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Shaders/ShadersInclude/pbrIBLFunctions.ts"],"sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"pbrIBLFunctions\";\nconst shader = `#if defined(REFLECTION) || defined(SS_REFRACTION)\nfloat getLodFromAlphaG(float cubeMapDimensionPixels,float microsurfaceAverageSlope) {\rfloat microsurfaceAverageSlopeTexels=cubeMapDimensionPixels*microsurfaceAverageSlope;\rfloat lod=log2(microsurfaceAverageSlopeTexels);\rreturn lod;\r}\rfloat getLinearLodFromRoughness(float cubeMapDimensionPixels,float roughness) {\rfloat lod=log2(cubeMapDimensionPixels)*roughness;\rreturn lod;\r}\r#endif\n#if defined(ENVIRONMENTBRDF) && defined(RADIANCEOCCLUSION)\nfloat environmentRadianceOcclusion(float ambientOcclusion,float NdotVUnclamped) {\rfloat temp=NdotVUnclamped+ambientOcclusion;\rreturn saturate(square(temp)-1.0+ambientOcclusion);\r}\r#endif\n#if defined(ENVIRONMENTBRDF) && defined(HORIZONOCCLUSION)\nfloat environmentHorizonOcclusion(vec3 view,vec3 normal,vec3 geometricNormal) {\rvec3 reflection=reflect(view,normal);\rfloat temp=saturate(1.0+1.1*dot(reflection,geometricNormal));\rreturn square(temp);\r}\r#endif\n#if defined(LODINREFLECTIONALPHA) || defined(SS_LODINREFRACTIONALPHA)\n#define UNPACK_LOD(x) (1.0-x)*255.0\nfloat getLodFromAlphaG(float cubeMapDimensionPixels,float alphaG,float NdotV) {\rfloat microsurfaceAverageSlope=alphaG;\rmicrosurfaceAverageSlope*=sqrt(abs(NdotV));\rreturn getLodFromAlphaG(cubeMapDimensionPixels,microsurfaceAverageSlope);\r}\r#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @hidden */\nexport const pbrIBLFunctions = { name, shader };\n"]},"metadata":{},"sourceType":"module"}