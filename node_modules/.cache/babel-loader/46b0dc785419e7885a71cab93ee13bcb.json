{"ast":null,"code":"import _typeof from \"/home/ea/Development/Babylon/red/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport { __assign } from \"tslib\";\nimport { InternalTexture, InternalTextureSource } from \"../../../Materials/Textures/internalTexture.js\";\nimport { WebGPUEngine } from \"../../webgpuEngine.js\";\nimport { WebGPURenderTargetWrapper } from \"../webgpuRenderTargetWrapper.js\";\n\nWebGPUEngine.prototype._createHardwareRenderTargetWrapper = function (isMulti, isCube, size) {\n  var rtWrapper = new WebGPURenderTargetWrapper(isMulti, isCube, size, this);\n\n  this._renderTargetWrapperCache.push(rtWrapper);\n\n  return rtWrapper;\n};\n\nWebGPUEngine.prototype.createRenderTargetTexture = function (size, options) {\n  var _a;\n\n  var rtWrapper = this._createHardwareRenderTargetWrapper(false, false, size);\n\n  var fullOptions = {};\n\n  if (options !== undefined && _typeof(options) === \"object\") {\n    fullOptions.generateMipMaps = options.generateMipMaps;\n    fullOptions.generateDepthBuffer = options.generateDepthBuffer === undefined ? true : options.generateDepthBuffer;\n    fullOptions.generateStencilBuffer = fullOptions.generateDepthBuffer && options.generateStencilBuffer;\n    fullOptions.samplingMode = options.samplingMode === undefined ? 3 : options.samplingMode;\n    fullOptions.creationFlags = (_a = options.creationFlags) !== null && _a !== void 0 ? _a : 0;\n  } else {\n    fullOptions.generateMipMaps = options;\n    fullOptions.generateDepthBuffer = true;\n    fullOptions.generateStencilBuffer = false;\n    fullOptions.samplingMode = 3;\n    fullOptions.creationFlags = 0;\n  }\n\n  var texture = this._createInternalTexture(size, options, true, InternalTextureSource.RenderTarget);\n\n  rtWrapper._generateDepthBuffer = fullOptions.generateDepthBuffer;\n  rtWrapper._generateStencilBuffer = fullOptions.generateStencilBuffer ? true : false;\n  rtWrapper.setTextures(texture);\n\n  if (rtWrapper._generateDepthBuffer || rtWrapper._generateStencilBuffer) {\n    rtWrapper.createDepthStencilTexture(0, fullOptions.samplingMode === undefined || fullOptions.samplingMode === 2 || fullOptions.samplingMode === 2 || fullOptions.samplingMode === 3 || fullOptions.samplingMode === 3 || fullOptions.samplingMode === 5 || fullOptions.samplingMode === 6 || fullOptions.samplingMode === 7 || fullOptions.samplingMode === 11, rtWrapper._generateStencilBuffer, rtWrapper.samples);\n  }\n\n  if (options !== undefined && _typeof(options) === \"object\" && options.createMipMaps && !fullOptions.generateMipMaps) {\n    texture.generateMipMaps = true;\n  }\n\n  this._textureHelper.createGPUTextureForInternalTexture(texture, undefined, undefined, undefined, fullOptions.creationFlags);\n\n  if (options !== undefined && _typeof(options) === \"object\" && options.createMipMaps && !fullOptions.generateMipMaps) {\n    texture.generateMipMaps = false;\n  }\n\n  return rtWrapper;\n};\n\nWebGPUEngine.prototype._createDepthStencilTexture = function (size, options) {\n  var internalTexture = new InternalTexture(this, InternalTextureSource.DepthStencil);\n\n  var internalOptions = __assign({\n    bilinearFiltering: false,\n    comparisonFunction: 0,\n    generateStencil: false,\n    samples: 1,\n    depthTextureFormat: 14\n  }, options);\n\n  internalTexture.format = internalOptions.generateStencil ? 13 : internalOptions.depthTextureFormat;\n\n  this._setupDepthStencilTexture(internalTexture, size, internalOptions.generateStencil, internalOptions.bilinearFiltering, internalOptions.comparisonFunction, internalOptions.samples);\n\n  this._textureHelper.createGPUTextureForInternalTexture(internalTexture);\n\n  this._internalTexturesCache.push(internalTexture);\n\n  return internalTexture;\n};\n\nWebGPUEngine.prototype._setupDepthStencilTexture = function (internalTexture, size, generateStencil, bilinearFiltering, comparisonFunction, samples) {\n  if (samples === void 0) {\n    samples = 1;\n  }\n\n  var width = size.width || size;\n  var height = size.height || size;\n  var layers = size.layers || 0;\n  internalTexture.baseWidth = width;\n  internalTexture.baseHeight = height;\n  internalTexture.width = width;\n  internalTexture.height = height;\n  internalTexture.is2DArray = layers > 0;\n  internalTexture.depth = layers;\n  internalTexture.isReady = true;\n  internalTexture.samples = samples;\n  internalTexture.generateMipMaps = false;\n  internalTexture.samplingMode = bilinearFiltering ? 2 : 1;\n  internalTexture.type = 1;\n  internalTexture._comparisonFunction = comparisonFunction;\n  internalTexture._cachedWrapU = 0;\n  internalTexture._cachedWrapV = 0;\n};\n\nWebGPUEngine.prototype.updateRenderTargetTextureSampleCount = function (rtWrapper, samples) {\n  if (!rtWrapper || !rtWrapper.texture || rtWrapper.samples === samples) {\n    return samples;\n  }\n\n  samples = Math.min(samples, this.getCaps().maxMSAASamples);\n\n  this._textureHelper.createMSAATexture(rtWrapper.texture, samples);\n\n  if (rtWrapper._depthStencilTexture) {\n    this._textureHelper.createMSAATexture(rtWrapper._depthStencilTexture, samples);\n\n    rtWrapper._depthStencilTexture.samples = samples;\n  }\n\n  rtWrapper.texture.samples = samples;\n  return samples;\n};","map":{"version":3,"mappings":"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","names":["InternalTexture","InternalTextureSource","WebGPUEngine","WebGPURenderTargetWrapper","prototype","_createHardwareRenderTargetWrapper","isMulti","isCube","size","rtWrapper","_renderTargetWrapperCache","push","createRenderTargetTexture","options","fullOptions","undefined","generateMipMaps","generateDepthBuffer","generateStencilBuffer","samplingMode","creationFlags","_a","texture","_createInternalTexture","RenderTarget","_generateDepthBuffer","_generateStencilBuffer","setTextures","createDepthStencilTexture","createMipMaps","_textureHelper","createGPUTextureForInternalTexture","_createDepthStencilTexture","internalTexture","DepthStencil","internalOptions","bilinearFiltering","comparisonFunction","generateStencil","samples","depthTextureFormat","format","_setupDepthStencilTexture","_internalTexturesCache","width","height","layers","baseWidth","baseHeight","is2DArray","depth","isReady","type","_comparisonFunction","_cachedWrapU","_cachedWrapV","updateRenderTargetTextureSampleCount","Math","min","getCaps","maxMSAASamples","createMSAATexture","_depthStencilTexture"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Engines/WebGPU/Extensions/engine.renderTarget.ts"],"sourcesContent":["import { InternalTexture, InternalTextureSource } from \"../../../Materials/Textures/internalTexture\";\r\nimport type { RenderTargetCreationOptions, DepthTextureCreationOptions, TextureSize } from \"../../../Materials/Textures/textureCreationOptions\";\r\nimport type { Nullable } from \"../../../types\";\r\nimport { Constants } from \"../../constants\";\r\nimport type { RenderTargetWrapper } from \"../../renderTargetWrapper\";\r\nimport { WebGPUEngine } from \"../../webgpuEngine\";\r\nimport { WebGPURenderTargetWrapper } from \"../webgpuRenderTargetWrapper\";\r\n\r\nWebGPUEngine.prototype._createHardwareRenderTargetWrapper = function (isMulti: boolean, isCube: boolean, size: TextureSize): WebGPURenderTargetWrapper {\r\n    const rtWrapper = new WebGPURenderTargetWrapper(isMulti, isCube, size, this);\r\n    this._renderTargetWrapperCache.push(rtWrapper);\r\n    return rtWrapper;\r\n};\r\n\r\nWebGPUEngine.prototype.createRenderTargetTexture = function (size: TextureSize, options: boolean | RenderTargetCreationOptions): WebGPURenderTargetWrapper {\r\n    const rtWrapper = this._createHardwareRenderTargetWrapper(false, false, size) as WebGPURenderTargetWrapper;\r\n\r\n    const fullOptions: RenderTargetCreationOptions = {};\r\n\r\n    if (options !== undefined && typeof options === \"object\") {\r\n        fullOptions.generateMipMaps = options.generateMipMaps;\r\n        fullOptions.generateDepthBuffer = options.generateDepthBuffer === undefined ? true : options.generateDepthBuffer;\r\n        fullOptions.generateStencilBuffer = fullOptions.generateDepthBuffer && options.generateStencilBuffer;\r\n        fullOptions.samplingMode = options.samplingMode === undefined ? Constants.TEXTURE_TRILINEAR_SAMPLINGMODE : options.samplingMode;\r\n        fullOptions.creationFlags = options.creationFlags ?? 0;\r\n    } else {\r\n        fullOptions.generateMipMaps = <boolean>options;\r\n        fullOptions.generateDepthBuffer = true;\r\n        fullOptions.generateStencilBuffer = false;\r\n        fullOptions.samplingMode = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE;\r\n        fullOptions.creationFlags = 0;\r\n    }\r\n\r\n    const texture = this._createInternalTexture(size, options, true, InternalTextureSource.RenderTarget);\r\n\r\n    rtWrapper._generateDepthBuffer = fullOptions.generateDepthBuffer;\r\n    rtWrapper._generateStencilBuffer = fullOptions.generateStencilBuffer ? true : false;\r\n\r\n    rtWrapper.setTextures(texture);\r\n\r\n    if (rtWrapper._generateDepthBuffer || rtWrapper._generateStencilBuffer) {\r\n        rtWrapper.createDepthStencilTexture(\r\n            0,\r\n            fullOptions.samplingMode === undefined ||\r\n                fullOptions.samplingMode === Constants.TEXTURE_BILINEAR_SAMPLINGMODE ||\r\n                fullOptions.samplingMode === Constants.TEXTURE_LINEAR_LINEAR ||\r\n                fullOptions.samplingMode === Constants.TEXTURE_TRILINEAR_SAMPLINGMODE ||\r\n                fullOptions.samplingMode === Constants.TEXTURE_LINEAR_LINEAR_MIPLINEAR ||\r\n                fullOptions.samplingMode === Constants.TEXTURE_NEAREST_LINEAR_MIPNEAREST ||\r\n                fullOptions.samplingMode === Constants.TEXTURE_NEAREST_LINEAR_MIPLINEAR ||\r\n                fullOptions.samplingMode === Constants.TEXTURE_NEAREST_LINEAR ||\r\n                fullOptions.samplingMode === Constants.TEXTURE_LINEAR_LINEAR_MIPNEAREST,\r\n            rtWrapper._generateStencilBuffer,\r\n            rtWrapper.samples\r\n        );\r\n    }\r\n\r\n    if (options !== undefined && typeof options === \"object\" && options.createMipMaps && !fullOptions.generateMipMaps) {\r\n        texture.generateMipMaps = true;\r\n    }\r\n\r\n    this._textureHelper.createGPUTextureForInternalTexture(texture, undefined, undefined, undefined, fullOptions.creationFlags);\r\n\r\n    if (options !== undefined && typeof options === \"object\" && options.createMipMaps && !fullOptions.generateMipMaps) {\r\n        texture.generateMipMaps = false;\r\n    }\r\n\r\n    return rtWrapper;\r\n};\r\n\r\nWebGPUEngine.prototype._createDepthStencilTexture = function (size: TextureSize, options: DepthTextureCreationOptions): InternalTexture {\r\n    const internalTexture = new InternalTexture(this, InternalTextureSource.DepthStencil);\r\n\r\n    const internalOptions = {\r\n        bilinearFiltering: false,\r\n        comparisonFunction: 0,\r\n        generateStencil: false,\r\n        samples: 1,\r\n        depthTextureFormat: Constants.TEXTUREFORMAT_DEPTH32_FLOAT,\r\n        ...options,\r\n    };\r\n\r\n    internalTexture.format = internalOptions.generateStencil ? Constants.TEXTUREFORMAT_DEPTH24_STENCIL8 : internalOptions.depthTextureFormat;\r\n\r\n    this._setupDepthStencilTexture(\r\n        internalTexture,\r\n        size,\r\n        internalOptions.generateStencil,\r\n        internalOptions.bilinearFiltering,\r\n        internalOptions.comparisonFunction,\r\n        internalOptions.samples\r\n    );\r\n\r\n    this._textureHelper.createGPUTextureForInternalTexture(internalTexture);\r\n\r\n    this._internalTexturesCache.push(internalTexture);\r\n\r\n    return internalTexture;\r\n};\r\n\r\nWebGPUEngine.prototype._setupDepthStencilTexture = function (\r\n    internalTexture: InternalTexture,\r\n    size: TextureSize,\r\n    generateStencil: boolean,\r\n    bilinearFiltering: boolean,\r\n    comparisonFunction: number,\r\n    samples = 1\r\n): void {\r\n    const width = (<{ width: number; height: number; layers?: number }>size).width || <number>size;\r\n    const height = (<{ width: number; height: number; layers?: number }>size).height || <number>size;\r\n    const layers = (<{ width: number; height: number; layers?: number }>size).layers || 0;\r\n\r\n    internalTexture.baseWidth = width;\r\n    internalTexture.baseHeight = height;\r\n    internalTexture.width = width;\r\n    internalTexture.height = height;\r\n    internalTexture.is2DArray = layers > 0;\r\n    internalTexture.depth = layers;\r\n    internalTexture.isReady = true;\r\n    internalTexture.samples = samples;\r\n    internalTexture.generateMipMaps = false;\r\n    internalTexture.samplingMode = bilinearFiltering ? Constants.TEXTURE_BILINEAR_SAMPLINGMODE : Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n    internalTexture.type = Constants.TEXTURETYPE_FLOAT;\r\n    internalTexture._comparisonFunction = comparisonFunction;\r\n    internalTexture._cachedWrapU = Constants.TEXTURE_CLAMP_ADDRESSMODE;\r\n    internalTexture._cachedWrapV = Constants.TEXTURE_CLAMP_ADDRESSMODE;\r\n};\r\n\r\nWebGPUEngine.prototype.updateRenderTargetTextureSampleCount = function (rtWrapper: Nullable<RenderTargetWrapper>, samples: number): number {\r\n    if (!rtWrapper || !rtWrapper.texture || rtWrapper.samples === samples) {\r\n        return samples;\r\n    }\r\n\r\n    samples = Math.min(samples, this.getCaps().maxMSAASamples);\r\n\r\n    this._textureHelper.createMSAATexture(rtWrapper.texture, samples);\r\n\r\n    if (rtWrapper._depthStencilTexture) {\r\n        this._textureHelper.createMSAATexture(rtWrapper._depthStencilTexture, samples);\r\n        rtWrapper._depthStencilTexture.samples = samples;\r\n    }\r\n\r\n    rtWrapper.texture.samples = samples;\r\n\r\n    return samples;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}