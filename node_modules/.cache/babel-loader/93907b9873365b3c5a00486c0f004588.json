{"ast":null,"code":"/**\n * Class containing a set of static utilities functions for arrays.\n */\nvar ArrayTools =\n/** @class */\nfunction () {\n  function ArrayTools() {}\n  /**\n   * Returns an array of the given size filled with elements built from the given constructor and the parameters.\n   * @param size the number of element to construct and put in the array.\n   * @param itemBuilder a callback responsible for creating new instance of item. Called once per array entry.\n   * @returns a new array filled with new objects.\n   */\n\n\n  ArrayTools.BuildArray = function (size, itemBuilder) {\n    var a = [];\n\n    for (var i = 0; i < size; ++i) {\n      a.push(itemBuilder());\n    }\n\n    return a;\n  };\n  /**\n   * Returns a tuple of the given size filled with elements built from the given constructor and the parameters.\n   * @param size he number of element to construct and put in the tuple.\n   * @param itemBuilder a callback responsible for creating new instance of item. Called once per tuple entry.\n   * @returns a new tuple filled with new objects.\n   */\n\n\n  ArrayTools.BuildTuple = function (size, itemBuilder) {\n    return ArrayTools.BuildArray(size, itemBuilder);\n  };\n\n  return ArrayTools;\n}();\n\nexport { ArrayTools };","map":{"version":3,"mappings":"AAmBA;;;AAGA;AAAA;AAAA;AAAA,yBAwBC;AAvBG;;;;;;;;AAMcA,0BAAd,UAA4BC,IAA5B,EAA0CC,WAA1C,EAA8D;AAC1D,QAAMC,CAAC,GAAQ,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAApB,EAA0B,EAAEG,CAA5B,EAA+B;AAC3BD,OAAC,CAACE,IAAF,CAAOH,WAAW,EAAlB;AACH;;AACD,WAAOC,CAAP;AACH,GANa;AAQd;;;;;;;;AAMcH,0BAAd,UAAiEC,IAAjE,EAA0EC,WAA1E,EAA8F;AAC1F,WAAOF,UAAU,CAACM,UAAX,CAAsBL,IAAtB,EAA4BC,WAA5B,CAAP;AACH,GAFa;;AAGlB;AAAC,CAxBD","names":["ArrayTools","size","itemBuilder","a","i","push","BuildArray"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Misc/arrayTools.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\n/** @hidden */\r\ninterface TupleTypes<T> {\r\n    2: [T, T];\r\n    3: [T, T, T];\r\n    4: [T, T, T, T];\r\n    5: [T, T, T, T, T];\r\n    6: [T, T, T, T, T, T];\r\n    7: [T, T, T, T, T, T, T];\r\n    8: [T, T, T, T, T, T, T, T];\r\n    9: [T, T, T, T, T, T, T, T, T];\r\n    10: [T, T, T, T, T, T, T, T, T, T];\r\n    11: [T, T, T, T, T, T, T, T, T, T, T];\r\n    12: [T, T, T, T, T, T, T, T, T, T, T, T];\r\n    13: [T, T, T, T, T, T, T, T, T, T, T, T, T];\r\n    14: [T, T, T, T, T, T, T, T, T, T, T, T, T, T];\r\n    15: [T, T, T, T, T, T, T, T, T, T, T, T, T, T, T];\r\n}\r\n\r\n/**\r\n * Class containing a set of static utilities functions for arrays.\r\n */\r\nexport class ArrayTools {\r\n    /**\r\n     * Returns an array of the given size filled with elements built from the given constructor and the parameters.\r\n     * @param size the number of element to construct and put in the array.\r\n     * @param itemBuilder a callback responsible for creating new instance of item. Called once per array entry.\r\n     * @returns a new array filled with new objects.\r\n     */\r\n    public static BuildArray<T>(size: number, itemBuilder: () => T): Array<T> {\r\n        const a: T[] = [];\r\n        for (let i = 0; i < size; ++i) {\r\n            a.push(itemBuilder());\r\n        }\r\n        return a;\r\n    }\r\n\r\n    /**\r\n     * Returns a tuple of the given size filled with elements built from the given constructor and the parameters.\r\n     * @param size he number of element to construct and put in the tuple.\r\n     * @param itemBuilder a callback responsible for creating new instance of item. Called once per tuple entry.\r\n     * @returns a new tuple filled with new objects.\r\n     */\r\n    public static BuildTuple<T, N extends keyof TupleTypes<unknown>>(size: N, itemBuilder: () => T): TupleTypes<T>[N] {\r\n        return ArrayTools.BuildArray(size, itemBuilder) as any;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}