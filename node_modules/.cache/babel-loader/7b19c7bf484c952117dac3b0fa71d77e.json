{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { SmartArrayNoDuplicate } from \"../../Misc/smartArray.js\";\nimport { OctreeBlock } from \"./octreeBlock.js\";\n/**\n * Octrees are a really powerful data structure that can quickly select entities based on space coordinates.\n * @see https://doc.babylonjs.com/how_to/optimizing_your_scene_with_octrees\n */\n\nvar Octree =\n/** @class */\nfunction () {\n  /**\n   * Creates a octree\n   * @see https://doc.babylonjs.com/how_to/optimizing_your_scene_with_octrees\n   * @param creationFunc function to be used to instantiate the octree\n   * @param maxBlockCapacity defines the maximum number of meshes you want on your octree's leaves (default: 64)\n   * @param maxDepth defines the maximum depth (sub-levels) for your octree. Default value is 2, which means 8 8 8 = 512 blocks :) (This parameter takes precedence over capacity.)\n   */\n  function Octree(creationFunc, maxBlockCapacity,\n  /** Defines the maximum depth (sub-levels) for your octree. Default value is 2, which means 8 8 8 = 512 blocks :) (This parameter takes precedence over capacity.) */\n  maxDepth) {\n    if (maxDepth === void 0) {\n      maxDepth = 2;\n    }\n\n    this.maxDepth = maxDepth;\n    /**\n     * Content stored in the octree\n     */\n\n    this.dynamicContent = new Array();\n    this._maxBlockCapacity = maxBlockCapacity || 64;\n    this._selectionContent = new SmartArrayNoDuplicate(1024);\n    this._creationFunc = creationFunc;\n  } // Methods\n\n  /**\n   * Updates the octree by adding blocks for the passed in meshes within the min and max world parameters\n   * @param worldMin worldMin for the octree blocks var blockSize = new Vector3((worldMax.x - worldMin.x) / 2, (worldMax.y - worldMin.y) / 2, (worldMax.z - worldMin.z) / 2);\n   * @param worldMax worldMax for the octree blocks var blockSize = new Vector3((worldMax.x - worldMin.x) / 2, (worldMax.y - worldMin.y) / 2, (worldMax.z - worldMin.z) / 2);\n   * @param entries meshes to be added to the octree blocks\n   */\n\n\n  Octree.prototype.update = function (worldMin, worldMax, entries) {\n    OctreeBlock._CreateBlocks(worldMin, worldMax, entries, this._maxBlockCapacity, 0, this.maxDepth, this, this._creationFunc);\n  };\n  /**\n   * Adds a mesh to the octree\n   * @param entry Mesh to add to the octree\n   */\n\n\n  Octree.prototype.addMesh = function (entry) {\n    for (var index = 0; index < this.blocks.length; index++) {\n      var block = this.blocks[index];\n      block.addEntry(entry);\n    }\n  };\n  /**\n   * Remove an element from the octree\n   * @param entry defines the element to remove\n   */\n\n\n  Octree.prototype.removeMesh = function (entry) {\n    for (var index = 0; index < this.blocks.length; index++) {\n      var block = this.blocks[index];\n      block.removeEntry(entry);\n    }\n  };\n  /**\n   * Selects an array of meshes within the frustum\n   * @param frustumPlanes The frustum planes to use which will select all meshes within it\n   * @param allowDuplicate If duplicate objects are allowed in the resulting object array\n   * @returns array of meshes within the frustum\n   */\n\n\n  Octree.prototype.select = function (frustumPlanes, allowDuplicate) {\n    this._selectionContent.reset();\n\n    for (var index = 0; index < this.blocks.length; index++) {\n      var block = this.blocks[index];\n      block.select(frustumPlanes, this._selectionContent, allowDuplicate);\n    }\n\n    if (allowDuplicate) {\n      this._selectionContent.concat(this.dynamicContent);\n    } else {\n      this._selectionContent.concatWithNoDuplicate(this.dynamicContent);\n    }\n\n    return this._selectionContent;\n  };\n  /**\n   * Test if the octree intersect with the given bounding sphere and if yes, then add its content to the selection array\n   * @param sphereCenter defines the bounding sphere center\n   * @param sphereRadius defines the bounding sphere radius\n   * @param allowDuplicate defines if the selection array can contains duplicated entries\n   * @returns an array of objects that intersect the sphere\n   */\n\n\n  Octree.prototype.intersects = function (sphereCenter, sphereRadius, allowDuplicate) {\n    this._selectionContent.reset();\n\n    for (var index = 0; index < this.blocks.length; index++) {\n      var block = this.blocks[index];\n      block.intersects(sphereCenter, sphereRadius, this._selectionContent, allowDuplicate);\n    }\n\n    if (allowDuplicate) {\n      this._selectionContent.concat(this.dynamicContent);\n    } else {\n      this._selectionContent.concatWithNoDuplicate(this.dynamicContent);\n    }\n\n    return this._selectionContent;\n  };\n  /**\n   * Test if the octree intersect with the given ray and if yes, then add its content to resulting array\n   * @param ray defines the ray to test with\n   * @returns array of intersected objects\n   */\n\n\n  Octree.prototype.intersectsRay = function (ray) {\n    this._selectionContent.reset();\n\n    for (var index = 0; index < this.blocks.length; index++) {\n      var block = this.blocks[index];\n      block.intersectsRay(ray, this._selectionContent);\n    }\n\n    this._selectionContent.concatWithNoDuplicate(this.dynamicContent);\n\n    return this._selectionContent;\n  };\n  /**\n   * Adds a mesh into the octree block if it intersects the block\n   * @param entry\n   * @param block\n   */\n\n\n  Octree.CreationFuncForMeshes = function (entry, block) {\n    var boundingInfo = entry.getBoundingInfo();\n\n    if (!entry.isBlocked && boundingInfo.boundingBox.intersectsMinMax(block.minPoint, block.maxPoint)) {\n      block.entries.push(entry);\n    }\n  };\n  /**\n   * Adds a submesh into the octree block if it intersects the block\n   * @param entry\n   * @param block\n   */\n\n\n  Octree.CreationFuncForSubMeshes = function (entry, block) {\n    var boundingInfo = entry.getBoundingInfo();\n\n    if (boundingInfo.boundingBox.intersectsMinMax(block.minPoint, block.maxPoint)) {\n      block.entries.push(entry);\n    }\n  };\n\n  return Octree;\n}();\n\nexport { Octree };","map":{"version":3,"mappings":";;;AACA,SAASA,qBAAT,QAAsC,0BAAtC;AAKA,SAASC,WAAT,QAA4B,kBAA5B;AAGA;;;;;AAIA;AAAA;AAAA;AAcI;;;;;;;AAOA,kBACIC,YADJ,EAEIC,gBAFJ;AAGI;AACOC,UAJX,EAIuB;AAAZ;AAAAA;AAAY;;AAAZ;AApBX;;;;AAGO,0BAAiB,IAAIC,KAAJ,EAAjB;AAmBH,SAAKC,iBAAL,GAAyBH,gBAAgB,IAAI,EAA7C;AACA,SAAKI,iBAAL,GAAyB,IAAIP,qBAAJ,CAA6B,IAA7B,CAAzB;AACA,SAAKQ,aAAL,GAAqBN,YAArB;AACH,GA9BL,CAgCI;;AACA;;;;;;;;AAMOO,4BAAP,UAAcC,QAAd,EAAiCC,QAAjC,EAAoDC,OAApD,EAAgE;AAC5DX,eAAW,CAACY,aAAZ,CAA0BH,QAA1B,EAAoCC,QAApC,EAA8CC,OAA9C,EAAuD,KAAKN,iBAA5D,EAA+E,CAA/E,EAAkF,KAAKF,QAAvF,EAAiG,IAAjG,EAAuG,KAAKI,aAA5G;AACH,GAFM;AAIP;;;;;;AAIOC,6BAAP,UAAeK,KAAf,EAAuB;AACnB,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKC,MAAL,CAAYC,MAAxC,EAAgDF,KAAK,EAArD,EAAyD;AACrD,UAAMG,KAAK,GAAG,KAAKF,MAAL,CAAYD,KAAZ,CAAd;AACAG,WAAK,CAACC,QAAN,CAAeL,KAAf;AACH;AACJ,GALM;AAOP;;;;;;AAIOL,gCAAP,UAAkBK,KAAlB,EAA0B;AACtB,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKC,MAAL,CAAYC,MAAxC,EAAgDF,KAAK,EAArD,EAAyD;AACrD,UAAMG,KAAK,GAAG,KAAKF,MAAL,CAAYD,KAAZ,CAAd;AACAG,WAAK,CAACE,WAAN,CAAkBN,KAAlB;AACH;AACJ,GALM;AAOP;;;;;;;;AAMOL,4BAAP,UAAcY,aAAd,EAAsCC,cAAtC,EAA8D;AAC1D,SAAKf,iBAAL,CAAuBgB,KAAvB;;AAEA,SAAK,IAAIR,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKC,MAAL,CAAYC,MAAxC,EAAgDF,KAAK,EAArD,EAAyD;AACrD,UAAMG,KAAK,GAAG,KAAKF,MAAL,CAAYD,KAAZ,CAAd;AACAG,WAAK,CAACM,MAAN,CAAaH,aAAb,EAA4B,KAAKd,iBAAjC,EAAoDe,cAApD;AACH;;AAED,QAAIA,cAAJ,EAAoB;AAChB,WAAKf,iBAAL,CAAuBkB,MAAvB,CAA8B,KAAKC,cAAnC;AACH,KAFD,MAEO;AACH,WAAKnB,iBAAL,CAAuBoB,qBAAvB,CAA6C,KAAKD,cAAlD;AACH;;AAED,WAAO,KAAKnB,iBAAZ;AACH,GAfM;AAiBP;;;;;;;;;AAOOE,gCAAP,UAAkBmB,YAAlB,EAAyCC,YAAzC,EAA+DP,cAA/D,EAAuF;AACnF,SAAKf,iBAAL,CAAuBgB,KAAvB;;AAEA,SAAK,IAAIR,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKC,MAAL,CAAYC,MAAxC,EAAgDF,KAAK,EAArD,EAAyD;AACrD,UAAMG,KAAK,GAAG,KAAKF,MAAL,CAAYD,KAAZ,CAAd;AACAG,WAAK,CAACY,UAAN,CAAiBF,YAAjB,EAA+BC,YAA/B,EAA6C,KAAKtB,iBAAlD,EAAqEe,cAArE;AACH;;AAED,QAAIA,cAAJ,EAAoB;AAChB,WAAKf,iBAAL,CAAuBkB,MAAvB,CAA8B,KAAKC,cAAnC;AACH,KAFD,MAEO;AACH,WAAKnB,iBAAL,CAAuBoB,qBAAvB,CAA6C,KAAKD,cAAlD;AACH;;AAED,WAAO,KAAKnB,iBAAZ;AACH,GAfM;AAiBP;;;;;;;AAKOE,mCAAP,UAAqBsB,GAArB,EAA6B;AACzB,SAAKxB,iBAAL,CAAuBgB,KAAvB;;AAEA,SAAK,IAAIR,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKC,MAAL,CAAYC,MAAxC,EAAgDF,KAAK,EAArD,EAAyD;AACrD,UAAMG,KAAK,GAAG,KAAKF,MAAL,CAAYD,KAAZ,CAAd;AACAG,WAAK,CAACc,aAAN,CAAoBD,GAApB,EAAyB,KAAKxB,iBAA9B;AACH;;AAED,SAAKA,iBAAL,CAAuBoB,qBAAvB,CAA6C,KAAKD,cAAlD;;AAEA,WAAO,KAAKnB,iBAAZ;AACH,GAXM;AAaP;;;;;;;AAKcE,iCAAwB,UAACK,KAAD,EAAsBI,KAAtB,EAAsD;AACxF,QAAMe,YAAY,GAAGnB,KAAK,CAACoB,eAAN,EAArB;;AACA,QAAI,CAACpB,KAAK,CAACqB,SAAP,IAAoBF,YAAY,CAACG,WAAb,CAAyBC,gBAAzB,CAA0CnB,KAAK,CAACoB,QAAhD,EAA0DpB,KAAK,CAACqB,QAAhE,CAAxB,EAAmG;AAC/FrB,WAAK,CAACN,OAAN,CAAc4B,IAAd,CAAmB1B,KAAnB;AACH;AACJ,GALa;AAOd;;;;;;;AAKcL,oCAA2B,UAACK,KAAD,EAAiBI,KAAjB,EAA4C;AACjF,QAAMe,YAAY,GAAGnB,KAAK,CAACoB,eAAN,EAArB;;AACA,QAAID,YAAY,CAACG,WAAb,CAAyBC,gBAAzB,CAA0CnB,KAAK,CAACoB,QAAhD,EAA0DpB,KAAK,CAACqB,QAAhE,CAAJ,EAA+E;AAC3ErB,WAAK,CAACN,OAAN,CAAc4B,IAAd,CAAmB1B,KAAnB;AACH;AACJ,GALa;;AAMlB;AAAC,CAzJD;;SAAaL","names":["SmartArrayNoDuplicate","OctreeBlock","creationFunc","maxBlockCapacity","maxDepth","Array","_maxBlockCapacity","_selectionContent","_creationFunc","Octree","worldMin","worldMax","entries","_CreateBlocks","entry","index","blocks","length","block","addEntry","removeEntry","frustumPlanes","allowDuplicate","reset","select","concat","dynamicContent","concatWithNoDuplicate","sphereCenter","sphereRadius","intersects","ray","intersectsRay","boundingInfo","getBoundingInfo","isBlocked","boundingBox","intersectsMinMax","minPoint","maxPoint","push"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Culling/Octrees/octree.ts"],"sourcesContent":["import type { SmartArray } from \"../../Misc/smartArray\";\r\nimport { SmartArrayNoDuplicate } from \"../../Misc/smartArray\";\r\nimport type { Vector3 } from \"../../Maths/math.vector\";\r\nimport type { SubMesh } from \"../../Meshes/subMesh\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { Ray } from \"../../Culling/ray\";\r\nimport { OctreeBlock } from \"./octreeBlock\";\r\nimport type { Plane } from \"../../Maths/math.plane\";\r\n\r\n/**\r\n * Octrees are a really powerful data structure that can quickly select entities based on space coordinates.\r\n * @see https://doc.babylonjs.com/how_to/optimizing_your_scene_with_octrees\r\n */\r\nexport class Octree<T> {\r\n    /**\r\n     * Blocks within the octree containing objects\r\n     */\r\n    public blocks: Array<OctreeBlock<T>>;\r\n    /**\r\n     * Content stored in the octree\r\n     */\r\n    public dynamicContent = new Array<T>();\r\n\r\n    private _maxBlockCapacity: number;\r\n    private _selectionContent: SmartArrayNoDuplicate<T>;\r\n    private _creationFunc: (entry: T, block: OctreeBlock<T>) => void;\r\n\r\n    /**\r\n     * Creates a octree\r\n     * @see https://doc.babylonjs.com/how_to/optimizing_your_scene_with_octrees\r\n     * @param creationFunc function to be used to instantiate the octree\r\n     * @param maxBlockCapacity defines the maximum number of meshes you want on your octree's leaves (default: 64)\r\n     * @param maxDepth defines the maximum depth (sub-levels) for your octree. Default value is 2, which means 8 8 8 = 512 blocks :) (This parameter takes precedence over capacity.)\r\n     */\r\n    constructor(\r\n        creationFunc: (entry: T, block: OctreeBlock<T>) => void,\r\n        maxBlockCapacity?: number,\r\n        /** Defines the maximum depth (sub-levels) for your octree. Default value is 2, which means 8 8 8 = 512 blocks :) (This parameter takes precedence over capacity.) */\r\n        public maxDepth = 2\r\n    ) {\r\n        this._maxBlockCapacity = maxBlockCapacity || 64;\r\n        this._selectionContent = new SmartArrayNoDuplicate<T>(1024);\r\n        this._creationFunc = creationFunc;\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * Updates the octree by adding blocks for the passed in meshes within the min and max world parameters\r\n     * @param worldMin worldMin for the octree blocks var blockSize = new Vector3((worldMax.x - worldMin.x) / 2, (worldMax.y - worldMin.y) / 2, (worldMax.z - worldMin.z) / 2);\r\n     * @param worldMax worldMax for the octree blocks var blockSize = new Vector3((worldMax.x - worldMin.x) / 2, (worldMax.y - worldMin.y) / 2, (worldMax.z - worldMin.z) / 2);\r\n     * @param entries meshes to be added to the octree blocks\r\n     */\r\n    public update(worldMin: Vector3, worldMax: Vector3, entries: T[]): void {\r\n        OctreeBlock._CreateBlocks(worldMin, worldMax, entries, this._maxBlockCapacity, 0, this.maxDepth, this, this._creationFunc);\r\n    }\r\n\r\n    /**\r\n     * Adds a mesh to the octree\r\n     * @param entry Mesh to add to the octree\r\n     */\r\n    public addMesh(entry: T): void {\r\n        for (let index = 0; index < this.blocks.length; index++) {\r\n            const block = this.blocks[index];\r\n            block.addEntry(entry);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove an element from the octree\r\n     * @param entry defines the element to remove\r\n     */\r\n    public removeMesh(entry: T): void {\r\n        for (let index = 0; index < this.blocks.length; index++) {\r\n            const block = this.blocks[index];\r\n            block.removeEntry(entry);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Selects an array of meshes within the frustum\r\n     * @param frustumPlanes The frustum planes to use which will select all meshes within it\r\n     * @param allowDuplicate If duplicate objects are allowed in the resulting object array\r\n     * @returns array of meshes within the frustum\r\n     */\r\n    public select(frustumPlanes: Plane[], allowDuplicate?: boolean): SmartArray<T> {\r\n        this._selectionContent.reset();\r\n\r\n        for (let index = 0; index < this.blocks.length; index++) {\r\n            const block = this.blocks[index];\r\n            block.select(frustumPlanes, this._selectionContent, allowDuplicate);\r\n        }\r\n\r\n        if (allowDuplicate) {\r\n            this._selectionContent.concat(this.dynamicContent);\r\n        } else {\r\n            this._selectionContent.concatWithNoDuplicate(this.dynamicContent);\r\n        }\r\n\r\n        return this._selectionContent;\r\n    }\r\n\r\n    /**\r\n     * Test if the octree intersect with the given bounding sphere and if yes, then add its content to the selection array\r\n     * @param sphereCenter defines the bounding sphere center\r\n     * @param sphereRadius defines the bounding sphere radius\r\n     * @param allowDuplicate defines if the selection array can contains duplicated entries\r\n     * @returns an array of objects that intersect the sphere\r\n     */\r\n    public intersects(sphereCenter: Vector3, sphereRadius: number, allowDuplicate?: boolean): SmartArray<T> {\r\n        this._selectionContent.reset();\r\n\r\n        for (let index = 0; index < this.blocks.length; index++) {\r\n            const block = this.blocks[index];\r\n            block.intersects(sphereCenter, sphereRadius, this._selectionContent, allowDuplicate);\r\n        }\r\n\r\n        if (allowDuplicate) {\r\n            this._selectionContent.concat(this.dynamicContent);\r\n        } else {\r\n            this._selectionContent.concatWithNoDuplicate(this.dynamicContent);\r\n        }\r\n\r\n        return this._selectionContent;\r\n    }\r\n\r\n    /**\r\n     * Test if the octree intersect with the given ray and if yes, then add its content to resulting array\r\n     * @param ray defines the ray to test with\r\n     * @returns array of intersected objects\r\n     */\r\n    public intersectsRay(ray: Ray): SmartArray<T> {\r\n        this._selectionContent.reset();\r\n\r\n        for (let index = 0; index < this.blocks.length; index++) {\r\n            const block = this.blocks[index];\r\n            block.intersectsRay(ray, this._selectionContent);\r\n        }\r\n\r\n        this._selectionContent.concatWithNoDuplicate(this.dynamicContent);\r\n\r\n        return this._selectionContent;\r\n    }\r\n\r\n    /**\r\n     * Adds a mesh into the octree block if it intersects the block\r\n     * @param entry\r\n     * @param block\r\n     */\r\n    public static CreationFuncForMeshes = (entry: AbstractMesh, block: OctreeBlock<AbstractMesh>): void => {\r\n        const boundingInfo = entry.getBoundingInfo();\r\n        if (!entry.isBlocked && boundingInfo.boundingBox.intersectsMinMax(block.minPoint, block.maxPoint)) {\r\n            block.entries.push(entry);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Adds a submesh into the octree block if it intersects the block\r\n     * @param entry\r\n     * @param block\r\n     */\r\n    public static CreationFuncForSubMeshes = (entry: SubMesh, block: OctreeBlock<SubMesh>): void => {\r\n        const boundingInfo = entry.getBoundingInfo();\r\n        if (boundingInfo.boundingBox.intersectsMinMax(block.minPoint, block.maxPoint)) {\r\n            block.entries.push(entry);\r\n        }\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}