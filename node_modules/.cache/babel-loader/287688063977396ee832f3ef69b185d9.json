{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { Mesh } from \"../mesh.js\";\nimport { CreateSphere } from \"../Builders/sphereBuilder.js\";\nimport { CreateDisc } from \"./discBuilder.js\";\n/**\n * Creates a hemisphere mesh\n * @param name defines the name of the mesh\n * @param options defines the options used to create the mesh\n * @param options.segments\n * @param options.diameter\n * @param options.sideOrientation\n * @param scene defines the hosting scene\n * @returns the hemisphere mesh\n */\n\nexport function CreateHemisphere(name, options, scene) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (!options.diameter) {\n    options.diameter = 1;\n  }\n\n  if (!options.segments) {\n    options.segments = 16;\n  }\n\n  var halfSphere = CreateSphere(\"\", {\n    slice: 0.5,\n    diameter: options.diameter,\n    segments: options.segments\n  }, scene);\n  var disc = CreateDisc(\"\", {\n    radius: options.diameter / 2,\n    tessellation: options.segments * 3 + (4 - options.segments)\n  }, scene);\n  disc.rotation.x = -Math.PI / 2;\n  disc.parent = halfSphere;\n  var merged = Mesh.MergeMeshes([disc, halfSphere], true);\n  merged.name = name;\n  return merged;\n}\n/**\n * Class containing static functions to help procedurally build meshes\n * @deprecated use the function directly from the module\n */\n\nexport var HemisphereBuilder = {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  CreateHemisphere: CreateHemisphere\n};\n/**\n * Creates a hemispheric light\n * @param name\n * @param segments\n * @param diameter\n * @param scene\n */\n\nMesh.CreateHemisphere = function (name, segments, diameter, scene) {\n  var options = {\n    segments: segments,\n    diameter: diameter\n  };\n  return CreateHemisphere(name, options, scene);\n};","map":{"version":3,"mappings":";AAAA,SAASA,IAAT,QAAqB,YAArB;AAEA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA;;;;;;;;;;;AAUA,OAAM,SAAUC,gBAAV,CAA2BC,IAA3B,EAAyCC,OAAzC,EAA2HC,KAA3H,EAAwI;AAA/F;AAAAD;AAAgF;;AAC3H,MAAI,CAACA,OAAO,CAACE,QAAb,EAAuB;AACnBF,WAAO,CAACE,QAAR,GAAmB,CAAnB;AACH;;AACD,MAAI,CAACF,OAAO,CAACG,QAAb,EAAuB;AACnBH,WAAO,CAACG,QAAR,GAAmB,EAAnB;AACH;;AAED,MAAMC,UAAU,GAAGR,YAAY,CAAC,EAAD,EAAK;AAAES,SAAK,EAAE,GAAT;AAAcH,YAAQ,EAAEF,OAAO,CAACE,QAAhC;AAA0CC,YAAQ,EAAEH,OAAO,CAACG;AAA5D,GAAL,EAA6EF,KAA7E,CAA/B;AACA,MAAMK,IAAI,GAAGT,UAAU,CAAC,EAAD,EAAK;AAAEU,UAAM,EAAEP,OAAO,CAACE,QAAR,GAAmB,CAA7B;AAAgCM,gBAAY,EAAER,OAAO,CAACG,QAAR,GAAmB,CAAnB,IAAwB,IAAIH,OAAO,CAACG,QAApC;AAA9C,GAAL,EAAoGF,KAApG,CAAvB;AACAK,MAAI,CAACG,QAAL,CAAcC,CAAd,GAAkB,CAACC,IAAI,CAACC,EAAN,GAAW,CAA7B;AACAN,MAAI,CAACO,MAAL,GAAcT,UAAd;AAEA,MAAMU,MAAM,GAASnB,IAAI,CAACoB,WAAL,CAAiB,CAACT,IAAD,EAAOF,UAAP,CAAjB,EAAqC,IAArC,CAArB;AACAU,QAAM,CAACf,IAAP,GAAcA,IAAd;AAEA,SAAOe,MAAP;AACH;AACD;;;;;AAIA,OAAO,IAAME,iBAAiB,GAAG;AAC7B;AACAlB,kBAAgB;AAFa,CAA1B;AAKP;;;;;;;;AAOCH,IAAY,CAACG,gBAAb,GAAgC,UAACC,IAAD,EAAeI,QAAf,EAAiCD,QAAjC,EAAmDD,KAAnD,EAAgE;AAC7F,MAAMD,OAAO,GAAG;AACZG,YAAQ,EAAEA,QADE;AAEZD,YAAQ,EAAEA;AAFE,GAAhB;AAKA,SAAOJ,gBAAgB,CAACC,IAAD,EAAOC,OAAP,EAAgBC,KAAhB,CAAvB;AACH,CAPA","names":["Mesh","CreateSphere","CreateDisc","CreateHemisphere","name","options","scene","diameter","segments","halfSphere","slice","disc","radius","tessellation","rotation","x","Math","PI","parent","merged","MergeMeshes","HemisphereBuilder"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Meshes/Builders/hemisphereBuilder.ts"],"sourcesContent":["import { Mesh } from \"../mesh\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { CreateSphere } from \"../Builders/sphereBuilder\";\r\nimport { CreateDisc } from \"./discBuilder\";\r\n\r\n/**\r\n * Creates a hemisphere mesh\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.segments\r\n * @param options.diameter\r\n * @param options.sideOrientation\r\n * @param scene defines the hosting scene\r\n * @returns the hemisphere mesh\r\n */\r\nexport function CreateHemisphere(name: string, options: { segments?: number; diameter?: number; sideOrientation?: number } = {}, scene?: Scene): Mesh {\r\n    if (!options.diameter) {\r\n        options.diameter = 1;\r\n    }\r\n    if (!options.segments) {\r\n        options.segments = 16;\r\n    }\r\n\r\n    const halfSphere = CreateSphere(\"\", { slice: 0.5, diameter: options.diameter, segments: options.segments }, scene);\r\n    const disc = CreateDisc(\"\", { radius: options.diameter / 2, tessellation: options.segments * 3 + (4 - options.segments) }, scene);\r\n    disc.rotation.x = -Math.PI / 2;\r\n    disc.parent = halfSphere;\r\n\r\n    const merged = <Mesh>Mesh.MergeMeshes([disc, halfSphere], true);\r\n    merged.name = name;\r\n\r\n    return merged;\r\n}\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use the function directly from the module\r\n */\r\nexport const HemisphereBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateHemisphere,\r\n};\r\n\r\n/**\r\n * Creates a hemispheric light\r\n * @param name\r\n * @param segments\r\n * @param diameter\r\n * @param scene\r\n */\r\n(Mesh as any).CreateHemisphere = (name: string, segments: number, diameter: number, scene?: Scene): Mesh => {\r\n    const options = {\r\n        segments: segments,\r\n        diameter: diameter,\r\n    };\r\n\r\n    return CreateHemisphere(name, options, scene);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}