{"ast":null,"code":"import \"core-js/modules/es.function.bind.js\";\nimport { __awaiter, __extends, __generator } from \"tslib\";\nimport { WebXRLayerWrapper } from \"../webXRLayerWrapper.js\";\nimport { WebXRLayerRenderTargetTextureProvider } from \"../webXRRenderTargetTextureProvider.js\";\n/**\n * Wraps XRWebGLLayer's created by Babylon Native.\n * @hidden\n */\n\nvar NativeXRLayerWrapper =\n/** @class */\nfunction (_super) {\n  __extends(NativeXRLayerWrapper, _super);\n\n  function NativeXRLayerWrapper(layer) {\n    var _this = _super.call(this, function () {\n      return layer.framebufferWidth;\n    }, function () {\n      return layer.framebufferHeight;\n    }, layer, \"XRWebGLLayer\", function (sessionManager) {\n      return new NativeXRLayerRenderTargetTextureProvider(sessionManager, _this);\n    }) || this;\n\n    _this.layer = layer;\n    return _this;\n  }\n\n  return NativeXRLayerWrapper;\n}(WebXRLayerWrapper);\n\nexport { NativeXRLayerWrapper };\n/**\n * Provides render target textures for layers created by Babylon Native.\n * @hidden\n */\n\nvar NativeXRLayerRenderTargetTextureProvider =\n/** @class */\nfunction (_super) {\n  __extends(NativeXRLayerRenderTargetTextureProvider, _super);\n\n  function NativeXRLayerRenderTargetTextureProvider(sessionManager, layerWrapper) {\n    var _this = _super.call(this, sessionManager.scene, layerWrapper) || this;\n\n    _this.layerWrapper = layerWrapper;\n    _this._nativeRTTProvider = navigator.xr.getNativeRenderTargetProvider(sessionManager.session, _this._createRenderTargetTexture.bind(_this), _this._destroyRenderTargetTexture.bind(_this));\n    _this._nativeLayer = layerWrapper.layer;\n    return _this;\n  }\n\n  NativeXRLayerRenderTargetTextureProvider.prototype.trySetViewportForView = function (viewport) {\n    viewport.x = 0;\n    viewport.y = 0;\n    viewport.width = 1;\n    viewport.height = 1;\n    return true;\n  };\n\n  NativeXRLayerRenderTargetTextureProvider.prototype.getRenderTargetTextureForEye = function (eye) {\n    // TODO (rgerd): Update the contract on the BabylonNative side to call this \"getRenderTargetTextureForEye\"\n    return this._nativeRTTProvider.getRenderTargetForEye(eye);\n  };\n\n  NativeXRLayerRenderTargetTextureProvider.prototype.getRenderTargetTextureForView = function (view) {\n    return this._nativeRTTProvider.getRenderTargetForEye(view.eye);\n  };\n\n  NativeXRLayerRenderTargetTextureProvider.prototype.getFramebufferDimensions = function () {\n    return {\n      framebufferWidth: this._nativeLayer.framebufferWidth,\n      framebufferHeight: this._nativeLayer.framebufferHeight\n    };\n  };\n\n  return NativeXRLayerRenderTargetTextureProvider;\n}(WebXRLayerRenderTargetTextureProvider);\n\nexport { NativeXRLayerRenderTargetTextureProvider };\n/**\n * Creates the xr layer that will be used as the xr session's base layer.\n * @hidden\n */\n\nvar NativeXRRenderTarget =\n/** @class */\nfunction () {\n  function NativeXRRenderTarget(_xrSessionManager) {\n    this._nativeRenderTarget = navigator.xr.getWebXRRenderTarget(_xrSessionManager.scene.getEngine());\n  }\n\n  NativeXRRenderTarget.prototype.initializeXRLayerAsync = function (xrSession) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._nativeRenderTarget.initializeXRLayerAsync(xrSession)];\n\n          case 1:\n            _a.sent();\n\n            this.xrLayer = this._nativeRenderTarget.xrLayer;\n            return [2\n            /*return*/\n            , this.xrLayer];\n        }\n      });\n    });\n  };\n\n  NativeXRRenderTarget.prototype.dispose = function () {\n    /* empty */\n  };\n\n  return NativeXRRenderTarget;\n}();\n\nexport { NativeXRRenderTarget };","map":{"version":3,"mappings":";;AAGA,SAASA,iBAAT,QAAkC,yBAAlC;AACA,SAASC,qCAAT,QAAsD,wCAAtD;AAIA;;;;;AAIA;AAAA;AAAA;AAA0CC;;AACtC,gCAA4BC,KAA5B,EAA+C;AAA/C,gBACIC,kBACI;AAAM,kBAAK,CAACC,gBAAN;AAAsB,KADhC,EAEI;AAAM,kBAAK,CAACC,iBAAN;AAAuB,KAFjC,EAGIH,KAHJ,EAII,cAJJ,EAKI,UAACI,cAAD,EAAe;AAAK,iBAAIC,wCAAJ,CAA6CD,cAA7C,EAA6DE,KAA7D;AAAkE,KAL1F,KAMC,IAPL;;AAA4BA;;AAQ3B;;AACL;AAAC,CAVD,CAA0CT,iBAA1C;;;AAYA;;;;;AAIA;AAAA;AAAA;AAA8DE;;AAI1D,oDAAYK,cAAZ,EAAiEG,YAAjE,EAAmG;AAAnG,gBACIN,kBAAMG,cAAc,CAACI,KAArB,EAA4BD,YAA5B,KAAyC,IAD7C;;AAAiED;AAE7DA,SAAI,CAACG,kBAAL,GAA2BC,SAAiB,CAACC,EAAlB,CAAqBC,6BAArB,CACvBR,cAAc,CAACS,OADQ,EAEvBP,KAAI,CAACQ,0BAAL,CAAgCC,IAAhC,CAAqCT,KAArC,CAFuB,EAGvBA,KAAI,CAACU,2BAAL,CAAiCD,IAAjC,CAAsCT,KAAtC,CAHuB,CAA3B;AAKAA,SAAI,CAACW,YAAL,GAAoBV,YAAY,CAACP,KAAjC;;AACH;;AAEMK,6EAAP,UAA6Ba,QAA7B,EAA+C;AAC3CA,YAAQ,CAACC,CAAT,GAAa,CAAb;AACAD,YAAQ,CAACE,CAAT,GAAa,CAAb;AACAF,YAAQ,CAACG,KAAT,GAAiB,CAAjB;AACAH,YAAQ,CAACI,MAAT,GAAkB,CAAlB;AACA,WAAO,IAAP;AACH,GANM;;AAQAjB,oFAAP,UAAoCkB,GAApC,EAA8C;AAC1C;AACA,WAAQ,KAAKd,kBAAL,CAAgCe,qBAAhC,CAAsDD,GAAtD,CAAR;AACH,GAHM;;AAKAlB,qFAAP,UAAqCoB,IAArC,EAAiD;AAC7C,WAAQ,KAAKhB,kBAAL,CAAgCe,qBAAhC,CAAsDC,IAAI,CAACF,GAA3D,CAAR;AACH,GAFM;;AAIAlB,gFAAP;AACI,WAAO;AACHH,sBAAgB,EAAE,KAAKe,YAAL,CAAkBf,gBADjC;AAEHC,uBAAiB,EAAE,KAAKc,YAAL,CAAkBd;AAFlC,KAAP;AAIH,GALM;;AAMX;AAAC,CArCD,CAA8DL,qCAA9D;;;AAuCA;;;;;AAIA;AAAA;AAAA;AAMI,gCAAY4B,iBAAZ,EAAkD;AAC9C,SAAKC,mBAAL,GAA4BjB,SAAiB,CAACC,EAAlB,CAAqBiB,oBAArB,CAA0CF,iBAAiB,CAAClB,KAAlB,CAAwBqB,SAAxB,EAA1C,CAA5B;AACH;;AAEYC,0DAAb,UAAoCC,SAApC,EAAwD;;;;;AACpD;AAAA;AAAA,cAAM,KAAKJ,mBAAL,CAAyBK,sBAAzB,CAAgDD,SAAhD,CAAN;;;AAAAE;;AACA,iBAAKC,OAAL,GAAe,KAAKP,mBAAL,CAAyBO,OAAxC;AACA;AAAA;AAAA,cAAO,KAAKA,OAAZ;;;;AACH,GAJY;;AAMbJ;AACI;AACH,GAFD;;AAGJ;AAAC,CAnBD","names":["WebXRLayerWrapper","WebXRLayerRenderTargetTextureProvider","__extends","layer","_super","framebufferWidth","framebufferHeight","sessionManager","NativeXRLayerRenderTargetTextureProvider","_this","layerWrapper","scene","_nativeRTTProvider","navigator","xr","getNativeRenderTargetProvider","session","_createRenderTargetTexture","bind","_destroyRenderTargetTexture","_nativeLayer","viewport","x","y","width","height","eye","getRenderTargetForEye","view","_xrSessionManager","_nativeRenderTarget","getWebXRRenderTarget","getEngine","NativeXRRenderTarget","xrSession","initializeXRLayerAsync","_a","xrLayer"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/XR/native/nativeXRRenderTarget.ts"],"sourcesContent":["import type { RenderTargetTexture } from \"../../Materials/Textures/renderTargetTexture\";\r\nimport type { Viewport } from \"../../Maths/math.viewport\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { WebXRLayerWrapper } from \"../webXRLayerWrapper\";\r\nimport { WebXRLayerRenderTargetTextureProvider } from \"../webXRRenderTargetTextureProvider\";\r\nimport type { WebXRSessionManager } from \"../webXRSessionManager\";\r\nimport type { WebXRRenderTarget } from \"../webXRTypes\";\r\n\r\n/**\r\n * Wraps XRWebGLLayer's created by Babylon Native.\r\n * @hidden\r\n */\r\nexport class NativeXRLayerWrapper extends WebXRLayerWrapper {\r\n    constructor(public readonly layer: XRWebGLLayer) {\r\n        super(\r\n            () => layer.framebufferWidth,\r\n            () => layer.framebufferHeight,\r\n            layer,\r\n            \"XRWebGLLayer\",\r\n            (sessionManager) => new NativeXRLayerRenderTargetTextureProvider(sessionManager, this)\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Provides render target textures for layers created by Babylon Native.\r\n * @hidden\r\n */\r\nexport class NativeXRLayerRenderTargetTextureProvider extends WebXRLayerRenderTargetTextureProvider {\r\n    private _nativeRTTProvider: WebXRLayerRenderTargetTextureProvider;\r\n    private _nativeLayer: XRWebGLLayer;\r\n\r\n    constructor(sessionManager: WebXRSessionManager, public readonly layerWrapper: NativeXRLayerWrapper) {\r\n        super(sessionManager.scene, layerWrapper);\r\n        this._nativeRTTProvider = (navigator as any).xr.getNativeRenderTargetProvider(\r\n            sessionManager.session,\r\n            this._createRenderTargetTexture.bind(this),\r\n            this._destroyRenderTargetTexture.bind(this)\r\n        );\r\n        this._nativeLayer = layerWrapper.layer;\r\n    }\r\n\r\n    public trySetViewportForView(viewport: Viewport): boolean {\r\n        viewport.x = 0;\r\n        viewport.y = 0;\r\n        viewport.width = 1;\r\n        viewport.height = 1;\r\n        return true;\r\n    }\r\n\r\n    public getRenderTargetTextureForEye(eye: XREye): Nullable<RenderTargetTexture> {\r\n        // TODO (rgerd): Update the contract on the BabylonNative side to call this \"getRenderTargetTextureForEye\"\r\n        return (this._nativeRTTProvider as any).getRenderTargetForEye(eye);\r\n    }\r\n\r\n    public getRenderTargetTextureForView(view: XRView): Nullable<RenderTargetTexture> {\r\n        return (this._nativeRTTProvider as any).getRenderTargetForEye(view.eye);\r\n    }\r\n\r\n    public getFramebufferDimensions(): Nullable<{ framebufferWidth: number; framebufferHeight: number }> {\r\n        return {\r\n            framebufferWidth: this._nativeLayer.framebufferWidth,\r\n            framebufferHeight: this._nativeLayer.framebufferHeight,\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Creates the xr layer that will be used as the xr session's base layer.\r\n * @hidden\r\n */\r\nexport class NativeXRRenderTarget implements WebXRRenderTarget {\r\n    public canvasContext: WebGLRenderingContext;\r\n    public xrLayer: Nullable<XRWebGLLayer>;\r\n\r\n    private _nativeRenderTarget: WebXRRenderTarget;\r\n\r\n    constructor(_xrSessionManager: WebXRSessionManager) {\r\n        this._nativeRenderTarget = (navigator as any).xr.getWebXRRenderTarget(_xrSessionManager.scene.getEngine());\r\n    }\r\n\r\n    public async initializeXRLayerAsync(xrSession: XRSession): Promise<XRWebGLLayer> {\r\n        await this._nativeRenderTarget.initializeXRLayerAsync(xrSession);\r\n        this.xrLayer = this._nativeRenderTarget.xrLayer!;\r\n        return this.xrLayer;\r\n    }\r\n\r\n    dispose(): void {\r\n        /* empty */\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}