{"ast":null,"code":"import \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport { Scalar } from \"./math.scalar.js\";\nimport { ToLinearSpace, ToGammaSpace } from \"./math.constants.js\";\nimport { ArrayTools } from \"../Misc/arrayTools.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\n/**\n * Class used to hold a RGB color\n */\n\nvar Color3 =\n/** @class */\nfunction () {\n  /**\n   * Creates a new Color3 object from red, green, blue values, all between 0 and 1\n   * @param r defines the red component (between 0 and 1, default is 0)\n   * @param g defines the green component (between 0 and 1, default is 0)\n   * @param b defines the blue component (between 0 and 1, default is 0)\n   */\n  function Color3(\n  /**\n   * Defines the red component (between 0 and 1, default is 0)\n   */\n  r,\n  /**\n   * Defines the green component (between 0 and 1, default is 0)\n   */\n  g,\n  /**\n   * Defines the blue component (between 0 and 1, default is 0)\n   */\n  b) {\n    if (r === void 0) {\n      r = 0;\n    }\n\n    if (g === void 0) {\n      g = 0;\n    }\n\n    if (b === void 0) {\n      b = 0;\n    }\n\n    this.r = r;\n    this.g = g;\n    this.b = b;\n  }\n  /**\n   * Creates a string with the Color3 current values\n   * @returns the string representation of the Color3 object\n   */\n\n\n  Color3.prototype.toString = function () {\n    return \"{R: \" + this.r + \" G:\" + this.g + \" B:\" + this.b + \"}\";\n  };\n  /**\n   * Returns the string \"Color3\"\n   * @returns \"Color3\"\n   */\n\n\n  Color3.prototype.getClassName = function () {\n    return \"Color3\";\n  };\n  /**\n   * Compute the Color3 hash code\n   * @returns an unique number that can be used to hash Color3 objects\n   */\n\n\n  Color3.prototype.getHashCode = function () {\n    var hash = this.r * 255 | 0;\n    hash = hash * 397 ^ (this.g * 255 | 0);\n    hash = hash * 397 ^ (this.b * 255 | 0);\n    return hash;\n  }; // Operators\n\n  /**\n   * Stores in the given array from the given starting index the red, green, blue values as successive elements\n   * @param array defines the array where to store the r,g,b components\n   * @param index defines an optional index in the target array to define where to start storing values\n   * @returns the current Color3 object\n   */\n\n\n  Color3.prototype.toArray = function (array, index) {\n    if (index === void 0) {\n      index = 0;\n    }\n\n    array[index] = this.r;\n    array[index + 1] = this.g;\n    array[index + 2] = this.b;\n    return this;\n  };\n  /**\n   * Update the current color with values stored in an array from the starting index of the given array\n   * @param array defines the source array\n   * @param offset defines an offset in the source array\n   * @returns the current Color3 object\n   */\n\n\n  Color3.prototype.fromArray = function (array, offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    Color3.FromArrayToRef(array, offset, this);\n    return this;\n  };\n  /**\n   * Returns a new Color4 object from the current Color3 and the given alpha\n   * @param alpha defines the alpha component on the new Color4 object (default is 1)\n   * @returns a new Color4 object\n   */\n\n\n  Color3.prototype.toColor4 = function (alpha) {\n    if (alpha === void 0) {\n      alpha = 1;\n    }\n\n    return new Color4(this.r, this.g, this.b, alpha);\n  };\n  /**\n   * Returns a new array populated with 3 numeric elements : red, green and blue values\n   * @returns the new array\n   */\n\n\n  Color3.prototype.asArray = function () {\n    return [this.r, this.g, this.b];\n  };\n  /**\n   * Returns the luminance value\n   * @returns a float value\n   */\n\n\n  Color3.prototype.toLuminance = function () {\n    return this.r * 0.3 + this.g * 0.59 + this.b * 0.11;\n  };\n  /**\n   * Multiply each Color3 rgb values by the given Color3 rgb values in a new Color3 object\n   * @param otherColor defines the second operand\n   * @returns the new Color3 object\n   */\n\n\n  Color3.prototype.multiply = function (otherColor) {\n    return new Color3(this.r * otherColor.r, this.g * otherColor.g, this.b * otherColor.b);\n  };\n  /**\n   * Multiply the rgb values of the Color3 and the given Color3 and stores the result in the object \"result\"\n   * @param otherColor defines the second operand\n   * @param result defines the Color3 object where to store the result\n   * @returns the current Color3\n   */\n\n\n  Color3.prototype.multiplyToRef = function (otherColor, result) {\n    result.r = this.r * otherColor.r;\n    result.g = this.g * otherColor.g;\n    result.b = this.b * otherColor.b;\n    return this;\n  };\n  /**\n   * Determines equality between Color3 objects\n   * @param otherColor defines the second operand\n   * @returns true if the rgb values are equal to the given ones\n   */\n\n\n  Color3.prototype.equals = function (otherColor) {\n    return otherColor && this.r === otherColor.r && this.g === otherColor.g && this.b === otherColor.b;\n  };\n  /**\n   * Determines equality between the current Color3 object and a set of r,b,g values\n   * @param r defines the red component to check\n   * @param g defines the green component to check\n   * @param b defines the blue component to check\n   * @returns true if the rgb values are equal to the given ones\n   */\n\n\n  Color3.prototype.equalsFloats = function (r, g, b) {\n    return this.r === r && this.g === g && this.b === b;\n  };\n  /**\n   * Multiplies in place each rgb value by scale\n   * @param scale defines the scaling factor\n   * @returns the updated Color3\n   */\n\n\n  Color3.prototype.scale = function (scale) {\n    return new Color3(this.r * scale, this.g * scale, this.b * scale);\n  };\n  /**\n   * Multiplies the rgb values by scale and stores the result into \"result\"\n   * @param scale defines the scaling factor\n   * @param result defines the Color3 object where to store the result\n   * @returns the unmodified current Color3\n   */\n\n\n  Color3.prototype.scaleToRef = function (scale, result) {\n    result.r = this.r * scale;\n    result.g = this.g * scale;\n    result.b = this.b * scale;\n    return this;\n  };\n  /**\n   * Scale the current Color3 values by a factor and add the result to a given Color3\n   * @param scale defines the scale factor\n   * @param result defines color to store the result into\n   * @returns the unmodified current Color3\n   */\n\n\n  Color3.prototype.scaleAndAddToRef = function (scale, result) {\n    result.r += this.r * scale;\n    result.g += this.g * scale;\n    result.b += this.b * scale;\n    return this;\n  };\n  /**\n   * Clamps the rgb values by the min and max values and stores the result into \"result\"\n   * @param min defines minimum clamping value (default is 0)\n   * @param max defines maximum clamping value (default is 1)\n   * @param result defines color to store the result into\n   * @returns the original Color3\n   */\n\n\n  Color3.prototype.clampToRef = function (min, max, result) {\n    if (min === void 0) {\n      min = 0;\n    }\n\n    if (max === void 0) {\n      max = 1;\n    }\n\n    result.r = Scalar.Clamp(this.r, min, max);\n    result.g = Scalar.Clamp(this.g, min, max);\n    result.b = Scalar.Clamp(this.b, min, max);\n    return this;\n  };\n  /**\n   * Creates a new Color3 set with the added values of the current Color3 and of the given one\n   * @param otherColor defines the second operand\n   * @returns the new Color3\n   */\n\n\n  Color3.prototype.add = function (otherColor) {\n    return new Color3(this.r + otherColor.r, this.g + otherColor.g, this.b + otherColor.b);\n  };\n  /**\n   * Stores the result of the addition of the current Color3 and given one rgb values into \"result\"\n   * @param otherColor defines the second operand\n   * @param result defines Color3 object to store the result into\n   * @returns the unmodified current Color3\n   */\n\n\n  Color3.prototype.addToRef = function (otherColor, result) {\n    result.r = this.r + otherColor.r;\n    result.g = this.g + otherColor.g;\n    result.b = this.b + otherColor.b;\n    return this;\n  };\n  /**\n   * Returns a new Color3 set with the subtracted values of the given one from the current Color3\n   * @param otherColor defines the second operand\n   * @returns the new Color3\n   */\n\n\n  Color3.prototype.subtract = function (otherColor) {\n    return new Color3(this.r - otherColor.r, this.g - otherColor.g, this.b - otherColor.b);\n  };\n  /**\n   * Stores the result of the subtraction of given one from the current Color3 rgb values into \"result\"\n   * @param otherColor defines the second operand\n   * @param result defines Color3 object to store the result into\n   * @returns the unmodified current Color3\n   */\n\n\n  Color3.prototype.subtractToRef = function (otherColor, result) {\n    result.r = this.r - otherColor.r;\n    result.g = this.g - otherColor.g;\n    result.b = this.b - otherColor.b;\n    return this;\n  };\n  /**\n   * Copy the current object\n   * @returns a new Color3 copied the current one\n   */\n\n\n  Color3.prototype.clone = function () {\n    return new Color3(this.r, this.g, this.b);\n  };\n  /**\n   * Copies the rgb values from the source in the current Color3\n   * @param source defines the source Color3 object\n   * @returns the updated Color3 object\n   */\n\n\n  Color3.prototype.copyFrom = function (source) {\n    this.r = source.r;\n    this.g = source.g;\n    this.b = source.b;\n    return this;\n  };\n  /**\n   * Updates the Color3 rgb values from the given floats\n   * @param r defines the red component to read from\n   * @param g defines the green component to read from\n   * @param b defines the blue component to read from\n   * @returns the current Color3 object\n   */\n\n\n  Color3.prototype.copyFromFloats = function (r, g, b) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    return this;\n  };\n  /**\n   * Updates the Color3 rgb values from the given floats\n   * @param r defines the red component to read from\n   * @param g defines the green component to read from\n   * @param b defines the blue component to read from\n   * @returns the current Color3 object\n   */\n\n\n  Color3.prototype.set = function (r, g, b) {\n    return this.copyFromFloats(r, g, b);\n  };\n  /**\n   * Compute the Color3 hexadecimal code as a string\n   * @returns a string containing the hexadecimal representation of the Color3 object\n   */\n\n\n  Color3.prototype.toHexString = function () {\n    var intR = Math.round(this.r * 255);\n    var intG = Math.round(this.g * 255);\n    var intB = Math.round(this.b * 255);\n    return \"#\" + Scalar.ToHex(intR) + Scalar.ToHex(intG) + Scalar.ToHex(intB);\n  };\n  /**\n   * Computes a new Color3 converted from the current one to linear space\n   * @returns a new Color3 object\n   */\n\n\n  Color3.prototype.toLinearSpace = function () {\n    var convertedColor = new Color3();\n    this.toLinearSpaceToRef(convertedColor);\n    return convertedColor;\n  };\n  /**\n   * Converts current color in rgb space to HSV values\n   * @returns a new color3 representing the HSV values\n   */\n\n\n  Color3.prototype.toHSV = function () {\n    var result = new Color3();\n    this.toHSVToRef(result);\n    return result;\n  };\n  /**\n   * Converts current color in rgb space to HSV values\n   * @param result defines the Color3 where to store the HSV values\n   */\n\n\n  Color3.prototype.toHSVToRef = function (result) {\n    var r = this.r;\n    var g = this.g;\n    var b = this.b;\n    var max = Math.max(r, g, b);\n    var min = Math.min(r, g, b);\n    var h = 0;\n    var s = 0;\n    var v = max;\n    var dm = max - min;\n\n    if (max !== 0) {\n      s = dm / max;\n    }\n\n    if (max != min) {\n      if (max == r) {\n        h = (g - b) / dm;\n\n        if (g < b) {\n          h += 6;\n        }\n      } else if (max == g) {\n        h = (b - r) / dm + 2;\n      } else if (max == b) {\n        h = (r - g) / dm + 4;\n      }\n\n      h *= 60;\n    }\n\n    result.r = h;\n    result.g = s;\n    result.b = v;\n  };\n  /**\n   * Converts the Color3 values to linear space and stores the result in \"convertedColor\"\n   * @param convertedColor defines the Color3 object where to store the linear space version\n   * @returns the unmodified Color3\n   */\n\n\n  Color3.prototype.toLinearSpaceToRef = function (convertedColor) {\n    convertedColor.r = Math.pow(this.r, ToLinearSpace);\n    convertedColor.g = Math.pow(this.g, ToLinearSpace);\n    convertedColor.b = Math.pow(this.b, ToLinearSpace);\n    return this;\n  };\n  /**\n   * Computes a new Color3 converted from the current one to gamma space\n   * @returns a new Color3 object\n   */\n\n\n  Color3.prototype.toGammaSpace = function () {\n    var convertedColor = new Color3();\n    this.toGammaSpaceToRef(convertedColor);\n    return convertedColor;\n  };\n  /**\n   * Converts the Color3 values to gamma space and stores the result in \"convertedColor\"\n   * @param convertedColor defines the Color3 object where to store the gamma space version\n   * @returns the unmodified Color3\n   */\n\n\n  Color3.prototype.toGammaSpaceToRef = function (convertedColor) {\n    convertedColor.r = Math.pow(this.r, ToGammaSpace);\n    convertedColor.g = Math.pow(this.g, ToGammaSpace);\n    convertedColor.b = Math.pow(this.b, ToGammaSpace);\n    return this;\n  };\n  /**\n   * Convert Hue, saturation and value to a Color3 (RGB)\n   * @param hue defines the hue\n   * @param saturation defines the saturation\n   * @param value defines the value\n   * @param result defines the Color3 where to store the RGB values\n   */\n\n\n  Color3.HSVtoRGBToRef = function (hue, saturation, value, result) {\n    var chroma = value * saturation;\n    var h = hue / 60;\n    var x = chroma * (1 - Math.abs(h % 2 - 1));\n    var r = 0;\n    var g = 0;\n    var b = 0;\n\n    if (h >= 0 && h <= 1) {\n      r = chroma;\n      g = x;\n    } else if (h >= 1 && h <= 2) {\n      r = x;\n      g = chroma;\n    } else if (h >= 2 && h <= 3) {\n      g = chroma;\n      b = x;\n    } else if (h >= 3 && h <= 4) {\n      g = x;\n      b = chroma;\n    } else if (h >= 4 && h <= 5) {\n      r = x;\n      b = chroma;\n    } else if (h >= 5 && h <= 6) {\n      r = chroma;\n      b = x;\n    }\n\n    var m = value - chroma;\n    result.set(r + m, g + m, b + m);\n  };\n  /**\n   * Creates a new Color3 from the string containing valid hexadecimal values\n   * @param hex defines a string containing valid hexadecimal values\n   * @returns a new Color3 object\n   */\n\n\n  Color3.FromHexString = function (hex) {\n    if (hex.substring(0, 1) !== \"#\" || hex.length !== 7) {\n      return new Color3(0, 0, 0);\n    }\n\n    var r = parseInt(hex.substring(1, 3), 16);\n    var g = parseInt(hex.substring(3, 5), 16);\n    var b = parseInt(hex.substring(5, 7), 16);\n    return Color3.FromInts(r, g, b);\n  };\n  /**\n   * Creates a new Color3 from the starting index of the given array\n   * @param array defines the source array\n   * @param offset defines an offset in the source array\n   * @returns a new Color3 object\n   */\n\n\n  Color3.FromArray = function (array, offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    return new Color3(array[offset], array[offset + 1], array[offset + 2]);\n  };\n  /**\n   * Creates a new Color3 from the starting index element of the given array\n   * @param array defines the source array to read from\n   * @param offset defines the offset in the source array\n   * @param result defines the target Color3 object\n   */\n\n\n  Color3.FromArrayToRef = function (array, offset, result) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    result.r = array[offset];\n    result.g = array[offset + 1];\n    result.b = array[offset + 2];\n  };\n  /**\n   * Creates a new Color3 from integer values (< 256)\n   * @param r defines the red component to read from (value between 0 and 255)\n   * @param g defines the green component to read from (value between 0 and 255)\n   * @param b defines the blue component to read from (value between 0 and 255)\n   * @returns a new Color3 object\n   */\n\n\n  Color3.FromInts = function (r, g, b) {\n    return new Color3(r / 255.0, g / 255.0, b / 255.0);\n  };\n  /**\n   * Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\n   * @param start defines the start Color3 value\n   * @param end defines the end Color3 value\n   * @param amount defines the gradient value between start and end\n   * @returns a new Color3 object\n   */\n\n\n  Color3.Lerp = function (start, end, amount) {\n    var result = new Color3(0.0, 0.0, 0.0);\n    Color3.LerpToRef(start, end, amount, result);\n    return result;\n  };\n  /**\n   * Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\n   * @param left defines the start value\n   * @param right defines the end value\n   * @param amount defines the gradient factor\n   * @param result defines the Color3 object where to store the result\n   */\n\n\n  Color3.LerpToRef = function (left, right, amount, result) {\n    result.r = left.r + (right.r - left.r) * amount;\n    result.g = left.g + (right.g - left.g) * amount;\n    result.b = left.b + (right.b - left.b) * amount;\n  };\n  /**\n   * Returns a new Color3 located for \"amount\" (float) on the Hermite interpolation spline defined by the vectors \"value1\", \"tangent1\", \"value2\", \"tangent2\"\n   * @param value1 defines the first control point\n   * @param tangent1 defines the first tangent Color3\n   * @param value2 defines the second control point\n   * @param tangent2 defines the second tangent Color3\n   * @param amount defines the amount on the interpolation spline (between 0 and 1)\n   * @returns the new Color3\n   */\n\n\n  Color3.Hermite = function (value1, tangent1, value2, tangent2, amount) {\n    var squared = amount * amount;\n    var cubed = amount * squared;\n    var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n    var part2 = -2.0 * cubed + 3.0 * squared;\n    var part3 = cubed - 2.0 * squared + amount;\n    var part4 = cubed - squared;\n    var r = value1.r * part1 + value2.r * part2 + tangent1.r * part3 + tangent2.r * part4;\n    var g = value1.g * part1 + value2.g * part2 + tangent1.g * part3 + tangent2.g * part4;\n    var b = value1.b * part1 + value2.b * part2 + tangent1.b * part3 + tangent2.b * part4;\n    return new Color3(r, g, b);\n  };\n  /**\n   * Returns a new Color3 which is the 1st derivative of the Hermite spline defined by the colors \"value1\", \"value2\", \"tangent1\", \"tangent2\".\n   * @param value1 defines the first control point\n   * @param tangent1 defines the first tangent\n   * @param value2 defines the second control point\n   * @param tangent2 defines the second tangent\n   * @param time define where the derivative must be done\n   * @returns 1st derivative\n   */\n\n\n  Color3.Hermite1stDerivative = function (value1, tangent1, value2, tangent2, time) {\n    var result = Color3.Black();\n    this.Hermite1stDerivativeToRef(value1, tangent1, value2, tangent2, time, result);\n    return result;\n  };\n  /**\n   * Returns a new Color3 which is the 1st derivative of the Hermite spline defined by the colors \"value1\", \"value2\", \"tangent1\", \"tangent2\".\n   * @param value1 defines the first control point\n   * @param tangent1 defines the first tangent\n   * @param value2 defines the second control point\n   * @param tangent2 defines the second tangent\n   * @param time define where the derivative must be done\n   * @param result define where to store the derivative\n   */\n\n\n  Color3.Hermite1stDerivativeToRef = function (value1, tangent1, value2, tangent2, time, result) {\n    var t2 = time * time;\n    result.r = (t2 - time) * 6 * value1.r + (3 * t2 - 4 * time + 1) * tangent1.r + (-t2 + time) * 6 * value2.r + (3 * t2 - 2 * time) * tangent2.r;\n    result.g = (t2 - time) * 6 * value1.g + (3 * t2 - 4 * time + 1) * tangent1.g + (-t2 + time) * 6 * value2.g + (3 * t2 - 2 * time) * tangent2.g;\n    result.b = (t2 - time) * 6 * value1.b + (3 * t2 - 4 * time + 1) * tangent1.b + (-t2 + time) * 6 * value2.b + (3 * t2 - 2 * time) * tangent2.b;\n  };\n  /**\n   * Returns a Color3 value containing a red color\n   * @returns a new Color3 object\n   */\n\n\n  Color3.Red = function () {\n    return new Color3(1, 0, 0);\n  };\n  /**\n   * Returns a Color3 value containing a green color\n   * @returns a new Color3 object\n   */\n\n\n  Color3.Green = function () {\n    return new Color3(0, 1, 0);\n  };\n  /**\n   * Returns a Color3 value containing a blue color\n   * @returns a new Color3 object\n   */\n\n\n  Color3.Blue = function () {\n    return new Color3(0, 0, 1);\n  };\n  /**\n   * Returns a Color3 value containing a black color\n   * @returns a new Color3 object\n   */\n\n\n  Color3.Black = function () {\n    return new Color3(0, 0, 0);\n  };\n\n  Object.defineProperty(Color3, \"BlackReadOnly\", {\n    /**\n     * Gets a Color3 value containing a black color that must not be updated\n     */\n    get: function get() {\n      return Color3._BlackReadOnly;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Returns a Color3 value containing a white color\n   * @returns a new Color3 object\n   */\n\n  Color3.White = function () {\n    return new Color3(1, 1, 1);\n  };\n  /**\n   * Returns a Color3 value containing a purple color\n   * @returns a new Color3 object\n   */\n\n\n  Color3.Purple = function () {\n    return new Color3(0.5, 0, 0.5);\n  };\n  /**\n   * Returns a Color3 value containing a magenta color\n   * @returns a new Color3 object\n   */\n\n\n  Color3.Magenta = function () {\n    return new Color3(1, 0, 1);\n  };\n  /**\n   * Returns a Color3 value containing a yellow color\n   * @returns a new Color3 object\n   */\n\n\n  Color3.Yellow = function () {\n    return new Color3(1, 1, 0);\n  };\n  /**\n   * Returns a Color3 value containing a gray color\n   * @returns a new Color3 object\n   */\n\n\n  Color3.Gray = function () {\n    return new Color3(0.5, 0.5, 0.5);\n  };\n  /**\n   * Returns a Color3 value containing a teal color\n   * @returns a new Color3 object\n   */\n\n\n  Color3.Teal = function () {\n    return new Color3(0, 1.0, 1.0);\n  };\n  /**\n   * Returns a Color3 value containing a random color\n   * @returns a new Color3 object\n   */\n\n\n  Color3.Random = function () {\n    return new Color3(Math.random(), Math.random(), Math.random());\n  }; // Statics\n\n\n  Color3._BlackReadOnly = Color3.Black();\n  return Color3;\n}();\n\nexport { Color3 };\n/**\n * Class used to hold a RBGA color\n */\n\nvar Color4 =\n/** @class */\nfunction () {\n  /**\n   * Creates a new Color4 object from red, green, blue values, all between 0 and 1\n   * @param r defines the red component (between 0 and 1, default is 0)\n   * @param g defines the green component (between 0 and 1, default is 0)\n   * @param b defines the blue component (between 0 and 1, default is 0)\n   * @param a defines the alpha component (between 0 and 1, default is 1)\n   */\n  function Color4(\n  /**\n   * Defines the red component (between 0 and 1, default is 0)\n   */\n  r,\n  /**\n   * Defines the green component (between 0 and 1, default is 0)\n   */\n  g,\n  /**\n   * Defines the blue component (between 0 and 1, default is 0)\n   */\n  b,\n  /**\n   * Defines the alpha component (between 0 and 1, default is 1)\n   */\n  a) {\n    if (r === void 0) {\n      r = 0;\n    }\n\n    if (g === void 0) {\n      g = 0;\n    }\n\n    if (b === void 0) {\n      b = 0;\n    }\n\n    if (a === void 0) {\n      a = 1;\n    }\n\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  } // Operators\n\n  /**\n   * Adds in place the given Color4 values to the current Color4 object\n   * @param right defines the second operand\n   * @returns the current updated Color4 object\n   */\n\n\n  Color4.prototype.addInPlace = function (right) {\n    this.r += right.r;\n    this.g += right.g;\n    this.b += right.b;\n    this.a += right.a;\n    return this;\n  };\n  /**\n   * Creates a new array populated with 4 numeric elements : red, green, blue, alpha values\n   * @returns the new array\n   */\n\n\n  Color4.prototype.asArray = function () {\n    return [this.r, this.g, this.b, this.a];\n  };\n  /**\n   * Stores from the starting index in the given array the Color4 successive values\n   * @param array defines the array where to store the r,g,b components\n   * @param index defines an optional index in the target array to define where to start storing values\n   * @returns the current Color4 object\n   */\n\n\n  Color4.prototype.toArray = function (array, index) {\n    if (index === void 0) {\n      index = 0;\n    }\n\n    array[index] = this.r;\n    array[index + 1] = this.g;\n    array[index + 2] = this.b;\n    array[index + 3] = this.a;\n    return this;\n  };\n  /**\n   * Update the current color with values stored in an array from the starting index of the given array\n   * @param array defines the source array\n   * @param offset defines an offset in the source array\n   * @returns the current Color4 object\n   */\n\n\n  Color4.prototype.fromArray = function (array, offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    Color4.FromArrayToRef(array, offset, this);\n    return this;\n  };\n  /**\n   * Determines equality between Color4 objects\n   * @param otherColor defines the second operand\n   * @returns true if the rgba values are equal to the given ones\n   */\n\n\n  Color4.prototype.equals = function (otherColor) {\n    return otherColor && this.r === otherColor.r && this.g === otherColor.g && this.b === otherColor.b && this.a === otherColor.a;\n  };\n  /**\n   * Creates a new Color4 set with the added values of the current Color4 and of the given one\n   * @param right defines the second operand\n   * @returns a new Color4 object\n   */\n\n\n  Color4.prototype.add = function (right) {\n    return new Color4(this.r + right.r, this.g + right.g, this.b + right.b, this.a + right.a);\n  };\n  /**\n   * Creates a new Color4 set with the subtracted values of the given one from the current Color4\n   * @param right defines the second operand\n   * @returns a new Color4 object\n   */\n\n\n  Color4.prototype.subtract = function (right) {\n    return new Color4(this.r - right.r, this.g - right.g, this.b - right.b, this.a - right.a);\n  };\n  /**\n   * Subtracts the given ones from the current Color4 values and stores the results in \"result\"\n   * @param right defines the second operand\n   * @param result defines the Color4 object where to store the result\n   * @returns the current Color4 object\n   */\n\n\n  Color4.prototype.subtractToRef = function (right, result) {\n    result.r = this.r - right.r;\n    result.g = this.g - right.g;\n    result.b = this.b - right.b;\n    result.a = this.a - right.a;\n    return this;\n  };\n  /**\n   * Creates a new Color4 with the current Color4 values multiplied by scale\n   * @param scale defines the scaling factor to apply\n   * @returns a new Color4 object\n   */\n\n\n  Color4.prototype.scale = function (scale) {\n    return new Color4(this.r * scale, this.g * scale, this.b * scale, this.a * scale);\n  };\n  /**\n   * Multiplies the current Color4 values by scale and stores the result in \"result\"\n   * @param scale defines the scaling factor to apply\n   * @param result defines the Color4 object where to store the result\n   * @returns the current unmodified Color4\n   */\n\n\n  Color4.prototype.scaleToRef = function (scale, result) {\n    result.r = this.r * scale;\n    result.g = this.g * scale;\n    result.b = this.b * scale;\n    result.a = this.a * scale;\n    return this;\n  };\n  /**\n   * Scale the current Color4 values by a factor and add the result to a given Color4\n   * @param scale defines the scale factor\n   * @param result defines the Color4 object where to store the result\n   * @returns the unmodified current Color4\n   */\n\n\n  Color4.prototype.scaleAndAddToRef = function (scale, result) {\n    result.r += this.r * scale;\n    result.g += this.g * scale;\n    result.b += this.b * scale;\n    result.a += this.a * scale;\n    return this;\n  };\n  /**\n   * Clamps the rgb values by the min and max values and stores the result into \"result\"\n   * @param min defines minimum clamping value (default is 0)\n   * @param max defines maximum clamping value (default is 1)\n   * @param result defines color to store the result into.\n   * @returns the current Color4\n   */\n\n\n  Color4.prototype.clampToRef = function (min, max, result) {\n    if (min === void 0) {\n      min = 0;\n    }\n\n    if (max === void 0) {\n      max = 1;\n    }\n\n    result.r = Scalar.Clamp(this.r, min, max);\n    result.g = Scalar.Clamp(this.g, min, max);\n    result.b = Scalar.Clamp(this.b, min, max);\n    result.a = Scalar.Clamp(this.a, min, max);\n    return this;\n  };\n  /**\n   * Multiply an Color4 value by another and return a new Color4 object\n   * @param color defines the Color4 value to multiply by\n   * @returns a new Color4 object\n   */\n\n\n  Color4.prototype.multiply = function (color) {\n    return new Color4(this.r * color.r, this.g * color.g, this.b * color.b, this.a * color.a);\n  };\n  /**\n   * Multiply a Color4 value by another and push the result in a reference value\n   * @param color defines the Color4 value to multiply by\n   * @param result defines the Color4 to fill the result in\n   * @returns the result Color4\n   */\n\n\n  Color4.prototype.multiplyToRef = function (color, result) {\n    result.r = this.r * color.r;\n    result.g = this.g * color.g;\n    result.b = this.b * color.b;\n    result.a = this.a * color.a;\n    return result;\n  };\n  /**\n   * Creates a string with the Color4 current values\n   * @returns the string representation of the Color4 object\n   */\n\n\n  Color4.prototype.toString = function () {\n    return \"{R: \" + this.r + \" G:\" + this.g + \" B:\" + this.b + \" A:\" + this.a + \"}\";\n  };\n  /**\n   * Returns the string \"Color4\"\n   * @returns \"Color4\"\n   */\n\n\n  Color4.prototype.getClassName = function () {\n    return \"Color4\";\n  };\n  /**\n   * Compute the Color4 hash code\n   * @returns an unique number that can be used to hash Color4 objects\n   */\n\n\n  Color4.prototype.getHashCode = function () {\n    var hash = this.r * 255 | 0;\n    hash = hash * 397 ^ (this.g * 255 | 0);\n    hash = hash * 397 ^ (this.b * 255 | 0);\n    hash = hash * 397 ^ (this.a * 255 | 0);\n    return hash;\n  };\n  /**\n   * Creates a new Color4 copied from the current one\n   * @returns a new Color4 object\n   */\n\n\n  Color4.prototype.clone = function () {\n    return new Color4(this.r, this.g, this.b, this.a);\n  };\n  /**\n   * Copies the given Color4 values into the current one\n   * @param source defines the source Color4 object\n   * @returns the current updated Color4 object\n   */\n\n\n  Color4.prototype.copyFrom = function (source) {\n    this.r = source.r;\n    this.g = source.g;\n    this.b = source.b;\n    this.a = source.a;\n    return this;\n  };\n  /**\n   * Copies the given float values into the current one\n   * @param r defines the red component to read from\n   * @param g defines the green component to read from\n   * @param b defines the blue component to read from\n   * @param a defines the alpha component to read from\n   * @returns the current updated Color4 object\n   */\n\n\n  Color4.prototype.copyFromFloats = function (r, g, b, a) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n    return this;\n  };\n  /**\n   * Copies the given float values into the current one\n   * @param r defines the red component to read from\n   * @param g defines the green component to read from\n   * @param b defines the blue component to read from\n   * @param a defines the alpha component to read from\n   * @returns the current updated Color4 object\n   */\n\n\n  Color4.prototype.set = function (r, g, b, a) {\n    return this.copyFromFloats(r, g, b, a);\n  };\n  /**\n   * Compute the Color4 hexadecimal code as a string\n   * @param returnAsColor3 defines if the string should only contains RGB values (off by default)\n   * @returns a string containing the hexadecimal representation of the Color4 object\n   */\n\n\n  Color4.prototype.toHexString = function (returnAsColor3) {\n    if (returnAsColor3 === void 0) {\n      returnAsColor3 = false;\n    }\n\n    var intR = Math.round(this.r * 255);\n    var intG = Math.round(this.g * 255);\n    var intB = Math.round(this.b * 255);\n\n    if (returnAsColor3) {\n      return \"#\" + Scalar.ToHex(intR) + Scalar.ToHex(intG) + Scalar.ToHex(intB);\n    }\n\n    var intA = Math.round(this.a * 255);\n    return \"#\" + Scalar.ToHex(intR) + Scalar.ToHex(intG) + Scalar.ToHex(intB) + Scalar.ToHex(intA);\n  };\n  /**\n   * Computes a new Color4 converted from the current one to linear space\n   * @returns a new Color4 object\n   */\n\n\n  Color4.prototype.toLinearSpace = function () {\n    var convertedColor = new Color4();\n    this.toLinearSpaceToRef(convertedColor);\n    return convertedColor;\n  };\n  /**\n   * Converts the Color4 values to linear space and stores the result in \"convertedColor\"\n   * @param convertedColor defines the Color4 object where to store the linear space version\n   * @returns the unmodified Color4\n   */\n\n\n  Color4.prototype.toLinearSpaceToRef = function (convertedColor) {\n    convertedColor.r = Math.pow(this.r, ToLinearSpace);\n    convertedColor.g = Math.pow(this.g, ToLinearSpace);\n    convertedColor.b = Math.pow(this.b, ToLinearSpace);\n    convertedColor.a = this.a;\n    return this;\n  };\n  /**\n   * Computes a new Color4 converted from the current one to gamma space\n   * @returns a new Color4 object\n   */\n\n\n  Color4.prototype.toGammaSpace = function () {\n    var convertedColor = new Color4();\n    this.toGammaSpaceToRef(convertedColor);\n    return convertedColor;\n  };\n  /**\n   * Converts the Color4 values to gamma space and stores the result in \"convertedColor\"\n   * @param convertedColor defines the Color4 object where to store the gamma space version\n   * @returns the unmodified Color4\n   */\n\n\n  Color4.prototype.toGammaSpaceToRef = function (convertedColor) {\n    convertedColor.r = Math.pow(this.r, ToGammaSpace);\n    convertedColor.g = Math.pow(this.g, ToGammaSpace);\n    convertedColor.b = Math.pow(this.b, ToGammaSpace);\n    convertedColor.a = this.a;\n    return this;\n  }; // Statics\n\n  /**\n   * Creates a new Color4 from the string containing valid hexadecimal values.\n   *\n   * A valid hex string is either in the format #RRGGBB or #RRGGBBAA.\n   *\n   * When a hex string without alpha is passed, the resulting Color4 has\n   * its alpha value set to 1.0.\n   *\n   * An invalid string results in a Color with all its channels set to 0.0,\n   * i.e. \"transparent black\".\n   *\n   * @param hex defines a string containing valid hexadecimal values\n   * @returns a new Color4 object\n   */\n\n\n  Color4.FromHexString = function (hex) {\n    if (hex.substring(0, 1) !== \"#\" || hex.length !== 9 && hex.length !== 7) {\n      return new Color4(0.0, 0.0, 0.0, 0.0);\n    }\n\n    var r = parseInt(hex.substring(1, 3), 16);\n    var g = parseInt(hex.substring(3, 5), 16);\n    var b = parseInt(hex.substring(5, 7), 16);\n    var a = hex.length === 9 ? parseInt(hex.substring(7, 9), 16) : 255;\n    return Color4.FromInts(r, g, b, a);\n  };\n  /**\n   * Creates a new Color4 object set with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\n   * @param left defines the start value\n   * @param right defines the end value\n   * @param amount defines the gradient factor\n   * @returns a new Color4 object\n   */\n\n\n  Color4.Lerp = function (left, right, amount) {\n    var result = new Color4(0.0, 0.0, 0.0, 0.0);\n    Color4.LerpToRef(left, right, amount, result);\n    return result;\n  };\n  /**\n   * Set the given \"result\" with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\n   * @param left defines the start value\n   * @param right defines the end value\n   * @param amount defines the gradient factor\n   * @param result defines the Color4 object where to store data\n   */\n\n\n  Color4.LerpToRef = function (left, right, amount, result) {\n    result.r = left.r + (right.r - left.r) * amount;\n    result.g = left.g + (right.g - left.g) * amount;\n    result.b = left.b + (right.b - left.b) * amount;\n    result.a = left.a + (right.a - left.a) * amount;\n  };\n  /**\n   * Interpolate between two Color4 using Hermite interpolation\n   * @param value1 defines first Color4\n   * @param tangent1 defines the incoming tangent\n   * @param value2 defines second Color4\n   * @param tangent2 defines the outgoing tangent\n   * @param amount defines the target Color4\n   * @returns the new interpolated Color4\n   */\n\n\n  Color4.Hermite = function (value1, tangent1, value2, tangent2, amount) {\n    var squared = amount * amount;\n    var cubed = amount * squared;\n    var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n    var part2 = -2.0 * cubed + 3.0 * squared;\n    var part3 = cubed - 2.0 * squared + amount;\n    var part4 = cubed - squared;\n    var r = value1.r * part1 + value2.r * part2 + tangent1.r * part3 + tangent2.r * part4;\n    var g = value1.g * part1 + value2.g * part2 + tangent1.g * part3 + tangent2.g * part4;\n    var b = value1.b * part1 + value2.b * part2 + tangent1.b * part3 + tangent2.b * part4;\n    var a = value1.a * part1 + value2.a * part2 + tangent1.a * part3 + tangent2.a * part4;\n    return new Color4(r, g, b, a);\n  };\n  /**\n   * Returns a new Color4 which is the 1st derivative of the Hermite spline defined by the colors \"value1\", \"value2\", \"tangent1\", \"tangent2\".\n   * @param value1 defines the first control point\n   * @param tangent1 defines the first tangent\n   * @param value2 defines the second control point\n   * @param tangent2 defines the second tangent\n   * @param time define where the derivative must be done\n   * @returns 1st derivative\n   */\n\n\n  Color4.Hermite1stDerivative = function (value1, tangent1, value2, tangent2, time) {\n    var result = new Color4();\n    this.Hermite1stDerivativeToRef(value1, tangent1, value2, tangent2, time, result);\n    return result;\n  };\n  /**\n   * Update a Color4 with the 1st derivative of the Hermite spline defined by the colors \"value1\", \"value2\", \"tangent1\", \"tangent2\".\n   * @param value1 defines the first control point\n   * @param tangent1 defines the first tangent\n   * @param value2 defines the second control point\n   * @param tangent2 defines the second tangent\n   * @param time define where the derivative must be done\n   * @param result define where to store the derivative\n   */\n\n\n  Color4.Hermite1stDerivativeToRef = function (value1, tangent1, value2, tangent2, time, result) {\n    var t2 = time * time;\n    result.r = (t2 - time) * 6 * value1.r + (3 * t2 - 4 * time + 1) * tangent1.r + (-t2 + time) * 6 * value2.r + (3 * t2 - 2 * time) * tangent2.r;\n    result.g = (t2 - time) * 6 * value1.g + (3 * t2 - 4 * time + 1) * tangent1.g + (-t2 + time) * 6 * value2.g + (3 * t2 - 2 * time) * tangent2.g;\n    result.b = (t2 - time) * 6 * value1.b + (3 * t2 - 4 * time + 1) * tangent1.b + (-t2 + time) * 6 * value2.b + (3 * t2 - 2 * time) * tangent2.b;\n    result.a = (t2 - time) * 6 * value1.a + (3 * t2 - 4 * time + 1) * tangent1.a + (-t2 + time) * 6 * value2.a + (3 * t2 - 2 * time) * tangent2.a;\n  };\n  /**\n   * Creates a new Color4 from a Color3 and an alpha value\n   * @param color3 defines the source Color3 to read from\n   * @param alpha defines the alpha component (1.0 by default)\n   * @returns a new Color4 object\n   */\n\n\n  Color4.FromColor3 = function (color3, alpha) {\n    if (alpha === void 0) {\n      alpha = 1.0;\n    }\n\n    return new Color4(color3.r, color3.g, color3.b, alpha);\n  };\n  /**\n   * Creates a new Color4 from the starting index element of the given array\n   * @param array defines the source array to read from\n   * @param offset defines the offset in the source array\n   * @returns a new Color4 object\n   */\n\n\n  Color4.FromArray = function (array, offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    return new Color4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n  };\n  /**\n   * Creates a new Color4 from the starting index element of the given array\n   * @param array defines the source array to read from\n   * @param offset defines the offset in the source array\n   * @param result defines the target Color4 object\n   */\n\n\n  Color4.FromArrayToRef = function (array, offset, result) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    result.r = array[offset];\n    result.g = array[offset + 1];\n    result.b = array[offset + 2];\n    result.a = array[offset + 3];\n  };\n  /**\n   * Creates a new Color3 from integer values (< 256)\n   * @param r defines the red component to read from (value between 0 and 255)\n   * @param g defines the green component to read from (value between 0 and 255)\n   * @param b defines the blue component to read from (value between 0 and 255)\n   * @param a defines the alpha component to read from (value between 0 and 255)\n   * @returns a new Color3 object\n   */\n\n\n  Color4.FromInts = function (r, g, b, a) {\n    return new Color4(r / 255.0, g / 255.0, b / 255.0, a / 255.0);\n  };\n  /**\n   * Check the content of a given array and convert it to an array containing RGBA data\n   * If the original array was already containing count * 4 values then it is returned directly\n   * @param colors defines the array to check\n   * @param count defines the number of RGBA data to expect\n   * @returns an array containing count * 4 values (RGBA)\n   */\n\n\n  Color4.CheckColors4 = function (colors, count) {\n    // Check if color3 was used\n    if (colors.length === count * 3) {\n      var colors4 = [];\n\n      for (var index = 0; index < colors.length; index += 3) {\n        var newIndex = index / 3 * 4;\n        colors4[newIndex] = colors[index];\n        colors4[newIndex + 1] = colors[index + 1];\n        colors4[newIndex + 2] = colors[index + 2];\n        colors4[newIndex + 3] = 1.0;\n      }\n\n      return colors4;\n    }\n\n    return colors;\n  };\n\n  return Color4;\n}();\n\nexport { Color4 };\n/**\n * @hidden\n */\n\nvar TmpColors =\n/** @class */\nfunction () {\n  function TmpColors() {}\n\n  TmpColors.Color3 = ArrayTools.BuildArray(3, Color3.Black);\n  TmpColors.Color4 = ArrayTools.BuildArray(3, function () {\n    return new Color4(0, 0, 0, 0);\n  });\n  return TmpColors;\n}();\n\nexport { TmpColors };\nRegisterClass(\"BABYLON.Color3\", Color3);\nRegisterClass(\"BABYLON.Color4\", Color4);","map":{"version":3,"mappings":"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","names":["Scalar","ToLinearSpace","ToGammaSpace","ArrayTools","RegisterClass","r","g","b","Color3","hash","array","index","offset","FromArrayToRef","alpha","Color4","otherColor","result","scale","min","max","Clamp","source","copyFromFloats","intR","Math","round","intG","intB","ToHex","convertedColor","toLinearSpaceToRef","toHSVToRef","h","s","v","dm","pow","toGammaSpaceToRef","hue","saturation","value","chroma","x","abs","m","set","hex","substring","length","parseInt","FromInts","start","end","amount","LerpToRef","left","right","value1","tangent1","value2","tangent2","squared","cubed","part1","part2","part3","part4","time","Black","Hermite1stDerivativeToRef","t2","Object","_BlackReadOnly","random","a","color","returnAsColor3","intA","color3","colors","count","colors4","newIndex","TmpColors","BuildArray"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Maths/math.color.ts"],"sourcesContent":["import type { DeepImmutable, FloatArray } from \"../types\";\r\nimport { Scalar } from \"./math.scalar\";\r\nimport { ToLinearSpace, ToGammaSpace } from \"./math.constants\";\r\nimport { ArrayTools } from \"../Misc/arrayTools\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\n/**\r\n * Class used to hold a RGB color\r\n */\r\nexport class Color3 {\r\n    /**\r\n     * Creates a new Color3 object from red, green, blue values, all between 0 and 1\r\n     * @param r defines the red component (between 0 and 1, default is 0)\r\n     * @param g defines the green component (between 0 and 1, default is 0)\r\n     * @param b defines the blue component (between 0 and 1, default is 0)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the red component (between 0 and 1, default is 0)\r\n         */\r\n        public r: number = 0,\r\n        /**\r\n         * Defines the green component (between 0 and 1, default is 0)\r\n         */\r\n        public g: number = 0,\r\n        /**\r\n         * Defines the blue component (between 0 and 1, default is 0)\r\n         */\r\n        public b: number = 0\r\n    ) {}\r\n\r\n    /**\r\n     * Creates a string with the Color3 current values\r\n     * @returns the string representation of the Color3 object\r\n     */\r\n    public toString(): string {\r\n        return \"{R: \" + this.r + \" G:\" + this.g + \" B:\" + this.b + \"}\";\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"Color3\"\r\n     * @returns \"Color3\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"Color3\";\r\n    }\r\n\r\n    /**\r\n     * Compute the Color3 hash code\r\n     * @returns an unique number that can be used to hash Color3 objects\r\n     */\r\n    public getHashCode(): number {\r\n        let hash = (this.r * 255) | 0;\r\n        hash = (hash * 397) ^ ((this.g * 255) | 0);\r\n        hash = (hash * 397) ^ ((this.b * 255) | 0);\r\n        return hash;\r\n    }\r\n\r\n    // Operators\r\n\r\n    /**\r\n     * Stores in the given array from the given starting index the red, green, blue values as successive elements\r\n     * @param array defines the array where to store the r,g,b components\r\n     * @param index defines an optional index in the target array to define where to start storing values\r\n     * @returns the current Color3 object\r\n     */\r\n    public toArray(array: FloatArray, index: number = 0): Color3 {\r\n        array[index] = this.r;\r\n        array[index + 1] = this.g;\r\n        array[index + 2] = this.b;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update the current color with values stored in an array from the starting index of the given array\r\n     * @param array defines the source array\r\n     * @param offset defines an offset in the source array\r\n     * @returns the current Color3 object\r\n     */\r\n    public fromArray(array: DeepImmutable<ArrayLike<number>>, offset: number = 0): Color3 {\r\n        Color3.FromArrayToRef(array, offset, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Color4 object from the current Color3 and the given alpha\r\n     * @param alpha defines the alpha component on the new Color4 object (default is 1)\r\n     * @returns a new Color4 object\r\n     */\r\n    public toColor4(alpha: number = 1): Color4 {\r\n        return new Color4(this.r, this.g, this.b, alpha);\r\n    }\r\n\r\n    /**\r\n     * Returns a new array populated with 3 numeric elements : red, green and blue values\r\n     * @returns the new array\r\n     */\r\n    public asArray(): number[] {\r\n        return [this.r, this.g, this.b];\r\n    }\r\n\r\n    /**\r\n     * Returns the luminance value\r\n     * @returns a float value\r\n     */\r\n    public toLuminance(): number {\r\n        return this.r * 0.3 + this.g * 0.59 + this.b * 0.11;\r\n    }\r\n\r\n    /**\r\n     * Multiply each Color3 rgb values by the given Color3 rgb values in a new Color3 object\r\n     * @param otherColor defines the second operand\r\n     * @returns the new Color3 object\r\n     */\r\n    public multiply(otherColor: DeepImmutable<Color3>): Color3 {\r\n        return new Color3(this.r * otherColor.r, this.g * otherColor.g, this.b * otherColor.b);\r\n    }\r\n\r\n    /**\r\n     * Multiply the rgb values of the Color3 and the given Color3 and stores the result in the object \"result\"\r\n     * @param otherColor defines the second operand\r\n     * @param result defines the Color3 object where to store the result\r\n     * @returns the current Color3\r\n     */\r\n    public multiplyToRef(otherColor: DeepImmutable<Color3>, result: Color3): Color3 {\r\n        result.r = this.r * otherColor.r;\r\n        result.g = this.g * otherColor.g;\r\n        result.b = this.b * otherColor.b;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Determines equality between Color3 objects\r\n     * @param otherColor defines the second operand\r\n     * @returns true if the rgb values are equal to the given ones\r\n     */\r\n    public equals(otherColor: DeepImmutable<Color3>): boolean {\r\n        return otherColor && this.r === otherColor.r && this.g === otherColor.g && this.b === otherColor.b;\r\n    }\r\n\r\n    /**\r\n     * Determines equality between the current Color3 object and a set of r,b,g values\r\n     * @param r defines the red component to check\r\n     * @param g defines the green component to check\r\n     * @param b defines the blue component to check\r\n     * @returns true if the rgb values are equal to the given ones\r\n     */\r\n    public equalsFloats(r: number, g: number, b: number): boolean {\r\n        return this.r === r && this.g === g && this.b === b;\r\n    }\r\n\r\n    /**\r\n     * Multiplies in place each rgb value by scale\r\n     * @param scale defines the scaling factor\r\n     * @returns the updated Color3\r\n     */\r\n    public scale(scale: number): Color3 {\r\n        return new Color3(this.r * scale, this.g * scale, this.b * scale);\r\n    }\r\n\r\n    /**\r\n     * Multiplies the rgb values by scale and stores the result into \"result\"\r\n     * @param scale defines the scaling factor\r\n     * @param result defines the Color3 object where to store the result\r\n     * @returns the unmodified current Color3\r\n     */\r\n    public scaleToRef(scale: number, result: Color3): Color3 {\r\n        result.r = this.r * scale;\r\n        result.g = this.g * scale;\r\n        result.b = this.b * scale;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Scale the current Color3 values by a factor and add the result to a given Color3\r\n     * @param scale defines the scale factor\r\n     * @param result defines color to store the result into\r\n     * @returns the unmodified current Color3\r\n     */\r\n    public scaleAndAddToRef(scale: number, result: Color3): Color3 {\r\n        result.r += this.r * scale;\r\n        result.g += this.g * scale;\r\n        result.b += this.b * scale;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clamps the rgb values by the min and max values and stores the result into \"result\"\r\n     * @param min defines minimum clamping value (default is 0)\r\n     * @param max defines maximum clamping value (default is 1)\r\n     * @param result defines color to store the result into\r\n     * @returns the original Color3\r\n     */\r\n    public clampToRef(min: number = 0, max: number = 1, result: Color3): Color3 {\r\n        result.r = Scalar.Clamp(this.r, min, max);\r\n        result.g = Scalar.Clamp(this.g, min, max);\r\n        result.b = Scalar.Clamp(this.b, min, max);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 set with the added values of the current Color3 and of the given one\r\n     * @param otherColor defines the second operand\r\n     * @returns the new Color3\r\n     */\r\n    public add(otherColor: DeepImmutable<Color3>): Color3 {\r\n        return new Color3(this.r + otherColor.r, this.g + otherColor.g, this.b + otherColor.b);\r\n    }\r\n\r\n    /**\r\n     * Stores the result of the addition of the current Color3 and given one rgb values into \"result\"\r\n     * @param otherColor defines the second operand\r\n     * @param result defines Color3 object to store the result into\r\n     * @returns the unmodified current Color3\r\n     */\r\n    public addToRef(otherColor: DeepImmutable<Color3>, result: Color3): Color3 {\r\n        result.r = this.r + otherColor.r;\r\n        result.g = this.g + otherColor.g;\r\n        result.b = this.b + otherColor.b;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Color3 set with the subtracted values of the given one from the current Color3\r\n     * @param otherColor defines the second operand\r\n     * @returns the new Color3\r\n     */\r\n    public subtract(otherColor: DeepImmutable<Color3>): Color3 {\r\n        return new Color3(this.r - otherColor.r, this.g - otherColor.g, this.b - otherColor.b);\r\n    }\r\n\r\n    /**\r\n     * Stores the result of the subtraction of given one from the current Color3 rgb values into \"result\"\r\n     * @param otherColor defines the second operand\r\n     * @param result defines Color3 object to store the result into\r\n     * @returns the unmodified current Color3\r\n     */\r\n    public subtractToRef(otherColor: DeepImmutable<Color3>, result: Color3): Color3 {\r\n        result.r = this.r - otherColor.r;\r\n        result.g = this.g - otherColor.g;\r\n        result.b = this.b - otherColor.b;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Copy the current object\r\n     * @returns a new Color3 copied the current one\r\n     */\r\n    public clone(): Color3 {\r\n        return new Color3(this.r, this.g, this.b);\r\n    }\r\n\r\n    /**\r\n     * Copies the rgb values from the source in the current Color3\r\n     * @param source defines the source Color3 object\r\n     * @returns the updated Color3 object\r\n     */\r\n    public copyFrom(source: DeepImmutable<Color3>): Color3 {\r\n        this.r = source.r;\r\n        this.g = source.g;\r\n        this.b = source.b;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the Color3 rgb values from the given floats\r\n     * @param r defines the red component to read from\r\n     * @param g defines the green component to read from\r\n     * @param b defines the blue component to read from\r\n     * @returns the current Color3 object\r\n     */\r\n    public copyFromFloats(r: number, g: number, b: number): Color3 {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Updates the Color3 rgb values from the given floats\r\n     * @param r defines the red component to read from\r\n     * @param g defines the green component to read from\r\n     * @param b defines the blue component to read from\r\n     * @returns the current Color3 object\r\n     */\r\n    public set(r: number, g: number, b: number): Color3 {\r\n        return this.copyFromFloats(r, g, b);\r\n    }\r\n\r\n    /**\r\n     * Compute the Color3 hexadecimal code as a string\r\n     * @returns a string containing the hexadecimal representation of the Color3 object\r\n     */\r\n    public toHexString(): string {\r\n        const intR = Math.round(this.r * 255);\r\n        const intG = Math.round(this.g * 255);\r\n        const intB = Math.round(this.b * 255);\r\n        return \"#\" + Scalar.ToHex(intR) + Scalar.ToHex(intG) + Scalar.ToHex(intB);\r\n    }\r\n\r\n    /**\r\n     * Computes a new Color3 converted from the current one to linear space\r\n     * @returns a new Color3 object\r\n     */\r\n    public toLinearSpace(): Color3 {\r\n        const convertedColor = new Color3();\r\n        this.toLinearSpaceToRef(convertedColor);\r\n        return convertedColor;\r\n    }\r\n\r\n    /**\r\n     * Converts current color in rgb space to HSV values\r\n     * @returns a new color3 representing the HSV values\r\n     */\r\n    public toHSV(): Color3 {\r\n        const result = new Color3();\r\n\r\n        this.toHSVToRef(result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Converts current color in rgb space to HSV values\r\n     * @param result defines the Color3 where to store the HSV values\r\n     */\r\n    public toHSVToRef(result: Color3) {\r\n        const r = this.r;\r\n        const g = this.g;\r\n        const b = this.b;\r\n\r\n        const max = Math.max(r, g, b);\r\n        const min = Math.min(r, g, b);\r\n        let h = 0;\r\n        let s = 0;\r\n        const v = max;\r\n\r\n        const dm = max - min;\r\n\r\n        if (max !== 0) {\r\n            s = dm / max;\r\n        }\r\n\r\n        if (max != min) {\r\n            if (max == r) {\r\n                h = (g - b) / dm;\r\n                if (g < b) {\r\n                    h += 6;\r\n                }\r\n            } else if (max == g) {\r\n                h = (b - r) / dm + 2;\r\n            } else if (max == b) {\r\n                h = (r - g) / dm + 4;\r\n            }\r\n            h *= 60;\r\n        }\r\n\r\n        result.r = h;\r\n        result.g = s;\r\n        result.b = v;\r\n    }\r\n\r\n    /**\r\n     * Converts the Color3 values to linear space and stores the result in \"convertedColor\"\r\n     * @param convertedColor defines the Color3 object where to store the linear space version\r\n     * @returns the unmodified Color3\r\n     */\r\n    public toLinearSpaceToRef(convertedColor: Color3): Color3 {\r\n        convertedColor.r = Math.pow(this.r, ToLinearSpace);\r\n        convertedColor.g = Math.pow(this.g, ToLinearSpace);\r\n        convertedColor.b = Math.pow(this.b, ToLinearSpace);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Computes a new Color3 converted from the current one to gamma space\r\n     * @returns a new Color3 object\r\n     */\r\n    public toGammaSpace(): Color3 {\r\n        const convertedColor = new Color3();\r\n        this.toGammaSpaceToRef(convertedColor);\r\n        return convertedColor;\r\n    }\r\n\r\n    /**\r\n     * Converts the Color3 values to gamma space and stores the result in \"convertedColor\"\r\n     * @param convertedColor defines the Color3 object where to store the gamma space version\r\n     * @returns the unmodified Color3\r\n     */\r\n    public toGammaSpaceToRef(convertedColor: Color3): Color3 {\r\n        convertedColor.r = Math.pow(this.r, ToGammaSpace);\r\n        convertedColor.g = Math.pow(this.g, ToGammaSpace);\r\n        convertedColor.b = Math.pow(this.b, ToGammaSpace);\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n\r\n    private static _BlackReadOnly = Color3.Black() as DeepImmutable<Color3>;\r\n\r\n    /**\r\n     * Convert Hue, saturation and value to a Color3 (RGB)\r\n     * @param hue defines the hue\r\n     * @param saturation defines the saturation\r\n     * @param value defines the value\r\n     * @param result defines the Color3 where to store the RGB values\r\n     */\r\n    public static HSVtoRGBToRef(hue: number, saturation: number, value: number, result: Color3) {\r\n        const chroma = value * saturation;\r\n        const h = hue / 60;\r\n        const x = chroma * (1 - Math.abs((h % 2) - 1));\r\n        let r = 0;\r\n        let g = 0;\r\n        let b = 0;\r\n\r\n        if (h >= 0 && h <= 1) {\r\n            r = chroma;\r\n            g = x;\r\n        } else if (h >= 1 && h <= 2) {\r\n            r = x;\r\n            g = chroma;\r\n        } else if (h >= 2 && h <= 3) {\r\n            g = chroma;\r\n            b = x;\r\n        } else if (h >= 3 && h <= 4) {\r\n            g = x;\r\n            b = chroma;\r\n        } else if (h >= 4 && h <= 5) {\r\n            r = x;\r\n            b = chroma;\r\n        } else if (h >= 5 && h <= 6) {\r\n            r = chroma;\r\n            b = x;\r\n        }\r\n\r\n        const m = value - chroma;\r\n        result.set(r + m, g + m, b + m);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 from the string containing valid hexadecimal values\r\n     * @param hex defines a string containing valid hexadecimal values\r\n     * @returns a new Color3 object\r\n     */\r\n    public static FromHexString(hex: string): Color3 {\r\n        if (hex.substring(0, 1) !== \"#\" || hex.length !== 7) {\r\n            return new Color3(0, 0, 0);\r\n        }\r\n\r\n        const r = parseInt(hex.substring(1, 3), 16);\r\n        const g = parseInt(hex.substring(3, 5), 16);\r\n        const b = parseInt(hex.substring(5, 7), 16);\r\n\r\n        return Color3.FromInts(r, g, b);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 from the starting index of the given array\r\n     * @param array defines the source array\r\n     * @param offset defines an offset in the source array\r\n     * @returns a new Color3 object\r\n     */\r\n    public static FromArray(array: DeepImmutable<ArrayLike<number>>, offset: number = 0): Color3 {\r\n        return new Color3(array[offset], array[offset + 1], array[offset + 2]);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 from the starting index element of the given array\r\n     * @param array defines the source array to read from\r\n     * @param offset defines the offset in the source array\r\n     * @param result defines the target Color3 object\r\n     */\r\n    public static FromArrayToRef(array: DeepImmutable<ArrayLike<number>>, offset: number = 0, result: Color3) {\r\n        result.r = array[offset];\r\n        result.g = array[offset + 1];\r\n        result.b = array[offset + 2];\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 from integer values (< 256)\r\n     * @param r defines the red component to read from (value between 0 and 255)\r\n     * @param g defines the green component to read from (value between 0 and 255)\r\n     * @param b defines the blue component to read from (value between 0 and 255)\r\n     * @returns a new Color3 object\r\n     */\r\n    public static FromInts(r: number, g: number, b: number): Color3 {\r\n        return new Color3(r / 255.0, g / 255.0, b / 255.0);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\r\n     * @param start defines the start Color3 value\r\n     * @param end defines the end Color3 value\r\n     * @param amount defines the gradient value between start and end\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Lerp(start: DeepImmutable<Color3>, end: DeepImmutable<Color3>, amount: number): Color3 {\r\n        const result = new Color3(0.0, 0.0, 0.0);\r\n        Color3.LerpToRef(start, end, amount, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\r\n     * @param left defines the start value\r\n     * @param right defines the end value\r\n     * @param amount defines the gradient factor\r\n     * @param result defines the Color3 object where to store the result\r\n     */\r\n    public static LerpToRef(left: DeepImmutable<Color3>, right: DeepImmutable<Color3>, amount: number, result: Color3): void {\r\n        result.r = left.r + (right.r - left.r) * amount;\r\n        result.g = left.g + (right.g - left.g) * amount;\r\n        result.b = left.b + (right.b - left.b) * amount;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Color3 located for \"amount\" (float) on the Hermite interpolation spline defined by the vectors \"value1\", \"tangent1\", \"value2\", \"tangent2\"\r\n     * @param value1 defines the first control point\r\n     * @param tangent1 defines the first tangent Color3\r\n     * @param value2 defines the second control point\r\n     * @param tangent2 defines the second tangent Color3\r\n     * @param amount defines the amount on the interpolation spline (between 0 and 1)\r\n     * @returns the new Color3\r\n     */\r\n    public static Hermite(value1: DeepImmutable<Color3>, tangent1: DeepImmutable<Color3>, value2: DeepImmutable<Color3>, tangent2: DeepImmutable<Color3>, amount: number): Color3 {\r\n        const squared = amount * amount;\r\n        const cubed = amount * squared;\r\n        const part1 = 2.0 * cubed - 3.0 * squared + 1.0;\r\n        const part2 = -2.0 * cubed + 3.0 * squared;\r\n        const part3 = cubed - 2.0 * squared + amount;\r\n        const part4 = cubed - squared;\r\n\r\n        const r = value1.r * part1 + value2.r * part2 + tangent1.r * part3 + tangent2.r * part4;\r\n        const g = value1.g * part1 + value2.g * part2 + tangent1.g * part3 + tangent2.g * part4;\r\n        const b = value1.b * part1 + value2.b * part2 + tangent1.b * part3 + tangent2.b * part4;\r\n        return new Color3(r, g, b);\r\n    }\r\n\r\n    /**\r\n     * Returns a new Color3 which is the 1st derivative of the Hermite spline defined by the colors \"value1\", \"value2\", \"tangent1\", \"tangent2\".\r\n     * @param value1 defines the first control point\r\n     * @param tangent1 defines the first tangent\r\n     * @param value2 defines the second control point\r\n     * @param tangent2 defines the second tangent\r\n     * @param time define where the derivative must be done\r\n     * @returns 1st derivative\r\n     */\r\n    public static Hermite1stDerivative(\r\n        value1: DeepImmutable<Color3>,\r\n        tangent1: DeepImmutable<Color3>,\r\n        value2: DeepImmutable<Color3>,\r\n        tangent2: DeepImmutable<Color3>,\r\n        time: number\r\n    ): Color3 {\r\n        const result = Color3.Black();\r\n\r\n        this.Hermite1stDerivativeToRef(value1, tangent1, value2, tangent2, time, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns a new Color3 which is the 1st derivative of the Hermite spline defined by the colors \"value1\", \"value2\", \"tangent1\", \"tangent2\".\r\n     * @param value1 defines the first control point\r\n     * @param tangent1 defines the first tangent\r\n     * @param value2 defines the second control point\r\n     * @param tangent2 defines the second tangent\r\n     * @param time define where the derivative must be done\r\n     * @param result define where to store the derivative\r\n     */\r\n    public static Hermite1stDerivativeToRef(\r\n        value1: DeepImmutable<Color3>,\r\n        tangent1: DeepImmutable<Color3>,\r\n        value2: DeepImmutable<Color3>,\r\n        tangent2: DeepImmutable<Color3>,\r\n        time: number,\r\n        result: Color3\r\n    ) {\r\n        const t2 = time * time;\r\n\r\n        result.r = (t2 - time) * 6 * value1.r + (3 * t2 - 4 * time + 1) * tangent1.r + (-t2 + time) * 6 * value2.r + (3 * t2 - 2 * time) * tangent2.r;\r\n        result.g = (t2 - time) * 6 * value1.g + (3 * t2 - 4 * time + 1) * tangent1.g + (-t2 + time) * 6 * value2.g + (3 * t2 - 2 * time) * tangent2.g;\r\n        result.b = (t2 - time) * 6 * value1.b + (3 * t2 - 4 * time + 1) * tangent1.b + (-t2 + time) * 6 * value2.b + (3 * t2 - 2 * time) * tangent2.b;\r\n    }\r\n\r\n    /**\r\n     * Returns a Color3 value containing a red color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Red(): Color3 {\r\n        return new Color3(1, 0, 0);\r\n    }\r\n    /**\r\n     * Returns a Color3 value containing a green color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Green(): Color3 {\r\n        return new Color3(0, 1, 0);\r\n    }\r\n    /**\r\n     * Returns a Color3 value containing a blue color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Blue(): Color3 {\r\n        return new Color3(0, 0, 1);\r\n    }\r\n    /**\r\n     * Returns a Color3 value containing a black color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Black(): Color3 {\r\n        return new Color3(0, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Gets a Color3 value containing a black color that must not be updated\r\n     */\r\n    public static get BlackReadOnly(): DeepImmutable<Color3> {\r\n        return Color3._BlackReadOnly;\r\n    }\r\n\r\n    /**\r\n     * Returns a Color3 value containing a white color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static White(): Color3 {\r\n        return new Color3(1, 1, 1);\r\n    }\r\n    /**\r\n     * Returns a Color3 value containing a purple color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Purple(): Color3 {\r\n        return new Color3(0.5, 0, 0.5);\r\n    }\r\n    /**\r\n     * Returns a Color3 value containing a magenta color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Magenta(): Color3 {\r\n        return new Color3(1, 0, 1);\r\n    }\r\n    /**\r\n     * Returns a Color3 value containing a yellow color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Yellow(): Color3 {\r\n        return new Color3(1, 1, 0);\r\n    }\r\n    /**\r\n     * Returns a Color3 value containing a gray color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Gray(): Color3 {\r\n        return new Color3(0.5, 0.5, 0.5);\r\n    }\r\n    /**\r\n     * Returns a Color3 value containing a teal color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Teal(): Color3 {\r\n        return new Color3(0, 1.0, 1.0);\r\n    }\r\n    /**\r\n     * Returns a Color3 value containing a random color\r\n     * @returns a new Color3 object\r\n     */\r\n    public static Random(): Color3 {\r\n        return new Color3(Math.random(), Math.random(), Math.random());\r\n    }\r\n}\r\n\r\n/**\r\n * Class used to hold a RBGA color\r\n */\r\nexport class Color4 {\r\n    /**\r\n     * Creates a new Color4 object from red, green, blue values, all between 0 and 1\r\n     * @param r defines the red component (between 0 and 1, default is 0)\r\n     * @param g defines the green component (between 0 and 1, default is 0)\r\n     * @param b defines the blue component (between 0 and 1, default is 0)\r\n     * @param a defines the alpha component (between 0 and 1, default is 1)\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the red component (between 0 and 1, default is 0)\r\n         */\r\n        public r: number = 0,\r\n        /**\r\n         * Defines the green component (between 0 and 1, default is 0)\r\n         */\r\n        public g: number = 0,\r\n        /**\r\n         * Defines the blue component (between 0 and 1, default is 0)\r\n         */\r\n        public b: number = 0,\r\n        /**\r\n         * Defines the alpha component (between 0 and 1, default is 1)\r\n         */\r\n        public a: number = 1\r\n    ) {}\r\n\r\n    // Operators\r\n\r\n    /**\r\n     * Adds in place the given Color4 values to the current Color4 object\r\n     * @param right defines the second operand\r\n     * @returns the current updated Color4 object\r\n     */\r\n    public addInPlace(right: DeepImmutable<Color4>): Color4 {\r\n        this.r += right.r;\r\n        this.g += right.g;\r\n        this.b += right.b;\r\n        this.a += right.a;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new array populated with 4 numeric elements : red, green, blue, alpha values\r\n     * @returns the new array\r\n     */\r\n    public asArray(): number[] {\r\n        return [this.r, this.g, this.b, this.a];\r\n    }\r\n\r\n    /**\r\n     * Stores from the starting index in the given array the Color4 successive values\r\n     * @param array defines the array where to store the r,g,b components\r\n     * @param index defines an optional index in the target array to define where to start storing values\r\n     * @returns the current Color4 object\r\n     */\r\n    public toArray(array: FloatArray, index: number = 0): Color4 {\r\n        array[index] = this.r;\r\n        array[index + 1] = this.g;\r\n        array[index + 2] = this.b;\r\n        array[index + 3] = this.a;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update the current color with values stored in an array from the starting index of the given array\r\n     * @param array defines the source array\r\n     * @param offset defines an offset in the source array\r\n     * @returns the current Color4 object\r\n     */\r\n    public fromArray(array: DeepImmutable<ArrayLike<number>>, offset: number = 0): Color4 {\r\n        Color4.FromArrayToRef(array, offset, this);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Determines equality between Color4 objects\r\n     * @param otherColor defines the second operand\r\n     * @returns true if the rgba values are equal to the given ones\r\n     */\r\n    public equals(otherColor: DeepImmutable<Color4>): boolean {\r\n        return otherColor && this.r === otherColor.r && this.g === otherColor.g && this.b === otherColor.b && this.a === otherColor.a;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 set with the added values of the current Color4 and of the given one\r\n     * @param right defines the second operand\r\n     * @returns a new Color4 object\r\n     */\r\n    public add(right: DeepImmutable<Color4>): Color4 {\r\n        return new Color4(this.r + right.r, this.g + right.g, this.b + right.b, this.a + right.a);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 set with the subtracted values of the given one from the current Color4\r\n     * @param right defines the second operand\r\n     * @returns a new Color4 object\r\n     */\r\n    public subtract(right: DeepImmutable<Color4>): Color4 {\r\n        return new Color4(this.r - right.r, this.g - right.g, this.b - right.b, this.a - right.a);\r\n    }\r\n\r\n    /**\r\n     * Subtracts the given ones from the current Color4 values and stores the results in \"result\"\r\n     * @param right defines the second operand\r\n     * @param result defines the Color4 object where to store the result\r\n     * @returns the current Color4 object\r\n     */\r\n    public subtractToRef(right: DeepImmutable<Color4>, result: Color4): Color4 {\r\n        result.r = this.r - right.r;\r\n        result.g = this.g - right.g;\r\n        result.b = this.b - right.b;\r\n        result.a = this.a - right.a;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 with the current Color4 values multiplied by scale\r\n     * @param scale defines the scaling factor to apply\r\n     * @returns a new Color4 object\r\n     */\r\n    public scale(scale: number): Color4 {\r\n        return new Color4(this.r * scale, this.g * scale, this.b * scale, this.a * scale);\r\n    }\r\n\r\n    /**\r\n     * Multiplies the current Color4 values by scale and stores the result in \"result\"\r\n     * @param scale defines the scaling factor to apply\r\n     * @param result defines the Color4 object where to store the result\r\n     * @returns the current unmodified Color4\r\n     */\r\n    public scaleToRef(scale: number, result: Color4): Color4 {\r\n        result.r = this.r * scale;\r\n        result.g = this.g * scale;\r\n        result.b = this.b * scale;\r\n        result.a = this.a * scale;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Scale the current Color4 values by a factor and add the result to a given Color4\r\n     * @param scale defines the scale factor\r\n     * @param result defines the Color4 object where to store the result\r\n     * @returns the unmodified current Color4\r\n     */\r\n    public scaleAndAddToRef(scale: number, result: Color4): Color4 {\r\n        result.r += this.r * scale;\r\n        result.g += this.g * scale;\r\n        result.b += this.b * scale;\r\n        result.a += this.a * scale;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clamps the rgb values by the min and max values and stores the result into \"result\"\r\n     * @param min defines minimum clamping value (default is 0)\r\n     * @param max defines maximum clamping value (default is 1)\r\n     * @param result defines color to store the result into.\r\n     * @returns the current Color4\r\n     */\r\n    public clampToRef(min: number = 0, max: number = 1, result: Color4): Color4 {\r\n        result.r = Scalar.Clamp(this.r, min, max);\r\n        result.g = Scalar.Clamp(this.g, min, max);\r\n        result.b = Scalar.Clamp(this.b, min, max);\r\n        result.a = Scalar.Clamp(this.a, min, max);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiply an Color4 value by another and return a new Color4 object\r\n     * @param color defines the Color4 value to multiply by\r\n     * @returns a new Color4 object\r\n     */\r\n    public multiply(color: Color4): Color4 {\r\n        return new Color4(this.r * color.r, this.g * color.g, this.b * color.b, this.a * color.a);\r\n    }\r\n\r\n    /**\r\n     * Multiply a Color4 value by another and push the result in a reference value\r\n     * @param color defines the Color4 value to multiply by\r\n     * @param result defines the Color4 to fill the result in\r\n     * @returns the result Color4\r\n     */\r\n    public multiplyToRef(color: Color4, result: Color4): Color4 {\r\n        result.r = this.r * color.r;\r\n        result.g = this.g * color.g;\r\n        result.b = this.b * color.b;\r\n        result.a = this.a * color.a;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Creates a string with the Color4 current values\r\n     * @returns the string representation of the Color4 object\r\n     */\r\n    public toString(): string {\r\n        return \"{R: \" + this.r + \" G:\" + this.g + \" B:\" + this.b + \" A:\" + this.a + \"}\";\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"Color4\"\r\n     * @returns \"Color4\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"Color4\";\r\n    }\r\n\r\n    /**\r\n     * Compute the Color4 hash code\r\n     * @returns an unique number that can be used to hash Color4 objects\r\n     */\r\n    public getHashCode(): number {\r\n        let hash = (this.r * 255) | 0;\r\n        hash = (hash * 397) ^ ((this.g * 255) | 0);\r\n        hash = (hash * 397) ^ ((this.b * 255) | 0);\r\n        hash = (hash * 397) ^ ((this.a * 255) | 0);\r\n        return hash;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 copied from the current one\r\n     * @returns a new Color4 object\r\n     */\r\n    public clone(): Color4 {\r\n        return new Color4(this.r, this.g, this.b, this.a);\r\n    }\r\n\r\n    /**\r\n     * Copies the given Color4 values into the current one\r\n     * @param source defines the source Color4 object\r\n     * @returns the current updated Color4 object\r\n     */\r\n    public copyFrom(source: Color4): Color4 {\r\n        this.r = source.r;\r\n        this.g = source.g;\r\n        this.b = source.b;\r\n        this.a = source.a;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Copies the given float values into the current one\r\n     * @param r defines the red component to read from\r\n     * @param g defines the green component to read from\r\n     * @param b defines the blue component to read from\r\n     * @param a defines the alpha component to read from\r\n     * @returns the current updated Color4 object\r\n     */\r\n    public copyFromFloats(r: number, g: number, b: number, a: number): Color4 {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n        this.a = a;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Copies the given float values into the current one\r\n     * @param r defines the red component to read from\r\n     * @param g defines the green component to read from\r\n     * @param b defines the blue component to read from\r\n     * @param a defines the alpha component to read from\r\n     * @returns the current updated Color4 object\r\n     */\r\n    public set(r: number, g: number, b: number, a: number): Color4 {\r\n        return this.copyFromFloats(r, g, b, a);\r\n    }\r\n\r\n    /**\r\n     * Compute the Color4 hexadecimal code as a string\r\n     * @param returnAsColor3 defines if the string should only contains RGB values (off by default)\r\n     * @returns a string containing the hexadecimal representation of the Color4 object\r\n     */\r\n    public toHexString(returnAsColor3 = false): string {\r\n        const intR = Math.round(this.r * 255);\r\n        const intG = Math.round(this.g * 255);\r\n        const intB = Math.round(this.b * 255);\r\n\r\n        if (returnAsColor3) {\r\n            return \"#\" + Scalar.ToHex(intR) + Scalar.ToHex(intG) + Scalar.ToHex(intB);\r\n        }\r\n\r\n        const intA = Math.round(this.a * 255);\r\n        return \"#\" + Scalar.ToHex(intR) + Scalar.ToHex(intG) + Scalar.ToHex(intB) + Scalar.ToHex(intA);\r\n    }\r\n\r\n    /**\r\n     * Computes a new Color4 converted from the current one to linear space\r\n     * @returns a new Color4 object\r\n     */\r\n    public toLinearSpace(): Color4 {\r\n        const convertedColor = new Color4();\r\n        this.toLinearSpaceToRef(convertedColor);\r\n        return convertedColor;\r\n    }\r\n\r\n    /**\r\n     * Converts the Color4 values to linear space and stores the result in \"convertedColor\"\r\n     * @param convertedColor defines the Color4 object where to store the linear space version\r\n     * @returns the unmodified Color4\r\n     */\r\n    public toLinearSpaceToRef(convertedColor: Color4): Color4 {\r\n        convertedColor.r = Math.pow(this.r, ToLinearSpace);\r\n        convertedColor.g = Math.pow(this.g, ToLinearSpace);\r\n        convertedColor.b = Math.pow(this.b, ToLinearSpace);\r\n        convertedColor.a = this.a;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Computes a new Color4 converted from the current one to gamma space\r\n     * @returns a new Color4 object\r\n     */\r\n    public toGammaSpace(): Color4 {\r\n        const convertedColor = new Color4();\r\n        this.toGammaSpaceToRef(convertedColor);\r\n        return convertedColor;\r\n    }\r\n\r\n    /**\r\n     * Converts the Color4 values to gamma space and stores the result in \"convertedColor\"\r\n     * @param convertedColor defines the Color4 object where to store the gamma space version\r\n     * @returns the unmodified Color4\r\n     */\r\n    public toGammaSpaceToRef(convertedColor: Color4): Color4 {\r\n        convertedColor.r = Math.pow(this.r, ToGammaSpace);\r\n        convertedColor.g = Math.pow(this.g, ToGammaSpace);\r\n        convertedColor.b = Math.pow(this.b, ToGammaSpace);\r\n        convertedColor.a = this.a;\r\n        return this;\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Creates a new Color4 from the string containing valid hexadecimal values.\r\n     *\r\n     * A valid hex string is either in the format #RRGGBB or #RRGGBBAA.\r\n     *\r\n     * When a hex string without alpha is passed, the resulting Color4 has\r\n     * its alpha value set to 1.0.\r\n     *\r\n     * An invalid string results in a Color with all its channels set to 0.0,\r\n     * i.e. \"transparent black\".\r\n     *\r\n     * @param hex defines a string containing valid hexadecimal values\r\n     * @returns a new Color4 object\r\n     */\r\n    public static FromHexString(hex: string): Color4 {\r\n        if (hex.substring(0, 1) !== \"#\" || (hex.length !== 9 && hex.length !== 7)) {\r\n            return new Color4(0.0, 0.0, 0.0, 0.0);\r\n        }\r\n\r\n        const r = parseInt(hex.substring(1, 3), 16);\r\n        const g = parseInt(hex.substring(3, 5), 16);\r\n        const b = parseInt(hex.substring(5, 7), 16);\r\n        const a = hex.length === 9 ? parseInt(hex.substring(7, 9), 16) : 255;\r\n\r\n        return Color4.FromInts(r, g, b, a);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 object set with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\r\n     * @param left defines the start value\r\n     * @param right defines the end value\r\n     * @param amount defines the gradient factor\r\n     * @returns a new Color4 object\r\n     */\r\n    public static Lerp(left: DeepImmutable<Color4>, right: DeepImmutable<Color4>, amount: number): Color4 {\r\n        const result = new Color4(0.0, 0.0, 0.0, 0.0);\r\n        Color4.LerpToRef(left, right, amount, result);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Set the given \"result\" with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\r\n     * @param left defines the start value\r\n     * @param right defines the end value\r\n     * @param amount defines the gradient factor\r\n     * @param result defines the Color4 object where to store data\r\n     */\r\n    public static LerpToRef(left: DeepImmutable<Color4>, right: DeepImmutable<Color4>, amount: number, result: Color4): void {\r\n        result.r = left.r + (right.r - left.r) * amount;\r\n        result.g = left.g + (right.g - left.g) * amount;\r\n        result.b = left.b + (right.b - left.b) * amount;\r\n        result.a = left.a + (right.a - left.a) * amount;\r\n    }\r\n\r\n    /**\r\n     * Interpolate between two Color4 using Hermite interpolation\r\n     * @param value1 defines first Color4\r\n     * @param tangent1 defines the incoming tangent\r\n     * @param value2 defines second Color4\r\n     * @param tangent2 defines the outgoing tangent\r\n     * @param amount defines the target Color4\r\n     * @returns the new interpolated Color4\r\n     */\r\n    public static Hermite(value1: DeepImmutable<Color4>, tangent1: DeepImmutable<Color4>, value2: DeepImmutable<Color4>, tangent2: DeepImmutable<Color4>, amount: number): Color4 {\r\n        const squared = amount * amount;\r\n        const cubed = amount * squared;\r\n        const part1 = 2.0 * cubed - 3.0 * squared + 1.0;\r\n        const part2 = -2.0 * cubed + 3.0 * squared;\r\n        const part3 = cubed - 2.0 * squared + amount;\r\n        const part4 = cubed - squared;\r\n\r\n        const r = value1.r * part1 + value2.r * part2 + tangent1.r * part3 + tangent2.r * part4;\r\n        const g = value1.g * part1 + value2.g * part2 + tangent1.g * part3 + tangent2.g * part4;\r\n        const b = value1.b * part1 + value2.b * part2 + tangent1.b * part3 + tangent2.b * part4;\r\n        const a = value1.a * part1 + value2.a * part2 + tangent1.a * part3 + tangent2.a * part4;\r\n        return new Color4(r, g, b, a);\r\n    }\r\n\r\n    /**\r\n     * Returns a new Color4 which is the 1st derivative of the Hermite spline defined by the colors \"value1\", \"value2\", \"tangent1\", \"tangent2\".\r\n     * @param value1 defines the first control point\r\n     * @param tangent1 defines the first tangent\r\n     * @param value2 defines the second control point\r\n     * @param tangent2 defines the second tangent\r\n     * @param time define where the derivative must be done\r\n     * @returns 1st derivative\r\n     */\r\n    public static Hermite1stDerivative(\r\n        value1: DeepImmutable<Color4>,\r\n        tangent1: DeepImmutable<Color4>,\r\n        value2: DeepImmutable<Color4>,\r\n        tangent2: DeepImmutable<Color4>,\r\n        time: number\r\n    ): Color4 {\r\n        const result = new Color4();\r\n\r\n        this.Hermite1stDerivativeToRef(value1, tangent1, value2, tangent2, time, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Update a Color4 with the 1st derivative of the Hermite spline defined by the colors \"value1\", \"value2\", \"tangent1\", \"tangent2\".\r\n     * @param value1 defines the first control point\r\n     * @param tangent1 defines the first tangent\r\n     * @param value2 defines the second control point\r\n     * @param tangent2 defines the second tangent\r\n     * @param time define where the derivative must be done\r\n     * @param result define where to store the derivative\r\n     */\r\n    public static Hermite1stDerivativeToRef(\r\n        value1: DeepImmutable<Color4>,\r\n        tangent1: DeepImmutable<Color4>,\r\n        value2: DeepImmutable<Color4>,\r\n        tangent2: DeepImmutable<Color4>,\r\n        time: number,\r\n        result: Color4\r\n    ) {\r\n        const t2 = time * time;\r\n\r\n        result.r = (t2 - time) * 6 * value1.r + (3 * t2 - 4 * time + 1) * tangent1.r + (-t2 + time) * 6 * value2.r + (3 * t2 - 2 * time) * tangent2.r;\r\n        result.g = (t2 - time) * 6 * value1.g + (3 * t2 - 4 * time + 1) * tangent1.g + (-t2 + time) * 6 * value2.g + (3 * t2 - 2 * time) * tangent2.g;\r\n        result.b = (t2 - time) * 6 * value1.b + (3 * t2 - 4 * time + 1) * tangent1.b + (-t2 + time) * 6 * value2.b + (3 * t2 - 2 * time) * tangent2.b;\r\n        result.a = (t2 - time) * 6 * value1.a + (3 * t2 - 4 * time + 1) * tangent1.a + (-t2 + time) * 6 * value2.a + (3 * t2 - 2 * time) * tangent2.a;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 from a Color3 and an alpha value\r\n     * @param color3 defines the source Color3 to read from\r\n     * @param alpha defines the alpha component (1.0 by default)\r\n     * @returns a new Color4 object\r\n     */\r\n    public static FromColor3(color3: DeepImmutable<Color3>, alpha: number = 1.0): Color4 {\r\n        return new Color4(color3.r, color3.g, color3.b, alpha);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 from the starting index element of the given array\r\n     * @param array defines the source array to read from\r\n     * @param offset defines the offset in the source array\r\n     * @returns a new Color4 object\r\n     */\r\n    public static FromArray(array: DeepImmutable<ArrayLike<number>>, offset: number = 0): Color4 {\r\n        return new Color4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color4 from the starting index element of the given array\r\n     * @param array defines the source array to read from\r\n     * @param offset defines the offset in the source array\r\n     * @param result defines the target Color4 object\r\n     */\r\n    public static FromArrayToRef(array: DeepImmutable<ArrayLike<number>>, offset: number = 0, result: Color4) {\r\n        result.r = array[offset];\r\n        result.g = array[offset + 1];\r\n        result.b = array[offset + 2];\r\n        result.a = array[offset + 3];\r\n    }\r\n\r\n    /**\r\n     * Creates a new Color3 from integer values (< 256)\r\n     * @param r defines the red component to read from (value between 0 and 255)\r\n     * @param g defines the green component to read from (value between 0 and 255)\r\n     * @param b defines the blue component to read from (value between 0 and 255)\r\n     * @param a defines the alpha component to read from (value between 0 and 255)\r\n     * @returns a new Color3 object\r\n     */\r\n    public static FromInts(r: number, g: number, b: number, a: number): Color4 {\r\n        return new Color4(r / 255.0, g / 255.0, b / 255.0, a / 255.0);\r\n    }\r\n\r\n    /**\r\n     * Check the content of a given array and convert it to an array containing RGBA data\r\n     * If the original array was already containing count * 4 values then it is returned directly\r\n     * @param colors defines the array to check\r\n     * @param count defines the number of RGBA data to expect\r\n     * @returns an array containing count * 4 values (RGBA)\r\n     */\r\n    public static CheckColors4(colors: number[], count: number): number[] {\r\n        // Check if color3 was used\r\n        if (colors.length === count * 3) {\r\n            const colors4 = [];\r\n            for (let index = 0; index < colors.length; index += 3) {\r\n                const newIndex = (index / 3) * 4;\r\n                colors4[newIndex] = colors[index];\r\n                colors4[newIndex + 1] = colors[index + 1];\r\n                colors4[newIndex + 2] = colors[index + 2];\r\n                colors4[newIndex + 3] = 1.0;\r\n            }\r\n\r\n            return colors4;\r\n        }\r\n\r\n        return colors;\r\n    }\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class TmpColors {\r\n    public static Color3: Color3[] = ArrayTools.BuildArray(3, Color3.Black);\r\n    public static Color4: Color4[] = ArrayTools.BuildArray(3, () => new Color4(0, 0, 0, 0));\r\n}\r\n\r\nRegisterClass(\"BABYLON.Color3\", Color3);\r\nRegisterClass(\"BABYLON.Color4\", Color4);\r\n"]},"metadata":{},"sourceType":"module"}