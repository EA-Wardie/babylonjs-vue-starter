{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { Camera } from \"../camera.js\";\nimport { Viewport } from \"../../Maths/math.viewport.js\";\nimport { PassPostProcess } from \"../../PostProcesses/passPostProcess.js\";\nimport { StereoscopicInterlacePostProcessI } from \"../../PostProcesses/stereoscopicInterlacePostProcess.js\";\n/**\n * @param camera\n * @hidden\n */\n\nexport function setStereoscopicRigMode(camera) {\n  var isStereoscopicHoriz = camera.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL || camera.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED;\n  var isCrossEye = camera.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED;\n  var isInterlaced = camera.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_INTERLACED; // Use post-processors for interlacing\n\n  if (isInterlaced) {\n    camera._rigCameras[0]._rigPostProcess = new PassPostProcess(camera.name + \"_passthru\", 1.0, camera._rigCameras[0]);\n    camera._rigCameras[1]._rigPostProcess = new StereoscopicInterlacePostProcessI(camera.name + \"_stereoInterlace\", camera._rigCameras, false, true);\n  } // Otherwise, create appropriate viewports\n  else {\n    camera._rigCameras[isCrossEye ? 1 : 0].viewport = new Viewport(0, 0, isStereoscopicHoriz ? 0.5 : 1.0, isStereoscopicHoriz ? 1.0 : 0.5);\n    camera._rigCameras[isCrossEye ? 0 : 1].viewport = new Viewport(isStereoscopicHoriz ? 0.5 : 0, isStereoscopicHoriz ? 0 : 0.5, isStereoscopicHoriz ? 0.5 : 1.0, isStereoscopicHoriz ? 1.0 : 0.5);\n  }\n}","map":{"version":3,"mappings":";AAAA,SAASA,MAAT,QAAuB,cAAvB;AACA,SAASC,QAAT,QAAyB,8BAAzB;AACA,SAASC,eAAT,QAAgC,wCAAhC;AACA,SAASC,iCAAT,QAAkD,yDAAlD;AAEA;;;;;AAIA,OAAM,SAAUC,sBAAV,CAAiCC,MAAjC,EAA+C;AACjD,MAAMC,mBAAmB,GACrBD,MAAM,CAACE,aAAP,KAAyBP,MAAM,CAACQ,yCAAhC,IAA6EH,MAAM,CAACE,aAAP,KAAyBP,MAAM,CAACS,0CADjH;AAEA,MAAMC,UAAU,GAAGL,MAAM,CAACE,aAAP,KAAyBP,MAAM,CAACS,0CAAnD;AACA,MAAME,YAAY,GAAGN,MAAM,CAACE,aAAP,KAAyBP,MAAM,CAACY,gCAArD,CAJiD,CAKjD;;AACA,MAAID,YAAJ,EAAkB;AACdN,UAAM,CAACQ,WAAP,CAAmB,CAAnB,EAAsBC,eAAtB,GAAwC,IAAIZ,eAAJ,CAAoBG,MAAM,CAACU,IAAP,GAAc,WAAlC,EAA+C,GAA/C,EAAoDV,MAAM,CAACQ,WAAP,CAAmB,CAAnB,CAApD,CAAxC;AACAR,UAAM,CAACQ,WAAP,CAAmB,CAAnB,EAAsBC,eAAtB,GAAwC,IAAIX,iCAAJ,CAAsCE,MAAM,CAACU,IAAP,GAAc,kBAApD,EAAwEV,MAAM,CAACQ,WAA/E,EAA4F,KAA5F,EAAmG,IAAnG,CAAxC;AACH,GAHD,CAIA;AAJA,OAKK;AACDR,UAAM,CAACQ,WAAP,CAAmBH,UAAU,GAAG,CAAH,GAAO,CAApC,EAAuCM,QAAvC,GAAkD,IAAIf,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBK,mBAAmB,GAAG,GAAH,GAAS,GAA/C,EAAoDA,mBAAmB,GAAG,GAAH,GAAS,GAAhF,CAAlD;AACAD,UAAM,CAACQ,WAAP,CAAmBH,UAAU,GAAG,CAAH,GAAO,CAApC,EAAuCM,QAAvC,GAAkD,IAAIf,QAAJ,CAC9CK,mBAAmB,GAAG,GAAH,GAAS,CADkB,EAE9CA,mBAAmB,GAAG,CAAH,GAAO,GAFoB,EAG9CA,mBAAmB,GAAG,GAAH,GAAS,GAHkB,EAI9CA,mBAAmB,GAAG,GAAH,GAAS,GAJkB,CAAlD;AAMH;AACJ","names":["Camera","Viewport","PassPostProcess","StereoscopicInterlacePostProcessI","setStereoscopicRigMode","camera","isStereoscopicHoriz","cameraRigMode","RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL","RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED","isCrossEye","isInterlaced","RIG_MODE_STEREOSCOPIC_INTERLACED","_rigCameras","_rigPostProcess","name","viewport"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Cameras/RigModes/stereoscopicRigMode.ts"],"sourcesContent":["import { Camera } from \"../camera\";\r\nimport { Viewport } from \"../../Maths/math.viewport\";\r\nimport { PassPostProcess } from \"../../PostProcesses/passPostProcess\";\r\nimport { StereoscopicInterlacePostProcessI } from \"../../PostProcesses/stereoscopicInterlacePostProcess\";\r\n\r\n/**\r\n * @param camera\r\n * @hidden\r\n */\r\nexport function setStereoscopicRigMode(camera: Camera): void {\r\n    const isStereoscopicHoriz =\r\n        camera.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL || camera.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED;\r\n    const isCrossEye = camera.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_CROSSEYED;\r\n    const isInterlaced = camera.cameraRigMode === Camera.RIG_MODE_STEREOSCOPIC_INTERLACED;\r\n    // Use post-processors for interlacing\r\n    if (isInterlaced) {\r\n        camera._rigCameras[0]._rigPostProcess = new PassPostProcess(camera.name + \"_passthru\", 1.0, camera._rigCameras[0]);\r\n        camera._rigCameras[1]._rigPostProcess = new StereoscopicInterlacePostProcessI(camera.name + \"_stereoInterlace\", camera._rigCameras, false, true);\r\n    }\r\n    // Otherwise, create appropriate viewports\r\n    else {\r\n        camera._rigCameras[isCrossEye ? 1 : 0].viewport = new Viewport(0, 0, isStereoscopicHoriz ? 0.5 : 1.0, isStereoscopicHoriz ? 1.0 : 0.5);\r\n        camera._rigCameras[isCrossEye ? 0 : 1].viewport = new Viewport(\r\n            isStereoscopicHoriz ? 0.5 : 0,\r\n            isStereoscopicHoriz ? 0 : 0.5,\r\n            isStereoscopicHoriz ? 0.5 : 1.0,\r\n            isStereoscopicHoriz ? 1.0 : 0.5\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}