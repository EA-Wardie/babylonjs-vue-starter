{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\n\n/**\n * The engine store class is responsible to hold all the instances of Engine and Scene created\n * during the life time of the application.\n */\nvar EngineStore =\n/** @class */\nfunction () {\n  function EngineStore() {}\n\n  Object.defineProperty(EngineStore, \"LastCreatedEngine\", {\n    /**\n     * Gets the latest created engine\n     */\n    get: function get() {\n      if (this.Instances.length === 0) {\n        return null;\n      }\n\n      return this.Instances[this.Instances.length - 1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EngineStore, \"LastCreatedScene\", {\n    /**\n     * Gets the latest created scene\n     */\n    get: function get() {\n      return this._LastCreatedScene;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** Gets the list of created engines */\n\n  EngineStore.Instances = new Array();\n  /** @hidden */\n\n  EngineStore._LastCreatedScene = null;\n  /**\n   * Gets or sets a global variable indicating if fallback texture must be used when a texture cannot be loaded\n   * @ignorenaming\n   */\n\n  EngineStore.UseFallbackTexture = true;\n  /**\n   * Texture content used if a texture cannot loaded\n   * @ignorenaming\n   */\n\n  EngineStore.FallbackTexture = \"\";\n  return EngineStore;\n}();\n\nexport { EngineStore };","map":{"version":3,"mappings":";;AAKA;;;;AAIA;AAAA;AAAA;AAAA,0BAoCC;;AA1BGA,wBAAkBC,WAAlB,EAAkB,mBAAlB,EAAmC;AAHnC;;;SAGA;AACI,UAAI,KAAKC,SAAL,CAAeC,MAAf,KAA0B,CAA9B,EAAiC;AAC7B,eAAO,IAAP;AACH;;AAED,aAAO,KAAKD,SAAL,CAAe,KAAKA,SAAL,CAAeC,MAAf,GAAwB,CAAvC,CAAP;AACH,KANkC;qBAAA;;AAAA,GAAnC;AAWAH,wBAAkBC,WAAlB,EAAkB,kBAAlB,EAAkC;AAHlC;;;SAGA;AACI,aAAO,KAAKG,iBAAZ;AACH,KAFiC;qBAAA;;AAAA,GAAlC;AApBA;;AACcH,0BAAY,IAAII,KAAJ,EAAZ;AAEd;;AACcJ,kCAAqC,IAArC;AAoBd;;;;;AAIcA,mCAAqB,IAArB;AAEd;;;;;AAIcA,gCAAkB,EAAlB;AAClB;AAAC,CApCD;;SAAaA","names":["Object","EngineStore","Instances","length","_LastCreatedScene","Array"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/engineStore.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\n\r\ndeclare type Engine = import(\"./engine\").Engine;\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * The engine store class is responsible to hold all the instances of Engine and Scene created\r\n * during the life time of the application.\r\n */\r\nexport class EngineStore {\r\n    /** Gets the list of created engines */\r\n    public static Instances = new Array<Engine>();\r\n\r\n    /** @hidden */\r\n    public static _LastCreatedScene: Nullable<Scene> = null;\r\n\r\n    /**\r\n     * Gets the latest created engine\r\n     */\r\n    public static get LastCreatedEngine(): Nullable<Engine> {\r\n        if (this.Instances.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        return this.Instances[this.Instances.length - 1];\r\n    }\r\n\r\n    /**\r\n     * Gets the latest created scene\r\n     */\r\n    public static get LastCreatedScene(): Nullable<Scene> {\r\n        return this._LastCreatedScene;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a global variable indicating if fallback texture must be used when a texture cannot be loaded\r\n     * @ignorenaming\r\n     */\r\n    public static UseFallbackTexture = true;\r\n\r\n    /**\r\n     * Texture content used if a texture cannot loaded\r\n     * @ignorenaming\r\n     */\r\n    public static FallbackTexture = \"\";\r\n}\r\n"]},"metadata":{},"sourceType":"module"}