{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { __extends } from \"tslib\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { TransformNode } from \"../Meshes/transformNode.js\";\nimport { CreatePlane } from \"../Meshes/Builders/planeBuilder.js\";\nimport { PointerDragBehavior } from \"../Behaviors/Meshes/pointerDragBehavior.js\";\nimport { Gizmo } from \"./gizmo.js\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\n/**\n * Single plane drag gizmo\n */\n\nvar PlaneDragGizmo =\n/** @class */\nfunction (_super) {\n  __extends(PlaneDragGizmo, _super);\n  /**\n   * Creates a PlaneDragGizmo\n   * @param dragPlaneNormal The axis normal to which the gizmo will be able to drag on\n   * @param color The color of the gizmo\n   * @param gizmoLayer The utility layer the gizmo will be added to\n   * @param parent\n   */\n\n\n  function PlaneDragGizmo(dragPlaneNormal, color, gizmoLayer, parent) {\n    if (color === void 0) {\n      color = Color3.Gray();\n    }\n\n    if (gizmoLayer === void 0) {\n      gizmoLayer = UtilityLayerRenderer.DefaultUtilityLayer;\n    }\n\n    if (parent === void 0) {\n      parent = null;\n    }\n\n    var _this = this;\n\n    var _a;\n\n    _this = _super.call(this, gizmoLayer) || this;\n    _this._pointerObserver = null;\n    /**\n     * Drag distance in babylon units that the gizmo will snap to when dragged (Default: 0)\n     */\n\n    _this.snapDistance = 0;\n    /**\n     * Event that fires each time the gizmo snaps to a new location.\n     * * snapDistance is the the change in distance\n     */\n\n    _this.onSnapObservable = new Observable();\n    _this._isEnabled = false;\n    _this._parent = null;\n    _this._dragging = false;\n    _this._parent = parent; // Create Material\n\n    _this._coloredMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n    _this._coloredMaterial.diffuseColor = color;\n    _this._coloredMaterial.specularColor = color.subtract(new Color3(0.1, 0.1, 0.1));\n    _this._hoverMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n    _this._hoverMaterial.diffuseColor = Color3.Yellow();\n    _this._disableMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\n    _this._disableMaterial.diffuseColor = Color3.Gray();\n    _this._disableMaterial.alpha = 0.4; // Build plane mesh on root node\n\n    _this._gizmoMesh = PlaneDragGizmo._CreatePlane(gizmoLayer.utilityLayerScene, _this._coloredMaterial);\n\n    _this._gizmoMesh.lookAt(_this._rootMesh.position.add(dragPlaneNormal));\n\n    _this._gizmoMesh.scaling.scaleInPlace(1 / 3);\n\n    _this._gizmoMesh.parent = _this._rootMesh;\n    var currentSnapDragDistance = 0;\n    var tmpVector = new Vector3();\n    var tmpSnapEvent = {\n      snapDistance: 0\n    }; // Add dragPlaneNormal drag behavior to handle events when the gizmo is dragged\n\n    _this.dragBehavior = new PointerDragBehavior({\n      dragPlaneNormal: dragPlaneNormal\n    });\n    _this.dragBehavior.moveAttached = false;\n\n    _this._rootMesh.addBehavior(_this.dragBehavior);\n\n    _this.dragBehavior.onDragObservable.add(function (event) {\n      if (_this.attachedNode) {\n        _this._handlePivot(); // Keep world translation and use it to update world transform\n        // if the node has parent, the local transform properties (position, rotation, scale)\n        // will be recomputed in _matrixChanged function\n        // Snapping logic\n\n\n        if (_this.snapDistance == 0) {\n          _this.attachedNode.getWorldMatrix().addTranslationFromFloats(event.delta.x, event.delta.y, event.delta.z);\n        } else {\n          currentSnapDragDistance += event.dragDistance;\n\n          if (Math.abs(currentSnapDragDistance) > _this.snapDistance) {\n            var dragSteps = Math.floor(Math.abs(currentSnapDragDistance) / _this.snapDistance);\n            currentSnapDragDistance = currentSnapDragDistance % _this.snapDistance;\n            event.delta.normalizeToRef(tmpVector);\n            tmpVector.scaleInPlace(_this.snapDistance * dragSteps);\n\n            _this.attachedNode.getWorldMatrix().addTranslationFromFloats(tmpVector.x, tmpVector.y, tmpVector.z);\n\n            tmpSnapEvent.snapDistance = _this.snapDistance * dragSteps;\n\n            _this.onSnapObservable.notifyObservers(tmpSnapEvent);\n          }\n        }\n\n        _this._matrixChanged();\n      }\n    });\n\n    _this.dragBehavior.onDragStartObservable.add(function () {\n      _this._dragging = true;\n    });\n\n    _this.dragBehavior.onDragEndObservable.add(function () {\n      _this._dragging = false;\n    });\n\n    var light = gizmoLayer._getSharedGizmoLight();\n\n    light.includedOnlyMeshes = light.includedOnlyMeshes.concat(_this._rootMesh.getChildMeshes(false));\n    var cache = {\n      gizmoMeshes: _this._gizmoMesh.getChildMeshes(),\n      colliderMeshes: _this._gizmoMesh.getChildMeshes(),\n      material: _this._coloredMaterial,\n      hoverMaterial: _this._hoverMaterial,\n      disableMaterial: _this._disableMaterial,\n      active: false,\n      dragBehavior: _this.dragBehavior\n    };\n    (_a = _this._parent) === null || _a === void 0 ? void 0 : _a.addToAxisCache(_this._gizmoMesh, cache);\n    _this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add(function (pointerInfo) {\n      var _a;\n\n      if (_this._customMeshSet) {\n        return;\n      }\n\n      _this._isHovered = !!(cache.colliderMeshes.indexOf((_a = pointerInfo === null || pointerInfo === void 0 ? void 0 : pointerInfo.pickInfo) === null || _a === void 0 ? void 0 : _a.pickedMesh) != -1);\n\n      if (!_this._parent) {\n        var material = cache.dragBehavior.enabled ? _this._isHovered || _this._dragging ? _this._hoverMaterial : _this._coloredMaterial : _this._disableMaterial;\n\n        _this._setGizmoMeshMaterial(cache.gizmoMeshes, material);\n      }\n    });\n\n    _this.dragBehavior.onEnabledObservable.add(function (newState) {\n      _this._setGizmoMeshMaterial(cache.gizmoMeshes, newState ? _this._coloredMaterial : _this._disableMaterial);\n    });\n\n    return _this;\n  }\n  /**\n   * @param scene\n   * @param material\n   * @hidden\n   */\n\n\n  PlaneDragGizmo._CreatePlane = function (scene, material) {\n    var plane = new TransformNode(\"plane\", scene); //make sure plane is double sided\n\n    var dragPlane = CreatePlane(\"dragPlane\", {\n      width: 0.1375,\n      height: 0.1375,\n      sideOrientation: 2\n    }, scene);\n    dragPlane.material = material;\n    dragPlane.parent = plane;\n    return plane;\n  };\n\n  PlaneDragGizmo.prototype._attachedNodeChanged = function (value) {\n    if (this.dragBehavior) {\n      this.dragBehavior.enabled = value ? true : false;\n    }\n  };\n\n  Object.defineProperty(PlaneDragGizmo.prototype, \"isEnabled\", {\n    get: function get() {\n      return this._isEnabled;\n    },\n\n    /**\n     * If the gizmo is enabled\n     */\n    set: function set(value) {\n      this._isEnabled = value;\n\n      if (!value) {\n        this.attachedNode = null;\n      } else {\n        if (this._parent) {\n          this.attachedNode = this._parent.attachedNode;\n        }\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Disposes of the gizmo\n   */\n\n  PlaneDragGizmo.prototype.dispose = function () {\n    this.onSnapObservable.clear();\n    this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\n    this.dragBehavior.detach();\n\n    _super.prototype.dispose.call(this);\n\n    if (this._gizmoMesh) {\n      this._gizmoMesh.dispose();\n    }\n\n    [this._coloredMaterial, this._hoverMaterial, this._disableMaterial].forEach(function (matl) {\n      if (matl) {\n        matl.dispose();\n      }\n    });\n  };\n\n  return PlaneDragGizmo;\n}(Gizmo);\n\nexport { PlaneDragGizmo };","map":{"version":3,"mappings":";;;;;;;AACA,SAASA,UAAT,QAA2B,uBAA3B;AAGA,SAASC,OAAT,QAAwB,yBAAxB;AACA,SAASC,MAAT,QAAuB,wBAAvB;AACA,SAASC,aAAT,QAA8B,4BAA9B;AAGA,SAASC,WAAT,QAA4B,oCAA5B;AACA,SAASC,mBAAT,QAAoC,4CAApC;AAEA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,oBAAT,QAAqC,sCAArC;AACA,SAASC,gBAAT,QAAiC,kCAAjC;AAGA;;;;AAGA;AAAA;AAAA;AAAoCC;AAwChC;;;;;;;;;AAOA,0BACIC,eADJ,EAEIC,KAFJ,EAGIC,UAHJ,EAIIC,MAJJ,EAI0C;AAFtC;AAAAF,cAAgBT,MAAM,CAACY,IAAP,EAAhB;AAA6B;;AAC7B;AAAAF,mBAAmCL,oBAAoB,CAACQ,mBAAxD;AAA2E;;AAC3E;AAAAF;AAAsC;;AAJ1C;;;;YAMIG,kBAAMJ,UAAN,KAAiB;AAhDbK,6BAAoD,IAApD;AACR;;;;AAGOA,yBAAe,CAAf;AACP;;;;;AAIOA,6BAAmB,IAAIjB,UAAJ,EAAnB;AAOCiB,uBAAsB,KAAtB;AACAA,oBAAmC,IAAnC;AACAA,sBAAqB,KAArB;AA+BJA,SAAI,CAACC,OAAL,GAAeL,MAAf,CAHsC,CAItC;;AACAI,SAAI,CAACE,gBAAL,GAAwB,IAAIX,gBAAJ,CAAqB,EAArB,EAAyBI,UAAU,CAACQ,iBAApC,CAAxB;AACAH,SAAI,CAACE,gBAAL,CAAsBE,YAAtB,GAAqCV,KAArC;AACAM,SAAI,CAACE,gBAAL,CAAsBG,aAAtB,GAAsCX,KAAK,CAACY,QAAN,CAAe,IAAIrB,MAAJ,CAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,CAAf,CAAtC;AAEAe,SAAI,CAACO,cAAL,GAAsB,IAAIhB,gBAAJ,CAAqB,EAArB,EAAyBI,UAAU,CAACQ,iBAApC,CAAtB;AACAH,SAAI,CAACO,cAAL,CAAoBH,YAApB,GAAmCnB,MAAM,CAACuB,MAAP,EAAnC;AAEAR,SAAI,CAACS,gBAAL,GAAwB,IAAIlB,gBAAJ,CAAqB,EAArB,EAAyBI,UAAU,CAACQ,iBAApC,CAAxB;AACAH,SAAI,CAACS,gBAAL,CAAsBL,YAAtB,GAAqCnB,MAAM,CAACY,IAAP,EAArC;AACAG,SAAI,CAACS,gBAAL,CAAsBC,KAAtB,GAA8B,GAA9B,CAdsC,CAgBtC;;AACAV,SAAI,CAACW,UAAL,GAAkBC,cAAc,CAACC,YAAf,CAA4BlB,UAAU,CAACQ,iBAAvC,EAA0DH,KAAI,CAACE,gBAA/D,CAAlB;;AAEAF,SAAI,CAACW,UAAL,CAAgBG,MAAhB,CAAuBd,KAAI,CAACe,SAAL,CAAeC,QAAf,CAAwBC,GAAxB,CAA4BxB,eAA5B,CAAvB;;AACAO,SAAI,CAACW,UAAL,CAAgBO,OAAhB,CAAwBC,YAAxB,CAAqC,IAAI,CAAzC;;AACAnB,SAAI,CAACW,UAAL,CAAgBf,MAAhB,GAAyBI,KAAI,CAACe,SAA9B;AAEA,QAAIK,uBAAuB,GAAG,CAA9B;AACA,QAAMC,SAAS,GAAG,IAAIrC,OAAJ,EAAlB;AACA,QAAMsC,YAAY,GAAG;AAAEC,kBAAY,EAAE;AAAhB,KAArB,CAzBsC,CA0BtC;;AACAvB,SAAI,CAACwB,YAAL,GAAoB,IAAIpC,mBAAJ,CAAwB;AAAEK,qBAAe,EAAEA;AAAnB,KAAxB,CAApB;AACAO,SAAI,CAACwB,YAAL,CAAkBC,YAAlB,GAAiC,KAAjC;;AACAzB,SAAI,CAACe,SAAL,CAAeW,WAAf,CAA2B1B,KAAI,CAACwB,YAAhC;;AAEAxB,SAAI,CAACwB,YAAL,CAAkBG,gBAAlB,CAAmCV,GAAnC,CAAuC,UAACW,KAAD,EAAM;AACzC,UAAI5B,KAAI,CAAC6B,YAAT,EAAuB;AACnB7B,aAAI,CAAC8B,YAAL,GADmB,CAEnB;AACA;AACA;AAEA;;;AACA,YAAI9B,KAAI,CAACuB,YAAL,IAAqB,CAAzB,EAA4B;AACxBvB,eAAI,CAAC6B,YAAL,CAAkBE,cAAlB,GAAmCC,wBAAnC,CAA4DJ,KAAK,CAACK,KAAN,CAAYC,CAAxE,EAA2EN,KAAK,CAACK,KAAN,CAAYE,CAAvF,EAA0FP,KAAK,CAACK,KAAN,CAAYG,CAAtG;AACH,SAFD,MAEO;AACHhB,iCAAuB,IAAIQ,KAAK,CAACS,YAAjC;;AACA,cAAIC,IAAI,CAACC,GAAL,CAASnB,uBAAT,IAAoCpB,KAAI,CAACuB,YAA7C,EAA2D;AACvD,gBAAMiB,SAAS,GAAGF,IAAI,CAACG,KAAL,CAAWH,IAAI,CAACC,GAAL,CAASnB,uBAAT,IAAoCpB,KAAI,CAACuB,YAApD,CAAlB;AACAH,mCAAuB,GAAGA,uBAAuB,GAAGpB,KAAI,CAACuB,YAAzD;AACAK,iBAAK,CAACK,KAAN,CAAYS,cAAZ,CAA2BrB,SAA3B;AACAA,qBAAS,CAACF,YAAV,CAAuBnB,KAAI,CAACuB,YAAL,GAAoBiB,SAA3C;;AACAxC,iBAAI,CAAC6B,YAAL,CAAkBE,cAAlB,GAAmCC,wBAAnC,CAA4DX,SAAS,CAACa,CAAtE,EAAyEb,SAAS,CAACc,CAAnF,EAAsFd,SAAS,CAACe,CAAhG;;AACAd,wBAAY,CAACC,YAAb,GAA4BvB,KAAI,CAACuB,YAAL,GAAoBiB,SAAhD;;AACAxC,iBAAI,CAAC2C,gBAAL,CAAsBC,eAAtB,CAAsCtB,YAAtC;AACH;AACJ;;AACDtB,aAAI,CAAC6C,cAAL;AACH;AACJ,KAxBD;;AAyBA7C,SAAI,CAACwB,YAAL,CAAkBsB,qBAAlB,CAAwC7B,GAAxC,CAA4C;AACxCjB,WAAI,CAAC+C,SAAL,GAAiB,IAAjB;AACH,KAFD;;AAGA/C,SAAI,CAACwB,YAAL,CAAkBwB,mBAAlB,CAAsC/B,GAAtC,CAA0C;AACtCjB,WAAI,CAAC+C,SAAL,GAAiB,KAAjB;AACH,KAFD;;AAIA,QAAME,KAAK,GAAGtD,UAAU,CAACuD,oBAAX,EAAd;;AACAD,SAAK,CAACE,kBAAN,GAA2BF,KAAK,CAACE,kBAAN,CAAyBC,MAAzB,CAAgCpD,KAAI,CAACe,SAAL,CAAesC,cAAf,CAA8B,KAA9B,CAAhC,CAA3B;AAEA,QAAMC,KAAK,GAAmB;AAC1BC,iBAAW,EAAEvD,KAAI,CAACW,UAAL,CAAgB0C,cAAhB,EADa;AAE1BG,oBAAc,EAAExD,KAAI,CAACW,UAAL,CAAgB0C,cAAhB,EAFU;AAG1BI,cAAQ,EAAEzD,KAAI,CAACE,gBAHW;AAI1BwD,mBAAa,EAAE1D,KAAI,CAACO,cAJM;AAK1BoD,qBAAe,EAAE3D,KAAI,CAACS,gBALI;AAM1BmD,YAAM,EAAE,KANkB;AAO1BpC,kBAAY,EAAExB,KAAI,CAACwB;AAPO,KAA9B;AASA,eAAI,CAACvB,OAAL,MAAY,IAAZ,IAAY4D,aAAZ,GAAY,MAAZ,GAAYA,GAAEC,cAAF,CAAiB9D,KAAI,CAACW,UAAtB,EAA0C2C,KAA1C,CAAZ;AAEAtD,SAAI,CAAC+D,gBAAL,GAAwBpE,UAAU,CAACQ,iBAAX,CAA6B6D,mBAA7B,CAAiD/C,GAAjD,CAAqD,UAACgD,WAAD,EAAY;;;AACrF,UAAIjE,KAAI,CAACkE,cAAT,EAAyB;AACrB;AACH;;AACDlE,WAAI,CAACmE,UAAL,GAAkB,CAAC,EAAEb,KAAK,CAACE,cAAN,CAAqBY,OAArB,CAAmC,iBAAW,SAAX,eAAW,WAAX,GAAW,MAAX,cAAW,CAAEC,QAAb,MAAqB,IAArB,IAAqBR,aAArB,GAAqB,MAArB,GAAqBA,GAAES,UAA1D,KAAyE,CAAC,CAA5E,CAAnB;;AACA,UAAI,CAACtE,KAAI,CAACC,OAAV,EAAmB;AACf,YAAMwD,QAAQ,GAAGH,KAAK,CAAC9B,YAAN,CAAmB+C,OAAnB,GAA8BvE,KAAI,CAACmE,UAAL,IAAmBnE,KAAI,CAAC+C,SAAxB,GAAoC/C,KAAI,CAACO,cAAzC,GAA0DP,KAAI,CAACE,gBAA7F,GAAiHF,KAAI,CAACS,gBAAvI;;AACAT,aAAI,CAACwE,qBAAL,CAA2BlB,KAAK,CAACC,WAAjC,EAA8CE,QAA9C;AACH;AACJ,KATuB,CAAxB;;AAWAzD,SAAI,CAACwB,YAAL,CAAkBiD,mBAAlB,CAAsCxD,GAAtC,CAA0C,UAACyD,QAAD,EAAS;AAC/C1E,WAAI,CAACwE,qBAAL,CAA2BlB,KAAK,CAACC,WAAjC,EAA8CmB,QAAQ,GAAG1E,KAAI,CAACE,gBAAR,GAA2BF,KAAI,CAACS,gBAAtF;AACH,KAFD;;;AAGH;AArHD;;;;;;;AAKcG,gCAAd,UAA2B+D,KAA3B,EAAyClB,QAAzC,EAAmE;AAC/D,QAAMmB,KAAK,GAAG,IAAI1F,aAAJ,CAAkB,OAAlB,EAA2ByF,KAA3B,CAAd,CAD+D,CAG/D;;AACA,QAAME,SAAS,GAAG1F,WAAW,CAAC,WAAD,EAAc;AAAE2F,WAAK,EAAE,MAAT;AAAiBC,YAAM,EAAE,MAAzB;AAAiCC,qBAAe,EAAE;AAAlD,KAAd,EAAqEL,KAArE,CAA7B;AACAE,aAAS,CAACpB,QAAV,GAAqBA,QAArB;AACAoB,aAAS,CAACjF,MAAV,GAAmBgF,KAAnB;AACA,WAAOA,KAAP;AACH,GARa;;AAiHJhE,kDAAV,UAA+BqE,KAA/B,EAAoD;AAChD,QAAI,KAAKzD,YAAT,EAAuB;AACnB,WAAKA,YAAL,CAAkB+C,OAAlB,GAA4BU,KAAK,GAAG,IAAH,GAAU,KAA3C;AACH;AACJ,GAJS;;AASVC,wBAAWtE,wBAAX,EAAW,WAAX,EAAoB;SAUpB;AACI,aAAO,KAAKuE,UAAZ;AACH,KAZmB;;AAHpB;;;SAGA,aAAqBF,KAArB,EAAmC;AAC/B,WAAKE,UAAL,GAAkBF,KAAlB;;AACA,UAAI,CAACA,KAAL,EAAY;AACR,aAAKpD,YAAL,GAAoB,IAApB;AACH,OAFD,MAEO;AACH,YAAI,KAAK5B,OAAT,EAAkB;AACd,eAAK4B,YAAL,GAAoB,KAAK5B,OAAL,CAAa4B,YAAjC;AACH;AACJ;AACJ,KATmB;qBAAA;;AAAA,GAApB;AAaA;;;;AAGOjB,qCAAP;AACI,SAAK+B,gBAAL,CAAsByC,KAAtB;AACA,SAAKzF,UAAL,CAAgBQ,iBAAhB,CAAkC6D,mBAAlC,CAAsDqB,MAAtD,CAA6D,KAAKtB,gBAAlE;AACA,SAAKvC,YAAL,CAAkB8D,MAAlB;;AACAvF,qBAAMwF,OAAN,CAAaC,IAAb,CAAa,IAAb;;AACA,QAAI,KAAK7E,UAAT,EAAqB;AACjB,WAAKA,UAAL,CAAgB4E,OAAhB;AACH;;AACD,KAAC,KAAKrF,gBAAN,EAAwB,KAAKK,cAA7B,EAA6C,KAAKE,gBAAlD,EAAoEgF,OAApE,CAA4E,UAACC,IAAD,EAAK;AAC7E,UAAIA,IAAJ,EAAU;AACNA,YAAI,CAACH,OAAL;AACH;AACJ,KAJD;AAKH,GAbM;;AAcX;AAAC,CAtLD,CAAoClG,KAApC","names":["Observable","Vector3","Color3","TransformNode","CreatePlane","PointerDragBehavior","Gizmo","UtilityLayerRenderer","StandardMaterial","__extends","dragPlaneNormal","color","gizmoLayer","parent","Gray","DefaultUtilityLayer","_super","_this","_parent","_coloredMaterial","utilityLayerScene","diffuseColor","specularColor","subtract","_hoverMaterial","Yellow","_disableMaterial","alpha","_gizmoMesh","PlaneDragGizmo","_CreatePlane","lookAt","_rootMesh","position","add","scaling","scaleInPlace","currentSnapDragDistance","tmpVector","tmpSnapEvent","snapDistance","dragBehavior","moveAttached","addBehavior","onDragObservable","event","attachedNode","_handlePivot","getWorldMatrix","addTranslationFromFloats","delta","x","y","z","dragDistance","Math","abs","dragSteps","floor","normalizeToRef","onSnapObservable","notifyObservers","_matrixChanged","onDragStartObservable","_dragging","onDragEndObservable","light","_getSharedGizmoLight","includedOnlyMeshes","concat","getChildMeshes","cache","gizmoMeshes","colliderMeshes","material","hoverMaterial","disableMaterial","active","_a","addToAxisCache","_pointerObserver","onPointerObservable","pointerInfo","_customMeshSet","_isHovered","indexOf","pickInfo","pickedMesh","enabled","_setGizmoMeshMaterial","onEnabledObservable","newState","scene","plane","dragPlane","width","height","sideOrientation","value","Object","_isEnabled","clear","remove","detach","dispose","call","forEach","matl"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Gizmos/planeDragGizmo.ts"],"sourcesContent":["import type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { PointerInfo } from \"../Events/pointerEvents\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { TransformNode } from \"../Meshes/transformNode\";\r\nimport type { Node } from \"../node\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport { CreatePlane } from \"../Meshes/Builders/planeBuilder\";\r\nimport { PointerDragBehavior } from \"../Behaviors/Meshes/pointerDragBehavior\";\r\nimport type { GizmoAxisCache } from \"./gizmo\";\r\nimport { Gizmo } from \"./gizmo\";\r\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\r\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { PositionGizmo } from \"./positionGizmo\";\r\n/**\r\n * Single plane drag gizmo\r\n */\r\nexport class PlaneDragGizmo extends Gizmo {\r\n    /**\r\n     * Drag behavior responsible for the gizmos dragging interactions\r\n     */\r\n    public dragBehavior: PointerDragBehavior;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>> = null;\r\n    /**\r\n     * Drag distance in babylon units that the gizmo will snap to when dragged (Default: 0)\r\n     */\r\n    public snapDistance = 0;\r\n    /**\r\n     * Event that fires each time the gizmo snaps to a new location.\r\n     * * snapDistance is the the change in distance\r\n     */\r\n    public onSnapObservable = new Observable<{ snapDistance: number }>();\r\n\r\n    private _gizmoMesh: TransformNode;\r\n    private _coloredMaterial: StandardMaterial;\r\n    private _hoverMaterial: StandardMaterial;\r\n    private _disableMaterial: StandardMaterial;\r\n\r\n    private _isEnabled: boolean = false;\r\n    private _parent: Nullable<PositionGizmo> = null;\r\n    private _dragging: boolean = false;\r\n\r\n    /**\r\n     * @param scene\r\n     * @param material\r\n     * @hidden\r\n     */\r\n    public static _CreatePlane(scene: Scene, material: StandardMaterial): TransformNode {\r\n        const plane = new TransformNode(\"plane\", scene);\r\n\r\n        //make sure plane is double sided\r\n        const dragPlane = CreatePlane(\"dragPlane\", { width: 0.1375, height: 0.1375, sideOrientation: 2 }, scene);\r\n        dragPlane.material = material;\r\n        dragPlane.parent = plane;\r\n        return plane;\r\n    }\r\n\r\n    /**\r\n     * Creates a PlaneDragGizmo\r\n     * @param dragPlaneNormal The axis normal to which the gizmo will be able to drag on\r\n     * @param color The color of the gizmo\r\n     * @param gizmoLayer The utility layer the gizmo will be added to\r\n     * @param parent\r\n     */\r\n    constructor(\r\n        dragPlaneNormal: Vector3,\r\n        color: Color3 = Color3.Gray(),\r\n        gizmoLayer: UtilityLayerRenderer = UtilityLayerRenderer.DefaultUtilityLayer,\r\n        parent: Nullable<PositionGizmo> = null\r\n    ) {\r\n        super(gizmoLayer);\r\n        this._parent = parent;\r\n        // Create Material\r\n        this._coloredMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\r\n        this._coloredMaterial.diffuseColor = color;\r\n        this._coloredMaterial.specularColor = color.subtract(new Color3(0.1, 0.1, 0.1));\r\n\r\n        this._hoverMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\r\n        this._hoverMaterial.diffuseColor = Color3.Yellow();\r\n\r\n        this._disableMaterial = new StandardMaterial(\"\", gizmoLayer.utilityLayerScene);\r\n        this._disableMaterial.diffuseColor = Color3.Gray();\r\n        this._disableMaterial.alpha = 0.4;\r\n\r\n        // Build plane mesh on root node\r\n        this._gizmoMesh = PlaneDragGizmo._CreatePlane(gizmoLayer.utilityLayerScene, this._coloredMaterial);\r\n\r\n        this._gizmoMesh.lookAt(this._rootMesh.position.add(dragPlaneNormal));\r\n        this._gizmoMesh.scaling.scaleInPlace(1 / 3);\r\n        this._gizmoMesh.parent = this._rootMesh;\r\n\r\n        let currentSnapDragDistance = 0;\r\n        const tmpVector = new Vector3();\r\n        const tmpSnapEvent = { snapDistance: 0 };\r\n        // Add dragPlaneNormal drag behavior to handle events when the gizmo is dragged\r\n        this.dragBehavior = new PointerDragBehavior({ dragPlaneNormal: dragPlaneNormal });\r\n        this.dragBehavior.moveAttached = false;\r\n        this._rootMesh.addBehavior(this.dragBehavior);\r\n\r\n        this.dragBehavior.onDragObservable.add((event) => {\r\n            if (this.attachedNode) {\r\n                this._handlePivot();\r\n                // Keep world translation and use it to update world transform\r\n                // if the node has parent, the local transform properties (position, rotation, scale)\r\n                // will be recomputed in _matrixChanged function\r\n\r\n                // Snapping logic\r\n                if (this.snapDistance == 0) {\r\n                    this.attachedNode.getWorldMatrix().addTranslationFromFloats(event.delta.x, event.delta.y, event.delta.z);\r\n                } else {\r\n                    currentSnapDragDistance += event.dragDistance;\r\n                    if (Math.abs(currentSnapDragDistance) > this.snapDistance) {\r\n                        const dragSteps = Math.floor(Math.abs(currentSnapDragDistance) / this.snapDistance);\r\n                        currentSnapDragDistance = currentSnapDragDistance % this.snapDistance;\r\n                        event.delta.normalizeToRef(tmpVector);\r\n                        tmpVector.scaleInPlace(this.snapDistance * dragSteps);\r\n                        this.attachedNode.getWorldMatrix().addTranslationFromFloats(tmpVector.x, tmpVector.y, tmpVector.z);\r\n                        tmpSnapEvent.snapDistance = this.snapDistance * dragSteps;\r\n                        this.onSnapObservable.notifyObservers(tmpSnapEvent);\r\n                    }\r\n                }\r\n                this._matrixChanged();\r\n            }\r\n        });\r\n        this.dragBehavior.onDragStartObservable.add(() => {\r\n            this._dragging = true;\r\n        });\r\n        this.dragBehavior.onDragEndObservable.add(() => {\r\n            this._dragging = false;\r\n        });\r\n\r\n        const light = gizmoLayer._getSharedGizmoLight();\r\n        light.includedOnlyMeshes = light.includedOnlyMeshes.concat(this._rootMesh.getChildMeshes(false));\r\n\r\n        const cache: GizmoAxisCache = {\r\n            gizmoMeshes: this._gizmoMesh.getChildMeshes() as Mesh[],\r\n            colliderMeshes: this._gizmoMesh.getChildMeshes() as Mesh[],\r\n            material: this._coloredMaterial,\r\n            hoverMaterial: this._hoverMaterial,\r\n            disableMaterial: this._disableMaterial,\r\n            active: false,\r\n            dragBehavior: this.dragBehavior,\r\n        };\r\n        this._parent?.addToAxisCache(this._gizmoMesh as Mesh, cache);\r\n\r\n        this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add((pointerInfo) => {\r\n            if (this._customMeshSet) {\r\n                return;\r\n            }\r\n            this._isHovered = !!(cache.colliderMeshes.indexOf(<Mesh>pointerInfo?.pickInfo?.pickedMesh) != -1);\r\n            if (!this._parent) {\r\n                const material = cache.dragBehavior.enabled ? (this._isHovered || this._dragging ? this._hoverMaterial : this._coloredMaterial) : this._disableMaterial;\r\n                this._setGizmoMeshMaterial(cache.gizmoMeshes, material);\r\n            }\r\n        });\r\n\r\n        this.dragBehavior.onEnabledObservable.add((newState) => {\r\n            this._setGizmoMeshMaterial(cache.gizmoMeshes, newState ? this._coloredMaterial : this._disableMaterial);\r\n        });\r\n    }\r\n    protected _attachedNodeChanged(value: Nullable<Node>) {\r\n        if (this.dragBehavior) {\r\n            this.dragBehavior.enabled = value ? true : false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If the gizmo is enabled\r\n     */\r\n    public set isEnabled(value: boolean) {\r\n        this._isEnabled = value;\r\n        if (!value) {\r\n            this.attachedNode = null;\r\n        } else {\r\n            if (this._parent) {\r\n                this.attachedNode = this._parent.attachedNode;\r\n            }\r\n        }\r\n    }\r\n    public get isEnabled(): boolean {\r\n        return this._isEnabled;\r\n    }\r\n    /**\r\n     * Disposes of the gizmo\r\n     */\r\n    public dispose() {\r\n        this.onSnapObservable.clear();\r\n        this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n        this.dragBehavior.detach();\r\n        super.dispose();\r\n        if (this._gizmoMesh) {\r\n            this._gizmoMesh.dispose();\r\n        }\r\n        [this._coloredMaterial, this._hoverMaterial, this._disableMaterial].forEach((matl) => {\r\n            if (matl) {\r\n                matl.dispose();\r\n            }\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}