{"ast":null,"code":"import { Engine } from \"../../engine.js\";\nimport { WebGPUEngine } from \"../../webgpuEngine.js\";\n\nWebGPUEngine.prototype.setAlphaMode = function (mode, noDepthWriteChange) {\n  if (noDepthWriteChange === void 0) {\n    noDepthWriteChange = false;\n  }\n\n  if (this._alphaMode === mode && (mode === 0 && !this._alphaState.alphaBlend || mode !== 0 && this._alphaState.alphaBlend)) {\n    return;\n  }\n\n  switch (mode) {\n    case 0:\n      this._alphaState.alphaBlend = false;\n      break;\n\n    case 7:\n      this._alphaState.setAlphaBlendFunctionParameters(1, 771, 1, 1);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 8:\n      this._alphaState.setAlphaBlendFunctionParameters(1, 771, 1, 771);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 2:\n      this._alphaState.setAlphaBlendFunctionParameters(770, 771, 1, 1);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 6:\n      this._alphaState.setAlphaBlendFunctionParameters(1, 1, 0, 1);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 1:\n      this._alphaState.setAlphaBlendFunctionParameters(770, 1, 0, 1);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 3:\n      this._alphaState.setAlphaBlendFunctionParameters(0, 769, 1, 1);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 4:\n      this._alphaState.setAlphaBlendFunctionParameters(774, 0, 1, 1);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 5:\n      this._alphaState.setAlphaBlendFunctionParameters(770, 769, 1, 1);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 9:\n      this._alphaState.setAlphaBlendFunctionParameters(32769, 32770, 32771, 32772);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 10:\n      this._alphaState.setAlphaBlendFunctionParameters(1, 769, 1, 771);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 11:\n      this._alphaState.setAlphaBlendFunctionParameters(1, 1, 1, 1);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 12:\n      this._alphaState.setAlphaBlendFunctionParameters(772, 1, 0, 0);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 13:\n      this._alphaState.setAlphaBlendFunctionParameters(775, 769, 773, 771);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 14:\n      this._alphaState.setAlphaBlendFunctionParameters(1, 771, 1, 771);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 15:\n      this._alphaState.setAlphaBlendFunctionParameters(1, 1, 1, 0);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 16:\n      this._alphaState.setAlphaBlendFunctionParameters(775, 769, 0, 1);\n\n      this._alphaState.alphaBlend = true;\n      break;\n\n    case 17:\n      // Same as ALPHA_COMBINE but accumulates (1 - alpha) values in the alpha channel for a later readout in order independant transparency\n      this._alphaState.setAlphaBlendFunctionParameters(770, 771, 1, 771);\n\n      this._alphaState.alphaBlend = true;\n      break;\n  }\n\n  if (!noDepthWriteChange) {\n    this.setDepthWrite(mode === Engine.ALPHA_DISABLE);\n\n    this._cacheRenderPipeline.setDepthWriteEnabled(mode === Engine.ALPHA_DISABLE);\n  }\n\n  this._alphaMode = mode;\n\n  this._cacheRenderPipeline.setAlphaBlendEnabled(this._alphaState.alphaBlend);\n\n  this._cacheRenderPipeline.setAlphaBlendFactors(this._alphaState._blendFunctionParameters, this._alphaState._blendEquationParameters);\n};\n\nWebGPUEngine.prototype.setAlphaEquation = function (equation) {\n  Engine.prototype.setAlphaEquation.call(this, equation);\n\n  this._cacheRenderPipeline.setAlphaBlendFactors(this._alphaState._blendFunctionParameters, this._alphaState._blendEquationParameters);\n};","map":{"version":3,"mappings":"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","names":["Engine","WebGPUEngine","prototype","setAlphaMode","mode","noDepthWriteChange","_alphaMode","_alphaState","alphaBlend","setAlphaBlendFunctionParameters","setDepthWrite","ALPHA_DISABLE","_cacheRenderPipeline","setDepthWriteEnabled","setAlphaBlendEnabled","setAlphaBlendFactors","_blendFunctionParameters","_blendEquationParameters","setAlphaEquation","equation","call"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Engines/WebGPU/Extensions/engine.alpha.ts"],"sourcesContent":["import { Constants } from \"../../constants\";\r\nimport { Engine } from \"../../engine\";\r\nimport { WebGPUEngine } from \"../../webgpuEngine\";\r\n\r\nWebGPUEngine.prototype.setAlphaMode = function (mode: number, noDepthWriteChange: boolean = false): void {\r\n    if (this._alphaMode === mode && ((mode === Constants.ALPHA_DISABLE && !this._alphaState.alphaBlend) || (mode !== Constants.ALPHA_DISABLE && this._alphaState.alphaBlend))) {\r\n        return;\r\n    }\r\n\r\n    switch (mode) {\r\n        case Constants.ALPHA_DISABLE:\r\n            this._alphaState.alphaBlend = false;\r\n            break;\r\n        case Constants.ALPHA_PREMULTIPLIED:\r\n            this._alphaState.setAlphaBlendFunctionParameters(1, Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_ALPHA, 1, 1);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_PREMULTIPLIED_PORTERDUFF:\r\n            this._alphaState.setAlphaBlendFunctionParameters(1, Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_ALPHA, 1, Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_ALPHA);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_COMBINE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(Constants.GL_ALPHA_FUNCTION_SRC_ALPHA, Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_ALPHA, 1, 1);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ONEONE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(1, 1, 0, 1);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ADD:\r\n            this._alphaState.setAlphaBlendFunctionParameters(Constants.GL_ALPHA_FUNCTION_SRC_ALPHA, 1, 0, 1);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_SUBTRACT:\r\n            this._alphaState.setAlphaBlendFunctionParameters(0, Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_COLOR, 1, 1);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_MULTIPLY:\r\n            this._alphaState.setAlphaBlendFunctionParameters(Constants.GL_ALPHA_FUNCTION_DST_COLOR, 0, 1, 1);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_MAXIMIZED:\r\n            this._alphaState.setAlphaBlendFunctionParameters(Constants.GL_ALPHA_FUNCTION_SRC_ALPHA, Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_COLOR, 1, 1);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_INTERPOLATE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(\r\n                Constants.GL_ALPHA_FUNCTION_CONSTANT_COLOR,\r\n                Constants.GL_ALPHA_FUNCTION_ONE_MINUS_CONSTANT_COLOR,\r\n                Constants.GL_ALPHA_FUNCTION_CONSTANT_ALPHA,\r\n                Constants.GL_ALPHA_FUNCTION_ONE_MINUS_CONSTANT_ALPHA\r\n            );\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_SCREENMODE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(1, Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_COLOR, 1, Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_ALPHA);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ONEONE_ONEONE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(1, 1, 1, 1);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ALPHATOCOLOR:\r\n            this._alphaState.setAlphaBlendFunctionParameters(Constants.GL_ALPHA_FUNCTION_DST_ALPHA, 1, 0, 0);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_REVERSEONEMINUS:\r\n            this._alphaState.setAlphaBlendFunctionParameters(\r\n                Constants.GL_ALPHA_FUNCTION_ONE_MINUS_DST_COLOR,\r\n                Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_COLOR,\r\n                Constants.GL_ALPHA_FUNCTION_ONE_MINUS_DST_ALPHA,\r\n                Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_ALPHA\r\n            );\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_SRC_DSTONEMINUSSRCALPHA:\r\n            this._alphaState.setAlphaBlendFunctionParameters(1, Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_ALPHA, 1, Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_ALPHA);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ONEONE_ONEZERO:\r\n            this._alphaState.setAlphaBlendFunctionParameters(1, 1, 1, 0);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_EXCLUSION:\r\n            this._alphaState.setAlphaBlendFunctionParameters(Constants.GL_ALPHA_FUNCTION_ONE_MINUS_DST_COLOR, Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_COLOR, 0, 1);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_LAYER_ACCUMULATE:\r\n            // Same as ALPHA_COMBINE but accumulates (1 - alpha) values in the alpha channel for a later readout in order independant transparency\r\n            this._alphaState.setAlphaBlendFunctionParameters(\r\n                Constants.GL_ALPHA_FUNCTION_SRC_ALPHA,\r\n                Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_ALPHA,\r\n                1,\r\n                Constants.GL_ALPHA_FUNCTION_ONE_MINUS_SRC_ALPHA\r\n            );\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n    }\r\n    if (!noDepthWriteChange) {\r\n        this.setDepthWrite(mode === Engine.ALPHA_DISABLE);\r\n        this._cacheRenderPipeline.setDepthWriteEnabled(mode === Engine.ALPHA_DISABLE);\r\n    }\r\n    this._alphaMode = mode;\r\n    this._cacheRenderPipeline.setAlphaBlendEnabled(this._alphaState.alphaBlend);\r\n    this._cacheRenderPipeline.setAlphaBlendFactors(this._alphaState._blendFunctionParameters, this._alphaState._blendEquationParameters);\r\n};\r\n\r\nWebGPUEngine.prototype.setAlphaEquation = function (equation: number): void {\r\n    Engine.prototype.setAlphaEquation.call(this, equation);\r\n\r\n    this._cacheRenderPipeline.setAlphaBlendFactors(this._alphaState._blendFunctionParameters, this._alphaState._blendEquationParameters);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}