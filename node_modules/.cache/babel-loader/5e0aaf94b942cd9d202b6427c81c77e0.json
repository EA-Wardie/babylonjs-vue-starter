{"ast":null,"code":"import { Scene, Engine, FreeCamera, Vector3, HemisphericLight, MeshBuilder, StandardMaterial, Texture, SolidParticleSystem, Scalar } from \"@babylonjs/core\";\nimport '@babylonjs/loaders';\nexport default {\n  data: function data() {\n    return {\n      engine: null,\n      scene: null,\n      camera: null,\n      light: null,\n      ground: null\n    };\n  },\n  methods: {\n    initGame: function initGame(canvas) {\n      //Setup game environment\n      this.createEngine(canvas);\n      this.createScene();\n      this.createLight();\n      this.createCamera(); // //Create game meshes\n      // this.createGround();\n\n      this.generateVoxelTerrain(); //Start game render\n\n      this.renderGame();\n    },\n    //Environment\n    createEngine: function createEngine(canvas) {\n      this.engine = new Engine(canvas, true);\n    },\n    createScene: function createScene() {\n      this.scene = new Scene(this.engine);\n    },\n    createLight: function createLight() {\n      this.light = new HemisphericLight('light', new Vector3(0, 1, 0), this.scene);\n      this.light.intensity = 0.75;\n    },\n    createCamera: function createCamera() {\n      this.camera = new FreeCamera('camera', new Vector3(0, 7, -12), this.scene);\n      this.camera.speed = 0.25;\n      this.camera.rotation = new Vector3(0.5, 0, 0);\n      this.camera.attachControl();\n    },\n    //Meshes\n    createGround: function createGround() {\n      this.ground = MeshBuilder.CreateGround('ground', {\n        width: 200,\n        height: 100\n      }, this.scene);\n      this.setGroundTexture();\n    },\n    generateVoxelTerrain: function generateVoxelTerrain() {\n      // const voxelSpacing = 0.5;\n      // const voxel = MeshBuilder.CreateBox('voxel', {size: voxelSpacing}, this.scene);\n      // const voxelClone = voxel.clone();\n      // voxelClone.position = new Vector3(voxelSpacing, 0, 0);\n      this.createVoxelMap(64, 64); // console.log(voxelArea);\n    },\n    //Render Main Game\n    renderGame: function renderGame() {\n      var _this = this;\n\n      this.engine.runRenderLoop(function () {\n        _this.scene.render();\n      });\n    },\n    //Helpers\n    setGroundTexture: function setGroundTexture() {\n      var groundMaterial = new StandardMaterial('ground_texture', this.scene);\n      groundMaterial.diffuseTexture = new Texture('./assets/textures/mars_1k_color.jpg');\n      this.ground.material = groundMaterial;\n    },\n    createVoxelMap: function createVoxelMap(width, height) {\n      var sps = new SolidParticleSystem('sps', this.scene),\n          voxelSpacing = 0.5,\n          voxel = MeshBuilder.CreateBox('voxel', {\n        size: voxelSpacing\n      }, this.scene);\n      sps.addShape(voxel, width * height);\n      voxel.dispose();\n      sps.buildMesh();\n\n      sps.initParticles = function () {\n        var row = 0;\n\n        for (var p = 0; p < sps.nbParticles; p++) {\n          var col = -(-p % width);\n          sps.particles[p].position.x = col / 2;\n          sps.particles[p].position.z = row / 2;\n\n          if (col === width - 1) {\n            row++;\n          }\n        }\n      };\n\n      sps.initParticles();\n      sps.setParticles();\n    }\n  }\n};","map":{"version":3,"sources":["/home/ea/Development/Babylon/red/src/framework/GameInitializer.js"],"names":["Scene","Engine","FreeCamera","Vector3","HemisphericLight","MeshBuilder","StandardMaterial","Texture","SolidParticleSystem","Scalar","data","engine","scene","camera","light","ground","methods","initGame","canvas","createEngine","createScene","createLight","createCamera","generateVoxelTerrain","renderGame","intensity","speed","rotation","attachControl","createGround","CreateGround","width","height","setGroundTexture","createVoxelMap","runRenderLoop","render","groundMaterial","diffuseTexture","material","sps","voxelSpacing","voxel","CreateBox","size","addShape","dispose","buildMesh","initParticles","row","p","nbParticles","col","particles","position","x","z","setParticles"],"mappings":"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","sourcesContent":["import {\n    Scene,\n    Engine,\n    FreeCamera,\n    Vector3,\n    HemisphericLight,\n    MeshBuilder,\n    StandardMaterial,\n    Texture,\n    SolidParticleSystem,\n    Scalar,\n} from \"@babylonjs/core\";\nimport '@babylonjs/loaders';\n\nexport default {\n    data() {\n        return {\n            engine: null,\n            scene: null,\n            camera: null,\n            light: null,\n            ground: null,\n        };\n    },\n    methods: {\n        initGame(canvas) {\n            //Setup game environment\n            this.createEngine(canvas);\n            this.createScene();\n            this.createLight();\n            this.createCamera();\n\n            // //Create game meshes\n            // this.createGround();\n            this.generateVoxelTerrain();\n\n            //Start game render\n            this.renderGame();\n        },\n\n        //Environment\n        createEngine(canvas) {\n            this.engine = new Engine(canvas, true);\n        },\n        createScene() {\n            this.scene = new Scene(this.engine);\n        },\n        createLight() {\n            this.light = new HemisphericLight('light', new Vector3(0, 1, 0), this.scene);\n            this.light.intensity = 0.75;\n        },\n        createCamera() {\n            this.camera = new FreeCamera('camera', new Vector3(0, 7, -12), this.scene);\n            this.camera.speed = 0.25;\n            this.camera.rotation = new Vector3(0.5, 0, 0);\n            this.camera.attachControl();\n        },\n\n        //Meshes\n        createGround() {\n            this.ground = MeshBuilder.CreateGround('ground', {width: 200, height: 100}, this.scene);\n\n            this.setGroundTexture();\n        },\n        generateVoxelTerrain() {\n            // const voxelSpacing = 0.5;\n            // const voxel = MeshBuilder.CreateBox('voxel', {size: voxelSpacing}, this.scene);\n            // const voxelClone = voxel.clone();\n            // voxelClone.position = new Vector3(voxelSpacing, 0, 0);\n            this.createVoxelMap(64, 64);\n            // console.log(voxelArea);\n        },\n        //Render Main Game\n        renderGame() {\n            this.engine.runRenderLoop(() => {\n                this.scene.render();\n            });\n        },\n\n        //Helpers\n        setGroundTexture() {\n            const groundMaterial = new StandardMaterial('ground_texture', this.scene);\n            groundMaterial.diffuseTexture = new Texture('./assets/textures/mars_1k_color.jpg');\n\n            this.ground.material = groundMaterial;\n        },\n        createVoxelMap(width, height) {\n            const sps = new SolidParticleSystem('sps', this.scene),\n                voxelSpacing = 0.5,\n                voxel = MeshBuilder.CreateBox('voxel', {size: voxelSpacing}, this.scene);\n\n            sps.addShape(voxel, width * height);\n            voxel.dispose();\n            sps.buildMesh();\n            sps.initParticles = () => {\n                let row = 0;\n                for (let p = 0; p < sps.nbParticles; p++) {\n                    let col = -(-p % width);\n\n                    sps.particles[p].position.x = col / 2;\n                    sps.particles[p].position.z = row / 2;\n\n                    if(col === width - 1) {\n                        row++;\n                    }\n                }\n            };\n\n            sps.initParticles();\n            sps.setParticles();\n        },\n    },\n}"]},"metadata":{},"sourceType":"module"}