{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { __extends } from \"tslib\";\nimport { NodeMaterialConnectionPoint, NodeMaterialConnectionPointCompatibilityStates } from \"./nodeMaterialBlockConnectionPoint.js\";\n/**\n * Defines a connection point to be used for points with a custom object type\n */\n\nvar NodeMaterialConnectionPointCustomObject =\n/** @class */\nfunction (_super) {\n  __extends(NodeMaterialConnectionPointCustomObject, _super);\n  /**\n   * Creates a new connection point\n   * @param name defines the connection point name\n   * @param ownerBlock defines the block hosting this connection point\n   * @param direction defines the direction of the connection point\n   * @param _blockType\n   * @param _blockName\n   * @param _nameForCheking\n   */\n\n\n  function NodeMaterialConnectionPointCustomObject(name, ownerBlock, direction, _blockType, _blockName, _nameForCheking) {\n    var _this = _super.call(this, name, ownerBlock, direction) || this;\n\n    _this._blockType = _blockType;\n    _this._blockName = _blockName;\n    _this._nameForCheking = _nameForCheking;\n\n    if (!_this._nameForCheking) {\n      _this._nameForCheking = name;\n    }\n\n    _this.needDualDirectionValidation = true;\n    return _this;\n  }\n  /**\n   * Gets a number indicating if the current point can be connected to another point\n   * @param connectionPoint defines the other connection point\n   * @returns a number defining the compatibility state\n   */\n\n\n  NodeMaterialConnectionPointCustomObject.prototype.checkCompatibilityState = function (connectionPoint) {\n    return connectionPoint instanceof NodeMaterialConnectionPointCustomObject && connectionPoint.name === this._nameForCheking ? NodeMaterialConnectionPointCompatibilityStates.Compatible : NodeMaterialConnectionPointCompatibilityStates.TypeIncompatible;\n  };\n  /**\n   * Creates a block suitable to be used as an input for this input point.\n   * If null is returned, a block based on the point type will be created.\n   * @returns The returned string parameter is the name of the output point of NodeMaterialBlock (first parameter of the returned array) that can be connected to the input\n   */\n\n\n  NodeMaterialConnectionPointCustomObject.prototype.createCustomInputBlock = function () {\n    return [new this._blockType(this._blockName), this.name];\n  };\n\n  return NodeMaterialConnectionPointCustomObject;\n}(NodeMaterialConnectionPoint);\n\nexport { NodeMaterialConnectionPointCustomObject };","map":{"version":3,"mappings":";;AAEA,SAASA,2BAAT,EAAsCC,8CAAtC,QAA4F,uCAA5F;AAGA;;;;AAGA;AAAA;AAAA;AAA0FC;AACtF;;;;;;;;;;;AASA,mDACIC,IADJ,EAEIC,UAFJ,EAGIC,SAHJ,EAIYC,UAJZ,EAKYC,UALZ,EAMYC,eANZ,EAMoC;AANpC,gBAQIC,kBAAMN,IAAN,EAAYC,UAAZ,EAAwBC,SAAxB,KAAkC,IARtC;;AAIYK;AACAA;AACAA;;AAIR,QAAI,CAACA,KAAI,CAACF,eAAV,EAA2B;AACvBE,WAAI,CAACF,eAAL,GAAuBL,IAAvB;AACH;;AAEDO,SAAI,CAACC,2BAAL,GAAmC,IAAnC;;AACH;AAED;;;;;;;AAKOC,8EAAP,UAA+BC,eAA/B,EAA2E;AACvE,WAAOA,eAAe,YAAYD,uCAA3B,IAAsEC,eAAe,CAACV,IAAhB,KAAyB,KAAKK,eAApG,GACDP,8CAA8C,CAACa,UAD9C,GAEDb,8CAA8C,CAACc,gBAFrD;AAGH,GAJM;AAMP;;;;;;;AAKOH,6EAAP;AACI,WAAO,CAAC,IAAI,KAAKN,UAAT,CAAoB,KAAKC,UAAzB,CAAD,EAAuC,KAAKJ,IAA5C,CAAP;AACH,GAFM;;AAGX;AAAC,CA9CD,CAA0FH,2BAA1F","names":["NodeMaterialConnectionPoint","NodeMaterialConnectionPointCompatibilityStates","__extends","name","ownerBlock","direction","_blockType","_blockName","_nameForCheking","_super","_this","needDualDirectionValidation","NodeMaterialConnectionPointCustomObject","connectionPoint","Compatible","TypeIncompatible"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Node/nodeMaterialConnectionPointCustomObject.ts"],"sourcesContent":["import type { NodeMaterialBlock } from \"./nodeMaterialBlock\";\r\nimport type { NodeMaterialConnectionPointDirection } from \"./nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialConnectionPoint, NodeMaterialConnectionPointCompatibilityStates } from \"./nodeMaterialBlockConnectionPoint\";\r\nimport type { Nullable } from \"../../types\";\r\n\r\n/**\r\n * Defines a connection point to be used for points with a custom object type\r\n */\r\nexport class NodeMaterialConnectionPointCustomObject<T extends NodeMaterialBlock> extends NodeMaterialConnectionPoint {\r\n    /**\r\n     * Creates a new connection point\r\n     * @param name defines the connection point name\r\n     * @param ownerBlock defines the block hosting this connection point\r\n     * @param direction defines the direction of the connection point\r\n     * @param _blockType\r\n     * @param _blockName\r\n     * @param _nameForCheking\r\n     */\r\n    public constructor(\r\n        name: string,\r\n        ownerBlock: NodeMaterialBlock,\r\n        direction: NodeMaterialConnectionPointDirection,\r\n        private _blockType: new (...args: any[]) => T,\r\n        private _blockName: string,\r\n        private _nameForCheking?: string\r\n    ) {\r\n        super(name, ownerBlock, direction);\r\n\r\n        if (!this._nameForCheking) {\r\n            this._nameForCheking = name;\r\n        }\r\n\r\n        this.needDualDirectionValidation = true;\r\n    }\r\n\r\n    /**\r\n     * Gets a number indicating if the current point can be connected to another point\r\n     * @param connectionPoint defines the other connection point\r\n     * @returns a number defining the compatibility state\r\n     */\r\n    public checkCompatibilityState(connectionPoint: NodeMaterialConnectionPoint): NodeMaterialConnectionPointCompatibilityStates {\r\n        return connectionPoint instanceof NodeMaterialConnectionPointCustomObject && connectionPoint.name === this._nameForCheking\r\n            ? NodeMaterialConnectionPointCompatibilityStates.Compatible\r\n            : NodeMaterialConnectionPointCompatibilityStates.TypeIncompatible;\r\n    }\r\n\r\n    /**\r\n     * Creates a block suitable to be used as an input for this input point.\r\n     * If null is returned, a block based on the point type will be created.\r\n     * @returns The returned string parameter is the name of the output point of NodeMaterialBlock (first parameter of the returned array) that can be connected to the input\r\n     */\r\n    public createCustomInputBlock(): Nullable<[NodeMaterialBlock, string]> {\r\n        return [new this._blockType(this._blockName), this.name];\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}