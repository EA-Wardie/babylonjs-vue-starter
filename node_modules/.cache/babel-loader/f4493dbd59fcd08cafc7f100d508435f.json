{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.search.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport { ShaderLanguage } from \"../../Materials/shaderLanguage.js\";\n/** @hidden */\n\nvar WebGL2ShaderProcessor =\n/** @class */\nfunction () {\n  function WebGL2ShaderProcessor() {\n    this.shaderLanguage = ShaderLanguage.GLSL;\n  }\n\n  WebGL2ShaderProcessor.prototype.attributeProcessor = function (attribute) {\n    return attribute.replace(\"attribute\", \"in\");\n  };\n\n  WebGL2ShaderProcessor.prototype.varyingProcessor = function (varying, isFragment) {\n    return varying.replace(\"varying\", isFragment ? \"in\" : \"out\");\n  };\n\n  WebGL2ShaderProcessor.prototype.postProcessor = function (code, defines, isFragment) {\n    var hasDrawBuffersExtension = code.search(/#extension.+GL_EXT_draw_buffers.+require/) !== -1; // Remove extensions\n\n    var regex = /#extension.+(GL_OVR_multiview2|GL_OES_standard_derivatives|GL_EXT_shader_texture_lod|GL_EXT_frag_depth|GL_EXT_draw_buffers).+(enable|require)/g;\n    code = code.replace(regex, \"\"); // Replace instructions\n\n    code = code.replace(/texture2D\\s*\\(/g, \"texture(\");\n\n    if (isFragment) {\n      code = code.replace(/texture2DLodEXT\\s*\\(/g, \"textureLod(\");\n      code = code.replace(/textureCubeLodEXT\\s*\\(/g, \"textureLod(\");\n      code = code.replace(/textureCube\\s*\\(/g, \"texture(\");\n      code = code.replace(/gl_FragDepthEXT/g, \"gl_FragDepth\");\n      code = code.replace(/gl_FragColor/g, \"glFragColor\");\n      code = code.replace(/gl_FragData/g, \"glFragData\");\n      code = code.replace(/void\\s+?main\\s*\\(/g, (hasDrawBuffersExtension ? \"\" : \"out vec4 glFragColor;\\n\") + \"void main(\");\n    } else {\n      var hasMultiviewExtension = defines.indexOf(\"#define MULTIVIEW\") !== -1;\n\n      if (hasMultiviewExtension) {\n        return \"#extension GL_OVR_multiview2 : require\\nlayout (num_views = 2) in;\\n\" + code;\n      }\n    }\n\n    return code;\n  };\n\n  return WebGL2ShaderProcessor;\n}();\n\nexport { WebGL2ShaderProcessor };","map":{"version":3,"mappings":";;;;AAAA,SAASA,cAAT,QAA+B,mCAA/B;AAGA;;AACA;AAAA;AAAA;AAAA;AACW,0BAAiBA,cAAc,CAACC,IAAhC;AAoCV;;AAlCUC,uDAAP,UAA0BC,SAA1B,EAA2C;AACvC,WAAOA,SAAS,CAACC,OAAV,CAAkB,WAAlB,EAA+B,IAA/B,CAAP;AACH,GAFM;;AAIAF,qDAAP,UAAwBG,OAAxB,EAAyCC,UAAzC,EAA4D;AACxD,WAAOD,OAAO,CAACD,OAAR,CAAgB,SAAhB,EAA2BE,UAAU,GAAG,IAAH,GAAU,KAA/C,CAAP;AACH,GAFM;;AAIAJ,kDAAP,UAAqBK,IAArB,EAAmCC,OAAnC,EAAsDF,UAAtD,EAAyE;AACrE,QAAMG,uBAAuB,GAAGF,IAAI,CAACG,MAAL,CAAY,0CAAZ,MAA4D,CAAC,CAA7F,CADqE,CAGrE;;AACA,QAAMC,KAAK,GAAG,gJAAd;AACAJ,QAAI,GAAGA,IAAI,CAACH,OAAL,CAAaO,KAAb,EAAoB,EAApB,CAAP,CALqE,CAOrE;;AACAJ,QAAI,GAAGA,IAAI,CAACH,OAAL,CAAa,iBAAb,EAAgC,UAAhC,CAAP;;AACA,QAAIE,UAAJ,EAAgB;AACZC,UAAI,GAAGA,IAAI,CAACH,OAAL,CAAa,uBAAb,EAAsC,aAAtC,CAAP;AACAG,UAAI,GAAGA,IAAI,CAACH,OAAL,CAAa,yBAAb,EAAwC,aAAxC,CAAP;AACAG,UAAI,GAAGA,IAAI,CAACH,OAAL,CAAa,mBAAb,EAAkC,UAAlC,CAAP;AACAG,UAAI,GAAGA,IAAI,CAACH,OAAL,CAAa,kBAAb,EAAiC,cAAjC,CAAP;AACAG,UAAI,GAAGA,IAAI,CAACH,OAAL,CAAa,eAAb,EAA8B,aAA9B,CAAP;AACAG,UAAI,GAAGA,IAAI,CAACH,OAAL,CAAa,cAAb,EAA6B,YAA7B,CAAP;AACAG,UAAI,GAAGA,IAAI,CAACH,OAAL,CAAa,oBAAb,EAAmC,CAACK,uBAAuB,GAAG,EAAH,GAAQ,yBAAhC,IAA6D,YAAhG,CAAP;AACH,KARD,MAQO;AACH,UAAMG,qBAAqB,GAAGJ,OAAO,CAACK,OAAR,CAAgB,mBAAhB,MAAyC,CAAC,CAAxE;;AACA,UAAID,qBAAJ,EAA2B;AACvB,eAAO,yEAAyEL,IAAhF;AACH;AACJ;;AAED,WAAOA,IAAP;AACH,GAzBM;;AA0BX;AAAC,CArCD","names":["ShaderLanguage","GLSL","WebGL2ShaderProcessor","attribute","replace","varying","isFragment","code","defines","hasDrawBuffersExtension","search","regex","hasMultiviewExtension","indexOf"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/WebGL/webGL2ShaderProcessors.ts"],"sourcesContent":["import { ShaderLanguage } from \"../../Materials/shaderLanguage\";\r\nimport type { IShaderProcessor } from \"../Processors/iShaderProcessor\";\r\n\r\n/** @hidden */\r\nexport class WebGL2ShaderProcessor implements IShaderProcessor {\r\n    public shaderLanguage = ShaderLanguage.GLSL;\r\n\r\n    public attributeProcessor(attribute: string) {\r\n        return attribute.replace(\"attribute\", \"in\");\r\n    }\r\n\r\n    public varyingProcessor(varying: string, isFragment: boolean) {\r\n        return varying.replace(\"varying\", isFragment ? \"in\" : \"out\");\r\n    }\r\n\r\n    public postProcessor(code: string, defines: string[], isFragment: boolean) {\r\n        const hasDrawBuffersExtension = code.search(/#extension.+GL_EXT_draw_buffers.+require/) !== -1;\r\n\r\n        // Remove extensions\r\n        const regex = /#extension.+(GL_OVR_multiview2|GL_OES_standard_derivatives|GL_EXT_shader_texture_lod|GL_EXT_frag_depth|GL_EXT_draw_buffers).+(enable|require)/g;\r\n        code = code.replace(regex, \"\");\r\n\r\n        // Replace instructions\r\n        code = code.replace(/texture2D\\s*\\(/g, \"texture(\");\r\n        if (isFragment) {\r\n            code = code.replace(/texture2DLodEXT\\s*\\(/g, \"textureLod(\");\r\n            code = code.replace(/textureCubeLodEXT\\s*\\(/g, \"textureLod(\");\r\n            code = code.replace(/textureCube\\s*\\(/g, \"texture(\");\r\n            code = code.replace(/gl_FragDepthEXT/g, \"gl_FragDepth\");\r\n            code = code.replace(/gl_FragColor/g, \"glFragColor\");\r\n            code = code.replace(/gl_FragData/g, \"glFragData\");\r\n            code = code.replace(/void\\s+?main\\s*\\(/g, (hasDrawBuffersExtension ? \"\" : \"out vec4 glFragColor;\\n\") + \"void main(\");\r\n        } else {\r\n            const hasMultiviewExtension = defines.indexOf(\"#define MULTIVIEW\") !== -1;\r\n            if (hasMultiviewExtension) {\r\n                return \"#extension GL_OVR_multiview2 : require\\nlayout (num_views = 2) in;\\n\" + code;\r\n            }\r\n        }\r\n\r\n        return code;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}