{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\n/**\n * Block used to get the screen sizes\n */\n\nvar ScreenSizeBlock =\n/** @class */\nfunction (_super) {\n  __extends(ScreenSizeBlock, _super);\n  /**\n   * Creates a new ScreenSizeBlock\n   * @param name defines the block name\n   */\n\n\n  function ScreenSizeBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;\n\n    _this.registerOutput(\"xy\", NodeMaterialBlockConnectionPointTypes.Vector2, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"x\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"y\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\n\n    return _this;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  ScreenSizeBlock.prototype.getClassName = function () {\n    return \"ScreenSizeBlock\";\n  };\n\n  Object.defineProperty(ScreenSizeBlock.prototype, \"xy\", {\n    /**\n     * Gets the xy component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ScreenSizeBlock.prototype, \"x\", {\n    /**\n     * Gets the x component\n     */\n    get: function get() {\n      return this._outputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ScreenSizeBlock.prototype, \"y\", {\n    /**\n     * Gets the y component\n     */\n    get: function get() {\n      return this._outputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ScreenSizeBlock.prototype.bind = function (effect) {\n    var engine = this._scene.getEngine();\n\n    effect.setFloat2(this._varName, engine.getRenderWidth(), engine.getRenderHeight());\n  }; // eslint-disable-next-line @typescript-eslint/naming-convention\n\n\n  ScreenSizeBlock.prototype.writeOutputs = function (state, varName) {\n    var code = \"\";\n\n    for (var _i = 0, _a = this._outputs; _i < _a.length; _i++) {\n      var output = _a[_i];\n\n      if (output.hasEndpoints) {\n        code += \"\".concat(this._declareOutput(output, state), \" = \").concat(varName, \".\").concat(output.name, \";\\r\\n\");\n      }\n    }\n\n    return code;\n  };\n\n  ScreenSizeBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    this._scene = state.sharedData.scene;\n\n    if (state.target === NodeMaterialBlockTargets.Vertex) {\n      throw \"ScreenSizeBlock must only be used in a fragment shader\";\n    }\n\n    state.sharedData.bindableBlocks.push(this);\n    this._varName = state._getFreeVariableName(\"screenSize\");\n\n    state._emitUniformFromString(this._varName, \"vec2\");\n\n    state.compilationString += this.writeOutputs(state, this._varName);\n    return this;\n  };\n\n  return ScreenSizeBlock;\n}(NodeMaterialBlock);\n\nexport { ScreenSizeBlock };\nRegisterClass(\"BABYLON.ScreenSizeBlock\", ScreenSizeBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","__extends","name","_super","Fragment","_this","registerOutput","Vector2","Float","ScreenSizeBlock","Object","_outputs","effect","engine","_scene","getEngine","setFloat2","_varName","getRenderWidth","getRenderHeight","state","varName","code","_i","output","hasEndpoints","_declareOutput","concat","_buildBlock","call","sharedData","scene","target","Vertex","bindableBlocks","push","_getFreeVariableName","_emitUniformFromString","compilationString","writeOutputs"],"sourceRoot":"","sources":["../../../../../../../../lts/core/generated/Materials/Node/Blocks/Fragment/screenSizeBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { Effect } from \"../../../effect\";\r\nimport type { Scene } from \"../../../../scene\";\r\n\r\n/**\r\n * Block used to get the screen sizes\r\n */\r\nexport class ScreenSizeBlock extends NodeMaterialBlock {\r\n    private _varName: string;\r\n    private _scene: Scene;\r\n\r\n    /**\r\n     * Creates a new ScreenSizeBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerOutput(\"xy\", NodeMaterialBlockConnectionPointTypes.Vector2, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"x\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"y\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ScreenSizeBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the xy component\r\n     */\r\n    public get xy(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the x component\r\n     */\r\n    public get x(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the y component\r\n     */\r\n    public get y(): NodeMaterialConnectionPoint {\r\n        return this._outputs[2];\r\n    }\r\n\r\n    public bind(effect: Effect) {\r\n        const engine = this._scene.getEngine();\r\n\r\n        effect.setFloat2(this._varName, engine.getRenderWidth(), engine.getRenderHeight());\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected writeOutputs(state: NodeMaterialBuildState, varName: string): string {\r\n        let code = \"\";\r\n\r\n        for (const output of this._outputs) {\r\n            if (output.hasEndpoints) {\r\n                code += `${this._declareOutput(output, state)} = ${varName}.${output.name};\\r\\n`;\r\n            }\r\n        }\r\n\r\n        return code;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        this._scene = state.sharedData.scene;\r\n\r\n        if (state.target === NodeMaterialBlockTargets.Vertex) {\r\n            throw \"ScreenSizeBlock must only be used in a fragment shader\";\r\n        }\r\n\r\n        state.sharedData.bindableBlocks.push(this);\r\n\r\n        this._varName = state._getFreeVariableName(\"screenSize\");\r\n        state._emitUniformFromString(this._varName, \"vec2\");\r\n\r\n        state.compilationString += this.writeOutputs(state, this._varName);\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ScreenSizeBlock\", ScreenSizeBlock);\r\n"]},"metadata":{},"sourceType":"module"}