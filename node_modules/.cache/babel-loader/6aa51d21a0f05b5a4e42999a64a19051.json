{"ast":null,"code":"// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nvar name = \"morphTargetsVertexGlobalDeclaration\";\nvar shader = \"#ifdef MORPHTARGETS\\nuniform float morphTargetInfluences[NUM_MORPH_INFLUENCERS];\\n#ifdef MORPHTARGETS_TEXTURE \\nprecision mediump sampler2DArray; \\nuniform float morphTargetTextureIndices[NUM_MORPH_INFLUENCERS];\\nuniform vec3 morphTargetTextureInfo;\\nuniform sampler2DArray morphTargets;\\nvec3 readVector3FromRawSampler(int targetIndex,float vertexIndex)\\n{ \\nfloat y=floor(vertexIndex/morphTargetTextureInfo.y);\\nfloat x=vertexIndex-y*morphTargetTextureInfo.y;\\nvec3 textureUV=vec3((x+0.5)/morphTargetTextureInfo.y,(y+0.5)/morphTargetTextureInfo.z,morphTargetTextureIndices[targetIndex]);\\nreturn texture(morphTargets,textureUV).xyz;\\n}\\n#endif\\n#endif\\n\"; // Sideeffect\n\nShaderStore.IncludesShadersStore[name] = shader;\n/** @hidden */\n\nexport var morphTargetsVertexGlobalDeclaration = {\n  name: name,\n  shader: shader\n};","map":{"version":3,"mappings":"AAAA;AACA,SAASA,WAAT,QAA4B,8BAA5B;AAEA,IAAMC,IAAI,GAAG,qCAAb;AACA,IAAMC,MAAM,GAAG,ipBAAf,C,CAiBA;;AACAF,WAAW,CAACG,oBAAZ,CAAiCF,IAAjC,IAAyCC,MAAzC;AACA;;AACA,OAAO,IAAME,mCAAmC,GAAG;AAAEH,MAAI,MAAN;AAAQC,QAAM;AAAd,CAA5C","names":["ShaderStore","name","shader","IncludesShadersStore","morphTargetsVertexGlobalDeclaration"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Shaders/ShadersInclude/morphTargetsVertexGlobalDeclaration.ts"],"sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"morphTargetsVertexGlobalDeclaration\";\nconst shader = `#ifdef MORPHTARGETS\nuniform float morphTargetInfluences[NUM_MORPH_INFLUENCERS];\r#ifdef MORPHTARGETS_TEXTURE \nprecision mediump sampler2DArray; \runiform float morphTargetTextureIndices[NUM_MORPH_INFLUENCERS];\runiform vec3 morphTargetTextureInfo;\runiform sampler2DArray morphTargets;\rvec3 readVector3FromRawSampler(int targetIndex,float vertexIndex)\r{ \rfloat y=floor(vertexIndex/morphTargetTextureInfo.y);\rfloat x=vertexIndex-y*morphTargetTextureInfo.y;\rvec3 textureUV=vec3((x+0.5)/morphTargetTextureInfo.y,(y+0.5)/morphTargetTextureInfo.z,morphTargetTextureIndices[targetIndex]);\rreturn texture(morphTargets,textureUV).xyz;\r}\r#endif\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @hidden */\nexport const morphTargetsVertexGlobalDeclaration = { name, shader };\n"]},"metadata":{},"sourceType":"module"}