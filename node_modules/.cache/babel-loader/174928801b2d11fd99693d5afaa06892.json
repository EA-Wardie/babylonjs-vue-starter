{"ast":null,"code":"import \"core-js/modules/es.array.index-of.js\";\n\n/**\n * This class is a small wrapper around a native buffer that can be read and/or written\n */\nvar StorageBuffer =\n/** @class */\nfunction () {\n  /**\n   * Creates a new storage buffer instance\n   * @param engine The engine the buffer will be created inside\n   * @param size The size of the buffer in bytes\n   * @param creationFlags flags to use when creating the buffer (see undefined). The BUFFER_CREATIONFLAG_STORAGE flag will be automatically added.\n   */\n  function StorageBuffer(engine, size, creationFlags) {\n    if (creationFlags === void 0) {\n      creationFlags = 3;\n    }\n\n    this._engine = engine;\n\n    this._engine._storageBuffers.push(this);\n\n    this._create(size, creationFlags);\n  }\n\n  StorageBuffer.prototype._create = function (size, creationFlags) {\n    this._bufferSize = size;\n    this._creationFlags = creationFlags;\n    this._buffer = this._engine.createStorageBuffer(size, creationFlags);\n  };\n  /** @hidden */\n\n\n  StorageBuffer.prototype._rebuild = function () {\n    this._create(this._bufferSize, this._creationFlags);\n  };\n  /**\n   * Gets underlying native buffer\n   * @returns underlying native buffer\n   */\n\n\n  StorageBuffer.prototype.getBuffer = function () {\n    return this._buffer;\n  };\n  /**\n   * Updates the storage buffer\n   * @param data the data used to update the storage buffer\n   * @param byteOffset the byte offset of the data (optional)\n   * @param byteLength the byte length of the data (optional)\n   */\n\n\n  StorageBuffer.prototype.update = function (data, byteOffset, byteLength) {\n    if (!this._buffer) {\n      return;\n    }\n\n    this._engine.updateStorageBuffer(this._buffer, data, byteOffset, byteLength);\n  };\n  /**\n   * Reads data from the storage buffer\n   * @param offset The offset in the storage buffer to start reading from (default: 0)\n   * @param size  The number of bytes to read from the storage buffer (default: capacity of the buffer)\n   * @param buffer The buffer to write the data we have read from the storage buffer to (optional)\n   * @returns If not undefined, returns the (promise) buffer (as provided by the 4th parameter) filled with the data, else it returns a (promise) Uint8Array with the data read from the storage buffer\n   */\n\n\n  StorageBuffer.prototype.read = function (offset, size, buffer) {\n    return this._engine.readFromStorageBuffer(this._buffer, offset, size, buffer);\n  };\n  /**\n   * Disposes the storage buffer\n   */\n\n\n  StorageBuffer.prototype.dispose = function () {\n    var storageBuffers = this._engine._storageBuffers;\n    var index = storageBuffers.indexOf(this);\n\n    if (index !== -1) {\n      storageBuffers[index] = storageBuffers[storageBuffers.length - 1];\n      storageBuffers.pop();\n    }\n\n    this._engine._releaseBuffer(this._buffer);\n\n    this._buffer = null;\n  };\n\n  return StorageBuffer;\n}();\n\nexport { StorageBuffer };","map":{"version":3,"mappings":";;AAKA;;;AAGA;AAAA;AAAA;AAMI;;;;;;AAMA,yBAAYA,MAAZ,EAAgCC,IAAhC,EAA8CC,aAA9C,EAAqG;AAAvD;AAAAA,sBAAgB,CAAhB;AAAgB;;AAC1D,SAAKC,OAAL,GAAeH,MAAf;;AACA,SAAKG,OAAL,CAAaC,eAAb,CAA6BC,IAA7B,CAAkC,IAAlC;;AACA,SAAKC,OAAL,CAAaL,IAAb,EAAmBC,aAAnB;AACH;;AAEOK,oCAAR,UAAgBN,IAAhB,EAA8BC,aAA9B,EAAmD;AAC/C,SAAKM,WAAL,GAAmBP,IAAnB;AACA,SAAKQ,cAAL,GAAsBP,aAAtB;AACA,SAAKQ,OAAL,GAAe,KAAKP,OAAL,CAAaQ,mBAAb,CAAiCV,IAAjC,EAAuCC,aAAvC,CAAf;AACH,GAJO;AAMR;;;AACOK,qCAAP;AACI,SAAKD,OAAL,CAAa,KAAKE,WAAlB,EAA+B,KAAKC,cAApC;AACH,GAFM;AAIP;;;;;;AAIOF,sCAAP;AACI,WAAO,KAAKG,OAAZ;AACH,GAFM;AAIP;;;;;;;;AAMOH,mCAAP,UAAcK,IAAd,EAA+BC,UAA/B,EAAoDC,UAApD,EAAuE;AACnE,QAAI,CAAC,KAAKJ,OAAV,EAAmB;AACf;AACH;;AAED,SAAKP,OAAL,CAAaY,mBAAb,CAAiC,KAAKL,OAAtC,EAA+CE,IAA/C,EAAqDC,UAArD,EAAiEC,UAAjE;AACH,GANM;AAQP;;;;;;;;;AAOOP,iCAAP,UAAYS,MAAZ,EAA6Bf,IAA7B,EAA4CgB,MAA5C,EAAoE;AAChE,WAAO,KAAKd,OAAL,CAAae,qBAAb,CAAmC,KAAKR,OAAxC,EAAiDM,MAAjD,EAAyDf,IAAzD,EAA+DgB,MAA/D,CAAP;AACH,GAFM;AAIP;;;;;AAGOV,oCAAP;AACI,QAAMY,cAAc,GAAG,KAAKhB,OAAL,CAAaC,eAApC;AACA,QAAMgB,KAAK,GAAGD,cAAc,CAACE,OAAf,CAAuB,IAAvB,CAAd;;AAEA,QAAID,KAAK,KAAK,CAAC,CAAf,EAAkB;AACdD,oBAAc,CAACC,KAAD,CAAd,GAAwBD,cAAc,CAACA,cAAc,CAACG,MAAf,GAAwB,CAAzB,CAAtC;AACAH,oBAAc,CAACI,GAAf;AACH;;AAED,SAAKpB,OAAL,CAAaqB,cAAb,CAA4B,KAAKd,OAAjC;;AACA,SAAKA,OAAL,GAAe,IAAf;AACH,GAXM;;AAYX;AAAC,CA7ED","names":["engine","size","creationFlags","_engine","_storageBuffers","push","_create","StorageBuffer","_bufferSize","_creationFlags","_buffer","createStorageBuffer","data","byteOffset","byteLength","updateStorageBuffer","offset","buffer","readFromStorageBuffer","storageBuffers","index","indexOf","length","pop","_releaseBuffer"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Buffers/storageBuffer.ts"],"sourcesContent":["import type { ThinEngine } from \"../Engines/thinEngine\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport type { DataArray } from \"../types\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\n/**\r\n * This class is a small wrapper around a native buffer that can be read and/or written\r\n */\r\nexport class StorageBuffer {\r\n    private _engine: ThinEngine;\r\n    private _buffer: DataBuffer;\r\n    private _bufferSize: number;\r\n    private _creationFlags: number;\r\n\r\n    /**\r\n     * Creates a new storage buffer instance\r\n     * @param engine The engine the buffer will be created inside\r\n     * @param size The size of the buffer in bytes\r\n     * @param creationFlags flags to use when creating the buffer (see Constants.BUFFER_CREATIONFLAG_XXX). The BUFFER_CREATIONFLAG_STORAGE flag will be automatically added.\r\n     */\r\n    constructor(engine: ThinEngine, size: number, creationFlags = Constants.BUFFER_CREATIONFLAG_READWRITE) {\r\n        this._engine = engine;\r\n        this._engine._storageBuffers.push(this);\r\n        this._create(size, creationFlags);\r\n    }\r\n\r\n    private _create(size: number, creationFlags: number): void {\r\n        this._bufferSize = size;\r\n        this._creationFlags = creationFlags;\r\n        this._buffer = this._engine.createStorageBuffer(size, creationFlags);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _rebuild(): void {\r\n        this._create(this._bufferSize, this._creationFlags);\r\n    }\r\n\r\n    /**\r\n     * Gets underlying native buffer\r\n     * @returns underlying native buffer\r\n     */\r\n    public getBuffer(): DataBuffer {\r\n        return this._buffer;\r\n    }\r\n\r\n    /**\r\n     * Updates the storage buffer\r\n     * @param data the data used to update the storage buffer\r\n     * @param byteOffset the byte offset of the data (optional)\r\n     * @param byteLength the byte length of the data (optional)\r\n     */\r\n    public update(data: DataArray, byteOffset?: number, byteLength?: number): void {\r\n        if (!this._buffer) {\r\n            return;\r\n        }\r\n\r\n        this._engine.updateStorageBuffer(this._buffer, data, byteOffset, byteLength);\r\n    }\r\n\r\n    /**\r\n     * Reads data from the storage buffer\r\n     * @param offset The offset in the storage buffer to start reading from (default: 0)\r\n     * @param size  The number of bytes to read from the storage buffer (default: capacity of the buffer)\r\n     * @param buffer The buffer to write the data we have read from the storage buffer to (optional)\r\n     * @returns If not undefined, returns the (promise) buffer (as provided by the 4th parameter) filled with the data, else it returns a (promise) Uint8Array with the data read from the storage buffer\r\n     */\r\n    public read(offset?: number, size?: number, buffer?: ArrayBufferView): Promise<ArrayBufferView> {\r\n        return this._engine.readFromStorageBuffer(this._buffer, offset, size, buffer);\r\n    }\r\n\r\n    /**\r\n     * Disposes the storage buffer\r\n     */\r\n    public dispose(): void {\r\n        const storageBuffers = this._engine._storageBuffers;\r\n        const index = storageBuffers.indexOf(this);\r\n\r\n        if (index !== -1) {\r\n            storageBuffers[index] = storageBuffers[storageBuffers.length - 1];\r\n            storageBuffers.pop();\r\n        }\r\n\r\n        this._engine._releaseBuffer(this._buffer);\r\n        this._buffer = null as any;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}