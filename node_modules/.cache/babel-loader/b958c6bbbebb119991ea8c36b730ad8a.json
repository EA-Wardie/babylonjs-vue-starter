{"ast":null,"code":"import \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport { WebGPUEngine } from \"../../webgpuEngine.js\";\nimport * as WebGPUConstants from \"../webgpuConstants.js\";\n\nWebGPUEngine.prototype.createUniformBuffer = function (elements) {\n  var view;\n\n  if (elements instanceof Array) {\n    view = new Float32Array(elements);\n  } else {\n    view = elements;\n  }\n\n  var dataBuffer = this._bufferManager.createBuffer(view, WebGPUConstants.BufferUsage.Uniform | WebGPUConstants.BufferUsage.CopyDst);\n\n  return dataBuffer;\n};\n\nWebGPUEngine.prototype.createDynamicUniformBuffer = function (elements) {\n  return this.createUniformBuffer(elements);\n};\n\nWebGPUEngine.prototype.updateUniformBuffer = function (uniformBuffer, elements, offset, count) {\n  if (offset === undefined) {\n    offset = 0;\n  }\n\n  var dataBuffer = uniformBuffer;\n  var view;\n\n  if (count === undefined) {\n    if (elements instanceof Float32Array) {\n      view = elements;\n    } else {\n      view = new Float32Array(elements);\n    }\n\n    count = view.byteLength;\n  } else {\n    if (elements instanceof Float32Array) {\n      view = elements;\n    } else {\n      view = new Float32Array(elements);\n    }\n  }\n\n  this._bufferManager.setSubData(dataBuffer, offset, view, 0, count);\n};\n\nWebGPUEngine.prototype.bindUniformBufferBase = function (buffer, location, name) {\n  this._currentDrawContext.setBuffer(name, buffer);\n};\n\nWebGPUEngine.prototype.bindUniformBlock = function () {};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,SAASA,YAAT,QAA6B,uBAA7B;AACA,OAAO,KAAKC,eAAZ,MAAiC,uBAAjC;;AAEAD,YAAY,CAACE,SAAb,CAAuBC,mBAAvB,GAA6C,UAAUC,QAAV,EAA8B;AACvE,MAAIC,IAAJ;;AACA,MAAID,QAAQ,YAAYE,KAAxB,EAA+B;AAC3BD,QAAI,GAAG,IAAIE,YAAJ,CAAiBH,QAAjB,CAAP;AACH,GAFD,MAEO;AACHC,QAAI,GAAGD,QAAP;AACH;;AAED,MAAMI,UAAU,GAAG,KAAKC,cAAL,CAAoBC,YAApB,CAAiCL,IAAjC,EAAuCJ,eAAe,CAACU,WAAhB,CAA4BC,OAA5B,GAAsCX,eAAe,CAACU,WAAhB,CAA4BE,OAAzG,CAAnB;;AACA,SAAOL,UAAP;AACH,CAVD;;AAYAR,YAAY,CAACE,SAAb,CAAuBY,0BAAvB,GAAoD,UAAUV,QAAV,EAA8B;AAC9E,SAAO,KAAKD,mBAAL,CAAyBC,QAAzB,CAAP;AACH,CAFD;;AAIAJ,YAAY,CAACE,SAAb,CAAuBa,mBAAvB,GAA6C,UAAUC,aAAV,EAAqCZ,QAArC,EAA2Da,MAA3D,EAA4EC,KAA5E,EAA0F;AACnI,MAAID,MAAM,KAAKE,SAAf,EAA0B;AACtBF,UAAM,GAAG,CAAT;AACH;;AAED,MAAMT,UAAU,GAAGQ,aAAnB;AACA,MAAIX,IAAJ;;AACA,MAAIa,KAAK,KAAKC,SAAd,EAAyB;AACrB,QAAIf,QAAQ,YAAYG,YAAxB,EAAsC;AAClCF,UAAI,GAAGD,QAAP;AACH,KAFD,MAEO;AACHC,UAAI,GAAG,IAAIE,YAAJ,CAAiBH,QAAjB,CAAP;AACH;;AACDc,SAAK,GAAGb,IAAI,CAACe,UAAb;AACH,GAPD,MAOO;AACH,QAAIhB,QAAQ,YAAYG,YAAxB,EAAsC;AAClCF,UAAI,GAAGD,QAAP;AACH,KAFD,MAEO;AACHC,UAAI,GAAG,IAAIE,YAAJ,CAAiBH,QAAjB,CAAP;AACH;AACJ;;AAED,OAAKK,cAAL,CAAoBY,UAApB,CAA+Bb,UAA/B,EAA2CS,MAA3C,EAAmDZ,IAAnD,EAAyD,CAAzD,EAA4Da,KAA5D;AACH,CAvBD;;AAyBAlB,YAAY,CAACE,SAAb,CAAuBoB,qBAAvB,GAA+C,UAAUC,MAAV,EAA8BC,QAA9B,EAAgDC,IAAhD,EAA4D;AACvG,OAAKC,mBAAL,CAAyBC,SAAzB,CAAmCF,IAAnC,EAAyCF,MAAzC;AACH,CAFD;;AAIAvB,YAAY,CAACE,SAAb,CAAuB0B,gBAAvB,GAA0C,aAAoB,CAA9D","names":["WebGPUEngine","WebGPUConstants","prototype","createUniformBuffer","elements","view","Array","Float32Array","dataBuffer","_bufferManager","createBuffer","BufferUsage","Uniform","CopyDst","createDynamicUniformBuffer","updateUniformBuffer","uniformBuffer","offset","count","undefined","byteLength","setSubData","bindUniformBufferBase","buffer","location","name","_currentDrawContext","setBuffer","bindUniformBlock"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Engines/WebGPU/Extensions/engine.uniformBuffer.ts"],"sourcesContent":["import type { DataBuffer } from \"../../../Buffers/dataBuffer\";\r\nimport type { WebGPUDataBuffer } from \"../../../Meshes/WebGPU/webgpuDataBuffer\";\r\nimport type { FloatArray } from \"../../../types\";\r\nimport { WebGPUEngine } from \"../../webgpuEngine\";\r\nimport * as WebGPUConstants from \"../webgpuConstants\";\r\n\r\nWebGPUEngine.prototype.createUniformBuffer = function (elements: FloatArray): DataBuffer {\r\n    let view: Float32Array;\r\n    if (elements instanceof Array) {\r\n        view = new Float32Array(elements);\r\n    } else {\r\n        view = elements;\r\n    }\r\n\r\n    const dataBuffer = this._bufferManager.createBuffer(view, WebGPUConstants.BufferUsage.Uniform | WebGPUConstants.BufferUsage.CopyDst);\r\n    return dataBuffer;\r\n};\r\n\r\nWebGPUEngine.prototype.createDynamicUniformBuffer = function (elements: FloatArray): DataBuffer {\r\n    return this.createUniformBuffer(elements);\r\n};\r\n\r\nWebGPUEngine.prototype.updateUniformBuffer = function (uniformBuffer: DataBuffer, elements: FloatArray, offset?: number, count?: number): void {\r\n    if (offset === undefined) {\r\n        offset = 0;\r\n    }\r\n\r\n    const dataBuffer = uniformBuffer as WebGPUDataBuffer;\r\n    let view: Float32Array;\r\n    if (count === undefined) {\r\n        if (elements instanceof Float32Array) {\r\n            view = elements;\r\n        } else {\r\n            view = new Float32Array(elements);\r\n        }\r\n        count = view.byteLength;\r\n    } else {\r\n        if (elements instanceof Float32Array) {\r\n            view = elements;\r\n        } else {\r\n            view = new Float32Array(elements);\r\n        }\r\n    }\r\n\r\n    this._bufferManager.setSubData(dataBuffer, offset, view, 0, count);\r\n};\r\n\r\nWebGPUEngine.prototype.bindUniformBufferBase = function (buffer: DataBuffer, location: number, name: string): void {\r\n    this._currentDrawContext.setBuffer(name, buffer as WebGPUDataBuffer);\r\n};\r\n\r\nWebGPUEngine.prototype.bindUniformBlock = function (): void {};\r\n"]},"metadata":{},"sourceType":"module"}