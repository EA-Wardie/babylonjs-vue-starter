{"ast":null,"code":"import { Mesh } from \"../mesh.js\";\nimport { VertexData } from \"../mesh.vertexData.js\";\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions.js\";\n/**\n * Creates the VertexData of the Disc or regular Polygon\n * @param options an object used to set the following optional parameters for the disc, required but can be empty\n * * radius the radius of the disc, optional default 0.5\n * * tessellation the number of polygon sides, optional, default 64\n * * arc a number from 0 to 1, to create an unclosed polygon based on the fraction of the circumference given by the arc value, optional, default 1\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\n * @param options.radius\n * @param options.tessellation\n * @param options.arc\n * @param options.sideOrientation\n * @param options.frontUVs\n * @param options.backUVs\n * @returns the VertexData of the box\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\n\nfunction CreateDiscVertexData(options) {\n  var positions = new Array();\n  var indices = new Array();\n  var normals = new Array();\n  var uvs = new Array();\n  var radius = options.radius || 0.5;\n  var tessellation = options.tessellation || 64;\n  var arc = options.arc && (options.arc <= 0 || options.arc > 1) ? 1.0 : options.arc || 1.0;\n  var sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE; // positions and uvs\n\n  positions.push(0, 0, 0); // disc center first\n\n  uvs.push(0.5, 0.5);\n  var theta = Math.PI * 2 * arc;\n  var step = arc === 1 ? theta / tessellation : theta / (tessellation - 1);\n  var a = 0;\n\n  for (var t = 0; t < tessellation; t++) {\n    var x = Math.cos(a);\n    var y = Math.sin(a);\n    var u = (x + 1) / 2;\n    var v = (1 - y) / 2;\n    positions.push(radius * x, radius * y, 0);\n    uvs.push(u, CompatibilityOptions.UseOpenGLOrientationForUV ? 1 - v : v);\n    a += step;\n  }\n\n  if (arc === 1) {\n    positions.push(positions[3], positions[4], positions[5]); // close the circle\n\n    uvs.push(uvs[2], CompatibilityOptions.UseOpenGLOrientationForUV ? 1 - uvs[3] : uvs[3]);\n  } //indices\n\n\n  var vertexNb = positions.length / 3;\n\n  for (var i = 1; i < vertexNb - 1; i++) {\n    indices.push(i + 1, 0, i);\n  } // result\n\n\n  VertexData.ComputeNormals(positions, indices, normals);\n\n  VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\n\n  var vertexData = new VertexData();\n  vertexData.indices = indices;\n  vertexData.positions = positions;\n  vertexData.normals = normals;\n  vertexData.uvs = uvs;\n  return vertexData;\n}\n/**\n * Creates a plane polygonal mesh.  By default, this is a disc\n * * The parameter `radius` sets the radius size (float) of the polygon (default 0.5)\n * * The parameter `tessellation` sets the number of polygon sides (positive integer, default 64). So a tessellation valued to 3 will build a triangle, to 4 a square, etc\n * * You can create an unclosed polygon with the parameter `arc` (positive float, default 1), valued between 0 and 1, what is the ratio of the circumference : 2 x PI x ratio\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\n * @param name defines the name of the mesh\n * @param options defines the options used to create the mesh\n * @param options.radius\n * @param options.tessellation\n * @param options.arc\n * @param options.updatable\n * @param options.sideOrientation\n * @param options.frontUVs\n * @param options.backUVs\n * @param scene defines the hosting scene\n * @returns the plane polygonal mesh\n * @see https://doc.babylonjs.com/how_to/set_shapes#disc-or-regular-polygon\n */\n\n\nexport function CreateDisc(name, options, scene) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (scene === void 0) {\n    scene = null;\n  }\n\n  var disc = new Mesh(name, scene);\n  options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\n  disc._originalBuilderSideOrientation = options.sideOrientation;\n  var vertexData = CreateDiscVertexData(options);\n  vertexData.applyToMesh(disc, options.updatable);\n  return disc;\n}\n/**\n * Class containing static functions to help procedurally build meshes\n * @deprecated please use CreateDisc directly\n */\n\nexport var DiscBuilder = {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  CreateDisc: CreateDisc\n};\nVertexData.CreateDisc = CreateDiscVertexData;\n\nMesh.CreateDisc = function (name, radius, tessellation, scene, updatable, sideOrientation) {\n  if (scene === void 0) {\n    scene = null;\n  }\n\n  var options = {\n    radius: radius,\n    tessellation: tessellation,\n    sideOrientation: sideOrientation,\n    updatable: updatable\n  };\n  return CreateDisc(name, options, scene);\n};","map":{"version":3,"mappings":"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","names":["Mesh","VertexData","CompatibilityOptions","CreateDiscVertexData","options","positions","Array","indices","normals","uvs","radius","tessellation","arc","sideOrientation","DEFAULTSIDE","push","theta","Math","PI","step","a","t","x","cos","y","sin","u","v","UseOpenGLOrientationForUV","vertexNb","length","i","ComputeNormals","_ComputeSides","frontUVs","backUVs","vertexData","CreateDisc","name","scene","disc","_GetDefaultSideOrientation","_originalBuilderSideOrientation","applyToMesh","updatable","DiscBuilder"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Meshes/Builders/discBuilder.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Creates the VertexData of the Disc or regular Polygon\r\n * @param options an object used to set the following optional parameters for the disc, required but can be empty\r\n * * radius the radius of the disc, optional default 0.5\r\n * * tessellation the number of polygon sides, optional, default 64\r\n * * arc a number from 0 to 1, to create an unclosed polygon based on the fraction of the circumference given by the arc value, optional, default 1\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @param options.radius\r\n * @param options.tessellation\r\n * @param options.arc\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @returns the VertexData of the box\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nfunction CreateDiscVertexData(options: { radius?: number; tessellation?: number; arc?: number; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4 }): VertexData {\r\n    const positions = new Array<number>();\r\n    const indices = new Array<number>();\r\n    const normals = new Array<number>();\r\n    const uvs = new Array<number>();\r\n\r\n    const radius = options.radius || 0.5;\r\n    const tessellation = options.tessellation || 64;\r\n    const arc: number = options.arc && (options.arc <= 0 || options.arc > 1) ? 1.0 : options.arc || 1.0;\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    // positions and uvs\r\n    positions.push(0, 0, 0); // disc center first\r\n    uvs.push(0.5, 0.5);\r\n\r\n    const theta = Math.PI * 2 * arc;\r\n    const step = arc === 1 ? theta / tessellation : theta / (tessellation - 1);\r\n    let a = 0;\r\n    for (let t = 0; t < tessellation; t++) {\r\n        const x = Math.cos(a);\r\n        const y = Math.sin(a);\r\n        const u = (x + 1) / 2;\r\n        const v = (1 - y) / 2;\r\n        positions.push(radius * x, radius * y, 0);\r\n        uvs.push(u, CompatibilityOptions.UseOpenGLOrientationForUV ? 1 - v : v);\r\n        a += step;\r\n    }\r\n    if (arc === 1) {\r\n        positions.push(positions[3], positions[4], positions[5]); // close the circle\r\n        uvs.push(uvs[2], CompatibilityOptions.UseOpenGLOrientationForUV ? 1 - uvs[3] : uvs[3]);\r\n    }\r\n\r\n    //indices\r\n    const vertexNb = positions.length / 3;\r\n    for (let i = 1; i < vertexNb - 1; i++) {\r\n        indices.push(i + 1, 0, i);\r\n    }\r\n\r\n    // result\r\n    VertexData.ComputeNormals(positions, indices, normals);\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a plane polygonal mesh.  By default, this is a disc\r\n * * The parameter `radius` sets the radius size (float) of the polygon (default 0.5)\r\n * * The parameter `tessellation` sets the number of polygon sides (positive integer, default 64). So a tessellation valued to 3 will build a triangle, to 4 a square, etc\r\n * * You can create an unclosed polygon with the parameter `arc` (positive float, default 1), valued between 0 and 1, what is the ratio of the circumference : 2 x PI x ratio\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.radius\r\n * @param options.tessellation\r\n * @param options.arc\r\n * @param options.updatable\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param scene defines the hosting scene\r\n * @returns the plane polygonal mesh\r\n * @see https://doc.babylonjs.com/how_to/set_shapes#disc-or-regular-polygon\r\n */\r\nexport function CreateDisc(\r\n    name: string,\r\n    options: { radius?: number; tessellation?: number; arc?: number; updatable?: boolean; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4 } = {},\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const disc = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    disc._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateDiscVertexData(options);\r\n\r\n    vertexData.applyToMesh(disc, options.updatable);\r\n\r\n    return disc;\r\n}\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated please use CreateDisc directly\r\n */\r\nexport const DiscBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateDisc,\r\n};\r\n\r\nVertexData.CreateDisc = CreateDiscVertexData;\r\n\r\n(Mesh as any).CreateDisc = (name: string, radius: number, tessellation: number, scene: Nullable<Scene> = null, updatable?: boolean, sideOrientation?: number): Mesh => {\r\n    const options = {\r\n        radius,\r\n        tessellation,\r\n        sideOrientation,\r\n        updatable,\r\n    };\r\n\r\n    return CreateDisc(name, options, scene);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}