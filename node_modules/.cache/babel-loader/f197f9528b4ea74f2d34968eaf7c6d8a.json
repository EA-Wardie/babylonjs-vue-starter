{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { __decorate, __extends } from \"tslib\";\nimport { serialize, serializeAsColor3, expandToProperty, serializeAsTexture } from \"../../Misc/decorators.js\";\nimport { Color3 } from \"../../Maths/math.color.js\";\nimport { PBRBaseMaterial } from \"./pbrBaseMaterial.js\";\n/**\n * The Physically based simple base material of BJS.\n *\n * This enables better naming and convention enforcements on top of the pbrMaterial.\n * It is used as the base class for both the specGloss and metalRough conventions.\n */\n\nvar PBRBaseSimpleMaterial =\n/** @class */\nfunction (_super) {\n  __extends(PBRBaseSimpleMaterial, _super);\n  /**\n   * Instantiates a new PBRMaterial instance.\n   *\n   * @param name The material name\n   * @param scene The scene the material will be use in.\n   */\n\n\n  function PBRBaseSimpleMaterial(name, scene) {\n    var _this = _super.call(this, name, scene) || this;\n    /**\n     * Number of Simultaneous lights allowed on the material.\n     */\n\n\n    _this.maxSimultaneousLights = 4;\n    /**\n     * If sets to true, disables all the lights affecting the material.\n     */\n\n    _this.disableLighting = false;\n    /**\n     * If sets to true, x component of normal map value will invert (x = 1.0 - x).\n     */\n\n    _this.invertNormalMapX = false;\n    /**\n     * If sets to true, y component of normal map value will invert (y = 1.0 - y).\n     */\n\n    _this.invertNormalMapY = false;\n    /**\n     * Emissivie color used to self-illuminate the model.\n     */\n\n    _this.emissiveColor = new Color3(0, 0, 0);\n    /**\n     * Occlusion Channel Strength.\n     */\n\n    _this.occlusionStrength = 1.0;\n    /**\n     * If true, the light map contains occlusion information instead of lighting info.\n     */\n\n    _this.useLightmapAsShadowmap = false;\n    _this._useAlphaFromAlbedoTexture = true;\n    _this._useAmbientInGrayScale = true;\n    return _this;\n  }\n\n  Object.defineProperty(PBRBaseSimpleMaterial.prototype, \"doubleSided\", {\n    /**\n     * Gets the current double sided mode.\n     */\n    get: function get() {\n      return this._twoSidedLighting;\n    },\n\n    /**\n     * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\n     */\n    set: function set(value) {\n      if (this._twoSidedLighting === value) {\n        return;\n      }\n\n      this._twoSidedLighting = value;\n      this.backFaceCulling = !value;\n\n      this._markAllSubMeshesAsTexturesDirty();\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  PBRBaseSimpleMaterial.prototype.getClassName = function () {\n    return \"PBRBaseSimpleMaterial\";\n  };\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsLightsDirty\")], PBRBaseSimpleMaterial.prototype, \"maxSimultaneousLights\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsLightsDirty\")], PBRBaseSimpleMaterial.prototype, \"disableLighting\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_reflectionTexture\")], PBRBaseSimpleMaterial.prototype, \"environmentTexture\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRBaseSimpleMaterial.prototype, \"invertNormalMapX\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRBaseSimpleMaterial.prototype, \"invertNormalMapY\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_bumpTexture\")], PBRBaseSimpleMaterial.prototype, \"normalTexture\", void 0);\n\n  __decorate([serializeAsColor3(\"emissive\"), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRBaseSimpleMaterial.prototype, \"emissiveColor\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRBaseSimpleMaterial.prototype, \"emissiveTexture\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_ambientTextureStrength\")], PBRBaseSimpleMaterial.prototype, \"occlusionStrength\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_ambientTexture\")], PBRBaseSimpleMaterial.prototype, \"occlusionTexture\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_alphaCutOff\")], PBRBaseSimpleMaterial.prototype, \"alphaCutOff\", void 0);\n\n  __decorate([serialize()], PBRBaseSimpleMaterial.prototype, \"doubleSided\", null);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", null)], PBRBaseSimpleMaterial.prototype, \"lightmapTexture\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRBaseSimpleMaterial.prototype, \"useLightmapAsShadowmap\", void 0);\n\n  return PBRBaseSimpleMaterial;\n}(PBRBaseMaterial);\n\nexport { PBRBaseSimpleMaterial };","map":{"version":3,"mappings":";;AAAA,SAASA,SAAT,EAAoBC,iBAApB,EAAuCC,gBAAvC,EAAyDC,kBAAzD,QAAmF,0BAAnF;AAEA,SAASC,MAAT,QAAuB,2BAAvB;AACA,SAASC,eAAT,QAAgC,sBAAhC;AAGA;;;;;;;AAMA;AAAA;AAAA;AAAoDC;AA+GhD;;;;;;;;AAMA,iCAAYC,IAAZ,EAA0BC,KAA1B,EAAuC;AAAvC,gBACIC,kBAAMF,IAAN,EAAYC,KAAZ,KAAkB,IADtB;AApHA;;;;;AAKOE,kCAAwB,CAAxB;AAEP;;;;AAKOA,4BAAkB,KAAlB;AASP;;;;AAKOA,6BAAmB,KAAnB;AAEP;;;;AAKOA,6BAAmB,KAAnB;AASP;;;;AAKOA,0BAAgB,IAAIN,MAAJ,CAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,CAAhB;AASP;;;;AAKOM,8BAA4B,GAA5B;AA0CP;;;;AAKOA,mCAAyB,KAAzB;AAWHA,SAAI,CAACC,0BAAL,GAAkC,IAAlC;AACAD,SAAI,CAACE,sBAAL,GAA8B,IAA9B;;AACH;;AAxCDC,wBAAWC,+BAAX,EAAW,aAAX,EAAsB;AAJtB;;;SAIA;AACI,aAAO,KAAKC,iBAAZ;AACH,KAFqB;;AAGtB;;;SAGA,aAAuBC,KAAvB,EAAqC;AACjC,UAAI,KAAKD,iBAAL,KAA2BC,KAA/B,EAAsC;AAClC;AACH;;AACD,WAAKD,iBAAL,GAAyBC,KAAzB;AACA,WAAKC,eAAL,GAAuB,CAACD,KAAxB;;AACA,WAAKE,gCAAL;AACH,KAbqB;qBAAA;;AAAA,GAAtB;;AA0COJ,iDAAP;AACI,WAAO,uBAAP;AACH,GAFM;;AAtHPK,cAFCnB,SAAS,EAEV,EADCE,gBAAgB,CAAC,gCAAD,CACjB;;AAOAiB,cAFCnB,SAAS,EAEV,EADCE,gBAAgB,CAAC,gCAAD,CACjB;;AAOAiB,cAFChB,kBAAkB,EAEnB,EADCD,gBAAgB,CAAC,kCAAD,EAAqC,oBAArC,CACjB;;AAOAiB,cAFCnB,SAAS,EAEV,EADCE,gBAAgB,CAAC,kCAAD,CACjB;;AAOAiB,cAFCnB,SAAS,EAEV,EADCE,gBAAgB,CAAC,kCAAD,CACjB;;AAOAiB,cAFChB,kBAAkB,EAEnB,EADCD,gBAAgB,CAAC,kCAAD,EAAqC,cAArC,CACjB;;AAOAiB,cAFClB,iBAAiB,CAAC,UAAD,CAElB,EADCC,gBAAgB,CAAC,kCAAD,CACjB;;AAOAiB,cAFChB,kBAAkB,EAEnB,EADCD,gBAAgB,CAAC,kCAAD,CACjB;;AAOAiB,cAFCnB,SAAS,EAEV,EADCE,gBAAgB,CAAC,kCAAD,EAAqC,yBAArC,CACjB;;AAOAiB,cAFChB,kBAAkB,EAEnB,EADCD,gBAAgB,CAAC,kCAAD,EAAqC,iBAArC,CACjB;;AAOAiB,cAFCnB,SAAS,EAEV,EADCE,gBAAgB,CAAC,kCAAD,EAAqC,cAArC,CACjB;;AAMAiB,cADCnB,SAAS,EACV;;AAoBAmB,cAFChB,kBAAkB,EAEnB,EADCD,gBAAgB,CAAC,kCAAD,EAAqC,IAArC,CACjB;;AAOAiB,cAFCnB,SAAS,EAEV,EADCE,gBAAgB,CAAC,kCAAD,CACjB;;AAkBJ;AAAC,CA/HD,CAAoDG,eAApD;;SAAsBS","names":["serialize","serializeAsColor3","expandToProperty","serializeAsTexture","Color3","PBRBaseMaterial","__extends","name","scene","_super","_this","_useAlphaFromAlbedoTexture","_useAmbientInGrayScale","Object","PBRBaseSimpleMaterial","_twoSidedLighting","value","backFaceCulling","_markAllSubMeshesAsTexturesDirty","__decorate"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/PBR/pbrBaseSimpleMaterial.ts"],"sourcesContent":["import { serialize, serializeAsColor3, expandToProperty, serializeAsTexture } from \"../../Misc/decorators\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Color3 } from \"../../Maths/math.color\";\r\nimport { PBRBaseMaterial } from \"./pbrBaseMaterial\";\r\nimport type { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\n\r\n/**\r\n * The Physically based simple base material of BJS.\r\n *\r\n * This enables better naming and convention enforcements on top of the pbrMaterial.\r\n * It is used as the base class for both the specGloss and metalRough conventions.\r\n */\r\nexport abstract class PBRBaseSimpleMaterial extends PBRBaseMaterial {\r\n    /**\r\n     * Number of Simultaneous lights allowed on the material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public maxSimultaneousLights = 4;\r\n\r\n    /**\r\n     * If sets to true, disables all the lights affecting the material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsLightsDirty\")\r\n    public disableLighting = false;\r\n\r\n    /**\r\n     * Environment Texture used in the material (this is use for both reflection and environment lighting).\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_reflectionTexture\")\r\n    public environmentTexture: BaseTexture;\r\n\r\n    /**\r\n     * If sets to true, x component of normal map value will invert (x = 1.0 - x).\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public invertNormalMapX = false;\r\n\r\n    /**\r\n     * If sets to true, y component of normal map value will invert (y = 1.0 - y).\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public invertNormalMapY = false;\r\n\r\n    /**\r\n     * Normal map used in the model.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_bumpTexture\")\r\n    public normalTexture: BaseTexture;\r\n\r\n    /**\r\n     * Emissivie color used to self-illuminate the model.\r\n     */\r\n    @serializeAsColor3(\"emissive\")\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public emissiveColor = new Color3(0, 0, 0);\r\n\r\n    /**\r\n     * Emissivie texture used to self-illuminate the model.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public emissiveTexture: BaseTexture;\r\n\r\n    /**\r\n     * Occlusion Channel Strength.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_ambientTextureStrength\")\r\n    public occlusionStrength: number = 1.0;\r\n\r\n    /**\r\n     * Occlusion Texture of the material (adding extra occlusion effects).\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_ambientTexture\")\r\n    public occlusionTexture: BaseTexture;\r\n\r\n    /**\r\n     * Defines the alpha limits in alpha test mode.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_alphaCutOff\")\r\n    public alphaCutOff: number;\r\n\r\n    /**\r\n     * Gets the current double sided mode.\r\n     */\r\n    @serialize()\r\n    public get doubleSided(): boolean {\r\n        return this._twoSidedLighting;\r\n    }\r\n    /**\r\n     * If sets to true and backfaceCulling is false, normals will be flipped on the backside.\r\n     */\r\n    public set doubleSided(value: boolean) {\r\n        if (this._twoSidedLighting === value) {\r\n            return;\r\n        }\r\n        this._twoSidedLighting = value;\r\n        this.backFaceCulling = !value;\r\n        this._markAllSubMeshesAsTexturesDirty();\r\n    }\r\n\r\n    /**\r\n     * Stores the pre-calculated light information of a mesh in a texture.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", null)\r\n    public lightmapTexture: BaseTexture;\r\n\r\n    /**\r\n     * If true, the light map contains occlusion information instead of lighting info.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public useLightmapAsShadowmap = false;\r\n\r\n    /**\r\n     * Instantiates a new PBRMaterial instance.\r\n     *\r\n     * @param name The material name\r\n     * @param scene The scene the material will be use in.\r\n     */\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n\r\n        this._useAlphaFromAlbedoTexture = true;\r\n        this._useAmbientInGrayScale = true;\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"PBRBaseSimpleMaterial\";\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}