{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { __extends } from \"tslib\";\nimport { WebXRFeaturesManager, WebXRFeatureName } from \"../webXRFeaturesManager.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { Vector3, Matrix } from \"../../Maths/math.vector.js\";\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature.js\";\nimport { Tools } from \"../../Misc/tools.js\";\n/**\n * The currently-working hit-test module.\n * Hit test (or Ray-casting) is used to interact with the real world.\n * For further information read here - https://github.com/immersive-web/hit-test\n */\n\nvar WebXRHitTestLegacy =\n/** @class */\nfunction (_super) {\n  __extends(WebXRHitTestLegacy, _super);\n  /**\n   * Creates a new instance of the (legacy version) hit test feature\n   * @param _xrSessionManager an instance of WebXRSessionManager\n   * @param options options to use when constructing this feature\n   */\n\n\n  function WebXRHitTestLegacy(_xrSessionManager,\n  /**\n   * options to use when constructing this feature\n   */\n  options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, _xrSessionManager) || this;\n\n    _this.options = options; // in XR space z-forward is negative\n\n    _this._direction = new Vector3(0, 0, -1);\n    _this._mat = new Matrix();\n    _this._onSelectEnabled = false;\n    _this._origin = new Vector3(0, 0, 0);\n    /**\n     * Populated with the last native XR Hit Results\n     */\n\n    _this.lastNativeXRHitResults = [];\n    /**\n     * Triggered when new babylon (transformed) hit test results are available\n     */\n\n    _this.onHitTestResultObservable = new Observable();\n\n    _this._onHitTestResults = function (xrResults) {\n      var mats = xrResults.map(function (result) {\n        var mat = Matrix.FromArray(result.hitMatrix);\n\n        if (!_this._xrSessionManager.scene.useRightHandedSystem) {\n          mat.toggleModelMatrixHandInPlace();\n        } // if (this.options.coordinatesSpace === Space.WORLD) {\n\n\n        if (_this.options.worldParentNode) {\n          mat.multiplyToRef(_this.options.worldParentNode.getWorldMatrix(), mat);\n        }\n\n        return {\n          xrHitResult: result,\n          transformationMatrix: mat\n        };\n      });\n      _this.lastNativeXRHitResults = xrResults;\n\n      _this.onHitTestResultObservable.notifyObservers(mats);\n    }; // can be done using pointerdown event, and xrSessionManager.currentFrame\n\n\n    _this._onSelect = function (event) {\n      if (!_this._onSelectEnabled) {\n        return;\n      }\n\n      WebXRHitTestLegacy.XRHitTestWithSelectEvent(event, _this._xrSessionManager.referenceSpace);\n    };\n\n    _this.xrNativeFeatureName = \"hit-test\";\n    Tools.Warn(\"A newer version of this plugin is available\");\n    return _this;\n  }\n  /**\n   * execute a hit test with an XR Ray\n   *\n   * @param xrSession a native xrSession that will execute this hit test\n   * @param xrRay the ray (position and direction) to use for ray-casting\n   * @param referenceSpace native XR reference space to use for the hit-test\n   * @param filter filter function that will filter the results\n   * @returns a promise that resolves with an array of native XR hit result in xr coordinates system\n   */\n\n\n  WebXRHitTestLegacy.XRHitTestWithRay = function (xrSession, xrRay, referenceSpace, filter) {\n    return xrSession.requestHitTest(xrRay, referenceSpace).then(function (results) {\n      var filterFunction = filter || function (result) {\n        return !!result.hitMatrix;\n      };\n\n      return results.filter(filterFunction);\n    });\n  };\n  /**\n   * Execute a hit test on the current running session using a select event returned from a transient input (such as touch)\n   * @param event the (select) event to use to select with\n   * @param referenceSpace the reference space to use for this hit test\n   * @returns a promise that resolves with an array of native XR hit result in xr coordinates system\n   */\n\n\n  WebXRHitTestLegacy.XRHitTestWithSelectEvent = function (event, referenceSpace) {\n    var targetRayPose = event.frame.getPose(event.inputSource.targetRaySpace, referenceSpace);\n\n    if (!targetRayPose) {\n      return Promise.resolve([]);\n    }\n\n    var targetRay = new XRRay(targetRayPose.transform);\n    return this.XRHitTestWithRay(event.frame.session, targetRay, referenceSpace);\n  };\n  /**\n   * attach this feature\n   * Will usually be called by the features manager\n   *\n   * @returns true if successful.\n   */\n\n\n  WebXRHitTestLegacy.prototype.attach = function () {\n    if (!_super.prototype.attach.call(this)) {\n      return false;\n    }\n\n    if (this.options.testOnPointerDownOnly) {\n      this._xrSessionManager.session.addEventListener(\"select\", this._onSelect, false);\n    }\n\n    return true;\n  };\n  /**\n   * detach this feature.\n   * Will usually be called by the features manager\n   *\n   * @returns true if successful.\n   */\n\n\n  WebXRHitTestLegacy.prototype.detach = function () {\n    if (!_super.prototype.detach.call(this)) {\n      return false;\n    } // disable select\n\n\n    this._onSelectEnabled = false;\n\n    this._xrSessionManager.session.removeEventListener(\"select\", this._onSelect);\n\n    return true;\n  };\n  /**\n   * Dispose this feature and all of the resources attached\n   */\n\n\n  WebXRHitTestLegacy.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.onHitTestResultObservable.clear();\n  };\n\n  WebXRHitTestLegacy.prototype._onXRFrame = function (frame) {\n    // make sure we do nothing if (async) not attached\n    if (!this.attached || this.options.testOnPointerDownOnly) {\n      return;\n    }\n\n    var pose = frame.getViewerPose(this._xrSessionManager.referenceSpace);\n\n    if (!pose) {\n      return;\n    }\n\n    Matrix.FromArrayToRef(pose.transform.matrix, 0, this._mat);\n    Vector3.TransformCoordinatesFromFloatsToRef(0, 0, 0, this._mat, this._origin);\n    Vector3.TransformCoordinatesFromFloatsToRef(0, 0, -1, this._mat, this._direction);\n\n    this._direction.subtractInPlace(this._origin);\n\n    this._direction.normalize();\n\n    var ray = new XRRay({\n      x: this._origin.x,\n      y: this._origin.y,\n      z: this._origin.z,\n      w: 0\n    }, {\n      x: this._direction.x,\n      y: this._direction.y,\n      z: this._direction.z,\n      w: 0\n    });\n    WebXRHitTestLegacy.XRHitTestWithRay(this._xrSessionManager.session, ray, this._xrSessionManager.referenceSpace).then(this._onHitTestResults);\n  };\n  /**\n   * The module's name\n   */\n\n\n  WebXRHitTestLegacy.Name = WebXRFeatureName.HIT_TEST;\n  /**\n   * The (Babylon) version of this module.\n   * This is an integer representing the implementation version.\n   * This number does not correspond to the WebXR specs version\n   */\n\n  WebXRHitTestLegacy.Version = 1;\n  return WebXRHitTestLegacy;\n}(WebXRAbstractFeature);\n\nexport { WebXRHitTestLegacy }; //register the plugin versions\n\nWebXRFeaturesManager.AddWebXRFeature(WebXRHitTestLegacy.Name, function (xrSessionManager, options) {\n  return function () {\n    return new WebXRHitTestLegacy(xrSessionManager, options);\n  };\n}, WebXRHitTestLegacy.Version, false);","map":{"version":3,"mappings":"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","names":["WebXRFeaturesManager","WebXRFeatureName","Observable","Vector3","Matrix","WebXRAbstractFeature","Tools","__extends","_xrSessionManager","options","_super","_this","xrResults","mats","map","result","mat","FromArray","hitMatrix","scene","useRightHandedSystem","toggleModelMatrixHandInPlace","worldParentNode","multiplyToRef","getWorldMatrix","xrHitResult","transformationMatrix","lastNativeXRHitResults","onHitTestResultObservable","notifyObservers","event","_onSelectEnabled","WebXRHitTestLegacy","XRHitTestWithSelectEvent","referenceSpace","xrNativeFeatureName","Warn","xrSession","xrRay","filter","requestHitTest","then","results","filterFunction","targetRayPose","frame","getPose","inputSource","targetRaySpace","Promise","resolve","targetRay","XRRay","transform","XRHitTestWithRay","session","attach","call","testOnPointerDownOnly","addEventListener","_onSelect","detach","removeEventListener","dispose","clear","attached","pose","getViewerPose","FromArrayToRef","matrix","_mat","TransformCoordinatesFromFloatsToRef","_origin","_direction","subtractInPlace","normalize","ray","x","y","z","w","_onHitTestResults","HIT_TEST","AddWebXRFeature","Name","xrSessionManager","Version"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/XR/features/WebXRHitTestLegacy.ts"],"sourcesContent":["import type { IWebXRFeature } from \"../webXRFeaturesManager\";\r\nimport { WebXRFeaturesManager, WebXRFeatureName } from \"../webXRFeaturesManager\";\r\nimport type { WebXRSessionManager } from \"../webXRSessionManager\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { Vector3, Matrix } from \"../../Maths/math.vector\";\r\nimport type { TransformNode } from \"../../Meshes/transformNode\";\r\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature\";\r\nimport { Tools } from \"../../Misc/tools\";\r\n\r\n// the plugin is registered at the end of the file\r\n\r\n/**\r\n * An interface for all Hit test features\r\n */\r\nexport interface IWebXRHitTestFeature<T extends IWebXRLegacyHitResult> extends IWebXRFeature {\r\n    /**\r\n     * Triggered when new babylon (transformed) hit test results are available\r\n     */\r\n    onHitTestResultObservable: Observable<T[]>;\r\n}\r\n\r\n/**\r\n * Options used for hit testing\r\n */\r\nexport interface IWebXRLegacyHitTestOptions {\r\n    /**\r\n     * Only test when user interacted with the scene. Default - hit test every frame\r\n     */\r\n    testOnPointerDownOnly?: boolean;\r\n    /**\r\n     * The node to use to transform the local results to world coordinates\r\n     */\r\n    worldParentNode?: TransformNode;\r\n}\r\n\r\n/**\r\n * Interface defining the babylon result of raycasting/hit-test\r\n */\r\nexport interface IWebXRLegacyHitResult {\r\n    /**\r\n     * Transformation matrix that can be applied to a node that will put it in the hit point location\r\n     */\r\n    transformationMatrix: Matrix;\r\n    /**\r\n     * The native hit test result\r\n     */\r\n    xrHitResult: XRHitResult | XRHitTestResult;\r\n}\r\n\r\n/**\r\n * The currently-working hit-test module.\r\n * Hit test (or Ray-casting) is used to interact with the real world.\r\n * For further information read here - https://github.com/immersive-web/hit-test\r\n */\r\nexport class WebXRHitTestLegacy extends WebXRAbstractFeature implements IWebXRHitTestFeature<IWebXRLegacyHitResult> {\r\n    // in XR space z-forward is negative\r\n    private _direction = new Vector3(0, 0, -1);\r\n    private _mat = new Matrix();\r\n    private _onSelectEnabled = false;\r\n    private _origin = new Vector3(0, 0, 0);\r\n\r\n    /**\r\n     * The module's name\r\n     */\r\n    public static readonly Name = WebXRFeatureName.HIT_TEST;\r\n    /**\r\n     * The (Babylon) version of this module.\r\n     * This is an integer representing the implementation version.\r\n     * This number does not correspond to the WebXR specs version\r\n     */\r\n    public static readonly Version = 1;\r\n\r\n    /**\r\n     * Populated with the last native XR Hit Results\r\n     */\r\n    public lastNativeXRHitResults: XRHitResult[] = [];\r\n    /**\r\n     * Triggered when new babylon (transformed) hit test results are available\r\n     */\r\n    public onHitTestResultObservable: Observable<IWebXRLegacyHitResult[]> = new Observable();\r\n\r\n    /**\r\n     * Creates a new instance of the (legacy version) hit test feature\r\n     * @param _xrSessionManager an instance of WebXRSessionManager\r\n     * @param options options to use when constructing this feature\r\n     */\r\n    constructor(\r\n        _xrSessionManager: WebXRSessionManager,\r\n        /**\r\n         * options to use when constructing this feature\r\n         */\r\n        public readonly options: IWebXRLegacyHitTestOptions = {}\r\n    ) {\r\n        super(_xrSessionManager);\r\n        this.xrNativeFeatureName = \"hit-test\";\r\n        Tools.Warn(\"A newer version of this plugin is available\");\r\n    }\r\n\r\n    /**\r\n     * execute a hit test with an XR Ray\r\n     *\r\n     * @param xrSession a native xrSession that will execute this hit test\r\n     * @param xrRay the ray (position and direction) to use for ray-casting\r\n     * @param referenceSpace native XR reference space to use for the hit-test\r\n     * @param filter filter function that will filter the results\r\n     * @returns a promise that resolves with an array of native XR hit result in xr coordinates system\r\n     */\r\n    public static XRHitTestWithRay(xrSession: XRSession, xrRay: XRRay, referenceSpace: XRReferenceSpace, filter?: (result: XRHitResult) => boolean): Promise<XRHitResult[]> {\r\n        return xrSession.requestHitTest!(xrRay, referenceSpace).then((results) => {\r\n            const filterFunction = filter || ((result) => !!result.hitMatrix);\r\n            return results.filter(filterFunction);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Execute a hit test on the current running session using a select event returned from a transient input (such as touch)\r\n     * @param event the (select) event to use to select with\r\n     * @param referenceSpace the reference space to use for this hit test\r\n     * @returns a promise that resolves with an array of native XR hit result in xr coordinates system\r\n     */\r\n    public static XRHitTestWithSelectEvent(event: XRInputSourceEvent, referenceSpace: XRReferenceSpace): Promise<XRHitResult[]> {\r\n        const targetRayPose = event.frame.getPose(event.inputSource.targetRaySpace, referenceSpace);\r\n        if (!targetRayPose) {\r\n            return Promise.resolve([]);\r\n        }\r\n        const targetRay = new XRRay(targetRayPose.transform);\r\n\r\n        return this.XRHitTestWithRay(event.frame.session, targetRay, referenceSpace);\r\n    }\r\n\r\n    /**\r\n     * attach this feature\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    public attach(): boolean {\r\n        if (!super.attach()) {\r\n            return false;\r\n        }\r\n        if (this.options.testOnPointerDownOnly) {\r\n            this._xrSessionManager.session.addEventListener(\"select\", this._onSelect, false);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * detach this feature.\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    public detach(): boolean {\r\n        if (!super.detach()) {\r\n            return false;\r\n        }\r\n        // disable select\r\n        this._onSelectEnabled = false;\r\n        this._xrSessionManager.session.removeEventListener(\"select\", this._onSelect);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Dispose this feature and all of the resources attached\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n        this.onHitTestResultObservable.clear();\r\n    }\r\n\r\n    protected _onXRFrame(frame: XRFrame) {\r\n        // make sure we do nothing if (async) not attached\r\n        if (!this.attached || this.options.testOnPointerDownOnly) {\r\n            return;\r\n        }\r\n        const pose = frame.getViewerPose(this._xrSessionManager.referenceSpace);\r\n        if (!pose) {\r\n            return;\r\n        }\r\n        Matrix.FromArrayToRef(pose.transform.matrix, 0, this._mat);\r\n        Vector3.TransformCoordinatesFromFloatsToRef(0, 0, 0, this._mat, this._origin);\r\n        Vector3.TransformCoordinatesFromFloatsToRef(0, 0, -1, this._mat, this._direction);\r\n        this._direction.subtractInPlace(this._origin);\r\n        this._direction.normalize();\r\n        const ray = new XRRay(\r\n            <DOMPointReadOnly>{ x: this._origin.x, y: this._origin.y, z: this._origin.z, w: 0 },\r\n            <DOMPointReadOnly>{ x: this._direction.x, y: this._direction.y, z: this._direction.z, w: 0 }\r\n        );\r\n        WebXRHitTestLegacy.XRHitTestWithRay(this._xrSessionManager.session, ray, this._xrSessionManager.referenceSpace).then(this._onHitTestResults);\r\n    }\r\n\r\n    private _onHitTestResults = (xrResults: XRHitResult[]) => {\r\n        const mats = xrResults.map((result) => {\r\n            const mat = Matrix.FromArray(result.hitMatrix);\r\n            if (!this._xrSessionManager.scene.useRightHandedSystem) {\r\n                mat.toggleModelMatrixHandInPlace();\r\n            }\r\n            // if (this.options.coordinatesSpace === Space.WORLD) {\r\n            if (this.options.worldParentNode) {\r\n                mat.multiplyToRef(this.options.worldParentNode.getWorldMatrix(), mat);\r\n            }\r\n            return {\r\n                xrHitResult: result,\r\n                transformationMatrix: mat,\r\n            };\r\n        });\r\n\r\n        this.lastNativeXRHitResults = xrResults;\r\n        this.onHitTestResultObservable.notifyObservers(mats);\r\n    };\r\n\r\n    // can be done using pointerdown event, and xrSessionManager.currentFrame\r\n    private _onSelect = (event: XRInputSourceEvent) => {\r\n        if (!this._onSelectEnabled) {\r\n            return;\r\n        }\r\n        WebXRHitTestLegacy.XRHitTestWithSelectEvent(event, this._xrSessionManager.referenceSpace);\r\n    };\r\n}\r\n\r\n//register the plugin versions\r\nWebXRFeaturesManager.AddWebXRFeature(\r\n    WebXRHitTestLegacy.Name,\r\n    (xrSessionManager, options) => {\r\n        return () => new WebXRHitTestLegacy(xrSessionManager, options);\r\n    },\r\n    WebXRHitTestLegacy.Version,\r\n    false\r\n);\r\n"]},"metadata":{},"sourceType":"module"}