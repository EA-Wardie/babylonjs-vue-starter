{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { PrecisionDate } from \"./precisionDate.js\";\n/**\n * Performance monitor tracks rolling average frame-time and frame-time variance over a user defined sliding-window\n */\n\nvar PerformanceMonitor =\n/** @class */\nfunction () {\n  /**\n   * constructor\n   * @param frameSampleSize The number of samples required to saturate the sliding window\n   */\n  function PerformanceMonitor(frameSampleSize) {\n    if (frameSampleSize === void 0) {\n      frameSampleSize = 30;\n    }\n\n    this._enabled = true;\n    this._rollingFrameTime = new RollingAverage(frameSampleSize);\n  }\n  /**\n   * Samples current frame\n   * @param timeMs A timestamp in milliseconds of the current frame to compare with other frames\n   */\n\n\n  PerformanceMonitor.prototype.sampleFrame = function (timeMs) {\n    if (timeMs === void 0) {\n      timeMs = PrecisionDate.Now;\n    }\n\n    if (!this._enabled) {\n      return;\n    }\n\n    if (this._lastFrameTimeMs != null) {\n      var dt = timeMs - this._lastFrameTimeMs;\n\n      this._rollingFrameTime.add(dt);\n    }\n\n    this._lastFrameTimeMs = timeMs;\n  };\n\n  Object.defineProperty(PerformanceMonitor.prototype, \"averageFrameTime\", {\n    /**\n     * Returns the average frame time in milliseconds over the sliding window (or the subset of frames sampled so far)\n     */\n    get: function get() {\n      return this._rollingFrameTime.average;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerformanceMonitor.prototype, \"averageFrameTimeVariance\", {\n    /**\n     * Returns the variance frame time in milliseconds over the sliding window (or the subset of frames sampled so far)\n     */\n    get: function get() {\n      return this._rollingFrameTime.variance;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerformanceMonitor.prototype, \"instantaneousFrameTime\", {\n    /**\n     * Returns the frame time of the most recent frame\n     */\n    get: function get() {\n      return this._rollingFrameTime.history(0);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerformanceMonitor.prototype, \"averageFPS\", {\n    /**\n     * Returns the average framerate in frames per second over the sliding window (or the subset of frames sampled so far)\n     */\n    get: function get() {\n      return 1000.0 / this._rollingFrameTime.average;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerformanceMonitor.prototype, \"instantaneousFPS\", {\n    /**\n     * Returns the average framerate in frames per second using the most recent frame time\n     */\n    get: function get() {\n      var history = this._rollingFrameTime.history(0);\n\n      if (history === 0) {\n        return 0;\n      }\n\n      return 1000.0 / history;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerformanceMonitor.prototype, \"isSaturated\", {\n    /**\n     * Returns true if enough samples have been taken to completely fill the sliding window\n     */\n    get: function get() {\n      return this._rollingFrameTime.isSaturated();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Enables contributions to the sliding window sample set\n   */\n\n  PerformanceMonitor.prototype.enable = function () {\n    this._enabled = true;\n  };\n  /**\n   * Disables contributions to the sliding window sample set\n   * Samples will not be interpolated over the disabled period\n   */\n\n\n  PerformanceMonitor.prototype.disable = function () {\n    this._enabled = false; //clear last sample to avoid interpolating over the disabled period when next enabled\n\n    this._lastFrameTimeMs = null;\n  };\n\n  Object.defineProperty(PerformanceMonitor.prototype, \"isEnabled\", {\n    /**\n     * Returns true if sampling is enabled\n     */\n    get: function get() {\n      return this._enabled;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Resets performance monitor\n   */\n\n  PerformanceMonitor.prototype.reset = function () {\n    //clear last sample to avoid interpolating over the disabled period when next enabled\n    this._lastFrameTimeMs = null; //wipe record\n\n    this._rollingFrameTime.reset();\n  };\n\n  return PerformanceMonitor;\n}();\n\nexport { PerformanceMonitor };\n/**\n * RollingAverage\n *\n * Utility to efficiently compute the rolling average and variance over a sliding window of samples\n */\n\nvar RollingAverage =\n/** @class */\nfunction () {\n  /**\n   * constructor\n   * @param length The number of samples required to saturate the sliding window\n   */\n  function RollingAverage(length) {\n    this._samples = new Array(length);\n    this.reset();\n  }\n  /**\n   * Adds a sample to the sample set\n   * @param v The sample value\n   */\n\n\n  RollingAverage.prototype.add = function (v) {\n    //http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance\n    var delta; //we need to check if we've already wrapped round\n\n    if (this.isSaturated()) {\n      //remove bottom of stack from mean\n      var bottomValue = this._samples[this._pos];\n      delta = bottomValue - this.average;\n      this.average -= delta / (this._sampleCount - 1);\n      this._m2 -= delta * (bottomValue - this.average);\n    } else {\n      this._sampleCount++;\n    } //add new value to mean\n\n\n    delta = v - this.average;\n    this.average += delta / this._sampleCount;\n    this._m2 += delta * (v - this.average); //set the new variance\n\n    this.variance = this._m2 / (this._sampleCount - 1);\n    this._samples[this._pos] = v;\n    this._pos++;\n    this._pos %= this._samples.length; //positive wrap around\n  };\n  /**\n   * Returns previously added values or null if outside of history or outside the sliding window domain\n   * @param i Index in history. For example, pass 0 for the most recent value and 1 for the value before that\n   * @return Value previously recorded with add() or null if outside of range\n   */\n\n\n  RollingAverage.prototype.history = function (i) {\n    if (i >= this._sampleCount || i >= this._samples.length) {\n      return 0;\n    }\n\n    var i0 = this._wrapPosition(this._pos - 1.0);\n\n    return this._samples[this._wrapPosition(i0 - i)];\n  };\n  /**\n   * Returns true if enough samples have been taken to completely fill the sliding window\n   * @return true if sample-set saturated\n   */\n\n\n  RollingAverage.prototype.isSaturated = function () {\n    return this._sampleCount >= this._samples.length;\n  };\n  /**\n   * Resets the rolling average (equivalent to 0 samples taken so far)\n   */\n\n\n  RollingAverage.prototype.reset = function () {\n    this.average = 0;\n    this.variance = 0;\n    this._sampleCount = 0;\n    this._pos = 0;\n    this._m2 = 0;\n  };\n  /**\n   * Wraps a value around the sample range boundaries\n   * @param i Position in sample range, for example if the sample length is 5, and i is -3, then 2 will be returned.\n   * @return Wrapped position in sample range\n   */\n\n\n  RollingAverage.prototype._wrapPosition = function (i) {\n    var max = this._samples.length;\n    return (i % max + max) % max;\n  };\n\n  return RollingAverage;\n}();\n\nexport { RollingAverage };","map":{"version":3,"mappings":"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","names":["PrecisionDate","frameSampleSize","_rollingFrameTime","RollingAverage","PerformanceMonitor","timeMs","Now","_enabled","_lastFrameTimeMs","dt","add","Object","average","variance","history","isSaturated","reset","length","_samples","Array","v","delta","bottomValue","_pos","_sampleCount","_m2","i","i0","_wrapPosition","max"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Misc/performanceMonitor.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport { PrecisionDate } from \"./precisionDate\";\r\n\r\n/**\r\n * Performance monitor tracks rolling average frame-time and frame-time variance over a user defined sliding-window\r\n */\r\nexport class PerformanceMonitor {\r\n    private _enabled: boolean = true;\r\n    private _rollingFrameTime: RollingAverage;\r\n    private _lastFrameTimeMs: Nullable<number>;\r\n\r\n    /**\r\n     * constructor\r\n     * @param frameSampleSize The number of samples required to saturate the sliding window\r\n     */\r\n    constructor(frameSampleSize: number = 30) {\r\n        this._rollingFrameTime = new RollingAverage(frameSampleSize);\r\n    }\r\n\r\n    /**\r\n     * Samples current frame\r\n     * @param timeMs A timestamp in milliseconds of the current frame to compare with other frames\r\n     */\r\n    public sampleFrame(timeMs: number = PrecisionDate.Now) {\r\n        if (!this._enabled) {\r\n            return;\r\n        }\r\n\r\n        if (this._lastFrameTimeMs != null) {\r\n            const dt = timeMs - this._lastFrameTimeMs;\r\n            this._rollingFrameTime.add(dt);\r\n        }\r\n\r\n        this._lastFrameTimeMs = timeMs;\r\n    }\r\n\r\n    /**\r\n     * Returns the average frame time in milliseconds over the sliding window (or the subset of frames sampled so far)\r\n     */\r\n    public get averageFrameTime(): number {\r\n        return this._rollingFrameTime.average;\r\n    }\r\n\r\n    /**\r\n     * Returns the variance frame time in milliseconds over the sliding window (or the subset of frames sampled so far)\r\n     */\r\n    public get averageFrameTimeVariance(): number {\r\n        return this._rollingFrameTime.variance;\r\n    }\r\n\r\n    /**\r\n     * Returns the frame time of the most recent frame\r\n     */\r\n    public get instantaneousFrameTime(): number {\r\n        return this._rollingFrameTime.history(0);\r\n    }\r\n\r\n    /**\r\n     * Returns the average framerate in frames per second over the sliding window (or the subset of frames sampled so far)\r\n     */\r\n    public get averageFPS(): number {\r\n        return 1000.0 / this._rollingFrameTime.average;\r\n    }\r\n\r\n    /**\r\n     * Returns the average framerate in frames per second using the most recent frame time\r\n     */\r\n    public get instantaneousFPS(): number {\r\n        const history = this._rollingFrameTime.history(0);\r\n\r\n        if (history === 0) {\r\n            return 0;\r\n        }\r\n\r\n        return 1000.0 / history;\r\n    }\r\n\r\n    /**\r\n     * Returns true if enough samples have been taken to completely fill the sliding window\r\n     */\r\n    public get isSaturated(): boolean {\r\n        return this._rollingFrameTime.isSaturated();\r\n    }\r\n\r\n    /**\r\n     * Enables contributions to the sliding window sample set\r\n     */\r\n    public enable() {\r\n        this._enabled = true;\r\n    }\r\n\r\n    /**\r\n     * Disables contributions to the sliding window sample set\r\n     * Samples will not be interpolated over the disabled period\r\n     */\r\n    public disable() {\r\n        this._enabled = false;\r\n        //clear last sample to avoid interpolating over the disabled period when next enabled\r\n        this._lastFrameTimeMs = null;\r\n    }\r\n\r\n    /**\r\n     * Returns true if sampling is enabled\r\n     */\r\n    public get isEnabled(): boolean {\r\n        return this._enabled;\r\n    }\r\n\r\n    /**\r\n     * Resets performance monitor\r\n     */\r\n    public reset() {\r\n        //clear last sample to avoid interpolating over the disabled period when next enabled\r\n        this._lastFrameTimeMs = null;\r\n        //wipe record\r\n        this._rollingFrameTime.reset();\r\n    }\r\n}\r\n\r\n/**\r\n * RollingAverage\r\n *\r\n * Utility to efficiently compute the rolling average and variance over a sliding window of samples\r\n */\r\nexport class RollingAverage {\r\n    /**\r\n     * Current average\r\n     */\r\n    public average: number;\r\n    /**\r\n     * Current variance\r\n     */\r\n    public variance: number;\r\n\r\n    protected _samples: Array<number>;\r\n    protected _sampleCount: number;\r\n    protected _pos: number;\r\n    protected _m2: number; //sum of squares of differences from the (current) mean\r\n\r\n    /**\r\n     * constructor\r\n     * @param length The number of samples required to saturate the sliding window\r\n     */\r\n    constructor(length: number) {\r\n        this._samples = new Array<number>(length);\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Adds a sample to the sample set\r\n     * @param v The sample value\r\n     */\r\n    public add(v: number) {\r\n        //http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance\r\n        let delta: number;\r\n\r\n        //we need to check if we've already wrapped round\r\n        if (this.isSaturated()) {\r\n            //remove bottom of stack from mean\r\n            const bottomValue = this._samples[this._pos];\r\n            delta = bottomValue - this.average;\r\n            this.average -= delta / (this._sampleCount - 1);\r\n            this._m2 -= delta * (bottomValue - this.average);\r\n        } else {\r\n            this._sampleCount++;\r\n        }\r\n\r\n        //add new value to mean\r\n        delta = v - this.average;\r\n        this.average += delta / this._sampleCount;\r\n        this._m2 += delta * (v - this.average);\r\n\r\n        //set the new variance\r\n        this.variance = this._m2 / (this._sampleCount - 1);\r\n\r\n        this._samples[this._pos] = v;\r\n        this._pos++;\r\n\r\n        this._pos %= this._samples.length; //positive wrap around\r\n    }\r\n\r\n    /**\r\n     * Returns previously added values or null if outside of history or outside the sliding window domain\r\n     * @param i Index in history. For example, pass 0 for the most recent value and 1 for the value before that\r\n     * @return Value previously recorded with add() or null if outside of range\r\n     */\r\n    public history(i: number): number {\r\n        if (i >= this._sampleCount || i >= this._samples.length) {\r\n            return 0;\r\n        }\r\n\r\n        const i0 = this._wrapPosition(this._pos - 1.0);\r\n        return this._samples[this._wrapPosition(i0 - i)];\r\n    }\r\n\r\n    /**\r\n     * Returns true if enough samples have been taken to completely fill the sliding window\r\n     * @return true if sample-set saturated\r\n     */\r\n    public isSaturated(): boolean {\r\n        return this._sampleCount >= this._samples.length;\r\n    }\r\n\r\n    /**\r\n     * Resets the rolling average (equivalent to 0 samples taken so far)\r\n     */\r\n    public reset() {\r\n        this.average = 0;\r\n        this.variance = 0;\r\n        this._sampleCount = 0;\r\n        this._pos = 0;\r\n        this._m2 = 0;\r\n    }\r\n\r\n    /**\r\n     * Wraps a value around the sample range boundaries\r\n     * @param i Position in sample range, for example if the sample length is 5, and i is -3, then 2 will be returned.\r\n     * @return Wrapped position in sample range\r\n     */\r\n    protected _wrapPosition(i: number): number {\r\n        const max = this._samples.length;\r\n        return ((i % max) + max) % max;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}