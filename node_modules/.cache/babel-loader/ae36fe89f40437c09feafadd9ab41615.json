{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/web.timers.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nvar PromiseStates;\n\n(function (PromiseStates) {\n  PromiseStates[PromiseStates[\"Pending\"] = 0] = \"Pending\";\n  PromiseStates[PromiseStates[\"Fulfilled\"] = 1] = \"Fulfilled\";\n  PromiseStates[PromiseStates[\"Rejected\"] = 2] = \"Rejected\";\n})(PromiseStates || (PromiseStates = {}));\n\nvar FulFillmentAgregator =\n/** @class */\nfunction () {\n  function FulFillmentAgregator() {\n    this.count = 0;\n    this.target = 0;\n    this.results = [];\n  }\n\n  return FulFillmentAgregator;\n}();\n\nvar InternalPromise =\n/** @class */\nfunction () {\n  function InternalPromise(resolver) {\n    var _this = this;\n\n    this._state = PromiseStates.Pending;\n    this._children = new Array();\n    this._rejectWasConsumed = false;\n\n    if (!resolver) {\n      return;\n    }\n\n    try {\n      resolver(function (value) {\n        _this._resolve(value);\n      }, function (reason) {\n        _this._reject(reason);\n      });\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  Object.defineProperty(InternalPromise.prototype, \"_result\", {\n    get: function get() {\n      return this._resultValue;\n    },\n    set: function set(value) {\n      this._resultValue = value;\n\n      if (this._parent && this._parent._result === undefined) {\n        this._parent._result = value;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  InternalPromise.prototype[\"catch\"] = function (onRejected) {\n    return this.then(undefined, onRejected);\n  };\n\n  InternalPromise.prototype.then = function (onFulfilled, onRejected) {\n    var _this = this;\n\n    var newPromise = new InternalPromise();\n    newPromise._onFulfilled = onFulfilled;\n    newPromise._onRejected = onRejected; // Composition\n\n    this._children.push(newPromise);\n\n    newPromise._parent = this;\n\n    if (this._state !== PromiseStates.Pending) {\n      setTimeout(function () {\n        if (_this._state === PromiseStates.Fulfilled || _this._rejectWasConsumed) {\n          newPromise._resolve(_this._result);\n        } else {\n          newPromise._reject(_this._reason);\n        }\n      });\n    }\n\n    return newPromise;\n  };\n\n  InternalPromise.prototype._moveChildren = function (children) {\n    var _a;\n\n    var _this = this;\n\n    (_a = this._children).push.apply(_a, children.splice(0, children.length));\n\n    this._children.forEach(function (child) {\n      child._parent = _this;\n    });\n\n    if (this._state === PromiseStates.Fulfilled) {\n      for (var _i = 0, _b = this._children; _i < _b.length; _i++) {\n        var child = _b[_i];\n\n        child._resolve(this._result);\n      }\n    } else if (this._state === PromiseStates.Rejected) {\n      for (var _c = 0, _d = this._children; _c < _d.length; _c++) {\n        var child = _d[_c];\n\n        child._reject(this._reason);\n      }\n    }\n  };\n\n  InternalPromise.prototype._resolve = function (value) {\n    try {\n      this._state = PromiseStates.Fulfilled;\n      var returnedValue = null;\n\n      if (this._onFulfilled) {\n        returnedValue = this._onFulfilled(value);\n      }\n\n      if (returnedValue !== undefined && returnedValue !== null) {\n        if (returnedValue._state !== undefined) {\n          // Transmit children\n          var returnedPromise = returnedValue;\n          returnedPromise._parent = this;\n\n          returnedPromise._moveChildren(this._children);\n\n          value = returnedPromise._result;\n        } else {\n          value = returnedValue;\n        }\n      }\n\n      this._result = value;\n\n      for (var _i = 0, _a = this._children; _i < _a.length; _i++) {\n        var child = _a[_i];\n\n        child._resolve(value);\n      }\n\n      this._children.length = 0;\n      delete this._onFulfilled;\n      delete this._onRejected;\n    } catch (e) {\n      this._reject(e, true);\n    }\n  };\n\n  InternalPromise.prototype._reject = function (reason, onLocalThrow) {\n    if (onLocalThrow === void 0) {\n      onLocalThrow = false;\n    }\n\n    this._state = PromiseStates.Rejected;\n    this._reason = reason;\n\n    if (this._onRejected && !onLocalThrow) {\n      try {\n        this._onRejected(reason);\n\n        this._rejectWasConsumed = true;\n      } catch (e) {\n        reason = e;\n      }\n    }\n\n    for (var _i = 0, _a = this._children; _i < _a.length; _i++) {\n      var child = _a[_i];\n\n      if (this._rejectWasConsumed) {\n        child._resolve(null);\n      } else {\n        child._reject(reason);\n      }\n    }\n\n    this._children.length = 0;\n    delete this._onFulfilled;\n    delete this._onRejected;\n  }; // eslint-disable-next-line @typescript-eslint/naming-convention\n\n\n  InternalPromise.resolve = function (value) {\n    var newPromise = new InternalPromise();\n\n    newPromise._resolve(value);\n\n    return newPromise;\n  };\n\n  InternalPromise._RegisterForFulfillment = function (promise, agregator, index) {\n    promise.then(function (value) {\n      agregator.results[index] = value;\n      agregator.count++;\n\n      if (agregator.count === agregator.target) {\n        agregator.rootPromise._resolve(agregator.results);\n      }\n\n      return null;\n    }, function (reason) {\n      if (agregator.rootPromise._state !== PromiseStates.Rejected) {\n        agregator.rootPromise._reject(reason);\n      }\n    });\n  }; // eslint-disable-next-line @typescript-eslint/naming-convention\n\n\n  InternalPromise.all = function (promises) {\n    var newPromise = new InternalPromise();\n    var agregator = new FulFillmentAgregator();\n    agregator.target = promises.length;\n    agregator.rootPromise = newPromise;\n\n    if (promises.length) {\n      for (var index = 0; index < promises.length; index++) {\n        InternalPromise._RegisterForFulfillment(promises[index], agregator, index);\n      }\n    } else {\n      newPromise._resolve([]);\n    }\n\n    return newPromise;\n  }; // eslint-disable-next-line @typescript-eslint/naming-convention\n\n\n  InternalPromise.race = function (promises) {\n    var newPromise = new InternalPromise();\n\n    if (promises.length) {\n      for (var _i = 0, promises_1 = promises; _i < promises_1.length; _i++) {\n        var promise = promises_1[_i];\n        promise.then(function (value) {\n          if (newPromise) {\n            newPromise._resolve(value);\n\n            newPromise = null;\n          }\n\n          return null;\n        }, function (reason) {\n          if (newPromise) {\n            newPromise._reject(reason);\n\n            newPromise = null;\n          }\n        });\n      }\n    }\n\n    return newPromise;\n  };\n\n  return InternalPromise;\n}();\n/**\n * Helper class that provides a small promise polyfill\n */\n\n\nvar PromisePolyfill =\n/** @class */\nfunction () {\n  function PromisePolyfill() {}\n  /**\n   * Static function used to check if the polyfill is required\n   * If this is the case then the function will inject the polyfill to window.Promise\n   * @param force defines a boolean used to force the injection (mostly for testing purposes)\n   */\n\n\n  PromisePolyfill.Apply = function (force) {\n    if (force === void 0) {\n      force = false;\n    }\n\n    if (force || typeof Promise === \"undefined\") {\n      var root = window;\n      root.Promise = InternalPromise;\n    }\n  };\n\n  return PromisePolyfill;\n}();\n\nexport { PromisePolyfill };","map":{"version":3,"mappings":"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","names":["PromiseStates","resolver","Pending","Array","value","_this","_resolve","reason","_reject","e","Object","InternalPromise","_resultValue","_parent","_result","undefined","onRejected","then","onFulfilled","newPromise","_onFulfilled","_onRejected","_children","push","_state","setTimeout","Fulfilled","_rejectWasConsumed","_reason","children","apply","_a","splice","length","forEach","child","_i","Rejected","_c","returnedValue","returnedPromise","_moveChildren","onLocalThrow","promise","agregator","index","results","count","target","rootPromise","promises","FulFillmentAgregator","_RegisterForFulfillment","PromisePolyfill","force","Promise","root","window"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Misc/promise.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\n\r\nenum PromiseStates {\r\n    Pending,\r\n    Fulfilled,\r\n    Rejected,\r\n}\r\n\r\nclass FulFillmentAgregator<T> {\r\n    public count = 0;\r\n    public target = 0;\r\n    public rootPromise: InternalPromise<T>;\r\n    public results: any[] = [];\r\n}\r\n\r\nclass InternalPromise<T> {\r\n    private _state = PromiseStates.Pending;\r\n    private _resultValue?: Nullable<T>;\r\n    private _reason: any;\r\n    private _children = new Array<InternalPromise<T>>();\r\n    private _parent: Nullable<InternalPromise<T>>;\r\n    private _onFulfilled?: (fulfillment?: Nullable<T>) => Nullable<InternalPromise<T>> | T;\r\n    private _onRejected?: (reason: any) => void;\r\n    private _rejectWasConsumed = false;\r\n\r\n    private get _result(): Nullable<T> | undefined {\r\n        return this._resultValue;\r\n    }\r\n\r\n    private set _result(value: Nullable<T> | undefined) {\r\n        this._resultValue = value;\r\n\r\n        if (this._parent && this._parent._result === undefined) {\r\n            this._parent._result = value;\r\n        }\r\n    }\r\n\r\n    public constructor(resolver?: (resolve: (value?: Nullable<T>) => void, reject: (reason: any) => void) => void) {\r\n        if (!resolver) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            resolver(\r\n                (value?: Nullable<T>) => {\r\n                    this._resolve(value);\r\n                },\r\n                (reason: any) => {\r\n                    this._reject(reason);\r\n                }\r\n            );\r\n        } catch (e) {\r\n            this._reject(e);\r\n        }\r\n    }\r\n\r\n    public catch(onRejected: (reason: any) => void): InternalPromise<T> {\r\n        return this.then(undefined, onRejected);\r\n    }\r\n\r\n    public then(onFulfilled?: (fulfillment?: Nullable<T>) => Nullable<InternalPromise<T>> | T, onRejected?: (reason: any) => void): InternalPromise<T> {\r\n        const newPromise = new InternalPromise<T>();\r\n        newPromise._onFulfilled = onFulfilled;\r\n        newPromise._onRejected = onRejected;\r\n\r\n        // Composition\r\n        this._children.push(newPromise);\r\n        newPromise._parent = this;\r\n\r\n        if (this._state !== PromiseStates.Pending) {\r\n            setTimeout(() => {\r\n                if (this._state === PromiseStates.Fulfilled || this._rejectWasConsumed) {\r\n                    newPromise._resolve(this._result);\r\n                } else {\r\n                    newPromise._reject(this._reason);\r\n                }\r\n            });\r\n        }\r\n\r\n        return newPromise;\r\n    }\r\n\r\n    private _moveChildren(children: InternalPromise<T>[]): void {\r\n        this._children.push(...children.splice(0, children.length));\r\n\r\n        this._children.forEach((child) => {\r\n            child._parent = this;\r\n        });\r\n\r\n        if (this._state === PromiseStates.Fulfilled) {\r\n            for (const child of this._children) {\r\n                child._resolve(this._result);\r\n            }\r\n        } else if (this._state === PromiseStates.Rejected) {\r\n            for (const child of this._children) {\r\n                child._reject(this._reason);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _resolve(value?: Nullable<T>): void {\r\n        try {\r\n            this._state = PromiseStates.Fulfilled;\r\n            let returnedValue: Nullable<InternalPromise<T>> | T = null;\r\n\r\n            if (this._onFulfilled) {\r\n                returnedValue = this._onFulfilled(value);\r\n            }\r\n\r\n            if (returnedValue !== undefined && returnedValue !== null) {\r\n                if ((<InternalPromise<T>>returnedValue)._state !== undefined) {\r\n                    // Transmit children\r\n                    const returnedPromise = returnedValue as InternalPromise<T>;\r\n                    returnedPromise._parent = this;\r\n                    returnedPromise._moveChildren(this._children);\r\n\r\n                    value = returnedPromise._result;\r\n                } else {\r\n                    value = <T>returnedValue;\r\n                }\r\n            }\r\n\r\n            this._result = value;\r\n\r\n            for (const child of this._children) {\r\n                child._resolve(value);\r\n            }\r\n\r\n            this._children.length = 0;\r\n            delete this._onFulfilled;\r\n            delete this._onRejected;\r\n        } catch (e) {\r\n            this._reject(e, true);\r\n        }\r\n    }\r\n\r\n    private _reject(reason: any, onLocalThrow = false): void {\r\n        this._state = PromiseStates.Rejected;\r\n        this._reason = reason;\r\n\r\n        if (this._onRejected && !onLocalThrow) {\r\n            try {\r\n                this._onRejected(reason);\r\n                this._rejectWasConsumed = true;\r\n            } catch (e) {\r\n                reason = e;\r\n            }\r\n        }\r\n\r\n        for (const child of this._children) {\r\n            if (this._rejectWasConsumed) {\r\n                child._resolve(null);\r\n            } else {\r\n                child._reject(reason);\r\n            }\r\n        }\r\n\r\n        this._children.length = 0;\r\n        delete this._onFulfilled;\r\n        delete this._onRejected;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static resolve<T>(value: T): InternalPromise<T> {\r\n        const newPromise = new InternalPromise<T>();\r\n\r\n        newPromise._resolve(value);\r\n\r\n        return newPromise;\r\n    }\r\n\r\n    private static _RegisterForFulfillment<T>(promise: InternalPromise<T>, agregator: FulFillmentAgregator<T[]>, index: number) {\r\n        promise.then(\r\n            (value?: Nullable<T>) => {\r\n                agregator.results[index] = value;\r\n                agregator.count++;\r\n\r\n                if (agregator.count === agregator.target) {\r\n                    agregator.rootPromise._resolve(agregator.results);\r\n                }\r\n                return null;\r\n            },\r\n            (reason: any) => {\r\n                if (agregator.rootPromise._state !== PromiseStates.Rejected) {\r\n                    agregator.rootPromise._reject(reason);\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static all<T>(promises: InternalPromise<T>[]): InternalPromise<T[]> {\r\n        const newPromise = new InternalPromise<T[]>();\r\n        const agregator = new FulFillmentAgregator<T[]>();\r\n        agregator.target = promises.length;\r\n        agregator.rootPromise = newPromise;\r\n\r\n        if (promises.length) {\r\n            for (let index = 0; index < promises.length; index++) {\r\n                InternalPromise._RegisterForFulfillment(promises[index], agregator, index);\r\n            }\r\n        } else {\r\n            newPromise._resolve([]);\r\n        }\r\n\r\n        return newPromise;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static race<T>(promises: InternalPromise<T>[]): InternalPromise<T> {\r\n        let newPromise: Nullable<InternalPromise<T>> = new InternalPromise();\r\n\r\n        if (promises.length) {\r\n            for (const promise of promises) {\r\n                promise.then(\r\n                    (value?: Nullable<T>) => {\r\n                        if (newPromise) {\r\n                            newPromise._resolve(value);\r\n                            newPromise = null;\r\n                        }\r\n                        return null;\r\n                    },\r\n                    (reason: any) => {\r\n                        if (newPromise) {\r\n                            newPromise._reject(reason);\r\n                            newPromise = null;\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n        }\r\n\r\n        return newPromise;\r\n    }\r\n}\r\n\r\n/**\r\n * Helper class that provides a small promise polyfill\r\n */\r\nexport class PromisePolyfill {\r\n    /**\r\n     * Static function used to check if the polyfill is required\r\n     * If this is the case then the function will inject the polyfill to window.Promise\r\n     * @param force defines a boolean used to force the injection (mostly for testing purposes)\r\n     */\r\n    public static Apply(force = false): void {\r\n        if (force || typeof Promise === \"undefined\") {\r\n            const root: any = window;\r\n            root.Promise = InternalPromise;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}