{"ast":null,"code":"import \"core-js/modules/es.function.bind.js\";\nimport { __extends } from \"tslib\";\nimport { Camera } from \"../../Cameras/camera.js\";\nimport { GamepadCamera } from \"../../Cameras/gamepadCamera.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Node } from \"../../node.js\";\nimport { setStereoscopicRigMode } from \"../RigModes/stereoscopicRigMode.js\";\nNode.AddNodeConstructor(\"StereoscopicGamepadCamera\", function (name, scene, options) {\n  return function () {\n    return new StereoscopicGamepadCamera(name, Vector3.Zero(), options.interaxial_distance, options.isStereoscopicSideBySide, scene);\n  };\n});\n/**\n * Camera used to simulate stereoscopic rendering (based on GamepadCamera)\n * @see https://doc.babylonjs.com/features/cameras\n */\n\nvar StereoscopicGamepadCamera =\n/** @class */\nfunction (_super) {\n  __extends(StereoscopicGamepadCamera, _super);\n  /**\n   * Creates a new StereoscopicGamepadCamera\n   * @param name defines camera name\n   * @param position defines initial position\n   * @param interaxialDistance defines distance between each color axis\n   * @param isStereoscopicSideBySide defines is stereoscopic is done side by side or over under\n   * @param scene defines the hosting scene\n   */\n\n\n  function StereoscopicGamepadCamera(name, position, interaxialDistance, isStereoscopicSideBySide, scene) {\n    var _this = _super.call(this, name, position, scene) || this;\n\n    _this._setRigMode = setStereoscopicRigMode.bind(null, _this);\n    _this.interaxialDistance = interaxialDistance;\n    _this.isStereoscopicSideBySide = isStereoscopicSideBySide;\n\n    _this.setCameraRigMode(isStereoscopicSideBySide ? Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL : Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER, {\n      interaxialDistance: interaxialDistance\n    });\n\n    return _this;\n  }\n  /**\n   * Gets camera class name\n   * @returns StereoscopicGamepadCamera\n   */\n\n\n  StereoscopicGamepadCamera.prototype.getClassName = function () {\n    return \"StereoscopicGamepadCamera\";\n  };\n\n  return StereoscopicGamepadCamera;\n}(GamepadCamera);\n\nexport { StereoscopicGamepadCamera };","map":{"version":3,"mappings":";;AAAA,SAASA,MAAT,QAAuB,yBAAvB;AACA,SAASC,aAAT,QAA8B,gCAA9B;AAEA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,IAAT,QAAqB,eAArB;AACA,SAASC,sBAAT,QAAuC,oCAAvC;AAEAD,IAAI,CAACE,kBAAL,CAAwB,2BAAxB,EAAqD,UAACC,IAAD,EAAOC,KAAP,EAAcC,OAAd,EAAqB;AACtE,SAAO;AAAM,eAAIC,yBAAJ,CAA8BH,IAA9B,EAAoCJ,OAAO,CAACQ,IAAR,EAApC,EAAoDF,OAAO,CAACG,mBAA5D,EAAiFH,OAAO,CAACI,wBAAzF,EAAmHL,KAAnH;AAAyH,GAAtI;AACH,CAFD;AAIA;;;;;AAIA;AAAA;AAAA;AAA+CM;AAC3C;;;;;;;;;;AAQA,qCAAYP,IAAZ,EAA0BQ,QAA1B,EAA6CC,kBAA7C,EAAyEH,wBAAzE,EAA4GL,KAA5G,EAAyH;AAAzH,gBACIS,kBAAMV,IAAN,EAAYQ,QAAZ,EAAsBP,KAAtB,KAA4B,IADhC;;AAiBUU,wBAAcb,sBAAsB,CAACc,IAAvB,CAA4B,IAA5B,EAAkCD,KAAlC,CAAd;AAfNA,SAAI,CAACF,kBAAL,GAA0BA,kBAA1B;AACAE,SAAI,CAACL,wBAAL,GAAgCA,wBAAhC;;AACAK,SAAI,CAACE,gBAAL,CAAsBP,wBAAwB,GAAGZ,MAAM,CAACoB,yCAAV,GAAsDpB,MAAM,CAACqB,+BAA3G,EAA4I;AACxIN,wBAAkB,EAAEA;AADoH,KAA5I;;;AAGH;AAED;;;;;;AAION,qDAAP;AACI,WAAO,2BAAP;AACH,GAFM;;AAKX;AAAC,CA3BD,CAA+CR,aAA/C","names":["Camera","GamepadCamera","Vector3","Node","setStereoscopicRigMode","AddNodeConstructor","name","scene","options","StereoscopicGamepadCamera","Zero","interaxial_distance","isStereoscopicSideBySide","__extends","position","interaxialDistance","_super","_this","bind","setCameraRigMode","RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL","RIG_MODE_STEREOSCOPIC_OVERUNDER"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Cameras/Stereoscopic/stereoscopicGamepadCamera.ts"],"sourcesContent":["import { Camera } from \"../../Cameras/camera\";\r\nimport { GamepadCamera } from \"../../Cameras/gamepadCamera\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Node } from \"../../node\";\r\nimport { setStereoscopicRigMode } from \"../RigModes/stereoscopicRigMode\";\r\n\r\nNode.AddNodeConstructor(\"StereoscopicGamepadCamera\", (name, scene, options) => {\r\n    return () => new StereoscopicGamepadCamera(name, Vector3.Zero(), options.interaxial_distance, options.isStereoscopicSideBySide, scene);\r\n});\r\n\r\n/**\r\n * Camera used to simulate stereoscopic rendering (based on GamepadCamera)\r\n * @see https://doc.babylonjs.com/features/cameras\r\n */\r\nexport class StereoscopicGamepadCamera extends GamepadCamera {\r\n    /**\r\n     * Creates a new StereoscopicGamepadCamera\r\n     * @param name defines camera name\r\n     * @param position defines initial position\r\n     * @param interaxialDistance defines distance between each color axis\r\n     * @param isStereoscopicSideBySide defines is stereoscopic is done side by side or over under\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, position: Vector3, interaxialDistance: number, isStereoscopicSideBySide: boolean, scene?: Scene) {\r\n        super(name, position, scene);\r\n        this.interaxialDistance = interaxialDistance;\r\n        this.isStereoscopicSideBySide = isStereoscopicSideBySide;\r\n        this.setCameraRigMode(isStereoscopicSideBySide ? Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL : Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER, {\r\n            interaxialDistance: interaxialDistance,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets camera class name\r\n     * @returns StereoscopicGamepadCamera\r\n     */\r\n    public getClassName(): string {\r\n        return \"StereoscopicGamepadCamera\";\r\n    }\r\n\r\n    protected _setRigMode = setStereoscopicRigMode.bind(null, this);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}