{"ast":null,"code":"import \"core-js/modules/es.object.set-prototype-of.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { __extends } from \"tslib\";\n/* eslint-disable @typescript-eslint/naming-convention */\n\n/**\n * Base error. Due to limitations of typedoc-check and missing documentation\n * in lib.es5.d.ts, cannot extend Error directly for RuntimeError.\n * @ignore\n */\n\nvar BaseError =\n/** @class */\nfunction (_super) {\n  __extends(BaseError, _super);\n\n  function BaseError() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  } // See https://stackoverflow.com/questions/12915412/how-do-i-extend-a-host-object-e-g-error-in-typescript\n  // and https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n  // Polyfill for Object.setPrototypeOf if necessary.\n\n\n  BaseError._setPrototypeOf = Object.setPrototypeOf || function (o, proto) {\n    o.__proto__ = proto;\n    return o;\n  };\n\n  return BaseError;\n}(Error);\n\nexport { BaseError };\n/* IMP! DO NOT CHANGE THE NUMBERING OF EXISTING ERROR CODES */\n\n/**\n * Error codes for BaseError\n */\n\nexport var ErrorCodes = {\n  // Mesh errors 0-999\n\n  /** Invalid or empty mesh vertex positions. */\n  MeshInvalidPositionsError: 0,\n  // Texture errors 1000-1999\n\n  /** Unsupported texture found. */\n  UnsupportedTextureError: 1000,\n  // GLTFLoader errors 2000-2999\n\n  /** Unexpected magic number found in GLTF file header. */\n  GLTFLoaderUnexpectedMagicError: 2000,\n  // SceneLoader errors 3000-3999\n\n  /** SceneLoader generic error code. Ideally wraps the inner exception. */\n  SceneLoaderError: 3000,\n  // File related errors 4000-4999\n\n  /** Load file error */\n  LoadFileError: 4000,\n\n  /** Request file error */\n  RequestFileError: 4001,\n\n  /** Read file error */\n  ReadFileError: 4002\n};\n/**\n * Application runtime error\n */\n\nvar RuntimeError =\n/** @class */\nfunction (_super) {\n  __extends(RuntimeError, _super);\n  /**\n   * Creates a new RuntimeError\n   * @param message defines the message of the error\n   * @param errorCode the error code\n   * @param innerError the error that caused the outer error\n   */\n\n\n  function RuntimeError(message, errorCode, innerError) {\n    var _this = _super.call(this, message) || this;\n\n    _this.errorCode = errorCode;\n    _this.innerError = innerError;\n    _this.name = \"RuntimeError\";\n\n    BaseError._setPrototypeOf(_this, RuntimeError.prototype);\n\n    return _this;\n  }\n\n  return RuntimeError;\n}(BaseError);\n\nexport { RuntimeError };","map":{"version":3,"mappings":";;;;;AAAA;;AACA;;;;;;AAKA;AAAA;AAAA;AAAwCA;;AAAxC;;AAWC,GAXD,CACI;AACA;AAEA;;;AACiBC,8BACZC,MAAc,CAACC,cAAf,IACA,UAACC,CAAD,EAAIC,KAAJ,EAAS;AACND,KAAC,CAACE,SAAF,GAAcD,KAAd;AACA,WAAOD,CAAP;AACH,GALY;;AAMrB;AAAC,CAXD,CAAwCG,KAAxC;;SAAsBN;AAatB;;AACA;;;;AAGA,OAAO,IAAMO,UAAU,GAAG;AACtB;;AACA;AACAC,2BAAyB,EAAE,CAHL;AAKtB;;AACA;AACAC,yBAAuB,EAAE,IAPH;AAStB;;AACA;AACAC,gCAA8B,EAAE,IAXV;AAatB;;AACA;AACAC,kBAAgB,EAAE,IAfI;AAiBtB;;AACA;AACAC,eAAa,EAAE,IAnBO;;AAoBtB;AACAC,kBAAgB,EAAE,IArBI;;AAsBtB;AACAC,eAAa,EAAE;AAvBO,CAAnB;AA+BP;;;;AAGA;AAAA;AAAA;AAAkCf;AAW9B;;;;;;;;AAMA,wBAAmBgB,OAAnB,EAAoCC,SAApC,EAA+DC,UAA/D,EAAiF;AAAjF,gBACIC,kBAAMH,OAAN,KAAc,IADlB;;AAGII,SAAI,CAACH,SAAL,GAAiBA,SAAjB;AACAG,SAAI,CAACF,UAAL,GAAkBA,UAAlB;AAEAE,SAAI,CAACC,IAAL,GAAY,cAAZ;;AACApB,aAAS,CAACqB,eAAV,CAA0BF,KAA1B,EAAgCG,YAAY,CAACC,SAA7C;;;AACH;;AACL;AAAC,CA1BD,CAAkCvB,SAAlC","names":["__extends","BaseError","Object","setPrototypeOf","o","proto","__proto__","Error","ErrorCodes","MeshInvalidPositionsError","UnsupportedTextureError","GLTFLoaderUnexpectedMagicError","SceneLoaderError","LoadFileError","RequestFileError","ReadFileError","message","errorCode","innerError","_super","_this","name","_setPrototypeOf","RuntimeError","prototype"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Misc/error.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\n/**\r\n * Base error. Due to limitations of typedoc-check and missing documentation\r\n * in lib.es5.d.ts, cannot extend Error directly for RuntimeError.\r\n * @ignore\r\n */\r\nexport abstract class BaseError extends Error {\r\n    // See https://stackoverflow.com/questions/12915412/how-do-i-extend-a-host-object-e-g-error-in-typescript\r\n    // and https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n\r\n    // Polyfill for Object.setPrototypeOf if necessary.\r\n    protected static _setPrototypeOf: (o: any, proto: object | null) => any =\r\n        (Object as any).setPrototypeOf ||\r\n        ((o, proto) => {\r\n            o.__proto__ = proto;\r\n            return o;\r\n        });\r\n}\r\n\r\n/* IMP! DO NOT CHANGE THE NUMBERING OF EXISTING ERROR CODES */\r\n/**\r\n * Error codes for BaseError\r\n */\r\nexport const ErrorCodes = {\r\n    // Mesh errors 0-999\r\n    /** Invalid or empty mesh vertex positions. */\r\n    MeshInvalidPositionsError: 0,\r\n\r\n    // Texture errors 1000-1999\r\n    /** Unsupported texture found. */\r\n    UnsupportedTextureError: 1000,\r\n\r\n    // GLTFLoader errors 2000-2999\r\n    /** Unexpected magic number found in GLTF file header. */\r\n    GLTFLoaderUnexpectedMagicError: 2000,\r\n\r\n    // SceneLoader errors 3000-3999\r\n    /** SceneLoader generic error code. Ideally wraps the inner exception. */\r\n    SceneLoaderError: 3000,\r\n\r\n    // File related errors 4000-4999\r\n    /** Load file error */\r\n    LoadFileError: 4000,\r\n    /** Request file error */\r\n    RequestFileError: 4001,\r\n    /** Read file error */\r\n    ReadFileError: 4002,\r\n} as const;\r\n\r\n/**\r\n * Error code type\r\n */\r\nexport type ErrorCodesType = typeof ErrorCodes[keyof typeof ErrorCodes];\r\n\r\n/**\r\n * Application runtime error\r\n */\r\nexport class RuntimeError extends BaseError {\r\n    /**\r\n     * The error code\r\n     */\r\n    public errorCode: ErrorCodesType;\r\n\r\n    /**\r\n     * The error that caused this outer error\r\n     */\r\n    public innerError?: Error;\r\n\r\n    /**\r\n     * Creates a new RuntimeError\r\n     * @param message defines the message of the error\r\n     * @param errorCode the error code\r\n     * @param innerError the error that caused the outer error\r\n     */\r\n    public constructor(message: string, errorCode: ErrorCodesType, innerError?: Error) {\r\n        super(message);\r\n\r\n        this.errorCode = errorCode;\r\n        this.innerError = innerError;\r\n\r\n        this.name = \"RuntimeError\";\r\n        BaseError._setPrototypeOf(this, RuntimeError.prototype);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}