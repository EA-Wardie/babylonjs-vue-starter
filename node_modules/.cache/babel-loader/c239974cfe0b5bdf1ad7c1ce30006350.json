{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.string.substr.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport { Logger } from \"./logger.js\";\nimport { SceneSerializer } from \"./sceneSerializer.js\";\nimport { StartsWith } from \"./stringTools.js\";\n/**\n * Class used to connect with the reflector zone of the sandbox via the reflector bridge\n * @since 5.0.0\n */\n\nvar Reflector =\n/** @class */\nfunction () {\n  /**\n   * Constructs a reflector object.\n   * @param scene The scene to use\n   * @param hostname The hostname of the reflector bridge\n   * @param port The port of the reflector bridge\n   */\n  function Reflector(scene, hostname, port) {\n    var _this = this;\n\n    this._scene = scene;\n    Logger.Log(\"[Reflector] Connecting to ws://\".concat(hostname, \":\").concat(port));\n    this._webSocket = new WebSocket(\"ws://\".concat(hostname, \":\").concat(port));\n\n    this._webSocket.onmessage = function (event) {\n      var message = event.data;\n\n      if (StartsWith(message, Reflector._SERVER_PREFIX)) {\n        var serverMessage = message.substr(Reflector._SERVER_PREFIX.length);\n        Logger.Log(\"[Reflector] Received server message: \".concat(serverMessage.substr(0, 64)));\n\n        _this._handleServerMessage(serverMessage);\n\n        return;\n      } else {\n        Logger.Log(\"[Reflector] Received client message: \".concat(message.substr(0, 64)));\n\n        _this._handleClientMessage();\n      }\n    };\n\n    this._webSocket.onclose = function (event) {\n      Logger.Log(\"[Reflector] Disconnected \".concat(event.code, \" \").concat(event.reason));\n    };\n  }\n  /**\n   * Closes the reflector connection\n   */\n\n\n  Reflector.prototype.close = function () {\n    this._webSocket.close();\n  };\n\n  Reflector.prototype._handleServerMessage = function (message) {\n    var _this = this;\n\n    switch (message) {\n      case \"connected\":\n        {\n          SceneSerializer.SerializeAsync(this._scene).then(function (serialized) {\n            _this._webSocket.send(\"load|\".concat(JSON.stringify(serialized)));\n          });\n          break;\n        }\n    }\n  };\n\n  Reflector.prototype._handleClientMessage = function () {// do nothing\n  };\n\n  Reflector._SERVER_PREFIX = \"$$\";\n  return Reflector;\n}();\n\nexport { Reflector };","map":{"version":3,"mappings":";;;AACA,SAASA,MAAT,QAAuB,aAAvB;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA;;;;;AAIA;AAAA;AAAA;AAMI;;;;;;AAMA,qBAAmBC,KAAnB,EAAiCC,QAAjC,EAAmDC,IAAnD,EAA+D;AAA/D;;AACI,SAAKC,MAAL,GAAcH,KAAd;AAEAH,UAAM,CAACO,GAAP,CAAW,yCAAkCH,QAAlC,EAA0C,GAA1C,EAA0CI,MAA1C,CAA8CH,IAA9C,CAAX;AACA,SAAKI,UAAL,GAAkB,IAAIC,SAAJ,CAAc,eAAQN,QAAR,EAAgB,GAAhB,EAAgBI,MAAhB,CAAoBH,IAApB,CAAd,CAAlB;;AAEA,SAAKI,UAAL,CAAgBE,SAAhB,GAA4B,UAACC,KAAD,EAAM;AAC9B,UAAMC,OAAO,GAAWD,KAAK,CAACE,IAA9B;;AACA,UAAIZ,UAAU,CAACW,OAAD,EAAUE,SAAS,CAACC,cAApB,CAAd,EAAmD;AAC/C,YAAMC,aAAa,GAAGJ,OAAO,CAACK,MAAR,CAAeH,SAAS,CAACC,cAAV,CAAyBG,MAAxC,CAAtB;AACAnB,cAAM,CAACO,GAAP,CAAW,+CAAwCU,aAAa,CAACC,MAAd,CAAqB,CAArB,EAAwB,EAAxB,CAAxC,CAAX;;AACAE,aAAI,CAACC,oBAAL,CAA0BJ,aAA1B;;AACA;AACH,OALD,MAKO;AACHjB,cAAM,CAACO,GAAP,CAAW,+CAAwCM,OAAO,CAACK,MAAR,CAAe,CAAf,EAAkB,EAAlB,CAAxC,CAAX;;AACAE,aAAI,CAACE,oBAAL;AACH;AACJ,KAXD;;AAaA,SAAKb,UAAL,CAAgBc,OAAhB,GAA0B,UAACX,KAAD,EAAM;AAC5BZ,YAAM,CAACO,GAAP,CAAW,mCAA4BK,KAAK,CAACY,IAAlC,EAAsC,GAAtC,EAAsChB,MAAtC,CAA0CI,KAAK,CAACa,MAAhD,CAAX;AACH,KAFD;AAGH;AAED;;;;;AAGOV,8BAAP;AACI,SAAKN,UAAL,CAAgBiB,KAAhB;AACH,GAFM;;AAICX,6CAAR,UAA6BF,OAA7B,EAA4C;AAA5C;;AACI,YAAQA,OAAR;AACI,WAAK,WAAL;AAAkB;AACdZ,yBAAe,CAAC0B,cAAhB,CAA+B,KAAKrB,MAApC,EAA4CsB,IAA5C,CAAiD,UAACC,UAAD,EAAW;AACxDT,iBAAI,CAACX,UAAL,CAAgBqB,IAAhB,CAAqB,eAAQC,IAAI,CAACC,SAAL,CAAeH,UAAf,CAAR,CAArB;AACH,WAFD;AAGA;AACH;AANL;AAQH,GATO;;AAWAd,6CAAR,aACI;AACH,GAFO;;AArDgBA,6BAAiB,IAAjB;AAwD5B;AAAC,CAzDD;;SAAaA","names":["Logger","SceneSerializer","StartsWith","scene","hostname","port","_scene","Log","concat","_webSocket","WebSocket","onmessage","event","message","data","Reflector","_SERVER_PREFIX","serverMessage","substr","length","_this","_handleServerMessage","_handleClientMessage","onclose","code","reason","close","SerializeAsync","then","serialized","send","JSON","stringify"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Misc/reflector.ts"],"sourcesContent":["import type { Scene } from \"../scene\";\r\nimport { Logger } from \"./logger\";\r\nimport { SceneSerializer } from \"./sceneSerializer\";\r\nimport { StartsWith } from \"./stringTools\";\r\n\r\n/**\r\n * Class used to connect with the reflector zone of the sandbox via the reflector bridge\r\n * @since 5.0.0\r\n */\r\nexport class Reflector {\r\n    private static readonly _SERVER_PREFIX = \"$$\";\r\n\r\n    private _scene: Scene;\r\n    private _webSocket: WebSocket;\r\n\r\n    /**\r\n     * Constructs a reflector object.\r\n     * @param scene The scene to use\r\n     * @param hostname The hostname of the reflector bridge\r\n     * @param port The port of the reflector bridge\r\n     */\r\n    public constructor(scene: Scene, hostname: string, port: number) {\r\n        this._scene = scene;\r\n\r\n        Logger.Log(`[Reflector] Connecting to ws://${hostname}:${port}`);\r\n        this._webSocket = new WebSocket(`ws://${hostname}:${port}`);\r\n\r\n        this._webSocket.onmessage = (event) => {\r\n            const message: string = event.data;\r\n            if (StartsWith(message, Reflector._SERVER_PREFIX)) {\r\n                const serverMessage = message.substr(Reflector._SERVER_PREFIX.length);\r\n                Logger.Log(`[Reflector] Received server message: ${serverMessage.substr(0, 64)}`);\r\n                this._handleServerMessage(serverMessage);\r\n                return;\r\n            } else {\r\n                Logger.Log(`[Reflector] Received client message: ${message.substr(0, 64)}`);\r\n                this._handleClientMessage();\r\n            }\r\n        };\r\n\r\n        this._webSocket.onclose = (event) => {\r\n            Logger.Log(`[Reflector] Disconnected ${event.code} ${event.reason}`);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Closes the reflector connection\r\n     */\r\n    public close(): void {\r\n        this._webSocket.close();\r\n    }\r\n\r\n    private _handleServerMessage(message: string): void {\r\n        switch (message) {\r\n            case \"connected\": {\r\n                SceneSerializer.SerializeAsync(this._scene).then((serialized) => {\r\n                    this._webSocket.send(`load|${JSON.stringify(serialized)}`);\r\n                });\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _handleClientMessage(): void {\r\n        // do nothing\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}