{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { Tools } from \"../Misc/tools.js\";\nimport { PerfCounter } from \"../Misc/perfCounter.js\";\n/**\n * This class can be used to get instrumentation data from a Babylon engine\n * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#sceneinstrumentation\n */\n\nvar SceneInstrumentation =\n/** @class */\nfunction () {\n  /**\n   * Instantiates a new scene instrumentation.\n   * This class can be used to get instrumentation data from a Babylon engine\n   * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#sceneinstrumentation\n   * @param scene Defines the scene to instrument\n   */\n  function SceneInstrumentation(\n  /**\n   * Defines the scene to instrument\n   */\n  scene) {\n    var _this = this;\n\n    this.scene = scene;\n    this._captureActiveMeshesEvaluationTime = false;\n    this._activeMeshesEvaluationTime = new PerfCounter();\n    this._captureRenderTargetsRenderTime = false;\n    this._renderTargetsRenderTime = new PerfCounter();\n    this._captureFrameTime = false;\n    this._frameTime = new PerfCounter();\n    this._captureRenderTime = false;\n    this._renderTime = new PerfCounter();\n    this._captureInterFrameTime = false;\n    this._interFrameTime = new PerfCounter();\n    this._captureParticlesRenderTime = false;\n    this._particlesRenderTime = new PerfCounter();\n    this._captureSpritesRenderTime = false;\n    this._spritesRenderTime = new PerfCounter();\n    this._capturePhysicsTime = false;\n    this._physicsTime = new PerfCounter();\n    this._captureAnimationsTime = false;\n    this._animationsTime = new PerfCounter();\n    this._captureCameraRenderTime = false;\n    this._cameraRenderTime = new PerfCounter(); // Observers\n\n    this._onBeforeActiveMeshesEvaluationObserver = null;\n    this._onAfterActiveMeshesEvaluationObserver = null;\n    this._onBeforeRenderTargetsRenderObserver = null;\n    this._onAfterRenderTargetsRenderObserver = null;\n    this._onAfterRenderObserver = null;\n    this._onBeforeDrawPhaseObserver = null;\n    this._onAfterDrawPhaseObserver = null;\n    this._onBeforeAnimationsObserver = null;\n    this._onBeforeParticlesRenderingObserver = null;\n    this._onAfterParticlesRenderingObserver = null;\n    this._onBeforeSpritesRenderingObserver = null;\n    this._onAfterSpritesRenderingObserver = null;\n    this._onBeforePhysicsObserver = null;\n    this._onAfterPhysicsObserver = null;\n    this._onAfterAnimationsObserver = null;\n    this._onBeforeCameraRenderObserver = null;\n    this._onAfterCameraRenderObserver = null; // Before render\n\n    this._onBeforeAnimationsObserver = scene.onBeforeAnimationsObservable.add(function () {\n      if (_this._captureActiveMeshesEvaluationTime) {\n        _this._activeMeshesEvaluationTime.fetchNewFrame();\n      }\n\n      if (_this._captureRenderTargetsRenderTime) {\n        _this._renderTargetsRenderTime.fetchNewFrame();\n      }\n\n      if (_this._captureFrameTime) {\n        Tools.StartPerformanceCounter(\"Scene rendering\");\n\n        _this._frameTime.beginMonitoring();\n      }\n\n      if (_this._captureInterFrameTime) {\n        _this._interFrameTime.endMonitoring();\n      }\n\n      if (_this._captureParticlesRenderTime) {\n        _this._particlesRenderTime.fetchNewFrame();\n      }\n\n      if (_this._captureSpritesRenderTime) {\n        _this._spritesRenderTime.fetchNewFrame();\n      }\n\n      if (_this._captureAnimationsTime) {\n        _this._animationsTime.beginMonitoring();\n      }\n\n      _this.scene.getEngine()._drawCalls.fetchNewFrame();\n    }); // After render\n\n    this._onAfterRenderObserver = scene.onAfterRenderObservable.add(function () {\n      if (_this._captureFrameTime) {\n        Tools.EndPerformanceCounter(\"Scene rendering\");\n\n        _this._frameTime.endMonitoring();\n      }\n\n      if (_this._captureRenderTime) {\n        _this._renderTime.endMonitoring(false);\n      }\n\n      if (_this._captureInterFrameTime) {\n        _this._interFrameTime.beginMonitoring();\n      }\n    });\n  }\n\n  Object.defineProperty(SceneInstrumentation.prototype, \"activeMeshesEvaluationTimeCounter\", {\n    // Properties\n\n    /**\n     * Gets the perf counter used for active meshes evaluation time\n     */\n    get: function get() {\n      return this._activeMeshesEvaluationTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"captureActiveMeshesEvaluationTime\", {\n    /**\n     * Gets the active meshes evaluation time capture status\n     */\n    get: function get() {\n      return this._captureActiveMeshesEvaluationTime;\n    },\n\n    /**\n     * Enable or disable the active meshes evaluation time capture\n     */\n    set: function set(value) {\n      var _this = this;\n\n      if (value === this._captureActiveMeshesEvaluationTime) {\n        return;\n      }\n\n      this._captureActiveMeshesEvaluationTime = value;\n\n      if (value) {\n        this._onBeforeActiveMeshesEvaluationObserver = this.scene.onBeforeActiveMeshesEvaluationObservable.add(function () {\n          Tools.StartPerformanceCounter(\"Active meshes evaluation\");\n\n          _this._activeMeshesEvaluationTime.beginMonitoring();\n        });\n        this._onAfterActiveMeshesEvaluationObserver = this.scene.onAfterActiveMeshesEvaluationObservable.add(function () {\n          Tools.EndPerformanceCounter(\"Active meshes evaluation\");\n\n          _this._activeMeshesEvaluationTime.endMonitoring();\n        });\n      } else {\n        this.scene.onBeforeActiveMeshesEvaluationObservable.remove(this._onBeforeActiveMeshesEvaluationObserver);\n        this._onBeforeActiveMeshesEvaluationObserver = null;\n        this.scene.onAfterActiveMeshesEvaluationObservable.remove(this._onAfterActiveMeshesEvaluationObserver);\n        this._onAfterActiveMeshesEvaluationObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"renderTargetsRenderTimeCounter\", {\n    /**\n     * Gets the perf counter used for render targets render time\n     */\n    get: function get() {\n      return this._renderTargetsRenderTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"captureRenderTargetsRenderTime\", {\n    /**\n     * Gets the render targets render time capture status\n     */\n    get: function get() {\n      return this._captureRenderTargetsRenderTime;\n    },\n\n    /**\n     * Enable or disable the render targets render time capture\n     */\n    set: function set(value) {\n      var _this = this;\n\n      if (value === this._captureRenderTargetsRenderTime) {\n        return;\n      }\n\n      this._captureRenderTargetsRenderTime = value;\n\n      if (value) {\n        this._onBeforeRenderTargetsRenderObserver = this.scene.onBeforeRenderTargetsRenderObservable.add(function () {\n          Tools.StartPerformanceCounter(\"Render targets rendering\");\n\n          _this._renderTargetsRenderTime.beginMonitoring();\n        });\n        this._onAfterRenderTargetsRenderObserver = this.scene.onAfterRenderTargetsRenderObservable.add(function () {\n          Tools.EndPerformanceCounter(\"Render targets rendering\");\n\n          _this._renderTargetsRenderTime.endMonitoring(false);\n        });\n      } else {\n        this.scene.onBeforeRenderTargetsRenderObservable.remove(this._onBeforeRenderTargetsRenderObserver);\n        this._onBeforeRenderTargetsRenderObserver = null;\n        this.scene.onAfterRenderTargetsRenderObservable.remove(this._onAfterRenderTargetsRenderObserver);\n        this._onAfterRenderTargetsRenderObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"particlesRenderTimeCounter\", {\n    /**\n     * Gets the perf counter used for particles render time\n     */\n    get: function get() {\n      return this._particlesRenderTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"captureParticlesRenderTime\", {\n    /**\n     * Gets the particles render time capture status\n     */\n    get: function get() {\n      return this._captureParticlesRenderTime;\n    },\n\n    /**\n     * Enable or disable the particles render time capture\n     */\n    set: function set(value) {\n      var _this = this;\n\n      if (value === this._captureParticlesRenderTime) {\n        return;\n      }\n\n      this._captureParticlesRenderTime = value;\n\n      if (value) {\n        this._onBeforeParticlesRenderingObserver = this.scene.onBeforeParticlesRenderingObservable.add(function () {\n          Tools.StartPerformanceCounter(\"Particles\");\n\n          _this._particlesRenderTime.beginMonitoring();\n        });\n        this._onAfterParticlesRenderingObserver = this.scene.onAfterParticlesRenderingObservable.add(function () {\n          Tools.EndPerformanceCounter(\"Particles\");\n\n          _this._particlesRenderTime.endMonitoring(false);\n        });\n      } else {\n        this.scene.onBeforeParticlesRenderingObservable.remove(this._onBeforeParticlesRenderingObserver);\n        this._onBeforeParticlesRenderingObserver = null;\n        this.scene.onAfterParticlesRenderingObservable.remove(this._onAfterParticlesRenderingObserver);\n        this._onAfterParticlesRenderingObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"spritesRenderTimeCounter\", {\n    /**\n     * Gets the perf counter used for sprites render time\n     */\n    get: function get() {\n      return this._spritesRenderTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"captureSpritesRenderTime\", {\n    /**\n     * Gets the sprites render time capture status\n     */\n    get: function get() {\n      return this._captureSpritesRenderTime;\n    },\n\n    /**\n     * Enable or disable the sprites render time capture\n     */\n    set: function set(value) {\n      var _this = this;\n\n      if (value === this._captureSpritesRenderTime) {\n        return;\n      }\n\n      this._captureSpritesRenderTime = value;\n\n      if (!this.scene.spriteManagers) {\n        return;\n      }\n\n      if (value) {\n        this._onBeforeSpritesRenderingObserver = this.scene.onBeforeSpritesRenderingObservable.add(function () {\n          Tools.StartPerformanceCounter(\"Sprites\");\n\n          _this._spritesRenderTime.beginMonitoring();\n        });\n        this._onAfterSpritesRenderingObserver = this.scene.onAfterSpritesRenderingObservable.add(function () {\n          Tools.EndPerformanceCounter(\"Sprites\");\n\n          _this._spritesRenderTime.endMonitoring(false);\n        });\n      } else {\n        this.scene.onBeforeSpritesRenderingObservable.remove(this._onBeforeSpritesRenderingObserver);\n        this._onBeforeSpritesRenderingObserver = null;\n        this.scene.onAfterSpritesRenderingObservable.remove(this._onAfterSpritesRenderingObserver);\n        this._onAfterSpritesRenderingObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"physicsTimeCounter\", {\n    /**\n     * Gets the perf counter used for physics time\n     */\n    get: function get() {\n      return this._physicsTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"capturePhysicsTime\", {\n    /**\n     * Gets the physics time capture status\n     */\n    get: function get() {\n      return this._capturePhysicsTime;\n    },\n\n    /**\n     * Enable or disable the physics time capture\n     */\n    set: function set(value) {\n      var _this = this;\n\n      if (value === this._capturePhysicsTime) {\n        return;\n      }\n\n      if (!this.scene.onBeforePhysicsObservable) {\n        return;\n      }\n\n      this._capturePhysicsTime = value;\n\n      if (value) {\n        this._onBeforePhysicsObserver = this.scene.onBeforePhysicsObservable.add(function () {\n          Tools.StartPerformanceCounter(\"Physics\");\n\n          _this._physicsTime.beginMonitoring();\n        });\n        this._onAfterPhysicsObserver = this.scene.onAfterPhysicsObservable.add(function () {\n          Tools.EndPerformanceCounter(\"Physics\");\n\n          _this._physicsTime.endMonitoring();\n        });\n      } else {\n        this.scene.onBeforePhysicsObservable.remove(this._onBeforePhysicsObserver);\n        this._onBeforePhysicsObserver = null;\n        this.scene.onAfterPhysicsObservable.remove(this._onAfterPhysicsObserver);\n        this._onAfterPhysicsObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"animationsTimeCounter\", {\n    /**\n     * Gets the perf counter used for animations time\n     */\n    get: function get() {\n      return this._animationsTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"captureAnimationsTime\", {\n    /**\n     * Gets the animations time capture status\n     */\n    get: function get() {\n      return this._captureAnimationsTime;\n    },\n\n    /**\n     * Enable or disable the animations time capture\n     */\n    set: function set(value) {\n      var _this = this;\n\n      if (value === this._captureAnimationsTime) {\n        return;\n      }\n\n      this._captureAnimationsTime = value;\n\n      if (value) {\n        this._onAfterAnimationsObserver = this.scene.onAfterAnimationsObservable.add(function () {\n          _this._animationsTime.endMonitoring();\n        });\n      } else {\n        this.scene.onAfterAnimationsObservable.remove(this._onAfterAnimationsObserver);\n        this._onAfterAnimationsObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"frameTimeCounter\", {\n    /**\n     * Gets the perf counter used for frame time capture\n     */\n    get: function get() {\n      return this._frameTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"captureFrameTime\", {\n    /**\n     * Gets the frame time capture status\n     */\n    get: function get() {\n      return this._captureFrameTime;\n    },\n\n    /**\n     * Enable or disable the frame time capture\n     */\n    set: function set(value) {\n      this._captureFrameTime = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"interFrameTimeCounter\", {\n    /**\n     * Gets the perf counter used for inter-frames time capture\n     */\n    get: function get() {\n      return this._interFrameTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"captureInterFrameTime\", {\n    /**\n     * Gets the inter-frames time capture status\n     */\n    get: function get() {\n      return this._captureInterFrameTime;\n    },\n\n    /**\n     * Enable or disable the inter-frames time capture\n     */\n    set: function set(value) {\n      this._captureInterFrameTime = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"renderTimeCounter\", {\n    /**\n     * Gets the perf counter used for render time capture\n     */\n    get: function get() {\n      return this._renderTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"captureRenderTime\", {\n    /**\n     * Gets the render time capture status\n     */\n    get: function get() {\n      return this._captureRenderTime;\n    },\n\n    /**\n     * Enable or disable the render time capture\n     */\n    set: function set(value) {\n      var _this = this;\n\n      if (value === this._captureRenderTime) {\n        return;\n      }\n\n      this._captureRenderTime = value;\n\n      if (value) {\n        this._onBeforeDrawPhaseObserver = this.scene.onBeforeDrawPhaseObservable.add(function () {\n          _this._renderTime.beginMonitoring();\n\n          Tools.StartPerformanceCounter(\"Main render\");\n        });\n        this._onAfterDrawPhaseObserver = this.scene.onAfterDrawPhaseObservable.add(function () {\n          _this._renderTime.endMonitoring(false);\n\n          Tools.EndPerformanceCounter(\"Main render\");\n        });\n      } else {\n        this.scene.onBeforeDrawPhaseObservable.remove(this._onBeforeDrawPhaseObserver);\n        this._onBeforeDrawPhaseObserver = null;\n        this.scene.onAfterDrawPhaseObservable.remove(this._onAfterDrawPhaseObserver);\n        this._onAfterDrawPhaseObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"cameraRenderTimeCounter\", {\n    /**\n     * Gets the perf counter used for camera render time capture\n     */\n    get: function get() {\n      return this._cameraRenderTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"captureCameraRenderTime\", {\n    /**\n     * Gets the camera render time capture status\n     */\n    get: function get() {\n      return this._captureCameraRenderTime;\n    },\n\n    /**\n     * Enable or disable the camera render time capture\n     */\n    set: function set(value) {\n      var _this = this;\n\n      if (value === this._captureCameraRenderTime) {\n        return;\n      }\n\n      this._captureCameraRenderTime = value;\n\n      if (value) {\n        this._onBeforeCameraRenderObserver = this.scene.onBeforeCameraRenderObservable.add(function (camera) {\n          _this._cameraRenderTime.beginMonitoring();\n\n          Tools.StartPerformanceCounter(\"Rendering camera \".concat(camera.name));\n        });\n        this._onAfterCameraRenderObserver = this.scene.onAfterCameraRenderObservable.add(function (camera) {\n          _this._cameraRenderTime.endMonitoring(false);\n\n          Tools.EndPerformanceCounter(\"Rendering camera \".concat(camera.name));\n        });\n      } else {\n        this.scene.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\n        this._onBeforeCameraRenderObserver = null;\n        this.scene.onAfterCameraRenderObservable.remove(this._onAfterCameraRenderObserver);\n        this._onAfterCameraRenderObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"drawCallsCounter\", {\n    /**\n     * Gets the perf counter used for draw calls\n     */\n    get: function get() {\n      return this.scene.getEngine()._drawCalls;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Dispose and release associated resources.\n   */\n\n  SceneInstrumentation.prototype.dispose = function () {\n    this.scene.onAfterRenderObservable.remove(this._onAfterRenderObserver);\n    this._onAfterRenderObserver = null;\n    this.scene.onBeforeActiveMeshesEvaluationObservable.remove(this._onBeforeActiveMeshesEvaluationObserver);\n    this._onBeforeActiveMeshesEvaluationObserver = null;\n    this.scene.onAfterActiveMeshesEvaluationObservable.remove(this._onAfterActiveMeshesEvaluationObserver);\n    this._onAfterActiveMeshesEvaluationObserver = null;\n    this.scene.onBeforeRenderTargetsRenderObservable.remove(this._onBeforeRenderTargetsRenderObserver);\n    this._onBeforeRenderTargetsRenderObserver = null;\n    this.scene.onAfterRenderTargetsRenderObservable.remove(this._onAfterRenderTargetsRenderObserver);\n    this._onAfterRenderTargetsRenderObserver = null;\n    this.scene.onBeforeAnimationsObservable.remove(this._onBeforeAnimationsObserver);\n    this._onBeforeAnimationsObserver = null;\n    this.scene.onBeforeParticlesRenderingObservable.remove(this._onBeforeParticlesRenderingObserver);\n    this._onBeforeParticlesRenderingObserver = null;\n    this.scene.onAfterParticlesRenderingObservable.remove(this._onAfterParticlesRenderingObserver);\n    this._onAfterParticlesRenderingObserver = null;\n\n    if (this._onBeforeSpritesRenderingObserver) {\n      this.scene.onBeforeSpritesRenderingObservable.remove(this._onBeforeSpritesRenderingObserver);\n      this._onBeforeSpritesRenderingObserver = null;\n    }\n\n    if (this._onAfterSpritesRenderingObserver) {\n      this.scene.onAfterSpritesRenderingObservable.remove(this._onAfterSpritesRenderingObserver);\n      this._onAfterSpritesRenderingObserver = null;\n    }\n\n    this.scene.onBeforeDrawPhaseObservable.remove(this._onBeforeDrawPhaseObserver);\n    this._onBeforeDrawPhaseObserver = null;\n    this.scene.onAfterDrawPhaseObservable.remove(this._onAfterDrawPhaseObserver);\n    this._onAfterDrawPhaseObserver = null;\n\n    if (this._onBeforePhysicsObserver) {\n      this.scene.onBeforePhysicsObservable.remove(this._onBeforePhysicsObserver);\n      this._onBeforePhysicsObserver = null;\n    }\n\n    if (this._onAfterPhysicsObserver) {\n      this.scene.onAfterPhysicsObservable.remove(this._onAfterPhysicsObserver);\n      this._onAfterPhysicsObserver = null;\n    }\n\n    this.scene.onAfterAnimationsObservable.remove(this._onAfterAnimationsObserver);\n    this._onAfterAnimationsObserver = null;\n    this.scene.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\n    this._onBeforeCameraRenderObserver = null;\n    this.scene.onAfterCameraRenderObservable.remove(this._onAfterCameraRenderObserver);\n    this._onAfterCameraRenderObserver = null;\n    this.scene = null;\n  };\n\n  return SceneInstrumentation;\n}();\n\nexport { SceneInstrumentation };","map":{"version":3,"mappings":"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","names":["Tools","PerfCounter","scene","_onBeforeAnimationsObserver","onBeforeAnimationsObservable","add","_this","_captureActiveMeshesEvaluationTime","_activeMeshesEvaluationTime","fetchNewFrame","_captureRenderTargetsRenderTime","_renderTargetsRenderTime","_captureFrameTime","StartPerformanceCounter","_frameTime","beginMonitoring","_captureInterFrameTime","_interFrameTime","endMonitoring","_captureParticlesRenderTime","_particlesRenderTime","_captureSpritesRenderTime","_spritesRenderTime","_captureAnimationsTime","_animationsTime","getEngine","_drawCalls","_onAfterRenderObserver","onAfterRenderObservable","EndPerformanceCounter","_captureRenderTime","_renderTime","Object","SceneInstrumentation","value","_onBeforeActiveMeshesEvaluationObserver","onBeforeActiveMeshesEvaluationObservable","_onAfterActiveMeshesEvaluationObserver","onAfterActiveMeshesEvaluationObservable","remove","_onBeforeRenderTargetsRenderObserver","onBeforeRenderTargetsRenderObservable","_onAfterRenderTargetsRenderObserver","onAfterRenderTargetsRenderObservable","_onBeforeParticlesRenderingObserver","onBeforeParticlesRenderingObservable","_onAfterParticlesRenderingObserver","onAfterParticlesRenderingObservable","spriteManagers","_onBeforeSpritesRenderingObserver","onBeforeSpritesRenderingObservable","_onAfterSpritesRenderingObserver","onAfterSpritesRenderingObservable","_physicsTime","_capturePhysicsTime","onBeforePhysicsObservable","_onBeforePhysicsObserver","_onAfterPhysicsObserver","onAfterPhysicsObservable","_onAfterAnimationsObserver","onAfterAnimationsObservable","_onBeforeDrawPhaseObserver","onBeforeDrawPhaseObservable","_onAfterDrawPhaseObserver","onAfterDrawPhaseObservable","_cameraRenderTime","_captureCameraRenderTime","_onBeforeCameraRenderObserver","onBeforeCameraRenderObservable","camera","name","_onAfterCameraRenderObserver","onAfterCameraRenderObservable"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Instrumentation/sceneInstrumentation.ts"],"sourcesContent":["import { Tools } from \"../Misc/tools\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Scene, IDisposable } from \"../scene\";\r\nimport { PerfCounter } from \"../Misc/perfCounter\";\r\n/**\r\n * This class can be used to get instrumentation data from a Babylon engine\r\n * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#sceneinstrumentation\r\n */\r\nexport class SceneInstrumentation implements IDisposable {\r\n    private _captureActiveMeshesEvaluationTime = false;\r\n    private _activeMeshesEvaluationTime = new PerfCounter();\r\n\r\n    private _captureRenderTargetsRenderTime = false;\r\n    private _renderTargetsRenderTime = new PerfCounter();\r\n\r\n    private _captureFrameTime = false;\r\n    private _frameTime = new PerfCounter();\r\n\r\n    private _captureRenderTime = false;\r\n    private _renderTime = new PerfCounter();\r\n\r\n    private _captureInterFrameTime = false;\r\n    private _interFrameTime = new PerfCounter();\r\n\r\n    private _captureParticlesRenderTime = false;\r\n    private _particlesRenderTime = new PerfCounter();\r\n\r\n    private _captureSpritesRenderTime = false;\r\n    private _spritesRenderTime = new PerfCounter();\r\n\r\n    private _capturePhysicsTime = false;\r\n    private _physicsTime = new PerfCounter();\r\n\r\n    private _captureAnimationsTime = false;\r\n    private _animationsTime = new PerfCounter();\r\n\r\n    private _captureCameraRenderTime = false;\r\n    private _cameraRenderTime = new PerfCounter();\r\n\r\n    // Observers\r\n    private _onBeforeActiveMeshesEvaluationObserver: Nullable<Observer<Scene>> = null;\r\n    private _onAfterActiveMeshesEvaluationObserver: Nullable<Observer<Scene>> = null;\r\n    private _onBeforeRenderTargetsRenderObserver: Nullable<Observer<Scene>> = null;\r\n    private _onAfterRenderTargetsRenderObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _onAfterRenderObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _onBeforeDrawPhaseObserver: Nullable<Observer<Scene>> = null;\r\n    private _onAfterDrawPhaseObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _onBeforeAnimationsObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _onBeforeParticlesRenderingObserver: Nullable<Observer<Scene>> = null;\r\n    private _onAfterParticlesRenderingObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _onBeforeSpritesRenderingObserver: Nullable<Observer<Scene>> = null;\r\n    private _onAfterSpritesRenderingObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _onBeforePhysicsObserver: Nullable<Observer<Scene>> = null;\r\n    private _onAfterPhysicsObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _onAfterAnimationsObserver: Nullable<Observer<Scene>> = null;\r\n\r\n    private _onBeforeCameraRenderObserver: Nullable<Observer<Camera>> = null;\r\n    private _onAfterCameraRenderObserver: Nullable<Observer<Camera>> = null;\r\n\r\n    // Properties\r\n    /**\r\n     * Gets the perf counter used for active meshes evaluation time\r\n     */\r\n    public get activeMeshesEvaluationTimeCounter(): PerfCounter {\r\n        return this._activeMeshesEvaluationTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the active meshes evaluation time capture status\r\n     */\r\n    public get captureActiveMeshesEvaluationTime(): boolean {\r\n        return this._captureActiveMeshesEvaluationTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the active meshes evaluation time capture\r\n     */\r\n    public set captureActiveMeshesEvaluationTime(value: boolean) {\r\n        if (value === this._captureActiveMeshesEvaluationTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureActiveMeshesEvaluationTime = value;\r\n\r\n        if (value) {\r\n            this._onBeforeActiveMeshesEvaluationObserver = this.scene.onBeforeActiveMeshesEvaluationObservable.add(() => {\r\n                Tools.StartPerformanceCounter(\"Active meshes evaluation\");\r\n                this._activeMeshesEvaluationTime.beginMonitoring();\r\n            });\r\n\r\n            this._onAfterActiveMeshesEvaluationObserver = this.scene.onAfterActiveMeshesEvaluationObservable.add(() => {\r\n                Tools.EndPerformanceCounter(\"Active meshes evaluation\");\r\n                this._activeMeshesEvaluationTime.endMonitoring();\r\n            });\r\n        } else {\r\n            this.scene.onBeforeActiveMeshesEvaluationObservable.remove(this._onBeforeActiveMeshesEvaluationObserver);\r\n            this._onBeforeActiveMeshesEvaluationObserver = null;\r\n\r\n            this.scene.onAfterActiveMeshesEvaluationObservable.remove(this._onAfterActiveMeshesEvaluationObserver);\r\n            this._onAfterActiveMeshesEvaluationObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for render targets render time\r\n     */\r\n    public get renderTargetsRenderTimeCounter(): PerfCounter {\r\n        return this._renderTargetsRenderTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the render targets render time capture status\r\n     */\r\n    public get captureRenderTargetsRenderTime(): boolean {\r\n        return this._captureRenderTargetsRenderTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the render targets render time capture\r\n     */\r\n    public set captureRenderTargetsRenderTime(value: boolean) {\r\n        if (value === this._captureRenderTargetsRenderTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureRenderTargetsRenderTime = value;\r\n\r\n        if (value) {\r\n            this._onBeforeRenderTargetsRenderObserver = this.scene.onBeforeRenderTargetsRenderObservable.add(() => {\r\n                Tools.StartPerformanceCounter(\"Render targets rendering\");\r\n                this._renderTargetsRenderTime.beginMonitoring();\r\n            });\r\n\r\n            this._onAfterRenderTargetsRenderObserver = this.scene.onAfterRenderTargetsRenderObservable.add(() => {\r\n                Tools.EndPerformanceCounter(\"Render targets rendering\");\r\n                this._renderTargetsRenderTime.endMonitoring(false);\r\n            });\r\n        } else {\r\n            this.scene.onBeforeRenderTargetsRenderObservable.remove(this._onBeforeRenderTargetsRenderObserver);\r\n            this._onBeforeRenderTargetsRenderObserver = null;\r\n\r\n            this.scene.onAfterRenderTargetsRenderObservable.remove(this._onAfterRenderTargetsRenderObserver);\r\n            this._onAfterRenderTargetsRenderObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for particles render time\r\n     */\r\n    public get particlesRenderTimeCounter(): PerfCounter {\r\n        return this._particlesRenderTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the particles render time capture status\r\n     */\r\n    public get captureParticlesRenderTime(): boolean {\r\n        return this._captureParticlesRenderTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the particles render time capture\r\n     */\r\n    public set captureParticlesRenderTime(value: boolean) {\r\n        if (value === this._captureParticlesRenderTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureParticlesRenderTime = value;\r\n\r\n        if (value) {\r\n            this._onBeforeParticlesRenderingObserver = this.scene.onBeforeParticlesRenderingObservable.add(() => {\r\n                Tools.StartPerformanceCounter(\"Particles\");\r\n                this._particlesRenderTime.beginMonitoring();\r\n            });\r\n\r\n            this._onAfterParticlesRenderingObserver = this.scene.onAfterParticlesRenderingObservable.add(() => {\r\n                Tools.EndPerformanceCounter(\"Particles\");\r\n                this._particlesRenderTime.endMonitoring(false);\r\n            });\r\n        } else {\r\n            this.scene.onBeforeParticlesRenderingObservable.remove(this._onBeforeParticlesRenderingObserver);\r\n            this._onBeforeParticlesRenderingObserver = null;\r\n\r\n            this.scene.onAfterParticlesRenderingObservable.remove(this._onAfterParticlesRenderingObserver);\r\n            this._onAfterParticlesRenderingObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for sprites render time\r\n     */\r\n    public get spritesRenderTimeCounter(): PerfCounter {\r\n        return this._spritesRenderTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the sprites render time capture status\r\n     */\r\n    public get captureSpritesRenderTime(): boolean {\r\n        return this._captureSpritesRenderTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the sprites render time capture\r\n     */\r\n    public set captureSpritesRenderTime(value: boolean) {\r\n        if (value === this._captureSpritesRenderTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureSpritesRenderTime = value;\r\n\r\n        if (!this.scene.spriteManagers) {\r\n            return;\r\n        }\r\n\r\n        if (value) {\r\n            this._onBeforeSpritesRenderingObserver = this.scene.onBeforeSpritesRenderingObservable.add(() => {\r\n                Tools.StartPerformanceCounter(\"Sprites\");\r\n                this._spritesRenderTime.beginMonitoring();\r\n            });\r\n\r\n            this._onAfterSpritesRenderingObserver = this.scene.onAfterSpritesRenderingObservable.add(() => {\r\n                Tools.EndPerformanceCounter(\"Sprites\");\r\n                this._spritesRenderTime.endMonitoring(false);\r\n            });\r\n        } else {\r\n            this.scene.onBeforeSpritesRenderingObservable.remove(this._onBeforeSpritesRenderingObserver);\r\n            this._onBeforeSpritesRenderingObserver = null;\r\n\r\n            this.scene.onAfterSpritesRenderingObservable.remove(this._onAfterSpritesRenderingObserver);\r\n            this._onAfterSpritesRenderingObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for physics time\r\n     */\r\n    public get physicsTimeCounter(): PerfCounter {\r\n        return this._physicsTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the physics time capture status\r\n     */\r\n    public get capturePhysicsTime(): boolean {\r\n        return this._capturePhysicsTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the physics time capture\r\n     */\r\n    public set capturePhysicsTime(value: boolean) {\r\n        if (value === this._capturePhysicsTime) {\r\n            return;\r\n        }\r\n\r\n        if (!this.scene.onBeforePhysicsObservable) {\r\n            return;\r\n        }\r\n\r\n        this._capturePhysicsTime = value;\r\n\r\n        if (value) {\r\n            this._onBeforePhysicsObserver = this.scene.onBeforePhysicsObservable.add(() => {\r\n                Tools.StartPerformanceCounter(\"Physics\");\r\n                this._physicsTime.beginMonitoring();\r\n            });\r\n\r\n            this._onAfterPhysicsObserver = this.scene.onAfterPhysicsObservable.add(() => {\r\n                Tools.EndPerformanceCounter(\"Physics\");\r\n                this._physicsTime.endMonitoring();\r\n            });\r\n        } else {\r\n            this.scene.onBeforePhysicsObservable.remove(this._onBeforePhysicsObserver);\r\n            this._onBeforePhysicsObserver = null;\r\n\r\n            this.scene.onAfterPhysicsObservable.remove(this._onAfterPhysicsObserver);\r\n            this._onAfterPhysicsObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for animations time\r\n     */\r\n    public get animationsTimeCounter(): PerfCounter {\r\n        return this._animationsTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the animations time capture status\r\n     */\r\n    public get captureAnimationsTime(): boolean {\r\n        return this._captureAnimationsTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the animations time capture\r\n     */\r\n    public set captureAnimationsTime(value: boolean) {\r\n        if (value === this._captureAnimationsTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureAnimationsTime = value;\r\n\r\n        if (value) {\r\n            this._onAfterAnimationsObserver = this.scene.onAfterAnimationsObservable.add(() => {\r\n                this._animationsTime.endMonitoring();\r\n            });\r\n        } else {\r\n            this.scene.onAfterAnimationsObservable.remove(this._onAfterAnimationsObserver);\r\n            this._onAfterAnimationsObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for frame time capture\r\n     */\r\n    public get frameTimeCounter(): PerfCounter {\r\n        return this._frameTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the frame time capture status\r\n     */\r\n    public get captureFrameTime(): boolean {\r\n        return this._captureFrameTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the frame time capture\r\n     */\r\n    public set captureFrameTime(value: boolean) {\r\n        this._captureFrameTime = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for inter-frames time capture\r\n     */\r\n    public get interFrameTimeCounter(): PerfCounter {\r\n        return this._interFrameTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the inter-frames time capture status\r\n     */\r\n    public get captureInterFrameTime(): boolean {\r\n        return this._captureInterFrameTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the inter-frames time capture\r\n     */\r\n    public set captureInterFrameTime(value: boolean) {\r\n        this._captureInterFrameTime = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for render time capture\r\n     */\r\n    public get renderTimeCounter(): PerfCounter {\r\n        return this._renderTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the render time capture status\r\n     */\r\n    public get captureRenderTime(): boolean {\r\n        return this._captureRenderTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the render time capture\r\n     */\r\n    public set captureRenderTime(value: boolean) {\r\n        if (value === this._captureRenderTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureRenderTime = value;\r\n\r\n        if (value) {\r\n            this._onBeforeDrawPhaseObserver = this.scene.onBeforeDrawPhaseObservable.add(() => {\r\n                this._renderTime.beginMonitoring();\r\n                Tools.StartPerformanceCounter(\"Main render\");\r\n            });\r\n\r\n            this._onAfterDrawPhaseObserver = this.scene.onAfterDrawPhaseObservable.add(() => {\r\n                this._renderTime.endMonitoring(false);\r\n                Tools.EndPerformanceCounter(\"Main render\");\r\n            });\r\n        } else {\r\n            this.scene.onBeforeDrawPhaseObservable.remove(this._onBeforeDrawPhaseObserver);\r\n            this._onBeforeDrawPhaseObserver = null;\r\n            this.scene.onAfterDrawPhaseObservable.remove(this._onAfterDrawPhaseObserver);\r\n            this._onAfterDrawPhaseObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for camera render time capture\r\n     */\r\n    public get cameraRenderTimeCounter(): PerfCounter {\r\n        return this._cameraRenderTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the camera render time capture status\r\n     */\r\n    public get captureCameraRenderTime(): boolean {\r\n        return this._captureCameraRenderTime;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the camera render time capture\r\n     */\r\n    public set captureCameraRenderTime(value: boolean) {\r\n        if (value === this._captureCameraRenderTime) {\r\n            return;\r\n        }\r\n\r\n        this._captureCameraRenderTime = value;\r\n\r\n        if (value) {\r\n            this._onBeforeCameraRenderObserver = this.scene.onBeforeCameraRenderObservable.add((camera) => {\r\n                this._cameraRenderTime.beginMonitoring();\r\n                Tools.StartPerformanceCounter(`Rendering camera ${camera.name}`);\r\n            });\r\n\r\n            this._onAfterCameraRenderObserver = this.scene.onAfterCameraRenderObservable.add((camera) => {\r\n                this._cameraRenderTime.endMonitoring(false);\r\n                Tools.EndPerformanceCounter(`Rendering camera ${camera.name}`);\r\n            });\r\n        } else {\r\n            this.scene.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\r\n            this._onBeforeCameraRenderObserver = null;\r\n            this.scene.onAfterCameraRenderObservable.remove(this._onAfterCameraRenderObserver);\r\n            this._onAfterCameraRenderObserver = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the perf counter used for draw calls\r\n     */\r\n    public get drawCallsCounter(): PerfCounter {\r\n        return this.scene.getEngine()._drawCalls;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new scene instrumentation.\r\n     * This class can be used to get instrumentation data from a Babylon engine\r\n     * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#sceneinstrumentation\r\n     * @param scene Defines the scene to instrument\r\n     */\r\n    public constructor(\r\n        /**\r\n         * Defines the scene to instrument\r\n         */\r\n        public scene: Scene\r\n    ) {\r\n        // Before render\r\n        this._onBeforeAnimationsObserver = scene.onBeforeAnimationsObservable.add(() => {\r\n            if (this._captureActiveMeshesEvaluationTime) {\r\n                this._activeMeshesEvaluationTime.fetchNewFrame();\r\n            }\r\n\r\n            if (this._captureRenderTargetsRenderTime) {\r\n                this._renderTargetsRenderTime.fetchNewFrame();\r\n            }\r\n\r\n            if (this._captureFrameTime) {\r\n                Tools.StartPerformanceCounter(\"Scene rendering\");\r\n                this._frameTime.beginMonitoring();\r\n            }\r\n\r\n            if (this._captureInterFrameTime) {\r\n                this._interFrameTime.endMonitoring();\r\n            }\r\n\r\n            if (this._captureParticlesRenderTime) {\r\n                this._particlesRenderTime.fetchNewFrame();\r\n            }\r\n\r\n            if (this._captureSpritesRenderTime) {\r\n                this._spritesRenderTime.fetchNewFrame();\r\n            }\r\n\r\n            if (this._captureAnimationsTime) {\r\n                this._animationsTime.beginMonitoring();\r\n            }\r\n\r\n            this.scene.getEngine()._drawCalls.fetchNewFrame();\r\n        });\r\n\r\n        // After render\r\n        this._onAfterRenderObserver = scene.onAfterRenderObservable.add(() => {\r\n            if (this._captureFrameTime) {\r\n                Tools.EndPerformanceCounter(\"Scene rendering\");\r\n                this._frameTime.endMonitoring();\r\n            }\r\n\r\n            if (this._captureRenderTime) {\r\n                this._renderTime.endMonitoring(false);\r\n            }\r\n\r\n            if (this._captureInterFrameTime) {\r\n                this._interFrameTime.beginMonitoring();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispose and release associated resources.\r\n     */\r\n    public dispose() {\r\n        this.scene.onAfterRenderObservable.remove(this._onAfterRenderObserver);\r\n        this._onAfterRenderObserver = null;\r\n\r\n        this.scene.onBeforeActiveMeshesEvaluationObservable.remove(this._onBeforeActiveMeshesEvaluationObserver);\r\n        this._onBeforeActiveMeshesEvaluationObserver = null;\r\n\r\n        this.scene.onAfterActiveMeshesEvaluationObservable.remove(this._onAfterActiveMeshesEvaluationObserver);\r\n        this._onAfterActiveMeshesEvaluationObserver = null;\r\n\r\n        this.scene.onBeforeRenderTargetsRenderObservable.remove(this._onBeforeRenderTargetsRenderObserver);\r\n        this._onBeforeRenderTargetsRenderObserver = null;\r\n\r\n        this.scene.onAfterRenderTargetsRenderObservable.remove(this._onAfterRenderTargetsRenderObserver);\r\n        this._onAfterRenderTargetsRenderObserver = null;\r\n\r\n        this.scene.onBeforeAnimationsObservable.remove(this._onBeforeAnimationsObserver);\r\n        this._onBeforeAnimationsObserver = null;\r\n\r\n        this.scene.onBeforeParticlesRenderingObservable.remove(this._onBeforeParticlesRenderingObserver);\r\n        this._onBeforeParticlesRenderingObserver = null;\r\n\r\n        this.scene.onAfterParticlesRenderingObservable.remove(this._onAfterParticlesRenderingObserver);\r\n        this._onAfterParticlesRenderingObserver = null;\r\n\r\n        if (this._onBeforeSpritesRenderingObserver) {\r\n            this.scene.onBeforeSpritesRenderingObservable.remove(this._onBeforeSpritesRenderingObserver);\r\n            this._onBeforeSpritesRenderingObserver = null;\r\n        }\r\n\r\n        if (this._onAfterSpritesRenderingObserver) {\r\n            this.scene.onAfterSpritesRenderingObservable.remove(this._onAfterSpritesRenderingObserver);\r\n            this._onAfterSpritesRenderingObserver = null;\r\n        }\r\n\r\n        this.scene.onBeforeDrawPhaseObservable.remove(this._onBeforeDrawPhaseObserver);\r\n        this._onBeforeDrawPhaseObserver = null;\r\n\r\n        this.scene.onAfterDrawPhaseObservable.remove(this._onAfterDrawPhaseObserver);\r\n        this._onAfterDrawPhaseObserver = null;\r\n\r\n        if (this._onBeforePhysicsObserver) {\r\n            this.scene.onBeforePhysicsObservable.remove(this._onBeforePhysicsObserver);\r\n            this._onBeforePhysicsObserver = null;\r\n        }\r\n\r\n        if (this._onAfterPhysicsObserver) {\r\n            this.scene.onAfterPhysicsObservable.remove(this._onAfterPhysicsObserver);\r\n            this._onAfterPhysicsObserver = null;\r\n        }\r\n\r\n        this.scene.onAfterAnimationsObservable.remove(this._onAfterAnimationsObserver);\r\n        this._onAfterAnimationsObserver = null;\r\n\r\n        this.scene.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\r\n        this._onBeforeCameraRenderObserver = null;\r\n\r\n        this.scene.onAfterCameraRenderObservable.remove(this._onAfterCameraRenderObserver);\r\n        this._onAfterCameraRenderObserver = null;\r\n\r\n        (<any>this.scene) = null;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}