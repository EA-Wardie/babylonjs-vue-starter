{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.function.name.js\";\n\n/**\n * Class used to store shared data between 2 NodeMaterialBuildState\n */\nvar NodeMaterialBuildStateSharedData =\n/** @class */\nfunction () {\n  /** Creates a new shared data */\n  function NodeMaterialBuildStateSharedData() {\n    /**\n     * Gets the list of emitted varyings\n     */\n    this.temps = new Array();\n    /**\n     * Gets the list of emitted varyings\n     */\n\n    this.varyings = new Array();\n    /**\n     * Gets the varying declaration string\n     */\n\n    this.varyingDeclaration = \"\";\n    /**\n     * Input blocks\n     */\n\n    this.inputBlocks = new Array();\n    /**\n     * Input blocks\n     */\n\n    this.textureBlocks = new Array();\n    /**\n     * Bindable blocks (Blocks that need to set data to the effect)\n     */\n\n    this.bindableBlocks = new Array();\n    /**\n     * Bindable blocks (Blocks that need to set data to the effect) that will always be called (by bindForSubMesh), contrary to bindableBlocks that won't be called if _mustRebind() returns false\n     */\n\n    this.forcedBindableBlocks = new Array();\n    /**\n     * List of blocks that can provide a compilation fallback\n     */\n\n    this.blocksWithFallbacks = new Array();\n    /**\n     * List of blocks that can provide a define update\n     */\n\n    this.blocksWithDefines = new Array();\n    /**\n     * List of blocks that can provide a repeatable content\n     */\n\n    this.repeatableContentBlocks = new Array();\n    /**\n     * List of blocks that can provide a dynamic list of uniforms\n     */\n\n    this.dynamicUniformBlocks = new Array();\n    /**\n     * List of blocks that can block the isReady function for the material\n     */\n\n    this.blockingBlocks = new Array();\n    /**\n     * Gets the list of animated inputs\n     */\n\n    this.animatedInputs = new Array();\n    /** List of emitted variables */\n\n    this.variableNames = {};\n    /** List of emitted defines */\n\n    this.defineNames = {};\n    /**\n     * Gets the compilation hints emitted at compilation time\n     */\n\n    this.hints = {\n      needWorldViewMatrix: false,\n      needWorldViewProjectionMatrix: false,\n      needAlphaBlending: false,\n      needAlphaTesting: false\n    };\n    /**\n     * List of compilation checks\n     */\n\n    this.checks = {\n      emitVertex: false,\n      emitFragment: false,\n      notConnectedNonOptionalInputs: new Array()\n    };\n    /**\n     * Is vertex program allowed to be empty?\n     */\n\n    this.allowEmptyVertexProgram = false; // Exclude usual attributes from free variable names\n\n    this.variableNames[\"position\"] = 0;\n    this.variableNames[\"normal\"] = 0;\n    this.variableNames[\"tangent\"] = 0;\n    this.variableNames[\"uv\"] = 0;\n    this.variableNames[\"uv2\"] = 0;\n    this.variableNames[\"uv3\"] = 0;\n    this.variableNames[\"uv4\"] = 0;\n    this.variableNames[\"uv5\"] = 0;\n    this.variableNames[\"uv6\"] = 0;\n    this.variableNames[\"color\"] = 0;\n    this.variableNames[\"matricesIndices\"] = 0;\n    this.variableNames[\"matricesWeights\"] = 0;\n    this.variableNames[\"matricesIndicesExtra\"] = 0;\n    this.variableNames[\"matricesWeightsExtra\"] = 0;\n    this.variableNames[\"diffuseBase\"] = 0;\n    this.variableNames[\"specularBase\"] = 0;\n    this.variableNames[\"worldPos\"] = 0;\n    this.variableNames[\"shadow\"] = 0;\n    this.variableNames[\"view\"] = 0; // Exclude known varyings\n\n    this.variableNames[\"vTBN\"] = 0; // Exclude defines\n\n    this.defineNames[\"MAINUV0\"] = 0;\n    this.defineNames[\"MAINUV1\"] = 0;\n    this.defineNames[\"MAINUV2\"] = 0;\n    this.defineNames[\"MAINUV3\"] = 0;\n    this.defineNames[\"MAINUV4\"] = 0;\n    this.defineNames[\"MAINUV5\"] = 0;\n    this.defineNames[\"MAINUV6\"] = 0;\n    this.defineNames[\"MAINUV7\"] = 0;\n  }\n  /**\n   * Emits console errors and exceptions if there is a failing check\n   */\n\n\n  NodeMaterialBuildStateSharedData.prototype.emitErrors = function () {\n    var errorMessage = \"\";\n\n    if (!this.checks.emitVertex && !this.allowEmptyVertexProgram) {\n      errorMessage += \"NodeMaterial does not have a vertex output. You need to at least add a block that generates a glPosition value.\\r\\n\";\n    }\n\n    if (!this.checks.emitFragment) {\n      errorMessage += \"NodeMaterial does not have a fragment output. You need to at least add a block that generates a glFragColor value.\\r\\n\";\n    }\n\n    for (var _i = 0, _a = this.checks.notConnectedNonOptionalInputs; _i < _a.length; _i++) {\n      var notConnectedInput = _a[_i];\n      errorMessage += \"input \".concat(notConnectedInput.name, \" from block \").concat(notConnectedInput.ownerBlock.name, \"[\").concat(notConnectedInput.ownerBlock.getClassName(), \"] is not connected and is not optional.\\r\\n\");\n    }\n\n    if (errorMessage) {\n      throw \"Build of NodeMaterial failed:\\r\\n\" + errorMessage;\n    }\n  };\n\n  return NodeMaterialBuildStateSharedData;\n}();\n\nexport { NodeMaterialBuildStateSharedData };","map":{"version":3,"mappings":"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","names":["Array","needWorldViewMatrix","needWorldViewProjectionMatrix","needAlphaBlending","needAlphaTesting","emitVertex","emitFragment","notConnectedNonOptionalInputs","variableNames","defineNames","NodeMaterialBuildStateSharedData","errorMessage","checks","allowEmptyVertexProgram","_i","notConnectedInput","name","concat","ownerBlock","getClassName"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Node/nodeMaterialBuildStateSharedData.ts"],"sourcesContent":["import type { NodeMaterialConnectionPoint } from \"./nodeMaterialBlockConnectionPoint\";\r\nimport type { NodeMaterialBlock } from \"./nodeMaterialBlock\";\r\nimport type { InputBlock } from \"./Blocks/Input/inputBlock\";\r\nimport type { TextureBlock } from \"./Blocks/Dual/textureBlock\";\r\nimport type { ReflectionTextureBaseBlock } from \"./Blocks/Dual/reflectionTextureBaseBlock\";\r\nimport type { RefractionBlock } from \"./Blocks/PBR/refractionBlock\";\r\nimport type { CurrentScreenBlock } from \"./Blocks/Dual/currentScreenBlock\";\r\nimport type { ParticleTextureBlock } from \"./Blocks/Particle/particleTextureBlock\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { ImageSourceBlock } from \"./Blocks/Dual/imageSourceBlock\";\r\nimport type { Immutable } from \"../../types\";\r\n\r\n/**\r\n * Class used to store shared data between 2 NodeMaterialBuildState\r\n */\r\nexport class NodeMaterialBuildStateSharedData {\r\n    /**\r\n     * Gets the list of emitted varyings\r\n     */\r\n    public temps = new Array<string>();\r\n\r\n    /**\r\n     * Gets the list of emitted varyings\r\n     */\r\n    public varyings = new Array<string>();\r\n\r\n    /**\r\n     * Gets the varying declaration string\r\n     */\r\n    public varyingDeclaration = \"\";\r\n\r\n    /**\r\n     * List of the fragment output nodes\r\n     */\r\n    public fragmentOutputNodes: Immutable<Array<NodeMaterialBlock>>;\r\n\r\n    /**\r\n     * Input blocks\r\n     */\r\n    public inputBlocks = new Array<InputBlock>();\r\n\r\n    /**\r\n     * Input blocks\r\n     */\r\n    public textureBlocks = new Array<TextureBlock | ReflectionTextureBaseBlock | RefractionBlock | CurrentScreenBlock | ParticleTextureBlock | ImageSourceBlock>();\r\n\r\n    /**\r\n     * Bindable blocks (Blocks that need to set data to the effect)\r\n     */\r\n    public bindableBlocks = new Array<NodeMaterialBlock>();\r\n\r\n    /**\r\n     * Bindable blocks (Blocks that need to set data to the effect) that will always be called (by bindForSubMesh), contrary to bindableBlocks that won't be called if _mustRebind() returns false\r\n     */\r\n    public forcedBindableBlocks = new Array<NodeMaterialBlock>();\r\n\r\n    /**\r\n     * List of blocks that can provide a compilation fallback\r\n     */\r\n    public blocksWithFallbacks = new Array<NodeMaterialBlock>();\r\n\r\n    /**\r\n     * List of blocks that can provide a define update\r\n     */\r\n    public blocksWithDefines = new Array<NodeMaterialBlock>();\r\n\r\n    /**\r\n     * List of blocks that can provide a repeatable content\r\n     */\r\n    public repeatableContentBlocks = new Array<NodeMaterialBlock>();\r\n\r\n    /**\r\n     * List of blocks that can provide a dynamic list of uniforms\r\n     */\r\n    public dynamicUniformBlocks = new Array<NodeMaterialBlock>();\r\n\r\n    /**\r\n     * List of blocks that can block the isReady function for the material\r\n     */\r\n    public blockingBlocks = new Array<NodeMaterialBlock>();\r\n\r\n    /**\r\n     * Gets the list of animated inputs\r\n     */\r\n    public animatedInputs = new Array<InputBlock>();\r\n\r\n    /**\r\n     * Build Id used to avoid multiple recompilations\r\n     */\r\n    public buildId: number;\r\n\r\n    /** List of emitted variables */\r\n    public variableNames: { [key: string]: number } = {};\r\n\r\n    /** List of emitted defines */\r\n    public defineNames: { [key: string]: number } = {};\r\n\r\n    /** Should emit comments? */\r\n    public emitComments: boolean;\r\n\r\n    /** Emit build activity */\r\n    public verbose: boolean;\r\n\r\n    /** Gets or sets the hosting scene */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Gets the compilation hints emitted at compilation time\r\n     */\r\n    public hints = {\r\n        needWorldViewMatrix: false,\r\n        needWorldViewProjectionMatrix: false,\r\n        needAlphaBlending: false,\r\n        needAlphaTesting: false,\r\n    };\r\n\r\n    /**\r\n     * List of compilation checks\r\n     */\r\n    public checks = {\r\n        emitVertex: false,\r\n        emitFragment: false,\r\n        notConnectedNonOptionalInputs: new Array<NodeMaterialConnectionPoint>(),\r\n    };\r\n\r\n    /**\r\n     * Is vertex program allowed to be empty?\r\n     */\r\n    public allowEmptyVertexProgram: boolean = false;\r\n\r\n    /** Creates a new shared data */\r\n    public constructor() {\r\n        // Exclude usual attributes from free variable names\r\n        this.variableNames[\"position\"] = 0;\r\n        this.variableNames[\"normal\"] = 0;\r\n        this.variableNames[\"tangent\"] = 0;\r\n        this.variableNames[\"uv\"] = 0;\r\n        this.variableNames[\"uv2\"] = 0;\r\n        this.variableNames[\"uv3\"] = 0;\r\n        this.variableNames[\"uv4\"] = 0;\r\n        this.variableNames[\"uv5\"] = 0;\r\n        this.variableNames[\"uv6\"] = 0;\r\n        this.variableNames[\"color\"] = 0;\r\n        this.variableNames[\"matricesIndices\"] = 0;\r\n        this.variableNames[\"matricesWeights\"] = 0;\r\n        this.variableNames[\"matricesIndicesExtra\"] = 0;\r\n        this.variableNames[\"matricesWeightsExtra\"] = 0;\r\n        this.variableNames[\"diffuseBase\"] = 0;\r\n        this.variableNames[\"specularBase\"] = 0;\r\n        this.variableNames[\"worldPos\"] = 0;\r\n        this.variableNames[\"shadow\"] = 0;\r\n        this.variableNames[\"view\"] = 0;\r\n\r\n        // Exclude known varyings\r\n        this.variableNames[\"vTBN\"] = 0;\r\n\r\n        // Exclude defines\r\n        this.defineNames[\"MAINUV0\"] = 0;\r\n        this.defineNames[\"MAINUV1\"] = 0;\r\n        this.defineNames[\"MAINUV2\"] = 0;\r\n        this.defineNames[\"MAINUV3\"] = 0;\r\n        this.defineNames[\"MAINUV4\"] = 0;\r\n        this.defineNames[\"MAINUV5\"] = 0;\r\n        this.defineNames[\"MAINUV6\"] = 0;\r\n        this.defineNames[\"MAINUV7\"] = 0;\r\n    }\r\n\r\n    /**\r\n     * Emits console errors and exceptions if there is a failing check\r\n     */\r\n    public emitErrors() {\r\n        let errorMessage = \"\";\r\n\r\n        if (!this.checks.emitVertex && !this.allowEmptyVertexProgram) {\r\n            errorMessage += \"NodeMaterial does not have a vertex output. You need to at least add a block that generates a glPosition value.\\r\\n\";\r\n        }\r\n        if (!this.checks.emitFragment) {\r\n            errorMessage += \"NodeMaterial does not have a fragment output. You need to at least add a block that generates a glFragColor value.\\r\\n\";\r\n        }\r\n        for (const notConnectedInput of this.checks.notConnectedNonOptionalInputs) {\r\n            errorMessage += `input ${notConnectedInput.name} from block ${\r\n                notConnectedInput.ownerBlock.name\r\n            }[${notConnectedInput.ownerBlock.getClassName()}] is not connected and is not optional.\\r\\n`;\r\n        }\r\n\r\n        if (errorMessage) {\r\n            throw \"Build of NodeMaterial failed:\\r\\n\" + errorMessage;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}