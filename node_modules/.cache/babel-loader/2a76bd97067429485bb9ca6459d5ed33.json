{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial.js\";\nimport { GLTFLoader } from \"../glTFLoader.js\";\nvar NAME = \"KHR_materials_iridescence\";\n/**\n * [Experimental Spec](https://github.com/KhronosGroup/glTF/pull/2027)\n */\n\nvar KHR_materials_iridescence =\n/** @class */\nfunction () {\n  /**\n   * @param loader\n   * @hidden\n   */\n  function KHR_materials_iridescence(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    /**\n     * Defines a number that determines the order the extensions are applied.\n     */\n\n    this.order = 195;\n    this._loader = loader;\n    this.enabled = this._loader.isExtensionUsed(NAME);\n  }\n  /** @hidden */\n\n\n  KHR_materials_iridescence.prototype.dispose = function () {\n    this._loader = null;\n  };\n  /**\n   * @param context\n   * @param material\n   * @param babylonMaterial\n   * @hidden\n   */\n\n\n  KHR_materials_iridescence.prototype.loadMaterialPropertiesAsync = function (context, material, babylonMaterial) {\n    var _this = this;\n\n    return GLTFLoader.LoadExtensionAsync(context, material, this.name, function (extensionContext, extension) {\n      var promises = new Array();\n      promises.push(_this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n      promises.push(_this._loadIridescencePropertiesAsync(extensionContext, extension, babylonMaterial));\n      return Promise.all(promises).then(function () {});\n    });\n  };\n\n  KHR_materials_iridescence.prototype._loadIridescencePropertiesAsync = function (context, properties, babylonMaterial) {\n    var _a, _b, _c, _d, _e;\n\n    if (!(babylonMaterial instanceof PBRMaterial)) {\n      throw new Error(\"\".concat(context, \": Material type not supported\"));\n    }\n\n    var promises = new Array();\n    babylonMaterial.iridescence.isEnabled = true;\n    babylonMaterial.iridescence.intensity = (_a = properties.iridescenceFactor) !== null && _a !== void 0 ? _a : 0;\n    babylonMaterial.iridescence.indexOfRefraction = (_c = (_b = properties.iridescenceIor) !== null && _b !== void 0 ? _b : properties.iridescenceIOR) !== null && _c !== void 0 ? _c : 1.3;\n    babylonMaterial.iridescence.minimumThickness = (_d = properties.iridescenceThicknessMinimum) !== null && _d !== void 0 ? _d : 100;\n    babylonMaterial.iridescence.maximumThickness = (_e = properties.iridescenceThicknessMaximum) !== null && _e !== void 0 ? _e : 400;\n\n    if (properties.iridescenceTexture) {\n      promises.push(this._loader.loadTextureInfoAsync(\"\".concat(context, \"/iridescenceTexture\"), properties.iridescenceTexture, function (texture) {\n        texture.name = \"\".concat(babylonMaterial.name, \" (Iridescence Intensity)\");\n        babylonMaterial.iridescence.texture = texture;\n      }));\n    }\n\n    if (properties.iridescenceThicknessTexture) {\n      promises.push(this._loader.loadTextureInfoAsync(\"\".concat(context, \"/iridescenceThicknessTexture\"), properties.iridescenceThicknessTexture, function (texture) {\n        texture.name = \"\".concat(babylonMaterial.name, \" (Iridescence Thickness)\");\n        babylonMaterial.iridescence.thicknessTexture = texture;\n      }));\n    }\n\n    return Promise.all(promises).then(function () {});\n  };\n\n  return KHR_materials_iridescence;\n}();\n\nexport { KHR_materials_iridescence };\nGLTFLoader.RegisterExtension(NAME, function (loader) {\n  return new KHR_materials_iridescence(loader);\n});","map":{"version":3,"mappings":"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","names":["PBRMaterial","GLTFLoader","NAME","loader","_loader","enabled","isExtensionUsed","KHR_materials_iridescence","context","material","babylonMaterial","LoadExtensionAsync","name","extensionContext","extension","promises","Array","push","_this","loadMaterialPropertiesAsync","_loadIridescencePropertiesAsync","Promise","all","then","properties","Error","iridescence","isEnabled","intensity","iridescenceFactor","_a","indexOfRefraction","iridescenceIor","_b","iridescenceIOR","_c","minimumThickness","iridescenceThicknessMinimum","_d","maximumThickness","iridescenceThicknessMaximum","_e","iridescenceTexture","loadTextureInfoAsync","texture","iridescenceThicknessTexture","thicknessTexture","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../../lts/loaders/generated/glTF/2.0/Extensions/KHR_materials_iridescence.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsIridescence } from \"babylonjs-gltf2interface\";\r\n\r\nconst NAME = \"KHR_materials_iridescence\";\r\n\r\n/**\r\n * [Experimental Spec](https://github.com/KhronosGroup/glTF/pull/2027)\r\n */\r\nexport class KHR_materials_iridescence implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 195;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @param loader\r\n     * @hidden\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @hidden */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @param context\r\n     * @param material\r\n     * @param babylonMaterial\r\n     * @hidden\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsIridescence>(context, material, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadIridescencePropertiesAsync(extensionContext, extension, babylonMaterial));\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    private _loadIridescencePropertiesAsync(context: string, properties: IKHRMaterialsIridescence, babylonMaterial: Material): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        babylonMaterial.iridescence.isEnabled = true;\r\n\r\n        babylonMaterial.iridescence.intensity = properties.iridescenceFactor ?? 0;\r\n        babylonMaterial.iridescence.indexOfRefraction = properties.iridescenceIor ?? (properties as any).iridescenceIOR ?? 1.3;\r\n        babylonMaterial.iridescence.minimumThickness = properties.iridescenceThicknessMinimum ?? 100;\r\n        babylonMaterial.iridescence.maximumThickness = properties.iridescenceThicknessMaximum ?? 400;\r\n\r\n        if (properties.iridescenceTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/iridescenceTexture`, properties.iridescenceTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Iridescence Intensity)`;\r\n                    babylonMaterial.iridescence.texture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        if (properties.iridescenceThicknessTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/iridescenceThicknessTexture`, properties.iridescenceThicknessTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Iridescence Thickness)`;\r\n                    babylonMaterial.iridescence.thicknessTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_materials_iridescence(loader));\r\n"]},"metadata":{},"sourceType":"module"}