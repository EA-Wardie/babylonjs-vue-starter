{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\n\n/**\n * @hidden\n **/\nvar DepthCullingState =\n/** @class */\nfunction () {\n  /**\n   * Initializes the state.\n   * @param reset\n   */\n  function DepthCullingState(reset) {\n    if (reset === void 0) {\n      reset = true;\n    }\n\n    this._isDepthTestDirty = false;\n    this._isDepthMaskDirty = false;\n    this._isDepthFuncDirty = false;\n    this._isCullFaceDirty = false;\n    this._isCullDirty = false;\n    this._isZOffsetDirty = false;\n    this._isFrontFaceDirty = false;\n\n    if (reset) {\n      this.reset();\n    }\n  }\n\n  Object.defineProperty(DepthCullingState.prototype, \"isDirty\", {\n    get: function get() {\n      return this._isDepthFuncDirty || this._isDepthTestDirty || this._isDepthMaskDirty || this._isCullFaceDirty || this._isCullDirty || this._isZOffsetDirty || this._isFrontFaceDirty;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DepthCullingState.prototype, \"zOffset\", {\n    get: function get() {\n      return this._zOffset;\n    },\n    set: function set(value) {\n      if (this._zOffset === value) {\n        return;\n      }\n\n      this._zOffset = value;\n      this._isZOffsetDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DepthCullingState.prototype, \"zOffsetUnits\", {\n    get: function get() {\n      return this._zOffsetUnits;\n    },\n    set: function set(value) {\n      if (this._zOffsetUnits === value) {\n        return;\n      }\n\n      this._zOffsetUnits = value;\n      this._isZOffsetDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DepthCullingState.prototype, \"cullFace\", {\n    get: function get() {\n      return this._cullFace;\n    },\n    set: function set(value) {\n      if (this._cullFace === value) {\n        return;\n      }\n\n      this._cullFace = value;\n      this._isCullFaceDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DepthCullingState.prototype, \"cull\", {\n    get: function get() {\n      return this._cull;\n    },\n    set: function set(value) {\n      if (this._cull === value) {\n        return;\n      }\n\n      this._cull = value;\n      this._isCullDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DepthCullingState.prototype, \"depthFunc\", {\n    get: function get() {\n      return this._depthFunc;\n    },\n    set: function set(value) {\n      if (this._depthFunc === value) {\n        return;\n      }\n\n      this._depthFunc = value;\n      this._isDepthFuncDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DepthCullingState.prototype, \"depthMask\", {\n    get: function get() {\n      return this._depthMask;\n    },\n    set: function set(value) {\n      if (this._depthMask === value) {\n        return;\n      }\n\n      this._depthMask = value;\n      this._isDepthMaskDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DepthCullingState.prototype, \"depthTest\", {\n    get: function get() {\n      return this._depthTest;\n    },\n    set: function set(value) {\n      if (this._depthTest === value) {\n        return;\n      }\n\n      this._depthTest = value;\n      this._isDepthTestDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DepthCullingState.prototype, \"frontFace\", {\n    get: function get() {\n      return this._frontFace;\n    },\n    set: function set(value) {\n      if (this._frontFace === value) {\n        return;\n      }\n\n      this._frontFace = value;\n      this._isFrontFaceDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  DepthCullingState.prototype.reset = function () {\n    this._depthMask = true;\n    this._depthTest = true;\n    this._depthFunc = null;\n    this._cullFace = null;\n    this._cull = null;\n    this._zOffset = 0;\n    this._zOffsetUnits = 0;\n    this._frontFace = null;\n    this._isDepthTestDirty = true;\n    this._isDepthMaskDirty = true;\n    this._isDepthFuncDirty = false;\n    this._isCullFaceDirty = false;\n    this._isCullDirty = false;\n    this._isZOffsetDirty = true;\n    this._isFrontFaceDirty = false;\n  };\n\n  DepthCullingState.prototype.apply = function (gl) {\n    if (!this.isDirty) {\n      return;\n    } // Cull\n\n\n    if (this._isCullDirty) {\n      if (this.cull) {\n        gl.enable(gl.CULL_FACE);\n      } else {\n        gl.disable(gl.CULL_FACE);\n      }\n\n      this._isCullDirty = false;\n    } // Cull face\n\n\n    if (this._isCullFaceDirty) {\n      gl.cullFace(this.cullFace);\n      this._isCullFaceDirty = false;\n    } // Depth mask\n\n\n    if (this._isDepthMaskDirty) {\n      gl.depthMask(this.depthMask);\n      this._isDepthMaskDirty = false;\n    } // Depth test\n\n\n    if (this._isDepthTestDirty) {\n      if (this.depthTest) {\n        gl.enable(gl.DEPTH_TEST);\n      } else {\n        gl.disable(gl.DEPTH_TEST);\n      }\n\n      this._isDepthTestDirty = false;\n    } // Depth func\n\n\n    if (this._isDepthFuncDirty) {\n      gl.depthFunc(this.depthFunc);\n      this._isDepthFuncDirty = false;\n    } // zOffset\n\n\n    if (this._isZOffsetDirty) {\n      if (this.zOffset || this.zOffsetUnits) {\n        gl.enable(gl.POLYGON_OFFSET_FILL);\n        gl.polygonOffset(this.zOffset, this.zOffsetUnits);\n      } else {\n        gl.disable(gl.POLYGON_OFFSET_FILL);\n      }\n\n      this._isZOffsetDirty = false;\n    } // Front face\n\n\n    if (this._isFrontFaceDirty) {\n      gl.frontFace(this.frontFace);\n      this._isFrontFaceDirty = false;\n    }\n  };\n\n  return DepthCullingState;\n}();\n\nexport { DepthCullingState };","map":{"version":3,"mappings":"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","names":["reset","Object","DepthCullingState","_isDepthFuncDirty","_isDepthTestDirty","_isDepthMaskDirty","_isCullFaceDirty","_isCullDirty","_isZOffsetDirty","_isFrontFaceDirty","_zOffset","value","_zOffsetUnits","_cullFace","_cull","_depthFunc","_depthMask","_depthTest","_frontFace","gl","isDirty","cull","enable","CULL_FACE","disable","cullFace","depthMask","depthTest","DEPTH_TEST","depthFunc","zOffset","zOffsetUnits","POLYGON_OFFSET_FILL","polygonOffset","frontFace"],"sourceRoot":"","sources":["../../../../../lts/core/generated/States/depthCullingState.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\n\r\n/**\r\n * @hidden\r\n **/\r\nexport class DepthCullingState {\r\n    protected _isDepthTestDirty = false;\r\n    protected _isDepthMaskDirty = false;\r\n    protected _isDepthFuncDirty = false;\r\n    protected _isCullFaceDirty = false;\r\n    protected _isCullDirty = false;\r\n    protected _isZOffsetDirty = false;\r\n    protected _isFrontFaceDirty = false;\r\n\r\n    protected _depthTest: boolean;\r\n    protected _depthMask: boolean;\r\n    protected _depthFunc: Nullable<number>;\r\n    protected _cull: Nullable<boolean>;\r\n    protected _cullFace: Nullable<number>;\r\n    protected _zOffset: number;\r\n    protected _zOffsetUnits: number;\r\n    protected _frontFace: Nullable<number>;\r\n\r\n    /**\r\n     * Initializes the state.\r\n     * @param reset\r\n     */\r\n    public constructor(reset = true) {\r\n        if (reset) {\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    public get isDirty(): boolean {\r\n        return (\r\n            this._isDepthFuncDirty ||\r\n            this._isDepthTestDirty ||\r\n            this._isDepthMaskDirty ||\r\n            this._isCullFaceDirty ||\r\n            this._isCullDirty ||\r\n            this._isZOffsetDirty ||\r\n            this._isFrontFaceDirty\r\n        );\r\n    }\r\n\r\n    public get zOffset(): number {\r\n        return this._zOffset;\r\n    }\r\n\r\n    public set zOffset(value: number) {\r\n        if (this._zOffset === value) {\r\n            return;\r\n        }\r\n\r\n        this._zOffset = value;\r\n        this._isZOffsetDirty = true;\r\n    }\r\n\r\n    public get zOffsetUnits(): number {\r\n        return this._zOffsetUnits;\r\n    }\r\n\r\n    public set zOffsetUnits(value: number) {\r\n        if (this._zOffsetUnits === value) {\r\n            return;\r\n        }\r\n\r\n        this._zOffsetUnits = value;\r\n        this._isZOffsetDirty = true;\r\n    }\r\n\r\n    public get cullFace(): Nullable<number> {\r\n        return this._cullFace;\r\n    }\r\n\r\n    public set cullFace(value: Nullable<number>) {\r\n        if (this._cullFace === value) {\r\n            return;\r\n        }\r\n\r\n        this._cullFace = value;\r\n        this._isCullFaceDirty = true;\r\n    }\r\n\r\n    public get cull(): Nullable<boolean> {\r\n        return this._cull;\r\n    }\r\n\r\n    public set cull(value: Nullable<boolean>) {\r\n        if (this._cull === value) {\r\n            return;\r\n        }\r\n\r\n        this._cull = value;\r\n        this._isCullDirty = true;\r\n    }\r\n\r\n    public get depthFunc(): Nullable<number> {\r\n        return this._depthFunc;\r\n    }\r\n\r\n    public set depthFunc(value: Nullable<number>) {\r\n        if (this._depthFunc === value) {\r\n            return;\r\n        }\r\n\r\n        this._depthFunc = value;\r\n        this._isDepthFuncDirty = true;\r\n    }\r\n\r\n    public get depthMask(): boolean {\r\n        return this._depthMask;\r\n    }\r\n\r\n    public set depthMask(value: boolean) {\r\n        if (this._depthMask === value) {\r\n            return;\r\n        }\r\n\r\n        this._depthMask = value;\r\n        this._isDepthMaskDirty = true;\r\n    }\r\n\r\n    public get depthTest(): boolean {\r\n        return this._depthTest;\r\n    }\r\n\r\n    public set depthTest(value: boolean) {\r\n        if (this._depthTest === value) {\r\n            return;\r\n        }\r\n\r\n        this._depthTest = value;\r\n        this._isDepthTestDirty = true;\r\n    }\r\n\r\n    public get frontFace(): Nullable<number> {\r\n        return this._frontFace;\r\n    }\r\n\r\n    public set frontFace(value: Nullable<number>) {\r\n        if (this._frontFace === value) {\r\n            return;\r\n        }\r\n\r\n        this._frontFace = value;\r\n        this._isFrontFaceDirty = true;\r\n    }\r\n\r\n    public reset() {\r\n        this._depthMask = true;\r\n        this._depthTest = true;\r\n        this._depthFunc = null;\r\n        this._cullFace = null;\r\n        this._cull = null;\r\n        this._zOffset = 0;\r\n        this._zOffsetUnits = 0;\r\n        this._frontFace = null;\r\n\r\n        this._isDepthTestDirty = true;\r\n        this._isDepthMaskDirty = true;\r\n        this._isDepthFuncDirty = false;\r\n        this._isCullFaceDirty = false;\r\n        this._isCullDirty = false;\r\n        this._isZOffsetDirty = true;\r\n        this._isFrontFaceDirty = false;\r\n    }\r\n\r\n    public apply(gl: WebGLRenderingContext) {\r\n        if (!this.isDirty) {\r\n            return;\r\n        }\r\n\r\n        // Cull\r\n        if (this._isCullDirty) {\r\n            if (this.cull) {\r\n                gl.enable(gl.CULL_FACE);\r\n            } else {\r\n                gl.disable(gl.CULL_FACE);\r\n            }\r\n\r\n            this._isCullDirty = false;\r\n        }\r\n\r\n        // Cull face\r\n        if (this._isCullFaceDirty) {\r\n            gl.cullFace(<number>this.cullFace);\r\n            this._isCullFaceDirty = false;\r\n        }\r\n\r\n        // Depth mask\r\n        if (this._isDepthMaskDirty) {\r\n            gl.depthMask(this.depthMask);\r\n            this._isDepthMaskDirty = false;\r\n        }\r\n\r\n        // Depth test\r\n        if (this._isDepthTestDirty) {\r\n            if (this.depthTest) {\r\n                gl.enable(gl.DEPTH_TEST);\r\n            } else {\r\n                gl.disable(gl.DEPTH_TEST);\r\n            }\r\n            this._isDepthTestDirty = false;\r\n        }\r\n\r\n        // Depth func\r\n        if (this._isDepthFuncDirty) {\r\n            gl.depthFunc(<number>this.depthFunc);\r\n            this._isDepthFuncDirty = false;\r\n        }\r\n\r\n        // zOffset\r\n        if (this._isZOffsetDirty) {\r\n            if (this.zOffset || this.zOffsetUnits) {\r\n                gl.enable(gl.POLYGON_OFFSET_FILL);\r\n                gl.polygonOffset(this.zOffset, this.zOffsetUnits);\r\n            } else {\r\n                gl.disable(gl.POLYGON_OFFSET_FILL);\r\n            }\r\n\r\n            this._isZOffsetDirty = false;\r\n        }\r\n\r\n        // Front face\r\n        if (this._isFrontFaceDirty) {\r\n            gl.frontFace(<number>this.frontFace);\r\n            this._isFrontFaceDirty = false;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}