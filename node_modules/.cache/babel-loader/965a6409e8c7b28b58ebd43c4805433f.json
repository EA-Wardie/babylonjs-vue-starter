{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { MaterialHelper } from \"../../../materialHelper.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport \"../../../../Shaders/ShadersInclude/bonesDeclaration.js\";\nimport \"../../../../Shaders/ShadersInclude/bonesVertex.js\";\n/**\n * Block used to add support for vertex skinning (bones)\n */\n\nvar BonesBlock =\n/** @class */\nfunction (_super) {\n  __extends(BonesBlock, _super);\n  /**\n   * Creates a new BonesBlock\n   * @param name defines the block name\n   */\n\n\n  function BonesBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Vertex) || this;\n\n    _this.registerInput(\"matricesIndices\", NodeMaterialBlockConnectionPointTypes.Vector4);\n\n    _this.registerInput(\"matricesWeights\", NodeMaterialBlockConnectionPointTypes.Vector4);\n\n    _this.registerInput(\"matricesIndicesExtra\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\n\n    _this.registerInput(\"matricesWeightsExtra\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\n\n    _this.registerInput(\"world\", NodeMaterialBlockConnectionPointTypes.Matrix);\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Matrix);\n\n    return _this;\n  }\n  /**\n   * Initialize the block and prepare the context for build\n   * @param state defines the state that will be used for the build\n   */\n\n\n  BonesBlock.prototype.initialize = function (state) {\n    state._excludeVariableName(\"boneSampler\");\n\n    state._excludeVariableName(\"boneTextureWidth\");\n\n    state._excludeVariableName(\"mBones\");\n\n    state._excludeVariableName(\"BonesPerMesh\");\n  };\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  BonesBlock.prototype.getClassName = function () {\n    return \"BonesBlock\";\n  };\n\n  Object.defineProperty(BonesBlock.prototype, \"matricesIndices\", {\n    /**\n     * Gets the matrix indices input component\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BonesBlock.prototype, \"matricesWeights\", {\n    /**\n     * Gets the matrix weights input component\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BonesBlock.prototype, \"matricesIndicesExtra\", {\n    /**\n     * Gets the extra matrix indices input component\n     */\n    get: function get() {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BonesBlock.prototype, \"matricesWeightsExtra\", {\n    /**\n     * Gets the extra matrix weights input component\n     */\n    get: function get() {\n      return this._inputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BonesBlock.prototype, \"world\", {\n    /**\n     * Gets the world input component\n     */\n    get: function get() {\n      return this._inputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BonesBlock.prototype, \"output\", {\n    /**\n     * Gets the output component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  BonesBlock.prototype.autoConfigure = function (material) {\n    if (!this.matricesIndices.isConnected) {\n      var matricesIndicesInput = material.getInputBlockByPredicate(function (b) {\n        return b.isAttribute && b.name === \"matricesIndices\";\n      });\n\n      if (!matricesIndicesInput) {\n        matricesIndicesInput = new InputBlock(\"matricesIndices\");\n        matricesIndicesInput.setAsAttribute(\"matricesIndices\");\n      }\n\n      matricesIndicesInput.output.connectTo(this.matricesIndices);\n    }\n\n    if (!this.matricesWeights.isConnected) {\n      var matricesWeightsInput = material.getInputBlockByPredicate(function (b) {\n        return b.isAttribute && b.name === \"matricesWeights\";\n      });\n\n      if (!matricesWeightsInput) {\n        matricesWeightsInput = new InputBlock(\"matricesWeights\");\n        matricesWeightsInput.setAsAttribute(\"matricesWeights\");\n      }\n\n      matricesWeightsInput.output.connectTo(this.matricesWeights);\n    }\n\n    if (!this.world.isConnected) {\n      var worldInput = material.getInputBlockByPredicate(function (b) {\n        return b.systemValue === NodeMaterialSystemValues.World;\n      });\n\n      if (!worldInput) {\n        worldInput = new InputBlock(\"world\");\n        worldInput.setAsSystemValue(NodeMaterialSystemValues.World);\n      }\n\n      worldInput.output.connectTo(this.world);\n    }\n  };\n\n  BonesBlock.prototype.provideFallbacks = function (mesh, fallbacks) {\n    if (mesh && mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\n      fallbacks.addCPUSkinningFallback(0, mesh);\n    }\n  };\n\n  BonesBlock.prototype.bind = function (effect, nodeMaterial, mesh) {\n    MaterialHelper.BindBonesParameters(mesh, effect);\n  };\n\n  BonesBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    if (!defines._areAttributesDirty) {\n      return;\n    }\n\n    MaterialHelper.PrepareDefinesForBones(mesh, defines);\n  };\n\n  BonesBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state); // Register for compilation fallbacks\n\n\n    state.sharedData.blocksWithFallbacks.push(this); // Register for binding\n\n    state.sharedData.forcedBindableBlocks.push(this); // Register for defines\n\n    state.sharedData.blocksWithDefines.push(this); // Register internal uniforms and samplers\n\n    state.uniforms.push(\"boneTextureWidth\");\n    state.uniforms.push(\"mBones\");\n    state.samplers.push(\"boneSampler\"); // Emit code\n\n    var comments = \"//\".concat(this.name);\n\n    state._emitFunctionFromInclude(\"bonesDeclaration\", comments, {\n      removeAttributes: true,\n      removeUniforms: false,\n      removeVaryings: true,\n      removeIfDef: false\n    });\n\n    var influenceVariablename = state._getFreeVariableName(\"influence\");\n\n    state.compilationString += state._emitCodeFromInclude(\"bonesVertex\", comments, {\n      replaceStrings: [{\n        search: /finalWorld=finalWorld\\*influence;/,\n        replace: \"\"\n      }, {\n        search: /influence/gm,\n        replace: influenceVariablename\n      }]\n    });\n    var output = this._outputs[0];\n    var worldInput = this.world;\n    state.compilationString += \"#if NUM_BONE_INFLUENCERS>0\\r\\n\";\n    state.compilationString += this._declareOutput(output, state) + \" = \".concat(worldInput.associatedVariableName, \" * \").concat(influenceVariablename, \";\\r\\n\");\n    state.compilationString += \"#else\\r\\n\";\n    state.compilationString += this._declareOutput(output, state) + \" = \".concat(worldInput.associatedVariableName, \";\\r\\n\");\n    state.compilationString += \"#endif\\r\\n\";\n    return this;\n  };\n\n  return BonesBlock;\n}(NodeMaterialBlock);\n\nexport { BonesBlock };\nRegisterClass(\"BABYLON.BonesBlock\", BonesBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialSystemValues","NodeMaterialBlockTargets","MaterialHelper","InputBlock","RegisterClass","__extends","name","_super","Vertex","_this","registerInput","Vector4","Matrix","registerOutput","BonesBlock","state","_excludeVariableName","Object","_inputs","_outputs","material","matricesIndices","isConnected","matricesIndicesInput","getInputBlockByPredicate","b","isAttribute","setAsAttribute","output","connectTo","matricesWeights","matricesWeightsInput","world","worldInput","systemValue","World","setAsSystemValue","mesh","fallbacks","useBones","computeBonesUsingShaders","skeleton","addCPUSkinningFallback","effect","nodeMaterial","BindBonesParameters","defines","_areAttributesDirty","PrepareDefinesForBones","_buildBlock","call","sharedData","blocksWithFallbacks","push","forcedBindableBlocks","blocksWithDefines","uniforms","samplers","comments","_emitFunctionFromInclude","removeAttributes","removeUniforms","removeVaryings","removeIfDef","influenceVariablename","_getFreeVariableName","compilationString","_emitCodeFromInclude","replaceStrings","search","replace","_declareOutput","associatedVariableName","concat"],"sourceRoot":"","sources":["../../../../../../../../lts/core/generated/Materials/Node/Blocks/Vertex/bonesBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../../../../Meshes/mesh\";\r\nimport type { Effect } from \"../../../effect\";\r\nimport { MaterialHelper } from \"../../../materialHelper\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport type { NodeMaterial, NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport { InputBlock } from \"../Input/inputBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\n\r\nimport \"../../../../Shaders/ShadersInclude/bonesDeclaration\";\r\nimport \"../../../../Shaders/ShadersInclude/bonesVertex\";\r\nimport type { EffectFallbacks } from \"../../../effectFallbacks\";\r\n\r\n/**\r\n * Block used to add support for vertex skinning (bones)\r\n */\r\nexport class BonesBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Creates a new BonesBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Vertex);\r\n\r\n        this.registerInput(\"matricesIndices\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerInput(\"matricesWeights\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerInput(\"matricesIndicesExtra\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\r\n        this.registerInput(\"matricesWeightsExtra\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\r\n        this.registerInput(\"world\", NodeMaterialBlockConnectionPointTypes.Matrix);\r\n\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Matrix);\r\n    }\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"boneSampler\");\r\n        state._excludeVariableName(\"boneTextureWidth\");\r\n        state._excludeVariableName(\"mBones\");\r\n        state._excludeVariableName(\"BonesPerMesh\");\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"BonesBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the matrix indices input component\r\n     */\r\n    public get matricesIndices(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the matrix weights input component\r\n     */\r\n    public get matricesWeights(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the extra matrix indices input component\r\n     */\r\n    public get matricesIndicesExtra(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the extra matrix weights input component\r\n     */\r\n    public get matricesWeightsExtra(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the world input component\r\n     */\r\n    public get world(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public autoConfigure(material: NodeMaterial) {\r\n        if (!this.matricesIndices.isConnected) {\r\n            let matricesIndicesInput = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"matricesIndices\");\r\n\r\n            if (!matricesIndicesInput) {\r\n                matricesIndicesInput = new InputBlock(\"matricesIndices\");\r\n                matricesIndicesInput.setAsAttribute(\"matricesIndices\");\r\n            }\r\n            matricesIndicesInput.output.connectTo(this.matricesIndices);\r\n        }\r\n        if (!this.matricesWeights.isConnected) {\r\n            let matricesWeightsInput = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"matricesWeights\");\r\n\r\n            if (!matricesWeightsInput) {\r\n                matricesWeightsInput = new InputBlock(\"matricesWeights\");\r\n                matricesWeightsInput.setAsAttribute(\"matricesWeights\");\r\n            }\r\n            matricesWeightsInput.output.connectTo(this.matricesWeights);\r\n        }\r\n        if (!this.world.isConnected) {\r\n            let worldInput = material.getInputBlockByPredicate((b) => b.systemValue === NodeMaterialSystemValues.World);\r\n\r\n            if (!worldInput) {\r\n                worldInput = new InputBlock(\"world\");\r\n                worldInput.setAsSystemValue(NodeMaterialSystemValues.World);\r\n            }\r\n            worldInput.output.connectTo(this.world);\r\n        }\r\n    }\r\n\r\n    public provideFallbacks(mesh: AbstractMesh, fallbacks: EffectFallbacks) {\r\n        if (mesh && mesh.useBones && mesh.computeBonesUsingShaders && mesh.skeleton) {\r\n            fallbacks.addCPUSkinningFallback(0, mesh);\r\n        }\r\n    }\r\n\r\n    public bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh) {\r\n        MaterialHelper.BindBonesParameters(mesh, effect);\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        if (!defines._areAttributesDirty) {\r\n            return;\r\n        }\r\n        MaterialHelper.PrepareDefinesForBones(mesh, defines);\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        // Register for compilation fallbacks\r\n        state.sharedData.blocksWithFallbacks.push(this);\r\n\r\n        // Register for binding\r\n        state.sharedData.forcedBindableBlocks.push(this);\r\n\r\n        // Register for defines\r\n        state.sharedData.blocksWithDefines.push(this);\r\n\r\n        // Register internal uniforms and samplers\r\n        state.uniforms.push(\"boneTextureWidth\");\r\n        state.uniforms.push(\"mBones\");\r\n\r\n        state.samplers.push(\"boneSampler\");\r\n\r\n        // Emit code\r\n        const comments = `//${this.name}`;\r\n        state._emitFunctionFromInclude(\"bonesDeclaration\", comments, {\r\n            removeAttributes: true,\r\n            removeUniforms: false,\r\n            removeVaryings: true,\r\n            removeIfDef: false,\r\n        });\r\n\r\n        const influenceVariablename = state._getFreeVariableName(\"influence\");\r\n\r\n        state.compilationString += state._emitCodeFromInclude(\"bonesVertex\", comments, {\r\n            replaceStrings: [\r\n                {\r\n                    search: /finalWorld=finalWorld\\*influence;/,\r\n                    replace: \"\",\r\n                },\r\n                {\r\n                    search: /influence/gm,\r\n                    replace: influenceVariablename,\r\n                },\r\n            ],\r\n        });\r\n\r\n        const output = this._outputs[0];\r\n        const worldInput = this.world;\r\n\r\n        state.compilationString += `#if NUM_BONE_INFLUENCERS>0\\r\\n`;\r\n        state.compilationString += this._declareOutput(output, state) + ` = ${worldInput.associatedVariableName} * ${influenceVariablename};\\r\\n`;\r\n        state.compilationString += `#else\\r\\n`;\r\n        state.compilationString += this._declareOutput(output, state) + ` = ${worldInput.associatedVariableName};\\r\\n`;\r\n        state.compilationString += `#endif\\r\\n`;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.BonesBlock\", BonesBlock);\r\n"]},"metadata":{},"sourceType":"module"}