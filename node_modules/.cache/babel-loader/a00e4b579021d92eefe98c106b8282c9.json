{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { __decorate, __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator.js\";\nimport \"../../../../Shaders/ShadersInclude/bumpFragmentMainFunctions.js\";\nimport \"../../../../Shaders/ShadersInclude/bumpFragmentFunctions.js\";\nimport \"../../../../Shaders/ShadersInclude/bumpFragment.js\";\n/**\n * Block used to perturb normals based on a normal map\n */\n\nvar PerturbNormalBlock =\n/** @class */\nfunction (_super) {\n  __extends(PerturbNormalBlock, _super);\n  /**\n   * Create a new PerturbNormalBlock\n   * @param name defines the block name\n   */\n\n\n  function PerturbNormalBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;\n\n    _this._tangentSpaceParameterName = \"\";\n    /** Gets or sets a boolean indicating that normal should be inverted on X axis */\n\n    _this.invertX = false;\n    /** Gets or sets a boolean indicating that normal should be inverted on Y axis */\n\n    _this.invertY = false;\n    /** Gets or sets a boolean indicating that parallax occlusion should be enabled */\n\n    _this.useParallaxOcclusion = false;\n    _this._isUnique = true; // Vertex\n\n    _this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false);\n\n    _this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, false);\n\n    _this.registerInput(\"worldTangent\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\n\n    _this.registerInput(\"uv\", NodeMaterialBlockConnectionPointTypes.Vector2, false);\n\n    _this.registerInput(\"normalMapColor\", NodeMaterialBlockConnectionPointTypes.Color3, false);\n\n    _this.registerInput(\"strength\", NodeMaterialBlockConnectionPointTypes.Float, false);\n\n    _this.registerInput(\"viewDirection\", NodeMaterialBlockConnectionPointTypes.Vector3, true);\n\n    _this.registerInput(\"parallaxScale\", NodeMaterialBlockConnectionPointTypes.Float, true);\n\n    _this.registerInput(\"parallaxHeight\", NodeMaterialBlockConnectionPointTypes.Float, true); // Fragment\n\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector4);\n\n    _this.registerOutput(\"uvOffset\", NodeMaterialBlockConnectionPointTypes.Vector2);\n\n    return _this;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  PerturbNormalBlock.prototype.getClassName = function () {\n    return \"PerturbNormalBlock\";\n  };\n\n  Object.defineProperty(PerturbNormalBlock.prototype, \"worldPosition\", {\n    /**\n     * Gets the world position input component\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerturbNormalBlock.prototype, \"worldNormal\", {\n    /**\n     * Gets the world normal input component\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerturbNormalBlock.prototype, \"worldTangent\", {\n    /**\n     * Gets the world tangent input component\n     */\n    get: function get() {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerturbNormalBlock.prototype, \"uv\", {\n    /**\n     * Gets the uv input component\n     */\n    get: function get() {\n      return this._inputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerturbNormalBlock.prototype, \"normalMapColor\", {\n    /**\n     * Gets the normal map color input component\n     */\n    get: function get() {\n      return this._inputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerturbNormalBlock.prototype, \"strength\", {\n    /**\n     * Gets the strength input component\n     */\n    get: function get() {\n      return this._inputs[5];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerturbNormalBlock.prototype, \"viewDirection\", {\n    /**\n     * Gets the view direction input component\n     */\n    get: function get() {\n      return this._inputs[6];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerturbNormalBlock.prototype, \"parallaxScale\", {\n    /**\n     * Gets the parallax scale input component\n     */\n    get: function get() {\n      return this._inputs[7];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerturbNormalBlock.prototype, \"parallaxHeight\", {\n    /**\n     * Gets the parallax height input component\n     */\n    get: function get() {\n      return this._inputs[8];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerturbNormalBlock.prototype, \"output\", {\n    /**\n     * Gets the output component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerturbNormalBlock.prototype, \"uvOffset\", {\n    /**\n     * Gets the uv offset output component\n     */\n    get: function get() {\n      return this._outputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  PerturbNormalBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    var normalSamplerName = this.normalMapColor.connectedPoint._ownerBlock.samplerName;\n    var useParallax = this.viewDirection.isConnected && (this.useParallaxOcclusion && normalSamplerName || !this.useParallaxOcclusion && this.parallaxHeight.isConnected);\n    defines.setValue(\"BUMP\", true);\n    defines.setValue(\"PARALLAX\", useParallax, true);\n    defines.setValue(\"PARALLAXOCCLUSION\", this.useParallaxOcclusion, true);\n  };\n\n  PerturbNormalBlock.prototype.bind = function (effect, nodeMaterial) {\n    if (nodeMaterial.getScene()._mirroredCameraPosition) {\n      effect.setFloat2(this._tangentSpaceParameterName, this.invertX ? 1.0 : -1.0, this.invertY ? 1.0 : -1.0);\n    } else {\n      effect.setFloat2(this._tangentSpaceParameterName, this.invertX ? -1.0 : 1.0, this.invertY ? -1.0 : 1.0);\n    }\n  };\n\n  PerturbNormalBlock.prototype.autoConfigure = function (material) {\n    if (!this.uv.isConnected) {\n      var uvInput = material.getInputBlockByPredicate(function (b) {\n        return b.isAttribute && b.name === \"uv\";\n      });\n\n      if (!uvInput) {\n        uvInput = new InputBlock(\"uv\");\n        uvInput.setAsAttribute();\n      }\n\n      uvInput.output.connectTo(this.uv);\n    }\n\n    if (!this.strength.isConnected) {\n      var strengthInput = new InputBlock(\"strength\");\n      strengthInput.value = 1.0;\n      strengthInput.output.connectTo(this.strength);\n    }\n  };\n\n  PerturbNormalBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var comments = \"//\".concat(this.name);\n    var uv = this.uv;\n    var worldPosition = this.worldPosition;\n    var worldNormal = this.worldNormal;\n    var worldTangent = this.worldTangent;\n    state.sharedData.blocksWithDefines.push(this);\n    state.sharedData.bindableBlocks.push(this);\n    this._tangentSpaceParameterName = state._getFreeDefineName(\"tangentSpaceParameter\");\n\n    state._emitUniformFromString(this._tangentSpaceParameterName, \"vec2\");\n\n    var normalSamplerName = this.normalMapColor.connectedPoint._ownerBlock.samplerName;\n    var useParallax = this.viewDirection.isConnected && (this.useParallaxOcclusion && normalSamplerName || !this.useParallaxOcclusion && this.parallaxHeight.isConnected);\n    var replaceForParallaxInfos = !this.parallaxScale.isConnectedToInputBlock ? \"0.05\" : this.parallaxScale.connectInputBlock.isConstant ? state._emitFloat(this.parallaxScale.connectInputBlock.value) : this.parallaxScale.associatedVariableName;\n    var replaceForBumpInfos = this.strength.isConnectedToInputBlock && this.strength.connectInputBlock.isConstant ? \"\\r\\n#if !defined(NORMALXYSCALE)\\r\\n1.0/\\r\\n#endif\\r\\n\".concat(state._emitFloat(this.strength.connectInputBlock.value)) : \"\\r\\n#if !defined(NORMALXYSCALE)\\r\\n1.0/\\r\\n#endif\\r\\n\".concat(this.strength.associatedVariableName);\n\n    state._emitExtension(\"derivatives\", \"#extension GL_OES_standard_derivatives : enable\");\n\n    var tangentReplaceString = {\n      search: /defined\\(TANGENT\\)/g,\n      replace: worldTangent.isConnected ? \"defined(TANGENT)\" : \"defined(IGNORE)\"\n    };\n    var tbnVarying = {\n      search: /varying mat3 vTBN/g,\n      replace: \"\"\n    };\n\n    if (worldTangent.isConnected) {\n      state.compilationString += \"vec3 tbnNormal = normalize(\".concat(worldNormal.associatedVariableName, \".xyz);\\r\\n\");\n      state.compilationString += \"vec3 tbnTangent = normalize(\".concat(worldTangent.associatedVariableName, \".xyz);\\r\\n\");\n      state.compilationString += \"vec3 tbnBitangent = cross(tbnNormal, tbnTangent);\\r\\n\";\n      state.compilationString += \"mat3 vTBN = mat3(tbnTangent, tbnBitangent, tbnNormal);\\r\\n\";\n    }\n\n    state._emitFunctionFromInclude(\"bumpFragmentMainFunctions\", comments, {\n      replaceStrings: [tangentReplaceString, tbnVarying]\n    });\n\n    state._emitFunctionFromInclude(\"bumpFragmentFunctions\", comments, {\n      replaceStrings: [{\n        search: /#include<samplerFragmentDeclaration>\\(_DEFINENAME_,BUMP,_VARYINGNAME_,Bump,_SAMPLERNAME_,bump\\)/g,\n        replace: \"\"\n      }, {\n        search: /uniform sampler2D bumpSampler;/g,\n        replace: \"\"\n      }, {\n        search: /vec2 parallaxOcclusion\\(vec3 vViewDirCoT,vec3 vNormalCoT,vec2 texCoord,float parallaxScale\\)/g,\n        replace: \"#define inline\\r\\nvec2 parallaxOcclusion(vec3 vViewDirCoT, vec3 vNormalCoT, vec2 texCoord, float parallaxScale, sampler2D bumpSampler)\"\n      }, {\n        search: /vec2 parallaxOffset\\(vec3 viewDir,float heightScale\\)/g,\n        replace: \"vec2 parallaxOffset(vec3 viewDir, float heightScale, float height_)\"\n      }, {\n        search: /texture2D\\(bumpSampler,vBumpUV\\)\\.w/g,\n        replace: \"height_\"\n      }]\n    });\n\n    var uvForPerturbNormal = !useParallax || !normalSamplerName ? this.normalMapColor.associatedVariableName : \"texture2D(\".concat(normalSamplerName, \", \").concat(uv.associatedVariableName, \" + uvOffset).xyz\");\n    state.compilationString += this._declareOutput(this.output, state) + \" = vec4(0.);\\r\\n\";\n    state.compilationString += state._emitCodeFromInclude(\"bumpFragment\", comments, {\n      replaceStrings: [{\n        search: /perturbNormal\\(TBN,texture2D\\(bumpSampler,vBumpUV\\+uvOffset\\).xyz,vBumpInfos.y\\)/g,\n        replace: \"perturbNormal(TBN, \".concat(uvForPerturbNormal, \", vBumpInfos.y)\")\n      }, {\n        search: /parallaxOcclusion\\(invTBN\\*-viewDirectionW,invTBN\\*normalW,vBumpUV,vBumpInfos.z\\)/g,\n        replace: \"parallaxOcclusion((invTBN * -viewDirectionW), (invTBN * normalW), vBumpUV, vBumpInfos.z, \".concat(useParallax && this.useParallaxOcclusion ? normalSamplerName : \"bumpSampler\", \")\")\n      }, {\n        search: /parallaxOffset\\(invTBN\\*viewDirectionW,vBumpInfos\\.z\\)/g,\n        replace: \"parallaxOffset(invTBN * viewDirectionW, vBumpInfos.z, \".concat(useParallax ? this.parallaxHeight.associatedVariableName : \"0.\", \")\")\n      }, {\n        search: /vTangentSpaceParams/g,\n        replace: this._tangentSpaceParameterName\n      }, {\n        search: /vBumpInfos.y/g,\n        replace: replaceForBumpInfos\n      }, {\n        search: /vBumpInfos.z/g,\n        replace: replaceForParallaxInfos\n      }, {\n        search: /vBumpUV/g,\n        replace: uv.associatedVariableName\n      }, {\n        search: /vPositionW/g,\n        replace: worldPosition.associatedVariableName + \".xyz\"\n      }, {\n        search: /normalW=/g,\n        replace: this.output.associatedVariableName + \".xyz = \"\n      }, {\n        search: /mat3\\(normalMatrix\\)\\*normalW/g,\n        replace: \"mat3(normalMatrix) * \" + this.output.associatedVariableName + \".xyz\"\n      }, {\n        search: /normalW/g,\n        replace: worldNormal.associatedVariableName + \".xyz\"\n      }, {\n        search: /viewDirectionW/g,\n        replace: useParallax ? this.viewDirection.associatedVariableName : \"vec3(0.)\"\n      }, tangentReplaceString]\n    });\n    return this;\n  };\n\n  PerturbNormalBlock.prototype._dumpPropertiesCode = function () {\n    var codeString = _super.prototype._dumpPropertiesCode.call(this) + \"\".concat(this._codeVariableName, \".invertX = \").concat(this.invertX, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".invertY = \").concat(this.invertY, \";\\r\\n\");\n    codeString += \"\".concat(this._codeVariableName, \".useParallaxOcclusion = \").concat(this.useParallaxOcclusion, \";\\r\\n\");\n    return codeString;\n  };\n\n  PerturbNormalBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    serializationObject.invertX = this.invertX;\n    serializationObject.invertY = this.invertY;\n    serializationObject.useParallaxOcclusion = this.useParallaxOcclusion;\n    return serializationObject;\n  };\n\n  PerturbNormalBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    this.invertX = serializationObject.invertX;\n    this.invertY = serializationObject.invertY;\n    this.useParallaxOcclusion = !!serializationObject.useParallaxOcclusion;\n  };\n\n  __decorate([editableInPropertyPage(\"Invert X axis\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", {\n    notifiers: {\n      update: false\n    }\n  })], PerturbNormalBlock.prototype, \"invertX\", void 0);\n\n  __decorate([editableInPropertyPage(\"Invert Y axis\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", {\n    notifiers: {\n      update: false\n    }\n  })], PerturbNormalBlock.prototype, \"invertY\", void 0);\n\n  __decorate([editableInPropertyPage(\"Use parallax occlusion\", PropertyTypeForEdition.Boolean)], PerturbNormalBlock.prototype, \"useParallaxOcclusion\", void 0);\n\n  return PerturbNormalBlock;\n}(NodeMaterialBlock);\n\nexport { PerturbNormalBlock };\nRegisterClass(\"BABYLON.PerturbNormalBlock\", PerturbNormalBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","InputBlock","editableInPropertyPage","PropertyTypeForEdition","__extends","name","_super","Fragment","_this","_isUnique","registerInput","Vector4","Vector2","Color3","Float","Vector3","registerOutput","PerturbNormalBlock","Object","_inputs","_outputs","mesh","nodeMaterial","defines","normalSamplerName","normalMapColor","connectedPoint","_ownerBlock","samplerName","useParallax","viewDirection","isConnected","useParallaxOcclusion","parallaxHeight","setValue","effect","getScene","_mirroredCameraPosition","setFloat2","_tangentSpaceParameterName","invertX","invertY","material","uv","uvInput","getInputBlockByPredicate","b","isAttribute","setAsAttribute","output","connectTo","strength","strengthInput","value","state","_buildBlock","call","comments","worldPosition","worldNormal","worldTangent","sharedData","blocksWithDefines","push","bindableBlocks","_getFreeDefineName","_emitUniformFromString","replaceForParallaxInfos","parallaxScale","isConnectedToInputBlock","connectInputBlock","isConstant","_emitFloat","associatedVariableName","replaceForBumpInfos","_emitExtension","tangentReplaceString","search","replace","tbnVarying","compilationString","_emitFunctionFromInclude","replaceStrings","uvForPerturbNormal","concat","_declareOutput","_emitCodeFromInclude","codeString","_dumpPropertiesCode","_codeVariableName","serializationObject","serialize","scene","rootUrl","_deserialize","__decorate","Boolean","notifiers","update"],"sourceRoot":"","sources":["../../../../../../../../lts/core/generated/Materials/Node/Blocks/Fragment/perturbNormalBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { NodeMaterial, NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\nimport { InputBlock } from \"../Input/inputBlock\";\r\nimport type { Effect } from \"../../../effect\";\r\nimport type { Scene } from \"../../../../scene\";\r\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator\";\r\nimport type { TextureBlock } from \"../Dual/textureBlock\";\r\n\r\nimport \"../../../../Shaders/ShadersInclude/bumpFragmentMainFunctions\";\r\nimport \"../../../../Shaders/ShadersInclude/bumpFragmentFunctions\";\r\nimport \"../../../../Shaders/ShadersInclude/bumpFragment\";\r\n\r\n/**\r\n * Block used to perturb normals based on a normal map\r\n */\r\nexport class PerturbNormalBlock extends NodeMaterialBlock {\r\n    private _tangentSpaceParameterName = \"\";\r\n\r\n    /** Gets or sets a boolean indicating that normal should be inverted on X axis */\r\n    @editableInPropertyPage(\"Invert X axis\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", { notifiers: { update: false } })\r\n    public invertX = false;\r\n    /** Gets or sets a boolean indicating that normal should be inverted on Y axis */\r\n    @editableInPropertyPage(\"Invert Y axis\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", { notifiers: { update: false } })\r\n    public invertY = false;\r\n    /** Gets or sets a boolean indicating that parallax occlusion should be enabled */\r\n    @editableInPropertyPage(\"Use parallax occlusion\", PropertyTypeForEdition.Boolean)\r\n    public useParallaxOcclusion = false;\r\n\r\n    /**\r\n     * Create a new PerturbNormalBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this._isUnique = true;\r\n\r\n        // Vertex\r\n        this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false);\r\n        this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, false);\r\n        this.registerInput(\"worldTangent\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\r\n        this.registerInput(\"uv\", NodeMaterialBlockConnectionPointTypes.Vector2, false);\r\n        this.registerInput(\"normalMapColor\", NodeMaterialBlockConnectionPointTypes.Color3, false);\r\n        this.registerInput(\"strength\", NodeMaterialBlockConnectionPointTypes.Float, false);\r\n        this.registerInput(\"viewDirection\", NodeMaterialBlockConnectionPointTypes.Vector3, true);\r\n        this.registerInput(\"parallaxScale\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n        this.registerInput(\"parallaxHeight\", NodeMaterialBlockConnectionPointTypes.Float, true);\r\n\r\n        // Fragment\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerOutput(\"uvOffset\", NodeMaterialBlockConnectionPointTypes.Vector2);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"PerturbNormalBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the world position input component\r\n     */\r\n    public get worldPosition(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the world normal input component\r\n     */\r\n    public get worldNormal(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the world tangent input component\r\n     */\r\n    public get worldTangent(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the uv input component\r\n     */\r\n    public get uv(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the normal map color input component\r\n     */\r\n    public get normalMapColor(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the strength input component\r\n     */\r\n    public get strength(): NodeMaterialConnectionPoint {\r\n        return this._inputs[5];\r\n    }\r\n\r\n    /**\r\n     * Gets the view direction input component\r\n     */\r\n    public get viewDirection(): NodeMaterialConnectionPoint {\r\n        return this._inputs[6];\r\n    }\r\n\r\n    /**\r\n     * Gets the parallax scale input component\r\n     */\r\n    public get parallaxScale(): NodeMaterialConnectionPoint {\r\n        return this._inputs[7];\r\n    }\r\n\r\n    /**\r\n     * Gets the parallax height input component\r\n     */\r\n    public get parallaxHeight(): NodeMaterialConnectionPoint {\r\n        return this._inputs[8];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the uv offset output component\r\n     */\r\n    public get uvOffset(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        const normalSamplerName = (this.normalMapColor.connectedPoint!._ownerBlock as TextureBlock).samplerName;\r\n        const useParallax = this.viewDirection.isConnected && ((this.useParallaxOcclusion && normalSamplerName) || (!this.useParallaxOcclusion && this.parallaxHeight.isConnected));\r\n\r\n        defines.setValue(\"BUMP\", true);\r\n        defines.setValue(\"PARALLAX\", useParallax, true);\r\n        defines.setValue(\"PARALLAXOCCLUSION\", this.useParallaxOcclusion, true);\r\n    }\r\n\r\n    public bind(effect: Effect, nodeMaterial: NodeMaterial) {\r\n        if (nodeMaterial.getScene()._mirroredCameraPosition) {\r\n            effect.setFloat2(this._tangentSpaceParameterName, this.invertX ? 1.0 : -1.0, this.invertY ? 1.0 : -1.0);\r\n        } else {\r\n            effect.setFloat2(this._tangentSpaceParameterName, this.invertX ? -1.0 : 1.0, this.invertY ? -1.0 : 1.0);\r\n        }\r\n    }\r\n\r\n    public autoConfigure(material: NodeMaterial) {\r\n        if (!this.uv.isConnected) {\r\n            let uvInput = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"uv\");\r\n\r\n            if (!uvInput) {\r\n                uvInput = new InputBlock(\"uv\");\r\n                uvInput.setAsAttribute();\r\n            }\r\n            uvInput.output.connectTo(this.uv);\r\n        }\r\n\r\n        if (!this.strength.isConnected) {\r\n            const strengthInput = new InputBlock(\"strength\");\r\n            strengthInput.value = 1.0;\r\n            strengthInput.output.connectTo(this.strength);\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const comments = `//${this.name}`;\r\n        const uv = this.uv;\r\n        const worldPosition = this.worldPosition;\r\n        const worldNormal = this.worldNormal;\r\n        const worldTangent = this.worldTangent;\r\n\r\n        state.sharedData.blocksWithDefines.push(this);\r\n        state.sharedData.bindableBlocks.push(this);\r\n\r\n        this._tangentSpaceParameterName = state._getFreeDefineName(\"tangentSpaceParameter\");\r\n\r\n        state._emitUniformFromString(this._tangentSpaceParameterName, \"vec2\");\r\n\r\n        const normalSamplerName = (this.normalMapColor.connectedPoint!._ownerBlock as TextureBlock).samplerName;\r\n        const useParallax = this.viewDirection.isConnected && ((this.useParallaxOcclusion && normalSamplerName) || (!this.useParallaxOcclusion && this.parallaxHeight.isConnected));\r\n\r\n        const replaceForParallaxInfos = !this.parallaxScale.isConnectedToInputBlock\r\n            ? \"0.05\"\r\n            : this.parallaxScale.connectInputBlock!.isConstant\r\n            ? state._emitFloat(this.parallaxScale.connectInputBlock!.value)\r\n            : this.parallaxScale.associatedVariableName;\r\n\r\n        const replaceForBumpInfos =\r\n            this.strength.isConnectedToInputBlock && this.strength.connectInputBlock!.isConstant\r\n                ? `\\r\\n#if !defined(NORMALXYSCALE)\\r\\n1.0/\\r\\n#endif\\r\\n${state._emitFloat(this.strength.connectInputBlock!.value)}`\r\n                : `\\r\\n#if !defined(NORMALXYSCALE)\\r\\n1.0/\\r\\n#endif\\r\\n${this.strength.associatedVariableName}`;\r\n\r\n        state._emitExtension(\"derivatives\", \"#extension GL_OES_standard_derivatives : enable\");\r\n\r\n        const tangentReplaceString = { search: /defined\\(TANGENT\\)/g, replace: worldTangent.isConnected ? \"defined(TANGENT)\" : \"defined(IGNORE)\" };\r\n        const tbnVarying = { search: /varying mat3 vTBN/g, replace: \"\" };\r\n\r\n        if (worldTangent.isConnected) {\r\n            state.compilationString += `vec3 tbnNormal = normalize(${worldNormal.associatedVariableName}.xyz);\\r\\n`;\r\n            state.compilationString += `vec3 tbnTangent = normalize(${worldTangent.associatedVariableName}.xyz);\\r\\n`;\r\n            state.compilationString += `vec3 tbnBitangent = cross(tbnNormal, tbnTangent);\\r\\n`;\r\n            state.compilationString += `mat3 vTBN = mat3(tbnTangent, tbnBitangent, tbnNormal);\\r\\n`;\r\n        }\r\n\r\n        state._emitFunctionFromInclude(\"bumpFragmentMainFunctions\", comments, {\r\n            replaceStrings: [tangentReplaceString, tbnVarying],\r\n        });\r\n\r\n        state._emitFunctionFromInclude(\"bumpFragmentFunctions\", comments, {\r\n            replaceStrings: [\r\n                { search: /#include<samplerFragmentDeclaration>\\(_DEFINENAME_,BUMP,_VARYINGNAME_,Bump,_SAMPLERNAME_,bump\\)/g, replace: \"\" },\r\n                { search: /uniform sampler2D bumpSampler;/g, replace: \"\" },\r\n                {\r\n                    search: /vec2 parallaxOcclusion\\(vec3 vViewDirCoT,vec3 vNormalCoT,vec2 texCoord,float parallaxScale\\)/g,\r\n                    replace: \"#define inline\\r\\nvec2 parallaxOcclusion(vec3 vViewDirCoT, vec3 vNormalCoT, vec2 texCoord, float parallaxScale, sampler2D bumpSampler)\",\r\n                },\r\n                { search: /vec2 parallaxOffset\\(vec3 viewDir,float heightScale\\)/g, replace: \"vec2 parallaxOffset(vec3 viewDir, float heightScale, float height_)\" },\r\n                { search: /texture2D\\(bumpSampler,vBumpUV\\)\\.w/g, replace: \"height_\" },\r\n            ],\r\n        });\r\n\r\n        const uvForPerturbNormal =\r\n            !useParallax || !normalSamplerName ? this.normalMapColor.associatedVariableName : `texture2D(${normalSamplerName}, ${uv.associatedVariableName} + uvOffset).xyz`;\r\n\r\n        state.compilationString += this._declareOutput(this.output, state) + \" = vec4(0.);\\r\\n\";\r\n        state.compilationString += state._emitCodeFromInclude(\"bumpFragment\", comments, {\r\n            replaceStrings: [\r\n                { search: /perturbNormal\\(TBN,texture2D\\(bumpSampler,vBumpUV\\+uvOffset\\).xyz,vBumpInfos.y\\)/g, replace: `perturbNormal(TBN, ${uvForPerturbNormal}, vBumpInfos.y)` },\r\n                {\r\n                    search: /parallaxOcclusion\\(invTBN\\*-viewDirectionW,invTBN\\*normalW,vBumpUV,vBumpInfos.z\\)/g,\r\n                    replace: `parallaxOcclusion((invTBN * -viewDirectionW), (invTBN * normalW), vBumpUV, vBumpInfos.z, ${\r\n                        useParallax && this.useParallaxOcclusion ? normalSamplerName : \"bumpSampler\"\r\n                    })`,\r\n                },\r\n                {\r\n                    search: /parallaxOffset\\(invTBN\\*viewDirectionW,vBumpInfos\\.z\\)/g,\r\n                    replace: `parallaxOffset(invTBN * viewDirectionW, vBumpInfos.z, ${useParallax ? this.parallaxHeight.associatedVariableName : \"0.\"})`,\r\n                },\r\n                { search: /vTangentSpaceParams/g, replace: this._tangentSpaceParameterName },\r\n                { search: /vBumpInfos.y/g, replace: replaceForBumpInfos },\r\n                { search: /vBumpInfos.z/g, replace: replaceForParallaxInfos },\r\n                { search: /vBumpUV/g, replace: uv.associatedVariableName },\r\n                { search: /vPositionW/g, replace: worldPosition.associatedVariableName + \".xyz\" },\r\n                { search: /normalW=/g, replace: this.output.associatedVariableName + \".xyz = \" },\r\n                { search: /mat3\\(normalMatrix\\)\\*normalW/g, replace: \"mat3(normalMatrix) * \" + this.output.associatedVariableName + \".xyz\" },\r\n                { search: /normalW/g, replace: worldNormal.associatedVariableName + \".xyz\" },\r\n                { search: /viewDirectionW/g, replace: useParallax ? this.viewDirection.associatedVariableName : \"vec3(0.)\" },\r\n                tangentReplaceString,\r\n            ],\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString = super._dumpPropertiesCode() + `${this._codeVariableName}.invertX = ${this.invertX};\\r\\n`;\r\n\r\n        codeString += `${this._codeVariableName}.invertY = ${this.invertY};\\r\\n`;\r\n        codeString += `${this._codeVariableName}.useParallaxOcclusion = ${this.useParallaxOcclusion};\\r\\n`;\r\n\r\n        return codeString;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.invertX = this.invertX;\r\n        serializationObject.invertY = this.invertY;\r\n        serializationObject.useParallaxOcclusion = this.useParallaxOcclusion;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.invertX = serializationObject.invertX;\r\n        this.invertY = serializationObject.invertY;\r\n        this.useParallaxOcclusion = !!serializationObject.useParallaxOcclusion;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.PerturbNormalBlock\", PerturbNormalBlock);\r\n"]},"metadata":{},"sourceType":"module"}