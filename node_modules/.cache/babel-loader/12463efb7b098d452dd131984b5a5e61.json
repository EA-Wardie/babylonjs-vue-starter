{"ast":null,"code":"import \"core-js/modules/es.array-buffer.constructor.js\";\nimport \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.int8-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport \"core-js/modules/es.typed-array.int16-array.js\";\nimport \"core-js/modules/es.typed-array.uint16-array.js\";\nimport \"core-js/modules/es.typed-array.int32-array.js\";\nimport \"core-js/modules/es.typed-array.uint32-array.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport { ThinEngine } from \"../../Engines/thinEngine.js\";\n/**\n * Allocate a typed array depending on a texture type. Optionally can copy existing data in the buffer.\n * @param type type of the texture\n * @param sizeOrDstBuffer size of the array OR an existing buffer that will be used as the destination of the copy (if copyBuffer is provided)\n * @param sizeInBytes true if the size of the array is given in bytes, false if it is the number of elements of the array\n * @param copyBuffer if provided, buffer to copy into the destination buffer (either a newly allocated buffer if sizeOrDstBuffer is a number or use sizeOrDstBuffer as the destination buffer otherwise)\n * @returns the allocated buffer or sizeOrDstBuffer if the latter is an ArrayBuffer\n */\n\nexport function allocateAndCopyTypedBuffer(type, sizeOrDstBuffer, sizeInBytes, copyBuffer) {\n  if (sizeInBytes === void 0) {\n    sizeInBytes = false;\n  }\n\n  switch (type) {\n    case 3:\n      {\n        var buffer_1 = sizeOrDstBuffer instanceof ArrayBuffer ? new Int8Array(sizeOrDstBuffer) : new Int8Array(sizeOrDstBuffer);\n\n        if (copyBuffer) {\n          buffer_1.set(new Int8Array(copyBuffer));\n        }\n\n        return buffer_1;\n      }\n\n    case 0:\n      {\n        var buffer_2 = sizeOrDstBuffer instanceof ArrayBuffer ? new Uint8Array(sizeOrDstBuffer) : new Uint8Array(sizeOrDstBuffer);\n\n        if (copyBuffer) {\n          buffer_2.set(new Uint8Array(copyBuffer));\n        }\n\n        return buffer_2;\n      }\n\n    case 4:\n      {\n        var buffer_3 = sizeOrDstBuffer instanceof ArrayBuffer ? new Int16Array(sizeOrDstBuffer) : new Int16Array(sizeInBytes ? sizeOrDstBuffer / 2 : sizeOrDstBuffer);\n\n        if (copyBuffer) {\n          buffer_3.set(new Int16Array(copyBuffer));\n        }\n\n        return buffer_3;\n      }\n\n    case 5:\n    case 8:\n    case 9:\n    case 10:\n    case 2:\n      {\n        var buffer_4 = sizeOrDstBuffer instanceof ArrayBuffer ? new Uint16Array(sizeOrDstBuffer) : new Uint16Array(sizeInBytes ? sizeOrDstBuffer / 2 : sizeOrDstBuffer);\n\n        if (copyBuffer) {\n          buffer_4.set(new Uint16Array(copyBuffer));\n        }\n\n        return buffer_4;\n      }\n\n    case 6:\n      {\n        var buffer_5 = sizeOrDstBuffer instanceof ArrayBuffer ? new Int32Array(sizeOrDstBuffer) : new Int32Array(sizeInBytes ? sizeOrDstBuffer / 4 : sizeOrDstBuffer);\n\n        if (copyBuffer) {\n          buffer_5.set(new Int32Array(copyBuffer));\n        }\n\n        return buffer_5;\n      }\n\n    case 7:\n    case 11:\n    case 12:\n    case 13:\n    case 14:\n    case 15:\n      {\n        var buffer_6 = sizeOrDstBuffer instanceof ArrayBuffer ? new Uint32Array(sizeOrDstBuffer) : new Uint32Array(sizeInBytes ? sizeOrDstBuffer / 4 : sizeOrDstBuffer);\n\n        if (copyBuffer) {\n          buffer_6.set(new Uint32Array(copyBuffer));\n        }\n\n        return buffer_6;\n      }\n\n    case 1:\n      {\n        var buffer_7 = sizeOrDstBuffer instanceof ArrayBuffer ? new Float32Array(sizeOrDstBuffer) : new Float32Array(sizeInBytes ? sizeOrDstBuffer / 4 : sizeOrDstBuffer);\n\n        if (copyBuffer) {\n          buffer_7.set(new Float32Array(copyBuffer));\n        }\n\n        return buffer_7;\n      }\n  }\n\n  var buffer = sizeOrDstBuffer instanceof ArrayBuffer ? new Uint8Array(sizeOrDstBuffer) : new Uint8Array(sizeOrDstBuffer);\n\n  if (copyBuffer) {\n    buffer.set(new Uint8Array(copyBuffer));\n  }\n\n  return buffer;\n}\n\nThinEngine.prototype._readTexturePixelsSync = function (texture, width, height, faceIndex, level, buffer, flushRenderer, noDataConversion, x, y) {\n  var _a, _b;\n\n  if (faceIndex === void 0) {\n    faceIndex = -1;\n  }\n\n  if (level === void 0) {\n    level = 0;\n  }\n\n  if (buffer === void 0) {\n    buffer = null;\n  }\n\n  if (flushRenderer === void 0) {\n    flushRenderer = true;\n  }\n\n  if (noDataConversion === void 0) {\n    noDataConversion = false;\n  }\n\n  if (x === void 0) {\n    x = 0;\n  }\n\n  if (y === void 0) {\n    y = 0;\n  }\n\n  var gl = this._gl;\n\n  if (!gl) {\n    throw new Error(\"Engine does not have gl rendering context.\");\n  }\n\n  if (!this._dummyFramebuffer) {\n    var dummy = gl.createFramebuffer();\n\n    if (!dummy) {\n      throw new Error(\"Unable to create dummy framebuffer\");\n    }\n\n    this._dummyFramebuffer = dummy;\n  }\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, this._dummyFramebuffer);\n\n  if (faceIndex > -1) {\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, (_a = texture._hardwareTexture) === null || _a === void 0 ? void 0 : _a.underlyingResource, level);\n  } else {\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, (_b = texture._hardwareTexture) === null || _b === void 0 ? void 0 : _b.underlyingResource, level);\n  }\n\n  var readType = texture.type !== undefined ? this._getWebGLTextureType(texture.type) : gl.UNSIGNED_BYTE;\n\n  if (!noDataConversion) {\n    switch (readType) {\n      case gl.UNSIGNED_BYTE:\n        if (!buffer) {\n          buffer = new Uint8Array(4 * width * height);\n        }\n\n        readType = gl.UNSIGNED_BYTE;\n        break;\n\n      default:\n        if (!buffer) {\n          buffer = new Float32Array(4 * width * height);\n        }\n\n        readType = gl.FLOAT;\n        break;\n    }\n  } else if (!buffer) {\n    buffer = allocateAndCopyTypedBuffer(texture.type, 4 * width * height);\n  }\n\n  if (flushRenderer) {\n    this.flushFramebuffer();\n  }\n\n  gl.readPixels(x, y, width, height, gl.RGBA, readType, buffer);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, this._currentFramebuffer);\n  return buffer;\n};\n\nThinEngine.prototype._readTexturePixels = function (texture, width, height, faceIndex, level, buffer, flushRenderer, noDataConversion, x, y) {\n  if (faceIndex === void 0) {\n    faceIndex = -1;\n  }\n\n  if (level === void 0) {\n    level = 0;\n  }\n\n  if (buffer === void 0) {\n    buffer = null;\n  }\n\n  if (flushRenderer === void 0) {\n    flushRenderer = true;\n  }\n\n  if (noDataConversion === void 0) {\n    noDataConversion = false;\n  }\n\n  if (x === void 0) {\n    x = 0;\n  }\n\n  if (y === void 0) {\n    y = 0;\n  }\n\n  return Promise.resolve(this._readTexturePixelsSync(texture, width, height, faceIndex, level, buffer, flushRenderer, noDataConversion, x, y));\n};","map":{"version":3,"mappings":"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","names":["ThinEngine","allocateAndCopyTypedBuffer","type","sizeOrDstBuffer","sizeInBytes","copyBuffer","buffer_1","ArrayBuffer","Int8Array","set","buffer_2","Uint8Array","buffer_3","Int16Array","buffer_4","Uint16Array","buffer_5","Int32Array","buffer_6","Uint32Array","buffer_7","Float32Array","buffer","prototype","_readTexturePixelsSync","texture","width","height","faceIndex","level","flushRenderer","noDataConversion","x","y","gl","_gl","Error","_dummyFramebuffer","dummy","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_CUBE_MAP_POSITIVE_X","_hardwareTexture","_a","underlyingResource","TEXTURE_2D","_b","readType","undefined","_getWebGLTextureType","UNSIGNED_BYTE","FLOAT","flushFramebuffer","readPixels","RGBA","_currentFramebuffer","_readTexturePixels","Promise","resolve"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/Extensions/engine.readTexture.ts"],"sourcesContent":["import { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport type { InternalTexture } from \"../../Materials/Textures/internalTexture\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Constants } from \"../constants\";\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n    export interface ThinEngine {\r\n        /** @hidden */\r\n        _readTexturePixels(\r\n            texture: InternalTexture,\r\n            width: number,\r\n            height: number,\r\n            faceIndex?: number,\r\n            level?: number,\r\n            buffer?: Nullable<ArrayBufferView>,\r\n            flushRenderer?: boolean,\r\n            noDataConversion?: boolean,\r\n            x?: number,\r\n            y?: number\r\n        ): Promise<ArrayBufferView>;\r\n\r\n        /** @hidden */\r\n        _readTexturePixelsSync(\r\n            texture: InternalTexture,\r\n            width: number,\r\n            height: number,\r\n            faceIndex?: number,\r\n            level?: number,\r\n            buffer?: Nullable<ArrayBufferView>,\r\n            flushRenderer?: boolean,\r\n            noDataConversion?: boolean,\r\n            x?: number,\r\n            y?: number\r\n        ): ArrayBufferView;\r\n    }\r\n}\r\n\r\n/**\r\n * Allocate a typed array depending on a texture type. Optionally can copy existing data in the buffer.\r\n * @param type type of the texture\r\n * @param sizeOrDstBuffer size of the array OR an existing buffer that will be used as the destination of the copy (if copyBuffer is provided)\r\n * @param sizeInBytes true if the size of the array is given in bytes, false if it is the number of elements of the array\r\n * @param copyBuffer if provided, buffer to copy into the destination buffer (either a newly allocated buffer if sizeOrDstBuffer is a number or use sizeOrDstBuffer as the destination buffer otherwise)\r\n * @returns the allocated buffer or sizeOrDstBuffer if the latter is an ArrayBuffer\r\n */\r\nexport function allocateAndCopyTypedBuffer(type: number, sizeOrDstBuffer: number | ArrayBuffer, sizeInBytes = false, copyBuffer?: ArrayBuffer): ArrayBufferView {\r\n    switch (type) {\r\n        case Constants.TEXTURETYPE_BYTE: {\r\n            const buffer = sizeOrDstBuffer instanceof ArrayBuffer ? new Int8Array(sizeOrDstBuffer) : new Int8Array(sizeOrDstBuffer);\r\n            if (copyBuffer) {\r\n                buffer.set(new Int8Array(copyBuffer));\r\n            }\r\n            return buffer;\r\n        }\r\n        case Constants.TEXTURETYPE_UNSIGNED_BYTE: {\r\n            const buffer = sizeOrDstBuffer instanceof ArrayBuffer ? new Uint8Array(sizeOrDstBuffer) : new Uint8Array(sizeOrDstBuffer);\r\n            if (copyBuffer) {\r\n                buffer.set(new Uint8Array(copyBuffer));\r\n            }\r\n            return buffer;\r\n        }\r\n        case Constants.TEXTURETYPE_SHORT: {\r\n            const buffer = sizeOrDstBuffer instanceof ArrayBuffer ? new Int16Array(sizeOrDstBuffer) : new Int16Array(sizeInBytes ? sizeOrDstBuffer / 2 : sizeOrDstBuffer);\r\n            if (copyBuffer) {\r\n                buffer.set(new Int16Array(copyBuffer));\r\n            }\r\n            return buffer;\r\n        }\r\n        case Constants.TEXTURETYPE_UNSIGNED_SHORT:\r\n        case Constants.TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4:\r\n        case Constants.TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1:\r\n        case Constants.TEXTURETYPE_UNSIGNED_SHORT_5_6_5:\r\n        case Constants.TEXTURETYPE_HALF_FLOAT: {\r\n            const buffer = sizeOrDstBuffer instanceof ArrayBuffer ? new Uint16Array(sizeOrDstBuffer) : new Uint16Array(sizeInBytes ? sizeOrDstBuffer / 2 : sizeOrDstBuffer);\r\n            if (copyBuffer) {\r\n                buffer.set(new Uint16Array(copyBuffer));\r\n            }\r\n            return buffer;\r\n        }\r\n        case Constants.TEXTURETYPE_INT: {\r\n            const buffer = sizeOrDstBuffer instanceof ArrayBuffer ? new Int32Array(sizeOrDstBuffer) : new Int32Array(sizeInBytes ? sizeOrDstBuffer / 4 : sizeOrDstBuffer);\r\n            if (copyBuffer) {\r\n                buffer.set(new Int32Array(copyBuffer));\r\n            }\r\n            return buffer;\r\n        }\r\n        case Constants.TEXTURETYPE_UNSIGNED_INTEGER:\r\n        case Constants.TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV:\r\n        case Constants.TEXTURETYPE_UNSIGNED_INT_24_8:\r\n        case Constants.TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV:\r\n        case Constants.TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV:\r\n        case Constants.TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV: {\r\n            const buffer = sizeOrDstBuffer instanceof ArrayBuffer ? new Uint32Array(sizeOrDstBuffer) : new Uint32Array(sizeInBytes ? sizeOrDstBuffer / 4 : sizeOrDstBuffer);\r\n            if (copyBuffer) {\r\n                buffer.set(new Uint32Array(copyBuffer));\r\n            }\r\n            return buffer;\r\n        }\r\n        case Constants.TEXTURETYPE_FLOAT: {\r\n            const buffer = sizeOrDstBuffer instanceof ArrayBuffer ? new Float32Array(sizeOrDstBuffer) : new Float32Array(sizeInBytes ? sizeOrDstBuffer / 4 : sizeOrDstBuffer);\r\n            if (copyBuffer) {\r\n                buffer.set(new Float32Array(copyBuffer));\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    const buffer = sizeOrDstBuffer instanceof ArrayBuffer ? new Uint8Array(sizeOrDstBuffer) : new Uint8Array(sizeOrDstBuffer);\r\n    if (copyBuffer) {\r\n        buffer.set(new Uint8Array(copyBuffer));\r\n    }\r\n    return buffer;\r\n}\r\n\r\nThinEngine.prototype._readTexturePixelsSync = function (\r\n    texture: InternalTexture,\r\n    width: number,\r\n    height: number,\r\n    faceIndex = -1,\r\n    level = 0,\r\n    buffer: Nullable<ArrayBufferView> = null,\r\n    flushRenderer = true,\r\n    noDataConversion = false,\r\n    x = 0,\r\n    y = 0\r\n): ArrayBufferView {\r\n    const gl = this._gl;\r\n    if (!gl) {\r\n        throw new Error(\"Engine does not have gl rendering context.\");\r\n    }\r\n    if (!this._dummyFramebuffer) {\r\n        const dummy = gl.createFramebuffer();\r\n\r\n        if (!dummy) {\r\n            throw new Error(\"Unable to create dummy framebuffer\");\r\n        }\r\n\r\n        this._dummyFramebuffer = dummy;\r\n    }\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._dummyFramebuffer);\r\n\r\n    if (faceIndex > -1) {\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, texture._hardwareTexture?.underlyingResource, level);\r\n    } else {\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture._hardwareTexture?.underlyingResource, level);\r\n    }\r\n\r\n    let readType = texture.type !== undefined ? this._getWebGLTextureType(texture.type) : gl.UNSIGNED_BYTE;\r\n\r\n    if (!noDataConversion) {\r\n        switch (readType) {\r\n            case gl.UNSIGNED_BYTE:\r\n                if (!buffer) {\r\n                    buffer = new Uint8Array(4 * width * height);\r\n                }\r\n                readType = gl.UNSIGNED_BYTE;\r\n                break;\r\n            default:\r\n                if (!buffer) {\r\n                    buffer = new Float32Array(4 * width * height);\r\n                }\r\n                readType = gl.FLOAT;\r\n                break;\r\n        }\r\n    } else if (!buffer) {\r\n        buffer = allocateAndCopyTypedBuffer(texture.type, 4 * width * height);\r\n    }\r\n\r\n    if (flushRenderer) {\r\n        this.flushFramebuffer();\r\n    }\r\n\r\n    gl.readPixels(x, y, width, height, gl.RGBA, readType, <DataView>buffer);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._currentFramebuffer);\r\n\r\n    return buffer;\r\n};\r\n\r\nThinEngine.prototype._readTexturePixels = function (\r\n    texture: InternalTexture,\r\n    width: number,\r\n    height: number,\r\n    faceIndex = -1,\r\n    level = 0,\r\n    buffer: Nullable<ArrayBufferView> = null,\r\n    flushRenderer = true,\r\n    noDataConversion = false,\r\n    x = 0,\r\n    y = 0\r\n): Promise<ArrayBufferView> {\r\n    return Promise.resolve(this._readTexturePixelsSync(texture, width, height, faceIndex, level, buffer, flushRenderer, noDataConversion, x, y));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}