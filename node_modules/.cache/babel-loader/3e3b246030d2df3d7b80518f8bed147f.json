{"ast":null,"code":"import \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.data-view.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport { Decode } from \"./stringTools.js\";\n/**\n * Utility class for reading from a data buffer\n */\n\nvar DataReader =\n/** @class */\nfunction () {\n  /**\n   * Constructor\n   * @param buffer The buffer to read\n   */\n  function DataReader(buffer) {\n    /**\n     * The current byte offset from the beginning of the data buffer.\n     */\n    this.byteOffset = 0;\n    this.buffer = buffer;\n  }\n  /**\n   * Loads the given byte length.\n   * @param byteLength The byte length to load\n   * @returns A promise that resolves when the load is complete\n   */\n\n\n  DataReader.prototype.loadAsync = function (byteLength) {\n    var _this = this;\n\n    return this.buffer.readAsync(this.byteOffset, byteLength).then(function (data) {\n      _this._dataView = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      _this._dataByteOffset = 0;\n    });\n  };\n  /**\n   * Read a unsigned 32-bit integer from the currently loaded data range.\n   * @returns The 32-bit integer read\n   */\n\n\n  DataReader.prototype.readUint32 = function () {\n    var value = this._dataView.getUint32(this._dataByteOffset, true);\n\n    this._dataByteOffset += 4;\n    this.byteOffset += 4;\n    return value;\n  };\n  /**\n   * Read a byte array from the currently loaded data range.\n   * @param byteLength The byte length to read\n   * @returns The byte array read\n   */\n\n\n  DataReader.prototype.readUint8Array = function (byteLength) {\n    var value = new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + this._dataByteOffset, byteLength);\n    this._dataByteOffset += byteLength;\n    this.byteOffset += byteLength;\n    return value;\n  };\n  /**\n   * Read a string from the currently loaded data range.\n   * @param byteLength The byte length to read\n   * @returns The string read\n   */\n\n\n  DataReader.prototype.readString = function (byteLength) {\n    return Decode(this.readUint8Array(byteLength));\n  };\n  /**\n   * Skips the given byte length the currently loaded data range.\n   * @param byteLength The byte length to skip\n   */\n\n\n  DataReader.prototype.skipBytes = function (byteLength) {\n    this._dataByteOffset += byteLength;\n    this.byteOffset += byteLength;\n  };\n\n  return DataReader;\n}();\n\nexport { DataReader };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,MAAT,QAAuB,kBAAvB;AAoBA;;;;AAGA;AAAA;AAAA;AAcI;;;;AAIA,sBAAYC,MAAZ,EAA+B;AAZ/B;;;AAGO,sBAAa,CAAb;AAUH,SAAKA,MAAL,GAAcA,MAAd;AACH;AAED;;;;;;;AAKOC,mCAAP,UAAiBC,UAAjB,EAAmC;AAAnC;;AACI,WAAO,KAAKF,MAAL,CAAYG,SAAZ,CAAsB,KAAKC,UAA3B,EAAuCF,UAAvC,EAAmDG,IAAnD,CAAwD,UAACC,IAAD,EAAK;AAChEC,WAAI,CAACC,SAAL,GAAiB,IAAIC,QAAJ,CAAaH,IAAI,CAACN,MAAlB,EAA0BM,IAAI,CAACF,UAA/B,EAA2CE,IAAI,CAACJ,UAAhD,CAAjB;AACAK,WAAI,CAACG,eAAL,GAAuB,CAAvB;AACH,KAHM,CAAP;AAIH,GALM;AAOP;;;;;;AAIOT,oCAAP;AACI,QAAMU,KAAK,GAAG,KAAKH,SAAL,CAAeI,SAAf,CAAyB,KAAKF,eAA9B,EAA+C,IAA/C,CAAd;;AACA,SAAKA,eAAL,IAAwB,CAAxB;AACA,SAAKN,UAAL,IAAmB,CAAnB;AACA,WAAOO,KAAP;AACH,GALM;AAOP;;;;;;;AAKOV,wCAAP,UAAsBC,UAAtB,EAAwC;AACpC,QAAMS,KAAK,GAAG,IAAIE,UAAJ,CAAe,KAAKL,SAAL,CAAeR,MAA9B,EAAsC,KAAKQ,SAAL,CAAeJ,UAAf,GAA4B,KAAKM,eAAvE,EAAwFR,UAAxF,CAAd;AACA,SAAKQ,eAAL,IAAwBR,UAAxB;AACA,SAAKE,UAAL,IAAmBF,UAAnB;AACA,WAAOS,KAAP;AACH,GALM;AAOP;;;;;;;AAKOV,oCAAP,UAAkBC,UAAlB,EAAoC;AAChC,WAAOH,MAAM,CAAC,KAAKe,cAAL,CAAoBZ,UAApB,CAAD,CAAb;AACH,GAFM;AAIP;;;;;;AAIOD,mCAAP,UAAiBC,UAAjB,EAAmC;AAC/B,SAAKQ,eAAL,IAAwBR,UAAxB;AACA,SAAKE,UAAL,IAAmBF,UAAnB;AACH,GAHM;;AAIX;AAAC,CA1ED","names":["Decode","buffer","DataReader","byteLength","readAsync","byteOffset","then","data","_this","_dataView","DataView","_dataByteOffset","value","getUint32","Uint8Array","readUint8Array"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Misc/dataReader.ts"],"sourcesContent":["import { Decode } from \"./stringTools\";\r\n\r\n/**\r\n * Interface for a data buffer\r\n */\r\nexport interface IDataBuffer {\r\n    /**\r\n     * Reads bytes from the data buffer.\r\n     * @param byteOffset The byte offset to read\r\n     * @param byteLength The byte length to read\r\n     * @returns A promise that resolves when the bytes are read\r\n     */\r\n    readAsync(byteOffset: number, byteLength: number): Promise<ArrayBufferView>;\r\n\r\n    /**\r\n     * The byte length of the buffer.\r\n     */\r\n    readonly byteLength: number;\r\n}\r\n\r\n/**\r\n * Utility class for reading from a data buffer\r\n */\r\nexport class DataReader {\r\n    /**\r\n     * The data buffer associated with this data reader.\r\n     */\r\n    public readonly buffer: IDataBuffer;\r\n\r\n    /**\r\n     * The current byte offset from the beginning of the data buffer.\r\n     */\r\n    public byteOffset = 0;\r\n\r\n    private _dataView: DataView;\r\n    private _dataByteOffset: number;\r\n\r\n    /**\r\n     * Constructor\r\n     * @param buffer The buffer to read\r\n     */\r\n    constructor(buffer: IDataBuffer) {\r\n        this.buffer = buffer;\r\n    }\r\n\r\n    /**\r\n     * Loads the given byte length.\r\n     * @param byteLength The byte length to load\r\n     * @returns A promise that resolves when the load is complete\r\n     */\r\n    public loadAsync(byteLength: number): Promise<void> {\r\n        return this.buffer.readAsync(this.byteOffset, byteLength).then((data) => {\r\n            this._dataView = new DataView(data.buffer, data.byteOffset, data.byteLength);\r\n            this._dataByteOffset = 0;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Read a unsigned 32-bit integer from the currently loaded data range.\r\n     * @returns The 32-bit integer read\r\n     */\r\n    public readUint32(): number {\r\n        const value = this._dataView.getUint32(this._dataByteOffset, true);\r\n        this._dataByteOffset += 4;\r\n        this.byteOffset += 4;\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Read a byte array from the currently loaded data range.\r\n     * @param byteLength The byte length to read\r\n     * @returns The byte array read\r\n     */\r\n    public readUint8Array(byteLength: number): Uint8Array {\r\n        const value = new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + this._dataByteOffset, byteLength);\r\n        this._dataByteOffset += byteLength;\r\n        this.byteOffset += byteLength;\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Read a string from the currently loaded data range.\r\n     * @param byteLength The byte length to read\r\n     * @returns The string read\r\n     */\r\n    public readString(byteLength: number): string {\r\n        return Decode(this.readUint8Array(byteLength));\r\n    }\r\n\r\n    /**\r\n     * Skips the given byte length the currently loaded data range.\r\n     * @param byteLength The byte length to skip\r\n     */\r\n    public skipBytes(byteLength: number): void {\r\n        this._dataByteOffset += byteLength;\r\n        this.byteOffset += byteLength;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}