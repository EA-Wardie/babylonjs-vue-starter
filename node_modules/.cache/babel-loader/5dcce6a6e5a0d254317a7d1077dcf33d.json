{"ast":null,"code":"/**\n * Gather the list of clipboard event types as constants.\n */\nvar ClipboardEventTypes =\n/** @class */\nfunction () {\n  function ClipboardEventTypes() {}\n  /**\n   * The clipboard event is fired when a copy command is active (pressed).\n   */\n\n\n  ClipboardEventTypes.COPY = 0x01; //\n\n  /**\n   *  The clipboard event is fired when a cut command is active (pressed).\n   */\n\n  ClipboardEventTypes.CUT = 0x02;\n  /**\n   * The clipboard event is fired when a paste command is active (pressed).\n   */\n\n  ClipboardEventTypes.PASTE = 0x03;\n  return ClipboardEventTypes;\n}();\n\nexport { ClipboardEventTypes };\n/**\n * This class is used to store clipboard related info for the onClipboardObservable event.\n */\n\nvar ClipboardInfo =\n/** @class */\nfunction () {\n  /**\n   *Creates an instance of ClipboardInfo.\n   * @param type Defines the type of event (BABYLON.ClipboardEventTypes)\n   * @param event Defines the related dom event\n   */\n  function ClipboardInfo(\n  /**\n   * Defines the type of event (BABYLON.ClipboardEventTypes)\n   */\n  type,\n  /**\n   * Defines the related dom event\n   */\n  event) {\n    this.type = type;\n    this.event = event;\n  }\n  /**\n   *  Get the clipboard event's type from the keycode.\n   * @param keyCode Defines the keyCode for the current keyboard event.\n   * @return {number}\n   */\n\n\n  ClipboardInfo.GetTypeFromCharacter = function (keyCode) {\n    var charCode = keyCode; //TODO: add codes for extended ASCII\n\n    switch (charCode) {\n      case 67:\n        return ClipboardEventTypes.COPY;\n\n      case 86:\n        return ClipboardEventTypes.PASTE;\n\n      case 88:\n        return ClipboardEventTypes.CUT;\n\n      default:\n        return -1;\n    }\n  };\n\n  return ClipboardInfo;\n}();\n\nexport { ClipboardInfo };","map":{"version":3,"mappings":"AAAA;;;AAGA;AAAA;AAAA;AAAA,kCAcC;AAbG;;;;;AAGuBA,6BAAO,IAAP,CAJ3B,CAIwC;;AACpC;;;;AAGuBA,4BAAM,IAAN;AAEvB;;;;AAGuBA,8BAAQ,IAAR;AAC3B;AAAC,CAdD;;SAAaA;AAeb;;;;AAGA;AAAA;AAAA;AACI;;;;;AAKA;AACI;;;AAGOC,MAJX;AAKI;;;AAGOC,OARX,EAQgC;AAJrB;AAIA;AACP;AAEJ;;;;;;;AAKcC,uCAAd,UAAmCC,OAAnC,EAAkD;AAC9C,QAAMC,QAAQ,GAAGD,OAAjB,CAD8C,CAE9C;;AACA,YAAQC,QAAR;AACI,WAAK,EAAL;AACI,eAAOL,mBAAmB,CAACM,IAA3B;;AACJ,WAAK,EAAL;AACI,eAAON,mBAAmB,CAACO,KAA3B;;AACJ,WAAK,EAAL;AACI,eAAOP,mBAAmB,CAACQ,GAA3B;;AACJ;AACI,eAAO,CAAC,CAAR;AARR;AAUH,GAba;;AAclB;AAAC,CApCD","names":["ClipboardEventTypes","type","event","ClipboardInfo","keyCode","charCode","COPY","PASTE","CUT"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Events/clipboardEvents.ts"],"sourcesContent":["/**\r\n * Gather the list of clipboard event types as constants.\r\n */\r\nexport class ClipboardEventTypes {\r\n    /**\r\n     * The clipboard event is fired when a copy command is active (pressed).\r\n     */\r\n    public static readonly COPY = 0x01; //\r\n    /**\r\n     *  The clipboard event is fired when a cut command is active (pressed).\r\n     */\r\n    public static readonly CUT = 0x02;\r\n\r\n    /**\r\n     * The clipboard event is fired when a paste command is active (pressed).\r\n     */\r\n    public static readonly PASTE = 0x03;\r\n}\r\n/**\r\n * This class is used to store clipboard related info for the onClipboardObservable event.\r\n */\r\nexport class ClipboardInfo {\r\n    /**\r\n     *Creates an instance of ClipboardInfo.\r\n     * @param type Defines the type of event (BABYLON.ClipboardEventTypes)\r\n     * @param event Defines the related dom event\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the type of event (BABYLON.ClipboardEventTypes)\r\n         */\r\n        public type: number,\r\n        /**\r\n         * Defines the related dom event\r\n         */\r\n        public event: ClipboardEvent\r\n    ) {}\r\n\r\n    /**\r\n     *  Get the clipboard event's type from the keycode.\r\n     * @param keyCode Defines the keyCode for the current keyboard event.\r\n     * @return {number}\r\n     */\r\n    public static GetTypeFromCharacter(keyCode: number): number {\r\n        const charCode = keyCode;\r\n        //TODO: add codes for extended ASCII\r\n        switch (charCode) {\r\n            case 67:\r\n                return ClipboardEventTypes.COPY;\r\n            case 86:\r\n                return ClipboardEventTypes.PASTE;\r\n            case 88:\r\n                return ClipboardEventTypes.CUT;\r\n            default:\r\n                return -1;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}