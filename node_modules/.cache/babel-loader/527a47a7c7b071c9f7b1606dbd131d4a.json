{"ast":null,"code":"/**\n * ActionEvent is the event being sent when an action is triggered.\n */\nvar ActionEvent =\n/** @class */\nfunction () {\n  /**\n   * Creates a new ActionEvent\n   * @param source The mesh or sprite that triggered the action\n   * @param pointerX The X mouse cursor position at the time of the event\n   * @param pointerY The Y mouse cursor position at the time of the event\n   * @param meshUnderPointer The mesh that is currently pointed at (can be null)\n   * @param sourceEvent the original (browser) event that triggered the ActionEvent\n   * @param additionalData additional data for the event\n   */\n  function ActionEvent(\n  /** The mesh or sprite that triggered the action */\n  source,\n  /** The X mouse cursor position at the time of the event */\n  pointerX,\n  /** The Y mouse cursor position at the time of the event */\n  pointerY,\n  /** The mesh that is currently pointed at (can be null) */\n  meshUnderPointer,\n  /** the original (browser) event that triggered the ActionEvent */\n  sourceEvent,\n  /** additional data for the event */\n  additionalData) {\n    this.source = source;\n    this.pointerX = pointerX;\n    this.pointerY = pointerY;\n    this.meshUnderPointer = meshUnderPointer;\n    this.sourceEvent = sourceEvent;\n    this.additionalData = additionalData;\n  }\n  /**\n   * Helper function to auto-create an ActionEvent from a source mesh.\n   * @param source The source mesh that triggered the event\n   * @param evt The original (browser) event\n   * @param additionalData additional data for the event\n   * @returns the new ActionEvent\n   */\n\n\n  ActionEvent.CreateNew = function (source, evt, additionalData) {\n    var scene = source.getScene();\n    return new ActionEvent(source, scene.pointerX, scene.pointerY, scene.meshUnderPointer || source, evt, additionalData);\n  };\n  /**\n   * Helper function to auto-create an ActionEvent from a source sprite\n   * @param source The source sprite that triggered the event\n   * @param scene Scene associated with the sprite\n   * @param evt The original (browser) event\n   * @param additionalData additional data for the event\n   * @returns the new ActionEvent\n   */\n\n\n  ActionEvent.CreateNewFromSprite = function (source, scene, evt, additionalData) {\n    return new ActionEvent(source, scene.pointerX, scene.pointerY, scene.meshUnderPointer, evt, additionalData);\n  };\n  /**\n   * Helper function to auto-create an ActionEvent from a scene. If triggered by a mesh use ActionEvent.CreateNew\n   * @param scene the scene where the event occurred\n   * @param evt The original (browser) event\n   * @returns the new ActionEvent\n   */\n\n\n  ActionEvent.CreateNewFromScene = function (scene, evt) {\n    return new ActionEvent(null, scene.pointerX, scene.pointerY, scene.meshUnderPointer, evt);\n  };\n  /**\n   * Helper function to auto-create an ActionEvent from a primitive\n   * @param prim defines the target primitive\n   * @param pointerPos defines the pointer position\n   * @param evt The original (browser) event\n   * @param additionalData additional data for the event\n   * @returns the new ActionEvent\n   */\n\n\n  ActionEvent.CreateNewFromPrimitive = function (prim, pointerPos, evt, additionalData) {\n    return new ActionEvent(prim, pointerPos.x, pointerPos.y, null, evt, additionalData);\n  };\n\n  return ActionEvent;\n}();\n\nexport { ActionEvent };","map":{"version":3,"mappings":"AAwBA;;;AAGA;AAAA;AAAA;AACI;;;;;;;;;AASA;AACI;AACOA,QAFX;AAGI;AACOC,UAJX;AAKI;AACOC,UANX;AAOI;AACOC,kBARX;AASI;AACOC,aAVX;AAWI;AACOC,gBAZX,EAY+B;AAVpB;AAEA;AAEA;AAEA;AAEA;AAEA;AACP;AAEJ;;;;;;;;;AAOcC,0BAAd,UAAwBN,MAAxB,EAA8CO,GAA9C,EAAyDF,cAAzD,EAA6E;AACzE,QAAMG,KAAK,GAAGR,MAAM,CAACS,QAAP,EAAd;AACA,WAAO,IAAIH,WAAJ,CAAgBN,MAAhB,EAAwBQ,KAAK,CAACP,QAA9B,EAAwCO,KAAK,CAACN,QAA9C,EAAwDM,KAAK,CAACL,gBAAN,IAA0BH,MAAlF,EAA0FO,GAA1F,EAA+FF,cAA/F,CAAP;AACH,GAHa;AAKd;;;;;;;;;;AAQcC,oCAAd,UAAkCN,MAAlC,EAAkDQ,KAAlD,EAAgED,GAAhE,EAA2EF,cAA3E,EAA+F;AAC3F,WAAO,IAAIC,WAAJ,CAAgBN,MAAhB,EAAwBQ,KAAK,CAACP,QAA9B,EAAwCO,KAAK,CAACN,QAA9C,EAAwDM,KAAK,CAACL,gBAA9D,EAAgFI,GAAhF,EAAqFF,cAArF,CAAP;AACH,GAFa;AAId;;;;;;;;AAMcC,mCAAd,UAAiCE,KAAjC,EAA+CD,GAA/C,EAAuD;AACnD,WAAO,IAAID,WAAJ,CAAgB,IAAhB,EAAsBE,KAAK,CAACP,QAA5B,EAAsCO,KAAK,CAACN,QAA5C,EAAsDM,KAAK,CAACL,gBAA5D,EAA8EI,GAA9E,CAAP;AACH,GAFa;AAId;;;;;;;;;;AAQcD,uCAAd,UAAqCI,IAArC,EAAgDC,UAAhD,EAAqEJ,GAArE,EAAkFF,cAAlF,EAAsG;AAClG,WAAO,IAAIC,WAAJ,CAAgBI,IAAhB,EAAsBC,UAAU,CAACC,CAAjC,EAAoCD,UAAU,CAACE,CAA/C,EAAkD,IAAlD,EAAwDN,GAAxD,EAA6DF,cAA7D,CAAP;AACH,GAFa;;AAGlB;AAAC,CAtED","names":["source","pointerX","pointerY","meshUnderPointer","sourceEvent","additionalData","ActionEvent","evt","scene","getScene","prim","pointerPos","x","y"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Actions/actionEvent.ts"],"sourcesContent":["import type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Sprite } from \"../Sprites/sprite\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Vector2 } from \"../Maths/math.vector\";\r\n\r\n/**\r\n * Interface used to define ActionEvent\r\n */\r\nexport interface IActionEvent {\r\n    /** The mesh or sprite that triggered the action */\r\n    source: any;\r\n    /** The X mouse cursor position at the time of the event */\r\n    pointerX: number;\r\n    /** The Y mouse cursor position at the time of the event */\r\n    pointerY: number;\r\n    /** The mesh that is currently pointed at (can be null) */\r\n    meshUnderPointer: Nullable<AbstractMesh>;\r\n    /** the original (browser) event that triggered the ActionEvent */\r\n    sourceEvent?: any;\r\n    /** additional data for the event */\r\n    additionalData?: any;\r\n}\r\n\r\n/**\r\n * ActionEvent is the event being sent when an action is triggered.\r\n */\r\nexport class ActionEvent implements IActionEvent {\r\n    /**\r\n     * Creates a new ActionEvent\r\n     * @param source The mesh or sprite that triggered the action\r\n     * @param pointerX The X mouse cursor position at the time of the event\r\n     * @param pointerY The Y mouse cursor position at the time of the event\r\n     * @param meshUnderPointer The mesh that is currently pointed at (can be null)\r\n     * @param sourceEvent the original (browser) event that triggered the ActionEvent\r\n     * @param additionalData additional data for the event\r\n     */\r\n    constructor(\r\n        /** The mesh or sprite that triggered the action */\r\n        public source: any,\r\n        /** The X mouse cursor position at the time of the event */\r\n        public pointerX: number,\r\n        /** The Y mouse cursor position at the time of the event */\r\n        public pointerY: number,\r\n        /** The mesh that is currently pointed at (can be null) */\r\n        public meshUnderPointer: Nullable<AbstractMesh>,\r\n        /** the original (browser) event that triggered the ActionEvent */\r\n        public sourceEvent?: any,\r\n        /** additional data for the event */\r\n        public additionalData?: any\r\n    ) {}\r\n\r\n    /**\r\n     * Helper function to auto-create an ActionEvent from a source mesh.\r\n     * @param source The source mesh that triggered the event\r\n     * @param evt The original (browser) event\r\n     * @param additionalData additional data for the event\r\n     * @returns the new ActionEvent\r\n     */\r\n    public static CreateNew(source: AbstractMesh, evt?: any, additionalData?: any): ActionEvent {\r\n        const scene = source.getScene();\r\n        return new ActionEvent(source, scene.pointerX, scene.pointerY, scene.meshUnderPointer || source, evt, additionalData);\r\n    }\r\n\r\n    /**\r\n     * Helper function to auto-create an ActionEvent from a source sprite\r\n     * @param source The source sprite that triggered the event\r\n     * @param scene Scene associated with the sprite\r\n     * @param evt The original (browser) event\r\n     * @param additionalData additional data for the event\r\n     * @returns the new ActionEvent\r\n     */\r\n    public static CreateNewFromSprite(source: Sprite, scene: Scene, evt?: any, additionalData?: any): ActionEvent {\r\n        return new ActionEvent(source, scene.pointerX, scene.pointerY, scene.meshUnderPointer, evt, additionalData);\r\n    }\r\n\r\n    /**\r\n     * Helper function to auto-create an ActionEvent from a scene. If triggered by a mesh use ActionEvent.CreateNew\r\n     * @param scene the scene where the event occurred\r\n     * @param evt The original (browser) event\r\n     * @returns the new ActionEvent\r\n     */\r\n    public static CreateNewFromScene(scene: Scene, evt: any): ActionEvent {\r\n        return new ActionEvent(null, scene.pointerX, scene.pointerY, scene.meshUnderPointer, evt);\r\n    }\r\n\r\n    /**\r\n     * Helper function to auto-create an ActionEvent from a primitive\r\n     * @param prim defines the target primitive\r\n     * @param pointerPos defines the pointer position\r\n     * @param evt The original (browser) event\r\n     * @param additionalData additional data for the event\r\n     * @returns the new ActionEvent\r\n     */\r\n    public static CreateNewFromPrimitive(prim: any, pointerPos: Vector2, evt?: Event, additionalData?: any): ActionEvent {\r\n        return new ActionEvent(prim, pointerPos.x, pointerPos.y, null, evt, additionalData);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}