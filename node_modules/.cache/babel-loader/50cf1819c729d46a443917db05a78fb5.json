{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url-search-params.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.date.now.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.array.last-index-of.js\";\nimport { Tools } from \"../Misc/tools.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { GetTGAHeader } from \"../Misc/tga.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport { WebRequest } from \"../Misc/webRequest.js\"; // Sets the default offline provider to Babylon.js\n\nEngine.OfflineProviderFactory = function (urlToScene, callbackManifestChecked, disableManifestCheck) {\n  if (disableManifestCheck === void 0) {\n    disableManifestCheck = false;\n  }\n\n  return new Database(urlToScene, callbackManifestChecked, disableManifestCheck);\n};\n/**\n * Class used to enable access to IndexedDB\n * @see https://doc.babylonjs.com/how_to/caching_resources_in_indexeddb\n */\n\n\nvar Database =\n/** @class */\nfunction () {\n  /**\n   * Creates a new Database\n   * @param urlToScene defines the url to load the scene\n   * @param callbackManifestChecked defines the callback to use when manifest is checked\n   * @param disableManifestCheck defines a boolean indicating that we want to skip the manifest validation (it will be considered validated and up to date)\n   */\n  function Database(urlToScene, callbackManifestChecked, disableManifestCheck) {\n    if (disableManifestCheck === void 0) {\n      disableManifestCheck = false;\n    } // Handling various flavors of prefixed version of IndexedDB\n\n\n    this._idbFactory = typeof window !== \"undefined\" ? window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB : indexedDB;\n    this._currentSceneUrl = Database._ReturnFullUrlLocation(urlToScene);\n    this._db = null;\n    this._enableSceneOffline = false;\n    this._enableTexturesOffline = false;\n    this._manifestVersionFound = 0;\n    this._mustUpdateRessources = false;\n    this._hasReachedQuota = false;\n\n    if (!Database.IDBStorageEnabled) {\n      callbackManifestChecked(true);\n    } else {\n      if (disableManifestCheck) {\n        this._enableSceneOffline = true;\n        this._enableTexturesOffline = true;\n        this._manifestVersionFound = 1;\n        Tools.SetImmediate(function () {\n          callbackManifestChecked(true);\n        });\n      } else {\n        this._checkManifestFile(callbackManifestChecked);\n      }\n    }\n  }\n\n  Object.defineProperty(Database.prototype, \"enableSceneOffline\", {\n    /**\n     * Gets a boolean indicating if scene must be saved in the database\n     */\n    get: function get() {\n      return this._enableSceneOffline;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Database.prototype, \"enableTexturesOffline\", {\n    /**\n     * Gets a boolean indicating if textures must be saved in the database\n     */\n    get: function get() {\n      return this._enableTexturesOffline;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Database.prototype._checkManifestFile = function (callbackManifestChecked) {\n    var _this = this;\n\n    var noManifestFile = function noManifestFile() {\n      _this._enableSceneOffline = false;\n      _this._enableTexturesOffline = false;\n      callbackManifestChecked(false);\n    };\n\n    var createManifestURL = function createManifestURL() {\n      try {\n        // make sure we have a valid URL.\n        if (typeof URL === \"function\" && _this._currentSceneUrl.indexOf(\"http\") === 0) {\n          // we don't have the base url, so the URL string must have a protocol\n          var url = new URL(_this._currentSceneUrl);\n          url.pathname += \".manifest\";\n          return url.toString();\n        }\n      } catch (e) {// defensive - if this fails for any reason, fall back to the older method\n      }\n\n      return \"\".concat(_this._currentSceneUrl, \".manifest\");\n    };\n\n    var timeStampUsed = false;\n    var manifestURL = createManifestURL();\n    var xhr = new WebRequest();\n\n    if (navigator.onLine) {\n      // Adding a timestamp to by-pass browsers' cache\n      timeStampUsed = true;\n      manifestURL = manifestURL + (manifestURL.match(/\\?/) == null ? \"?\" : \"&\") + Date.now();\n    }\n\n    xhr.open(\"GET\", manifestURL);\n    xhr.addEventListener(\"load\", function () {\n      if (xhr.status === 200 || Database._ValidateXHRData(xhr, 1)) {\n        try {\n          var manifestFile = JSON.parse(xhr.response);\n          _this._enableSceneOffline = manifestFile.enableSceneOffline;\n          _this._enableTexturesOffline = manifestFile.enableTexturesOffline && Database._IsUASupportingBlobStorage;\n\n          if (manifestFile.version && !isNaN(parseInt(manifestFile.version))) {\n            _this._manifestVersionFound = manifestFile.version;\n          }\n\n          callbackManifestChecked(true);\n        } catch (ex) {\n          noManifestFile();\n        }\n      } else {\n        noManifestFile();\n      }\n    }, false);\n    xhr.addEventListener(\"error\", function () {\n      if (timeStampUsed) {\n        timeStampUsed = false; // Let's retry without the timeStamp\n        // It could fail when coupled with HTML5 Offline API\n\n        var retryManifestURL = createManifestURL();\n        xhr.open(\"GET\", retryManifestURL);\n        xhr.send();\n      } else {\n        noManifestFile();\n      }\n    }, false);\n\n    try {\n      xhr.send();\n    } catch (ex) {\n      Logger.Error(\"Error on XHR send request.\");\n      callbackManifestChecked(false);\n    }\n  };\n  /**\n   * Open the database and make it available\n   * @param successCallback defines the callback to call on success\n   * @param errorCallback defines the callback to call on error\n   */\n\n\n  Database.prototype.open = function (successCallback, errorCallback) {\n    var _this = this;\n\n    var handleError = function handleError() {\n      _this._isSupported = false;\n\n      if (errorCallback) {\n        errorCallback();\n      }\n    };\n\n    if (!this._idbFactory || !(this._enableSceneOffline || this._enableTexturesOffline)) {\n      // Your browser doesn't support IndexedDB\n      this._isSupported = false;\n\n      if (errorCallback) {\n        errorCallback();\n      }\n    } else {\n      // If the DB hasn't been opened or created yet\n      if (!this._db) {\n        this._hasReachedQuota = false;\n        this._isSupported = true;\n\n        var request_1 = this._idbFactory.open(\"babylonjs\", 1); // Could occur if user is blocking the quota for the DB and/or doesn't grant access to IndexedDB\n\n\n        request_1.onerror = function () {\n          handleError();\n        }; // executes when a version change transaction cannot complete due to other active transactions\n\n\n        request_1.onblocked = function () {\n          Logger.Error(\"IDB request blocked. Please reload the page.\");\n          handleError();\n        }; // DB has been opened successfully\n\n\n        request_1.onsuccess = function () {\n          _this._db = request_1.result;\n          successCallback();\n        }; // Initialization of the DB. Creating Scenes & Textures stores\n\n\n        request_1.onupgradeneeded = function (event) {\n          _this._db = event.target.result;\n\n          if (_this._db) {\n            try {\n              _this._db.createObjectStore(\"scenes\", {\n                keyPath: \"sceneUrl\"\n              });\n\n              _this._db.createObjectStore(\"versions\", {\n                keyPath: \"sceneUrl\"\n              });\n\n              _this._db.createObjectStore(\"textures\", {\n                keyPath: \"textureUrl\"\n              });\n            } catch (ex) {\n              Logger.Error(\"Error while creating object stores. Exception: \" + ex.message);\n              handleError();\n            }\n          }\n        };\n      } // DB has already been created and opened\n      else {\n        if (successCallback) {\n          successCallback();\n        }\n      }\n    }\n  };\n  /**\n   * Loads an image from the database\n   * @param url defines the url to load from\n   * @param image defines the target DOM image\n   */\n\n\n  Database.prototype.loadImage = function (url, image) {\n    var _this = this;\n\n    var completeURL = Database._ReturnFullUrlLocation(url);\n\n    var saveAndLoadImage = function saveAndLoadImage() {\n      if (!_this._hasReachedQuota && _this._db !== null) {\n        // the texture is not yet in the DB, let's try to save it\n        _this._saveImageIntoDBAsync(completeURL, image);\n      } // If the texture is not in the DB and we've reached the DB quota limit\n      // let's load it directly from the web\n      else {\n        image.src = url;\n      }\n    };\n\n    if (!this._mustUpdateRessources) {\n      this._loadImageFromDBAsync(completeURL, image, saveAndLoadImage);\n    } // First time we're download the images or update requested in the manifest file by a version change\n    else {\n      saveAndLoadImage();\n    }\n  };\n\n  Database.prototype._loadImageFromDBAsync = function (url, image, notInDBCallback) {\n    if (this._isSupported && this._db !== null) {\n      var texture_1;\n\n      var transaction = this._db.transaction([\"textures\"]);\n\n      transaction.onabort = function () {\n        image.src = url;\n      };\n\n      transaction.oncomplete = function () {\n        var blobTextureURL;\n\n        if (texture_1) {\n          var URL_1 = window.URL || window.webkitURL;\n          blobTextureURL = URL_1.createObjectURL(texture_1.data);\n\n          image.onerror = function () {\n            Logger.Error(\"Error loading image from blob URL: \" + blobTextureURL + \" switching back to web url: \" + url);\n            image.src = url;\n          };\n\n          image.src = blobTextureURL;\n        } else {\n          notInDBCallback();\n        }\n      };\n\n      var getRequest = transaction.objectStore(\"textures\").get(url);\n\n      getRequest.onsuccess = function (event) {\n        texture_1 = event.target.result;\n      };\n\n      getRequest.onerror = function () {\n        Logger.Error(\"Error loading texture \" + url + \" from DB.\");\n        image.src = url;\n      };\n    } else {\n      Logger.Error(\"Error: IndexedDB not supported by your browser or BabylonJS Database is not open.\");\n      image.src = url;\n    }\n  };\n\n  Database.prototype._saveImageIntoDBAsync = function (url, image) {\n    var _this = this;\n\n    var blob;\n\n    if (this._isSupported) {\n      // In case of error (type not supported or quota exceeded), we're at least sending back XHR data to allow texture loading later on\n      var generateBlobUrl_1 = function generateBlobUrl_1() {\n        var blobTextureURL;\n\n        if (blob) {\n          var URL_2 = window.URL || window.webkitURL;\n\n          try {\n            blobTextureURL = URL_2.createObjectURL(blob);\n          } catch (ex) {\n            // Chrome is raising a type error if we're setting the oneTimeOnly parameter\n            blobTextureURL = URL_2.createObjectURL(blob);\n          }\n        }\n\n        if (blobTextureURL) {\n          image.src = blobTextureURL;\n        }\n      };\n\n      if (Database._IsUASupportingBlobStorage) {\n        // Create XHR\n        var xhr_1 = new WebRequest();\n        xhr_1.open(\"GET\", url);\n        xhr_1.responseType = \"blob\";\n        xhr_1.addEventListener(\"load\", function () {\n          if (xhr_1.status === 200 && _this._db) {\n            // Blob as response\n            blob = xhr_1.response;\n\n            var transaction = _this._db.transaction([\"textures\"], \"readwrite\"); // the transaction could abort because of a QuotaExceededError error\n\n\n            transaction.onabort = function (event) {\n              try {\n                //backwards compatibility with ts 1.0, srcElement doesn't have an \"error\" according to ts 1.3\n                var srcElement = event.srcElement || event.target;\n                var error = srcElement.error;\n\n                if (error && error.name === \"QuotaExceededError\") {\n                  _this._hasReachedQuota = true;\n                }\n              } catch (ex) {}\n\n              generateBlobUrl_1();\n            };\n\n            transaction.oncomplete = function () {\n              generateBlobUrl_1();\n            };\n\n            var newTexture = {\n              textureUrl: url,\n              data: blob\n            };\n\n            try {\n              // Put the blob into the dabase\n              var addRequest = transaction.objectStore(\"textures\").put(newTexture);\n\n              addRequest.onsuccess = function () {};\n\n              addRequest.onerror = function () {\n                generateBlobUrl_1();\n              };\n            } catch (ex) {\n              // \"DataCloneError\" generated by Chrome when you try to inject blob into IndexedDB\n              if (ex.code === 25) {\n                Database._IsUASupportingBlobStorage = false;\n                _this._enableTexturesOffline = false;\n              }\n\n              image.src = url;\n            }\n          } else {\n            image.src = url;\n          }\n        }, false);\n        xhr_1.addEventListener(\"error\", function () {\n          Logger.Error(\"Error in XHR request in BABYLON.Database.\");\n          image.src = url;\n        }, false);\n        xhr_1.send();\n      } else {\n        image.src = url;\n      }\n    } else {\n      Logger.Error(\"Error: IndexedDB not supported by your browser or Babylon.js database is not open.\");\n      image.src = url;\n    }\n  };\n\n  Database.prototype._checkVersionFromDB = function (url, versionLoaded) {\n    var _this = this;\n\n    var updateVersion = function updateVersion() {\n      // the version is not yet in the DB or we need to update it\n      _this._saveVersionIntoDBAsync(url, versionLoaded);\n    };\n\n    this._loadVersionFromDBAsync(url, versionLoaded, updateVersion);\n  };\n\n  Database.prototype._loadVersionFromDBAsync = function (url, callback, updateInDBCallback) {\n    var _this = this;\n\n    if (this._isSupported && this._db) {\n      var version_1;\n\n      try {\n        var transaction = this._db.transaction([\"versions\"]);\n\n        transaction.oncomplete = function () {\n          if (version_1) {\n            // If the version in the JSON file is different from the version in DB\n            if (_this._manifestVersionFound !== version_1.data) {\n              _this._mustUpdateRessources = true;\n              updateInDBCallback();\n            } else {\n              callback(version_1.data);\n            }\n          } // version was not found in DB\n          else {\n            _this._mustUpdateRessources = true;\n            updateInDBCallback();\n          }\n        };\n\n        transaction.onabort = function () {\n          callback(-1);\n        };\n\n        var getRequest = transaction.objectStore(\"versions\").get(url);\n\n        getRequest.onsuccess = function (event) {\n          version_1 = event.target.result;\n        };\n\n        getRequest.onerror = function () {\n          Logger.Error(\"Error loading version for scene \" + url + \" from DB.\");\n          callback(-1);\n        };\n      } catch (ex) {\n        Logger.Error(\"Error while accessing 'versions' object store (READ OP). Exception: \" + ex.message);\n        callback(-1);\n      }\n    } else {\n      Logger.Error(\"Error: IndexedDB not supported by your browser or Babylon.js database is not open.\");\n      callback(-1);\n    }\n  };\n\n  Database.prototype._saveVersionIntoDBAsync = function (url, callback) {\n    var _this = this;\n\n    if (this._isSupported && !this._hasReachedQuota && this._db) {\n      try {\n        // Open a transaction to the database\n        var transaction = this._db.transaction([\"versions\"], \"readwrite\"); // the transaction could abort because of a QuotaExceededError error\n\n\n        transaction.onabort = function (event) {\n          try {\n            //backwards compatibility with ts 1.0, srcElement doesn't have an \"error\" according to ts 1.3\n            var error = event.srcElement[\"error\"];\n\n            if (error && error.name === \"QuotaExceededError\") {\n              _this._hasReachedQuota = true;\n            }\n          } catch (ex) {}\n\n          callback(-1);\n        };\n\n        transaction.oncomplete = function () {\n          callback(_this._manifestVersionFound);\n        };\n\n        var newVersion = {\n          sceneUrl: url,\n          data: this._manifestVersionFound\n        }; // Put the scene into the database\n\n        var addRequest = transaction.objectStore(\"versions\").put(newVersion);\n\n        addRequest.onsuccess = function () {};\n\n        addRequest.onerror = function () {\n          Logger.Error(\"Error in DB add version request in BABYLON.Database.\");\n        };\n      } catch (ex) {\n        Logger.Error(\"Error while accessing 'versions' object store (WRITE OP). Exception: \" + ex.message);\n        callback(-1);\n      }\n    } else {\n      callback(-1);\n    }\n  };\n  /**\n   * Loads a file from database\n   * @param url defines the URL to load from\n   * @param sceneLoaded defines a callback to call on success\n   * @param progressCallBack defines a callback to call when progress changed\n   * @param errorCallback defines a callback to call on error\n   * @param useArrayBuffer defines a boolean to use array buffer instead of text string\n   */\n\n\n  Database.prototype.loadFile = function (url, sceneLoaded, progressCallBack, errorCallback, useArrayBuffer) {\n    var _this = this;\n\n    var completeUrl = Database._ReturnFullUrlLocation(url);\n\n    var saveAndLoadFile = function saveAndLoadFile() {\n      // the scene is not yet in the DB, let's try to save it\n      _this._saveFileAsync(completeUrl, sceneLoaded, progressCallBack, useArrayBuffer, errorCallback);\n    };\n\n    this._checkVersionFromDB(completeUrl, function (version) {\n      if (version !== -1) {\n        if (!_this._mustUpdateRessources) {\n          _this._loadFileAsync(completeUrl, sceneLoaded, saveAndLoadFile);\n        } else {\n          _this._saveFileAsync(completeUrl, sceneLoaded, progressCallBack, useArrayBuffer, errorCallback);\n        }\n      } else {\n        if (errorCallback) {\n          errorCallback();\n        }\n      }\n    });\n  };\n\n  Database.prototype._loadFileAsync = function (url, callback, notInDBCallback) {\n    if (this._isSupported && this._db) {\n      var targetStore = void 0;\n\n      if (url.indexOf(\".babylon\") !== -1) {\n        targetStore = \"scenes\";\n      } else {\n        targetStore = \"textures\";\n      }\n\n      var file_1;\n\n      var transaction = this._db.transaction([targetStore]);\n\n      transaction.oncomplete = function () {\n        if (file_1) {\n          callback(file_1.data);\n        } // file was not found in DB\n        else {\n          notInDBCallback();\n        }\n      };\n\n      transaction.onabort = function () {\n        notInDBCallback();\n      };\n\n      var getRequest = transaction.objectStore(targetStore).get(url);\n\n      getRequest.onsuccess = function (event) {\n        file_1 = event.target.result;\n      };\n\n      getRequest.onerror = function () {\n        Logger.Error(\"Error loading file \" + url + \" from DB.\");\n        notInDBCallback();\n      };\n    } else {\n      Logger.Error(\"Error: IndexedDB not supported by your browser or BabylonJS Database is not open.\");\n      callback();\n    }\n  };\n\n  Database.prototype._saveFileAsync = function (url, callback, progressCallback, useArrayBuffer, errorCallback) {\n    var _this = this;\n\n    if (this._isSupported) {\n      var targetStore_1;\n\n      if (url.indexOf(\".babylon\") !== -1) {\n        targetStore_1 = \"scenes\";\n      } else {\n        targetStore_1 = \"textures\";\n      } // Create XHR\n\n\n      var xhr_2 = new WebRequest();\n      var fileData_1;\n      xhr_2.open(\"GET\", url + (url.match(/\\?/) == null ? \"?\" : \"&\") + Date.now());\n\n      if (useArrayBuffer) {\n        xhr_2.responseType = \"arraybuffer\";\n      }\n\n      if (progressCallback) {\n        xhr_2.onprogress = progressCallback;\n      }\n\n      xhr_2.addEventListener(\"load\", function () {\n        if (xhr_2.status === 200 || xhr_2.status < 400 && Database._ValidateXHRData(xhr_2, !useArrayBuffer ? 1 : 6)) {\n          // Blob as response\n          fileData_1 = !useArrayBuffer ? xhr_2.responseText : xhr_2.response;\n\n          if (!_this._hasReachedQuota && _this._db) {\n            // Open a transaction to the database\n            var transaction = _this._db.transaction([targetStore_1], \"readwrite\"); // the transaction could abort because of a QuotaExceededError error\n\n\n            transaction.onabort = function (event) {\n              try {\n                //backwards compatibility with ts 1.0, srcElement doesn't have an \"error\" according to ts 1.3\n                var error = event.srcElement[\"error\"];\n\n                if (error && error.name === \"QuotaExceededError\") {\n                  _this._hasReachedQuota = true;\n                }\n              } catch (ex) {}\n\n              callback(fileData_1);\n            };\n\n            transaction.oncomplete = function () {\n              callback(fileData_1);\n            };\n\n            var newFile = void 0;\n\n            if (targetStore_1 === \"scenes\") {\n              newFile = {\n                sceneUrl: url,\n                data: fileData_1,\n                version: _this._manifestVersionFound\n              };\n            } else {\n              newFile = {\n                textureUrl: url,\n                data: fileData_1\n              };\n            }\n\n            try {\n              // Put the scene into the database\n              var addRequest = transaction.objectStore(targetStore_1).put(newFile);\n\n              addRequest.onsuccess = function () {};\n\n              addRequest.onerror = function () {\n                Logger.Error(\"Error in DB add file request in BABYLON.Database.\");\n              };\n            } catch (ex) {\n              callback(fileData_1);\n            }\n          } else {\n            callback(fileData_1);\n          }\n        } else {\n          if (xhr_2.status >= 400 && errorCallback) {\n            errorCallback(xhr_2);\n          } else {\n            callback();\n          }\n        }\n      }, false);\n      xhr_2.addEventListener(\"error\", function () {\n        Logger.Error(\"error on XHR request.\");\n        callback();\n      }, false);\n      xhr_2.send();\n    } else {\n      Logger.Error(\"Error: IndexedDB not supported by your browser or Babylon.js database is not open.\");\n      callback();\n    }\n  };\n  /**\n   * Validates if xhr data is correct\n   * @param xhr defines the request to validate\n   * @param dataType defines the expected data type\n   * @returns true if data is correct\n   */\n\n\n  Database._ValidateXHRData = function (xhr, dataType) {\n    // 1 for text (.babylon, manifest and shaders), 2 for TGA, 4 for DDS, 7 for all\n    if (dataType === void 0) {\n      dataType = 7;\n    }\n\n    try {\n      if (dataType & 1) {\n        if (xhr.responseText && xhr.responseText.length > 0) {\n          return true;\n        } else if (dataType === 1) {\n          return false;\n        }\n      }\n\n      if (dataType & 2) {\n        // Check header width and height since there is no \"TGA\" magic number\n        var tgaHeader = GetTGAHeader(xhr.response);\n\n        if (tgaHeader.width && tgaHeader.height && tgaHeader.width > 0 && tgaHeader.height > 0) {\n          return true;\n        } else if (dataType === 2) {\n          return false;\n        }\n      }\n\n      if (dataType & 4) {\n        // Check for the \"DDS\" magic number\n        var ddsHeader = new Uint8Array(xhr.response, 0, 3);\n\n        if (ddsHeader[0] === 68 && ddsHeader[1] === 68 && ddsHeader[2] === 83) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    } catch (e) {// Global protection\n    }\n\n    return false;\n  };\n  /** Gets a boolean indicating if the user agent supports blob storage (this value will be updated after creating the first Database object) */\n\n\n  Database._IsUASupportingBlobStorage = true;\n  /**\n   * Gets a boolean indicating if Database storage is enabled (off by default)\n   */\n\n  Database.IDBStorageEnabled = false;\n\n  Database._ParseURL = function (url) {\n    var a = document.createElement(\"a\");\n    a.href = url;\n    var urlWithoutHash = url.substring(0, url.lastIndexOf(\"#\"));\n    var fileName = url.substring(urlWithoutHash.lastIndexOf(\"/\") + 1, url.length);\n    var absLocation = url.substring(0, url.indexOf(fileName, 0));\n    return absLocation;\n  };\n\n  Database._ReturnFullUrlLocation = function (url) {\n    if (url.indexOf(\"http:/\") === -1 && url.indexOf(\"https:/\") === -1 && typeof window !== \"undefined\") {\n      return Database._ParseURL(window.location.href) + url;\n    } else {\n      return url;\n    }\n  };\n\n  return Database;\n}();\n\nexport { Database };","map":{"version":3,"mappings":"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","names":["Tools","Logger","GetTGAHeader","Engine","WebRequest","OfflineProviderFactory","urlToScene","callbackManifestChecked","disableManifestCheck","Database","window","indexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","_currentSceneUrl","_ReturnFullUrlLocation","_db","_enableSceneOffline","_enableTexturesOffline","_manifestVersionFound","_mustUpdateRessources","_hasReachedQuota","IDBStorageEnabled","SetImmediate","_checkManifestFile","Object","noManifestFile","_this","createManifestURL","URL","indexOf","url","pathname","toString","e","timeStampUsed","manifestURL","xhr","navigator","onLine","match","Date","now","open","addEventListener","status","_ValidateXHRData","manifestFile","JSON","parse","response","enableSceneOffline","enableTexturesOffline","_IsUASupportingBlobStorage","version","isNaN","parseInt","ex","retryManifestURL","send","Error","successCallback","errorCallback","handleError","_isSupported","_idbFactory","request_1","onerror","onblocked","onsuccess","result","onupgradeneeded","event","target","createObjectStore","keyPath","message","image","completeURL","saveAndLoadImage","_saveImageIntoDBAsync","src","_loadImageFromDBAsync","notInDBCallback","texture_1","transaction","onabort","oncomplete","blobTextureURL","URL_1","webkitURL","createObjectURL","data","getRequest","objectStore","get","blob","generateBlobUrl_1","URL_2","xhr_1","responseType","srcElement","error","name","newTexture","textureUrl","addRequest","put","code","versionLoaded","updateVersion","_saveVersionIntoDBAsync","_loadVersionFromDBAsync","callback","updateInDBCallback","version_1","newVersion","sceneUrl","sceneLoaded","progressCallBack","useArrayBuffer","completeUrl","saveAndLoadFile","_saveFileAsync","_checkVersionFromDB","_loadFileAsync","targetStore","file_1","progressCallback","targetStore_1","xhr_2","fileData_1","onprogress","responseText","newFile","dataType","length","tgaHeader","width","height","ddsHeader","Uint8Array","a","document","createElement","href","urlWithoutHash","substring","lastIndexOf","fileName","absLocation","_ParseURL","location"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Offline/database.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport { Tools } from \"../Misc/tools\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { GetTGAHeader } from \"../Misc/tga\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport type { IOfflineProvider } from \"./IOfflineProvider\";\r\nimport { WebRequest } from \"../Misc/webRequest\";\r\n\r\n// Sets the default offline provider to Babylon.js\r\nEngine.OfflineProviderFactory = (urlToScene: string, callbackManifestChecked: (checked: boolean) => any, disableManifestCheck = false) => {\r\n    return new Database(urlToScene, callbackManifestChecked, disableManifestCheck);\r\n};\r\n\r\n/**\r\n * Class used to enable access to IndexedDB\r\n * @see https://doc.babylonjs.com/how_to/caching_resources_in_indexeddb\r\n */\r\nexport class Database implements IOfflineProvider {\r\n    private _currentSceneUrl: string;\r\n    private _db: Nullable<IDBDatabase>;\r\n    private _enableSceneOffline: boolean;\r\n    private _enableTexturesOffline: boolean;\r\n    private _manifestVersionFound: number;\r\n    private _mustUpdateRessources: boolean;\r\n    private _hasReachedQuota: boolean;\r\n    private _isSupported: boolean;\r\n\r\n    // Handling various flavors of prefixed version of IndexedDB\r\n    private _idbFactory = <IDBFactory>(typeof window !== \"undefined\" ? window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB : indexedDB);\r\n\r\n    /** Gets a boolean indicating if the user agent supports blob storage (this value will be updated after creating the first Database object) */\r\n    private static _IsUASupportingBlobStorage = true;\r\n\r\n    /**\r\n     * Gets a boolean indicating if Database storage is enabled (off by default)\r\n     */\r\n    static IDBStorageEnabled = false;\r\n\r\n    /**\r\n     * Gets a boolean indicating if scene must be saved in the database\r\n     */\r\n    public get enableSceneOffline(): boolean {\r\n        return this._enableSceneOffline;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if textures must be saved in the database\r\n     */\r\n    public get enableTexturesOffline(): boolean {\r\n        return this._enableTexturesOffline;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Database\r\n     * @param urlToScene defines the url to load the scene\r\n     * @param callbackManifestChecked defines the callback to use when manifest is checked\r\n     * @param disableManifestCheck defines a boolean indicating that we want to skip the manifest validation (it will be considered validated and up to date)\r\n     */\r\n    constructor(urlToScene: string, callbackManifestChecked: (checked: boolean) => any, disableManifestCheck = false) {\r\n        this._currentSceneUrl = Database._ReturnFullUrlLocation(urlToScene);\r\n        this._db = null;\r\n        this._enableSceneOffline = false;\r\n        this._enableTexturesOffline = false;\r\n        this._manifestVersionFound = 0;\r\n        this._mustUpdateRessources = false;\r\n        this._hasReachedQuota = false;\r\n\r\n        if (!Database.IDBStorageEnabled) {\r\n            callbackManifestChecked(true);\r\n        } else {\r\n            if (disableManifestCheck) {\r\n                this._enableSceneOffline = true;\r\n                this._enableTexturesOffline = true;\r\n                this._manifestVersionFound = 1;\r\n                Tools.SetImmediate(() => {\r\n                    callbackManifestChecked(true);\r\n                });\r\n            } else {\r\n                this._checkManifestFile(callbackManifestChecked);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _ParseURL = (url: string) => {\r\n        const a = document.createElement(\"a\");\r\n        a.href = url;\r\n        const urlWithoutHash = url.substring(0, url.lastIndexOf(\"#\"));\r\n        const fileName = url.substring(urlWithoutHash.lastIndexOf(\"/\") + 1, url.length);\r\n        const absLocation = url.substring(0, url.indexOf(fileName, 0));\r\n        return absLocation;\r\n    };\r\n\r\n    private static _ReturnFullUrlLocation = (url: string): string => {\r\n        if (url.indexOf(\"http:/\") === -1 && url.indexOf(\"https:/\") === -1 && typeof window !== \"undefined\") {\r\n            return Database._ParseURL(window.location.href) + url;\r\n        } else {\r\n            return url;\r\n        }\r\n    };\r\n\r\n    private _checkManifestFile(callbackManifestChecked: (checked: boolean) => any) {\r\n        const noManifestFile = () => {\r\n            this._enableSceneOffline = false;\r\n            this._enableTexturesOffline = false;\r\n            callbackManifestChecked(false);\r\n        };\r\n\r\n        const createManifestURL = (): string => {\r\n            try {\r\n                // make sure we have a valid URL.\r\n                if (typeof URL === \"function\" && this._currentSceneUrl.indexOf(\"http\") === 0) {\r\n                    // we don't have the base url, so the URL string must have a protocol\r\n                    const url = new URL(this._currentSceneUrl);\r\n                    url.pathname += \".manifest\";\r\n                    return url.toString();\r\n                }\r\n            } catch (e) {\r\n                // defensive - if this fails for any reason, fall back to the older method\r\n            }\r\n\r\n            return `${this._currentSceneUrl}.manifest`;\r\n        };\r\n\r\n        let timeStampUsed = false;\r\n        let manifestURL = createManifestURL();\r\n\r\n        const xhr = new WebRequest();\r\n\r\n        if (navigator.onLine) {\r\n            // Adding a timestamp to by-pass browsers' cache\r\n            timeStampUsed = true;\r\n            manifestURL = manifestURL + (manifestURL.match(/\\?/) == null ? \"?\" : \"&\") + Date.now();\r\n        }\r\n        xhr.open(\"GET\", manifestURL);\r\n\r\n        xhr.addEventListener(\r\n            \"load\",\r\n            () => {\r\n                if (xhr.status === 200 || Database._ValidateXHRData(xhr, 1)) {\r\n                    try {\r\n                        const manifestFile = JSON.parse(xhr.response);\r\n                        this._enableSceneOffline = manifestFile.enableSceneOffline;\r\n                        this._enableTexturesOffline = manifestFile.enableTexturesOffline && Database._IsUASupportingBlobStorage;\r\n                        if (manifestFile.version && !isNaN(parseInt(manifestFile.version))) {\r\n                            this._manifestVersionFound = manifestFile.version;\r\n                        }\r\n                        callbackManifestChecked(true);\r\n                    } catch (ex) {\r\n                        noManifestFile();\r\n                    }\r\n                } else {\r\n                    noManifestFile();\r\n                }\r\n            },\r\n            false\r\n        );\r\n\r\n        xhr.addEventListener(\r\n            \"error\",\r\n            () => {\r\n                if (timeStampUsed) {\r\n                    timeStampUsed = false;\r\n                    // Let's retry without the timeStamp\r\n                    // It could fail when coupled with HTML5 Offline API\r\n                    const retryManifestURL = createManifestURL();\r\n                    xhr.open(\"GET\", retryManifestURL);\r\n                    xhr.send();\r\n                } else {\r\n                    noManifestFile();\r\n                }\r\n            },\r\n            false\r\n        );\r\n\r\n        try {\r\n            xhr.send();\r\n        } catch (ex) {\r\n            Logger.Error(\"Error on XHR send request.\");\r\n            callbackManifestChecked(false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Open the database and make it available\r\n     * @param successCallback defines the callback to call on success\r\n     * @param errorCallback defines the callback to call on error\r\n     */\r\n    public open(successCallback: () => void, errorCallback: () => void): void {\r\n        const handleError = () => {\r\n            this._isSupported = false;\r\n            if (errorCallback) {\r\n                errorCallback();\r\n            }\r\n        };\r\n\r\n        if (!this._idbFactory || !(this._enableSceneOffline || this._enableTexturesOffline)) {\r\n            // Your browser doesn't support IndexedDB\r\n            this._isSupported = false;\r\n            if (errorCallback) {\r\n                errorCallback();\r\n            }\r\n        } else {\r\n            // If the DB hasn't been opened or created yet\r\n            if (!this._db) {\r\n                this._hasReachedQuota = false;\r\n                this._isSupported = true;\r\n\r\n                const request: IDBOpenDBRequest = this._idbFactory.open(\"babylonjs\", 1);\r\n\r\n                // Could occur if user is blocking the quota for the DB and/or doesn't grant access to IndexedDB\r\n                request.onerror = () => {\r\n                    handleError();\r\n                };\r\n\r\n                // executes when a version change transaction cannot complete due to other active transactions\r\n                request.onblocked = () => {\r\n                    Logger.Error(\"IDB request blocked. Please reload the page.\");\r\n                    handleError();\r\n                };\r\n\r\n                // DB has been opened successfully\r\n                request.onsuccess = () => {\r\n                    this._db = request.result;\r\n                    successCallback();\r\n                };\r\n\r\n                // Initialization of the DB. Creating Scenes & Textures stores\r\n                request.onupgradeneeded = (event: IDBVersionChangeEvent) => {\r\n                    this._db = (<any>event.target).result;\r\n                    if (this._db) {\r\n                        try {\r\n                            this._db.createObjectStore(\"scenes\", { keyPath: \"sceneUrl\" });\r\n                            this._db.createObjectStore(\"versions\", { keyPath: \"sceneUrl\" });\r\n                            this._db.createObjectStore(\"textures\", { keyPath: \"textureUrl\" });\r\n                        } catch (ex) {\r\n                            Logger.Error(\"Error while creating object stores. Exception: \" + ex.message);\r\n                            handleError();\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n            // DB has already been created and opened\r\n            else {\r\n                if (successCallback) {\r\n                    successCallback();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads an image from the database\r\n     * @param url defines the url to load from\r\n     * @param image defines the target DOM image\r\n     */\r\n    public loadImage(url: string, image: HTMLImageElement) {\r\n        const completeURL = Database._ReturnFullUrlLocation(url);\r\n\r\n        const saveAndLoadImage = () => {\r\n            if (!this._hasReachedQuota && this._db !== null) {\r\n                // the texture is not yet in the DB, let's try to save it\r\n                this._saveImageIntoDBAsync(completeURL, image);\r\n            }\r\n            // If the texture is not in the DB and we've reached the DB quota limit\r\n            // let's load it directly from the web\r\n            else {\r\n                image.src = url;\r\n            }\r\n        };\r\n\r\n        if (!this._mustUpdateRessources) {\r\n            this._loadImageFromDBAsync(completeURL, image, saveAndLoadImage);\r\n        }\r\n        // First time we're download the images or update requested in the manifest file by a version change\r\n        else {\r\n            saveAndLoadImage();\r\n        }\r\n    }\r\n\r\n    private _loadImageFromDBAsync(url: string, image: HTMLImageElement, notInDBCallback: () => any) {\r\n        if (this._isSupported && this._db !== null) {\r\n            let texture: any;\r\n            const transaction: IDBTransaction = this._db.transaction([\"textures\"]);\r\n\r\n            transaction.onabort = () => {\r\n                image.src = url;\r\n            };\r\n\r\n            transaction.oncomplete = () => {\r\n                let blobTextureURL: string;\r\n                if (texture) {\r\n                    const URL = window.URL || window.webkitURL;\r\n                    blobTextureURL = URL.createObjectURL(texture.data);\r\n                    image.onerror = () => {\r\n                        Logger.Error(\"Error loading image from blob URL: \" + blobTextureURL + \" switching back to web url: \" + url);\r\n                        image.src = url;\r\n                    };\r\n                    image.src = blobTextureURL;\r\n                } else {\r\n                    notInDBCallback();\r\n                }\r\n            };\r\n\r\n            const getRequest: IDBRequest = transaction.objectStore(\"textures\").get(url);\r\n\r\n            getRequest.onsuccess = (event) => {\r\n                texture = (<any>event.target).result;\r\n            };\r\n            getRequest.onerror = () => {\r\n                Logger.Error(\"Error loading texture \" + url + \" from DB.\");\r\n                image.src = url;\r\n            };\r\n        } else {\r\n            Logger.Error(\"Error: IndexedDB not supported by your browser or BabylonJS Database is not open.\");\r\n            image.src = url;\r\n        }\r\n    }\r\n\r\n    private _saveImageIntoDBAsync(url: string, image: HTMLImageElement) {\r\n        let blob: Blob;\r\n\r\n        if (this._isSupported) {\r\n            // In case of error (type not supported or quota exceeded), we're at least sending back XHR data to allow texture loading later on\r\n            const generateBlobUrl = () => {\r\n                let blobTextureURL;\r\n\r\n                if (blob) {\r\n                    const URL = window.URL || window.webkitURL;\r\n                    try {\r\n                        blobTextureURL = URL.createObjectURL(blob);\r\n                    } catch (ex) {\r\n                        // Chrome is raising a type error if we're setting the oneTimeOnly parameter\r\n                        blobTextureURL = URL.createObjectURL(blob);\r\n                    }\r\n                }\r\n\r\n                if (blobTextureURL) {\r\n                    image.src = blobTextureURL;\r\n                }\r\n            };\r\n\r\n            if (Database._IsUASupportingBlobStorage) {\r\n                // Create XHR\r\n                const xhr = new WebRequest();\r\n\r\n                xhr.open(\"GET\", url);\r\n                xhr.responseType = \"blob\";\r\n\r\n                xhr.addEventListener(\r\n                    \"load\",\r\n                    () => {\r\n                        if (xhr.status === 200 && this._db) {\r\n                            // Blob as response\r\n                            blob = xhr.response;\r\n\r\n                            const transaction = this._db.transaction([\"textures\"], \"readwrite\");\r\n\r\n                            // the transaction could abort because of a QuotaExceededError error\r\n                            transaction.onabort = (event) => {\r\n                                try {\r\n                                    //backwards compatibility with ts 1.0, srcElement doesn't have an \"error\" according to ts 1.3\r\n                                    const srcElement = <any>(event.srcElement || event.target);\r\n                                    const error = srcElement.error;\r\n                                    if (error && error.name === \"QuotaExceededError\") {\r\n                                        this._hasReachedQuota = true;\r\n                                    }\r\n                                } catch (ex) {}\r\n                                generateBlobUrl();\r\n                            };\r\n\r\n                            transaction.oncomplete = () => {\r\n                                generateBlobUrl();\r\n                            };\r\n\r\n                            const newTexture = { textureUrl: url, data: blob };\r\n\r\n                            try {\r\n                                // Put the blob into the dabase\r\n                                const addRequest = transaction.objectStore(\"textures\").put(newTexture);\r\n                                addRequest.onsuccess = () => {};\r\n                                addRequest.onerror = () => {\r\n                                    generateBlobUrl();\r\n                                };\r\n                            } catch (ex) {\r\n                                // \"DataCloneError\" generated by Chrome when you try to inject blob into IndexedDB\r\n                                if (ex.code === 25) {\r\n                                    Database._IsUASupportingBlobStorage = false;\r\n                                    this._enableTexturesOffline = false;\r\n                                }\r\n                                image.src = url;\r\n                            }\r\n                        } else {\r\n                            image.src = url;\r\n                        }\r\n                    },\r\n                    false\r\n                );\r\n\r\n                xhr.addEventListener(\r\n                    \"error\",\r\n                    () => {\r\n                        Logger.Error(\"Error in XHR request in BABYLON.Database.\");\r\n                        image.src = url;\r\n                    },\r\n                    false\r\n                );\r\n\r\n                xhr.send();\r\n            } else {\r\n                image.src = url;\r\n            }\r\n        } else {\r\n            Logger.Error(\"Error: IndexedDB not supported by your browser or Babylon.js database is not open.\");\r\n            image.src = url;\r\n        }\r\n    }\r\n\r\n    private _checkVersionFromDB(url: string, versionLoaded: (version: number) => void) {\r\n        const updateVersion = () => {\r\n            // the version is not yet in the DB or we need to update it\r\n            this._saveVersionIntoDBAsync(url, versionLoaded);\r\n        };\r\n        this._loadVersionFromDBAsync(url, versionLoaded, updateVersion);\r\n    }\r\n\r\n    private _loadVersionFromDBAsync(url: string, callback: (version: number) => void, updateInDBCallback: () => void) {\r\n        if (this._isSupported && this._db) {\r\n            let version: any;\r\n            try {\r\n                const transaction = this._db.transaction([\"versions\"]);\r\n\r\n                transaction.oncomplete = () => {\r\n                    if (version) {\r\n                        // If the version in the JSON file is different from the version in DB\r\n                        if (this._manifestVersionFound !== version.data) {\r\n                            this._mustUpdateRessources = true;\r\n                            updateInDBCallback();\r\n                        } else {\r\n                            callback(version.data);\r\n                        }\r\n                    }\r\n                    // version was not found in DB\r\n                    else {\r\n                        this._mustUpdateRessources = true;\r\n                        updateInDBCallback();\r\n                    }\r\n                };\r\n\r\n                transaction.onabort = () => {\r\n                    callback(-1);\r\n                };\r\n\r\n                const getRequest = transaction.objectStore(\"versions\").get(url);\r\n\r\n                getRequest.onsuccess = (event) => {\r\n                    version = (<any>event.target).result;\r\n                };\r\n                getRequest.onerror = () => {\r\n                    Logger.Error(\"Error loading version for scene \" + url + \" from DB.\");\r\n                    callback(-1);\r\n                };\r\n            } catch (ex) {\r\n                Logger.Error(\"Error while accessing 'versions' object store (READ OP). Exception: \" + ex.message);\r\n                callback(-1);\r\n            }\r\n        } else {\r\n            Logger.Error(\"Error: IndexedDB not supported by your browser or Babylon.js database is not open.\");\r\n            callback(-1);\r\n        }\r\n    }\r\n\r\n    private _saveVersionIntoDBAsync(url: string, callback: (version: number) => void) {\r\n        if (this._isSupported && !this._hasReachedQuota && this._db) {\r\n            try {\r\n                // Open a transaction to the database\r\n                const transaction = this._db.transaction([\"versions\"], \"readwrite\");\r\n\r\n                // the transaction could abort because of a QuotaExceededError error\r\n                transaction.onabort = (event) => {\r\n                    try {\r\n                        //backwards compatibility with ts 1.0, srcElement doesn't have an \"error\" according to ts 1.3\r\n                        const error = (<any>event.srcElement)[\"error\"];\r\n                        if (error && error.name === \"QuotaExceededError\") {\r\n                            this._hasReachedQuota = true;\r\n                        }\r\n                    } catch (ex) {}\r\n                    callback(-1);\r\n                };\r\n\r\n                transaction.oncomplete = () => {\r\n                    callback(this._manifestVersionFound);\r\n                };\r\n\r\n                const newVersion = { sceneUrl: url, data: this._manifestVersionFound };\r\n\r\n                // Put the scene into the database\r\n                const addRequest = transaction.objectStore(\"versions\").put(newVersion);\r\n                addRequest.onsuccess = () => {};\r\n                addRequest.onerror = () => {\r\n                    Logger.Error(\"Error in DB add version request in BABYLON.Database.\");\r\n                };\r\n            } catch (ex) {\r\n                Logger.Error(\"Error while accessing 'versions' object store (WRITE OP). Exception: \" + ex.message);\r\n                callback(-1);\r\n            }\r\n        } else {\r\n            callback(-1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads a file from database\r\n     * @param url defines the URL to load from\r\n     * @param sceneLoaded defines a callback to call on success\r\n     * @param progressCallBack defines a callback to call when progress changed\r\n     * @param errorCallback defines a callback to call on error\r\n     * @param useArrayBuffer defines a boolean to use array buffer instead of text string\r\n     */\r\n    public loadFile(url: string, sceneLoaded: (data: any) => void, progressCallBack?: (data: any) => void, errorCallback?: () => void, useArrayBuffer?: boolean): void {\r\n        const completeUrl = Database._ReturnFullUrlLocation(url);\r\n\r\n        const saveAndLoadFile = () => {\r\n            // the scene is not yet in the DB, let's try to save it\r\n            this._saveFileAsync(completeUrl, sceneLoaded, progressCallBack, useArrayBuffer, errorCallback);\r\n        };\r\n\r\n        this._checkVersionFromDB(completeUrl, (version) => {\r\n            if (version !== -1) {\r\n                if (!this._mustUpdateRessources) {\r\n                    this._loadFileAsync(completeUrl, sceneLoaded, saveAndLoadFile);\r\n                } else {\r\n                    this._saveFileAsync(completeUrl, sceneLoaded, progressCallBack, useArrayBuffer, errorCallback);\r\n                }\r\n            } else {\r\n                if (errorCallback) {\r\n                    errorCallback();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private _loadFileAsync(url: string, callback: (data?: any) => void, notInDBCallback: () => void) {\r\n        if (this._isSupported && this._db) {\r\n            let targetStore: string;\r\n            if (url.indexOf(\".babylon\") !== -1) {\r\n                targetStore = \"scenes\";\r\n            } else {\r\n                targetStore = \"textures\";\r\n            }\r\n\r\n            let file: any;\r\n            const transaction = this._db.transaction([targetStore]);\r\n\r\n            transaction.oncomplete = () => {\r\n                if (file) {\r\n                    callback(file.data);\r\n                }\r\n                // file was not found in DB\r\n                else {\r\n                    notInDBCallback();\r\n                }\r\n            };\r\n\r\n            transaction.onabort = () => {\r\n                notInDBCallback();\r\n            };\r\n\r\n            const getRequest = transaction.objectStore(targetStore).get(url);\r\n\r\n            getRequest.onsuccess = (event) => {\r\n                file = (<any>event.target).result;\r\n            };\r\n            getRequest.onerror = () => {\r\n                Logger.Error(\"Error loading file \" + url + \" from DB.\");\r\n                notInDBCallback();\r\n            };\r\n        } else {\r\n            Logger.Error(\"Error: IndexedDB not supported by your browser or BabylonJS Database is not open.\");\r\n            callback();\r\n        }\r\n    }\r\n\r\n    private _saveFileAsync(\r\n        url: string,\r\n        callback: (data?: any) => void,\r\n        progressCallback?: (this: XMLHttpRequestEventTarget, ev: ProgressEvent) => any,\r\n        useArrayBuffer?: boolean,\r\n        errorCallback?: (data?: any) => void\r\n    ) {\r\n        if (this._isSupported) {\r\n            let targetStore: string;\r\n            if (url.indexOf(\".babylon\") !== -1) {\r\n                targetStore = \"scenes\";\r\n            } else {\r\n                targetStore = \"textures\";\r\n            }\r\n\r\n            // Create XHR\r\n            const xhr = new WebRequest();\r\n            let fileData: any;\r\n            xhr.open(\"GET\", url + (url.match(/\\?/) == null ? \"?\" : \"&\") + Date.now());\r\n\r\n            if (useArrayBuffer) {\r\n                xhr.responseType = \"arraybuffer\";\r\n            }\r\n\r\n            if (progressCallback) {\r\n                xhr.onprogress = progressCallback;\r\n            }\r\n\r\n            xhr.addEventListener(\r\n                \"load\",\r\n                () => {\r\n                    if (xhr.status === 200 || (xhr.status < 400 && Database._ValidateXHRData(xhr, !useArrayBuffer ? 1 : 6))) {\r\n                        // Blob as response\r\n                        fileData = !useArrayBuffer ? xhr.responseText : xhr.response;\r\n\r\n                        if (!this._hasReachedQuota && this._db) {\r\n                            // Open a transaction to the database\r\n                            const transaction = this._db.transaction([targetStore], \"readwrite\");\r\n\r\n                            // the transaction could abort because of a QuotaExceededError error\r\n                            transaction.onabort = (event) => {\r\n                                try {\r\n                                    //backwards compatibility with ts 1.0, srcElement doesn't have an \"error\" according to ts 1.3\r\n                                    const error = (<any>event.srcElement)[\"error\"];\r\n                                    if (error && error.name === \"QuotaExceededError\") {\r\n                                        this._hasReachedQuota = true;\r\n                                    }\r\n                                } catch (ex) {}\r\n                                callback(fileData);\r\n                            };\r\n\r\n                            transaction.oncomplete = () => {\r\n                                callback(fileData);\r\n                            };\r\n\r\n                            let newFile;\r\n                            if (targetStore === \"scenes\") {\r\n                                newFile = { sceneUrl: url, data: fileData, version: this._manifestVersionFound };\r\n                            } else {\r\n                                newFile = { textureUrl: url, data: fileData };\r\n                            }\r\n\r\n                            try {\r\n                                // Put the scene into the database\r\n                                const addRequest = transaction.objectStore(targetStore).put(newFile);\r\n                                addRequest.onsuccess = () => {};\r\n                                addRequest.onerror = () => {\r\n                                    Logger.Error(\"Error in DB add file request in BABYLON.Database.\");\r\n                                };\r\n                            } catch (ex) {\r\n                                callback(fileData);\r\n                            }\r\n                        } else {\r\n                            callback(fileData);\r\n                        }\r\n                    } else {\r\n                        if (xhr.status >= 400 && errorCallback) {\r\n                            errorCallback(xhr);\r\n                        } else {\r\n                            callback();\r\n                        }\r\n                    }\r\n                },\r\n                false\r\n            );\r\n\r\n            xhr.addEventListener(\r\n                \"error\",\r\n                () => {\r\n                    Logger.Error(\"error on XHR request.\");\r\n                    callback();\r\n                },\r\n                false\r\n            );\r\n\r\n            xhr.send();\r\n        } else {\r\n            Logger.Error(\"Error: IndexedDB not supported by your browser or Babylon.js database is not open.\");\r\n            callback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validates if xhr data is correct\r\n     * @param xhr defines the request to validate\r\n     * @param dataType defines the expected data type\r\n     * @returns true if data is correct\r\n     */\r\n    private static _ValidateXHRData(xhr: WebRequest, dataType = 7): boolean {\r\n        // 1 for text (.babylon, manifest and shaders), 2 for TGA, 4 for DDS, 7 for all\r\n\r\n        try {\r\n            if (dataType & 1) {\r\n                if (xhr.responseText && xhr.responseText.length > 0) {\r\n                    return true;\r\n                } else if (dataType === 1) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            if (dataType & 2) {\r\n                // Check header width and height since there is no \"TGA\" magic number\r\n                const tgaHeader = GetTGAHeader(xhr.response);\r\n\r\n                if (tgaHeader.width && tgaHeader.height && tgaHeader.width > 0 && tgaHeader.height > 0) {\r\n                    return true;\r\n                } else if (dataType === 2) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            if (dataType & 4) {\r\n                // Check for the \"DDS\" magic number\r\n                const ddsHeader = new Uint8Array(xhr.response, 0, 3);\r\n\r\n                if (ddsHeader[0] === 68 && ddsHeader[1] === 68 && ddsHeader[2] === 83) {\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n        } catch (e) {\r\n            // Global protection\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}