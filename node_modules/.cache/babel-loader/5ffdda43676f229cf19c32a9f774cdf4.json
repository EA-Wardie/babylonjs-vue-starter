{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/blackAndWhite.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * Post process used to render in black and white\n */\n\nvar BlackAndWhitePostProcess =\n/** @class */\nfunction (_super) {\n  __extends(BlackAndWhitePostProcess, _super);\n  /**\n   * Creates a black and white post process\n   * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#black-and-white\n   * @param name The name of the effect.\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   */\n\n\n  function BlackAndWhitePostProcess(name, options, camera, samplingMode, engine, reusable) {\n    var _this = _super.call(this, name, \"blackAndWhite\", [\"degree\"], null, options, camera, samplingMode, engine, reusable) || this;\n    /**\n     * Linear about to convert he result to black and white (default: 1)\n     */\n\n\n    _this.degree = 1;\n\n    _this.onApplyObservable.add(function (effect) {\n      effect.setFloat(\"degree\", _this.degree);\n    });\n\n    return _this;\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"BlackAndWhitePostProcess\" string\n   */\n\n\n  BlackAndWhitePostProcess.prototype.getClassName = function () {\n    return \"BlackAndWhitePostProcess\";\n  };\n  /**\n   * @param parsedPostProcess\n   * @param targetCamera\n   * @param scene\n   * @param rootUrl\n   * @hidden\n   */\n\n\n  BlackAndWhitePostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new BlackAndWhitePostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  __decorate([serialize()], BlackAndWhitePostProcess.prototype, \"degree\", void 0);\n\n  return BlackAndWhitePostProcess;\n}(PostProcess);\n\nexport { BlackAndWhitePostProcess };\nRegisterClass(\"BABYLON.BlackAndWhitePostProcess\", BlackAndWhitePostProcess);","map":{"version":3,"mappings":";;AACA,SAASA,WAAT,QAA4B,kBAA5B;AAKA,OAAO,sCAAP;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,SAAT,EAAoBC,mBAApB,QAA+C,uBAA/C;AAKA;;;;AAGA;AAAA;AAAA;AAA8CC;AAe1C;;;;;;;;;;;;AAUA,oCAAYC,IAAZ,EAA0BC,OAA1B,EAAgEC,MAAhE,EAAgFC,YAAhF,EAAuGC,MAAvG,EAAwHC,QAAxH,EAA0I;AAA1I,gBACIC,kBAAMN,IAAN,EAAY,eAAZ,EAA6B,CAAC,QAAD,CAA7B,EAAyC,IAAzC,EAA+CC,OAA/C,EAAwDC,MAAxD,EAAgEC,YAAhE,EAA8EC,MAA9E,EAAsFC,QAAtF,KAA+F,IADnG;AAxBA;;;;;AAIOE,mBAAS,CAAT;;AAuBHA,SAAI,CAACC,iBAAL,CAAuBC,GAAvB,CAA2B,UAACC,MAAD,EAAe;AACtCA,YAAM,CAACC,QAAP,CAAgB,QAAhB,EAA0BJ,KAAI,CAACK,MAA/B;AACH,KAFD;;;AAGH;AAxBD;;;;;;AAIOC,oDAAP;AACI,WAAO,0BAAP;AACH,GAFM;AAsBP;;;;;;;;;AAOcA,oCAAd,UAAqBC,iBAArB,EAA6CC,YAA7C,EAAmEC,KAAnE,EAAiFC,OAAjF,EAAgG;AAC5F,WAAOnB,mBAAmB,CAACoB,KAApB,CACH;AACI,aAAO,IAAIL,wBAAJ,CACHC,iBAAiB,CAACd,IADf,EAEHc,iBAAiB,CAACb,OAFf,EAGHc,YAHG,EAIHD,iBAAiB,CAACK,wBAJf,EAKHH,KAAK,CAACI,SAAN,EALG,EAMHN,iBAAiB,CAACT,QANf,CAAP;AAQH,KAVE,EAWHS,iBAXG,EAYHE,KAZG,EAaHC,OAbG,CAAP;AAeH,GAhBa;;AAnCdI,cADCxB,SAAS,EACV;;AAoDJ;AAAC,CAzDD,CAA8CF,WAA9C;;SAAakB;AA2DbjB,aAAa,CAAC,kCAAD,EAAqCiB,wBAArC,CAAb","names":["PostProcess","RegisterClass","serialize","SerializationHelper","__extends","name","options","camera","samplingMode","engine","reusable","_super","_this","onApplyObservable","add","effect","setFloat","degree","BlackAndWhitePostProcess","parsedPostProcess","targetCamera","scene","rootUrl","Parse","renderTargetSamplingMode","getEngine","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/PostProcesses/blackAndWhitePostProcess.ts"],"sourcesContent":["import type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { Engine } from \"../Engines/engine\";\r\n\r\nimport \"../Shaders/blackAndWhite.fragment\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { serialize, SerializationHelper } from \"../Misc/decorators\";\r\nimport type { Nullable } from \"../types\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * Post process used to render in black and white\r\n */\r\nexport class BlackAndWhitePostProcess extends PostProcess {\r\n    /**\r\n     * Linear about to convert he result to black and white (default: 1)\r\n     */\r\n    @serialize()\r\n    public degree = 1;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"BlackAndWhitePostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"BlackAndWhitePostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a black and white post process\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#black-and-white\r\n     * @param name The name of the effect.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     */\r\n    constructor(name: string, options: number | PostProcessOptions, camera: Camera, samplingMode?: number, engine?: Engine, reusable?: boolean) {\r\n        super(name, \"blackAndWhite\", [\"degree\"], null, options, camera, samplingMode, engine, reusable);\r\n\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setFloat(\"degree\", this.degree);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param parsedPostProcess\r\n     * @param targetCamera\r\n     * @param scene\r\n     * @param rootUrl\r\n     * @hidden\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string): Nullable<BlackAndWhitePostProcess> {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new BlackAndWhitePostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    scene.getEngine(),\r\n                    parsedPostProcess.reusable\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.BlackAndWhitePostProcess\", BlackAndWhitePostProcess);\r\n"]},"metadata":{},"sourceType":"module"}