{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.define-property.js\";\n\n/**\n * Logger used throughout the application to allow configuration of\n * the log level required for the messages.\n */\nvar Logger =\n/** @class */\nfunction () {\n  function Logger() {}\n\n  Logger._CheckLimit = function (message, limit) {\n    var entry = Logger._LogLimitOutputs[message];\n\n    if (!entry) {\n      entry = {\n        limit: limit,\n        current: 1\n      };\n      Logger._LogLimitOutputs[message] = entry;\n    } else {\n      entry.current++;\n    }\n\n    return entry.current <= entry.limit;\n  };\n\n  Logger._GenerateLimitMessage = function (message, messageType) {\n    var entry = Logger._LogLimitOutputs[message];\n\n    if (!entry || !Logger.MessageLimitReached) {\n      return;\n    }\n\n    if (entry.current === entry.limit) {\n      switch (messageType) {\n        case 0:\n          Logger.Log(Logger.MessageLimitReached.replace(/%LIMIT%/g, \"\" + entry.limit).replace(/%TYPE%/g, \"log\"));\n          break;\n\n        case 1:\n          Logger.Warn(Logger.MessageLimitReached.replace(/%LIMIT%/g, \"\" + entry.limit).replace(/%TYPE%/g, \"warning\"));\n          break;\n\n        case 2:\n          Logger.Error(Logger.MessageLimitReached.replace(/%LIMIT%/g, \"\" + entry.limit).replace(/%TYPE%/g, \"error\"));\n          break;\n      }\n    }\n  };\n\n  Logger._AddLogEntry = function (entry) {\n    Logger._LogCache = entry + Logger._LogCache;\n\n    if (Logger.OnNewCacheEntry) {\n      Logger.OnNewCacheEntry(entry);\n    }\n  };\n\n  Logger._FormatMessage = function (message) {\n    var padStr = function padStr(i) {\n      return i < 10 ? \"0\" + i : \"\" + i;\n    };\n\n    var date = new Date();\n    return \"[\" + padStr(date.getHours()) + \":\" + padStr(date.getMinutes()) + \":\" + padStr(date.getSeconds()) + \"]: \" + message;\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  Logger._LogDisabled = function (message, limit) {// nothing to do\n  };\n\n  Logger._LogEnabled = function (message, limit) {\n    if (limit !== undefined && !Logger._CheckLimit(message, limit)) {\n      return;\n    }\n\n    var formattedMessage = Logger._FormatMessage(message);\n\n    console.log(\"BJS - \" + formattedMessage);\n    var entry = \"<div style='color:white'>\" + formattedMessage + \"</div><br>\";\n\n    Logger._AddLogEntry(entry);\n\n    Logger._GenerateLimitMessage(message, 0);\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  Logger._WarnDisabled = function (message, limit) {// nothing to do\n  };\n\n  Logger._WarnEnabled = function (message, limit) {\n    if (limit !== undefined && !Logger._CheckLimit(message, limit)) {\n      return;\n    }\n\n    var formattedMessage = Logger._FormatMessage(message);\n\n    console.warn(\"BJS - \" + formattedMessage);\n    var entry = \"<div style='color:orange'>\" + message + \"</div><br>\";\n\n    Logger._AddLogEntry(entry);\n\n    Logger._GenerateLimitMessage(message, 1);\n  }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  Logger._ErrorDisabled = function (message, limit) {// nothing to do\n  };\n\n  Logger._ErrorEnabled = function (message, limit) {\n    if (limit !== undefined && !Logger._CheckLimit(message, limit)) {\n      return;\n    }\n\n    var formattedMessage = Logger._FormatMessage(message);\n\n    Logger.errorsCount++;\n    console.error(\"BJS - \" + formattedMessage);\n    var entry = \"<div style='color:red'>\" + formattedMessage + \"</div><br>\";\n\n    Logger._AddLogEntry(entry);\n\n    Logger._GenerateLimitMessage(message, 2);\n  };\n\n  Object.defineProperty(Logger, \"LogCache\", {\n    /**\n     * Gets current log cache (list of logs)\n     */\n    get: function get() {\n      return Logger._LogCache;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Clears the log cache\n   */\n\n  Logger.ClearLogCache = function () {\n    Logger._LogCache = \"\";\n    Logger._LogLimitOutputs = {};\n    Logger.errorsCount = 0;\n  };\n\n  Object.defineProperty(Logger, \"LogLevels\", {\n    /**\n     * Sets the current log level (MessageLogLevel / WarningLogLevel / ErrorLogLevel)\n     */\n    set: function set(level) {\n      if ((level & Logger.MessageLogLevel) === Logger.MessageLogLevel) {\n        Logger.Log = Logger._LogEnabled;\n      } else {\n        Logger.Log = Logger._LogDisabled;\n      }\n\n      if ((level & Logger.WarningLogLevel) === Logger.WarningLogLevel) {\n        Logger.Warn = Logger._WarnEnabled;\n      } else {\n        Logger.Warn = Logger._WarnDisabled;\n      }\n\n      if ((level & Logger.ErrorLogLevel) === Logger.ErrorLogLevel) {\n        Logger.Error = Logger._ErrorEnabled;\n      } else {\n        Logger.Error = Logger._ErrorDisabled;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * No log\n   */\n\n  Logger.NoneLogLevel = 0;\n  /**\n   * Only message logs\n   */\n\n  Logger.MessageLogLevel = 1;\n  /**\n   * Only warning logs\n   */\n\n  Logger.WarningLogLevel = 2;\n  /**\n   * Only error logs\n   */\n\n  Logger.ErrorLogLevel = 4;\n  /**\n   * All logs\n   */\n\n  Logger.AllLogLevel = 7;\n  /**\n   * Message to display when a message has been logged too many times\n   */\n\n  Logger.MessageLimitReached = \"Too many %TYPE%s (%LIMIT%), no more %TYPE%s will be reported for this message.\";\n  Logger._LogCache = \"\";\n  Logger._LogLimitOutputs = {};\n  /**\n   * Gets a value indicating the number of loading errors\n   * @ignorenaming\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n\n  Logger.errorsCount = 0;\n  /**\n   * Log a message to the console\n   */\n\n  Logger.Log = Logger._LogEnabled;\n  /**\n   * Write a warning message to the console\n   */\n\n  Logger.Warn = Logger._WarnEnabled;\n  /**\n   * Write an error message to the console\n   */\n\n  Logger.Error = Logger._ErrorEnabled;\n  return Logger;\n}();\n\nexport { Logger };","map":{"version":3,"mappings":"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","names":["Logger","message","limit","entry","_LogLimitOutputs","current","messageType","MessageLimitReached","Log","replace","Warn","Error","_LogCache","OnNewCacheEntry","padStr","i","date","Date","getHours","getMinutes","getSeconds","undefined","_CheckLimit","formattedMessage","_FormatMessage","console","log","_AddLogEntry","_GenerateLimitMessage","warn","errorsCount","error","Object","level","MessageLogLevel","_LogEnabled","_LogDisabled","WarningLogLevel","_WarnEnabled","_WarnDisabled","ErrorLogLevel","_ErrorEnabled","_ErrorDisabled"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Misc/logger.ts"],"sourcesContent":["/**\r\n * Logger used throughout the application to allow configuration of\r\n * the log level required for the messages.\r\n */\r\nexport class Logger {\r\n    /**\r\n     * No log\r\n     */\r\n    public static readonly NoneLogLevel = 0;\r\n    /**\r\n     * Only message logs\r\n     */\r\n    public static readonly MessageLogLevel = 1;\r\n    /**\r\n     * Only warning logs\r\n     */\r\n    public static readonly WarningLogLevel = 2;\r\n    /**\r\n     * Only error logs\r\n     */\r\n    public static readonly ErrorLogLevel = 4;\r\n    /**\r\n     * All logs\r\n     */\r\n    public static readonly AllLogLevel = 7;\r\n\r\n    /**\r\n     * Message to display when a message has been logged too many times\r\n     */\r\n    public static MessageLimitReached = \"Too many %TYPE%s (%LIMIT%), no more %TYPE%s will be reported for this message.\";\r\n\r\n    private static _LogCache = \"\";\r\n    private static _LogLimitOutputs: { [message: string]: { limit: number; current: number } } = {};\r\n\r\n    /**\r\n     * Gets a value indicating the number of loading errors\r\n     * @ignorenaming\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static errorsCount = 0;\r\n\r\n    /**\r\n     * Callback called when a new log is added\r\n     */\r\n    public static OnNewCacheEntry: (entry: string) => void;\r\n\r\n    private static _CheckLimit(message: string, limit: number): boolean {\r\n        let entry = Logger._LogLimitOutputs[message];\r\n        if (!entry) {\r\n            entry = { limit, current: 1 };\r\n            Logger._LogLimitOutputs[message] = entry;\r\n        } else {\r\n            entry.current++;\r\n        }\r\n        return entry.current <= entry.limit;\r\n    }\r\n\r\n    private static _GenerateLimitMessage(message: string, messageType: number): void {\r\n        const entry = Logger._LogLimitOutputs[message];\r\n        if (!entry || !Logger.MessageLimitReached) {\r\n            return;\r\n        }\r\n        if (entry.current === entry.limit) {\r\n            switch (messageType) {\r\n                case 0:\r\n                    Logger.Log(Logger.MessageLimitReached.replace(/%LIMIT%/g, \"\" + entry.limit).replace(/%TYPE%/g, \"log\"));\r\n                    break;\r\n                case 1:\r\n                    Logger.Warn(Logger.MessageLimitReached.replace(/%LIMIT%/g, \"\" + entry.limit).replace(/%TYPE%/g, \"warning\"));\r\n                    break;\r\n                case 2:\r\n                    Logger.Error(Logger.MessageLimitReached.replace(/%LIMIT%/g, \"\" + entry.limit).replace(/%TYPE%/g, \"error\"));\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _AddLogEntry(entry: string) {\r\n        Logger._LogCache = entry + Logger._LogCache;\r\n\r\n        if (Logger.OnNewCacheEntry) {\r\n            Logger.OnNewCacheEntry(entry);\r\n        }\r\n    }\r\n\r\n    private static _FormatMessage(message: string): string {\r\n        const padStr = (i: number) => (i < 10 ? \"0\" + i : \"\" + i);\r\n\r\n        const date = new Date();\r\n        return \"[\" + padStr(date.getHours()) + \":\" + padStr(date.getMinutes()) + \":\" + padStr(date.getSeconds()) + \"]: \" + message;\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private static _LogDisabled(message: string, limit?: number): void {\r\n        // nothing to do\r\n    }\r\n    private static _LogEnabled(message: string, limit?: number): void {\r\n        if (limit !== undefined && !Logger._CheckLimit(message, limit)) {\r\n            return;\r\n        }\r\n\r\n        const formattedMessage = Logger._FormatMessage(message);\r\n        console.log(\"BJS - \" + formattedMessage);\r\n\r\n        const entry = \"<div style='color:white'>\" + formattedMessage + \"</div><br>\";\r\n        Logger._AddLogEntry(entry);\r\n\r\n        Logger._GenerateLimitMessage(message, 0);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private static _WarnDisabled(message: string, limit?: number): void {\r\n        // nothing to do\r\n    }\r\n    private static _WarnEnabled(message: string, limit?: number): void {\r\n        if (limit !== undefined && !Logger._CheckLimit(message, limit)) {\r\n            return;\r\n        }\r\n\r\n        const formattedMessage = Logger._FormatMessage(message);\r\n        console.warn(\"BJS - \" + formattedMessage);\r\n\r\n        const entry = \"<div style='color:orange'>\" + message + \"</div><br>\";\r\n        Logger._AddLogEntry(entry);\r\n\r\n        Logger._GenerateLimitMessage(message, 1);\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    private static _ErrorDisabled(message: string, limit?: number): void {\r\n        // nothing to do\r\n    }\r\n    private static _ErrorEnabled(message: string, limit?: number): void {\r\n        if (limit !== undefined && !Logger._CheckLimit(message, limit)) {\r\n            return;\r\n        }\r\n\r\n        const formattedMessage = Logger._FormatMessage(message);\r\n        Logger.errorsCount++;\r\n        console.error(\"BJS - \" + formattedMessage);\r\n\r\n        const entry = \"<div style='color:red'>\" + formattedMessage + \"</div><br>\";\r\n        Logger._AddLogEntry(entry);\r\n\r\n        Logger._GenerateLimitMessage(message, 2);\r\n    }\r\n\r\n    /**\r\n     * Log a message to the console\r\n     */\r\n    public static Log: (message: string, limit?: number) => void = Logger._LogEnabled;\r\n\r\n    /**\r\n     * Write a warning message to the console\r\n     */\r\n    public static Warn: (message: string, limit?: number) => void = Logger._WarnEnabled;\r\n\r\n    /**\r\n     * Write an error message to the console\r\n     */\r\n    public static Error: (message: string, limit?: number) => void = Logger._ErrorEnabled;\r\n\r\n    /**\r\n     * Gets current log cache (list of logs)\r\n     */\r\n    public static get LogCache(): string {\r\n        return Logger._LogCache;\r\n    }\r\n\r\n    /**\r\n     * Clears the log cache\r\n     */\r\n    public static ClearLogCache(): void {\r\n        Logger._LogCache = \"\";\r\n        Logger._LogLimitOutputs = {};\r\n        Logger.errorsCount = 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the current log level (MessageLogLevel / WarningLogLevel / ErrorLogLevel)\r\n     */\r\n    public static set LogLevels(level: number) {\r\n        if ((level & Logger.MessageLogLevel) === Logger.MessageLogLevel) {\r\n            Logger.Log = Logger._LogEnabled;\r\n        } else {\r\n            Logger.Log = Logger._LogDisabled;\r\n        }\r\n\r\n        if ((level & Logger.WarningLogLevel) === Logger.WarningLogLevel) {\r\n            Logger.Warn = Logger._WarnEnabled;\r\n        } else {\r\n            Logger.Warn = Logger._WarnDisabled;\r\n        }\r\n\r\n        if ((level & Logger.ErrorLogLevel) === Logger.ErrorLogLevel) {\r\n            Logger.Error = Logger._ErrorEnabled;\r\n        } else {\r\n            Logger.Error = Logger._ErrorDisabled;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}