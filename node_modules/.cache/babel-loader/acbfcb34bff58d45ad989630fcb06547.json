{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { Vector2, Vector3, TmpVectors, Vector4 } from \"../Maths/math.vector.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\nimport { Scalar } from \"../Maths/math.scalar.js\";\n/**\n * A particle represents one of the element emitted by a particle system.\n * This is mainly define by its coordinates, direction, velocity and age.\n */\n\nvar Particle =\n/** @class */\nfunction () {\n  /**\n   * Creates a new instance Particle\n   * @param particleSystem the particle system the particle belongs to\n   */\n  function Particle(\n  /**\n   * The particle system the particle belongs to.\n   */\n  particleSystem) {\n    this.particleSystem = particleSystem;\n    /**\n     * The world position of the particle in the scene.\n     */\n\n    this.position = Vector3.Zero();\n    /**\n     * The world direction of the particle in the scene.\n     */\n\n    this.direction = Vector3.Zero();\n    /**\n     * The color of the particle.\n     */\n\n    this.color = new Color4(0, 0, 0, 0);\n    /**\n     * The color change of the particle per step.\n     */\n\n    this.colorStep = new Color4(0, 0, 0, 0);\n    /**\n     * Defines how long will the life of the particle be.\n     */\n\n    this.lifeTime = 1.0;\n    /**\n     * The current age of the particle.\n     */\n\n    this.age = 0;\n    /**\n     * The current size of the particle.\n     */\n\n    this.size = 0;\n    /**\n     * The current scale of the particle.\n     */\n\n    this.scale = new Vector2(1, 1);\n    /**\n     * The current angle of the particle.\n     */\n\n    this.angle = 0;\n    /**\n     * Defines how fast is the angle changing.\n     */\n\n    this.angularSpeed = 0;\n    /**\n     * Defines the cell index used by the particle to be rendered from a sprite.\n     */\n\n    this.cellIndex = 0;\n    /** @hidden */\n\n    this._attachedSubEmitters = null;\n    /** @hidden */\n\n    this._currentColor1 = new Color4(0, 0, 0, 0);\n    /** @hidden */\n\n    this._currentColor2 = new Color4(0, 0, 0, 0);\n    /** @hidden */\n\n    this._currentSize1 = 0;\n    /** @hidden */\n\n    this._currentSize2 = 0;\n    /** @hidden */\n\n    this._currentAngularSpeed1 = 0;\n    /** @hidden */\n\n    this._currentAngularSpeed2 = 0;\n    /** @hidden */\n\n    this._currentVelocity1 = 0;\n    /** @hidden */\n\n    this._currentVelocity2 = 0;\n    /** @hidden */\n\n    this._currentLimitVelocity1 = 0;\n    /** @hidden */\n\n    this._currentLimitVelocity2 = 0;\n    /** @hidden */\n\n    this._currentDrag1 = 0;\n    /** @hidden */\n\n    this._currentDrag2 = 0;\n    this.id = Particle._Count++;\n\n    if (!this.particleSystem.isAnimationSheetEnabled) {\n      return;\n    }\n\n    this._updateCellInfoFromSystem();\n  }\n\n  Particle.prototype._updateCellInfoFromSystem = function () {\n    this.cellIndex = this.particleSystem.startSpriteCellID;\n  };\n  /**\n   * Defines how the sprite cell index is updated for the particle\n   */\n\n\n  Particle.prototype.updateCellIndex = function () {\n    var offsetAge = this.age;\n    var changeSpeed = this.particleSystem.spriteCellChangeSpeed;\n\n    if (this.particleSystem.spriteRandomStartCell) {\n      if (this._randomCellOffset === undefined) {\n        this._randomCellOffset = Math.random() * this.lifeTime;\n      }\n\n      if (changeSpeed === 0) {\n        // Special case when speed = 0 meaning we want to stay on initial cell\n        changeSpeed = 1;\n        offsetAge = this._randomCellOffset;\n      } else {\n        offsetAge += this._randomCellOffset;\n      }\n    }\n\n    var dist = this._initialEndSpriteCellID - this._initialStartSpriteCellID;\n    var ratio;\n\n    if (this._initialSpriteCellLoop) {\n      ratio = Scalar.Clamp(offsetAge * changeSpeed % this.lifeTime / this.lifeTime);\n    } else {\n      ratio = Scalar.Clamp(offsetAge * changeSpeed / this.lifeTime);\n    }\n\n    this.cellIndex = this._initialStartSpriteCellID + ratio * dist | 0;\n  };\n  /**\n   * @param subEmitter\n   * @hidden\n   */\n\n\n  Particle.prototype._inheritParticleInfoToSubEmitter = function (subEmitter) {\n    if (subEmitter.particleSystem.emitter.position) {\n      var emitterMesh = subEmitter.particleSystem.emitter;\n      emitterMesh.position.copyFrom(this.position);\n\n      if (subEmitter.inheritDirection) {\n        var temp = TmpVectors.Vector3[0];\n        this.direction.normalizeToRef(temp);\n        emitterMesh.setDirection(temp, 0, Math.PI / 2);\n      }\n    } else {\n      var emitterPosition = subEmitter.particleSystem.emitter;\n      emitterPosition.copyFrom(this.position);\n    } // Set inheritedVelocityOffset to be used when new particles are created\n\n\n    this.direction.scaleToRef(subEmitter.inheritedVelocityAmount / 2, TmpVectors.Vector3[0]);\n\n    subEmitter.particleSystem._inheritedVelocityOffset.copyFrom(TmpVectors.Vector3[0]);\n  };\n  /** @hidden */\n\n\n  Particle.prototype._inheritParticleInfoToSubEmitters = function () {\n    var _this = this;\n\n    if (this._attachedSubEmitters && this._attachedSubEmitters.length > 0) {\n      this._attachedSubEmitters.forEach(function (subEmitter) {\n        _this._inheritParticleInfoToSubEmitter(subEmitter);\n      });\n    }\n  };\n  /** @hidden */\n\n\n  Particle.prototype._reset = function () {\n    this.age = 0;\n    this.id = Particle._Count++;\n    this._currentColorGradient = null;\n    this._currentSizeGradient = null;\n    this._currentAngularSpeedGradient = null;\n    this._currentVelocityGradient = null;\n    this._currentLimitVelocityGradient = null;\n    this._currentDragGradient = null;\n    this.cellIndex = this.particleSystem.startSpriteCellID;\n    this._randomCellOffset = undefined;\n  };\n  /**\n   * Copy the properties of particle to another one.\n   * @param other the particle to copy the information to.\n   */\n\n\n  Particle.prototype.copyTo = function (other) {\n    other.position.copyFrom(this.position);\n\n    if (this._initialDirection) {\n      if (other._initialDirection) {\n        other._initialDirection.copyFrom(this._initialDirection);\n      } else {\n        other._initialDirection = this._initialDirection.clone();\n      }\n    } else {\n      other._initialDirection = null;\n    }\n\n    other.direction.copyFrom(this.direction);\n\n    if (this._localPosition) {\n      if (other._localPosition) {\n        other._localPosition.copyFrom(this._localPosition);\n      } else {\n        other._localPosition = this._localPosition.clone();\n      }\n    }\n\n    other.color.copyFrom(this.color);\n    other.colorStep.copyFrom(this.colorStep);\n    other.lifeTime = this.lifeTime;\n    other.age = this.age;\n    other._randomCellOffset = this._randomCellOffset;\n    other.size = this.size;\n    other.scale.copyFrom(this.scale);\n    other.angle = this.angle;\n    other.angularSpeed = this.angularSpeed;\n    other.particleSystem = this.particleSystem;\n    other.cellIndex = this.cellIndex;\n    other.id = this.id;\n    other._attachedSubEmitters = this._attachedSubEmitters;\n\n    if (this._currentColorGradient) {\n      other._currentColorGradient = this._currentColorGradient;\n\n      other._currentColor1.copyFrom(this._currentColor1);\n\n      other._currentColor2.copyFrom(this._currentColor2);\n    }\n\n    if (this._currentSizeGradient) {\n      other._currentSizeGradient = this._currentSizeGradient;\n      other._currentSize1 = this._currentSize1;\n      other._currentSize2 = this._currentSize2;\n    }\n\n    if (this._currentAngularSpeedGradient) {\n      other._currentAngularSpeedGradient = this._currentAngularSpeedGradient;\n      other._currentAngularSpeed1 = this._currentAngularSpeed1;\n      other._currentAngularSpeed2 = this._currentAngularSpeed2;\n    }\n\n    if (this._currentVelocityGradient) {\n      other._currentVelocityGradient = this._currentVelocityGradient;\n      other._currentVelocity1 = this._currentVelocity1;\n      other._currentVelocity2 = this._currentVelocity2;\n    }\n\n    if (this._currentLimitVelocityGradient) {\n      other._currentLimitVelocityGradient = this._currentLimitVelocityGradient;\n      other._currentLimitVelocity1 = this._currentLimitVelocity1;\n      other._currentLimitVelocity2 = this._currentLimitVelocity2;\n    }\n\n    if (this._currentDragGradient) {\n      other._currentDragGradient = this._currentDragGradient;\n      other._currentDrag1 = this._currentDrag1;\n      other._currentDrag2 = this._currentDrag2;\n    }\n\n    if (this.particleSystem.isAnimationSheetEnabled) {\n      other._initialStartSpriteCellID = this._initialStartSpriteCellID;\n      other._initialEndSpriteCellID = this._initialEndSpriteCellID;\n      other._initialSpriteCellLoop = this._initialSpriteCellLoop;\n    }\n\n    if (this.particleSystem.useRampGradients) {\n      if (other.remapData && this.remapData) {\n        other.remapData.copyFrom(this.remapData);\n      } else {\n        other.remapData = new Vector4(0, 0, 0, 0);\n      }\n    }\n\n    if (this._randomNoiseCoordinates1) {\n      if (other._randomNoiseCoordinates1) {\n        other._randomNoiseCoordinates1.copyFrom(this._randomNoiseCoordinates1);\n\n        other._randomNoiseCoordinates2.copyFrom(this._randomNoiseCoordinates2);\n      } else {\n        other._randomNoiseCoordinates1 = this._randomNoiseCoordinates1.clone();\n        other._randomNoiseCoordinates2 = this._randomNoiseCoordinates2.clone();\n      }\n    }\n  };\n\n  Particle._Count = 0;\n  return Particle;\n}();\n\nexport { Particle };","map":{"version":3,"mappings":"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","names":["Vector2","Vector3","TmpVectors","Vector4","Color4","Scalar","particleSystem","Zero","id","Particle","_Count","isAnimationSheetEnabled","_updateCellInfoFromSystem","cellIndex","startSpriteCellID","offsetAge","age","changeSpeed","spriteCellChangeSpeed","spriteRandomStartCell","_randomCellOffset","undefined","Math","random","lifeTime","dist","_initialEndSpriteCellID","_initialStartSpriteCellID","ratio","_initialSpriteCellLoop","Clamp","subEmitter","emitter","position","emitterMesh","copyFrom","inheritDirection","temp","direction","normalizeToRef","setDirection","PI","emitterPosition","scaleToRef","inheritedVelocityAmount","_inheritedVelocityOffset","_attachedSubEmitters","length","forEach","_this","_inheritParticleInfoToSubEmitter","_currentColorGradient","_currentSizeGradient","_currentAngularSpeedGradient","_currentVelocityGradient","_currentLimitVelocityGradient","_currentDragGradient","other","_initialDirection","clone","_localPosition","color","colorStep","size","scale","angle","angularSpeed","_currentColor1","_currentColor2","_currentSize1","_currentSize2","_currentAngularSpeed1","_currentAngularSpeed2","_currentVelocity1","_currentVelocity2","_currentLimitVelocity1","_currentLimitVelocity2","_currentDrag1","_currentDrag2","useRampGradients","remapData","_randomNoiseCoordinates1","_randomNoiseCoordinates2"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Particles/particle.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport { Vector2, Vector3, TmpVectors, Vector4 } from \"../Maths/math.vector\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport { Scalar } from \"../Maths/math.scalar\";\r\nimport type { ParticleSystem } from \"./particleSystem\";\r\nimport type { SubEmitter } from \"./subEmitter\";\r\nimport type { ColorGradient, FactorGradient } from \"../Misc/gradients\";\r\n\r\ndeclare type AbstractMesh = import(\"../Meshes/abstractMesh\").AbstractMesh;\r\n\r\n/**\r\n * A particle represents one of the element emitted by a particle system.\r\n * This is mainly define by its coordinates, direction, velocity and age.\r\n */\r\nexport class Particle {\r\n    private static _Count = 0;\r\n    /**\r\n     * Unique ID of the particle\r\n     */\r\n    public id: number;\r\n    /**\r\n     * The world position of the particle in the scene.\r\n     */\r\n    public position = Vector3.Zero();\r\n\r\n    /**\r\n     * The world direction of the particle in the scene.\r\n     */\r\n    public direction = Vector3.Zero();\r\n\r\n    /**\r\n     * The color of the particle.\r\n     */\r\n    public color = new Color4(0, 0, 0, 0);\r\n\r\n    /**\r\n     * The color change of the particle per step.\r\n     */\r\n    public colorStep = new Color4(0, 0, 0, 0);\r\n\r\n    /**\r\n     * Defines how long will the life of the particle be.\r\n     */\r\n    public lifeTime = 1.0;\r\n\r\n    /**\r\n     * The current age of the particle.\r\n     */\r\n    public age = 0;\r\n\r\n    /**\r\n     * The current size of the particle.\r\n     */\r\n    public size = 0;\r\n\r\n    /**\r\n     * The current scale of the particle.\r\n     */\r\n    public scale = new Vector2(1, 1);\r\n\r\n    /**\r\n     * The current angle of the particle.\r\n     */\r\n    public angle = 0;\r\n\r\n    /**\r\n     * Defines how fast is the angle changing.\r\n     */\r\n    public angularSpeed = 0;\r\n\r\n    /**\r\n     * Defines the cell index used by the particle to be rendered from a sprite.\r\n     */\r\n    public cellIndex: number = 0;\r\n\r\n    /**\r\n     * The information required to support color remapping\r\n     */\r\n    public remapData: Vector4;\r\n\r\n    /** @hidden */\r\n    public _randomCellOffset?: number;\r\n\r\n    /** @hidden */\r\n    public _initialDirection: Nullable<Vector3>;\r\n\r\n    /** @hidden */\r\n    public _attachedSubEmitters: Nullable<Array<SubEmitter>> = null;\r\n\r\n    /** @hidden */\r\n    public _initialStartSpriteCellID: number;\r\n    /** @hidden */\r\n    public _initialEndSpriteCellID: number;\r\n    /** @hidden */\r\n    public _initialSpriteCellLoop: boolean;\r\n\r\n    /** @hidden */\r\n    public _currentColorGradient: Nullable<ColorGradient>;\r\n    /** @hidden */\r\n    public _currentColor1 = new Color4(0, 0, 0, 0);\r\n    /** @hidden */\r\n    public _currentColor2 = new Color4(0, 0, 0, 0);\r\n\r\n    /** @hidden */\r\n    public _currentSizeGradient: Nullable<FactorGradient>;\r\n    /** @hidden */\r\n    public _currentSize1 = 0;\r\n    /** @hidden */\r\n    public _currentSize2 = 0;\r\n\r\n    /** @hidden */\r\n    public _currentAngularSpeedGradient: Nullable<FactorGradient>;\r\n    /** @hidden */\r\n    public _currentAngularSpeed1 = 0;\r\n    /** @hidden */\r\n    public _currentAngularSpeed2 = 0;\r\n\r\n    /** @hidden */\r\n    public _currentVelocityGradient: Nullable<FactorGradient>;\r\n    /** @hidden */\r\n    public _currentVelocity1 = 0;\r\n    /** @hidden */\r\n    public _currentVelocity2 = 0;\r\n\r\n    /** @hidden */\r\n    public _currentLimitVelocityGradient: Nullable<FactorGradient>;\r\n    /** @hidden */\r\n    public _currentLimitVelocity1 = 0;\r\n    /** @hidden */\r\n    public _currentLimitVelocity2 = 0;\r\n\r\n    /** @hidden */\r\n    public _currentDragGradient: Nullable<FactorGradient>;\r\n    /** @hidden */\r\n    public _currentDrag1 = 0;\r\n    /** @hidden */\r\n    public _currentDrag2 = 0;\r\n\r\n    /** @hidden */\r\n    public _randomNoiseCoordinates1: Vector3;\r\n    /** @hidden */\r\n    public _randomNoiseCoordinates2: Vector3;\r\n\r\n    /** @hidden */\r\n    public _localPosition?: Vector3;\r\n\r\n    /**\r\n     * Creates a new instance Particle\r\n     * @param particleSystem the particle system the particle belongs to\r\n     */\r\n    constructor(\r\n        /**\r\n         * The particle system the particle belongs to.\r\n         */\r\n        public particleSystem: ParticleSystem\r\n    ) {\r\n        this.id = Particle._Count++;\r\n        if (!this.particleSystem.isAnimationSheetEnabled) {\r\n            return;\r\n        }\r\n\r\n        this._updateCellInfoFromSystem();\r\n    }\r\n\r\n    private _updateCellInfoFromSystem(): void {\r\n        this.cellIndex = this.particleSystem.startSpriteCellID;\r\n    }\r\n\r\n    /**\r\n     * Defines how the sprite cell index is updated for the particle\r\n     */\r\n    public updateCellIndex(): void {\r\n        let offsetAge = this.age;\r\n        let changeSpeed = this.particleSystem.spriteCellChangeSpeed;\r\n\r\n        if (this.particleSystem.spriteRandomStartCell) {\r\n            if (this._randomCellOffset === undefined) {\r\n                this._randomCellOffset = Math.random() * this.lifeTime;\r\n            }\r\n\r\n            if (changeSpeed === 0) {\r\n                // Special case when speed = 0 meaning we want to stay on initial cell\r\n                changeSpeed = 1;\r\n                offsetAge = this._randomCellOffset;\r\n            } else {\r\n                offsetAge += this._randomCellOffset;\r\n            }\r\n        }\r\n\r\n        const dist = this._initialEndSpriteCellID - this._initialStartSpriteCellID;\r\n        let ratio: number;\r\n        if (this._initialSpriteCellLoop) {\r\n            ratio = Scalar.Clamp(((offsetAge * changeSpeed) % this.lifeTime) / this.lifeTime);\r\n        } else {\r\n            ratio = Scalar.Clamp((offsetAge * changeSpeed) / this.lifeTime);\r\n        }\r\n        this.cellIndex = (this._initialStartSpriteCellID + ratio * dist) | 0;\r\n    }\r\n\r\n    /**\r\n     * @param subEmitter\r\n     * @hidden\r\n     */\r\n    public _inheritParticleInfoToSubEmitter(subEmitter: SubEmitter) {\r\n        if ((<AbstractMesh>subEmitter.particleSystem.emitter).position) {\r\n            const emitterMesh = <AbstractMesh>subEmitter.particleSystem.emitter;\r\n            emitterMesh.position.copyFrom(this.position);\r\n            if (subEmitter.inheritDirection) {\r\n                const temp = TmpVectors.Vector3[0];\r\n                this.direction.normalizeToRef(temp);\r\n                emitterMesh.setDirection(temp, 0, Math.PI / 2);\r\n            }\r\n        } else {\r\n            const emitterPosition = <Vector3>subEmitter.particleSystem.emitter;\r\n            emitterPosition.copyFrom(this.position);\r\n        }\r\n        // Set inheritedVelocityOffset to be used when new particles are created\r\n        this.direction.scaleToRef(subEmitter.inheritedVelocityAmount / 2, TmpVectors.Vector3[0]);\r\n        subEmitter.particleSystem._inheritedVelocityOffset.copyFrom(TmpVectors.Vector3[0]);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _inheritParticleInfoToSubEmitters() {\r\n        if (this._attachedSubEmitters && this._attachedSubEmitters.length > 0) {\r\n            this._attachedSubEmitters.forEach((subEmitter) => {\r\n                this._inheritParticleInfoToSubEmitter(subEmitter);\r\n            });\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reset() {\r\n        this.age = 0;\r\n        this.id = Particle._Count++;\r\n        this._currentColorGradient = null;\r\n        this._currentSizeGradient = null;\r\n        this._currentAngularSpeedGradient = null;\r\n        this._currentVelocityGradient = null;\r\n        this._currentLimitVelocityGradient = null;\r\n        this._currentDragGradient = null;\r\n        this.cellIndex = this.particleSystem.startSpriteCellID;\r\n        this._randomCellOffset = undefined;\r\n    }\r\n\r\n    /**\r\n     * Copy the properties of particle to another one.\r\n     * @param other the particle to copy the information to.\r\n     */\r\n    public copyTo(other: Particle) {\r\n        other.position.copyFrom(this.position);\r\n        if (this._initialDirection) {\r\n            if (other._initialDirection) {\r\n                other._initialDirection.copyFrom(this._initialDirection);\r\n            } else {\r\n                other._initialDirection = this._initialDirection.clone();\r\n            }\r\n        } else {\r\n            other._initialDirection = null;\r\n        }\r\n        other.direction.copyFrom(this.direction);\r\n        if (this._localPosition) {\r\n            if (other._localPosition) {\r\n                other._localPosition.copyFrom(this._localPosition);\r\n            } else {\r\n                other._localPosition = this._localPosition.clone();\r\n            }\r\n        }\r\n        other.color.copyFrom(this.color);\r\n        other.colorStep.copyFrom(this.colorStep);\r\n        other.lifeTime = this.lifeTime;\r\n        other.age = this.age;\r\n        other._randomCellOffset = this._randomCellOffset;\r\n        other.size = this.size;\r\n        other.scale.copyFrom(this.scale);\r\n        other.angle = this.angle;\r\n        other.angularSpeed = this.angularSpeed;\r\n        other.particleSystem = this.particleSystem;\r\n        other.cellIndex = this.cellIndex;\r\n        other.id = this.id;\r\n        other._attachedSubEmitters = this._attachedSubEmitters;\r\n        if (this._currentColorGradient) {\r\n            other._currentColorGradient = this._currentColorGradient;\r\n            other._currentColor1.copyFrom(this._currentColor1);\r\n            other._currentColor2.copyFrom(this._currentColor2);\r\n        }\r\n        if (this._currentSizeGradient) {\r\n            other._currentSizeGradient = this._currentSizeGradient;\r\n            other._currentSize1 = this._currentSize1;\r\n            other._currentSize2 = this._currentSize2;\r\n        }\r\n        if (this._currentAngularSpeedGradient) {\r\n            other._currentAngularSpeedGradient = this._currentAngularSpeedGradient;\r\n            other._currentAngularSpeed1 = this._currentAngularSpeed1;\r\n            other._currentAngularSpeed2 = this._currentAngularSpeed2;\r\n        }\r\n        if (this._currentVelocityGradient) {\r\n            other._currentVelocityGradient = this._currentVelocityGradient;\r\n            other._currentVelocity1 = this._currentVelocity1;\r\n            other._currentVelocity2 = this._currentVelocity2;\r\n        }\r\n        if (this._currentLimitVelocityGradient) {\r\n            other._currentLimitVelocityGradient = this._currentLimitVelocityGradient;\r\n            other._currentLimitVelocity1 = this._currentLimitVelocity1;\r\n            other._currentLimitVelocity2 = this._currentLimitVelocity2;\r\n        }\r\n        if (this._currentDragGradient) {\r\n            other._currentDragGradient = this._currentDragGradient;\r\n            other._currentDrag1 = this._currentDrag1;\r\n            other._currentDrag2 = this._currentDrag2;\r\n        }\r\n        if (this.particleSystem.isAnimationSheetEnabled) {\r\n            other._initialStartSpriteCellID = this._initialStartSpriteCellID;\r\n            other._initialEndSpriteCellID = this._initialEndSpriteCellID;\r\n            other._initialSpriteCellLoop = this._initialSpriteCellLoop;\r\n        }\r\n        if (this.particleSystem.useRampGradients) {\r\n            if (other.remapData && this.remapData) {\r\n                other.remapData.copyFrom(this.remapData);\r\n            } else {\r\n                other.remapData = new Vector4(0, 0, 0, 0);\r\n            }\r\n        }\r\n        if (this._randomNoiseCoordinates1) {\r\n            if (other._randomNoiseCoordinates1) {\r\n                other._randomNoiseCoordinates1.copyFrom(this._randomNoiseCoordinates1);\r\n                other._randomNoiseCoordinates2.copyFrom(this._randomNoiseCoordinates2);\r\n            } else {\r\n                other._randomNoiseCoordinates1 = this._randomNoiseCoordinates1.clone();\r\n                other._randomNoiseCoordinates2 = this._randomNoiseCoordinates2.clone();\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}