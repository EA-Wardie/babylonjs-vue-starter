{"ast":null,"code":"import \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.regexp.flags.js\";\nimport { Logger } from \"../Misc/logger.js\"; //private static _TYPE_NO_DATA = 0;\n\nvar _TYPE_INDEXED = 1;\nvar _TYPE_RGB = 2;\nvar _TYPE_GREY = 3;\nvar _TYPE_RLE_INDEXED = 9;\nvar _TYPE_RLE_RGB = 10;\nvar _TYPE_RLE_GREY = 11;\nvar _ORIGIN_MASK = 0x30;\nvar _ORIGIN_SHIFT = 0x04;\nvar _ORIGIN_BL = 0x00;\nvar _ORIGIN_BR = 0x01;\nvar _ORIGIN_UL = 0x02;\nvar _ORIGIN_UR = 0x03;\n/**\n * Gets the header of a TGA file\n * @param data defines the TGA data\n * @returns the header\n */\n\nexport function GetTGAHeader(data) {\n  var offset = 0;\n  var header = {\n    id_length: data[offset++],\n    colormap_type: data[offset++],\n    image_type: data[offset++],\n    colormap_index: data[offset++] | data[offset++] << 8,\n    colormap_length: data[offset++] | data[offset++] << 8,\n    colormap_size: data[offset++],\n    origin: [data[offset++] | data[offset++] << 8, data[offset++] | data[offset++] << 8],\n    width: data[offset++] | data[offset++] << 8,\n    height: data[offset++] | data[offset++] << 8,\n    pixel_size: data[offset++],\n    flags: data[offset++]\n  };\n  return header;\n}\n/**\n * Uploads TGA content to a Babylon Texture\n * @param texture\n * @param data\n * @hidden\n */\n\nexport function UploadContent(texture, data) {\n  // Not enough data to contain header ?\n  if (data.length < 19) {\n    Logger.Error(\"Unable to load TGA file - Not enough data to contain header\");\n    return;\n  } // Read Header\n\n\n  var offset = 18;\n  var header = GetTGAHeader(data); // Assume it's a valid Targa file.\n\n  if (header.id_length + offset > data.length) {\n    Logger.Error(\"Unable to load TGA file - Not enough data\");\n    return;\n  } // Skip not needed data\n\n\n  offset += header.id_length;\n  var use_rle = false;\n  var use_pal = false;\n  var use_grey = false; // Get some informations.\n\n  switch (header.image_type) {\n    case _TYPE_RLE_INDEXED:\n      use_rle = true;\n    // eslint-disable-next-line no-fallthrough\n\n    case _TYPE_INDEXED:\n      use_pal = true;\n      break;\n\n    case _TYPE_RLE_RGB:\n      use_rle = true;\n    // eslint-disable-next-line no-fallthrough\n\n    case _TYPE_RGB:\n      // use_rgb = true;\n      break;\n\n    case _TYPE_RLE_GREY:\n      use_rle = true;\n    // eslint-disable-next-line no-fallthrough\n\n    case _TYPE_GREY:\n      use_grey = true;\n      break;\n  }\n\n  var pixel_data; // var numAlphaBits = header.flags & 0xf;\n\n  var pixel_size = header.pixel_size >> 3;\n  var pixel_total = header.width * header.height * pixel_size; // Read palettes\n\n  var palettes;\n\n  if (use_pal) {\n    palettes = data.subarray(offset, offset += header.colormap_length * (header.colormap_size >> 3));\n  } // Read LRE\n\n\n  if (use_rle) {\n    pixel_data = new Uint8Array(pixel_total);\n    var c = void 0,\n        count = void 0,\n        i = void 0;\n    var localOffset = 0;\n    var pixels = new Uint8Array(pixel_size);\n\n    while (offset < pixel_total && localOffset < pixel_total) {\n      c = data[offset++];\n      count = (c & 0x7f) + 1; // RLE pixels\n\n      if (c & 0x80) {\n        // Bind pixel tmp array\n        for (i = 0; i < pixel_size; ++i) {\n          pixels[i] = data[offset++];\n        } // Copy pixel array\n\n\n        for (i = 0; i < count; ++i) {\n          pixel_data.set(pixels, localOffset + i * pixel_size);\n        }\n\n        localOffset += pixel_size * count;\n      } // Raw pixels\n      else {\n        count *= pixel_size;\n\n        for (i = 0; i < count; ++i) {\n          pixel_data[localOffset + i] = data[offset++];\n        }\n\n        localOffset += count;\n      }\n    }\n  } // RAW Pixels\n  else {\n    pixel_data = data.subarray(offset, offset += use_pal ? header.width * header.height : pixel_total);\n  } // Load to texture\n\n\n  var x_start, y_start, x_step, y_step, y_end, x_end;\n\n  switch ((header.flags & _ORIGIN_MASK) >> _ORIGIN_SHIFT) {\n    default:\n    case _ORIGIN_UL:\n      x_start = 0;\n      x_step = 1;\n      x_end = header.width;\n      y_start = 0;\n      y_step = 1;\n      y_end = header.height;\n      break;\n\n    case _ORIGIN_BL:\n      x_start = 0;\n      x_step = 1;\n      x_end = header.width;\n      y_start = header.height - 1;\n      y_step = -1;\n      y_end = -1;\n      break;\n\n    case _ORIGIN_UR:\n      x_start = header.width - 1;\n      x_step = -1;\n      x_end = -1;\n      y_start = 0;\n      y_step = 1;\n      y_end = header.height;\n      break;\n\n    case _ORIGIN_BR:\n      x_start = header.width - 1;\n      x_step = -1;\n      x_end = -1;\n      y_start = header.height - 1;\n      y_step = -1;\n      y_end = -1;\n      break;\n  } // Load the specify method\n\n\n  var func = \"_getImageData\" + (use_grey ? \"Grey\" : \"\") + header.pixel_size + \"bits\";\n  var imageData = TGATools[func](header, palettes, pixel_data, y_start, y_step, y_end, x_start, x_step, x_end);\n  var engine = texture.getEngine();\n\n  engine._uploadDataToTextureDirectly(texture, imageData);\n}\n/**\n * @param header\n * @param palettes\n * @param pixel_data\n * @param y_start\n * @param y_step\n * @param y_end\n * @param x_start\n * @param x_step\n * @param x_end\n * @hidden\n */\n\nfunction _getImageData8bits(header, palettes, pixel_data, y_start, y_step, y_end, x_start, x_step, x_end) {\n  var image = pixel_data,\n      colormap = palettes;\n  var width = header.width,\n      height = header.height;\n  var color,\n      i = 0,\n      x,\n      y;\n  var imageData = new Uint8Array(width * height * 4);\n\n  for (y = y_start; y !== y_end; y += y_step) {\n    for (x = x_start; x !== x_end; x += x_step, i++) {\n      color = image[i];\n      imageData[(x + width * y) * 4 + 3] = 255;\n      imageData[(x + width * y) * 4 + 2] = colormap[color * 3 + 0];\n      imageData[(x + width * y) * 4 + 1] = colormap[color * 3 + 1];\n      imageData[(x + width * y) * 4 + 0] = colormap[color * 3 + 2];\n    }\n  }\n\n  return imageData;\n}\n/**\n * @param header\n * @param palettes\n * @param pixel_data\n * @param y_start\n * @param y_step\n * @param y_end\n * @param x_start\n * @param x_step\n * @param x_end\n * @hidden\n */\n\n\nfunction _getImageData16bits(header, palettes, pixel_data, y_start, y_step, y_end, x_start, x_step, x_end) {\n  var image = pixel_data;\n  var width = header.width,\n      height = header.height;\n  var color,\n      i = 0,\n      x,\n      y;\n  var imageData = new Uint8Array(width * height * 4);\n\n  for (y = y_start; y !== y_end; y += y_step) {\n    for (x = x_start; x !== x_end; x += x_step, i += 2) {\n      color = image[i + 0] + (image[i + 1] << 8); // Inversed ?\n\n      var r = ((color & 0x7c00) >> 10) * 255 / 0x1f | 0;\n      var g = ((color & 0x03e0) >> 5) * 255 / 0x1f | 0;\n      var b = (color & 0x001f) * 255 / 0x1f | 0;\n      imageData[(x + width * y) * 4 + 0] = r;\n      imageData[(x + width * y) * 4 + 1] = g;\n      imageData[(x + width * y) * 4 + 2] = b;\n      imageData[(x + width * y) * 4 + 3] = color & 0x8000 ? 0 : 255;\n    }\n  }\n\n  return imageData;\n}\n/**\n * @param header\n * @param palettes\n * @param pixel_data\n * @param y_start\n * @param y_step\n * @param y_end\n * @param x_start\n * @param x_step\n * @param x_end\n * @hidden\n */\n\n\nfunction _getImageData24bits(header, palettes, pixel_data, y_start, y_step, y_end, x_start, x_step, x_end) {\n  var image = pixel_data;\n  var width = header.width,\n      height = header.height;\n  var i = 0,\n      x,\n      y;\n  var imageData = new Uint8Array(width * height * 4);\n\n  for (y = y_start; y !== y_end; y += y_step) {\n    for (x = x_start; x !== x_end; x += x_step, i += 3) {\n      imageData[(x + width * y) * 4 + 3] = 255;\n      imageData[(x + width * y) * 4 + 2] = image[i + 0];\n      imageData[(x + width * y) * 4 + 1] = image[i + 1];\n      imageData[(x + width * y) * 4 + 0] = image[i + 2];\n    }\n  }\n\n  return imageData;\n}\n/**\n * @param header\n * @param palettes\n * @param pixel_data\n * @param y_start\n * @param y_step\n * @param y_end\n * @param x_start\n * @param x_step\n * @param x_end\n * @hidden\n */\n\n\nfunction _getImageData32bits(header, palettes, pixel_data, y_start, y_step, y_end, x_start, x_step, x_end) {\n  var image = pixel_data;\n  var width = header.width,\n      height = header.height;\n  var i = 0,\n      x,\n      y;\n  var imageData = new Uint8Array(width * height * 4);\n\n  for (y = y_start; y !== y_end; y += y_step) {\n    for (x = x_start; x !== x_end; x += x_step, i += 4) {\n      imageData[(x + width * y) * 4 + 2] = image[i + 0];\n      imageData[(x + width * y) * 4 + 1] = image[i + 1];\n      imageData[(x + width * y) * 4 + 0] = image[i + 2];\n      imageData[(x + width * y) * 4 + 3] = image[i + 3];\n    }\n  }\n\n  return imageData;\n}\n/**\n * @param header\n * @param palettes\n * @param pixel_data\n * @param y_start\n * @param y_step\n * @param y_end\n * @param x_start\n * @param x_step\n * @param x_end\n * @hidden\n */\n\n\nfunction _getImageDataGrey8bits(header, palettes, pixel_data, y_start, y_step, y_end, x_start, x_step, x_end) {\n  var image = pixel_data;\n  var width = header.width,\n      height = header.height;\n  var color,\n      i = 0,\n      x,\n      y;\n  var imageData = new Uint8Array(width * height * 4);\n\n  for (y = y_start; y !== y_end; y += y_step) {\n    for (x = x_start; x !== x_end; x += x_step, i++) {\n      color = image[i];\n      imageData[(x + width * y) * 4 + 0] = color;\n      imageData[(x + width * y) * 4 + 1] = color;\n      imageData[(x + width * y) * 4 + 2] = color;\n      imageData[(x + width * y) * 4 + 3] = 255;\n    }\n  }\n\n  return imageData;\n}\n/**\n * @param header\n * @param palettes\n * @param pixel_data\n * @param y_start\n * @param y_step\n * @param y_end\n * @param x_start\n * @param x_step\n * @param x_end\n * @hidden\n */\n\n\nfunction _getImageDataGrey16bits(header, palettes, pixel_data, y_start, y_step, y_end, x_start, x_step, x_end) {\n  var image = pixel_data;\n  var width = header.width,\n      height = header.height;\n  var i = 0,\n      x,\n      y;\n  var imageData = new Uint8Array(width * height * 4);\n\n  for (y = y_start; y !== y_end; y += y_step) {\n    for (x = x_start; x !== x_end; x += x_step, i += 2) {\n      imageData[(x + width * y) * 4 + 0] = image[i + 0];\n      imageData[(x + width * y) * 4 + 1] = image[i + 0];\n      imageData[(x + width * y) * 4 + 2] = image[i + 0];\n      imageData[(x + width * y) * 4 + 3] = image[i + 1];\n    }\n  }\n\n  return imageData;\n}\n/**\n * Based on jsTGALoader - Javascript loader for TGA file\n * By Vincent Thibault\n * @see http://blog.robrowser.com/javascript-tga-loader.html\n */\n\n\nexport var TGATools = {\n  /**\n   * Gets the header of a TGA file\n   * @param data defines the TGA data\n   * @returns the header\n   */\n  GetTGAHeader: GetTGAHeader,\n\n  /**\n   * Uploads TGA content to a Babylon Texture\n   * @hidden\n   */\n  UploadContent: UploadContent,\n\n  /** @hidden */\n  _getImageData8bits: _getImageData8bits,\n\n  /** @hidden */\n  _getImageData16bits: _getImageData16bits,\n\n  /** @hidden */\n  _getImageData24bits: _getImageData24bits,\n\n  /** @hidden */\n  _getImageData32bits: _getImageData32bits,\n\n  /** @hidden */\n  _getImageDataGrey8bits: _getImageDataGrey8bits,\n\n  /** @hidden */\n  _getImageDataGrey16bits: _getImageDataGrey16bits\n};","map":{"version":3,"mappings":"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","names":["Logger","_TYPE_INDEXED","_TYPE_RGB","_TYPE_GREY","_TYPE_RLE_INDEXED","_TYPE_RLE_RGB","_TYPE_RLE_GREY","_ORIGIN_MASK","_ORIGIN_SHIFT","_ORIGIN_BL","_ORIGIN_BR","_ORIGIN_UL","_ORIGIN_UR","GetTGAHeader","data","offset","header","id_length","colormap_type","image_type","colormap_index","colormap_length","colormap_size","origin","width","height","pixel_size","flags","UploadContent","texture","length","Error","use_rle","use_pal","use_grey","pixel_data","pixel_total","palettes","subarray","Uint8Array","c","count","i","localOffset","pixels","set","x_start","y_start","x_step","y_step","y_end","x_end","func","imageData","TGATools","engine","getEngine","_uploadDataToTextureDirectly","_getImageData8bits","image","colormap","color","x","y","_getImageData16bits","r","g","b","_getImageData24bits","_getImageData32bits","_getImageDataGrey8bits","_getImageDataGrey16bits"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Misc/tga.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\nimport { Logger } from \"../Misc/logger\";\r\n\r\n//private static _TYPE_NO_DATA = 0;\r\nconst _TYPE_INDEXED = 1;\r\nconst _TYPE_RGB = 2;\r\nconst _TYPE_GREY = 3;\r\nconst _TYPE_RLE_INDEXED = 9;\r\nconst _TYPE_RLE_RGB = 10;\r\nconst _TYPE_RLE_GREY = 11;\r\nconst _ORIGIN_MASK = 0x30;\r\nconst _ORIGIN_SHIFT = 0x04;\r\nconst _ORIGIN_BL = 0x00;\r\nconst _ORIGIN_BR = 0x01;\r\nconst _ORIGIN_UL = 0x02;\r\nconst _ORIGIN_UR = 0x03;\r\n\r\n/**\r\n * Gets the header of a TGA file\r\n * @param data defines the TGA data\r\n * @returns the header\r\n */\r\nexport function GetTGAHeader(data: Uint8Array): any {\r\n    let offset = 0;\r\n\r\n    const header = {\r\n        id_length: data[offset++],\r\n        colormap_type: data[offset++],\r\n        image_type: data[offset++],\r\n        colormap_index: data[offset++] | (data[offset++] << 8),\r\n        colormap_length: data[offset++] | (data[offset++] << 8),\r\n        colormap_size: data[offset++],\r\n        origin: [data[offset++] | (data[offset++] << 8), data[offset++] | (data[offset++] << 8)],\r\n        width: data[offset++] | (data[offset++] << 8),\r\n        height: data[offset++] | (data[offset++] << 8),\r\n        pixel_size: data[offset++],\r\n        flags: data[offset++],\r\n    };\r\n\r\n    return header;\r\n}\r\n\r\n/**\r\n * Uploads TGA content to a Babylon Texture\r\n * @param texture\r\n * @param data\r\n * @hidden\r\n */\r\nexport function UploadContent(texture: InternalTexture, data: Uint8Array): void {\r\n    // Not enough data to contain header ?\r\n    if (data.length < 19) {\r\n        Logger.Error(\"Unable to load TGA file - Not enough data to contain header\");\r\n        return;\r\n    }\r\n\r\n    // Read Header\r\n    let offset = 18;\r\n    const header = GetTGAHeader(data);\r\n\r\n    // Assume it's a valid Targa file.\r\n    if (header.id_length + offset > data.length) {\r\n        Logger.Error(\"Unable to load TGA file - Not enough data\");\r\n        return;\r\n    }\r\n\r\n    // Skip not needed data\r\n    offset += header.id_length;\r\n\r\n    let use_rle = false;\r\n    let use_pal = false;\r\n    let use_grey = false;\r\n\r\n    // Get some informations.\r\n    switch (header.image_type) {\r\n        case _TYPE_RLE_INDEXED:\r\n            use_rle = true;\r\n        // eslint-disable-next-line no-fallthrough\r\n        case _TYPE_INDEXED:\r\n            use_pal = true;\r\n            break;\r\n\r\n        case _TYPE_RLE_RGB:\r\n            use_rle = true;\r\n        // eslint-disable-next-line no-fallthrough\r\n        case _TYPE_RGB:\r\n            // use_rgb = true;\r\n            break;\r\n\r\n        case _TYPE_RLE_GREY:\r\n            use_rle = true;\r\n        // eslint-disable-next-line no-fallthrough\r\n        case _TYPE_GREY:\r\n            use_grey = true;\r\n            break;\r\n    }\r\n\r\n    let pixel_data;\r\n\r\n    // var numAlphaBits = header.flags & 0xf;\r\n    const pixel_size = header.pixel_size >> 3;\r\n    const pixel_total = header.width * header.height * pixel_size;\r\n\r\n    // Read palettes\r\n    let palettes;\r\n\r\n    if (use_pal) {\r\n        palettes = data.subarray(offset, (offset += header.colormap_length * (header.colormap_size >> 3)));\r\n    }\r\n\r\n    // Read LRE\r\n    if (use_rle) {\r\n        pixel_data = new Uint8Array(pixel_total);\r\n\r\n        let c, count, i;\r\n        let localOffset = 0;\r\n        const pixels = new Uint8Array(pixel_size);\r\n\r\n        while (offset < pixel_total && localOffset < pixel_total) {\r\n            c = data[offset++];\r\n            count = (c & 0x7f) + 1;\r\n\r\n            // RLE pixels\r\n            if (c & 0x80) {\r\n                // Bind pixel tmp array\r\n                for (i = 0; i < pixel_size; ++i) {\r\n                    pixels[i] = data[offset++];\r\n                }\r\n\r\n                // Copy pixel array\r\n                for (i = 0; i < count; ++i) {\r\n                    pixel_data.set(pixels, localOffset + i * pixel_size);\r\n                }\r\n\r\n                localOffset += pixel_size * count;\r\n            }\r\n            // Raw pixels\r\n            else {\r\n                count *= pixel_size;\r\n                for (i = 0; i < count; ++i) {\r\n                    pixel_data[localOffset + i] = data[offset++];\r\n                }\r\n                localOffset += count;\r\n            }\r\n        }\r\n    }\r\n    // RAW Pixels\r\n    else {\r\n        pixel_data = data.subarray(offset, (offset += use_pal ? header.width * header.height : pixel_total));\r\n    }\r\n\r\n    // Load to texture\r\n    let x_start, y_start, x_step, y_step, y_end, x_end;\r\n\r\n    switch ((header.flags & _ORIGIN_MASK) >> _ORIGIN_SHIFT) {\r\n        default:\r\n        case _ORIGIN_UL:\r\n            x_start = 0;\r\n            x_step = 1;\r\n            x_end = header.width;\r\n            y_start = 0;\r\n            y_step = 1;\r\n            y_end = header.height;\r\n            break;\r\n\r\n        case _ORIGIN_BL:\r\n            x_start = 0;\r\n            x_step = 1;\r\n            x_end = header.width;\r\n            y_start = header.height - 1;\r\n            y_step = -1;\r\n            y_end = -1;\r\n            break;\r\n\r\n        case _ORIGIN_UR:\r\n            x_start = header.width - 1;\r\n            x_step = -1;\r\n            x_end = -1;\r\n            y_start = 0;\r\n            y_step = 1;\r\n            y_end = header.height;\r\n            break;\r\n\r\n        case _ORIGIN_BR:\r\n            x_start = header.width - 1;\r\n            x_step = -1;\r\n            x_end = -1;\r\n            y_start = header.height - 1;\r\n            y_step = -1;\r\n            y_end = -1;\r\n            break;\r\n    }\r\n\r\n    // Load the specify method\r\n    const func = \"_getImageData\" + (use_grey ? \"Grey\" : \"\") + header.pixel_size + \"bits\";\r\n    const imageData = (<any>TGATools)[func](header, palettes, pixel_data, y_start, y_step, y_end, x_start, x_step, x_end);\r\n\r\n    const engine = texture.getEngine();\r\n    engine._uploadDataToTextureDirectly(texture, imageData);\r\n}\r\n\r\n/**\r\n * @param header\r\n * @param palettes\r\n * @param pixel_data\r\n * @param y_start\r\n * @param y_step\r\n * @param y_end\r\n * @param x_start\r\n * @param x_step\r\n * @param x_end\r\n * @hidden\r\n */\r\nfunction _getImageData8bits(\r\n    header: any,\r\n    palettes: Uint8Array,\r\n    pixel_data: Uint8Array,\r\n    y_start: number,\r\n    y_step: number,\r\n    y_end: number,\r\n    x_start: number,\r\n    x_step: number,\r\n    x_end: number\r\n): Uint8Array {\r\n    const image = pixel_data,\r\n        colormap = palettes;\r\n    const width = header.width,\r\n        height = header.height;\r\n    let color,\r\n        i = 0,\r\n        x,\r\n        y;\r\n\r\n    const imageData = new Uint8Array(width * height * 4);\r\n\r\n    for (y = y_start; y !== y_end; y += y_step) {\r\n        for (x = x_start; x !== x_end; x += x_step, i++) {\r\n            color = image[i];\r\n            imageData[(x + width * y) * 4 + 3] = 255;\r\n            imageData[(x + width * y) * 4 + 2] = colormap[color * 3 + 0];\r\n            imageData[(x + width * y) * 4 + 1] = colormap[color * 3 + 1];\r\n            imageData[(x + width * y) * 4 + 0] = colormap[color * 3 + 2];\r\n        }\r\n    }\r\n\r\n    return imageData;\r\n}\r\n\r\n/**\r\n * @param header\r\n * @param palettes\r\n * @param pixel_data\r\n * @param y_start\r\n * @param y_step\r\n * @param y_end\r\n * @param x_start\r\n * @param x_step\r\n * @param x_end\r\n * @hidden\r\n */\r\nfunction _getImageData16bits(\r\n    header: any,\r\n    palettes: Uint8Array,\r\n    pixel_data: Uint8Array,\r\n    y_start: number,\r\n    y_step: number,\r\n    y_end: number,\r\n    x_start: number,\r\n    x_step: number,\r\n    x_end: number\r\n): Uint8Array {\r\n    const image = pixel_data;\r\n    const width = header.width,\r\n        height = header.height;\r\n    let color,\r\n        i = 0,\r\n        x,\r\n        y;\r\n\r\n    const imageData = new Uint8Array(width * height * 4);\r\n\r\n    for (y = y_start; y !== y_end; y += y_step) {\r\n        for (x = x_start; x !== x_end; x += x_step, i += 2) {\r\n            color = image[i + 0] + (image[i + 1] << 8); // Inversed ?\r\n            const r = ((((color & 0x7c00) >> 10) * 255) / 0x1f) | 0;\r\n            const g = ((((color & 0x03e0) >> 5) * 255) / 0x1f) | 0;\r\n            const b = (((color & 0x001f) * 255) / 0x1f) | 0;\r\n\r\n            imageData[(x + width * y) * 4 + 0] = r;\r\n            imageData[(x + width * y) * 4 + 1] = g;\r\n            imageData[(x + width * y) * 4 + 2] = b;\r\n            imageData[(x + width * y) * 4 + 3] = color & 0x8000 ? 0 : 255;\r\n        }\r\n    }\r\n\r\n    return imageData;\r\n}\r\n\r\n/**\r\n * @param header\r\n * @param palettes\r\n * @param pixel_data\r\n * @param y_start\r\n * @param y_step\r\n * @param y_end\r\n * @param x_start\r\n * @param x_step\r\n * @param x_end\r\n * @hidden\r\n */\r\nfunction _getImageData24bits(\r\n    header: any,\r\n    palettes: Uint8Array,\r\n    pixel_data: Uint8Array,\r\n    y_start: number,\r\n    y_step: number,\r\n    y_end: number,\r\n    x_start: number,\r\n    x_step: number,\r\n    x_end: number\r\n): Uint8Array {\r\n    const image = pixel_data;\r\n    const width = header.width,\r\n        height = header.height;\r\n    let i = 0,\r\n        x,\r\n        y;\r\n\r\n    const imageData = new Uint8Array(width * height * 4);\r\n\r\n    for (y = y_start; y !== y_end; y += y_step) {\r\n        for (x = x_start; x !== x_end; x += x_step, i += 3) {\r\n            imageData[(x + width * y) * 4 + 3] = 255;\r\n            imageData[(x + width * y) * 4 + 2] = image[i + 0];\r\n            imageData[(x + width * y) * 4 + 1] = image[i + 1];\r\n            imageData[(x + width * y) * 4 + 0] = image[i + 2];\r\n        }\r\n    }\r\n\r\n    return imageData;\r\n}\r\n\r\n/**\r\n * @param header\r\n * @param palettes\r\n * @param pixel_data\r\n * @param y_start\r\n * @param y_step\r\n * @param y_end\r\n * @param x_start\r\n * @param x_step\r\n * @param x_end\r\n * @hidden\r\n */\r\nfunction _getImageData32bits(\r\n    header: any,\r\n    palettes: Uint8Array,\r\n    pixel_data: Uint8Array,\r\n    y_start: number,\r\n    y_step: number,\r\n    y_end: number,\r\n    x_start: number,\r\n    x_step: number,\r\n    x_end: number\r\n): Uint8Array {\r\n    const image = pixel_data;\r\n    const width = header.width,\r\n        height = header.height;\r\n    let i = 0,\r\n        x,\r\n        y;\r\n\r\n    const imageData = new Uint8Array(width * height * 4);\r\n\r\n    for (y = y_start; y !== y_end; y += y_step) {\r\n        for (x = x_start; x !== x_end; x += x_step, i += 4) {\r\n            imageData[(x + width * y) * 4 + 2] = image[i + 0];\r\n            imageData[(x + width * y) * 4 + 1] = image[i + 1];\r\n            imageData[(x + width * y) * 4 + 0] = image[i + 2];\r\n            imageData[(x + width * y) * 4 + 3] = image[i + 3];\r\n        }\r\n    }\r\n\r\n    return imageData;\r\n}\r\n\r\n/**\r\n * @param header\r\n * @param palettes\r\n * @param pixel_data\r\n * @param y_start\r\n * @param y_step\r\n * @param y_end\r\n * @param x_start\r\n * @param x_step\r\n * @param x_end\r\n * @hidden\r\n */\r\nfunction _getImageDataGrey8bits(\r\n    header: any,\r\n    palettes: Uint8Array,\r\n    pixel_data: Uint8Array,\r\n    y_start: number,\r\n    y_step: number,\r\n    y_end: number,\r\n    x_start: number,\r\n    x_step: number,\r\n    x_end: number\r\n): Uint8Array {\r\n    const image = pixel_data;\r\n    const width = header.width,\r\n        height = header.height;\r\n    let color,\r\n        i = 0,\r\n        x,\r\n        y;\r\n\r\n    const imageData = new Uint8Array(width * height * 4);\r\n\r\n    for (y = y_start; y !== y_end; y += y_step) {\r\n        for (x = x_start; x !== x_end; x += x_step, i++) {\r\n            color = image[i];\r\n            imageData[(x + width * y) * 4 + 0] = color;\r\n            imageData[(x + width * y) * 4 + 1] = color;\r\n            imageData[(x + width * y) * 4 + 2] = color;\r\n            imageData[(x + width * y) * 4 + 3] = 255;\r\n        }\r\n    }\r\n\r\n    return imageData;\r\n}\r\n\r\n/**\r\n * @param header\r\n * @param palettes\r\n * @param pixel_data\r\n * @param y_start\r\n * @param y_step\r\n * @param y_end\r\n * @param x_start\r\n * @param x_step\r\n * @param x_end\r\n * @hidden\r\n */\r\nfunction _getImageDataGrey16bits(\r\n    header: any,\r\n    palettes: Uint8Array,\r\n    pixel_data: Uint8Array,\r\n    y_start: number,\r\n    y_step: number,\r\n    y_end: number,\r\n    x_start: number,\r\n    x_step: number,\r\n    x_end: number\r\n): Uint8Array {\r\n    const image = pixel_data;\r\n    const width = header.width,\r\n        height = header.height;\r\n    let i = 0,\r\n        x,\r\n        y;\r\n\r\n    const imageData = new Uint8Array(width * height * 4);\r\n\r\n    for (y = y_start; y !== y_end; y += y_step) {\r\n        for (x = x_start; x !== x_end; x += x_step, i += 2) {\r\n            imageData[(x + width * y) * 4 + 0] = image[i + 0];\r\n            imageData[(x + width * y) * 4 + 1] = image[i + 0];\r\n            imageData[(x + width * y) * 4 + 2] = image[i + 0];\r\n            imageData[(x + width * y) * 4 + 3] = image[i + 1];\r\n        }\r\n    }\r\n\r\n    return imageData;\r\n}\r\n\r\n/**\r\n * Based on jsTGALoader - Javascript loader for TGA file\r\n * By Vincent Thibault\r\n * @see http://blog.robrowser.com/javascript-tga-loader.html\r\n */\r\nexport const TGATools = {\r\n    /**\r\n     * Gets the header of a TGA file\r\n     * @param data defines the TGA data\r\n     * @returns the header\r\n     */\r\n    GetTGAHeader,\r\n\r\n    /**\r\n     * Uploads TGA content to a Babylon Texture\r\n     * @hidden\r\n     */\r\n    UploadContent,\r\n\r\n    /** @hidden */\r\n    _getImageData8bits,\r\n\r\n    /** @hidden */\r\n    _getImageData16bits,\r\n    /** @hidden */\r\n    _getImageData24bits,\r\n\r\n    /** @hidden */\r\n    _getImageData32bits,\r\n\r\n    /** @hidden */\r\n    _getImageDataGrey8bits,\r\n    /** @hidden */\r\n    _getImageDataGrey16bits,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}