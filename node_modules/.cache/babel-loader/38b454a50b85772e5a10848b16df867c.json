{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { __decorate, __extends } from \"tslib\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Rendering/geometryBufferRendererSceneComponent.js\";\nimport \"../Shaders/screenSpaceCurvature.fragment.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * The Screen Space curvature effect can help highlighting ridge and valley of a model.\n */\n\nvar ScreenSpaceCurvaturePostProcess =\n/** @class */\nfunction (_super) {\n  __extends(ScreenSpaceCurvaturePostProcess, _super);\n  /**\n   * Creates a new instance ScreenSpaceCurvaturePostProcess\n   * @param name The name of the effect.\n   * @param scene The scene containing the objects to blur according to their velocity.\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   * @param textureType Type of textures used when performing the post process. (default: 0)\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n   */\n\n\n  function ScreenSpaceCurvaturePostProcess(name, scene, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    var _this = _super.call(this, name, \"screenSpaceCurvature\", [\"curvature_ridge\", \"curvature_valley\"], [\"textureSampler\", \"normalSampler\"], options, camera, samplingMode, engine, reusable, undefined, textureType, undefined, null, blockCompilation) || this;\n    /**\n     * Defines how much ridge the curvature effect displays.\n     */\n\n\n    _this.ridge = 1;\n    /**\n     * Defines how much valley the curvature effect displays.\n     */\n\n    _this.valley = 1;\n    _this._geometryBufferRenderer = scene.enableGeometryBufferRenderer();\n\n    if (!_this._geometryBufferRenderer) {\n      // Geometry buffer renderer is not supported. So, work as a passthrough.\n      Logger.Error(\"Multiple Render Target support needed for screen space curvature post process. Please use IsSupported test first.\");\n    } else {\n      // Geometry buffer renderer is supported.\n      _this.onApply = function (effect) {\n        effect.setFloat(\"curvature_ridge\", 0.5 / Math.max(_this.ridge * _this.ridge, 1e-4));\n        effect.setFloat(\"curvature_valley\", 0.7 / Math.max(_this.valley * _this.valley, 1e-4));\n\n        var normalTexture = _this._geometryBufferRenderer.getGBuffer().textures[1];\n\n        effect.setTexture(\"normalSampler\", normalTexture);\n      };\n    }\n\n    return _this;\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"ScreenSpaceCurvaturePostProcess\" string\n   */\n\n\n  ScreenSpaceCurvaturePostProcess.prototype.getClassName = function () {\n    return \"ScreenSpaceCurvaturePostProcess\";\n  };\n\n  Object.defineProperty(ScreenSpaceCurvaturePostProcess, \"IsSupported\", {\n    /**\n     * Support test.\n     */\n    get: function get() {\n      var engine = EngineStore.LastCreatedEngine;\n\n      if (!engine) {\n        return false;\n      }\n\n      return engine.getCaps().drawBuffersExtension;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * @param parsedPostProcess\n   * @param targetCamera\n   * @param scene\n   * @param rootUrl\n   * @hidden\n   */\n\n  ScreenSpaceCurvaturePostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new ScreenSpaceCurvaturePostProcess(parsedPostProcess.name, scene, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.textureType, parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  __decorate([serialize()], ScreenSpaceCurvaturePostProcess.prototype, \"ridge\", void 0);\n\n  __decorate([serialize()], ScreenSpaceCurvaturePostProcess.prototype, \"valley\", void 0);\n\n  return ScreenSpaceCurvaturePostProcess;\n}(PostProcess);\n\nexport { ScreenSpaceCurvaturePostProcess };\nRegisterClass(\"BABYLON.ScreenSpaceCurvaturePostProcess\", ScreenSpaceCurvaturePostProcess);","map":{"version":3,"mappings":";;;AACA,SAASA,MAAT,QAAuB,mBAAvB;AAIA,SAASC,WAAT,QAA4B,kBAA5B;AAIA,OAAO,sDAAP;AACA,OAAO,6CAAP;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,SAAT,EAAoBC,mBAApB,QAA+C,uBAA/C;AAKA;;;;AAGA;AAAA;AAAA;AAAqDC;AAuBjD;;;;;;;;;;;;;;AAYA,2CACIC,IADJ,EAEIC,KAFJ,EAGIC,OAHJ,EAIIC,MAJJ,EAKIC,YALJ,EAMIC,MANJ,EAOIC,QAPJ,EAQIC,WARJ,EASIC,gBATJ,EAS4B;AADxB;AAAAD,oBAAsB,CAAtB;AAAsB;;AACtB;AAAAC;AAAwB;;AAT5B,gBAWIC,kBACIT,IADJ,EAEI,sBAFJ,EAGI,CAAC,iBAAD,EAAoB,kBAApB,CAHJ,EAII,CAAC,gBAAD,EAAmB,eAAnB,CAJJ,EAKIE,OALJ,EAMIC,MANJ,EAOIC,YAPJ,EAQIC,MARJ,EASIC,QATJ,EAUII,SAVJ,EAWIH,WAXJ,EAYIG,SAZJ,EAaI,IAbJ,EAcIF,gBAdJ,KAeC,IA1BL;AAlCA;;;;;AAIOG,kBAAgB,CAAhB;AAEP;;;;AAIOA,mBAAiB,CAAjB;AAoDHA,SAAI,CAACC,uBAAL,GAA+BX,KAAK,CAACY,4BAAN,EAA/B;;AAEA,QAAI,CAACF,KAAI,CAACC,uBAAV,EAAmC;AAC/B;AACAnB,YAAM,CAACqB,KAAP,CAAa,mHAAb;AACH,KAHD,MAGO;AACH;AACAH,WAAI,CAACI,OAAL,GAAe,UAACC,MAAD,EAAe;AAC1BA,cAAM,CAACC,QAAP,CAAgB,iBAAhB,EAAmC,MAAMC,IAAI,CAACC,GAAL,CAASR,KAAI,CAACS,KAAL,GAAaT,KAAI,CAACS,KAA3B,EAAkC,IAAlC,CAAzC;AACAJ,cAAM,CAACC,QAAP,CAAgB,kBAAhB,EAAoC,MAAMC,IAAI,CAACC,GAAL,CAASR,KAAI,CAACU,MAAL,GAAcV,KAAI,CAACU,MAA5B,EAAoC,IAApC,CAA1C;;AAEA,YAAMC,aAAa,GAAGX,KAAI,CAACC,uBAAL,CAA8BW,UAA9B,GAA2CC,QAA3C,CAAoD,CAApD,CAAtB;;AACAR,cAAM,CAACS,UAAP,CAAkB,eAAlB,EAAmCH,aAAnC;AACH,OAND;AAOH;;;AACJ;AA/DD;;;;;;AAIOI,2DAAP;AACI,WAAO,iCAAP;AACH,GAFM;;AAgEPC,wBAAkBD,+BAAlB,EAAkB,aAAlB,EAA6B;AAH7B;;;SAGA;AACI,UAAMrB,MAAM,GAAGV,WAAW,CAACiC,iBAA3B;;AACA,UAAI,CAACvB,MAAL,EAAa;AACT,eAAO,KAAP;AACH;;AAED,aAAOA,MAAM,CAACwB,OAAP,GAAiBC,oBAAxB;AACH,KAP4B;qBAAA;;AAAA,GAA7B;AASA;;;;;;;;AAOcJ,2CAAd,UAAqBK,iBAArB,EAA6CC,YAA7C,EAAmE/B,KAAnE,EAAiFgC,OAAjF,EAAgG;AAC5F,WAAOnC,mBAAmB,CAACoC,KAApB,CACH;AACI,aAAO,IAAIR,+BAAJ,CACHK,iBAAiB,CAAC/B,IADf,EAEHC,KAFG,EAGH8B,iBAAiB,CAAC7B,OAHf,EAIH8B,YAJG,EAKHD,iBAAiB,CAACI,wBALf,EAMHlC,KAAK,CAACmC,SAAN,EANG,EAOHL,iBAAiB,CAACxB,WAPf,EAQHwB,iBAAiB,CAACzB,QARf,CAAP;AAUH,KAZE,EAaHyB,iBAbG,EAcH9B,KAdG,EAeHgC,OAfG,CAAP;AAiBH,GAlBa;;AA9FdI,cADCxC,SAAS,EACV;;AAMAwC,cADCxC,SAAS,EACV;;AA2GJ;AAAC,CAtHD,CAAqDH,WAArD;;SAAagC;AAwHb9B,aAAa,CAAC,yCAAD,EAA4C8B,+BAA5C,CAAb","names":["Logger","PostProcess","EngineStore","RegisterClass","serialize","SerializationHelper","__extends","name","scene","options","camera","samplingMode","engine","reusable","textureType","blockCompilation","_super","undefined","_this","_geometryBufferRenderer","enableGeometryBufferRenderer","Error","onApply","effect","setFloat","Math","max","ridge","valley","normalTexture","getGBuffer","textures","setTexture","ScreenSpaceCurvaturePostProcess","Object","LastCreatedEngine","getCaps","drawBuffersExtension","parsedPostProcess","targetCamera","rootUrl","Parse","renderTargetSamplingMode","getEngine","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/PostProcesses/screenSpaceCurvaturePostProcess.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { GeometryBufferRenderer } from \"../Rendering/geometryBufferRenderer\";\r\n\r\nimport \"../Rendering/geometryBufferRendererSceneComponent\";\r\nimport \"../Shaders/screenSpaceCurvature.fragment\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { serialize, SerializationHelper } from \"../Misc/decorators\";\r\n\r\ndeclare type Engine = import(\"../Engines/engine\").Engine;\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * The Screen Space curvature effect can help highlighting ridge and valley of a model.\r\n */\r\nexport class ScreenSpaceCurvaturePostProcess extends PostProcess {\r\n    /**\r\n     * Defines how much ridge the curvature effect displays.\r\n     */\r\n    @serialize()\r\n    public ridge: number = 1;\r\n\r\n    /**\r\n     * Defines how much valley the curvature effect displays.\r\n     */\r\n    @serialize()\r\n    public valley: number = 1;\r\n\r\n    private _geometryBufferRenderer: Nullable<GeometryBufferRenderer>;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"ScreenSpaceCurvaturePostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"ScreenSpaceCurvaturePostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance ScreenSpaceCurvaturePostProcess\r\n     * @param name The name of the effect.\r\n     * @param scene The scene containing the objects to blur according to their velocity.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        scene: Scene,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        blockCompilation = false\r\n    ) {\r\n        super(\r\n            name,\r\n            \"screenSpaceCurvature\",\r\n            [\"curvature_ridge\", \"curvature_valley\"],\r\n            [\"textureSampler\", \"normalSampler\"],\r\n            options,\r\n            camera,\r\n            samplingMode,\r\n            engine,\r\n            reusable,\r\n            undefined,\r\n            textureType,\r\n            undefined,\r\n            null,\r\n            blockCompilation\r\n        );\r\n\r\n        this._geometryBufferRenderer = scene.enableGeometryBufferRenderer();\r\n\r\n        if (!this._geometryBufferRenderer) {\r\n            // Geometry buffer renderer is not supported. So, work as a passthrough.\r\n            Logger.Error(\"Multiple Render Target support needed for screen space curvature post process. Please use IsSupported test first.\");\r\n        } else {\r\n            // Geometry buffer renderer is supported.\r\n            this.onApply = (effect: Effect) => {\r\n                effect.setFloat(\"curvature_ridge\", 0.5 / Math.max(this.ridge * this.ridge, 1e-4));\r\n                effect.setFloat(\"curvature_valley\", 0.7 / Math.max(this.valley * this.valley, 1e-4));\r\n\r\n                const normalTexture = this._geometryBufferRenderer!.getGBuffer().textures[1];\r\n                effect.setTexture(\"normalSampler\", normalTexture);\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Support test.\r\n     */\r\n    public static get IsSupported(): boolean {\r\n        const engine = EngineStore.LastCreatedEngine;\r\n        if (!engine) {\r\n            return false;\r\n        }\r\n\r\n        return engine.getCaps().drawBuffersExtension;\r\n    }\r\n\r\n    /**\r\n     * @param parsedPostProcess\r\n     * @param targetCamera\r\n     * @param scene\r\n     * @param rootUrl\r\n     * @hidden\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string) {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new ScreenSpaceCurvaturePostProcess(\r\n                    parsedPostProcess.name,\r\n                    scene,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    scene.getEngine(),\r\n                    parsedPostProcess.textureType,\r\n                    parsedPostProcess.reusable\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ScreenSpaceCurvaturePostProcess\", ScreenSpaceCurvaturePostProcess);\r\n"]},"metadata":{},"sourceType":"module"}