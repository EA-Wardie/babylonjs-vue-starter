{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\n\n/** @hidden */\nvar ShaderCodeCursor =\n/** @class */\nfunction () {\n  function ShaderCodeCursor() {}\n\n  Object.defineProperty(ShaderCodeCursor.prototype, \"currentLine\", {\n    get: function get() {\n      return this._lines[this.lineIndex];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ShaderCodeCursor.prototype, \"canRead\", {\n    get: function get() {\n      return this.lineIndex < this._lines.length - 1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ShaderCodeCursor.prototype, \"lines\", {\n    set: function set(value) {\n      this._lines = [];\n\n      for (var _i = 0, value_1 = value; _i < value_1.length; _i++) {\n        var line = value_1[_i]; // Prevent removing line break in macros.\n\n        if (line[0] === \"#\") {\n          this._lines.push(line);\n\n          continue;\n        } // Do not split single line comments\n\n\n        if (line.trim().startsWith(\"//\")) {\n          this._lines.push(line);\n\n          continue;\n        }\n\n        var split = line.split(\";\");\n\n        for (var index = 0; index < split.length; index++) {\n          var subLine = split[index];\n          subLine = subLine.trim();\n\n          if (!subLine) {\n            continue;\n          }\n\n          this._lines.push(subLine + (index !== split.length - 1 ? \";\" : \"\"));\n        }\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return ShaderCodeCursor;\n}();\n\nexport { ShaderCodeCursor };","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAAA;AAAA;AAAA,+BA0CC;;AAtCGA,wBAAIC,0BAAJ,EAAI,aAAJ,EAAe;SAAf;AACI,aAAO,KAAKC,MAAL,CAAY,KAAKC,SAAjB,CAAP;AACH,KAFc;qBAAA;;AAAA,GAAf;AAIAH,wBAAIC,0BAAJ,EAAI,SAAJ,EAAW;SAAX;AACI,aAAO,KAAKE,SAAL,GAAiB,KAAKD,MAAL,CAAYE,MAAZ,GAAqB,CAA7C;AACH,KAFU;qBAAA;;AAAA,GAAX;AAIAJ,wBAAIC,0BAAJ,EAAI,OAAJ,EAAS;SAAT,aAAUI,KAAV,EAAyB;AACrB,WAAKH,MAAL,GAAc,EAAd;;AAEA,WAAmB,2BAAnB,EAAmBI,mBAAnB,EAAmBA,IAAnB,EAA0B;AAArB,YAAMC,IAAI,cAAV,CAAqB,CACtB;;AACA,YAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAhB,EAAqB;AACjB,eAAKL,MAAL,CAAYM,IAAZ,CAAiBD,IAAjB;;AACA;AACH,SALqB,CAOtB;;;AACA,YAAIA,IAAI,CAACE,IAAL,GAAYC,UAAZ,CAAuB,IAAvB,CAAJ,EAAkC;AAC9B,eAAKR,MAAL,CAAYM,IAAZ,CAAiBD,IAAjB;;AACA;AACH;;AAED,YAAMI,KAAK,GAAGJ,IAAI,CAACI,KAAL,CAAW,GAAX,CAAd;;AAEA,aAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,KAAK,CAACP,MAAlC,EAA0CQ,KAAK,EAA/C,EAAmD;AAC/C,cAAIC,OAAO,GAAGF,KAAK,CAACC,KAAD,CAAnB;AACAC,iBAAO,GAAGA,OAAO,CAACJ,IAAR,EAAV;;AAEA,cAAI,CAACI,OAAL,EAAc;AACV;AACH;;AAED,eAAKX,MAAL,CAAYM,IAAZ,CAAiBK,OAAO,IAAID,KAAK,KAAKD,KAAK,CAACP,MAAN,GAAe,CAAzB,GAA6B,GAA7B,GAAmC,EAAvC,CAAxB;AACH;AACJ;AACJ,KA7BQ;qBAAA;;AAAA,GAAT;AA8BJ;AAAC,CA1CD","names":["Object","ShaderCodeCursor","_lines","lineIndex","length","value","_i","line","push","trim","startsWith","split","index","subLine"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/Processors/shaderCodeCursor.ts"],"sourcesContent":["/** @hidden */\r\nexport class ShaderCodeCursor {\r\n    private _lines: string[];\r\n    lineIndex: number;\r\n\r\n    get currentLine(): string {\r\n        return this._lines[this.lineIndex];\r\n    }\r\n\r\n    get canRead(): boolean {\r\n        return this.lineIndex < this._lines.length - 1;\r\n    }\r\n\r\n    set lines(value: string[]) {\r\n        this._lines = [];\r\n\r\n        for (const line of value) {\r\n            // Prevent removing line break in macros.\r\n            if (line[0] === \"#\") {\r\n                this._lines.push(line);\r\n                continue;\r\n            }\r\n\r\n            // Do not split single line comments\r\n            if (line.trim().startsWith(\"//\")) {\r\n                this._lines.push(line);\r\n                continue;\r\n            }\r\n\r\n            const split = line.split(\";\");\r\n\r\n            for (let index = 0; index < split.length; index++) {\r\n                let subLine = split[index];\r\n                subLine = subLine.trim();\r\n\r\n                if (!subLine) {\r\n                    continue;\r\n                }\r\n\r\n                this._lines.push(subLine + (index !== split.length - 1 ? \";\" : \"\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}