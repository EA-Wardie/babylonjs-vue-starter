{"ast":null,"code":"/**\n * Enum that determines the text-wrapping mode to use.\n */\nexport var InspectableType;\n\n(function (InspectableType) {\n  /**\n   * Checkbox for booleans\n   */\n  InspectableType[InspectableType[\"Checkbox\"] = 0] = \"Checkbox\";\n  /**\n   * Sliders for numbers\n   */\n\n  InspectableType[InspectableType[\"Slider\"] = 1] = \"Slider\";\n  /**\n   * Vector3\n   */\n\n  InspectableType[InspectableType[\"Vector3\"] = 2] = \"Vector3\";\n  /**\n   * Quaternions\n   */\n\n  InspectableType[InspectableType[\"Quaternion\"] = 3] = \"Quaternion\";\n  /**\n   * Color3\n   */\n\n  InspectableType[InspectableType[\"Color3\"] = 4] = \"Color3\";\n  /**\n   * String\n   */\n\n  InspectableType[InspectableType[\"String\"] = 5] = \"String\";\n  /**\n   * Button\n   */\n\n  InspectableType[InspectableType[\"Button\"] = 6] = \"Button\";\n  /**\n   * Options\n   */\n\n  InspectableType[InspectableType[\"Options\"] = 7] = \"Options\";\n  /**\n   * Tab\n   */\n\n  InspectableType[InspectableType[\"Tab\"] = 8] = \"Tab\";\n})(InspectableType || (InspectableType = {}));","map":{"version":3,"mappings":"AAAA;;;AAGA,WAAYA,eAAZ;;AAAA,WAAYA,eAAZ,EAA2B;AACvB;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACA;;;;AAGAA;AACH,CArCD,EAAYA,eAAe,KAAfA,eAAe,MAA3B","names":["InspectableType"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Misc/iInspectable.ts"],"sourcesContent":["/**\r\n * Enum that determines the text-wrapping mode to use.\r\n */\r\nexport enum InspectableType {\r\n    /**\r\n     * Checkbox for booleans\r\n     */\r\n    Checkbox = 0,\r\n    /**\r\n     * Sliders for numbers\r\n     */\r\n    Slider = 1,\r\n    /**\r\n     * Vector3\r\n     */\r\n    Vector3 = 2,\r\n    /**\r\n     * Quaternions\r\n     */\r\n    Quaternion = 3,\r\n    /**\r\n     * Color3\r\n     */\r\n    Color3 = 4,\r\n    /**\r\n     * String\r\n     */\r\n    String = 5,\r\n    /**\r\n     * Button\r\n     */\r\n    Button = 6,\r\n    /**\r\n     * Options\r\n     */\r\n    Options = 7,\r\n    /**\r\n     * Tab\r\n     */\r\n    Tab = 8,\r\n}\r\n\r\n/**\r\n * Interface used to define custom inspectable options in \"Options\" mode.\r\n * This interface is used by the inspector to display the list of options\r\n */\r\nexport interface IInspectableOptions {\r\n    /**\r\n     * Defines the visible part of the option\r\n     */\r\n    label: string;\r\n    /**\r\n     * Defines the value part of the option (returned through the callback)\r\n     */\r\n    value: number | string;\r\n    /**\r\n     * Defines if the option should be selected or not\r\n     */\r\n    selected?: boolean;\r\n}\r\n\r\n/**\r\n * Interface used to define custom inspectable properties.\r\n * This interface is used by the inspector to display custom property grids\r\n * @see https://doc.babylonjs.com/how_to/debug_layer#extensibility\r\n */\r\nexport interface IInspectable {\r\n    /**\r\n     * Gets the label to display\r\n     */\r\n    label: string;\r\n    /**\r\n     * Gets the name of the property to edit\r\n     */\r\n    propertyName: string;\r\n    /**\r\n     * Gets the type of the editor to use\r\n     */\r\n    type: InspectableType;\r\n    /**\r\n     * Gets the minimum value of the property when using in \"slider\" mode\r\n     */\r\n    min?: number;\r\n    /**\r\n     * Gets the maximum value of the property when using in \"slider\" mode\r\n     */\r\n    max?: number;\r\n    /**\r\n     * Gets the setp to use when using in \"slider\" mode\r\n     */\r\n    step?: number;\r\n    /**\r\n     * Gets the callback function when using \"Button\" mode\r\n     */\r\n    callback?: () => void;\r\n    /**\r\n     * Gets the list of options when using \"Option\" mode\r\n     */\r\n    options?: [];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}