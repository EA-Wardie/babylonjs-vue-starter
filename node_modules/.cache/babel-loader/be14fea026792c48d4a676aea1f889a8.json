{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { SceneLoader } from \"../../Loading/sceneLoader.js\";\nimport { WebVRController } from \"./webVRController.js\";\nimport { PoseEnabledControllerHelper } from \"./poseEnabledController.js\";\n/**\n * Generic Controller\n */\n\nvar GenericController =\n/** @class */\nfunction (_super) {\n  __extends(GenericController, _super);\n  /**\n   * Creates a new GenericController from a gamepad\n   * @param vrGamepad the gamepad that the controller should be created from\n   */\n\n\n  function GenericController(vrGamepad) {\n    return _super.call(this, vrGamepad) || this;\n  }\n  /**\n   * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\n   * @param scene scene in which to add meshes\n   * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\n   */\n\n\n  GenericController.prototype.initControllerMesh = function (scene, meshLoaded) {\n    var _this = this;\n\n    SceneLoader.ImportMesh(\"\", GenericController.MODEL_BASE_URL, GenericController.MODEL_FILENAME, scene, function (newMeshes) {\n      _this._defaultModel = newMeshes[1];\n\n      _this.attachToMesh(_this._defaultModel);\n\n      if (meshLoaded) {\n        meshLoaded(_this._defaultModel);\n      }\n    });\n  };\n  /**\n   * Called once for each button that changed state since the last frame\n   * @param buttonIdx Which button index changed\n   * @param state New state of the button\n   */\n\n\n  GenericController.prototype._handleButtonChange = function (buttonIdx, state) {\n    console.log(\"Button id: \" + buttonIdx + \"state: \");\n    console.dir(state);\n  };\n  /**\n   * Base Url for the controller model.\n   */\n\n\n  GenericController.MODEL_BASE_URL = \"https://controllers.babylonjs.com/generic/\";\n  /**\n   * File name for the controller model.\n   */\n\n  GenericController.MODEL_FILENAME = \"generic.babylon\";\n  return GenericController;\n}(WebVRController);\n\nexport { GenericController };\n\nPoseEnabledControllerHelper._DefaultControllerFactory = function (gamepadInfo) {\n  return new GenericController(gamepadInfo);\n};","map":{"version":3,"mappings":";AAEA,SAASA,WAAT,QAA4B,8BAA5B;AAEA,SAASC,eAAT,QAAgC,sBAAhC;AAEA,SAASC,2BAAT,QAA4C,4BAA5C;AAEA;;;;AAGA;AAAA;AAAA;AAAuCC;AAUnC;;;;;;AAIA,6BAAYC,SAAZ,EAA0B;WACtBC,kBAAMD,SAAN,KAAgB;AACnB;AAED;;;;;;;AAKOE,mDAAP,UAA0BC,KAA1B,EAAwCC,UAAxC,EAAiF;AAAjF;;AACIR,eAAW,CAACS,UAAZ,CAAuB,EAAvB,EAA2BH,iBAAiB,CAACI,cAA7C,EAA6DJ,iBAAiB,CAACK,cAA/E,EAA+FJ,KAA/F,EAAsG,UAACK,SAAD,EAAU;AAC5GC,WAAI,CAACC,aAAL,GAAqBF,SAAS,CAAC,CAAD,CAA9B;;AACAC,WAAI,CAACE,YAAL,CAAkBF,KAAI,CAACC,aAAvB;;AACA,UAAIN,UAAJ,EAAgB;AACZA,kBAAU,CAACK,KAAI,CAACC,aAAN,CAAV;AACH;AACJ,KAND;AAOH,GARM;AAUP;;;;;;;AAKUR,oDAAV,UAA8BU,SAA9B,EAAiDC,KAAjD,EAA6E;AACzEC,WAAO,CAACC,GAAR,CAAY,gBAAgBH,SAAhB,GAA4B,SAAxC;AACAE,WAAO,CAACE,GAAR,CAAYH,KAAZ;AACH,GAHS;AArCV;;;;;AAGuBX,qCAAyB,4CAAzB;AACvB;;;;AAGuBA,qCAAyB,iBAAzB;AAkC3B;AAAC,CA1CD,CAAuCL,eAAvC;;SAAaK;;AA4CbJ,2BAA2B,CAACmB,yBAA5B,GAAwD,UAACC,WAAD,EAAiB;AAAK,aAAIhB,iBAAJ,CAAsBgB,WAAtB;AAAkC,CAAhH","names":["SceneLoader","WebVRController","PoseEnabledControllerHelper","__extends","vrGamepad","_super","GenericController","scene","meshLoaded","ImportMesh","MODEL_BASE_URL","MODEL_FILENAME","newMeshes","_this","_defaultModel","attachToMesh","buttonIdx","state","console","log","dir","_DefaultControllerFactory","gamepadInfo"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Gamepads/Controllers/genericController.ts"],"sourcesContent":["import type { Scene } from \"../../scene\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\r\n\r\nimport { WebVRController } from \"./webVRController\";\r\nimport type { ExtendedGamepadButton } from \"./poseEnabledController\";\r\nimport { PoseEnabledControllerHelper } from \"./poseEnabledController\";\r\n\r\n/**\r\n * Generic Controller\r\n */\r\nexport class GenericController extends WebVRController {\r\n    /**\r\n     * Base Url for the controller model.\r\n     */\r\n    public static readonly MODEL_BASE_URL: string = \"https://controllers.babylonjs.com/generic/\";\r\n    /**\r\n     * File name for the controller model.\r\n     */\r\n    public static readonly MODEL_FILENAME: string = \"generic.babylon\";\r\n\r\n    /**\r\n     * Creates a new GenericController from a gamepad\r\n     * @param vrGamepad the gamepad that the controller should be created from\r\n     */\r\n    constructor(vrGamepad: any) {\r\n        super(vrGamepad);\r\n    }\r\n\r\n    /**\r\n     * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\r\n     * @param scene scene in which to add meshes\r\n     * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\r\n     */\r\n    public initControllerMesh(scene: Scene, meshLoaded?: (mesh: AbstractMesh) => void) {\r\n        SceneLoader.ImportMesh(\"\", GenericController.MODEL_BASE_URL, GenericController.MODEL_FILENAME, scene, (newMeshes) => {\r\n            this._defaultModel = newMeshes[1];\r\n            this.attachToMesh(this._defaultModel);\r\n            if (meshLoaded) {\r\n                meshLoaded(this._defaultModel);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called once for each button that changed state since the last frame\r\n     * @param buttonIdx Which button index changed\r\n     * @param state New state of the button\r\n     */\r\n    protected _handleButtonChange(buttonIdx: number, state: ExtendedGamepadButton) {\r\n        console.log(\"Button id: \" + buttonIdx + \"state: \");\r\n        console.dir(state);\r\n    }\r\n}\r\n\r\nPoseEnabledControllerHelper._DefaultControllerFactory = (gamepadInfo: any) => new GenericController(gamepadInfo);\r\n"]},"metadata":{},"sourceType":"module"}