{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { MaterialHelper } from \"../../../materialHelper.js\";\n/**\n * Block used to implement clip planes\n */\n\nvar ClipPlanesBlock =\n/** @class */\nfunction (_super) {\n  __extends(ClipPlanesBlock, _super);\n  /**\n   * Create a new ClipPlanesBlock\n   * @param name defines the block name\n   */\n\n\n  function ClipPlanesBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.VertexAndFragment, true) || this;\n\n    _this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false);\n\n    return _this;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  ClipPlanesBlock.prototype.getClassName = function () {\n    return \"ClipPlanesBlock\";\n  };\n  /**\n   * Initialize the block and prepare the context for build\n   * @param state defines the state that will be used for the build\n   */\n\n\n  ClipPlanesBlock.prototype.initialize = function (state) {\n    state._excludeVariableName(\"vClipPlane\");\n\n    state._excludeVariableName(\"fClipDistance\");\n\n    state._excludeVariableName(\"vClipPlane2\");\n\n    state._excludeVariableName(\"fClipDistance2\");\n\n    state._excludeVariableName(\"vClipPlane3\");\n\n    state._excludeVariableName(\"fClipDistance3\");\n\n    state._excludeVariableName(\"vClipPlane4\");\n\n    state._excludeVariableName(\"fClipDistance4\");\n\n    state._excludeVariableName(\"vClipPlane5\");\n\n    state._excludeVariableName(\"fClipDistance5\");\n\n    state._excludeVariableName(\"vClipPlane6\");\n\n    state._excludeVariableName(\"fClipDistance6\");\n  };\n\n  Object.defineProperty(ClipPlanesBlock.prototype, \"worldPosition\", {\n    /**\n     * Gets the worldPosition input component\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClipPlanesBlock.prototype, \"target\", {\n    get: function get() {\n      return NodeMaterialBlockTargets.VertexAndFragment;\n    },\n    set: function set(value) {},\n    enumerable: false,\n    configurable: true\n  });\n\n  ClipPlanesBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    var scene = mesh.getScene();\n    var useClipPlane1 = scene.clipPlane !== undefined && scene.clipPlane !== null;\n    var useClipPlane2 = scene.clipPlane2 !== undefined && scene.clipPlane2 !== null;\n    var useClipPlane3 = scene.clipPlane3 !== undefined && scene.clipPlane3 !== null;\n    var useClipPlane4 = scene.clipPlane4 !== undefined && scene.clipPlane4 !== null;\n    var useClipPlane5 = scene.clipPlane5 !== undefined && scene.clipPlane5 !== null;\n    var useClipPlane6 = scene.clipPlane6 !== undefined && scene.clipPlane6 !== null;\n    defines.setValue(\"CLIPPLANE\", useClipPlane1, true);\n    defines.setValue(\"CLIPPLANE2\", useClipPlane2, true);\n    defines.setValue(\"CLIPPLANE3\", useClipPlane3, true);\n    defines.setValue(\"CLIPPLANE4\", useClipPlane4, true);\n    defines.setValue(\"CLIPPLANE5\", useClipPlane5, true);\n    defines.setValue(\"CLIPPLANE6\", useClipPlane6, true);\n  };\n\n  ClipPlanesBlock.prototype.bind = function (effect, nodeMaterial, mesh) {\n    if (!mesh) {\n      return;\n    }\n\n    var scene = mesh.getScene();\n    MaterialHelper.BindClipPlane(effect, scene);\n  };\n\n  ClipPlanesBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var comments = \"//\".concat(this.name);\n\n    if (state.target !== NodeMaterialBlockTargets.Fragment) {\n      // Vertex\n      var worldPos = this.worldPosition;\n\n      state._emitFunctionFromInclude(\"clipPlaneVertexDeclaration\", comments, {\n        replaceStrings: [{\n          search: /uniform vec4 vClipPlane\\d*;/g,\n          replace: \"\"\n        }]\n      });\n\n      state.compilationString += state._emitCodeFromInclude(\"clipPlaneVertex\", comments, {\n        replaceStrings: [{\n          search: /worldPos/g,\n          replace: worldPos.associatedVariableName\n        }]\n      });\n\n      state._emitUniformFromString(\"vClipPlane\", \"vec4\");\n\n      state._emitUniformFromString(\"vClipPlane2\", \"vec4\");\n\n      state._emitUniformFromString(\"vClipPlane3\", \"vec4\");\n\n      state._emitUniformFromString(\"vClipPlane4\", \"vec4\");\n\n      state._emitUniformFromString(\"vClipPlane5\", \"vec4\");\n\n      state._emitUniformFromString(\"vClipPlane6\", \"vec4\");\n\n      return;\n    } // Fragment\n\n\n    state.sharedData.bindableBlocks.push(this);\n    state.sharedData.blocksWithDefines.push(this);\n\n    state._emitFunctionFromInclude(\"clipPlaneFragmentDeclaration\", comments);\n\n    state.compilationString += state._emitCodeFromInclude(\"clipPlaneFragment\", comments);\n    return this;\n  };\n\n  return ClipPlanesBlock;\n}(NodeMaterialBlock);\n\nexport { ClipPlanesBlock };\nRegisterClass(\"BABYLON.ClipPlanesBlock\", ClipPlanesBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","MaterialHelper","__extends","name","_super","VertexAndFragment","_this","registerInput","Vector4","ClipPlanesBlock","state","_excludeVariableName","Object","_inputs","value","mesh","nodeMaterial","defines","scene","getScene","useClipPlane1","clipPlane","undefined","useClipPlane2","clipPlane2","useClipPlane3","clipPlane3","useClipPlane4","clipPlane4","useClipPlane5","clipPlane5","useClipPlane6","clipPlane6","setValue","effect","BindClipPlane","_buildBlock","call","comments","target","Fragment","worldPos","worldPosition","_emitFunctionFromInclude","replaceStrings","search","replace","compilationString","_emitCodeFromInclude","associatedVariableName","_emitUniformFromString","sharedData","bindableBlocks","push","blocksWithDefines"],"sourceRoot":"","sources":["../../../../../../../../lts/core/generated/Materials/Node/Blocks/Dual/clipPlanesBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { MaterialHelper } from \"../../../materialHelper\";\r\nimport type { Effect } from \"../../../effect\";\r\nimport type { NodeMaterial, NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport type { Mesh } from \"../../../../Meshes/mesh\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\n/**\r\n * Block used to implement clip planes\r\n */\r\nexport class ClipPlanesBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Create a new ClipPlanesBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.VertexAndFragment, true);\r\n\r\n        this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ClipPlanesBlock\";\r\n    }\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"vClipPlane\");\r\n        state._excludeVariableName(\"fClipDistance\");\r\n        state._excludeVariableName(\"vClipPlane2\");\r\n        state._excludeVariableName(\"fClipDistance2\");\r\n        state._excludeVariableName(\"vClipPlane3\");\r\n        state._excludeVariableName(\"fClipDistance3\");\r\n        state._excludeVariableName(\"vClipPlane4\");\r\n        state._excludeVariableName(\"fClipDistance4\");\r\n        state._excludeVariableName(\"vClipPlane5\");\r\n        state._excludeVariableName(\"fClipDistance5\");\r\n        state._excludeVariableName(\"vClipPlane6\");\r\n        state._excludeVariableName(\"fClipDistance6\");\r\n    }\r\n\r\n    /**\r\n     * Gets the worldPosition input component\r\n     */\r\n    public get worldPosition(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    public get target() {\r\n        return NodeMaterialBlockTargets.VertexAndFragment;\r\n    }\r\n\r\n    public set target(value: NodeMaterialBlockTargets) {}\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        const scene = mesh.getScene();\r\n\r\n        const useClipPlane1 = scene.clipPlane !== undefined && scene.clipPlane !== null;\r\n        const useClipPlane2 = scene.clipPlane2 !== undefined && scene.clipPlane2 !== null;\r\n        const useClipPlane3 = scene.clipPlane3 !== undefined && scene.clipPlane3 !== null;\r\n        const useClipPlane4 = scene.clipPlane4 !== undefined && scene.clipPlane4 !== null;\r\n        const useClipPlane5 = scene.clipPlane5 !== undefined && scene.clipPlane5 !== null;\r\n        const useClipPlane6 = scene.clipPlane6 !== undefined && scene.clipPlane6 !== null;\r\n\r\n        defines.setValue(\"CLIPPLANE\", useClipPlane1, true);\r\n        defines.setValue(\"CLIPPLANE2\", useClipPlane2, true);\r\n        defines.setValue(\"CLIPPLANE3\", useClipPlane3, true);\r\n        defines.setValue(\"CLIPPLANE4\", useClipPlane4, true);\r\n        defines.setValue(\"CLIPPLANE5\", useClipPlane5, true);\r\n        defines.setValue(\"CLIPPLANE6\", useClipPlane6, true);\r\n    }\r\n\r\n    public bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh) {\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        const scene = mesh.getScene();\r\n\r\n        MaterialHelper.BindClipPlane(effect, scene);\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const comments = `//${this.name}`;\r\n        if (state.target !== NodeMaterialBlockTargets.Fragment) {\r\n            // Vertex\r\n            const worldPos = this.worldPosition;\r\n\r\n            state._emitFunctionFromInclude(\"clipPlaneVertexDeclaration\", comments, {\r\n                replaceStrings: [{ search: /uniform vec4 vClipPlane\\d*;/g, replace: \"\" }],\r\n            });\r\n            state.compilationString += state._emitCodeFromInclude(\"clipPlaneVertex\", comments, {\r\n                replaceStrings: [{ search: /worldPos/g, replace: worldPos.associatedVariableName }],\r\n            });\r\n\r\n            state._emitUniformFromString(\"vClipPlane\", \"vec4\");\r\n            state._emitUniformFromString(\"vClipPlane2\", \"vec4\");\r\n            state._emitUniformFromString(\"vClipPlane3\", \"vec4\");\r\n            state._emitUniformFromString(\"vClipPlane4\", \"vec4\");\r\n            state._emitUniformFromString(\"vClipPlane5\", \"vec4\");\r\n            state._emitUniformFromString(\"vClipPlane6\", \"vec4\");\r\n\r\n            return;\r\n        }\r\n\r\n        // Fragment\r\n        state.sharedData.bindableBlocks.push(this);\r\n        state.sharedData.blocksWithDefines.push(this);\r\n\r\n        state._emitFunctionFromInclude(\"clipPlaneFragmentDeclaration\", comments);\r\n        state.compilationString += state._emitCodeFromInclude(\"clipPlaneFragment\", comments);\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ClipPlanesBlock\", ClipPlanesBlock);\r\n"]},"metadata":{},"sourceType":"module"}