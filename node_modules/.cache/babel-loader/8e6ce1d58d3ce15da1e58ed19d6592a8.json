{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.timers.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport { __extends } from \"tslib\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { InternalTexture, InternalTextureSource } from \"../Materials/Textures/internalTexture.js\";\nimport { IsDocumentAvailable, IsWindowObjectExist } from \"../Misc/domManagement.js\";\nimport { EngineStore } from \"./engineStore.js\";\nimport { _WarnImport } from \"../Misc/devTools.js\";\nimport { ThinEngine } from \"./thinEngine.js\";\nimport { PerformanceMonitor } from \"../Misc/performanceMonitor.js\";\nimport { PerfCounter } from \"../Misc/perfCounter.js\";\nimport { WebGLDataBuffer } from \"../Meshes/WebGL/webGLDataBuffer.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { WebGLHardwareTexture } from \"./WebGL/webGLHardwareTexture.js\";\nimport \"./Extensions/engine.alpha.js\";\nimport \"./Extensions/engine.readTexture.js\";\nimport \"./Extensions/engine.dynamicBuffer.js\";\n/**\n * The engine class is responsible for interfacing with all lower-level APIs such as WebGL and Audio\n */\n\nvar Engine =\n/** @class */\nfunction (_super) {\n  __extends(Engine, _super);\n  /**\n   * Creates a new engine\n   * @param canvasOrContext defines the canvas or WebGL context to use for rendering. If you provide a WebGL context, Babylon.js will not hook events on the canvas (like pointers, keyboards, etc...) so no event observables will be available. This is mostly used when Babylon.js is used as a plugin on a system which already used the WebGL context\n   * @param antialias defines enable antialiasing (default: false)\n   * @param options defines further options to be sent to the getContext() function\n   * @param adaptToDeviceRatio defines whether to adapt to the device's viewport characteristics (default: false)\n   */\n\n\n  function Engine(canvasOrContext, antialias, options, adaptToDeviceRatio) {\n    if (adaptToDeviceRatio === void 0) {\n      adaptToDeviceRatio = false;\n    }\n\n    var _this = _super.call(this, canvasOrContext, antialias, options, adaptToDeviceRatio) || this; // Members\n\n    /**\n     * Gets or sets a boolean to enable/disable IndexedDB support and avoid XHR on .manifest\n     **/\n\n\n    _this.enableOfflineSupport = false;\n    /**\n     * Gets or sets a boolean to enable/disable checking manifest if IndexedDB support is enabled (js will always consider the database is up to date)\n     **/\n\n    _this.disableManifestCheck = false;\n    /**\n     * Gets the list of created scenes\n     */\n\n    _this.scenes = new Array();\n    /** @hidden */\n\n    _this._virtualScenes = new Array();\n    /**\n     * Event raised when a new scene is created\n     */\n\n    _this.onNewSceneAddedObservable = new Observable();\n    /**\n     * Gets the list of created postprocesses\n     */\n\n    _this.postProcesses = new Array();\n    /**\n     * Gets a boolean indicating if the pointer is currently locked\n     */\n\n    _this.isPointerLock = false; // Observables\n\n    /**\n     * Observable event triggered each time the rendering canvas is resized\n     */\n\n    _this.onResizeObservable = new Observable();\n    /**\n     * Observable event triggered each time the canvas loses focus\n     */\n\n    _this.onCanvasBlurObservable = new Observable();\n    /**\n     * Observable event triggered each time the canvas gains focus\n     */\n\n    _this.onCanvasFocusObservable = new Observable();\n    /**\n     * Observable event triggered each time the canvas receives pointerout event\n     */\n\n    _this.onCanvasPointerOutObservable = new Observable();\n    /**\n     * Observable raised when the engine begins a new frame\n     */\n\n    _this.onBeginFrameObservable = new Observable();\n    /**\n     * If set, will be used to request the next animation frame for the render loop\n     */\n\n    _this.customAnimationFrameRequester = null;\n    /**\n     * Observable raised when the engine ends the current frame\n     */\n\n    _this.onEndFrameObservable = new Observable();\n    /**\n     * Observable raised when the engine is about to compile a shader\n     */\n\n    _this.onBeforeShaderCompilationObservable = new Observable();\n    /**\n     * Observable raised when the engine has just compiled a shader\n     */\n\n    _this.onAfterShaderCompilationObservable = new Observable(); // Deterministic lockstepMaxSteps\n\n    _this._deterministicLockstep = false;\n    _this._lockstepMaxSteps = 4;\n    _this._timeStep = 1 / 60; // FPS\n\n    _this._fps = 60;\n    _this._deltaTime = 0;\n    /** @hidden */\n\n    _this._drawCalls = new PerfCounter();\n    /** Gets or sets the tab index to set to the rendering canvas. 1 is the minimum value to set to be able to capture keyboard events */\n\n    _this.canvasTabIndex = 1;\n    /**\n     * Turn this value on if you want to pause FPS computation when in background\n     */\n\n    _this.disablePerformanceMonitorInBackground = false;\n    _this._performanceMonitor = new PerformanceMonitor();\n    _this._compatibilityMode = true;\n    /**\n     * Gets or sets the current render pass id\n     */\n\n    _this.currentRenderPassId = 0;\n    _this._renderPassNames = [\"main\"];\n    Engine.Instances.push(_this);\n\n    if (!canvasOrContext) {\n      return _this;\n    }\n\n    _this._features.supportRenderPasses = true;\n    options = _this._creationOptions;\n\n    if (canvasOrContext.getContext) {\n      var canvas_1 = canvasOrContext;\n\n      _this._sharedInit(canvas_1, !!options.doNotHandleTouchAction, options.audioEngine);\n\n      if (IsWindowObjectExist()) {\n        var anyDoc_1 = document; // Fullscreen\n\n        _this._onFullscreenChange = function () {\n          if (anyDoc_1.fullscreen !== undefined) {\n            _this.isFullscreen = anyDoc_1.fullscreen;\n          } else if (anyDoc_1.mozFullScreen !== undefined) {\n            _this.isFullscreen = anyDoc_1.mozFullScreen;\n          } else if (anyDoc_1.webkitIsFullScreen !== undefined) {\n            _this.isFullscreen = anyDoc_1.webkitIsFullScreen;\n          } else if (anyDoc_1.msIsFullScreen !== undefined) {\n            _this.isFullscreen = anyDoc_1.msIsFullScreen;\n          } // Pointer lock\n\n\n          if (_this.isFullscreen && _this._pointerLockRequested && canvas_1) {\n            Engine._RequestPointerlock(canvas_1);\n          }\n        };\n\n        document.addEventListener(\"fullscreenchange\", _this._onFullscreenChange, false);\n        document.addEventListener(\"mozfullscreenchange\", _this._onFullscreenChange, false);\n        document.addEventListener(\"webkitfullscreenchange\", _this._onFullscreenChange, false);\n        document.addEventListener(\"msfullscreenchange\", _this._onFullscreenChange, false); // Pointer lock\n\n        _this._onPointerLockChange = function () {\n          _this.isPointerLock = anyDoc_1.mozPointerLockElement === canvas_1 || anyDoc_1.webkitPointerLockElement === canvas_1 || anyDoc_1.msPointerLockElement === canvas_1 || anyDoc_1.pointerLockElement === canvas_1;\n        };\n\n        document.addEventListener(\"pointerlockchange\", _this._onPointerLockChange, false);\n        document.addEventListener(\"mspointerlockchange\", _this._onPointerLockChange, false);\n        document.addEventListener(\"mozpointerlockchange\", _this._onPointerLockChange, false);\n        document.addEventListener(\"webkitpointerlockchange\", _this._onPointerLockChange, false); // Create Audio Engine if needed.\n\n        if (!Engine.audioEngine && options.audioEngine && Engine.AudioEngineFactory) {\n          Engine.audioEngine = Engine.AudioEngineFactory(_this.getRenderingCanvas(), _this.getAudioContext(), _this.getAudioDestination());\n        }\n      }\n\n      _this._connectVREvents();\n\n      _this.enableOfflineSupport = Engine.OfflineProviderFactory !== undefined;\n      _this._deterministicLockstep = !!options.deterministicLockstep;\n      _this._lockstepMaxSteps = options.lockstepMaxSteps || 0;\n      _this._timeStep = options.timeStep || 1 / 60;\n    } // Load WebVR Devices\n\n\n    _this._prepareVRComponent();\n\n    if (options.autoEnableWebVR) {\n      _this.initWebVR();\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(Engine, \"NpmPackage\", {\n    /**\n     * Returns the current npm package of the sdk\n     */\n    // Not mixed with Version for tooling purpose.\n    get: function get() {\n      return ThinEngine.NpmPackage;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Engine, \"Version\", {\n    /**\n     * Returns the current version of the framework\n     */\n    get: function get() {\n      return ThinEngine.Version;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Engine, \"Instances\", {\n    /** Gets the list of created engines */\n    get: function get() {\n      return EngineStore.Instances;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Engine, \"LastCreatedEngine\", {\n    /**\n     * Gets the latest created engine\n     */\n    get: function get() {\n      return EngineStore.LastCreatedEngine;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Engine, \"LastCreatedScene\", {\n    /**\n     * Gets the latest created scene\n     */\n    get: function get() {\n      return EngineStore.LastCreatedScene;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** @hidden */\n\n  /**\n   * Engine abstraction for loading and creating an image bitmap from a given source string.\n   * @param imageSource source to load the image from.\n   * @param options An object that sets options for the image's extraction.\n   * @returns ImageBitmap.\n   */\n\n  Engine.prototype._createImageBitmapFromSource = function (imageSource, options) {\n    var _this = this;\n\n    var promise = new Promise(function (resolve, reject) {\n      var image = new Image();\n\n      image.onload = function () {\n        image.decode().then(function () {\n          _this.createImageBitmap(image, options).then(function (imageBitmap) {\n            resolve(imageBitmap);\n          });\n        });\n      };\n\n      image.onerror = function () {\n        reject(\"Error loading image \".concat(image.src));\n      };\n\n      image.src = imageSource;\n    });\n    return promise;\n  };\n  /**\n   * Engine abstraction for createImageBitmap\n   * @param image source for image\n   * @param options An object that sets options for the image's extraction.\n   * @returns ImageBitmap\n   */\n\n\n  Engine.prototype.createImageBitmap = function (image, options) {\n    return createImageBitmap(image, options);\n  };\n  /**\n   * Resize an image and returns the image data as an uint8array\n   * @param image image to resize\n   * @param bufferWidth destination buffer width\n   * @param bufferHeight destination buffer height\n   * @returns an uint8array containing RGBA values of bufferWidth * bufferHeight size\n   */\n\n\n  Engine.prototype.resizeImageBitmap = function (image, bufferWidth, bufferHeight) {\n    var canvas = this.createCanvas(bufferWidth, bufferHeight);\n    var context = canvas.getContext(\"2d\");\n\n    if (!context) {\n      throw new Error(\"Unable to get 2d context for resizeImageBitmap\");\n    }\n\n    context.drawImage(image, 0, 0); // Create VertexData from map data\n    // Cast is due to wrong definition in lib.d.ts from ts 1.3 - https://github.com/Microsoft/TypeScript/issues/949\n\n    var buffer = context.getImageData(0, 0, bufferWidth, bufferHeight).data;\n    return buffer;\n  };\n  /**\n   * Will flag all materials in all scenes in all engines as dirty to trigger new shader compilation\n   * @param flag defines which part of the materials must be marked as dirty\n   * @param predicate defines a predicate used to filter which materials should be affected\n   */\n\n\n  Engine.MarkAllMaterialsAsDirty = function (flag, predicate) {\n    for (var engineIndex = 0; engineIndex < Engine.Instances.length; engineIndex++) {\n      var engine = Engine.Instances[engineIndex];\n\n      for (var sceneIndex = 0; sceneIndex < engine.scenes.length; sceneIndex++) {\n        engine.scenes[sceneIndex].markAllMaterialsAsDirty(flag, predicate);\n      }\n    }\n  };\n  /**\n   * Method called to create the default loading screen.\n   * This can be overridden in your own app.\n   * @param canvas The rendering canvas element\n   * @returns The loading screen\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  Engine.DefaultLoadingScreenFactory = function (canvas) {\n    throw _WarnImport(\"LoadingScreen\");\n  };\n\n  Object.defineProperty(Engine.prototype, \"_supportsHardwareTextureRescaling\", {\n    get: function get() {\n      return !!Engine._RescalePostProcessFactory;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Engine.prototype, \"performanceMonitor\", {\n    /**\n     * Gets the performance monitor attached to this engine\n     * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#engineinstrumentation\n     */\n    get: function get() {\n      return this._performanceMonitor;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Engine.prototype, \"compatibilityMode\", {\n    /**\n     * (WebGPU only) True (default) to be in compatibility mode, meaning rendering all existing scenes without artifacts (same rendering than WebGL).\n     * Setting the property to false will improve performances but may not work in some scenes if some precautions are not taken.\n     * See https://doc.babylonjs.com/advanced_topics/webGPU/webGPUOptimization/webGPUNonCompatibilityMode for more details\n     */\n    get: function get() {\n      return this._compatibilityMode;\n    },\n    set: function set(mode) {\n      // not supported in WebGL\n      this._compatibilityMode = true;\n    },\n    enumerable: false,\n    configurable: true\n  }); // Events\n\n  /**\n   * Gets the HTML element used to attach event listeners\n   * @returns a HTML element\n   */\n\n  Engine.prototype.getInputElement = function () {\n    return this._renderingCanvas;\n  };\n  /**\n   * Shared initialization across engines types.\n   * @param canvas The canvas associated with this instance of the engine.\n   * @param doNotHandleTouchAction Defines that engine should ignore modifying touch action attribute and style\n   * @param audioEngine Defines if an audio engine should be created by default\n   */\n\n\n  Engine.prototype._sharedInit = function (canvas, doNotHandleTouchAction, audioEngine) {\n    var _this = this;\n\n    _super.prototype._sharedInit.call(this, canvas, doNotHandleTouchAction, audioEngine);\n\n    this._onCanvasFocus = function () {\n      _this.onCanvasFocusObservable.notifyObservers(_this);\n    };\n\n    this._onCanvasBlur = function () {\n      _this.onCanvasBlurObservable.notifyObservers(_this);\n    };\n\n    canvas.addEventListener(\"focus\", this._onCanvasFocus);\n    canvas.addEventListener(\"blur\", this._onCanvasBlur);\n\n    this._onBlur = function () {\n      if (_this.disablePerformanceMonitorInBackground) {\n        _this._performanceMonitor.disable();\n      }\n\n      _this._windowIsBackground = true;\n    };\n\n    this._onFocus = function () {\n      if (_this.disablePerformanceMonitorInBackground) {\n        _this._performanceMonitor.enable();\n      }\n\n      _this._windowIsBackground = false;\n    };\n\n    this._onCanvasPointerOut = function (ev) {\n      // Check that the element at the point of the pointer out isn't the canvas and if it isn't, notify observers\n      // Note: This is a workaround for a bug with Safari\n      if (document.elementFromPoint(ev.clientX, ev.clientY) !== canvas) {\n        _this.onCanvasPointerOutObservable.notifyObservers(ev);\n      }\n    };\n\n    if (IsWindowObjectExist()) {\n      var hostWindow = this.getHostWindow();\n\n      if (hostWindow) {\n        hostWindow.addEventListener(\"blur\", this._onBlur);\n        hostWindow.addEventListener(\"focus\", this._onFocus);\n      }\n    }\n\n    canvas.addEventListener(\"pointerout\", this._onCanvasPointerOut);\n\n    if (!doNotHandleTouchAction) {\n      this._disableTouchAction();\n    } // Create Audio Engine if needed.\n\n\n    if (!Engine.audioEngine && audioEngine && Engine.AudioEngineFactory) {\n      Engine.audioEngine = Engine.AudioEngineFactory(this.getRenderingCanvas(), this.getAudioContext(), this.getAudioDestination());\n    }\n  };\n  /**\n   * Gets current aspect ratio\n   * @param viewportOwner defines the camera to use to get the aspect ratio\n   * @param useScreen defines if screen size must be used (or the current render target if any)\n   * @returns a number defining the aspect ratio\n   */\n\n\n  Engine.prototype.getAspectRatio = function (viewportOwner, useScreen) {\n    if (useScreen === void 0) {\n      useScreen = false;\n    }\n\n    var viewport = viewportOwner.viewport;\n    return this.getRenderWidth(useScreen) * viewport.width / (this.getRenderHeight(useScreen) * viewport.height);\n  };\n  /**\n   * Gets current screen aspect ratio\n   * @returns a number defining the aspect ratio\n   */\n\n\n  Engine.prototype.getScreenAspectRatio = function () {\n    return this.getRenderWidth(true) / this.getRenderHeight(true);\n  };\n  /**\n   * Gets the client rect of the HTML canvas attached with the current webGL context\n   * @returns a client rectangle\n   */\n\n\n  Engine.prototype.getRenderingCanvasClientRect = function () {\n    if (!this._renderingCanvas) {\n      return null;\n    }\n\n    return this._renderingCanvas.getBoundingClientRect();\n  };\n  /**\n   * Gets the client rect of the HTML element used for events\n   * @returns a client rectangle\n   */\n\n\n  Engine.prototype.getInputElementClientRect = function () {\n    if (!this._renderingCanvas) {\n      return null;\n    }\n\n    return this.getInputElement().getBoundingClientRect();\n  };\n  /**\n   * Gets a boolean indicating that the engine is running in deterministic lock step mode\n   * @see https://doc.babylonjs.com/babylon101/animations#deterministic-lockstep\n   * @returns true if engine is in deterministic lock step mode\n   */\n\n\n  Engine.prototype.isDeterministicLockStep = function () {\n    return this._deterministicLockstep;\n  };\n  /**\n   * Gets the max steps when engine is running in deterministic lock step\n   * @see https://doc.babylonjs.com/babylon101/animations#deterministic-lockstep\n   * @returns the max steps\n   */\n\n\n  Engine.prototype.getLockstepMaxSteps = function () {\n    return this._lockstepMaxSteps;\n  };\n  /**\n   * Returns the time in ms between steps when using deterministic lock step.\n   * @returns time step in (ms)\n   */\n\n\n  Engine.prototype.getTimeStep = function () {\n    return this._timeStep * 1000;\n  };\n  /**\n   * Force the mipmap generation for the given render target texture\n   * @param texture defines the render target texture to use\n   * @param unbind defines whether or not to unbind the texture after generation. Defaults to true.\n   */\n\n\n  Engine.prototype.generateMipMapsForCubemap = function (texture, unbind) {\n    if (unbind === void 0) {\n      unbind = true;\n    }\n\n    if (texture.generateMipMaps) {\n      var gl = this._gl;\n\n      this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\n\n      gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\n\n      if (unbind) {\n        this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\n      }\n    }\n  };\n  /** States */\n\n  /**\n   * Gets a boolean indicating if depth testing is enabled\n   * @returns the current state\n   */\n\n\n  Engine.prototype.getDepthBuffer = function () {\n    return this._depthCullingState.depthTest;\n  };\n  /**\n   * Enable or disable depth buffering\n   * @param enable defines the state to set\n   */\n\n\n  Engine.prototype.setDepthBuffer = function (enable) {\n    this._depthCullingState.depthTest = enable;\n  };\n  /**\n   * Gets a boolean indicating if depth writing is enabled\n   * @returns the current depth writing state\n   */\n\n\n  Engine.prototype.getDepthWrite = function () {\n    return this._depthCullingState.depthMask;\n  };\n  /**\n   * Enable or disable depth writing\n   * @param enable defines the state to set\n   */\n\n\n  Engine.prototype.setDepthWrite = function (enable) {\n    this._depthCullingState.depthMask = enable;\n  };\n  /**\n   * Gets a boolean indicating if stencil buffer is enabled\n   * @returns the current stencil buffer state\n   */\n\n\n  Engine.prototype.getStencilBuffer = function () {\n    return this._stencilState.stencilTest;\n  };\n  /**\n   * Enable or disable the stencil buffer\n   * @param enable defines if the stencil buffer must be enabled or disabled\n   */\n\n\n  Engine.prototype.setStencilBuffer = function (enable) {\n    this._stencilState.stencilTest = enable;\n  };\n  /**\n   * Gets the current stencil mask\n   * @returns a number defining the new stencil mask to use\n   */\n\n\n  Engine.prototype.getStencilMask = function () {\n    return this._stencilState.stencilMask;\n  };\n  /**\n   * Sets the current stencil mask\n   * @param mask defines the new stencil mask to use\n   */\n\n\n  Engine.prototype.setStencilMask = function (mask) {\n    this._stencilState.stencilMask = mask;\n  };\n  /**\n   * Gets the current stencil function\n   * @returns a number defining the stencil function to use\n   */\n\n\n  Engine.prototype.getStencilFunction = function () {\n    return this._stencilState.stencilFunc;\n  };\n  /**\n   * Gets the current stencil reference value\n   * @returns a number defining the stencil reference value to use\n   */\n\n\n  Engine.prototype.getStencilFunctionReference = function () {\n    return this._stencilState.stencilFuncRef;\n  };\n  /**\n   * Gets the current stencil mask\n   * @returns a number defining the stencil mask to use\n   */\n\n\n  Engine.prototype.getStencilFunctionMask = function () {\n    return this._stencilState.stencilFuncMask;\n  };\n  /**\n   * Sets the current stencil function\n   * @param stencilFunc defines the new stencil function to use\n   */\n\n\n  Engine.prototype.setStencilFunction = function (stencilFunc) {\n    this._stencilState.stencilFunc = stencilFunc;\n  };\n  /**\n   * Sets the current stencil reference\n   * @param reference defines the new stencil reference to use\n   */\n\n\n  Engine.prototype.setStencilFunctionReference = function (reference) {\n    this._stencilState.stencilFuncRef = reference;\n  };\n  /**\n   * Sets the current stencil mask\n   * @param mask defines the new stencil mask to use\n   */\n\n\n  Engine.prototype.setStencilFunctionMask = function (mask) {\n    this._stencilState.stencilFuncMask = mask;\n  };\n  /**\n   * Gets the current stencil operation when stencil fails\n   * @returns a number defining stencil operation to use when stencil fails\n   */\n\n\n  Engine.prototype.getStencilOperationFail = function () {\n    return this._stencilState.stencilOpStencilFail;\n  };\n  /**\n   * Gets the current stencil operation when depth fails\n   * @returns a number defining stencil operation to use when depth fails\n   */\n\n\n  Engine.prototype.getStencilOperationDepthFail = function () {\n    return this._stencilState.stencilOpDepthFail;\n  };\n  /**\n   * Gets the current stencil operation when stencil passes\n   * @returns a number defining stencil operation to use when stencil passes\n   */\n\n\n  Engine.prototype.getStencilOperationPass = function () {\n    return this._stencilState.stencilOpStencilDepthPass;\n  };\n  /**\n   * Sets the stencil operation to use when stencil fails\n   * @param operation defines the stencil operation to use when stencil fails\n   */\n\n\n  Engine.prototype.setStencilOperationFail = function (operation) {\n    this._stencilState.stencilOpStencilFail = operation;\n  };\n  /**\n   * Sets the stencil operation to use when depth fails\n   * @param operation defines the stencil operation to use when depth fails\n   */\n\n\n  Engine.prototype.setStencilOperationDepthFail = function (operation) {\n    this._stencilState.stencilOpDepthFail = operation;\n  };\n  /**\n   * Sets the stencil operation to use when stencil passes\n   * @param operation defines the stencil operation to use when stencil passes\n   */\n\n\n  Engine.prototype.setStencilOperationPass = function (operation) {\n    this._stencilState.stencilOpStencilDepthPass = operation;\n  };\n  /**\n   * Sets a boolean indicating if the dithering state is enabled or disabled\n   * @param value defines the dithering state\n   */\n\n\n  Engine.prototype.setDitheringState = function (value) {\n    if (value) {\n      this._gl.enable(this._gl.DITHER);\n    } else {\n      this._gl.disable(this._gl.DITHER);\n    }\n  };\n  /**\n   * Sets a boolean indicating if the rasterizer state is enabled or disabled\n   * @param value defines the rasterizer state\n   */\n\n\n  Engine.prototype.setRasterizerState = function (value) {\n    if (value) {\n      this._gl.disable(this._gl.RASTERIZER_DISCARD);\n    } else {\n      this._gl.enable(this._gl.RASTERIZER_DISCARD);\n    }\n  };\n  /**\n   * Gets the current depth function\n   * @returns a number defining the depth function\n   */\n\n\n  Engine.prototype.getDepthFunction = function () {\n    return this._depthCullingState.depthFunc;\n  };\n  /**\n   * Sets the current depth function\n   * @param depthFunc defines the function to use\n   */\n\n\n  Engine.prototype.setDepthFunction = function (depthFunc) {\n    this._depthCullingState.depthFunc = depthFunc;\n  };\n  /**\n   * Sets the current depth function to GREATER\n   */\n\n\n  Engine.prototype.setDepthFunctionToGreater = function () {\n    this.setDepthFunction(516);\n  };\n  /**\n   * Sets the current depth function to GEQUAL\n   */\n\n\n  Engine.prototype.setDepthFunctionToGreaterOrEqual = function () {\n    this.setDepthFunction(518);\n  };\n  /**\n   * Sets the current depth function to LESS\n   */\n\n\n  Engine.prototype.setDepthFunctionToLess = function () {\n    this.setDepthFunction(513);\n  };\n  /**\n   * Sets the current depth function to LEQUAL\n   */\n\n\n  Engine.prototype.setDepthFunctionToLessOrEqual = function () {\n    this.setDepthFunction(515);\n  };\n  /**\n   * Caches the the state of the stencil buffer\n   */\n\n\n  Engine.prototype.cacheStencilState = function () {\n    this._cachedStencilBuffer = this.getStencilBuffer();\n    this._cachedStencilFunction = this.getStencilFunction();\n    this._cachedStencilMask = this.getStencilMask();\n    this._cachedStencilOperationPass = this.getStencilOperationPass();\n    this._cachedStencilOperationFail = this.getStencilOperationFail();\n    this._cachedStencilOperationDepthFail = this.getStencilOperationDepthFail();\n    this._cachedStencilReference = this.getStencilFunctionReference();\n  };\n  /**\n   * Restores the state of the stencil buffer\n   */\n\n\n  Engine.prototype.restoreStencilState = function () {\n    this.setStencilFunction(this._cachedStencilFunction);\n    this.setStencilMask(this._cachedStencilMask);\n    this.setStencilBuffer(this._cachedStencilBuffer);\n    this.setStencilOperationPass(this._cachedStencilOperationPass);\n    this.setStencilOperationFail(this._cachedStencilOperationFail);\n    this.setStencilOperationDepthFail(this._cachedStencilOperationDepthFail);\n    this.setStencilFunctionReference(this._cachedStencilReference);\n  };\n  /**\n   * Directly set the WebGL Viewport\n   * @param x defines the x coordinate of the viewport (in screen space)\n   * @param y defines the y coordinate of the viewport (in screen space)\n   * @param width defines the width of the viewport (in screen space)\n   * @param height defines the height of the viewport (in screen space)\n   * @return the current viewport Object (if any) that is being replaced by this call. You can restore this viewport later on to go back to the original state\n   */\n\n\n  Engine.prototype.setDirectViewport = function (x, y, width, height) {\n    var currentViewport = this._cachedViewport;\n    this._cachedViewport = null;\n\n    this._viewport(x, y, width, height);\n\n    return currentViewport;\n  };\n  /**\n   * Executes a scissor clear (ie. a clear on a specific portion of the screen)\n   * @param x defines the x-coordinate of the top left corner of the clear rectangle\n   * @param y defines the y-coordinate of the corner of the clear rectangle\n   * @param width defines the width of the clear rectangle\n   * @param height defines the height of the clear rectangle\n   * @param clearColor defines the clear color\n   */\n\n\n  Engine.prototype.scissorClear = function (x, y, width, height, clearColor) {\n    this.enableScissor(x, y, width, height);\n    this.clear(clearColor, true, true, true);\n    this.disableScissor();\n  };\n  /**\n   * Enable scissor test on a specific rectangle (ie. render will only be executed on a specific portion of the screen)\n   * @param x defines the x-coordinate of the top left corner of the clear rectangle\n   * @param y defines the y-coordinate of the corner of the clear rectangle\n   * @param width defines the width of the clear rectangle\n   * @param height defines the height of the clear rectangle\n   */\n\n\n  Engine.prototype.enableScissor = function (x, y, width, height) {\n    var gl = this._gl; // Change state\n\n    gl.enable(gl.SCISSOR_TEST);\n    gl.scissor(x, y, width, height);\n  };\n  /**\n   * Disable previously set scissor test rectangle\n   */\n\n\n  Engine.prototype.disableScissor = function () {\n    var gl = this._gl;\n    gl.disable(gl.SCISSOR_TEST);\n  };\n  /**\n   * @param numDrawCalls\n   * @hidden\n   */\n\n\n  Engine.prototype._reportDrawCall = function (numDrawCalls) {\n    if (numDrawCalls === void 0) {\n      numDrawCalls = 1;\n    }\n\n    this._drawCalls.addCount(numDrawCalls, false);\n  };\n  /**\n   * Initializes a webVR display and starts listening to display change events\n   * The onVRDisplayChangedObservable will be notified upon these changes\n   * @returns The onVRDisplayChangedObservable\n   */\n\n\n  Engine.prototype.initWebVR = function () {\n    throw _WarnImport(\"WebVRCamera\");\n  };\n  /** @hidden */\n\n\n  Engine.prototype._prepareVRComponent = function () {// Do nothing as the engine side effect will overload it\n  };\n  /**\n   * @param canvas\n   * @param document\n   * @hidden\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  Engine.prototype._connectVREvents = function (canvas, document) {// Do nothing as the engine side effect will overload it\n  };\n  /** @hidden */\n\n\n  Engine.prototype._submitVRFrame = function () {// Do nothing as the engine side effect will overload it\n  };\n  /**\n   * Call this function to leave webVR mode\n   * Will do nothing if webVR is not supported or if there is no webVR device\n   * @see https://doc.babylonjs.com/how_to/webvr_camera\n   */\n\n\n  Engine.prototype.disableVR = function () {// Do nothing as the engine side effect will overload it\n  };\n  /**\n   * Gets a boolean indicating that the system is in VR mode and is presenting\n   * @returns true if VR mode is engaged\n   */\n\n\n  Engine.prototype.isVRPresenting = function () {\n    return false;\n  };\n  /** @hidden */\n\n\n  Engine.prototype._requestVRFrame = function () {// Do nothing as the engine side effect will overload it\n  };\n  /**\n   * @param url\n   * @param offlineProvider\n   * @param useArrayBuffer\n   * @hidden\n   */\n\n\n  Engine.prototype._loadFileAsync = function (url, offlineProvider, useArrayBuffer) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this._loadFile(url, function (data) {\n        resolve(data);\n      }, undefined, offlineProvider, useArrayBuffer, function (request, exception) {\n        reject(exception);\n      });\n    });\n  };\n  /**\n   * Gets the source code of the vertex shader associated with a specific webGL program\n   * @param program defines the program to use\n   * @returns a string containing the source code of the vertex shader associated with the program\n   */\n\n\n  Engine.prototype.getVertexShaderSource = function (program) {\n    var shaders = this._gl.getAttachedShaders(program);\n\n    if (!shaders) {\n      return null;\n    }\n\n    return this._gl.getShaderSource(shaders[0]);\n  };\n  /**\n   * Gets the source code of the fragment shader associated with a specific webGL program\n   * @param program defines the program to use\n   * @returns a string containing the source code of the fragment shader associated with the program\n   */\n\n\n  Engine.prototype.getFragmentShaderSource = function (program) {\n    var shaders = this._gl.getAttachedShaders(program);\n\n    if (!shaders) {\n      return null;\n    }\n\n    return this._gl.getShaderSource(shaders[1]);\n  };\n  /**\n   * Sets a depth stencil texture from a render target to the according uniform.\n   * @param channel The texture channel\n   * @param uniform The uniform to set\n   * @param texture The render target texture containing the depth stencil texture to apply\n   * @param name The texture name\n   */\n\n\n  Engine.prototype.setDepthStencilTexture = function (channel, uniform, texture, name) {\n    if (channel === undefined) {\n      return;\n    }\n\n    if (uniform) {\n      this._boundUniforms[channel] = uniform;\n    }\n\n    if (!texture || !texture.depthStencilTexture) {\n      this._setTexture(channel, null, undefined, undefined, name);\n    } else {\n      this._setTexture(channel, texture, false, true, name);\n    }\n  };\n  /**\n   * Sets a texture to the webGL context from a postprocess\n   * @param channel defines the channel to use\n   * @param postProcess defines the source postprocess\n   * @param name name of the channel\n   */\n\n\n  Engine.prototype.setTextureFromPostProcess = function (channel, postProcess, name) {\n    var _a;\n\n    var postProcessInput = null;\n\n    if (postProcess) {\n      if (postProcess._textures.data[postProcess._currentRenderTextureInd]) {\n        postProcessInput = postProcess._textures.data[postProcess._currentRenderTextureInd];\n      } else if (postProcess._forcedOutputTexture) {\n        postProcessInput = postProcess._forcedOutputTexture;\n      }\n    }\n\n    this._bindTexture(channel, (_a = postProcessInput === null || postProcessInput === void 0 ? void 0 : postProcessInput.texture) !== null && _a !== void 0 ? _a : null, name);\n  };\n  /**\n   * Binds the output of the passed in post process to the texture channel specified\n   * @param channel The channel the texture should be bound to\n   * @param postProcess The post process which's output should be bound\n   * @param name name of the channel\n   */\n\n\n  Engine.prototype.setTextureFromPostProcessOutput = function (channel, postProcess, name) {\n    var _a, _b;\n\n    this._bindTexture(channel, (_b = (_a = postProcess === null || postProcess === void 0 ? void 0 : postProcess._outputTexture) === null || _a === void 0 ? void 0 : _a.texture) !== null && _b !== void 0 ? _b : null, name);\n  };\n\n  Engine.prototype._rebuildBuffers = function () {\n    // Index / Vertex\n    for (var _i = 0, _a = this.scenes; _i < _a.length; _i++) {\n      var scene = _a[_i];\n      scene.resetCachedMaterial();\n\n      scene._rebuildGeometries();\n\n      scene._rebuildTextures();\n    }\n\n    for (var _b = 0, _c = this._virtualScenes; _b < _c.length; _b++) {\n      var scene = _c[_b];\n      scene.resetCachedMaterial();\n\n      scene._rebuildGeometries();\n\n      scene._rebuildTextures();\n    }\n\n    _super.prototype._rebuildBuffers.call(this);\n  };\n  /** @hidden */\n\n\n  Engine.prototype._renderFrame = function () {\n    for (var index = 0; index < this._activeRenderLoops.length; index++) {\n      var renderFunction = this._activeRenderLoops[index];\n      renderFunction();\n    }\n  };\n\n  Engine.prototype._renderLoop = function () {\n    if (!this._contextWasLost) {\n      var shouldRender = true;\n\n      if (!this.renderEvenInBackground && this._windowIsBackground) {\n        shouldRender = false;\n      }\n\n      if (shouldRender) {\n        // Start new frame\n        this.beginFrame(); // Child canvases\n\n        if (!this._renderViews()) {\n          // Main frame\n          this._renderFrame();\n        } // Present\n\n\n        this.endFrame();\n      }\n    }\n\n    if (this._activeRenderLoops.length > 0) {\n      // Register new frame\n      if (this.customAnimationFrameRequester) {\n        this.customAnimationFrameRequester.requestID = this._queueNewFrame(this.customAnimationFrameRequester.renderFunction || this._boundRenderFunction, this.customAnimationFrameRequester);\n        this._frameHandler = this.customAnimationFrameRequester.requestID;\n      } else if (this.isVRPresenting()) {\n        this._requestVRFrame();\n      } else {\n        this._frameHandler = this._queueNewFrame(this._boundRenderFunction, this.getHostWindow());\n      }\n    } else {\n      this._renderingQueueLaunched = false;\n    }\n  };\n  /** @hidden */\n\n\n  Engine.prototype._renderViews = function () {\n    return false;\n  };\n  /**\n   * Toggle full screen mode\n   * @param requestPointerLock defines if a pointer lock should be requested from the user\n   */\n\n\n  Engine.prototype.switchFullscreen = function (requestPointerLock) {\n    if (this.isFullscreen) {\n      this.exitFullscreen();\n    } else {\n      this.enterFullscreen(requestPointerLock);\n    }\n  };\n  /**\n   * Enters full screen mode\n   * @param requestPointerLock defines if a pointer lock should be requested from the user\n   */\n\n\n  Engine.prototype.enterFullscreen = function (requestPointerLock) {\n    if (!this.isFullscreen) {\n      this._pointerLockRequested = requestPointerLock;\n\n      if (this._renderingCanvas) {\n        Engine._RequestFullscreen(this._renderingCanvas);\n      }\n    }\n  };\n  /**\n   * Exits full screen mode\n   */\n\n\n  Engine.prototype.exitFullscreen = function () {\n    if (this.isFullscreen) {\n      Engine._ExitFullscreen();\n    }\n  };\n  /**\n   * Enters Pointerlock mode\n   */\n\n\n  Engine.prototype.enterPointerlock = function () {\n    if (this._renderingCanvas) {\n      Engine._RequestPointerlock(this._renderingCanvas);\n    }\n  };\n  /**\n   * Exits Pointerlock mode\n   */\n\n\n  Engine.prototype.exitPointerlock = function () {\n    Engine._ExitPointerlock();\n  };\n  /**\n   * Begin a new frame\n   */\n\n\n  Engine.prototype.beginFrame = function () {\n    this._measureFps();\n\n    this.onBeginFrameObservable.notifyObservers(this);\n\n    _super.prototype.beginFrame.call(this);\n  };\n  /**\n   * End the current frame\n   */\n\n\n  Engine.prototype.endFrame = function () {\n    _super.prototype.endFrame.call(this);\n\n    this._submitVRFrame();\n\n    this.onEndFrameObservable.notifyObservers(this);\n  };\n  /**\n   * Resize the view according to the canvas' size\n   * @param forceSetSize true to force setting the sizes of the underlying canvas\n   */\n\n\n  Engine.prototype.resize = function (forceSetSize) {\n    if (forceSetSize === void 0) {\n      forceSetSize = false;\n    } // We're not resizing the size of the canvas while in VR mode & presenting\n\n\n    if (this.isVRPresenting()) {\n      return;\n    }\n\n    _super.prototype.resize.call(this, forceSetSize);\n  };\n  /**\n   * Force a specific size of the canvas\n   * @param width defines the new canvas' width\n   * @param height defines the new canvas' height\n   * @param forceSetSize true to force setting the sizes of the underlying canvas\n   * @returns true if the size was changed\n   */\n\n\n  Engine.prototype.setSize = function (width, height, forceSetSize) {\n    if (forceSetSize === void 0) {\n      forceSetSize = false;\n    }\n\n    if (!this._renderingCanvas) {\n      return false;\n    }\n\n    if (!_super.prototype.setSize.call(this, width, height, forceSetSize)) {\n      return false;\n    }\n\n    if (this.scenes) {\n      for (var index = 0; index < this.scenes.length; index++) {\n        var scene = this.scenes[index];\n\n        for (var camIndex = 0; camIndex < scene.cameras.length; camIndex++) {\n          var cam = scene.cameras[camIndex];\n          cam._currentRenderId = 0;\n        }\n      }\n\n      if (this.onResizeObservable.hasObservers()) {\n        this.onResizeObservable.notifyObservers(this);\n      }\n    }\n\n    return true;\n  };\n\n  Engine.prototype._deletePipelineContext = function (pipelineContext) {\n    var webGLPipelineContext = pipelineContext;\n\n    if (webGLPipelineContext && webGLPipelineContext.program) {\n      if (webGLPipelineContext.transformFeedback) {\n        this.deleteTransformFeedback(webGLPipelineContext.transformFeedback);\n        webGLPipelineContext.transformFeedback = null;\n      }\n    }\n\n    _super.prototype._deletePipelineContext.call(this, pipelineContext);\n  };\n\n  Engine.prototype.createShaderProgram = function (pipelineContext, vertexCode, fragmentCode, defines, context, transformFeedbackVaryings) {\n    if (transformFeedbackVaryings === void 0) {\n      transformFeedbackVaryings = null;\n    }\n\n    context = context || this._gl;\n    this.onBeforeShaderCompilationObservable.notifyObservers(this);\n\n    var program = _super.prototype.createShaderProgram.call(this, pipelineContext, vertexCode, fragmentCode, defines, context, transformFeedbackVaryings);\n\n    this.onAfterShaderCompilationObservable.notifyObservers(this);\n    return program;\n  };\n\n  Engine.prototype._createShaderProgram = function (pipelineContext, vertexShader, fragmentShader, context, transformFeedbackVaryings) {\n    if (transformFeedbackVaryings === void 0) {\n      transformFeedbackVaryings = null;\n    }\n\n    var shaderProgram = context.createProgram();\n    pipelineContext.program = shaderProgram;\n\n    if (!shaderProgram) {\n      throw new Error(\"Unable to create program\");\n    }\n\n    context.attachShader(shaderProgram, vertexShader);\n    context.attachShader(shaderProgram, fragmentShader);\n\n    if (this.webGLVersion > 1 && transformFeedbackVaryings) {\n      var transformFeedback = this.createTransformFeedback();\n      this.bindTransformFeedback(transformFeedback);\n      this.setTranformFeedbackVaryings(shaderProgram, transformFeedbackVaryings);\n      pipelineContext.transformFeedback = transformFeedback;\n    }\n\n    context.linkProgram(shaderProgram);\n\n    if (this.webGLVersion > 1 && transformFeedbackVaryings) {\n      this.bindTransformFeedback(null);\n    }\n\n    pipelineContext.context = context;\n    pipelineContext.vertexShader = vertexShader;\n    pipelineContext.fragmentShader = fragmentShader;\n\n    if (!pipelineContext.isParallelCompiled) {\n      this._finalizePipelineContext(pipelineContext);\n    }\n\n    return shaderProgram;\n  };\n  /**\n   * @param texture\n   * @hidden\n   */\n\n\n  Engine.prototype._releaseTexture = function (texture) {\n    _super.prototype._releaseTexture.call(this, texture);\n  };\n  /**\n   * @param rtWrapper\n   * @hidden\n   */\n\n\n  Engine.prototype._releaseRenderTargetWrapper = function (rtWrapper) {\n    _super.prototype._releaseRenderTargetWrapper.call(this, rtWrapper); // Set output texture of post process to null if the framebuffer has been released/disposed\n\n\n    this.scenes.forEach(function (scene) {\n      scene.postProcesses.forEach(function (postProcess) {\n        if (postProcess._outputTexture === rtWrapper) {\n          postProcess._outputTexture = null;\n        }\n      });\n      scene.cameras.forEach(function (camera) {\n        camera._postProcesses.forEach(function (postProcess) {\n          if (postProcess) {\n            if (postProcess._outputTexture === rtWrapper) {\n              postProcess._outputTexture = null;\n            }\n          }\n        });\n      });\n    });\n  };\n  /**\n   * Gets the names of the render passes that are currently created\n   * @returns list of the render pass names\n   */\n\n\n  Engine.prototype.getRenderPassNames = function () {\n    return this._renderPassNames;\n  };\n  /**\n   * Gets the name of the current render pass\n   * @returns name of the current render pass\n   */\n\n\n  Engine.prototype.getCurrentRenderPassName = function () {\n    return this._renderPassNames[this.currentRenderPassId];\n  };\n  /**\n   * Creates a render pass id\n   * @param name Name of the render pass (for debug purpose only)\n   * @returns the id of the new render pass\n   */\n\n\n  Engine.prototype.createRenderPassId = function (name) {\n    // Note: render pass id == 0 is always for the main render pass\n    var id = ++Engine._RenderPassIdCounter;\n    this._renderPassNames[id] = name !== null && name !== void 0 ? name : \"NONAME\";\n    return id;\n  };\n  /**\n   * Releases a render pass id\n   * @param id id of the render pass to release\n   */\n\n\n  Engine.prototype.releaseRenderPassId = function (id) {\n    this._renderPassNames[id] = undefined;\n\n    for (var s = 0; s < this.scenes.length; ++s) {\n      var scene = this.scenes[s];\n\n      for (var m = 0; m < scene.meshes.length; ++m) {\n        var mesh = scene.meshes[m];\n\n        if (mesh.subMeshes) {\n          for (var b = 0; b < mesh.subMeshes.length; ++b) {\n            var subMesh = mesh.subMeshes[b];\n\n            subMesh._removeDrawWrapper(id);\n          }\n        }\n      }\n    }\n  };\n  /**\n   * @hidden\n   * Rescales a texture\n   * @param source input texture\n   * @param destination destination texture\n   * @param scene scene to use to render the resize\n   * @param internalFormat format to use when resizing\n   * @param onComplete callback to be called when resize has completed\n   */\n\n\n  Engine.prototype._rescaleTexture = function (source, destination, scene, internalFormat, onComplete) {\n    var _this = this;\n\n    this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MAG_FILTER, this._gl.LINEAR);\n\n    this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MIN_FILTER, this._gl.LINEAR);\n\n    this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_S, this._gl.CLAMP_TO_EDGE);\n\n    this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_T, this._gl.CLAMP_TO_EDGE);\n\n    var rtt = this.createRenderTargetTexture({\n      width: destination.width,\n      height: destination.height\n    }, {\n      generateMipMaps: false,\n      type: 0,\n      samplingMode: 2,\n      generateDepthBuffer: false,\n      generateStencilBuffer: false\n    });\n\n    if (!this._rescalePostProcess && Engine._RescalePostProcessFactory) {\n      this._rescalePostProcess = Engine._RescalePostProcessFactory(this);\n    }\n\n    this._rescalePostProcess.externalTextureSamplerBinding = true;\n\n    this._rescalePostProcess.getEffect().executeWhenCompiled(function () {\n      _this._rescalePostProcess.onApply = function (effect) {\n        effect._bindTexture(\"textureSampler\", source);\n      };\n\n      var hostingScene = scene;\n\n      if (!hostingScene) {\n        hostingScene = _this.scenes[_this.scenes.length - 1];\n      }\n\n      hostingScene.postProcessManager.directRender([_this._rescalePostProcess], rtt, true);\n\n      _this._bindTextureDirectly(_this._gl.TEXTURE_2D, destination, true);\n\n      _this._gl.copyTexImage2D(_this._gl.TEXTURE_2D, 0, internalFormat, 0, 0, destination.width, destination.height, 0);\n\n      _this.unBindFramebuffer(rtt);\n\n      rtt.dispose();\n\n      if (onComplete) {\n        onComplete();\n      }\n    });\n  }; // FPS\n\n  /**\n   * Gets the current framerate\n   * @returns a number representing the framerate\n   */\n\n\n  Engine.prototype.getFps = function () {\n    return this._fps;\n  };\n  /**\n   * Gets the time spent between current and previous frame\n   * @returns a number representing the delta time in ms\n   */\n\n\n  Engine.prototype.getDeltaTime = function () {\n    return this._deltaTime;\n  };\n\n  Engine.prototype._measureFps = function () {\n    this._performanceMonitor.sampleFrame();\n\n    this._fps = this._performanceMonitor.averageFPS;\n    this._deltaTime = this._performanceMonitor.instantaneousFrameTime || 0;\n  };\n  /**\n   * Wraps an external web gl texture in a Babylon texture.\n   * @param texture defines the external texture\n   * @returns the babylon internal texture\n   */\n\n\n  Engine.prototype.wrapWebGLTexture = function (texture) {\n    var hardwareTexture = new WebGLHardwareTexture(texture, this._gl);\n    var internalTexture = new InternalTexture(this, InternalTextureSource.Unknown, true);\n    internalTexture._hardwareTexture = hardwareTexture;\n    internalTexture.isReady = true;\n    return internalTexture;\n  };\n  /**\n   * @param texture\n   * @param image\n   * @param faceIndex\n   * @param lod\n   * @hidden\n   */\n\n\n  Engine.prototype._uploadImageToTexture = function (texture, image, faceIndex, lod) {\n    if (faceIndex === void 0) {\n      faceIndex = 0;\n    }\n\n    if (lod === void 0) {\n      lod = 0;\n    }\n\n    var gl = this._gl;\n\n    var textureType = this._getWebGLTextureType(texture.type);\n\n    var format = this._getInternalFormat(texture.format);\n\n    var internalFormat = this._getRGBABufferInternalSizedFormat(texture.type, format);\n\n    var bindTarget = texture.isCube ? gl.TEXTURE_CUBE_MAP : gl.TEXTURE_2D;\n\n    this._bindTextureDirectly(bindTarget, texture, true);\n\n    this._unpackFlipY(texture.invertY);\n\n    var target = gl.TEXTURE_2D;\n\n    if (texture.isCube) {\n      target = gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex;\n    }\n\n    gl.texImage2D(target, lod, internalFormat, format, textureType, image);\n\n    this._bindTextureDirectly(bindTarget, null, true);\n  };\n  /**\n   * Updates a depth texture Comparison Mode and Function.\n   * If the comparison Function is equal to 0, the mode will be set to none.\n   * Otherwise, this only works in webgl 2 and requires a shadow sampler in the shader.\n   * @param texture The texture to set the comparison function for\n   * @param comparisonFunction The comparison function to set, 0 if no comparison required\n   */\n\n\n  Engine.prototype.updateTextureComparisonFunction = function (texture, comparisonFunction) {\n    if (this.webGLVersion === 1) {\n      Logger.Error(\"WebGL 1 does not support texture comparison.\");\n      return;\n    }\n\n    var gl = this._gl;\n\n    if (texture.isCube) {\n      this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, texture, true);\n\n      if (comparisonFunction === 0) {\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_FUNC, 515);\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_MODE, gl.NONE);\n      } else {\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_FUNC, comparisonFunction);\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\n      }\n\n      this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, null);\n    } else {\n      this._bindTextureDirectly(this._gl.TEXTURE_2D, texture, true);\n\n      if (comparisonFunction === 0) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, 515);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.NONE);\n      } else {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, comparisonFunction);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\n      }\n\n      this._bindTextureDirectly(this._gl.TEXTURE_2D, null);\n    }\n\n    texture._comparisonFunction = comparisonFunction;\n  };\n  /**\n   * Creates a webGL buffer to use with instantiation\n   * @param capacity defines the size of the buffer\n   * @returns the webGL buffer\n   */\n\n\n  Engine.prototype.createInstancesBuffer = function (capacity) {\n    var buffer = this._gl.createBuffer();\n\n    if (!buffer) {\n      throw new Error(\"Unable to create instance buffer\");\n    }\n\n    var result = new WebGLDataBuffer(buffer);\n    result.capacity = capacity;\n    this.bindArrayBuffer(result);\n\n    this._gl.bufferData(this._gl.ARRAY_BUFFER, capacity, this._gl.DYNAMIC_DRAW);\n\n    result.references = 1;\n    return result;\n  };\n  /**\n   * Delete a webGL buffer used with instantiation\n   * @param buffer defines the webGL buffer to delete\n   */\n\n\n  Engine.prototype.deleteInstancesBuffer = function (buffer) {\n    this._gl.deleteBuffer(buffer);\n  };\n\n  Engine.prototype._clientWaitAsync = function (sync, flags, intervalms) {\n    if (flags === void 0) {\n      flags = 0;\n    }\n\n    if (intervalms === void 0) {\n      intervalms = 10;\n    }\n\n    var gl = this._gl;\n    return new Promise(function (resolve, reject) {\n      var check = function check() {\n        var res = gl.clientWaitSync(sync, flags, 0);\n\n        if (res == gl.WAIT_FAILED) {\n          reject();\n          return;\n        }\n\n        if (res == gl.TIMEOUT_EXPIRED) {\n          setTimeout(check, intervalms);\n          return;\n        }\n\n        resolve();\n      };\n\n      check();\n    });\n  };\n  /**\n   * @param x\n   * @param y\n   * @param w\n   * @param h\n   * @param format\n   * @param type\n   * @param outputBuffer\n   * @hidden\n   */\n\n\n  Engine.prototype._readPixelsAsync = function (x, y, w, h, format, type, outputBuffer) {\n    if (this._webGLVersion < 2) {\n      throw new Error(\"_readPixelsAsync only work on WebGL2+\");\n    }\n\n    var gl = this._gl;\n    var buf = gl.createBuffer();\n    gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf);\n    gl.bufferData(gl.PIXEL_PACK_BUFFER, outputBuffer.byteLength, gl.STREAM_READ);\n    gl.readPixels(x, y, w, h, format, type, 0);\n    gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\n    var sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\n\n    if (!sync) {\n      return null;\n    }\n\n    gl.flush();\n    return this._clientWaitAsync(sync, 0, 10).then(function () {\n      gl.deleteSync(sync);\n      gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf);\n      gl.getBufferSubData(gl.PIXEL_PACK_BUFFER, 0, outputBuffer);\n      gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\n      gl.deleteBuffer(buf);\n      return outputBuffer;\n    });\n  };\n\n  Engine.prototype.dispose = function () {\n    this.hideLoadingUI();\n    this.onNewSceneAddedObservable.clear(); // Release postProcesses\n\n    while (this.postProcesses.length) {\n      this.postProcesses[0].dispose();\n    } // Rescale PP\n\n\n    if (this._rescalePostProcess) {\n      this._rescalePostProcess.dispose();\n    } // Release scenes\n\n\n    while (this.scenes.length) {\n      this.scenes[0].dispose();\n    }\n\n    while (this._virtualScenes.length) {\n      this._virtualScenes[0].dispose();\n    } // Release audio engine\n\n\n    if (Engine.Instances.length === 1 && Engine.audioEngine) {\n      Engine.audioEngine.dispose();\n      Engine.audioEngine = null;\n    } //WebVR\n\n\n    this.disableVR(); // Events\n\n    if (IsWindowObjectExist()) {\n      window.removeEventListener(\"blur\", this._onBlur);\n      window.removeEventListener(\"focus\", this._onFocus);\n\n      if (this._renderingCanvas) {\n        this._renderingCanvas.removeEventListener(\"focus\", this._onCanvasFocus);\n\n        this._renderingCanvas.removeEventListener(\"blur\", this._onCanvasBlur);\n\n        this._renderingCanvas.removeEventListener(\"pointerout\", this._onCanvasPointerOut);\n      }\n\n      if (IsDocumentAvailable()) {\n        document.removeEventListener(\"fullscreenchange\", this._onFullscreenChange);\n        document.removeEventListener(\"mozfullscreenchange\", this._onFullscreenChange);\n        document.removeEventListener(\"webkitfullscreenchange\", this._onFullscreenChange);\n        document.removeEventListener(\"msfullscreenchange\", this._onFullscreenChange);\n        document.removeEventListener(\"pointerlockchange\", this._onPointerLockChange);\n        document.removeEventListener(\"mspointerlockchange\", this._onPointerLockChange);\n        document.removeEventListener(\"mozpointerlockchange\", this._onPointerLockChange);\n        document.removeEventListener(\"webkitpointerlockchange\", this._onPointerLockChange);\n      }\n    }\n\n    _super.prototype.dispose.call(this); // Remove from Instances\n\n\n    var index = Engine.Instances.indexOf(this);\n\n    if (index >= 0) {\n      Engine.Instances.splice(index, 1);\n    } // Observables\n\n\n    this.onResizeObservable.clear();\n    this.onCanvasBlurObservable.clear();\n    this.onCanvasFocusObservable.clear();\n    this.onCanvasPointerOutObservable.clear();\n    this.onBeginFrameObservable.clear();\n    this.onEndFrameObservable.clear();\n  };\n\n  Engine.prototype._disableTouchAction = function () {\n    if (!this._renderingCanvas || !this._renderingCanvas.setAttribute) {\n      return;\n    }\n\n    this._renderingCanvas.setAttribute(\"touch-action\", \"none\");\n\n    this._renderingCanvas.style.touchAction = \"none\";\n    this._renderingCanvas.style.msTouchAction = \"none\";\n  }; // Loading screen\n\n  /**\n   * Display the loading screen\n   * @see https://doc.babylonjs.com/how_to/creating_a_custom_loading_screen\n   */\n\n\n  Engine.prototype.displayLoadingUI = function () {\n    if (!IsWindowObjectExist()) {\n      return;\n    }\n\n    var loadingScreen = this.loadingScreen;\n\n    if (loadingScreen) {\n      loadingScreen.displayLoadingUI();\n    }\n  };\n  /**\n   * Hide the loading screen\n   * @see https://doc.babylonjs.com/how_to/creating_a_custom_loading_screen\n   */\n\n\n  Engine.prototype.hideLoadingUI = function () {\n    if (!IsWindowObjectExist()) {\n      return;\n    }\n\n    var loadingScreen = this._loadingScreen;\n\n    if (loadingScreen) {\n      loadingScreen.hideLoadingUI();\n    }\n  };\n\n  Object.defineProperty(Engine.prototype, \"loadingScreen\", {\n    /**\n     * Gets the current loading screen object\n     * @see https://doc.babylonjs.com/how_to/creating_a_custom_loading_screen\n     */\n    get: function get() {\n      if (!this._loadingScreen && this._renderingCanvas) {\n        this._loadingScreen = Engine.DefaultLoadingScreenFactory(this._renderingCanvas);\n      }\n\n      return this._loadingScreen;\n    },\n\n    /**\n     * Sets the current loading screen object\n     * @see https://doc.babylonjs.com/how_to/creating_a_custom_loading_screen\n     */\n    set: function set(loadingScreen) {\n      this._loadingScreen = loadingScreen;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Engine.prototype, \"loadingUIText\", {\n    /**\n     * Sets the current loading screen text\n     * @see https://doc.babylonjs.com/how_to/creating_a_custom_loading_screen\n     */\n    set: function set(text) {\n      this.loadingScreen.loadingUIText = text;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Engine.prototype, \"loadingUIBackgroundColor\", {\n    /**\n     * Sets the current loading screen background color\n     * @see https://doc.babylonjs.com/how_to/creating_a_custom_loading_screen\n     */\n    set: function set(color) {\n      this.loadingScreen.loadingUIBackgroundColor = color;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * creates and returns a new video element\n   * @param constraints video constraints\n   * @returns video element\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  Engine.prototype.createVideoElement = function (constraints) {\n    return document.createElement(\"video\");\n  };\n  /** Pointerlock and fullscreen */\n\n  /**\n   * Ask the browser to promote the current element to pointerlock mode\n   * @param element defines the DOM element to promote\n   */\n\n\n  Engine._RequestPointerlock = function (element) {\n    element.requestPointerLock = element.requestPointerLock || element.msRequestPointerLock || element.mozRequestPointerLock || element.webkitRequestPointerLock;\n\n    if (element.requestPointerLock) {\n      element.requestPointerLock();\n      element.focus();\n    }\n  };\n  /**\n   * Asks the browser to exit pointerlock mode\n   */\n\n\n  Engine._ExitPointerlock = function () {\n    var anyDoc = document;\n    document.exitPointerLock = document.exitPointerLock || anyDoc.msExitPointerLock || anyDoc.mozExitPointerLock || anyDoc.webkitExitPointerLock;\n\n    if (document.exitPointerLock) {\n      document.exitPointerLock();\n    }\n  };\n  /**\n   * Ask the browser to promote the current element to fullscreen rendering mode\n   * @param element defines the DOM element to promote\n   */\n\n\n  Engine._RequestFullscreen = function (element) {\n    var requestFunction = element.requestFullscreen || element.msRequestFullscreen || element.webkitRequestFullscreen || element.mozRequestFullScreen;\n\n    if (!requestFunction) {\n      return;\n    }\n\n    requestFunction.call(element);\n  };\n  /**\n   * Asks the browser to exit fullscreen mode\n   */\n\n\n  Engine._ExitFullscreen = function () {\n    var anyDoc = document;\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (anyDoc.mozCancelFullScreen) {\n      anyDoc.mozCancelFullScreen();\n    } else if (anyDoc.webkitCancelFullScreen) {\n      anyDoc.webkitCancelFullScreen();\n    } else if (anyDoc.msCancelFullScreen) {\n      anyDoc.msCancelFullScreen();\n    }\n  };\n  /**\n   * Get Font size information\n   * @param font font name\n   * @return an object containing ascent, height and descent\n   */\n\n\n  Engine.prototype.getFontOffset = function (font) {\n    var text = document.createElement(\"span\");\n    text.innerHTML = \"Hg\";\n    text.setAttribute(\"style\", \"font: \".concat(font, \" !important\"));\n    var block = document.createElement(\"div\");\n    block.style.display = \"inline-block\";\n    block.style.width = \"1px\";\n    block.style.height = \"0px\";\n    block.style.verticalAlign = \"bottom\";\n    var div = document.createElement(\"div\");\n    div.style.whiteSpace = \"nowrap\";\n    div.appendChild(text);\n    div.appendChild(block);\n    document.body.appendChild(div);\n    var fontAscent = 0;\n    var fontHeight = 0;\n\n    try {\n      fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\n      block.style.verticalAlign = \"baseline\";\n      fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\n    } finally {\n      document.body.removeChild(div);\n    }\n\n    return {\n      ascent: fontAscent,\n      height: fontHeight,\n      descent: fontHeight - fontAscent\n    };\n  }; // Const statics\n\n  /** Defines that alpha blending is disabled */\n\n\n  Engine.ALPHA_DISABLE = 0;\n  /** Defines that alpha blending to SRC ALPHA * SRC + DEST */\n\n  Engine.ALPHA_ADD = 1;\n  /** Defines that alpha blending to SRC ALPHA * SRC + (1 - SRC ALPHA) * DEST */\n\n  Engine.ALPHA_COMBINE = 2;\n  /** Defines that alpha blending to DEST - SRC * DEST */\n\n  Engine.ALPHA_SUBTRACT = 3;\n  /** Defines that alpha blending to SRC * DEST */\n\n  Engine.ALPHA_MULTIPLY = 4;\n  /** Defines that alpha blending to SRC ALPHA * SRC + (1 - SRC) * DEST */\n\n  Engine.ALPHA_MAXIMIZED = 5;\n  /** Defines that alpha blending to SRC + DEST */\n\n  Engine.ALPHA_ONEONE = 6;\n  /** Defines that alpha blending to SRC + (1 - SRC ALPHA) * DEST */\n\n  Engine.ALPHA_PREMULTIPLIED = 7;\n  /**\n   * Defines that alpha blending to SRC + (1 - SRC ALPHA) * DEST\n   * Alpha will be set to (1 - SRC ALPHA) * DEST ALPHA\n   */\n\n  Engine.ALPHA_PREMULTIPLIED_PORTERDUFF = 8;\n  /** Defines that alpha blending to CST * SRC + (1 - CST) * DEST */\n\n  Engine.ALPHA_INTERPOLATE = 9;\n  /**\n   * Defines that alpha blending to SRC + (1 - SRC) * DEST\n   * Alpha will be set to SRC ALPHA + (1 - SRC ALPHA) * DEST ALPHA\n   */\n\n  Engine.ALPHA_SCREENMODE = 10;\n  /** Defines that the resource is not delayed*/\n\n  Engine.DELAYLOADSTATE_NONE = 0;\n  /** Defines that the resource was successfully delay loaded */\n\n  Engine.DELAYLOADSTATE_LOADED = 1;\n  /** Defines that the resource is currently delay loading */\n\n  Engine.DELAYLOADSTATE_LOADING = 2;\n  /** Defines that the resource is delayed and has not started loading */\n\n  Engine.DELAYLOADSTATE_NOTLOADED = 4; // Depht or Stencil test Constants.\n\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will never pass. i.e. Nothing will be drawn */\n\n  Engine.NEVER = 512;\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will always pass. i.e. Pixels will be drawn in the order they are drawn */\n\n  Engine.ALWAYS = 519;\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than the stored value */\n\n  Engine.LESS = 513;\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is equals to the stored value */\n\n  Engine.EQUAL = 514;\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than or equal to the stored value */\n\n  Engine.LEQUAL = 515;\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than the stored value */\n\n  Engine.GREATER = 516;\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than or equal to the stored value */\n\n  Engine.GEQUAL = 518;\n  /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is not equal to the stored value */\n\n  Engine.NOTEQUAL = 517; // Stencil Actions Constants.\n\n  /** Passed to stencilOperation to specify that stencil value must be kept */\n\n  Engine.KEEP = 7680;\n  /** Passed to stencilOperation to specify that stencil value must be replaced */\n\n  Engine.REPLACE = 7681;\n  /** Passed to stencilOperation to specify that stencil value must be incremented */\n\n  Engine.INCR = 7682;\n  /** Passed to stencilOperation to specify that stencil value must be decremented */\n\n  Engine.DECR = 7683;\n  /** Passed to stencilOperation to specify that stencil value must be inverted */\n\n  Engine.INVERT = 5386;\n  /** Passed to stencilOperation to specify that stencil value must be incremented with wrapping */\n\n  Engine.INCR_WRAP = 34055;\n  /** Passed to stencilOperation to specify that stencil value must be decremented with wrapping */\n\n  Engine.DECR_WRAP = 34056;\n  /** Texture is not repeating outside of 0..1 UVs */\n\n  Engine.TEXTURE_CLAMP_ADDRESSMODE = 0;\n  /** Texture is repeating outside of 0..1 UVs */\n\n  Engine.TEXTURE_WRAP_ADDRESSMODE = 1;\n  /** Texture is repeating and mirrored */\n\n  Engine.TEXTURE_MIRROR_ADDRESSMODE = 2;\n  /** ALPHA */\n\n  Engine.TEXTUREFORMAT_ALPHA = 0;\n  /** LUMINANCE */\n\n  Engine.TEXTUREFORMAT_LUMINANCE = 1;\n  /** LUMINANCE_ALPHA */\n\n  Engine.TEXTUREFORMAT_LUMINANCE_ALPHA = 2;\n  /** RGB */\n\n  Engine.TEXTUREFORMAT_RGB = 4;\n  /** RGBA */\n\n  Engine.TEXTUREFORMAT_RGBA = 5;\n  /** RED */\n\n  Engine.TEXTUREFORMAT_RED = 6;\n  /** RED (2nd reference) */\n\n  Engine.TEXTUREFORMAT_R = 6;\n  /** RG */\n\n  Engine.TEXTUREFORMAT_RG = 7;\n  /** RED_INTEGER */\n\n  Engine.TEXTUREFORMAT_RED_INTEGER = 8;\n  /** RED_INTEGER (2nd reference) */\n\n  Engine.TEXTUREFORMAT_R_INTEGER = 8;\n  /** RG_INTEGER */\n\n  Engine.TEXTUREFORMAT_RG_INTEGER = 9;\n  /** RGB_INTEGER */\n\n  Engine.TEXTUREFORMAT_RGB_INTEGER = 10;\n  /** RGBA_INTEGER */\n\n  Engine.TEXTUREFORMAT_RGBA_INTEGER = 11;\n  /** UNSIGNED_BYTE */\n\n  Engine.TEXTURETYPE_UNSIGNED_BYTE = 0;\n  /** UNSIGNED_BYTE (2nd reference) */\n\n  Engine.TEXTURETYPE_UNSIGNED_INT = 0;\n  /** FLOAT */\n\n  Engine.TEXTURETYPE_FLOAT = 1;\n  /** HALF_FLOAT */\n\n  Engine.TEXTURETYPE_HALF_FLOAT = 2;\n  /** BYTE */\n\n  Engine.TEXTURETYPE_BYTE = 3;\n  /** SHORT */\n\n  Engine.TEXTURETYPE_SHORT = 4;\n  /** UNSIGNED_SHORT */\n\n  Engine.TEXTURETYPE_UNSIGNED_SHORT = 5;\n  /** INT */\n\n  Engine.TEXTURETYPE_INT = 6;\n  /** UNSIGNED_INT */\n\n  Engine.TEXTURETYPE_UNSIGNED_INTEGER = 7;\n  /** UNSIGNED_SHORT_4_4_4_4 */\n\n  Engine.TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4 = 8;\n  /** UNSIGNED_SHORT_5_5_5_1 */\n\n  Engine.TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1 = 9;\n  /** UNSIGNED_SHORT_5_6_5 */\n\n  Engine.TEXTURETYPE_UNSIGNED_SHORT_5_6_5 = 10;\n  /** UNSIGNED_INT_2_10_10_10_REV */\n\n  Engine.TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV = 11;\n  /** UNSIGNED_INT_24_8 */\n\n  Engine.TEXTURETYPE_UNSIGNED_INT_24_8 = 12;\n  /** UNSIGNED_INT_10F_11F_11F_REV */\n\n  Engine.TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV = 13;\n  /** UNSIGNED_INT_5_9_9_9_REV */\n\n  Engine.TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV = 14;\n  /** FLOAT_32_UNSIGNED_INT_24_8_REV */\n\n  Engine.TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV = 15;\n  /** nearest is mag = nearest and min = nearest and mip = none */\n\n  Engine.TEXTURE_NEAREST_SAMPLINGMODE = 1;\n  /** Bilinear is mag = linear and min = linear and mip = nearest */\n\n  Engine.TEXTURE_BILINEAR_SAMPLINGMODE = 2;\n  /** Trilinear is mag = linear and min = linear and mip = linear */\n\n  Engine.TEXTURE_TRILINEAR_SAMPLINGMODE = 3;\n  /** nearest is mag = nearest and min = nearest and mip = linear */\n\n  Engine.TEXTURE_NEAREST_NEAREST_MIPLINEAR = 8;\n  /** Bilinear is mag = linear and min = linear and mip = nearest */\n\n  Engine.TEXTURE_LINEAR_LINEAR_MIPNEAREST = 11;\n  /** Trilinear is mag = linear and min = linear and mip = linear */\n\n  Engine.TEXTURE_LINEAR_LINEAR_MIPLINEAR = 3;\n  /** mag = nearest and min = nearest and mip = nearest */\n\n  Engine.TEXTURE_NEAREST_NEAREST_MIPNEAREST = 4;\n  /** mag = nearest and min = linear and mip = nearest */\n\n  Engine.TEXTURE_NEAREST_LINEAR_MIPNEAREST = 5;\n  /** mag = nearest and min = linear and mip = linear */\n\n  Engine.TEXTURE_NEAREST_LINEAR_MIPLINEAR = 6;\n  /** mag = nearest and min = linear and mip = none */\n\n  Engine.TEXTURE_NEAREST_LINEAR = 7;\n  /** mag = nearest and min = nearest and mip = none */\n\n  Engine.TEXTURE_NEAREST_NEAREST = 1;\n  /** mag = linear and min = nearest and mip = nearest */\n\n  Engine.TEXTURE_LINEAR_NEAREST_MIPNEAREST = 9;\n  /** mag = linear and min = nearest and mip = linear */\n\n  Engine.TEXTURE_LINEAR_NEAREST_MIPLINEAR = 10;\n  /** mag = linear and min = linear and mip = none */\n\n  Engine.TEXTURE_LINEAR_LINEAR = 2;\n  /** mag = linear and min = nearest and mip = none */\n\n  Engine.TEXTURE_LINEAR_NEAREST = 12;\n  /** Explicit coordinates mode */\n\n  Engine.TEXTURE_EXPLICIT_MODE = 0;\n  /** Spherical coordinates mode */\n\n  Engine.TEXTURE_SPHERICAL_MODE = 1;\n  /** Planar coordinates mode */\n\n  Engine.TEXTURE_PLANAR_MODE = 2;\n  /** Cubic coordinates mode */\n\n  Engine.TEXTURE_CUBIC_MODE = 3;\n  /** Projection coordinates mode */\n\n  Engine.TEXTURE_PROJECTION_MODE = 4;\n  /** Skybox coordinates mode */\n\n  Engine.TEXTURE_SKYBOX_MODE = 5;\n  /** Inverse Cubic coordinates mode */\n\n  Engine.TEXTURE_INVCUBIC_MODE = 6;\n  /** Equirectangular coordinates mode */\n\n  Engine.TEXTURE_EQUIRECTANGULAR_MODE = 7;\n  /** Equirectangular Fixed coordinates mode */\n\n  Engine.TEXTURE_FIXED_EQUIRECTANGULAR_MODE = 8;\n  /** Equirectangular Fixed Mirrored coordinates mode */\n\n  Engine.TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE = 9; // Texture rescaling mode\n\n  /** Defines that texture rescaling will use a floor to find the closer power of 2 size */\n\n  Engine.SCALEMODE_FLOOR = 1;\n  /** Defines that texture rescaling will look for the nearest power of 2 size */\n\n  Engine.SCALEMODE_NEAREST = 2;\n  /** Defines that texture rescaling will use a ceil to find the closer power of 2 size */\n\n  Engine.SCALEMODE_CEILING = 3;\n  /**\n   * Method called to create the default rescale post process on each engine.\n   */\n\n  Engine._RescalePostProcessFactory = null; // eslint-disable-next-line @typescript-eslint/naming-convention\n\n  Engine._RenderPassIdCounter = 0;\n  return Engine;\n}(ThinEngine);\n\nexport { Engine };","map":{"version":3,"mappings":"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","names":["Observable","InternalTexture","InternalTextureSource","IsDocumentAvailable","IsWindowObjectExist","EngineStore","_WarnImport","ThinEngine","PerformanceMonitor","PerfCounter","WebGLDataBuffer","Logger","WebGLHardwareTexture","__extends","canvasOrContext","antialias","options","adaptToDeviceRatio","_super","_this","Array","Engine","Instances","push","_features","supportRenderPasses","_creationOptions","getContext","canvas_1","_sharedInit","doNotHandleTouchAction","audioEngine","anyDoc_1","document","_onFullscreenChange","fullscreen","undefined","isFullscreen","mozFullScreen","webkitIsFullScreen","msIsFullScreen","_pointerLockRequested","_RequestPointerlock","addEventListener","_onPointerLockChange","isPointerLock","mozPointerLockElement","webkitPointerLockElement","msPointerLockElement","pointerLockElement","AudioEngineFactory","getRenderingCanvas","getAudioContext","getAudioDestination","_connectVREvents","enableOfflineSupport","OfflineProviderFactory","_deterministicLockstep","deterministicLockstep","_lockstepMaxSteps","lockstepMaxSteps","_timeStep","timeStep","_prepareVRComponent","autoEnableWebVR","initWebVR","Object","NpmPackage","Version","LastCreatedEngine","LastCreatedScene","imageSource","promise","Promise","resolve","reject","image","Image","onload","decode","then","createImageBitmap","imageBitmap","onerror","src","bufferWidth","bufferHeight","canvas","createCanvas","context","Error","drawImage","buffer","getImageData","data","flag","predicate","engineIndex","length","engine","sceneIndex","scenes","markAllMaterialsAsDirty","_RescalePostProcessFactory","_performanceMonitor","_compatibilityMode","mode","_renderingCanvas","call","_onCanvasFocus","onCanvasFocusObservable","notifyObservers","_onCanvasBlur","onCanvasBlurObservable","_onBlur","disablePerformanceMonitorInBackground","disable","_windowIsBackground","_onFocus","enable","_onCanvasPointerOut","ev","elementFromPoint","clientX","clientY","onCanvasPointerOutObservable","hostWindow","getHostWindow","_disableTouchAction","viewportOwner","useScreen","viewport","getRenderWidth","width","getRenderHeight","height","getBoundingClientRect","getInputElement","texture","unbind","generateMipMaps","gl","_gl","_bindTextureDirectly","TEXTURE_CUBE_MAP","generateMipmap","_depthCullingState","depthTest","depthMask","_stencilState","stencilTest","stencilMask","mask","stencilFunc","stencilFuncRef","stencilFuncMask","reference","stencilOpStencilFail","stencilOpDepthFail","stencilOpStencilDepthPass","operation","value","DITHER","RASTERIZER_DISCARD","depthFunc","setDepthFunction","_cachedStencilBuffer","getStencilBuffer","_cachedStencilFunction","getStencilFunction","_cachedStencilMask","getStencilMask","_cachedStencilOperationPass","getStencilOperationPass","_cachedStencilOperationFail","getStencilOperationFail","_cachedStencilOperationDepthFail","getStencilOperationDepthFail","_cachedStencilReference","getStencilFunctionReference","setStencilFunction","setStencilMask","setStencilBuffer","setStencilOperationPass","setStencilOperationFail","setStencilOperationDepthFail","setStencilFunctionReference","x","y","currentViewport","_cachedViewport","_viewport","clearColor","enableScissor","clear","disableScissor","SCISSOR_TEST","scissor","numDrawCalls","_drawCalls","addCount","url","offlineProvider","useArrayBuffer","_loadFile","request","exception","program","shaders","getAttachedShaders","getShaderSource","channel","uniform","name","_boundUniforms","depthStencilTexture","_setTexture","postProcess","postProcessInput","_textures","_currentRenderTextureInd","_forcedOutputTexture","_bindTexture","_a","_outputTexture","_b","_i","scene","resetCachedMaterial","_rebuildGeometries","_rebuildTextures","_virtualScenes","_rebuildBuffers","index","_activeRenderLoops","renderFunction","_contextWasLost","shouldRender","renderEvenInBackground","beginFrame","_renderViews","_renderFrame","endFrame","customAnimationFrameRequester","requestID","_queueNewFrame","_boundRenderFunction","_frameHandler","isVRPresenting","_requestVRFrame","_renderingQueueLaunched","requestPointerLock","exitFullscreen","enterFullscreen","_RequestFullscreen","_ExitFullscreen","_ExitPointerlock","_measureFps","onBeginFrameObservable","_submitVRFrame","onEndFrameObservable","forceSetSize","resize","setSize","camIndex","cameras","cam","_currentRenderId","onResizeObservable","hasObservers","pipelineContext","webGLPipelineContext","transformFeedback","deleteTransformFeedback","_deletePipelineContext","vertexCode","fragmentCode","defines","transformFeedbackVaryings","onBeforeShaderCompilationObservable","createShaderProgram","onAfterShaderCompilationObservable","vertexShader","fragmentShader","shaderProgram","createProgram","attachShader","webGLVersion","createTransformFeedback","bindTransformFeedback","setTranformFeedbackVaryings","linkProgram","isParallelCompiled","_finalizePipelineContext","_releaseTexture","rtWrapper","_releaseRenderTargetWrapper","forEach","postProcesses","camera","_postProcesses","_renderPassNames","currentRenderPassId","id","_RenderPassIdCounter","s","m","meshes","mesh","subMeshes","b","subMesh","_removeDrawWrapper","source","destination","internalFormat","onComplete","texParameteri","TEXTURE_2D","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","rtt","createRenderTargetTexture","type","samplingMode","generateDepthBuffer","generateStencilBuffer","_rescalePostProcess","externalTextureSamplerBinding","getEffect","executeWhenCompiled","onApply","effect","hostingScene","postProcessManager","directRender","copyTexImage2D","unBindFramebuffer","dispose","_fps","_deltaTime","sampleFrame","averageFPS","instantaneousFrameTime","hardwareTexture","internalTexture","Unknown","_hardwareTexture","isReady","faceIndex","lod","textureType","_getWebGLTextureType","format","_getInternalFormat","_getRGBABufferInternalSizedFormat","bindTarget","isCube","_unpackFlipY","invertY","target","TEXTURE_CUBE_MAP_POSITIVE_X","texImage2D","comparisonFunction","TEXTURE_COMPARE_FUNC","TEXTURE_COMPARE_MODE","NONE","COMPARE_REF_TO_TEXTURE","_comparisonFunction","capacity","createBuffer","result","bindArrayBuffer","bufferData","ARRAY_BUFFER","DYNAMIC_DRAW","references","deleteBuffer","sync","flags","intervalms","check","res","clientWaitSync","WAIT_FAILED","TIMEOUT_EXPIRED","setTimeout","w","h","outputBuffer","_webGLVersion","buf","bindBuffer","PIXEL_PACK_BUFFER","byteLength","STREAM_READ","readPixels","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","_clientWaitAsync","deleteSync","getBufferSubData","hideLoadingUI","onNewSceneAddedObservable","disableVR","window","removeEventListener","indexOf","splice","setAttribute","style","touchAction","msTouchAction","loadingScreen","displayLoadingUI","_loadingScreen","DefaultLoadingScreenFactory","text","loadingUIText","color","loadingUIBackgroundColor","constraints","createElement","element","msRequestPointerLock","mozRequestPointerLock","webkitRequestPointerLock","focus","anyDoc","exitPointerLock","msExitPointerLock","mozExitPointerLock","webkitExitPointerLock","requestFunction","requestFullscreen","msRequestFullscreen","webkitRequestFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","msCancelFullScreen","font","innerHTML","block","display","verticalAlign","div","whiteSpace","appendChild","body","fontAscent","fontHeight","top","removeChild","ascent","descent"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/engine.ts"],"sourcesContent":["import { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { InternalTexture, InternalTextureSource } from \"../Materials/Textures/internalTexture\";\r\nimport type { IOfflineProvider } from \"../Offline/IOfflineProvider\";\r\nimport type { ILoadingScreen } from \"../Loading/loadingScreen\";\r\nimport { IsDocumentAvailable, IsWindowObjectExist } from \"../Misc/domManagement\";\r\nimport { EngineStore } from \"./engineStore\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport type { WebGLPipelineContext } from \"./WebGL/webGLPipelineContext\";\r\nimport type { IPipelineContext } from \"./IPipelineContext\";\r\nimport type { ICustomAnimationFrameRequester } from \"../Misc/customAnimationFrameRequester\";\r\nimport type { EngineOptions } from \"./thinEngine\";\r\nimport { ThinEngine } from \"./thinEngine\";\r\nimport { Constants } from \"./constants\";\r\nimport type { IViewportLike, IColor4Like } from \"../Maths/math.like\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport { PerformanceMonitor } from \"../Misc/performanceMonitor\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport { PerfCounter } from \"../Misc/perfCounter\";\r\nimport { WebGLDataBuffer } from \"../Meshes/WebGL/webGLDataBuffer\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport type { RenderTargetWrapper } from \"./renderTargetWrapper\";\r\nimport { WebGLHardwareTexture } from \"./WebGL/webGLHardwareTexture\";\r\n\r\nimport \"./Extensions/engine.alpha\";\r\nimport \"./Extensions/engine.readTexture\";\r\nimport \"./Extensions/engine.dynamicBuffer\";\r\nimport type { IAudioEngine } from \"../Audio/Interfaces/IAudioEngine\";\r\n\r\ndeclare type Material = import(\"../Materials/material\").Material;\r\ndeclare type PostProcess = import(\"../PostProcesses/postProcess\").PostProcess;\r\n\r\n/**\r\n * Defines the interface used by display changed events\r\n */\r\nexport interface IDisplayChangedEventArgs {\r\n    /** Gets the vrDisplay object (if any) */\r\n    vrDisplay: Nullable<any>;\r\n    /** Gets a boolean indicating if webVR is supported */\r\n    vrSupported: boolean;\r\n}\r\n\r\n/**\r\n * Defines the interface used by objects containing a viewport (like a camera)\r\n */\r\ninterface IViewportOwnerLike {\r\n    /**\r\n     * Gets or sets the viewport\r\n     */\r\n    viewport: IViewportLike;\r\n}\r\n\r\n/**\r\n * The engine class is responsible for interfacing with all lower-level APIs such as WebGL and Audio\r\n */\r\nexport class Engine extends ThinEngine {\r\n    // Const statics\r\n\r\n    /** Defines that alpha blending is disabled */\r\n    public static readonly ALPHA_DISABLE = Constants.ALPHA_DISABLE;\r\n    /** Defines that alpha blending to SRC ALPHA * SRC + DEST */\r\n    public static readonly ALPHA_ADD = Constants.ALPHA_ADD;\r\n    /** Defines that alpha blending to SRC ALPHA * SRC + (1 - SRC ALPHA) * DEST */\r\n    public static readonly ALPHA_COMBINE = Constants.ALPHA_COMBINE;\r\n    /** Defines that alpha blending to DEST - SRC * DEST */\r\n    public static readonly ALPHA_SUBTRACT = Constants.ALPHA_SUBTRACT;\r\n    /** Defines that alpha blending to SRC * DEST */\r\n    public static readonly ALPHA_MULTIPLY = Constants.ALPHA_MULTIPLY;\r\n    /** Defines that alpha blending to SRC ALPHA * SRC + (1 - SRC) * DEST */\r\n    public static readonly ALPHA_MAXIMIZED = Constants.ALPHA_MAXIMIZED;\r\n    /** Defines that alpha blending to SRC + DEST */\r\n    public static readonly ALPHA_ONEONE = Constants.ALPHA_ONEONE;\r\n    /** Defines that alpha blending to SRC + (1 - SRC ALPHA) * DEST */\r\n    public static readonly ALPHA_PREMULTIPLIED = Constants.ALPHA_PREMULTIPLIED;\r\n    /**\r\n     * Defines that alpha blending to SRC + (1 - SRC ALPHA) * DEST\r\n     * Alpha will be set to (1 - SRC ALPHA) * DEST ALPHA\r\n     */\r\n    public static readonly ALPHA_PREMULTIPLIED_PORTERDUFF = Constants.ALPHA_PREMULTIPLIED_PORTERDUFF;\r\n    /** Defines that alpha blending to CST * SRC + (1 - CST) * DEST */\r\n    public static readonly ALPHA_INTERPOLATE = Constants.ALPHA_INTERPOLATE;\r\n    /**\r\n     * Defines that alpha blending to SRC + (1 - SRC) * DEST\r\n     * Alpha will be set to SRC ALPHA + (1 - SRC ALPHA) * DEST ALPHA\r\n     */\r\n    public static readonly ALPHA_SCREENMODE = Constants.ALPHA_SCREENMODE;\r\n\r\n    /** Defines that the resource is not delayed*/\r\n    public static readonly DELAYLOADSTATE_NONE = Constants.DELAYLOADSTATE_NONE;\r\n    /** Defines that the resource was successfully delay loaded */\r\n    public static readonly DELAYLOADSTATE_LOADED = Constants.DELAYLOADSTATE_LOADED;\r\n    /** Defines that the resource is currently delay loading */\r\n    public static readonly DELAYLOADSTATE_LOADING = Constants.DELAYLOADSTATE_LOADING;\r\n    /** Defines that the resource is delayed and has not started loading */\r\n    public static readonly DELAYLOADSTATE_NOTLOADED = Constants.DELAYLOADSTATE_NOTLOADED;\r\n\r\n    // Depht or Stencil test Constants.\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will never pass. i.e. Nothing will be drawn */\r\n    public static readonly NEVER = Constants.NEVER;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will always pass. i.e. Pixels will be drawn in the order they are drawn */\r\n    public static readonly ALWAYS = Constants.ALWAYS;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than the stored value */\r\n    public static readonly LESS = Constants.LESS;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is equals to the stored value */\r\n    public static readonly EQUAL = Constants.EQUAL;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than or equal to the stored value */\r\n    public static readonly LEQUAL = Constants.LEQUAL;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than the stored value */\r\n    public static readonly GREATER = Constants.GREATER;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than or equal to the stored value */\r\n    public static readonly GEQUAL = Constants.GEQUAL;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is not equal to the stored value */\r\n    public static readonly NOTEQUAL = Constants.NOTEQUAL;\r\n\r\n    // Stencil Actions Constants.\r\n    /** Passed to stencilOperation to specify that stencil value must be kept */\r\n    public static readonly KEEP = Constants.KEEP;\r\n    /** Passed to stencilOperation to specify that stencil value must be replaced */\r\n    public static readonly REPLACE = Constants.REPLACE;\r\n    /** Passed to stencilOperation to specify that stencil value must be incremented */\r\n    public static readonly INCR = Constants.INCR;\r\n    /** Passed to stencilOperation to specify that stencil value must be decremented */\r\n    public static readonly DECR = Constants.DECR;\r\n    /** Passed to stencilOperation to specify that stencil value must be inverted */\r\n    public static readonly INVERT = Constants.INVERT;\r\n    /** Passed to stencilOperation to specify that stencil value must be incremented with wrapping */\r\n    public static readonly INCR_WRAP = Constants.INCR_WRAP;\r\n    /** Passed to stencilOperation to specify that stencil value must be decremented with wrapping */\r\n    public static readonly DECR_WRAP = Constants.DECR_WRAP;\r\n\r\n    /** Texture is not repeating outside of 0..1 UVs */\r\n    public static readonly TEXTURE_CLAMP_ADDRESSMODE = Constants.TEXTURE_CLAMP_ADDRESSMODE;\r\n    /** Texture is repeating outside of 0..1 UVs */\r\n    public static readonly TEXTURE_WRAP_ADDRESSMODE = Constants.TEXTURE_WRAP_ADDRESSMODE;\r\n    /** Texture is repeating and mirrored */\r\n    public static readonly TEXTURE_MIRROR_ADDRESSMODE = Constants.TEXTURE_MIRROR_ADDRESSMODE;\r\n\r\n    /** ALPHA */\r\n    public static readonly TEXTUREFORMAT_ALPHA = Constants.TEXTUREFORMAT_ALPHA;\r\n    /** LUMINANCE */\r\n    public static readonly TEXTUREFORMAT_LUMINANCE = Constants.TEXTUREFORMAT_LUMINANCE;\r\n    /** LUMINANCE_ALPHA */\r\n    public static readonly TEXTUREFORMAT_LUMINANCE_ALPHA = Constants.TEXTUREFORMAT_LUMINANCE_ALPHA;\r\n    /** RGB */\r\n    public static readonly TEXTUREFORMAT_RGB = Constants.TEXTUREFORMAT_RGB;\r\n    /** RGBA */\r\n    public static readonly TEXTUREFORMAT_RGBA = Constants.TEXTUREFORMAT_RGBA;\r\n    /** RED */\r\n    public static readonly TEXTUREFORMAT_RED = Constants.TEXTUREFORMAT_RED;\r\n    /** RED (2nd reference) */\r\n    public static readonly TEXTUREFORMAT_R = Constants.TEXTUREFORMAT_R;\r\n    /** RG */\r\n    public static readonly TEXTUREFORMAT_RG = Constants.TEXTUREFORMAT_RG;\r\n    /** RED_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RED_INTEGER = Constants.TEXTUREFORMAT_RED_INTEGER;\r\n    /** RED_INTEGER (2nd reference) */\r\n    public static readonly TEXTUREFORMAT_R_INTEGER = Constants.TEXTUREFORMAT_R_INTEGER;\r\n    /** RG_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RG_INTEGER = Constants.TEXTUREFORMAT_RG_INTEGER;\r\n    /** RGB_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RGB_INTEGER = Constants.TEXTUREFORMAT_RGB_INTEGER;\r\n    /** RGBA_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RGBA_INTEGER = Constants.TEXTUREFORMAT_RGBA_INTEGER;\r\n\r\n    /** UNSIGNED_BYTE */\r\n    public static readonly TEXTURETYPE_UNSIGNED_BYTE = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n    /** UNSIGNED_BYTE (2nd reference) */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT = Constants.TEXTURETYPE_UNSIGNED_INT;\r\n    /** FLOAT */\r\n    public static readonly TEXTURETYPE_FLOAT = Constants.TEXTURETYPE_FLOAT;\r\n    /** HALF_FLOAT */\r\n    public static readonly TEXTURETYPE_HALF_FLOAT = Constants.TEXTURETYPE_HALF_FLOAT;\r\n    /** BYTE */\r\n    public static readonly TEXTURETYPE_BYTE = Constants.TEXTURETYPE_BYTE;\r\n    /** SHORT */\r\n    public static readonly TEXTURETYPE_SHORT = Constants.TEXTURETYPE_SHORT;\r\n    /** UNSIGNED_SHORT */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT = Constants.TEXTURETYPE_UNSIGNED_SHORT;\r\n    /** INT */\r\n    public static readonly TEXTURETYPE_INT = Constants.TEXTURETYPE_INT;\r\n    /** UNSIGNED_INT */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INTEGER = Constants.TEXTURETYPE_UNSIGNED_INTEGER;\r\n    /** UNSIGNED_SHORT_4_4_4_4 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4 = Constants.TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4;\r\n    /** UNSIGNED_SHORT_5_5_5_1 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1 = Constants.TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1;\r\n    /** UNSIGNED_SHORT_5_6_5 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT_5_6_5 = Constants.TEXTURETYPE_UNSIGNED_SHORT_5_6_5;\r\n    /** UNSIGNED_INT_2_10_10_10_REV */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV = Constants.TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV;\r\n    /** UNSIGNED_INT_24_8 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_24_8 = Constants.TEXTURETYPE_UNSIGNED_INT_24_8;\r\n    /** UNSIGNED_INT_10F_11F_11F_REV */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV = Constants.TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV;\r\n    /** UNSIGNED_INT_5_9_9_9_REV */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV = Constants.TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV;\r\n    /** FLOAT_32_UNSIGNED_INT_24_8_REV */\r\n    public static readonly TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV = Constants.TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV;\r\n\r\n    /** nearest is mag = nearest and min = nearest and mip = none */\r\n    public static readonly TEXTURE_NEAREST_SAMPLINGMODE = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n    /** Bilinear is mag = linear and min = linear and mip = nearest */\r\n    public static readonly TEXTURE_BILINEAR_SAMPLINGMODE = Constants.TEXTURE_BILINEAR_SAMPLINGMODE;\r\n    /** Trilinear is mag = linear and min = linear and mip = linear */\r\n    public static readonly TEXTURE_TRILINEAR_SAMPLINGMODE = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE;\r\n    /** nearest is mag = nearest and min = nearest and mip = linear */\r\n    public static readonly TEXTURE_NEAREST_NEAREST_MIPLINEAR = Constants.TEXTURE_NEAREST_NEAREST_MIPLINEAR;\r\n    /** Bilinear is mag = linear and min = linear and mip = nearest */\r\n    public static readonly TEXTURE_LINEAR_LINEAR_MIPNEAREST = Constants.TEXTURE_LINEAR_LINEAR_MIPNEAREST;\r\n    /** Trilinear is mag = linear and min = linear and mip = linear */\r\n    public static readonly TEXTURE_LINEAR_LINEAR_MIPLINEAR = Constants.TEXTURE_LINEAR_LINEAR_MIPLINEAR;\r\n    /** mag = nearest and min = nearest and mip = nearest */\r\n    public static readonly TEXTURE_NEAREST_NEAREST_MIPNEAREST = Constants.TEXTURE_NEAREST_NEAREST_MIPNEAREST;\r\n    /** mag = nearest and min = linear and mip = nearest */\r\n    public static readonly TEXTURE_NEAREST_LINEAR_MIPNEAREST = Constants.TEXTURE_NEAREST_LINEAR_MIPNEAREST;\r\n    /** mag = nearest and min = linear and mip = linear */\r\n    public static readonly TEXTURE_NEAREST_LINEAR_MIPLINEAR = Constants.TEXTURE_NEAREST_LINEAR_MIPLINEAR;\r\n    /** mag = nearest and min = linear and mip = none */\r\n    public static readonly TEXTURE_NEAREST_LINEAR = Constants.TEXTURE_NEAREST_LINEAR;\r\n    /** mag = nearest and min = nearest and mip = none */\r\n    public static readonly TEXTURE_NEAREST_NEAREST = Constants.TEXTURE_NEAREST_NEAREST;\r\n    /** mag = linear and min = nearest and mip = nearest */\r\n    public static readonly TEXTURE_LINEAR_NEAREST_MIPNEAREST = Constants.TEXTURE_LINEAR_NEAREST_MIPNEAREST;\r\n    /** mag = linear and min = nearest and mip = linear */\r\n    public static readonly TEXTURE_LINEAR_NEAREST_MIPLINEAR = Constants.TEXTURE_LINEAR_NEAREST_MIPLINEAR;\r\n    /** mag = linear and min = linear and mip = none */\r\n    public static readonly TEXTURE_LINEAR_LINEAR = Constants.TEXTURE_LINEAR_LINEAR;\r\n    /** mag = linear and min = nearest and mip = none */\r\n    public static readonly TEXTURE_LINEAR_NEAREST = Constants.TEXTURE_LINEAR_NEAREST;\r\n\r\n    /** Explicit coordinates mode */\r\n    public static readonly TEXTURE_EXPLICIT_MODE = Constants.TEXTURE_EXPLICIT_MODE;\r\n    /** Spherical coordinates mode */\r\n    public static readonly TEXTURE_SPHERICAL_MODE = Constants.TEXTURE_SPHERICAL_MODE;\r\n    /** Planar coordinates mode */\r\n    public static readonly TEXTURE_PLANAR_MODE = Constants.TEXTURE_PLANAR_MODE;\r\n    /** Cubic coordinates mode */\r\n    public static readonly TEXTURE_CUBIC_MODE = Constants.TEXTURE_CUBIC_MODE;\r\n    /** Projection coordinates mode */\r\n    public static readonly TEXTURE_PROJECTION_MODE = Constants.TEXTURE_PROJECTION_MODE;\r\n    /** Skybox coordinates mode */\r\n    public static readonly TEXTURE_SKYBOX_MODE = Constants.TEXTURE_SKYBOX_MODE;\r\n    /** Inverse Cubic coordinates mode */\r\n    public static readonly TEXTURE_INVCUBIC_MODE = Constants.TEXTURE_INVCUBIC_MODE;\r\n    /** Equirectangular coordinates mode */\r\n    public static readonly TEXTURE_EQUIRECTANGULAR_MODE = Constants.TEXTURE_EQUIRECTANGULAR_MODE;\r\n    /** Equirectangular Fixed coordinates mode */\r\n    public static readonly TEXTURE_FIXED_EQUIRECTANGULAR_MODE = Constants.TEXTURE_FIXED_EQUIRECTANGULAR_MODE;\r\n    /** Equirectangular Fixed Mirrored coordinates mode */\r\n    public static readonly TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE = Constants.TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE;\r\n\r\n    // Texture rescaling mode\r\n    /** Defines that texture rescaling will use a floor to find the closer power of 2 size */\r\n    public static readonly SCALEMODE_FLOOR = Constants.SCALEMODE_FLOOR;\r\n    /** Defines that texture rescaling will look for the nearest power of 2 size */\r\n    public static readonly SCALEMODE_NEAREST = Constants.SCALEMODE_NEAREST;\r\n    /** Defines that texture rescaling will use a ceil to find the closer power of 2 size */\r\n    public static readonly SCALEMODE_CEILING = Constants.SCALEMODE_CEILING;\r\n\r\n    /**\r\n     * Returns the current npm package of the sdk\r\n     */\r\n    // Not mixed with Version for tooling purpose.\r\n    public static get NpmPackage(): string {\r\n        return ThinEngine.NpmPackage;\r\n    }\r\n\r\n    /**\r\n     * Returns the current version of the framework\r\n     */\r\n    public static get Version(): string {\r\n        return ThinEngine.Version;\r\n    }\r\n\r\n    /** Gets the list of created engines */\r\n    public static get Instances(): Engine[] {\r\n        return EngineStore.Instances;\r\n    }\r\n\r\n    /**\r\n     * Gets the latest created engine\r\n     */\r\n    public static get LastCreatedEngine(): Nullable<Engine> {\r\n        return EngineStore.LastCreatedEngine;\r\n    }\r\n\r\n    /**\r\n     * Gets the latest created scene\r\n     */\r\n    public static get LastCreatedScene(): Nullable<Scene> {\r\n        return EngineStore.LastCreatedScene;\r\n    }\r\n\r\n    /** @hidden */\r\n    /**\r\n     * Engine abstraction for loading and creating an image bitmap from a given source string.\r\n     * @param imageSource source to load the image from.\r\n     * @param options An object that sets options for the image's extraction.\r\n     * @returns ImageBitmap.\r\n     */\r\n    public _createImageBitmapFromSource(imageSource: string, options?: ImageBitmapOptions): Promise<ImageBitmap> {\r\n        const promise = new Promise<ImageBitmap>((resolve, reject) => {\r\n            const image = new Image();\r\n            image.onload = () => {\r\n                image.decode().then(() => {\r\n                    this.createImageBitmap(image, options).then((imageBitmap) => {\r\n                        resolve(imageBitmap);\r\n                    });\r\n                });\r\n            };\r\n            image.onerror = () => {\r\n                reject(`Error loading image ${image.src}`);\r\n            };\r\n\r\n            image.src = imageSource;\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * Engine abstraction for createImageBitmap\r\n     * @param image source for image\r\n     * @param options An object that sets options for the image's extraction.\r\n     * @returns ImageBitmap\r\n     */\r\n    public createImageBitmap(image: ImageBitmapSource, options?: ImageBitmapOptions): Promise<ImageBitmap> {\r\n        return createImageBitmap(image, options);\r\n    }\r\n\r\n    /**\r\n     * Resize an image and returns the image data as an uint8array\r\n     * @param image image to resize\r\n     * @param bufferWidth destination buffer width\r\n     * @param bufferHeight destination buffer height\r\n     * @returns an uint8array containing RGBA values of bufferWidth * bufferHeight size\r\n     */\r\n    public resizeImageBitmap(image: HTMLImageElement | ImageBitmap, bufferWidth: number, bufferHeight: number): Uint8Array {\r\n        const canvas = this.createCanvas(bufferWidth, bufferHeight);\r\n        const context = canvas.getContext(\"2d\");\r\n\r\n        if (!context) {\r\n            throw new Error(\"Unable to get 2d context for resizeImageBitmap\");\r\n        }\r\n\r\n        context.drawImage(image, 0, 0);\r\n\r\n        // Create VertexData from map data\r\n        // Cast is due to wrong definition in lib.d.ts from ts 1.3 - https://github.com/Microsoft/TypeScript/issues/949\r\n        const buffer = <Uint8Array>(<any>context.getImageData(0, 0, bufferWidth, bufferHeight).data);\r\n        return buffer;\r\n    }\r\n\r\n    /**\r\n     * Will flag all materials in all scenes in all engines as dirty to trigger new shader compilation\r\n     * @param flag defines which part of the materials must be marked as dirty\r\n     * @param predicate defines a predicate used to filter which materials should be affected\r\n     */\r\n    public static MarkAllMaterialsAsDirty(flag: number, predicate?: (mat: Material) => boolean): void {\r\n        for (let engineIndex = 0; engineIndex < Engine.Instances.length; engineIndex++) {\r\n            const engine = Engine.Instances[engineIndex];\r\n\r\n            for (let sceneIndex = 0; sceneIndex < engine.scenes.length; sceneIndex++) {\r\n                engine.scenes[sceneIndex].markAllMaterialsAsDirty(flag, predicate);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Method called to create the default loading screen.\r\n     * This can be overridden in your own app.\r\n     * @param canvas The rendering canvas element\r\n     * @returns The loading screen\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static DefaultLoadingScreenFactory(canvas: HTMLCanvasElement): ILoadingScreen {\r\n        throw _WarnImport(\"LoadingScreen\");\r\n    }\r\n\r\n    /**\r\n     * Method called to create the default rescale post process on each engine.\r\n     */\r\n    public static _RescalePostProcessFactory: Nullable<(engine: Engine) => PostProcess> = null;\r\n\r\n    // Members\r\n\r\n    /**\r\n     * Gets or sets a boolean to enable/disable IndexedDB support and avoid XHR on .manifest\r\n     **/\r\n    public enableOfflineSupport = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean to enable/disable checking manifest if IndexedDB support is enabled (js will always consider the database is up to date)\r\n     **/\r\n    public disableManifestCheck = false;\r\n\r\n    /**\r\n     * Gets the list of created scenes\r\n     */\r\n    public scenes = new Array<Scene>();\r\n\r\n    /** @hidden */\r\n    public _virtualScenes = new Array<Scene>();\r\n\r\n    /**\r\n     * Event raised when a new scene is created\r\n     */\r\n    public onNewSceneAddedObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * Gets the list of created postprocesses\r\n     */\r\n    public postProcesses = new Array<PostProcess>();\r\n\r\n    /**\r\n     * Gets a boolean indicating if the pointer is currently locked\r\n     */\r\n    public isPointerLock = false;\r\n\r\n    // Observables\r\n\r\n    /**\r\n     * Observable event triggered each time the rendering canvas is resized\r\n     */\r\n    public onResizeObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Observable event triggered each time the canvas loses focus\r\n     */\r\n    public onCanvasBlurObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Observable event triggered each time the canvas gains focus\r\n     */\r\n    public onCanvasFocusObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Observable event triggered each time the canvas receives pointerout event\r\n     */\r\n    public onCanvasPointerOutObservable = new Observable<PointerEvent>();\r\n\r\n    /**\r\n     * Observable raised when the engine begins a new frame\r\n     */\r\n    public onBeginFrameObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * If set, will be used to request the next animation frame for the render loop\r\n     */\r\n    public customAnimationFrameRequester: Nullable<ICustomAnimationFrameRequester> = null;\r\n\r\n    /**\r\n     * Observable raised when the engine ends the current frame\r\n     */\r\n    public onEndFrameObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Observable raised when the engine is about to compile a shader\r\n     */\r\n    public onBeforeShaderCompilationObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Observable raised when the engine has just compiled a shader\r\n     */\r\n    public onAfterShaderCompilationObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Gets the audio engine\r\n     * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music\r\n     * @ignorenaming\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static audioEngine: Nullable<IAudioEngine>;\r\n\r\n    /**\r\n     * Default AudioEngine factory responsible of creating the Audio Engine.\r\n     * By default, this will create a BabylonJS Audio Engine if the workload has been embedded.\r\n     */\r\n    public static AudioEngineFactory: (\r\n        hostElement: Nullable<HTMLElement>,\r\n        audioContext: Nullable<AudioContext>,\r\n        audioDestination: Nullable<AudioDestinationNode | MediaStreamAudioDestinationNode>\r\n    ) => IAudioEngine;\r\n\r\n    /**\r\n     * Default offline support factory responsible of creating a tool used to store data locally.\r\n     * By default, this will create a Database object if the workload has been embedded.\r\n     */\r\n    public static OfflineProviderFactory: (urlToScene: string, callbackManifestChecked: (checked: boolean) => any, disableManifestCheck: boolean) => IOfflineProvider;\r\n\r\n    private _loadingScreen: ILoadingScreen;\r\n    private _pointerLockRequested: boolean;\r\n    private _rescalePostProcess: PostProcess;\r\n\r\n    // Deterministic lockstepMaxSteps\r\n    protected _deterministicLockstep: boolean = false;\r\n    protected _lockstepMaxSteps: number = 4;\r\n    protected _timeStep: number = 1 / 60;\r\n\r\n    protected get _supportsHardwareTextureRescaling() {\r\n        return !!Engine._RescalePostProcessFactory;\r\n    }\r\n\r\n    // FPS\r\n    private _fps = 60;\r\n    private _deltaTime = 0;\r\n\r\n    /** @hidden */\r\n    public _drawCalls = new PerfCounter();\r\n\r\n    /** Gets or sets the tab index to set to the rendering canvas. 1 is the minimum value to set to be able to capture keyboard events */\r\n    public canvasTabIndex = 1;\r\n\r\n    /**\r\n     * Turn this value on if you want to pause FPS computation when in background\r\n     */\r\n    public disablePerformanceMonitorInBackground = false;\r\n\r\n    private _performanceMonitor = new PerformanceMonitor();\r\n    /**\r\n     * Gets the performance monitor attached to this engine\r\n     * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#engineinstrumentation\r\n     */\r\n    public get performanceMonitor(): PerformanceMonitor {\r\n        return this._performanceMonitor;\r\n    }\r\n\r\n    // Focus\r\n    private _onFocus: () => void;\r\n    private _onBlur: () => void;\r\n    private _onCanvasPointerOut: (event: PointerEvent) => void;\r\n    private _onCanvasBlur: () => void;\r\n    private _onCanvasFocus: () => void;\r\n\r\n    private _onFullscreenChange: () => void;\r\n    private _onPointerLockChange: () => void;\r\n\r\n    protected _compatibilityMode = true;\r\n\r\n    /**\r\n     * (WebGPU only) True (default) to be in compatibility mode, meaning rendering all existing scenes without artifacts (same rendering than WebGL).\r\n     * Setting the property to false will improve performances but may not work in some scenes if some precautions are not taken.\r\n     * See https://doc.babylonjs.com/advanced_topics/webGPU/webGPUOptimization/webGPUNonCompatibilityMode for more details\r\n     */\r\n    public get compatibilityMode() {\r\n        return this._compatibilityMode;\r\n    }\r\n\r\n    public set compatibilityMode(mode: boolean) {\r\n        // not supported in WebGL\r\n        this._compatibilityMode = true;\r\n    }\r\n\r\n    // Events\r\n\r\n    /**\r\n     * Gets the HTML element used to attach event listeners\r\n     * @returns a HTML element\r\n     */\r\n    public getInputElement(): Nullable<HTMLElement> {\r\n        return this._renderingCanvas;\r\n    }\r\n\r\n    /**\r\n     * Creates a new engine\r\n     * @param canvasOrContext defines the canvas or WebGL context to use for rendering. If you provide a WebGL context, Babylon.js will not hook events on the canvas (like pointers, keyboards, etc...) so no event observables will be available. This is mostly used when Babylon.js is used as a plugin on a system which already used the WebGL context\r\n     * @param antialias defines enable antialiasing (default: false)\r\n     * @param options defines further options to be sent to the getContext() function\r\n     * @param adaptToDeviceRatio defines whether to adapt to the device's viewport characteristics (default: false)\r\n     */\r\n    constructor(\r\n        canvasOrContext: Nullable<HTMLCanvasElement | OffscreenCanvas | WebGLRenderingContext | WebGL2RenderingContext>,\r\n        antialias?: boolean,\r\n        options?: EngineOptions,\r\n        adaptToDeviceRatio: boolean = false\r\n    ) {\r\n        super(canvasOrContext, antialias, options, adaptToDeviceRatio);\r\n\r\n        Engine.Instances.push(this);\r\n\r\n        if (!canvasOrContext) {\r\n            return;\r\n        }\r\n\r\n        this._features.supportRenderPasses = true;\r\n\r\n        options = this._creationOptions;\r\n\r\n        if ((<any>canvasOrContext).getContext) {\r\n            const canvas = <HTMLCanvasElement>canvasOrContext;\r\n\r\n            this._sharedInit(canvas, !!options.doNotHandleTouchAction, options.audioEngine!);\r\n\r\n            if (IsWindowObjectExist()) {\r\n                const anyDoc = document as any;\r\n\r\n                // Fullscreen\r\n                this._onFullscreenChange = () => {\r\n                    if (anyDoc.fullscreen !== undefined) {\r\n                        this.isFullscreen = anyDoc.fullscreen;\r\n                    } else if (anyDoc.mozFullScreen !== undefined) {\r\n                        this.isFullscreen = anyDoc.mozFullScreen;\r\n                    } else if (anyDoc.webkitIsFullScreen !== undefined) {\r\n                        this.isFullscreen = anyDoc.webkitIsFullScreen;\r\n                    } else if (anyDoc.msIsFullScreen !== undefined) {\r\n                        this.isFullscreen = anyDoc.msIsFullScreen;\r\n                    }\r\n\r\n                    // Pointer lock\r\n                    if (this.isFullscreen && this._pointerLockRequested && canvas) {\r\n                        Engine._RequestPointerlock(canvas);\r\n                    }\r\n                };\r\n\r\n                document.addEventListener(\"fullscreenchange\", this._onFullscreenChange, false);\r\n                document.addEventListener(\"mozfullscreenchange\", this._onFullscreenChange, false);\r\n                document.addEventListener(\"webkitfullscreenchange\", this._onFullscreenChange, false);\r\n                document.addEventListener(\"msfullscreenchange\", this._onFullscreenChange, false);\r\n\r\n                // Pointer lock\r\n                this._onPointerLockChange = () => {\r\n                    this.isPointerLock =\r\n                        anyDoc.mozPointerLockElement === canvas ||\r\n                        anyDoc.webkitPointerLockElement === canvas ||\r\n                        anyDoc.msPointerLockElement === canvas ||\r\n                        anyDoc.pointerLockElement === canvas;\r\n                };\r\n\r\n                document.addEventListener(\"pointerlockchange\", this._onPointerLockChange, false);\r\n                document.addEventListener(\"mspointerlockchange\", this._onPointerLockChange, false);\r\n                document.addEventListener(\"mozpointerlockchange\", this._onPointerLockChange, false);\r\n                document.addEventListener(\"webkitpointerlockchange\", this._onPointerLockChange, false);\r\n\r\n                // Create Audio Engine if needed.\r\n                if (!Engine.audioEngine && options.audioEngine && Engine.AudioEngineFactory) {\r\n                    Engine.audioEngine = Engine.AudioEngineFactory(this.getRenderingCanvas(), this.getAudioContext(), this.getAudioDestination());\r\n                }\r\n            }\r\n\r\n            this._connectVREvents();\r\n\r\n            this.enableOfflineSupport = Engine.OfflineProviderFactory !== undefined;\r\n\r\n            this._deterministicLockstep = !!options.deterministicLockstep;\r\n            this._lockstepMaxSteps = options.lockstepMaxSteps || 0;\r\n            this._timeStep = options.timeStep || 1 / 60;\r\n        }\r\n\r\n        // Load WebVR Devices\r\n        this._prepareVRComponent();\r\n        if (options.autoEnableWebVR) {\r\n            this.initWebVR();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Shared initialization across engines types.\r\n     * @param canvas The canvas associated with this instance of the engine.\r\n     * @param doNotHandleTouchAction Defines that engine should ignore modifying touch action attribute and style\r\n     * @param audioEngine Defines if an audio engine should be created by default\r\n     */\r\n    protected _sharedInit(canvas: HTMLCanvasElement, doNotHandleTouchAction: boolean, audioEngine: boolean) {\r\n        super._sharedInit(canvas, doNotHandleTouchAction, audioEngine);\r\n\r\n        this._onCanvasFocus = () => {\r\n            this.onCanvasFocusObservable.notifyObservers(this);\r\n        };\r\n\r\n        this._onCanvasBlur = () => {\r\n            this.onCanvasBlurObservable.notifyObservers(this);\r\n        };\r\n\r\n        canvas.addEventListener(\"focus\", this._onCanvasFocus);\r\n        canvas.addEventListener(\"blur\", this._onCanvasBlur);\r\n\r\n        this._onBlur = () => {\r\n            if (this.disablePerformanceMonitorInBackground) {\r\n                this._performanceMonitor.disable();\r\n            }\r\n            this._windowIsBackground = true;\r\n        };\r\n\r\n        this._onFocus = () => {\r\n            if (this.disablePerformanceMonitorInBackground) {\r\n                this._performanceMonitor.enable();\r\n            }\r\n            this._windowIsBackground = false;\r\n        };\r\n\r\n        this._onCanvasPointerOut = (ev) => {\r\n            // Check that the element at the point of the pointer out isn't the canvas and if it isn't, notify observers\r\n            // Note: This is a workaround for a bug with Safari\r\n            if (document.elementFromPoint(ev.clientX, ev.clientY) !== canvas) {\r\n                this.onCanvasPointerOutObservable.notifyObservers(ev);\r\n            }\r\n        };\r\n\r\n        if (IsWindowObjectExist()) {\r\n            const hostWindow = this.getHostWindow();\r\n            if (hostWindow) {\r\n                hostWindow.addEventListener(\"blur\", this._onBlur);\r\n                hostWindow.addEventListener(\"focus\", this._onFocus);\r\n            }\r\n        }\r\n\r\n        canvas.addEventListener(\"pointerout\", this._onCanvasPointerOut);\r\n\r\n        if (!doNotHandleTouchAction) {\r\n            this._disableTouchAction();\r\n        }\r\n\r\n        // Create Audio Engine if needed.\r\n        if (!Engine.audioEngine && audioEngine && Engine.AudioEngineFactory) {\r\n            Engine.audioEngine = Engine.AudioEngineFactory(this.getRenderingCanvas(), this.getAudioContext(), this.getAudioDestination());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets current aspect ratio\r\n     * @param viewportOwner defines the camera to use to get the aspect ratio\r\n     * @param useScreen defines if screen size must be used (or the current render target if any)\r\n     * @returns a number defining the aspect ratio\r\n     */\r\n    public getAspectRatio(viewportOwner: IViewportOwnerLike, useScreen = false): number {\r\n        const viewport = viewportOwner.viewport;\r\n        return (this.getRenderWidth(useScreen) * viewport.width) / (this.getRenderHeight(useScreen) * viewport.height);\r\n    }\r\n\r\n    /**\r\n     * Gets current screen aspect ratio\r\n     * @returns a number defining the aspect ratio\r\n     */\r\n    public getScreenAspectRatio(): number {\r\n        return this.getRenderWidth(true) / this.getRenderHeight(true);\r\n    }\r\n\r\n    /**\r\n     * Gets the client rect of the HTML canvas attached with the current webGL context\r\n     * @returns a client rectangle\r\n     */\r\n    public getRenderingCanvasClientRect(): Nullable<ClientRect> {\r\n        if (!this._renderingCanvas) {\r\n            return null;\r\n        }\r\n        return this._renderingCanvas.getBoundingClientRect();\r\n    }\r\n\r\n    /**\r\n     * Gets the client rect of the HTML element used for events\r\n     * @returns a client rectangle\r\n     */\r\n    public getInputElementClientRect(): Nullable<ClientRect> {\r\n        if (!this._renderingCanvas) {\r\n            return null;\r\n        }\r\n        return this.getInputElement()!.getBoundingClientRect();\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the engine is running in deterministic lock step mode\r\n     * @see https://doc.babylonjs.com/babylon101/animations#deterministic-lockstep\r\n     * @returns true if engine is in deterministic lock step mode\r\n     */\r\n    public isDeterministicLockStep(): boolean {\r\n        return this._deterministicLockstep;\r\n    }\r\n\r\n    /**\r\n     * Gets the max steps when engine is running in deterministic lock step\r\n     * @see https://doc.babylonjs.com/babylon101/animations#deterministic-lockstep\r\n     * @returns the max steps\r\n     */\r\n    public getLockstepMaxSteps(): number {\r\n        return this._lockstepMaxSteps;\r\n    }\r\n\r\n    /**\r\n     * Returns the time in ms between steps when using deterministic lock step.\r\n     * @returns time step in (ms)\r\n     */\r\n    public getTimeStep(): number {\r\n        return this._timeStep * 1000;\r\n    }\r\n\r\n    /**\r\n     * Force the mipmap generation for the given render target texture\r\n     * @param texture defines the render target texture to use\r\n     * @param unbind defines whether or not to unbind the texture after generation. Defaults to true.\r\n     */\r\n    public generateMipMapsForCubemap(texture: InternalTexture, unbind = true) {\r\n        if (texture.generateMipMaps) {\r\n            const gl = this._gl;\r\n            this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\r\n            gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\r\n            if (unbind) {\r\n                this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** States */\r\n\r\n    /**\r\n     * Gets a boolean indicating if depth testing is enabled\r\n     * @returns the current state\r\n     */\r\n    public getDepthBuffer(): boolean {\r\n        return this._depthCullingState.depthTest;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable depth buffering\r\n     * @param enable defines the state to set\r\n     */\r\n    public setDepthBuffer(enable: boolean): void {\r\n        this._depthCullingState.depthTest = enable;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if depth writing is enabled\r\n     * @returns the current depth writing state\r\n     */\r\n    public getDepthWrite(): boolean {\r\n        return this._depthCullingState.depthMask;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable depth writing\r\n     * @param enable defines the state to set\r\n     */\r\n    public setDepthWrite(enable: boolean): void {\r\n        this._depthCullingState.depthMask = enable;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if stencil buffer is enabled\r\n     * @returns the current stencil buffer state\r\n     */\r\n    public getStencilBuffer(): boolean {\r\n        return this._stencilState.stencilTest;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the stencil buffer\r\n     * @param enable defines if the stencil buffer must be enabled or disabled\r\n     */\r\n    public setStencilBuffer(enable: boolean): void {\r\n        this._stencilState.stencilTest = enable;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil mask\r\n     * @returns a number defining the new stencil mask to use\r\n     */\r\n    public getStencilMask(): number {\r\n        return this._stencilState.stencilMask;\r\n    }\r\n\r\n    /**\r\n     * Sets the current stencil mask\r\n     * @param mask defines the new stencil mask to use\r\n     */\r\n    public setStencilMask(mask: number): void {\r\n        this._stencilState.stencilMask = mask;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil function\r\n     * @returns a number defining the stencil function to use\r\n     */\r\n    public getStencilFunction(): number {\r\n        return this._stencilState.stencilFunc;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil reference value\r\n     * @returns a number defining the stencil reference value to use\r\n     */\r\n    public getStencilFunctionReference(): number {\r\n        return this._stencilState.stencilFuncRef;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil mask\r\n     * @returns a number defining the stencil mask to use\r\n     */\r\n    public getStencilFunctionMask(): number {\r\n        return this._stencilState.stencilFuncMask;\r\n    }\r\n\r\n    /**\r\n     * Sets the current stencil function\r\n     * @param stencilFunc defines the new stencil function to use\r\n     */\r\n    public setStencilFunction(stencilFunc: number) {\r\n        this._stencilState.stencilFunc = stencilFunc;\r\n    }\r\n\r\n    /**\r\n     * Sets the current stencil reference\r\n     * @param reference defines the new stencil reference to use\r\n     */\r\n    public setStencilFunctionReference(reference: number) {\r\n        this._stencilState.stencilFuncRef = reference;\r\n    }\r\n\r\n    /**\r\n     * Sets the current stencil mask\r\n     * @param mask defines the new stencil mask to use\r\n     */\r\n    public setStencilFunctionMask(mask: number) {\r\n        this._stencilState.stencilFuncMask = mask;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil operation when stencil fails\r\n     * @returns a number defining stencil operation to use when stencil fails\r\n     */\r\n    public getStencilOperationFail(): number {\r\n        return this._stencilState.stencilOpStencilFail;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil operation when depth fails\r\n     * @returns a number defining stencil operation to use when depth fails\r\n     */\r\n    public getStencilOperationDepthFail(): number {\r\n        return this._stencilState.stencilOpDepthFail;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil operation when stencil passes\r\n     * @returns a number defining stencil operation to use when stencil passes\r\n     */\r\n    public getStencilOperationPass(): number {\r\n        return this._stencilState.stencilOpStencilDepthPass;\r\n    }\r\n\r\n    /**\r\n     * Sets the stencil operation to use when stencil fails\r\n     * @param operation defines the stencil operation to use when stencil fails\r\n     */\r\n    public setStencilOperationFail(operation: number): void {\r\n        this._stencilState.stencilOpStencilFail = operation;\r\n    }\r\n\r\n    /**\r\n     * Sets the stencil operation to use when depth fails\r\n     * @param operation defines the stencil operation to use when depth fails\r\n     */\r\n    public setStencilOperationDepthFail(operation: number): void {\r\n        this._stencilState.stencilOpDepthFail = operation;\r\n    }\r\n\r\n    /**\r\n     * Sets the stencil operation to use when stencil passes\r\n     * @param operation defines the stencil operation to use when stencil passes\r\n     */\r\n    public setStencilOperationPass(operation: number): void {\r\n        this._stencilState.stencilOpStencilDepthPass = operation;\r\n    }\r\n\r\n    /**\r\n     * Sets a boolean indicating if the dithering state is enabled or disabled\r\n     * @param value defines the dithering state\r\n     */\r\n    public setDitheringState(value: boolean): void {\r\n        if (value) {\r\n            this._gl.enable(this._gl.DITHER);\r\n        } else {\r\n            this._gl.disable(this._gl.DITHER);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a boolean indicating if the rasterizer state is enabled or disabled\r\n     * @param value defines the rasterizer state\r\n     */\r\n    public setRasterizerState(value: boolean): void {\r\n        if (value) {\r\n            this._gl.disable(this._gl.RASTERIZER_DISCARD);\r\n        } else {\r\n            this._gl.enable(this._gl.RASTERIZER_DISCARD);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current depth function\r\n     * @returns a number defining the depth function\r\n     */\r\n    public getDepthFunction(): Nullable<number> {\r\n        return this._depthCullingState.depthFunc;\r\n    }\r\n\r\n    /**\r\n     * Sets the current depth function\r\n     * @param depthFunc defines the function to use\r\n     */\r\n    public setDepthFunction(depthFunc: number) {\r\n        this._depthCullingState.depthFunc = depthFunc;\r\n    }\r\n\r\n    /**\r\n     * Sets the current depth function to GREATER\r\n     */\r\n    public setDepthFunctionToGreater(): void {\r\n        this.setDepthFunction(Constants.GREATER);\r\n    }\r\n\r\n    /**\r\n     * Sets the current depth function to GEQUAL\r\n     */\r\n    public setDepthFunctionToGreaterOrEqual(): void {\r\n        this.setDepthFunction(Constants.GEQUAL);\r\n    }\r\n\r\n    /**\r\n     * Sets the current depth function to LESS\r\n     */\r\n    public setDepthFunctionToLess(): void {\r\n        this.setDepthFunction(Constants.LESS);\r\n    }\r\n\r\n    /**\r\n     * Sets the current depth function to LEQUAL\r\n     */\r\n    public setDepthFunctionToLessOrEqual(): void {\r\n        this.setDepthFunction(Constants.LEQUAL);\r\n    }\r\n\r\n    private _cachedStencilBuffer: boolean;\r\n    private _cachedStencilFunction: number;\r\n    private _cachedStencilMask: number;\r\n    private _cachedStencilOperationPass: number;\r\n    private _cachedStencilOperationFail: number;\r\n    private _cachedStencilOperationDepthFail: number;\r\n    private _cachedStencilReference: number;\r\n\r\n    /**\r\n     * Caches the the state of the stencil buffer\r\n     */\r\n    public cacheStencilState() {\r\n        this._cachedStencilBuffer = this.getStencilBuffer();\r\n        this._cachedStencilFunction = this.getStencilFunction();\r\n        this._cachedStencilMask = this.getStencilMask();\r\n        this._cachedStencilOperationPass = this.getStencilOperationPass();\r\n        this._cachedStencilOperationFail = this.getStencilOperationFail();\r\n        this._cachedStencilOperationDepthFail = this.getStencilOperationDepthFail();\r\n        this._cachedStencilReference = this.getStencilFunctionReference();\r\n    }\r\n\r\n    /**\r\n     * Restores the state of the stencil buffer\r\n     */\r\n    public restoreStencilState() {\r\n        this.setStencilFunction(this._cachedStencilFunction);\r\n        this.setStencilMask(this._cachedStencilMask);\r\n        this.setStencilBuffer(this._cachedStencilBuffer);\r\n        this.setStencilOperationPass(this._cachedStencilOperationPass);\r\n        this.setStencilOperationFail(this._cachedStencilOperationFail);\r\n        this.setStencilOperationDepthFail(this._cachedStencilOperationDepthFail);\r\n        this.setStencilFunctionReference(this._cachedStencilReference);\r\n    }\r\n\r\n    /**\r\n     * Directly set the WebGL Viewport\r\n     * @param x defines the x coordinate of the viewport (in screen space)\r\n     * @param y defines the y coordinate of the viewport (in screen space)\r\n     * @param width defines the width of the viewport (in screen space)\r\n     * @param height defines the height of the viewport (in screen space)\r\n     * @return the current viewport Object (if any) that is being replaced by this call. You can restore this viewport later on to go back to the original state\r\n     */\r\n    public setDirectViewport(x: number, y: number, width: number, height: number): Nullable<IViewportLike> {\r\n        const currentViewport = this._cachedViewport;\r\n        this._cachedViewport = null;\r\n\r\n        this._viewport(x, y, width, height);\r\n\r\n        return currentViewport;\r\n    }\r\n\r\n    /**\r\n     * Executes a scissor clear (ie. a clear on a specific portion of the screen)\r\n     * @param x defines the x-coordinate of the top left corner of the clear rectangle\r\n     * @param y defines the y-coordinate of the corner of the clear rectangle\r\n     * @param width defines the width of the clear rectangle\r\n     * @param height defines the height of the clear rectangle\r\n     * @param clearColor defines the clear color\r\n     */\r\n    public scissorClear(x: number, y: number, width: number, height: number, clearColor: IColor4Like): void {\r\n        this.enableScissor(x, y, width, height);\r\n        this.clear(clearColor, true, true, true);\r\n        this.disableScissor();\r\n    }\r\n\r\n    /**\r\n     * Enable scissor test on a specific rectangle (ie. render will only be executed on a specific portion of the screen)\r\n     * @param x defines the x-coordinate of the top left corner of the clear rectangle\r\n     * @param y defines the y-coordinate of the corner of the clear rectangle\r\n     * @param width defines the width of the clear rectangle\r\n     * @param height defines the height of the clear rectangle\r\n     */\r\n    public enableScissor(x: number, y: number, width: number, height: number): void {\r\n        const gl = this._gl;\r\n\r\n        // Change state\r\n        gl.enable(gl.SCISSOR_TEST);\r\n        gl.scissor(x, y, width, height);\r\n    }\r\n\r\n    /**\r\n     * Disable previously set scissor test rectangle\r\n     */\r\n    public disableScissor() {\r\n        const gl = this._gl;\r\n\r\n        gl.disable(gl.SCISSOR_TEST);\r\n    }\r\n\r\n    /**\r\n     * @param numDrawCalls\r\n     * @hidden\r\n     */\r\n    public _reportDrawCall(numDrawCalls = 1) {\r\n        this._drawCalls.addCount(numDrawCalls, false);\r\n    }\r\n\r\n    /**\r\n     * Initializes a webVR display and starts listening to display change events\r\n     * The onVRDisplayChangedObservable will be notified upon these changes\r\n     * @returns The onVRDisplayChangedObservable\r\n     */\r\n    public initWebVR(): Observable<IDisplayChangedEventArgs> {\r\n        throw _WarnImport(\"WebVRCamera\");\r\n    }\r\n\r\n    /** @hidden */\r\n    public _prepareVRComponent() {\r\n        // Do nothing as the engine side effect will overload it\r\n    }\r\n\r\n    /**\r\n     * @param canvas\r\n     * @param document\r\n     * @hidden\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public _connectVREvents(canvas?: HTMLCanvasElement, document?: any) {\r\n        // Do nothing as the engine side effect will overload it\r\n    }\r\n\r\n    /** @hidden */\r\n    public _submitVRFrame() {\r\n        // Do nothing as the engine side effect will overload it\r\n    }\r\n    /**\r\n     * Call this function to leave webVR mode\r\n     * Will do nothing if webVR is not supported or if there is no webVR device\r\n     * @see https://doc.babylonjs.com/how_to/webvr_camera\r\n     */\r\n    public disableVR() {\r\n        // Do nothing as the engine side effect will overload it\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the system is in VR mode and is presenting\r\n     * @returns true if VR mode is engaged\r\n     */\r\n    public isVRPresenting() {\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _requestVRFrame() {\r\n        // Do nothing as the engine side effect will overload it\r\n    }\r\n\r\n    /**\r\n     * @param url\r\n     * @param offlineProvider\r\n     * @param useArrayBuffer\r\n     * @hidden\r\n     */\r\n    public _loadFileAsync(url: string, offlineProvider?: IOfflineProvider, useArrayBuffer?: boolean): Promise<string | ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            this._loadFile(\r\n                url,\r\n                (data) => {\r\n                    resolve(data);\r\n                },\r\n                undefined,\r\n                offlineProvider,\r\n                useArrayBuffer,\r\n                (request, exception) => {\r\n                    reject(exception);\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the source code of the vertex shader associated with a specific webGL program\r\n     * @param program defines the program to use\r\n     * @returns a string containing the source code of the vertex shader associated with the program\r\n     */\r\n    public getVertexShaderSource(program: WebGLProgram): Nullable<string> {\r\n        const shaders = this._gl.getAttachedShaders(program);\r\n\r\n        if (!shaders) {\r\n            return null;\r\n        }\r\n\r\n        return this._gl.getShaderSource(shaders[0]);\r\n    }\r\n\r\n    /**\r\n     * Gets the source code of the fragment shader associated with a specific webGL program\r\n     * @param program defines the program to use\r\n     * @returns a string containing the source code of the fragment shader associated with the program\r\n     */\r\n    public getFragmentShaderSource(program: WebGLProgram): Nullable<string> {\r\n        const shaders = this._gl.getAttachedShaders(program);\r\n\r\n        if (!shaders) {\r\n            return null;\r\n        }\r\n\r\n        return this._gl.getShaderSource(shaders[1]);\r\n    }\r\n\r\n    /**\r\n     * Sets a depth stencil texture from a render target to the according uniform.\r\n     * @param channel The texture channel\r\n     * @param uniform The uniform to set\r\n     * @param texture The render target texture containing the depth stencil texture to apply\r\n     * @param name The texture name\r\n     */\r\n    public setDepthStencilTexture(channel: number, uniform: Nullable<WebGLUniformLocation>, texture: Nullable<RenderTargetTexture>, name?: string): void {\r\n        if (channel === undefined) {\r\n            return;\r\n        }\r\n\r\n        if (uniform) {\r\n            this._boundUniforms[channel] = uniform;\r\n        }\r\n\r\n        if (!texture || !texture.depthStencilTexture) {\r\n            this._setTexture(channel, null, undefined, undefined, name);\r\n        } else {\r\n            this._setTexture(channel, texture, false, true, name);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a texture to the webGL context from a postprocess\r\n     * @param channel defines the channel to use\r\n     * @param postProcess defines the source postprocess\r\n     * @param name name of the channel\r\n     */\r\n    public setTextureFromPostProcess(channel: number, postProcess: Nullable<PostProcess>, name: string): void {\r\n        let postProcessInput = null;\r\n        if (postProcess) {\r\n            if (postProcess._textures.data[postProcess._currentRenderTextureInd]) {\r\n                postProcessInput = postProcess._textures.data[postProcess._currentRenderTextureInd];\r\n            } else if (postProcess._forcedOutputTexture) {\r\n                postProcessInput = postProcess._forcedOutputTexture;\r\n            }\r\n        }\r\n\r\n        this._bindTexture(channel, postProcessInput?.texture ?? null, name);\r\n    }\r\n\r\n    /**\r\n     * Binds the output of the passed in post process to the texture channel specified\r\n     * @param channel The channel the texture should be bound to\r\n     * @param postProcess The post process which's output should be bound\r\n     * @param name name of the channel\r\n     */\r\n    public setTextureFromPostProcessOutput(channel: number, postProcess: Nullable<PostProcess>, name: string): void {\r\n        this._bindTexture(channel, postProcess?._outputTexture?.texture ?? null, name);\r\n    }\r\n\r\n    protected _rebuildBuffers(): void {\r\n        // Index / Vertex\r\n        for (const scene of this.scenes) {\r\n            scene.resetCachedMaterial();\r\n            scene._rebuildGeometries();\r\n            scene._rebuildTextures();\r\n        }\r\n\r\n        for (const scene of this._virtualScenes) {\r\n            scene.resetCachedMaterial();\r\n            scene._rebuildGeometries();\r\n            scene._rebuildTextures();\r\n        }\r\n\r\n        super._rebuildBuffers();\r\n    }\r\n\r\n    /** @hidden */\r\n    public _renderFrame() {\r\n        for (let index = 0; index < this._activeRenderLoops.length; index++) {\r\n            const renderFunction = this._activeRenderLoops[index];\r\n\r\n            renderFunction();\r\n        }\r\n    }\r\n\r\n    public _renderLoop(): void {\r\n        if (!this._contextWasLost) {\r\n            let shouldRender = true;\r\n            if (!this.renderEvenInBackground && this._windowIsBackground) {\r\n                shouldRender = false;\r\n            }\r\n\r\n            if (shouldRender) {\r\n                // Start new frame\r\n                this.beginFrame();\r\n\r\n                // Child canvases\r\n                if (!this._renderViews()) {\r\n                    // Main frame\r\n                    this._renderFrame();\r\n                }\r\n\r\n                // Present\r\n                this.endFrame();\r\n            }\r\n        }\r\n\r\n        if (this._activeRenderLoops.length > 0) {\r\n            // Register new frame\r\n            if (this.customAnimationFrameRequester) {\r\n                this.customAnimationFrameRequester.requestID = this._queueNewFrame(\r\n                    this.customAnimationFrameRequester.renderFunction || this._boundRenderFunction,\r\n                    this.customAnimationFrameRequester\r\n                );\r\n                this._frameHandler = this.customAnimationFrameRequester.requestID;\r\n            } else if (this.isVRPresenting()) {\r\n                this._requestVRFrame();\r\n            } else {\r\n                this._frameHandler = this._queueNewFrame(this._boundRenderFunction, this.getHostWindow());\r\n            }\r\n        } else {\r\n            this._renderingQueueLaunched = false;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _renderViews() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Toggle full screen mode\r\n     * @param requestPointerLock defines if a pointer lock should be requested from the user\r\n     */\r\n    public switchFullscreen(requestPointerLock: boolean): void {\r\n        if (this.isFullscreen) {\r\n            this.exitFullscreen();\r\n        } else {\r\n            this.enterFullscreen(requestPointerLock);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enters full screen mode\r\n     * @param requestPointerLock defines if a pointer lock should be requested from the user\r\n     */\r\n    public enterFullscreen(requestPointerLock: boolean): void {\r\n        if (!this.isFullscreen) {\r\n            this._pointerLockRequested = requestPointerLock;\r\n            if (this._renderingCanvas) {\r\n                Engine._RequestFullscreen(this._renderingCanvas);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Exits full screen mode\r\n     */\r\n    public exitFullscreen(): void {\r\n        if (this.isFullscreen) {\r\n            Engine._ExitFullscreen();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enters Pointerlock mode\r\n     */\r\n    public enterPointerlock(): void {\r\n        if (this._renderingCanvas) {\r\n            Engine._RequestPointerlock(this._renderingCanvas);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Exits Pointerlock mode\r\n     */\r\n    public exitPointerlock(): void {\r\n        Engine._ExitPointerlock();\r\n    }\r\n\r\n    /**\r\n     * Begin a new frame\r\n     */\r\n    public beginFrame(): void {\r\n        this._measureFps();\r\n\r\n        this.onBeginFrameObservable.notifyObservers(this);\r\n        super.beginFrame();\r\n    }\r\n\r\n    /**\r\n     * End the current frame\r\n     */\r\n    public endFrame(): void {\r\n        super.endFrame();\r\n        this._submitVRFrame();\r\n\r\n        this.onEndFrameObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Resize the view according to the canvas' size\r\n     * @param forceSetSize true to force setting the sizes of the underlying canvas\r\n     */\r\n    public resize(forceSetSize = false): void {\r\n        // We're not resizing the size of the canvas while in VR mode & presenting\r\n        if (this.isVRPresenting()) {\r\n            return;\r\n        }\r\n\r\n        super.resize(forceSetSize);\r\n    }\r\n\r\n    /**\r\n     * Force a specific size of the canvas\r\n     * @param width defines the new canvas' width\r\n     * @param height defines the new canvas' height\r\n     * @param forceSetSize true to force setting the sizes of the underlying canvas\r\n     * @returns true if the size was changed\r\n     */\r\n    public setSize(width: number, height: number, forceSetSize = false): boolean {\r\n        if (!this._renderingCanvas) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.setSize(width, height, forceSetSize)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.scenes) {\r\n            for (let index = 0; index < this.scenes.length; index++) {\r\n                const scene = this.scenes[index];\r\n\r\n                for (let camIndex = 0; camIndex < scene.cameras.length; camIndex++) {\r\n                    const cam = scene.cameras[camIndex];\r\n\r\n                    cam._currentRenderId = 0;\r\n                }\r\n            }\r\n\r\n            if (this.onResizeObservable.hasObservers()) {\r\n                this.onResizeObservable.notifyObservers(this);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public _deletePipelineContext(pipelineContext: IPipelineContext): void {\r\n        const webGLPipelineContext = pipelineContext as WebGLPipelineContext;\r\n        if (webGLPipelineContext && webGLPipelineContext.program) {\r\n            if (webGLPipelineContext.transformFeedback) {\r\n                this.deleteTransformFeedback(webGLPipelineContext.transformFeedback);\r\n                webGLPipelineContext.transformFeedback = null;\r\n            }\r\n        }\r\n        super._deletePipelineContext(pipelineContext);\r\n    }\r\n\r\n    public createShaderProgram(\r\n        pipelineContext: IPipelineContext,\r\n        vertexCode: string,\r\n        fragmentCode: string,\r\n        defines: Nullable<string>,\r\n        context?: WebGLRenderingContext,\r\n        transformFeedbackVaryings: Nullable<string[]> = null\r\n    ): WebGLProgram {\r\n        context = context || this._gl;\r\n\r\n        this.onBeforeShaderCompilationObservable.notifyObservers(this);\r\n\r\n        const program = super.createShaderProgram(pipelineContext, vertexCode, fragmentCode, defines, context, transformFeedbackVaryings);\r\n        this.onAfterShaderCompilationObservable.notifyObservers(this);\r\n\r\n        return program;\r\n    }\r\n\r\n    protected _createShaderProgram(\r\n        pipelineContext: WebGLPipelineContext,\r\n        vertexShader: WebGLShader,\r\n        fragmentShader: WebGLShader,\r\n        context: WebGLRenderingContext,\r\n        transformFeedbackVaryings: Nullable<string[]> = null\r\n    ): WebGLProgram {\r\n        const shaderProgram = context.createProgram();\r\n        pipelineContext.program = shaderProgram;\r\n\r\n        if (!shaderProgram) {\r\n            throw new Error(\"Unable to create program\");\r\n        }\r\n\r\n        context.attachShader(shaderProgram, vertexShader);\r\n        context.attachShader(shaderProgram, fragmentShader);\r\n\r\n        if (this.webGLVersion > 1 && transformFeedbackVaryings) {\r\n            const transformFeedback = this.createTransformFeedback();\r\n\r\n            this.bindTransformFeedback(transformFeedback);\r\n            this.setTranformFeedbackVaryings(shaderProgram, transformFeedbackVaryings);\r\n            pipelineContext.transformFeedback = transformFeedback;\r\n        }\r\n\r\n        context.linkProgram(shaderProgram);\r\n\r\n        if (this.webGLVersion > 1 && transformFeedbackVaryings) {\r\n            this.bindTransformFeedback(null);\r\n        }\r\n\r\n        pipelineContext.context = context;\r\n        pipelineContext.vertexShader = vertexShader;\r\n        pipelineContext.fragmentShader = fragmentShader;\r\n\r\n        if (!pipelineContext.isParallelCompiled) {\r\n            this._finalizePipelineContext(pipelineContext);\r\n        }\r\n\r\n        return shaderProgram;\r\n    }\r\n\r\n    /**\r\n     * @param texture\r\n     * @hidden\r\n     */\r\n    public _releaseTexture(texture: InternalTexture): void {\r\n        super._releaseTexture(texture);\r\n    }\r\n\r\n    /**\r\n     * @param rtWrapper\r\n     * @hidden\r\n     */\r\n    public _releaseRenderTargetWrapper(rtWrapper: RenderTargetWrapper): void {\r\n        super._releaseRenderTargetWrapper(rtWrapper);\r\n\r\n        // Set output texture of post process to null if the framebuffer has been released/disposed\r\n        this.scenes.forEach((scene) => {\r\n            scene.postProcesses.forEach((postProcess) => {\r\n                if (postProcess._outputTexture === rtWrapper) {\r\n                    postProcess._outputTexture = null;\r\n                }\r\n            });\r\n            scene.cameras.forEach((camera) => {\r\n                camera._postProcesses.forEach((postProcess) => {\r\n                    if (postProcess) {\r\n                        if (postProcess._outputTexture === rtWrapper) {\r\n                            postProcess._outputTexture = null;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected static _RenderPassIdCounter = 0;\r\n    /**\r\n     * Gets or sets the current render pass id\r\n     */\r\n    public currentRenderPassId = Constants.RENDERPASS_MAIN;\r\n\r\n    private _renderPassNames: string[] = [\"main\"];\r\n    /**\r\n     * Gets the names of the render passes that are currently created\r\n     * @returns list of the render pass names\r\n     */\r\n    public getRenderPassNames(): string[] {\r\n        return this._renderPassNames;\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the current render pass\r\n     * @returns name of the current render pass\r\n     */\r\n    public getCurrentRenderPassName(): string {\r\n        return this._renderPassNames[this.currentRenderPassId];\r\n    }\r\n\r\n    /**\r\n     * Creates a render pass id\r\n     * @param name Name of the render pass (for debug purpose only)\r\n     * @returns the id of the new render pass\r\n     */\r\n    public createRenderPassId(name?: string) {\r\n        // Note: render pass id == 0 is always for the main render pass\r\n        const id = ++Engine._RenderPassIdCounter;\r\n        this._renderPassNames[id] = name ?? \"NONAME\";\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Releases a render pass id\r\n     * @param id id of the render pass to release\r\n     */\r\n    public releaseRenderPassId(id: number): void {\r\n        this._renderPassNames[id] = undefined as any;\r\n\r\n        for (let s = 0; s < this.scenes.length; ++s) {\r\n            const scene = this.scenes[s];\r\n            for (let m = 0; m < scene.meshes.length; ++m) {\r\n                const mesh = scene.meshes[m];\r\n                if (mesh.subMeshes) {\r\n                    for (let b = 0; b < mesh.subMeshes.length; ++b) {\r\n                        const subMesh = mesh.subMeshes[b];\r\n                        subMesh._removeDrawWrapper(id);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Rescales a texture\r\n     * @param source input texture\r\n     * @param destination destination texture\r\n     * @param scene scene to use to render the resize\r\n     * @param internalFormat format to use when resizing\r\n     * @param onComplete callback to be called when resize has completed\r\n     */\r\n    public _rescaleTexture(source: InternalTexture, destination: InternalTexture, scene: Nullable<any>, internalFormat: number, onComplete: () => void): void {\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MAG_FILTER, this._gl.LINEAR);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MIN_FILTER, this._gl.LINEAR);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_S, this._gl.CLAMP_TO_EDGE);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_T, this._gl.CLAMP_TO_EDGE);\r\n\r\n        const rtt = this.createRenderTargetTexture(\r\n            {\r\n                width: destination.width,\r\n                height: destination.height,\r\n            },\r\n            {\r\n                generateMipMaps: false,\r\n                type: Constants.TEXTURETYPE_UNSIGNED_INT,\r\n                samplingMode: Constants.TEXTURE_BILINEAR_SAMPLINGMODE,\r\n                generateDepthBuffer: false,\r\n                generateStencilBuffer: false,\r\n            }\r\n        );\r\n\r\n        if (!this._rescalePostProcess && Engine._RescalePostProcessFactory) {\r\n            this._rescalePostProcess = Engine._RescalePostProcessFactory(this);\r\n        }\r\n\r\n        this._rescalePostProcess.externalTextureSamplerBinding = true;\r\n        this._rescalePostProcess.getEffect().executeWhenCompiled(() => {\r\n            this._rescalePostProcess.onApply = function (effect) {\r\n                effect._bindTexture(\"textureSampler\", source);\r\n            };\r\n\r\n            let hostingScene: Scene = scene;\r\n\r\n            if (!hostingScene) {\r\n                hostingScene = this.scenes[this.scenes.length - 1];\r\n            }\r\n            hostingScene.postProcessManager.directRender([this._rescalePostProcess], rtt, true);\r\n\r\n            this._bindTextureDirectly(this._gl.TEXTURE_2D, destination, true);\r\n            this._gl.copyTexImage2D(this._gl.TEXTURE_2D, 0, internalFormat, 0, 0, destination.width, destination.height, 0);\r\n\r\n            this.unBindFramebuffer(rtt);\r\n            rtt.dispose();\r\n\r\n            if (onComplete) {\r\n                onComplete();\r\n            }\r\n        });\r\n    }\r\n\r\n    // FPS\r\n\r\n    /**\r\n     * Gets the current framerate\r\n     * @returns a number representing the framerate\r\n     */\r\n    public getFps(): number {\r\n        return this._fps;\r\n    }\r\n\r\n    /**\r\n     * Gets the time spent between current and previous frame\r\n     * @returns a number representing the delta time in ms\r\n     */\r\n    public getDeltaTime(): number {\r\n        return this._deltaTime;\r\n    }\r\n\r\n    private _measureFps(): void {\r\n        this._performanceMonitor.sampleFrame();\r\n        this._fps = this._performanceMonitor.averageFPS;\r\n        this._deltaTime = this._performanceMonitor.instantaneousFrameTime || 0;\r\n    }\r\n\r\n    /**\r\n     * Wraps an external web gl texture in a Babylon texture.\r\n     * @param texture defines the external texture\r\n     * @returns the babylon internal texture\r\n     */\r\n    wrapWebGLTexture(texture: WebGLTexture): InternalTexture {\r\n        const hardwareTexture = new WebGLHardwareTexture(texture, this._gl);\r\n        const internalTexture = new InternalTexture(this, InternalTextureSource.Unknown, true);\r\n        internalTexture._hardwareTexture = hardwareTexture;\r\n        internalTexture.isReady = true;\r\n        return internalTexture;\r\n    }\r\n\r\n    /**\r\n     * @param texture\r\n     * @param image\r\n     * @param faceIndex\r\n     * @param lod\r\n     * @hidden\r\n     */\r\n    public _uploadImageToTexture(texture: InternalTexture, image: HTMLImageElement | ImageBitmap, faceIndex: number = 0, lod: number = 0) {\r\n        const gl = this._gl;\r\n\r\n        const textureType = this._getWebGLTextureType(texture.type);\r\n        const format = this._getInternalFormat(texture.format);\r\n        const internalFormat = this._getRGBABufferInternalSizedFormat(texture.type, format);\r\n\r\n        const bindTarget = texture.isCube ? gl.TEXTURE_CUBE_MAP : gl.TEXTURE_2D;\r\n\r\n        this._bindTextureDirectly(bindTarget, texture, true);\r\n        this._unpackFlipY(texture.invertY);\r\n\r\n        let target = gl.TEXTURE_2D;\r\n        if (texture.isCube) {\r\n            target = gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex;\r\n        }\r\n\r\n        gl.texImage2D(target, lod, internalFormat, format, textureType, image);\r\n        this._bindTextureDirectly(bindTarget, null, true);\r\n    }\r\n\r\n    /**\r\n     * Updates a depth texture Comparison Mode and Function.\r\n     * If the comparison Function is equal to 0, the mode will be set to none.\r\n     * Otherwise, this only works in webgl 2 and requires a shadow sampler in the shader.\r\n     * @param texture The texture to set the comparison function for\r\n     * @param comparisonFunction The comparison function to set, 0 if no comparison required\r\n     */\r\n    public updateTextureComparisonFunction(texture: InternalTexture, comparisonFunction: number): void {\r\n        if (this.webGLVersion === 1) {\r\n            Logger.Error(\"WebGL 1 does not support texture comparison.\");\r\n            return;\r\n        }\r\n\r\n        const gl = this._gl;\r\n\r\n        if (texture.isCube) {\r\n            this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, texture, true);\r\n\r\n            if (comparisonFunction === 0) {\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_FUNC, Constants.LEQUAL);\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_MODE, gl.NONE);\r\n            } else {\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_FUNC, comparisonFunction);\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\r\n            }\r\n\r\n            this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, null);\r\n        } else {\r\n            this._bindTextureDirectly(this._gl.TEXTURE_2D, texture, true);\r\n\r\n            if (comparisonFunction === 0) {\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, Constants.LEQUAL);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.NONE);\r\n            } else {\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, comparisonFunction);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\r\n            }\r\n\r\n            this._bindTextureDirectly(this._gl.TEXTURE_2D, null);\r\n        }\r\n\r\n        texture._comparisonFunction = comparisonFunction;\r\n    }\r\n\r\n    /**\r\n     * Creates a webGL buffer to use with instantiation\r\n     * @param capacity defines the size of the buffer\r\n     * @returns the webGL buffer\r\n     */\r\n    public createInstancesBuffer(capacity: number): DataBuffer {\r\n        const buffer = this._gl.createBuffer();\r\n\r\n        if (!buffer) {\r\n            throw new Error(\"Unable to create instance buffer\");\r\n        }\r\n\r\n        const result = new WebGLDataBuffer(buffer);\r\n        result.capacity = capacity;\r\n\r\n        this.bindArrayBuffer(result);\r\n        this._gl.bufferData(this._gl.ARRAY_BUFFER, capacity, this._gl.DYNAMIC_DRAW);\r\n\r\n        result.references = 1;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Delete a webGL buffer used with instantiation\r\n     * @param buffer defines the webGL buffer to delete\r\n     */\r\n    public deleteInstancesBuffer(buffer: WebGLBuffer): void {\r\n        this._gl.deleteBuffer(buffer);\r\n    }\r\n\r\n    private _clientWaitAsync(sync: WebGLSync, flags = 0, intervalms = 10): Promise<void> {\r\n        const gl = <WebGL2RenderingContext>(this._gl as any);\r\n        return new Promise((resolve, reject) => {\r\n            const check = () => {\r\n                const res = gl.clientWaitSync(sync, flags, 0);\r\n                if (res == gl.WAIT_FAILED) {\r\n                    reject();\r\n                    return;\r\n                }\r\n                if (res == gl.TIMEOUT_EXPIRED) {\r\n                    setTimeout(check, intervalms);\r\n                    return;\r\n                }\r\n                resolve();\r\n            };\r\n\r\n            check();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param x\r\n     * @param y\r\n     * @param w\r\n     * @param h\r\n     * @param format\r\n     * @param type\r\n     * @param outputBuffer\r\n     * @hidden\r\n     */\r\n    public _readPixelsAsync(x: number, y: number, w: number, h: number, format: number, type: number, outputBuffer: ArrayBufferView) {\r\n        if (this._webGLVersion < 2) {\r\n            throw new Error(\"_readPixelsAsync only work on WebGL2+\");\r\n        }\r\n\r\n        const gl = <WebGL2RenderingContext>(this._gl as any);\r\n        const buf = gl.createBuffer();\r\n        gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf);\r\n        gl.bufferData(gl.PIXEL_PACK_BUFFER, outputBuffer.byteLength, gl.STREAM_READ);\r\n        gl.readPixels(x, y, w, h, format, type, 0);\r\n        gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\r\n\r\n        const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\r\n        if (!sync) {\r\n            return null;\r\n        }\r\n\r\n        gl.flush();\r\n\r\n        return this._clientWaitAsync(sync, 0, 10).then(() => {\r\n            gl.deleteSync(sync);\r\n\r\n            gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf);\r\n            gl.getBufferSubData(gl.PIXEL_PACK_BUFFER, 0, outputBuffer);\r\n            gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\r\n            gl.deleteBuffer(buf);\r\n\r\n            return outputBuffer;\r\n        });\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.hideLoadingUI();\r\n\r\n        this.onNewSceneAddedObservable.clear();\r\n\r\n        // Release postProcesses\r\n        while (this.postProcesses.length) {\r\n            this.postProcesses[0].dispose();\r\n        }\r\n\r\n        // Rescale PP\r\n        if (this._rescalePostProcess) {\r\n            this._rescalePostProcess.dispose();\r\n        }\r\n\r\n        // Release scenes\r\n        while (this.scenes.length) {\r\n            this.scenes[0].dispose();\r\n        }\r\n\r\n        while (this._virtualScenes.length) {\r\n            this._virtualScenes[0].dispose();\r\n        }\r\n\r\n        // Release audio engine\r\n        if (Engine.Instances.length === 1 && Engine.audioEngine) {\r\n            Engine.audioEngine.dispose();\r\n            Engine.audioEngine = null;\r\n        }\r\n\r\n        //WebVR\r\n        this.disableVR();\r\n\r\n        // Events\r\n        if (IsWindowObjectExist()) {\r\n            window.removeEventListener(\"blur\", this._onBlur);\r\n            window.removeEventListener(\"focus\", this._onFocus);\r\n\r\n            if (this._renderingCanvas) {\r\n                this._renderingCanvas.removeEventListener(\"focus\", this._onCanvasFocus);\r\n                this._renderingCanvas.removeEventListener(\"blur\", this._onCanvasBlur);\r\n                this._renderingCanvas.removeEventListener(\"pointerout\", this._onCanvasPointerOut);\r\n            }\r\n\r\n            if (IsDocumentAvailable()) {\r\n                document.removeEventListener(\"fullscreenchange\", this._onFullscreenChange);\r\n                document.removeEventListener(\"mozfullscreenchange\", this._onFullscreenChange);\r\n                document.removeEventListener(\"webkitfullscreenchange\", this._onFullscreenChange);\r\n                document.removeEventListener(\"msfullscreenchange\", this._onFullscreenChange);\r\n                document.removeEventListener(\"pointerlockchange\", this._onPointerLockChange);\r\n                document.removeEventListener(\"mspointerlockchange\", this._onPointerLockChange);\r\n                document.removeEventListener(\"mozpointerlockchange\", this._onPointerLockChange);\r\n                document.removeEventListener(\"webkitpointerlockchange\", this._onPointerLockChange);\r\n            }\r\n        }\r\n\r\n        super.dispose();\r\n\r\n        // Remove from Instances\r\n        const index = Engine.Instances.indexOf(this);\r\n\r\n        if (index >= 0) {\r\n            Engine.Instances.splice(index, 1);\r\n        }\r\n\r\n        // Observables\r\n        this.onResizeObservable.clear();\r\n        this.onCanvasBlurObservable.clear();\r\n        this.onCanvasFocusObservable.clear();\r\n        this.onCanvasPointerOutObservable.clear();\r\n        this.onBeginFrameObservable.clear();\r\n        this.onEndFrameObservable.clear();\r\n    }\r\n\r\n    private _disableTouchAction(): void {\r\n        if (!this._renderingCanvas || !this._renderingCanvas.setAttribute) {\r\n            return;\r\n        }\r\n\r\n        this._renderingCanvas.setAttribute(\"touch-action\", \"none\");\r\n        this._renderingCanvas.style.touchAction = \"none\";\r\n        (this._renderingCanvas.style as any).msTouchAction = \"none\";\r\n    }\r\n\r\n    // Loading screen\r\n\r\n    /**\r\n     * Display the loading screen\r\n     * @see https://doc.babylonjs.com/how_to/creating_a_custom_loading_screen\r\n     */\r\n    public displayLoadingUI(): void {\r\n        if (!IsWindowObjectExist()) {\r\n            return;\r\n        }\r\n        const loadingScreen = this.loadingScreen;\r\n        if (loadingScreen) {\r\n            loadingScreen.displayLoadingUI();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hide the loading screen\r\n     * @see https://doc.babylonjs.com/how_to/creating_a_custom_loading_screen\r\n     */\r\n    public hideLoadingUI(): void {\r\n        if (!IsWindowObjectExist()) {\r\n            return;\r\n        }\r\n        const loadingScreen = this._loadingScreen;\r\n        if (loadingScreen) {\r\n            loadingScreen.hideLoadingUI();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current loading screen object\r\n     * @see https://doc.babylonjs.com/how_to/creating_a_custom_loading_screen\r\n     */\r\n    public get loadingScreen(): ILoadingScreen {\r\n        if (!this._loadingScreen && this._renderingCanvas) {\r\n            this._loadingScreen = Engine.DefaultLoadingScreenFactory(this._renderingCanvas);\r\n        }\r\n        return this._loadingScreen;\r\n    }\r\n\r\n    /**\r\n     * Sets the current loading screen object\r\n     * @see https://doc.babylonjs.com/how_to/creating_a_custom_loading_screen\r\n     */\r\n    public set loadingScreen(loadingScreen: ILoadingScreen) {\r\n        this._loadingScreen = loadingScreen;\r\n    }\r\n\r\n    /**\r\n     * Sets the current loading screen text\r\n     * @see https://doc.babylonjs.com/how_to/creating_a_custom_loading_screen\r\n     */\r\n    public set loadingUIText(text: string) {\r\n        this.loadingScreen.loadingUIText = text;\r\n    }\r\n\r\n    /**\r\n     * Sets the current loading screen background color\r\n     * @see https://doc.babylonjs.com/how_to/creating_a_custom_loading_screen\r\n     */\r\n    public set loadingUIBackgroundColor(color: string) {\r\n        this.loadingScreen.loadingUIBackgroundColor = color;\r\n    }\r\n\r\n    /**\r\n     * creates and returns a new video element\r\n     * @param constraints video constraints\r\n     * @returns video element\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public createVideoElement(constraints: MediaTrackConstraints): any {\r\n        return document.createElement(\"video\");\r\n    }\r\n\r\n    /** Pointerlock and fullscreen */\r\n\r\n    /**\r\n     * Ask the browser to promote the current element to pointerlock mode\r\n     * @param element defines the DOM element to promote\r\n     */\r\n    static _RequestPointerlock(element: HTMLElement): void {\r\n        element.requestPointerLock =\r\n            element.requestPointerLock || (<any>element).msRequestPointerLock || (<any>element).mozRequestPointerLock || (<any>element).webkitRequestPointerLock;\r\n        if (element.requestPointerLock) {\r\n            element.requestPointerLock();\r\n            element.focus();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Asks the browser to exit pointerlock mode\r\n     */\r\n    static _ExitPointerlock(): void {\r\n        const anyDoc = document as any;\r\n        document.exitPointerLock = document.exitPointerLock || anyDoc.msExitPointerLock || anyDoc.mozExitPointerLock || anyDoc.webkitExitPointerLock;\r\n\r\n        if (document.exitPointerLock) {\r\n            document.exitPointerLock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ask the browser to promote the current element to fullscreen rendering mode\r\n     * @param element defines the DOM element to promote\r\n     */\r\n    static _RequestFullscreen(element: HTMLElement): void {\r\n        const requestFunction = element.requestFullscreen || (<any>element).msRequestFullscreen || (<any>element).webkitRequestFullscreen || (<any>element).mozRequestFullScreen;\r\n        if (!requestFunction) {\r\n            return;\r\n        }\r\n        requestFunction.call(element);\r\n    }\r\n\r\n    /**\r\n     * Asks the browser to exit fullscreen mode\r\n     */\r\n    static _ExitFullscreen(): void {\r\n        const anyDoc = document as any;\r\n\r\n        if (document.exitFullscreen) {\r\n            document.exitFullscreen();\r\n        } else if (anyDoc.mozCancelFullScreen) {\r\n            anyDoc.mozCancelFullScreen();\r\n        } else if (anyDoc.webkitCancelFullScreen) {\r\n            anyDoc.webkitCancelFullScreen();\r\n        } else if (anyDoc.msCancelFullScreen) {\r\n            anyDoc.msCancelFullScreen();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get Font size information\r\n     * @param font font name\r\n     * @return an object containing ascent, height and descent\r\n     */\r\n    public getFontOffset(font: string): { ascent: number; height: number; descent: number } {\r\n        const text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.setAttribute(\"style\", `font: ${font} !important`);\r\n\r\n        const block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        const div = document.createElement(\"div\");\r\n        div.style.whiteSpace = \"nowrap\";\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        let fontAscent = 0;\r\n        let fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        return { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}