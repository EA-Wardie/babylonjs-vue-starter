{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport { __extends } from \"tslib\";\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockConnectionPointMode } from \"../../Enums/nodeMaterialBlockConnectionPointMode.js\";\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues.js\";\nimport { Matrix, Vector2, Vector3, Vector4 } from \"../../../../Maths/math.vector.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { GetClass, RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { Color3, Color4, TmpColors } from \"../../../../Maths/math.js\";\nimport { AnimatedInputBlockTypes } from \"./animatedInputBlockTypes.js\";\nimport { Observable } from \"../../../../Misc/observable.js\";\nvar remapAttributeName = {\n  position2d: \"position\",\n  particle_uv: \"vUV\",\n  particle_color: \"vColor\",\n  particle_texturemask: \"textureMask\",\n  particle_positionw: \"vPositionW\"\n};\nvar attributeInFragmentOnly = {\n  particle_uv: true,\n  particle_color: true,\n  particle_texturemask: true,\n  particle_positionw: true\n};\nvar attributeAsUniform = {\n  particle_texturemask: true\n};\n/**\n * Block used to expose an input value\n */\n\nvar InputBlock =\n/** @class */\nfunction (_super) {\n  __extends(InputBlock, _super);\n  /**\n   * Creates a new InputBlock\n   * @param name defines the block name\n   * @param target defines the target of that block (Vertex by default)\n   * @param type defines the type of the input (can be set to NodeMaterialBlockConnectionPointTypes.AutoDetect)\n   */\n\n\n  function InputBlock(name, target, type) {\n    if (target === void 0) {\n      target = NodeMaterialBlockTargets.Vertex;\n    }\n\n    if (type === void 0) {\n      type = NodeMaterialBlockConnectionPointTypes.AutoDetect;\n    }\n\n    var _this = _super.call(this, name, target, false, true) || this;\n\n    _this._mode = NodeMaterialBlockConnectionPointMode.Undefined;\n    _this._animationType = AnimatedInputBlockTypes.None;\n    /** Gets or set a value used to limit the range of float values */\n\n    _this.min = 0;\n    /** Gets or set a value used to limit the range of float values */\n\n    _this.max = 0;\n    /** Gets or set a value indicating that this input can only get 0 and 1 values */\n\n    _this.isBoolean = false;\n    /** Gets or sets a value used by the Node Material editor to determine how to configure the current value if it is a matrix */\n\n    _this.matrixMode = 0;\n    /** @hidden */\n\n    _this._systemValue = null;\n    /** Gets or sets a boolean indicating that the value of this input will not change after a build */\n\n    _this.isConstant = false;\n    /** Gets or sets the group to use to display this block in the Inspector */\n\n    _this.groupInInspector = \"\";\n    /** Gets an observable raised when the value is changed */\n\n    _this.onValueChangedObservable = new Observable();\n    /** Gets or sets a boolean indicating if content needs to be converted to gamma space (for color3/4 only) */\n\n    _this.convertToGammaSpace = false;\n    /** Gets or sets a boolean indicating if content needs to be converted to linear space (for color3/4 only) */\n\n    _this.convertToLinearSpace = false;\n    _this._type = type;\n\n    _this.setDefaultValue();\n\n    _this.registerOutput(\"output\", type);\n\n    return _this;\n  }\n\n  Object.defineProperty(InputBlock.prototype, \"type\", {\n    /**\n     * Gets or sets the connection point type (default is float)\n     */\n    get: function get() {\n      if (this._type === NodeMaterialBlockConnectionPointTypes.AutoDetect) {\n        if (this.isUniform && this.value != null) {\n          if (!isNaN(this.value)) {\n            this._type = NodeMaterialBlockConnectionPointTypes.Float;\n            return this._type;\n          }\n\n          switch (this.value.getClassName()) {\n            case \"Vector2\":\n              this._type = NodeMaterialBlockConnectionPointTypes.Vector2;\n              return this._type;\n\n            case \"Vector3\":\n              this._type = NodeMaterialBlockConnectionPointTypes.Vector3;\n              return this._type;\n\n            case \"Vector4\":\n              this._type = NodeMaterialBlockConnectionPointTypes.Vector4;\n              return this._type;\n\n            case \"Color3\":\n              this._type = NodeMaterialBlockConnectionPointTypes.Color3;\n              return this._type;\n\n            case \"Color4\":\n              this._type = NodeMaterialBlockConnectionPointTypes.Color4;\n              return this._type;\n\n            case \"Matrix\":\n              this._type = NodeMaterialBlockConnectionPointTypes.Matrix;\n              return this._type;\n          }\n        }\n\n        if (this.isAttribute) {\n          switch (this.name) {\n            case \"position\":\n            case \"normal\":\n            case \"tangent\":\n            case \"particle_positionw\":\n              this._type = NodeMaterialBlockConnectionPointTypes.Vector3;\n              return this._type;\n\n            case \"uv\":\n            case \"uv2\":\n            case \"uv3\":\n            case \"uv4\":\n            case \"uv5\":\n            case \"uv6\":\n            case \"position2d\":\n            case \"particle_uv\":\n              this._type = NodeMaterialBlockConnectionPointTypes.Vector2;\n              return this._type;\n\n            case \"matricesIndices\":\n            case \"matricesWeights\":\n            case \"world0\":\n            case \"world1\":\n            case \"world2\":\n            case \"world3\":\n              this._type = NodeMaterialBlockConnectionPointTypes.Vector4;\n              return this._type;\n\n            case \"color\":\n            case \"particle_color\":\n            case \"particle_texturemask\":\n              this._type = NodeMaterialBlockConnectionPointTypes.Color4;\n              return this._type;\n          }\n        }\n\n        if (this.isSystemValue) {\n          switch (this._systemValue) {\n            case NodeMaterialSystemValues.World:\n            case NodeMaterialSystemValues.WorldView:\n            case NodeMaterialSystemValues.WorldViewProjection:\n            case NodeMaterialSystemValues.View:\n            case NodeMaterialSystemValues.ViewProjection:\n            case NodeMaterialSystemValues.Projection:\n              this._type = NodeMaterialBlockConnectionPointTypes.Matrix;\n              return this._type;\n\n            case NodeMaterialSystemValues.CameraPosition:\n              this._type = NodeMaterialBlockConnectionPointTypes.Vector3;\n              return this._type;\n\n            case NodeMaterialSystemValues.FogColor:\n              this._type = NodeMaterialBlockConnectionPointTypes.Color3;\n              return this._type;\n\n            case NodeMaterialSystemValues.DeltaTime:\n            case NodeMaterialSystemValues.MaterialAlpha:\n              this._type = NodeMaterialBlockConnectionPointTypes.Float;\n              return this._type;\n\n            case NodeMaterialSystemValues.CameraParameters:\n              this._type = NodeMaterialBlockConnectionPointTypes.Vector4;\n              return this._type;\n          }\n        }\n      }\n\n      return this._type;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Validates if a name is a reserve word.\n   * @param newName the new name to be given to the node.\n   * @returns false if the name is a reserve word, else true.\n   */\n\n  InputBlock.prototype.validateBlockName = function (newName) {\n    if (!this.isAttribute) {\n      return _super.prototype.validateBlockName.call(this, newName);\n    }\n\n    return true;\n  };\n\n  Object.defineProperty(InputBlock.prototype, \"output\", {\n    /**\n     * Gets the output component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Set the source of this connection point to a vertex attribute\n   * @param attributeName defines the attribute name (position, uv, normal, etc...). If not specified it will take the connection point name\n   * @returns the current connection point\n   */\n\n  InputBlock.prototype.setAsAttribute = function (attributeName) {\n    this._mode = NodeMaterialBlockConnectionPointMode.Attribute;\n\n    if (attributeName) {\n      this.name = attributeName;\n    }\n\n    return this;\n  };\n  /**\n   * Set the source of this connection point to a system value\n   * @param value define the system value to use (world, view, etc...) or null to switch to manual value\n   * @returns the current connection point\n   */\n\n\n  InputBlock.prototype.setAsSystemValue = function (value) {\n    this.systemValue = value;\n    return this;\n  };\n\n  Object.defineProperty(InputBlock.prototype, \"value\", {\n    /**\n     * Gets or sets the value of that point.\n     * Please note that this value will be ignored if valueCallback is defined\n     */\n    get: function get() {\n      return this._storedValue;\n    },\n    set: function set(value) {\n      if (this.type === NodeMaterialBlockConnectionPointTypes.Float) {\n        if (this.isBoolean) {\n          value = value ? 1 : 0;\n        } else if (this.min !== this.max) {\n          value = Math.max(this.min, value);\n          value = Math.min(this.max, value);\n        }\n      }\n\n      this._storedValue = value;\n      this._mode = NodeMaterialBlockConnectionPointMode.Uniform;\n      this.onValueChangedObservable.notifyObservers(this);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InputBlock.prototype, \"valueCallback\", {\n    /**\n     * Gets or sets a callback used to get the value of that point.\n     * Please note that setting this value will force the connection point to ignore the value property\n     */\n    get: function get() {\n      return this._valueCallback;\n    },\n    set: function set(value) {\n      this._valueCallback = value;\n      this._mode = NodeMaterialBlockConnectionPointMode.Uniform;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InputBlock.prototype, \"associatedVariableName\", {\n    /**\n     * Gets or sets the associated variable name in the shader\n     */\n    get: function get() {\n      return this._associatedVariableName;\n    },\n    set: function set(value) {\n      this._associatedVariableName = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InputBlock.prototype, \"animationType\", {\n    /** Gets or sets the type of animation applied to the input */\n    get: function get() {\n      return this._animationType;\n    },\n    set: function set(value) {\n      this._animationType = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InputBlock.prototype, \"isUndefined\", {\n    /**\n     * Gets a boolean indicating that this connection point not defined yet\n     */\n    get: function get() {\n      return this._mode === NodeMaterialBlockConnectionPointMode.Undefined;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InputBlock.prototype, \"isUniform\", {\n    /**\n     * Gets or sets a boolean indicating that this connection point is coming from an uniform.\n     * In this case the connection point name must be the name of the uniform to use.\n     * Can only be set on inputs\n     */\n    get: function get() {\n      return this._mode === NodeMaterialBlockConnectionPointMode.Uniform;\n    },\n    set: function set(value) {\n      this._mode = value ? NodeMaterialBlockConnectionPointMode.Uniform : NodeMaterialBlockConnectionPointMode.Undefined;\n      this.associatedVariableName = \"\";\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InputBlock.prototype, \"isAttribute\", {\n    /**\n     * Gets or sets a boolean indicating that this connection point is coming from an attribute.\n     * In this case the connection point name must be the name of the attribute to use\n     * Can only be set on inputs\n     */\n    get: function get() {\n      return this._mode === NodeMaterialBlockConnectionPointMode.Attribute;\n    },\n    set: function set(value) {\n      this._mode = value ? NodeMaterialBlockConnectionPointMode.Attribute : NodeMaterialBlockConnectionPointMode.Undefined;\n      this.associatedVariableName = \"\";\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InputBlock.prototype, \"isVarying\", {\n    /**\n     * Gets or sets a boolean indicating that this connection point is generating a varying variable.\n     * Can only be set on exit points\n     */\n    get: function get() {\n      return this._mode === NodeMaterialBlockConnectionPointMode.Varying;\n    },\n    set: function set(value) {\n      this._mode = value ? NodeMaterialBlockConnectionPointMode.Varying : NodeMaterialBlockConnectionPointMode.Undefined;\n      this.associatedVariableName = \"\";\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InputBlock.prototype, \"isSystemValue\", {\n    /**\n     * Gets a boolean indicating that the current connection point is a system value\n     */\n    get: function get() {\n      return this._systemValue != null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InputBlock.prototype, \"systemValue\", {\n    /**\n     * Gets or sets the current well known value or null if not defined as a system value\n     */\n    get: function get() {\n      return this._systemValue;\n    },\n    set: function set(value) {\n      this._mode = NodeMaterialBlockConnectionPointMode.Uniform;\n      this.associatedVariableName = \"\";\n      this._systemValue = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n  InputBlock.prototype.getClassName = function () {\n    return \"InputBlock\";\n  };\n  /**\n   * Animate the input if animationType !== None\n   * @param scene defines the rendering scene\n   */\n\n\n  InputBlock.prototype.animate = function (scene) {\n    switch (this._animationType) {\n      case AnimatedInputBlockTypes.Time:\n        {\n          if (this.type === NodeMaterialBlockConnectionPointTypes.Float) {\n            this.value += scene.getAnimationRatio() * 0.01;\n          }\n\n          break;\n        }\n    }\n  };\n\n  InputBlock.prototype._emitDefine = function (define) {\n    if (define[0] === \"!\") {\n      return \"#ifndef \".concat(define.substring(1), \"\\r\\n\");\n    }\n\n    return \"#ifdef \".concat(define, \"\\r\\n\");\n  };\n\n  InputBlock.prototype.initialize = function () {\n    this.associatedVariableName = \"\";\n  };\n  /**\n   * Set the input block to its default value (based on its type)\n   */\n\n\n  InputBlock.prototype.setDefaultValue = function () {\n    switch (this.type) {\n      case NodeMaterialBlockConnectionPointTypes.Float:\n        this.value = 0;\n        break;\n\n      case NodeMaterialBlockConnectionPointTypes.Vector2:\n        this.value = Vector2.Zero();\n        break;\n\n      case NodeMaterialBlockConnectionPointTypes.Vector3:\n        this.value = Vector3.Zero();\n        break;\n\n      case NodeMaterialBlockConnectionPointTypes.Vector4:\n        this.value = Vector4.Zero();\n        break;\n\n      case NodeMaterialBlockConnectionPointTypes.Color3:\n        this.value = Color3.White();\n        break;\n\n      case NodeMaterialBlockConnectionPointTypes.Color4:\n        this.value = new Color4(1, 1, 1, 1);\n        break;\n\n      case NodeMaterialBlockConnectionPointTypes.Matrix:\n        this.value = Matrix.Identity();\n        break;\n    }\n  };\n\n  InputBlock.prototype._emitConstant = function (state) {\n    switch (this.type) {\n      case NodeMaterialBlockConnectionPointTypes.Float:\n        return \"\".concat(state._emitFloat(this.value));\n\n      case NodeMaterialBlockConnectionPointTypes.Vector2:\n        return \"vec2(\".concat(this.value.x, \", \").concat(this.value.y, \")\");\n\n      case NodeMaterialBlockConnectionPointTypes.Vector3:\n        return \"vec3(\".concat(this.value.x, \", \").concat(this.value.y, \", \").concat(this.value.z, \")\");\n\n      case NodeMaterialBlockConnectionPointTypes.Vector4:\n        return \"vec4(\".concat(this.value.x, \", \").concat(this.value.y, \", \").concat(this.value.z, \", \").concat(this.value.w, \")\");\n\n      case NodeMaterialBlockConnectionPointTypes.Color3:\n        TmpColors.Color3[0].set(this.value.r, this.value.g, this.value.b);\n\n        if (this.convertToGammaSpace) {\n          TmpColors.Color3[0].toGammaSpaceToRef(TmpColors.Color3[0]);\n        }\n\n        if (this.convertToLinearSpace) {\n          TmpColors.Color3[0].toLinearSpaceToRef(TmpColors.Color3[0]);\n        }\n\n        return \"vec3(\".concat(TmpColors.Color3[0].r, \", \").concat(TmpColors.Color3[0].g, \", \").concat(TmpColors.Color3[0].b, \")\");\n\n      case NodeMaterialBlockConnectionPointTypes.Color4:\n        TmpColors.Color4[0].set(this.value.r, this.value.g, this.value.b, this.value.a);\n\n        if (this.convertToGammaSpace) {\n          TmpColors.Color4[0].toGammaSpaceToRef(TmpColors.Color4[0]);\n        }\n\n        if (this.convertToLinearSpace) {\n          TmpColors.Color4[0].toLinearSpaceToRef(TmpColors.Color4[0]);\n        }\n\n        return \"vec4(\".concat(TmpColors.Color4[0].r, \", \").concat(TmpColors.Color4[0].g, \", \").concat(TmpColors.Color4[0].b, \", \").concat(TmpColors.Color4[0].a, \")\");\n    }\n\n    return \"\";\n  };\n\n  Object.defineProperty(InputBlock.prototype, \"_noContextSwitch\", {\n    /** @hidden */\n    get: function get() {\n      return attributeInFragmentOnly[this.name];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  InputBlock.prototype._emit = function (state, define) {\n    var _a; // Uniforms\n\n\n    if (this.isUniform) {\n      if (!this.associatedVariableName) {\n        this.associatedVariableName = state._getFreeVariableName(\"u_\" + this.name);\n      }\n\n      if (this.isConstant) {\n        if (state.constants.indexOf(this.associatedVariableName) !== -1) {\n          return;\n        }\n\n        state.constants.push(this.associatedVariableName);\n        state._constantDeclaration += this._declareOutput(this.output, state) + \" = \".concat(this._emitConstant(state), \";\\r\\n\");\n        return;\n      }\n\n      if (state.uniforms.indexOf(this.associatedVariableName) !== -1) {\n        return;\n      }\n\n      state.uniforms.push(this.associatedVariableName);\n\n      if (define) {\n        state._uniformDeclaration += this._emitDefine(define);\n      }\n\n      state._uniformDeclaration += \"uniform \".concat(state._getGLType(this.type), \" \").concat(this.associatedVariableName, \";\\r\\n\");\n\n      if (define) {\n        state._uniformDeclaration += \"#endif\\r\\n\";\n      } // well known\n\n\n      var hints = state.sharedData.hints;\n\n      if (this._systemValue !== null && this._systemValue !== undefined) {\n        switch (this._systemValue) {\n          case NodeMaterialSystemValues.WorldView:\n            hints.needWorldViewMatrix = true;\n            break;\n\n          case NodeMaterialSystemValues.WorldViewProjection:\n            hints.needWorldViewProjectionMatrix = true;\n            break;\n        }\n      } else {\n        if (this._animationType !== AnimatedInputBlockTypes.None) {\n          state.sharedData.animatedInputs.push(this);\n        }\n      }\n\n      return;\n    } // Attribute\n\n\n    if (this.isAttribute) {\n      this.associatedVariableName = (_a = remapAttributeName[this.name]) !== null && _a !== void 0 ? _a : this.name;\n\n      if (this.target === NodeMaterialBlockTargets.Vertex && state._vertexState) {\n        // Attribute for fragment need to be carried over by varyings\n        if (attributeInFragmentOnly[this.name]) {\n          if (attributeAsUniform[this.name]) {\n            state._emitUniformFromString(this.associatedVariableName, state._getGLType(this.type), define);\n          } else {\n            state._emitVaryingFromString(this.associatedVariableName, state._getGLType(this.type), define);\n          }\n        } else {\n          this._emit(state._vertexState, define);\n        }\n\n        return;\n      }\n\n      if (state.attributes.indexOf(this.associatedVariableName) !== -1) {\n        return;\n      }\n\n      state.attributes.push(this.associatedVariableName);\n\n      if (attributeInFragmentOnly[this.name]) {\n        if (attributeAsUniform[this.name]) {\n          state._emitUniformFromString(this.associatedVariableName, state._getGLType(this.type), define);\n        } else {\n          state._emitVaryingFromString(this.associatedVariableName, state._getGLType(this.type), define);\n        }\n      } else {\n        if (define) {\n          state._attributeDeclaration += this._emitDefine(define);\n        }\n\n        state._attributeDeclaration += \"attribute \".concat(state._getGLType(this.type), \" \").concat(this.associatedVariableName, \";\\r\\n\");\n\n        if (define) {\n          state._attributeDeclaration += \"#endif\\r\\n\";\n        }\n      }\n    }\n  };\n  /**\n   * @param effect\n   * @param world\n   * @param worldView\n   * @param worldViewProjection\n   * @hidden\n   */\n\n\n  InputBlock.prototype._transmitWorld = function (effect, world, worldView, worldViewProjection) {\n    if (!this._systemValue) {\n      return;\n    }\n\n    var variableName = this.associatedVariableName;\n\n    switch (this._systemValue) {\n      case NodeMaterialSystemValues.World:\n        effect.setMatrix(variableName, world);\n        break;\n\n      case NodeMaterialSystemValues.WorldView:\n        effect.setMatrix(variableName, worldView);\n        break;\n\n      case NodeMaterialSystemValues.WorldViewProjection:\n        effect.setMatrix(variableName, worldViewProjection);\n        break;\n    }\n  };\n  /**\n   * @param effect\n   * @param scene\n   * @param material\n   * @hidden\n   */\n\n\n  InputBlock.prototype._transmit = function (effect, scene, material) {\n    if (this.isAttribute) {\n      return;\n    }\n\n    var variableName = this.associatedVariableName;\n\n    if (this._systemValue) {\n      switch (this._systemValue) {\n        case NodeMaterialSystemValues.World:\n        case NodeMaterialSystemValues.WorldView:\n        case NodeMaterialSystemValues.WorldViewProjection:\n          return;\n\n        case NodeMaterialSystemValues.View:\n          effect.setMatrix(variableName, scene.getViewMatrix());\n          break;\n\n        case NodeMaterialSystemValues.Projection:\n          effect.setMatrix(variableName, scene.getProjectionMatrix());\n          break;\n\n        case NodeMaterialSystemValues.ViewProjection:\n          effect.setMatrix(variableName, scene.getTransformMatrix());\n          break;\n\n        case NodeMaterialSystemValues.CameraPosition:\n          scene.bindEyePosition(effect, variableName, true);\n          break;\n\n        case NodeMaterialSystemValues.FogColor:\n          effect.setColor3(variableName, scene.fogColor);\n          break;\n\n        case NodeMaterialSystemValues.DeltaTime:\n          effect.setFloat(variableName, scene.deltaTime / 1000.0);\n          break;\n\n        case NodeMaterialSystemValues.CameraParameters:\n          if (scene.activeCamera) {\n            effect.setFloat4(variableName, scene.getEngine().hasOriginBottomLeft ? -1 : 1, scene.activeCamera.minZ, scene.activeCamera.maxZ, 1 / scene.activeCamera.maxZ);\n          }\n\n          break;\n\n        case NodeMaterialSystemValues.MaterialAlpha:\n          effect.setFloat(variableName, material.alpha);\n          break;\n      }\n\n      return;\n    }\n\n    var value = this._valueCallback ? this._valueCallback() : this._storedValue;\n\n    if (value === null) {\n      return;\n    }\n\n    switch (this.type) {\n      case NodeMaterialBlockConnectionPointTypes.Float:\n        effect.setFloat(variableName, value);\n        break;\n\n      case NodeMaterialBlockConnectionPointTypes.Int:\n        effect.setInt(variableName, value);\n        break;\n\n      case NodeMaterialBlockConnectionPointTypes.Color3:\n        TmpColors.Color3[0].set(this.value.r, this.value.g, this.value.b);\n\n        if (this.convertToGammaSpace) {\n          TmpColors.Color3[0].toGammaSpaceToRef(TmpColors.Color3[0]);\n        }\n\n        if (this.convertToLinearSpace) {\n          TmpColors.Color3[0].toLinearSpaceToRef(TmpColors.Color3[0]);\n        }\n\n        effect.setColor3(variableName, TmpColors.Color3[0]);\n        break;\n\n      case NodeMaterialBlockConnectionPointTypes.Color4:\n        TmpColors.Color4[0].set(this.value.r, this.value.g, this.value.b, this.value.a);\n\n        if (this.convertToGammaSpace) {\n          TmpColors.Color4[0].toGammaSpaceToRef(TmpColors.Color4[0]);\n        }\n\n        if (this.convertToLinearSpace) {\n          TmpColors.Color4[0].toLinearSpaceToRef(TmpColors.Color4[0]);\n        }\n\n        effect.setDirectColor4(variableName, TmpColors.Color4[0]);\n        break;\n\n      case NodeMaterialBlockConnectionPointTypes.Vector2:\n        effect.setVector2(variableName, value);\n        break;\n\n      case NodeMaterialBlockConnectionPointTypes.Vector3:\n        effect.setVector3(variableName, value);\n        break;\n\n      case NodeMaterialBlockConnectionPointTypes.Vector4:\n        effect.setVector4(variableName, value);\n        break;\n\n      case NodeMaterialBlockConnectionPointTypes.Matrix:\n        effect.setMatrix(variableName, value);\n        break;\n    }\n  };\n\n  InputBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    if (this.isUniform || this.isSystemValue) {\n      state.sharedData.inputBlocks.push(this);\n    }\n\n    this._emit(state);\n  };\n\n  InputBlock.prototype._dumpPropertiesCode = function () {\n    var variableName = this._codeVariableName;\n\n    if (this.isAttribute) {\n      return _super.prototype._dumpPropertiesCode.call(this) + \"\".concat(variableName, \".setAsAttribute(\\\"\").concat(this.name, \"\\\");\\r\\n\");\n    }\n\n    if (this.isSystemValue) {\n      return _super.prototype._dumpPropertiesCode.call(this) + \"\".concat(variableName, \".setAsSystemValue(BABYLON.NodeMaterialSystemValues.\").concat(NodeMaterialSystemValues[this._systemValue], \");\\r\\n\");\n    }\n\n    if (this.isUniform) {\n      var codes = [];\n      var valueString = \"\";\n\n      switch (this.type) {\n        case NodeMaterialBlockConnectionPointTypes.Float:\n          valueString = \"\".concat(this.value);\n          break;\n\n        case NodeMaterialBlockConnectionPointTypes.Vector2:\n          valueString = \"new BABYLON.Vector2(\".concat(this.value.x, \", \").concat(this.value.y, \")\");\n          break;\n\n        case NodeMaterialBlockConnectionPointTypes.Vector3:\n          valueString = \"new BABYLON.Vector3(\".concat(this.value.x, \", \").concat(this.value.y, \", \").concat(this.value.z, \")\");\n          break;\n\n        case NodeMaterialBlockConnectionPointTypes.Vector4:\n          valueString = \"new BABYLON.Vector4(\".concat(this.value.x, \", \").concat(this.value.y, \", \").concat(this.value.z, \", \").concat(this.value.w, \")\");\n          break;\n\n        case NodeMaterialBlockConnectionPointTypes.Color3:\n          valueString = \"new BABYLON.Color3(\".concat(this.value.r, \", \").concat(this.value.g, \", \").concat(this.value.b, \")\");\n\n          if (this.convertToGammaSpace) {\n            valueString += \".toGammaSpace()\";\n          }\n\n          if (this.convertToLinearSpace) {\n            valueString += \".toLinearSpace()\";\n          }\n\n          break;\n\n        case NodeMaterialBlockConnectionPointTypes.Color4:\n          valueString = \"new BABYLON.Color4(\".concat(this.value.r, \", \").concat(this.value.g, \", \").concat(this.value.b, \", \").concat(this.value.a, \")\");\n\n          if (this.convertToGammaSpace) {\n            valueString += \".toGammaSpace()\";\n          }\n\n          if (this.convertToLinearSpace) {\n            valueString += \".toLinearSpace()\";\n          }\n\n          break;\n\n        case NodeMaterialBlockConnectionPointTypes.Matrix:\n          valueString = \"BABYLON.Matrix.FromArray([\".concat(this.value.m, \"])\");\n          break;\n      } // Common Property \"Value\"\n\n\n      codes.push(\"\".concat(variableName, \".value = \").concat(valueString)); // Float-Value-Specific Properties\n\n      if (this.type === NodeMaterialBlockConnectionPointTypes.Float) {\n        codes.push(\"\".concat(variableName, \".min = \").concat(this.min), \"\".concat(variableName, \".max = \").concat(this.max), \"\".concat(variableName, \".isBoolean = \").concat(this.isBoolean), \"\".concat(variableName, \".matrixMode = \").concat(this.matrixMode), \"\".concat(variableName, \".animationType = BABYLON.AnimatedInputBlockTypes.\").concat(AnimatedInputBlockTypes[this.animationType]));\n      } // Common Property \"Type\"\n\n\n      codes.push(\"\".concat(variableName, \".isConstant = \").concat(this.isConstant));\n      codes.push(\"\");\n      return _super.prototype._dumpPropertiesCode.call(this) + codes.join(\";\\r\\n\");\n    }\n\n    return _super.prototype._dumpPropertiesCode.call(this);\n  };\n\n  InputBlock.prototype.dispose = function () {\n    this.onValueChangedObservable.clear();\n\n    _super.prototype.dispose.call(this);\n  };\n\n  InputBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    serializationObject.type = this.type;\n    serializationObject.mode = this._mode;\n    serializationObject.systemValue = this._systemValue;\n    serializationObject.animationType = this._animationType;\n    serializationObject.min = this.min;\n    serializationObject.max = this.max;\n    serializationObject.isBoolean = this.isBoolean;\n    serializationObject.matrixMode = this.matrixMode;\n    serializationObject.isConstant = this.isConstant;\n    serializationObject.groupInInspector = this.groupInInspector;\n    serializationObject.convertToGammaSpace = this.convertToGammaSpace;\n    serializationObject.convertToLinearSpace = this.convertToLinearSpace;\n\n    if (this._storedValue != null && this._mode === NodeMaterialBlockConnectionPointMode.Uniform) {\n      if (this._storedValue.asArray) {\n        serializationObject.valueType = \"BABYLON.\" + this._storedValue.getClassName();\n        serializationObject.value = this._storedValue.asArray();\n      } else {\n        serializationObject.valueType = \"number\";\n        serializationObject.value = this._storedValue;\n      }\n    }\n\n    return serializationObject;\n  };\n\n  InputBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    this._mode = serializationObject.mode;\n\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    this._type = serializationObject.type;\n    this._systemValue = serializationObject.systemValue || serializationObject.wellKnownValue;\n    this._animationType = serializationObject.animationType;\n    this.min = serializationObject.min || 0;\n    this.max = serializationObject.max || 0;\n    this.isBoolean = !!serializationObject.isBoolean;\n    this.matrixMode = serializationObject.matrixMode || 0;\n    this.isConstant = !!serializationObject.isConstant;\n    this.groupInInspector = serializationObject.groupInInspector || \"\";\n    this.convertToGammaSpace = !!serializationObject.convertToGammaSpace;\n    this.convertToLinearSpace = !!serializationObject.convertToLinearSpace;\n\n    if (!serializationObject.valueType) {\n      return;\n    }\n\n    if (serializationObject.valueType === \"number\") {\n      this._storedValue = serializationObject.value;\n    } else {\n      var valueType = GetClass(serializationObject.valueType);\n\n      if (valueType) {\n        this._storedValue = valueType.FromArray(serializationObject.value);\n      }\n    }\n  };\n\n  return InputBlock;\n}(NodeMaterialBlock);\n\nexport { InputBlock };\nRegisterClass(\"BABYLON.InputBlock\", InputBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockConnectionPointMode","NodeMaterialSystemValues","Matrix","Vector2","Vector3","Vector4","NodeMaterialBlockTargets","GetClass","RegisterClass","Color3","Color4","TmpColors","AnimatedInputBlockTypes","Observable","remapAttributeName","position2d","particle_uv","particle_color","particle_texturemask","particle_positionw","attributeInFragmentOnly","attributeAsUniform","__extends","name","target","type","Vertex","AutoDetect","_super","_this","Undefined","None","_type","setDefaultValue","registerOutput","Object","InputBlock","isUniform","value","isNaN","Float","getClassName","isAttribute","isSystemValue","_systemValue","World","WorldView","WorldViewProjection","View","ViewProjection","Projection","CameraPosition","FogColor","DeltaTime","MaterialAlpha","CameraParameters","newName","validateBlockName","call","_outputs","attributeName","_mode","Attribute","systemValue","_storedValue","isBoolean","min","max","Math","Uniform","onValueChangedObservable","notifyObservers","_valueCallback","_associatedVariableName","_animationType","associatedVariableName","Varying","scene","Time","getAnimationRatio","define","substring","Zero","White","Identity","state","_emitFloat","x","concat","y","z","w","set","r","g","b","convertToGammaSpace","toGammaSpaceToRef","convertToLinearSpace","toLinearSpaceToRef","a","_getFreeVariableName","isConstant","constants","indexOf","push","_constantDeclaration","_declareOutput","output","_emitConstant","uniforms","_uniformDeclaration","_emitDefine","_getGLType","hints","sharedData","undefined","needWorldViewMatrix","needWorldViewProjectionMatrix","animatedInputs","_a","_vertexState","_emitUniformFromString","_emitVaryingFromString","_emit","attributes","_attributeDeclaration","effect","world","worldView","worldViewProjection","variableName","setMatrix","material","getViewMatrix","getProjectionMatrix","getTransformMatrix","bindEyePosition","setColor3","fogColor","setFloat","deltaTime","activeCamera","setFloat4","getEngine","hasOriginBottomLeft","minZ","maxZ","alpha","Int","setInt","setDirectColor4","setVector2","setVector3","setVector4","_buildBlock","inputBlocks","_codeVariableName","_dumpPropertiesCode","codes","valueString","m","matrixMode","animationType","join","clear","dispose","serializationObject","serialize","mode","groupInInspector","asArray","valueType","rootUrl","_deserialize","wellKnownValue","FromArray"],"sourceRoot":"","sources":["../../../../../../../../lts/core/generated/Materials/Node/Blocks/Input/inputBlock.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport { NodeMaterialBlockConnectionPointMode } from \"../../Enums/nodeMaterialBlockConnectionPointMode\";\r\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues\";\r\nimport type { Nullable } from \"../../../../types\";\r\nimport type { Effect } from \"../../../../Materials/effect\";\r\nimport { Matrix, Vector2, Vector3, Vector4 } from \"../../../../Maths/math.vector\";\r\nimport type { Scene } from \"../../../../scene\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport { GetClass, RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { Color3, Color4, TmpColors } from \"../../../../Maths/math\";\r\nimport { AnimatedInputBlockTypes } from \"./animatedInputBlockTypes\";\r\nimport { Observable } from \"../../../../Misc/observable\";\r\nimport type { NodeMaterial } from \"../../nodeMaterial\";\r\n\r\nconst remapAttributeName: { [name: string]: string } = {\r\n    position2d: \"position\",\r\n    particle_uv: \"vUV\",\r\n    particle_color: \"vColor\",\r\n    particle_texturemask: \"textureMask\",\r\n    particle_positionw: \"vPositionW\",\r\n};\r\n\r\nconst attributeInFragmentOnly: { [name: string]: boolean } = {\r\n    particle_uv: true,\r\n    particle_color: true,\r\n    particle_texturemask: true,\r\n    particle_positionw: true,\r\n};\r\n\r\nconst attributeAsUniform: { [name: string]: boolean } = {\r\n    particle_texturemask: true,\r\n};\r\n\r\n/**\r\n * Block used to expose an input value\r\n */\r\nexport class InputBlock extends NodeMaterialBlock {\r\n    private _mode = NodeMaterialBlockConnectionPointMode.Undefined;\r\n    private _associatedVariableName: string;\r\n    private _storedValue: any;\r\n    private _valueCallback: () => any;\r\n    private _type: NodeMaterialBlockConnectionPointTypes;\r\n    private _animationType = AnimatedInputBlockTypes.None;\r\n\r\n    /** Gets or set a value used to limit the range of float values */\r\n    public min: number = 0;\r\n\r\n    /** Gets or set a value used to limit the range of float values */\r\n    public max: number = 0;\r\n\r\n    /** Gets or set a value indicating that this input can only get 0 and 1 values */\r\n    public isBoolean: boolean = false;\r\n\r\n    /** Gets or sets a value used by the Node Material editor to determine how to configure the current value if it is a matrix */\r\n    public matrixMode: number = 0;\r\n\r\n    /** @hidden */\r\n    public _systemValue: Nullable<NodeMaterialSystemValues> = null;\r\n\r\n    /** Gets or sets a boolean indicating that the value of this input will not change after a build */\r\n    public isConstant = false;\r\n\r\n    /** Gets or sets the group to use to display this block in the Inspector */\r\n    public groupInInspector = \"\";\r\n\r\n    /** Gets an observable raised when the value is changed */\r\n    public onValueChangedObservable = new Observable<InputBlock>();\r\n\r\n    /** Gets or sets a boolean indicating if content needs to be converted to gamma space (for color3/4 only) */\r\n    public convertToGammaSpace = false;\r\n\r\n    /** Gets or sets a boolean indicating if content needs to be converted to linear space (for color3/4 only) */\r\n    public convertToLinearSpace = false;\r\n\r\n    /**\r\n     * Gets or sets the connection point type (default is float)\r\n     */\r\n    public get type(): NodeMaterialBlockConnectionPointTypes {\r\n        if (this._type === NodeMaterialBlockConnectionPointTypes.AutoDetect) {\r\n            if (this.isUniform && this.value != null) {\r\n                if (!isNaN(this.value)) {\r\n                    this._type = NodeMaterialBlockConnectionPointTypes.Float;\r\n                    return this._type;\r\n                }\r\n\r\n                switch (this.value.getClassName()) {\r\n                    case \"Vector2\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector2;\r\n                        return this._type;\r\n                    case \"Vector3\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector3;\r\n                        return this._type;\r\n                    case \"Vector4\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector4;\r\n                        return this._type;\r\n                    case \"Color3\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Color3;\r\n                        return this._type;\r\n                    case \"Color4\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Color4;\r\n                        return this._type;\r\n                    case \"Matrix\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Matrix;\r\n                        return this._type;\r\n                }\r\n            }\r\n\r\n            if (this.isAttribute) {\r\n                switch (this.name) {\r\n                    case \"position\":\r\n                    case \"normal\":\r\n                    case \"tangent\":\r\n                    case \"particle_positionw\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector3;\r\n                        return this._type;\r\n                    case \"uv\":\r\n                    case \"uv2\":\r\n                    case \"uv3\":\r\n                    case \"uv4\":\r\n                    case \"uv5\":\r\n                    case \"uv6\":\r\n                    case \"position2d\":\r\n                    case \"particle_uv\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector2;\r\n                        return this._type;\r\n                    case \"matricesIndices\":\r\n                    case \"matricesWeights\":\r\n                    case \"world0\":\r\n                    case \"world1\":\r\n                    case \"world2\":\r\n                    case \"world3\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector4;\r\n                        return this._type;\r\n                    case \"color\":\r\n                    case \"particle_color\":\r\n                    case \"particle_texturemask\":\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Color4;\r\n                        return this._type;\r\n                }\r\n            }\r\n\r\n            if (this.isSystemValue) {\r\n                switch (this._systemValue) {\r\n                    case NodeMaterialSystemValues.World:\r\n                    case NodeMaterialSystemValues.WorldView:\r\n                    case NodeMaterialSystemValues.WorldViewProjection:\r\n                    case NodeMaterialSystemValues.View:\r\n                    case NodeMaterialSystemValues.ViewProjection:\r\n                    case NodeMaterialSystemValues.Projection:\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Matrix;\r\n                        return this._type;\r\n                    case NodeMaterialSystemValues.CameraPosition:\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector3;\r\n                        return this._type;\r\n                    case NodeMaterialSystemValues.FogColor:\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Color3;\r\n                        return this._type;\r\n                    case NodeMaterialSystemValues.DeltaTime:\r\n                    case NodeMaterialSystemValues.MaterialAlpha:\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Float;\r\n                        return this._type;\r\n                    case NodeMaterialSystemValues.CameraParameters:\r\n                        this._type = NodeMaterialBlockConnectionPointTypes.Vector4;\r\n                        return this._type;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this._type;\r\n    }\r\n\r\n    /**\r\n     * Creates a new InputBlock\r\n     * @param name defines the block name\r\n     * @param target defines the target of that block (Vertex by default)\r\n     * @param type defines the type of the input (can be set to NodeMaterialBlockConnectionPointTypes.AutoDetect)\r\n     */\r\n    public constructor(name: string, target = NodeMaterialBlockTargets.Vertex, type: NodeMaterialBlockConnectionPointTypes = NodeMaterialBlockConnectionPointTypes.AutoDetect) {\r\n        super(name, target, false, true);\r\n\r\n        this._type = type;\r\n\r\n        this.setDefaultValue();\r\n\r\n        this.registerOutput(\"output\", type);\r\n    }\r\n\r\n    /**\r\n     * Validates if a name is a reserve word.\r\n     * @param newName the new name to be given to the node.\r\n     * @returns false if the name is a reserve word, else true.\r\n     */\r\n    public validateBlockName(newName: string) {\r\n        if (!this.isAttribute) {\r\n            return super.validateBlockName(newName);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Set the source of this connection point to a vertex attribute\r\n     * @param attributeName defines the attribute name (position, uv, normal, etc...). If not specified it will take the connection point name\r\n     * @returns the current connection point\r\n     */\r\n    public setAsAttribute(attributeName?: string): InputBlock {\r\n        this._mode = NodeMaterialBlockConnectionPointMode.Attribute;\r\n        if (attributeName) {\r\n            this.name = attributeName;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the source of this connection point to a system value\r\n     * @param value define the system value to use (world, view, etc...) or null to switch to manual value\r\n     * @returns the current connection point\r\n     */\r\n    public setAsSystemValue(value: Nullable<NodeMaterialSystemValues>): InputBlock {\r\n        this.systemValue = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the value of that point.\r\n     * Please note that this value will be ignored if valueCallback is defined\r\n     */\r\n    public get value(): any {\r\n        return this._storedValue;\r\n    }\r\n\r\n    public set value(value: any) {\r\n        if (this.type === NodeMaterialBlockConnectionPointTypes.Float) {\r\n            if (this.isBoolean) {\r\n                value = value ? 1 : 0;\r\n            } else if (this.min !== this.max) {\r\n                value = Math.max(this.min, value);\r\n                value = Math.min(this.max, value);\r\n            }\r\n        }\r\n\r\n        this._storedValue = value;\r\n        this._mode = NodeMaterialBlockConnectionPointMode.Uniform;\r\n\r\n        this.onValueChangedObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a callback used to get the value of that point.\r\n     * Please note that setting this value will force the connection point to ignore the value property\r\n     */\r\n    public get valueCallback(): () => any {\r\n        return this._valueCallback;\r\n    }\r\n\r\n    public set valueCallback(value: () => any) {\r\n        this._valueCallback = value;\r\n        this._mode = NodeMaterialBlockConnectionPointMode.Uniform;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the associated variable name in the shader\r\n     */\r\n    public get associatedVariableName(): string {\r\n        return this._associatedVariableName;\r\n    }\r\n\r\n    public set associatedVariableName(value: string) {\r\n        this._associatedVariableName = value;\r\n    }\r\n\r\n    /** Gets or sets the type of animation applied to the input */\r\n    public get animationType() {\r\n        return this._animationType;\r\n    }\r\n\r\n    public set animationType(value: AnimatedInputBlockTypes) {\r\n        this._animationType = value;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that this connection point not defined yet\r\n     */\r\n    public get isUndefined(): boolean {\r\n        return this._mode === NodeMaterialBlockConnectionPointMode.Undefined;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this connection point is coming from an uniform.\r\n     * In this case the connection point name must be the name of the uniform to use.\r\n     * Can only be set on inputs\r\n     */\r\n    public get isUniform(): boolean {\r\n        return this._mode === NodeMaterialBlockConnectionPointMode.Uniform;\r\n    }\r\n\r\n    public set isUniform(value: boolean) {\r\n        this._mode = value ? NodeMaterialBlockConnectionPointMode.Uniform : NodeMaterialBlockConnectionPointMode.Undefined;\r\n        this.associatedVariableName = \"\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this connection point is coming from an attribute.\r\n     * In this case the connection point name must be the name of the attribute to use\r\n     * Can only be set on inputs\r\n     */\r\n    public get isAttribute(): boolean {\r\n        return this._mode === NodeMaterialBlockConnectionPointMode.Attribute;\r\n    }\r\n\r\n    public set isAttribute(value: boolean) {\r\n        this._mode = value ? NodeMaterialBlockConnectionPointMode.Attribute : NodeMaterialBlockConnectionPointMode.Undefined;\r\n        this.associatedVariableName = \"\";\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that this connection point is generating a varying variable.\r\n     * Can only be set on exit points\r\n     */\r\n    public get isVarying(): boolean {\r\n        return this._mode === NodeMaterialBlockConnectionPointMode.Varying;\r\n    }\r\n\r\n    public set isVarying(value: boolean) {\r\n        this._mode = value ? NodeMaterialBlockConnectionPointMode.Varying : NodeMaterialBlockConnectionPointMode.Undefined;\r\n        this.associatedVariableName = \"\";\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the current connection point is a system value\r\n     */\r\n    public get isSystemValue(): boolean {\r\n        return this._systemValue != null;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the current well known value or null if not defined as a system value\r\n     */\r\n    public get systemValue(): Nullable<NodeMaterialSystemValues> {\r\n        return this._systemValue;\r\n    }\r\n\r\n    public set systemValue(value: Nullable<NodeMaterialSystemValues>) {\r\n        this._mode = NodeMaterialBlockConnectionPointMode.Uniform;\r\n        this.associatedVariableName = \"\";\r\n        this._systemValue = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"InputBlock\";\r\n    }\r\n\r\n    /**\r\n     * Animate the input if animationType !== None\r\n     * @param scene defines the rendering scene\r\n     */\r\n    public animate(scene: Scene) {\r\n        switch (this._animationType) {\r\n            case AnimatedInputBlockTypes.Time: {\r\n                if (this.type === NodeMaterialBlockConnectionPointTypes.Float) {\r\n                    this.value += scene.getAnimationRatio() * 0.01;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _emitDefine(define: string): string {\r\n        if (define[0] === \"!\") {\r\n            return `#ifndef ${define.substring(1)}\\r\\n`;\r\n        }\r\n\r\n        return `#ifdef ${define}\\r\\n`;\r\n    }\r\n\r\n    public initialize() {\r\n        this.associatedVariableName = \"\";\r\n    }\r\n\r\n    /**\r\n     * Set the input block to its default value (based on its type)\r\n     */\r\n    public setDefaultValue() {\r\n        switch (this.type) {\r\n            case NodeMaterialBlockConnectionPointTypes.Float:\r\n                this.value = 0;\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                this.value = Vector2.Zero();\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                this.value = Vector3.Zero();\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector4:\r\n                this.value = Vector4.Zero();\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Color3:\r\n                this.value = Color3.White();\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Color4:\r\n                this.value = new Color4(1, 1, 1, 1);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Matrix:\r\n                this.value = Matrix.Identity();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private _emitConstant(state: NodeMaterialBuildState) {\r\n        switch (this.type) {\r\n            case NodeMaterialBlockConnectionPointTypes.Float:\r\n                return `${state._emitFloat(this.value)}`;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                return `vec2(${this.value.x}, ${this.value.y})`;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                return `vec3(${this.value.x}, ${this.value.y}, ${this.value.z})`;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector4:\r\n                return `vec4(${this.value.x}, ${this.value.y}, ${this.value.z}, ${this.value.w})`;\r\n            case NodeMaterialBlockConnectionPointTypes.Color3:\r\n                TmpColors.Color3[0].set(this.value.r, this.value.g, this.value.b);\r\n                if (this.convertToGammaSpace) {\r\n                    TmpColors.Color3[0].toGammaSpaceToRef(TmpColors.Color3[0]);\r\n                }\r\n                if (this.convertToLinearSpace) {\r\n                    TmpColors.Color3[0].toLinearSpaceToRef(TmpColors.Color3[0]);\r\n                }\r\n                return `vec3(${TmpColors.Color3[0].r}, ${TmpColors.Color3[0].g}, ${TmpColors.Color3[0].b})`;\r\n            case NodeMaterialBlockConnectionPointTypes.Color4:\r\n                TmpColors.Color4[0].set(this.value.r, this.value.g, this.value.b, this.value.a);\r\n                if (this.convertToGammaSpace) {\r\n                    TmpColors.Color4[0].toGammaSpaceToRef(TmpColors.Color4[0]);\r\n                }\r\n                if (this.convertToLinearSpace) {\r\n                    TmpColors.Color4[0].toLinearSpaceToRef(TmpColors.Color4[0]);\r\n                }\r\n                return `vec4(${TmpColors.Color4[0].r}, ${TmpColors.Color4[0].g}, ${TmpColors.Color4[0].b}, ${TmpColors.Color4[0].a})`;\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _noContextSwitch(): boolean {\r\n        return attributeInFragmentOnly[this.name];\r\n    }\r\n\r\n    private _emit(state: NodeMaterialBuildState, define?: string) {\r\n        // Uniforms\r\n        if (this.isUniform) {\r\n            if (!this.associatedVariableName) {\r\n                this.associatedVariableName = state._getFreeVariableName(\"u_\" + this.name);\r\n            }\r\n\r\n            if (this.isConstant) {\r\n                if (state.constants.indexOf(this.associatedVariableName) !== -1) {\r\n                    return;\r\n                }\r\n                state.constants.push(this.associatedVariableName);\r\n                state._constantDeclaration += this._declareOutput(this.output, state) + ` = ${this._emitConstant(state)};\\r\\n`;\r\n                return;\r\n            }\r\n\r\n            if (state.uniforms.indexOf(this.associatedVariableName) !== -1) {\r\n                return;\r\n            }\r\n\r\n            state.uniforms.push(this.associatedVariableName);\r\n            if (define) {\r\n                state._uniformDeclaration += this._emitDefine(define);\r\n            }\r\n            state._uniformDeclaration += `uniform ${state._getGLType(this.type)} ${this.associatedVariableName};\\r\\n`;\r\n            if (define) {\r\n                state._uniformDeclaration += `#endif\\r\\n`;\r\n            }\r\n\r\n            // well known\r\n            const hints = state.sharedData.hints;\r\n            if (this._systemValue !== null && this._systemValue !== undefined) {\r\n                switch (this._systemValue) {\r\n                    case NodeMaterialSystemValues.WorldView:\r\n                        hints.needWorldViewMatrix = true;\r\n                        break;\r\n                    case NodeMaterialSystemValues.WorldViewProjection:\r\n                        hints.needWorldViewProjectionMatrix = true;\r\n                        break;\r\n                }\r\n            } else {\r\n                if (this._animationType !== AnimatedInputBlockTypes.None) {\r\n                    state.sharedData.animatedInputs.push(this);\r\n                }\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // Attribute\r\n        if (this.isAttribute) {\r\n            this.associatedVariableName = remapAttributeName[this.name] ?? this.name;\r\n\r\n            if (this.target === NodeMaterialBlockTargets.Vertex && state._vertexState) {\r\n                // Attribute for fragment need to be carried over by varyings\r\n                if (attributeInFragmentOnly[this.name]) {\r\n                    if (attributeAsUniform[this.name]) {\r\n                        state._emitUniformFromString(this.associatedVariableName, state._getGLType(this.type), define);\r\n                    } else {\r\n                        state._emitVaryingFromString(this.associatedVariableName, state._getGLType(this.type), define);\r\n                    }\r\n                } else {\r\n                    this._emit(state._vertexState, define);\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (state.attributes.indexOf(this.associatedVariableName) !== -1) {\r\n                return;\r\n            }\r\n\r\n            state.attributes.push(this.associatedVariableName);\r\n\r\n            if (attributeInFragmentOnly[this.name]) {\r\n                if (attributeAsUniform[this.name]) {\r\n                    state._emitUniformFromString(this.associatedVariableName, state._getGLType(this.type), define);\r\n                } else {\r\n                    state._emitVaryingFromString(this.associatedVariableName, state._getGLType(this.type), define);\r\n                }\r\n            } else {\r\n                if (define) {\r\n                    state._attributeDeclaration += this._emitDefine(define);\r\n                }\r\n                state._attributeDeclaration += `attribute ${state._getGLType(this.type)} ${this.associatedVariableName};\\r\\n`;\r\n                if (define) {\r\n                    state._attributeDeclaration += `#endif\\r\\n`;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param effect\r\n     * @param world\r\n     * @param worldView\r\n     * @param worldViewProjection\r\n     * @hidden\r\n     */\r\n    public _transmitWorld(effect: Effect, world: Matrix, worldView: Matrix, worldViewProjection: Matrix) {\r\n        if (!this._systemValue) {\r\n            return;\r\n        }\r\n\r\n        const variableName = this.associatedVariableName;\r\n        switch (this._systemValue) {\r\n            case NodeMaterialSystemValues.World:\r\n                effect.setMatrix(variableName, world);\r\n                break;\r\n            case NodeMaterialSystemValues.WorldView:\r\n                effect.setMatrix(variableName, worldView);\r\n                break;\r\n            case NodeMaterialSystemValues.WorldViewProjection:\r\n                effect.setMatrix(variableName, worldViewProjection);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param effect\r\n     * @param scene\r\n     * @param material\r\n     * @hidden\r\n     */\r\n    public _transmit(effect: Effect, scene: Scene, material: NodeMaterial) {\r\n        if (this.isAttribute) {\r\n            return;\r\n        }\r\n\r\n        const variableName = this.associatedVariableName;\r\n        if (this._systemValue) {\r\n            switch (this._systemValue) {\r\n                case NodeMaterialSystemValues.World:\r\n                case NodeMaterialSystemValues.WorldView:\r\n                case NodeMaterialSystemValues.WorldViewProjection:\r\n                    return;\r\n                case NodeMaterialSystemValues.View:\r\n                    effect.setMatrix(variableName, scene.getViewMatrix());\r\n                    break;\r\n                case NodeMaterialSystemValues.Projection:\r\n                    effect.setMatrix(variableName, scene.getProjectionMatrix());\r\n                    break;\r\n                case NodeMaterialSystemValues.ViewProjection:\r\n                    effect.setMatrix(variableName, scene.getTransformMatrix());\r\n                    break;\r\n                case NodeMaterialSystemValues.CameraPosition:\r\n                    scene.bindEyePosition(effect, variableName, true);\r\n                    break;\r\n                case NodeMaterialSystemValues.FogColor:\r\n                    effect.setColor3(variableName, scene.fogColor);\r\n                    break;\r\n                case NodeMaterialSystemValues.DeltaTime:\r\n                    effect.setFloat(variableName, scene.deltaTime / 1000.0);\r\n                    break;\r\n                case NodeMaterialSystemValues.CameraParameters:\r\n                    if (scene.activeCamera) {\r\n                        effect.setFloat4(\r\n                            variableName,\r\n                            scene.getEngine().hasOriginBottomLeft ? -1 : 1,\r\n                            scene.activeCamera.minZ,\r\n                            scene.activeCamera.maxZ,\r\n                            1 / scene.activeCamera.maxZ\r\n                        );\r\n                    }\r\n                    break;\r\n                case NodeMaterialSystemValues.MaterialAlpha:\r\n                    effect.setFloat(variableName, material.alpha);\r\n                    break;\r\n            }\r\n            return;\r\n        }\r\n\r\n        const value = this._valueCallback ? this._valueCallback() : this._storedValue;\r\n\r\n        if (value === null) {\r\n            return;\r\n        }\r\n\r\n        switch (this.type) {\r\n            case NodeMaterialBlockConnectionPointTypes.Float:\r\n                effect.setFloat(variableName, value);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Int:\r\n                effect.setInt(variableName, value);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Color3:\r\n                TmpColors.Color3[0].set(this.value.r, this.value.g, this.value.b);\r\n                if (this.convertToGammaSpace) {\r\n                    TmpColors.Color3[0].toGammaSpaceToRef(TmpColors.Color3[0]);\r\n                }\r\n                if (this.convertToLinearSpace) {\r\n                    TmpColors.Color3[0].toLinearSpaceToRef(TmpColors.Color3[0]);\r\n                }\r\n                effect.setColor3(variableName, TmpColors.Color3[0]);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Color4:\r\n                TmpColors.Color4[0].set(this.value.r, this.value.g, this.value.b, this.value.a);\r\n                if (this.convertToGammaSpace) {\r\n                    TmpColors.Color4[0].toGammaSpaceToRef(TmpColors.Color4[0]);\r\n                }\r\n                if (this.convertToLinearSpace) {\r\n                    TmpColors.Color4[0].toLinearSpaceToRef(TmpColors.Color4[0]);\r\n                }\r\n                effect.setDirectColor4(variableName, TmpColors.Color4[0]);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                effect.setVector2(variableName, value);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                effect.setVector3(variableName, value);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector4:\r\n                effect.setVector4(variableName, value);\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Matrix:\r\n                effect.setMatrix(variableName, value);\r\n                break;\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (this.isUniform || this.isSystemValue) {\r\n            state.sharedData.inputBlocks.push(this);\r\n        }\r\n\r\n        this._emit(state);\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        const variableName = this._codeVariableName;\r\n\r\n        if (this.isAttribute) {\r\n            return super._dumpPropertiesCode() + `${variableName}.setAsAttribute(\"${this.name}\");\\r\\n`;\r\n        }\r\n        if (this.isSystemValue) {\r\n            return super._dumpPropertiesCode() + `${variableName}.setAsSystemValue(BABYLON.NodeMaterialSystemValues.${NodeMaterialSystemValues[this._systemValue!]});\\r\\n`;\r\n        }\r\n        if (this.isUniform) {\r\n            const codes: string[] = [];\r\n\r\n            let valueString = \"\";\r\n\r\n            switch (this.type) {\r\n                case NodeMaterialBlockConnectionPointTypes.Float:\r\n                    valueString = `${this.value}`;\r\n                    break;\r\n                case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                    valueString = `new BABYLON.Vector2(${this.value.x}, ${this.value.y})`;\r\n                    break;\r\n                case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                    valueString = `new BABYLON.Vector3(${this.value.x}, ${this.value.y}, ${this.value.z})`;\r\n                    break;\r\n                case NodeMaterialBlockConnectionPointTypes.Vector4:\r\n                    valueString = `new BABYLON.Vector4(${this.value.x}, ${this.value.y}, ${this.value.z}, ${this.value.w})`;\r\n                    break;\r\n                case NodeMaterialBlockConnectionPointTypes.Color3:\r\n                    valueString = `new BABYLON.Color3(${this.value.r}, ${this.value.g}, ${this.value.b})`;\r\n                    if (this.convertToGammaSpace) {\r\n                        valueString += \".toGammaSpace()\";\r\n                    }\r\n                    if (this.convertToLinearSpace) {\r\n                        valueString += \".toLinearSpace()\";\r\n                    }\r\n                    break;\r\n                case NodeMaterialBlockConnectionPointTypes.Color4:\r\n                    valueString = `new BABYLON.Color4(${this.value.r}, ${this.value.g}, ${this.value.b}, ${this.value.a})`;\r\n                    if (this.convertToGammaSpace) {\r\n                        valueString += \".toGammaSpace()\";\r\n                    }\r\n                    if (this.convertToLinearSpace) {\r\n                        valueString += \".toLinearSpace()\";\r\n                    }\r\n                    break;\r\n                case NodeMaterialBlockConnectionPointTypes.Matrix:\r\n                    valueString = `BABYLON.Matrix.FromArray([${(this.value as Matrix).m}])`;\r\n                    break;\r\n            }\r\n\r\n            // Common Property \"Value\"\r\n            codes.push(`${variableName}.value = ${valueString}`);\r\n\r\n            // Float-Value-Specific Properties\r\n            if (this.type === NodeMaterialBlockConnectionPointTypes.Float) {\r\n                codes.push(\r\n                    `${variableName}.min = ${this.min}`,\r\n                    `${variableName}.max = ${this.max}`,\r\n                    `${variableName}.isBoolean = ${this.isBoolean}`,\r\n                    `${variableName}.matrixMode = ${this.matrixMode}`,\r\n                    `${variableName}.animationType = BABYLON.AnimatedInputBlockTypes.${AnimatedInputBlockTypes[this.animationType]}`\r\n                );\r\n            }\r\n\r\n            // Common Property \"Type\"\r\n            codes.push(`${variableName}.isConstant = ${this.isConstant}`);\r\n\r\n            codes.push(\"\");\r\n\r\n            return super._dumpPropertiesCode() + codes.join(\";\\r\\n\");\r\n        }\r\n        return super._dumpPropertiesCode();\r\n    }\r\n\r\n    public dispose() {\r\n        this.onValueChangedObservable.clear();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.type = this.type;\r\n        serializationObject.mode = this._mode;\r\n        serializationObject.systemValue = this._systemValue;\r\n        serializationObject.animationType = this._animationType;\r\n        serializationObject.min = this.min;\r\n        serializationObject.max = this.max;\r\n        serializationObject.isBoolean = this.isBoolean;\r\n        serializationObject.matrixMode = this.matrixMode;\r\n        serializationObject.isConstant = this.isConstant;\r\n        serializationObject.groupInInspector = this.groupInInspector;\r\n        serializationObject.convertToGammaSpace = this.convertToGammaSpace;\r\n        serializationObject.convertToLinearSpace = this.convertToLinearSpace;\r\n\r\n        if (this._storedValue != null && this._mode === NodeMaterialBlockConnectionPointMode.Uniform) {\r\n            if (this._storedValue.asArray) {\r\n                serializationObject.valueType = \"BABYLON.\" + this._storedValue.getClassName();\r\n                serializationObject.value = this._storedValue.asArray();\r\n            } else {\r\n                serializationObject.valueType = \"number\";\r\n                serializationObject.value = this._storedValue;\r\n            }\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        this._mode = serializationObject.mode;\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this._type = serializationObject.type;\r\n\r\n        this._systemValue = serializationObject.systemValue || serializationObject.wellKnownValue;\r\n        this._animationType = serializationObject.animationType;\r\n        this.min = serializationObject.min || 0;\r\n        this.max = serializationObject.max || 0;\r\n        this.isBoolean = !!serializationObject.isBoolean;\r\n        this.matrixMode = serializationObject.matrixMode || 0;\r\n        this.isConstant = !!serializationObject.isConstant;\r\n        this.groupInInspector = serializationObject.groupInInspector || \"\";\r\n        this.convertToGammaSpace = !!serializationObject.convertToGammaSpace;\r\n        this.convertToLinearSpace = !!serializationObject.convertToLinearSpace;\r\n\r\n        if (!serializationObject.valueType) {\r\n            return;\r\n        }\r\n\r\n        if (serializationObject.valueType === \"number\") {\r\n            this._storedValue = serializationObject.value;\r\n        } else {\r\n            const valueType = GetClass(serializationObject.valueType);\r\n\r\n            if (valueType) {\r\n                this._storedValue = valueType.FromArray(serializationObject.value);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.InputBlock\", InputBlock);\r\n"]},"metadata":{},"sourceType":"module"}