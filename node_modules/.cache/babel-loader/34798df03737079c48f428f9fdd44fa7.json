{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { __extends } from \"tslib\";\nimport { RenderTargetTexture } from \"../Textures/renderTargetTexture.js\";\n/**\n * Renders to multiple views with a single draw call\n * @see https://www.khronos.org/registry/webgl/extensions/OVR_multiview2/\n */\n\nvar MultiviewRenderTarget =\n/** @class */\nfunction (_super) {\n  __extends(MultiviewRenderTarget, _super);\n  /**\n   * Creates a multiview render target\n   * @param scene scene used with the render target\n   * @param size the size of the render target (used for each view)\n   */\n\n\n  function MultiviewRenderTarget(scene, size) {\n    if (size === void 0) {\n      size = 512;\n    }\n\n    var _this = _super.call(this, \"multiview rtt\", size, scene, false, true, 0, false, undefined, false, false, true, undefined, true) || this;\n\n    _this._renderTarget = _this.getScene().getEngine().createMultiviewRenderTargetTexture(_this.getRenderWidth(), _this.getRenderHeight());\n    _this._texture = _this._renderTarget.texture;\n    _this._texture.isMultiview = true;\n    _this._texture.format = 5;\n    _this.samples = _this._getEngine().getCaps().maxSamples || _this.samples;\n    _this._texture.samples = _this._samples;\n    return _this;\n  }\n\n  Object.defineProperty(MultiviewRenderTarget.prototype, \"samples\", {\n    set: function set(value) {\n      // We override this setter because multisampling is handled by framebufferTextureMultisampleMultiviewOVR\n      this._samples = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  MultiviewRenderTarget.prototype._bindFrameBuffer = function () {\n    if (!this._renderTarget) {\n      return;\n    }\n\n    this.getScene().getEngine().bindMultiviewFramebuffer(this._renderTarget);\n  };\n  /**\n   * Gets the number of views the corresponding to the texture (eg. a MultiviewRenderTarget will have > 1)\n   * @returns the view count\n   */\n\n\n  MultiviewRenderTarget.prototype.getViewCount = function () {\n    return 2;\n  };\n\n  return MultiviewRenderTarget;\n}(RenderTargetTexture);\n\nexport { MultiviewRenderTarget };","map":{"version":3,"mappings":";;AAAA,SAASA,mBAAT,QAAoC,oCAApC;AAIA;;;;;AAIA;AAAA;AAAA;AAA2CC;AAMvC;;;;;;;AAKA,iCAAYC,KAAZ,EAA2BC,IAA3B,EAAqG;AAA1E;AAAAA;AAA0E;;AAArG,gBACIC,kBAAM,eAAN,EAAuBD,IAAvB,EAA6BD,KAA7B,EAAoC,KAApC,EAA2C,IAA3C,EAAiD,CAAjD,EAAiD,KAAjD,EAA2DG,SAA3D,EAA2D,KAA3D,EAA2D,KAA3D,EAAmF,IAAnF,EAA0FA,SAA1F,EAAqG,IAArG,KAA8G,IADlH;;AAEIC,SAAI,CAACC,aAAL,GAAqBD,KAAI,CAACE,QAAL,GAAiBC,SAAjB,GAA6BC,kCAA7B,CAAgEJ,KAAI,CAACK,cAAL,EAAhE,EAAuFL,KAAI,CAACM,eAAL,EAAvF,CAArB;AACAN,SAAI,CAACO,QAAL,GAAgBP,KAAI,CAACC,aAAL,CAAmBO,OAAnC;AACAR,SAAI,CAACO,QAAL,CAAcE,WAAd,GAA4B,IAA5B;AACAT,SAAI,CAACO,QAAL,CAAcG,MAAd,GAAuB,CAAvB;AACAV,SAAI,CAACW,OAAL,GAAeX,KAAI,CAACY,UAAL,GAAmBC,OAAnB,GAA6BC,UAA7B,IAA2Cd,KAAI,CAACW,OAA/D;AACAX,SAAI,CAACO,QAAL,CAAcI,OAAd,GAAwBX,KAAI,CAACe,QAA7B;;AACH;;AAlBDC,wBAAWC,+BAAX,EAAW,SAAX,EAAkB;SAAlB,aAAmBC,KAAnB,EAAgC;AAC5B;AACA,WAAKH,QAAL,GAAgBG,KAAhB;AACH,KAHiB;qBAAA;;AAAA,GAAlB;AAoBA;;;;AAGOD,qDAAP;AACI,QAAI,CAAC,KAAKhB,aAAV,EAAyB;AACrB;AACH;;AACD,SAAKC,QAAL,GAAiBC,SAAjB,GAA6BgB,wBAA7B,CAAsD,KAAKlB,aAA3D;AACH,GALM;AAOP;;;;;;AAIOgB,iDAAP;AACI,WAAO,CAAP;AACH,GAFM;;AAGX;AAAC,CAtCD,CAA2CvB,mBAA3C","names":["RenderTargetTexture","__extends","scene","size","_super","undefined","_this","_renderTarget","getScene","getEngine","createMultiviewRenderTargetTexture","getRenderWidth","getRenderHeight","_texture","texture","isMultiview","format","samples","_getEngine","getCaps","maxSamples","_samples","Object","MultiviewRenderTarget","value","bindMultiviewFramebuffer"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Textures/MultiviewRenderTarget.ts"],"sourcesContent":["import { RenderTargetTexture } from \"../Textures/renderTargetTexture\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Constants } from \"../../Engines/constants\";\r\n\r\n/**\r\n * Renders to multiple views with a single draw call\r\n * @see https://www.khronos.org/registry/webgl/extensions/OVR_multiview2/\r\n */\r\nexport class MultiviewRenderTarget extends RenderTargetTexture {\r\n    public set samples(value: number) {\r\n        // We override this setter because multisampling is handled by framebufferTextureMultisampleMultiviewOVR\r\n        this._samples = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a multiview render target\r\n     * @param scene scene used with the render target\r\n     * @param size the size of the render target (used for each view)\r\n     */\r\n    constructor(scene?: Scene, size: number | { width: number; height: number } | { ratio: number } = 512) {\r\n        super(\"multiview rtt\", size, scene, false, true, Constants.TEXTURETYPE_UNSIGNED_INT, false, undefined, false, false, true, undefined, true);\r\n        this._renderTarget = this.getScene()!.getEngine().createMultiviewRenderTargetTexture(this.getRenderWidth(), this.getRenderHeight());\r\n        this._texture = this._renderTarget.texture!;\r\n        this._texture.isMultiview = true;\r\n        this._texture.format = Constants.TEXTUREFORMAT_RGBA;\r\n        this.samples = this._getEngine()!.getCaps().maxSamples || this.samples;\r\n        this._texture.samples = this._samples;\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    public _bindFrameBuffer() {\r\n        if (!this._renderTarget) {\r\n            return;\r\n        }\r\n        this.getScene()!.getEngine().bindMultiviewFramebuffer(this._renderTarget);\r\n    }\r\n\r\n    /**\r\n     * Gets the number of views the corresponding to the texture (eg. a MultiviewRenderTarget will have > 1)\r\n     * @returns the view count\r\n     */\r\n    public getViewCount() {\r\n        return 2;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}