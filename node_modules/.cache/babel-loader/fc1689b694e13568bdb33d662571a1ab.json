{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport { Matrix } from \"../Maths/math.vector.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { MultiRenderTarget } from \"../Materials/Textures/multiRenderTarget.js\";\nimport { MaterialHelper } from \"../Materials/materialHelper.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\nimport { _WarnImport } from \"../Misc/devTools.js\";\nimport { Material } from \"../Materials/material.js\";\nimport \"../Shaders/geometry.fragment.js\";\nimport \"../Shaders/geometry.vertex.js\";\nimport { MaterialFlags } from \"../Materials/materialFlags.js\";\n/**\n * This renderer is helpful to fill one of the render target with a geometry buffer.\n */\n\nvar GeometryBufferRenderer =\n/** @class */\nfunction () {\n  /**\n   * Creates a new G Buffer for the scene\n   * @param scene The scene the buffer belongs to\n   * @param ratio How big is the buffer related to the main canvas.\n   */\n  function GeometryBufferRenderer(scene, ratio) {\n    if (ratio === void 0) {\n      ratio = 1;\n    }\n    /**\n     * Dictionary used to store the previous transformation matrices of each rendered mesh\n     * in order to compute objects velocities when enableVelocity is set to \"true\"\n     * @hidden\n     */\n\n\n    this._previousTransformationMatrices = {};\n    /**\n     * Dictionary used to store the previous bones transformation matrices of each rendered mesh\n     * in order to compute objects velocities when enableVelocity is set to \"true\"\n     * @hidden\n     */\n\n    this._previousBonesTransformationMatrices = {};\n    /**\n     * Array used to store the ignored skinned meshes while computing velocity map (typically used by the motion blur post-process).\n     * Avoids computing bones velocities and computes only mesh's velocity itself (position, rotation, scaling).\n     */\n\n    this.excludedSkinnedMeshesFromVelocity = [];\n    /** Gets or sets a boolean indicating if transparent meshes should be rendered */\n\n    this.renderTransparentMeshes = true;\n    this._resizeObserver = null;\n    this._enablePosition = false;\n    this._enableVelocity = false;\n    this._enableReflectivity = false;\n    this._positionIndex = -1;\n    this._velocityIndex = -1;\n    this._reflectivityIndex = -1;\n    this._depthIndex = -1;\n    this._normalIndex = -1;\n    this._linkedWithPrePass = false;\n    this._scene = scene;\n    this._ratio = ratio;\n    this._useUbo = scene.getEngine().supportsUniformBuffers;\n\n    GeometryBufferRenderer._SceneComponentInitialization(this._scene); // Render target\n\n\n    this._createRenderTargets();\n  }\n  /**\n   * @param prePassRenderer\n   * @hidden\n   * Sets up internal structures to share outputs with PrePassRenderer\n   * This method should only be called by the PrePassRenderer itself\n   */\n\n\n  GeometryBufferRenderer.prototype._linkPrePassRenderer = function (prePassRenderer) {\n    this._linkedWithPrePass = true;\n    this._prePassRenderer = prePassRenderer;\n\n    if (this._multiRenderTarget) {\n      // prevents clearing of the RT since it's done by prepass\n      this._multiRenderTarget.onClearObservable.clear();\n\n      this._multiRenderTarget.onClearObservable.add(function () {// pass\n      });\n    }\n  };\n  /**\n   * @hidden\n   * Separates internal structures from PrePassRenderer so the geometry buffer can now operate by itself.\n   * This method should only be called by the PrePassRenderer itself\n   */\n\n\n  GeometryBufferRenderer.prototype._unlinkPrePassRenderer = function () {\n    this._linkedWithPrePass = false;\n\n    this._createRenderTargets();\n  };\n  /**\n   * @hidden\n   * Resets the geometry buffer layout\n   */\n\n\n  GeometryBufferRenderer.prototype._resetLayout = function () {\n    this._enablePosition = false;\n    this._enableReflectivity = false;\n    this._enableVelocity = false;\n    this._attachments = [];\n  };\n  /**\n   * @param geometryBufferType\n   * @param index\n   * @hidden\n   * Replaces a texture in the geometry buffer renderer\n   * Useful when linking textures of the prepass renderer\n   */\n\n\n  GeometryBufferRenderer.prototype._forceTextureType = function (geometryBufferType, index) {\n    if (geometryBufferType === GeometryBufferRenderer.POSITION_TEXTURE_TYPE) {\n      this._positionIndex = index;\n      this._enablePosition = true;\n    } else if (geometryBufferType === GeometryBufferRenderer.VELOCITY_TEXTURE_TYPE) {\n      this._velocityIndex = index;\n      this._enableVelocity = true;\n    } else if (geometryBufferType === GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE) {\n      this._reflectivityIndex = index;\n      this._enableReflectivity = true;\n    } else if (geometryBufferType === GeometryBufferRenderer.DEPTH_TEXTURE_TYPE) {\n      this._depthIndex = index;\n    } else if (geometryBufferType === GeometryBufferRenderer.NORMAL_TEXTURE_TYPE) {\n      this._normalIndex = index;\n    }\n  };\n  /**\n   * @param attachments\n   * @hidden\n   * Sets texture attachments\n   * Useful when linking textures of the prepass renderer\n   */\n\n\n  GeometryBufferRenderer.prototype._setAttachments = function (attachments) {\n    this._attachments = attachments;\n  };\n  /**\n   * @param internalTexture\n   * @hidden\n   * Replaces the first texture which is hard coded as a depth texture in the geometry buffer\n   * Useful when linking textures of the prepass renderer\n   */\n\n\n  GeometryBufferRenderer.prototype._linkInternalTexture = function (internalTexture) {\n    this._multiRenderTarget.setInternalTexture(internalTexture, 0, false);\n  };\n\n  Object.defineProperty(GeometryBufferRenderer.prototype, \"renderList\", {\n    /**\n     * Gets the render list (meshes to be rendered) used in the G buffer.\n     */\n    get: function get() {\n      return this._multiRenderTarget.renderList;\n    },\n\n    /**\n     * Set the render list (meshes to be rendered) used in the G buffer.\n     */\n    set: function set(meshes) {\n      this._multiRenderTarget.renderList = meshes;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(GeometryBufferRenderer.prototype, \"isSupported\", {\n    /**\n     * Gets whether or not G buffer are supported by the running hardware.\n     * This requires draw buffer supports\n     */\n    get: function get() {\n      return this._multiRenderTarget.isSupported;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Returns the index of the given texture type in the G-Buffer textures array\n   * @param textureType The texture type constant. For example GeometryBufferRenderer.POSITION_TEXTURE_INDEX\n   * @returns the index of the given texture type in the G-Buffer textures array\n   */\n\n  GeometryBufferRenderer.prototype.getTextureIndex = function (textureType) {\n    switch (textureType) {\n      case GeometryBufferRenderer.POSITION_TEXTURE_TYPE:\n        return this._positionIndex;\n\n      case GeometryBufferRenderer.VELOCITY_TEXTURE_TYPE:\n        return this._velocityIndex;\n\n      case GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE:\n        return this._reflectivityIndex;\n\n      default:\n        return -1;\n    }\n  };\n\n  Object.defineProperty(GeometryBufferRenderer.prototype, \"enablePosition\", {\n    /**\n     * Gets a boolean indicating if objects positions are enabled for the G buffer.\n     */\n    get: function get() {\n      return this._enablePosition;\n    },\n\n    /**\n     * Sets whether or not objects positions are enabled for the G buffer.\n     */\n    set: function set(enable) {\n      this._enablePosition = enable; // PrePass handles index and texture links\n\n      if (!this._linkedWithPrePass) {\n        this.dispose();\n\n        this._createRenderTargets();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(GeometryBufferRenderer.prototype, \"enableVelocity\", {\n    /**\n     * Gets a boolean indicating if objects velocities are enabled for the G buffer.\n     */\n    get: function get() {\n      return this._enableVelocity;\n    },\n\n    /**\n     * Sets whether or not objects velocities are enabled for the G buffer.\n     */\n    set: function set(enable) {\n      this._enableVelocity = enable;\n\n      if (!enable) {\n        this._previousTransformationMatrices = {};\n      }\n\n      if (!this._linkedWithPrePass) {\n        this.dispose();\n\n        this._createRenderTargets();\n      }\n\n      this._scene.needsPreviousWorldMatrices = enable;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(GeometryBufferRenderer.prototype, \"enableReflectivity\", {\n    /**\n     * Gets a boolean indicating if objects roughness are enabled in the G buffer.\n     */\n    get: function get() {\n      return this._enableReflectivity;\n    },\n\n    /**\n     * Sets whether or not objects roughness are enabled for the G buffer.\n     */\n    set: function set(enable) {\n      this._enableReflectivity = enable;\n\n      if (!this._linkedWithPrePass) {\n        this.dispose();\n\n        this._createRenderTargets();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(GeometryBufferRenderer.prototype, \"scene\", {\n    /**\n     * Gets the scene associated with the buffer.\n     */\n    get: function get() {\n      return this._scene;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(GeometryBufferRenderer.prototype, \"ratio\", {\n    /**\n     * Gets the ratio used by the buffer during its creation.\n     * How big is the buffer related to the main canvas.\n     */\n    get: function get() {\n      return this._ratio;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Checks whether everything is ready to render a submesh to the G buffer.\n   * @param subMesh the submesh to check readiness for\n   * @param useInstances is the mesh drawn using instance or not\n   * @returns true if ready otherwise false\n   */\n\n  GeometryBufferRenderer.prototype.isReady = function (subMesh, useInstances) {\n    var material = subMesh.getMaterial();\n\n    if (material && material.disableDepthWrite) {\n      return false;\n    }\n\n    var defines = [];\n    var attribs = [VertexBuffer.PositionKind, VertexBuffer.NormalKind];\n    var mesh = subMesh.getMesh(); // Alpha test\n\n    if (material) {\n      var needUv = false;\n\n      if (material.needAlphaTesting() && material.getAlphaTestTexture()) {\n        defines.push(\"#define ALPHATEST\");\n        defines.push(\"#define ALPHATEST_UV\".concat(material.getAlphaTestTexture().coordinatesIndex + 1));\n        needUv = true;\n      }\n\n      if (material.bumpTexture && MaterialFlags.BumpTextureEnabled) {\n        defines.push(\"#define BUMP\");\n        defines.push(\"#define BUMP_UV\".concat(material.bumpTexture.coordinatesIndex + 1));\n        needUv = true;\n      }\n\n      if (this._enableReflectivity) {\n        if (material.specularTexture) {\n          defines.push(\"#define HAS_SPECULAR\");\n          defines.push(\"#define REFLECTIVITY_UV\".concat(material.specularTexture.coordinatesIndex + 1));\n          needUv = true;\n        } else if (material.reflectivityTexture) {\n          defines.push(\"#define HAS_REFLECTIVITY\");\n          defines.push(\"#define REFLECTIVITY_UV\".concat(material.reflectivityTexture.coordinatesIndex + 1));\n          needUv = true;\n        }\n      }\n\n      if (needUv) {\n        defines.push(\"#define NEED_UV\");\n\n        if (mesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\n          attribs.push(VertexBuffer.UVKind);\n          defines.push(\"#define UV1\");\n        }\n\n        if (mesh.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\n          attribs.push(VertexBuffer.UV2Kind);\n          defines.push(\"#define UV2\");\n        }\n      }\n    } // PrePass\n\n\n    if (this._linkedWithPrePass) {\n      defines.push(\"#define PREPASS\");\n\n      if (this._depthIndex !== -1) {\n        defines.push(\"#define DEPTH_INDEX \" + this._depthIndex);\n        defines.push(\"#define PREPASS_DEPTH\");\n      }\n\n      if (this._normalIndex !== -1) {\n        defines.push(\"#define NORMAL_INDEX \" + this._normalIndex);\n        defines.push(\"#define PREPASS_NORMAL\");\n      }\n    } // Buffers\n\n\n    if (this._enablePosition) {\n      defines.push(\"#define POSITION\");\n      defines.push(\"#define POSITION_INDEX \" + this._positionIndex);\n    }\n\n    if (this._enableVelocity) {\n      defines.push(\"#define VELOCITY\");\n      defines.push(\"#define VELOCITY_INDEX \" + this._velocityIndex);\n\n      if (this.excludedSkinnedMeshesFromVelocity.indexOf(mesh) === -1) {\n        defines.push(\"#define BONES_VELOCITY_ENABLED\");\n      }\n    }\n\n    if (this._enableReflectivity) {\n      defines.push(\"#define REFLECTIVITY\");\n      defines.push(\"#define REFLECTIVITY_INDEX \" + this._reflectivityIndex);\n    } // Bones\n\n\n    if (mesh.useBones && mesh.computeBonesUsingShaders) {\n      attribs.push(VertexBuffer.MatricesIndicesKind);\n      attribs.push(VertexBuffer.MatricesWeightsKind);\n\n      if (mesh.numBoneInfluencers > 4) {\n        attribs.push(VertexBuffer.MatricesIndicesExtraKind);\n        attribs.push(VertexBuffer.MatricesWeightsExtraKind);\n      }\n\n      defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\n      defines.push(\"#define BonesPerMesh \" + (mesh.skeleton ? mesh.skeleton.bones.length + 1 : 0));\n    } else {\n      defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\n    } // Morph targets\n\n\n    var morphTargetManager = mesh.morphTargetManager;\n    var numMorphInfluencers = 0;\n\n    if (morphTargetManager) {\n      if (morphTargetManager.numInfluencers > 0) {\n        numMorphInfluencers = morphTargetManager.numInfluencers;\n        defines.push(\"#define MORPHTARGETS\");\n        defines.push(\"#define NUM_MORPH_INFLUENCERS \" + numMorphInfluencers);\n\n        if (morphTargetManager.isUsingTextureForTargets) {\n          defines.push(\"#define MORPHTARGETS_TEXTURE\");\n        }\n\n        MaterialHelper.PrepareAttributesForMorphTargetsInfluencers(attribs, mesh, numMorphInfluencers);\n      }\n    } // Instances\n\n\n    if (useInstances) {\n      defines.push(\"#define INSTANCES\");\n      MaterialHelper.PushAttributesForInstances(attribs, this._enableVelocity);\n\n      if (subMesh.getRenderingMesh().hasThinInstances) {\n        defines.push(\"#define THIN_INSTANCES\");\n      }\n    } // Setup textures count\n\n\n    if (this._linkedWithPrePass) {\n      defines.push(\"#define RENDER_TARGET_COUNT \" + this._attachments.length);\n    } else {\n      defines.push(\"#define RENDER_TARGET_COUNT \" + this._multiRenderTarget.textures.length);\n    } // Get correct effect\n\n\n    var drawWrapper = subMesh._getDrawWrapper(undefined, true);\n\n    var cachedDefines = drawWrapper.defines;\n    var join = defines.join(\"\\n\");\n\n    if (cachedDefines !== join) {\n      drawWrapper.setEffect(this._scene.getEngine().createEffect(\"geometry\", {\n        attributes: attribs,\n        uniformsNames: [\"world\", \"mBones\", \"viewProjection\", \"diffuseMatrix\", \"view\", \"previousWorld\", \"previousViewProjection\", \"mPreviousBones\", \"bumpMatrix\", \"reflectivityMatrix\", \"vTangentSpaceParams\", \"vBumpInfos\", \"morphTargetInfluences\", \"morphTargetTextureInfo\", \"morphTargetTextureIndices\"],\n        samplers: [\"diffuseSampler\", \"bumpSampler\", \"reflectivitySampler\", \"morphTargets\"],\n        defines: join,\n        onCompiled: null,\n        fallbacks: null,\n        onError: null,\n        uniformBuffersNames: [\"Scene\"],\n        indexParameters: {\n          buffersCount: this._multiRenderTarget.textures.length - 1,\n          maxSimultaneousMorphTargets: numMorphInfluencers\n        }\n      }, this._scene.getEngine()), join);\n    }\n\n    return drawWrapper.effect.isReady();\n  };\n  /**\n   * Gets the current underlying G Buffer.\n   * @returns the buffer\n   */\n\n\n  GeometryBufferRenderer.prototype.getGBuffer = function () {\n    return this._multiRenderTarget;\n  };\n\n  Object.defineProperty(GeometryBufferRenderer.prototype, \"samples\", {\n    /**\n     * Gets the number of samples used to render the buffer (anti aliasing).\n     */\n    get: function get() {\n      return this._multiRenderTarget.samples;\n    },\n\n    /**\n     * Sets the number of samples used to render the buffer (anti aliasing).\n     */\n    set: function set(value) {\n      this._multiRenderTarget.samples = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Disposes the renderer and frees up associated resources.\n   */\n\n  GeometryBufferRenderer.prototype.dispose = function () {\n    if (this._resizeObserver) {\n      var engine = this._scene.getEngine();\n\n      engine.onResizeObservable.remove(this._resizeObserver);\n      this._resizeObserver = null;\n    }\n\n    this.getGBuffer().dispose();\n  };\n\n  GeometryBufferRenderer.prototype._assignRenderTargetIndices = function () {\n    var textureNames = [];\n    var count = 2;\n    textureNames.push(\"gBuffer_Depth\", \"gBuffer_Normal\");\n\n    if (this._enablePosition) {\n      this._positionIndex = count;\n      count++;\n      textureNames.push(\"gBuffer_Position\");\n    }\n\n    if (this._enableVelocity) {\n      this._velocityIndex = count;\n      count++;\n      textureNames.push(\"gBuffer_Velocity\");\n    }\n\n    if (this._enableReflectivity) {\n      this._reflectivityIndex = count;\n      count++;\n      textureNames.push(\"gBuffer_Reflectivity\");\n    }\n\n    return [count, textureNames];\n  };\n\n  GeometryBufferRenderer.prototype._createRenderTargets = function () {\n    var _this = this;\n\n    var engine = this._scene.getEngine();\n\n    var _a = this._assignRenderTargetIndices(),\n        count = _a[0],\n        textureNames = _a[1];\n\n    var type = 0;\n\n    if (engine._caps.textureFloat && engine._caps.textureFloatLinearFiltering) {\n      type = 1;\n    } else if (engine._caps.textureHalfFloat && engine._caps.textureHalfFloatLinearFiltering) {\n      type = 2;\n    }\n\n    this._multiRenderTarget = new MultiRenderTarget(\"gBuffer\", {\n      width: engine.getRenderWidth() * this._ratio,\n      height: engine.getRenderHeight() * this._ratio\n    }, count, this._scene, {\n      generateMipMaps: false,\n      generateDepthTexture: true,\n      defaultType: type\n    }, textureNames.concat(\"gBuffer_DepthBuffer\"));\n\n    if (!this.isSupported) {\n      return;\n    }\n\n    this._multiRenderTarget.wrapU = Texture.CLAMP_ADDRESSMODE;\n    this._multiRenderTarget.wrapV = Texture.CLAMP_ADDRESSMODE;\n    this._multiRenderTarget.refreshRate = 1;\n    this._multiRenderTarget.renderParticles = false;\n    this._multiRenderTarget.renderList = null; // set default depth value to 1.0 (far away)\n\n    this._multiRenderTarget.onClearObservable.add(function (engine) {\n      engine.clear(new Color4(0.0, 0.0, 0.0, 0.0), true, true, true);\n    });\n\n    this._resizeObserver = engine.onResizeObservable.add(function () {\n      if (_this._multiRenderTarget) {\n        _this._multiRenderTarget.resize({\n          width: engine.getRenderWidth() * _this._ratio,\n          height: engine.getRenderHeight() * _this._ratio\n        });\n      }\n    }); // Custom render function\n\n    var renderSubMesh = function renderSubMesh(subMesh) {\n      var renderingMesh = subMesh.getRenderingMesh();\n      var effectiveMesh = subMesh.getEffectiveMesh();\n      var scene = _this._scene;\n      var engine = scene.getEngine();\n      var material = subMesh.getMaterial();\n\n      if (!material) {\n        return;\n      }\n\n      effectiveMesh._internalAbstractMeshDataInfo._isActiveIntermediate = false; // Velocity\n\n      if (_this._enableVelocity && !_this._previousTransformationMatrices[effectiveMesh.uniqueId]) {\n        _this._previousTransformationMatrices[effectiveMesh.uniqueId] = {\n          world: Matrix.Identity(),\n          viewProjection: scene.getTransformMatrix()\n        };\n\n        if (renderingMesh.skeleton) {\n          var bonesTransformations = renderingMesh.skeleton.getTransformMatrices(renderingMesh);\n          _this._previousBonesTransformationMatrices[renderingMesh.uniqueId] = _this._copyBonesTransformationMatrices(bonesTransformations, new Float32Array(bonesTransformations.length));\n        }\n      } // Managing instances\n\n\n      var batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\n\n      if (batch.mustReturn) {\n        return;\n      }\n\n      var hardwareInstancedRendering = engine.getCaps().instancedArrays && (batch.visibleInstances[subMesh._id] !== null || renderingMesh.hasThinInstances);\n      var world = effectiveMesh.getWorldMatrix();\n\n      if (_this.isReady(subMesh, hardwareInstancedRendering)) {\n        var drawWrapper = subMesh._getDrawWrapper();\n\n        if (!drawWrapper) {\n          return;\n        }\n\n        var effect_1 = drawWrapper.effect;\n        engine.enableEffect(drawWrapper);\n\n        if (!hardwareInstancedRendering) {\n          renderingMesh._bind(subMesh, effect_1, material.fillMode);\n        }\n\n        if (!_this._useUbo) {\n          effect_1.setMatrix(\"viewProjection\", scene.getTransformMatrix());\n          effect_1.setMatrix(\"view\", scene.getViewMatrix());\n        } else {\n          MaterialHelper.BindSceneUniformBuffer(effect_1, _this._scene.getSceneUniformBuffer());\n\n          _this._scene.finalizeSceneUbo();\n        }\n\n        if (material) {\n          var sideOrientation = void 0;\n          var instanceDataStorage = renderingMesh._instanceDataStorage;\n\n          if (!instanceDataStorage.isFrozen && (material.backFaceCulling || renderingMesh.overrideMaterialSideOrientation !== null)) {\n            var mainDeterminant = effectiveMesh._getWorldMatrixDeterminant();\n\n            sideOrientation = renderingMesh.overrideMaterialSideOrientation;\n\n            if (sideOrientation === null) {\n              sideOrientation = material.sideOrientation;\n            }\n\n            if (mainDeterminant < 0) {\n              sideOrientation = sideOrientation === Material.ClockWiseSideOrientation ? Material.CounterClockWiseSideOrientation : Material.ClockWiseSideOrientation;\n            }\n          } else {\n            sideOrientation = instanceDataStorage.sideOrientation;\n          }\n\n          material._preBind(drawWrapper, sideOrientation); // Alpha test\n\n\n          if (material.needAlphaTesting()) {\n            var alphaTexture = material.getAlphaTestTexture();\n\n            if (alphaTexture) {\n              effect_1.setTexture(\"diffuseSampler\", alphaTexture);\n              effect_1.setMatrix(\"diffuseMatrix\", alphaTexture.getTextureMatrix());\n            }\n          } // Bump\n\n\n          if (material.bumpTexture && scene.getEngine().getCaps().standardDerivatives && MaterialFlags.BumpTextureEnabled) {\n            effect_1.setFloat3(\"vBumpInfos\", material.bumpTexture.coordinatesIndex, 1.0 / material.bumpTexture.level, material.parallaxScaleBias);\n            effect_1.setMatrix(\"bumpMatrix\", material.bumpTexture.getTextureMatrix());\n            effect_1.setTexture(\"bumpSampler\", material.bumpTexture);\n            effect_1.setFloat2(\"vTangentSpaceParams\", material.invertNormalMapX ? -1.0 : 1.0, material.invertNormalMapY ? -1.0 : 1.0);\n          } // Roughness\n\n\n          if (_this._enableReflectivity) {\n            if (material.specularTexture) {\n              effect_1.setMatrix(\"reflectivityMatrix\", material.specularTexture.getTextureMatrix());\n              effect_1.setTexture(\"reflectivitySampler\", material.specularTexture);\n            } else if (material.reflectivityTexture) {\n              effect_1.setMatrix(\"reflectivityMatrix\", material.reflectivityTexture.getTextureMatrix());\n              effect_1.setTexture(\"reflectivitySampler\", material.reflectivityTexture);\n            }\n          }\n        } // Bones\n\n\n        if (renderingMesh.useBones && renderingMesh.computeBonesUsingShaders && renderingMesh.skeleton) {\n          effect_1.setMatrices(\"mBones\", renderingMesh.skeleton.getTransformMatrices(renderingMesh));\n\n          if (_this._enableVelocity) {\n            effect_1.setMatrices(\"mPreviousBones\", _this._previousBonesTransformationMatrices[renderingMesh.uniqueId]);\n          }\n        } // Morph targets\n\n\n        MaterialHelper.BindMorphTargetParameters(renderingMesh, effect_1);\n\n        if (renderingMesh.morphTargetManager && renderingMesh.morphTargetManager.isUsingTextureForTargets) {\n          renderingMesh.morphTargetManager._bind(effect_1);\n        } // Velocity\n\n\n        if (_this._enableVelocity) {\n          effect_1.setMatrix(\"previousWorld\", _this._previousTransformationMatrices[effectiveMesh.uniqueId].world);\n          effect_1.setMatrix(\"previousViewProjection\", _this._previousTransformationMatrices[effectiveMesh.uniqueId].viewProjection);\n        }\n\n        if (hardwareInstancedRendering && renderingMesh.hasThinInstances) {\n          effect_1.setMatrix(\"world\", world);\n        } // Draw\n\n\n        renderingMesh._processRendering(effectiveMesh, subMesh, effect_1, material.fillMode, batch, hardwareInstancedRendering, function (isInstance, w) {\n          if (!isInstance) {\n            effect_1.setMatrix(\"world\", w);\n          }\n        });\n      } // Velocity\n\n\n      if (_this._enableVelocity) {\n        _this._previousTransformationMatrices[effectiveMesh.uniqueId].world = world.clone();\n        _this._previousTransformationMatrices[effectiveMesh.uniqueId].viewProjection = _this._scene.getTransformMatrix().clone();\n\n        if (renderingMesh.skeleton) {\n          _this._copyBonesTransformationMatrices(renderingMesh.skeleton.getTransformMatrices(renderingMesh), _this._previousBonesTransformationMatrices[effectiveMesh.uniqueId]);\n        }\n      }\n    };\n\n    this._multiRenderTarget.customIsReadyFunction = function (mesh, refreshRate) {\n      if (!mesh.isReady(false)) {\n        return false;\n      }\n\n      if (refreshRate === 0 && mesh.subMeshes) {\n        // full check: check that the effects are ready\n        for (var i = 0; i < mesh.subMeshes.length; ++i) {\n          var subMesh = mesh.subMeshes[i];\n          var material = subMesh.getMaterial();\n          var renderingMesh = subMesh.getRenderingMesh();\n\n          if (!material) {\n            continue;\n          }\n\n          var batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\n\n          var hardwareInstancedRendering = engine.getCaps().instancedArrays && (batch.visibleInstances[subMesh._id] !== null || renderingMesh.hasThinInstances);\n\n          if (!_this.isReady(subMesh, hardwareInstancedRendering)) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    };\n\n    this._multiRenderTarget.customRenderFunction = function (opaqueSubMeshes, alphaTestSubMeshes, transparentSubMeshes, depthOnlySubMeshes) {\n      var index;\n\n      if (_this._linkedWithPrePass) {\n        if (!_this._prePassRenderer.enabled) {\n          return;\n        }\n\n        _this._scene.getEngine().bindAttachments(_this._attachments);\n      }\n\n      if (depthOnlySubMeshes.length) {\n        engine.setColorWrite(false);\n\n        for (index = 0; index < depthOnlySubMeshes.length; index++) {\n          renderSubMesh(depthOnlySubMeshes.data[index]);\n        }\n\n        engine.setColorWrite(true);\n      }\n\n      for (index = 0; index < opaqueSubMeshes.length; index++) {\n        renderSubMesh(opaqueSubMeshes.data[index]);\n      }\n\n      engine.setDepthWrite(false);\n\n      for (index = 0; index < alphaTestSubMeshes.length; index++) {\n        renderSubMesh(alphaTestSubMeshes.data[index]);\n      }\n\n      if (_this.renderTransparentMeshes) {\n        for (index = 0; index < transparentSubMeshes.length; index++) {\n          renderSubMesh(transparentSubMeshes.data[index]);\n        }\n      }\n\n      engine.setDepthWrite(true);\n    };\n  }; // Copies the bones transformation matrices into the target array and returns the target's reference\n\n\n  GeometryBufferRenderer.prototype._copyBonesTransformationMatrices = function (source, target) {\n    for (var i = 0; i < source.length; i++) {\n      target[i] = source[i];\n    }\n\n    return target;\n  };\n  /**\n   * Constant used to retrieve the depth texture index in the G-Buffer textures array\n   * using getIndex(GeometryBufferRenderer.DEPTH_TEXTURE_INDEX)\n   */\n\n\n  GeometryBufferRenderer.DEPTH_TEXTURE_TYPE = 0;\n  /**\n   * Constant used to retrieve the normal texture index in the G-Buffer textures array\n   * using getIndex(GeometryBufferRenderer.NORMAL_TEXTURE_INDEX)\n   */\n\n  GeometryBufferRenderer.NORMAL_TEXTURE_TYPE = 1;\n  /**\n   * Constant used to retrieve the position texture index in the G-Buffer textures array\n   * using getIndex(GeometryBufferRenderer.POSITION_TEXTURE_INDEX)\n   */\n\n  GeometryBufferRenderer.POSITION_TEXTURE_TYPE = 2;\n  /**\n   * Constant used to retrieve the velocity texture index in the G-Buffer textures array\n   * using getIndex(GeometryBufferRenderer.VELOCITY_TEXTURE_INDEX)\n   */\n\n  GeometryBufferRenderer.VELOCITY_TEXTURE_TYPE = 3;\n  /**\n   * Constant used to retrieve the reflectivity texture index in the G-Buffer textures array\n   * using the getIndex(GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE)\n   */\n\n  GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE = 4;\n  /**\n   * @param _\n   * @hidden\n   */\n\n  GeometryBufferRenderer._SceneComponentInitialization = function (_) {\n    throw _WarnImport(\"GeometryBufferRendererSceneComponent\");\n  };\n\n  return GeometryBufferRenderer;\n}();\n\nexport { GeometryBufferRenderer };","map":{"version":3,"mappings":"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","names":["Matrix","VertexBuffer","Texture","MultiRenderTarget","MaterialHelper","Color4","_WarnImport","Material","MaterialFlags","scene","ratio","_scene","_ratio","_useUbo","getEngine","supportsUniformBuffers","GeometryBufferRenderer","_SceneComponentInitialization","_createRenderTargets","prePassRenderer","_linkedWithPrePass","_prePassRenderer","_multiRenderTarget","onClearObservable","clear","add","_enablePosition","_enableReflectivity","_enableVelocity","_attachments","geometryBufferType","index","POSITION_TEXTURE_TYPE","_positionIndex","VELOCITY_TEXTURE_TYPE","_velocityIndex","REFLECTIVITY_TEXTURE_TYPE","_reflectivityIndex","DEPTH_TEXTURE_TYPE","_depthIndex","NORMAL_TEXTURE_TYPE","_normalIndex","attachments","internalTexture","setInternalTexture","Object","renderList","meshes","isSupported","textureType","enable","dispose","_previousTransformationMatrices","needsPreviousWorldMatrices","subMesh","useInstances","material","getMaterial","disableDepthWrite","defines","attribs","PositionKind","NormalKind","mesh","getMesh","needUv","needAlphaTesting","getAlphaTestTexture","push","coordinatesIndex","bumpTexture","BumpTextureEnabled","specularTexture","reflectivityTexture","isVerticesDataPresent","UVKind","UV2Kind","excludedSkinnedMeshesFromVelocity","indexOf","useBones","computeBonesUsingShaders","MatricesIndicesKind","MatricesWeightsKind","numBoneInfluencers","MatricesIndicesExtraKind","MatricesWeightsExtraKind","skeleton","bones","length","morphTargetManager","numMorphInfluencers","numInfluencers","isUsingTextureForTargets","PrepareAttributesForMorphTargetsInfluencers","PushAttributesForInstances","getRenderingMesh","hasThinInstances","textures","drawWrapper","_getDrawWrapper","undefined","cachedDefines","join","setEffect","createEffect","attributes","uniformsNames","samplers","onCompiled","fallbacks","onError","uniformBuffersNames","indexParameters","buffersCount","maxSimultaneousMorphTargets","effect","isReady","samples","value","_resizeObserver","engine","onResizeObservable","remove","getGBuffer","textureNames","count","_assignRenderTargetIndices","type","_caps","textureFloat","textureFloatLinearFiltering","textureHalfFloat","textureHalfFloatLinearFiltering","width","getRenderWidth","height","getRenderHeight","generateMipMaps","generateDepthTexture","defaultType","concat","wrapU","CLAMP_ADDRESSMODE","wrapV","refreshRate","renderParticles","_this","resize","renderSubMesh","renderingMesh","effectiveMesh","getEffectiveMesh","_internalAbstractMeshDataInfo","_isActiveIntermediate","uniqueId","world","Identity","viewProjection","getTransformMatrix","bonesTransformations","getTransformMatrices","_previousBonesTransformationMatrices","_copyBonesTransformationMatrices","Float32Array","batch","_getInstancesRenderList","_id","getReplacementMesh","mustReturn","hardwareInstancedRendering","getCaps","instancedArrays","visibleInstances","getWorldMatrix","effect_1","enableEffect","_bind","fillMode","setMatrix","getViewMatrix","BindSceneUniformBuffer","getSceneUniformBuffer","finalizeSceneUbo","sideOrientation","instanceDataStorage","_instanceDataStorage","isFrozen","backFaceCulling","overrideMaterialSideOrientation","mainDeterminant","_getWorldMatrixDeterminant","ClockWiseSideOrientation","CounterClockWiseSideOrientation","_preBind","alphaTexture","setTexture","getTextureMatrix","standardDerivatives","setFloat3","level","parallaxScaleBias","setFloat2","invertNormalMapX","invertNormalMapY","setMatrices","BindMorphTargetParameters","_processRendering","isInstance","w","clone","customIsReadyFunction","subMeshes","i","customRenderFunction","opaqueSubMeshes","alphaTestSubMeshes","transparentSubMeshes","depthOnlySubMeshes","enabled","bindAttachments","setColorWrite","data","setDepthWrite","renderTransparentMeshes","source","target","_"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Rendering/geometryBufferRenderer.ts"],"sourcesContent":["import { Matrix } from \"../Maths/math.vector\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { SubMesh } from \"../Meshes/subMesh\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { SmartArray } from \"../Misc/smartArray\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\nimport { MultiRenderTarget } from \"../Materials/Textures/multiRenderTarget\";\r\nimport type { PrePassRenderer } from \"../Rendering/prePassRenderer\";\r\nimport { MaterialHelper } from \"../Materials/materialHelper\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Material } from \"../Materials/material\";\r\n\r\nimport \"../Shaders/geometry.fragment\";\r\nimport \"../Shaders/geometry.vertex\";\r\nimport { MaterialFlags } from \"../Materials/materialFlags\";\r\n\r\n/** @hidden */\r\ninterface ISavedTransformationMatrix {\r\n    world: Matrix;\r\n    viewProjection: Matrix;\r\n}\r\n\r\n/**\r\n * This renderer is helpful to fill one of the render target with a geometry buffer.\r\n */\r\nexport class GeometryBufferRenderer {\r\n    /**\r\n     * Constant used to retrieve the depth texture index in the G-Buffer textures array\r\n     * using getIndex(GeometryBufferRenderer.DEPTH_TEXTURE_INDEX)\r\n     */\r\n    public static readonly DEPTH_TEXTURE_TYPE = 0;\r\n    /**\r\n     * Constant used to retrieve the normal texture index in the G-Buffer textures array\r\n     * using getIndex(GeometryBufferRenderer.NORMAL_TEXTURE_INDEX)\r\n     */\r\n    public static readonly NORMAL_TEXTURE_TYPE = 1;\r\n    /**\r\n     * Constant used to retrieve the position texture index in the G-Buffer textures array\r\n     * using getIndex(GeometryBufferRenderer.POSITION_TEXTURE_INDEX)\r\n     */\r\n    public static readonly POSITION_TEXTURE_TYPE = 2;\r\n    /**\r\n     * Constant used to retrieve the velocity texture index in the G-Buffer textures array\r\n     * using getIndex(GeometryBufferRenderer.VELOCITY_TEXTURE_INDEX)\r\n     */\r\n    public static readonly VELOCITY_TEXTURE_TYPE = 3;\r\n    /**\r\n     * Constant used to retrieve the reflectivity texture index in the G-Buffer textures array\r\n     * using the getIndex(GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE)\r\n     */\r\n    public static readonly REFLECTIVITY_TEXTURE_TYPE = 4;\r\n\r\n    /**\r\n     * Dictionary used to store the previous transformation matrices of each rendered mesh\r\n     * in order to compute objects velocities when enableVelocity is set to \"true\"\r\n     * @hidden\r\n     */\r\n    public _previousTransformationMatrices: { [index: number]: ISavedTransformationMatrix } = {};\r\n    /**\r\n     * Dictionary used to store the previous bones transformation matrices of each rendered mesh\r\n     * in order to compute objects velocities when enableVelocity is set to \"true\"\r\n     * @hidden\r\n     */\r\n    public _previousBonesTransformationMatrices: { [index: number]: Float32Array } = {};\r\n    /**\r\n     * Array used to store the ignored skinned meshes while computing velocity map (typically used by the motion blur post-process).\r\n     * Avoids computing bones velocities and computes only mesh's velocity itself (position, rotation, scaling).\r\n     */\r\n    public excludedSkinnedMeshesFromVelocity: AbstractMesh[] = [];\r\n\r\n    /** Gets or sets a boolean indicating if transparent meshes should be rendered */\r\n    public renderTransparentMeshes = true;\r\n\r\n    private _scene: Scene;\r\n    private _resizeObserver: Nullable<Observer<Engine>> = null;\r\n    private _multiRenderTarget: MultiRenderTarget;\r\n    private _ratio: number;\r\n    private _enablePosition: boolean = false;\r\n    private _enableVelocity: boolean = false;\r\n    private _enableReflectivity: boolean = false;\r\n\r\n    private _positionIndex: number = -1;\r\n    private _velocityIndex: number = -1;\r\n    private _reflectivityIndex: number = -1;\r\n    private _depthIndex: number = -1;\r\n    private _normalIndex: number = -1;\r\n\r\n    private _linkedWithPrePass: boolean = false;\r\n    private _prePassRenderer: PrePassRenderer;\r\n    private _attachments: number[];\r\n    private _useUbo: boolean;\r\n\r\n    protected _cachedDefines: string;\r\n\r\n    /**\r\n     * @param prePassRenderer\r\n     * @hidden\r\n     * Sets up internal structures to share outputs with PrePassRenderer\r\n     * This method should only be called by the PrePassRenderer itself\r\n     */\r\n    public _linkPrePassRenderer(prePassRenderer: PrePassRenderer) {\r\n        this._linkedWithPrePass = true;\r\n        this._prePassRenderer = prePassRenderer;\r\n\r\n        if (this._multiRenderTarget) {\r\n            // prevents clearing of the RT since it's done by prepass\r\n            this._multiRenderTarget.onClearObservable.clear();\r\n            this._multiRenderTarget.onClearObservable.add(() => {\r\n                // pass\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Separates internal structures from PrePassRenderer so the geometry buffer can now operate by itself.\r\n     * This method should only be called by the PrePassRenderer itself\r\n     */\r\n    public _unlinkPrePassRenderer() {\r\n        this._linkedWithPrePass = false;\r\n        this._createRenderTargets();\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     * Resets the geometry buffer layout\r\n     */\r\n    public _resetLayout() {\r\n        this._enablePosition = false;\r\n        this._enableReflectivity = false;\r\n        this._enableVelocity = false;\r\n        this._attachments = [];\r\n    }\r\n\r\n    /**\r\n     * @param geometryBufferType\r\n     * @param index\r\n     * @hidden\r\n     * Replaces a texture in the geometry buffer renderer\r\n     * Useful when linking textures of the prepass renderer\r\n     */\r\n    public _forceTextureType(geometryBufferType: number, index: number) {\r\n        if (geometryBufferType === GeometryBufferRenderer.POSITION_TEXTURE_TYPE) {\r\n            this._positionIndex = index;\r\n            this._enablePosition = true;\r\n        } else if (geometryBufferType === GeometryBufferRenderer.VELOCITY_TEXTURE_TYPE) {\r\n            this._velocityIndex = index;\r\n            this._enableVelocity = true;\r\n        } else if (geometryBufferType === GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE) {\r\n            this._reflectivityIndex = index;\r\n            this._enableReflectivity = true;\r\n        } else if (geometryBufferType === GeometryBufferRenderer.DEPTH_TEXTURE_TYPE) {\r\n            this._depthIndex = index;\r\n        } else if (geometryBufferType === GeometryBufferRenderer.NORMAL_TEXTURE_TYPE) {\r\n            this._normalIndex = index;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param attachments\r\n     * @hidden\r\n     * Sets texture attachments\r\n     * Useful when linking textures of the prepass renderer\r\n     */\r\n    public _setAttachments(attachments: number[]) {\r\n        this._attachments = attachments;\r\n    }\r\n\r\n    /**\r\n     * @param internalTexture\r\n     * @hidden\r\n     * Replaces the first texture which is hard coded as a depth texture in the geometry buffer\r\n     * Useful when linking textures of the prepass renderer\r\n     */\r\n    public _linkInternalTexture(internalTexture: InternalTexture) {\r\n        this._multiRenderTarget.setInternalTexture(internalTexture, 0, false);\r\n    }\r\n\r\n    /**\r\n     * Gets the render list (meshes to be rendered) used in the G buffer.\r\n     */\r\n    public get renderList() {\r\n        return this._multiRenderTarget.renderList;\r\n    }\r\n\r\n    /**\r\n     * Set the render list (meshes to be rendered) used in the G buffer.\r\n     */\r\n    public set renderList(meshes: Nullable<AbstractMesh[]>) {\r\n        this._multiRenderTarget.renderList = meshes;\r\n    }\r\n\r\n    /**\r\n     * Gets whether or not G buffer are supported by the running hardware.\r\n     * This requires draw buffer supports\r\n     */\r\n    public get isSupported(): boolean {\r\n        return this._multiRenderTarget.isSupported;\r\n    }\r\n\r\n    /**\r\n     * Returns the index of the given texture type in the G-Buffer textures array\r\n     * @param textureType The texture type constant. For example GeometryBufferRenderer.POSITION_TEXTURE_INDEX\r\n     * @returns the index of the given texture type in the G-Buffer textures array\r\n     */\r\n    public getTextureIndex(textureType: number): number {\r\n        switch (textureType) {\r\n            case GeometryBufferRenderer.POSITION_TEXTURE_TYPE:\r\n                return this._positionIndex;\r\n            case GeometryBufferRenderer.VELOCITY_TEXTURE_TYPE:\r\n                return this._velocityIndex;\r\n            case GeometryBufferRenderer.REFLECTIVITY_TEXTURE_TYPE:\r\n                return this._reflectivityIndex;\r\n            default:\r\n                return -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if objects positions are enabled for the G buffer.\r\n     */\r\n    public get enablePosition(): boolean {\r\n        return this._enablePosition;\r\n    }\r\n\r\n    /**\r\n     * Sets whether or not objects positions are enabled for the G buffer.\r\n     */\r\n    public set enablePosition(enable: boolean) {\r\n        this._enablePosition = enable;\r\n\r\n        // PrePass handles index and texture links\r\n        if (!this._linkedWithPrePass) {\r\n            this.dispose();\r\n            this._createRenderTargets();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if objects velocities are enabled for the G buffer.\r\n     */\r\n    public get enableVelocity(): boolean {\r\n        return this._enableVelocity;\r\n    }\r\n\r\n    /**\r\n     * Sets whether or not objects velocities are enabled for the G buffer.\r\n     */\r\n    public set enableVelocity(enable: boolean) {\r\n        this._enableVelocity = enable;\r\n\r\n        if (!enable) {\r\n            this._previousTransformationMatrices = {};\r\n        }\r\n\r\n        if (!this._linkedWithPrePass) {\r\n            this.dispose();\r\n            this._createRenderTargets();\r\n        }\r\n\r\n        this._scene.needsPreviousWorldMatrices = enable;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if objects roughness are enabled in the G buffer.\r\n     */\r\n    public get enableReflectivity(): boolean {\r\n        return this._enableReflectivity;\r\n    }\r\n\r\n    /**\r\n     * Sets whether or not objects roughness are enabled for the G buffer.\r\n     */\r\n    public set enableReflectivity(enable: boolean) {\r\n        this._enableReflectivity = enable;\r\n\r\n        if (!this._linkedWithPrePass) {\r\n            this.dispose();\r\n            this._createRenderTargets();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the scene associated with the buffer.\r\n     */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * Gets the ratio used by the buffer during its creation.\r\n     * How big is the buffer related to the main canvas.\r\n     */\r\n    public get ratio(): number {\r\n        return this._ratio;\r\n    }\r\n\r\n    /**\r\n     * @param _\r\n     * @hidden\r\n     */\r\n    public static _SceneComponentInitialization: (scene: Scene) => void = (_) => {\r\n        throw _WarnImport(\"GeometryBufferRendererSceneComponent\");\r\n    };\r\n\r\n    /**\r\n     * Creates a new G Buffer for the scene\r\n     * @param scene The scene the buffer belongs to\r\n     * @param ratio How big is the buffer related to the main canvas.\r\n     */\r\n    constructor(scene: Scene, ratio: number = 1) {\r\n        this._scene = scene;\r\n        this._ratio = ratio;\r\n        this._useUbo = scene.getEngine().supportsUniformBuffers;\r\n\r\n        GeometryBufferRenderer._SceneComponentInitialization(this._scene);\r\n\r\n        // Render target\r\n        this._createRenderTargets();\r\n    }\r\n\r\n    /**\r\n     * Checks whether everything is ready to render a submesh to the G buffer.\r\n     * @param subMesh the submesh to check readiness for\r\n     * @param useInstances is the mesh drawn using instance or not\r\n     * @returns true if ready otherwise false\r\n     */\r\n    public isReady(subMesh: SubMesh, useInstances: boolean): boolean {\r\n        const material = <any>subMesh.getMaterial();\r\n\r\n        if (material && material.disableDepthWrite) {\r\n            return false;\r\n        }\r\n\r\n        const defines = [];\r\n        const attribs = [VertexBuffer.PositionKind, VertexBuffer.NormalKind];\r\n        const mesh = subMesh.getMesh();\r\n\r\n        // Alpha test\r\n        if (material) {\r\n            let needUv = false;\r\n            if (material.needAlphaTesting() && material.getAlphaTestTexture()) {\r\n                defines.push(\"#define ALPHATEST\");\r\n                defines.push(`#define ALPHATEST_UV${material.getAlphaTestTexture().coordinatesIndex + 1}`);\r\n                needUv = true;\r\n            }\r\n\r\n            if (material.bumpTexture && MaterialFlags.BumpTextureEnabled) {\r\n                defines.push(\"#define BUMP\");\r\n                defines.push(`#define BUMP_UV${material.bumpTexture.coordinatesIndex + 1}`);\r\n                needUv = true;\r\n            }\r\n\r\n            if (this._enableReflectivity) {\r\n                if (material.specularTexture) {\r\n                    defines.push(\"#define HAS_SPECULAR\");\r\n                    defines.push(`#define REFLECTIVITY_UV${material.specularTexture.coordinatesIndex + 1}`);\r\n                    needUv = true;\r\n                } else if (material.reflectivityTexture) {\r\n                    defines.push(\"#define HAS_REFLECTIVITY\");\r\n                    defines.push(`#define REFLECTIVITY_UV${material.reflectivityTexture.coordinatesIndex + 1}`);\r\n                    needUv = true;\r\n                }\r\n            }\r\n\r\n            if (needUv) {\r\n                defines.push(\"#define NEED_UV\");\r\n                if (mesh.isVerticesDataPresent(VertexBuffer.UVKind)) {\r\n                    attribs.push(VertexBuffer.UVKind);\r\n                    defines.push(\"#define UV1\");\r\n                }\r\n                if (mesh.isVerticesDataPresent(VertexBuffer.UV2Kind)) {\r\n                    attribs.push(VertexBuffer.UV2Kind);\r\n                    defines.push(\"#define UV2\");\r\n                }\r\n            }\r\n        }\r\n\r\n        // PrePass\r\n        if (this._linkedWithPrePass) {\r\n            defines.push(\"#define PREPASS\");\r\n            if (this._depthIndex !== -1) {\r\n                defines.push(\"#define DEPTH_INDEX \" + this._depthIndex);\r\n                defines.push(\"#define PREPASS_DEPTH\");\r\n            }\r\n            if (this._normalIndex !== -1) {\r\n                defines.push(\"#define NORMAL_INDEX \" + this._normalIndex);\r\n                defines.push(\"#define PREPASS_NORMAL\");\r\n            }\r\n        }\r\n\r\n        // Buffers\r\n        if (this._enablePosition) {\r\n            defines.push(\"#define POSITION\");\r\n            defines.push(\"#define POSITION_INDEX \" + this._positionIndex);\r\n        }\r\n\r\n        if (this._enableVelocity) {\r\n            defines.push(\"#define VELOCITY\");\r\n            defines.push(\"#define VELOCITY_INDEX \" + this._velocityIndex);\r\n            if (this.excludedSkinnedMeshesFromVelocity.indexOf(mesh) === -1) {\r\n                defines.push(\"#define BONES_VELOCITY_ENABLED\");\r\n            }\r\n        }\r\n\r\n        if (this._enableReflectivity) {\r\n            defines.push(\"#define REFLECTIVITY\");\r\n            defines.push(\"#define REFLECTIVITY_INDEX \" + this._reflectivityIndex);\r\n        }\r\n\r\n        // Bones\r\n        if (mesh.useBones && mesh.computeBonesUsingShaders) {\r\n            attribs.push(VertexBuffer.MatricesIndicesKind);\r\n            attribs.push(VertexBuffer.MatricesWeightsKind);\r\n            if (mesh.numBoneInfluencers > 4) {\r\n                attribs.push(VertexBuffer.MatricesIndicesExtraKind);\r\n                attribs.push(VertexBuffer.MatricesWeightsExtraKind);\r\n            }\r\n            defines.push(\"#define NUM_BONE_INFLUENCERS \" + mesh.numBoneInfluencers);\r\n            defines.push(\"#define BonesPerMesh \" + (mesh.skeleton ? mesh.skeleton.bones.length + 1 : 0));\r\n        } else {\r\n            defines.push(\"#define NUM_BONE_INFLUENCERS 0\");\r\n        }\r\n\r\n        // Morph targets\r\n        const morphTargetManager = (mesh as Mesh).morphTargetManager;\r\n        let numMorphInfluencers = 0;\r\n        if (morphTargetManager) {\r\n            if (morphTargetManager.numInfluencers > 0) {\r\n                numMorphInfluencers = morphTargetManager.numInfluencers;\r\n\r\n                defines.push(\"#define MORPHTARGETS\");\r\n                defines.push(\"#define NUM_MORPH_INFLUENCERS \" + numMorphInfluencers);\r\n                if (morphTargetManager.isUsingTextureForTargets) {\r\n                    defines.push(\"#define MORPHTARGETS_TEXTURE\");\r\n                }\r\n                MaterialHelper.PrepareAttributesForMorphTargetsInfluencers(attribs, mesh, numMorphInfluencers);\r\n            }\r\n        }\r\n\r\n        // Instances\r\n        if (useInstances) {\r\n            defines.push(\"#define INSTANCES\");\r\n            MaterialHelper.PushAttributesForInstances(attribs, this._enableVelocity);\r\n            if (subMesh.getRenderingMesh().hasThinInstances) {\r\n                defines.push(\"#define THIN_INSTANCES\");\r\n            }\r\n        }\r\n\r\n        // Setup textures count\r\n        if (this._linkedWithPrePass) {\r\n            defines.push(\"#define RENDER_TARGET_COUNT \" + this._attachments.length);\r\n        } else {\r\n            defines.push(\"#define RENDER_TARGET_COUNT \" + this._multiRenderTarget.textures.length);\r\n        }\r\n\r\n        // Get correct effect\r\n        const drawWrapper = subMesh._getDrawWrapper(undefined, true)!;\r\n        const cachedDefines = drawWrapper.defines;\r\n        const join = defines.join(\"\\n\");\r\n        if (cachedDefines !== join) {\r\n            drawWrapper.setEffect(\r\n                this._scene.getEngine().createEffect(\r\n                    \"geometry\",\r\n                    {\r\n                        attributes: attribs,\r\n                        uniformsNames: [\r\n                            \"world\",\r\n                            \"mBones\",\r\n                            \"viewProjection\",\r\n                            \"diffuseMatrix\",\r\n                            \"view\",\r\n                            \"previousWorld\",\r\n                            \"previousViewProjection\",\r\n                            \"mPreviousBones\",\r\n                            \"bumpMatrix\",\r\n                            \"reflectivityMatrix\",\r\n                            \"vTangentSpaceParams\",\r\n                            \"vBumpInfos\",\r\n                            \"morphTargetInfluences\",\r\n                            \"morphTargetTextureInfo\",\r\n                            \"morphTargetTextureIndices\",\r\n                        ],\r\n                        samplers: [\"diffuseSampler\", \"bumpSampler\", \"reflectivitySampler\", \"morphTargets\"],\r\n                        defines: join,\r\n                        onCompiled: null,\r\n                        fallbacks: null,\r\n                        onError: null,\r\n                        uniformBuffersNames: [\"Scene\"],\r\n                        indexParameters: { buffersCount: this._multiRenderTarget.textures.length - 1, maxSimultaneousMorphTargets: numMorphInfluencers },\r\n                    },\r\n                    this._scene.getEngine()\r\n                ),\r\n                join\r\n            );\r\n        }\r\n\r\n        return drawWrapper.effect!.isReady();\r\n    }\r\n\r\n    /**\r\n     * Gets the current underlying G Buffer.\r\n     * @returns the buffer\r\n     */\r\n    public getGBuffer(): MultiRenderTarget {\r\n        return this._multiRenderTarget;\r\n    }\r\n\r\n    /**\r\n     * Gets the number of samples used to render the buffer (anti aliasing).\r\n     */\r\n    public get samples(): number {\r\n        return this._multiRenderTarget.samples;\r\n    }\r\n\r\n    /**\r\n     * Sets the number of samples used to render the buffer (anti aliasing).\r\n     */\r\n    public set samples(value: number) {\r\n        this._multiRenderTarget.samples = value;\r\n    }\r\n\r\n    /**\r\n     * Disposes the renderer and frees up associated resources.\r\n     */\r\n    public dispose(): void {\r\n        if (this._resizeObserver) {\r\n            const engine = this._scene.getEngine();\r\n            engine.onResizeObservable.remove(this._resizeObserver);\r\n            this._resizeObserver = null;\r\n        }\r\n        this.getGBuffer().dispose();\r\n    }\r\n\r\n    private _assignRenderTargetIndices(): [number, string[]] {\r\n        const textureNames: string[] = [];\r\n        let count = 2;\r\n\r\n        textureNames.push(\"gBuffer_Depth\", \"gBuffer_Normal\");\r\n\r\n        if (this._enablePosition) {\r\n            this._positionIndex = count;\r\n            count++;\r\n            textureNames.push(\"gBuffer_Position\");\r\n        }\r\n\r\n        if (this._enableVelocity) {\r\n            this._velocityIndex = count;\r\n            count++;\r\n            textureNames.push(\"gBuffer_Velocity\");\r\n        }\r\n\r\n        if (this._enableReflectivity) {\r\n            this._reflectivityIndex = count;\r\n            count++;\r\n            textureNames.push(\"gBuffer_Reflectivity\");\r\n        }\r\n\r\n        return [count, textureNames];\r\n    }\r\n\r\n    protected _createRenderTargets(): void {\r\n        const engine = this._scene.getEngine();\r\n        const [count, textureNames] = this._assignRenderTargetIndices();\r\n\r\n        let type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n        if (engine._caps.textureFloat && engine._caps.textureFloatLinearFiltering) {\r\n            type = Constants.TEXTURETYPE_FLOAT;\r\n        } else if (engine._caps.textureHalfFloat && engine._caps.textureHalfFloatLinearFiltering) {\r\n            type = Constants.TEXTURETYPE_HALF_FLOAT;\r\n        }\r\n\r\n        this._multiRenderTarget = new MultiRenderTarget(\r\n            \"gBuffer\",\r\n            { width: engine.getRenderWidth() * this._ratio, height: engine.getRenderHeight() * this._ratio },\r\n            count,\r\n            this._scene,\r\n            { generateMipMaps: false, generateDepthTexture: true, defaultType: type },\r\n            textureNames.concat(\"gBuffer_DepthBuffer\")\r\n        );\r\n        if (!this.isSupported) {\r\n            return;\r\n        }\r\n        this._multiRenderTarget.wrapU = Texture.CLAMP_ADDRESSMODE;\r\n        this._multiRenderTarget.wrapV = Texture.CLAMP_ADDRESSMODE;\r\n        this._multiRenderTarget.refreshRate = 1;\r\n        this._multiRenderTarget.renderParticles = false;\r\n        this._multiRenderTarget.renderList = null;\r\n\r\n        // set default depth value to 1.0 (far away)\r\n        this._multiRenderTarget.onClearObservable.add((engine) => {\r\n            engine.clear(new Color4(0.0, 0.0, 0.0, 0.0), true, true, true);\r\n        });\r\n\r\n        this._resizeObserver = engine.onResizeObservable.add(() => {\r\n            if (this._multiRenderTarget) {\r\n                this._multiRenderTarget.resize({ width: engine.getRenderWidth() * this._ratio, height: engine.getRenderHeight() * this._ratio });\r\n            }\r\n        });\r\n\r\n        // Custom render function\r\n        const renderSubMesh = (subMesh: SubMesh): void => {\r\n            const renderingMesh = subMesh.getRenderingMesh();\r\n            const effectiveMesh = subMesh.getEffectiveMesh();\r\n            const scene = this._scene;\r\n            const engine = scene.getEngine();\r\n            const material = <any>subMesh.getMaterial();\r\n\r\n            if (!material) {\r\n                return;\r\n            }\r\n\r\n            effectiveMesh._internalAbstractMeshDataInfo._isActiveIntermediate = false;\r\n\r\n            // Velocity\r\n            if (this._enableVelocity && !this._previousTransformationMatrices[effectiveMesh.uniqueId]) {\r\n                this._previousTransformationMatrices[effectiveMesh.uniqueId] = {\r\n                    world: Matrix.Identity(),\r\n                    viewProjection: scene.getTransformMatrix(),\r\n                };\r\n\r\n                if (renderingMesh.skeleton) {\r\n                    const bonesTransformations = renderingMesh.skeleton.getTransformMatrices(renderingMesh);\r\n                    this._previousBonesTransformationMatrices[renderingMesh.uniqueId] = this._copyBonesTransformationMatrices(\r\n                        bonesTransformations,\r\n                        new Float32Array(bonesTransformations.length)\r\n                    );\r\n                }\r\n            }\r\n\r\n            // Managing instances\r\n            const batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\r\n\r\n            if (batch.mustReturn) {\r\n                return;\r\n            }\r\n\r\n            const hardwareInstancedRendering = engine.getCaps().instancedArrays && (batch.visibleInstances[subMesh._id] !== null || renderingMesh.hasThinInstances);\r\n            const world = effectiveMesh.getWorldMatrix();\r\n\r\n            if (this.isReady(subMesh, hardwareInstancedRendering)) {\r\n                const drawWrapper = subMesh._getDrawWrapper();\r\n\r\n                if (!drawWrapper) {\r\n                    return;\r\n                }\r\n\r\n                const effect = drawWrapper.effect!;\r\n\r\n                engine.enableEffect(drawWrapper);\r\n                if (!hardwareInstancedRendering) {\r\n                    renderingMesh._bind(subMesh, effect, material.fillMode);\r\n                }\r\n\r\n                if (!this._useUbo) {\r\n                    effect.setMatrix(\"viewProjection\", scene.getTransformMatrix());\r\n                    effect.setMatrix(\"view\", scene.getViewMatrix());\r\n                } else {\r\n                    MaterialHelper.BindSceneUniformBuffer(effect, this._scene.getSceneUniformBuffer());\r\n                    this._scene.finalizeSceneUbo();\r\n                }\r\n\r\n                if (material) {\r\n                    let sideOrientation: Nullable<number>;\r\n                    const instanceDataStorage = (renderingMesh as Mesh)._instanceDataStorage;\r\n\r\n                    if (!instanceDataStorage.isFrozen && (material.backFaceCulling || renderingMesh.overrideMaterialSideOrientation !== null)) {\r\n                        const mainDeterminant = effectiveMesh._getWorldMatrixDeterminant();\r\n                        sideOrientation = renderingMesh.overrideMaterialSideOrientation;\r\n                        if (sideOrientation === null) {\r\n                            sideOrientation = material.sideOrientation;\r\n                        }\r\n                        if (mainDeterminant < 0) {\r\n                            sideOrientation = sideOrientation === Material.ClockWiseSideOrientation ? Material.CounterClockWiseSideOrientation : Material.ClockWiseSideOrientation;\r\n                        }\r\n                    } else {\r\n                        sideOrientation = instanceDataStorage.sideOrientation;\r\n                    }\r\n\r\n                    material._preBind(drawWrapper, sideOrientation);\r\n\r\n                    // Alpha test\r\n                    if (material.needAlphaTesting()) {\r\n                        const alphaTexture = material.getAlphaTestTexture();\r\n                        if (alphaTexture) {\r\n                            effect.setTexture(\"diffuseSampler\", alphaTexture);\r\n                            effect.setMatrix(\"diffuseMatrix\", alphaTexture.getTextureMatrix());\r\n                        }\r\n                    }\r\n\r\n                    // Bump\r\n                    if (material.bumpTexture && scene.getEngine().getCaps().standardDerivatives && MaterialFlags.BumpTextureEnabled) {\r\n                        effect.setFloat3(\"vBumpInfos\", material.bumpTexture.coordinatesIndex, 1.0 / material.bumpTexture.level, material.parallaxScaleBias);\r\n                        effect.setMatrix(\"bumpMatrix\", material.bumpTexture.getTextureMatrix());\r\n                        effect.setTexture(\"bumpSampler\", material.bumpTexture);\r\n                        effect.setFloat2(\"vTangentSpaceParams\", material.invertNormalMapX ? -1.0 : 1.0, material.invertNormalMapY ? -1.0 : 1.0);\r\n                    }\r\n\r\n                    // Roughness\r\n                    if (this._enableReflectivity) {\r\n                        if (material.specularTexture) {\r\n                            effect.setMatrix(\"reflectivityMatrix\", material.specularTexture.getTextureMatrix());\r\n                            effect.setTexture(\"reflectivitySampler\", material.specularTexture);\r\n                        } else if (material.reflectivityTexture) {\r\n                            effect.setMatrix(\"reflectivityMatrix\", material.reflectivityTexture.getTextureMatrix());\r\n                            effect.setTexture(\"reflectivitySampler\", material.reflectivityTexture);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Bones\r\n                if (renderingMesh.useBones && renderingMesh.computeBonesUsingShaders && renderingMesh.skeleton) {\r\n                    effect.setMatrices(\"mBones\", renderingMesh.skeleton.getTransformMatrices(renderingMesh));\r\n                    if (this._enableVelocity) {\r\n                        effect.setMatrices(\"mPreviousBones\", this._previousBonesTransformationMatrices[renderingMesh.uniqueId]);\r\n                    }\r\n                }\r\n\r\n                // Morph targets\r\n                MaterialHelper.BindMorphTargetParameters(renderingMesh, effect);\r\n                if (renderingMesh.morphTargetManager && renderingMesh.morphTargetManager.isUsingTextureForTargets) {\r\n                    renderingMesh.morphTargetManager._bind(effect);\r\n                }\r\n\r\n                // Velocity\r\n                if (this._enableVelocity) {\r\n                    effect.setMatrix(\"previousWorld\", this._previousTransformationMatrices[effectiveMesh.uniqueId].world);\r\n                    effect.setMatrix(\"previousViewProjection\", this._previousTransformationMatrices[effectiveMesh.uniqueId].viewProjection);\r\n                }\r\n\r\n                if (hardwareInstancedRendering && renderingMesh.hasThinInstances) {\r\n                    effect.setMatrix(\"world\", world);\r\n                }\r\n\r\n                // Draw\r\n                renderingMesh._processRendering(effectiveMesh, subMesh, effect, material.fillMode, batch, hardwareInstancedRendering, (isInstance, w) => {\r\n                    if (!isInstance) {\r\n                        effect.setMatrix(\"world\", w);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // Velocity\r\n            if (this._enableVelocity) {\r\n                this._previousTransformationMatrices[effectiveMesh.uniqueId].world = world.clone();\r\n                this._previousTransformationMatrices[effectiveMesh.uniqueId].viewProjection = this._scene.getTransformMatrix().clone();\r\n                if (renderingMesh.skeleton) {\r\n                    this._copyBonesTransformationMatrices(\r\n                        renderingMesh.skeleton.getTransformMatrices(renderingMesh),\r\n                        this._previousBonesTransformationMatrices[effectiveMesh.uniqueId]\r\n                    );\r\n                }\r\n            }\r\n        };\r\n\r\n        this._multiRenderTarget.customIsReadyFunction = (mesh: AbstractMesh, refreshRate: number) => {\r\n            if (!mesh.isReady(false)) {\r\n                return false;\r\n            }\r\n            if (refreshRate === 0 && mesh.subMeshes) {\r\n                // full check: check that the effects are ready\r\n                for (let i = 0; i < mesh.subMeshes.length; ++i) {\r\n                    const subMesh = mesh.subMeshes[i];\r\n                    const material = subMesh.getMaterial();\r\n                    const renderingMesh = subMesh.getRenderingMesh();\r\n\r\n                    if (!material) {\r\n                        continue;\r\n                    }\r\n\r\n                    const batch = renderingMesh._getInstancesRenderList(subMesh._id, !!subMesh.getReplacementMesh());\r\n                    const hardwareInstancedRendering = engine.getCaps().instancedArrays && (batch.visibleInstances[subMesh._id] !== null || renderingMesh.hasThinInstances);\r\n\r\n                    if (!this.isReady(subMesh, hardwareInstancedRendering)) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return true;\r\n        };\r\n\r\n        this._multiRenderTarget.customRenderFunction = (\r\n            opaqueSubMeshes: SmartArray<SubMesh>,\r\n            alphaTestSubMeshes: SmartArray<SubMesh>,\r\n            transparentSubMeshes: SmartArray<SubMesh>,\r\n            depthOnlySubMeshes: SmartArray<SubMesh>\r\n        ): void => {\r\n            let index;\r\n\r\n            if (this._linkedWithPrePass) {\r\n                if (!this._prePassRenderer.enabled) {\r\n                    return;\r\n                }\r\n                this._scene.getEngine().bindAttachments(this._attachments);\r\n            }\r\n\r\n            if (depthOnlySubMeshes.length) {\r\n                engine.setColorWrite(false);\r\n                for (index = 0; index < depthOnlySubMeshes.length; index++) {\r\n                    renderSubMesh(depthOnlySubMeshes.data[index]);\r\n                }\r\n                engine.setColorWrite(true);\r\n            }\r\n\r\n            for (index = 0; index < opaqueSubMeshes.length; index++) {\r\n                renderSubMesh(opaqueSubMeshes.data[index]);\r\n            }\r\n\r\n            engine.setDepthWrite(false);\r\n            for (index = 0; index < alphaTestSubMeshes.length; index++) {\r\n                renderSubMesh(alphaTestSubMeshes.data[index]);\r\n            }\r\n\r\n            if (this.renderTransparentMeshes) {\r\n                for (index = 0; index < transparentSubMeshes.length; index++) {\r\n                    renderSubMesh(transparentSubMeshes.data[index]);\r\n                }\r\n            }\r\n            engine.setDepthWrite(true);\r\n        };\r\n    }\r\n\r\n    // Copies the bones transformation matrices into the target array and returns the target's reference\r\n    private _copyBonesTransformationMatrices(source: Float32Array, target: Float32Array): Float32Array {\r\n        for (let i = 0; i < source.length; i++) {\r\n            target[i] = source[i];\r\n        }\r\n\r\n        return target;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}