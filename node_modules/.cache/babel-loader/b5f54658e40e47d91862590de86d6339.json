{"ast":null,"code":"import \"core-js/modules/es.array.flat.js\";\nimport \"core-js/modules/es.array.unscopables.flat.js\";\nimport { Vector3, Vector2 } from \"../../Maths/math.vector.js\";\nimport { Mesh } from \"../mesh.js\";\nimport { VertexData } from \"../mesh.vertexData.js\";\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions.js\";\n/**\n * Creates the VertexData of the IcoSphere\n * @param options an object used to set the following optional parameters for the IcoSphere, required but can be empty\n * * radius the radius of the IcoSphere, optional default 1\n * * radiusX allows stretching in the x direction, optional, default radius\n * * radiusY allows stretching in the y direction, optional, default radius\n * * radiusZ allows stretching in the z direction, optional, default radius\n * * flat when true creates a flat shaded mesh, optional, default true\n * * subdivisions increasing the subdivisions increases the number of faces, optional, default 4\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\n * @param options.radius\n * @param options.radiusX\n * @param options.radiusY\n * @param options.radiusZ\n * @param options.flat\n * @param options.subdivisions\n * @param options.sideOrientation\n * @param options.frontUVs\n * @param options.backUVs\n * @returns the VertexData of the IcoSphere\n */\n\nexport function CreateIcoSphereVertexData(options) {\n  var sideOrientation = options.sideOrientation || VertexData.DEFAULTSIDE;\n  var radius = options.radius || 1;\n  var flat = options.flat === undefined ? true : options.flat;\n  var subdivisions = options.subdivisions || 4;\n  var radiusX = options.radiusX || radius;\n  var radiusY = options.radiusY || radius;\n  var radiusZ = options.radiusZ || radius;\n  var t = (1 + Math.sqrt(5)) / 2; // 12 vertex x,y,z\n\n  var icoVertices = [-1, t, -0, 1, t, 0, -1, -t, 0, 1, -t, 0, 0, -1, -t, 0, 1, -t, 0, -1, t, 0, 1, t, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0, -1 // v8-11\n  ]; // index of 3 vertex makes a face of icopshere\n\n  var ico_indices = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 12, 22, 23, 1, 5, 20, 5, 11, 4, 23, 22, 13, 22, 18, 6, 7, 1, 8, 14, 21, 4, 14, 4, 2, 16, 13, 6, 15, 6, 19, 3, 8, 9, 4, 21, 5, 13, 17, 23, 6, 13, 22, 19, 6, 18, 9, 8, 1]; // vertex for uv have aliased position, not for UV\n\n  var vertices_unalias_id = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, // vertex alias\n  0, 2, 3, 3, 3, 4, 7, 8, 9, 9, 10, 11 // 23: B + 12\n  ]; // uv as integer step (not pixels !)\n\n  var ico_vertexuv = [5, 1, 3, 1, 6, 4, 0, 0, 5, 3, 4, 2, 2, 2, 4, 0, 2, 0, 1, 1, 6, 0, 6, 2, // vertex alias (for same vertex on different faces)\n  0, 4, 3, 3, 4, 4, 3, 1, 4, 2, 4, 4, 0, 2, 1, 1, 2, 2, 3, 3, 1, 3, 2, 4 // 23: B + 12\n  ]; // Vertices[0, 1, ...9, A, B] : position on UV plane\n  // '+' indicate duplicate position to be fixed (3,9:0,2,3,4,7,8,A,B)\n  // First island of uv mapping\n  // v = 4h          3+  2\n  // v = 3h        9+  4\n  // v = 2h      9+  5   B\n  // v = 1h    9   1   0\n  // v = 0h  3   8   7   A\n  //     u = 0 1 2 3 4 5 6  *a\n  // Second island of uv mapping\n  // v = 4h  0+  B+  4+\n  // v = 3h    A+  2+\n  // v = 2h  7+  6   3+\n  // v = 1h    8+  3+\n  // v = 0h\n  //     u = 0 1 2 3 4 5 6  *a\n  // Face layout on texture UV mapping\n  // ============\n  // \\ 4  /\\ 16 /   ======\n  //  \\  /  \\  /   /\\ 11 /\n  //   \\/ 7  \\/   /  \\  /\n  //    =======  / 10 \\/\n  //   /\\ 17 /\\  =======\n  //  /  \\  /  \\ \\ 15 /\\\n  // / 8  \\/ 12 \\ \\  /  \\\n  // ============  \\/ 6  \\\n  // \\ 18 /\\  ============\n  //  \\  /  \\ \\ 5  /\\ 0  /\n  //   \\/ 13 \\ \\  /  \\  /\n  //   =======  \\/ 1  \\/\n  //       =============\n  //      /\\ 19 /\\  2 /\\\n  //     /  \\  /  \\  /  \\\n  //    / 14 \\/ 9  \\/  3 \\\n  //   ===================\n  // uv step is u:1 or 0.5, v:cos(30)=sqrt(3)/2, ratio approx is 84/97\n\n  var ustep = 138 / 1024;\n  var vstep = 239 / 1024;\n  var uoffset = 60 / 1024;\n  var voffset = 26 / 1024; // Second island should have margin, not to touch the first island\n  // avoid any borderline artefact in pixel rounding\n\n  var island_u_offset = -40 / 1024;\n  var island_v_offset = +20 / 1024; // face is either island 0 or 1 :\n  // second island is for faces : [4, 7, 8, 12, 13, 16, 17, 18]\n\n  var island = [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0 //  15 - 19\n  ];\n  var indices = new Array();\n  var positions = new Array();\n  var normals = new Array();\n  var uvs = new Array();\n  var current_indice = 0; // prepare array of 3 vector (empty) (to be worked in place, shared for each face)\n\n  var face_vertex_pos = new Array(3);\n  var face_vertex_uv = new Array(3);\n  var v012;\n\n  for (v012 = 0; v012 < 3; v012++) {\n    face_vertex_pos[v012] = Vector3.Zero();\n    face_vertex_uv[v012] = Vector2.Zero();\n  } // create all with normals\n\n\n  for (var face = 0; face < 20; face++) {\n    // 3 vertex per face\n    for (v012 = 0; v012 < 3; v012++) {\n      // look up vertex 0,1,2 to its index in 0 to 11 (or 23 including alias)\n      var v_id = ico_indices[3 * face + v012]; // vertex have 3D position (x,y,z)\n\n      face_vertex_pos[v012].copyFromFloats(icoVertices[3 * vertices_unalias_id[v_id]], icoVertices[3 * vertices_unalias_id[v_id] + 1], icoVertices[3 * vertices_unalias_id[v_id] + 2]); // Normalize to get normal, then scale to radius\n\n      face_vertex_pos[v012].normalize().scaleInPlace(radius); // uv Coordinates from vertex ID\n\n      face_vertex_uv[v012].copyFromFloats(ico_vertexuv[2 * v_id] * ustep + uoffset + island[face] * island_u_offset, ico_vertexuv[2 * v_id + 1] * vstep + voffset + island[face] * island_v_offset);\n    } // Subdivide the face (interpolate pos, norm, uv)\n    // - pos is linear interpolation, then projected to sphere (converge polyhedron to sphere)\n    // - norm is linear interpolation of vertex corner normal\n    //   (to be checked if better to re-calc from face vertex, or if approximation is OK ??? )\n    // - uv is linear interpolation\n    //\n    // Topology is as below for sub-divide by 2\n    // vertex shown as v0,v1,v2\n    // interp index is i1 to progress in range [v0,v1[\n    // interp index is i2 to progress in range [v0,v2[\n    // face index as  (i1,i2)  for /\\  : (i1,i2),(i1+1,i2),(i1,i2+1)\n    //            and (i1,i2)' for \\/  : (i1+1,i2),(i1+1,i2+1),(i1,i2+1)\n    //\n    //\n    //                    i2    v2\n    //                    ^    ^\n    //                   /    / \\\n    //                  /    /   \\\n    //                 /    /     \\\n    //                /    / (0,1) \\\n    //               /    #---------\\\n    //              /    / \\ (0,0)'/ \\\n    //             /    /   \\     /   \\\n    //            /    /     \\   /     \\\n    //           /    / (0,0) \\ / (1,0) \\\n    //          /    #---------#---------\\\n    //              v0                    v1\n    //\n    //              --------------------> i1\n    //\n    // interp of (i1,i2):\n    //  along i2 :  x0=lerp(v0,v2, i2/S) <---> x1=lerp(v1,v2, i2/S)\n    //  along i1 :  lerp(x0,x1, i1/(S-i2))\n    //\n    // centroid of triangle is needed to get help normal computation\n    //  (c1,c2) are used for centroid location\n\n\n    var interp_vertex = function interp_vertex(i1, i2, c1, c2) {\n      // vertex is interpolated from\n      //   - face_vertex_pos[0..2]\n      //   - face_vertex_uv[0..2]\n      var pos_x0 = Vector3.Lerp(face_vertex_pos[0], face_vertex_pos[2], i2 / subdivisions);\n      var pos_x1 = Vector3.Lerp(face_vertex_pos[1], face_vertex_pos[2], i2 / subdivisions);\n      var pos_interp = subdivisions === i2 ? face_vertex_pos[2] : Vector3.Lerp(pos_x0, pos_x1, i1 / (subdivisions - i2));\n      pos_interp.normalize();\n      var vertex_normal;\n\n      if (flat) {\n        // in flat mode, recalculate normal as face centroid normal\n        var centroid_x0 = Vector3.Lerp(face_vertex_pos[0], face_vertex_pos[2], c2 / subdivisions);\n        var centroid_x1 = Vector3.Lerp(face_vertex_pos[1], face_vertex_pos[2], c2 / subdivisions);\n        vertex_normal = Vector3.Lerp(centroid_x0, centroid_x1, c1 / (subdivisions - c2));\n      } else {\n        // in smooth mode, recalculate normal from each single vertex position\n        vertex_normal = new Vector3(pos_interp.x, pos_interp.y, pos_interp.z);\n      } // Vertex normal need correction due to X,Y,Z radius scaling\n\n\n      vertex_normal.x /= radiusX;\n      vertex_normal.y /= radiusY;\n      vertex_normal.z /= radiusZ;\n      vertex_normal.normalize();\n      var uv_x0 = Vector2.Lerp(face_vertex_uv[0], face_vertex_uv[2], i2 / subdivisions);\n      var uv_x1 = Vector2.Lerp(face_vertex_uv[1], face_vertex_uv[2], i2 / subdivisions);\n      var uv_interp = subdivisions === i2 ? face_vertex_uv[2] : Vector2.Lerp(uv_x0, uv_x1, i1 / (subdivisions - i2));\n      positions.push(pos_interp.x * radiusX, pos_interp.y * radiusY, pos_interp.z * radiusZ);\n      normals.push(vertex_normal.x, vertex_normal.y, vertex_normal.z);\n      uvs.push(uv_interp.x, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - uv_interp.y : uv_interp.y); // push each vertex has member of a face\n      // Same vertex can belong to multiple face, it is pushed multiple time (duplicate vertex are present)\n\n      indices.push(current_indice);\n      current_indice++;\n    };\n\n    for (var i2 = 0; i2 < subdivisions; i2++) {\n      for (var i1 = 0; i1 + i2 < subdivisions; i1++) {\n        // face : (i1,i2)  for /\\  :\n        // interp for : (i1,i2),(i1+1,i2),(i1,i2+1)\n        interp_vertex(i1, i2, i1 + 1.0 / 3, i2 + 1.0 / 3);\n        interp_vertex(i1 + 1, i2, i1 + 1.0 / 3, i2 + 1.0 / 3);\n        interp_vertex(i1, i2 + 1, i1 + 1.0 / 3, i2 + 1.0 / 3);\n\n        if (i1 + i2 + 1 < subdivisions) {\n          // face : (i1,i2)' for \\/  :\n          // interp for (i1+1,i2),(i1+1,i2+1),(i1,i2+1)\n          interp_vertex(i1 + 1, i2, i1 + 2.0 / 3, i2 + 2.0 / 3);\n          interp_vertex(i1 + 1, i2 + 1, i1 + 2.0 / 3, i2 + 2.0 / 3);\n          interp_vertex(i1, i2 + 1, i1 + 2.0 / 3, i2 + 2.0 / 3);\n        }\n      }\n    }\n  } // Sides\n\n\n  VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs); // Result\n\n\n  var vertexData = new VertexData();\n  vertexData.indices = indices;\n  vertexData.positions = positions;\n  vertexData.normals = normals;\n  vertexData.uvs = uvs;\n  return vertexData;\n}\n/**\n * Creates a sphere based upon an icosahedron with 20 triangular faces which can be subdivided\n * * The parameter `radius` sets the radius size (float) of the icosphere (default 1)\n * * You can set some different icosphere dimensions, for instance to build an ellipsoid, by using the parameters `radiusX`, `radiusY` and `radiusZ` (all by default have the same value of `radius`)\n * * The parameter `subdivisions` sets the number of subdivisions (positive integer, default 4). The more subdivisions, the more faces on the icosphere whatever its size\n * * The parameter `flat` (boolean, default true) gives each side its own normals. Set it to false to get a smooth continuous light reflection on the surface\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\n * @param name defines the name of the mesh\n * @param options defines the options used to create the mesh\n * @param options.radius\n * @param options.radiusX\n * @param options.radiusY\n * @param options.radiusZ\n * @param options.flat\n * @param options.subdivisions\n * @param options.sideOrientation\n * @param options.frontUVs\n * @param options.backUVs\n * @param options.updatable\n * @param scene defines the hosting scene\n * @returns the icosahedron mesh\n * @see https://doc.babylonjs.com/how_to/polyhedra_shapes#icosphere\n */\n\nexport function CreateIcoSphere(name, options, scene) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (scene === void 0) {\n    scene = null;\n  }\n\n  var sphere = new Mesh(name, scene);\n  options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\n  sphere._originalBuilderSideOrientation = options.sideOrientation;\n  var vertexData = CreateIcoSphereVertexData(options);\n  vertexData.applyToMesh(sphere, options.updatable);\n  return sphere;\n}\n/**\n * Class containing static functions to help procedurally build meshes\n * @deprecated use the function directly from the module\n */\n\nexport var IcoSphereBuilder = {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  CreateIcoSphere: CreateIcoSphere\n};\nVertexData.CreateIcoSphere = CreateIcoSphereVertexData;\n\nMesh.CreateIcoSphere = function (name, options, scene) {\n  return CreateIcoSphere(name, options, scene);\n};","map":{"version":3,"mappings":"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","names":["Vector3","Vector2","Mesh","VertexData","CompatibilityOptions","CreateIcoSphereVertexData","options","sideOrientation","DEFAULTSIDE","radius","flat","undefined","subdivisions","radiusX","radiusY","radiusZ","t","Math","sqrt","icoVertices","ico_indices","vertices_unalias_id","ico_vertexuv","ustep","vstep","uoffset","voffset","island_u_offset","island_v_offset","island","indices","Array","positions","normals","uvs","current_indice","face_vertex_pos","face_vertex_uv","v012","Zero","face","v_id","copyFromFloats","normalize","scaleInPlace","interp_vertex","i1","i2","c1","c2","pos_x0","Lerp","pos_x1","pos_interp","vertex_normal","centroid_x0","centroid_x1","x","y","z","uv_x0","uv_x1","uv_interp","push","UseOpenGLOrientationForUV","_ComputeSides","frontUVs","backUVs","vertexData","CreateIcoSphere","name","scene","sphere","_GetDefaultSideOrientation","_originalBuilderSideOrientation","applyToMesh","updatable","IcoSphereBuilder"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Meshes/Builders/icoSphereBuilder.ts"],"sourcesContent":["import type { Scene } from \"../../scene\";\r\nimport type { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Vector3, Vector2 } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Creates the VertexData of the IcoSphere\r\n * @param options an object used to set the following optional parameters for the IcoSphere, required but can be empty\r\n * * radius the radius of the IcoSphere, optional default 1\r\n * * radiusX allows stretching in the x direction, optional, default radius\r\n * * radiusY allows stretching in the y direction, optional, default radius\r\n * * radiusZ allows stretching in the z direction, optional, default radius\r\n * * flat when true creates a flat shaded mesh, optional, default true\r\n * * subdivisions increasing the subdivisions increases the number of faces, optional, default 4\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @param options.radius\r\n * @param options.radiusX\r\n * @param options.radiusY\r\n * @param options.radiusZ\r\n * @param options.flat\r\n * @param options.subdivisions\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @returns the VertexData of the IcoSphere\r\n */\r\nexport function CreateIcoSphereVertexData(options: {\r\n    radius?: number;\r\n    radiusX?: number;\r\n    radiusY?: number;\r\n    radiusZ?: number;\r\n    flat?: boolean;\r\n    subdivisions?: number;\r\n    sideOrientation?: number;\r\n    frontUVs?: Vector4;\r\n    backUVs?: Vector4;\r\n}): VertexData {\r\n    const sideOrientation = options.sideOrientation || VertexData.DEFAULTSIDE;\r\n    const radius = options.radius || 1;\r\n    const flat = options.flat === undefined ? true : options.flat;\r\n    const subdivisions = options.subdivisions || 4;\r\n    const radiusX = options.radiusX || radius;\r\n    const radiusY = options.radiusY || radius;\r\n    const radiusZ = options.radiusZ || radius;\r\n\r\n    const t = (1 + Math.sqrt(5)) / 2;\r\n\r\n    // 12 vertex x,y,z\r\n    const icoVertices = [\r\n        -1,\r\n        t,\r\n        -0,\r\n        1,\r\n        t,\r\n        0,\r\n        -1,\r\n        -t,\r\n        0,\r\n        1,\r\n        -t,\r\n        0, // v0-3\r\n        0,\r\n        -1,\r\n        -t,\r\n        0,\r\n        1,\r\n        -t,\r\n        0,\r\n        -1,\r\n        t,\r\n        0,\r\n        1,\r\n        t, // v4-7\r\n        t,\r\n        0,\r\n        1,\r\n        t,\r\n        0,\r\n        -1,\r\n        -t,\r\n        0,\r\n        1,\r\n        -t,\r\n        0,\r\n        -1, // v8-11\r\n    ];\r\n\r\n    // index of 3 vertex makes a face of icopshere\r\n    const ico_indices = [\r\n        0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 12, 22, 23, 1, 5, 20, 5, 11, 4, 23, 22, 13, 22, 18, 6, 7, 1, 8, 14, 21, 4, 14, 4, 2, 16, 13, 6, 15, 6, 19, 3, 8, 9, 4, 21, 5, 13, 17,\r\n        23, 6, 13, 22, 19, 6, 18, 9, 8, 1,\r\n    ];\r\n    // vertex for uv have aliased position, not for UV\r\n    const vertices_unalias_id = [\r\n        0,\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n        5,\r\n        6,\r\n        7,\r\n        8,\r\n        9,\r\n        10,\r\n        11,\r\n        // vertex alias\r\n        0, // 12: 0 + 12\r\n        2, // 13: 2 + 11\r\n        3, // 14: 3 + 11\r\n        3, // 15: 3 + 12\r\n        3, // 16: 3 + 13\r\n        4, // 17: 4 + 13\r\n        7, // 18: 7 + 11\r\n        8, // 19: 8 + 11\r\n        9, // 20: 9 + 11\r\n        9, // 21: 9 + 12\r\n        10, // 22: A + 12\r\n        11, // 23: B + 12\r\n    ];\r\n\r\n    // uv as integer step (not pixels !)\r\n    const ico_vertexuv = [\r\n        5,\r\n        1,\r\n        3,\r\n        1,\r\n        6,\r\n        4,\r\n        0,\r\n        0, // v0-3\r\n        5,\r\n        3,\r\n        4,\r\n        2,\r\n        2,\r\n        2,\r\n        4,\r\n        0, // v4-7\r\n        2,\r\n        0,\r\n        1,\r\n        1,\r\n        6,\r\n        0,\r\n        6,\r\n        2, // v8-11\r\n        // vertex alias (for same vertex on different faces)\r\n        0,\r\n        4, // 12: 0 + 12\r\n        3,\r\n        3, // 13: 2 + 11\r\n        4,\r\n        4, // 14: 3 + 11\r\n        3,\r\n        1, // 15: 3 + 12\r\n        4,\r\n        2, // 16: 3 + 13\r\n        4,\r\n        4, // 17: 4 + 13\r\n        0,\r\n        2, // 18: 7 + 11\r\n        1,\r\n        1, // 19: 8 + 11\r\n        2,\r\n        2, // 20: 9 + 11\r\n        3,\r\n        3, // 21: 9 + 12\r\n        1,\r\n        3, // 22: A + 12\r\n        2,\r\n        4, // 23: B + 12\r\n    ];\r\n\r\n    // Vertices[0, 1, ...9, A, B] : position on UV plane\r\n    // '+' indicate duplicate position to be fixed (3,9:0,2,3,4,7,8,A,B)\r\n    // First island of uv mapping\r\n    // v = 4h          3+  2\r\n    // v = 3h        9+  4\r\n    // v = 2h      9+  5   B\r\n    // v = 1h    9   1   0\r\n    // v = 0h  3   8   7   A\r\n    //     u = 0 1 2 3 4 5 6  *a\r\n\r\n    // Second island of uv mapping\r\n    // v = 4h  0+  B+  4+\r\n    // v = 3h    A+  2+\r\n    // v = 2h  7+  6   3+\r\n    // v = 1h    8+  3+\r\n    // v = 0h\r\n    //     u = 0 1 2 3 4 5 6  *a\r\n\r\n    // Face layout on texture UV mapping\r\n    // ============\r\n    // \\ 4  /\\ 16 /   ======\r\n    //  \\  /  \\  /   /\\ 11 /\r\n    //   \\/ 7  \\/   /  \\  /\r\n    //    =======  / 10 \\/\r\n    //   /\\ 17 /\\  =======\r\n    //  /  \\  /  \\ \\ 15 /\\\r\n    // / 8  \\/ 12 \\ \\  /  \\\r\n    // ============  \\/ 6  \\\r\n    // \\ 18 /\\  ============\r\n    //  \\  /  \\ \\ 5  /\\ 0  /\r\n    //   \\/ 13 \\ \\  /  \\  /\r\n    //   =======  \\/ 1  \\/\r\n    //       =============\r\n    //      /\\ 19 /\\  2 /\\\r\n    //     /  \\  /  \\  /  \\\r\n    //    / 14 \\/ 9  \\/  3 \\\r\n    //   ===================\r\n\r\n    // uv step is u:1 or 0.5, v:cos(30)=sqrt(3)/2, ratio approx is 84/97\r\n    const ustep = 138 / 1024;\r\n    const vstep = 239 / 1024;\r\n    const uoffset = 60 / 1024;\r\n    const voffset = 26 / 1024;\r\n    // Second island should have margin, not to touch the first island\r\n    // avoid any borderline artefact in pixel rounding\r\n    const island_u_offset = -40 / 1024;\r\n    const island_v_offset = +20 / 1024;\r\n    // face is either island 0 or 1 :\r\n    // second island is for faces : [4, 7, 8, 12, 13, 16, 17, 18]\r\n    const island = [\r\n        0,\r\n        0,\r\n        0,\r\n        0,\r\n        1, //  0 - 4\r\n        0,\r\n        0,\r\n        1,\r\n        1,\r\n        0, //  5 - 9\r\n        0,\r\n        0,\r\n        1,\r\n        1,\r\n        0, //  10 - 14\r\n        0,\r\n        1,\r\n        1,\r\n        1,\r\n        0, //  15 - 19\r\n    ];\r\n\r\n    const indices = new Array<number>();\r\n    const positions = new Array<number>();\r\n    const normals = new Array<number>();\r\n    const uvs = new Array<number>();\r\n\r\n    let current_indice = 0;\r\n    // prepare array of 3 vector (empty) (to be worked in place, shared for each face)\r\n    const face_vertex_pos = new Array(3);\r\n    const face_vertex_uv = new Array(3);\r\n    let v012;\r\n    for (v012 = 0; v012 < 3; v012++) {\r\n        face_vertex_pos[v012] = Vector3.Zero();\r\n        face_vertex_uv[v012] = Vector2.Zero();\r\n    }\r\n    // create all with normals\r\n    for (let face = 0; face < 20; face++) {\r\n        // 3 vertex per face\r\n        for (v012 = 0; v012 < 3; v012++) {\r\n            // look up vertex 0,1,2 to its index in 0 to 11 (or 23 including alias)\r\n            const v_id = ico_indices[3 * face + v012];\r\n            // vertex have 3D position (x,y,z)\r\n            face_vertex_pos[v012].copyFromFloats(\r\n                icoVertices[3 * vertices_unalias_id[v_id]],\r\n                icoVertices[3 * vertices_unalias_id[v_id] + 1],\r\n                icoVertices[3 * vertices_unalias_id[v_id] + 2]\r\n            );\r\n            // Normalize to get normal, then scale to radius\r\n            face_vertex_pos[v012].normalize().scaleInPlace(radius);\r\n\r\n            // uv Coordinates from vertex ID\r\n            face_vertex_uv[v012].copyFromFloats(\r\n                ico_vertexuv[2 * v_id] * ustep + uoffset + island[face] * island_u_offset,\r\n                ico_vertexuv[2 * v_id + 1] * vstep + voffset + island[face] * island_v_offset\r\n            );\r\n        }\r\n\r\n        // Subdivide the face (interpolate pos, norm, uv)\r\n        // - pos is linear interpolation, then projected to sphere (converge polyhedron to sphere)\r\n        // - norm is linear interpolation of vertex corner normal\r\n        //   (to be checked if better to re-calc from face vertex, or if approximation is OK ??? )\r\n        // - uv is linear interpolation\r\n        //\r\n        // Topology is as below for sub-divide by 2\r\n        // vertex shown as v0,v1,v2\r\n        // interp index is i1 to progress in range [v0,v1[\r\n        // interp index is i2 to progress in range [v0,v2[\r\n        // face index as  (i1,i2)  for /\\  : (i1,i2),(i1+1,i2),(i1,i2+1)\r\n        //            and (i1,i2)' for \\/  : (i1+1,i2),(i1+1,i2+1),(i1,i2+1)\r\n        //\r\n        //\r\n        //                    i2    v2\r\n        //                    ^    ^\r\n        //                   /    / \\\r\n        //                  /    /   \\\r\n        //                 /    /     \\\r\n        //                /    / (0,1) \\\r\n        //               /    #---------\\\r\n        //              /    / \\ (0,0)'/ \\\r\n        //             /    /   \\     /   \\\r\n        //            /    /     \\   /     \\\r\n        //           /    / (0,0) \\ / (1,0) \\\r\n        //          /    #---------#---------\\\r\n        //              v0                    v1\r\n        //\r\n        //              --------------------> i1\r\n        //\r\n        // interp of (i1,i2):\r\n        //  along i2 :  x0=lerp(v0,v2, i2/S) <---> x1=lerp(v1,v2, i2/S)\r\n        //  along i1 :  lerp(x0,x1, i1/(S-i2))\r\n        //\r\n        // centroid of triangle is needed to get help normal computation\r\n        //  (c1,c2) are used for centroid location\r\n\r\n        const interp_vertex = (i1: number, i2: number, c1: number, c2: number) => {\r\n            // vertex is interpolated from\r\n            //   - face_vertex_pos[0..2]\r\n            //   - face_vertex_uv[0..2]\r\n            const pos_x0 = Vector3.Lerp(face_vertex_pos[0], face_vertex_pos[2], i2 / subdivisions);\r\n            const pos_x1 = Vector3.Lerp(face_vertex_pos[1], face_vertex_pos[2], i2 / subdivisions);\r\n            const pos_interp = subdivisions === i2 ? face_vertex_pos[2] : Vector3.Lerp(pos_x0, pos_x1, i1 / (subdivisions - i2));\r\n            pos_interp.normalize();\r\n\r\n            let vertex_normal;\r\n            if (flat) {\r\n                // in flat mode, recalculate normal as face centroid normal\r\n                const centroid_x0 = Vector3.Lerp(face_vertex_pos[0], face_vertex_pos[2], c2 / subdivisions);\r\n                const centroid_x1 = Vector3.Lerp(face_vertex_pos[1], face_vertex_pos[2], c2 / subdivisions);\r\n                vertex_normal = Vector3.Lerp(centroid_x0, centroid_x1, c1 / (subdivisions - c2));\r\n            } else {\r\n                // in smooth mode, recalculate normal from each single vertex position\r\n                vertex_normal = new Vector3(pos_interp.x, pos_interp.y, pos_interp.z);\r\n            }\r\n            // Vertex normal need correction due to X,Y,Z radius scaling\r\n            vertex_normal.x /= radiusX;\r\n            vertex_normal.y /= radiusY;\r\n            vertex_normal.z /= radiusZ;\r\n            vertex_normal.normalize();\r\n\r\n            const uv_x0 = Vector2.Lerp(face_vertex_uv[0], face_vertex_uv[2], i2 / subdivisions);\r\n            const uv_x1 = Vector2.Lerp(face_vertex_uv[1], face_vertex_uv[2], i2 / subdivisions);\r\n            const uv_interp = subdivisions === i2 ? face_vertex_uv[2] : Vector2.Lerp(uv_x0, uv_x1, i1 / (subdivisions - i2));\r\n            positions.push(pos_interp.x * radiusX, pos_interp.y * radiusY, pos_interp.z * radiusZ);\r\n            normals.push(vertex_normal.x, vertex_normal.y, vertex_normal.z);\r\n            uvs.push(uv_interp.x, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - uv_interp.y : uv_interp.y);\r\n            // push each vertex has member of a face\r\n            // Same vertex can belong to multiple face, it is pushed multiple time (duplicate vertex are present)\r\n            indices.push(current_indice);\r\n            current_indice++;\r\n        };\r\n\r\n        for (let i2 = 0; i2 < subdivisions; i2++) {\r\n            for (let i1 = 0; i1 + i2 < subdivisions; i1++) {\r\n                // face : (i1,i2)  for /\\  :\r\n                // interp for : (i1,i2),(i1+1,i2),(i1,i2+1)\r\n                interp_vertex(i1, i2, i1 + 1.0 / 3, i2 + 1.0 / 3);\r\n                interp_vertex(i1 + 1, i2, i1 + 1.0 / 3, i2 + 1.0 / 3);\r\n                interp_vertex(i1, i2 + 1, i1 + 1.0 / 3, i2 + 1.0 / 3);\r\n                if (i1 + i2 + 1 < subdivisions) {\r\n                    // face : (i1,i2)' for \\/  :\r\n                    // interp for (i1+1,i2),(i1+1,i2+1),(i1,i2+1)\r\n                    interp_vertex(i1 + 1, i2, i1 + 2.0 / 3, i2 + 2.0 / 3);\r\n                    interp_vertex(i1 + 1, i2 + 1, i1 + 2.0 / 3, i2 + 2.0 / 3);\r\n                    interp_vertex(i1, i2 + 1, i1 + 2.0 / 3, i2 + 2.0 / 3);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a sphere based upon an icosahedron with 20 triangular faces which can be subdivided\r\n * * The parameter `radius` sets the radius size (float) of the icosphere (default 1)\r\n * * You can set some different icosphere dimensions, for instance to build an ellipsoid, by using the parameters `radiusX`, `radiusY` and `radiusZ` (all by default have the same value of `radius`)\r\n * * The parameter `subdivisions` sets the number of subdivisions (positive integer, default 4). The more subdivisions, the more faces on the icosphere whatever its size\r\n * * The parameter `flat` (boolean, default true) gives each side its own normals. Set it to false to get a smooth continuous light reflection on the surface\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.radius\r\n * @param options.radiusX\r\n * @param options.radiusY\r\n * @param options.radiusZ\r\n * @param options.flat\r\n * @param options.subdivisions\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param options.updatable\r\n * @param scene defines the hosting scene\r\n * @returns the icosahedron mesh\r\n * @see https://doc.babylonjs.com/how_to/polyhedra_shapes#icosphere\r\n */\r\nexport function CreateIcoSphere(\r\n    name: string,\r\n    options: {\r\n        radius?: number;\r\n        radiusX?: number;\r\n        radiusY?: number;\r\n        radiusZ?: number;\r\n        flat?: boolean;\r\n        subdivisions?: number;\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        updatable?: boolean;\r\n    } = {},\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const sphere = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    sphere._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateIcoSphereVertexData(options);\r\n\r\n    vertexData.applyToMesh(sphere, options.updatable);\r\n\r\n    return sphere;\r\n}\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use the function directly from the module\r\n */\r\nexport const IcoSphereBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateIcoSphere,\r\n};\r\n\r\nVertexData.CreateIcoSphere = CreateIcoSphereVertexData;\r\n\r\n(Mesh as any).CreateIcoSphere = (\r\n    name: string,\r\n    options: { radius?: number; flat?: boolean; subdivisions?: number; sideOrientation?: number; updatable?: boolean },\r\n    scene: Scene\r\n): Mesh => {\r\n    return CreateIcoSphere(name, options, scene);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}