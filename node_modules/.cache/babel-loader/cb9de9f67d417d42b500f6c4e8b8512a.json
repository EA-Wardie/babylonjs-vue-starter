{"ast":null,"code":"import \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\n/**\n * It could be useful to isolate your music & sounds on several tracks to better manage volume on a grouped instance of sounds.\n * It will be also used in a future release to apply effects on a specific track.\n * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music#using-sound-tracks\n */\n\nvar SoundTrack =\n/** @class */\nfunction () {\n  /**\n   * Creates a new sound track.\n   * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music#using-sound-tracks\n   * @param scene Define the scene the sound track belongs to\n   * @param options\n   */\n  function SoundTrack(scene, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * The unique identifier of the sound track in the scene.\n     */\n\n\n    this.id = -1;\n    this._isInitialized = false;\n    scene = scene || EngineStore.LastCreatedScene;\n\n    if (!scene) {\n      return;\n    }\n\n    this._scene = scene;\n    this.soundCollection = new Array();\n    this._options = options;\n\n    if (!this._options.mainTrack && this._scene.soundTracks) {\n      this._scene.soundTracks.push(this);\n\n      this.id = this._scene.soundTracks.length - 1;\n    }\n  }\n\n  SoundTrack.prototype._initializeSoundTrackAudioGraph = function () {\n    var _a;\n\n    if (((_a = Engine.audioEngine) === null || _a === void 0 ? void 0 : _a.canUseWebAudio) && Engine.audioEngine.audioContext) {\n      this._outputAudioNode = Engine.audioEngine.audioContext.createGain();\n\n      this._outputAudioNode.connect(Engine.audioEngine.masterGain);\n\n      if (this._options) {\n        if (this._options.volume) {\n          this._outputAudioNode.gain.value = this._options.volume;\n        }\n      }\n\n      this._isInitialized = true;\n    }\n  };\n  /**\n   * Release the sound track and its associated resources\n   */\n\n\n  SoundTrack.prototype.dispose = function () {\n    if (Engine.audioEngine && Engine.audioEngine.canUseWebAudio) {\n      if (this._connectedAnalyser) {\n        this._connectedAnalyser.stopDebugCanvas();\n      }\n\n      while (this.soundCollection.length) {\n        this.soundCollection[0].dispose();\n      }\n\n      if (this._outputAudioNode) {\n        this._outputAudioNode.disconnect();\n      }\n\n      this._outputAudioNode = null;\n    }\n  };\n  /**\n   * Adds a sound to this sound track\n   * @param sound define the sound to add\n   * @ignoreNaming\n   */\n\n\n  SoundTrack.prototype.addSound = function (sound) {\n    var _a;\n\n    if (!this._isInitialized) {\n      this._initializeSoundTrackAudioGraph();\n    }\n\n    if (((_a = Engine.audioEngine) === null || _a === void 0 ? void 0 : _a.canUseWebAudio) && this._outputAudioNode) {\n      sound.connectToSoundTrackAudioNode(this._outputAudioNode);\n    }\n\n    if (sound.soundTrackId) {\n      if (sound.soundTrackId === -1) {\n        this._scene.mainSoundTrack.removeSound(sound);\n      } else if (this._scene.soundTracks) {\n        this._scene.soundTracks[sound.soundTrackId].removeSound(sound);\n      }\n    }\n\n    this.soundCollection.push(sound);\n    sound.soundTrackId = this.id;\n  };\n  /**\n   * Removes a sound to this sound track\n   * @param sound define the sound to remove\n   * @ignoreNaming\n   */\n\n\n  SoundTrack.prototype.removeSound = function (sound) {\n    var index = this.soundCollection.indexOf(sound);\n\n    if (index !== -1) {\n      this.soundCollection.splice(index, 1);\n    }\n  };\n  /**\n   * Set a global volume for the full sound track.\n   * @param newVolume Define the new volume of the sound track\n   */\n\n\n  SoundTrack.prototype.setVolume = function (newVolume) {\n    var _a;\n\n    if (((_a = Engine.audioEngine) === null || _a === void 0 ? void 0 : _a.canUseWebAudio) && this._outputAudioNode) {\n      this._outputAudioNode.gain.value = newVolume;\n    }\n  };\n  /**\n   * Switch the panning model to HRTF:\n   * Renders a stereo output of higher quality than equalpower â€” it uses a convolution with measured impulse responses from human subjects.\n   * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music#creating-a-spatial-3d-sound\n   */\n\n\n  SoundTrack.prototype.switchPanningModelToHRTF = function () {\n    var _a;\n\n    if ((_a = Engine.audioEngine) === null || _a === void 0 ? void 0 : _a.canUseWebAudio) {\n      for (var i = 0; i < this.soundCollection.length; i++) {\n        this.soundCollection[i].switchPanningModelToHRTF();\n      }\n    }\n  };\n  /**\n   * Switch the panning model to Equal Power:\n   * Represents the equal-power panning algorithm, generally regarded as simple and efficient. equalpower is the default value.\n   * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music#creating-a-spatial-3d-sound\n   */\n\n\n  SoundTrack.prototype.switchPanningModelToEqualPower = function () {\n    var _a;\n\n    if ((_a = Engine.audioEngine) === null || _a === void 0 ? void 0 : _a.canUseWebAudio) {\n      for (var i = 0; i < this.soundCollection.length; i++) {\n        this.soundCollection[i].switchPanningModelToEqualPower();\n      }\n    }\n  };\n  /**\n   * Connect the sound track to an audio analyser allowing some amazing\n   * synchronization between the sounds/music and your visualization (VuMeter for instance).\n   * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music#using-the-analyser\n   * @param analyser The analyser to connect to the engine\n   */\n\n\n  SoundTrack.prototype.connectToAnalyser = function (analyser) {\n    var _a;\n\n    if (this._connectedAnalyser) {\n      this._connectedAnalyser.stopDebugCanvas();\n    }\n\n    this._connectedAnalyser = analyser;\n\n    if (((_a = Engine.audioEngine) === null || _a === void 0 ? void 0 : _a.canUseWebAudio) && this._outputAudioNode) {\n      this._outputAudioNode.disconnect();\n\n      this._connectedAnalyser.connectAudioNodes(this._outputAudioNode, Engine.audioEngine.masterGain);\n    }\n  };\n\n  return SoundTrack;\n}();\n\nexport { SoundTrack };","map":{"version":3,"mappings":"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","names":["Engine","EngineStore","scene","options","LastCreatedScene","_scene","soundCollection","Array","_options","mainTrack","soundTracks","push","id","length","SoundTrack","audioEngine","_a","canUseWebAudio","audioContext","_outputAudioNode","createGain","connect","masterGain","volume","gain","value","_isInitialized","_connectedAnalyser","stopDebugCanvas","dispose","disconnect","sound","_initializeSoundTrackAudioGraph","connectToSoundTrackAudioNode","soundTrackId","mainSoundTrack","removeSound","index","indexOf","splice","newVolume","i","switchPanningModelToHRTF","switchPanningModelToEqualPower","analyser","connectAudioNodes"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Audio/soundTrack.ts"],"sourcesContent":["import type { Sound } from \"./sound\";\r\nimport type { Analyser } from \"./analyser\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\n\r\n/**\r\n * Options allowed during the creation of a sound track.\r\n */\r\nexport interface ISoundTrackOptions {\r\n    /**\r\n     * The volume the sound track should take during creation\r\n     */\r\n    volume?: number;\r\n    /**\r\n     * Define if the sound track is the main sound track of the scene\r\n     */\r\n    mainTrack?: boolean;\r\n}\r\n\r\n/**\r\n * It could be useful to isolate your music & sounds on several tracks to better manage volume on a grouped instance of sounds.\r\n * It will be also used in a future release to apply effects on a specific track.\r\n * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music#using-sound-tracks\r\n */\r\nexport class SoundTrack {\r\n    /**\r\n     * The unique identifier of the sound track in the scene.\r\n     */\r\n    public id: number = -1;\r\n    /**\r\n     * The list of sounds included in the sound track.\r\n     */\r\n    public soundCollection: Array<Sound>;\r\n\r\n    private _outputAudioNode: Nullable<GainNode>;\r\n    private _scene: Scene;\r\n    private _connectedAnalyser: Analyser;\r\n    private _options: ISoundTrackOptions;\r\n    private _isInitialized = false;\r\n\r\n    /**\r\n     * Creates a new sound track.\r\n     * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music#using-sound-tracks\r\n     * @param scene Define the scene the sound track belongs to\r\n     * @param options\r\n     */\r\n    constructor(scene?: Nullable<Scene>, options: ISoundTrackOptions = {}) {\r\n        scene = scene || EngineStore.LastCreatedScene;\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._scene = scene;\r\n        this.soundCollection = new Array();\r\n        this._options = options;\r\n\r\n        if (!this._options.mainTrack && this._scene.soundTracks) {\r\n            this._scene.soundTracks.push(this);\r\n            this.id = this._scene.soundTracks.length - 1;\r\n        }\r\n    }\r\n\r\n    private _initializeSoundTrackAudioGraph() {\r\n        if (Engine.audioEngine?.canUseWebAudio && Engine.audioEngine.audioContext) {\r\n            this._outputAudioNode = Engine.audioEngine.audioContext.createGain();\r\n            this._outputAudioNode.connect(Engine.audioEngine.masterGain);\r\n\r\n            if (this._options) {\r\n                if (this._options.volume) {\r\n                    this._outputAudioNode.gain.value = this._options.volume;\r\n                }\r\n            }\r\n\r\n            this._isInitialized = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Release the sound track and its associated resources\r\n     */\r\n    public dispose(): void {\r\n        if (Engine.audioEngine && Engine.audioEngine.canUseWebAudio) {\r\n            if (this._connectedAnalyser) {\r\n                this._connectedAnalyser.stopDebugCanvas();\r\n            }\r\n            while (this.soundCollection.length) {\r\n                this.soundCollection[0].dispose();\r\n            }\r\n            if (this._outputAudioNode) {\r\n                this._outputAudioNode.disconnect();\r\n            }\r\n            this._outputAudioNode = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a sound to this sound track\r\n     * @param sound define the sound to add\r\n     * @ignoreNaming\r\n     */\r\n    public addSound(sound: Sound): void {\r\n        if (!this._isInitialized) {\r\n            this._initializeSoundTrackAudioGraph();\r\n        }\r\n        if (Engine.audioEngine?.canUseWebAudio && this._outputAudioNode) {\r\n            sound.connectToSoundTrackAudioNode(this._outputAudioNode);\r\n        }\r\n        if (sound.soundTrackId) {\r\n            if (sound.soundTrackId === -1) {\r\n                this._scene.mainSoundTrack.removeSound(sound);\r\n            } else if (this._scene.soundTracks) {\r\n                this._scene.soundTracks[sound.soundTrackId].removeSound(sound);\r\n            }\r\n        }\r\n\r\n        this.soundCollection.push(sound);\r\n        sound.soundTrackId = this.id;\r\n    }\r\n\r\n    /**\r\n     * Removes a sound to this sound track\r\n     * @param sound define the sound to remove\r\n     * @ignoreNaming\r\n     */\r\n    public removeSound(sound: Sound): void {\r\n        const index = this.soundCollection.indexOf(sound);\r\n        if (index !== -1) {\r\n            this.soundCollection.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set a global volume for the full sound track.\r\n     * @param newVolume Define the new volume of the sound track\r\n     */\r\n    public setVolume(newVolume: number): void {\r\n        if (Engine.audioEngine?.canUseWebAudio && this._outputAudioNode) {\r\n            this._outputAudioNode.gain.value = newVolume;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switch the panning model to HRTF:\r\n     * Renders a stereo output of higher quality than equalpower â€” it uses a convolution with measured impulse responses from human subjects.\r\n     * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music#creating-a-spatial-3d-sound\r\n     */\r\n    public switchPanningModelToHRTF(): void {\r\n        if (Engine.audioEngine?.canUseWebAudio) {\r\n            for (let i = 0; i < this.soundCollection.length; i++) {\r\n                this.soundCollection[i].switchPanningModelToHRTF();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switch the panning model to Equal Power:\r\n     * Represents the equal-power panning algorithm, generally regarded as simple and efficient. equalpower is the default value.\r\n     * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music#creating-a-spatial-3d-sound\r\n     */\r\n    public switchPanningModelToEqualPower(): void {\r\n        if (Engine.audioEngine?.canUseWebAudio) {\r\n            for (let i = 0; i < this.soundCollection.length; i++) {\r\n                this.soundCollection[i].switchPanningModelToEqualPower();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connect the sound track to an audio analyser allowing some amazing\r\n     * synchronization between the sounds/music and your visualization (VuMeter for instance).\r\n     * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music#using-the-analyser\r\n     * @param analyser The analyser to connect to the engine\r\n     */\r\n    public connectToAnalyser(analyser: Analyser): void {\r\n        if (this._connectedAnalyser) {\r\n            this._connectedAnalyser.stopDebugCanvas();\r\n        }\r\n        this._connectedAnalyser = analyser;\r\n        if (Engine.audioEngine?.canUseWebAudio && this._outputAudioNode) {\r\n            this._outputAudioNode.disconnect();\r\n            this._connectedAnalyser.connectAudioNodes(this._outputAudioNode, Engine.audioEngine.masterGain);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}