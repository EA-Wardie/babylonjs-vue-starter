{"ast":null,"code":"import \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport { DeviceType } from \"./deviceEnums.js\";\nimport { NativeDeviceInputSystem } from \"./nativeDeviceInputSystem.js\";\nimport { WebDeviceInputSystem } from \"./webDeviceInputSystem.js\";\nimport { DeviceSource } from \"./deviceSource.js\";\n/** @hidden */\n\nvar InternalDeviceSourceManager =\n/** @class */\nfunction () {\n  function InternalDeviceSourceManager(engine) {\n    var _this = this;\n\n    this._registeredManagers = new Array();\n    this._refCount = 0; // Public Functions\n\n    this.registerManager = function (manager) {\n      for (var deviceType = 0; deviceType < _this._devices.length; deviceType++) {\n        var device = _this._devices[deviceType];\n\n        for (var deviceSlotKey in device) {\n          var deviceSlot = +deviceSlotKey;\n\n          manager._addDevice(new DeviceSource(_this._deviceInputSystem, deviceType, deviceSlot));\n        }\n      }\n\n      _this._registeredManagers.push(manager);\n    };\n\n    this.unregisterManager = function (manager) {\n      var idx = _this._registeredManagers.indexOf(manager);\n\n      if (idx > -1) {\n        _this._registeredManagers.splice(idx, 1);\n      }\n    };\n\n    var numberOfDeviceTypes = Object.keys(DeviceType).length / 2;\n    this._devices = new Array(numberOfDeviceTypes);\n\n    var onDeviceConnected = function onDeviceConnected(deviceType, deviceSlot) {\n      if (!_this._devices[deviceType]) {\n        _this._devices[deviceType] = new Array();\n      }\n\n      if (!_this._devices[deviceType][deviceSlot]) {\n        _this._devices[deviceType][deviceSlot] = deviceSlot;\n      }\n\n      for (var _i = 0, _a = _this._registeredManagers; _i < _a.length; _i++) {\n        var manager = _a[_i];\n        var deviceSource = new DeviceSource(_this._deviceInputSystem, deviceType, deviceSlot);\n\n        manager._addDevice(deviceSource);\n      }\n    };\n\n    var onDeviceDisconnected = function onDeviceDisconnected(deviceType, deviceSlot) {\n      var _a;\n\n      if ((_a = _this._devices[deviceType]) === null || _a === void 0 ? void 0 : _a[deviceSlot]) {\n        delete _this._devices[deviceType][deviceSlot];\n      }\n\n      for (var _i = 0, _b = _this._registeredManagers; _i < _b.length; _i++) {\n        var manager = _b[_i];\n\n        manager._removeDevice(deviceType, deviceSlot);\n      }\n    };\n\n    var onInputChanged = function onInputChanged(deviceType, deviceSlot, eventData) {\n      if (eventData) {\n        for (var _i = 0, _a = _this._registeredManagers; _i < _a.length; _i++) {\n          var manager = _a[_i];\n\n          manager._onInputChanged(deviceType, deviceSlot, eventData);\n        }\n      }\n    };\n\n    if (typeof _native !== \"undefined\") {\n      this._deviceInputSystem = new NativeDeviceInputSystem(onDeviceConnected, onDeviceDisconnected, onInputChanged);\n    } else {\n      this._deviceInputSystem = new WebDeviceInputSystem(engine, onDeviceConnected, onDeviceDisconnected, onInputChanged);\n    }\n  }\n\n  InternalDeviceSourceManager.prototype.dispose = function () {\n    this._deviceInputSystem.dispose();\n  };\n\n  return InternalDeviceSourceManager;\n}();\n\nexport { InternalDeviceSourceManager };","map":{"version":3,"mappings":"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","names":["DeviceType","NativeDeviceInputSystem","WebDeviceInputSystem","DeviceSource","engine","Array","manager","deviceType","_this","_devices","length","device","deviceSlotKey","deviceSlot","_addDevice","_deviceInputSystem","_registeredManagers","push","idx","indexOf","splice","numberOfDeviceTypes","Object","keys","onDeviceConnected","_i","deviceSource","onDeviceDisconnected","_a","_removeDevice","onInputChanged","eventData","_onInputChanged","_native","InternalDeviceSourceManager","dispose"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/DeviceInput/InputDevices/internalDeviceSourceManager.ts"],"sourcesContent":["import type { IDisposable } from \"../../scene\";\r\nimport { DeviceType } from \"./deviceEnums\";\r\nimport type { Observable } from \"../../Misc/observable\";\r\nimport type { IDeviceInputSystem } from \"./inputInterfaces\";\r\nimport { NativeDeviceInputSystem } from \"./nativeDeviceInputSystem\";\r\nimport { WebDeviceInputSystem } from \"./webDeviceInputSystem\";\r\nimport { DeviceSource } from \"./deviceSource\";\r\nimport type { INative } from \"../../Engines/Native/nativeInterfaces\";\r\nimport type { Engine } from \"../../Engines/engine\";\r\nimport type { IUIEvent } from \"../../Events/deviceInputEvents\";\r\n\r\ntype Distribute<T> = T extends DeviceType ? DeviceSource<T> : never;\r\n\r\nexport type DeviceSourceType = Distribute<DeviceType>;\r\n\r\ndeclare const _native: INative;\r\n\r\ndeclare module \"../../Engines/engine\" {\r\n    interface Engine {\r\n        /** @hidden */\r\n        _deviceSourceManager?: InternalDeviceSourceManager;\r\n    }\r\n}\r\n\r\n/** @hidden */\r\nexport interface IObservableManager {\r\n    onDeviceConnectedObservable: Observable<DeviceSourceType>;\r\n    onDeviceDisconnectedObservable: Observable<DeviceSourceType>;\r\n\r\n    // Functions\r\n    _onInputChanged(deviceType: DeviceType, deviceSlot: number, eventData: IUIEvent): void;\r\n    _addDevice(deviceSource: DeviceSource<DeviceType>): void;\r\n    _removeDevice(deviceType: DeviceType, deviceSlot: number): void;\r\n}\r\n\r\n/** @hidden */\r\nexport class InternalDeviceSourceManager implements IDisposable {\r\n    // Private Members\r\n    // This is a master list of all device type/slot combos\r\n    private readonly _devices: Array<Array<number>>;\r\n\r\n    private readonly _deviceInputSystem: IDeviceInputSystem;\r\n\r\n    private readonly _registeredManagers = new Array<IObservableManager>();\r\n\r\n    public _refCount = 0;\r\n\r\n    public constructor(engine: Engine) {\r\n        const numberOfDeviceTypes = Object.keys(DeviceType).length / 2;\r\n        this._devices = new Array<Array<number>>(numberOfDeviceTypes);\r\n\r\n        const onDeviceConnected = (deviceType: DeviceType, deviceSlot: number) => {\r\n            if (!this._devices[deviceType]) {\r\n                this._devices[deviceType] = new Array<number>();\r\n            }\r\n\r\n            if (!this._devices[deviceType][deviceSlot]) {\r\n                this._devices[deviceType][deviceSlot] = deviceSlot;\r\n            }\r\n            for (const manager of this._registeredManagers) {\r\n                const deviceSource = new DeviceSource(this._deviceInputSystem, deviceType, deviceSlot);\r\n                manager._addDevice(deviceSource);\r\n            }\r\n        };\r\n\r\n        const onDeviceDisconnected = (deviceType: DeviceType, deviceSlot: number) => {\r\n            if (this._devices[deviceType]?.[deviceSlot]) {\r\n                delete this._devices[deviceType][deviceSlot];\r\n            }\r\n            for (const manager of this._registeredManagers) {\r\n                manager._removeDevice(deviceType, deviceSlot);\r\n            }\r\n        };\r\n\r\n        const onInputChanged = (deviceType: DeviceType, deviceSlot: number, eventData: IUIEvent) => {\r\n            if (eventData) {\r\n                for (const manager of this._registeredManagers) {\r\n                    manager._onInputChanged(deviceType, deviceSlot, eventData);\r\n                }\r\n            }\r\n        };\r\n\r\n        if (typeof _native !== \"undefined\") {\r\n            this._deviceInputSystem = new NativeDeviceInputSystem(onDeviceConnected, onDeviceDisconnected, onInputChanged);\r\n        } else {\r\n            this._deviceInputSystem = new WebDeviceInputSystem(engine, onDeviceConnected, onDeviceDisconnected, onInputChanged);\r\n        }\r\n    }\r\n\r\n    // Public Functions\r\n    public readonly registerManager = (manager: IObservableManager): void => {\r\n        for (let deviceType = 0; deviceType < this._devices.length; deviceType++) {\r\n            const device = this._devices[deviceType];\r\n            for (const deviceSlotKey in device) {\r\n                const deviceSlot = +deviceSlotKey;\r\n                manager._addDevice(new DeviceSource(this._deviceInputSystem, deviceType, deviceSlot));\r\n            }\r\n        }\r\n        this._registeredManagers.push(manager);\r\n    };\r\n\r\n    public readonly unregisterManager = (manager: IObservableManager): void => {\r\n        const idx = this._registeredManagers.indexOf(manager);\r\n\r\n        if (idx > -1) {\r\n            this._registeredManagers.splice(idx, 1);\r\n        }\r\n    };\r\n\r\n    public dispose(): void {\r\n        this._deviceInputSystem.dispose();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}