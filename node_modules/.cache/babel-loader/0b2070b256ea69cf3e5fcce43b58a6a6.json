{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\n\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { TmpVectors } from \"./math.js\"; // https://dickyjim.wordpress.com/2013/09/04/spherical-harmonics-for-beginners/\n// http://silviojemma.com/public/papers/lighting/spherical-harmonic-lighting.pdf\n// https://www.ppsloan.org/publications/StupidSH36.pdf\n// http://cseweb.ucsd.edu/~ravir/papers/envmap/envmap.pdf\n// https://www.ppsloan.org/publications/SHJCGT.pdf\n// https://www.ppsloan.org/publications/shdering.pdf\n// https://google.github.io/filament/Filament.md.html#annex/sphericalharmonics\n// https://patapom.com/blog/SHPortal/\n// https://imdoingitwrong.wordpress.com/2011/04/14/spherical-harmonics-wtf/\n// Using real SH basis:\n//  m>0             m   m\n// y   = sqrt(2) * K * P * cos(m*phi) * cos(theta)\n//  l               l   l\n//\n//  m<0             m   |m|\n// y   = sqrt(2) * K * P * sin(m*phi) * cos(theta)\n//  l               l   l\n//\n//  m=0   0   0\n// y   = K * P * trigono terms\n//  l     l   l\n//\n//  m       (2l + 1)(l - |m|)!\n// K = sqrt(------------------)\n//  l           4pi(l + |m|)!\n//\n// and P by recursion:\n//\n// P00(x) = 1\n// P01(x) = x\n// Pll(x) = (-1^l)(2l - 1)!!(1-x*x)^(1/2)\n//          ((2l - 1)x[Pl-1/m]-(l + m - 1)[Pl-2/m])\n// Plm(x) = ---------------------------------------\n//                         l - m\n// Leaving the trigonometric terms aside we can precompute the constants to :\n\nvar SH3ylmBasisConstants = [Math.sqrt(1 / (4 * Math.PI)), -Math.sqrt(3 / (4 * Math.PI)), Math.sqrt(3 / (4 * Math.PI)), -Math.sqrt(3 / (4 * Math.PI)), Math.sqrt(15 / (4 * Math.PI)), -Math.sqrt(15 / (4 * Math.PI)), Math.sqrt(5 / (16 * Math.PI)), -Math.sqrt(15 / (4 * Math.PI)), Math.sqrt(15 / (16 * Math.PI)) // l22\n]; // cm = cos(m * phi)\n// sm = sin(m * phi)\n// {x,y,z} = {cos(phi)sin(theta), sin(phi)sin(theta), cos(theta)}\n// By recursion on using trigo identities:\n\nvar SH3ylmBasisTrigonometricTerms = [function () {\n  return 1;\n}, function (direction) {\n  return direction.y;\n}, function (direction) {\n  return direction.z;\n}, function (direction) {\n  return direction.x;\n}, function (direction) {\n  return direction.x * direction.y;\n}, function (direction) {\n  return direction.y * direction.z;\n}, function (direction) {\n  return 3 * direction.z * direction.z - 1;\n}, function (direction) {\n  return direction.x * direction.z;\n}, function (direction) {\n  return direction.x * direction.x - direction.y * direction.y;\n}]; // Wrap the full compute\n\nvar applySH3 = function applySH3(lm, direction) {\n  return SH3ylmBasisConstants[lm] * SH3ylmBasisTrigonometricTerms[lm](direction);\n}; // Derived from the integration of the a kernel convolution to SH.\n// Great explanation here: https://patapom.com/blog/SHPortal/#about-distant-radiance-and-irradiance-environments\n\n\nvar SHCosKernelConvolution = [Math.PI, 2 * Math.PI / 3, 2 * Math.PI / 3, 2 * Math.PI / 3, Math.PI / 4, Math.PI / 4, Math.PI / 4, Math.PI / 4, Math.PI / 4];\n/**\n * Class representing spherical harmonics coefficients to the 3rd degree\n */\n\nvar SphericalHarmonics =\n/** @class */\nfunction () {\n  function SphericalHarmonics() {\n    /**\n     * Defines whether or not the harmonics have been prescaled for rendering.\n     */\n    this.preScaled = false;\n    /**\n     * The l0,0 coefficients of the spherical harmonics\n     */\n\n    this.l00 = Vector3.Zero();\n    /**\n     * The l1,-1 coefficients of the spherical harmonics\n     */\n\n    this.l1_1 = Vector3.Zero();\n    /**\n     * The l1,0 coefficients of the spherical harmonics\n     */\n\n    this.l10 = Vector3.Zero();\n    /**\n     * The l1,1 coefficients of the spherical harmonics\n     */\n\n    this.l11 = Vector3.Zero();\n    /**\n     * The l2,-2 coefficients of the spherical harmonics\n     */\n\n    this.l2_2 = Vector3.Zero();\n    /**\n     * The l2,-1 coefficients of the spherical harmonics\n     */\n\n    this.l2_1 = Vector3.Zero();\n    /**\n     * The l2,0 coefficients of the spherical harmonics\n     */\n\n    this.l20 = Vector3.Zero();\n    /**\n     * The l2,1 coefficients of the spherical harmonics\n     */\n\n    this.l21 = Vector3.Zero();\n    /**\n     * The l2,2 coefficients of the spherical harmonics\n     */\n\n    this.l22 = Vector3.Zero();\n  }\n  /**\n   * Adds a light to the spherical harmonics\n   * @param direction the direction of the light\n   * @param color the color of the light\n   * @param deltaSolidAngle the delta solid angle of the light\n   */\n\n\n  SphericalHarmonics.prototype.addLight = function (direction, color, deltaSolidAngle) {\n    TmpVectors.Vector3[0].set(color.r, color.g, color.b);\n    var colorVector = TmpVectors.Vector3[0];\n    var c = TmpVectors.Vector3[1];\n    colorVector.scaleToRef(deltaSolidAngle, c);\n    c.scaleToRef(applySH3(0, direction), TmpVectors.Vector3[2]);\n    this.l00.addInPlace(TmpVectors.Vector3[2]);\n    c.scaleToRef(applySH3(1, direction), TmpVectors.Vector3[2]);\n    this.l1_1.addInPlace(TmpVectors.Vector3[2]);\n    c.scaleToRef(applySH3(2, direction), TmpVectors.Vector3[2]);\n    this.l10.addInPlace(TmpVectors.Vector3[2]);\n    c.scaleToRef(applySH3(3, direction), TmpVectors.Vector3[2]);\n    this.l11.addInPlace(TmpVectors.Vector3[2]);\n    c.scaleToRef(applySH3(4, direction), TmpVectors.Vector3[2]);\n    this.l2_2.addInPlace(TmpVectors.Vector3[2]);\n    c.scaleToRef(applySH3(5, direction), TmpVectors.Vector3[2]);\n    this.l2_1.addInPlace(TmpVectors.Vector3[2]);\n    c.scaleToRef(applySH3(6, direction), TmpVectors.Vector3[2]);\n    this.l20.addInPlace(TmpVectors.Vector3[2]);\n    c.scaleToRef(applySH3(7, direction), TmpVectors.Vector3[2]);\n    this.l21.addInPlace(TmpVectors.Vector3[2]);\n    c.scaleToRef(applySH3(8, direction), TmpVectors.Vector3[2]);\n    this.l22.addInPlace(TmpVectors.Vector3[2]);\n  };\n  /**\n   * Scales the spherical harmonics by the given amount\n   * @param scale the amount to scale\n   */\n\n\n  SphericalHarmonics.prototype.scaleInPlace = function (scale) {\n    this.l00.scaleInPlace(scale);\n    this.l1_1.scaleInPlace(scale);\n    this.l10.scaleInPlace(scale);\n    this.l11.scaleInPlace(scale);\n    this.l2_2.scaleInPlace(scale);\n    this.l2_1.scaleInPlace(scale);\n    this.l20.scaleInPlace(scale);\n    this.l21.scaleInPlace(scale);\n    this.l22.scaleInPlace(scale);\n  };\n  /**\n   * Convert from incident radiance (Li) to irradiance (E) by applying convolution with the cosine-weighted hemisphere.\n   *\n   * ```\n   * E_lm = A_l * L_lm\n   * ```\n   *\n   * In spherical harmonics this convolution amounts to scaling factors for each frequency band.\n   * This corresponds to equation 5 in \"An Efficient Representation for Irradiance Environment Maps\", where\n   * the scaling factors are given in equation 9.\n   */\n\n\n  SphericalHarmonics.prototype.convertIncidentRadianceToIrradiance = function () {\n    // Constant (Band 0)\n    this.l00.scaleInPlace(SHCosKernelConvolution[0]); // Linear (Band 1)\n\n    this.l1_1.scaleInPlace(SHCosKernelConvolution[1]);\n    this.l10.scaleInPlace(SHCosKernelConvolution[2]);\n    this.l11.scaleInPlace(SHCosKernelConvolution[3]); // Quadratic (Band 2)\n\n    this.l2_2.scaleInPlace(SHCosKernelConvolution[4]);\n    this.l2_1.scaleInPlace(SHCosKernelConvolution[5]);\n    this.l20.scaleInPlace(SHCosKernelConvolution[6]);\n    this.l21.scaleInPlace(SHCosKernelConvolution[7]);\n    this.l22.scaleInPlace(SHCosKernelConvolution[8]);\n  };\n  /**\n   * Convert from irradiance to outgoing radiance for Lambertian BDRF, suitable for efficient shader evaluation.\n   *\n   * ```\n   * L = (1/pi) * E * rho\n   * ```\n   *\n   * This is done by an additional scale by 1/pi, so is a fairly trivial operation but important conceptually.\n   */\n\n\n  SphericalHarmonics.prototype.convertIrradianceToLambertianRadiance = function () {\n    this.scaleInPlace(1.0 / Math.PI); // The resultant SH now represents outgoing radiance, so includes the Lambert 1/pi normalisation factor but without albedo (rho) applied\n    // (The pixel shader must apply albedo after texture fetches, etc).\n  };\n  /**\n   * Integrates the reconstruction coefficients directly in to the SH preventing further\n   * required operations at run time.\n   *\n   * This is simply done by scaling back the SH with Ylm constants parameter.\n   * The trigonometric part being applied by the shader at run time.\n   */\n\n\n  SphericalHarmonics.prototype.preScaleForRendering = function () {\n    this.preScaled = true;\n    this.l00.scaleInPlace(SH3ylmBasisConstants[0]);\n    this.l1_1.scaleInPlace(SH3ylmBasisConstants[1]);\n    this.l10.scaleInPlace(SH3ylmBasisConstants[2]);\n    this.l11.scaleInPlace(SH3ylmBasisConstants[3]);\n    this.l2_2.scaleInPlace(SH3ylmBasisConstants[4]);\n    this.l2_1.scaleInPlace(SH3ylmBasisConstants[5]);\n    this.l20.scaleInPlace(SH3ylmBasisConstants[6]);\n    this.l21.scaleInPlace(SH3ylmBasisConstants[7]);\n    this.l22.scaleInPlace(SH3ylmBasisConstants[8]);\n  };\n  /**\n   * update the spherical harmonics coefficients from the given array\n   * @param data defines the 9x3 coefficients (l00, l1-1, l10, l11, l2-2, l2-1, l20, l21, l22)\n   * @returns the spherical harmonics (this)\n   */\n\n\n  SphericalHarmonics.prototype.updateFromArray = function (data) {\n    Vector3.FromArrayToRef(data[0], 0, this.l00);\n    Vector3.FromArrayToRef(data[1], 0, this.l1_1);\n    Vector3.FromArrayToRef(data[2], 0, this.l10);\n    Vector3.FromArrayToRef(data[3], 0, this.l11);\n    Vector3.FromArrayToRef(data[4], 0, this.l2_2);\n    Vector3.FromArrayToRef(data[5], 0, this.l2_1);\n    Vector3.FromArrayToRef(data[6], 0, this.l20);\n    Vector3.FromArrayToRef(data[7], 0, this.l21);\n    Vector3.FromArrayToRef(data[8], 0, this.l22);\n    return this;\n  };\n  /**\n   * update the spherical harmonics coefficients from the given floats array\n   * @param data defines the 9x3 coefficients (l00, l1-1, l10, l11, l2-2, l2-1, l20, l21, l22)\n   * @returns the spherical harmonics (this)\n   */\n\n\n  SphericalHarmonics.prototype.updateFromFloatsArray = function (data) {\n    Vector3.FromFloatsToRef(data[0], data[1], data[2], this.l00);\n    Vector3.FromFloatsToRef(data[3], data[4], data[5], this.l1_1);\n    Vector3.FromFloatsToRef(data[6], data[7], data[8], this.l10);\n    Vector3.FromFloatsToRef(data[9], data[10], data[11], this.l11);\n    Vector3.FromFloatsToRef(data[12], data[13], data[14], this.l2_2);\n    Vector3.FromFloatsToRef(data[15], data[16], data[17], this.l2_1);\n    Vector3.FromFloatsToRef(data[18], data[19], data[20], this.l20);\n    Vector3.FromFloatsToRef(data[21], data[22], data[23], this.l21);\n    Vector3.FromFloatsToRef(data[24], data[25], data[26], this.l22);\n    return this;\n  };\n  /**\n   * Constructs a spherical harmonics from an array.\n   * @param data defines the 9x3 coefficients (l00, l1-1, l10, l11, l2-2, l2-1, l20, l21, l22)\n   * @returns the spherical harmonics\n   */\n\n\n  SphericalHarmonics.FromArray = function (data) {\n    var sh = new SphericalHarmonics();\n    return sh.updateFromArray(data);\n  }; // Keep for references.\n\n  /**\n   * Gets the spherical harmonics from polynomial\n   * @param polynomial the spherical polynomial\n   * @returns the spherical harmonics\n   */\n\n\n  SphericalHarmonics.FromPolynomial = function (polynomial) {\n    var result = new SphericalHarmonics();\n    result.l00 = polynomial.xx.scale(0.376127).add(polynomial.yy.scale(0.376127)).add(polynomial.zz.scale(0.376126));\n    result.l1_1 = polynomial.y.scale(0.977204);\n    result.l10 = polynomial.z.scale(0.977204);\n    result.l11 = polynomial.x.scale(0.977204);\n    result.l2_2 = polynomial.xy.scale(1.16538);\n    result.l2_1 = polynomial.yz.scale(1.16538);\n    result.l20 = polynomial.zz.scale(1.34567).subtract(polynomial.xx.scale(0.672834)).subtract(polynomial.yy.scale(0.672834));\n    result.l21 = polynomial.zx.scale(1.16538);\n    result.l22 = polynomial.xx.scale(1.16538).subtract(polynomial.yy.scale(1.16538));\n    result.l1_1.scaleInPlace(-1);\n    result.l11.scaleInPlace(-1);\n    result.l2_1.scaleInPlace(-1);\n    result.l21.scaleInPlace(-1);\n    result.scaleInPlace(Math.PI);\n    return result;\n  };\n\n  return SphericalHarmonics;\n}();\n\nexport { SphericalHarmonics };\n/**\n * Class representing spherical polynomial coefficients to the 3rd degree\n */\n\nvar SphericalPolynomial =\n/** @class */\nfunction () {\n  function SphericalPolynomial() {\n    /**\n     * The x coefficients of the spherical polynomial\n     */\n    this.x = Vector3.Zero();\n    /**\n     * The y coefficients of the spherical polynomial\n     */\n\n    this.y = Vector3.Zero();\n    /**\n     * The z coefficients of the spherical polynomial\n     */\n\n    this.z = Vector3.Zero();\n    /**\n     * The xx coefficients of the spherical polynomial\n     */\n\n    this.xx = Vector3.Zero();\n    /**\n     * The yy coefficients of the spherical polynomial\n     */\n\n    this.yy = Vector3.Zero();\n    /**\n     * The zz coefficients of the spherical polynomial\n     */\n\n    this.zz = Vector3.Zero();\n    /**\n     * The xy coefficients of the spherical polynomial\n     */\n\n    this.xy = Vector3.Zero();\n    /**\n     * The yz coefficients of the spherical polynomial\n     */\n\n    this.yz = Vector3.Zero();\n    /**\n     * The zx coefficients of the spherical polynomial\n     */\n\n    this.zx = Vector3.Zero();\n  }\n\n  Object.defineProperty(SphericalPolynomial.prototype, \"preScaledHarmonics\", {\n    /**\n     * The spherical harmonics used to create the polynomials.\n     */\n    get: function get() {\n      if (!this._harmonics) {\n        this._harmonics = SphericalHarmonics.FromPolynomial(this);\n      }\n\n      if (!this._harmonics.preScaled) {\n        this._harmonics.preScaleForRendering();\n      }\n\n      return this._harmonics;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Adds an ambient color to the spherical polynomial\n   * @param color the color to add\n   */\n\n  SphericalPolynomial.prototype.addAmbient = function (color) {\n    TmpVectors.Vector3[0].copyFromFloats(color.r, color.g, color.b);\n    var colorVector = TmpVectors.Vector3[0];\n    this.xx.addInPlace(colorVector);\n    this.yy.addInPlace(colorVector);\n    this.zz.addInPlace(colorVector);\n  };\n  /**\n   * Scales the spherical polynomial by the given amount\n   * @param scale the amount to scale\n   */\n\n\n  SphericalPolynomial.prototype.scaleInPlace = function (scale) {\n    this.x.scaleInPlace(scale);\n    this.y.scaleInPlace(scale);\n    this.z.scaleInPlace(scale);\n    this.xx.scaleInPlace(scale);\n    this.yy.scaleInPlace(scale);\n    this.zz.scaleInPlace(scale);\n    this.yz.scaleInPlace(scale);\n    this.zx.scaleInPlace(scale);\n    this.xy.scaleInPlace(scale);\n  };\n  /**\n   * Updates the spherical polynomial from harmonics\n   * @param harmonics the spherical harmonics\n   * @returns the spherical polynomial\n   */\n\n\n  SphericalPolynomial.prototype.updateFromHarmonics = function (harmonics) {\n    this._harmonics = harmonics;\n    this.x.copyFrom(harmonics.l11);\n    this.x.scaleInPlace(1.02333).scaleInPlace(-1);\n    this.y.copyFrom(harmonics.l1_1);\n    this.y.scaleInPlace(1.02333).scaleInPlace(-1);\n    this.z.copyFrom(harmonics.l10);\n    this.z.scaleInPlace(1.02333);\n    this.xx.copyFrom(harmonics.l00);\n    TmpVectors.Vector3[0].copyFrom(harmonics.l20).scaleInPlace(0.247708);\n    TmpVectors.Vector3[1].copyFrom(harmonics.l22).scaleInPlace(0.429043);\n    this.xx.scaleInPlace(0.886277).subtractInPlace(TmpVectors.Vector3[0]).addInPlace(TmpVectors.Vector3[1]);\n    this.yy.copyFrom(harmonics.l00);\n    this.yy.scaleInPlace(0.886277).subtractInPlace(TmpVectors.Vector3[0]).subtractInPlace(TmpVectors.Vector3[1]);\n    this.zz.copyFrom(harmonics.l00);\n    TmpVectors.Vector3[0].copyFrom(harmonics.l20).scaleInPlace(0.495417);\n    this.zz.scaleInPlace(0.886277).addInPlace(TmpVectors.Vector3[0]);\n    this.yz.copyFrom(harmonics.l2_1);\n    this.yz.scaleInPlace(0.858086).scaleInPlace(-1);\n    this.zx.copyFrom(harmonics.l21);\n    this.zx.scaleInPlace(0.858086).scaleInPlace(-1);\n    this.xy.copyFrom(harmonics.l2_2);\n    this.xy.scaleInPlace(0.858086);\n    this.scaleInPlace(1.0 / Math.PI);\n    return this;\n  };\n  /**\n   * Gets the spherical polynomial from harmonics\n   * @param harmonics the spherical harmonics\n   * @returns the spherical polynomial\n   */\n\n\n  SphericalPolynomial.FromHarmonics = function (harmonics) {\n    var result = new SphericalPolynomial();\n    return result.updateFromHarmonics(harmonics);\n  };\n  /**\n   * Constructs a spherical polynomial from an array.\n   * @param data defines the 9x3 coefficients (x, y, z, xx, yy, zz, yz, zx, xy)\n   * @returns the spherical polynomial\n   */\n\n\n  SphericalPolynomial.FromArray = function (data) {\n    var sp = new SphericalPolynomial();\n    Vector3.FromArrayToRef(data[0], 0, sp.x);\n    Vector3.FromArrayToRef(data[1], 0, sp.y);\n    Vector3.FromArrayToRef(data[2], 0, sp.z);\n    Vector3.FromArrayToRef(data[3], 0, sp.xx);\n    Vector3.FromArrayToRef(data[4], 0, sp.yy);\n    Vector3.FromArrayToRef(data[5], 0, sp.zz);\n    Vector3.FromArrayToRef(data[6], 0, sp.yz);\n    Vector3.FromArrayToRef(data[7], 0, sp.zx);\n    Vector3.FromArrayToRef(data[8], 0, sp.xy);\n    return sp;\n  };\n\n  return SphericalPolynomial;\n}();\n\nexport { SphericalPolynomial };","map":{"version":3,"mappings":"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","names":["Vector3","TmpVectors","SH3ylmBasisConstants","Math","sqrt","PI","SH3ylmBasisTrigonometricTerms","direction","y","z","x","applySH3","lm","SHCosKernelConvolution","Zero","SphericalHarmonics","color","deltaSolidAngle","set","r","g","b","colorVector","c","scaleToRef","l00","addInPlace","l1_1","l10","l11","l2_2","l2_1","l20","l21","l22","scale","scaleInPlace","preScaled","data","FromArrayToRef","FromFloatsToRef","sh","updateFromArray","polynomial","result","xx","add","yy","zz","xy","yz","subtract","zx","Object","SphericalPolynomial","_harmonics","FromPolynomial","preScaleForRendering","copyFromFloats","harmonics","copyFrom","subtractInPlace","updateFromHarmonics","sp"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Maths/sphericalPolynomial.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Color3 } from \"../Maths/math.color\";\r\nimport { TmpVectors } from \"./math\";\r\n\r\n// https://dickyjim.wordpress.com/2013/09/04/spherical-harmonics-for-beginners/\r\n// http://silviojemma.com/public/papers/lighting/spherical-harmonic-lighting.pdf\r\n// https://www.ppsloan.org/publications/StupidSH36.pdf\r\n// http://cseweb.ucsd.edu/~ravir/papers/envmap/envmap.pdf\r\n// https://www.ppsloan.org/publications/SHJCGT.pdf\r\n// https://www.ppsloan.org/publications/shdering.pdf\r\n// https://google.github.io/filament/Filament.md.html#annex/sphericalharmonics\r\n// https://patapom.com/blog/SHPortal/\r\n// https://imdoingitwrong.wordpress.com/2011/04/14/spherical-harmonics-wtf/\r\n\r\n// Using real SH basis:\r\n//  m>0             m   m\r\n// y   = sqrt(2) * K * P * cos(m*phi) * cos(theta)\r\n//  l               l   l\r\n//\r\n//  m<0             m   |m|\r\n// y   = sqrt(2) * K * P * sin(m*phi) * cos(theta)\r\n//  l               l   l\r\n//\r\n//  m=0   0   0\r\n// y   = K * P * trigono terms\r\n//  l     l   l\r\n//\r\n//  m       (2l + 1)(l - |m|)!\r\n// K = sqrt(------------------)\r\n//  l           4pi(l + |m|)!\r\n//\r\n// and P by recursion:\r\n//\r\n// P00(x) = 1\r\n// P01(x) = x\r\n// Pll(x) = (-1^l)(2l - 1)!!(1-x*x)^(1/2)\r\n//          ((2l - 1)x[Pl-1/m]-(l + m - 1)[Pl-2/m])\r\n// Plm(x) = ---------------------------------------\r\n//                         l - m\r\n// Leaving the trigonometric terms aside we can precompute the constants to :\r\nconst SH3ylmBasisConstants = [\r\n    Math.sqrt(1 / (4 * Math.PI)), // l00\r\n\r\n    -Math.sqrt(3 / (4 * Math.PI)), // l1_1\r\n    Math.sqrt(3 / (4 * Math.PI)), // l10\r\n    -Math.sqrt(3 / (4 * Math.PI)), // l11\r\n\r\n    Math.sqrt(15 / (4 * Math.PI)), // l2_2\r\n    -Math.sqrt(15 / (4 * Math.PI)), // l2_1\r\n    Math.sqrt(5 / (16 * Math.PI)), // l20\r\n    -Math.sqrt(15 / (4 * Math.PI)), // l21\r\n    Math.sqrt(15 / (16 * Math.PI)), // l22\r\n];\r\n\r\n// cm = cos(m * phi)\r\n// sm = sin(m * phi)\r\n// {x,y,z} = {cos(phi)sin(theta), sin(phi)sin(theta), cos(theta)}\r\n// By recursion on using trigo identities:\r\nconst SH3ylmBasisTrigonometricTerms = [\r\n    () => 1, // l00\r\n\r\n    (direction: Vector3) => direction.y, // l1_1\r\n    (direction: Vector3) => direction.z, // l10\r\n    (direction: Vector3) => direction.x, // l11\r\n\r\n    (direction: Vector3) => direction.x * direction.y, // l2_2\r\n    (direction: Vector3) => direction.y * direction.z, // l2_1\r\n    (direction: Vector3) => 3 * direction.z * direction.z - 1, // l20\r\n    (direction: Vector3) => direction.x * direction.z, // l21\r\n    (direction: Vector3) => direction.x * direction.x - direction.y * direction.y, // l22\r\n];\r\n\r\n// Wrap the full compute\r\nconst applySH3 = (lm: number, direction: Vector3) => {\r\n    return SH3ylmBasisConstants[lm] * SH3ylmBasisTrigonometricTerms[lm](direction);\r\n};\r\n\r\n// Derived from the integration of the a kernel convolution to SH.\r\n// Great explanation here: https://patapom.com/blog/SHPortal/#about-distant-radiance-and-irradiance-environments\r\nconst SHCosKernelConvolution = [Math.PI, (2 * Math.PI) / 3, (2 * Math.PI) / 3, (2 * Math.PI) / 3, Math.PI / 4, Math.PI / 4, Math.PI / 4, Math.PI / 4, Math.PI / 4];\r\n\r\n/**\r\n * Class representing spherical harmonics coefficients to the 3rd degree\r\n */\r\nexport class SphericalHarmonics {\r\n    /**\r\n     * Defines whether or not the harmonics have been prescaled for rendering.\r\n     */\r\n    public preScaled = false;\r\n\r\n    /**\r\n     * The l0,0 coefficients of the spherical harmonics\r\n     */\r\n    public l00: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l1,-1 coefficients of the spherical harmonics\r\n     */\r\n    public l1_1: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l1,0 coefficients of the spherical harmonics\r\n     */\r\n    public l10: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l1,1 coefficients of the spherical harmonics\r\n     */\r\n    public l11: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l2,-2 coefficients of the spherical harmonics\r\n     */\r\n    public l2_2: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l2,-1 coefficients of the spherical harmonics\r\n     */\r\n    public l2_1: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l2,0 coefficients of the spherical harmonics\r\n     */\r\n    public l20: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l2,1 coefficients of the spherical harmonics\r\n     */\r\n    public l21: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The l2,2 coefficients of the spherical harmonics\r\n     */\r\n    public l22: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * Adds a light to the spherical harmonics\r\n     * @param direction the direction of the light\r\n     * @param color the color of the light\r\n     * @param deltaSolidAngle the delta solid angle of the light\r\n     */\r\n    public addLight(direction: Vector3, color: Color3, deltaSolidAngle: number): void {\r\n        TmpVectors.Vector3[0].set(color.r, color.g, color.b);\r\n        const colorVector = TmpVectors.Vector3[0];\r\n        const c = TmpVectors.Vector3[1];\r\n        colorVector.scaleToRef(deltaSolidAngle, c);\r\n\r\n        c.scaleToRef(applySH3(0, direction), TmpVectors.Vector3[2]);\r\n        this.l00.addInPlace(TmpVectors.Vector3[2]);\r\n\r\n        c.scaleToRef(applySH3(1, direction), TmpVectors.Vector3[2]);\r\n        this.l1_1.addInPlace(TmpVectors.Vector3[2]);\r\n        c.scaleToRef(applySH3(2, direction), TmpVectors.Vector3[2]);\r\n        this.l10.addInPlace(TmpVectors.Vector3[2]);\r\n        c.scaleToRef(applySH3(3, direction), TmpVectors.Vector3[2]);\r\n        this.l11.addInPlace(TmpVectors.Vector3[2]);\r\n\r\n        c.scaleToRef(applySH3(4, direction), TmpVectors.Vector3[2]);\r\n        this.l2_2.addInPlace(TmpVectors.Vector3[2]);\r\n        c.scaleToRef(applySH3(5, direction), TmpVectors.Vector3[2]);\r\n        this.l2_1.addInPlace(TmpVectors.Vector3[2]);\r\n        c.scaleToRef(applySH3(6, direction), TmpVectors.Vector3[2]);\r\n        this.l20.addInPlace(TmpVectors.Vector3[2]);\r\n        c.scaleToRef(applySH3(7, direction), TmpVectors.Vector3[2]);\r\n        this.l21.addInPlace(TmpVectors.Vector3[2]);\r\n        c.scaleToRef(applySH3(8, direction), TmpVectors.Vector3[2]);\r\n        this.l22.addInPlace(TmpVectors.Vector3[2]);\r\n    }\r\n\r\n    /**\r\n     * Scales the spherical harmonics by the given amount\r\n     * @param scale the amount to scale\r\n     */\r\n    public scaleInPlace(scale: number): void {\r\n        this.l00.scaleInPlace(scale);\r\n        this.l1_1.scaleInPlace(scale);\r\n        this.l10.scaleInPlace(scale);\r\n        this.l11.scaleInPlace(scale);\r\n        this.l2_2.scaleInPlace(scale);\r\n        this.l2_1.scaleInPlace(scale);\r\n        this.l20.scaleInPlace(scale);\r\n        this.l21.scaleInPlace(scale);\r\n        this.l22.scaleInPlace(scale);\r\n    }\r\n\r\n    /**\r\n     * Convert from incident radiance (Li) to irradiance (E) by applying convolution with the cosine-weighted hemisphere.\r\n     *\r\n     * ```\r\n     * E_lm = A_l * L_lm\r\n     * ```\r\n     *\r\n     * In spherical harmonics this convolution amounts to scaling factors for each frequency band.\r\n     * This corresponds to equation 5 in \"An Efficient Representation for Irradiance Environment Maps\", where\r\n     * the scaling factors are given in equation 9.\r\n     */\r\n    public convertIncidentRadianceToIrradiance(): void {\r\n        // Constant (Band 0)\r\n        this.l00.scaleInPlace(SHCosKernelConvolution[0]);\r\n\r\n        // Linear (Band 1)\r\n        this.l1_1.scaleInPlace(SHCosKernelConvolution[1]);\r\n        this.l10.scaleInPlace(SHCosKernelConvolution[2]);\r\n        this.l11.scaleInPlace(SHCosKernelConvolution[3]);\r\n\r\n        // Quadratic (Band 2)\r\n        this.l2_2.scaleInPlace(SHCosKernelConvolution[4]);\r\n        this.l2_1.scaleInPlace(SHCosKernelConvolution[5]);\r\n        this.l20.scaleInPlace(SHCosKernelConvolution[6]);\r\n        this.l21.scaleInPlace(SHCosKernelConvolution[7]);\r\n        this.l22.scaleInPlace(SHCosKernelConvolution[8]);\r\n    }\r\n\r\n    /**\r\n     * Convert from irradiance to outgoing radiance for Lambertian BDRF, suitable for efficient shader evaluation.\r\n     *\r\n     * ```\r\n     * L = (1/pi) * E * rho\r\n     * ```\r\n     *\r\n     * This is done by an additional scale by 1/pi, so is a fairly trivial operation but important conceptually.\r\n     */\r\n    public convertIrradianceToLambertianRadiance(): void {\r\n        this.scaleInPlace(1.0 / Math.PI);\r\n\r\n        // The resultant SH now represents outgoing radiance, so includes the Lambert 1/pi normalisation factor but without albedo (rho) applied\r\n        // (The pixel shader must apply albedo after texture fetches, etc).\r\n    }\r\n\r\n    /**\r\n     * Integrates the reconstruction coefficients directly in to the SH preventing further\r\n     * required operations at run time.\r\n     *\r\n     * This is simply done by scaling back the SH with Ylm constants parameter.\r\n     * The trigonometric part being applied by the shader at run time.\r\n     */\r\n    public preScaleForRendering(): void {\r\n        this.preScaled = true;\r\n\r\n        this.l00.scaleInPlace(SH3ylmBasisConstants[0]);\r\n\r\n        this.l1_1.scaleInPlace(SH3ylmBasisConstants[1]);\r\n        this.l10.scaleInPlace(SH3ylmBasisConstants[2]);\r\n        this.l11.scaleInPlace(SH3ylmBasisConstants[3]);\r\n\r\n        this.l2_2.scaleInPlace(SH3ylmBasisConstants[4]);\r\n        this.l2_1.scaleInPlace(SH3ylmBasisConstants[5]);\r\n        this.l20.scaleInPlace(SH3ylmBasisConstants[6]);\r\n        this.l21.scaleInPlace(SH3ylmBasisConstants[7]);\r\n        this.l22.scaleInPlace(SH3ylmBasisConstants[8]);\r\n    }\r\n\r\n    /**\r\n     * update the spherical harmonics coefficients from the given array\r\n     * @param data defines the 9x3 coefficients (l00, l1-1, l10, l11, l2-2, l2-1, l20, l21, l22)\r\n     * @returns the spherical harmonics (this)\r\n     */\r\n    public updateFromArray(data: ArrayLike<ArrayLike<number>>): SphericalHarmonics {\r\n        Vector3.FromArrayToRef(data[0], 0, this.l00);\r\n        Vector3.FromArrayToRef(data[1], 0, this.l1_1);\r\n        Vector3.FromArrayToRef(data[2], 0, this.l10);\r\n        Vector3.FromArrayToRef(data[3], 0, this.l11);\r\n        Vector3.FromArrayToRef(data[4], 0, this.l2_2);\r\n        Vector3.FromArrayToRef(data[5], 0, this.l2_1);\r\n        Vector3.FromArrayToRef(data[6], 0, this.l20);\r\n        Vector3.FromArrayToRef(data[7], 0, this.l21);\r\n        Vector3.FromArrayToRef(data[8], 0, this.l22);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * update the spherical harmonics coefficients from the given floats array\r\n     * @param data defines the 9x3 coefficients (l00, l1-1, l10, l11, l2-2, l2-1, l20, l21, l22)\r\n     * @returns the spherical harmonics (this)\r\n     */\r\n    public updateFromFloatsArray(data: ArrayLike<number>): SphericalHarmonics {\r\n        Vector3.FromFloatsToRef(data[0], data[1], data[2], this.l00);\r\n        Vector3.FromFloatsToRef(data[3], data[4], data[5], this.l1_1);\r\n        Vector3.FromFloatsToRef(data[6], data[7], data[8], this.l10);\r\n        Vector3.FromFloatsToRef(data[9], data[10], data[11], this.l11);\r\n        Vector3.FromFloatsToRef(data[12], data[13], data[14], this.l2_2);\r\n        Vector3.FromFloatsToRef(data[15], data[16], data[17], this.l2_1);\r\n        Vector3.FromFloatsToRef(data[18], data[19], data[20], this.l20);\r\n        Vector3.FromFloatsToRef(data[21], data[22], data[23], this.l21);\r\n        Vector3.FromFloatsToRef(data[24], data[25], data[26], this.l22);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Constructs a spherical harmonics from an array.\r\n     * @param data defines the 9x3 coefficients (l00, l1-1, l10, l11, l2-2, l2-1, l20, l21, l22)\r\n     * @returns the spherical harmonics\r\n     */\r\n    public static FromArray(data: ArrayLike<ArrayLike<number>>): SphericalHarmonics {\r\n        const sh = new SphericalHarmonics();\r\n        return sh.updateFromArray(data);\r\n    }\r\n\r\n    // Keep for references.\r\n    /**\r\n     * Gets the spherical harmonics from polynomial\r\n     * @param polynomial the spherical polynomial\r\n     * @returns the spherical harmonics\r\n     */\r\n    public static FromPolynomial(polynomial: SphericalPolynomial): SphericalHarmonics {\r\n        const result = new SphericalHarmonics();\r\n\r\n        result.l00 = polynomial.xx.scale(0.376127).add(polynomial.yy.scale(0.376127)).add(polynomial.zz.scale(0.376126));\r\n        result.l1_1 = polynomial.y.scale(0.977204);\r\n        result.l10 = polynomial.z.scale(0.977204);\r\n        result.l11 = polynomial.x.scale(0.977204);\r\n        result.l2_2 = polynomial.xy.scale(1.16538);\r\n        result.l2_1 = polynomial.yz.scale(1.16538);\r\n        result.l20 = polynomial.zz.scale(1.34567).subtract(polynomial.xx.scale(0.672834)).subtract(polynomial.yy.scale(0.672834));\r\n        result.l21 = polynomial.zx.scale(1.16538);\r\n        result.l22 = polynomial.xx.scale(1.16538).subtract(polynomial.yy.scale(1.16538));\r\n\r\n        result.l1_1.scaleInPlace(-1);\r\n        result.l11.scaleInPlace(-1);\r\n        result.l2_1.scaleInPlace(-1);\r\n        result.l21.scaleInPlace(-1);\r\n\r\n        result.scaleInPlace(Math.PI);\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * Class representing spherical polynomial coefficients to the 3rd degree\r\n */\r\nexport class SphericalPolynomial {\r\n    private _harmonics: Nullable<SphericalHarmonics>;\r\n\r\n    /**\r\n     * The spherical harmonics used to create the polynomials.\r\n     */\r\n    public get preScaledHarmonics(): SphericalHarmonics {\r\n        if (!this._harmonics) {\r\n            this._harmonics = SphericalHarmonics.FromPolynomial(this);\r\n        }\r\n        if (!this._harmonics.preScaled) {\r\n            this._harmonics.preScaleForRendering();\r\n        }\r\n        return this._harmonics;\r\n    }\r\n\r\n    /**\r\n     * The x coefficients of the spherical polynomial\r\n     */\r\n    public x: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The y coefficients of the spherical polynomial\r\n     */\r\n    public y: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The z coefficients of the spherical polynomial\r\n     */\r\n    public z: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The xx coefficients of the spherical polynomial\r\n     */\r\n    public xx: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The yy coefficients of the spherical polynomial\r\n     */\r\n    public yy: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The zz coefficients of the spherical polynomial\r\n     */\r\n    public zz: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The xy coefficients of the spherical polynomial\r\n     */\r\n    public xy: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The yz coefficients of the spherical polynomial\r\n     */\r\n    public yz: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * The zx coefficients of the spherical polynomial\r\n     */\r\n    public zx: Vector3 = Vector3.Zero();\r\n\r\n    /**\r\n     * Adds an ambient color to the spherical polynomial\r\n     * @param color the color to add\r\n     */\r\n    public addAmbient(color: Color3): void {\r\n        TmpVectors.Vector3[0].copyFromFloats(color.r, color.g, color.b);\r\n        const colorVector = TmpVectors.Vector3[0];\r\n        this.xx.addInPlace(colorVector);\r\n        this.yy.addInPlace(colorVector);\r\n        this.zz.addInPlace(colorVector);\r\n    }\r\n\r\n    /**\r\n     * Scales the spherical polynomial by the given amount\r\n     * @param scale the amount to scale\r\n     */\r\n    public scaleInPlace(scale: number) {\r\n        this.x.scaleInPlace(scale);\r\n        this.y.scaleInPlace(scale);\r\n        this.z.scaleInPlace(scale);\r\n        this.xx.scaleInPlace(scale);\r\n        this.yy.scaleInPlace(scale);\r\n        this.zz.scaleInPlace(scale);\r\n        this.yz.scaleInPlace(scale);\r\n        this.zx.scaleInPlace(scale);\r\n        this.xy.scaleInPlace(scale);\r\n    }\r\n\r\n    /**\r\n     * Updates the spherical polynomial from harmonics\r\n     * @param harmonics the spherical harmonics\r\n     * @returns the spherical polynomial\r\n     */\r\n    public updateFromHarmonics(harmonics: SphericalHarmonics): SphericalPolynomial {\r\n        this._harmonics = harmonics;\r\n\r\n        this.x.copyFrom(harmonics.l11);\r\n        this.x.scaleInPlace(1.02333).scaleInPlace(-1);\r\n        this.y.copyFrom(harmonics.l1_1);\r\n        this.y.scaleInPlace(1.02333).scaleInPlace(-1);\r\n        this.z.copyFrom(harmonics.l10);\r\n        this.z.scaleInPlace(1.02333);\r\n\r\n        this.xx.copyFrom(harmonics.l00);\r\n        TmpVectors.Vector3[0].copyFrom(harmonics.l20).scaleInPlace(0.247708);\r\n        TmpVectors.Vector3[1].copyFrom(harmonics.l22).scaleInPlace(0.429043);\r\n        this.xx.scaleInPlace(0.886277).subtractInPlace(TmpVectors.Vector3[0]).addInPlace(TmpVectors.Vector3[1]);\r\n        this.yy.copyFrom(harmonics.l00);\r\n        this.yy.scaleInPlace(0.886277).subtractInPlace(TmpVectors.Vector3[0]).subtractInPlace(TmpVectors.Vector3[1]);\r\n        this.zz.copyFrom(harmonics.l00);\r\n        TmpVectors.Vector3[0].copyFrom(harmonics.l20).scaleInPlace(0.495417);\r\n        this.zz.scaleInPlace(0.886277).addInPlace(TmpVectors.Vector3[0]);\r\n\r\n        this.yz.copyFrom(harmonics.l2_1);\r\n        this.yz.scaleInPlace(0.858086).scaleInPlace(-1);\r\n        this.zx.copyFrom(harmonics.l21);\r\n        this.zx.scaleInPlace(0.858086).scaleInPlace(-1);\r\n        this.xy.copyFrom(harmonics.l2_2);\r\n        this.xy.scaleInPlace(0.858086);\r\n\r\n        this.scaleInPlace(1.0 / Math.PI);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the spherical polynomial from harmonics\r\n     * @param harmonics the spherical harmonics\r\n     * @returns the spherical polynomial\r\n     */\r\n    public static FromHarmonics(harmonics: SphericalHarmonics): SphericalPolynomial {\r\n        const result = new SphericalPolynomial();\r\n        return result.updateFromHarmonics(harmonics);\r\n    }\r\n\r\n    /**\r\n     * Constructs a spherical polynomial from an array.\r\n     * @param data defines the 9x3 coefficients (x, y, z, xx, yy, zz, yz, zx, xy)\r\n     * @returns the spherical polynomial\r\n     */\r\n    public static FromArray(data: ArrayLike<ArrayLike<number>>): SphericalPolynomial {\r\n        const sp = new SphericalPolynomial();\r\n        Vector3.FromArrayToRef(data[0], 0, sp.x);\r\n        Vector3.FromArrayToRef(data[1], 0, sp.y);\r\n        Vector3.FromArrayToRef(data[2], 0, sp.z);\r\n        Vector3.FromArrayToRef(data[3], 0, sp.xx);\r\n        Vector3.FromArrayToRef(data[4], 0, sp.yy);\r\n        Vector3.FromArrayToRef(data[5], 0, sp.zz);\r\n        Vector3.FromArrayToRef(data[6], 0, sp.yz);\r\n        Vector3.FromArrayToRef(data[7], 0, sp.zx);\r\n        Vector3.FromArrayToRef(data[8], 0, sp.xy);\r\n        return sp;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}