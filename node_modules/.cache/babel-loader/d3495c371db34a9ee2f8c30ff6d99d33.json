{"ast":null,"code":"// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore.js\";\nvar name = \"glowMapMergePixelShader\";\nvar shader = \"varying vec2 vUV;\\nuniform sampler2D textureSampler;\\n#ifdef EMISSIVE\\nuniform sampler2D textureSampler2;\\n#endif\\nuniform float offset;\\n#define CUSTOM_FRAGMENT_DEFINITIONS\\nvoid main(void) {\\n#define CUSTOM_FRAGMENT_MAIN_BEGIN\\nvec4 baseColor=texture2D(textureSampler,vUV);\\n#ifdef EMISSIVE\\nbaseColor+=texture2D(textureSampler2,vUV);\\nbaseColor*=offset;\\n#else\\nbaseColor.a=abs(offset-baseColor.a);\\n#ifdef STROKE\\nfloat alpha=smoothstep(.0,.1,baseColor.a);\\nbaseColor.a=alpha;\\nbaseColor.rgb=baseColor.rgb*alpha;\\n#endif\\n#endif\\n#if LDR\\nbaseColor=clamp(baseColor,0.,1.0);\\n#endif\\ngl_FragColor=baseColor;\\n#define CUSTOM_FRAGMENT_MAIN_END\\n}\"; // Sideeffect\n\nShaderStore.ShadersStore[name] = shader;\n/** @hidden */\n\nexport var glowMapMergePixelShader = {\n  name: name,\n  shader: shader\n};","map":{"version":3,"mappings":"AAAA;AACA,SAASA,WAAT,QAA4B,2BAA5B;AAEA,IAAMC,IAAI,GAAG,yBAAb;AACA,IAAMC,MAAM,GAAG,yoBAAf,C,CA2BA;;AACAF,WAAW,CAACG,YAAZ,CAAyBF,IAAzB,IAAiCC,MAAjC;AACA;;AACA,OAAO,IAAME,uBAAuB,GAAG;AAAEH,MAAI,MAAN;AAAQC,QAAM;AAAd,CAAhC","names":["ShaderStore","name","shader","ShadersStore","glowMapMergePixelShader"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Shaders/glowMapMerge.fragment.ts"],"sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\n\nconst name = \"glowMapMergePixelShader\";\nconst shader = `varying vec2 vUV;\runiform sampler2D textureSampler;\r#ifdef EMISSIVE\nuniform sampler2D textureSampler2;\r#endif\nuniform float offset;\r#define CUSTOM_FRAGMENT_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_FRAGMENT_MAIN_BEGIN\nvec4 baseColor=texture2D(textureSampler,vUV);\r#ifdef EMISSIVE\nbaseColor+=texture2D(textureSampler2,vUV);\rbaseColor*=offset;\r#else\nbaseColor.a=abs(offset-baseColor.a);\r#ifdef STROKE\nfloat alpha=smoothstep(.0,.1,baseColor.a);\rbaseColor.a=alpha;\rbaseColor.rgb=baseColor.rgb*alpha;\r#endif\n#endif\n#if LDR\nbaseColor=clamp(baseColor,0.,1.0);\r#endif\ngl_FragColor=baseColor;\r#define CUSTOM_FRAGMENT_MAIN_END\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @hidden */\nexport const glowMapMergePixelShader = { name, shader };\n"]},"metadata":{},"sourceType":"module"}