{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as WebGPUConstants from \"./webgpuConstants.js\";\nvar filterToBits = [0 | 0 << 1 | 0 << 2, 0 | 0 << 1 | 0 << 2, 1 | 1 << 1 | 0 << 2, 1 | 1 << 1 | 1 << 2, 0 | 0 << 1 | 0 << 2, 0 | 1 << 1 | 0 << 2, 0 | 1 << 1 | 1 << 2, 0 | 1 << 1 | 0 << 2, 0 | 0 << 1 | 1 << 2, 1 | 0 << 1 | 0 << 2, 1 | 0 << 1 | 1 << 2, 1 | 1 << 1 | 0 << 2, 1 | 0 << 1 | 0 << 2 // TEXTURE_LINEAR_NEAREST\n]; // subtract 0x01FF from the comparison function value before indexing this array!\n\nvar comparisonFunctionToBits = [0 << 3 | 0 << 4 | 0 << 5 | 0 << 6, 0 << 3 | 0 << 4 | 0 << 5 | 1 << 6, 0 << 3 | 0 << 4 | 1 << 5 | 0 << 6, 0 << 3 | 0 << 4 | 1 << 5 | 1 << 6, 0 << 3 | 1 << 4 | 0 << 5 | 0 << 6, 0 << 3 | 1 << 4 | 0 << 5 | 1 << 6, 0 << 3 | 1 << 4 | 1 << 5 | 0 << 6, 0 << 3 | 1 << 4 | 1 << 5 | 1 << 6, 1 << 3 | 0 << 4 | 0 << 5 | 0 << 6 // ALWAYS\n];\nvar filterNoMipToBits = [0 << 7, 1 << 7, 1 << 7, 0 << 7, 0 << 7, 0 << 7, 0 << 7, 1 << 7, 0 << 7, 0 << 7, 0 << 7, 0 << 7, 1 << 7 // TEXTURE_LINEAR_NEAREST\n];\n/** @hidden */\n\nvar WebGPUCacheSampler =\n/** @class */\nfunction () {\n  function WebGPUCacheSampler(device) {\n    this._samplers = {};\n    this._device = device;\n    this.disabled = false;\n  }\n\n  WebGPUCacheSampler.GetSamplerHashCode = function (sampler) {\n    var _a, _b, _c; // The WebGPU spec currently only allows values 1 and 4 for anisotropy\n\n\n    var anisotropy = sampler._cachedAnisotropicFilteringLevel && sampler._cachedAnisotropicFilteringLevel > 1 ? 4 : 1;\n    var code = filterToBits[sampler.samplingMode] + comparisonFunctionToBits[(sampler._comparisonFunction || 0x0202) - 0x0200 + 1] + filterNoMipToBits[sampler.samplingMode] + ( // handle the lodMinClamp = lodMaxClamp = 0 case when no filter used for mip mapping\n    ((_a = sampler._cachedWrapU) !== null && _a !== void 0 ? _a : 1) << 8) + (((_b = sampler._cachedWrapV) !== null && _b !== void 0 ? _b : 1) << 10) + (((_c = sampler._cachedWrapR) !== null && _c !== void 0 ? _c : 1) << 12) + ((sampler.useMipMaps ? 1 : 0) << 14) + ( // need to factor this in because _getSamplerFilterDescriptor depends on samplingMode AND useMipMaps!\n    anisotropy << 15);\n    return code;\n  };\n\n  WebGPUCacheSampler._GetSamplerFilterDescriptor = function (sampler, anisotropy) {\n    var magFilter, minFilter, mipmapFilter, lodMinClamp, lodMaxClamp;\n    var useMipMaps = sampler.useMipMaps;\n\n    switch (sampler.samplingMode) {\n      case 11:\n        magFilter = WebGPUConstants.FilterMode.Linear;\n        minFilter = WebGPUConstants.FilterMode.Linear;\n        mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n\n        if (!useMipMaps) {\n          lodMinClamp = lodMaxClamp = 0;\n        }\n\n        break;\n\n      case 3:\n      case 3:\n        magFilter = WebGPUConstants.FilterMode.Linear;\n        minFilter = WebGPUConstants.FilterMode.Linear;\n\n        if (!useMipMaps) {\n          mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n          lodMinClamp = lodMaxClamp = 0;\n        } else {\n          mipmapFilter = WebGPUConstants.FilterMode.Linear;\n        }\n\n        break;\n\n      case 8:\n        magFilter = WebGPUConstants.FilterMode.Nearest;\n        minFilter = WebGPUConstants.FilterMode.Nearest;\n\n        if (!useMipMaps) {\n          mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n          lodMinClamp = lodMaxClamp = 0;\n        } else {\n          mipmapFilter = WebGPUConstants.FilterMode.Linear;\n        }\n\n        break;\n\n      case 4:\n        magFilter = WebGPUConstants.FilterMode.Nearest;\n        minFilter = WebGPUConstants.FilterMode.Nearest;\n        mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n\n        if (!useMipMaps) {\n          lodMinClamp = lodMaxClamp = 0;\n        }\n\n        break;\n\n      case 5:\n        magFilter = WebGPUConstants.FilterMode.Nearest;\n        minFilter = WebGPUConstants.FilterMode.Linear;\n        mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n\n        if (!useMipMaps) {\n          lodMinClamp = lodMaxClamp = 0;\n        }\n\n        break;\n\n      case 6:\n        magFilter = WebGPUConstants.FilterMode.Nearest;\n        minFilter = WebGPUConstants.FilterMode.Linear;\n\n        if (!useMipMaps) {\n          mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n          lodMinClamp = lodMaxClamp = 0;\n        } else {\n          mipmapFilter = WebGPUConstants.FilterMode.Linear;\n        }\n\n        break;\n\n      case 7:\n        magFilter = WebGPUConstants.FilterMode.Nearest;\n        minFilter = WebGPUConstants.FilterMode.Linear;\n        mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n        lodMinClamp = lodMaxClamp = 0;\n        break;\n\n      case 1:\n      case 1:\n        magFilter = WebGPUConstants.FilterMode.Nearest;\n        minFilter = WebGPUConstants.FilterMode.Nearest;\n        mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n        lodMinClamp = lodMaxClamp = 0;\n        break;\n\n      case 9:\n        magFilter = WebGPUConstants.FilterMode.Linear;\n        minFilter = WebGPUConstants.FilterMode.Nearest;\n        mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n\n        if (!useMipMaps) {\n          lodMinClamp = lodMaxClamp = 0;\n        }\n\n        break;\n\n      case 10:\n        magFilter = WebGPUConstants.FilterMode.Linear;\n        minFilter = WebGPUConstants.FilterMode.Nearest;\n\n        if (!useMipMaps) {\n          mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n          lodMinClamp = lodMaxClamp = 0;\n        } else {\n          mipmapFilter = WebGPUConstants.FilterMode.Linear;\n        }\n\n        break;\n\n      case 2:\n      case 2:\n        magFilter = WebGPUConstants.FilterMode.Linear;\n        minFilter = WebGPUConstants.FilterMode.Linear;\n        mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n        lodMinClamp = lodMaxClamp = 0;\n        break;\n\n      case 12:\n        magFilter = WebGPUConstants.FilterMode.Linear;\n        minFilter = WebGPUConstants.FilterMode.Nearest;\n        mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n        lodMinClamp = lodMaxClamp = 0;\n        break;\n\n      default:\n        magFilter = WebGPUConstants.FilterMode.Nearest;\n        minFilter = WebGPUConstants.FilterMode.Nearest;\n        mipmapFilter = WebGPUConstants.FilterMode.Nearest;\n        lodMinClamp = lodMaxClamp = 0;\n        break;\n    }\n\n    if (anisotropy > 1 && (lodMinClamp !== 0 || lodMaxClamp !== 0)) {\n      return {\n        magFilter: WebGPUConstants.FilterMode.Linear,\n        minFilter: WebGPUConstants.FilterMode.Linear,\n        mipmapFilter: WebGPUConstants.FilterMode.Linear,\n        anisotropyEnabled: true\n      };\n    }\n\n    return {\n      magFilter: magFilter,\n      minFilter: minFilter,\n      mipmapFilter: mipmapFilter,\n      lodMinClamp: lodMinClamp,\n      lodMaxClamp: lodMaxClamp\n    };\n  };\n\n  WebGPUCacheSampler._GetWrappingMode = function (mode) {\n    switch (mode) {\n      case 1:\n        return WebGPUConstants.AddressMode.Repeat;\n\n      case 0:\n        return WebGPUConstants.AddressMode.ClampToEdge;\n\n      case 2:\n        return WebGPUConstants.AddressMode.MirrorRepeat;\n    }\n\n    return WebGPUConstants.AddressMode.Repeat;\n  };\n\n  WebGPUCacheSampler._GetSamplerWrappingDescriptor = function (sampler) {\n    return {\n      addressModeU: this._GetWrappingMode(sampler._cachedWrapU),\n      addressModeV: this._GetWrappingMode(sampler._cachedWrapV),\n      addressModeW: this._GetWrappingMode(sampler._cachedWrapR)\n    };\n  };\n\n  WebGPUCacheSampler._GetSamplerDescriptor = function (sampler) {\n    // The WebGPU spec currently only allows values 1 and 4 for anisotropy\n    var anisotropy = sampler.useMipMaps && sampler._cachedAnisotropicFilteringLevel && sampler._cachedAnisotropicFilteringLevel > 1 ? 4 : 1;\n\n    var filterDescriptor = this._GetSamplerFilterDescriptor(sampler, anisotropy);\n\n    return __assign(__assign(__assign({}, filterDescriptor), this._GetSamplerWrappingDescriptor(sampler)), {\n      compare: sampler._comparisonFunction ? WebGPUCacheSampler.GetCompareFunction(sampler._comparisonFunction) : undefined,\n      maxAnisotropy: filterDescriptor.anisotropyEnabled ? anisotropy : 1\n    });\n  };\n\n  WebGPUCacheSampler.GetCompareFunction = function (compareFunction) {\n    switch (compareFunction) {\n      case 519:\n        return WebGPUConstants.CompareFunction.Always;\n\n      case 514:\n        return WebGPUConstants.CompareFunction.Equal;\n\n      case 516:\n        return WebGPUConstants.CompareFunction.Greater;\n\n      case 518:\n        return WebGPUConstants.CompareFunction.GreaterEqual;\n\n      case 513:\n        return WebGPUConstants.CompareFunction.Less;\n\n      case 515:\n        return WebGPUConstants.CompareFunction.LessEqual;\n\n      case 512:\n        return WebGPUConstants.CompareFunction.Never;\n\n      case 517:\n        return WebGPUConstants.CompareFunction.NotEqual;\n\n      default:\n        return WebGPUConstants.CompareFunction.Less;\n    }\n  };\n\n  WebGPUCacheSampler.prototype.getSampler = function (sampler, bypassCache, hash) {\n    if (bypassCache === void 0) {\n      bypassCache = false;\n    }\n\n    if (hash === void 0) {\n      hash = 0;\n    }\n\n    if (this.disabled) {\n      return this._device.createSampler(WebGPUCacheSampler._GetSamplerDescriptor(sampler));\n    }\n\n    if (bypassCache) {\n      hash = 0;\n    } else if (hash === 0) {\n      hash = WebGPUCacheSampler.GetSamplerHashCode(sampler);\n    }\n\n    var gpuSampler = bypassCache ? undefined : this._samplers[hash];\n\n    if (!gpuSampler) {\n      gpuSampler = this._device.createSampler(WebGPUCacheSampler._GetSamplerDescriptor(sampler));\n\n      if (!bypassCache) {\n        this._samplers[hash] = gpuSampler;\n      }\n    }\n\n    return gpuSampler;\n  };\n\n  return WebGPUCacheSampler;\n}();\n\nexport { WebGPUCacheSampler };","map":{"version":3,"mappings":"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","names":["WebGPUConstants","filterToBits","comparisonFunctionToBits","filterNoMipToBits","device","_device","disabled","WebGPUCacheSampler","sampler","anisotropy","_cachedAnisotropicFilteringLevel","code","samplingMode","_comparisonFunction","_cachedWrapU","_a","_cachedWrapV","_b","_cachedWrapR","_c","useMipMaps","magFilter","minFilter","mipmapFilter","lodMinClamp","lodMaxClamp","FilterMode","Linear","Nearest","anisotropyEnabled","mode","AddressMode","Repeat","ClampToEdge","MirrorRepeat","addressModeU","_GetWrappingMode","addressModeV","addressModeW","filterDescriptor","_GetSamplerFilterDescriptor","_GetSamplerWrappingDescriptor","compare","GetCompareFunction","undefined","maxAnisotropy","compareFunction","CompareFunction","Always","Equal","Greater","GreaterEqual","Less","LessEqual","Never","NotEqual","bypassCache","hash","createSampler","_GetSamplerDescriptor","GetSamplerHashCode","gpuSampler","_samplers"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/WebGPU/webgpuCacheSampler.ts"],"sourcesContent":["import * as WebGPUConstants from \"./webgpuConstants\";\r\nimport { Constants } from \"../constants\";\r\nimport type { TextureSampler } from \"../../Materials/Textures/textureSampler\";\r\nimport type { Nullable } from \"../../types\";\r\n\r\nconst filterToBits = [\r\n    0 | (0 << 1) | (0 << 2), // not used\r\n    0 | (0 << 1) | (0 << 2), // TEXTURE_NEAREST_SAMPLINGMODE / TEXTURE_NEAREST_NEAREST\r\n    1 | (1 << 1) | (0 << 2), // TEXTURE_BILINEAR_SAMPLINGMODE / TEXTURE_LINEAR_LINEAR\r\n    1 | (1 << 1) | (1 << 2), // TEXTURE_TRILINEAR_SAMPLINGMODE / TEXTURE_LINEAR_LINEAR_MIPLINEAR\r\n    0 | (0 << 1) | (0 << 2), // TEXTURE_NEAREST_NEAREST_MIPNEAREST\r\n    0 | (1 << 1) | (0 << 2), // TEXTURE_NEAREST_LINEAR_MIPNEAREST\r\n    0 | (1 << 1) | (1 << 2), // TEXTURE_NEAREST_LINEAR_MIPLINEAR\r\n    0 | (1 << 1) | (0 << 2), // TEXTURE_NEAREST_LINEAR\r\n    0 | (0 << 1) | (1 << 2), // TEXTURE_NEAREST_NEAREST_MIPLINEAR\r\n    1 | (0 << 1) | (0 << 2), // TEXTURE_LINEAR_NEAREST_MIPNEAREST\r\n    1 | (0 << 1) | (1 << 2), // TEXTURE_LINEAR_NEAREST_MIPLINEAR\r\n    1 | (1 << 1) | (0 << 2), // TEXTURE_LINEAR_LINEAR_MIPNEAREST\r\n    1 | (0 << 1) | (0 << 2), // TEXTURE_LINEAR_NEAREST\r\n];\r\n\r\n// subtract 0x01FF from the comparison function value before indexing this array!\r\nconst comparisonFunctionToBits = [\r\n    (0 << 3) | (0 << 4) | (0 << 5) | (0 << 6), // undefined\r\n    (0 << 3) | (0 << 4) | (0 << 5) | (1 << 6), // NEVER\r\n    (0 << 3) | (0 << 4) | (1 << 5) | (0 << 6), // LESS\r\n    (0 << 3) | (0 << 4) | (1 << 5) | (1 << 6), // EQUAL\r\n    (0 << 3) | (1 << 4) | (0 << 5) | (0 << 6), // LEQUAL\r\n    (0 << 3) | (1 << 4) | (0 << 5) | (1 << 6), // GREATER\r\n    (0 << 3) | (1 << 4) | (1 << 5) | (0 << 6), // NOTEQUAL\r\n    (0 << 3) | (1 << 4) | (1 << 5) | (1 << 6), // GEQUAL\r\n    (1 << 3) | (0 << 4) | (0 << 5) | (0 << 6), // ALWAYS\r\n];\r\n\r\nconst filterNoMipToBits = [\r\n    0 << 7, // not used\r\n    1 << 7, // TEXTURE_NEAREST_SAMPLINGMODE / TEXTURE_NEAREST_NEAREST\r\n    1 << 7, // TEXTURE_BILINEAR_SAMPLINGMODE / TEXTURE_LINEAR_LINEAR\r\n    0 << 7, // TEXTURE_TRILINEAR_SAMPLINGMODE / TEXTURE_LINEAR_LINEAR_MIPLINEAR\r\n    0 << 7, // TEXTURE_NEAREST_NEAREST_MIPNEAREST\r\n    0 << 7, // TEXTURE_NEAREST_LINEAR_MIPNEAREST\r\n    0 << 7, // TEXTURE_NEAREST_LINEAR_MIPLINEAR\r\n    1 << 7, // TEXTURE_NEAREST_LINEAR\r\n    0 << 7, // TEXTURE_NEAREST_NEAREST_MIPLINEAR\r\n    0 << 7, // TEXTURE_LINEAR_NEAREST_MIPNEAREST\r\n    0 << 7, // TEXTURE_LINEAR_NEAREST_MIPLINEAR\r\n    0 << 7, // TEXTURE_LINEAR_LINEAR_MIPNEAREST\r\n    1 << 7, // TEXTURE_LINEAR_NEAREST\r\n];\r\n\r\n/** @hidden */\r\nexport class WebGPUCacheSampler {\r\n    private _samplers: { [hash: number]: GPUSampler } = {};\r\n    private _device: GPUDevice;\r\n\r\n    public disabled: boolean;\r\n\r\n    constructor(device: GPUDevice) {\r\n        this._device = device;\r\n        this.disabled = false;\r\n    }\r\n\r\n    public static GetSamplerHashCode(sampler: TextureSampler): number {\r\n        // The WebGPU spec currently only allows values 1 and 4 for anisotropy\r\n        const anisotropy = sampler._cachedAnisotropicFilteringLevel && sampler._cachedAnisotropicFilteringLevel > 1 ? 4 : 1;\r\n        const code =\r\n            filterToBits[sampler.samplingMode] +\r\n            comparisonFunctionToBits[(sampler._comparisonFunction || 0x0202) - 0x0200 + 1] +\r\n            filterNoMipToBits[sampler.samplingMode] + // handle the lodMinClamp = lodMaxClamp = 0 case when no filter used for mip mapping\r\n            ((sampler._cachedWrapU ?? 1) << 8) +\r\n            ((sampler._cachedWrapV ?? 1) << 10) +\r\n            ((sampler._cachedWrapR ?? 1) << 12) +\r\n            ((sampler.useMipMaps ? 1 : 0) << 14) + // need to factor this in because _getSamplerFilterDescriptor depends on samplingMode AND useMipMaps!\r\n            (anisotropy << 15);\r\n\r\n        return code;\r\n    }\r\n\r\n    private static _GetSamplerFilterDescriptor(\r\n        sampler: TextureSampler,\r\n        anisotropy: number\r\n    ): {\r\n        magFilter: GPUFilterMode;\r\n        minFilter: GPUFilterMode;\r\n        mipmapFilter: GPUFilterMode;\r\n        lodMinClamp?: number;\r\n        lodMaxClamp?: number;\r\n        anisotropyEnabled?: boolean;\r\n    } {\r\n        let magFilter: GPUFilterMode, minFilter: GPUFilterMode, mipmapFilter: GPUFilterMode, lodMinClamp: number | undefined, lodMaxClamp: number | undefined;\r\n        const useMipMaps = sampler.useMipMaps;\r\n        switch (sampler.samplingMode) {\r\n            case Constants.TEXTURE_LINEAR_LINEAR_MIPNEAREST:\r\n                magFilter = WebGPUConstants.FilterMode.Linear;\r\n                minFilter = WebGPUConstants.FilterMode.Linear;\r\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                if (!useMipMaps) {\r\n                    lodMinClamp = lodMaxClamp = 0;\r\n                }\r\n                break;\r\n            case Constants.TEXTURE_LINEAR_LINEAR_MIPLINEAR:\r\n            case Constants.TEXTURE_TRILINEAR_SAMPLINGMODE:\r\n                magFilter = WebGPUConstants.FilterMode.Linear;\r\n                minFilter = WebGPUConstants.FilterMode.Linear;\r\n                if (!useMipMaps) {\r\n                    mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                    lodMinClamp = lodMaxClamp = 0;\r\n                } else {\r\n                    mipmapFilter = WebGPUConstants.FilterMode.Linear;\r\n                }\r\n                break;\r\n            case Constants.TEXTURE_NEAREST_NEAREST_MIPLINEAR:\r\n                magFilter = WebGPUConstants.FilterMode.Nearest;\r\n                minFilter = WebGPUConstants.FilterMode.Nearest;\r\n                if (!useMipMaps) {\r\n                    mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                    lodMinClamp = lodMaxClamp = 0;\r\n                } else {\r\n                    mipmapFilter = WebGPUConstants.FilterMode.Linear;\r\n                }\r\n                break;\r\n            case Constants.TEXTURE_NEAREST_NEAREST_MIPNEAREST:\r\n                magFilter = WebGPUConstants.FilterMode.Nearest;\r\n                minFilter = WebGPUConstants.FilterMode.Nearest;\r\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                if (!useMipMaps) {\r\n                    lodMinClamp = lodMaxClamp = 0;\r\n                }\r\n                break;\r\n            case Constants.TEXTURE_NEAREST_LINEAR_MIPNEAREST:\r\n                magFilter = WebGPUConstants.FilterMode.Nearest;\r\n                minFilter = WebGPUConstants.FilterMode.Linear;\r\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                if (!useMipMaps) {\r\n                    lodMinClamp = lodMaxClamp = 0;\r\n                }\r\n                break;\r\n            case Constants.TEXTURE_NEAREST_LINEAR_MIPLINEAR:\r\n                magFilter = WebGPUConstants.FilterMode.Nearest;\r\n                minFilter = WebGPUConstants.FilterMode.Linear;\r\n                if (!useMipMaps) {\r\n                    mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                    lodMinClamp = lodMaxClamp = 0;\r\n                } else {\r\n                    mipmapFilter = WebGPUConstants.FilterMode.Linear;\r\n                }\r\n                break;\r\n            case Constants.TEXTURE_NEAREST_LINEAR:\r\n                magFilter = WebGPUConstants.FilterMode.Nearest;\r\n                minFilter = WebGPUConstants.FilterMode.Linear;\r\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                lodMinClamp = lodMaxClamp = 0;\r\n                break;\r\n            case Constants.TEXTURE_NEAREST_NEAREST:\r\n            case Constants.TEXTURE_NEAREST_SAMPLINGMODE:\r\n                magFilter = WebGPUConstants.FilterMode.Nearest;\r\n                minFilter = WebGPUConstants.FilterMode.Nearest;\r\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                lodMinClamp = lodMaxClamp = 0;\r\n                break;\r\n            case Constants.TEXTURE_LINEAR_NEAREST_MIPNEAREST:\r\n                magFilter = WebGPUConstants.FilterMode.Linear;\r\n                minFilter = WebGPUConstants.FilterMode.Nearest;\r\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                if (!useMipMaps) {\r\n                    lodMinClamp = lodMaxClamp = 0;\r\n                }\r\n                break;\r\n            case Constants.TEXTURE_LINEAR_NEAREST_MIPLINEAR:\r\n                magFilter = WebGPUConstants.FilterMode.Linear;\r\n                minFilter = WebGPUConstants.FilterMode.Nearest;\r\n                if (!useMipMaps) {\r\n                    mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                    lodMinClamp = lodMaxClamp = 0;\r\n                } else {\r\n                    mipmapFilter = WebGPUConstants.FilterMode.Linear;\r\n                }\r\n                break;\r\n            case Constants.TEXTURE_LINEAR_LINEAR:\r\n            case Constants.TEXTURE_BILINEAR_SAMPLINGMODE:\r\n                magFilter = WebGPUConstants.FilterMode.Linear;\r\n                minFilter = WebGPUConstants.FilterMode.Linear;\r\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                lodMinClamp = lodMaxClamp = 0;\r\n                break;\r\n            case Constants.TEXTURE_LINEAR_NEAREST:\r\n                magFilter = WebGPUConstants.FilterMode.Linear;\r\n                minFilter = WebGPUConstants.FilterMode.Nearest;\r\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                lodMinClamp = lodMaxClamp = 0;\r\n                break;\r\n            default:\r\n                magFilter = WebGPUConstants.FilterMode.Nearest;\r\n                minFilter = WebGPUConstants.FilterMode.Nearest;\r\n                mipmapFilter = WebGPUConstants.FilterMode.Nearest;\r\n                lodMinClamp = lodMaxClamp = 0;\r\n                break;\r\n        }\r\n\r\n        if (anisotropy > 1 && (lodMinClamp !== 0 || lodMaxClamp !== 0)) {\r\n            return {\r\n                magFilter: WebGPUConstants.FilterMode.Linear,\r\n                minFilter: WebGPUConstants.FilterMode.Linear,\r\n                mipmapFilter: WebGPUConstants.FilterMode.Linear,\r\n                anisotropyEnabled: true,\r\n            };\r\n        }\r\n\r\n        return {\r\n            magFilter,\r\n            minFilter,\r\n            mipmapFilter,\r\n            lodMinClamp,\r\n            lodMaxClamp,\r\n        };\r\n    }\r\n\r\n    private static _GetWrappingMode(mode: number): GPUAddressMode {\r\n        switch (mode) {\r\n            case Constants.TEXTURE_WRAP_ADDRESSMODE:\r\n                return WebGPUConstants.AddressMode.Repeat;\r\n            case Constants.TEXTURE_CLAMP_ADDRESSMODE:\r\n                return WebGPUConstants.AddressMode.ClampToEdge;\r\n            case Constants.TEXTURE_MIRROR_ADDRESSMODE:\r\n                return WebGPUConstants.AddressMode.MirrorRepeat;\r\n        }\r\n        return WebGPUConstants.AddressMode.Repeat;\r\n    }\r\n\r\n    private static _GetSamplerWrappingDescriptor(sampler: TextureSampler): {\r\n        addressModeU: GPUAddressMode;\r\n        addressModeV: GPUAddressMode;\r\n        addressModeW: GPUAddressMode;\r\n    } {\r\n        return {\r\n            addressModeU: this._GetWrappingMode(sampler._cachedWrapU!),\r\n            addressModeV: this._GetWrappingMode(sampler._cachedWrapV!),\r\n            addressModeW: this._GetWrappingMode(sampler._cachedWrapR!),\r\n        };\r\n    }\r\n\r\n    private static _GetSamplerDescriptor(sampler: TextureSampler): GPUSamplerDescriptor {\r\n        // The WebGPU spec currently only allows values 1 and 4 for anisotropy\r\n        const anisotropy = sampler.useMipMaps && sampler._cachedAnisotropicFilteringLevel && sampler._cachedAnisotropicFilteringLevel > 1 ? 4 : 1;\r\n        const filterDescriptor = this._GetSamplerFilterDescriptor(sampler, anisotropy);\r\n        return {\r\n            ...filterDescriptor,\r\n            ...this._GetSamplerWrappingDescriptor(sampler),\r\n            compare: sampler._comparisonFunction ? WebGPUCacheSampler.GetCompareFunction(sampler._comparisonFunction) : undefined,\r\n            maxAnisotropy: filterDescriptor.anisotropyEnabled ? anisotropy : 1,\r\n        };\r\n    }\r\n\r\n    public static GetCompareFunction(compareFunction: Nullable<number>): GPUCompareFunction {\r\n        switch (compareFunction) {\r\n            case Constants.ALWAYS:\r\n                return WebGPUConstants.CompareFunction.Always;\r\n            case Constants.EQUAL:\r\n                return WebGPUConstants.CompareFunction.Equal;\r\n            case Constants.GREATER:\r\n                return WebGPUConstants.CompareFunction.Greater;\r\n            case Constants.GEQUAL:\r\n                return WebGPUConstants.CompareFunction.GreaterEqual;\r\n            case Constants.LESS:\r\n                return WebGPUConstants.CompareFunction.Less;\r\n            case Constants.LEQUAL:\r\n                return WebGPUConstants.CompareFunction.LessEqual;\r\n            case Constants.NEVER:\r\n                return WebGPUConstants.CompareFunction.Never;\r\n            case Constants.NOTEQUAL:\r\n                return WebGPUConstants.CompareFunction.NotEqual;\r\n            default:\r\n                return WebGPUConstants.CompareFunction.Less;\r\n        }\r\n    }\r\n\r\n    public getSampler(sampler: TextureSampler, bypassCache = false, hash = 0): GPUSampler {\r\n        if (this.disabled) {\r\n            return this._device.createSampler(WebGPUCacheSampler._GetSamplerDescriptor(sampler));\r\n        }\r\n\r\n        if (bypassCache) {\r\n            hash = 0;\r\n        } else if (hash === 0) {\r\n            hash = WebGPUCacheSampler.GetSamplerHashCode(sampler);\r\n        }\r\n\r\n        let gpuSampler = bypassCache ? undefined : this._samplers[hash];\r\n        if (!gpuSampler) {\r\n            gpuSampler = this._device.createSampler(WebGPUCacheSampler._GetSamplerDescriptor(sampler));\r\n            if (!bypassCache) {\r\n                this._samplers[hash] = gpuSampler;\r\n            }\r\n        }\r\n\r\n        return gpuSampler;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}