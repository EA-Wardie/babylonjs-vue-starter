{"ast":null,"code":"import { ShaderLanguage } from \"../Materials/shaderLanguage.js\";\n/**\n * Defines the shader related stores and directory\n */\n\nvar ShaderStore =\n/** @class */\nfunction () {\n  function ShaderStore() {}\n  /**\n   * Gets the shaders repository path for a given shader language\n   * @param shaderLanguage the shader language\n   * @returns the path to the shaders repository\n   */\n\n\n  ShaderStore.GetShadersRepository = function (shaderLanguage) {\n    if (shaderLanguage === void 0) {\n      shaderLanguage = ShaderLanguage.GLSL;\n    }\n\n    return shaderLanguage === ShaderLanguage.GLSL ? ShaderStore.ShadersRepository : ShaderStore.ShadersRepositoryWGSL;\n  };\n  /**\n   * Gets the shaders store of a given shader language\n   * @param shaderLanguage the shader language\n   * @returns the shaders store\n   */\n\n\n  ShaderStore.GetShadersStore = function (shaderLanguage) {\n    if (shaderLanguage === void 0) {\n      shaderLanguage = ShaderLanguage.GLSL;\n    }\n\n    return shaderLanguage === ShaderLanguage.GLSL ? ShaderStore.ShadersStore : ShaderStore.ShadersStoreWGSL;\n  };\n  /**\n   * Gets the include shaders store of a given shader language\n   * @param shaderLanguage the shader language\n   * @returns the include shaders store\n   */\n\n\n  ShaderStore.GetIncludesShadersStore = function (shaderLanguage) {\n    if (shaderLanguage === void 0) {\n      shaderLanguage = ShaderLanguage.GLSL;\n    }\n\n    return shaderLanguage === ShaderLanguage.GLSL ? ShaderStore.IncludesShadersStore : ShaderStore.IncludesShadersStoreWGSL;\n  };\n  /**\n   * Gets or sets the relative url used to load shaders if using the engine in non-minified mode\n   */\n\n\n  ShaderStore.ShadersRepository = \"src/Shaders/\";\n  /**\n   * Store of each shader (The can be looked up using effect.key)\n   */\n\n  ShaderStore.ShadersStore = {};\n  /**\n   * Store of each included file for a shader (The can be looked up using effect.key)\n   */\n\n  ShaderStore.IncludesShadersStore = {};\n  /**\n   * Gets or sets the relative url used to load shaders (WGSL) if using the engine in non-minified mode\n   */\n\n  ShaderStore.ShadersRepositoryWGSL = \"src/ShadersWGSL/\";\n  /**\n   * Store of each shader  (WGSL)\n   */\n\n  ShaderStore.ShadersStoreWGSL = {};\n  /**\n   * Store of each included file for a shader (WGSL)\n   */\n\n  ShaderStore.IncludesShadersStoreWGSL = {};\n  return ShaderStore;\n}();\n\nexport { ShaderStore };","map":{"version":3,"mappings":"AAAA,SAASA,cAAT,QAA+B,gCAA/B;AAEA;;;;AAGA;AAAA;AAAA;AAAA,0BAqDC;AA1BG;;;;;;;AAKcC,qCAAd,UAAmCC,cAAnC,EAAuE;AAApC;AAAAA,uBAAiBF,cAAc,CAACG,IAAhC;AAAoC;;AACnE,WAAOD,cAAc,KAAKF,cAAc,CAACG,IAAlC,GAAyCF,WAAW,CAACG,iBAArD,GAAyEH,WAAW,CAACI,qBAA5F;AACH,GAFa;AAId;;;;;;;AAKcJ,gCAAd,UAA8BC,cAA9B,EAAkE;AAApC;AAAAA,uBAAiBF,cAAc,CAACG,IAAhC;AAAoC;;AAC9D,WAAOD,cAAc,KAAKF,cAAc,CAACG,IAAlC,GAAyCF,WAAW,CAACK,YAArD,GAAoEL,WAAW,CAACM,gBAAvF;AACH,GAFa;AAId;;;;;;;AAKcN,wCAAd,UAAsCC,cAAtC,EAA0E;AAApC;AAAAA,uBAAiBF,cAAc,CAACG,IAAhC;AAAoC;;AACtE,WAAOD,cAAc,KAAKF,cAAc,CAACG,IAAlC,GAAyCF,WAAW,CAACO,oBAArD,GAA4EP,WAAW,CAACQ,wBAA/F;AACH,GAFa;AAjDd;;;;;AAGcR,kCAAoB,cAApB;AACd;;;;AAGcA,6BAA0C,EAA1C;AACd;;;;AAGcA,qCAAkD,EAAlD;AAEd;;;;AAGcA,sCAAwB,kBAAxB;AACd;;;;AAGcA,iCAA8C,EAA9C;AACd;;;;AAGcA,yCAAsD,EAAtD;AA4BlB;AAAC,CArDD;;SAAaA","names":["ShaderLanguage","ShaderStore","shaderLanguage","GLSL","ShadersRepository","ShadersRepositoryWGSL","ShadersStore","ShadersStoreWGSL","IncludesShadersStore","IncludesShadersStoreWGSL"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/shaderStore.ts"],"sourcesContent":["import { ShaderLanguage } from \"../Materials/shaderLanguage\";\r\n\r\n/**\r\n * Defines the shader related stores and directory\r\n */\r\nexport class ShaderStore {\r\n    /**\r\n     * Gets or sets the relative url used to load shaders if using the engine in non-minified mode\r\n     */\r\n    public static ShadersRepository = \"src/Shaders/\";\r\n    /**\r\n     * Store of each shader (The can be looked up using effect.key)\r\n     */\r\n    public static ShadersStore: { [key: string]: string } = {};\r\n    /**\r\n     * Store of each included file for a shader (The can be looked up using effect.key)\r\n     */\r\n    public static IncludesShadersStore: { [key: string]: string } = {};\r\n\r\n    /**\r\n     * Gets or sets the relative url used to load shaders (WGSL) if using the engine in non-minified mode\r\n     */\r\n    public static ShadersRepositoryWGSL = \"src/ShadersWGSL/\";\r\n    /**\r\n     * Store of each shader  (WGSL)\r\n     */\r\n    public static ShadersStoreWGSL: { [key: string]: string } = {};\r\n    /**\r\n     * Store of each included file for a shader (WGSL)\r\n     */\r\n    public static IncludesShadersStoreWGSL: { [key: string]: string } = {};\r\n\r\n    /**\r\n     * Gets the shaders repository path for a given shader language\r\n     * @param shaderLanguage the shader language\r\n     * @returns the path to the shaders repository\r\n     */\r\n    public static GetShadersRepository(shaderLanguage = ShaderLanguage.GLSL): string {\r\n        return shaderLanguage === ShaderLanguage.GLSL ? ShaderStore.ShadersRepository : ShaderStore.ShadersRepositoryWGSL;\r\n    }\r\n\r\n    /**\r\n     * Gets the shaders store of a given shader language\r\n     * @param shaderLanguage the shader language\r\n     * @returns the shaders store\r\n     */\r\n    public static GetShadersStore(shaderLanguage = ShaderLanguage.GLSL): { [key: string]: string } {\r\n        return shaderLanguage === ShaderLanguage.GLSL ? ShaderStore.ShadersStore : ShaderStore.ShadersStoreWGSL;\r\n    }\r\n\r\n    /**\r\n     * Gets the include shaders store of a given shader language\r\n     * @param shaderLanguage the shader language\r\n     * @returns the include shaders store\r\n     */\r\n    public static GetIncludesShadersStore(shaderLanguage = ShaderLanguage.GLSL): { [key: string]: string } {\r\n        return shaderLanguage === ShaderLanguage.GLSL ? ShaderStore.IncludesShadersStore : ShaderStore.IncludesShadersStoreWGSL;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}