{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport { __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport \"../Shaders/pass.fragment.js\";\nimport \"../Shaders/passCube.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * PassPostProcess which produces an output the same as it's input\n */\n\nvar PassPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(PassPostProcess, _super);\n  /**\n   * Creates the PassPostProcess\n   * @param name The name of the effect.\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   * @param textureType The type of texture to be used when performing the post processing.\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n   */\n\n\n  function PassPostProcess(name, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n    if (camera === void 0) {\n      camera = null;\n    }\n\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    return _super.call(this, name, \"pass\", null, null, options, camera, samplingMode, engine, reusable, undefined, textureType, undefined, null, blockCompilation) || this;\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"PassPostProcess\" string\n   */\n\n\n  PassPostProcess.prototype.getClassName = function () {\n    return \"PassPostProcess\";\n  };\n  /**\n   * @param parsedPostProcess\n   * @param targetCamera\n   * @param scene\n   * @param rootUrl\n   * @hidden\n   */\n\n\n  PassPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new PassPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, parsedPostProcess._engine, parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  return PassPostProcess;\n}(PostProcess);\n\nexport { PassPostProcess };\nRegisterClass(\"BABYLON.PassPostProcess\", PassPostProcess);\n/**\n * PassCubePostProcess which produces an output the same as it's input (which must be a cube texture)\n */\n\nvar PassCubePostProcess =\n/** @class */\nfunction (_super) {\n  __extends(PassCubePostProcess, _super);\n  /**\n   * Creates the PassCubePostProcess\n   * @param name The name of the effect.\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   * @param textureType The type of texture to be used when performing the post processing.\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n   */\n\n\n  function PassCubePostProcess(name, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n    if (camera === void 0) {\n      camera = null;\n    }\n\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    var _this = _super.call(this, name, \"passCube\", null, null, options, camera, samplingMode, engine, reusable, \"#define POSITIVEX\", textureType, undefined, null, blockCompilation) || this;\n\n    _this._face = 0;\n    return _this;\n  }\n\n  Object.defineProperty(PassCubePostProcess.prototype, \"face\", {\n    /**\n     * Gets or sets the cube face to display.\n     *  * 0 is +X\n     *  * 1 is -X\n     *  * 2 is +Y\n     *  * 3 is -Y\n     *  * 4 is +Z\n     *  * 5 is -Z\n     */\n    get: function get() {\n      return this._face;\n    },\n    set: function set(value) {\n      if (value < 0 || value > 5) {\n        return;\n      }\n\n      this._face = value;\n\n      switch (this._face) {\n        case 0:\n          this.updateEffect(\"#define POSITIVEX\");\n          break;\n\n        case 1:\n          this.updateEffect(\"#define NEGATIVEX\");\n          break;\n\n        case 2:\n          this.updateEffect(\"#define POSITIVEY\");\n          break;\n\n        case 3:\n          this.updateEffect(\"#define NEGATIVEY\");\n          break;\n\n        case 4:\n          this.updateEffect(\"#define POSITIVEZ\");\n          break;\n\n        case 5:\n          this.updateEffect(\"#define NEGATIVEZ\");\n          break;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"PassCubePostProcess\" string\n   */\n\n  PassCubePostProcess.prototype.getClassName = function () {\n    return \"PassCubePostProcess\";\n  };\n  /**\n   * @param parsedPostProcess\n   * @param targetCamera\n   * @param scene\n   * @param rootUrl\n   * @hidden\n   */\n\n\n  PassCubePostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new PassCubePostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, parsedPostProcess._engine, parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  return PassCubePostProcess;\n}(PostProcess);\n\nexport { PassCubePostProcess };\n\nEngine._RescalePostProcessFactory = function (engine) {\n  return new PassPostProcess(\"rescale\", 1, null, 2, engine, false, 0);\n};","map":{"version":3,"mappings":"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","names":["PostProcess","Engine","RegisterClass","SerializationHelper","__extends","name","options","camera","samplingMode","engine","reusable","textureType","blockCompilation","_super","undefined","PassPostProcess","parsedPostProcess","targetCamera","scene","rootUrl","Parse","renderTargetSamplingMode","_engine","_this","Object","PassCubePostProcess","_face","value","updateEffect","_RescalePostProcessFactory"],"sourceRoot":"","sources":["../../../../../lts/core/generated/PostProcesses/passPostProcess.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport { Engine } from \"../Engines/engine\";\r\n\r\nimport \"../Shaders/pass.fragment\";\r\nimport \"../Shaders/passCube.fragment\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { SerializationHelper } from \"../Misc/decorators\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * PassPostProcess which produces an output the same as it's input\r\n */\r\nexport class PassPostProcess extends PostProcess {\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"PassPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"PassPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates the PassPostProcess\r\n     * @param name The name of the effect.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType The type of texture to be used when performing the post processing.\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera> = null,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        blockCompilation = false\r\n    ) {\r\n        super(name, \"pass\", null, null, options, camera, samplingMode, engine, reusable, undefined, textureType, undefined, null, blockCompilation);\r\n    }\r\n\r\n    /**\r\n     * @param parsedPostProcess\r\n     * @param targetCamera\r\n     * @param scene\r\n     * @param rootUrl\r\n     * @hidden\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string) {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new PassPostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    parsedPostProcess._engine,\r\n                    parsedPostProcess.reusable\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.PassPostProcess\", PassPostProcess);\r\n\r\n/**\r\n * PassCubePostProcess which produces an output the same as it's input (which must be a cube texture)\r\n */\r\nexport class PassCubePostProcess extends PostProcess {\r\n    private _face = 0;\r\n\r\n    /**\r\n     * Gets or sets the cube face to display.\r\n     *  * 0 is +X\r\n     *  * 1 is -X\r\n     *  * 2 is +Y\r\n     *  * 3 is -Y\r\n     *  * 4 is +Z\r\n     *  * 5 is -Z\r\n     */\r\n    public get face(): number {\r\n        return this._face;\r\n    }\r\n\r\n    public set face(value: number) {\r\n        if (value < 0 || value > 5) {\r\n            return;\r\n        }\r\n\r\n        this._face = value;\r\n        switch (this._face) {\r\n            case 0:\r\n                this.updateEffect(\"#define POSITIVEX\");\r\n                break;\r\n            case 1:\r\n                this.updateEffect(\"#define NEGATIVEX\");\r\n                break;\r\n            case 2:\r\n                this.updateEffect(\"#define POSITIVEY\");\r\n                break;\r\n            case 3:\r\n                this.updateEffect(\"#define NEGATIVEY\");\r\n                break;\r\n            case 4:\r\n                this.updateEffect(\"#define POSITIVEZ\");\r\n                break;\r\n            case 5:\r\n                this.updateEffect(\"#define NEGATIVEZ\");\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"PassCubePostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"PassCubePostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates the PassCubePostProcess\r\n     * @param name The name of the effect.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType The type of texture to be used when performing the post processing.\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera> = null,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        blockCompilation = false\r\n    ) {\r\n        super(name, \"passCube\", null, null, options, camera, samplingMode, engine, reusable, \"#define POSITIVEX\", textureType, undefined, null, blockCompilation);\r\n    }\r\n\r\n    /**\r\n     * @param parsedPostProcess\r\n     * @param targetCamera\r\n     * @param scene\r\n     * @param rootUrl\r\n     * @hidden\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string) {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new PassCubePostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    parsedPostProcess._engine,\r\n                    parsedPostProcess.reusable\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nEngine._RescalePostProcessFactory = (engine: Engine) => {\r\n    return new PassPostProcess(\"rescale\", 1, null, Constants.TEXTURE_BILINEAR_SAMPLINGMODE, engine, false, Constants.TEXTURETYPE_UNSIGNED_INT);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}