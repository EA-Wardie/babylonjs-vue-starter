{"ast":null,"code":"import \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.define-property.js\";\n\n/**\n * Size containing width and height\n */\nvar Size =\n/** @class */\nfunction () {\n  /**\n   * Creates a Size object from the given width and height (floats).\n   * @param width width of the new size\n   * @param height height of the new size\n   */\n  function Size(width, height) {\n    this.width = width;\n    this.height = height;\n  }\n  /**\n   * Returns a string with the Size width and height\n   * @returns a string with the Size width and height\n   */\n\n\n  Size.prototype.toString = function () {\n    return \"{W: \".concat(this.width, \", H: \").concat(this.height, \"}\");\n  };\n  /**\n   * \"Size\"\n   * @returns the string \"Size\"\n   */\n\n\n  Size.prototype.getClassName = function () {\n    return \"Size\";\n  };\n  /**\n   * Returns the Size hash code.\n   * @returns a hash code for a unique width and height\n   */\n\n\n  Size.prototype.getHashCode = function () {\n    var hash = this.width | 0;\n    hash = hash * 397 ^ (this.height | 0);\n    return hash;\n  };\n  /**\n   * Updates the current size from the given one.\n   * @param src the given size\n   */\n\n\n  Size.prototype.copyFrom = function (src) {\n    this.width = src.width;\n    this.height = src.height;\n  };\n  /**\n   * Updates in place the current Size from the given floats.\n   * @param width width of the new size\n   * @param height height of the new size\n   * @returns the updated Size.\n   */\n\n\n  Size.prototype.copyFromFloats = function (width, height) {\n    this.width = width;\n    this.height = height;\n    return this;\n  };\n  /**\n   * Updates in place the current Size from the given floats.\n   * @param width width to set\n   * @param height height to set\n   * @returns the updated Size.\n   */\n\n\n  Size.prototype.set = function (width, height) {\n    return this.copyFromFloats(width, height);\n  };\n  /**\n   * Multiplies the width and height by numbers\n   * @param w factor to multiple the width by\n   * @param h factor to multiple the height by\n   * @returns a new Size set with the multiplication result of the current Size and the given floats.\n   */\n\n\n  Size.prototype.multiplyByFloats = function (w, h) {\n    return new Size(this.width * w, this.height * h);\n  };\n  /**\n   * Clones the size\n   * @returns a new Size copied from the given one.\n   */\n\n\n  Size.prototype.clone = function () {\n    return new Size(this.width, this.height);\n  };\n  /**\n   * True if the current Size and the given one width and height are strictly equal.\n   * @param other the other size to compare against\n   * @returns True if the current Size and the given one width and height are strictly equal.\n   */\n\n\n  Size.prototype.equals = function (other) {\n    if (!other) {\n      return false;\n    }\n\n    return this.width === other.width && this.height === other.height;\n  };\n\n  Object.defineProperty(Size.prototype, \"surface\", {\n    /**\n     * The surface of the Size : width * height (float).\n     */\n    get: function get() {\n      return this.width * this.height;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Create a new size of zero\n   * @returns a new Size set to (0.0, 0.0)\n   */\n\n  Size.Zero = function () {\n    return new Size(0.0, 0.0);\n  };\n  /**\n   * Sums the width and height of two sizes\n   * @param otherSize size to add to this size\n   * @returns a new Size set as the addition result of the current Size and the given one.\n   */\n\n\n  Size.prototype.add = function (otherSize) {\n    var r = new Size(this.width + otherSize.width, this.height + otherSize.height);\n    return r;\n  };\n  /**\n   * Subtracts the width and height of two\n   * @param otherSize size to subtract to this size\n   * @returns a new Size set as the subtraction result of  the given one from the current Size.\n   */\n\n\n  Size.prototype.subtract = function (otherSize) {\n    var r = new Size(this.width - otherSize.width, this.height - otherSize.height);\n    return r;\n  };\n  /**\n   * Creates a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\n   * @param start starting size to lerp between\n   * @param end end size to lerp between\n   * @param amount amount to lerp between the start and end values\n   * @returns a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\n   */\n\n\n  Size.Lerp = function (start, end, amount) {\n    var w = start.width + (end.width - start.width) * amount;\n    var h = start.height + (end.height - start.height) * amount;\n    return new Size(w, h);\n  };\n\n  return Size;\n}();\n\nexport { Size };","map":{"version":3,"mappings":"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","names":["width","height","Size","concat","hash","src","copyFromFloats","w","h","other","Object","otherSize","r","start","end","amount"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Maths/math.size.ts"],"sourcesContent":["/**\r\n * Interface for the size containing width and height\r\n */\r\nexport interface ISize {\r\n    /**\r\n     * Width\r\n     */\r\n    width: number;\r\n    /**\r\n     * Height\r\n     */\r\n    height: number;\r\n}\r\n\r\n/**\r\n * Size containing width and height\r\n */\r\nexport class Size implements ISize {\r\n    /**\r\n     * Width\r\n     */\r\n    public width: number;\r\n    /**\r\n     * Height\r\n     */\r\n    public height: number;\r\n\r\n    /**\r\n     * Creates a Size object from the given width and height (floats).\r\n     * @param width width of the new size\r\n     * @param height height of the new size\r\n     */\r\n    public constructor(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    /**\r\n     * Returns a string with the Size width and height\r\n     * @returns a string with the Size width and height\r\n     */\r\n    public toString(): string {\r\n        return `{W: ${this.width}, H: ${this.height}}`;\r\n    }\r\n    /**\r\n     * \"Size\"\r\n     * @returns the string \"Size\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"Size\";\r\n    }\r\n    /**\r\n     * Returns the Size hash code.\r\n     * @returns a hash code for a unique width and height\r\n     */\r\n    public getHashCode(): number {\r\n        let hash = this.width | 0;\r\n        hash = (hash * 397) ^ (this.height | 0);\r\n        return hash;\r\n    }\r\n    /**\r\n     * Updates the current size from the given one.\r\n     * @param src the given size\r\n     */\r\n    public copyFrom(src: Size) {\r\n        this.width = src.width;\r\n        this.height = src.height;\r\n    }\r\n    /**\r\n     * Updates in place the current Size from the given floats.\r\n     * @param width width of the new size\r\n     * @param height height of the new size\r\n     * @returns the updated Size.\r\n     */\r\n    public copyFromFloats(width: number, height: number): Size {\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n    /**\r\n     * Updates in place the current Size from the given floats.\r\n     * @param width width to set\r\n     * @param height height to set\r\n     * @returns the updated Size.\r\n     */\r\n    public set(width: number, height: number): Size {\r\n        return this.copyFromFloats(width, height);\r\n    }\r\n    /**\r\n     * Multiplies the width and height by numbers\r\n     * @param w factor to multiple the width by\r\n     * @param h factor to multiple the height by\r\n     * @returns a new Size set with the multiplication result of the current Size and the given floats.\r\n     */\r\n    public multiplyByFloats(w: number, h: number): Size {\r\n        return new Size(this.width * w, this.height * h);\r\n    }\r\n    /**\r\n     * Clones the size\r\n     * @returns a new Size copied from the given one.\r\n     */\r\n    public clone(): Size {\r\n        return new Size(this.width, this.height);\r\n    }\r\n    /**\r\n     * True if the current Size and the given one width and height are strictly equal.\r\n     * @param other the other size to compare against\r\n     * @returns True if the current Size and the given one width and height are strictly equal.\r\n     */\r\n    public equals(other: Size): boolean {\r\n        if (!other) {\r\n            return false;\r\n        }\r\n        return this.width === other.width && this.height === other.height;\r\n    }\r\n    /**\r\n     * The surface of the Size : width * height (float).\r\n     */\r\n    public get surface(): number {\r\n        return this.width * this.height;\r\n    }\r\n    /**\r\n     * Create a new size of zero\r\n     * @returns a new Size set to (0.0, 0.0)\r\n     */\r\n    public static Zero(): Size {\r\n        return new Size(0.0, 0.0);\r\n    }\r\n    /**\r\n     * Sums the width and height of two sizes\r\n     * @param otherSize size to add to this size\r\n     * @returns a new Size set as the addition result of the current Size and the given one.\r\n     */\r\n    public add(otherSize: Size): Size {\r\n        const r = new Size(this.width + otherSize.width, this.height + otherSize.height);\r\n        return r;\r\n    }\r\n    /**\r\n     * Subtracts the width and height of two\r\n     * @param otherSize size to subtract to this size\r\n     * @returns a new Size set as the subtraction result of  the given one from the current Size.\r\n     */\r\n    public subtract(otherSize: Size): Size {\r\n        const r = new Size(this.width - otherSize.width, this.height - otherSize.height);\r\n        return r;\r\n    }\r\n    /**\r\n     * Creates a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\r\n     * @param start starting size to lerp between\r\n     * @param end end size to lerp between\r\n     * @param amount amount to lerp between the start and end values\r\n     * @returns a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\r\n     */\r\n    public static Lerp(start: Size, end: Size, amount: number): Size {\r\n        const w = start.width + (end.width - start.width) * amount;\r\n        const h = start.height + (end.height - start.height) * amount;\r\n\r\n        return new Size(w, h);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}