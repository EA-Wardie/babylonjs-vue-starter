{"ast":null,"code":"import { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Color4 } from \"../../Maths/math.color.js\";\nimport { Mesh } from \"../../Meshes/mesh.js\";\nimport { VertexData } from \"../mesh.vertexData.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { _PrimaryIsoTriangle, GeodesicData } from \"../geodesicMesh.js\";\nimport { GoldbergMesh } from \"../goldbergMesh.js\";\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions.js\";\n/**\n * Creates the Mesh for a Goldberg Polyhedron\n * @param options an object used to set the following optional parameters for the polyhedron, required but can be empty\n * @param goldbergData polyhedronData defining the Goldberg polyhedron\n * @returns GoldbergSphere mesh\n */\n\nexport function CreateGoldbergVertexData(options, goldbergData) {\n  var size = options.size;\n  var sizeX = options.sizeX || size || 1;\n  var sizeY = options.sizeY || size || 1;\n  var sizeZ = options.sizeZ || size || 1;\n  var sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\n  var positions = new Array();\n  var indices = new Array();\n  var normals = new Array();\n  var uvs = new Array();\n  var minX = Infinity;\n  var maxX = -Infinity;\n  var minY = Infinity;\n  var maxY = -Infinity;\n\n  for (var v = 0; v < goldbergData.vertex.length; v++) {\n    minX = Math.min(minX, goldbergData.vertex[v][0] * sizeX);\n    maxX = Math.max(maxX, goldbergData.vertex[v][0] * sizeX);\n    minY = Math.min(minY, goldbergData.vertex[v][1] * sizeY);\n    maxY = Math.max(maxY, goldbergData.vertex[v][1] * sizeY);\n  }\n\n  var index = 0;\n\n  for (var f = 0; f < goldbergData.face.length; f++) {\n    var verts = goldbergData.face[f];\n    var a = Vector3.FromArray(goldbergData.vertex[verts[0]]);\n    var b = Vector3.FromArray(goldbergData.vertex[verts[2]]);\n    var c = Vector3.FromArray(goldbergData.vertex[verts[1]]);\n    var ba = b.subtract(a);\n    var ca = c.subtract(a);\n    var norm = Vector3.Cross(ca, ba).normalize();\n\n    for (var v = 0; v < verts.length; v++) {\n      normals.push(norm.x, norm.y, norm.z);\n      var pdata = goldbergData.vertex[verts[v]];\n      positions.push(pdata[0] * sizeX, pdata[1] * sizeY, pdata[2] * sizeZ);\n      var vCoord = (pdata[1] * sizeY - minY) / (maxY - minY);\n      uvs.push((pdata[0] * sizeX - minX) / (maxX - minX), CompatibilityOptions.UseOpenGLOrientationForUV ? 1 - vCoord : vCoord);\n    }\n\n    for (var v = 0; v < verts.length - 2; v++) {\n      indices.push(index, index + v + 2, index + v + 1);\n    }\n\n    index += verts.length;\n  }\n\n  VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs);\n\n  var vertexData = new VertexData();\n  vertexData.positions = positions;\n  vertexData.indices = indices;\n  vertexData.normals = normals;\n  vertexData.uvs = uvs;\n  return vertexData;\n}\n/**\n * Creates the Mesh for a Goldberg Polyhedron which is made from 12 pentagonal and the rest hexagonal faces\n * @see https://en.wikipedia.org/wiki/Goldberg_polyhedron\n * @see https://doc.babylonjs.com/divingDeeper/mesh/creation/polyhedra/goldberg_poly\n * @param name defines the name of the mesh\n * @param options an object used to set the following optional parameters for the polyhedron, required but can be empty\n * @param scene defines the hosting scene\n * @returns Goldberg mesh\n */\n\nexport function CreateGoldberg(name, options, scene) {\n  if (scene === void 0) {\n    scene = null;\n  }\n\n  var size = options.size;\n  var sizeX = options.sizeX || size || 1;\n  var sizeY = options.sizeY || size || 1;\n  var sizeZ = options.sizeZ || size || 1;\n  var m = options.m || 1;\n\n  if (m !== Math.floor(m)) {\n    m === Math.floor(m);\n    Logger.Warn(\"m not an integer only floor(m) used\");\n  }\n\n  var n = options.n || 0;\n\n  if (n !== Math.floor(n)) {\n    n === Math.floor(n);\n    Logger.Warn(\"n not an integer only floor(n) used\");\n  }\n\n  if (n > m) {\n    var temp = n;\n    n = m;\n    m = temp;\n    Logger.Warn(\"n > m therefore m and n swapped\");\n  }\n\n  var primTri = new _PrimaryIsoTriangle();\n  primTri.build(m, n);\n  var geodesicData = GeodesicData.BuildGeodesicData(primTri);\n  var goldbergData = geodesicData.toGoldbergPolyhedronData();\n  var goldberg = new GoldbergMesh(name, scene);\n  options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\n  goldberg._originalBuilderSideOrientation = options.sideOrientation;\n  var vertexData = CreateGoldbergVertexData(options, goldbergData);\n  vertexData.applyToMesh(goldberg, options.updatable);\n  goldberg.goldbergData.nbSharedFaces = geodesicData.sharedNodes;\n  goldberg.goldbergData.nbUnsharedFaces = geodesicData.poleNodes;\n  goldberg.goldbergData.adjacentFaces = geodesicData.adjacentFaces;\n  goldberg.goldbergData.nbFaces = goldberg.goldbergData.nbSharedFaces + goldberg.goldbergData.nbUnsharedFaces;\n  goldberg.goldbergData.nbFacesAtPole = (goldberg.goldbergData.nbUnsharedFaces - 12) / 12;\n\n  for (var f = 0; f < geodesicData.vertex.length; f++) {\n    goldberg.goldbergData.faceCenters.push(Vector3.FromArray(geodesicData.vertex[f]));\n    goldberg.goldbergData.faceCenters[f].x *= sizeX;\n    goldberg.goldbergData.faceCenters[f].y *= sizeY;\n    goldberg.goldbergData.faceCenters[f].z *= sizeZ;\n    goldberg.goldbergData.faceColors.push(new Color4(1, 1, 1, 1));\n  }\n\n  for (var f = 0; f < goldbergData.face.length; f++) {\n    var verts = goldbergData.face[f];\n    var a = Vector3.FromArray(goldbergData.vertex[verts[0]]);\n    var b = Vector3.FromArray(goldbergData.vertex[verts[2]]);\n    var c = Vector3.FromArray(goldbergData.vertex[verts[1]]);\n    var ba = b.subtract(a);\n    var ca = c.subtract(a);\n    var norm = Vector3.Cross(ca, ba).normalize();\n    var z = Vector3.Cross(ca, norm).normalize();\n    goldberg.goldbergData.faceXaxis.push(ca.normalize());\n    goldberg.goldbergData.faceYaxis.push(norm);\n    goldberg.goldbergData.faceZaxis.push(z);\n  }\n\n  return goldberg;\n}\nMesh.CreateGoldberg = CreateGoldberg;","map":{"version":3,"mappings":"AACA,SAASA,OAAT,QAAwB,4BAAxB;AACA,SAASC,MAAT,QAAuB,2BAAvB;AACA,SAASC,IAAT,QAAqB,sBAArB;AACA,SAASC,UAAT,QAA2B,uBAA3B;AAEA,SAASC,MAAT,QAAuB,sBAAvB;AAEA,SAASC,mBAAT,EAA8BC,YAA9B,QAAkD,oBAAlD;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,oBAAT,QAAqC,sCAArC;AA8CA;;;;;;;AAMA,OAAM,SAAUC,wBAAV,CAAmCC,OAAnC,EAAsEC,YAAtE,EAAkG;AACpG,MAAMC,IAAI,GAAGF,OAAO,CAACE,IAArB;AACA,MAAMC,KAAK,GAAWH,OAAO,CAACG,KAAR,IAAiBD,IAAjB,IAAyB,CAA/C;AACA,MAAME,KAAK,GAAWJ,OAAO,CAACI,KAAR,IAAiBF,IAAjB,IAAyB,CAA/C;AACA,MAAMG,KAAK,GAAWL,OAAO,CAACK,KAAR,IAAiBH,IAAjB,IAAyB,CAA/C;AACA,MAAMI,eAAe,GAAGN,OAAO,CAACM,eAAR,KAA4B,CAA5B,GAAgC,CAAhC,GAAoCN,OAAO,CAACM,eAAR,IAA2Bb,UAAU,CAACc,WAAlG;AAEA,MAAMC,SAAS,GAAG,IAAIC,KAAJ,EAAlB;AACA,MAAMC,OAAO,GAAG,IAAID,KAAJ,EAAhB;AACA,MAAME,OAAO,GAAG,IAAIF,KAAJ,EAAhB;AACA,MAAMG,GAAG,GAAG,IAAIH,KAAJ,EAAZ;AAEA,MAAII,IAAI,GAAGC,QAAX;AACA,MAAIC,IAAI,GAAG,CAACD,QAAZ;AACA,MAAIE,IAAI,GAAGF,QAAX;AACA,MAAIG,IAAI,GAAG,CAACH,QAAZ;;AAEA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,YAAY,CAACkB,MAAb,CAAoBC,MAAxC,EAAgDF,CAAC,EAAjD,EAAqD;AACjDL,QAAI,GAAGQ,IAAI,CAACC,GAAL,CAAST,IAAT,EAAeZ,YAAY,CAACkB,MAAb,CAAoBD,CAApB,EAAuB,CAAvB,IAA4Bf,KAA3C,CAAP;AACAY,QAAI,GAAGM,IAAI,CAACE,GAAL,CAASR,IAAT,EAAed,YAAY,CAACkB,MAAb,CAAoBD,CAApB,EAAuB,CAAvB,IAA4Bf,KAA3C,CAAP;AACAa,QAAI,GAAGK,IAAI,CAACC,GAAL,CAASN,IAAT,EAAef,YAAY,CAACkB,MAAb,CAAoBD,CAApB,EAAuB,CAAvB,IAA4Bd,KAA3C,CAAP;AACAa,QAAI,GAAGI,IAAI,CAACE,GAAL,CAASN,IAAT,EAAehB,YAAY,CAACkB,MAAb,CAAoBD,CAApB,EAAuB,CAAvB,IAA4Bd,KAA3C,CAAP;AACH;;AAED,MAAIoB,KAAK,GAAW,CAApB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGxB,YAAY,CAACyB,IAAb,CAAkBN,MAAtC,EAA8CK,CAAC,EAA/C,EAAmD;AAC/C,QAAME,KAAK,GAAG1B,YAAY,CAACyB,IAAb,CAAkBD,CAAlB,CAAd;AACA,QAAMG,CAAC,GAAGtC,OAAO,CAACuC,SAAR,CAAkB5B,YAAY,CAACkB,MAAb,CAAoBQ,KAAK,CAAC,CAAD,CAAzB,CAAlB,CAAV;AACA,QAAMG,CAAC,GAAGxC,OAAO,CAACuC,SAAR,CAAkB5B,YAAY,CAACkB,MAAb,CAAoBQ,KAAK,CAAC,CAAD,CAAzB,CAAlB,CAAV;AACA,QAAMI,CAAC,GAAGzC,OAAO,CAACuC,SAAR,CAAkB5B,YAAY,CAACkB,MAAb,CAAoBQ,KAAK,CAAC,CAAD,CAAzB,CAAlB,CAAV;AACA,QAAMK,EAAE,GAAGF,CAAC,CAACG,QAAF,CAAWL,CAAX,CAAX;AACA,QAAMM,EAAE,GAAGH,CAAC,CAACE,QAAF,CAAWL,CAAX,CAAX;AACA,QAAMO,IAAI,GAAG7C,OAAO,CAAC8C,KAAR,CAAcF,EAAd,EAAkBF,EAAlB,EAAsBK,SAAtB,EAAb;;AACA,SAAK,IAAInB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,KAAK,CAACP,MAA1B,EAAkCF,CAAC,EAAnC,EAAuC;AACnCP,aAAO,CAAC2B,IAAR,CAAaH,IAAI,CAACI,CAAlB,EAAqBJ,IAAI,CAACK,CAA1B,EAA6BL,IAAI,CAACM,CAAlC;AACA,UAAMC,KAAK,GAAGzC,YAAY,CAACkB,MAAb,CAAoBQ,KAAK,CAACT,CAAD,CAAzB,CAAd;AACAV,eAAS,CAAC8B,IAAV,CAAeI,KAAK,CAAC,CAAD,CAAL,GAAWvC,KAA1B,EAAiCuC,KAAK,CAAC,CAAD,CAAL,GAAWtC,KAA5C,EAAmDsC,KAAK,CAAC,CAAD,CAAL,GAAWrC,KAA9D;AACA,UAAMsC,MAAM,GAAG,CAACD,KAAK,CAAC,CAAD,CAAL,GAAWtC,KAAX,GAAmBY,IAApB,KAA6BC,IAAI,GAAGD,IAApC,CAAf;AACAJ,SAAG,CAAC0B,IAAJ,CAAS,CAACI,KAAK,CAAC,CAAD,CAAL,GAAWvC,KAAX,GAAmBU,IAApB,KAA6BE,IAAI,GAAGF,IAApC,CAAT,EAAoDf,oBAAoB,CAAC8C,yBAArB,GAAiD,IAAID,MAArD,GAA8DA,MAAlH;AACH;;AACD,SAAK,IAAIzB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,KAAK,CAACP,MAAN,GAAe,CAAnC,EAAsCF,CAAC,EAAvC,EAA2C;AACvCR,aAAO,CAAC4B,IAAR,CAAad,KAAb,EAAoBA,KAAK,GAAGN,CAAR,GAAY,CAAhC,EAAmCM,KAAK,GAAGN,CAAR,GAAY,CAA/C;AACH;;AACDM,SAAK,IAAIG,KAAK,CAACP,MAAf;AACH;;AAED3B,YAAU,CAACoD,aAAX,CAAyBvC,eAAzB,EAA0CE,SAA1C,EAAqDE,OAArD,EAA8DC,OAA9D,EAAuEC,GAAvE;;AAEA,MAAMkC,UAAU,GAAG,IAAIrD,UAAJ,EAAnB;AACAqD,YAAU,CAACtC,SAAX,GAAuBA,SAAvB;AACAsC,YAAU,CAACpC,OAAX,GAAqBA,OAArB;AACAoC,YAAU,CAACnC,OAAX,GAAqBA,OAArB;AACAmC,YAAU,CAAClC,GAAX,GAAiBA,GAAjB;AACA,SAAOkC,UAAP;AACH;AAED;;;;;;;;;;AASA,OAAM,SAAUC,cAAV,CAAyBC,IAAzB,EAAuChD,OAAvC,EAAwEiD,KAAxE,EAAqG;AAA7B;AAAAA;AAA6B;;AACvG,MAAM/C,IAAI,GAAGF,OAAO,CAACE,IAArB;AACA,MAAMC,KAAK,GAAWH,OAAO,CAACG,KAAR,IAAiBD,IAAjB,IAAyB,CAA/C;AACA,MAAME,KAAK,GAAWJ,OAAO,CAACI,KAAR,IAAiBF,IAAjB,IAAyB,CAA/C;AACA,MAAMG,KAAK,GAAWL,OAAO,CAACK,KAAR,IAAiBH,IAAjB,IAAyB,CAA/C;AACA,MAAIgD,CAAC,GAAWlD,OAAO,CAACkD,CAAR,IAAa,CAA7B;;AACA,MAAIA,CAAC,KAAK7B,IAAI,CAAC8B,KAAL,CAAWD,CAAX,CAAV,EAAyB;AACrBA,KAAC,KAAK7B,IAAI,CAAC8B,KAAL,CAAWD,CAAX,CAAN;AACAxD,UAAM,CAAC0D,IAAP,CAAY,qCAAZ;AACH;;AACD,MAAIC,CAAC,GAAWrD,OAAO,CAACqD,CAAR,IAAa,CAA7B;;AACA,MAAIA,CAAC,KAAKhC,IAAI,CAAC8B,KAAL,CAAWE,CAAX,CAAV,EAAyB;AACrBA,KAAC,KAAKhC,IAAI,CAAC8B,KAAL,CAAWE,CAAX,CAAN;AACA3D,UAAM,CAAC0D,IAAP,CAAY,qCAAZ;AACH;;AACD,MAAIC,CAAC,GAAGH,CAAR,EAAW;AACP,QAAMI,IAAI,GAAGD,CAAb;AACAA,KAAC,GAAGH,CAAJ;AACAA,KAAC,GAAGI,IAAJ;AACA5D,UAAM,CAAC0D,IAAP,CAAY,iCAAZ;AACH;;AACD,MAAMG,OAAO,GAAwB,IAAI5D,mBAAJ,EAArC;AACA4D,SAAO,CAACC,KAAR,CAAcN,CAAd,EAAiBG,CAAjB;AACA,MAAMI,YAAY,GAAG7D,YAAY,CAAC8D,iBAAb,CAA+BH,OAA/B,CAArB;AACA,MAAMtD,YAAY,GAAGwD,YAAY,CAACE,wBAAb,EAArB;AAEA,MAAMC,QAAQ,GAAG,IAAI/D,YAAJ,CAAiBmD,IAAjB,EAAuBC,KAAvB,CAAjB;AAEAjD,SAAO,CAACM,eAAR,GAA0Bd,IAAI,CAACqE,0BAAL,CAAgC7D,OAAO,CAACM,eAAxC,CAA1B;AACAsD,UAAQ,CAACE,+BAAT,GAA2C9D,OAAO,CAACM,eAAnD;AAEA,MAAMwC,UAAU,GAAG/C,wBAAwB,CAACC,OAAD,EAAUC,YAAV,CAA3C;AAEA6C,YAAU,CAACiB,WAAX,CAAuBH,QAAvB,EAAiC5D,OAAO,CAACgE,SAAzC;AAEAJ,UAAQ,CAAC3D,YAAT,CAAsBgE,aAAtB,GAAsCR,YAAY,CAACS,WAAnD;AACAN,UAAQ,CAAC3D,YAAT,CAAsBkE,eAAtB,GAAwCV,YAAY,CAACW,SAArD;AACAR,UAAQ,CAAC3D,YAAT,CAAsBoE,aAAtB,GAAsCZ,YAAY,CAACY,aAAnD;AACAT,UAAQ,CAAC3D,YAAT,CAAsBqE,OAAtB,GAAgCV,QAAQ,CAAC3D,YAAT,CAAsBgE,aAAtB,GAAsCL,QAAQ,CAAC3D,YAAT,CAAsBkE,eAA5F;AACAP,UAAQ,CAAC3D,YAAT,CAAsBsE,aAAtB,GAAsC,CAACX,QAAQ,CAAC3D,YAAT,CAAsBkE,eAAtB,GAAwC,EAAzC,IAA+C,EAArF;;AACA,OAAK,IAAI1C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgC,YAAY,CAACtC,MAAb,CAAoBC,MAAxC,EAAgDK,CAAC,EAAjD,EAAqD;AACjDmC,YAAQ,CAAC3D,YAAT,CAAsBuE,WAAtB,CAAkClC,IAAlC,CAAuChD,OAAO,CAACuC,SAAR,CAAkB4B,YAAY,CAACtC,MAAb,CAAoBM,CAApB,CAAlB,CAAvC;AACAmC,YAAQ,CAAC3D,YAAT,CAAsBuE,WAAtB,CAAkC/C,CAAlC,EAAqCc,CAArC,IAA0CpC,KAA1C;AACAyD,YAAQ,CAAC3D,YAAT,CAAsBuE,WAAtB,CAAkC/C,CAAlC,EAAqCe,CAArC,IAA0CpC,KAA1C;AACAwD,YAAQ,CAAC3D,YAAT,CAAsBuE,WAAtB,CAAkC/C,CAAlC,EAAqCgB,CAArC,IAA0CpC,KAA1C;AACAuD,YAAQ,CAAC3D,YAAT,CAAsBwE,UAAtB,CAAiCnC,IAAjC,CAAsC,IAAI/C,MAAJ,CAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,CAAtC;AACH;;AAED,OAAK,IAAIkC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGxB,YAAY,CAACyB,IAAb,CAAkBN,MAAtC,EAA8CK,CAAC,EAA/C,EAAmD;AAC/C,QAAME,KAAK,GAAG1B,YAAY,CAACyB,IAAb,CAAkBD,CAAlB,CAAd;AACA,QAAMG,CAAC,GAAGtC,OAAO,CAACuC,SAAR,CAAkB5B,YAAY,CAACkB,MAAb,CAAoBQ,KAAK,CAAC,CAAD,CAAzB,CAAlB,CAAV;AACA,QAAMG,CAAC,GAAGxC,OAAO,CAACuC,SAAR,CAAkB5B,YAAY,CAACkB,MAAb,CAAoBQ,KAAK,CAAC,CAAD,CAAzB,CAAlB,CAAV;AACA,QAAMI,CAAC,GAAGzC,OAAO,CAACuC,SAAR,CAAkB5B,YAAY,CAACkB,MAAb,CAAoBQ,KAAK,CAAC,CAAD,CAAzB,CAAlB,CAAV;AACA,QAAMK,EAAE,GAAGF,CAAC,CAACG,QAAF,CAAWL,CAAX,CAAX;AACA,QAAMM,EAAE,GAAGH,CAAC,CAACE,QAAF,CAAWL,CAAX,CAAX;AACA,QAAMO,IAAI,GAAG7C,OAAO,CAAC8C,KAAR,CAAcF,EAAd,EAAkBF,EAAlB,EAAsBK,SAAtB,EAAb;AACA,QAAMI,CAAC,GAAGnD,OAAO,CAAC8C,KAAR,CAAcF,EAAd,EAAkBC,IAAlB,EAAwBE,SAAxB,EAAV;AACAuB,YAAQ,CAAC3D,YAAT,CAAsByE,SAAtB,CAAgCpC,IAAhC,CAAqCJ,EAAE,CAACG,SAAH,EAArC;AACAuB,YAAQ,CAAC3D,YAAT,CAAsB0E,SAAtB,CAAgCrC,IAAhC,CAAqCH,IAArC;AACAyB,YAAQ,CAAC3D,YAAT,CAAsB2E,SAAtB,CAAgCtC,IAAhC,CAAqCG,CAArC;AACH;;AAED,SAAOmB,QAAP;AACH;AAEApE,IAAY,CAACuD,cAAb,GAA8BA,cAA9B","names":["Vector3","Color4","Mesh","VertexData","Logger","_PrimaryIsoTriangle","GeodesicData","GoldbergMesh","CompatibilityOptions","CreateGoldbergVertexData","options","goldbergData","size","sizeX","sizeY","sizeZ","sideOrientation","DEFAULTSIDE","positions","Array","indices","normals","uvs","minX","Infinity","maxX","minY","maxY","v","vertex","length","Math","min","max","index","f","face","verts","a","FromArray","b","c","ba","subtract","ca","norm","Cross","normalize","push","x","y","z","pdata","vCoord","UseOpenGLOrientationForUV","_ComputeSides","vertexData","CreateGoldberg","name","scene","m","floor","Warn","n","temp","primTri","build","geodesicData","BuildGeodesicData","toGoldbergPolyhedronData","goldberg","_GetDefaultSideOrientation","_originalBuilderSideOrientation","applyToMesh","updatable","nbSharedFaces","sharedNodes","nbUnsharedFaces","poleNodes","adjacentFaces","nbFaces","nbFacesAtPole","faceCenters","faceColors","faceXaxis","faceYaxis","faceZaxis"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Meshes/Builders/goldbergBuilder.ts"],"sourcesContent":["import type { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Color4 } from \"../../Maths/math.color\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport type { PolyhedronData } from \"../geodesicMesh\";\r\nimport { _PrimaryIsoTriangle, GeodesicData } from \"../geodesicMesh\";\r\nimport { GoldbergMesh } from \"../goldbergMesh\";\r\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Defines the set of data required to create goldberg vertex data.\r\n */\r\nexport type GoldbergVertexDataOption = {\r\n    /**\r\n     * the size of the Goldberg, optional default 1\r\n     */\r\n    size?: number;\r\n    /**\r\n     * allows stretching in the x direction, optional, default size\r\n     */\r\n    sizeX?: number;\r\n    /**\r\n     * allows stretching in the y direction, optional, default size\r\n     */\r\n    sizeY?: number;\r\n    /**\r\n     * allows stretching in the z direction, optional, default size\r\n     */\r\n    sizeZ?: number;\r\n    /**\r\n     * optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n     */\r\n    sideOrientation?: number;\r\n};\r\n\r\n/**\r\n * Defines the set of data required to create a goldberg mesh.\r\n */\r\nexport type GoldbergCreationOption = {\r\n    /**\r\n     * number of horizontal steps along an isogrid\r\n     */\r\n    m?: number;\r\n    /**\r\n     * number of angled steps along an isogrid\r\n     */\r\n    n?: number;\r\n    /**\r\n     * defines if the mesh must be flagged as updatable\r\n     */\r\n    updatable?: boolean;\r\n} & GoldbergVertexDataOption;\r\n\r\n/**\r\n * Creates the Mesh for a Goldberg Polyhedron\r\n * @param options an object used to set the following optional parameters for the polyhedron, required but can be empty\r\n * @param goldbergData polyhedronData defining the Goldberg polyhedron\r\n * @returns GoldbergSphere mesh\r\n */\r\nexport function CreateGoldbergVertexData(options: GoldbergVertexDataOption, goldbergData: PolyhedronData): VertexData {\r\n    const size = options.size;\r\n    const sizeX: number = options.sizeX || size || 1;\r\n    const sizeY: number = options.sizeY || size || 1;\r\n    const sizeZ: number = options.sizeZ || size || 1;\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    const positions = new Array<number>();\r\n    const indices = new Array<number>();\r\n    const normals = new Array<number>();\r\n    const uvs = new Array<number>();\r\n\r\n    let minX = Infinity;\r\n    let maxX = -Infinity;\r\n    let minY = Infinity;\r\n    let maxY = -Infinity;\r\n\r\n    for (let v = 0; v < goldbergData.vertex.length; v++) {\r\n        minX = Math.min(minX, goldbergData.vertex[v][0] * sizeX);\r\n        maxX = Math.max(maxX, goldbergData.vertex[v][0] * sizeX);\r\n        minY = Math.min(minY, goldbergData.vertex[v][1] * sizeY);\r\n        maxY = Math.max(maxY, goldbergData.vertex[v][1] * sizeY);\r\n    }\r\n\r\n    let index: number = 0;\r\n    for (let f = 0; f < goldbergData.face.length; f++) {\r\n        const verts = goldbergData.face[f];\r\n        const a = Vector3.FromArray(goldbergData.vertex[verts[0]]);\r\n        const b = Vector3.FromArray(goldbergData.vertex[verts[2]]);\r\n        const c = Vector3.FromArray(goldbergData.vertex[verts[1]]);\r\n        const ba = b.subtract(a);\r\n        const ca = c.subtract(a);\r\n        const norm = Vector3.Cross(ca, ba).normalize();\r\n        for (let v = 0; v < verts.length; v++) {\r\n            normals.push(norm.x, norm.y, norm.z);\r\n            const pdata = goldbergData.vertex[verts[v]];\r\n            positions.push(pdata[0] * sizeX, pdata[1] * sizeY, pdata[2] * sizeZ);\r\n            const vCoord = (pdata[1] * sizeY - minY) / (maxY - minY);\r\n            uvs.push((pdata[0] * sizeX - minX) / (maxX - minX), CompatibilityOptions.UseOpenGLOrientationForUV ? 1 - vCoord : vCoord);\r\n        }\r\n        for (let v = 0; v < verts.length - 2; v++) {\r\n            indices.push(index, index + v + 2, index + v + 1);\r\n        }\r\n        index += verts.length;\r\n    }\r\n\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs);\r\n\r\n    const vertexData = new VertexData();\r\n    vertexData.positions = positions;\r\n    vertexData.indices = indices;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates the Mesh for a Goldberg Polyhedron which is made from 12 pentagonal and the rest hexagonal faces\r\n * @see https://en.wikipedia.org/wiki/Goldberg_polyhedron\r\n * @see https://doc.babylonjs.com/divingDeeper/mesh/creation/polyhedra/goldberg_poly\r\n * @param name defines the name of the mesh\r\n * @param options an object used to set the following optional parameters for the polyhedron, required but can be empty\r\n * @param scene defines the hosting scene\r\n * @returns Goldberg mesh\r\n */\r\nexport function CreateGoldberg(name: string, options: GoldbergCreationOption, scene: Nullable<Scene> = null): GoldbergMesh {\r\n    const size = options.size;\r\n    const sizeX: number = options.sizeX || size || 1;\r\n    const sizeY: number = options.sizeY || size || 1;\r\n    const sizeZ: number = options.sizeZ || size || 1;\r\n    let m: number = options.m || 1;\r\n    if (m !== Math.floor(m)) {\r\n        m === Math.floor(m);\r\n        Logger.Warn(\"m not an integer only floor(m) used\");\r\n    }\r\n    let n: number = options.n || 0;\r\n    if (n !== Math.floor(n)) {\r\n        n === Math.floor(n);\r\n        Logger.Warn(\"n not an integer only floor(n) used\");\r\n    }\r\n    if (n > m) {\r\n        const temp = n;\r\n        n = m;\r\n        m = temp;\r\n        Logger.Warn(\"n > m therefore m and n swapped\");\r\n    }\r\n    const primTri: _PrimaryIsoTriangle = new _PrimaryIsoTriangle();\r\n    primTri.build(m, n);\r\n    const geodesicData = GeodesicData.BuildGeodesicData(primTri);\r\n    const goldbergData = geodesicData.toGoldbergPolyhedronData();\r\n\r\n    const goldberg = new GoldbergMesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    goldberg._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateGoldbergVertexData(options, goldbergData);\r\n\r\n    vertexData.applyToMesh(goldberg, options.updatable);\r\n\r\n    goldberg.goldbergData.nbSharedFaces = geodesicData.sharedNodes;\r\n    goldberg.goldbergData.nbUnsharedFaces = geodesicData.poleNodes;\r\n    goldberg.goldbergData.adjacentFaces = geodesicData.adjacentFaces;\r\n    goldberg.goldbergData.nbFaces = goldberg.goldbergData.nbSharedFaces + goldberg.goldbergData.nbUnsharedFaces;\r\n    goldberg.goldbergData.nbFacesAtPole = (goldberg.goldbergData.nbUnsharedFaces - 12) / 12;\r\n    for (let f = 0; f < geodesicData.vertex.length; f++) {\r\n        goldberg.goldbergData.faceCenters.push(Vector3.FromArray(geodesicData.vertex[f]));\r\n        goldberg.goldbergData.faceCenters[f].x *= sizeX;\r\n        goldberg.goldbergData.faceCenters[f].y *= sizeY;\r\n        goldberg.goldbergData.faceCenters[f].z *= sizeZ;\r\n        goldberg.goldbergData.faceColors.push(new Color4(1, 1, 1, 1));\r\n    }\r\n\r\n    for (let f = 0; f < goldbergData.face.length; f++) {\r\n        const verts = goldbergData.face[f];\r\n        const a = Vector3.FromArray(goldbergData.vertex[verts[0]]);\r\n        const b = Vector3.FromArray(goldbergData.vertex[verts[2]]);\r\n        const c = Vector3.FromArray(goldbergData.vertex[verts[1]]);\r\n        const ba = b.subtract(a);\r\n        const ca = c.subtract(a);\r\n        const norm = Vector3.Cross(ca, ba).normalize();\r\n        const z = Vector3.Cross(ca, norm).normalize();\r\n        goldberg.goldbergData.faceXaxis.push(ca.normalize());\r\n        goldberg.goldbergData.faceYaxis.push(norm);\r\n        goldberg.goldbergData.faceZaxis.push(z);\r\n    }\r\n\r\n    return goldberg;\r\n}\r\n\r\n(Mesh as any).CreateGoldberg = CreateGoldberg;\r\n"]},"metadata":{},"sourceType":"module"}