{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport { __extends } from \"tslib\";\nimport { SceneLoader } from \"../../Loading/sceneLoader.js\";\nimport { WebVRController } from \"./webVRController.js\";\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController.js\";\n/**\n * Vive Controller\n */\n\nvar ViveController =\n/** @class */\nfunction (_super) {\n  __extends(ViveController, _super);\n  /**\n   * Creates a new ViveController from a gamepad\n   * @param vrGamepad the gamepad that the controller should be created from\n   */\n\n\n  function ViveController(vrGamepad) {\n    var _this = _super.call(this, vrGamepad) || this;\n\n    _this.controllerType = PoseEnabledControllerType.VIVE;\n    _this._invertLeftStickY = true;\n    return _this;\n  }\n  /**\n   * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\n   * @param scene scene in which to add meshes\n   * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\n   */\n\n\n  ViveController.prototype.initControllerMesh = function (scene, meshLoaded) {\n    var _this = this;\n\n    SceneLoader.ImportMesh(\"\", ViveController.MODEL_BASE_URL, ViveController.MODEL_FILENAME, scene, function (newMeshes) {\n      /*\n      Parent Mesh name: ViveWand\n      - body\n      - r_gripper\n      - l_gripper\n      - menu_button\n      - system_button\n      - trackpad\n      - trigger\n      - LED\n      */\n      _this._defaultModel = newMeshes[1];\n\n      _this.attachToMesh(_this._defaultModel);\n\n      if (meshLoaded) {\n        meshLoaded(_this._defaultModel);\n      }\n    });\n  };\n\n  Object.defineProperty(ViveController.prototype, \"onLeftButtonStateChangedObservable\", {\n    /**\n     * Fired when the left button on this controller is modified\n     */\n    get: function get() {\n      return this.onMainButtonStateChangedObservable;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ViveController.prototype, \"onRightButtonStateChangedObservable\", {\n    /**\n     * Fired when the right button on this controller is modified\n     */\n    get: function get() {\n      return this.onMainButtonStateChangedObservable;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ViveController.prototype, \"onMenuButtonStateChangedObservable\", {\n    /**\n     * Fired when the menu button on this controller is modified\n     */\n    get: function get() {\n      return this.onSecondaryButtonStateChangedObservable;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Called once for each button that changed state since the last frame\n   * Vive mapping:\n   * 0: touchpad\n   * 1: trigger\n   * 2: left AND right buttons\n   * 3: menu button\n   * @param buttonIdx Which button index changed\n   * @param state New state of the button\n   */\n\n  ViveController.prototype._handleButtonChange = function (buttonIdx, state) {\n    var notifyObject = state; //{ state: state, changes: changes };\n\n    switch (buttonIdx) {\n      case 0:\n        this.onPadStateChangedObservable.notifyObservers(notifyObject);\n        return;\n\n      case 1:\n        // index trigger\n        if (this._defaultModel) {\n          this._defaultModel.getChildren()[6].rotation.x = -notifyObject.value * 0.15;\n        }\n\n        this.onTriggerStateChangedObservable.notifyObservers(notifyObject);\n        return;\n\n      case 2:\n        // left AND right button\n        this.onMainButtonStateChangedObservable.notifyObservers(notifyObject);\n        return;\n\n      case 3:\n        if (this._defaultModel) {\n          if (notifyObject.pressed) {\n            this._defaultModel.getChildren()[2].position.y = -0.001;\n          } else {\n            this._defaultModel.getChildren()[2].position.y = 0;\n          }\n        }\n\n        this.onSecondaryButtonStateChangedObservable.notifyObservers(notifyObject);\n        return;\n    }\n  };\n  /**\n   * Base Url for the controller model.\n   */\n\n\n  ViveController.MODEL_BASE_URL = \"https://controllers.babylonjs.com/vive/\";\n  /**\n   * File name for the controller model.\n   */\n\n  ViveController.MODEL_FILENAME = \"wand.babylon\";\n  return ViveController;\n}(WebVRController);\n\nexport { ViveController };\n\nPoseEnabledControllerHelper._ControllerFactories.push({\n  canCreate: function canCreate(gamepadInfo) {\n    return gamepadInfo.id.toLowerCase().indexOf(\"openvr\") !== -1;\n  },\n  create: function create(gamepadInfo) {\n    return new ViveController(gamepadInfo);\n  }\n});","map":{"version":3,"mappings":"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","names":["SceneLoader","WebVRController","PoseEnabledControllerType","PoseEnabledControllerHelper","__extends","vrGamepad","_super","_this","controllerType","VIVE","_invertLeftStickY","ViveController","scene","meshLoaded","ImportMesh","MODEL_BASE_URL","MODEL_FILENAME","newMeshes","_defaultModel","attachToMesh","Object","onMainButtonStateChangedObservable","onSecondaryButtonStateChangedObservable","buttonIdx","state","notifyObject","onPadStateChangedObservable","notifyObservers","getChildren","rotation","x","value","onTriggerStateChangedObservable","pressed","position","y","_ControllerFactories","push","canCreate","gamepadInfo","id","toLowerCase","indexOf","create"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Gamepads/Controllers/viveController.ts"],"sourcesContent":["import type { Scene } from \"../../scene\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\r\nimport { WebVRController } from \"./webVRController\";\r\nimport type { ExtendedGamepadButton } from \"./poseEnabledController\";\r\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController\";\r\nimport type { Observable } from \"../../Misc/observable\";\r\n\r\n/**\r\n * Vive Controller\r\n */\r\nexport class ViveController extends WebVRController {\r\n    /**\r\n     * Base Url for the controller model.\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://controllers.babylonjs.com/vive/\";\r\n    /**\r\n     * File name for the controller model.\r\n     */\r\n    public static MODEL_FILENAME: string = \"wand.babylon\";\r\n\r\n    /**\r\n     * Creates a new ViveController from a gamepad\r\n     * @param vrGamepad the gamepad that the controller should be created from\r\n     */\r\n    constructor(vrGamepad: any) {\r\n        super(vrGamepad);\r\n        this.controllerType = PoseEnabledControllerType.VIVE;\r\n        this._invertLeftStickY = true;\r\n    }\r\n\r\n    /**\r\n     * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\r\n     * @param scene scene in which to add meshes\r\n     * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\r\n     */\r\n    public initControllerMesh(scene: Scene, meshLoaded?: (mesh: AbstractMesh) => void) {\r\n        SceneLoader.ImportMesh(\"\", ViveController.MODEL_BASE_URL, ViveController.MODEL_FILENAME, scene, (newMeshes) => {\r\n            /*\r\n            Parent Mesh name: ViveWand\r\n            - body\r\n            - r_gripper\r\n            - l_gripper\r\n            - menu_button\r\n            - system_button\r\n            - trackpad\r\n            - trigger\r\n            - LED\r\n            */\r\n            this._defaultModel = newMeshes[1];\r\n            this.attachToMesh(this._defaultModel);\r\n            if (meshLoaded) {\r\n                meshLoaded(this._defaultModel);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fired when the left button on this controller is modified\r\n     */\r\n    public get onLeftButtonStateChangedObservable(): Observable<ExtendedGamepadButton> {\r\n        return this.onMainButtonStateChangedObservable;\r\n    }\r\n\r\n    /**\r\n     * Fired when the right button on this controller is modified\r\n     */\r\n    public get onRightButtonStateChangedObservable(): Observable<ExtendedGamepadButton> {\r\n        return this.onMainButtonStateChangedObservable;\r\n    }\r\n\r\n    /**\r\n     * Fired when the menu button on this controller is modified\r\n     */\r\n    public get onMenuButtonStateChangedObservable(): Observable<ExtendedGamepadButton> {\r\n        return this.onSecondaryButtonStateChangedObservable;\r\n    }\r\n\r\n    /**\r\n     * Called once for each button that changed state since the last frame\r\n     * Vive mapping:\r\n     * 0: touchpad\r\n     * 1: trigger\r\n     * 2: left AND right buttons\r\n     * 3: menu button\r\n     * @param buttonIdx Which button index changed\r\n     * @param state New state of the button\r\n     */\r\n    protected _handleButtonChange(buttonIdx: number, state: ExtendedGamepadButton) {\r\n        const notifyObject = state; //{ state: state, changes: changes };\r\n        switch (buttonIdx) {\r\n            case 0:\r\n                this.onPadStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 1: // index trigger\r\n                if (this._defaultModel) {\r\n                    (<AbstractMesh>this._defaultModel.getChildren()[6]).rotation.x = -notifyObject.value * 0.15;\r\n                }\r\n                this.onTriggerStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 2: // left AND right button\r\n                this.onMainButtonStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n            case 3:\r\n                if (this._defaultModel) {\r\n                    if (notifyObject.pressed) {\r\n                        (<AbstractMesh>this._defaultModel.getChildren()[2]).position.y = -0.001;\r\n                    } else {\r\n                        (<AbstractMesh>this._defaultModel.getChildren()[2]).position.y = 0;\r\n                    }\r\n                }\r\n                this.onSecondaryButtonStateChangedObservable.notifyObservers(notifyObject);\r\n                return;\r\n        }\r\n    }\r\n}\r\n\r\nPoseEnabledControllerHelper._ControllerFactories.push({\r\n    canCreate: (gamepadInfo) => {\r\n        return gamepadInfo.id.toLowerCase().indexOf(\"openvr\") !== -1;\r\n    },\r\n    create: (gamepadInfo) => {\r\n        return new ViveController(gamepadInfo);\r\n    },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}