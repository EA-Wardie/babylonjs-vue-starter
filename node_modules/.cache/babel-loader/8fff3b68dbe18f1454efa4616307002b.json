{"ast":null,"code":"import \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { CreateBox } from \"../Meshes/Builders/boxBuilder.js\";\nimport { CreateSphere } from \"../Meshes/Builders/sphereBuilder.js\";\nimport { Quaternion, Vector3 } from \"../Maths/math.vector.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\nimport { PhysicsImpostor } from \"../Physics/physicsImpostor.js\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer.js\";\nimport { CreateCylinder } from \"../Meshes/Builders/cylinderBuilder.js\";\nimport { CreateCapsule } from \"../Meshes/Builders/capsuleBuilder.js\";\n/**\n * Used to show the physics impostor around the specific mesh\n */\n\nvar PhysicsViewer =\n/** @class */\nfunction () {\n  /**\n   * Creates a new PhysicsViewer\n   * @param scene defines the hosting scene\n   */\n  function PhysicsViewer(scene) {\n    /** @hidden */\n    this._impostors = [];\n    /** @hidden */\n\n    this._meshes = [];\n    /** @hidden */\n\n    this._numMeshes = 0;\n    this._debugMeshMeshes = new Array();\n    this._scene = scene || EngineStore.LastCreatedScene;\n\n    if (!this._scene) {\n      return;\n    }\n\n    var physicEngine = this._scene.getPhysicsEngine();\n\n    if (physicEngine) {\n      this._physicsEnginePlugin = physicEngine.getPhysicsPlugin();\n    }\n\n    this._utilityLayer = new UtilityLayerRenderer(this._scene, false);\n    this._utilityLayer.pickUtilitySceneFirst = false;\n    this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = true;\n  }\n  /** @hidden */\n\n\n  PhysicsViewer.prototype._updateDebugMeshes = function () {\n    var plugin = this._physicsEnginePlugin;\n\n    for (var i = 0; i < this._numMeshes; i++) {\n      var impostor = this._impostors[i];\n\n      if (!impostor) {\n        continue;\n      }\n\n      if (impostor.isDisposed) {\n        this.hideImpostor(this._impostors[i--]);\n      } else {\n        if (impostor.type === PhysicsImpostor.MeshImpostor) {\n          continue;\n        }\n\n        var mesh = this._meshes[i];\n\n        if (mesh && plugin) {\n          plugin.syncMeshWithImpostor(mesh, impostor);\n        }\n      }\n    }\n  };\n  /**\n   * Renders a specified physic impostor\n   * @param impostor defines the impostor to render\n   * @param targetMesh defines the mesh represented by the impostor\n   * @returns the new debug mesh used to render the impostor\n   */\n\n\n  PhysicsViewer.prototype.showImpostor = function (impostor, targetMesh) {\n    if (!this._scene) {\n      return null;\n    }\n\n    for (var i = 0; i < this._numMeshes; i++) {\n      if (this._impostors[i] == impostor) {\n        return null;\n      }\n    }\n\n    var debugMesh = this._getDebugMesh(impostor, targetMesh);\n\n    if (debugMesh) {\n      this._impostors[this._numMeshes] = impostor;\n      this._meshes[this._numMeshes] = debugMesh;\n\n      if (this._numMeshes === 0) {\n        this._renderFunction = this._updateDebugMeshes.bind(this);\n\n        this._scene.registerBeforeRender(this._renderFunction);\n      }\n\n      this._numMeshes++;\n    }\n\n    return debugMesh;\n  };\n  /**\n   * Hides a specified physic impostor\n   * @param impostor defines the impostor to hide\n   */\n\n\n  PhysicsViewer.prototype.hideImpostor = function (impostor) {\n    if (!impostor || !this._scene || !this._utilityLayer) {\n      return;\n    }\n\n    var removed = false;\n    var utilityLayerScene = this._utilityLayer.utilityLayerScene;\n\n    for (var i = 0; i < this._numMeshes; i++) {\n      if (this._impostors[i] == impostor) {\n        var mesh = this._meshes[i];\n\n        if (!mesh) {\n          continue;\n        }\n\n        utilityLayerScene.removeMesh(mesh);\n        mesh.dispose();\n\n        var index = this._debugMeshMeshes.indexOf(mesh);\n\n        if (index > -1) {\n          this._debugMeshMeshes.splice(index, 1);\n        }\n\n        this._numMeshes--;\n\n        if (this._numMeshes > 0) {\n          this._meshes[i] = this._meshes[this._numMeshes];\n          this._impostors[i] = this._impostors[this._numMeshes];\n          this._meshes[this._numMeshes] = null;\n          this._impostors[this._numMeshes] = null;\n        } else {\n          this._meshes[0] = null;\n          this._impostors[0] = null;\n        }\n\n        removed = true;\n        break;\n      }\n    }\n\n    if (removed && this._numMeshes === 0) {\n      this._scene.unregisterBeforeRender(this._renderFunction);\n    }\n  };\n\n  PhysicsViewer.prototype._getDebugMaterial = function (scene) {\n    if (!this._debugMaterial) {\n      this._debugMaterial = new StandardMaterial(\"\", scene);\n      this._debugMaterial.wireframe = true;\n      this._debugMaterial.emissiveColor = Color3.White();\n      this._debugMaterial.disableLighting = true;\n    }\n\n    return this._debugMaterial;\n  };\n\n  PhysicsViewer.prototype._getDebugBoxMesh = function (scene) {\n    if (!this._debugBoxMesh) {\n      this._debugBoxMesh = CreateBox(\"physicsBodyBoxViewMesh\", {\n        size: 1\n      }, scene);\n      this._debugBoxMesh.rotationQuaternion = Quaternion.Identity();\n      this._debugBoxMesh.material = this._getDebugMaterial(scene);\n\n      this._debugBoxMesh.setEnabled(false);\n    }\n\n    return this._debugBoxMesh.createInstance(\"physicsBodyBoxViewInstance\");\n  };\n\n  PhysicsViewer.prototype._getDebugSphereMesh = function (scene) {\n    if (!this._debugSphereMesh) {\n      this._debugSphereMesh = CreateSphere(\"physicsBodySphereViewMesh\", {\n        diameter: 1\n      }, scene);\n      this._debugSphereMesh.rotationQuaternion = Quaternion.Identity();\n      this._debugSphereMesh.material = this._getDebugMaterial(scene);\n\n      this._debugSphereMesh.setEnabled(false);\n    }\n\n    return this._debugSphereMesh.createInstance(\"physicsBodySphereViewInstance\");\n  };\n\n  PhysicsViewer.prototype._getDebugCapsuleMesh = function (scene) {\n    if (!this._debugCapsuleMesh) {\n      this._debugCapsuleMesh = CreateCapsule(\"physicsBodyCapsuleViewMesh\", {\n        height: 1\n      }, scene);\n      this._debugCapsuleMesh.rotationQuaternion = Quaternion.Identity();\n      this._debugCapsuleMesh.material = this._getDebugMaterial(scene);\n\n      this._debugCapsuleMesh.setEnabled(false);\n    }\n\n    return this._debugCapsuleMesh.createInstance(\"physicsBodyCapsuleViewInstance\");\n  };\n\n  PhysicsViewer.prototype._getDebugCylinderMesh = function (scene) {\n    if (!this._debugCylinderMesh) {\n      this._debugCylinderMesh = CreateCylinder(\"physicsBodyCylinderViewMesh\", {\n        diameterTop: 1,\n        diameterBottom: 1,\n        height: 1\n      }, scene);\n      this._debugCylinderMesh.rotationQuaternion = Quaternion.Identity();\n      this._debugCylinderMesh.material = this._getDebugMaterial(scene);\n\n      this._debugCylinderMesh.setEnabled(false);\n    }\n\n    return this._debugCylinderMesh.createInstance(\"physicsBodyCylinderViewInstance\");\n  };\n\n  PhysicsViewer.prototype._getDebugMeshMesh = function (mesh, scene) {\n    var wireframeOver = new Mesh(mesh.name, scene, null, mesh);\n    wireframeOver.setParent(mesh);\n    wireframeOver.position = Vector3.Zero();\n    wireframeOver.material = this._getDebugMaterial(scene);\n\n    this._debugMeshMeshes.push(wireframeOver);\n\n    return wireframeOver;\n  };\n\n  PhysicsViewer.prototype._getDebugMesh = function (impostor, targetMesh) {\n    var _this = this;\n\n    if (!this._utilityLayer) {\n      return null;\n    } // Only create child impostor debug meshes when evaluating the parent\n\n\n    if (targetMesh && targetMesh.parent && targetMesh.parent.physicsImpostor) {\n      return null;\n    }\n\n    var mesh = null;\n    var utilityLayerScene = this._utilityLayer.utilityLayerScene;\n\n    switch (impostor.type) {\n      case PhysicsImpostor.BoxImpostor:\n        mesh = this._getDebugBoxMesh(utilityLayerScene);\n        impostor.getBoxSizeToRef(mesh.scaling);\n        break;\n\n      case PhysicsImpostor.SphereImpostor:\n        {\n          mesh = this._getDebugSphereMesh(utilityLayerScene);\n          var radius = impostor.getRadius();\n          mesh.scaling.x = radius * 2;\n          mesh.scaling.y = radius * 2;\n          mesh.scaling.z = radius * 2;\n          break;\n        }\n\n      case PhysicsImpostor.CapsuleImpostor:\n        {\n          mesh = this._getDebugCapsuleMesh(utilityLayerScene);\n          var bi = impostor.object.getBoundingInfo();\n          mesh.scaling.x = (bi.boundingBox.maximum.x - bi.boundingBox.minimum.x) * 2 * impostor.object.scaling.x;\n          mesh.scaling.y = (bi.boundingBox.maximum.y - bi.boundingBox.minimum.y) * impostor.object.scaling.y;\n          mesh.scaling.z = (bi.boundingBox.maximum.z - bi.boundingBox.minimum.z) * 2 * impostor.object.scaling.z;\n          break;\n        }\n\n      case PhysicsImpostor.MeshImpostor:\n        if (targetMesh) {\n          mesh = this._getDebugMeshMesh(targetMesh, utilityLayerScene);\n        }\n\n        break;\n\n      case PhysicsImpostor.NoImpostor:\n        if (targetMesh) {\n          // Handle compound impostors\n          var childMeshes = targetMesh.getChildMeshes().filter(function (c) {\n            return c.physicsImpostor ? 1 : 0;\n          });\n          childMeshes.forEach(function (m) {\n            if (m.physicsImpostor && m.getClassName() === \"Mesh\") {\n              var boundingInfo = m.getBoundingInfo();\n              var min = boundingInfo.boundingBox.minimum;\n              var max = boundingInfo.boundingBox.maximum;\n\n              switch (m.physicsImpostor.type) {\n                case PhysicsImpostor.BoxImpostor:\n                  mesh = _this._getDebugBoxMesh(utilityLayerScene);\n                  mesh.position.copyFrom(min);\n                  mesh.position.addInPlace(max);\n                  mesh.position.scaleInPlace(0.5);\n                  break;\n\n                case PhysicsImpostor.SphereImpostor:\n                  mesh = _this._getDebugSphereMesh(utilityLayerScene);\n                  break;\n\n                case PhysicsImpostor.CylinderImpostor:\n                  mesh = _this._getDebugCylinderMesh(utilityLayerScene);\n                  break;\n\n                default:\n                  mesh = null;\n                  break;\n              }\n\n              if (mesh) {\n                mesh.scaling.x = max.x - min.x;\n                mesh.scaling.y = max.y - min.y;\n                mesh.scaling.z = max.z - min.z;\n                mesh.parent = m;\n              }\n            }\n          });\n        }\n\n        mesh = null;\n        break;\n\n      case PhysicsImpostor.CylinderImpostor:\n        {\n          mesh = this._getDebugCylinderMesh(utilityLayerScene);\n          var bi = impostor.object.getBoundingInfo();\n          mesh.scaling.x = (bi.boundingBox.maximum.x - bi.boundingBox.minimum.x) * impostor.object.scaling.x;\n          mesh.scaling.y = (bi.boundingBox.maximum.y - bi.boundingBox.minimum.y) * impostor.object.scaling.y;\n          mesh.scaling.z = (bi.boundingBox.maximum.z - bi.boundingBox.minimum.z) * impostor.object.scaling.z;\n          break;\n        }\n    }\n\n    return mesh;\n  };\n  /** Releases all resources */\n\n\n  PhysicsViewer.prototype.dispose = function () {\n    var count = this._numMeshes;\n\n    for (var index = 0; index < count; index++) {\n      this.hideImpostor(this._impostors[0]);\n    }\n\n    if (this._debugBoxMesh) {\n      this._debugBoxMesh.dispose();\n    }\n\n    if (this._debugSphereMesh) {\n      this._debugSphereMesh.dispose();\n    }\n\n    if (this._debugCylinderMesh) {\n      this._debugCylinderMesh.dispose();\n    }\n\n    if (this._debugMaterial) {\n      this._debugMaterial.dispose();\n    }\n\n    this._impostors.length = 0;\n    this._scene = null;\n    this._physicsEnginePlugin = null;\n\n    if (this._utilityLayer) {\n      this._utilityLayer.dispose();\n\n      this._utilityLayer = null;\n    }\n  };\n\n  return PhysicsViewer;\n}();\n\nexport { PhysicsViewer };","map":{"version":3,"mappings":"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","names":["Mesh","CreateBox","CreateSphere","Quaternion","Vector3","Color3","EngineStore","StandardMaterial","PhysicsImpostor","UtilityLayerRenderer","CreateCylinder","CreateCapsule","scene","Array","_scene","LastCreatedScene","physicEngine","getPhysicsEngine","_physicsEnginePlugin","getPhysicsPlugin","_utilityLayer","pickUtilitySceneFirst","utilityLayerScene","autoClearDepthAndStencil","PhysicsViewer","plugin","i","_numMeshes","impostor","_impostors","isDisposed","hideImpostor","type","MeshImpostor","mesh","_meshes","syncMeshWithImpostor","targetMesh","debugMesh","_getDebugMesh","_renderFunction","_updateDebugMeshes","bind","registerBeforeRender","removed","removeMesh","dispose","index","_debugMeshMeshes","indexOf","splice","unregisterBeforeRender","_debugMaterial","wireframe","emissiveColor","White","disableLighting","_debugBoxMesh","size","rotationQuaternion","Identity","material","_getDebugMaterial","setEnabled","createInstance","_debugSphereMesh","diameter","_debugCapsuleMesh","height","_debugCylinderMesh","diameterTop","diameterBottom","wireframeOver","name","setParent","position","Zero","push","parent","physicsImpostor","BoxImpostor","_getDebugBoxMesh","getBoxSizeToRef","scaling","SphereImpostor","_getDebugSphereMesh","radius","getRadius","x","y","z","CapsuleImpostor","_getDebugCapsuleMesh","bi","object","getBoundingInfo","boundingBox","maximum","minimum","_getDebugMeshMesh","NoImpostor","childMeshes","getChildMeshes","filter","c","forEach","m","getClassName","boundingInfo","min","max","_this","copyFrom","addInPlace","scaleInPlace","CylinderImpostor","_getDebugCylinderMesh","count","length"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Debug/physicsViewer.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { CreateBox } from \"../Meshes/Builders/boxBuilder\";\r\nimport { CreateSphere } from \"../Meshes/Builders/sphereBuilder\";\r\nimport { Quaternion, Vector3 } from \"../Maths/math.vector\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport type { Material } from \"../Materials/material\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\r\nimport type { IPhysicsEnginePlugin } from \"../Physics/IPhysicsEngine\";\r\nimport { PhysicsImpostor } from \"../Physics/physicsImpostor\";\r\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\r\nimport { CreateCylinder } from \"../Meshes/Builders/cylinderBuilder\";\r\nimport type { ICreateCapsuleOptions } from \"../Meshes/Builders/capsuleBuilder\";\r\nimport { CreateCapsule } from \"../Meshes/Builders/capsuleBuilder\";\r\n\r\n/**\r\n * Used to show the physics impostor around the specific mesh\r\n */\r\nexport class PhysicsViewer {\r\n    /** @hidden */\r\n    protected _impostors: Array<Nullable<PhysicsImpostor>> = [];\r\n    /** @hidden */\r\n    protected _meshes: Array<Nullable<AbstractMesh>> = [];\r\n    /** @hidden */\r\n    protected _scene: Nullable<Scene>;\r\n    /** @hidden */\r\n    protected _numMeshes = 0;\r\n    /** @hidden */\r\n    protected _physicsEnginePlugin: Nullable<IPhysicsEnginePlugin>;\r\n    private _renderFunction: () => void;\r\n    private _utilityLayer: Nullable<UtilityLayerRenderer>;\r\n\r\n    private _debugBoxMesh: Mesh;\r\n    private _debugSphereMesh: Mesh;\r\n    private _debugCapsuleMesh: Mesh;\r\n    private _debugCylinderMesh: Mesh;\r\n    private _debugMaterial: StandardMaterial;\r\n    private _debugMeshMeshes = new Array<Mesh>();\r\n\r\n    /**\r\n     * Creates a new PhysicsViewer\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(scene?: Scene) {\r\n        this._scene = scene || EngineStore.LastCreatedScene;\r\n        if (!this._scene) {\r\n            return;\r\n        }\r\n        const physicEngine = this._scene.getPhysicsEngine();\r\n\r\n        if (physicEngine) {\r\n            this._physicsEnginePlugin = physicEngine.getPhysicsPlugin();\r\n        }\r\n\r\n        this._utilityLayer = new UtilityLayerRenderer(this._scene, false);\r\n        this._utilityLayer.pickUtilitySceneFirst = false;\r\n        this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    protected _updateDebugMeshes(): void {\r\n        const plugin = this._physicsEnginePlugin;\r\n\r\n        for (let i = 0; i < this._numMeshes; i++) {\r\n            const impostor = this._impostors[i];\r\n\r\n            if (!impostor) {\r\n                continue;\r\n            }\r\n\r\n            if (impostor.isDisposed) {\r\n                this.hideImpostor(this._impostors[i--]);\r\n            } else {\r\n                if (impostor.type === PhysicsImpostor.MeshImpostor) {\r\n                    continue;\r\n                }\r\n                const mesh = this._meshes[i];\r\n\r\n                if (mesh && plugin) {\r\n                    plugin.syncMeshWithImpostor(mesh, impostor);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders a specified physic impostor\r\n     * @param impostor defines the impostor to render\r\n     * @param targetMesh defines the mesh represented by the impostor\r\n     * @returns the new debug mesh used to render the impostor\r\n     */\r\n    public showImpostor(impostor: PhysicsImpostor, targetMesh?: Mesh): Nullable<AbstractMesh> {\r\n        if (!this._scene) {\r\n            return null;\r\n        }\r\n\r\n        for (let i = 0; i < this._numMeshes; i++) {\r\n            if (this._impostors[i] == impostor) {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        const debugMesh = this._getDebugMesh(impostor, targetMesh);\r\n\r\n        if (debugMesh) {\r\n            this._impostors[this._numMeshes] = impostor;\r\n            this._meshes[this._numMeshes] = debugMesh;\r\n\r\n            if (this._numMeshes === 0) {\r\n                this._renderFunction = this._updateDebugMeshes.bind(this);\r\n                this._scene.registerBeforeRender(this._renderFunction);\r\n            }\r\n\r\n            this._numMeshes++;\r\n        }\r\n\r\n        return debugMesh;\r\n    }\r\n\r\n    /**\r\n     * Hides a specified physic impostor\r\n     * @param impostor defines the impostor to hide\r\n     */\r\n    public hideImpostor(impostor: Nullable<PhysicsImpostor>) {\r\n        if (!impostor || !this._scene || !this._utilityLayer) {\r\n            return;\r\n        }\r\n\r\n        let removed = false;\r\n        const utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        for (let i = 0; i < this._numMeshes; i++) {\r\n            if (this._impostors[i] == impostor) {\r\n                const mesh = this._meshes[i];\r\n\r\n                if (!mesh) {\r\n                    continue;\r\n                }\r\n\r\n                utilityLayerScene.removeMesh(mesh);\r\n                mesh.dispose();\r\n\r\n                const index = this._debugMeshMeshes.indexOf(mesh as Mesh);\r\n                if (index > -1) {\r\n                    this._debugMeshMeshes.splice(index, 1);\r\n                }\r\n\r\n                this._numMeshes--;\r\n                if (this._numMeshes > 0) {\r\n                    this._meshes[i] = this._meshes[this._numMeshes];\r\n                    this._impostors[i] = this._impostors[this._numMeshes];\r\n                    this._meshes[this._numMeshes] = null;\r\n                    this._impostors[this._numMeshes] = null;\r\n                } else {\r\n                    this._meshes[0] = null;\r\n                    this._impostors[0] = null;\r\n                }\r\n                removed = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (removed && this._numMeshes === 0) {\r\n            this._scene.unregisterBeforeRender(this._renderFunction);\r\n        }\r\n    }\r\n\r\n    private _getDebugMaterial(scene: Scene): Material {\r\n        if (!this._debugMaterial) {\r\n            this._debugMaterial = new StandardMaterial(\"\", scene);\r\n            this._debugMaterial.wireframe = true;\r\n            this._debugMaterial.emissiveColor = Color3.White();\r\n            this._debugMaterial.disableLighting = true;\r\n        }\r\n\r\n        return this._debugMaterial;\r\n    }\r\n\r\n    private _getDebugBoxMesh(scene: Scene): AbstractMesh {\r\n        if (!this._debugBoxMesh) {\r\n            this._debugBoxMesh = CreateBox(\"physicsBodyBoxViewMesh\", { size: 1 }, scene);\r\n            this._debugBoxMesh.rotationQuaternion = Quaternion.Identity();\r\n            this._debugBoxMesh.material = this._getDebugMaterial(scene);\r\n            this._debugBoxMesh.setEnabled(false);\r\n        }\r\n\r\n        return this._debugBoxMesh.createInstance(\"physicsBodyBoxViewInstance\");\r\n    }\r\n\r\n    private _getDebugSphereMesh(scene: Scene): AbstractMesh {\r\n        if (!this._debugSphereMesh) {\r\n            this._debugSphereMesh = CreateSphere(\"physicsBodySphereViewMesh\", { diameter: 1 }, scene);\r\n            this._debugSphereMesh.rotationQuaternion = Quaternion.Identity();\r\n            this._debugSphereMesh.material = this._getDebugMaterial(scene);\r\n            this._debugSphereMesh.setEnabled(false);\r\n        }\r\n\r\n        return this._debugSphereMesh.createInstance(\"physicsBodySphereViewInstance\");\r\n    }\r\n\r\n    private _getDebugCapsuleMesh(scene: Scene): AbstractMesh {\r\n        if (!this._debugCapsuleMesh) {\r\n            this._debugCapsuleMesh = CreateCapsule(\"physicsBodyCapsuleViewMesh\", { height: 1 } as ICreateCapsuleOptions, scene);\r\n            this._debugCapsuleMesh.rotationQuaternion = Quaternion.Identity();\r\n            this._debugCapsuleMesh.material = this._getDebugMaterial(scene);\r\n            this._debugCapsuleMesh.setEnabled(false);\r\n        }\r\n\r\n        return this._debugCapsuleMesh.createInstance(\"physicsBodyCapsuleViewInstance\");\r\n    }\r\n\r\n    private _getDebugCylinderMesh(scene: Scene): AbstractMesh {\r\n        if (!this._debugCylinderMesh) {\r\n            this._debugCylinderMesh = CreateCylinder(\"physicsBodyCylinderViewMesh\", { diameterTop: 1, diameterBottom: 1, height: 1 }, scene);\r\n            this._debugCylinderMesh.rotationQuaternion = Quaternion.Identity();\r\n            this._debugCylinderMesh.material = this._getDebugMaterial(scene);\r\n            this._debugCylinderMesh.setEnabled(false);\r\n        }\r\n\r\n        return this._debugCylinderMesh.createInstance(\"physicsBodyCylinderViewInstance\");\r\n    }\r\n\r\n    private _getDebugMeshMesh(mesh: Mesh, scene: Scene): AbstractMesh {\r\n        const wireframeOver = new Mesh(mesh.name, scene, null, mesh);\r\n        wireframeOver.setParent(mesh);\r\n        wireframeOver.position = Vector3.Zero();\r\n        wireframeOver.material = this._getDebugMaterial(scene);\r\n\r\n        this._debugMeshMeshes.push(wireframeOver);\r\n\r\n        return wireframeOver;\r\n    }\r\n\r\n    private _getDebugMesh(impostor: PhysicsImpostor, targetMesh?: Mesh): Nullable<AbstractMesh> {\r\n        if (!this._utilityLayer) {\r\n            return null;\r\n        }\r\n\r\n        // Only create child impostor debug meshes when evaluating the parent\r\n        if (targetMesh && targetMesh.parent && (targetMesh.parent as Mesh).physicsImpostor) {\r\n            return null;\r\n        }\r\n\r\n        let mesh: Nullable<AbstractMesh> = null;\r\n        const utilityLayerScene = this._utilityLayer.utilityLayerScene;\r\n\r\n        switch (impostor.type) {\r\n            case PhysicsImpostor.BoxImpostor:\r\n                mesh = this._getDebugBoxMesh(utilityLayerScene);\r\n                impostor.getBoxSizeToRef(mesh.scaling);\r\n                break;\r\n            case PhysicsImpostor.SphereImpostor: {\r\n                mesh = this._getDebugSphereMesh(utilityLayerScene);\r\n                const radius = impostor.getRadius();\r\n                mesh.scaling.x = radius * 2;\r\n                mesh.scaling.y = radius * 2;\r\n                mesh.scaling.z = radius * 2;\r\n                break;\r\n            }\r\n            case PhysicsImpostor.CapsuleImpostor: {\r\n                mesh = this._getDebugCapsuleMesh(utilityLayerScene);\r\n                const bi = impostor.object.getBoundingInfo();\r\n                mesh.scaling.x = (bi.boundingBox.maximum.x - bi.boundingBox.minimum.x) * 2 * impostor.object.scaling.x;\r\n                mesh.scaling.y = (bi.boundingBox.maximum.y - bi.boundingBox.minimum.y) * impostor.object.scaling.y;\r\n                mesh.scaling.z = (bi.boundingBox.maximum.z - bi.boundingBox.minimum.z) * 2 * impostor.object.scaling.z;\r\n                break;\r\n            }\r\n            case PhysicsImpostor.MeshImpostor:\r\n                if (targetMesh) {\r\n                    mesh = this._getDebugMeshMesh(targetMesh, utilityLayerScene);\r\n                }\r\n                break;\r\n            case PhysicsImpostor.NoImpostor:\r\n                if (targetMesh) {\r\n                    // Handle compound impostors\r\n                    const childMeshes = targetMesh.getChildMeshes().filter((c) => {\r\n                        return c.physicsImpostor ? 1 : 0;\r\n                    });\r\n                    childMeshes.forEach((m) => {\r\n                        if (m.physicsImpostor && m.getClassName() === \"Mesh\") {\r\n                            const boundingInfo = m.getBoundingInfo();\r\n                            const min = boundingInfo.boundingBox.minimum;\r\n                            const max = boundingInfo.boundingBox.maximum;\r\n                            switch (m.physicsImpostor.type) {\r\n                                case PhysicsImpostor.BoxImpostor:\r\n                                    mesh = this._getDebugBoxMesh(utilityLayerScene);\r\n                                    mesh.position.copyFrom(min);\r\n                                    mesh.position.addInPlace(max);\r\n                                    mesh.position.scaleInPlace(0.5);\r\n                                    break;\r\n                                case PhysicsImpostor.SphereImpostor:\r\n                                    mesh = this._getDebugSphereMesh(utilityLayerScene);\r\n                                    break;\r\n                                case PhysicsImpostor.CylinderImpostor:\r\n                                    mesh = this._getDebugCylinderMesh(utilityLayerScene);\r\n                                    break;\r\n                                default:\r\n                                    mesh = null;\r\n                                    break;\r\n                            }\r\n                            if (mesh) {\r\n                                mesh.scaling.x = max.x - min.x;\r\n                                mesh.scaling.y = max.y - min.y;\r\n                                mesh.scaling.z = max.z - min.z;\r\n                                mesh.parent = m;\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                mesh = null;\r\n                break;\r\n            case PhysicsImpostor.CylinderImpostor: {\r\n                mesh = this._getDebugCylinderMesh(utilityLayerScene);\r\n                const bi = impostor.object.getBoundingInfo();\r\n                mesh.scaling.x = (bi.boundingBox.maximum.x - bi.boundingBox.minimum.x) * impostor.object.scaling.x;\r\n                mesh.scaling.y = (bi.boundingBox.maximum.y - bi.boundingBox.minimum.y) * impostor.object.scaling.y;\r\n                mesh.scaling.z = (bi.boundingBox.maximum.z - bi.boundingBox.minimum.z) * impostor.object.scaling.z;\r\n                break;\r\n            }\r\n        }\r\n        return mesh;\r\n    }\r\n\r\n    /** Releases all resources */\r\n    public dispose() {\r\n        const count = this._numMeshes;\r\n        for (let index = 0; index < count; index++) {\r\n            this.hideImpostor(this._impostors[0]);\r\n        }\r\n\r\n        if (this._debugBoxMesh) {\r\n            this._debugBoxMesh.dispose();\r\n        }\r\n        if (this._debugSphereMesh) {\r\n            this._debugSphereMesh.dispose();\r\n        }\r\n        if (this._debugCylinderMesh) {\r\n            this._debugCylinderMesh.dispose();\r\n        }\r\n        if (this._debugMaterial) {\r\n            this._debugMaterial.dispose();\r\n        }\r\n\r\n        this._impostors.length = 0;\r\n        this._scene = null;\r\n        this._physicsEnginePlugin = null;\r\n\r\n        if (this._utilityLayer) {\r\n            this._utilityLayer.dispose();\r\n            this._utilityLayer = null;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}