{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess.js\";\nimport { ToGammaSpace } from \"../Maths/math.constants.js\";\nimport \"../Shaders/extractHighlights.fragment.js\";\nimport { serialize } from \"../Misc/decorators.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\n/**\n * The extract highlights post process sets all pixels to black except pixels above the specified luminance threshold. Used as the first step for a bloom effect.\n */\n\nvar ExtractHighlightsPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(ExtractHighlightsPostProcess, _super);\n\n  function ExtractHighlightsPostProcess(name, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    var _this = _super.call(this, name, \"extractHighlights\", [\"threshold\", \"exposure\"], null, options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation) || this;\n    /**\n     * The luminance threshold, pixels below this value will be set to black.\n     */\n\n\n    _this.threshold = 0.9;\n    /** @hidden */\n\n    _this._exposure = 1;\n    /**\n     * Post process which has the input texture to be used when performing highlight extraction\n     * @hidden\n     */\n\n    _this._inputPostProcess = null;\n\n    _this.onApplyObservable.add(function (effect) {\n      _this.externalTextureSamplerBinding = !!_this._inputPostProcess;\n\n      if (_this._inputPostProcess) {\n        effect.setTextureFromPostProcess(\"textureSampler\", _this._inputPostProcess);\n      }\n\n      effect.setFloat(\"threshold\", Math.pow(_this.threshold, ToGammaSpace));\n      effect.setFloat(\"exposure\", _this._exposure);\n    });\n\n    return _this;\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"ExtractHighlightsPostProcess\" string\n   */\n\n\n  ExtractHighlightsPostProcess.prototype.getClassName = function () {\n    return \"ExtractHighlightsPostProcess\";\n  };\n\n  __decorate([serialize()], ExtractHighlightsPostProcess.prototype, \"threshold\", void 0);\n\n  return ExtractHighlightsPostProcess;\n}(PostProcess);\n\nexport { ExtractHighlightsPostProcess };\nRegisterClass(\"BABYLON.ExtractHighlightsPostProcess\", ExtractHighlightsPostProcess);","map":{"version":3,"mappings":";AAIA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,SAASC,YAAT,QAA6B,4BAA7B;AAGA,OAAO,0CAAP;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,aAAT,QAA8B,sBAA9B;AAEA;;;;AAGA;AAAA;AAAA;AAAkDC;;AAwB9C,wCACIC,IADJ,EAEIC,OAFJ,EAGIC,MAHJ,EAIIC,YAJJ,EAKIC,MALJ,EAMIC,QANJ,EAOIC,WAPJ,EAQIC,gBARJ,EAQ4B;AADxB;AAAAD,oBAAsB,CAAtB;AAAsB;;AACtB;AAAAC;AAAwB;;AAR5B,gBAUIC,kBAAMR,IAAN,EAAY,mBAAZ,EAAiC,CAAC,WAAD,EAAc,UAAd,CAAjC,EAA4D,IAA5D,EAAkEC,OAAlE,EAA2EC,MAA3E,EAAmFC,YAAnF,EAAiGC,MAAjG,EAAyGC,QAAzG,EAAmH,IAAnH,EAAyHC,WAAzH,EAAsIG,SAAtI,EAAiJ,IAAjJ,EAAuJF,gBAAvJ,KAAwK,IAV5K;AAvBA;;;;;AAIOG,sBAAY,GAAZ;AAEP;;AACOA,sBAAY,CAAZ;AAEP;;;;;AAIOA,8BAA2C,IAA3C;;AAqBHA,SAAI,CAACC,iBAAL,CAAuBC,GAAvB,CAA2B,UAACC,MAAD,EAAe;AACtCH,WAAI,CAACI,6BAAL,GAAqC,CAAC,CAACJ,KAAI,CAACK,iBAA5C;;AACA,UAAIL,KAAI,CAACK,iBAAT,EAA4B;AACxBF,cAAM,CAACG,yBAAP,CAAiC,gBAAjC,EAAmDN,KAAI,CAACK,iBAAxD;AACH;;AACDF,YAAM,CAACI,QAAP,CAAgB,WAAhB,EAA6BC,IAAI,CAACC,GAAL,CAAST,KAAI,CAACU,SAAd,EAAyBxB,YAAzB,CAA7B;AACAiB,YAAM,CAACI,QAAP,CAAgB,UAAhB,EAA4BP,KAAI,CAACW,SAAjC;AACH,KAPD;;;AAQH;AA3BD;;;;;;AAIOC,wDAAP;AACI,WAAO,8BAAP;AACH,GAFM;;AAfPC,cADC1B,SAAS,EACV;;AAuCJ;AAAC,CA5CD,CAAkDF,WAAlD;;SAAa2B;AA8CbxB,aAAa,CAAC,sCAAD,EAAyCwB,4BAAzC,CAAb","names":["PostProcess","ToGammaSpace","serialize","RegisterClass","__extends","name","options","camera","samplingMode","engine","reusable","textureType","blockCompilation","_super","undefined","_this","onApplyObservable","add","effect","externalTextureSamplerBinding","_inputPostProcess","setTextureFromPostProcess","setFloat","Math","pow","threshold","_exposure","ExtractHighlightsPostProcess","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/PostProcesses/extractHighlightsPostProcess.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport { ToGammaSpace } from \"../Maths/math.constants\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/extractHighlights.fragment\";\r\nimport { serialize } from \"../Misc/decorators\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\n/**\r\n * The extract highlights post process sets all pixels to black except pixels above the specified luminance threshold. Used as the first step for a bloom effect.\r\n */\r\nexport class ExtractHighlightsPostProcess extends PostProcess {\r\n    /**\r\n     * The luminance threshold, pixels below this value will be set to black.\r\n     */\r\n    @serialize()\r\n    public threshold = 0.9;\r\n\r\n    /** @hidden */\r\n    public _exposure = 1;\r\n\r\n    /**\r\n     * Post process which has the input texture to be used when performing highlight extraction\r\n     * @hidden\r\n     */\r\n    public _inputPostProcess: Nullable<PostProcess> = null;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"ExtractHighlightsPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"ExtractHighlightsPostProcess\";\r\n    }\r\n\r\n    constructor(\r\n        name: string,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        blockCompilation = false\r\n    ) {\r\n        super(name, \"extractHighlights\", [\"threshold\", \"exposure\"], null, options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation);\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            this.externalTextureSamplerBinding = !!this._inputPostProcess;\r\n            if (this._inputPostProcess) {\r\n                effect.setTextureFromPostProcess(\"textureSampler\", this._inputPostProcess);\r\n            }\r\n            effect.setFloat(\"threshold\", Math.pow(this.threshold, ToGammaSpace));\r\n            effect.setFloat(\"exposure\", this._exposure);\r\n        });\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ExtractHighlightsPostProcess\", ExtractHighlightsPostProcess);\r\n"]},"metadata":{},"sourceType":"module"}