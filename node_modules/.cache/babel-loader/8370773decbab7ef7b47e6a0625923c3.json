{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { ThinEngine } from \"../thinEngine.js\";\n\nThinEngine.prototype.restoreSingleAttachment = function () {\n  var gl = this._gl;\n  this.bindAttachments([gl.BACK]);\n};\n\nThinEngine.prototype.restoreSingleAttachmentForRenderTarget = function () {\n  var gl = this._gl;\n  this.bindAttachments([gl.COLOR_ATTACHMENT0]);\n};\n\nThinEngine.prototype.buildTextureLayout = function (textureStatus) {\n  var gl = this._gl;\n  var result = [];\n\n  for (var i = 0; i < textureStatus.length; i++) {\n    if (textureStatus[i]) {\n      result.push(gl[\"COLOR_ATTACHMENT\" + i]);\n    } else {\n      result.push(gl.NONE);\n    }\n  }\n\n  return result;\n};\n\nThinEngine.prototype.bindAttachments = function (attachments) {\n  var gl = this._gl;\n  gl.drawBuffers(attachments);\n};\n\nThinEngine.prototype.unBindMultiColorAttachmentFramebuffer = function (rtWrapper, disableGenerateMipMaps, onBeforeUnbind) {\n  if (disableGenerateMipMaps === void 0) {\n    disableGenerateMipMaps = false;\n  }\n\n  this._currentRenderTarget = null; // If MSAA, we need to bitblt back to main texture\n\n  var gl = this._gl;\n  var attachments = rtWrapper._attachments;\n  var count = attachments.length;\n\n  if (rtWrapper._MSAAFramebuffer) {\n    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, rtWrapper._MSAAFramebuffer);\n    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, rtWrapper._framebuffer);\n\n    for (var i = 0; i < count; i++) {\n      var texture = rtWrapper.textures[i];\n\n      for (var j = 0; j < count; j++) {\n        attachments[j] = gl.NONE;\n      }\n\n      attachments[i] = gl[this.webGLVersion > 1 ? \"COLOR_ATTACHMENT\" + i : \"COLOR_ATTACHMENT\" + i + \"_WEBGL\"];\n      gl.readBuffer(attachments[i]);\n      gl.drawBuffers(attachments);\n      gl.blitFramebuffer(0, 0, texture.width, texture.height, 0, 0, texture.width, texture.height, gl.COLOR_BUFFER_BIT, gl.NEAREST);\n    }\n\n    for (var i = 0; i < count; i++) {\n      attachments[i] = gl[this.webGLVersion > 1 ? \"COLOR_ATTACHMENT\" + i : \"COLOR_ATTACHMENT\" + i + \"_WEBGL\"];\n    }\n\n    gl.drawBuffers(attachments);\n  }\n\n  for (var i = 0; i < count; i++) {\n    var texture = rtWrapper.textures[i];\n\n    if (texture.generateMipMaps && !disableGenerateMipMaps && !texture.isCube) {\n      this._bindTextureDirectly(gl.TEXTURE_2D, texture, true);\n\n      gl.generateMipmap(gl.TEXTURE_2D);\n\n      this._bindTextureDirectly(gl.TEXTURE_2D, null);\n    }\n  }\n\n  if (onBeforeUnbind) {\n    if (rtWrapper._MSAAFramebuffer) {\n      // Bind the correct framebuffer\n      this._bindUnboundFramebuffer(rtWrapper._framebuffer);\n    }\n\n    onBeforeUnbind();\n  }\n\n  this._bindUnboundFramebuffer(null);\n};\n\nThinEngine.prototype.createMultipleRenderTarget = function (size, options, initializeBuffers) {\n  if (initializeBuffers === void 0) {\n    initializeBuffers = true;\n  }\n\n  var generateMipMaps = false;\n  var generateDepthBuffer = true;\n  var generateStencilBuffer = false;\n  var generateDepthTexture = false;\n  var depthTextureFormat = 15;\n  var textureCount = 1;\n  var defaultType = 0;\n  var defaultSamplingMode = 3;\n  var types = new Array();\n  var samplingModes = new Array();\n\n  var rtWrapper = this._createHardwareRenderTargetWrapper(true, false, size);\n\n  if (options !== undefined) {\n    generateMipMaps = options.generateMipMaps === undefined ? false : options.generateMipMaps;\n    generateDepthBuffer = options.generateDepthBuffer === undefined ? true : options.generateDepthBuffer;\n    generateStencilBuffer = options.generateStencilBuffer === undefined ? false : options.generateStencilBuffer;\n    generateDepthTexture = options.generateDepthTexture === undefined ? false : options.generateDepthTexture;\n    textureCount = options.textureCount || 1;\n\n    if (options.types) {\n      types = options.types;\n    }\n\n    if (options.samplingModes) {\n      samplingModes = options.samplingModes;\n    }\n\n    if (this.webGLVersion > 1 && (options.depthTextureFormat === 13 || options.depthTextureFormat === 16 || options.depthTextureFormat === 14)) {\n      depthTextureFormat = options.depthTextureFormat;\n    }\n  }\n\n  var gl = this._gl; // Create the framebuffer\n\n  var framebuffer = gl.createFramebuffer();\n\n  this._bindUnboundFramebuffer(framebuffer);\n\n  var width = size.width || size;\n  var height = size.height || size;\n  var textures = [];\n  var attachments = [];\n  var useStencilTexture = this.webGLVersion > 1 && generateDepthTexture && options.depthTextureFormat === 13;\n\n  var depthStencilBuffer = this._setupFramebufferDepthAttachments(!useStencilTexture && generateStencilBuffer, !generateDepthTexture && generateDepthBuffer, width, height);\n\n  rtWrapper._framebuffer = framebuffer;\n  rtWrapper._depthStencilBuffer = depthStencilBuffer;\n  rtWrapper._generateDepthBuffer = !generateDepthTexture && generateDepthBuffer;\n  rtWrapper._generateStencilBuffer = !useStencilTexture && generateStencilBuffer;\n  rtWrapper._attachments = attachments;\n\n  for (var i = 0; i < textureCount; i++) {\n    var samplingMode = samplingModes[i] || defaultSamplingMode;\n    var type = types[i] || defaultType;\n\n    if (type === 1 && !this._caps.textureFloatLinearFiltering) {\n      // if floating point linear (gl.FLOAT) then force to NEAREST_SAMPLINGMODE\n      samplingMode = 1;\n    } else if (type === 2 && !this._caps.textureHalfFloatLinearFiltering) {\n      // if floating point linear (HALF_FLOAT) then force to NEAREST_SAMPLINGMODE\n      samplingMode = 1;\n    }\n\n    var filters = this._getSamplingParameters(samplingMode, generateMipMaps);\n\n    if (type === 1 && !this._caps.textureFloat) {\n      type = 0;\n      Logger.Warn(\"Float textures are not supported. Render target forced to TEXTURETYPE_UNSIGNED_BYTE type\");\n    }\n\n    var texture = new InternalTexture(this, InternalTextureSource.MultiRenderTarget);\n    var attachment = gl[this.webGLVersion > 1 ? \"COLOR_ATTACHMENT\" + i : \"COLOR_ATTACHMENT\" + i + \"_WEBGL\"];\n    textures.push(texture);\n    attachments.push(attachment);\n    gl.activeTexture(gl[\"TEXTURE\" + i]);\n    gl.bindTexture(gl.TEXTURE_2D, texture._hardwareTexture.underlyingResource);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filters.mag);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filters.min);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texImage2D(gl.TEXTURE_2D, 0, this._getRGBABufferInternalSizedFormat(type), width, height, 0, gl.RGBA, this._getWebGLTextureType(type), null);\n    gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, attachment, gl.TEXTURE_2D, texture._hardwareTexture.underlyingResource, 0);\n\n    if (generateMipMaps) {\n      this._gl.generateMipmap(this._gl.TEXTURE_2D);\n    } // Unbind\n\n\n    this._bindTextureDirectly(gl.TEXTURE_2D, null);\n\n    texture.baseWidth = width;\n    texture.baseHeight = height;\n    texture.width = width;\n    texture.height = height;\n    texture.isReady = true;\n    texture.samples = 1;\n    texture.generateMipMaps = generateMipMaps;\n    texture.samplingMode = samplingMode;\n    texture.type = type;\n\n    this._internalTexturesCache.push(texture);\n  }\n\n  if (generateDepthTexture && this._caps.depthTextureExtension) {\n    // Depth texture\n    var depthTexture = new InternalTexture(this, InternalTextureSource.Depth);\n    var depthTextureType = 5;\n    var glDepthTextureInternalFormat = gl.DEPTH_COMPONENT16;\n    var glDepthTextureFormat = gl.DEPTH_COMPONENT;\n    var glDepthTextureType = gl.UNSIGNED_SHORT;\n    var glDepthTextureAttachment = gl.DEPTH_ATTACHMENT;\n\n    if (this.webGLVersion < 2) {\n      glDepthTextureInternalFormat = gl.DEPTH_COMPONENT;\n    } else {\n      if (depthTextureFormat === 14) {\n        depthTextureType = 1;\n        glDepthTextureType = gl.FLOAT;\n        glDepthTextureInternalFormat = gl.DEPTH_COMPONENT32F;\n      } else if (depthTextureFormat === 16) {\n        depthTextureType = 0;\n        glDepthTextureType = gl.UNSIGNED_INT;\n        glDepthTextureInternalFormat = gl.DEPTH_COMPONENT24;\n        glDepthTextureAttachment = gl.DEPTH_ATTACHMENT;\n      } else if (depthTextureFormat === 13) {\n        depthTextureType = 12;\n        glDepthTextureType = gl.UNSIGNED_INT_24_8;\n        glDepthTextureInternalFormat = gl.DEPTH24_STENCIL8;\n        glDepthTextureFormat = gl.DEPTH_STENCIL;\n        glDepthTextureAttachment = gl.DEPTH_STENCIL_ATTACHMENT;\n      }\n    }\n\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, depthTexture._hardwareTexture.underlyingResource);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texImage2D(gl.TEXTURE_2D, 0, glDepthTextureInternalFormat, width, height, 0, glDepthTextureFormat, glDepthTextureType, null);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, glDepthTextureAttachment, gl.TEXTURE_2D, depthTexture._hardwareTexture.underlyingResource, 0);\n    depthTexture.baseWidth = width;\n    depthTexture.baseHeight = height;\n    depthTexture.width = width;\n    depthTexture.height = height;\n    depthTexture.isReady = true;\n    depthTexture.samples = 1;\n    depthTexture.generateMipMaps = generateMipMaps;\n    depthTexture.samplingMode = 1;\n    depthTexture.format = depthTextureFormat;\n    depthTexture.type = depthTextureType;\n    textures.push(depthTexture);\n\n    this._internalTexturesCache.push(depthTexture);\n  }\n\n  rtWrapper.setTextures(textures);\n\n  if (initializeBuffers) {\n    gl.drawBuffers(attachments);\n  }\n\n  this._bindUnboundFramebuffer(null);\n\n  this.resetTextureCache();\n  return rtWrapper;\n};\n\nThinEngine.prototype.updateMultipleRenderTargetTextureSampleCount = function (rtWrapper, samples, initializeBuffers) {\n  if (initializeBuffers === void 0) {\n    initializeBuffers = true;\n  }\n\n  if (this.webGLVersion < 2 || !rtWrapper || !rtWrapper.texture) {\n    return 1;\n  }\n\n  if (rtWrapper.samples === samples) {\n    return samples;\n  }\n\n  var count = rtWrapper._attachments.length;\n\n  if (count === 0) {\n    return 1;\n  }\n\n  var gl = this._gl;\n  samples = Math.min(samples, this.getCaps().maxMSAASamples); // Dispose previous render buffers\n\n  if (rtWrapper._depthStencilBuffer) {\n    gl.deleteRenderbuffer(rtWrapper._depthStencilBuffer);\n    rtWrapper._depthStencilBuffer = null;\n  }\n\n  if (rtWrapper._MSAAFramebuffer) {\n    gl.deleteFramebuffer(rtWrapper._MSAAFramebuffer);\n    rtWrapper._MSAAFramebuffer = null;\n  }\n\n  for (var i = 0; i < count; i++) {\n    var hardwareTexture = rtWrapper.textures[i]._hardwareTexture;\n\n    if (hardwareTexture === null || hardwareTexture === void 0 ? void 0 : hardwareTexture._MSAARenderBuffer) {\n      gl.deleteRenderbuffer(hardwareTexture._MSAARenderBuffer);\n      hardwareTexture._MSAARenderBuffer = null;\n    }\n  }\n\n  if (samples > 1 && gl.renderbufferStorageMultisample) {\n    var framebuffer = gl.createFramebuffer();\n\n    if (!framebuffer) {\n      throw new Error(\"Unable to create multi sampled framebuffer\");\n    }\n\n    rtWrapper._MSAAFramebuffer = framebuffer;\n\n    this._bindUnboundFramebuffer(framebuffer);\n\n    var attachments = [];\n\n    for (var i = 0; i < count; i++) {\n      var texture = rtWrapper.textures[i];\n      var hardwareTexture = texture._hardwareTexture;\n      var attachment = gl[this.webGLVersion > 1 ? \"COLOR_ATTACHMENT\" + i : \"COLOR_ATTACHMENT\" + i + \"_WEBGL\"];\n\n      var colorRenderbuffer = this._createRenderBuffer(texture.width, texture.height, samples, -1\n      /* not used */\n      , this._getRGBAMultiSampleBufferFormat(texture.type), attachment);\n\n      if (!colorRenderbuffer) {\n        throw new Error(\"Unable to create multi sampled framebuffer\");\n      }\n\n      hardwareTexture._MSAARenderBuffer = colorRenderbuffer;\n      texture.samples = samples;\n      attachments.push(attachment);\n    }\n\n    if (initializeBuffers) {\n      gl.drawBuffers(attachments);\n    }\n  } else {\n    this._bindUnboundFramebuffer(rtWrapper._framebuffer);\n  }\n\n  rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(rtWrapper._generateStencilBuffer, rtWrapper._generateDepthBuffer, rtWrapper.texture.width, rtWrapper.texture.height, samples);\n\n  this._bindUnboundFramebuffer(null);\n\n  return samples;\n};","map":{"version":3,"mappings":"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","names":["InternalTexture","InternalTextureSource","Logger","ThinEngine","prototype","restoreSingleAttachment","gl","_gl","bindAttachments","BACK","restoreSingleAttachmentForRenderTarget","COLOR_ATTACHMENT0","buildTextureLayout","textureStatus","result","i","length","push","NONE","attachments","drawBuffers","unBindMultiColorAttachmentFramebuffer","rtWrapper","disableGenerateMipMaps","onBeforeUnbind","_currentRenderTarget","_attachments","count","_MSAAFramebuffer","bindFramebuffer","READ_FRAMEBUFFER","DRAW_FRAMEBUFFER","_framebuffer","texture","textures","j","webGLVersion","readBuffer","blitFramebuffer","width","height","COLOR_BUFFER_BIT","NEAREST","generateMipMaps","isCube","_bindTextureDirectly","TEXTURE_2D","generateMipmap","_bindUnboundFramebuffer","createMultipleRenderTarget","size","options","initializeBuffers","generateDepthBuffer","generateStencilBuffer","generateDepthTexture","depthTextureFormat","textureCount","defaultType","defaultSamplingMode","types","Array","samplingModes","_createHardwareRenderTargetWrapper","undefined","framebuffer","createFramebuffer","useStencilTexture","depthStencilBuffer","_setupFramebufferDepthAttachments","_depthStencilBuffer","_generateDepthBuffer","_generateStencilBuffer","samplingMode","type","_caps","textureFloatLinearFiltering","textureHalfFloatLinearFiltering","filters","_getSamplingParameters","textureFloat","Warn","MultiRenderTarget","attachment","activeTexture","bindTexture","_hardwareTexture","underlyingResource","texParameteri","TEXTURE_MAG_FILTER","mag","TEXTURE_MIN_FILTER","min","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","_getRGBABufferInternalSizedFormat","RGBA","_getWebGLTextureType","framebufferTexture2D","baseWidth","baseHeight","isReady","samples","_internalTexturesCache","depthTextureExtension","depthTexture","Depth","depthTextureType","glDepthTextureInternalFormat","DEPTH_COMPONENT16","glDepthTextureFormat","DEPTH_COMPONENT","glDepthTextureType","UNSIGNED_SHORT","glDepthTextureAttachment","DEPTH_ATTACHMENT","FLOAT","DEPTH_COMPONENT32F","UNSIGNED_INT","DEPTH_COMPONENT24","UNSIGNED_INT_24_8","DEPTH24_STENCIL8","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","TEXTURE0","FRAMEBUFFER","format","setTextures","resetTextureCache","updateMultipleRenderTargetTextureSampleCount","Math","getCaps","maxMSAASamples","deleteRenderbuffer","deleteFramebuffer","hardwareTexture","_MSAARenderBuffer","renderbufferStorageMultisample","Error","colorRenderbuffer","_createRenderBuffer","_getRGBAMultiSampleBufferFormat"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/Extensions/engine.multiRender.ts"],"sourcesContent":["import { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture\";\r\nimport type { IMultiRenderTargetOptions } from \"../../Materials/Textures/multiRenderTarget\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Constants } from \"../constants\";\r\nimport { ThinEngine } from \"../thinEngine\";\r\nimport type { RenderTargetWrapper } from \"../renderTargetWrapper\";\r\nimport type { WebGLRenderTargetWrapper } from \"../WebGL/webGLRenderTargetWrapper\";\r\nimport type { WebGLHardwareTexture } from \"../WebGL/webGLHardwareTexture\";\r\nimport type { TextureSize } from \"../../Materials/Textures/textureCreationOptions\";\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n    export interface ThinEngine {\r\n        /**\r\n         * Unbind a list of render target textures from the webGL context\r\n         * This is used only when drawBuffer extension or webGL2 are active\r\n         * @param rtWrapper defines the render target wrapper to unbind\r\n         * @param disableGenerateMipMaps defines a boolean indicating that mipmaps must not be generated\r\n         * @param onBeforeUnbind defines a function which will be called before the effective unbind\r\n         */\r\n        unBindMultiColorAttachmentFramebuffer(rtWrapper: RenderTargetWrapper, disableGenerateMipMaps: boolean, onBeforeUnbind?: () => void): void;\r\n\r\n        /**\r\n         * Create a multi render target texture\r\n         * @see https://doc.babylonjs.com/features/webgl2#multiple-render-target\r\n         * @param size defines the size of the texture\r\n         * @param options defines the creation options\r\n         * @param initializeBuffers if set to true, the engine will make an initializing call of drawBuffers\r\n         * @returns a new render target wrapper ready to render textures\r\n         */\r\n        createMultipleRenderTarget(size: TextureSize, options: IMultiRenderTargetOptions, initializeBuffers?: boolean): RenderTargetWrapper;\r\n\r\n        /**\r\n         * Update the sample count for a given multiple render target texture\r\n         * @see https://doc.babylonjs.com/features/webgl2#multisample-render-targets\r\n         * @param rtWrapper defines the render target wrapper to update\r\n         * @param samples defines the sample count to set\r\n         * @param initializeBuffers if set to true, the engine will make an initializing call of drawBuffers\r\n         * @returns the effective sample count (could be 0 if multisample render targets are not supported)\r\n         */\r\n        updateMultipleRenderTargetTextureSampleCount(rtWrapper: Nullable<RenderTargetWrapper>, samples: number, initializeBuffers?: boolean): number;\r\n\r\n        /**\r\n         * Select a subsets of attachments to draw to.\r\n         * @param attachments gl attachments\r\n         */\r\n        bindAttachments(attachments: number[]): void;\r\n\r\n        /**\r\n         * Creates a layout object to draw/clear on specific textures in a MRT\r\n         * @param textureStatus textureStatus[i] indicates if the i-th is active\r\n         * @returns A layout to be fed to the engine, calling `bindAttachments`.\r\n         */\r\n        buildTextureLayout(textureStatus: boolean[]): number[];\r\n\r\n        /**\r\n         * Restores the webgl state to only draw on the main color attachment\r\n         * when the frame buffer associated is the canvas frame buffer\r\n         */\r\n        restoreSingleAttachment(): void;\r\n\r\n        /**\r\n         * Restores the webgl state to only draw on the main color attachment\r\n         * when the frame buffer associated is not the canvas frame buffer\r\n         */\r\n        restoreSingleAttachmentForRenderTarget(): void;\r\n    }\r\n}\r\n\r\nThinEngine.prototype.restoreSingleAttachment = function (): void {\r\n    const gl = this._gl;\r\n\r\n    this.bindAttachments([gl.BACK]);\r\n};\r\n\r\nThinEngine.prototype.restoreSingleAttachmentForRenderTarget = function (): void {\r\n    const gl = this._gl;\r\n\r\n    this.bindAttachments([gl.COLOR_ATTACHMENT0]);\r\n};\r\n\r\nThinEngine.prototype.buildTextureLayout = function (textureStatus: boolean[]): number[] {\r\n    const gl = this._gl;\r\n\r\n    const result = [];\r\n\r\n    for (let i = 0; i < textureStatus.length; i++) {\r\n        if (textureStatus[i]) {\r\n            result.push((<any>gl)[\"COLOR_ATTACHMENT\" + i]);\r\n        } else {\r\n            result.push(gl.NONE);\r\n        }\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nThinEngine.prototype.bindAttachments = function (attachments: number[]): void {\r\n    const gl = this._gl;\r\n\r\n    gl.drawBuffers(attachments);\r\n};\r\n\r\nThinEngine.prototype.unBindMultiColorAttachmentFramebuffer = function (\r\n    rtWrapper: WebGLRenderTargetWrapper,\r\n    disableGenerateMipMaps: boolean = false,\r\n    onBeforeUnbind?: () => void\r\n): void {\r\n    this._currentRenderTarget = null;\r\n\r\n    // If MSAA, we need to bitblt back to main texture\r\n    const gl = this._gl;\r\n\r\n    const attachments = rtWrapper._attachments!;\r\n    const count = attachments.length;\r\n\r\n    if (rtWrapper._MSAAFramebuffer) {\r\n        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, rtWrapper._MSAAFramebuffer);\r\n        gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, rtWrapper._framebuffer);\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            const texture = rtWrapper.textures![i];\r\n\r\n            for (let j = 0; j < count; j++) {\r\n                attachments[j] = gl.NONE;\r\n            }\r\n\r\n            attachments[i] = (<any>gl)[this.webGLVersion > 1 ? \"COLOR_ATTACHMENT\" + i : \"COLOR_ATTACHMENT\" + i + \"_WEBGL\"];\r\n            gl.readBuffer(attachments[i]);\r\n            gl.drawBuffers(attachments);\r\n            gl.blitFramebuffer(0, 0, texture.width, texture.height, 0, 0, texture.width, texture.height, gl.COLOR_BUFFER_BIT, gl.NEAREST);\r\n        }\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            attachments[i] = (<any>gl)[this.webGLVersion > 1 ? \"COLOR_ATTACHMENT\" + i : \"COLOR_ATTACHMENT\" + i + \"_WEBGL\"];\r\n        }\r\n\r\n        gl.drawBuffers(attachments);\r\n    }\r\n\r\n    for (let i = 0; i < count; i++) {\r\n        const texture = rtWrapper.textures![i];\r\n        if (texture.generateMipMaps && !disableGenerateMipMaps && !texture.isCube) {\r\n            this._bindTextureDirectly(gl.TEXTURE_2D, texture, true);\r\n            gl.generateMipmap(gl.TEXTURE_2D);\r\n            this._bindTextureDirectly(gl.TEXTURE_2D, null);\r\n        }\r\n    }\r\n\r\n    if (onBeforeUnbind) {\r\n        if (rtWrapper._MSAAFramebuffer) {\r\n            // Bind the correct framebuffer\r\n            this._bindUnboundFramebuffer(rtWrapper._framebuffer);\r\n        }\r\n        onBeforeUnbind();\r\n    }\r\n\r\n    this._bindUnboundFramebuffer(null);\r\n};\r\n\r\nThinEngine.prototype.createMultipleRenderTarget = function (size: TextureSize, options: IMultiRenderTargetOptions, initializeBuffers: boolean = true): RenderTargetWrapper {\r\n    let generateMipMaps = false;\r\n    let generateDepthBuffer = true;\r\n    let generateStencilBuffer = false;\r\n    let generateDepthTexture = false;\r\n    let depthTextureFormat = Constants.TEXTUREFORMAT_DEPTH16;\r\n    let textureCount = 1;\r\n\r\n    const defaultType = Constants.TEXTURETYPE_UNSIGNED_INT;\r\n    const defaultSamplingMode = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE;\r\n\r\n    let types = new Array<number>();\r\n    let samplingModes = new Array<number>();\r\n\r\n    const rtWrapper = this._createHardwareRenderTargetWrapper(true, false, size) as WebGLRenderTargetWrapper;\r\n\r\n    if (options !== undefined) {\r\n        generateMipMaps = options.generateMipMaps === undefined ? false : options.generateMipMaps;\r\n        generateDepthBuffer = options.generateDepthBuffer === undefined ? true : options.generateDepthBuffer;\r\n        generateStencilBuffer = options.generateStencilBuffer === undefined ? false : options.generateStencilBuffer;\r\n        generateDepthTexture = options.generateDepthTexture === undefined ? false : options.generateDepthTexture;\r\n        textureCount = options.textureCount || 1;\r\n\r\n        if (options.types) {\r\n            types = options.types;\r\n        }\r\n        if (options.samplingModes) {\r\n            samplingModes = options.samplingModes;\r\n        }\r\n        if (\r\n            this.webGLVersion > 1 &&\r\n            (options.depthTextureFormat === Constants.TEXTUREFORMAT_DEPTH24_STENCIL8 ||\r\n                options.depthTextureFormat === Constants.TEXTUREFORMAT_DEPTH24 ||\r\n                options.depthTextureFormat === Constants.TEXTUREFORMAT_DEPTH32_FLOAT)\r\n        ) {\r\n            depthTextureFormat = options.depthTextureFormat;\r\n        }\r\n    }\r\n    const gl = this._gl;\r\n    // Create the framebuffer\r\n    const framebuffer = gl.createFramebuffer();\r\n    this._bindUnboundFramebuffer(framebuffer);\r\n\r\n    const width = (<{ width: number; height: number }>size).width || <number>size;\r\n    const height = (<{ width: number; height: number }>size).height || <number>size;\r\n\r\n    const textures: InternalTexture[] = [];\r\n    const attachments: number[] = [];\r\n\r\n    const useStencilTexture = this.webGLVersion > 1 && generateDepthTexture && options.depthTextureFormat === Constants.TEXTUREFORMAT_DEPTH24_STENCIL8;\r\n    const depthStencilBuffer = this._setupFramebufferDepthAttachments(!useStencilTexture && generateStencilBuffer, !generateDepthTexture && generateDepthBuffer, width, height);\r\n\r\n    rtWrapper._framebuffer = framebuffer;\r\n    rtWrapper._depthStencilBuffer = depthStencilBuffer;\r\n    rtWrapper._generateDepthBuffer = !generateDepthTexture && generateDepthBuffer;\r\n    rtWrapper._generateStencilBuffer = !useStencilTexture && generateStencilBuffer;\r\n    rtWrapper._attachments = attachments;\r\n\r\n    for (let i = 0; i < textureCount; i++) {\r\n        let samplingMode = samplingModes[i] || defaultSamplingMode;\r\n        let type = types[i] || defaultType;\r\n\r\n        if (type === Constants.TEXTURETYPE_FLOAT && !this._caps.textureFloatLinearFiltering) {\r\n            // if floating point linear (gl.FLOAT) then force to NEAREST_SAMPLINGMODE\r\n            samplingMode = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n        } else if (type === Constants.TEXTURETYPE_HALF_FLOAT && !this._caps.textureHalfFloatLinearFiltering) {\r\n            // if floating point linear (HALF_FLOAT) then force to NEAREST_SAMPLINGMODE\r\n            samplingMode = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n        }\r\n\r\n        const filters = this._getSamplingParameters(samplingMode, generateMipMaps);\r\n        if (type === Constants.TEXTURETYPE_FLOAT && !this._caps.textureFloat) {\r\n            type = Constants.TEXTURETYPE_UNSIGNED_INT;\r\n            Logger.Warn(\"Float textures are not supported. Render target forced to TEXTURETYPE_UNSIGNED_BYTE type\");\r\n        }\r\n\r\n        const texture = new InternalTexture(this, InternalTextureSource.MultiRenderTarget);\r\n        const attachment = (<any>gl)[this.webGLVersion > 1 ? \"COLOR_ATTACHMENT\" + i : \"COLOR_ATTACHMENT\" + i + \"_WEBGL\"];\r\n\r\n        textures.push(texture);\r\n        attachments.push(attachment);\r\n\r\n        gl.activeTexture((<any>gl)[\"TEXTURE\" + i]);\r\n        gl.bindTexture(gl.TEXTURE_2D, texture._hardwareTexture!.underlyingResource);\r\n\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filters.mag);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filters.min);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, this._getRGBABufferInternalSizedFormat(type), width, height, 0, gl.RGBA, this._getWebGLTextureType(type), null);\r\n\r\n        gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, attachment, gl.TEXTURE_2D, texture._hardwareTexture!.underlyingResource, 0);\r\n\r\n        if (generateMipMaps) {\r\n            this._gl.generateMipmap(this._gl.TEXTURE_2D);\r\n        }\r\n\r\n        // Unbind\r\n        this._bindTextureDirectly(gl.TEXTURE_2D, null);\r\n\r\n        texture.baseWidth = width;\r\n        texture.baseHeight = height;\r\n        texture.width = width;\r\n        texture.height = height;\r\n        texture.isReady = true;\r\n        texture.samples = 1;\r\n        texture.generateMipMaps = generateMipMaps;\r\n        texture.samplingMode = samplingMode;\r\n        texture.type = type;\r\n\r\n        this._internalTexturesCache.push(texture);\r\n    }\r\n\r\n    if (generateDepthTexture && this._caps.depthTextureExtension) {\r\n        // Depth texture\r\n        const depthTexture = new InternalTexture(this, InternalTextureSource.Depth);\r\n\r\n        let depthTextureType = Constants.TEXTURETYPE_UNSIGNED_SHORT;\r\n        let glDepthTextureInternalFormat = gl.DEPTH_COMPONENT16;\r\n        let glDepthTextureFormat = gl.DEPTH_COMPONENT;\r\n        let glDepthTextureType = gl.UNSIGNED_SHORT;\r\n        let glDepthTextureAttachment = gl.DEPTH_ATTACHMENT;\r\n        if (this.webGLVersion < 2) {\r\n            glDepthTextureInternalFormat = gl.DEPTH_COMPONENT;\r\n        } else {\r\n            if (depthTextureFormat === Constants.TEXTUREFORMAT_DEPTH32_FLOAT) {\r\n                depthTextureType = Constants.TEXTURETYPE_FLOAT;\r\n                glDepthTextureType = gl.FLOAT;\r\n                glDepthTextureInternalFormat = gl.DEPTH_COMPONENT32F;\r\n            } else if (depthTextureFormat === Constants.TEXTUREFORMAT_DEPTH24) {\r\n                depthTextureType = Constants.TEXTURETYPE_UNSIGNED_INT;\r\n                glDepthTextureType = gl.UNSIGNED_INT;\r\n                glDepthTextureInternalFormat = gl.DEPTH_COMPONENT24;\r\n                glDepthTextureAttachment = gl.DEPTH_ATTACHMENT;\r\n            } else if (depthTextureFormat === Constants.TEXTUREFORMAT_DEPTH24_STENCIL8) {\r\n                depthTextureType = Constants.TEXTURETYPE_UNSIGNED_INT_24_8;\r\n                glDepthTextureType = gl.UNSIGNED_INT_24_8;\r\n                glDepthTextureInternalFormat = gl.DEPTH24_STENCIL8;\r\n                glDepthTextureFormat = gl.DEPTH_STENCIL;\r\n                glDepthTextureAttachment = gl.DEPTH_STENCIL_ATTACHMENT;\r\n            }\r\n        }\r\n\r\n        gl.activeTexture(gl.TEXTURE0);\r\n        gl.bindTexture(gl.TEXTURE_2D, depthTexture._hardwareTexture!.underlyingResource);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, glDepthTextureInternalFormat, width, height, 0, glDepthTextureFormat, glDepthTextureType, null);\r\n\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, glDepthTextureAttachment, gl.TEXTURE_2D, depthTexture._hardwareTexture!.underlyingResource, 0);\r\n\r\n        depthTexture.baseWidth = width;\r\n        depthTexture.baseHeight = height;\r\n        depthTexture.width = width;\r\n        depthTexture.height = height;\r\n        depthTexture.isReady = true;\r\n        depthTexture.samples = 1;\r\n        depthTexture.generateMipMaps = generateMipMaps;\r\n        depthTexture.samplingMode = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n        depthTexture.format = depthTextureFormat;\r\n        depthTexture.type = depthTextureType;\r\n\r\n        textures.push(depthTexture);\r\n        this._internalTexturesCache.push(depthTexture);\r\n    }\r\n    rtWrapper.setTextures(textures);\r\n    if (initializeBuffers) {\r\n        gl.drawBuffers(attachments);\r\n    }\r\n\r\n    this._bindUnboundFramebuffer(null);\r\n\r\n    this.resetTextureCache();\r\n\r\n    return rtWrapper;\r\n};\r\n\r\nThinEngine.prototype.updateMultipleRenderTargetTextureSampleCount = function (\r\n    rtWrapper: Nullable<WebGLRenderTargetWrapper>,\r\n    samples: number,\r\n    initializeBuffers: boolean = true\r\n): number {\r\n    if (this.webGLVersion < 2 || !rtWrapper || !rtWrapper.texture) {\r\n        return 1;\r\n    }\r\n\r\n    if (rtWrapper.samples === samples) {\r\n        return samples;\r\n    }\r\n\r\n    const count = rtWrapper._attachments!.length;\r\n\r\n    if (count === 0) {\r\n        return 1;\r\n    }\r\n\r\n    const gl = this._gl;\r\n\r\n    samples = Math.min(samples, this.getCaps().maxMSAASamples);\r\n\r\n    // Dispose previous render buffers\r\n    if (rtWrapper._depthStencilBuffer) {\r\n        gl.deleteRenderbuffer(rtWrapper._depthStencilBuffer);\r\n        rtWrapper._depthStencilBuffer = null;\r\n    }\r\n\r\n    if (rtWrapper._MSAAFramebuffer) {\r\n        gl.deleteFramebuffer(rtWrapper._MSAAFramebuffer);\r\n        rtWrapper._MSAAFramebuffer = null;\r\n    }\r\n\r\n    for (let i = 0; i < count; i++) {\r\n        const hardwareTexture = rtWrapper.textures![i]._hardwareTexture as Nullable<WebGLHardwareTexture>;\r\n        if (hardwareTexture?._MSAARenderBuffer) {\r\n            gl.deleteRenderbuffer(hardwareTexture._MSAARenderBuffer);\r\n            hardwareTexture._MSAARenderBuffer = null;\r\n        }\r\n    }\r\n\r\n    if (samples > 1 && gl.renderbufferStorageMultisample) {\r\n        const framebuffer = gl.createFramebuffer();\r\n\r\n        if (!framebuffer) {\r\n            throw new Error(\"Unable to create multi sampled framebuffer\");\r\n        }\r\n\r\n        rtWrapper._MSAAFramebuffer = framebuffer;\r\n        this._bindUnboundFramebuffer(framebuffer);\r\n\r\n        const attachments = [];\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            const texture = rtWrapper.textures![i];\r\n            const hardwareTexture = texture._hardwareTexture as WebGLHardwareTexture;\r\n            const attachment = (<any>gl)[this.webGLVersion > 1 ? \"COLOR_ATTACHMENT\" + i : \"COLOR_ATTACHMENT\" + i + \"_WEBGL\"];\r\n\r\n            const colorRenderbuffer = this._createRenderBuffer(\r\n                texture.width,\r\n                texture.height,\r\n                samples,\r\n                -1 /* not used */,\r\n                this._getRGBAMultiSampleBufferFormat(texture.type),\r\n                attachment\r\n            );\r\n\r\n            if (!colorRenderbuffer) {\r\n                throw new Error(\"Unable to create multi sampled framebuffer\");\r\n            }\r\n\r\n            hardwareTexture._MSAARenderBuffer = colorRenderbuffer;\r\n            texture.samples = samples;\r\n\r\n            attachments.push(attachment);\r\n        }\r\n        if (initializeBuffers) {\r\n            gl.drawBuffers(attachments);\r\n        }\r\n    } else {\r\n        this._bindUnboundFramebuffer(rtWrapper._framebuffer);\r\n    }\r\n\r\n    rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(\r\n        rtWrapper._generateStencilBuffer,\r\n        rtWrapper._generateDepthBuffer,\r\n        rtWrapper.texture.width,\r\n        rtWrapper.texture.height,\r\n        samples\r\n    );\r\n\r\n    this._bindUnboundFramebuffer(null);\r\n\r\n    return samples;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}