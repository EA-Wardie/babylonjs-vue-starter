{"ast":null,"code":"import { Vector3, Matrix } from \"../Maths/math.vector.js\";\n/**\n * Class containing a set of static utilities functions for managing Pivots\n * @hidden\n */\n\nvar PivotTools =\n/** @class */\nfunction () {\n  function PivotTools() {}\n  /**\n   * @param mesh\n   * @hidden\n   */\n\n\n  PivotTools._RemoveAndStorePivotPoint = function (mesh) {\n    if (mesh && PivotTools._PivotCached === 0) {\n      // Save old pivot and set pivot to 0,0,0\n      mesh.getPivotPointToRef(PivotTools._OldPivotPoint);\n      PivotTools._PivotPostMultiplyPivotMatrix = mesh._postMultiplyPivotMatrix;\n\n      if (!PivotTools._OldPivotPoint.equalsToFloats(0, 0, 0)) {\n        mesh.setPivotMatrix(Matrix.IdentityReadOnly);\n\n        PivotTools._OldPivotPoint.subtractToRef(mesh.getPivotPoint(), PivotTools._PivotTranslation);\n\n        PivotTools._PivotTmpVector.copyFromFloats(1, 1, 1);\n\n        PivotTools._PivotTmpVector.subtractInPlace(mesh.scaling);\n\n        PivotTools._PivotTmpVector.multiplyInPlace(PivotTools._PivotTranslation);\n\n        mesh.position.addInPlace(PivotTools._PivotTmpVector);\n      }\n    }\n\n    PivotTools._PivotCached++;\n  };\n  /**\n   * @param mesh\n   * @hidden\n   */\n\n\n  PivotTools._RestorePivotPoint = function (mesh) {\n    if (mesh && !PivotTools._OldPivotPoint.equalsToFloats(0, 0, 0) && PivotTools._PivotCached === 1) {\n      mesh.setPivotPoint(PivotTools._OldPivotPoint);\n      mesh._postMultiplyPivotMatrix = PivotTools._PivotPostMultiplyPivotMatrix;\n\n      PivotTools._PivotTmpVector.copyFromFloats(1, 1, 1);\n\n      PivotTools._PivotTmpVector.subtractInPlace(mesh.scaling);\n\n      PivotTools._PivotTmpVector.multiplyInPlace(PivotTools._PivotTranslation);\n\n      mesh.position.subtractInPlace(PivotTools._PivotTmpVector);\n    }\n\n    this._PivotCached--;\n  }; // Stores the state of the pivot cache (_oldPivotPoint, _pivotTranslation)\n  // store/remove pivot point should only be applied during their outermost calls\n\n\n  PivotTools._PivotCached = 0;\n  PivotTools._OldPivotPoint = new Vector3();\n  PivotTools._PivotTranslation = new Vector3();\n  PivotTools._PivotTmpVector = new Vector3();\n  PivotTools._PivotPostMultiplyPivotMatrix = false;\n  return PivotTools;\n}();\n\nexport { PivotTools };","map":{"version":3,"mappings":"AAAA,SAASA,OAAT,EAAkBC,MAAlB,QAAgC,yBAAhC;AAGA;;;;;AAIA;AAAA;AAAA;AAAA,yBA2CC;AAnCG;;;;;;AAIcC,yCAAd,UAAwCC,IAAxC,EAA2D;AACvD,QAAIA,IAAI,IAAID,UAAU,CAACE,YAAX,KAA4B,CAAxC,EAA2C;AACvC;AACAD,UAAI,CAACE,kBAAL,CAAwBH,UAAU,CAACI,cAAnC;AACAJ,gBAAU,CAACK,6BAAX,GAA2CJ,IAAI,CAACK,wBAAhD;;AACA,UAAI,CAACN,UAAU,CAACI,cAAX,CAA0BG,cAA1B,CAAyC,CAAzC,EAA4C,CAA5C,EAA+C,CAA/C,CAAL,EAAwD;AACpDN,YAAI,CAACO,cAAL,CAAoBT,MAAM,CAACU,gBAA3B;;AACAT,kBAAU,CAACI,cAAX,CAA0BM,aAA1B,CAAwCT,IAAI,CAACU,aAAL,EAAxC,EAA8DX,UAAU,CAACY,iBAAzE;;AACAZ,kBAAU,CAACa,eAAX,CAA2BC,cAA3B,CAA0C,CAA1C,EAA6C,CAA7C,EAAgD,CAAhD;;AACAd,kBAAU,CAACa,eAAX,CAA2BE,eAA3B,CAA2Cd,IAAI,CAACe,OAAhD;;AACAhB,kBAAU,CAACa,eAAX,CAA2BI,eAA3B,CAA2CjB,UAAU,CAACY,iBAAtD;;AACAX,YAAI,CAACiB,QAAL,CAAcC,UAAd,CAAyBnB,UAAU,CAACa,eAApC;AACH;AACJ;;AACDb,cAAU,CAACE,YAAX;AACH,GAfa;AAgBd;;;;;;AAIcF,kCAAd,UAAiCC,IAAjC,EAAoD;AAChD,QAAIA,IAAI,IAAI,CAACD,UAAU,CAACI,cAAX,CAA0BG,cAA1B,CAAyC,CAAzC,EAA4C,CAA5C,EAA+C,CAA/C,CAAT,IAA8DP,UAAU,CAACE,YAAX,KAA4B,CAA9F,EAAiG;AAC7FD,UAAI,CAACmB,aAAL,CAAmBpB,UAAU,CAACI,cAA9B;AACAH,UAAI,CAACK,wBAAL,GAAgCN,UAAU,CAACK,6BAA3C;;AACAL,gBAAU,CAACa,eAAX,CAA2BC,cAA3B,CAA0C,CAA1C,EAA6C,CAA7C,EAAgD,CAAhD;;AACAd,gBAAU,CAACa,eAAX,CAA2BE,eAA3B,CAA2Cd,IAAI,CAACe,OAAhD;;AACAhB,gBAAU,CAACa,eAAX,CAA2BI,eAA3B,CAA2CjB,UAAU,CAACY,iBAAtD;;AACAX,UAAI,CAACiB,QAAL,CAAcH,eAAd,CAA8Bf,UAAU,CAACa,eAAzC;AACH;;AACD,SAAKX,YAAL;AACH,GAVa,CAhClB,CACI;AACA;;;AACeF,4BAAe,CAAf;AACAA,8BAAiB,IAAIF,OAAJ,EAAjB;AACAE,iCAAoB,IAAIF,OAAJ,EAApB;AACAE,+BAAkB,IAAIF,OAAJ,EAAlB;AACAE,6CAAgC,KAAhC;AAoCnB;AAAC,CA3CD;;SAAaA","names":["Vector3","Matrix","PivotTools","mesh","_PivotCached","getPivotPointToRef","_OldPivotPoint","_PivotPostMultiplyPivotMatrix","_postMultiplyPivotMatrix","equalsToFloats","setPivotMatrix","IdentityReadOnly","subtractToRef","getPivotPoint","_PivotTranslation","_PivotTmpVector","copyFromFloats","subtractInPlace","scaling","multiplyInPlace","position","addInPlace","setPivotPoint"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Misc/pivotTools.ts"],"sourcesContent":["import { Vector3, Matrix } from \"../Maths/math.vector\";\r\nimport type { TransformNode } from \"../Meshes/transformNode\";\r\n\r\n/**\r\n * Class containing a set of static utilities functions for managing Pivots\r\n * @hidden\r\n */\r\nexport class PivotTools {\r\n    // Stores the state of the pivot cache (_oldPivotPoint, _pivotTranslation)\r\n    // store/remove pivot point should only be applied during their outermost calls\r\n    private static _PivotCached = 0;\r\n    private static _OldPivotPoint = new Vector3();\r\n    private static _PivotTranslation = new Vector3();\r\n    private static _PivotTmpVector = new Vector3();\r\n    private static _PivotPostMultiplyPivotMatrix = false;\r\n    /**\r\n     * @param mesh\r\n     * @hidden\r\n     */\r\n    public static _RemoveAndStorePivotPoint(mesh: TransformNode) {\r\n        if (mesh && PivotTools._PivotCached === 0) {\r\n            // Save old pivot and set pivot to 0,0,0\r\n            mesh.getPivotPointToRef(PivotTools._OldPivotPoint);\r\n            PivotTools._PivotPostMultiplyPivotMatrix = mesh._postMultiplyPivotMatrix;\r\n            if (!PivotTools._OldPivotPoint.equalsToFloats(0, 0, 0)) {\r\n                mesh.setPivotMatrix(Matrix.IdentityReadOnly);\r\n                PivotTools._OldPivotPoint.subtractToRef(mesh.getPivotPoint(), PivotTools._PivotTranslation);\r\n                PivotTools._PivotTmpVector.copyFromFloats(1, 1, 1);\r\n                PivotTools._PivotTmpVector.subtractInPlace(mesh.scaling);\r\n                PivotTools._PivotTmpVector.multiplyInPlace(PivotTools._PivotTranslation);\r\n                mesh.position.addInPlace(PivotTools._PivotTmpVector);\r\n            }\r\n        }\r\n        PivotTools._PivotCached++;\r\n    }\r\n    /**\r\n     * @param mesh\r\n     * @hidden\r\n     */\r\n    public static _RestorePivotPoint(mesh: TransformNode) {\r\n        if (mesh && !PivotTools._OldPivotPoint.equalsToFloats(0, 0, 0) && PivotTools._PivotCached === 1) {\r\n            mesh.setPivotPoint(PivotTools._OldPivotPoint);\r\n            mesh._postMultiplyPivotMatrix = PivotTools._PivotPostMultiplyPivotMatrix;\r\n            PivotTools._PivotTmpVector.copyFromFloats(1, 1, 1);\r\n            PivotTools._PivotTmpVector.subtractInPlace(mesh.scaling);\r\n            PivotTools._PivotTmpVector.multiplyInPlace(PivotTools._PivotTranslation);\r\n            mesh.position.subtractInPlace(PivotTools._PivotTmpVector);\r\n        }\r\n        this._PivotCached--;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}