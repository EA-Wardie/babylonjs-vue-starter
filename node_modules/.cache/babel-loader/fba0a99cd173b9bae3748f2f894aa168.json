{"ast":null,"code":"import { Matrix } from \"../../Maths/math.vector.js\";\nimport { VRDistortionCorrectionPostProcess } from \"../../PostProcesses/vrDistortionCorrectionPostProcess.js\";\nimport { VRMultiviewToSingleviewPostProcess } from \"../../PostProcesses/vrMultiviewToSingleviewPostProcess.js\";\nimport { VRCameraMetrics } from \"../VR/vrCameraMetrics.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { Viewport } from \"../../Maths/math.viewport.js\";\n/**\n * @param camera\n * @param rigParams\n * @hidden\n */\n\nexport function setVRRigMode(camera, rigParams) {\n  var metrics = rigParams.vrCameraMetrics || VRCameraMetrics.GetDefault();\n  camera._rigCameras[0]._cameraRigParams.vrMetrics = metrics;\n  camera._rigCameras[0].viewport = new Viewport(0, 0, 0.5, 1.0);\n  camera._rigCameras[0]._cameraRigParams.vrWorkMatrix = new Matrix();\n  camera._rigCameras[0]._cameraRigParams.vrHMatrix = metrics.leftHMatrix;\n  camera._rigCameras[0]._cameraRigParams.vrPreViewMatrix = metrics.leftPreViewMatrix;\n  camera._rigCameras[0].getProjectionMatrix = camera._rigCameras[0]._getVRProjectionMatrix;\n  camera._rigCameras[1]._cameraRigParams.vrMetrics = metrics;\n  camera._rigCameras[1].viewport = new Viewport(0.5, 0, 0.5, 1.0);\n  camera._rigCameras[1]._cameraRigParams.vrWorkMatrix = new Matrix();\n  camera._rigCameras[1]._cameraRigParams.vrHMatrix = metrics.rightHMatrix;\n  camera._rigCameras[1]._cameraRigParams.vrPreViewMatrix = metrics.rightPreViewMatrix;\n  camera._rigCameras[1].getProjectionMatrix = camera._rigCameras[1]._getVRProjectionMatrix; // For multiview on a webVR camera\n  // First multiview will be rendered to camera._multiviewTexture\n  // Then this postprocess will run on each eye to copy the right texture to each eye\n\n  if (metrics.multiviewEnabled) {\n    if (!camera.getScene().getEngine().getCaps().multiview) {\n      Logger.Warn(\"Multiview is not supported, falling back to standard rendering\");\n      metrics.multiviewEnabled = false;\n    } else {\n      camera._useMultiviewToSingleView = true;\n      camera._rigPostProcess = new VRMultiviewToSingleviewPostProcess(\"VRMultiviewToSingleview\", camera, metrics.postProcessScaleFactor);\n    }\n  }\n\n  if (metrics.compensateDistortion) {\n    camera._rigCameras[0]._rigPostProcess = new VRDistortionCorrectionPostProcess(\"VR_Distort_Compensation_Left\", camera._rigCameras[0], false, metrics);\n    camera._rigCameras[1]._rigPostProcess = new VRDistortionCorrectionPostProcess(\"VR_Distort_Compensation_Right\", camera._rigCameras[1], true, metrics);\n  }\n}","map":{"version":3,"mappings":"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","names":["Matrix","VRDistortionCorrectionPostProcess","VRMultiviewToSingleviewPostProcess","VRCameraMetrics","Logger","Viewport","setVRRigMode","camera","rigParams","metrics","vrCameraMetrics","GetDefault","_rigCameras","_cameraRigParams","vrMetrics","viewport","vrWorkMatrix","vrHMatrix","leftHMatrix","vrPreViewMatrix","leftPreViewMatrix","getProjectionMatrix","_getVRProjectionMatrix","rightHMatrix","rightPreViewMatrix","multiviewEnabled","getScene","getEngine","getCaps","multiview","Warn","_useMultiviewToSingleView","_rigPostProcess","postProcessScaleFactor","compensateDistortion"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Cameras/RigModes/vrRigMode.ts"],"sourcesContent":["import type { Camera } from \"../camera\";\r\nimport { Matrix } from \"../../Maths/math.vector\";\r\nimport { VRDistortionCorrectionPostProcess } from \"../../PostProcesses/vrDistortionCorrectionPostProcess\";\r\nimport { VRMultiviewToSingleviewPostProcess } from \"../../PostProcesses/vrMultiviewToSingleviewPostProcess\";\r\nimport { VRCameraMetrics } from \"../VR/vrCameraMetrics\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { Viewport } from \"../../Maths/math.viewport\";\r\n\r\n/**\r\n * @param camera\r\n * @param rigParams\r\n * @hidden\r\n */\r\nexport function setVRRigMode(camera: Camera, rigParams: any) {\r\n    const metrics = <VRCameraMetrics>rigParams.vrCameraMetrics || VRCameraMetrics.GetDefault();\r\n\r\n    camera._rigCameras[0]._cameraRigParams.vrMetrics = metrics;\r\n    camera._rigCameras[0].viewport = new Viewport(0, 0, 0.5, 1.0);\r\n    camera._rigCameras[0]._cameraRigParams.vrWorkMatrix = new Matrix();\r\n    camera._rigCameras[0]._cameraRigParams.vrHMatrix = metrics.leftHMatrix;\r\n    camera._rigCameras[0]._cameraRigParams.vrPreViewMatrix = metrics.leftPreViewMatrix;\r\n    camera._rigCameras[0].getProjectionMatrix = camera._rigCameras[0]._getVRProjectionMatrix;\r\n\r\n    camera._rigCameras[1]._cameraRigParams.vrMetrics = metrics;\r\n    camera._rigCameras[1].viewport = new Viewport(0.5, 0, 0.5, 1.0);\r\n    camera._rigCameras[1]._cameraRigParams.vrWorkMatrix = new Matrix();\r\n    camera._rigCameras[1]._cameraRigParams.vrHMatrix = metrics.rightHMatrix;\r\n    camera._rigCameras[1]._cameraRigParams.vrPreViewMatrix = metrics.rightPreViewMatrix;\r\n    camera._rigCameras[1].getProjectionMatrix = camera._rigCameras[1]._getVRProjectionMatrix;\r\n\r\n    // For multiview on a webVR camera\r\n    // First multiview will be rendered to camera._multiviewTexture\r\n    // Then this postprocess will run on each eye to copy the right texture to each eye\r\n    if (metrics.multiviewEnabled) {\r\n        if (!camera.getScene().getEngine().getCaps().multiview) {\r\n            Logger.Warn(\"Multiview is not supported, falling back to standard rendering\");\r\n            metrics.multiviewEnabled = false;\r\n        } else {\r\n            camera._useMultiviewToSingleView = true;\r\n            camera._rigPostProcess = new VRMultiviewToSingleviewPostProcess(\"VRMultiviewToSingleview\", camera, metrics.postProcessScaleFactor);\r\n        }\r\n    }\r\n\r\n    if (metrics.compensateDistortion) {\r\n        camera._rigCameras[0]._rigPostProcess = new VRDistortionCorrectionPostProcess(\"VR_Distort_Compensation_Left\", camera._rigCameras[0], false, metrics);\r\n        camera._rigCameras[1]._rigPostProcess = new VRDistortionCorrectionPostProcess(\"VR_Distort_Compensation_Right\", camera._rigCameras[1], true, metrics);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}