{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\n/**\n * Block used to transform a vector3 or a vector4 into screen space\n */\n\nvar ScreenSpaceBlock =\n/** @class */\nfunction (_super) {\n  __extends(ScreenSpaceBlock, _super);\n  /**\n   * Creates a new ScreenSpaceBlock\n   * @param name defines the block name\n   */\n\n\n  function ScreenSpaceBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;\n\n    _this.registerInput(\"vector\", NodeMaterialBlockConnectionPointTypes.Vector3);\n\n    _this.registerInput(\"worldViewProjection\", NodeMaterialBlockConnectionPointTypes.Matrix);\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector2);\n\n    _this.registerOutput(\"x\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    _this.registerOutput(\"y\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    _this.inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector4);\n\n    return _this;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  ScreenSpaceBlock.prototype.getClassName = function () {\n    return \"ScreenSpaceBlock\";\n  };\n\n  Object.defineProperty(ScreenSpaceBlock.prototype, \"vector\", {\n    /**\n     * Gets the vector input\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ScreenSpaceBlock.prototype, \"worldViewProjection\", {\n    /**\n     * Gets the worldViewProjection transform input\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ScreenSpaceBlock.prototype, \"output\", {\n    /**\n     * Gets the output component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ScreenSpaceBlock.prototype, \"x\", {\n    /**\n     * Gets the x output component\n     */\n    get: function get() {\n      return this._outputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ScreenSpaceBlock.prototype, \"y\", {\n    /**\n     * Gets the y output component\n     */\n    get: function get() {\n      return this._outputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ScreenSpaceBlock.prototype.autoConfigure = function (material) {\n    if (!this.worldViewProjection.isConnected) {\n      var worldViewProjectionInput = material.getInputBlockByPredicate(function (b) {\n        return b.systemValue === NodeMaterialSystemValues.WorldViewProjection;\n      });\n\n      if (!worldViewProjectionInput) {\n        worldViewProjectionInput = new InputBlock(\"worldViewProjection\");\n        worldViewProjectionInput.setAsSystemValue(NodeMaterialSystemValues.WorldViewProjection);\n      }\n\n      worldViewProjectionInput.output.connectTo(this.worldViewProjection);\n    }\n  };\n\n  ScreenSpaceBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var vector = this.vector;\n    var worldViewProjection = this.worldViewProjection;\n\n    if (!vector.connectedPoint) {\n      return;\n    }\n\n    var worldViewProjectionName = worldViewProjection.associatedVariableName;\n\n    var tempVariableName = state._getFreeVariableName(\"screenSpaceTemp\");\n\n    switch (vector.connectedPoint.type) {\n      case NodeMaterialBlockConnectionPointTypes.Vector3:\n        state.compilationString += \"vec4 \".concat(tempVariableName, \" = \").concat(worldViewProjectionName, \" * vec4(\").concat(vector.associatedVariableName, \", 1.0);\\r\\n\");\n        break;\n\n      case NodeMaterialBlockConnectionPointTypes.Vector4:\n        state.compilationString += \"vec4 \".concat(tempVariableName, \" = \").concat(worldViewProjectionName, \" * \").concat(vector.associatedVariableName, \";\\r\\n\");\n        break;\n    }\n\n    state.compilationString += \"\".concat(tempVariableName, \".xy /= \").concat(tempVariableName, \".w;\");\n    state.compilationString += \"\".concat(tempVariableName, \".xy = \").concat(tempVariableName, \".xy * 0.5 + vec2(0.5, 0.5);\");\n\n    if (this.output.hasEndpoints) {\n      state.compilationString += this._declareOutput(this.output, state) + \" = \".concat(tempVariableName, \".xy;\\r\\n\");\n    }\n\n    if (this.x.hasEndpoints) {\n      state.compilationString += this._declareOutput(this.x, state) + \" = \".concat(tempVariableName, \".x;\\r\\n\");\n    }\n\n    if (this.y.hasEndpoints) {\n      state.compilationString += this._declareOutput(this.y, state) + \" = \".concat(tempVariableName, \".y;\\r\\n\");\n    }\n\n    return this;\n  };\n\n  return ScreenSpaceBlock;\n}(NodeMaterialBlock);\n\nexport { ScreenSpaceBlock };\nRegisterClass(\"BABYLON.ScreenSpaceBlock\", ScreenSpaceBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","NodeMaterialSystemValues","InputBlock","__extends","name","_super","Fragment","_this","registerInput","Vector3","Matrix","registerOutput","Vector2","Float","inputs","acceptedConnectionPointTypes","push","Vector4","ScreenSpaceBlock","Object","_inputs","_outputs","material","worldViewProjection","isConnected","worldViewProjectionInput","getInputBlockByPredicate","b","systemValue","WorldViewProjection","setAsSystemValue","output","connectTo","state","_buildBlock","call","vector","connectedPoint","worldViewProjectionName","associatedVariableName","tempVariableName","_getFreeVariableName","type","compilationString","concat","hasEndpoints","_declareOutput","x","y"],"sourceRoot":"","sources":["../../../../../../../../lts/core/generated/Materials/Node/Blocks/Fragment/screenSpaceBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { NodeMaterial } from \"../../nodeMaterial\";\r\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues\";\r\nimport { InputBlock } from \"../Input/inputBlock\";\r\n\r\n/**\r\n * Block used to transform a vector3 or a vector4 into screen space\r\n */\r\nexport class ScreenSpaceBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Creates a new ScreenSpaceBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerInput(\"vector\", NodeMaterialBlockConnectionPointTypes.Vector3);\r\n        this.registerInput(\"worldViewProjection\", NodeMaterialBlockConnectionPointTypes.Matrix);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector2);\r\n        this.registerOutput(\"x\", NodeMaterialBlockConnectionPointTypes.Float);\r\n        this.registerOutput(\"y\", NodeMaterialBlockConnectionPointTypes.Float);\r\n\r\n        this.inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector4);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ScreenSpaceBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the vector input\r\n     */\r\n    public get vector(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the worldViewProjection transform input\r\n     */\r\n    public get worldViewProjection(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the x output component\r\n     */\r\n    public get x(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the y output component\r\n     */\r\n    public get y(): NodeMaterialConnectionPoint {\r\n        return this._outputs[2];\r\n    }\r\n\r\n    public autoConfigure(material: NodeMaterial) {\r\n        if (!this.worldViewProjection.isConnected) {\r\n            let worldViewProjectionInput = material.getInputBlockByPredicate((b) => b.systemValue === NodeMaterialSystemValues.WorldViewProjection);\r\n\r\n            if (!worldViewProjectionInput) {\r\n                worldViewProjectionInput = new InputBlock(\"worldViewProjection\");\r\n                worldViewProjectionInput.setAsSystemValue(NodeMaterialSystemValues.WorldViewProjection);\r\n            }\r\n            worldViewProjectionInput.output.connectTo(this.worldViewProjection);\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const vector = this.vector;\r\n        const worldViewProjection = this.worldViewProjection;\r\n\r\n        if (!vector.connectedPoint) {\r\n            return;\r\n        }\r\n\r\n        const worldViewProjectionName = worldViewProjection.associatedVariableName;\r\n\r\n        const tempVariableName = state._getFreeVariableName(\"screenSpaceTemp\");\r\n\r\n        switch (vector.connectedPoint.type) {\r\n            case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                state.compilationString += `vec4 ${tempVariableName} = ${worldViewProjectionName} * vec4(${vector.associatedVariableName}, 1.0);\\r\\n`;\r\n                break;\r\n            case NodeMaterialBlockConnectionPointTypes.Vector4:\r\n                state.compilationString += `vec4 ${tempVariableName} = ${worldViewProjectionName} * ${vector.associatedVariableName};\\r\\n`;\r\n                break;\r\n        }\r\n\r\n        state.compilationString += `${tempVariableName}.xy /= ${tempVariableName}.w;`;\r\n        state.compilationString += `${tempVariableName}.xy = ${tempVariableName}.xy * 0.5 + vec2(0.5, 0.5);`;\r\n\r\n        if (this.output.hasEndpoints) {\r\n            state.compilationString += this._declareOutput(this.output, state) + ` = ${tempVariableName}.xy;\\r\\n`;\r\n        }\r\n        if (this.x.hasEndpoints) {\r\n            state.compilationString += this._declareOutput(this.x, state) + ` = ${tempVariableName}.x;\\r\\n`;\r\n        }\r\n        if (this.y.hasEndpoints) {\r\n            state.compilationString += this._declareOutput(this.y, state) + ` = ${tempVariableName}.y;\\r\\n`;\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ScreenSpaceBlock\", ScreenSpaceBlock);\r\n"]},"metadata":{},"sourceType":"module"}