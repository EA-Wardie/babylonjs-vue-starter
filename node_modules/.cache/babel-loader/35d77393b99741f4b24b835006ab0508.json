{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/displayPass.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * DisplayPassPostProcess which produces an output the same as it's input\n */\n\nvar DisplayPassPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(DisplayPassPostProcess, _super);\n  /**\n   * Creates the DisplayPassPostProcess\n   * @param name The name of the effect.\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   */\n\n\n  function DisplayPassPostProcess(name, options, camera, samplingMode, engine, reusable) {\n    return _super.call(this, name, \"displayPass\", [\"passSampler\"], [\"passSampler\"], options, camera, samplingMode, engine, reusable) || this;\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"DisplayPassPostProcess\" string\n   */\n\n\n  DisplayPassPostProcess.prototype.getClassName = function () {\n    return \"DisplayPassPostProcess\";\n  };\n  /**\n   * @param parsedPostProcess\n   * @param targetCamera\n   * @param scene\n   * @param rootUrl\n   * @hidden\n   */\n\n\n  DisplayPassPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new DisplayPassPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  return DisplayPassPostProcess;\n}(PostProcess);\n\nexport { DisplayPassPostProcess };\nRegisterClass(\"BABYLON.DisplayPassPostProcess\", DisplayPassPostProcess);","map":{"version":3,"mappings":";;AAGA,SAASA,WAAT,QAA4B,kBAA5B;AAGA,OAAO,oCAAP;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,mBAAT,QAAoC,uBAApC;AAIA;;;;AAGA;AAAA;AAAA;AAA4CC;AASxC;;;;;;;;;;;AASA,kCAAYC,IAAZ,EAA0BC,OAA1B,EAAgEC,MAAhE,EAA0FC,YAA1F,EAAiHC,MAAjH,EAAkIC,QAAlI,EAAoJ;WAChJC,kBAAMN,IAAN,EAAY,aAAZ,EAA2B,CAAC,aAAD,CAA3B,EAA4C,CAAC,aAAD,CAA5C,EAA6DC,OAA7D,EAAsEC,MAAtE,EAA8EC,YAA9E,EAA4FC,MAA5F,EAAoGC,QAApG,KAA6G;AAChH;AAnBD;;;;;;AAIOE,kDAAP;AACI,WAAO,wBAAP;AACH,GAFM;AAiBP;;;;;;;;;AAOcA,kCAAd,UAAqBC,iBAArB,EAA6CC,YAA7C,EAAmEC,KAAnE,EAAiFC,OAAjF,EAAgG;AAC5F,WAAOb,mBAAmB,CAACc,KAApB,CACH;AACI,aAAO,IAAIL,sBAAJ,CACHC,iBAAiB,CAACR,IADf,EAEHQ,iBAAiB,CAACP,OAFf,EAGHQ,YAHG,EAIHD,iBAAiB,CAACK,wBAJf,EAKHH,KAAK,CAACI,SAAN,EALG,EAMHN,iBAAiB,CAACH,QANf,CAAP;AAQH,KAVE,EAWHG,iBAXG,EAYHE,KAZG,EAaHC,OAbG,CAAP;AAeH,GAhBa;;AAiBlB;AAAC,CA9CD,CAA4Cf,WAA5C;;;AAgDAC,aAAa,CAAC,gCAAD,EAAmCU,sBAAnC,CAAb","names":["PostProcess","RegisterClass","SerializationHelper","__extends","name","options","camera","samplingMode","engine","reusable","_super","DisplayPassPostProcess","parsedPostProcess","targetCamera","scene","rootUrl","Parse","renderTargetSamplingMode","getEngine"],"sourceRoot":"","sources":["../../../../../lts/core/generated/PostProcesses/displayPassPostProcess.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Engine } from \"../Engines/engine\";\r\n\r\nimport \"../Shaders/displayPass.fragment\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { SerializationHelper } from \"../Misc/decorators\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * DisplayPassPostProcess which produces an output the same as it's input\r\n */\r\nexport class DisplayPassPostProcess extends PostProcess {\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"DisplayPassPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"DisplayPassPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates the DisplayPassPostProcess\r\n     * @param name The name of the effect.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     */\r\n    constructor(name: string, options: number | PostProcessOptions, camera: Nullable<Camera>, samplingMode?: number, engine?: Engine, reusable?: boolean) {\r\n        super(name, \"displayPass\", [\"passSampler\"], [\"passSampler\"], options, camera, samplingMode, engine, reusable);\r\n    }\r\n\r\n    /**\r\n     * @param parsedPostProcess\r\n     * @param targetCamera\r\n     * @param scene\r\n     * @param rootUrl\r\n     * @hidden\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string): Nullable<DisplayPassPostProcess> {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new DisplayPassPostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    scene.getEngine(),\r\n                    parsedPostProcess.reusable\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.DisplayPassPostProcess\", DisplayPassPostProcess);\r\n"]},"metadata":{},"sourceType":"module"}