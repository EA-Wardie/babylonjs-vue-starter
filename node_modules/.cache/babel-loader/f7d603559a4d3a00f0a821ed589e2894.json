{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial.js\";\nimport { GLTFLoader } from \"../glTFLoader.js\";\nimport { Color3 } from \"@babylonjs/core/Maths/math.color.js\";\nvar NAME = \"KHR_materials_specular\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_specular)\n */\n\nvar KHR_materials_specular =\n/** @class */\nfunction () {\n  /**\n   * @param loader\n   * @hidden\n   */\n  function KHR_materials_specular(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    /**\n     * Defines a number that determines the order the extensions are applied.\n     */\n\n    this.order = 190;\n    this._loader = loader;\n    this.enabled = this._loader.isExtensionUsed(NAME);\n  }\n  /** @hidden */\n\n\n  KHR_materials_specular.prototype.dispose = function () {\n    this._loader = null;\n  };\n  /**\n   * @param context\n   * @param material\n   * @param babylonMaterial\n   * @hidden\n   */\n\n\n  KHR_materials_specular.prototype.loadMaterialPropertiesAsync = function (context, material, babylonMaterial) {\n    var _this = this;\n\n    return GLTFLoader.LoadExtensionAsync(context, material, this.name, function (extensionContext, extension) {\n      var promises = new Array();\n      promises.push(_this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n      promises.push(_this._loadSpecularPropertiesAsync(extensionContext, extension, babylonMaterial));\n      return Promise.all(promises).then(function () {});\n    });\n  };\n\n  KHR_materials_specular.prototype._loadSpecularPropertiesAsync = function (context, properties, babylonMaterial) {\n    if (!(babylonMaterial instanceof PBRMaterial)) {\n      throw new Error(\"\".concat(context, \": Material type not supported\"));\n    }\n\n    var promises = new Array();\n\n    if (properties.specularFactor !== undefined) {\n      babylonMaterial.metallicF0Factor = properties.specularFactor;\n    }\n\n    if (properties.specularColorFactor !== undefined) {\n      babylonMaterial.metallicReflectanceColor = Color3.FromArray(properties.specularColorFactor);\n    }\n\n    if (properties.specularTexture) {\n      properties.specularTexture.nonColorData = true;\n      promises.push(this._loader.loadTextureInfoAsync(\"\".concat(context, \"/specularTexture\"), properties.specularTexture, function (texture) {\n        texture.name = \"\".concat(babylonMaterial.name, \" (Specular F0 Strength)\");\n        babylonMaterial.metallicReflectanceTexture = texture;\n        babylonMaterial.useOnlyMetallicFromMetallicReflectanceTexture = true;\n      }));\n    }\n\n    if (properties.specularColorTexture) {\n      promises.push(this._loader.loadTextureInfoAsync(\"\".concat(context, \"/specularColorTexture\"), properties.specularColorTexture, function (texture) {\n        texture.name = \"\".concat(babylonMaterial.name, \" (Specular F0 Color)\");\n        babylonMaterial.reflectanceTexture = texture;\n      }));\n    }\n\n    return Promise.all(promises).then(function () {});\n  };\n\n  return KHR_materials_specular;\n}();\n\nexport { KHR_materials_specular };\nGLTFLoader.RegisterExtension(NAME, function (loader) {\n  return new KHR_materials_specular(loader);\n});","map":{"version":3,"mappings":"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","names":["PBRMaterial","GLTFLoader","Color3","NAME","loader","_loader","enabled","isExtensionUsed","KHR_materials_specular","context","material","babylonMaterial","LoadExtensionAsync","name","extensionContext","extension","promises","Array","push","_this","loadMaterialPropertiesAsync","_loadSpecularPropertiesAsync","Promise","all","then","properties","Error","specularFactor","undefined","metallicF0Factor","specularColorFactor","metallicReflectanceColor","FromArray","specularTexture","nonColorData","loadTextureInfoAsync","texture","metallicReflectanceTexture","useOnlyMetallicFromMetallicReflectanceTexture","specularColorTexture","reflectanceTexture","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../../lts/loaders/generated/glTF/2.0/Extensions/KHR_materials_specular.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial, ITextureInfo } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport { Color3 } from \"core/Maths/math.color\";\r\nimport type { IKHRMaterialsSpecular } from \"babylonjs-gltf2interface\";\r\n\r\nconst NAME = \"KHR_materials_specular\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_specular)\r\n */\r\nexport class KHR_materials_specular implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 190;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @param loader\r\n     * @hidden\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @hidden */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @param context\r\n     * @param material\r\n     * @param babylonMaterial\r\n     * @hidden\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsSpecular>(context, material, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadSpecularPropertiesAsync(extensionContext, extension, babylonMaterial));\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    private _loadSpecularPropertiesAsync(context: string, properties: IKHRMaterialsSpecular, babylonMaterial: Material): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        if (properties.specularFactor !== undefined) {\r\n            babylonMaterial.metallicF0Factor = properties.specularFactor;\r\n        }\r\n\r\n        if (properties.specularColorFactor !== undefined) {\r\n            babylonMaterial.metallicReflectanceColor = Color3.FromArray(properties.specularColorFactor);\r\n        }\r\n\r\n        if (properties.specularTexture) {\r\n            (properties.specularTexture as ITextureInfo).nonColorData = true;\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/specularTexture`, properties.specularTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Specular F0 Strength)`;\r\n                    babylonMaterial.metallicReflectanceTexture = texture;\r\n                    babylonMaterial.useOnlyMetallicFromMetallicReflectanceTexture = true;\r\n                })\r\n            );\r\n        }\r\n\r\n        if (properties.specularColorTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/specularColorTexture`, properties.specularColorTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (Specular F0 Color)`;\r\n                    babylonMaterial.reflectanceTexture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_materials_specular(loader));\r\n"]},"metadata":{},"sourceType":"module"}