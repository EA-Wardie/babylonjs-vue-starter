{"ast":null,"code":"import { Matrix, Vector3, Vector2 } from \"../../Maths/math.vector.js\";\nimport { Mesh } from \"../mesh.js\";\nimport { VertexData } from \"../mesh.vertexData.js\";\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions.js\";\n/**\n * Creates the VertexData for a torus\n * @param options an object used to set the following optional parameters for the box, required but can be empty\n * * diameter the diameter of the torus, optional default 1\n * * thickness the diameter of the tube forming the torus, optional default 0.5\n * * tessellation the number of prism sides, 3 for a triangular prism, optional, default 24\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\n * @param options.diameter\n * @param options.thickness\n * @param options.tessellation\n * @param options.sideOrientation\n * @param options.frontUVs\n * @param options.backUVs\n * @returns the VertexData of the torus\n */\n\nexport function CreateTorusVertexData(options) {\n  var indices = [];\n  var positions = [];\n  var normals = [];\n  var uvs = [];\n  var diameter = options.diameter || 1;\n  var thickness = options.thickness || 0.5;\n  var tessellation = options.tessellation || 16;\n  var sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\n  var stride = tessellation + 1;\n\n  for (var i = 0; i <= tessellation; i++) {\n    var u = i / tessellation;\n    var outerAngle = i * Math.PI * 2.0 / tessellation - Math.PI / 2.0;\n    var transform = Matrix.Translation(diameter / 2.0, 0, 0).multiply(Matrix.RotationY(outerAngle));\n\n    for (var j = 0; j <= tessellation; j++) {\n      var v = 1 - j / tessellation;\n      var innerAngle = j * Math.PI * 2.0 / tessellation + Math.PI;\n      var dx = Math.cos(innerAngle);\n      var dy = Math.sin(innerAngle); // Create a vertex.\n\n      var normal = new Vector3(dx, dy, 0);\n      var position = normal.scale(thickness / 2);\n      var textureCoordinate = new Vector2(u, v);\n      position = Vector3.TransformCoordinates(position, transform);\n      normal = Vector3.TransformNormal(normal, transform);\n      positions.push(position.x, position.y, position.z);\n      normals.push(normal.x, normal.y, normal.z);\n      uvs.push(textureCoordinate.x, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - textureCoordinate.y : textureCoordinate.y); // And create indices for two triangles.\n\n      var nextI = (i + 1) % stride;\n      var nextJ = (j + 1) % stride;\n      indices.push(i * stride + j);\n      indices.push(i * stride + nextJ);\n      indices.push(nextI * stride + j);\n      indices.push(i * stride + nextJ);\n      indices.push(nextI * stride + nextJ);\n      indices.push(nextI * stride + j);\n    }\n  } // Sides\n\n\n  VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs); // Result\n\n\n  var vertexData = new VertexData();\n  vertexData.indices = indices;\n  vertexData.positions = positions;\n  vertexData.normals = normals;\n  vertexData.uvs = uvs;\n  return vertexData;\n}\n/**\n * Creates a torus mesh\n * * The parameter `diameter` sets the diameter size (float) of the torus (default 1)\n * * The parameter `thickness` sets the diameter size of the tube of the torus (float, default 0.5)\n * * The parameter `tessellation` sets the number of torus sides (positive integer, default 16)\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.\n * @param name defines the name of the mesh\n * @param options defines the options used to create the mesh\n * @param options.diameter\n * @param options.thickness\n * @param options.tessellation\n * @param options.updatable\n * @param options.sideOrientation\n * @param options.frontUVs\n * @param options.backUVs\n * @param scene defines the hosting scene\n * @returns the torus mesh\n * @see https://doc.babylonjs.com/how_to/set_shapes#torus\n */\n\nexport function CreateTorus(name, options, scene) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var torus = new Mesh(name, scene);\n  options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\n  torus._originalBuilderSideOrientation = options.sideOrientation;\n  var vertexData = CreateTorusVertexData(options);\n  vertexData.applyToMesh(torus, options.updatable);\n  return torus;\n}\n/**\n * Class containing static functions to help procedurally build meshes\n * @deprecated use CreateTorus instead\n */\n\nexport var TorusBuilder = {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  CreateTorus: CreateTorus\n};\nVertexData.CreateTorus = CreateTorusVertexData;\n\nMesh.CreateTorus = function (name, diameter, thickness, tessellation, scene, updatable, sideOrientation) {\n  var options = {\n    diameter: diameter,\n    thickness: thickness,\n    tessellation: tessellation,\n    sideOrientation: sideOrientation,\n    updatable: updatable\n  };\n  return CreateTorus(name, options, scene);\n};","map":{"version":3,"mappings":"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","names":["Matrix","Vector3","Vector2","Mesh","VertexData","CompatibilityOptions","CreateTorusVertexData","options","indices","positions","normals","uvs","diameter","thickness","tessellation","sideOrientation","DEFAULTSIDE","stride","i","u","outerAngle","Math","PI","transform","Translation","multiply","RotationY","j","v","innerAngle","dx","cos","dy","sin","normal","position","scale","textureCoordinate","TransformCoordinates","TransformNormal","push","x","y","z","UseOpenGLOrientationForUV","nextI","nextJ","_ComputeSides","frontUVs","backUVs","vertexData","CreateTorus","name","scene","torus","_GetDefaultSideOrientation","_originalBuilderSideOrientation","applyToMesh","updatable","TorusBuilder"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Meshes/Builders/torusBuilder.ts"],"sourcesContent":["import type { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Matrix, Vector3, Vector2 } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Creates the VertexData for a torus\r\n * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n * * diameter the diameter of the torus, optional default 1\r\n * * thickness the diameter of the tube forming the torus, optional default 0.5\r\n * * tessellation the number of prism sides, 3 for a triangular prism, optional, default 24\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @param options.diameter\r\n * @param options.thickness\r\n * @param options.tessellation\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @returns the VertexData of the torus\r\n */\r\nexport function CreateTorusVertexData(options: { diameter?: number; thickness?: number; tessellation?: number; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4 }) {\r\n    const indices = [];\r\n    const positions = [];\r\n    const normals = [];\r\n    const uvs = [];\r\n\r\n    const diameter = options.diameter || 1;\r\n    const thickness = options.thickness || 0.5;\r\n    const tessellation = options.tessellation || 16;\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    const stride = tessellation + 1;\r\n\r\n    for (let i = 0; i <= tessellation; i++) {\r\n        const u = i / tessellation;\r\n\r\n        const outerAngle = (i * Math.PI * 2.0) / tessellation - Math.PI / 2.0;\r\n\r\n        const transform = Matrix.Translation(diameter / 2.0, 0, 0).multiply(Matrix.RotationY(outerAngle));\r\n\r\n        for (let j = 0; j <= tessellation; j++) {\r\n            const v = 1 - j / tessellation;\r\n\r\n            const innerAngle = (j * Math.PI * 2.0) / tessellation + Math.PI;\r\n            const dx = Math.cos(innerAngle);\r\n            const dy = Math.sin(innerAngle);\r\n\r\n            // Create a vertex.\r\n            let normal = new Vector3(dx, dy, 0);\r\n            let position = normal.scale(thickness / 2);\r\n            const textureCoordinate = new Vector2(u, v);\r\n\r\n            position = Vector3.TransformCoordinates(position, transform);\r\n            normal = Vector3.TransformNormal(normal, transform);\r\n\r\n            positions.push(position.x, position.y, position.z);\r\n            normals.push(normal.x, normal.y, normal.z);\r\n            uvs.push(textureCoordinate.x, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - textureCoordinate.y : textureCoordinate.y);\r\n\r\n            // And create indices for two triangles.\r\n            const nextI = (i + 1) % stride;\r\n            const nextJ = (j + 1) % stride;\r\n\r\n            indices.push(i * stride + j);\r\n            indices.push(i * stride + nextJ);\r\n            indices.push(nextI * stride + j);\r\n\r\n            indices.push(i * stride + nextJ);\r\n            indices.push(nextI * stride + nextJ);\r\n            indices.push(nextI * stride + j);\r\n        }\r\n    }\r\n\r\n    // Sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a torus mesh\r\n * * The parameter `diameter` sets the diameter size (float) of the torus (default 1)\r\n * * The parameter `thickness` sets the diameter size of the tube of the torus (float, default 0.5)\r\n * * The parameter `tessellation` sets the number of torus sides (positive integer, default 16)\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.diameter\r\n * @param options.thickness\r\n * @param options.tessellation\r\n * @param options.updatable\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param scene defines the hosting scene\r\n * @returns the torus mesh\r\n * @see https://doc.babylonjs.com/how_to/set_shapes#torus\r\n */\r\nexport function CreateTorus(\r\n    name: string,\r\n    options: { diameter?: number; thickness?: number; tessellation?: number; updatable?: boolean; sideOrientation?: number; frontUVs?: Vector4; backUVs?: Vector4 } = {},\r\n    scene?: Scene\r\n): Mesh {\r\n    const torus = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    torus._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateTorusVertexData(options);\r\n\r\n    vertexData.applyToMesh(torus, options.updatable);\r\n\r\n    return torus;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated use CreateTorus instead\r\n */\r\nexport const TorusBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateTorus,\r\n};\r\n\r\nVertexData.CreateTorus = CreateTorusVertexData;\r\n\r\n(Mesh as any).CreateTorus = (name: string, diameter: number, thickness: number, tessellation: number, scene?: Scene, updatable?: boolean, sideOrientation?: number): Mesh => {\r\n    const options = {\r\n        diameter,\r\n        thickness,\r\n        tessellation,\r\n        sideOrientation,\r\n        updatable,\r\n    };\r\n\r\n    return CreateTorus(name, options, scene);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}