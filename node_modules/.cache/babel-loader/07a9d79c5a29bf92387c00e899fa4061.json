{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.string.search.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"./Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"./Enums/nodeMaterialBlockTargets.js\";\nimport { Effect } from \"../effect.js\";\nimport { StartsWith } from \"../../Misc/stringTools.js\";\n/**\n * Class used to store node based material build state\n */\n\nvar NodeMaterialBuildState =\n/** @class */\nfunction () {\n  function NodeMaterialBuildState() {\n    /** Gets or sets a boolean indicating if the current state can emit uniform buffers */\n    this.supportUniformBuffers = false;\n    /**\n     * Gets the list of emitted attributes\n     */\n\n    this.attributes = new Array();\n    /**\n     * Gets the list of emitted uniforms\n     */\n\n    this.uniforms = new Array();\n    /**\n     * Gets the list of emitted constants\n     */\n\n    this.constants = new Array();\n    /**\n     * Gets the list of emitted samplers\n     */\n\n    this.samplers = new Array();\n    /**\n     * Gets the list of emitted functions\n     */\n\n    this.functions = {};\n    /**\n     * Gets the list of emitted extensions\n     */\n\n    this.extensions = {};\n    /**\n     * Gets the list of emitted counters\n     */\n\n    this.counters = {};\n    /** @hidden */\n\n    this._attributeDeclaration = \"\";\n    /** @hidden */\n\n    this._uniformDeclaration = \"\";\n    /** @hidden */\n\n    this._constantDeclaration = \"\";\n    /** @hidden */\n\n    this._samplerDeclaration = \"\";\n    /** @hidden */\n\n    this._varyingTransfer = \"\";\n    /** @hidden */\n\n    this._injectAtEnd = \"\";\n    this._repeatableContentAnchorIndex = 0;\n    /** @hidden */\n\n    this._builtCompilationString = \"\";\n    /**\n     * Gets the emitted compilation strings\n     */\n\n    this.compilationString = \"\";\n  }\n  /**\n   * Finalize the compilation strings\n   * @param state defines the current compilation state\n   */\n\n\n  NodeMaterialBuildState.prototype.finalize = function (state) {\n    var emitComments = state.sharedData.emitComments;\n    var isFragmentMode = this.target === NodeMaterialBlockTargets.Fragment;\n    this.compilationString = \"\\r\\n\".concat(emitComments ? \"//Entry point\\r\\n\" : \"\", \"void main(void) {\\r\\n\").concat(this.compilationString);\n\n    if (this._constantDeclaration) {\n      this.compilationString = \"\\r\\n\".concat(emitComments ? \"//Constants\\r\\n\" : \"\").concat(this._constantDeclaration, \"\\r\\n\").concat(this.compilationString);\n    }\n\n    var functionCode = \"\";\n\n    for (var functionName in this.functions) {\n      functionCode += this.functions[functionName] + \"\\r\\n\";\n    }\n\n    this.compilationString = \"\\r\\n\".concat(functionCode, \"\\r\\n\").concat(this.compilationString);\n\n    if (!isFragmentMode && this._varyingTransfer) {\n      this.compilationString = \"\".concat(this.compilationString, \"\\r\\n\").concat(this._varyingTransfer);\n    }\n\n    if (this._injectAtEnd) {\n      this.compilationString = \"\".concat(this.compilationString, \"\\r\\n\").concat(this._injectAtEnd);\n    }\n\n    this.compilationString = \"\".concat(this.compilationString, \"\\r\\n}\");\n\n    if (this.sharedData.varyingDeclaration) {\n      this.compilationString = \"\\r\\n\".concat(emitComments ? \"//Varyings\\r\\n\" : \"\").concat(this.sharedData.varyingDeclaration, \"\\r\\n\").concat(this.compilationString);\n    }\n\n    if (this._samplerDeclaration) {\n      this.compilationString = \"\\r\\n\".concat(emitComments ? \"//Samplers\\r\\n\" : \"\").concat(this._samplerDeclaration, \"\\r\\n\").concat(this.compilationString);\n    }\n\n    if (this._uniformDeclaration) {\n      this.compilationString = \"\\r\\n\".concat(emitComments ? \"//Uniforms\\r\\n\" : \"\").concat(this._uniformDeclaration, \"\\r\\n\").concat(this.compilationString);\n    }\n\n    if (this._attributeDeclaration && !isFragmentMode) {\n      this.compilationString = \"\\r\\n\".concat(emitComments ? \"//Attributes\\r\\n\" : \"\").concat(this._attributeDeclaration, \"\\r\\n\").concat(this.compilationString);\n    }\n\n    this.compilationString = \"precision highp float;\\r\\n\" + this.compilationString;\n\n    for (var extensionName in this.extensions) {\n      var extension = this.extensions[extensionName];\n      this.compilationString = \"\\r\\n\".concat(extension, \"\\r\\n\").concat(this.compilationString);\n    }\n\n    this._builtCompilationString = this.compilationString;\n  };\n\n  Object.defineProperty(NodeMaterialBuildState.prototype, \"_repeatableContentAnchor\", {\n    /** @hidden */\n    get: function get() {\n      return \"###___ANCHOR\".concat(this._repeatableContentAnchorIndex++, \"___###\");\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * @param prefix\n   * @hidden\n   */\n\n  NodeMaterialBuildState.prototype._getFreeVariableName = function (prefix) {\n    prefix = prefix.replace(/[^a-zA-Z_]+/g, \"\");\n\n    if (this.sharedData.variableNames[prefix] === undefined) {\n      this.sharedData.variableNames[prefix] = 0; // Check reserved words\n\n      if (prefix === \"output\" || prefix === \"texture\") {\n        return prefix + this.sharedData.variableNames[prefix];\n      }\n\n      return prefix;\n    } else {\n      this.sharedData.variableNames[prefix]++;\n    }\n\n    return prefix + this.sharedData.variableNames[prefix];\n  };\n  /**\n   * @param prefix\n   * @hidden\n   */\n\n\n  NodeMaterialBuildState.prototype._getFreeDefineName = function (prefix) {\n    if (this.sharedData.defineNames[prefix] === undefined) {\n      this.sharedData.defineNames[prefix] = 0;\n    } else {\n      this.sharedData.defineNames[prefix]++;\n    }\n\n    return prefix + this.sharedData.defineNames[prefix];\n  };\n  /**\n   * @param name\n   * @hidden\n   */\n\n\n  NodeMaterialBuildState.prototype._excludeVariableName = function (name) {\n    this.sharedData.variableNames[name] = 0;\n  };\n  /**\n   * @param name\n   * @hidden\n   */\n\n\n  NodeMaterialBuildState.prototype._emit2DSampler = function (name) {\n    if (this.samplers.indexOf(name) < 0) {\n      this._samplerDeclaration += \"uniform sampler2D \".concat(name, \";\\r\\n\");\n      this.samplers.push(name);\n    }\n  };\n  /**\n   * @param type\n   * @hidden\n   */\n\n\n  NodeMaterialBuildState.prototype._getGLType = function (type) {\n    switch (type) {\n      case NodeMaterialBlockConnectionPointTypes.Float:\n        return \"float\";\n\n      case NodeMaterialBlockConnectionPointTypes.Int:\n        return \"int\";\n\n      case NodeMaterialBlockConnectionPointTypes.Vector2:\n        return \"vec2\";\n\n      case NodeMaterialBlockConnectionPointTypes.Color3:\n      case NodeMaterialBlockConnectionPointTypes.Vector3:\n        return \"vec3\";\n\n      case NodeMaterialBlockConnectionPointTypes.Color4:\n      case NodeMaterialBlockConnectionPointTypes.Vector4:\n        return \"vec4\";\n\n      case NodeMaterialBlockConnectionPointTypes.Matrix:\n        return \"mat4\";\n    }\n\n    return \"\";\n  };\n  /**\n   * @param name\n   * @param extension\n   * @param define\n   * @hidden\n   */\n\n\n  NodeMaterialBuildState.prototype._emitExtension = function (name, extension, define) {\n    if (define === void 0) {\n      define = \"\";\n    }\n\n    if (this.extensions[name]) {\n      return;\n    }\n\n    if (define) {\n      extension = \"#if \".concat(define, \"\\r\\n\").concat(extension, \"\\r\\n#endif\");\n    }\n\n    this.extensions[name] = extension;\n  };\n  /**\n   * @param name\n   * @param code\n   * @param comments\n   * @hidden\n   */\n\n\n  NodeMaterialBuildState.prototype._emitFunction = function (name, code, comments) {\n    if (this.functions[name]) {\n      return;\n    }\n\n    if (this.sharedData.emitComments) {\n      code = comments + \"\\r\\n\" + code;\n    }\n\n    this.functions[name] = code;\n  };\n  /**\n   * @param includeName\n   * @param comments\n   * @param options\n   * @param options.replaceStrings\n   * @param options.repeatKey\n   * @hidden\n   */\n\n\n  NodeMaterialBuildState.prototype._emitCodeFromInclude = function (includeName, comments, options) {\n    if (options && options.repeatKey) {\n      return \"#include<\".concat(includeName, \">[0..\").concat(options.repeatKey, \"]\\r\\n\");\n    }\n\n    var code = Effect.IncludesShadersStore[includeName] + \"\\r\\n\";\n\n    if (this.sharedData.emitComments) {\n      code = comments + \"\\r\\n\" + code;\n    }\n\n    if (!options) {\n      return code;\n    }\n\n    if (options.replaceStrings) {\n      for (var index = 0; index < options.replaceStrings.length; index++) {\n        var replaceString = options.replaceStrings[index];\n        code = code.replace(replaceString.search, replaceString.replace);\n      }\n    }\n\n    return code;\n  };\n  /**\n   * @param includeName\n   * @param comments\n   * @param options\n   * @param options.repeatKey\n   * @param options.removeAttributes\n   * @param options.removeUniforms\n   * @param options.removeVaryings\n   * @param options.removeIfDef\n   * @param options.replaceStrings\n   * @param storeKey\n   * @hidden\n   */\n\n\n  NodeMaterialBuildState.prototype._emitFunctionFromInclude = function (includeName, comments, options, storeKey) {\n    if (storeKey === void 0) {\n      storeKey = \"\";\n    }\n\n    var key = includeName + storeKey;\n\n    if (this.functions[key]) {\n      return;\n    }\n\n    if (!options || !options.removeAttributes && !options.removeUniforms && !options.removeVaryings && !options.removeIfDef && !options.replaceStrings) {\n      if (options && options.repeatKey) {\n        this.functions[key] = \"#include<\".concat(includeName, \">[0..\").concat(options.repeatKey, \"]\\r\\n\");\n      } else {\n        this.functions[key] = \"#include<\".concat(includeName, \">\\r\\n\");\n      }\n\n      if (this.sharedData.emitComments) {\n        this.functions[key] = comments + \"\\r\\n\" + this.functions[key];\n      }\n\n      return;\n    }\n\n    this.functions[key] = Effect.IncludesShadersStore[includeName];\n\n    if (this.sharedData.emitComments) {\n      this.functions[key] = comments + \"\\r\\n\" + this.functions[key];\n    }\n\n    if (options.removeIfDef) {\n      this.functions[key] = this.functions[key].replace(/^\\s*?#ifdef.+$/gm, \"\");\n      this.functions[key] = this.functions[key].replace(/^\\s*?#endif.*$/gm, \"\");\n      this.functions[key] = this.functions[key].replace(/^\\s*?#else.*$/gm, \"\");\n      this.functions[key] = this.functions[key].replace(/^\\s*?#elif.*$/gm, \"\");\n    }\n\n    if (options.removeAttributes) {\n      this.functions[key] = this.functions[key].replace(/^\\s*?attribute.+$/gm, \"\");\n    }\n\n    if (options.removeUniforms) {\n      this.functions[key] = this.functions[key].replace(/^\\s*?uniform.+$/gm, \"\");\n    }\n\n    if (options.removeVaryings) {\n      this.functions[key] = this.functions[key].replace(/^\\s*?varying.+$/gm, \"\");\n    }\n\n    if (options.replaceStrings) {\n      for (var index = 0; index < options.replaceStrings.length; index++) {\n        var replaceString = options.replaceStrings[index];\n        this.functions[key] = this.functions[key].replace(replaceString.search, replaceString.replace);\n      }\n    }\n  };\n  /**\n   * @param name\n   * @hidden\n   */\n\n\n  NodeMaterialBuildState.prototype._registerTempVariable = function (name) {\n    if (this.sharedData.temps.indexOf(name) !== -1) {\n      return false;\n    }\n\n    this.sharedData.temps.push(name);\n    return true;\n  };\n  /**\n   * @param name\n   * @param type\n   * @param define\n   * @param notDefine\n   * @hidden\n   */\n\n\n  NodeMaterialBuildState.prototype._emitVaryingFromString = function (name, type, define, notDefine) {\n    if (define === void 0) {\n      define = \"\";\n    }\n\n    if (notDefine === void 0) {\n      notDefine = false;\n    }\n\n    if (this.sharedData.varyings.indexOf(name) !== -1) {\n      return false;\n    }\n\n    this.sharedData.varyings.push(name);\n\n    if (define) {\n      if (StartsWith(define, \"defined(\")) {\n        this.sharedData.varyingDeclaration += \"#if \".concat(define, \"\\r\\n\");\n      } else {\n        this.sharedData.varyingDeclaration += \"\".concat(notDefine ? \"#ifndef\" : \"#ifdef\", \" \").concat(define, \"\\r\\n\");\n      }\n    }\n\n    this.sharedData.varyingDeclaration += \"varying \".concat(type, \" \").concat(name, \";\\r\\n\");\n\n    if (define) {\n      this.sharedData.varyingDeclaration += \"#endif\\r\\n\";\n    }\n\n    return true;\n  };\n  /**\n   * @param name\n   * @param type\n   * @param define\n   * @param notDefine\n   * @hidden\n   */\n\n\n  NodeMaterialBuildState.prototype._emitUniformFromString = function (name, type, define, notDefine) {\n    if (define === void 0) {\n      define = \"\";\n    }\n\n    if (notDefine === void 0) {\n      notDefine = false;\n    }\n\n    if (this.uniforms.indexOf(name) !== -1) {\n      return;\n    }\n\n    this.uniforms.push(name);\n\n    if (define) {\n      if (StartsWith(define, \"defined(\")) {\n        this._uniformDeclaration += \"#if \".concat(define, \"\\r\\n\");\n      } else {\n        this._uniformDeclaration += \"\".concat(notDefine ? \"#ifndef\" : \"#ifdef\", \" \").concat(define, \"\\r\\n\");\n      }\n    }\n\n    this._uniformDeclaration += \"uniform \".concat(type, \" \").concat(name, \";\\r\\n\");\n\n    if (define) {\n      this._uniformDeclaration += \"#endif\\r\\n\";\n    }\n  };\n  /**\n   * @param value\n   * @hidden\n   */\n\n\n  NodeMaterialBuildState.prototype._emitFloat = function (value) {\n    if (value.toString() === value.toFixed(0)) {\n      return \"\".concat(value, \".0\");\n    }\n\n    return value.toString();\n  };\n\n  return NodeMaterialBuildState;\n}();\n\nexport { NodeMaterialBuildState };","map":{"version":3,"mappings":"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","names":["NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","Effect","StartsWith","Array","NodeMaterialBuildState","state","emitComments","sharedData","isFragmentMode","target","Fragment","compilationString","concat","_constantDeclaration","functionCode","functionName","functions","_varyingTransfer","_injectAtEnd","varyingDeclaration","_samplerDeclaration","_uniformDeclaration","_attributeDeclaration","extensionName","extensions","extension","_builtCompilationString","Object","_repeatableContentAnchorIndex","prefix","replace","variableNames","undefined","defineNames","name","samplers","indexOf","push","type","Float","Int","Vector2","Color3","Vector3","Color4","Vector4","Matrix","define","code","comments","includeName","options","repeatKey","IncludesShadersStore","replaceStrings","index","length","replaceString","search","storeKey","key","removeAttributes","removeUniforms","removeVaryings","removeIfDef","temps","notDefine","varyings","uniforms","value","toString","toFixed"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Node/nodeMaterialBuildState.ts"],"sourcesContent":["import { NodeMaterialBlockConnectionPointTypes } from \"./Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport { NodeMaterialBlockTargets } from \"./Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialBuildStateSharedData } from \"./nodeMaterialBuildStateSharedData\";\r\nimport { Effect } from \"../effect\";\r\nimport { StartsWith } from \"../../Misc/stringTools\";\r\n\r\n/**\r\n * Class used to store node based material build state\r\n */\r\nexport class NodeMaterialBuildState {\r\n    /** Gets or sets a boolean indicating if the current state can emit uniform buffers */\r\n    public supportUniformBuffers = false;\r\n    /**\r\n     * Gets the list of emitted attributes\r\n     */\r\n    public attributes = new Array<string>();\r\n    /**\r\n     * Gets the list of emitted uniforms\r\n     */\r\n    public uniforms = new Array<string>();\r\n    /**\r\n     * Gets the list of emitted constants\r\n     */\r\n    public constants = new Array<string>();\r\n    /**\r\n     * Gets the list of emitted samplers\r\n     */\r\n    public samplers = new Array<string>();\r\n    /**\r\n     * Gets the list of emitted functions\r\n     */\r\n    public functions: { [key: string]: string } = {};\r\n    /**\r\n     * Gets the list of emitted extensions\r\n     */\r\n    public extensions: { [key: string]: string } = {};\r\n\r\n    /**\r\n     * Gets the target of the compilation state\r\n     */\r\n    public target: NodeMaterialBlockTargets;\r\n    /**\r\n     * Gets the list of emitted counters\r\n     */\r\n    public counters: { [key: string]: number } = {};\r\n\r\n    /**\r\n     * Shared data between multiple NodeMaterialBuildState instances\r\n     */\r\n    public sharedData: NodeMaterialBuildStateSharedData;\r\n\r\n    /** @hidden */\r\n    public _vertexState: NodeMaterialBuildState;\r\n\r\n    /** @hidden */\r\n    public _attributeDeclaration = \"\";\r\n    /** @hidden */\r\n    public _uniformDeclaration = \"\";\r\n    /** @hidden */\r\n    public _constantDeclaration = \"\";\r\n    /** @hidden */\r\n    public _samplerDeclaration = \"\";\r\n    /** @hidden */\r\n    public _varyingTransfer = \"\";\r\n    /** @hidden */\r\n    public _injectAtEnd = \"\";\r\n\r\n    private _repeatableContentAnchorIndex = 0;\r\n    /** @hidden */\r\n    public _builtCompilationString = \"\";\r\n\r\n    /**\r\n     * Gets the emitted compilation strings\r\n     */\r\n    public compilationString = \"\";\r\n\r\n    /**\r\n     * Finalize the compilation strings\r\n     * @param state defines the current compilation state\r\n     */\r\n    public finalize(state: NodeMaterialBuildState) {\r\n        const emitComments = state.sharedData.emitComments;\r\n        const isFragmentMode = this.target === NodeMaterialBlockTargets.Fragment;\r\n\r\n        this.compilationString = `\\r\\n${emitComments ? \"//Entry point\\r\\n\" : \"\"}void main(void) {\\r\\n${this.compilationString}`;\r\n\r\n        if (this._constantDeclaration) {\r\n            this.compilationString = `\\r\\n${emitComments ? \"//Constants\\r\\n\" : \"\"}${this._constantDeclaration}\\r\\n${this.compilationString}`;\r\n        }\r\n\r\n        let functionCode = \"\";\r\n        for (const functionName in this.functions) {\r\n            functionCode += this.functions[functionName] + `\\r\\n`;\r\n        }\r\n        this.compilationString = `\\r\\n${functionCode}\\r\\n${this.compilationString}`;\r\n\r\n        if (!isFragmentMode && this._varyingTransfer) {\r\n            this.compilationString = `${this.compilationString}\\r\\n${this._varyingTransfer}`;\r\n        }\r\n\r\n        if (this._injectAtEnd) {\r\n            this.compilationString = `${this.compilationString}\\r\\n${this._injectAtEnd}`;\r\n        }\r\n\r\n        this.compilationString = `${this.compilationString}\\r\\n}`;\r\n\r\n        if (this.sharedData.varyingDeclaration) {\r\n            this.compilationString = `\\r\\n${emitComments ? \"//Varyings\\r\\n\" : \"\"}${this.sharedData.varyingDeclaration}\\r\\n${this.compilationString}`;\r\n        }\r\n\r\n        if (this._samplerDeclaration) {\r\n            this.compilationString = `\\r\\n${emitComments ? \"//Samplers\\r\\n\" : \"\"}${this._samplerDeclaration}\\r\\n${this.compilationString}`;\r\n        }\r\n\r\n        if (this._uniformDeclaration) {\r\n            this.compilationString = `\\r\\n${emitComments ? \"//Uniforms\\r\\n\" : \"\"}${this._uniformDeclaration}\\r\\n${this.compilationString}`;\r\n        }\r\n\r\n        if (this._attributeDeclaration && !isFragmentMode) {\r\n            this.compilationString = `\\r\\n${emitComments ? \"//Attributes\\r\\n\" : \"\"}${this._attributeDeclaration}\\r\\n${this.compilationString}`;\r\n        }\r\n\r\n        this.compilationString = \"precision highp float;\\r\\n\" + this.compilationString;\r\n\r\n        for (const extensionName in this.extensions) {\r\n            const extension = this.extensions[extensionName];\r\n            this.compilationString = `\\r\\n${extension}\\r\\n${this.compilationString}`;\r\n        }\r\n\r\n        this._builtCompilationString = this.compilationString;\r\n    }\r\n\r\n    /** @hidden */\r\n    public get _repeatableContentAnchor(): string {\r\n        return `###___ANCHOR${this._repeatableContentAnchorIndex++}___###`;\r\n    }\r\n\r\n    /**\r\n     * @param prefix\r\n     * @hidden\r\n     */\r\n    public _getFreeVariableName(prefix: string): string {\r\n        prefix = prefix.replace(/[^a-zA-Z_]+/g, \"\");\r\n\r\n        if (this.sharedData.variableNames[prefix] === undefined) {\r\n            this.sharedData.variableNames[prefix] = 0;\r\n\r\n            // Check reserved words\r\n            if (prefix === \"output\" || prefix === \"texture\") {\r\n                return prefix + this.sharedData.variableNames[prefix];\r\n            }\r\n\r\n            return prefix;\r\n        } else {\r\n            this.sharedData.variableNames[prefix]++;\r\n        }\r\n\r\n        return prefix + this.sharedData.variableNames[prefix];\r\n    }\r\n\r\n    /**\r\n     * @param prefix\r\n     * @hidden\r\n     */\r\n    public _getFreeDefineName(prefix: string): string {\r\n        if (this.sharedData.defineNames[prefix] === undefined) {\r\n            this.sharedData.defineNames[prefix] = 0;\r\n        } else {\r\n            this.sharedData.defineNames[prefix]++;\r\n        }\r\n\r\n        return prefix + this.sharedData.defineNames[prefix];\r\n    }\r\n\r\n    /**\r\n     * @param name\r\n     * @hidden\r\n     */\r\n    public _excludeVariableName(name: string) {\r\n        this.sharedData.variableNames[name] = 0;\r\n    }\r\n\r\n    /**\r\n     * @param name\r\n     * @hidden\r\n     */\r\n    public _emit2DSampler(name: string) {\r\n        if (this.samplers.indexOf(name) < 0) {\r\n            this._samplerDeclaration += `uniform sampler2D ${name};\\r\\n`;\r\n            this.samplers.push(name);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param type\r\n     * @hidden\r\n     */\r\n    public _getGLType(type: NodeMaterialBlockConnectionPointTypes): string {\r\n        switch (type) {\r\n            case NodeMaterialBlockConnectionPointTypes.Float:\r\n                return \"float\";\r\n            case NodeMaterialBlockConnectionPointTypes.Int:\r\n                return \"int\";\r\n            case NodeMaterialBlockConnectionPointTypes.Vector2:\r\n                return \"vec2\";\r\n            case NodeMaterialBlockConnectionPointTypes.Color3:\r\n            case NodeMaterialBlockConnectionPointTypes.Vector3:\r\n                return \"vec3\";\r\n            case NodeMaterialBlockConnectionPointTypes.Color4:\r\n            case NodeMaterialBlockConnectionPointTypes.Vector4:\r\n                return \"vec4\";\r\n            case NodeMaterialBlockConnectionPointTypes.Matrix:\r\n                return \"mat4\";\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @param name\r\n     * @param extension\r\n     * @param define\r\n     * @hidden\r\n     */\r\n    public _emitExtension(name: string, extension: string, define: string = \"\") {\r\n        if (this.extensions[name]) {\r\n            return;\r\n        }\r\n\r\n        if (define) {\r\n            extension = `#if ${define}\\r\\n${extension}\\r\\n#endif`;\r\n        }\r\n        this.extensions[name] = extension;\r\n    }\r\n\r\n    /**\r\n     * @param name\r\n     * @param code\r\n     * @param comments\r\n     * @hidden\r\n     */\r\n    public _emitFunction(name: string, code: string, comments: string) {\r\n        if (this.functions[name]) {\r\n            return;\r\n        }\r\n\r\n        if (this.sharedData.emitComments) {\r\n            code = comments + `\\r\\n` + code;\r\n        }\r\n\r\n        this.functions[name] = code;\r\n    }\r\n\r\n    /**\r\n     * @param includeName\r\n     * @param comments\r\n     * @param options\r\n     * @param options.replaceStrings\r\n     * @param options.repeatKey\r\n     * @hidden\r\n     */\r\n    public _emitCodeFromInclude(\r\n        includeName: string,\r\n        comments: string,\r\n        options?: {\r\n            replaceStrings?: { search: RegExp; replace: string }[];\r\n            repeatKey?: string;\r\n        }\r\n    ) {\r\n        if (options && options.repeatKey) {\r\n            return `#include<${includeName}>[0..${options.repeatKey}]\\r\\n`;\r\n        }\r\n\r\n        let code = Effect.IncludesShadersStore[includeName] + \"\\r\\n\";\r\n\r\n        if (this.sharedData.emitComments) {\r\n            code = comments + `\\r\\n` + code;\r\n        }\r\n\r\n        if (!options) {\r\n            return code;\r\n        }\r\n\r\n        if (options.replaceStrings) {\r\n            for (let index = 0; index < options.replaceStrings.length; index++) {\r\n                const replaceString = options.replaceStrings[index];\r\n                code = code.replace(replaceString.search, replaceString.replace);\r\n            }\r\n        }\r\n\r\n        return code;\r\n    }\r\n\r\n    /**\r\n     * @param includeName\r\n     * @param comments\r\n     * @param options\r\n     * @param options.repeatKey\r\n     * @param options.removeAttributes\r\n     * @param options.removeUniforms\r\n     * @param options.removeVaryings\r\n     * @param options.removeIfDef\r\n     * @param options.replaceStrings\r\n     * @param storeKey\r\n     * @hidden\r\n     */\r\n    public _emitFunctionFromInclude(\r\n        includeName: string,\r\n        comments: string,\r\n        options?: {\r\n            repeatKey?: string;\r\n            removeAttributes?: boolean;\r\n            removeUniforms?: boolean;\r\n            removeVaryings?: boolean;\r\n            removeIfDef?: boolean;\r\n            replaceStrings?: { search: RegExp; replace: string }[];\r\n        },\r\n        storeKey: string = \"\"\r\n    ) {\r\n        const key = includeName + storeKey;\r\n        if (this.functions[key]) {\r\n            return;\r\n        }\r\n\r\n        if (!options || (!options.removeAttributes && !options.removeUniforms && !options.removeVaryings && !options.removeIfDef && !options.replaceStrings)) {\r\n            if (options && options.repeatKey) {\r\n                this.functions[key] = `#include<${includeName}>[0..${options.repeatKey}]\\r\\n`;\r\n            } else {\r\n                this.functions[key] = `#include<${includeName}>\\r\\n`;\r\n            }\r\n\r\n            if (this.sharedData.emitComments) {\r\n                this.functions[key] = comments + `\\r\\n` + this.functions[key];\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        this.functions[key] = Effect.IncludesShadersStore[includeName];\r\n\r\n        if (this.sharedData.emitComments) {\r\n            this.functions[key] = comments + `\\r\\n` + this.functions[key];\r\n        }\r\n\r\n        if (options.removeIfDef) {\r\n            this.functions[key] = this.functions[key].replace(/^\\s*?#ifdef.+$/gm, \"\");\r\n            this.functions[key] = this.functions[key].replace(/^\\s*?#endif.*$/gm, \"\");\r\n            this.functions[key] = this.functions[key].replace(/^\\s*?#else.*$/gm, \"\");\r\n            this.functions[key] = this.functions[key].replace(/^\\s*?#elif.*$/gm, \"\");\r\n        }\r\n\r\n        if (options.removeAttributes) {\r\n            this.functions[key] = this.functions[key].replace(/^\\s*?attribute.+$/gm, \"\");\r\n        }\r\n\r\n        if (options.removeUniforms) {\r\n            this.functions[key] = this.functions[key].replace(/^\\s*?uniform.+$/gm, \"\");\r\n        }\r\n\r\n        if (options.removeVaryings) {\r\n            this.functions[key] = this.functions[key].replace(/^\\s*?varying.+$/gm, \"\");\r\n        }\r\n\r\n        if (options.replaceStrings) {\r\n            for (let index = 0; index < options.replaceStrings.length; index++) {\r\n                const replaceString = options.replaceStrings[index];\r\n                this.functions[key] = this.functions[key].replace(replaceString.search, replaceString.replace);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param name\r\n     * @hidden\r\n     */\r\n    public _registerTempVariable(name: string) {\r\n        if (this.sharedData.temps.indexOf(name) !== -1) {\r\n            return false;\r\n        }\r\n\r\n        this.sharedData.temps.push(name);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @param name\r\n     * @param type\r\n     * @param define\r\n     * @param notDefine\r\n     * @hidden\r\n     */\r\n    public _emitVaryingFromString(name: string, type: string, define: string = \"\", notDefine = false) {\r\n        if (this.sharedData.varyings.indexOf(name) !== -1) {\r\n            return false;\r\n        }\r\n\r\n        this.sharedData.varyings.push(name);\r\n\r\n        if (define) {\r\n            if (StartsWith(define, \"defined(\")) {\r\n                this.sharedData.varyingDeclaration += `#if ${define}\\r\\n`;\r\n            } else {\r\n                this.sharedData.varyingDeclaration += `${notDefine ? \"#ifndef\" : \"#ifdef\"} ${define}\\r\\n`;\r\n            }\r\n        }\r\n        this.sharedData.varyingDeclaration += `varying ${type} ${name};\\r\\n`;\r\n        if (define) {\r\n            this.sharedData.varyingDeclaration += `#endif\\r\\n`;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @param name\r\n     * @param type\r\n     * @param define\r\n     * @param notDefine\r\n     * @hidden\r\n     */\r\n    public _emitUniformFromString(name: string, type: string, define: string = \"\", notDefine = false) {\r\n        if (this.uniforms.indexOf(name) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this.uniforms.push(name);\r\n\r\n        if (define) {\r\n            if (StartsWith(define, \"defined(\")) {\r\n                this._uniformDeclaration += `#if ${define}\\r\\n`;\r\n            } else {\r\n                this._uniformDeclaration += `${notDefine ? \"#ifndef\" : \"#ifdef\"} ${define}\\r\\n`;\r\n            }\r\n        }\r\n        this._uniformDeclaration += `uniform ${type} ${name};\\r\\n`;\r\n        if (define) {\r\n            this._uniformDeclaration += `#endif\\r\\n`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param value\r\n     * @hidden\r\n     */\r\n    public _emitFloat(value: number) {\r\n        if (value.toString() === value.toFixed(0)) {\r\n            return `${value}.0`;\r\n        }\r\n\r\n        return value.toString();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}