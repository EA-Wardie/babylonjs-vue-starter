{"ast":null,"code":"import \"core-js/modules/es.function.bind.js\";\nimport { __extends } from \"tslib\";\nimport { Camera } from \"../../Cameras/camera.js\";\nimport { ArcRotateCamera } from \"../../Cameras/arcRotateCamera.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Node } from \"../../node.js\";\nimport { setStereoscopicAnaglyphRigMode } from \"../RigModes/stereoscopicAnaglyphRigMode.js\";\nNode.AddNodeConstructor(\"AnaglyphArcRotateCamera\", function (name, scene, options) {\n  return function () {\n    return new AnaglyphArcRotateCamera(name, 0, 0, 1.0, Vector3.Zero(), options.interaxial_distance, scene);\n  };\n});\n/**\n * Camera used to simulate anaglyphic rendering (based on ArcRotateCamera)\n * @see https://doc.babylonjs.com/features/cameras#anaglyph-cameras\n */\n\nvar AnaglyphArcRotateCamera =\n/** @class */\nfunction (_super) {\n  __extends(AnaglyphArcRotateCamera, _super);\n  /**\n   * Creates a new AnaglyphArcRotateCamera\n   * @param name defines camera name\n   * @param alpha defines alpha angle (in radians)\n   * @param beta defines beta angle (in radians)\n   * @param radius defines radius\n   * @param target defines camera target\n   * @param interaxialDistance defines distance between each color axis\n   * @param scene defines the hosting scene\n   */\n\n\n  function AnaglyphArcRotateCamera(name, alpha, beta, radius, target, interaxialDistance, scene) {\n    var _this = _super.call(this, name, alpha, beta, radius, target, scene) || this;\n\n    _this._setRigMode = setStereoscopicAnaglyphRigMode.bind(null, _this);\n    _this.interaxialDistance = interaxialDistance;\n\n    _this.setCameraRigMode(Camera.RIG_MODE_STEREOSCOPIC_ANAGLYPH, {\n      interaxialDistance: interaxialDistance\n    });\n\n    return _this;\n  }\n  /**\n   * Gets camera class name\n   * @returns AnaglyphArcRotateCamera\n   */\n\n\n  AnaglyphArcRotateCamera.prototype.getClassName = function () {\n    return \"AnaglyphArcRotateCamera\";\n  };\n\n  return AnaglyphArcRotateCamera;\n}(ArcRotateCamera);\n\nexport { AnaglyphArcRotateCamera };","map":{"version":3,"mappings":";;AAAA,SAASA,MAAT,QAAuB,yBAAvB;AACA,SAASC,eAAT,QAAgC,kCAAhC;AAEA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,IAAT,QAAqB,eAArB;AACA,SAASC,8BAAT,QAA+C,4CAA/C;AAEAD,IAAI,CAACE,kBAAL,CAAwB,yBAAxB,EAAmD,UAACC,IAAD,EAAOC,KAAP,EAAcC,OAAd,EAAqB;AACpE,SAAO;AAAM,eAAIC,uBAAJ,CAA4BH,IAA5B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,GAAxC,EAA6CJ,OAAO,CAACQ,IAAR,EAA7C,EAA6DF,OAAO,CAACG,mBAArE,EAA0FJ,KAA1F;AAAgG,GAA7G;AACH,CAFD;AAIA;;;;;AAIA;AAAA;AAAA;AAA6CK;AACzC;;;;;;;;;;;;AAUA,mCAAYN,IAAZ,EAA0BO,KAA1B,EAAyCC,IAAzC,EAAuDC,MAAvD,EAAuEC,MAAvE,EAAwFC,kBAAxF,EAAoHV,KAApH,EAAiI;AAAjI,gBACIW,kBAAMZ,IAAN,EAAYO,KAAZ,EAAmBC,IAAnB,EAAyBC,MAAzB,EAAiCC,MAAjC,EAAyCT,KAAzC,KAA+C,IADnD;;AAcUY,wBAAcf,8BAA8B,CAACgB,IAA/B,CAAoC,IAApC,EAA0CD,KAA1C,CAAd;AAZNA,SAAI,CAACF,kBAAL,GAA0BA,kBAA1B;;AACAE,SAAI,CAACE,gBAAL,CAAsBrB,MAAM,CAACsB,8BAA7B,EAA6D;AAAEL,wBAAkB,EAAEA;AAAtB,KAA7D;;;AACH;AAED;;;;;;AAIOR,mDAAP;AACI,WAAO,yBAAP;AACH,GAFM;;AAKX;AAAC,CA1BD,CAA6CR,eAA7C","names":["Camera","ArcRotateCamera","Vector3","Node","setStereoscopicAnaglyphRigMode","AddNodeConstructor","name","scene","options","AnaglyphArcRotateCamera","Zero","interaxial_distance","__extends","alpha","beta","radius","target","interaxialDistance","_super","_this","bind","setCameraRigMode","RIG_MODE_STEREOSCOPIC_ANAGLYPH"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Cameras/Stereoscopic/anaglyphArcRotateCamera.ts"],"sourcesContent":["import { Camera } from \"../../Cameras/camera\";\r\nimport { ArcRotateCamera } from \"../../Cameras/arcRotateCamera\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Node } from \"../../node\";\r\nimport { setStereoscopicAnaglyphRigMode } from \"../RigModes/stereoscopicAnaglyphRigMode\";\r\n\r\nNode.AddNodeConstructor(\"AnaglyphArcRotateCamera\", (name, scene, options) => {\r\n    return () => new AnaglyphArcRotateCamera(name, 0, 0, 1.0, Vector3.Zero(), options.interaxial_distance, scene);\r\n});\r\n\r\n/**\r\n * Camera used to simulate anaglyphic rendering (based on ArcRotateCamera)\r\n * @see https://doc.babylonjs.com/features/cameras#anaglyph-cameras\r\n */\r\nexport class AnaglyphArcRotateCamera extends ArcRotateCamera {\r\n    /**\r\n     * Creates a new AnaglyphArcRotateCamera\r\n     * @param name defines camera name\r\n     * @param alpha defines alpha angle (in radians)\r\n     * @param beta defines beta angle (in radians)\r\n     * @param radius defines radius\r\n     * @param target defines camera target\r\n     * @param interaxialDistance defines distance between each color axis\r\n     * @param scene defines the hosting scene\r\n     */\r\n    constructor(name: string, alpha: number, beta: number, radius: number, target: Vector3, interaxialDistance: number, scene?: Scene) {\r\n        super(name, alpha, beta, radius, target, scene);\r\n        this.interaxialDistance = interaxialDistance;\r\n        this.setCameraRigMode(Camera.RIG_MODE_STEREOSCOPIC_ANAGLYPH, { interaxialDistance: interaxialDistance });\r\n    }\r\n\r\n    /**\r\n     * Gets camera class name\r\n     * @returns AnaglyphArcRotateCamera\r\n     */\r\n    public getClassName(): string {\r\n        return \"AnaglyphArcRotateCamera\";\r\n    }\r\n\r\n    protected _setRigMode = setStereoscopicAnaglyphRigMode.bind(null, this);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}