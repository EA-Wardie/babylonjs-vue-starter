{"ast":null,"code":"import { Plane } from \"./math.plane.js\";\n/**\n * Represents a camera frustum\n */\n\nvar Frustum =\n/** @class */\nfunction () {\n  function Frustum() {}\n  /**\n   * Gets the planes representing the frustum\n   * @param transform matrix to be applied to the returned planes\n   * @returns a new array of 6 Frustum planes computed by the given transformation matrix.\n   */\n\n\n  Frustum.GetPlanes = function (transform) {\n    var frustumPlanes = [];\n\n    for (var index = 0; index < 6; index++) {\n      frustumPlanes.push(new Plane(0.0, 0.0, 0.0, 0.0));\n    }\n\n    Frustum.GetPlanesToRef(transform, frustumPlanes);\n    return frustumPlanes;\n  };\n  /**\n   * Gets the near frustum plane transformed by the transform matrix\n   * @param transform transformation matrix to be applied to the resulting frustum plane\n   * @param frustumPlane the resulting frustum plane\n   */\n\n\n  Frustum.GetNearPlaneToRef = function (transform, frustumPlane) {\n    var m = transform.m;\n    frustumPlane.normal.x = m[3] + m[2];\n    frustumPlane.normal.y = m[7] + m[6];\n    frustumPlane.normal.z = m[11] + m[10];\n    frustumPlane.d = m[15] + m[14];\n    frustumPlane.normalize();\n  };\n  /**\n   * Gets the far frustum plane transformed by the transform matrix\n   * @param transform transformation matrix to be applied to the resulting frustum plane\n   * @param frustumPlane the resulting frustum plane\n   */\n\n\n  Frustum.GetFarPlaneToRef = function (transform, frustumPlane) {\n    var m = transform.m;\n    frustumPlane.normal.x = m[3] - m[2];\n    frustumPlane.normal.y = m[7] - m[6];\n    frustumPlane.normal.z = m[11] - m[10];\n    frustumPlane.d = m[15] - m[14];\n    frustumPlane.normalize();\n  };\n  /**\n   * Gets the left frustum plane transformed by the transform matrix\n   * @param transform transformation matrix to be applied to the resulting frustum plane\n   * @param frustumPlane the resulting frustum plane\n   */\n\n\n  Frustum.GetLeftPlaneToRef = function (transform, frustumPlane) {\n    var m = transform.m;\n    frustumPlane.normal.x = m[3] + m[0];\n    frustumPlane.normal.y = m[7] + m[4];\n    frustumPlane.normal.z = m[11] + m[8];\n    frustumPlane.d = m[15] + m[12];\n    frustumPlane.normalize();\n  };\n  /**\n   * Gets the right frustum plane transformed by the transform matrix\n   * @param transform transformation matrix to be applied to the resulting frustum plane\n   * @param frustumPlane the resulting frustum plane\n   */\n\n\n  Frustum.GetRightPlaneToRef = function (transform, frustumPlane) {\n    var m = transform.m;\n    frustumPlane.normal.x = m[3] - m[0];\n    frustumPlane.normal.y = m[7] - m[4];\n    frustumPlane.normal.z = m[11] - m[8];\n    frustumPlane.d = m[15] - m[12];\n    frustumPlane.normalize();\n  };\n  /**\n   * Gets the top frustum plane transformed by the transform matrix\n   * @param transform transformation matrix to be applied to the resulting frustum plane\n   * @param frustumPlane the resulting frustum plane\n   */\n\n\n  Frustum.GetTopPlaneToRef = function (transform, frustumPlane) {\n    var m = transform.m;\n    frustumPlane.normal.x = m[3] - m[1];\n    frustumPlane.normal.y = m[7] - m[5];\n    frustumPlane.normal.z = m[11] - m[9];\n    frustumPlane.d = m[15] - m[13];\n    frustumPlane.normalize();\n  };\n  /**\n   * Gets the bottom frustum plane transformed by the transform matrix\n   * @param transform transformation matrix to be applied to the resulting frustum plane\n   * @param frustumPlane the resulting frustum plane\n   */\n\n\n  Frustum.GetBottomPlaneToRef = function (transform, frustumPlane) {\n    var m = transform.m;\n    frustumPlane.normal.x = m[3] + m[1];\n    frustumPlane.normal.y = m[7] + m[5];\n    frustumPlane.normal.z = m[11] + m[9];\n    frustumPlane.d = m[15] + m[13];\n    frustumPlane.normalize();\n  };\n  /**\n   * Sets the given array \"frustumPlanes\" with the 6 Frustum planes computed by the given transformation matrix.\n   * @param transform transformation matrix to be applied to the resulting frustum planes\n   * @param frustumPlanes the resulting frustum planes\n   */\n\n\n  Frustum.GetPlanesToRef = function (transform, frustumPlanes) {\n    // Near\n    Frustum.GetNearPlaneToRef(transform, frustumPlanes[0]); // Far\n\n    Frustum.GetFarPlaneToRef(transform, frustumPlanes[1]); // Left\n\n    Frustum.GetLeftPlaneToRef(transform, frustumPlanes[2]); // Right\n\n    Frustum.GetRightPlaneToRef(transform, frustumPlanes[3]); // Top\n\n    Frustum.GetTopPlaneToRef(transform, frustumPlanes[4]); // Bottom\n\n    Frustum.GetBottomPlaneToRef(transform, frustumPlanes[5]);\n  };\n\n  return Frustum;\n}();\n\nexport { Frustum };","map":{"version":3,"mappings":"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","names":["Plane","Frustum","transform","frustumPlanes","index","push","GetPlanesToRef","frustumPlane","m","normal","x","y","z","d","normalize","GetNearPlaneToRef","GetFarPlaneToRef","GetLeftPlaneToRef","GetRightPlaneToRef","GetTopPlaneToRef","GetBottomPlaneToRef"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Maths/math.frustum.ts"],"sourcesContent":["import type { Matrix } from \"./math.vector\";\r\nimport type { DeepImmutable } from \"../types\";\r\nimport { Plane } from \"./math.plane\";\r\n\r\n/**\r\n * Represents a camera frustum\r\n */\r\nexport class Frustum {\r\n    /**\r\n     * Gets the planes representing the frustum\r\n     * @param transform matrix to be applied to the returned planes\r\n     * @returns a new array of 6 Frustum planes computed by the given transformation matrix.\r\n     */\r\n    public static GetPlanes(transform: DeepImmutable<Matrix>): Plane[] {\r\n        const frustumPlanes = [];\r\n        for (let index = 0; index < 6; index++) {\r\n            frustumPlanes.push(new Plane(0.0, 0.0, 0.0, 0.0));\r\n        }\r\n        Frustum.GetPlanesToRef(transform, frustumPlanes);\r\n        return frustumPlanes;\r\n    }\r\n\r\n    /**\r\n     * Gets the near frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resulting frustum plane\r\n     */\r\n    public static GetNearPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] + m[2];\r\n        frustumPlane.normal.y = m[7] + m[6];\r\n        frustumPlane.normal.z = m[11] + m[10];\r\n        frustumPlane.d = m[15] + m[14];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the far frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resulting frustum plane\r\n     */\r\n    public static GetFarPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] - m[2];\r\n        frustumPlane.normal.y = m[7] - m[6];\r\n        frustumPlane.normal.z = m[11] - m[10];\r\n        frustumPlane.d = m[15] - m[14];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the left frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resulting frustum plane\r\n     */\r\n    public static GetLeftPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] + m[0];\r\n        frustumPlane.normal.y = m[7] + m[4];\r\n        frustumPlane.normal.z = m[11] + m[8];\r\n        frustumPlane.d = m[15] + m[12];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the right frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resulting frustum plane\r\n     */\r\n    public static GetRightPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] - m[0];\r\n        frustumPlane.normal.y = m[7] - m[4];\r\n        frustumPlane.normal.z = m[11] - m[8];\r\n        frustumPlane.d = m[15] - m[12];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the top frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resulting frustum plane\r\n     */\r\n    public static GetTopPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] - m[1];\r\n        frustumPlane.normal.y = m[7] - m[5];\r\n        frustumPlane.normal.z = m[11] - m[9];\r\n        frustumPlane.d = m[15] - m[13];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Gets the bottom frustum plane transformed by the transform matrix\r\n     * @param transform transformation matrix to be applied to the resulting frustum plane\r\n     * @param frustumPlane the resulting frustum plane\r\n     */\r\n    public static GetBottomPlaneToRef(transform: DeepImmutable<Matrix>, frustumPlane: Plane): void {\r\n        const m = transform.m;\r\n        frustumPlane.normal.x = m[3] + m[1];\r\n        frustumPlane.normal.y = m[7] + m[5];\r\n        frustumPlane.normal.z = m[11] + m[9];\r\n        frustumPlane.d = m[15] + m[13];\r\n        frustumPlane.normalize();\r\n    }\r\n\r\n    /**\r\n     * Sets the given array \"frustumPlanes\" with the 6 Frustum planes computed by the given transformation matrix.\r\n     * @param transform transformation matrix to be applied to the resulting frustum planes\r\n     * @param frustumPlanes the resulting frustum planes\r\n     */\r\n    public static GetPlanesToRef(transform: DeepImmutable<Matrix>, frustumPlanes: Plane[]): void {\r\n        // Near\r\n        Frustum.GetNearPlaneToRef(transform, frustumPlanes[0]);\r\n\r\n        // Far\r\n        Frustum.GetFarPlaneToRef(transform, frustumPlanes[1]);\r\n\r\n        // Left\r\n        Frustum.GetLeftPlaneToRef(transform, frustumPlanes[2]);\r\n\r\n        // Right\r\n        Frustum.GetRightPlaneToRef(transform, frustumPlanes[3]);\r\n\r\n        // Top\r\n        Frustum.GetTopPlaneToRef(transform, frustumPlanes[4]);\r\n\r\n        // Bottom\r\n        Frustum.GetBottomPlaneToRef(transform, frustumPlanes[5]);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}