{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { Vector2 } from \"../../../../Maths/math.vector.js\";\n/**\n * Block used to generate a twirl\n */\n\nvar TwirlBlock =\n/** @class */\nfunction (_super) {\n  __extends(TwirlBlock, _super);\n  /**\n   * Creates a new TwirlBlock\n   * @param name defines the block name\n   */\n\n\n  function TwirlBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;\n\n    _this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.Vector2);\n\n    _this.registerInput(\"strength\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    _this.registerInput(\"center\", NodeMaterialBlockConnectionPointTypes.Vector2);\n\n    _this.registerInput(\"offset\", NodeMaterialBlockConnectionPointTypes.Vector2);\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector2);\n\n    _this.registerOutput(\"x\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    _this.registerOutput(\"y\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    return _this;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  TwirlBlock.prototype.getClassName = function () {\n    return \"TwirlBlock\";\n  };\n\n  Object.defineProperty(TwirlBlock.prototype, \"input\", {\n    /**\n     * Gets the input component\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TwirlBlock.prototype, \"strength\", {\n    /**\n     * Gets the strength component\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TwirlBlock.prototype, \"center\", {\n    /**\n     * Gets the center component\n     */\n    get: function get() {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TwirlBlock.prototype, \"offset\", {\n    /**\n     * Gets the offset component\n     */\n    get: function get() {\n      return this._inputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TwirlBlock.prototype, \"output\", {\n    /**\n     * Gets the output component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TwirlBlock.prototype, \"x\", {\n    /**\n     * Gets the x output component\n     */\n    get: function get() {\n      return this._outputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TwirlBlock.prototype, \"y\", {\n    /**\n     * Gets the y output component\n     */\n    get: function get() {\n      return this._outputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  TwirlBlock.prototype.autoConfigure = function () {\n    if (!this.center.isConnected) {\n      var centerInput = new InputBlock(\"center\");\n      centerInput.value = new Vector2(0.5, 0.5);\n      centerInput.output.connectTo(this.center);\n    }\n\n    if (!this.strength.isConnected) {\n      var strengthInput = new InputBlock(\"strength\");\n      strengthInput.value = 1.0;\n      strengthInput.output.connectTo(this.strength);\n    }\n\n    if (!this.offset.isConnected) {\n      var offsetInput = new InputBlock(\"offset\");\n      offsetInput.value = new Vector2(0, 0);\n      offsetInput.output.connectTo(this.offset);\n    }\n  };\n\n  TwirlBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var tempDelta = state._getFreeVariableName(\"delta\");\n\n    var tempAngle = state._getFreeVariableName(\"angle\");\n\n    var tempX = state._getFreeVariableName(\"x\");\n\n    var tempY = state._getFreeVariableName(\"y\");\n\n    var tempResult = state._getFreeVariableName(\"result\");\n\n    state.compilationString += \"\\n            vec2 \".concat(tempDelta, \" = \").concat(this.input.associatedVariableName, \" - \").concat(this.center.associatedVariableName, \";\\n            float \").concat(tempAngle, \" = \").concat(this.strength.associatedVariableName, \" * length(\").concat(tempDelta, \");\\n            float \").concat(tempX, \" = cos(\").concat(tempAngle, \") * \").concat(tempDelta, \".x - sin(\").concat(tempAngle, \") * \").concat(tempDelta, \".y;\\n            float \").concat(tempY, \" = sin(\").concat(tempAngle, \") * \").concat(tempDelta, \".x + cos(\").concat(tempAngle, \") * \").concat(tempDelta, \".y;\\n            vec2 \").concat(tempResult, \" = vec2(\").concat(tempX, \" + \").concat(this.center.associatedVariableName, \".x + \").concat(this.offset.associatedVariableName, \".x, \").concat(tempY, \" + \").concat(this.center.associatedVariableName, \".y + \").concat(this.offset.associatedVariableName, \".y);\\n        \");\n\n    if (this.output.hasEndpoints) {\n      state.compilationString += this._declareOutput(this.output, state) + \" = \".concat(tempResult, \";\\r\\n\");\n    }\n\n    if (this.x.hasEndpoints) {\n      state.compilationString += this._declareOutput(this.x, state) + \" = \".concat(tempResult, \".x;\\r\\n\");\n    }\n\n    if (this.y.hasEndpoints) {\n      state.compilationString += this._declareOutput(this.y, state) + \" = \".concat(tempResult, \".y;\\r\\n\");\n    }\n\n    return this;\n  };\n\n  return TwirlBlock;\n}(NodeMaterialBlock);\n\nexport { TwirlBlock };\nRegisterClass(\"BABYLON.TwirlBlock\", TwirlBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","InputBlock","Vector2","__extends","name","_super","Fragment","_this","registerInput","Float","registerOutput","TwirlBlock","Object","_inputs","_outputs","center","isConnected","centerInput","value","output","connectTo","strength","strengthInput","offset","offsetInput","state","_buildBlock","call","tempDelta","_getFreeVariableName","tempAngle","tempX","tempY","tempResult","compilationString","concat","input","associatedVariableName","hasEndpoints","_declareOutput","x","y"],"sourceRoot":"","sources":["../../../../../../../../lts/core/generated/Materials/Node/Blocks/Fragment/twirlBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { InputBlock } from \"../Input/inputBlock\";\r\nimport { Vector2 } from \"../../../../Maths/math.vector\";\r\n\r\n/**\r\n * Block used to generate a twirl\r\n */\r\nexport class TwirlBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Creates a new TwirlBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.Vector2);\r\n        this.registerInput(\"strength\", NodeMaterialBlockConnectionPointTypes.Float);\r\n        this.registerInput(\"center\", NodeMaterialBlockConnectionPointTypes.Vector2);\r\n        this.registerInput(\"offset\", NodeMaterialBlockConnectionPointTypes.Vector2);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector2);\r\n        this.registerOutput(\"x\", NodeMaterialBlockConnectionPointTypes.Float);\r\n        this.registerOutput(\"y\", NodeMaterialBlockConnectionPointTypes.Float);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"TwirlBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the input component\r\n     */\r\n    public get input(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the strength component\r\n     */\r\n    public get strength(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the center component\r\n     */\r\n    public get center(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the offset component\r\n     */\r\n    public get offset(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the x output component\r\n     */\r\n    public get x(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the y output component\r\n     */\r\n    public get y(): NodeMaterialConnectionPoint {\r\n        return this._outputs[2];\r\n    }\r\n\r\n    public autoConfigure() {\r\n        if (!this.center.isConnected) {\r\n            const centerInput = new InputBlock(\"center\");\r\n            centerInput.value = new Vector2(0.5, 0.5);\r\n\r\n            centerInput.output.connectTo(this.center);\r\n        }\r\n\r\n        if (!this.strength.isConnected) {\r\n            const strengthInput = new InputBlock(\"strength\");\r\n            strengthInput.value = 1.0;\r\n\r\n            strengthInput.output.connectTo(this.strength);\r\n        }\r\n\r\n        if (!this.offset.isConnected) {\r\n            const offsetInput = new InputBlock(\"offset\");\r\n            offsetInput.value = new Vector2(0, 0);\r\n\r\n            offsetInput.output.connectTo(this.offset);\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const tempDelta = state._getFreeVariableName(\"delta\");\r\n        const tempAngle = state._getFreeVariableName(\"angle\");\r\n        const tempX = state._getFreeVariableName(\"x\");\r\n        const tempY = state._getFreeVariableName(\"y\");\r\n        const tempResult = state._getFreeVariableName(\"result\");\r\n\r\n        state.compilationString += `\r\n            vec2 ${tempDelta} = ${this.input.associatedVariableName} - ${this.center.associatedVariableName};\r\n            float ${tempAngle} = ${this.strength.associatedVariableName} * length(${tempDelta});\r\n            float ${tempX} = cos(${tempAngle}) * ${tempDelta}.x - sin(${tempAngle}) * ${tempDelta}.y;\r\n            float ${tempY} = sin(${tempAngle}) * ${tempDelta}.x + cos(${tempAngle}) * ${tempDelta}.y;\r\n            vec2 ${tempResult} = vec2(${tempX} + ${this.center.associatedVariableName}.x + ${this.offset.associatedVariableName}.x, ${tempY} + ${this.center.associatedVariableName}.y + ${this.offset.associatedVariableName}.y);\r\n        `;\r\n\r\n        if (this.output.hasEndpoints) {\r\n            state.compilationString += this._declareOutput(this.output, state) + ` = ${tempResult};\\r\\n`;\r\n        }\r\n\r\n        if (this.x.hasEndpoints) {\r\n            state.compilationString += this._declareOutput(this.x, state) + ` = ${tempResult}.x;\\r\\n`;\r\n        }\r\n\r\n        if (this.y.hasEndpoints) {\r\n            state.compilationString += this._declareOutput(this.y, state) + ` = ${tempResult}.y;\\r\\n`;\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.TwirlBlock\", TwirlBlock);\r\n"]},"metadata":{},"sourceType":"module"}