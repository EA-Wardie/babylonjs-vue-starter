{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { __decorate, __extends } from \"tslib\";\nimport { serialize, SerializationHelper, serializeAsColor3, expandToProperty, serializeAsTexture } from \"../../Misc/decorators.js\";\nimport { PBRBaseSimpleMaterial } from \"./pbrBaseSimpleMaterial.js\";\nimport { RegisterClass } from \"../../Misc/typeStore.js\";\n/**\n * The PBR material of BJS following the specular glossiness convention.\n *\n * This fits to the PBR convention in the GLTF definition:\n * https://github.com/KhronosGroup/glTF/tree/2.0/extensions/Khronos/KHR_materials_pbrSpecularGlossiness\n */\n\nvar PBRSpecularGlossinessMaterial =\n/** @class */\nfunction (_super) {\n  __extends(PBRSpecularGlossinessMaterial, _super);\n  /**\n   * Instantiates a new PBRSpecularGlossinessMaterial instance.\n   *\n   * @param name The material name\n   * @param scene The scene the material will be use in.\n   */\n\n\n  function PBRSpecularGlossinessMaterial(name, scene) {\n    var _this = _super.call(this, name, scene) || this;\n\n    _this._useMicroSurfaceFromReflectivityMapAlpha = true;\n    return _this;\n  }\n\n  Object.defineProperty(PBRSpecularGlossinessMaterial.prototype, \"useMicroSurfaceFromReflectivityMapAlpha\", {\n    /**\n     * Specifies if the reflectivity texture contains the glossiness information in its alpha channel.\n     */\n    get: function get() {\n      return this._useMicroSurfaceFromReflectivityMapAlpha;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Return the current class name of the material.\n   */\n\n  PBRSpecularGlossinessMaterial.prototype.getClassName = function () {\n    return \"PBRSpecularGlossinessMaterial\";\n  };\n  /**\n   * Makes a duplicate of the current material.\n   * @param name - name to use for the new material.\n   */\n\n\n  PBRSpecularGlossinessMaterial.prototype.clone = function (name) {\n    var _this = this;\n\n    var clone = SerializationHelper.Clone(function () {\n      return new PBRSpecularGlossinessMaterial(name, _this.getScene());\n    }, this);\n    clone.id = name;\n    clone.name = name;\n    this.clearCoat.copyTo(clone.clearCoat);\n    this.anisotropy.copyTo(clone.anisotropy);\n    this.brdf.copyTo(clone.brdf);\n    this.sheen.copyTo(clone.sheen);\n    this.subSurface.copyTo(clone.subSurface);\n    return clone;\n  };\n  /**\n   * Serialize the material to a parsable JSON object.\n   */\n\n\n  PBRSpecularGlossinessMaterial.prototype.serialize = function () {\n    var serializationObject = SerializationHelper.Serialize(this);\n    serializationObject.customType = \"BABYLON.PBRSpecularGlossinessMaterial\";\n    serializationObject.clearCoat = this.clearCoat.serialize();\n    serializationObject.anisotropy = this.anisotropy.serialize();\n    serializationObject.brdf = this.brdf.serialize();\n    serializationObject.sheen = this.sheen.serialize();\n    serializationObject.subSurface = this.subSurface.serialize();\n    return serializationObject;\n  };\n  /**\n   * Parses a JSON object corresponding to the serialize function.\n   * @param source\n   * @param scene\n   * @param rootUrl\n   */\n\n\n  PBRSpecularGlossinessMaterial.Parse = function (source, scene, rootUrl) {\n    var material = SerializationHelper.Parse(function () {\n      return new PBRSpecularGlossinessMaterial(source.name, scene);\n    }, source, scene, rootUrl);\n\n    if (source.clearCoat) {\n      material.clearCoat.parse(source.clearCoat, scene, rootUrl);\n    }\n\n    if (source.anisotropy) {\n      material.anisotropy.parse(source.anisotropy, scene, rootUrl);\n    }\n\n    if (source.brdf) {\n      material.brdf.parse(source.brdf, scene, rootUrl);\n    }\n\n    if (source.sheen) {\n      material.sheen.parse(source.sheen, scene, rootUrl);\n    }\n\n    if (source.subSurface) {\n      material.subSurface.parse(source.subSurface, scene, rootUrl);\n    }\n\n    return material;\n  };\n\n  __decorate([serializeAsColor3(\"diffuse\"), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_albedoColor\")], PBRSpecularGlossinessMaterial.prototype, \"diffuseColor\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_albedoTexture\")], PBRSpecularGlossinessMaterial.prototype, \"diffuseTexture\", void 0);\n\n  __decorate([serializeAsColor3(\"specular\"), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_reflectivityColor\")], PBRSpecularGlossinessMaterial.prototype, \"specularColor\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_microSurface\")], PBRSpecularGlossinessMaterial.prototype, \"glossiness\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_reflectivityTexture\")], PBRSpecularGlossinessMaterial.prototype, \"specularGlossinessTexture\", void 0);\n\n  return PBRSpecularGlossinessMaterial;\n}(PBRBaseSimpleMaterial);\n\nexport { PBRSpecularGlossinessMaterial };\nRegisterClass(\"BABYLON.PBRSpecularGlossinessMaterial\", PBRSpecularGlossinessMaterial);","map":{"version":3,"mappings":"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","names":["serialize","SerializationHelper","serializeAsColor3","expandToProperty","serializeAsTexture","PBRBaseSimpleMaterial","RegisterClass","__extends","name","scene","_super","_this","_useMicroSurfaceFromReflectivityMapAlpha","Object","PBRSpecularGlossinessMaterial","clone","Clone","getScene","id","clearCoat","copyTo","anisotropy","brdf","sheen","subSurface","serializationObject","Serialize","customType","source","rootUrl","material","Parse","parse","__decorate"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/PBR/pbrSpecularGlossinessMaterial.ts"],"sourcesContent":["import { serialize, SerializationHelper, serializeAsColor3, expandToProperty, serializeAsTexture } from \"../../Misc/decorators\";\r\nimport type { Scene } from \"../../scene\";\r\nimport type { Color3 } from \"../../Maths/math.color\";\r\nimport type { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport { PBRBaseSimpleMaterial } from \"./pbrBaseSimpleMaterial\";\r\nimport { RegisterClass } from \"../../Misc/typeStore\";\r\n\r\n/**\r\n * The PBR material of BJS following the specular glossiness convention.\r\n *\r\n * This fits to the PBR convention in the GLTF definition:\r\n * https://github.com/KhronosGroup/glTF/tree/2.0/extensions/Khronos/KHR_materials_pbrSpecularGlossiness\r\n */\r\nexport class PBRSpecularGlossinessMaterial extends PBRBaseSimpleMaterial {\r\n    /**\r\n     * Specifies the diffuse color of the material.\r\n     */\r\n    @serializeAsColor3(\"diffuse\")\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_albedoColor\")\r\n    public diffuseColor: Color3;\r\n\r\n    /**\r\n     * Specifies the diffuse texture of the material. This can also contains the opacity value in its alpha\r\n     * channel.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_albedoTexture\")\r\n    public diffuseTexture: BaseTexture;\r\n\r\n    /**\r\n     * Specifies the specular color of the material. This indicates how reflective is the material (none to mirror).\r\n     */\r\n    @serializeAsColor3(\"specular\")\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_reflectivityColor\")\r\n    public specularColor: Color3;\r\n\r\n    /**\r\n     * Specifies the glossiness of the material. This indicates \"how sharp is the reflection\".\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_microSurface\")\r\n    public glossiness: number;\r\n\r\n    /**\r\n     * Specifies both the specular color RGB and the glossiness A of the material per pixels.\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\", \"_reflectivityTexture\")\r\n    public specularGlossinessTexture: BaseTexture;\r\n\r\n    /**\r\n     * Specifies if the reflectivity texture contains the glossiness information in its alpha channel.\r\n     */\r\n    public get useMicroSurfaceFromReflectivityMapAlpha() {\r\n        return this._useMicroSurfaceFromReflectivityMapAlpha;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new PBRSpecularGlossinessMaterial instance.\r\n     *\r\n     * @param name The material name\r\n     * @param scene The scene the material will be use in.\r\n     */\r\n    constructor(name: string, scene?: Scene) {\r\n        super(name, scene);\r\n        this._useMicroSurfaceFromReflectivityMapAlpha = true;\r\n    }\r\n\r\n    /**\r\n     * Return the current class name of the material.\r\n     */\r\n    public getClassName(): string {\r\n        return \"PBRSpecularGlossinessMaterial\";\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the current material.\r\n     * @param name - name to use for the new material.\r\n     */\r\n    public clone(name: string): PBRSpecularGlossinessMaterial {\r\n        const clone = SerializationHelper.Clone(() => new PBRSpecularGlossinessMaterial(name, this.getScene()), this);\r\n\r\n        clone.id = name;\r\n        clone.name = name;\r\n\r\n        this.clearCoat.copyTo(clone.clearCoat);\r\n        this.anisotropy.copyTo(clone.anisotropy);\r\n        this.brdf.copyTo(clone.brdf);\r\n        this.sheen.copyTo(clone.sheen);\r\n        this.subSurface.copyTo(clone.subSurface);\r\n\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Serialize the material to a parsable JSON object.\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject = SerializationHelper.Serialize(this);\r\n        serializationObject.customType = \"BABYLON.PBRSpecularGlossinessMaterial\";\r\n\r\n        serializationObject.clearCoat = this.clearCoat.serialize();\r\n        serializationObject.anisotropy = this.anisotropy.serialize();\r\n        serializationObject.brdf = this.brdf.serialize();\r\n        serializationObject.sheen = this.sheen.serialize();\r\n        serializationObject.subSurface = this.subSurface.serialize();\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parses a JSON object corresponding to the serialize function.\r\n     * @param source\r\n     * @param scene\r\n     * @param rootUrl\r\n     */\r\n    public static Parse(source: any, scene: Scene, rootUrl: string): PBRSpecularGlossinessMaterial {\r\n        const material = SerializationHelper.Parse(() => new PBRSpecularGlossinessMaterial(source.name, scene), source, scene, rootUrl);\r\n        if (source.clearCoat) {\r\n            material.clearCoat.parse(source.clearCoat, scene, rootUrl);\r\n        }\r\n        if (source.anisotropy) {\r\n            material.anisotropy.parse(source.anisotropy, scene, rootUrl);\r\n        }\r\n        if (source.brdf) {\r\n            material.brdf.parse(source.brdf, scene, rootUrl);\r\n        }\r\n        if (source.sheen) {\r\n            material.sheen.parse(source.sheen, scene, rootUrl);\r\n        }\r\n        if (source.subSurface) {\r\n            material.subSurface.parse(source.subSurface, scene, rootUrl);\r\n        }\r\n        return material;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.PBRSpecularGlossinessMaterial\", PBRSpecularGlossinessMaterial);\r\n"]},"metadata":{},"sourceType":"module"}