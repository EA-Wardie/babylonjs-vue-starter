{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Vector2 } from \"../Maths/math.vector.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { Material } from \"../Materials/material.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { SceneComponentConstants } from \"../sceneComponent.js\";\nimport { LayerSceneComponent } from \"./layerSceneComponent.js\";\nimport { DrawWrapper } from \"../Materials/drawWrapper.js\";\nimport \"../Shaders/layer.fragment.js\";\nimport \"../Shaders/layer.vertex.js\";\n/**\n * This represents a full screen 2d layer.\n * This can be useful to display a picture in the  background of your scene for instance.\n * @see https://www.babylonjs-playground.com/#08A2BS#1\n */\n\nvar Layer =\n/** @class */\nfunction () {\n  /**\n   * Instantiates a new layer.\n   * This represents a full screen 2d layer.\n   * This can be useful to display a picture in the  background of your scene for instance.\n   * @see https://www.babylonjs-playground.com/#08A2BS#1\n   * @param name Define the name of the layer in the scene\n   * @param imgUrl Define the url of the texture to display in the layer\n   * @param scene Define the scene the layer belongs to\n   * @param isBackground Defines whether the layer is displayed in front or behind the scene\n   * @param color Defines a color for the layer\n   */\n  function Layer(\n  /**\n   * Define the name of the layer.\n   */\n  name, imgUrl, scene, isBackground, color) {\n    this.name = name;\n    /**\n     * Define the scale of the layer in order to zoom in out of the texture.\n     */\n\n    this.scale = new Vector2(1, 1);\n    /**\n     * Define an offset for the layer in order to shift the texture.\n     */\n\n    this.offset = new Vector2(0, 0);\n    /**\n     * Define the alpha blending mode used in the layer in case the texture or color has an alpha.\n     */\n\n    this.alphaBlendingMode = 2;\n    /**\n     * Define a mask to restrict the layer to only some of the scene cameras.\n     */\n\n    this.layerMask = 0x0fffffff;\n    /**\n     * Define the list of render target the layer is visible into.\n     */\n\n    this.renderTargetTextures = [];\n    /**\n     * Define if the layer is only used in renderTarget or if it also\n     * renders in the main frame buffer of the canvas.\n     */\n\n    this.renderOnlyInRenderTargetTextures = false;\n    /**\n     * Define if the layer is enabled (ie. should be displayed). Default: true\n     */\n\n    this.isEnabled = true;\n    this._vertexBuffers = {};\n    /**\n     * An event triggered when the layer is disposed.\n     */\n\n    this.onDisposeObservable = new Observable();\n    /**\n     * An event triggered before rendering the scene\n     */\n\n    this.onBeforeRenderObservable = new Observable();\n    /**\n     * An event triggered after rendering the scene\n     */\n\n    this.onAfterRenderObservable = new Observable();\n    this.texture = imgUrl ? new Texture(imgUrl, scene, true) : null;\n    this.isBackground = isBackground === undefined ? true : isBackground;\n    this.color = color === undefined ? new Color4(1, 1, 1, 1) : color;\n    this._scene = scene || EngineStore.LastCreatedScene;\n\n    var layerComponent = this._scene._getComponent(SceneComponentConstants.NAME_LAYER);\n\n    if (!layerComponent) {\n      layerComponent = new LayerSceneComponent(this._scene);\n\n      this._scene._addComponent(layerComponent);\n    }\n\n    this._scene.layers.push(this);\n\n    var engine = this._scene.getEngine();\n\n    this._drawWrapper = new DrawWrapper(engine); // VBO\n\n    var vertices = [];\n    vertices.push(1, 1);\n    vertices.push(-1, 1);\n    vertices.push(-1, -1);\n    vertices.push(1, -1);\n    var vertexBuffer = new VertexBuffer(engine, vertices, VertexBuffer.PositionKind, false, false, 2);\n    this._vertexBuffers[VertexBuffer.PositionKind] = vertexBuffer;\n\n    this._createIndexBuffer();\n  }\n\n  Object.defineProperty(Layer.prototype, \"onDispose\", {\n    /**\n     * Back compatibility with callback before the onDisposeObservable existed.\n     * The set callback will be triggered when the layer has been disposed.\n     */\n    set: function set(callback) {\n      if (this._onDisposeObserver) {\n        this.onDisposeObservable.remove(this._onDisposeObserver);\n      }\n\n      this._onDisposeObserver = this.onDisposeObservable.add(callback);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Layer.prototype, \"onBeforeRender\", {\n    /**\n     * Back compatibility with callback before the onBeforeRenderObservable existed.\n     * The set callback will be triggered just before rendering the layer.\n     */\n    set: function set(callback) {\n      if (this._onBeforeRenderObserver) {\n        this.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\n      }\n\n      this._onBeforeRenderObserver = this.onBeforeRenderObservable.add(callback);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Layer.prototype, \"onAfterRender\", {\n    /**\n     * Back compatibility with callback before the onAfterRenderObservable existed.\n     * The set callback will be triggered just after rendering the layer.\n     */\n    set: function set(callback) {\n      if (this._onAfterRenderObserver) {\n        this.onAfterRenderObservable.remove(this._onAfterRenderObserver);\n      }\n\n      this._onAfterRenderObserver = this.onAfterRenderObservable.add(callback);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Layer.prototype._createIndexBuffer = function () {\n    var engine = this._scene.getEngine(); // Indices\n\n\n    var indices = [];\n    indices.push(0);\n    indices.push(1);\n    indices.push(2);\n    indices.push(0);\n    indices.push(2);\n    indices.push(3);\n    this._indexBuffer = engine.createIndexBuffer(indices);\n  };\n  /** @hidden */\n\n\n  Layer.prototype._rebuild = function () {\n    var vb = this._vertexBuffers[VertexBuffer.PositionKind];\n\n    if (vb) {\n      vb._rebuild();\n    }\n\n    this._createIndexBuffer();\n  };\n  /**\n   * Renders the layer in the scene.\n   */\n\n\n  Layer.prototype.render = function () {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    var engine = this._scene.getEngine();\n\n    var defines = \"\";\n\n    if (this.alphaTest) {\n      defines = \"#define ALPHATEST\";\n    }\n\n    if (this.texture && !this.texture.gammaSpace) {\n      defines += \"\\r\\n#define LINEAR\";\n    }\n\n    if (this._previousDefines !== defines) {\n      this._previousDefines = defines;\n      this._drawWrapper.effect = engine.createEffect(\"layer\", [VertexBuffer.PositionKind], [\"textureMatrix\", \"color\", \"scale\", \"offset\"], [\"textureSampler\"], defines);\n    }\n\n    var currentEffect = this._drawWrapper.effect; // Check\n\n    if (!currentEffect || !currentEffect.isReady() || !this.texture || !this.texture.isReady()) {\n      return;\n    }\n\n    this.onBeforeRenderObservable.notifyObservers(this); // Render\n\n    engine.enableEffect(this._drawWrapper);\n    engine.setState(false); // Texture\n\n    currentEffect.setTexture(\"textureSampler\", this.texture);\n    currentEffect.setMatrix(\"textureMatrix\", this.texture.getTextureMatrix()); // Color\n\n    currentEffect.setFloat4(\"color\", this.color.r, this.color.g, this.color.b, this.color.a); // Scale / offset\n\n    currentEffect.setVector2(\"offset\", this.offset);\n    currentEffect.setVector2(\"scale\", this.scale); // VBOs\n\n    engine.bindBuffers(this._vertexBuffers, this._indexBuffer, currentEffect); // Draw order\n\n    if (!this.alphaTest) {\n      engine.setAlphaMode(this.alphaBlendingMode);\n      engine.drawElementsType(Material.TriangleFillMode, 0, 6);\n      engine.setAlphaMode(0);\n    } else {\n      engine.drawElementsType(Material.TriangleFillMode, 0, 6);\n    }\n\n    this.onAfterRenderObservable.notifyObservers(this);\n  };\n  /**\n   * Disposes and releases the associated resources.\n   */\n\n\n  Layer.prototype.dispose = function () {\n    var vertexBuffer = this._vertexBuffers[VertexBuffer.PositionKind];\n\n    if (vertexBuffer) {\n      vertexBuffer.dispose();\n      this._vertexBuffers[VertexBuffer.PositionKind] = null;\n    }\n\n    if (this._indexBuffer) {\n      this._scene.getEngine()._releaseBuffer(this._indexBuffer);\n\n      this._indexBuffer = null;\n    }\n\n    if (this.texture) {\n      this.texture.dispose();\n      this.texture = null;\n    } // Clean RTT list\n\n\n    this.renderTargetTextures = []; // Remove from scene\n\n    var index = this._scene.layers.indexOf(this);\n\n    this._scene.layers.splice(index, 1); // Callback\n\n\n    this.onDisposeObservable.notifyObservers(this);\n    this.onDisposeObservable.clear();\n    this.onAfterRenderObservable.clear();\n    this.onBeforeRenderObservable.clear();\n  };\n\n  return Layer;\n}();\n\nexport { Layer };","map":{"version":3,"mappings":"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","names":["Observable","Vector2","Color4","EngineStore","VertexBuffer","Material","Texture","SceneComponentConstants","LayerSceneComponent","DrawWrapper","name","imgUrl","scene","isBackground","color","texture","undefined","_scene","LastCreatedScene","layerComponent","_getComponent","NAME_LAYER","_addComponent","layers","push","engine","getEngine","_drawWrapper","vertices","vertexBuffer","PositionKind","_vertexBuffers","_createIndexBuffer","Object","Layer","callback","_onDisposeObserver","onDisposeObservable","remove","add","_onBeforeRenderObserver","onBeforeRenderObservable","_onAfterRenderObserver","onAfterRenderObservable","indices","_indexBuffer","createIndexBuffer","vb","_rebuild","isEnabled","defines","alphaTest","gammaSpace","_previousDefines","effect","createEffect","currentEffect","isReady","notifyObservers","enableEffect","setState","setTexture","setMatrix","getTextureMatrix","setFloat4","r","g","b","a","setVector2","offset","scale","bindBuffers","setAlphaMode","alphaBlendingMode","drawElementsType","TriangleFillMode","dispose","_releaseBuffer","renderTargetTextures","index","indexOf","splice","clear"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Layers/layer.ts"],"sourcesContent":["import type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Vector2 } from \"../Maths/math.vector\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { Material } from \"../Materials/material\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\nimport { LayerSceneComponent } from \"./layerSceneComponent\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport { DrawWrapper } from \"../Materials/drawWrapper\";\r\n\r\nimport \"../Shaders/layer.fragment\";\r\nimport \"../Shaders/layer.vertex\";\r\n\r\n/**\r\n * This represents a full screen 2d layer.\r\n * This can be useful to display a picture in the  background of your scene for instance.\r\n * @see https://www.babylonjs-playground.com/#08A2BS#1\r\n */\r\nexport class Layer {\r\n    /**\r\n     * Define the texture the layer should display.\r\n     */\r\n    public texture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Is the layer in background or foreground.\r\n     */\r\n    public isBackground: boolean;\r\n\r\n    /**\r\n     * Define the color of the layer (instead of texture).\r\n     */\r\n    public color: Color4;\r\n\r\n    /**\r\n     * Define the scale of the layer in order to zoom in out of the texture.\r\n     */\r\n    public scale = new Vector2(1, 1);\r\n\r\n    /**\r\n     * Define an offset for the layer in order to shift the texture.\r\n     */\r\n    public offset = new Vector2(0, 0);\r\n\r\n    /**\r\n     * Define the alpha blending mode used in the layer in case the texture or color has an alpha.\r\n     */\r\n    public alphaBlendingMode = Constants.ALPHA_COMBINE;\r\n\r\n    /**\r\n     * Define if the layer should alpha test or alpha blend with the rest of the scene.\r\n     * Alpha test will not mix with the background color in case of transparency.\r\n     * It will either use the texture color or the background depending on the alpha value of the current pixel.\r\n     */\r\n    public alphaTest: boolean;\r\n\r\n    /**\r\n     * Define a mask to restrict the layer to only some of the scene cameras.\r\n     */\r\n    public layerMask: number = 0x0fffffff;\r\n\r\n    /**\r\n     * Define the list of render target the layer is visible into.\r\n     */\r\n    public renderTargetTextures: RenderTargetTexture[] = [];\r\n\r\n    /**\r\n     * Define if the layer is only used in renderTarget or if it also\r\n     * renders in the main frame buffer of the canvas.\r\n     */\r\n    public renderOnlyInRenderTargetTextures = false;\r\n\r\n    /**\r\n     * Define if the layer is enabled (ie. should be displayed). Default: true\r\n     */\r\n    public isEnabled = true;\r\n\r\n    private _scene: Scene;\r\n    private _vertexBuffers: { [key: string]: Nullable<VertexBuffer> } = {};\r\n    private _indexBuffer: Nullable<DataBuffer>;\r\n    private _drawWrapper: DrawWrapper;\r\n    private _previousDefines: string;\r\n\r\n    /**\r\n     * An event triggered when the layer is disposed.\r\n     */\r\n    public onDisposeObservable = new Observable<Layer>();\r\n\r\n    private _onDisposeObserver: Nullable<Observer<Layer>>;\r\n    /**\r\n     * Back compatibility with callback before the onDisposeObservable existed.\r\n     * The set callback will be triggered when the layer has been disposed.\r\n     */\r\n    public set onDispose(callback: () => void) {\r\n        if (this._onDisposeObserver) {\r\n            this.onDisposeObservable.remove(this._onDisposeObserver);\r\n        }\r\n        this._onDisposeObserver = this.onDisposeObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered before rendering the scene\r\n     */\r\n    public onBeforeRenderObservable = new Observable<Layer>();\r\n\r\n    private _onBeforeRenderObserver: Nullable<Observer<Layer>>;\r\n    /**\r\n     * Back compatibility with callback before the onBeforeRenderObservable existed.\r\n     * The set callback will be triggered just before rendering the layer.\r\n     */\r\n    public set onBeforeRender(callback: () => void) {\r\n        if (this._onBeforeRenderObserver) {\r\n            this.onBeforeRenderObservable.remove(this._onBeforeRenderObserver);\r\n        }\r\n        this._onBeforeRenderObserver = this.onBeforeRenderObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * An event triggered after rendering the scene\r\n     */\r\n    public onAfterRenderObservable = new Observable<Layer>();\r\n\r\n    private _onAfterRenderObserver: Nullable<Observer<Layer>>;\r\n    /**\r\n     * Back compatibility with callback before the onAfterRenderObservable existed.\r\n     * The set callback will be triggered just after rendering the layer.\r\n     */\r\n    public set onAfterRender(callback: () => void) {\r\n        if (this._onAfterRenderObserver) {\r\n            this.onAfterRenderObservable.remove(this._onAfterRenderObserver);\r\n        }\r\n        this._onAfterRenderObserver = this.onAfterRenderObservable.add(callback);\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new layer.\r\n     * This represents a full screen 2d layer.\r\n     * This can be useful to display a picture in the  background of your scene for instance.\r\n     * @see https://www.babylonjs-playground.com/#08A2BS#1\r\n     * @param name Define the name of the layer in the scene\r\n     * @param imgUrl Define the url of the texture to display in the layer\r\n     * @param scene Define the scene the layer belongs to\r\n     * @param isBackground Defines whether the layer is displayed in front or behind the scene\r\n     * @param color Defines a color for the layer\r\n     */\r\n    constructor(\r\n        /**\r\n         * Define the name of the layer.\r\n         */\r\n        public name: string,\r\n        imgUrl: Nullable<string>,\r\n        scene: Nullable<Scene>,\r\n        isBackground?: boolean,\r\n        color?: Color4\r\n    ) {\r\n        this.texture = imgUrl ? new Texture(imgUrl, scene, true) : null;\r\n        this.isBackground = isBackground === undefined ? true : isBackground;\r\n        this.color = color === undefined ? new Color4(1, 1, 1, 1) : color;\r\n\r\n        this._scene = <Scene>(scene || EngineStore.LastCreatedScene);\r\n        let layerComponent = this._scene._getComponent(SceneComponentConstants.NAME_LAYER) as LayerSceneComponent;\r\n        if (!layerComponent) {\r\n            layerComponent = new LayerSceneComponent(this._scene);\r\n            this._scene._addComponent(layerComponent);\r\n        }\r\n        this._scene.layers.push(this);\r\n\r\n        const engine = this._scene.getEngine();\r\n\r\n        this._drawWrapper = new DrawWrapper(engine);\r\n\r\n        // VBO\r\n        const vertices = [];\r\n        vertices.push(1, 1);\r\n        vertices.push(-1, 1);\r\n        vertices.push(-1, -1);\r\n        vertices.push(1, -1);\r\n\r\n        const vertexBuffer = new VertexBuffer(engine, vertices, VertexBuffer.PositionKind, false, false, 2);\r\n        this._vertexBuffers[VertexBuffer.PositionKind] = vertexBuffer;\r\n\r\n        this._createIndexBuffer();\r\n    }\r\n\r\n    private _createIndexBuffer(): void {\r\n        const engine = this._scene.getEngine();\r\n\r\n        // Indices\r\n        const indices = [];\r\n        indices.push(0);\r\n        indices.push(1);\r\n        indices.push(2);\r\n\r\n        indices.push(0);\r\n        indices.push(2);\r\n        indices.push(3);\r\n\r\n        this._indexBuffer = engine.createIndexBuffer(indices);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _rebuild(): void {\r\n        const vb = this._vertexBuffers[VertexBuffer.PositionKind];\r\n\r\n        if (vb) {\r\n            vb._rebuild();\r\n        }\r\n\r\n        this._createIndexBuffer();\r\n    }\r\n\r\n    /**\r\n     * Renders the layer in the scene.\r\n     */\r\n    public render(): void {\r\n        if (!this.isEnabled) {\r\n            return;\r\n        }\r\n\r\n        const engine = this._scene.getEngine();\r\n\r\n        let defines = \"\";\r\n\r\n        if (this.alphaTest) {\r\n            defines = \"#define ALPHATEST\";\r\n        }\r\n\r\n        if (this.texture && !this.texture.gammaSpace) {\r\n            defines += \"\\r\\n#define LINEAR\";\r\n        }\r\n\r\n        if (this._previousDefines !== defines) {\r\n            this._previousDefines = defines;\r\n            this._drawWrapper.effect = engine.createEffect(\"layer\", [VertexBuffer.PositionKind], [\"textureMatrix\", \"color\", \"scale\", \"offset\"], [\"textureSampler\"], defines);\r\n        }\r\n        const currentEffect = this._drawWrapper.effect;\r\n\r\n        // Check\r\n        if (!currentEffect || !currentEffect.isReady() || !this.texture || !this.texture.isReady()) {\r\n            return;\r\n        }\r\n\r\n        this.onBeforeRenderObservable.notifyObservers(this);\r\n\r\n        // Render\r\n        engine.enableEffect(this._drawWrapper);\r\n        engine.setState(false);\r\n\r\n        // Texture\r\n        currentEffect.setTexture(\"textureSampler\", this.texture);\r\n        currentEffect.setMatrix(\"textureMatrix\", this.texture.getTextureMatrix());\r\n\r\n        // Color\r\n        currentEffect.setFloat4(\"color\", this.color.r, this.color.g, this.color.b, this.color.a);\r\n\r\n        // Scale / offset\r\n        currentEffect.setVector2(\"offset\", this.offset);\r\n        currentEffect.setVector2(\"scale\", this.scale);\r\n\r\n        // VBOs\r\n        engine.bindBuffers(this._vertexBuffers, this._indexBuffer, currentEffect);\r\n\r\n        // Draw order\r\n        if (!this.alphaTest) {\r\n            engine.setAlphaMode(this.alphaBlendingMode);\r\n            engine.drawElementsType(Material.TriangleFillMode, 0, 6);\r\n            engine.setAlphaMode(Constants.ALPHA_DISABLE);\r\n        } else {\r\n            engine.drawElementsType(Material.TriangleFillMode, 0, 6);\r\n        }\r\n\r\n        this.onAfterRenderObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Disposes and releases the associated resources.\r\n     */\r\n    public dispose(): void {\r\n        const vertexBuffer = this._vertexBuffers[VertexBuffer.PositionKind];\r\n        if (vertexBuffer) {\r\n            vertexBuffer.dispose();\r\n            this._vertexBuffers[VertexBuffer.PositionKind] = null;\r\n        }\r\n\r\n        if (this._indexBuffer) {\r\n            this._scene.getEngine()._releaseBuffer(this._indexBuffer);\r\n            this._indexBuffer = null;\r\n        }\r\n\r\n        if (this.texture) {\r\n            this.texture.dispose();\r\n            this.texture = null;\r\n        }\r\n\r\n        // Clean RTT list\r\n        this.renderTargetTextures = [];\r\n\r\n        // Remove from scene\r\n        const index = this._scene.layers.indexOf(this);\r\n        this._scene.layers.splice(index, 1);\r\n\r\n        // Callback\r\n        this.onDisposeObservable.notifyObservers(this);\r\n\r\n        this.onDisposeObservable.clear();\r\n        this.onAfterRenderObservable.clear();\r\n        this.onBeforeRenderObservable.clear();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}