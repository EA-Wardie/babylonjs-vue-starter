{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { __extends } from \"tslib\";\nimport { AbstractMesh } from \"../Meshes/abstractMesh.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\nimport { VertexData } from \"../Meshes/mesh.vertexData.js\";\n/**\n * Class used to create a trail following a mesh\n */\n\nvar TrailMesh =\n/** @class */\nfunction (_super) {\n  __extends(TrailMesh, _super);\n  /**\n   * @constructor\n   * @param name The value used by scene.getMeshByName() to do a lookup.\n   * @param generator The mesh or transform node to generate a trail.\n   * @param scene The scene to add this mesh to.\n   * @param diameter Diameter of trailing mesh. Default is 1.\n   * @param length Length of trailing mesh. Default is 60.\n   * @param autoStart Automatically start trailing mesh. Default true.\n   */\n\n\n  function TrailMesh(name, generator, scene, diameter, length, autoStart) {\n    if (diameter === void 0) {\n      diameter = 1;\n    }\n\n    if (length === void 0) {\n      length = 60;\n    }\n\n    if (autoStart === void 0) {\n      autoStart = true;\n    }\n\n    var _this = _super.call(this, name, scene) || this;\n\n    _this._sectionPolygonPointsCount = 4;\n    _this._running = false;\n    _this._autoStart = autoStart;\n    _this._generator = generator;\n    _this._diameter = diameter;\n    _this._length = length;\n    _this._sectionVectors = [];\n    _this._sectionNormalVectors = [];\n\n    for (var i = 0; i < _this._sectionPolygonPointsCount; i++) {\n      _this._sectionVectors[i] = Vector3.Zero();\n      _this._sectionNormalVectors[i] = Vector3.Zero();\n    }\n\n    _this._createMesh();\n\n    return _this;\n  }\n  /**\n   * \"TrailMesh\"\n   * @returns \"TrailMesh\"\n   */\n\n\n  TrailMesh.prototype.getClassName = function () {\n    return \"TrailMesh\";\n  };\n\n  TrailMesh.prototype._createMesh = function () {\n    var data = new VertexData();\n    var positions = [];\n    var normals = [];\n    var indices = [];\n    var meshCenter = Vector3.Zero();\n\n    if (this._generator instanceof AbstractMesh && this._generator.hasBoundingInfo) {\n      meshCenter = this._generator.getBoundingInfo().boundingBox.centerWorld;\n    } else {\n      meshCenter = this._generator.position;\n    }\n\n    var alpha = 2 * Math.PI / this._sectionPolygonPointsCount;\n\n    for (var i = 0; i < this._sectionPolygonPointsCount; i++) {\n      positions.push(meshCenter.x + Math.cos(i * alpha) * this._diameter, meshCenter.y + Math.sin(i * alpha) * this._diameter, meshCenter.z);\n    }\n\n    for (var i = 1; i <= this._length; i++) {\n      for (var j = 0; j < this._sectionPolygonPointsCount; j++) {\n        positions.push(meshCenter.x + Math.cos(j * alpha) * this._diameter, meshCenter.y + Math.sin(j * alpha) * this._diameter, meshCenter.z);\n      }\n\n      var l = positions.length / 3 - 2 * this._sectionPolygonPointsCount;\n\n      for (var j = 0; j < this._sectionPolygonPointsCount - 1; j++) {\n        indices.push(l + j, l + j + this._sectionPolygonPointsCount, l + j + this._sectionPolygonPointsCount + 1);\n        indices.push(l + j, l + j + this._sectionPolygonPointsCount + 1, l + j + 1);\n      }\n\n      indices.push(l + this._sectionPolygonPointsCount - 1, l + this._sectionPolygonPointsCount - 1 + this._sectionPolygonPointsCount, l + this._sectionPolygonPointsCount);\n      indices.push(l + this._sectionPolygonPointsCount - 1, l + this._sectionPolygonPointsCount, l);\n    }\n\n    VertexData.ComputeNormals(positions, indices, normals);\n    data.positions = positions;\n    data.normals = normals;\n    data.indices = indices;\n    data.applyToMesh(this, true);\n\n    if (this._autoStart) {\n      this.start();\n    }\n  };\n  /**\n   * Start trailing mesh.\n   */\n\n\n  TrailMesh.prototype.start = function () {\n    var _this = this;\n\n    if (!this._running) {\n      this._running = true;\n      this._beforeRenderObserver = this.getScene().onBeforeRenderObservable.add(function () {\n        _this.update();\n      });\n    }\n  };\n  /**\n   * Stop trailing mesh.\n   */\n\n\n  TrailMesh.prototype.stop = function () {\n    if (this._beforeRenderObserver && this._running) {\n      this._running = false;\n      this.getScene().onBeforeRenderObservable.remove(this._beforeRenderObserver);\n    }\n  };\n  /**\n   * Update trailing mesh geometry.\n   */\n\n\n  TrailMesh.prototype.update = function () {\n    var positions = this.getVerticesData(VertexBuffer.PositionKind);\n    var normals = this.getVerticesData(VertexBuffer.NormalKind);\n\n    var wm = this._generator.getWorldMatrix();\n\n    if (positions && normals) {\n      for (var i = 3 * this._sectionPolygonPointsCount; i < positions.length; i++) {\n        positions[i - 3 * this._sectionPolygonPointsCount] = positions[i] - normals[i] / this._length * this._diameter;\n      }\n\n      for (var i = 3 * this._sectionPolygonPointsCount; i < normals.length; i++) {\n        normals[i - 3 * this._sectionPolygonPointsCount] = normals[i];\n      }\n\n      var l = positions.length - 3 * this._sectionPolygonPointsCount;\n      var alpha = 2 * Math.PI / this._sectionPolygonPointsCount;\n\n      for (var i = 0; i < this._sectionPolygonPointsCount; i++) {\n        this._sectionVectors[i].copyFromFloats(Math.cos(i * alpha) * this._diameter, Math.sin(i * alpha) * this._diameter, 0);\n\n        this._sectionNormalVectors[i].copyFromFloats(Math.cos(i * alpha), Math.sin(i * alpha), 0);\n\n        Vector3.TransformCoordinatesToRef(this._sectionVectors[i], wm, this._sectionVectors[i]);\n        Vector3.TransformNormalToRef(this._sectionNormalVectors[i], wm, this._sectionNormalVectors[i]);\n      }\n\n      for (var i = 0; i < this._sectionPolygonPointsCount; i++) {\n        positions[l + 3 * i] = this._sectionVectors[i].x;\n        positions[l + 3 * i + 1] = this._sectionVectors[i].y;\n        positions[l + 3 * i + 2] = this._sectionVectors[i].z;\n        normals[l + 3 * i] = this._sectionNormalVectors[i].x;\n        normals[l + 3 * i + 1] = this._sectionNormalVectors[i].y;\n        normals[l + 3 * i + 2] = this._sectionNormalVectors[i].z;\n      }\n\n      this.updateVerticesData(VertexBuffer.PositionKind, positions, true, false);\n      this.updateVerticesData(VertexBuffer.NormalKind, normals, true, false);\n    }\n  };\n  /**\n   * Returns a new TrailMesh object.\n   * @param name is a string, the name given to the new mesh\n   * @param newGenerator use new generator object for cloned trail mesh\n   * @returns a new mesh\n   */\n\n\n  TrailMesh.prototype.clone = function (name, newGenerator) {\n    if (name === void 0) {\n      name = \"\";\n    }\n\n    return new TrailMesh(name, newGenerator === undefined ? this._generator : newGenerator, this.getScene(), this._diameter, this._length, this._autoStart);\n  };\n  /**\n   * Serializes this trail mesh\n   * @param serializationObject object to write serialization to\n   */\n\n\n  TrailMesh.prototype.serialize = function (serializationObject) {\n    _super.prototype.serialize.call(this, serializationObject);\n  };\n  /**\n   * Parses a serialized trail mesh\n   * @param parsedMesh the serialized mesh\n   * @param scene the scene to create the trail mesh in\n   * @returns the created trail mesh\n   */\n\n\n  TrailMesh.Parse = function (parsedMesh, scene) {\n    return new TrailMesh(parsedMesh.name, parsedMesh._generator, scene, parsedMesh._diameter, parsedMesh._length, parsedMesh._autoStart);\n  };\n\n  return TrailMesh;\n}(Mesh);\n\nexport { TrailMesh };","map":{"version":3,"mappings":"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","names":["AbstractMesh","Mesh","Vector3","VertexBuffer","VertexData","__extends","name","generator","scene","diameter","length","autoStart","_super","_this","_running","_autoStart","_generator","_diameter","_length","_sectionVectors","_sectionNormalVectors","i","_sectionPolygonPointsCount","Zero","_createMesh","TrailMesh","data","positions","normals","indices","meshCenter","hasBoundingInfo","getBoundingInfo","boundingBox","centerWorld","position","alpha","Math","PI","push","x","cos","y","sin","z","j","l","ComputeNormals","applyToMesh","start","_beforeRenderObserver","getScene","onBeforeRenderObservable","add","update","remove","getVerticesData","PositionKind","NormalKind","wm","getWorldMatrix","copyFromFloats","TransformCoordinatesToRef","TransformNormalToRef","updateVerticesData","newGenerator","undefined","serializationObject","serialize","call","parsedMesh"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Meshes/trailMesh.ts"],"sourcesContent":["import { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { VertexData } from \"../Meshes/mesh.vertexData\";\r\nimport type { TransformNode } from \"../Meshes/transformNode\";\r\n\r\n/**\r\n * Class used to create a trail following a mesh\r\n */\r\nexport class TrailMesh extends Mesh {\r\n    private _generator: TransformNode;\r\n    private _autoStart: boolean;\r\n    private _running: boolean;\r\n    private _diameter: number;\r\n    private _length: number;\r\n    private _sectionPolygonPointsCount: number = 4;\r\n    private _sectionVectors: Array<Vector3>;\r\n    private _sectionNormalVectors: Array<Vector3>;\r\n    private _beforeRenderObserver: Nullable<Observer<Scene>>;\r\n\r\n    /**\r\n     * @constructor\r\n     * @param name The value used by scene.getMeshByName() to do a lookup.\r\n     * @param generator The mesh or transform node to generate a trail.\r\n     * @param scene The scene to add this mesh to.\r\n     * @param diameter Diameter of trailing mesh. Default is 1.\r\n     * @param length Length of trailing mesh. Default is 60.\r\n     * @param autoStart Automatically start trailing mesh. Default true.\r\n     */\r\n    constructor(name: string, generator: TransformNode, scene?: Scene, diameter: number = 1, length: number = 60, autoStart: boolean = true) {\r\n        super(name, scene);\r\n\r\n        this._running = false;\r\n        this._autoStart = autoStart;\r\n        this._generator = generator;\r\n        this._diameter = diameter;\r\n        this._length = length;\r\n        this._sectionVectors = [];\r\n        this._sectionNormalVectors = [];\r\n        for (let i: number = 0; i < this._sectionPolygonPointsCount; i++) {\r\n            this._sectionVectors[i] = Vector3.Zero();\r\n            this._sectionNormalVectors[i] = Vector3.Zero();\r\n        }\r\n        this._createMesh();\r\n    }\r\n\r\n    /**\r\n     * \"TrailMesh\"\r\n     * @returns \"TrailMesh\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"TrailMesh\";\r\n    }\r\n\r\n    private _createMesh(): void {\r\n        const data: VertexData = new VertexData();\r\n        const positions: Array<number> = [];\r\n        const normals: Array<number> = [];\r\n        const indices: Array<number> = [];\r\n        let meshCenter = Vector3.Zero();\r\n        if (this._generator instanceof AbstractMesh && this._generator.hasBoundingInfo) {\r\n            meshCenter = this._generator.getBoundingInfo().boundingBox.centerWorld;\r\n        } else {\r\n            meshCenter = this._generator.position;\r\n        }\r\n        const alpha: number = (2 * Math.PI) / this._sectionPolygonPointsCount;\r\n        for (let i: number = 0; i < this._sectionPolygonPointsCount; i++) {\r\n            positions.push(meshCenter.x + Math.cos(i * alpha) * this._diameter, meshCenter.y + Math.sin(i * alpha) * this._diameter, meshCenter.z);\r\n        }\r\n        for (let i: number = 1; i <= this._length; i++) {\r\n            for (let j: number = 0; j < this._sectionPolygonPointsCount; j++) {\r\n                positions.push(meshCenter.x + Math.cos(j * alpha) * this._diameter, meshCenter.y + Math.sin(j * alpha) * this._diameter, meshCenter.z);\r\n            }\r\n            const l: number = positions.length / 3 - 2 * this._sectionPolygonPointsCount;\r\n            for (let j: number = 0; j < this._sectionPolygonPointsCount - 1; j++) {\r\n                indices.push(l + j, l + j + this._sectionPolygonPointsCount, l + j + this._sectionPolygonPointsCount + 1);\r\n                indices.push(l + j, l + j + this._sectionPolygonPointsCount + 1, l + j + 1);\r\n            }\r\n            indices.push(l + this._sectionPolygonPointsCount - 1, l + this._sectionPolygonPointsCount - 1 + this._sectionPolygonPointsCount, l + this._sectionPolygonPointsCount);\r\n            indices.push(l + this._sectionPolygonPointsCount - 1, l + this._sectionPolygonPointsCount, l);\r\n        }\r\n        VertexData.ComputeNormals(positions, indices, normals);\r\n        data.positions = positions;\r\n        data.normals = normals;\r\n        data.indices = indices;\r\n        data.applyToMesh(this, true);\r\n        if (this._autoStart) {\r\n            this.start();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start trailing mesh.\r\n     */\r\n    public start(): void {\r\n        if (!this._running) {\r\n            this._running = true;\r\n            this._beforeRenderObserver = this.getScene().onBeforeRenderObservable.add(() => {\r\n                this.update();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stop trailing mesh.\r\n     */\r\n    public stop(): void {\r\n        if (this._beforeRenderObserver && this._running) {\r\n            this._running = false;\r\n            this.getScene().onBeforeRenderObservable.remove(this._beforeRenderObserver);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update trailing mesh geometry.\r\n     */\r\n    public update(): void {\r\n        const positions = this.getVerticesData(VertexBuffer.PositionKind);\r\n        const normals = this.getVerticesData(VertexBuffer.NormalKind);\r\n        const wm = this._generator.getWorldMatrix();\r\n        if (positions && normals) {\r\n            for (let i: number = 3 * this._sectionPolygonPointsCount; i < positions.length; i++) {\r\n                positions[i - 3 * this._sectionPolygonPointsCount] = positions[i] - (normals[i] / this._length) * this._diameter;\r\n            }\r\n            for (let i: number = 3 * this._sectionPolygonPointsCount; i < normals.length; i++) {\r\n                normals[i - 3 * this._sectionPolygonPointsCount] = normals[i];\r\n            }\r\n            const l: number = positions.length - 3 * this._sectionPolygonPointsCount;\r\n            const alpha: number = (2 * Math.PI) / this._sectionPolygonPointsCount;\r\n            for (let i: number = 0; i < this._sectionPolygonPointsCount; i++) {\r\n                this._sectionVectors[i].copyFromFloats(Math.cos(i * alpha) * this._diameter, Math.sin(i * alpha) * this._diameter, 0);\r\n                this._sectionNormalVectors[i].copyFromFloats(Math.cos(i * alpha), Math.sin(i * alpha), 0);\r\n                Vector3.TransformCoordinatesToRef(this._sectionVectors[i], wm, this._sectionVectors[i]);\r\n                Vector3.TransformNormalToRef(this._sectionNormalVectors[i], wm, this._sectionNormalVectors[i]);\r\n            }\r\n            for (let i: number = 0; i < this._sectionPolygonPointsCount; i++) {\r\n                positions[l + 3 * i] = this._sectionVectors[i].x;\r\n                positions[l + 3 * i + 1] = this._sectionVectors[i].y;\r\n                positions[l + 3 * i + 2] = this._sectionVectors[i].z;\r\n                normals[l + 3 * i] = this._sectionNormalVectors[i].x;\r\n                normals[l + 3 * i + 1] = this._sectionNormalVectors[i].y;\r\n                normals[l + 3 * i + 2] = this._sectionNormalVectors[i].z;\r\n            }\r\n            this.updateVerticesData(VertexBuffer.PositionKind, positions, true, false);\r\n            this.updateVerticesData(VertexBuffer.NormalKind, normals, true, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a new TrailMesh object.\r\n     * @param name is a string, the name given to the new mesh\r\n     * @param newGenerator use new generator object for cloned trail mesh\r\n     * @returns a new mesh\r\n     */\r\n    public clone(name: string = \"\", newGenerator: TransformNode): TrailMesh {\r\n        return new TrailMesh(name, newGenerator === undefined ? this._generator : newGenerator, this.getScene(), this._diameter, this._length, this._autoStart);\r\n    }\r\n\r\n    /**\r\n     * Serializes this trail mesh\r\n     * @param serializationObject object to write serialization to\r\n     */\r\n    public serialize(serializationObject: any): void {\r\n        super.serialize(serializationObject);\r\n    }\r\n\r\n    /**\r\n     * Parses a serialized trail mesh\r\n     * @param parsedMesh the serialized mesh\r\n     * @param scene the scene to create the trail mesh in\r\n     * @returns the created trail mesh\r\n     */\r\n    public static Parse(parsedMesh: any, scene: Scene): TrailMesh {\r\n        return new TrailMesh(parsedMesh.name, parsedMesh._generator, scene, parsedMesh._diameter, parsedMesh._length, parsedMesh._autoStart);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}