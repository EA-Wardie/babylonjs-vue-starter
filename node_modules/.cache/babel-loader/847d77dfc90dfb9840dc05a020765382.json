{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { ArrayTools } from \"../Misc/arrayTools.js\";\nimport { Vector3, Quaternion } from \"../Maths/math.vector.js\";\nimport { AbstractMesh } from \"../Meshes/abstractMesh.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { PhysicsJoint } from \"./physicsJoint.js\";\nimport { Space } from \"../Maths/math.axis.js\";\n\nMesh._PhysicsImpostorParser = function (scene, physicObject, jsonObject) {\n  return new PhysicsImpostor(physicObject, jsonObject.physicsImpostor, {\n    mass: jsonObject.physicsMass,\n    friction: jsonObject.physicsFriction,\n    restitution: jsonObject.physicsRestitution\n  }, scene);\n};\n/**\n * Represents a physics imposter\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\n */\n\n\nvar PhysicsImpostor =\n/** @class */\nfunction () {\n  /**\n   * Initializes the physics imposter\n   * @param object The physics-enabled object used as the physics imposter\n   * @param type The type of the physics imposter. Types are available as static members of this class.\n   * @param _options The options for the physics imposter\n   * @param _scene The Babylon scene\n   */\n  function PhysicsImpostor(\n  /**\n   * The physics-enabled object used as the physics imposter\n   */\n  object,\n  /**\n   * The type of the physics imposter\n   */\n  type, _options, _scene) {\n    if (_options === void 0) {\n      _options = {\n        mass: 0\n      };\n    }\n\n    var _this = this;\n\n    this.object = object;\n    this.type = type;\n    this._options = _options;\n    this._scene = _scene;\n    /** @hidden */\n\n    this._pluginData = {};\n    this._bodyUpdateRequired = false;\n    this._onBeforePhysicsStepCallbacks = new Array();\n    this._onAfterPhysicsStepCallbacks = new Array();\n    /** @hidden */\n\n    this._onPhysicsCollideCallbacks = [];\n    this._deltaPosition = Vector3.Zero();\n    this._isDisposed = false;\n    /**\n     * @hidden\n     */\n\n    this.soft = false;\n    /**\n     * @hidden\n     */\n\n    this.segments = 0; //temp variables for parent rotation calculations\n    //private _mats: Array<Matrix> = [new Matrix(), new Matrix()];\n\n    this._tmpQuat = new Quaternion();\n    this._tmpQuat2 = new Quaternion();\n    /**\n     * this function is executed by the physics engine.\n     */\n\n    this.beforeStep = function () {\n      if (!_this._physicsEngine) {\n        return;\n      }\n\n      _this.object.translate(_this._deltaPosition, -1);\n\n      _this._deltaRotationConjugated && _this.object.rotationQuaternion && _this.object.rotationQuaternion.multiplyToRef(_this._deltaRotationConjugated, _this.object.rotationQuaternion);\n\n      _this.object.computeWorldMatrix(false);\n\n      if (_this.object.parent && _this.object.rotationQuaternion) {\n        _this.getParentsRotation();\n\n        _this._tmpQuat.multiplyToRef(_this.object.rotationQuaternion, _this._tmpQuat);\n      } else {\n        _this._tmpQuat.copyFrom(_this.object.rotationQuaternion || new Quaternion());\n      }\n\n      if (!_this._options.disableBidirectionalTransformation) {\n        _this.object.rotationQuaternion && _this._physicsEngine.getPhysicsPlugin().setPhysicsBodyTransformation(_this,\n        /*bInfo.boundingBox.centerWorld*/\n        _this.object.getAbsolutePosition(), _this._tmpQuat);\n      }\n\n      _this._onBeforePhysicsStepCallbacks.forEach(function (func) {\n        func(_this);\n      });\n    };\n    /**\n     * this function is executed by the physics engine\n     */\n\n\n    this.afterStep = function () {\n      if (!_this._physicsEngine) {\n        return;\n      }\n\n      _this._onAfterPhysicsStepCallbacks.forEach(function (func) {\n        func(_this);\n      });\n\n      _this._physicsEngine.getPhysicsPlugin().setTransformationFromPhysicsBody(_this); // object has now its world rotation. needs to be converted to local.\n\n\n      if (_this.object.parent && _this.object.rotationQuaternion) {\n        _this.getParentsRotation();\n\n        _this._tmpQuat.conjugateInPlace();\n\n        _this._tmpQuat.multiplyToRef(_this.object.rotationQuaternion, _this.object.rotationQuaternion);\n      } // take the position set and make it the absolute position of this object.\n\n\n      _this.object.setAbsolutePosition(_this.object.position);\n\n      _this._deltaRotation && _this.object.rotationQuaternion && _this.object.rotationQuaternion.multiplyToRef(_this._deltaRotation, _this.object.rotationQuaternion);\n\n      _this.object.translate(_this._deltaPosition, 1);\n    };\n    /**\n     * Legacy collision detection event support\n     */\n\n\n    this.onCollideEvent = null;\n    /**\n     * event and body object due to cannon's event-based architecture.\n     * @param e\n     * @param e.body\n     * @param e.point\n     */\n\n    this.onCollide = function (e) {\n      if (!_this._onPhysicsCollideCallbacks.length && !_this.onCollideEvent) {\n        return;\n      }\n\n      if (!_this._physicsEngine) {\n        return;\n      }\n\n      var otherImpostor = _this._physicsEngine.getImpostorWithPhysicsBody(e.body);\n\n      if (otherImpostor) {\n        // Legacy collision detection event support\n        if (_this.onCollideEvent) {\n          _this.onCollideEvent(_this, otherImpostor);\n        }\n\n        _this._onPhysicsCollideCallbacks.filter(function (obj) {\n          return obj.otherImpostors.indexOf(otherImpostor) !== -1;\n        }).forEach(function (obj) {\n          obj.callback(_this, otherImpostor, e.point);\n        });\n      }\n    }; //sanity check!\n\n\n    if (!this.object) {\n      Logger.Error(\"No object was provided. A physics object is obligatory\");\n      return;\n    }\n\n    if (this.object.parent && _options.mass !== 0) {\n      Logger.Warn(\"A physics impostor has been created for an object which has a parent. Babylon physics currently works in local space so unexpected issues may occur.\");\n    } // Legacy support for old syntax.\n\n\n    if (!this._scene && object.getScene) {\n      this._scene = object.getScene();\n    }\n\n    if (!this._scene) {\n      return;\n    }\n\n    if (this.type > 100) {\n      this.soft = true;\n    }\n\n    this._physicsEngine = this._scene.getPhysicsEngine();\n\n    if (!this._physicsEngine) {\n      Logger.Error(\"Physics not enabled. Please use scene.enablePhysics(...) before creating impostors.\");\n    } else {\n      //set the object's quaternion, if not set\n      if (!this.object.rotationQuaternion) {\n        if (this.object.rotation) {\n          this.object.rotationQuaternion = Quaternion.RotationYawPitchRoll(this.object.rotation.y, this.object.rotation.x, this.object.rotation.z);\n        } else {\n          this.object.rotationQuaternion = new Quaternion();\n        }\n      } //default options params\n\n\n      this._options.mass = _options.mass === void 0 ? 0 : _options.mass;\n      this._options.friction = _options.friction === void 0 ? 0.2 : _options.friction;\n      this._options.restitution = _options.restitution === void 0 ? 0.2 : _options.restitution;\n\n      if (this.soft) {\n        //softbody mass must be above 0;\n        this._options.mass = this._options.mass > 0 ? this._options.mass : 1;\n        this._options.pressure = _options.pressure === void 0 ? 200 : _options.pressure;\n        this._options.stiffness = _options.stiffness === void 0 ? 1 : _options.stiffness;\n        this._options.velocityIterations = _options.velocityIterations === void 0 ? 20 : _options.velocityIterations;\n        this._options.positionIterations = _options.positionIterations === void 0 ? 20 : _options.positionIterations;\n        this._options.fixedPoints = _options.fixedPoints === void 0 ? 0 : _options.fixedPoints;\n        this._options.margin = _options.margin === void 0 ? 0 : _options.margin;\n        this._options.damping = _options.damping === void 0 ? 0 : _options.damping;\n        this._options.path = _options.path === void 0 ? null : _options.path;\n        this._options.shape = _options.shape === void 0 ? null : _options.shape;\n      }\n\n      this._joints = []; //If the mesh has a parent, don't initialize the physicsBody. Instead wait for the parent to do that.\n\n      if (!this.object.parent || this._options.ignoreParent) {\n        this._init();\n      } else if (this.object.parent.physicsImpostor) {\n        Logger.Warn(\"You must affect impostors to children before affecting impostor to parent.\");\n      }\n    }\n  }\n\n  Object.defineProperty(PhysicsImpostor.prototype, \"isDisposed\", {\n    /**\n     * Specifies if the physics imposter is disposed\n     */\n    get: function get() {\n      return this._isDisposed;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsImpostor.prototype, \"mass\", {\n    /**\n     * Gets the mass of the physics imposter\n     */\n    get: function get() {\n      return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyMass(this) : 0;\n    },\n    set: function set(value) {\n      this.setMass(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsImpostor.prototype, \"friction\", {\n    /**\n     * Gets the coefficient of friction\n     */\n    get: function get() {\n      return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyFriction(this) : 0;\n    },\n\n    /**\n     * Sets the coefficient of friction\n     */\n    set: function set(value) {\n      if (!this._physicsEngine) {\n        return;\n      }\n\n      this._physicsEngine.getPhysicsPlugin().setBodyFriction(this, value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsImpostor.prototype, \"restitution\", {\n    /**\n     * Gets the coefficient of restitution\n     */\n    get: function get() {\n      return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyRestitution(this) : 0;\n    },\n\n    /**\n     * Sets the coefficient of restitution\n     */\n    set: function set(value) {\n      if (!this._physicsEngine) {\n        return;\n      }\n\n      this._physicsEngine.getPhysicsPlugin().setBodyRestitution(this, value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsImpostor.prototype, \"pressure\", {\n    /**\n     * Gets the pressure of a soft body; only supported by the AmmoJSPlugin\n     */\n    get: function get() {\n      if (!this._physicsEngine) {\n        return 0;\n      }\n\n      var plugin = this._physicsEngine.getPhysicsPlugin();\n\n      if (!plugin.setBodyPressure) {\n        return 0;\n      }\n\n      return plugin.getBodyPressure(this);\n    },\n\n    /**\n     * Sets the pressure of a soft body; only supported by the AmmoJSPlugin\n     */\n    set: function set(value) {\n      if (!this._physicsEngine) {\n        return;\n      }\n\n      var plugin = this._physicsEngine.getPhysicsPlugin();\n\n      if (!plugin.setBodyPressure) {\n        return;\n      }\n\n      plugin.setBodyPressure(this, value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsImpostor.prototype, \"stiffness\", {\n    /**\n     * Gets the stiffness of a soft body; only supported by the AmmoJSPlugin\n     */\n    get: function get() {\n      if (!this._physicsEngine) {\n        return 0;\n      }\n\n      var plugin = this._physicsEngine.getPhysicsPlugin();\n\n      if (!plugin.getBodyStiffness) {\n        return 0;\n      }\n\n      return plugin.getBodyStiffness(this);\n    },\n\n    /**\n     * Sets the stiffness of a soft body; only supported by the AmmoJSPlugin\n     */\n    set: function set(value) {\n      if (!this._physicsEngine) {\n        return;\n      }\n\n      var plugin = this._physicsEngine.getPhysicsPlugin();\n\n      if (!plugin.setBodyStiffness) {\n        return;\n      }\n\n      plugin.setBodyStiffness(this, value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsImpostor.prototype, \"velocityIterations\", {\n    /**\n     * Gets the velocityIterations of a soft body; only supported by the AmmoJSPlugin\n     */\n    get: function get() {\n      if (!this._physicsEngine) {\n        return 0;\n      }\n\n      var plugin = this._physicsEngine.getPhysicsPlugin();\n\n      if (!plugin.getBodyVelocityIterations) {\n        return 0;\n      }\n\n      return plugin.getBodyVelocityIterations(this);\n    },\n\n    /**\n     * Sets the velocityIterations of a soft body; only supported by the AmmoJSPlugin\n     */\n    set: function set(value) {\n      if (!this._physicsEngine) {\n        return;\n      }\n\n      var plugin = this._physicsEngine.getPhysicsPlugin();\n\n      if (!plugin.setBodyVelocityIterations) {\n        return;\n      }\n\n      plugin.setBodyVelocityIterations(this, value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsImpostor.prototype, \"positionIterations\", {\n    /**\n     * Gets the positionIterations of a soft body; only supported by the AmmoJSPlugin\n     */\n    get: function get() {\n      if (!this._physicsEngine) {\n        return 0;\n      }\n\n      var plugin = this._physicsEngine.getPhysicsPlugin();\n\n      if (!plugin.getBodyPositionIterations) {\n        return 0;\n      }\n\n      return plugin.getBodyPositionIterations(this);\n    },\n\n    /**\n     * Sets the positionIterations of a soft body; only supported by the AmmoJSPlugin\n     */\n    set: function set(value) {\n      if (!this._physicsEngine) {\n        return;\n      }\n\n      var plugin = this._physicsEngine.getPhysicsPlugin();\n\n      if (!plugin.setBodyPositionIterations) {\n        return;\n      }\n\n      plugin.setBodyPositionIterations(this, value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * This function will completely initialize this impostor.\n   * It will create a new body - but only if this mesh has no parent.\n   * If it has, this impostor will not be used other than to define the impostor\n   * of the child mesh.\n   * @hidden\n   */\n\n  PhysicsImpostor.prototype._init = function () {\n    if (!this._physicsEngine) {\n      return;\n    }\n\n    this._physicsEngine.removeImpostor(this);\n\n    this.physicsBody = null;\n    this._parent = this._parent || this._getPhysicsParent();\n\n    if (!this._isDisposed && (!this.parent || this._options.ignoreParent)) {\n      this._physicsEngine.addImpostor(this);\n    }\n  };\n\n  PhysicsImpostor.prototype._getPhysicsParent = function () {\n    if (this.object.parent instanceof AbstractMesh) {\n      var parentMesh = this.object.parent;\n      return parentMesh.physicsImpostor;\n    }\n\n    return null;\n  };\n  /**\n   * Should a new body be generated.\n   * @returns boolean specifying if body initialization is required\n   */\n\n\n  PhysicsImpostor.prototype.isBodyInitRequired = function () {\n    return this._bodyUpdateRequired || !this._physicsBody && (!this._parent || !!this._options.ignoreParent);\n  };\n  /**\n   * Sets the updated scaling\n   */\n\n\n  PhysicsImpostor.prototype.setScalingUpdated = function () {\n    this.forceUpdate();\n  };\n  /**\n   * Force a regeneration of this or the parent's impostor's body.\n   * Use under cautious - This will remove all joints already implemented.\n   */\n\n\n  PhysicsImpostor.prototype.forceUpdate = function () {\n    this._init();\n\n    if (this.parent && !this._options.ignoreParent) {\n      this.parent.forceUpdate();\n    }\n  };\n\n  Object.defineProperty(PhysicsImpostor.prototype, \"physicsBody\", {\n    /*public get mesh(): AbstractMesh {\n        return this._mesh;\n    }*/\n\n    /**\n     * Gets the body that holds this impostor. Either its own, or its parent.\n     */\n    get: function get() {\n      return this._parent && !this._options.ignoreParent ? this._parent.physicsBody : this._physicsBody;\n    },\n\n    /**\n     * Set the physics body. Used mainly by the physics engine/plugin\n     */\n    set: function set(physicsBody) {\n      if (this._physicsBody && this._physicsEngine) {\n        this._physicsEngine.getPhysicsPlugin().removePhysicsBody(this);\n      }\n\n      this._physicsBody = physicsBody;\n      this.resetUpdateFlags();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsImpostor.prototype, \"parent\", {\n    /**\n     * Get the parent of the physics imposter\n     * @returns Physics imposter or null\n     */\n    get: function get() {\n      return !this._options.ignoreParent && this._parent ? this._parent : null;\n    },\n\n    /**\n     * Sets the parent of the physics imposter\n     */\n    set: function set(value) {\n      this._parent = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Resets the update flags\n   */\n\n  PhysicsImpostor.prototype.resetUpdateFlags = function () {\n    this._bodyUpdateRequired = false;\n  };\n  /**\n   * Gets the object extend size\n   * @returns the object extend size\n   */\n\n\n  PhysicsImpostor.prototype.getObjectExtendSize = function () {\n    if (this.object.getBoundingInfo) {\n      var q = this.object.rotationQuaternion;\n      var scaling = this.object.scaling.clone(); //reset rotation\n\n      this.object.rotationQuaternion = PhysicsImpostor.IDENTITY_QUATERNION; //calculate the world matrix with no rotation\n\n      var worldMatrix = this.object.computeWorldMatrix && this.object.computeWorldMatrix(true);\n\n      if (worldMatrix) {\n        worldMatrix.decompose(scaling, undefined, undefined);\n      }\n\n      var boundingInfo = this.object.getBoundingInfo(); // get the global scaling of the object\n\n      var size = boundingInfo.boundingBox.extendSize.scale(2).multiplyInPlace(scaling);\n      size.x = Math.abs(size.x);\n      size.y = Math.abs(size.y);\n      size.z = Math.abs(size.z); //bring back the rotation\n\n      this.object.rotationQuaternion = q; //calculate the world matrix with the new rotation\n\n      this.object.computeWorldMatrix && this.object.computeWorldMatrix(true);\n      return size;\n    } else {\n      return PhysicsImpostor.DEFAULT_OBJECT_SIZE;\n    }\n  };\n  /**\n   * Gets the object center\n   * @returns The object center\n   */\n\n\n  PhysicsImpostor.prototype.getObjectCenter = function () {\n    if (this.object.getBoundingInfo) {\n      var boundingInfo = this.object.getBoundingInfo();\n      return boundingInfo.boundingBox.centerWorld;\n    } else {\n      return this.object.position;\n    }\n  };\n  /**\n   * Get a specific parameter from the options parameters\n   * @param paramName The object parameter name\n   * @returns The object parameter\n   */\n\n\n  PhysicsImpostor.prototype.getParam = function (paramName) {\n    return this._options[paramName];\n  };\n  /**\n   * Sets a specific parameter in the options given to the physics plugin\n   * @param paramName The parameter name\n   * @param value The value of the parameter\n   */\n\n\n  PhysicsImpostor.prototype.setParam = function (paramName, value) {\n    this._options[paramName] = value;\n    this._bodyUpdateRequired = true;\n  };\n  /**\n   * Specifically change the body's mass option. Won't recreate the physics body object\n   * @param mass The mass of the physics imposter\n   */\n\n\n  PhysicsImpostor.prototype.setMass = function (mass) {\n    if (this.getParam(\"mass\") !== mass) {\n      this.setParam(\"mass\", mass);\n    }\n\n    if (this._physicsEngine) {\n      this._physicsEngine.getPhysicsPlugin().setBodyMass(this, mass);\n    }\n  };\n  /**\n   * Gets the linear velocity\n   * @returns  linear velocity or null\n   */\n\n\n  PhysicsImpostor.prototype.getLinearVelocity = function () {\n    return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getLinearVelocity(this) : Vector3.Zero();\n  };\n  /**\n   * Sets the linear velocity\n   * @param velocity  linear velocity or null\n   */\n\n\n  PhysicsImpostor.prototype.setLinearVelocity = function (velocity) {\n    if (this._physicsEngine) {\n      this._physicsEngine.getPhysicsPlugin().setLinearVelocity(this, velocity);\n    }\n  };\n  /**\n   * Gets the angular velocity\n   * @returns angular velocity or null\n   */\n\n\n  PhysicsImpostor.prototype.getAngularVelocity = function () {\n    return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getAngularVelocity(this) : Vector3.Zero();\n  };\n  /**\n   * Sets the angular velocity\n   * @param velocity The velocity or null\n   */\n\n\n  PhysicsImpostor.prototype.setAngularVelocity = function (velocity) {\n    if (this._physicsEngine) {\n      this._physicsEngine.getPhysicsPlugin().setAngularVelocity(this, velocity);\n    }\n  };\n  /**\n   * Execute a function with the physics plugin native code\n   * Provide a function the will have two variables - the world object and the physics body object\n   * @param func The function to execute with the physics plugin native code\n   */\n\n\n  PhysicsImpostor.prototype.executeNativeFunction = function (func) {\n    if (this._physicsEngine) {\n      func(this._physicsEngine.getPhysicsPlugin().world, this.physicsBody);\n    }\n  };\n  /**\n   * Register a function that will be executed before the physics world is stepping forward\n   * @param func The function to execute before the physics world is stepped forward\n   */\n\n\n  PhysicsImpostor.prototype.registerBeforePhysicsStep = function (func) {\n    this._onBeforePhysicsStepCallbacks.push(func);\n  };\n  /**\n   * Unregister a function that will be executed before the physics world is stepping forward\n   * @param func The function to execute before the physics world is stepped forward\n   */\n\n\n  PhysicsImpostor.prototype.unregisterBeforePhysicsStep = function (func) {\n    var index = this._onBeforePhysicsStepCallbacks.indexOf(func);\n\n    if (index > -1) {\n      this._onBeforePhysicsStepCallbacks.splice(index, 1);\n    } else {\n      Logger.Warn(\"Function to remove was not found\");\n    }\n  };\n  /**\n   * Register a function that will be executed after the physics step\n   * @param func The function to execute after physics step\n   */\n\n\n  PhysicsImpostor.prototype.registerAfterPhysicsStep = function (func) {\n    this._onAfterPhysicsStepCallbacks.push(func);\n  };\n  /**\n   * Unregisters a function that will be executed after the physics step\n   * @param func The function to execute after physics step\n   */\n\n\n  PhysicsImpostor.prototype.unregisterAfterPhysicsStep = function (func) {\n    var index = this._onAfterPhysicsStepCallbacks.indexOf(func);\n\n    if (index > -1) {\n      this._onAfterPhysicsStepCallbacks.splice(index, 1);\n    } else {\n      Logger.Warn(\"Function to remove was not found\");\n    }\n  };\n  /**\n   * register a function that will be executed when this impostor collides against a different body\n   * @param collideAgainst Physics imposter, or array of physics imposters to collide against\n   * @param func Callback that is executed on collision\n   */\n\n\n  PhysicsImpostor.prototype.registerOnPhysicsCollide = function (collideAgainst, func) {\n    var collidedAgainstList = collideAgainst instanceof Array ? collideAgainst : [collideAgainst];\n\n    this._onPhysicsCollideCallbacks.push({\n      callback: func,\n      otherImpostors: collidedAgainstList\n    });\n  };\n  /**\n   * Unregisters the physics imposter on contact\n   * @param collideAgainst The physics object to collide against\n   * @param func Callback to execute on collision\n   */\n\n\n  PhysicsImpostor.prototype.unregisterOnPhysicsCollide = function (collideAgainst, func) {\n    var collidedAgainstList = collideAgainst instanceof Array ? collideAgainst : [collideAgainst];\n    var index = -1;\n\n    var found = this._onPhysicsCollideCallbacks.some(function (cbDef, idx) {\n      if (cbDef.callback === func && cbDef.otherImpostors.length === collidedAgainstList.length) {\n        // chcek the arrays match\n        var sameList = cbDef.otherImpostors.every(function (impostor) {\n          return collidedAgainstList.indexOf(impostor) > -1;\n        });\n\n        if (sameList) {\n          index = idx;\n        }\n\n        return sameList;\n      }\n\n      return false;\n    });\n\n    if (found) {\n      this._onPhysicsCollideCallbacks.splice(index, 1);\n    } else {\n      Logger.Warn(\"Function to remove was not found\");\n    }\n  };\n  /**\n   * Get the parent rotation\n   * @returns The parent rotation\n   */\n\n\n  PhysicsImpostor.prototype.getParentsRotation = function () {\n    var parent = this.object.parent;\n\n    this._tmpQuat.copyFromFloats(0, 0, 0, 1);\n\n    while (parent) {\n      if (parent.rotationQuaternion) {\n        this._tmpQuat2.copyFrom(parent.rotationQuaternion);\n      } else {\n        Quaternion.RotationYawPitchRollToRef(parent.rotation.y, parent.rotation.x, parent.rotation.z, this._tmpQuat2);\n      }\n\n      this._tmpQuat.multiplyToRef(this._tmpQuat2, this._tmpQuat);\n\n      parent = parent.parent;\n    }\n\n    return this._tmpQuat;\n  };\n  /**\n   * Apply a force\n   * @param force The force to apply\n   * @param contactPoint The contact point for the force\n   * @returns The physics imposter\n   */\n\n\n  PhysicsImpostor.prototype.applyForce = function (force, contactPoint) {\n    if (this._physicsEngine) {\n      this._physicsEngine.getPhysicsPlugin().applyForce(this, force, contactPoint);\n    }\n\n    return this;\n  };\n  /**\n   * Apply an impulse\n   * @param force The impulse force\n   * @param contactPoint The contact point for the impulse force\n   * @returns The physics imposter\n   */\n\n\n  PhysicsImpostor.prototype.applyImpulse = function (force, contactPoint) {\n    if (this._physicsEngine) {\n      this._physicsEngine.getPhysicsPlugin().applyImpulse(this, force, contactPoint);\n    }\n\n    return this;\n  };\n  /**\n   * A help function to create a joint\n   * @param otherImpostor A physics imposter used to create a joint\n   * @param jointType The type of joint\n   * @param jointData The data for the joint\n   * @returns The physics imposter\n   */\n\n\n  PhysicsImpostor.prototype.createJoint = function (otherImpostor, jointType, jointData) {\n    var joint = new PhysicsJoint(jointType, jointData);\n    this.addJoint(otherImpostor, joint);\n    return this;\n  };\n  /**\n   * Add a joint to this impostor with a different impostor\n   * @param otherImpostor A physics imposter used to add a joint\n   * @param joint The joint to add\n   * @returns The physics imposter\n   */\n\n\n  PhysicsImpostor.prototype.addJoint = function (otherImpostor, joint) {\n    this._joints.push({\n      otherImpostor: otherImpostor,\n      joint: joint\n    });\n\n    if (this._physicsEngine) {\n      this._physicsEngine.addJoint(this, otherImpostor, joint);\n    }\n\n    return this;\n  };\n  /**\n   * Add an anchor to a cloth impostor\n   * @param otherImpostor rigid impostor to anchor to\n   * @param width ratio across width from 0 to 1\n   * @param height ratio up height from 0 to 1\n   * @param influence the elasticity between cloth impostor and anchor from 0, very stretchy to 1, little stretch\n   * @param noCollisionBetweenLinkedBodies when true collisions between cloth impostor and anchor are ignored; default false\n   * @returns impostor the soft imposter\n   */\n\n\n  PhysicsImpostor.prototype.addAnchor = function (otherImpostor, width, height, influence, noCollisionBetweenLinkedBodies) {\n    if (!this._physicsEngine) {\n      return this;\n    }\n\n    var plugin = this._physicsEngine.getPhysicsPlugin();\n\n    if (!plugin.appendAnchor) {\n      return this;\n    }\n\n    if (this._physicsEngine) {\n      plugin.appendAnchor(this, otherImpostor, width, height, influence, noCollisionBetweenLinkedBodies);\n    }\n\n    return this;\n  };\n  /**\n   * Add a hook to a rope impostor\n   * @param otherImpostor rigid impostor to anchor to\n   * @param length ratio across rope from 0 to 1\n   * @param influence the elasticity between rope impostor and anchor from 0, very stretchy to 1, little stretch\n   * @param noCollisionBetweenLinkedBodies when true collisions between soft impostor and anchor are ignored; default false\n   * @returns impostor the rope imposter\n   */\n\n\n  PhysicsImpostor.prototype.addHook = function (otherImpostor, length, influence, noCollisionBetweenLinkedBodies) {\n    if (!this._physicsEngine) {\n      return this;\n    }\n\n    var plugin = this._physicsEngine.getPhysicsPlugin();\n\n    if (!plugin.appendAnchor) {\n      return this;\n    }\n\n    if (this._physicsEngine) {\n      plugin.appendHook(this, otherImpostor, length, influence, noCollisionBetweenLinkedBodies);\n    }\n\n    return this;\n  };\n  /**\n   * Will keep this body still, in a sleep mode.\n   * @returns the physics imposter\n   */\n\n\n  PhysicsImpostor.prototype.sleep = function () {\n    if (this._physicsEngine) {\n      this._physicsEngine.getPhysicsPlugin().sleepBody(this);\n    }\n\n    return this;\n  };\n  /**\n   * Wake the body up.\n   * @returns The physics imposter\n   */\n\n\n  PhysicsImpostor.prototype.wakeUp = function () {\n    if (this._physicsEngine) {\n      this._physicsEngine.getPhysicsPlugin().wakeUpBody(this);\n    }\n\n    return this;\n  };\n  /**\n   * Clones the physics imposter\n   * @param newObject The physics imposter clones to this physics-enabled object\n   * @returns A nullable physics imposter\n   */\n\n\n  PhysicsImpostor.prototype.clone = function (newObject) {\n    if (!newObject) {\n      return null;\n    }\n\n    return new PhysicsImpostor(newObject, this.type, this._options, this._scene);\n  };\n  /**\n   * Disposes the physics imposter\n   */\n\n\n  PhysicsImpostor.prototype.dispose = function\n    /*disposeChildren: boolean = true*/\n  () {\n    var _this = this; //no dispose if no physics engine is available.\n\n\n    if (!this._physicsEngine) {\n      return;\n    }\n\n    this._joints.forEach(function (j) {\n      if (_this._physicsEngine) {\n        _this._physicsEngine.removeJoint(_this, j.otherImpostor, j.joint);\n      }\n    }); //dispose the physics body\n\n\n    this._physicsEngine.removeImpostor(this);\n\n    if (this.parent) {\n      this.parent.forceUpdate();\n    } else {\n      /*this._object.getChildMeshes().forEach(function(mesh) {\n          if (mesh.physicsImpostor) {\n              if (disposeChildren) {\n                  mesh.physicsImpostor.dispose();\n                  mesh.physicsImpostor = null;\n              }\n          }\n      })*/\n    }\n\n    this._isDisposed = true;\n  };\n  /**\n   * Sets the delta position\n   * @param position The delta position amount\n   */\n\n\n  PhysicsImpostor.prototype.setDeltaPosition = function (position) {\n    this._deltaPosition.copyFrom(position);\n  };\n  /**\n   * Sets the delta rotation\n   * @param rotation The delta rotation amount\n   */\n\n\n  PhysicsImpostor.prototype.setDeltaRotation = function (rotation) {\n    if (!this._deltaRotation) {\n      this._deltaRotation = new Quaternion();\n    }\n\n    this._deltaRotation.copyFrom(rotation);\n\n    this._deltaRotationConjugated = this._deltaRotation.conjugate();\n  };\n  /**\n   * Gets the box size of the physics imposter and stores the result in the input parameter\n   * @param result Stores the box size\n   * @returns The physics imposter\n   */\n\n\n  PhysicsImpostor.prototype.getBoxSizeToRef = function (result) {\n    if (this._physicsEngine) {\n      this._physicsEngine.getPhysicsPlugin().getBoxSizeToRef(this, result);\n    }\n\n    return this;\n  };\n  /**\n   * Gets the radius of the physics imposter\n   * @returns Radius of the physics imposter\n   */\n\n\n  PhysicsImpostor.prototype.getRadius = function () {\n    return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getRadius(this) : 0;\n  };\n  /**\n   * Sync a bone with this impostor\n   * @param bone The bone to sync to the impostor.\n   * @param boneMesh The mesh that the bone is influencing.\n   * @param jointPivot The pivot of the joint / bone in local space.\n   * @param distToJoint Optional distance from the impostor to the joint.\n   * @param adjustRotation Optional quaternion for adjusting the local rotation of the bone.\n   */\n\n\n  PhysicsImpostor.prototype.syncBoneWithImpostor = function (bone, boneMesh, jointPivot, distToJoint, adjustRotation) {\n    var tempVec = PhysicsImpostor._TmpVecs[0];\n    var mesh = this.object;\n\n    if (mesh.rotationQuaternion) {\n      if (adjustRotation) {\n        var tempQuat = PhysicsImpostor._TmpQuat;\n        mesh.rotationQuaternion.multiplyToRef(adjustRotation, tempQuat);\n        bone.setRotationQuaternion(tempQuat, Space.WORLD, boneMesh);\n      } else {\n        bone.setRotationQuaternion(mesh.rotationQuaternion, Space.WORLD, boneMesh);\n      }\n    }\n\n    tempVec.x = 0;\n    tempVec.y = 0;\n    tempVec.z = 0;\n\n    if (jointPivot) {\n      tempVec.x = jointPivot.x;\n      tempVec.y = jointPivot.y;\n      tempVec.z = jointPivot.z;\n      bone.getDirectionToRef(tempVec, boneMesh, tempVec);\n\n      if (distToJoint === undefined || distToJoint === null) {\n        distToJoint = jointPivot.length();\n      }\n\n      tempVec.x *= distToJoint;\n      tempVec.y *= distToJoint;\n      tempVec.z *= distToJoint;\n    }\n\n    if (bone.getParent()) {\n      tempVec.addInPlace(mesh.getAbsolutePosition());\n      bone.setAbsolutePosition(tempVec, boneMesh);\n    } else {\n      boneMesh.setAbsolutePosition(mesh.getAbsolutePosition());\n      boneMesh.position.x -= tempVec.x;\n      boneMesh.position.y -= tempVec.y;\n      boneMesh.position.z -= tempVec.z;\n    }\n  };\n  /**\n   * Sync impostor to a bone\n   * @param bone The bone that the impostor will be synced to.\n   * @param boneMesh The mesh that the bone is influencing.\n   * @param jointPivot The pivot of the joint / bone in local space.\n   * @param distToJoint Optional distance from the impostor to the joint.\n   * @param adjustRotation Optional quaternion for adjusting the local rotation of the bone.\n   * @param boneAxis Optional vector3 axis the bone is aligned with\n   */\n\n\n  PhysicsImpostor.prototype.syncImpostorWithBone = function (bone, boneMesh, jointPivot, distToJoint, adjustRotation, boneAxis) {\n    var mesh = this.object;\n\n    if (mesh.rotationQuaternion) {\n      if (adjustRotation) {\n        var tempQuat = PhysicsImpostor._TmpQuat;\n        bone.getRotationQuaternionToRef(Space.WORLD, boneMesh, tempQuat);\n        tempQuat.multiplyToRef(adjustRotation, mesh.rotationQuaternion);\n      } else {\n        bone.getRotationQuaternionToRef(Space.WORLD, boneMesh, mesh.rotationQuaternion);\n      }\n    }\n\n    var pos = PhysicsImpostor._TmpVecs[0];\n    var boneDir = PhysicsImpostor._TmpVecs[1];\n\n    if (!boneAxis) {\n      boneAxis = PhysicsImpostor._TmpVecs[2];\n      boneAxis.x = 0;\n      boneAxis.y = 1;\n      boneAxis.z = 0;\n    }\n\n    bone.getDirectionToRef(boneAxis, boneMesh, boneDir);\n    bone.getAbsolutePositionToRef(boneMesh, pos);\n\n    if ((distToJoint === undefined || distToJoint === null) && jointPivot) {\n      distToJoint = jointPivot.length();\n    }\n\n    if (distToJoint !== undefined && distToJoint !== null) {\n      pos.x += boneDir.x * distToJoint;\n      pos.y += boneDir.y * distToJoint;\n      pos.z += boneDir.z * distToJoint;\n    }\n\n    mesh.setAbsolutePosition(pos);\n  };\n  /**\n   * The default object size of the imposter\n   */\n\n\n  PhysicsImpostor.DEFAULT_OBJECT_SIZE = new Vector3(1, 1, 1);\n  /**\n   * The identity quaternion of the imposter\n   */\n\n  PhysicsImpostor.IDENTITY_QUATERNION = Quaternion.Identity();\n  PhysicsImpostor._TmpVecs = ArrayTools.BuildArray(3, Vector3.Zero);\n  PhysicsImpostor._TmpQuat = Quaternion.Identity(); //Impostor types\n\n  /**\n   * No-Imposter type\n   */\n\n  PhysicsImpostor.NoImpostor = 0;\n  /**\n   * Sphere-Imposter type\n   */\n\n  PhysicsImpostor.SphereImpostor = 1;\n  /**\n   * Box-Imposter type\n   */\n\n  PhysicsImpostor.BoxImpostor = 2;\n  /**\n   * Plane-Imposter type\n   */\n\n  PhysicsImpostor.PlaneImpostor = 3;\n  /**\n   * Mesh-imposter type (Only available to objects with vertices data)\n   */\n\n  PhysicsImpostor.MeshImpostor = 4;\n  /**\n   * Capsule-Impostor type (Ammo.js plugin only)\n   */\n\n  PhysicsImpostor.CapsuleImpostor = 6;\n  /**\n   * Cylinder-Imposter type\n   */\n\n  PhysicsImpostor.CylinderImpostor = 7;\n  /**\n   * Particle-Imposter type\n   */\n\n  PhysicsImpostor.ParticleImpostor = 8;\n  /**\n   * Heightmap-Imposter type\n   */\n\n  PhysicsImpostor.HeightmapImpostor = 9;\n  /**\n   * ConvexHull-Impostor type (Ammo.js plugin only)\n   */\n\n  PhysicsImpostor.ConvexHullImpostor = 10;\n  /**\n   * Custom-Imposter type (Ammo.js plugin only)\n   */\n\n  PhysicsImpostor.CustomImpostor = 100;\n  /**\n   * Rope-Imposter type\n   */\n\n  PhysicsImpostor.RopeImpostor = 101;\n  /**\n   * Cloth-Imposter type\n   */\n\n  PhysicsImpostor.ClothImpostor = 102;\n  /**\n   * Softbody-Imposter type\n   */\n\n  PhysicsImpostor.SoftbodyImpostor = 103;\n  return PhysicsImpostor;\n}();\n\nexport { PhysicsImpostor };","map":{"version":3,"mappings":"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","names":["Logger","ArrayTools","Vector3","Quaternion","AbstractMesh","Mesh","PhysicsJoint","Space","_PhysicsImpostorParser","scene","physicObject","jsonObject","PhysicsImpostor","physicsImpostor","mass","physicsMass","friction","physicsFriction","restitution","physicsRestitution","object","type","_options","_scene","Array","Zero","_this","_physicsEngine","translate","_deltaPosition","_deltaRotationConjugated","rotationQuaternion","multiplyToRef","computeWorldMatrix","parent","getParentsRotation","_tmpQuat","copyFrom","disableBidirectionalTransformation","getPhysicsPlugin","setPhysicsBodyTransformation","getAbsolutePosition","_onBeforePhysicsStepCallbacks","forEach","func","_onAfterPhysicsStepCallbacks","setTransformationFromPhysicsBody","conjugateInPlace","setAbsolutePosition","position","_deltaRotation","e","_onPhysicsCollideCallbacks","length","onCollideEvent","otherImpostor","getImpostorWithPhysicsBody","body","filter","obj","otherImpostors","indexOf","callback","point","Error","Warn","getScene","soft","getPhysicsEngine","rotation","RotationYawPitchRoll","y","x","z","pressure","stiffness","velocityIterations","positionIterations","fixedPoints","margin","damping","path","shape","_joints","ignoreParent","_init","Object","_isDisposed","getBodyMass","value","setMass","getBodyFriction","setBodyFriction","getBodyRestitution","setBodyRestitution","plugin","setBodyPressure","getBodyPressure","getBodyStiffness","setBodyStiffness","getBodyVelocityIterations","setBodyVelocityIterations","getBodyPositionIterations","setBodyPositionIterations","removeImpostor","physicsBody","_parent","_getPhysicsParent","addImpostor","parentMesh","_bodyUpdateRequired","_physicsBody","forceUpdate","removePhysicsBody","resetUpdateFlags","getBoundingInfo","q","scaling","clone","IDENTITY_QUATERNION","worldMatrix","decompose","undefined","boundingInfo","size","boundingBox","extendSize","scale","multiplyInPlace","Math","abs","DEFAULT_OBJECT_SIZE","centerWorld","paramName","getParam","setParam","setBodyMass","getLinearVelocity","velocity","setLinearVelocity","getAngularVelocity","setAngularVelocity","world","push","index","splice","collideAgainst","collidedAgainstList","found","some","cbDef","idx","sameList","every","impostor","copyFromFloats","_tmpQuat2","RotationYawPitchRollToRef","force","contactPoint","applyForce","applyImpulse","jointType","jointData","joint","addJoint","width","height","influence","noCollisionBetweenLinkedBodies","appendAnchor","appendHook","sleepBody","wakeUpBody","newObject","j","removeJoint","conjugate","result","getBoxSizeToRef","getRadius","bone","boneMesh","jointPivot","distToJoint","adjustRotation","tempVec","_TmpVecs","mesh","tempQuat","_TmpQuat","setRotationQuaternion","WORLD","getDirectionToRef","getParent","addInPlace","boneAxis","getRotationQuaternionToRef","pos","boneDir","getAbsolutePositionToRef","Identity","BuildArray"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Physics/physicsImpostor.ts"],"sourcesContent":["import type { Nullable, IndicesArray } from \"../types\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport { ArrayTools } from \"../Misc/arrayTools\";\r\nimport type { Matrix } from \"../Maths/math.vector\";\r\nimport { Vector3, Quaternion } from \"../Maths/math.vector\";\r\nimport type { TransformNode } from \"../Meshes/transformNode\";\r\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Bone } from \"../Bones/bone\";\r\nimport type { BoundingInfo } from \"../Culling/boundingInfo\";\r\nimport type { IPhysicsEngine } from \"./IPhysicsEngine\";\r\nimport type { PhysicsJointData } from \"./physicsJoint\";\r\nimport { PhysicsJoint } from \"./physicsJoint\";\r\nimport { Space } from \"../Maths/math.axis\";\r\n\r\n/**\r\n * The interface for the physics imposter parameters\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\r\nexport interface PhysicsImpostorParameters {\r\n    /**\r\n     * The mass of the physics imposter\r\n     */\r\n    mass: number;\r\n    /**\r\n     * The friction of the physics imposter\r\n     */\r\n    friction?: number;\r\n    /**\r\n     * The coefficient of restitution of the physics imposter\r\n     */\r\n    restitution?: number;\r\n    /**\r\n     * The native options of the physics imposter\r\n     */\r\n    nativeOptions?: any;\r\n    /**\r\n     * Specifies if the parent should be ignored\r\n     */\r\n    ignoreParent?: boolean;\r\n    /**\r\n     * Specifies if bi-directional transformations should be disabled\r\n     */\r\n    disableBidirectionalTransformation?: boolean;\r\n    /**\r\n     * The pressure inside the physics imposter, soft object only\r\n     */\r\n    pressure?: number;\r\n    /**\r\n     * The stiffness the physics imposter, soft object only\r\n     */\r\n    stiffness?: number;\r\n    /**\r\n     * The number of iterations used in maintaining consistent vertex velocities, soft object only\r\n     */\r\n    velocityIterations?: number;\r\n    /**\r\n     * The number of iterations used in maintaining consistent vertex positions, soft object only\r\n     */\r\n    positionIterations?: number;\r\n    /**\r\n     * The number used to fix points on a cloth (0, 1, 2, 4, 8) or rope (0, 1, 2) only\r\n     * 0 None, 1, back left or top, 2, back right or bottom, 4, front left, 8, front right\r\n     * Add to fix multiple points\r\n     */\r\n    fixedPoints?: number;\r\n    /**\r\n     * The collision margin around a soft object\r\n     */\r\n    margin?: number;\r\n    /**\r\n     * The collision margin around a soft object\r\n     */\r\n    damping?: number;\r\n    /**\r\n     * The path for a rope based on an extrusion\r\n     */\r\n    path?: any;\r\n    /**\r\n     * The shape of an extrusion used for a rope based on an extrusion\r\n     */\r\n    shape?: any;\r\n}\r\n\r\n/**\r\n * Interface for a physics-enabled object\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\r\nexport interface IPhysicsEnabledObject {\r\n    /**\r\n     * The position of the physics-enabled object\r\n     */\r\n    position: Vector3;\r\n    /**\r\n     * The rotation of the physics-enabled object\r\n     */\r\n    rotationQuaternion: Nullable<Quaternion>;\r\n    /**\r\n     * The scale of the physics-enabled object\r\n     */\r\n    scaling: Vector3;\r\n    /**\r\n     * The rotation of the physics-enabled object\r\n     */\r\n    rotation?: Vector3;\r\n    /**\r\n     * The parent of the physics-enabled object\r\n     */\r\n    parent?: any;\r\n    /**\r\n     * The bounding info of the physics-enabled object\r\n     * @returns The bounding info of the physics-enabled object\r\n     */\r\n    getBoundingInfo(): BoundingInfo;\r\n    /**\r\n     * Computes the world matrix\r\n     * @param force Specifies if the world matrix should be computed by force\r\n     * @returns A world matrix\r\n     */\r\n    computeWorldMatrix(force: boolean): Matrix;\r\n    /**\r\n     * Gets the world matrix\r\n     * @returns A world matrix\r\n     */\r\n    getWorldMatrix?(): Matrix;\r\n    /**\r\n     * Gets the child meshes\r\n     * @param directDescendantsOnly Specifies if only direct-descendants should be obtained\r\n     * @returns An array of abstract meshes\r\n     */\r\n    getChildMeshes?(directDescendantsOnly?: boolean): Array<AbstractMesh>;\r\n    /**\r\n     * Gets the vertex data\r\n     * @param kind The type of vertex data\r\n     * @returns A nullable array of numbers, or a float32 array\r\n     */\r\n    getVerticesData(kind: string): Nullable<Array<number> | Float32Array>;\r\n    /**\r\n     * Gets the indices from the mesh\r\n     * @returns A nullable array of index arrays\r\n     */\r\n    getIndices?(): Nullable<IndicesArray>;\r\n    /**\r\n     * Gets the scene from the mesh\r\n     * @returns the indices array or null\r\n     */\r\n    getScene?(): Scene;\r\n    /**\r\n     * Gets the absolute position from the mesh\r\n     * @returns the absolute position\r\n     */\r\n    getAbsolutePosition(): Vector3;\r\n    /**\r\n     * Gets the absolute pivot point from the mesh\r\n     * @returns the absolute pivot point\r\n     */\r\n    getAbsolutePivotPoint(): Vector3;\r\n    /**\r\n     * Rotates the mesh\r\n     * @param axis The axis of rotation\r\n     * @param amount The amount of rotation\r\n     * @param space The space of the rotation\r\n     * @returns The rotation transform node\r\n     */\r\n    rotate(axis: Vector3, amount: number, space?: Space): TransformNode;\r\n    /**\r\n     * Translates the mesh\r\n     * @param axis The axis of translation\r\n     * @param distance The distance of translation\r\n     * @param space The space of the translation\r\n     * @returns The transform node\r\n     */\r\n    translate(axis: Vector3, distance: number, space?: Space): TransformNode;\r\n    /**\r\n     * Sets the absolute position of the mesh\r\n     * @param absolutePosition The absolute position of the mesh\r\n     * @returns The transform node\r\n     */\r\n    setAbsolutePosition(absolutePosition: Vector3): TransformNode;\r\n    /**\r\n     * Gets the class name of the mesh\r\n     * @returns The class name\r\n     */\r\n    getClassName(): string;\r\n}\r\n\r\nMesh._PhysicsImpostorParser = function (scene: Scene, physicObject: IPhysicsEnabledObject, jsonObject: any): PhysicsImpostor {\r\n    return new PhysicsImpostor(\r\n        physicObject,\r\n        jsonObject.physicsImpostor,\r\n        {\r\n            mass: jsonObject.physicsMass,\r\n            friction: jsonObject.physicsFriction,\r\n            restitution: jsonObject.physicsRestitution,\r\n        },\r\n        scene\r\n    );\r\n};\r\n\r\n/**\r\n * Represents a physics imposter\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\r\nexport class PhysicsImpostor {\r\n    /**\r\n     * The default object size of the imposter\r\n     */\r\n    public static DEFAULT_OBJECT_SIZE: Vector3 = new Vector3(1, 1, 1);\r\n\r\n    /**\r\n     * The identity quaternion of the imposter\r\n     */\r\n    public static IDENTITY_QUATERNION = Quaternion.Identity();\r\n\r\n    /** @hidden */\r\n    public _pluginData: any = {};\r\n\r\n    private _physicsEngine: Nullable<IPhysicsEngine>;\r\n    //The native cannon/oimo/energy physics body object.\r\n    private _physicsBody: any;\r\n    private _bodyUpdateRequired: boolean = false;\r\n\r\n    private _onBeforePhysicsStepCallbacks = new Array<(impostor: PhysicsImpostor) => void>();\r\n    private _onAfterPhysicsStepCallbacks = new Array<(impostor: PhysicsImpostor) => void>();\r\n    /** @hidden */\r\n    public _onPhysicsCollideCallbacks: Array<{\r\n        callback: (collider: PhysicsImpostor, collidedAgainst: PhysicsImpostor, point: Nullable<Vector3>) => void;\r\n        otherImpostors: Array<PhysicsImpostor>;\r\n    }> = [];\r\n\r\n    private _deltaPosition: Vector3 = Vector3.Zero();\r\n    private _deltaRotation: Quaternion;\r\n    private _deltaRotationConjugated: Quaternion;\r\n\r\n    /** @hidden */\r\n    public _isFromLine: boolean;\r\n\r\n    //If set, this is this impostor's parent\r\n    private _parent: Nullable<PhysicsImpostor>;\r\n\r\n    private _isDisposed = false;\r\n\r\n    private static _TmpVecs: Vector3[] = ArrayTools.BuildArray(3, Vector3.Zero);\r\n    private static _TmpQuat: Quaternion = Quaternion.Identity();\r\n\r\n    /**\r\n     * Specifies if the physics imposter is disposed\r\n     */\r\n    get isDisposed(): boolean {\r\n        return this._isDisposed;\r\n    }\r\n\r\n    /**\r\n     * Gets the mass of the physics imposter\r\n     */\r\n    get mass(): number {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyMass(this) : 0;\r\n    }\r\n\r\n    set mass(value: number) {\r\n        this.setMass(value);\r\n    }\r\n\r\n    /**\r\n     * Gets the coefficient of friction\r\n     */\r\n    get friction(): number {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyFriction(this) : 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the coefficient of friction\r\n     */\r\n    set friction(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        this._physicsEngine.getPhysicsPlugin().setBodyFriction(this, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the coefficient of restitution\r\n     */\r\n    get restitution(): number {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getBodyRestitution(this) : 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the coefficient of restitution\r\n     */\r\n    set restitution(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        this._physicsEngine.getPhysicsPlugin().setBodyRestitution(this, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the pressure of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    get pressure(): number {\r\n        if (!this._physicsEngine) {\r\n            return 0;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.setBodyPressure) {\r\n            return 0;\r\n        }\r\n        return plugin.getBodyPressure!(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the pressure of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    set pressure(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.setBodyPressure) {\r\n            return;\r\n        }\r\n        plugin.setBodyPressure!(this, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the stiffness of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    get stiffness(): number {\r\n        if (!this._physicsEngine) {\r\n            return 0;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.getBodyStiffness) {\r\n            return 0;\r\n        }\r\n        return plugin.getBodyStiffness!(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the stiffness of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    set stiffness(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.setBodyStiffness) {\r\n            return;\r\n        }\r\n        plugin.setBodyStiffness!(this, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the velocityIterations of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    get velocityIterations(): number {\r\n        if (!this._physicsEngine) {\r\n            return 0;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.getBodyVelocityIterations) {\r\n            return 0;\r\n        }\r\n        return plugin.getBodyVelocityIterations!(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the velocityIterations of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    set velocityIterations(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.setBodyVelocityIterations) {\r\n            return;\r\n        }\r\n        plugin.setBodyVelocityIterations!(this, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the positionIterations of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    get positionIterations(): number {\r\n        if (!this._physicsEngine) {\r\n            return 0;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.getBodyPositionIterations) {\r\n            return 0;\r\n        }\r\n        return plugin.getBodyPositionIterations!(this);\r\n    }\r\n\r\n    /**\r\n     * Sets the positionIterations of a soft body; only supported by the AmmoJSPlugin\r\n     */\r\n    set positionIterations(value: number) {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.setBodyPositionIterations) {\r\n            return;\r\n        }\r\n        plugin.setBodyPositionIterations!(this, value);\r\n    }\r\n\r\n    /**\r\n     * The unique id of the physics imposter\r\n     * set by the physics engine when adding this impostor to the array\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    public soft: boolean = false;\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    public segments: number = 0;\r\n\r\n    private _joints: Array<{\r\n        joint: PhysicsJoint;\r\n        otherImpostor: PhysicsImpostor;\r\n    }>;\r\n\r\n    /**\r\n     * Initializes the physics imposter\r\n     * @param object The physics-enabled object used as the physics imposter\r\n     * @param type The type of the physics imposter. Types are available as static members of this class.\r\n     * @param _options The options for the physics imposter\r\n     * @param _scene The Babylon scene\r\n     */\r\n    constructor(\r\n        /**\r\n         * The physics-enabled object used as the physics imposter\r\n         */\r\n        public object: IPhysicsEnabledObject,\r\n        /**\r\n         * The type of the physics imposter\r\n         */\r\n        public type: number,\r\n        private _options: PhysicsImpostorParameters = { mass: 0 },\r\n        private _scene?: Scene\r\n    ) {\r\n        //sanity check!\r\n        if (!this.object) {\r\n            Logger.Error(\"No object was provided. A physics object is obligatory\");\r\n            return;\r\n        }\r\n        if (this.object.parent && _options.mass !== 0) {\r\n            Logger.Warn(\"A physics impostor has been created for an object which has a parent. Babylon physics currently works in local space so unexpected issues may occur.\");\r\n        }\r\n\r\n        // Legacy support for old syntax.\r\n        if (!this._scene && object.getScene) {\r\n            this._scene = object.getScene();\r\n        }\r\n\r\n        if (!this._scene) {\r\n            return;\r\n        }\r\n\r\n        if (this.type > 100) {\r\n            this.soft = true;\r\n        }\r\n\r\n        this._physicsEngine = this._scene.getPhysicsEngine();\r\n        if (!this._physicsEngine) {\r\n            Logger.Error(\"Physics not enabled. Please use scene.enablePhysics(...) before creating impostors.\");\r\n        } else {\r\n            //set the object's quaternion, if not set\r\n            if (!this.object.rotationQuaternion) {\r\n                if (this.object.rotation) {\r\n                    this.object.rotationQuaternion = Quaternion.RotationYawPitchRoll(this.object.rotation.y, this.object.rotation.x, this.object.rotation.z);\r\n                } else {\r\n                    this.object.rotationQuaternion = new Quaternion();\r\n                }\r\n            }\r\n            //default options params\r\n            this._options.mass = _options.mass === void 0 ? 0 : _options.mass;\r\n            this._options.friction = _options.friction === void 0 ? 0.2 : _options.friction;\r\n            this._options.restitution = _options.restitution === void 0 ? 0.2 : _options.restitution;\r\n            if (this.soft) {\r\n                //softbody mass must be above 0;\r\n                this._options.mass = this._options.mass > 0 ? this._options.mass : 1;\r\n                this._options.pressure = _options.pressure === void 0 ? 200 : _options.pressure;\r\n                this._options.stiffness = _options.stiffness === void 0 ? 1 : _options.stiffness;\r\n                this._options.velocityIterations = _options.velocityIterations === void 0 ? 20 : _options.velocityIterations;\r\n                this._options.positionIterations = _options.positionIterations === void 0 ? 20 : _options.positionIterations;\r\n                this._options.fixedPoints = _options.fixedPoints === void 0 ? 0 : _options.fixedPoints;\r\n                this._options.margin = _options.margin === void 0 ? 0 : _options.margin;\r\n                this._options.damping = _options.damping === void 0 ? 0 : _options.damping;\r\n                this._options.path = _options.path === void 0 ? null : _options.path;\r\n                this._options.shape = _options.shape === void 0 ? null : _options.shape;\r\n            }\r\n            this._joints = [];\r\n            //If the mesh has a parent, don't initialize the physicsBody. Instead wait for the parent to do that.\r\n            if (!this.object.parent || this._options.ignoreParent) {\r\n                this._init();\r\n            } else if (this.object.parent.physicsImpostor) {\r\n                Logger.Warn(\"You must affect impostors to children before affecting impostor to parent.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function will completely initialize this impostor.\r\n     * It will create a new body - but only if this mesh has no parent.\r\n     * If it has, this impostor will not be used other than to define the impostor\r\n     * of the child mesh.\r\n     * @hidden\r\n     */\r\n    public _init() {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n\r\n        this._physicsEngine.removeImpostor(this);\r\n        this.physicsBody = null;\r\n        this._parent = this._parent || this._getPhysicsParent();\r\n        if (!this._isDisposed && (!this.parent || this._options.ignoreParent)) {\r\n            this._physicsEngine.addImpostor(this);\r\n        }\r\n    }\r\n\r\n    private _getPhysicsParent(): Nullable<PhysicsImpostor> {\r\n        if (this.object.parent instanceof AbstractMesh) {\r\n            const parentMesh: AbstractMesh = <AbstractMesh>this.object.parent;\r\n            return parentMesh.physicsImpostor;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Should a new body be generated.\r\n     * @returns boolean specifying if body initialization is required\r\n     */\r\n    public isBodyInitRequired(): boolean {\r\n        return this._bodyUpdateRequired || (!this._physicsBody && (!this._parent || !!this._options.ignoreParent));\r\n    }\r\n\r\n    /**\r\n     * Sets the updated scaling\r\n     */\r\n    public setScalingUpdated() {\r\n        this.forceUpdate();\r\n    }\r\n\r\n    /**\r\n     * Force a regeneration of this or the parent's impostor's body.\r\n     * Use under cautious - This will remove all joints already implemented.\r\n     */\r\n    public forceUpdate() {\r\n        this._init();\r\n        if (this.parent && !this._options.ignoreParent) {\r\n            this.parent.forceUpdate();\r\n        }\r\n    }\r\n\r\n    /*public get mesh(): AbstractMesh {\r\n        return this._mesh;\r\n    }*/\r\n\r\n    /**\r\n     * Gets the body that holds this impostor. Either its own, or its parent.\r\n     */\r\n    public get physicsBody(): any {\r\n        return this._parent && !this._options.ignoreParent ? this._parent.physicsBody : this._physicsBody;\r\n    }\r\n\r\n    /**\r\n     * Get the parent of the physics imposter\r\n     * @returns Physics imposter or null\r\n     */\r\n    public get parent(): Nullable<PhysicsImpostor> {\r\n        return !this._options.ignoreParent && this._parent ? this._parent : null;\r\n    }\r\n\r\n    /**\r\n     * Sets the parent of the physics imposter\r\n     */\r\n    public set parent(value: Nullable<PhysicsImpostor>) {\r\n        this._parent = value;\r\n    }\r\n\r\n    /**\r\n     * Set the physics body. Used mainly by the physics engine/plugin\r\n     */\r\n    public set physicsBody(physicsBody: any) {\r\n        if (this._physicsBody && this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().removePhysicsBody(this);\r\n        }\r\n        this._physicsBody = physicsBody;\r\n        this.resetUpdateFlags();\r\n    }\r\n\r\n    /**\r\n     * Resets the update flags\r\n     */\r\n    public resetUpdateFlags() {\r\n        this._bodyUpdateRequired = false;\r\n    }\r\n\r\n    /**\r\n     * Gets the object extend size\r\n     * @returns the object extend size\r\n     */\r\n    public getObjectExtendSize(): Vector3 {\r\n        if (this.object.getBoundingInfo) {\r\n            const q = this.object.rotationQuaternion;\r\n            const scaling = this.object.scaling.clone();\r\n            //reset rotation\r\n            this.object.rotationQuaternion = PhysicsImpostor.IDENTITY_QUATERNION;\r\n            //calculate the world matrix with no rotation\r\n            const worldMatrix = this.object.computeWorldMatrix && this.object.computeWorldMatrix(true);\r\n            if (worldMatrix) {\r\n                worldMatrix.decompose(scaling, undefined, undefined);\r\n            }\r\n            const boundingInfo = this.object.getBoundingInfo();\r\n            // get the global scaling of the object\r\n            const size = boundingInfo.boundingBox.extendSize.scale(2).multiplyInPlace(scaling);\r\n            size.x = Math.abs(size.x);\r\n            size.y = Math.abs(size.y);\r\n            size.z = Math.abs(size.z);\r\n            //bring back the rotation\r\n            this.object.rotationQuaternion = q;\r\n            //calculate the world matrix with the new rotation\r\n            this.object.computeWorldMatrix && this.object.computeWorldMatrix(true);\r\n            return size;\r\n        } else {\r\n            return PhysicsImpostor.DEFAULT_OBJECT_SIZE;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the object center\r\n     * @returns The object center\r\n     */\r\n    public getObjectCenter(): Vector3 {\r\n        if (this.object.getBoundingInfo) {\r\n            const boundingInfo = this.object.getBoundingInfo();\r\n            return boundingInfo.boundingBox.centerWorld;\r\n        } else {\r\n            return this.object.position;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get a specific parameter from the options parameters\r\n     * @param paramName The object parameter name\r\n     * @returns The object parameter\r\n     */\r\n    public getParam(paramName: string): any {\r\n        return (<any>this._options)[paramName];\r\n    }\r\n\r\n    /**\r\n     * Sets a specific parameter in the options given to the physics plugin\r\n     * @param paramName The parameter name\r\n     * @param value The value of the parameter\r\n     */\r\n    public setParam(paramName: string, value: number) {\r\n        (<any>this._options)[paramName] = value;\r\n        this._bodyUpdateRequired = true;\r\n    }\r\n\r\n    /**\r\n     * Specifically change the body's mass option. Won't recreate the physics body object\r\n     * @param mass The mass of the physics imposter\r\n     */\r\n    public setMass(mass: number) {\r\n        if (this.getParam(\"mass\") !== mass) {\r\n            this.setParam(\"mass\", mass);\r\n        }\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().setBodyMass(this, mass);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the linear velocity\r\n     * @returns  linear velocity or null\r\n     */\r\n    public getLinearVelocity(): Nullable<Vector3> {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getLinearVelocity(this) : Vector3.Zero();\r\n    }\r\n\r\n    /**\r\n     * Sets the linear velocity\r\n     * @param velocity  linear velocity or null\r\n     */\r\n    public setLinearVelocity(velocity: Nullable<Vector3>) {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().setLinearVelocity(this, velocity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the angular velocity\r\n     * @returns angular velocity or null\r\n     */\r\n    public getAngularVelocity(): Nullable<Vector3> {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getAngularVelocity(this) : Vector3.Zero();\r\n    }\r\n\r\n    /**\r\n     * Sets the angular velocity\r\n     * @param velocity The velocity or null\r\n     */\r\n    public setAngularVelocity(velocity: Nullable<Vector3>) {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().setAngularVelocity(this, velocity);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute a function with the physics plugin native code\r\n     * Provide a function the will have two variables - the world object and the physics body object\r\n     * @param func The function to execute with the physics plugin native code\r\n     */\r\n\r\n    public executeNativeFunction(func: (world: any, physicsBody: any) => void) {\r\n        if (this._physicsEngine) {\r\n            func(this._physicsEngine.getPhysicsPlugin().world, this.physicsBody);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Register a function that will be executed before the physics world is stepping forward\r\n     * @param func The function to execute before the physics world is stepped forward\r\n     */\r\n    public registerBeforePhysicsStep(func: (impostor: PhysicsImpostor) => void): void {\r\n        this._onBeforePhysicsStepCallbacks.push(func);\r\n    }\r\n\r\n    /**\r\n     * Unregister a function that will be executed before the physics world is stepping forward\r\n     * @param func The function to execute before the physics world is stepped forward\r\n     */\r\n    public unregisterBeforePhysicsStep(func: (impostor: PhysicsImpostor) => void): void {\r\n        const index = this._onBeforePhysicsStepCallbacks.indexOf(func);\r\n\r\n        if (index > -1) {\r\n            this._onBeforePhysicsStepCallbacks.splice(index, 1);\r\n        } else {\r\n            Logger.Warn(\"Function to remove was not found\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Register a function that will be executed after the physics step\r\n     * @param func The function to execute after physics step\r\n     */\r\n    public registerAfterPhysicsStep(func: (impostor: PhysicsImpostor) => void): void {\r\n        this._onAfterPhysicsStepCallbacks.push(func);\r\n    }\r\n\r\n    /**\r\n     * Unregisters a function that will be executed after the physics step\r\n     * @param func The function to execute after physics step\r\n     */\r\n    public unregisterAfterPhysicsStep(func: (impostor: PhysicsImpostor) => void): void {\r\n        const index = this._onAfterPhysicsStepCallbacks.indexOf(func);\r\n\r\n        if (index > -1) {\r\n            this._onAfterPhysicsStepCallbacks.splice(index, 1);\r\n        } else {\r\n            Logger.Warn(\"Function to remove was not found\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * register a function that will be executed when this impostor collides against a different body\r\n     * @param collideAgainst Physics imposter, or array of physics imposters to collide against\r\n     * @param func Callback that is executed on collision\r\n     */\r\n    public registerOnPhysicsCollide(\r\n        collideAgainst: PhysicsImpostor | Array<PhysicsImpostor>,\r\n        func: (collider: PhysicsImpostor, collidedAgainst: PhysicsImpostor, point: Nullable<Vector3>) => void\r\n    ): void {\r\n        const collidedAgainstList: Array<PhysicsImpostor> = collideAgainst instanceof Array ? <Array<PhysicsImpostor>>collideAgainst : [<PhysicsImpostor>collideAgainst];\r\n        this._onPhysicsCollideCallbacks.push({ callback: func, otherImpostors: collidedAgainstList });\r\n    }\r\n\r\n    /**\r\n     * Unregisters the physics imposter on contact\r\n     * @param collideAgainst The physics object to collide against\r\n     * @param func Callback to execute on collision\r\n     */\r\n    public unregisterOnPhysicsCollide(\r\n        collideAgainst: PhysicsImpostor | Array<PhysicsImpostor>,\r\n        func: (collider: PhysicsImpostor, collidedAgainst: PhysicsImpostor | Array<PhysicsImpostor>, point: Nullable<Vector3>) => void\r\n    ): void {\r\n        const collidedAgainstList: Array<PhysicsImpostor> = collideAgainst instanceof Array ? <Array<PhysicsImpostor>>collideAgainst : [<PhysicsImpostor>collideAgainst];\r\n        let index = -1;\r\n        const found = this._onPhysicsCollideCallbacks.some((cbDef, idx) => {\r\n            if (cbDef.callback === func && cbDef.otherImpostors.length === collidedAgainstList.length) {\r\n                // chcek the arrays match\r\n                const sameList = cbDef.otherImpostors.every((impostor) => {\r\n                    return collidedAgainstList.indexOf(impostor) > -1;\r\n                });\r\n                if (sameList) {\r\n                    index = idx;\r\n                }\r\n                return sameList;\r\n            }\r\n            return false;\r\n        });\r\n\r\n        if (found) {\r\n            this._onPhysicsCollideCallbacks.splice(index, 1);\r\n        } else {\r\n            Logger.Warn(\"Function to remove was not found\");\r\n        }\r\n    }\r\n\r\n    //temp variables for parent rotation calculations\r\n    //private _mats: Array<Matrix> = [new Matrix(), new Matrix()];\r\n    private _tmpQuat: Quaternion = new Quaternion();\r\n    private _tmpQuat2: Quaternion = new Quaternion();\r\n\r\n    /**\r\n     * Get the parent rotation\r\n     * @returns The parent rotation\r\n     */\r\n    public getParentsRotation(): Quaternion {\r\n        let parent = this.object.parent;\r\n        this._tmpQuat.copyFromFloats(0, 0, 0, 1);\r\n        while (parent) {\r\n            if (parent.rotationQuaternion) {\r\n                this._tmpQuat2.copyFrom(parent.rotationQuaternion);\r\n            } else {\r\n                Quaternion.RotationYawPitchRollToRef(parent.rotation.y, parent.rotation.x, parent.rotation.z, this._tmpQuat2);\r\n            }\r\n            this._tmpQuat.multiplyToRef(this._tmpQuat2, this._tmpQuat);\r\n            parent = parent.parent;\r\n        }\r\n        return this._tmpQuat;\r\n    }\r\n\r\n    /**\r\n     * this function is executed by the physics engine.\r\n     */\r\n    public beforeStep = () => {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n\r\n        this.object.translate(this._deltaPosition, -1);\r\n        this._deltaRotationConjugated &&\r\n            this.object.rotationQuaternion &&\r\n            this.object.rotationQuaternion.multiplyToRef(this._deltaRotationConjugated, this.object.rotationQuaternion);\r\n        this.object.computeWorldMatrix(false);\r\n        if (this.object.parent && this.object.rotationQuaternion) {\r\n            this.getParentsRotation();\r\n            this._tmpQuat.multiplyToRef(this.object.rotationQuaternion, this._tmpQuat);\r\n        } else {\r\n            this._tmpQuat.copyFrom(this.object.rotationQuaternion || new Quaternion());\r\n        }\r\n        if (!this._options.disableBidirectionalTransformation) {\r\n            this.object.rotationQuaternion &&\r\n                this._physicsEngine.getPhysicsPlugin().setPhysicsBodyTransformation(this, /*bInfo.boundingBox.centerWorld*/ this.object.getAbsolutePosition(), this._tmpQuat);\r\n        }\r\n\r\n        this._onBeforePhysicsStepCallbacks.forEach((func) => {\r\n            func(this);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * this function is executed by the physics engine\r\n     */\r\n    public afterStep = () => {\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n\r\n        this._onAfterPhysicsStepCallbacks.forEach((func) => {\r\n            func(this);\r\n        });\r\n\r\n        this._physicsEngine.getPhysicsPlugin().setTransformationFromPhysicsBody(this);\r\n        // object has now its world rotation. needs to be converted to local.\r\n        if (this.object.parent && this.object.rotationQuaternion) {\r\n            this.getParentsRotation();\r\n            this._tmpQuat.conjugateInPlace();\r\n            this._tmpQuat.multiplyToRef(this.object.rotationQuaternion, this.object.rotationQuaternion);\r\n        }\r\n        // take the position set and make it the absolute position of this object.\r\n        this.object.setAbsolutePosition(this.object.position);\r\n        this._deltaRotation && this.object.rotationQuaternion && this.object.rotationQuaternion.multiplyToRef(this._deltaRotation, this.object.rotationQuaternion);\r\n        this.object.translate(this._deltaPosition, 1);\r\n    };\r\n\r\n    /**\r\n     * Legacy collision detection event support\r\n     */\r\n    public onCollideEvent: Nullable<(collider: PhysicsImpostor, collidedWith: PhysicsImpostor) => void> = null;\r\n\r\n    /**\r\n     * event and body object due to cannon's event-based architecture.\r\n     * @param e\r\n     * @param e.body\r\n     * @param e.point\r\n     */\r\n    public onCollide = (e: { body: any; point: Nullable<Vector3> }) => {\r\n        if (!this._onPhysicsCollideCallbacks.length && !this.onCollideEvent) {\r\n            return;\r\n        }\r\n\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n        const otherImpostor = this._physicsEngine.getImpostorWithPhysicsBody(e.body);\r\n        if (otherImpostor) {\r\n            // Legacy collision detection event support\r\n            if (this.onCollideEvent) {\r\n                this.onCollideEvent(this, otherImpostor);\r\n            }\r\n            this._onPhysicsCollideCallbacks\r\n                .filter((obj) => {\r\n                    return obj.otherImpostors.indexOf(<PhysicsImpostor>otherImpostor) !== -1;\r\n                })\r\n                .forEach((obj) => {\r\n                    obj.callback(this, <PhysicsImpostor>otherImpostor, e.point);\r\n                });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Apply a force\r\n     * @param force The force to apply\r\n     * @param contactPoint The contact point for the force\r\n     * @returns The physics imposter\r\n     */\r\n    public applyForce(force: Vector3, contactPoint: Vector3): PhysicsImpostor {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().applyForce(this, force, contactPoint);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Apply an impulse\r\n     * @param force The impulse force\r\n     * @param contactPoint The contact point for the impulse force\r\n     * @returns The physics imposter\r\n     */\r\n    public applyImpulse(force: Vector3, contactPoint: Vector3): PhysicsImpostor {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().applyImpulse(this, force, contactPoint);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * A help function to create a joint\r\n     * @param otherImpostor A physics imposter used to create a joint\r\n     * @param jointType The type of joint\r\n     * @param jointData The data for the joint\r\n     * @returns The physics imposter\r\n     */\r\n    public createJoint(otherImpostor: PhysicsImpostor, jointType: number, jointData: PhysicsJointData): PhysicsImpostor {\r\n        const joint = new PhysicsJoint(jointType, jointData);\r\n        this.addJoint(otherImpostor, joint);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add a joint to this impostor with a different impostor\r\n     * @param otherImpostor A physics imposter used to add a joint\r\n     * @param joint The joint to add\r\n     * @returns The physics imposter\r\n     */\r\n    public addJoint(otherImpostor: PhysicsImpostor, joint: PhysicsJoint): PhysicsImpostor {\r\n        this._joints.push({\r\n            otherImpostor: otherImpostor,\r\n            joint: joint,\r\n        });\r\n\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.addJoint(this, otherImpostor, joint);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add an anchor to a cloth impostor\r\n     * @param otherImpostor rigid impostor to anchor to\r\n     * @param width ratio across width from 0 to 1\r\n     * @param height ratio up height from 0 to 1\r\n     * @param influence the elasticity between cloth impostor and anchor from 0, very stretchy to 1, little stretch\r\n     * @param noCollisionBetweenLinkedBodies when true collisions between cloth impostor and anchor are ignored; default false\r\n     * @returns impostor the soft imposter\r\n     */\r\n    public addAnchor(otherImpostor: PhysicsImpostor, width: number, height: number, influence: number, noCollisionBetweenLinkedBodies: boolean): PhysicsImpostor {\r\n        if (!this._physicsEngine) {\r\n            return this;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.appendAnchor) {\r\n            return this;\r\n        }\r\n        if (this._physicsEngine) {\r\n            plugin.appendAnchor!(this, otherImpostor, width, height, influence, noCollisionBetweenLinkedBodies);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add a hook to a rope impostor\r\n     * @param otherImpostor rigid impostor to anchor to\r\n     * @param length ratio across rope from 0 to 1\r\n     * @param influence the elasticity between rope impostor and anchor from 0, very stretchy to 1, little stretch\r\n     * @param noCollisionBetweenLinkedBodies when true collisions between soft impostor and anchor are ignored; default false\r\n     * @returns impostor the rope imposter\r\n     */\r\n    public addHook(otherImpostor: PhysicsImpostor, length: number, influence: number, noCollisionBetweenLinkedBodies: boolean): PhysicsImpostor {\r\n        if (!this._physicsEngine) {\r\n            return this;\r\n        }\r\n        const plugin = this._physicsEngine.getPhysicsPlugin();\r\n        if (!plugin.appendAnchor) {\r\n            return this;\r\n        }\r\n        if (this._physicsEngine) {\r\n            plugin.appendHook!(this, otherImpostor, length, influence, noCollisionBetweenLinkedBodies);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Will keep this body still, in a sleep mode.\r\n     * @returns the physics imposter\r\n     */\r\n    public sleep(): PhysicsImpostor {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().sleepBody(this);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Wake the body up.\r\n     * @returns The physics imposter\r\n     */\r\n    public wakeUp(): PhysicsImpostor {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().wakeUpBody(this);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clones the physics imposter\r\n     * @param newObject The physics imposter clones to this physics-enabled object\r\n     * @returns A nullable physics imposter\r\n     */\r\n    public clone(newObject: IPhysicsEnabledObject): Nullable<PhysicsImpostor> {\r\n        if (!newObject) {\r\n            return null;\r\n        }\r\n        return new PhysicsImpostor(newObject, this.type, this._options, this._scene);\r\n    }\r\n\r\n    /**\r\n     * Disposes the physics imposter\r\n     */\r\n    public dispose(/*disposeChildren: boolean = true*/) {\r\n        //no dispose if no physics engine is available.\r\n        if (!this._physicsEngine) {\r\n            return;\r\n        }\r\n\r\n        this._joints.forEach((j) => {\r\n            if (this._physicsEngine) {\r\n                this._physicsEngine.removeJoint(this, j.otherImpostor, j.joint);\r\n            }\r\n        });\r\n        //dispose the physics body\r\n        this._physicsEngine.removeImpostor(this);\r\n        if (this.parent) {\r\n            this.parent.forceUpdate();\r\n        } else {\r\n            /*this._object.getChildMeshes().forEach(function(mesh) {\r\n                if (mesh.physicsImpostor) {\r\n                    if (disposeChildren) {\r\n                        mesh.physicsImpostor.dispose();\r\n                        mesh.physicsImpostor = null;\r\n                    }\r\n                }\r\n            })*/\r\n        }\r\n\r\n        this._isDisposed = true;\r\n    }\r\n\r\n    /**\r\n     * Sets the delta position\r\n     * @param position The delta position amount\r\n     */\r\n    public setDeltaPosition(position: Vector3) {\r\n        this._deltaPosition.copyFrom(position);\r\n    }\r\n\r\n    /**\r\n     * Sets the delta rotation\r\n     * @param rotation The delta rotation amount\r\n     */\r\n    public setDeltaRotation(rotation: Quaternion) {\r\n        if (!this._deltaRotation) {\r\n            this._deltaRotation = new Quaternion();\r\n        }\r\n        this._deltaRotation.copyFrom(rotation);\r\n        this._deltaRotationConjugated = this._deltaRotation.conjugate();\r\n    }\r\n\r\n    /**\r\n     * Gets the box size of the physics imposter and stores the result in the input parameter\r\n     * @param result Stores the box size\r\n     * @returns The physics imposter\r\n     */\r\n    public getBoxSizeToRef(result: Vector3): PhysicsImpostor {\r\n        if (this._physicsEngine) {\r\n            this._physicsEngine.getPhysicsPlugin().getBoxSizeToRef(this, result);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the radius of the physics imposter\r\n     * @returns Radius of the physics imposter\r\n     */\r\n    public getRadius(): number {\r\n        return this._physicsEngine ? this._physicsEngine.getPhysicsPlugin().getRadius(this) : 0;\r\n    }\r\n\r\n    /**\r\n     * Sync a bone with this impostor\r\n     * @param bone The bone to sync to the impostor.\r\n     * @param boneMesh The mesh that the bone is influencing.\r\n     * @param jointPivot The pivot of the joint / bone in local space.\r\n     * @param distToJoint Optional distance from the impostor to the joint.\r\n     * @param adjustRotation Optional quaternion for adjusting the local rotation of the bone.\r\n     */\r\n    public syncBoneWithImpostor(bone: Bone, boneMesh: AbstractMesh, jointPivot: Vector3, distToJoint?: number, adjustRotation?: Quaternion) {\r\n        const tempVec = PhysicsImpostor._TmpVecs[0];\r\n        const mesh = <AbstractMesh>this.object;\r\n\r\n        if (mesh.rotationQuaternion) {\r\n            if (adjustRotation) {\r\n                const tempQuat = PhysicsImpostor._TmpQuat;\r\n                mesh.rotationQuaternion.multiplyToRef(adjustRotation, tempQuat);\r\n                bone.setRotationQuaternion(tempQuat, Space.WORLD, boneMesh);\r\n            } else {\r\n                bone.setRotationQuaternion(mesh.rotationQuaternion, Space.WORLD, boneMesh);\r\n            }\r\n        }\r\n\r\n        tempVec.x = 0;\r\n        tempVec.y = 0;\r\n        tempVec.z = 0;\r\n\r\n        if (jointPivot) {\r\n            tempVec.x = jointPivot.x;\r\n            tempVec.y = jointPivot.y;\r\n            tempVec.z = jointPivot.z;\r\n\r\n            bone.getDirectionToRef(tempVec, boneMesh, tempVec);\r\n\r\n            if (distToJoint === undefined || distToJoint === null) {\r\n                distToJoint = jointPivot.length();\r\n            }\r\n\r\n            tempVec.x *= distToJoint;\r\n            tempVec.y *= distToJoint;\r\n            tempVec.z *= distToJoint;\r\n        }\r\n\r\n        if (bone.getParent()) {\r\n            tempVec.addInPlace(mesh.getAbsolutePosition());\r\n            bone.setAbsolutePosition(tempVec, boneMesh);\r\n        } else {\r\n            boneMesh.setAbsolutePosition(mesh.getAbsolutePosition());\r\n            boneMesh.position.x -= tempVec.x;\r\n            boneMesh.position.y -= tempVec.y;\r\n            boneMesh.position.z -= tempVec.z;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sync impostor to a bone\r\n     * @param bone The bone that the impostor will be synced to.\r\n     * @param boneMesh The mesh that the bone is influencing.\r\n     * @param jointPivot The pivot of the joint / bone in local space.\r\n     * @param distToJoint Optional distance from the impostor to the joint.\r\n     * @param adjustRotation Optional quaternion for adjusting the local rotation of the bone.\r\n     * @param boneAxis Optional vector3 axis the bone is aligned with\r\n     */\r\n    public syncImpostorWithBone(bone: Bone, boneMesh: AbstractMesh, jointPivot: Vector3, distToJoint?: number, adjustRotation?: Quaternion, boneAxis?: Vector3) {\r\n        const mesh = <AbstractMesh>this.object;\r\n\r\n        if (mesh.rotationQuaternion) {\r\n            if (adjustRotation) {\r\n                const tempQuat = PhysicsImpostor._TmpQuat;\r\n                bone.getRotationQuaternionToRef(Space.WORLD, boneMesh, tempQuat);\r\n                tempQuat.multiplyToRef(adjustRotation, mesh.rotationQuaternion);\r\n            } else {\r\n                bone.getRotationQuaternionToRef(Space.WORLD, boneMesh, mesh.rotationQuaternion);\r\n            }\r\n        }\r\n\r\n        const pos = PhysicsImpostor._TmpVecs[0];\r\n        const boneDir = PhysicsImpostor._TmpVecs[1];\r\n\r\n        if (!boneAxis) {\r\n            boneAxis = PhysicsImpostor._TmpVecs[2];\r\n            boneAxis.x = 0;\r\n            boneAxis.y = 1;\r\n            boneAxis.z = 0;\r\n        }\r\n\r\n        bone.getDirectionToRef(boneAxis, boneMesh, boneDir);\r\n        bone.getAbsolutePositionToRef(boneMesh, pos);\r\n\r\n        if ((distToJoint === undefined || distToJoint === null) && jointPivot) {\r\n            distToJoint = jointPivot.length();\r\n        }\r\n\r\n        if (distToJoint !== undefined && distToJoint !== null) {\r\n            pos.x += boneDir.x * distToJoint;\r\n            pos.y += boneDir.y * distToJoint;\r\n            pos.z += boneDir.z * distToJoint;\r\n        }\r\n\r\n        mesh.setAbsolutePosition(pos);\r\n    }\r\n\r\n    //Impostor types\r\n    /**\r\n     * No-Imposter type\r\n     */\r\n    public static NoImpostor = 0;\r\n    /**\r\n     * Sphere-Imposter type\r\n     */\r\n    public static SphereImpostor = 1;\r\n    /**\r\n     * Box-Imposter type\r\n     */\r\n    public static BoxImpostor = 2;\r\n    /**\r\n     * Plane-Imposter type\r\n     */\r\n    public static PlaneImpostor = 3;\r\n    /**\r\n     * Mesh-imposter type (Only available to objects with vertices data)\r\n     */\r\n    public static MeshImpostor = 4;\r\n    /**\r\n     * Capsule-Impostor type (Ammo.js plugin only)\r\n     */\r\n    public static CapsuleImpostor = 6;\r\n    /**\r\n     * Cylinder-Imposter type\r\n     */\r\n    public static CylinderImpostor = 7;\r\n    /**\r\n     * Particle-Imposter type\r\n     */\r\n    public static ParticleImpostor = 8;\r\n    /**\r\n     * Heightmap-Imposter type\r\n     */\r\n    public static HeightmapImpostor = 9;\r\n    /**\r\n     * ConvexHull-Impostor type (Ammo.js plugin only)\r\n     */\r\n    public static ConvexHullImpostor = 10;\r\n    /**\r\n     * Custom-Imposter type (Ammo.js plugin only)\r\n     */\r\n    public static CustomImpostor = 100;\r\n    /**\r\n     * Rope-Imposter type\r\n     */\r\n    public static RopeImpostor = 101;\r\n    /**\r\n     * Cloth-Imposter type\r\n     */\r\n    public static ClothImpostor = 102;\r\n    /**\r\n     * Softbody-Imposter type\r\n     */\r\n    public static SoftbodyImpostor = 103;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}