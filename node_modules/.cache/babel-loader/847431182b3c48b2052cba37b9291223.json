{"ast":null,"code":"import \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.array-buffer.constructor.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url-search-params.js\";\nimport { Tools } from \"@babylonjs/core/Misc/tools.js\";\n\nfunction validateAsync(data, rootUrl, fileName, getExternalResource) {\n  var options = {\n    externalResourceFunction: function externalResourceFunction(uri) {\n      return getExternalResource(uri).then(function (value) {\n        return new Uint8Array(value);\n      });\n    }\n  };\n\n  if (fileName) {\n    options.uri = rootUrl === \"file:\" ? fileName : rootUrl + fileName;\n  }\n\n  return data instanceof ArrayBuffer ? GLTFValidator.validateBytes(new Uint8Array(data), options) : GLTFValidator.validateString(data, options);\n}\n/**\n * The worker function that gets converted to a blob url to pass into a worker.\n */\n\n\nfunction workerFunc() {\n  var pendingExternalResources = [];\n\n  onmessage = function onmessage(message) {\n    var data = message.data;\n\n    switch (data.id) {\n      case \"init\":\n        {\n          importScripts(data.url);\n          break;\n        }\n\n      case \"validate\":\n        {\n          validateAsync(data.data, data.rootUrl, data.fileName, function (uri) {\n            return new Promise(function (resolve, reject) {\n              var index = pendingExternalResources.length;\n              pendingExternalResources.push({\n                resolve: resolve,\n                reject: reject\n              });\n              postMessage({\n                id: \"getExternalResource\",\n                index: index,\n                uri: uri\n              });\n            });\n          }).then(function (value) {\n            postMessage({\n              id: \"validate.resolve\",\n              value: value\n            });\n          }, function (reason) {\n            postMessage({\n              id: \"validate.reject\",\n              reason: reason\n            });\n          });\n          break;\n        }\n\n      case \"getExternalResource.resolve\":\n        {\n          pendingExternalResources[data.index].resolve(data.value);\n          break;\n        }\n\n      case \"getExternalResource.reject\":\n        {\n          pendingExternalResources[data.index].reject(data.reason);\n          break;\n        }\n    }\n  };\n}\n/**\n * glTF validation\n */\n\n\nvar GLTFValidation =\n/** @class */\nfunction () {\n  function GLTFValidation() {}\n  /**\n   * Validate a glTF asset using the glTF-Validator.\n   * @param data The JSON of a glTF or the array buffer of a binary glTF\n   * @param rootUrl The root url for the glTF\n   * @param fileName The file name for the glTF\n   * @param getExternalResource The callback to get external resources for the glTF validator\n   * @returns A promise that resolves with the glTF validation results once complete\n   */\n\n\n  GLTFValidation.ValidateAsync = function (data, rootUrl, fileName, getExternalResource) {\n    var _this = this;\n\n    if (typeof Worker === \"function\") {\n      return new Promise(function (resolve, reject) {\n        var workerContent = \"\".concat(validateAsync, \"(\").concat(workerFunc, \")()\");\n        var workerBlobUrl = URL.createObjectURL(new Blob([workerContent], {\n          type: \"application/javascript\"\n        }));\n        var worker = new Worker(workerBlobUrl);\n\n        var onError = function onError(error) {\n          worker.removeEventListener(\"error\", onError);\n          worker.removeEventListener(\"message\", onMessage);\n          reject(error);\n        };\n\n        var onMessage = function onMessage(message) {\n          var data = message.data;\n\n          switch (data.id) {\n            case \"getExternalResource\":\n              {\n                getExternalResource(data.uri).then(function (value) {\n                  worker.postMessage({\n                    id: \"getExternalResource.resolve\",\n                    index: data.index,\n                    value: value\n                  }, [value]);\n                }, function (reason) {\n                  worker.postMessage({\n                    id: \"getExternalResource.reject\",\n                    index: data.index,\n                    reason: reason\n                  });\n                });\n                break;\n              }\n\n            case \"validate.resolve\":\n              {\n                worker.removeEventListener(\"error\", onError);\n                worker.removeEventListener(\"message\", onMessage);\n                resolve(data.value);\n                worker.terminate();\n                break;\n              }\n\n            case \"validate.reject\":\n              {\n                worker.removeEventListener(\"error\", onError);\n                worker.removeEventListener(\"message\", onMessage);\n                reject(data.reason);\n                worker.terminate();\n              }\n          }\n        };\n\n        worker.addEventListener(\"error\", onError);\n        worker.addEventListener(\"message\", onMessage);\n        worker.postMessage({\n          id: \"init\",\n          url: _this.Configuration.url\n        });\n        worker.postMessage({\n          id: \"validate\",\n          data: data,\n          rootUrl: rootUrl,\n          fileName: fileName\n        });\n      });\n    } else {\n      if (!this._LoadScriptPromise) {\n        this._LoadScriptPromise = Tools.LoadScriptAsync(this.Configuration.url);\n      }\n\n      return this._LoadScriptPromise.then(function () {\n        return validateAsync(data, rootUrl, fileName, getExternalResource);\n      });\n    }\n  };\n  /**\n   * The configuration. Defaults to `{ url: \"https://preview.babylonjs.com/gltf_validator.js\" }`.\n   */\n\n\n  GLTFValidation.Configuration = {\n    url: \"https://preview.babylonjs.com/gltf_validator.js\"\n  };\n  return GLTFValidation;\n}();\n\nexport { GLTFValidation };","map":{"version":3,"mappings":"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","names":["Tools","validateAsync","data","rootUrl","fileName","getExternalResource","options","externalResourceFunction","uri","then","value","Uint8Array","ArrayBuffer","GLTFValidator","validateBytes","validateString","workerFunc","pendingExternalResources","onmessage","message","id","importScripts","url","Promise","resolve","reject","index","length","push","postMessage","reason","GLTFValidation","Worker","workerContent","concat","workerBlobUrl","URL","createObjectURL","Blob","type","worker","onError","error","removeEventListener","onMessage","terminate","addEventListener","_this","Configuration","_LoadScriptPromise","LoadScriptAsync"],"sourceRoot":"","sources":["../../../../../lts/loaders/generated/glTF/glTFValidation.ts"],"sourcesContent":["import type * as GLTF2 from \"babylonjs-gltf2interface\";\r\nimport { Tools } from \"core/Misc/tools\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare let GLTFValidator: GLTF2.IGLTFValidator;\r\n\r\n// WorkerGlobalScope\r\ndeclare function importScripts(...urls: string[]): void;\r\ndeclare function postMessage(message: any, transfer?: any[]): void;\r\n\r\nfunction validateAsync(\r\n    data: string | ArrayBuffer,\r\n    rootUrl: string,\r\n    fileName: string,\r\n    getExternalResource: (uri: string) => Promise<ArrayBuffer>\r\n): Promise<GLTF2.IGLTFValidationResults> {\r\n    const options: GLTF2.IGLTFValidationOptions = {\r\n        externalResourceFunction: (uri) => getExternalResource(uri).then((value) => new Uint8Array(value)),\r\n    };\r\n\r\n    if (fileName) {\r\n        options.uri = rootUrl === \"file:\" ? fileName : rootUrl + fileName;\r\n    }\r\n\r\n    return data instanceof ArrayBuffer ? GLTFValidator.validateBytes(new Uint8Array(data), options) : GLTFValidator.validateString(data, options);\r\n}\r\n\r\n/**\r\n * The worker function that gets converted to a blob url to pass into a worker.\r\n */\r\nfunction workerFunc(): void {\r\n    const pendingExternalResources: Array<{ resolve: (data: any) => void; reject: (reason: any) => void }> = [];\r\n\r\n    onmessage = (message) => {\r\n        const data = message.data;\r\n        switch (data.id) {\r\n            case \"init\": {\r\n                importScripts(data.url);\r\n                break;\r\n            }\r\n            case \"validate\": {\r\n                validateAsync(\r\n                    data.data,\r\n                    data.rootUrl,\r\n                    data.fileName,\r\n                    (uri) =>\r\n                        new Promise((resolve, reject) => {\r\n                            const index = pendingExternalResources.length;\r\n                            pendingExternalResources.push({ resolve, reject });\r\n                            postMessage({ id: \"getExternalResource\", index: index, uri: uri });\r\n                        })\r\n                ).then(\r\n                    (value) => {\r\n                        postMessage({ id: \"validate.resolve\", value: value });\r\n                    },\r\n                    (reason) => {\r\n                        postMessage({ id: \"validate.reject\", reason: reason });\r\n                    }\r\n                );\r\n                break;\r\n            }\r\n            case \"getExternalResource.resolve\": {\r\n                pendingExternalResources[data.index].resolve(data.value);\r\n                break;\r\n            }\r\n            case \"getExternalResource.reject\": {\r\n                pendingExternalResources[data.index].reject(data.reason);\r\n                break;\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * Configuration for glTF validation\r\n */\r\nexport interface IGLTFValidationConfiguration {\r\n    /**\r\n     * The url of the glTF validator.\r\n     */\r\n    url: string;\r\n}\r\n\r\n/**\r\n * glTF validation\r\n */\r\nexport class GLTFValidation {\r\n    /**\r\n     * The configuration. Defaults to `{ url: \"https://preview.babylonjs.com/gltf_validator.js\" }`.\r\n     */\r\n    public static Configuration: IGLTFValidationConfiguration = {\r\n        url: \"https://preview.babylonjs.com/gltf_validator.js\",\r\n    };\r\n\r\n    private static _LoadScriptPromise: Promise<void>;\r\n\r\n    /**\r\n     * Validate a glTF asset using the glTF-Validator.\r\n     * @param data The JSON of a glTF or the array buffer of a binary glTF\r\n     * @param rootUrl The root url for the glTF\r\n     * @param fileName The file name for the glTF\r\n     * @param getExternalResource The callback to get external resources for the glTF validator\r\n     * @returns A promise that resolves with the glTF validation results once complete\r\n     */\r\n    public static ValidateAsync(\r\n        data: string | ArrayBuffer,\r\n        rootUrl: string,\r\n        fileName: string,\r\n        getExternalResource: (uri: string) => Promise<ArrayBuffer>\r\n    ): Promise<GLTF2.IGLTFValidationResults> {\r\n        if (typeof Worker === \"function\") {\r\n            return new Promise((resolve, reject) => {\r\n                const workerContent = `${validateAsync}(${workerFunc})()`;\r\n                const workerBlobUrl = URL.createObjectURL(new Blob([workerContent], { type: \"application/javascript\" }));\r\n                const worker = new Worker(workerBlobUrl);\r\n\r\n                const onError = (error: ErrorEvent) => {\r\n                    worker.removeEventListener(\"error\", onError);\r\n                    worker.removeEventListener(\"message\", onMessage);\r\n                    reject(error);\r\n                };\r\n\r\n                const onMessage = (message: MessageEvent) => {\r\n                    const data = message.data;\r\n                    switch (data.id) {\r\n                        case \"getExternalResource\": {\r\n                            getExternalResource(data.uri).then(\r\n                                (value) => {\r\n                                    worker.postMessage({ id: \"getExternalResource.resolve\", index: data.index, value: value }, [value]);\r\n                                },\r\n                                (reason) => {\r\n                                    worker.postMessage({ id: \"getExternalResource.reject\", index: data.index, reason: reason });\r\n                                }\r\n                            );\r\n                            break;\r\n                        }\r\n                        case \"validate.resolve\": {\r\n                            worker.removeEventListener(\"error\", onError);\r\n                            worker.removeEventListener(\"message\", onMessage);\r\n                            resolve(data.value);\r\n                            worker.terminate();\r\n                            break;\r\n                        }\r\n                        case \"validate.reject\": {\r\n                            worker.removeEventListener(\"error\", onError);\r\n                            worker.removeEventListener(\"message\", onMessage);\r\n                            reject(data.reason);\r\n                            worker.terminate();\r\n                        }\r\n                    }\r\n                };\r\n\r\n                worker.addEventListener(\"error\", onError);\r\n                worker.addEventListener(\"message\", onMessage);\r\n\r\n                worker.postMessage({ id: \"init\", url: this.Configuration.url });\r\n                worker.postMessage({ id: \"validate\", data: data, rootUrl: rootUrl, fileName: fileName });\r\n            });\r\n        } else {\r\n            if (!this._LoadScriptPromise) {\r\n                this._LoadScriptPromise = Tools.LoadScriptAsync(this.Configuration.url);\r\n            }\r\n\r\n            return this._LoadScriptPromise.then(() => {\r\n                return validateAsync(data, rootUrl, fileName, getExternalResource);\r\n            });\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}