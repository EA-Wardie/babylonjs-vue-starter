{"ast":null,"code":"import \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.at.js\";\nimport \"core-js/modules/es.string.at-alternative.js\";\nvar growthFactor = 1.5;\n/**\n * A class acting as a dynamic float32array used in the performance viewer\n */\n\nvar DynamicFloat32Array =\n/** @class */\nfunction () {\n  /**\n   * Creates a new DynamicFloat32Array with the desired item capacity.\n   * @param itemCapacity The initial item capacity you would like to set for the array.\n   */\n  function DynamicFloat32Array(itemCapacity) {\n    this._view = new Float32Array(itemCapacity);\n    this._itemLength = 0;\n  }\n\n  Object.defineProperty(DynamicFloat32Array.prototype, \"itemLength\", {\n    /**\n     * The number of items currently in the array.\n     */\n    get: function get() {\n      return this._itemLength;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Gets value at index, NaN if no such index exists.\n   * @param index the index to get the value at.\n   * @returns the value at the index provided.\n   */\n\n  DynamicFloat32Array.prototype.at = function (index) {\n    if (index < 0 || index >= this._itemLength) {\n      return NaN;\n    }\n\n    return this._view[index];\n  };\n  /**\n   * Gets a view of the original array from start to end (exclusive of end).\n   * @param start starting index.\n   * @param end ending index.\n   * @returns a subarray of the original array.\n   */\n\n\n  DynamicFloat32Array.prototype.subarray = function (start, end) {\n    if (start >= end || start < 0) {\n      return new Float32Array(0);\n    }\n\n    if (end > this._itemLength) {\n      end = this._itemLength;\n    }\n\n    return this._view.subarray(start, end);\n  };\n  /**\n   * Pushes items to the end of the array.\n   * @param item The item to push into the array.\n   */\n\n\n  DynamicFloat32Array.prototype.push = function (item) {\n    this._view[this._itemLength] = item;\n    this._itemLength++;\n\n    if (this._itemLength >= this._view.length) {\n      this._growArray();\n    }\n  };\n  /**\n   * Grows the array by the growth factor when necessary.\n   */\n\n\n  DynamicFloat32Array.prototype._growArray = function () {\n    var newCapacity = Math.floor(this._view.length * growthFactor);\n    var view = new Float32Array(newCapacity);\n    view.set(this._view);\n    this._view = view;\n  };\n\n  return DynamicFloat32Array;\n}();\n\nexport { DynamicFloat32Array };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,YAAY,GAAG,GAArB;AAEA;;;;AAGA;AAAA;AAAA;AAII;;;;AAIA,+BAAYC,YAAZ,EAAgC;AAC5B,SAAKC,KAAL,GAAa,IAAIC,YAAJ,CAAiBF,YAAjB,CAAb;AACA,SAAKG,WAAL,GAAmB,CAAnB;AACH;;AAKDC,wBAAWC,6BAAX,EAAW,YAAX,EAAqB;AAHrB;;;SAGA;AACI,aAAO,KAAKF,WAAZ;AACH,KAFoB;qBAAA;;AAAA,GAArB;AAIA;;;;;;AAKOE,qCAAP,UAAUC,KAAV,EAAuB;AACnB,QAAIA,KAAK,GAAG,CAAR,IAAaA,KAAK,IAAI,KAAKH,WAA/B,EAA4C;AACxC,aAAOI,GAAP;AACH;;AAED,WAAO,KAAKN,KAAL,CAAWK,KAAX,CAAP;AACH,GANM;AAQP;;;;;;;;AAMOD,2CAAP,UAAgBG,KAAhB,EAA+BC,GAA/B,EAA0C;AACtC,QAAID,KAAK,IAAIC,GAAT,IAAgBD,KAAK,GAAG,CAA5B,EAA+B;AAC3B,aAAO,IAAIN,YAAJ,CAAiB,CAAjB,CAAP;AACH;;AAED,QAAIO,GAAG,GAAG,KAAKN,WAAf,EAA4B;AACxBM,SAAG,GAAG,KAAKN,WAAX;AACH;;AAED,WAAO,KAAKF,KAAL,CAAWS,QAAX,CAAoBF,KAApB,EAA2BC,GAA3B,CAAP;AACH,GAVM;AAYP;;;;;;AAIOJ,uCAAP,UAAYM,IAAZ,EAAwB;AACpB,SAAKV,KAAL,CAAW,KAAKE,WAAhB,IAA+BQ,IAA/B;AACA,SAAKR,WAAL;;AACA,QAAI,KAAKA,WAAL,IAAoB,KAAKF,KAAL,CAAWW,MAAnC,EAA2C;AACvC,WAAKC,UAAL;AACH;AACJ,GANM;AAQP;;;;;AAGQR,6CAAR;AACI,QAAMS,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAW,KAAKf,KAAL,CAAWW,MAAX,GAAoBb,YAA/B,CAApB;AACA,QAAMkB,IAAI,GAAG,IAAIf,YAAJ,CAAiBY,WAAjB,CAAb;AACAG,QAAI,CAACC,GAAL,CAAS,KAAKjB,KAAd;AACA,SAAKA,KAAL,GAAagB,IAAb;AACH,GALO;;AAMZ;AAAC,CAxED","names":["growthFactor","itemCapacity","_view","Float32Array","_itemLength","Object","DynamicFloat32Array","index","NaN","start","end","subarray","item","length","_growArray","newCapacity","Math","floor","view","set"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Misc/PerformanceViewer/dynamicFloat32Array.ts"],"sourcesContent":["const growthFactor = 1.5;\r\n\r\n/**\r\n * A class acting as a dynamic float32array used in the performance viewer\r\n */\r\nexport class DynamicFloat32Array {\r\n    private _view: Float32Array;\r\n    private _itemLength: number;\r\n\r\n    /**\r\n     * Creates a new DynamicFloat32Array with the desired item capacity.\r\n     * @param itemCapacity The initial item capacity you would like to set for the array.\r\n     */\r\n    constructor(itemCapacity: number) {\r\n        this._view = new Float32Array(itemCapacity);\r\n        this._itemLength = 0;\r\n    }\r\n\r\n    /**\r\n     * The number of items currently in the array.\r\n     */\r\n    public get itemLength(): number {\r\n        return this._itemLength;\r\n    }\r\n\r\n    /**\r\n     * Gets value at index, NaN if no such index exists.\r\n     * @param index the index to get the value at.\r\n     * @returns the value at the index provided.\r\n     */\r\n    public at(index: number): number {\r\n        if (index < 0 || index >= this._itemLength) {\r\n            return NaN;\r\n        }\r\n\r\n        return this._view[index];\r\n    }\r\n\r\n    /**\r\n     * Gets a view of the original array from start to end (exclusive of end).\r\n     * @param start starting index.\r\n     * @param end ending index.\r\n     * @returns a subarray of the original array.\r\n     */\r\n    public subarray(start: number, end: number): Float32Array {\r\n        if (start >= end || start < 0) {\r\n            return new Float32Array(0);\r\n        }\r\n\r\n        if (end > this._itemLength) {\r\n            end = this._itemLength;\r\n        }\r\n\r\n        return this._view.subarray(start, end);\r\n    }\r\n\r\n    /**\r\n     * Pushes items to the end of the array.\r\n     * @param item The item to push into the array.\r\n     */\r\n    public push(item: number) {\r\n        this._view[this._itemLength] = item;\r\n        this._itemLength++;\r\n        if (this._itemLength >= this._view.length) {\r\n            this._growArray();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Grows the array by the growth factor when necessary.\r\n     */\r\n    private _growArray() {\r\n        const newCapacity = Math.floor(this._view.length * growthFactor);\r\n        const view = new Float32Array(newCapacity);\r\n        view.set(this._view);\r\n        this._view = view;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}