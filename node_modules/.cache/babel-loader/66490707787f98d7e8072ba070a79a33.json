{"ast":null,"code":"import { ThinEngine } from \"../../Engines/thinEngine.js\";\nimport { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture.js\";\n\nThinEngine.prototype.createDynamicTexture = function (width, height, generateMipMaps, samplingMode) {\n  var texture = new InternalTexture(this, InternalTextureSource.Dynamic);\n  texture.baseWidth = width;\n  texture.baseHeight = height;\n\n  if (generateMipMaps) {\n    width = this.needPOTTextures ? ThinEngine.GetExponentOfTwo(width, this._caps.maxTextureSize) : width;\n    height = this.needPOTTextures ? ThinEngine.GetExponentOfTwo(height, this._caps.maxTextureSize) : height;\n  } //  this.resetTextureCache();\n\n\n  texture.width = width;\n  texture.height = height;\n  texture.isReady = false;\n  texture.generateMipMaps = generateMipMaps;\n  texture.samplingMode = samplingMode;\n  this.updateTextureSamplingMode(samplingMode, texture);\n\n  this._internalTexturesCache.push(texture);\n\n  return texture;\n};\n\nThinEngine.prototype.updateDynamicTexture = function (texture, source, invertY, premulAlpha, format, forceBindTexture, // eslint-disable-next-line @typescript-eslint/no-unused-vars\nallowGPUOptimization) {\n  if (premulAlpha === void 0) {\n    premulAlpha = false;\n  }\n\n  if (forceBindTexture === void 0) {\n    forceBindTexture = false;\n  }\n\n  if (allowGPUOptimization === void 0) {\n    allowGPUOptimization = false;\n  }\n\n  if (!texture) {\n    return;\n  }\n\n  var gl = this._gl;\n  var target = gl.TEXTURE_2D;\n\n  var wasPreviouslyBound = this._bindTextureDirectly(target, texture, true, forceBindTexture);\n\n  this._unpackFlipY(invertY === undefined ? texture.invertY : invertY);\n\n  if (premulAlpha) {\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);\n  }\n\n  var textureType = this._getWebGLTextureType(texture.type);\n\n  var glformat = this._getInternalFormat(format ? format : texture.format);\n\n  var internalFormat = this._getRGBABufferInternalSizedFormat(texture.type, glformat);\n\n  gl.texImage2D(target, 0, internalFormat, glformat, textureType, source);\n\n  if (texture.generateMipMaps) {\n    gl.generateMipmap(target);\n  }\n\n  if (!wasPreviouslyBound) {\n    this._bindTextureDirectly(target, null);\n  }\n\n  if (premulAlpha) {\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);\n  }\n\n  texture.isReady = true;\n};","map":{"version":3,"mappings":"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","names":["ThinEngine","InternalTexture","InternalTextureSource","prototype","createDynamicTexture","width","height","generateMipMaps","samplingMode","texture","Dynamic","baseWidth","baseHeight","needPOTTextures","GetExponentOfTwo","_caps","maxTextureSize","isReady","updateTextureSamplingMode","_internalTexturesCache","push","updateDynamicTexture","source","invertY","premulAlpha","format","forceBindTexture","allowGPUOptimization","gl","_gl","target","TEXTURE_2D","wasPreviouslyBound","_bindTextureDirectly","_unpackFlipY","undefined","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","textureType","_getWebGLTextureType","type","glformat","_getInternalFormat","internalFormat","_getRGBABufferInternalSizedFormat","texImage2D","generateMipmap"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/Extensions/engine.dynamicTexture.ts"],"sourcesContent":["import { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { ICanvas } from \"../ICanvas\";\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n    export interface ThinEngine {\r\n        /**\r\n         * Creates a dynamic texture\r\n         * @param width defines the width of the texture\r\n         * @param height defines the height of the texture\r\n         * @param generateMipMaps defines if the engine should generate the mip levels\r\n         * @param samplingMode defines the required sampling mode (Texture.NEAREST_SAMPLINGMODE by default)\r\n         * @returns the dynamic texture inside an InternalTexture\r\n         */\r\n        createDynamicTexture(width: number, height: number, generateMipMaps: boolean, samplingMode: number): InternalTexture;\r\n\r\n        /**\r\n         * Update the content of a dynamic texture\r\n         * @param texture defines the texture to update\r\n         * @param source defines the source containing the data\r\n         * @param invertY defines if data must be stored with Y axis inverted\r\n         * @param premulAlpha defines if alpha is stored as premultiplied\r\n         * @param format defines the format of the data\r\n         * @param forceBindTexture if the texture should be forced to be bound eg. after a graphics context loss (Default: false)\r\n         * @param allowGPUOptimization true to allow some specific GPU optimizations (subject to engine feature \"allowGPUOptimizationsForGUI\" being true)\r\n         */\r\n        updateDynamicTexture(\r\n            texture: Nullable<InternalTexture>,\r\n            source: ImageBitmap | ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | OffscreenCanvas | ICanvas,\r\n            invertY?: boolean,\r\n            premulAlpha?: boolean,\r\n            format?: number,\r\n            forceBindTexture?: boolean,\r\n            allowGPUOptimization?: boolean\r\n        ): void;\r\n    }\r\n}\r\n\r\nThinEngine.prototype.createDynamicTexture = function (width: number, height: number, generateMipMaps: boolean, samplingMode: number): InternalTexture {\r\n    const texture = new InternalTexture(this, InternalTextureSource.Dynamic);\r\n    texture.baseWidth = width;\r\n    texture.baseHeight = height;\r\n\r\n    if (generateMipMaps) {\r\n        width = this.needPOTTextures ? ThinEngine.GetExponentOfTwo(width, this._caps.maxTextureSize) : width;\r\n        height = this.needPOTTextures ? ThinEngine.GetExponentOfTwo(height, this._caps.maxTextureSize) : height;\r\n    }\r\n\r\n    //  this.resetTextureCache();\r\n    texture.width = width;\r\n    texture.height = height;\r\n    texture.isReady = false;\r\n    texture.generateMipMaps = generateMipMaps;\r\n    texture.samplingMode = samplingMode;\r\n\r\n    this.updateTextureSamplingMode(samplingMode, texture);\r\n\r\n    this._internalTexturesCache.push(texture);\r\n\r\n    return texture;\r\n};\r\n\r\nThinEngine.prototype.updateDynamicTexture = function (\r\n    texture: Nullable<InternalTexture>,\r\n    source: ImageBitmap | ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | OffscreenCanvas,\r\n    invertY?: boolean,\r\n    premulAlpha: boolean = false,\r\n    format?: number,\r\n    forceBindTexture: boolean = false,\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    allowGPUOptimization: boolean = false\r\n): void {\r\n    if (!texture) {\r\n        return;\r\n    }\r\n\r\n    const gl = this._gl;\r\n    const target = gl.TEXTURE_2D;\r\n\r\n    const wasPreviouslyBound = this._bindTextureDirectly(target, texture, true, forceBindTexture);\r\n\r\n    this._unpackFlipY(invertY === undefined ? texture.invertY : invertY);\r\n\r\n    if (premulAlpha) {\r\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);\r\n    }\r\n\r\n    const textureType = this._getWebGLTextureType(texture.type);\r\n    const glformat = this._getInternalFormat(format ? format : texture.format);\r\n    const internalFormat = this._getRGBABufferInternalSizedFormat(texture.type, glformat);\r\n\r\n    gl.texImage2D(target, 0, internalFormat, glformat, textureType, source as TexImageSource);\r\n\r\n    if (texture.generateMipMaps) {\r\n        gl.generateMipmap(target);\r\n    }\r\n\r\n    if (!wasPreviouslyBound) {\r\n        this._bindTextureDirectly(target, null);\r\n    }\r\n\r\n    if (premulAlpha) {\r\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);\r\n    }\r\n\r\n    texture.isReady = true;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}