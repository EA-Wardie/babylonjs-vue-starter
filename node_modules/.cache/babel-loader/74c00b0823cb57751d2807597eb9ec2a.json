{"ast":null,"code":"// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore.js\";\nimport \"./ShadersInclude/instancesDeclaration.js\";\nimport \"./ShadersInclude/clipPlaneVertexDeclaration.js\";\nimport \"./ShadersInclude/instancesVertex.js\";\nimport \"./ShadersInclude/clipPlaneVertex.js\";\nvar name = \"lineVertexShader\";\nvar shader = \"#include<instancesDeclaration>\\n#include<clipPlaneVertexDeclaration>\\nattribute vec3 position;\\nattribute vec4 normal;\\nuniform mat4 viewProjection;\\nuniform float width;\\nuniform float aspectRatio;\\n#define CUSTOM_VERTEX_DEFINITIONS\\nvoid main(void) {\\n#define CUSTOM_VERTEX_MAIN_BEGIN\\n#include<instancesVertex>\\nmat4 worldViewProjection=viewProjection*finalWorld;\\nvec4 viewPosition=worldViewProjection*vec4(position,1.0);\\nvec4 viewPositionNext=worldViewProjection*vec4(normal.xyz,1.0);\\nvec2 currentScreen=viewPosition.xy/viewPosition.w;\\nvec2 nextScreen=viewPositionNext.xy/viewPositionNext.w;\\ncurrentScreen.x*=aspectRatio;\\nnextScreen.x*=aspectRatio;\\nvec2 dir=normalize(nextScreen-currentScreen);\\nvec2 normalDir=vec2(-dir.y,dir.x);\\nnormalDir*=width/2.0;\\nnormalDir.x/=aspectRatio;\\nvec4 offset=vec4(normalDir*normal.w,0.0,0.0);\\ngl_Position=viewPosition+offset;\\n#if defined(CLIPPLANE) || defined(CLIPPLANE2) || defined(CLIPPLANE3) || defined(CLIPPLANE4) || defined(CLIPPLANE5) || defined(CLIPPLANE6)\\nvec4 worldPos=finalWorld*vec4(position,1.0);\\n#include<clipPlaneVertex>\\n#endif\\n#define CUSTOM_VERTEX_MAIN_END\\n}\"; // Sideeffect\n\nShaderStore.ShadersStore[name] = shader;\n/** @hidden */\n\nexport var lineVertexShader = {\n  name: name,\n  shader: shader\n};","map":{"version":3,"mappings":"AAAA;AACA,SAASA,WAAT,QAA4B,2BAA5B;AACA,OAAO,0CAAP;AACA,OAAO,gDAAP;AACA,OAAO,qCAAP;AACA,OAAO,qCAAP;AAEA,IAAMC,IAAI,GAAG,kBAAb;AACA,IAAMC,MAAM,GAAG,ymCAAf,C,CA8BA;;AACAF,WAAW,CAACG,YAAZ,CAAyBF,IAAzB,IAAiCC,MAAjC;AACA;;AACA,OAAO,IAAME,gBAAgB,GAAG;AAAEH,MAAI,MAAN;AAAQC,QAAM;AAAd,CAAzB","names":["ShaderStore","name","shader","ShadersStore","lineVertexShader"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Shaders/line.vertex.ts"],"sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/instancesDeclaration\";\nimport \"./ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"./ShadersInclude/instancesVertex\";\nimport \"./ShadersInclude/clipPlaneVertex\";\n\nconst name = \"lineVertexShader\";\nconst shader = `#include<instancesDeclaration>\n#include<clipPlaneVertexDeclaration>\nattribute vec3 position;\rattribute vec4 normal;\runiform mat4 viewProjection;\runiform float width;\runiform float aspectRatio;\r#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void) {\r#define CUSTOM_VERTEX_MAIN_BEGIN\n#include<instancesVertex>\nmat4 worldViewProjection=viewProjection*finalWorld;\rvec4 viewPosition=worldViewProjection*vec4(position,1.0);\rvec4 viewPositionNext=worldViewProjection*vec4(normal.xyz,1.0);\rvec2 currentScreen=viewPosition.xy/viewPosition.w;\rvec2 nextScreen=viewPositionNext.xy/viewPositionNext.w;\rcurrentScreen.x*=aspectRatio;\rnextScreen.x*=aspectRatio;\rvec2 dir=normalize(nextScreen-currentScreen);\rvec2 normalDir=vec2(-dir.y,dir.x);\rnormalDir*=width/2.0;\rnormalDir.x/=aspectRatio;\rvec4 offset=vec4(normalDir*normal.w,0.0,0.0);\rgl_Position=viewPosition+offset;\r#if defined(CLIPPLANE) || defined(CLIPPLANE2) || defined(CLIPPLANE3) || defined(CLIPPLANE4) || defined(CLIPPLANE5) || defined(CLIPPLANE6)\nvec4 worldPos=finalWorld*vec4(position,1.0);\r#include<clipPlaneVertex>\n#endif\n#define CUSTOM_VERTEX_MAIN_END\n}`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @hidden */\nexport const lineVertexShader = { name, shader };\n"]},"metadata":{},"sourceType":"module"}