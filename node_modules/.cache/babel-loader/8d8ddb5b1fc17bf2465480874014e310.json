{"ast":null,"code":"import { Matrix } from \"../../Maths/math.vector.js\";\nimport { Viewport } from \"../../Maths/math.viewport.js\";\n/**\n * @param camera\n * @param rigParams\n * @hidden\n */\n\nexport function setWebVRRigMode(camera, rigParams) {\n  if (rigParams.vrDisplay) {\n    var leftEye = rigParams.vrDisplay.getEyeParameters(\"left\");\n    var rightEye = rigParams.vrDisplay.getEyeParameters(\"right\"); //Left eye\n\n    camera._rigCameras[0].viewport = new Viewport(0, 0, 0.5, 1.0);\n\n    camera._rigCameras[0].setCameraRigParameter(\"left\", true); //leaving this for future reference\n\n\n    camera._rigCameras[0].setCameraRigParameter(\"specs\", rigParams.specs);\n\n    camera._rigCameras[0].setCameraRigParameter(\"eyeParameters\", leftEye);\n\n    camera._rigCameras[0].setCameraRigParameter(\"frameData\", rigParams.frameData);\n\n    camera._rigCameras[0].setCameraRigParameter(\"parentCamera\", rigParams.parentCamera);\n\n    camera._rigCameras[0]._cameraRigParams.vrWorkMatrix = new Matrix();\n    camera._rigCameras[0].getProjectionMatrix = camera._getWebVRProjectionMatrix;\n    camera._rigCameras[0].parent = camera;\n    camera._rigCameras[0]._getViewMatrix = camera._getWebVRViewMatrix; //Right eye\n\n    camera._rigCameras[1].viewport = new Viewport(0.5, 0, 0.5, 1.0);\n\n    camera._rigCameras[1].setCameraRigParameter(\"eyeParameters\", rightEye);\n\n    camera._rigCameras[1].setCameraRigParameter(\"specs\", rigParams.specs);\n\n    camera._rigCameras[1].setCameraRigParameter(\"frameData\", rigParams.frameData);\n\n    camera._rigCameras[1].setCameraRigParameter(\"parentCamera\", rigParams.parentCamera);\n\n    camera._rigCameras[1]._cameraRigParams.vrWorkMatrix = new Matrix();\n    camera._rigCameras[1].getProjectionMatrix = camera._getWebVRProjectionMatrix;\n    camera._rigCameras[1].parent = camera;\n    camera._rigCameras[1]._getViewMatrix = camera._getWebVRViewMatrix;\n  }\n}","map":{"version":3,"mappings":"AACA,SAASA,MAAT,QAAuB,4BAAvB;AACA,SAASC,QAAT,QAAyB,8BAAzB;AAEA;;;;;;AAKA,OAAM,SAAUC,eAAV,CAA0BC,MAA1B,EAA0CC,SAA1C,EAAwD;AAC1D,MAAIA,SAAS,CAACC,SAAd,EAAyB;AACrB,QAAMC,OAAO,GAAGF,SAAS,CAACC,SAAV,CAAoBE,gBAApB,CAAqC,MAArC,CAAhB;AACA,QAAMC,QAAQ,GAAGJ,SAAS,CAACC,SAAV,CAAoBE,gBAApB,CAAqC,OAArC,CAAjB,CAFqB,CAIrB;;AACAJ,UAAM,CAACM,WAAP,CAAmB,CAAnB,EAAsBC,QAAtB,GAAiC,IAAIT,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmB,GAAnB,EAAwB,GAAxB,CAAjC;;AACAE,UAAM,CAACM,WAAP,CAAmB,CAAnB,EAAsBE,qBAAtB,CAA4C,MAA5C,EAAoD,IAApD,EANqB,CAOrB;;;AACAR,UAAM,CAACM,WAAP,CAAmB,CAAnB,EAAsBE,qBAAtB,CAA4C,OAA5C,EAAqDP,SAAS,CAACQ,KAA/D;;AACAT,UAAM,CAACM,WAAP,CAAmB,CAAnB,EAAsBE,qBAAtB,CAA4C,eAA5C,EAA6DL,OAA7D;;AACAH,UAAM,CAACM,WAAP,CAAmB,CAAnB,EAAsBE,qBAAtB,CAA4C,WAA5C,EAAyDP,SAAS,CAACS,SAAnE;;AACAV,UAAM,CAACM,WAAP,CAAmB,CAAnB,EAAsBE,qBAAtB,CAA4C,cAA5C,EAA4DP,SAAS,CAACU,YAAtE;;AACAX,UAAM,CAACM,WAAP,CAAmB,CAAnB,EAAsBM,gBAAtB,CAAuCC,YAAvC,GAAsD,IAAIhB,MAAJ,EAAtD;AACAG,UAAM,CAACM,WAAP,CAAmB,CAAnB,EAAsBQ,mBAAtB,GAA4Cd,MAAM,CAACe,yBAAnD;AACAf,UAAM,CAACM,WAAP,CAAmB,CAAnB,EAAsBU,MAAtB,GAA+BhB,MAA/B;AACAA,UAAM,CAACM,WAAP,CAAmB,CAAnB,EAAsBW,cAAtB,GAAuCjB,MAAM,CAACkB,mBAA9C,CAfqB,CAiBrB;;AACAlB,UAAM,CAACM,WAAP,CAAmB,CAAnB,EAAsBC,QAAtB,GAAiC,IAAIT,QAAJ,CAAa,GAAb,EAAkB,CAAlB,EAAqB,GAArB,EAA0B,GAA1B,CAAjC;;AACAE,UAAM,CAACM,WAAP,CAAmB,CAAnB,EAAsBE,qBAAtB,CAA4C,eAA5C,EAA6DH,QAA7D;;AACAL,UAAM,CAACM,WAAP,CAAmB,CAAnB,EAAsBE,qBAAtB,CAA4C,OAA5C,EAAqDP,SAAS,CAACQ,KAA/D;;AACAT,UAAM,CAACM,WAAP,CAAmB,CAAnB,EAAsBE,qBAAtB,CAA4C,WAA5C,EAAyDP,SAAS,CAACS,SAAnE;;AACAV,UAAM,CAACM,WAAP,CAAmB,CAAnB,EAAsBE,qBAAtB,CAA4C,cAA5C,EAA4DP,SAAS,CAACU,YAAtE;;AACAX,UAAM,CAACM,WAAP,CAAmB,CAAnB,EAAsBM,gBAAtB,CAAuCC,YAAvC,GAAsD,IAAIhB,MAAJ,EAAtD;AACAG,UAAM,CAACM,WAAP,CAAmB,CAAnB,EAAsBQ,mBAAtB,GAA4Cd,MAAM,CAACe,yBAAnD;AACAf,UAAM,CAACM,WAAP,CAAmB,CAAnB,EAAsBU,MAAtB,GAA+BhB,MAA/B;AACAA,UAAM,CAACM,WAAP,CAAmB,CAAnB,EAAsBW,cAAtB,GAAuCjB,MAAM,CAACkB,mBAA9C;AACH;AACJ","names":["Matrix","Viewport","setWebVRRigMode","camera","rigParams","vrDisplay","leftEye","getEyeParameters","rightEye","_rigCameras","viewport","setCameraRigParameter","specs","frameData","parentCamera","_cameraRigParams","vrWorkMatrix","getProjectionMatrix","_getWebVRProjectionMatrix","parent","_getViewMatrix","_getWebVRViewMatrix"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Cameras/RigModes/webVRRigMode.ts"],"sourcesContent":["import type { Camera } from \"../camera\";\r\nimport { Matrix } from \"../../Maths/math.vector\";\r\nimport { Viewport } from \"../../Maths/math.viewport\";\r\n\r\n/**\r\n * @param camera\r\n * @param rigParams\r\n * @hidden\r\n */\r\nexport function setWebVRRigMode(camera: Camera, rigParams: any) {\r\n    if (rigParams.vrDisplay) {\r\n        const leftEye = rigParams.vrDisplay.getEyeParameters(\"left\");\r\n        const rightEye = rigParams.vrDisplay.getEyeParameters(\"right\");\r\n\r\n        //Left eye\r\n        camera._rigCameras[0].viewport = new Viewport(0, 0, 0.5, 1.0);\r\n        camera._rigCameras[0].setCameraRigParameter(\"left\", true);\r\n        //leaving this for future reference\r\n        camera._rigCameras[0].setCameraRigParameter(\"specs\", rigParams.specs);\r\n        camera._rigCameras[0].setCameraRigParameter(\"eyeParameters\", leftEye);\r\n        camera._rigCameras[0].setCameraRigParameter(\"frameData\", rigParams.frameData);\r\n        camera._rigCameras[0].setCameraRigParameter(\"parentCamera\", rigParams.parentCamera);\r\n        camera._rigCameras[0]._cameraRigParams.vrWorkMatrix = new Matrix();\r\n        camera._rigCameras[0].getProjectionMatrix = camera._getWebVRProjectionMatrix;\r\n        camera._rigCameras[0].parent = camera;\r\n        camera._rigCameras[0]._getViewMatrix = camera._getWebVRViewMatrix;\r\n\r\n        //Right eye\r\n        camera._rigCameras[1].viewport = new Viewport(0.5, 0, 0.5, 1.0);\r\n        camera._rigCameras[1].setCameraRigParameter(\"eyeParameters\", rightEye);\r\n        camera._rigCameras[1].setCameraRigParameter(\"specs\", rigParams.specs);\r\n        camera._rigCameras[1].setCameraRigParameter(\"frameData\", rigParams.frameData);\r\n        camera._rigCameras[1].setCameraRigParameter(\"parentCamera\", rigParams.parentCamera);\r\n        camera._rigCameras[1]._cameraRigParams.vrWorkMatrix = new Matrix();\r\n        camera._rigCameras[1].getProjectionMatrix = camera._getWebVRProjectionMatrix;\r\n        camera._rigCameras[1].parent = camera;\r\n        camera._rigCameras[1]._getViewMatrix = camera._getWebVRViewMatrix;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}