{"ast":null,"code":"import { Logger } from \"../Misc/logger.js\";\nimport { Vector3 } from \"./math.vector.js\";\n/**\n * Class representing an isovector a vector containing 2 INTEGER coordinates\n * x axis is horizontal\n * y axis is 60 deg counter clockwise from positive y axis\n * @hidden\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\n\nvar _IsoVector =\n/** @class */\nfunction () {\n  /**\n   * Creates a new isovector from the given x and y coordinates\n   * @param x defines the first coordinate, must be an integer\n   * @param y defines the second coordinate, must be an integer\n   */\n  function _IsoVector(\n  /** defines the first coordinate */\n  x,\n  /** defines the second coordinate */\n  y) {\n    if (x === void 0) {\n      x = 0;\n    }\n\n    if (y === void 0) {\n      y = 0;\n    }\n\n    this.x = x;\n    this.y = y;\n\n    if (x !== Math.floor(x)) {\n      x === Math.floor(x);\n      Logger.Warn(\"x is not an integer, floor(x) used\");\n    }\n\n    if (y !== Math.floor(y)) {\n      y === Math.floor(y);\n      Logger.Warn(\"y is not an integer, floor(y) used\");\n    }\n  } // Operators\n\n  /**\n   * Gets a new IsoVector copied from the IsoVector\n   * @returns a new IsoVector\n   */\n\n\n  _IsoVector.prototype.clone = function () {\n    return new _IsoVector(this.x, this.y);\n  };\n  /**\n   * Rotates one IsoVector 60 degrees counter clockwise about another\n   * Please note that this is an in place operation\n   * @param other an IsoVector a center of rotation\n   * @returns the rotated IsoVector\n   */\n\n\n  _IsoVector.prototype.rotate60About = function (other) {\n    //other IsoVector\n    var x = this.x;\n    this.x = other.x + other.y - this.y;\n    this.y = x + this.y - other.x;\n    return this;\n  };\n  /**\n   * Rotates one IsoVector 60 degrees clockwise about another\n   * Please note that this is an in place operation\n   * @param other an IsoVector as center of rotation\n   * @returns the rotated IsoVector\n   */\n\n\n  _IsoVector.prototype.rotateNeg60About = function (other) {\n    var x = this.x;\n    this.x = x + this.y - other.y;\n    this.y = other.x + other.y - x;\n    return this;\n  };\n  /**\n   * For an equilateral triangle OAB with O at isovector (0, 0) and A at isovector (m, n)\n   * Rotates one IsoVector 120 degrees counter clockwise about the center of the triangle\n   * Please note that this is an in place operation\n   * @param m integer a measure a Primary triangle of order (m, n) m > n\n   * @param n >= 0 integer a measure for a Primary triangle of order (m, n)\n   * @returns the rotated IsoVector\n   */\n\n\n  _IsoVector.prototype.rotate120 = function (m, n) {\n    //m, n integers\n    if (m !== Math.floor(m)) {\n      m === Math.floor(m);\n      Logger.Warn(\"m not an integer only floor(m) used\");\n    }\n\n    if (n !== Math.floor(n)) {\n      n === Math.floor(n);\n      Logger.Warn(\"n not an integer only floor(n) used\");\n    }\n\n    var x = this.x;\n    this.x = m - x - this.y;\n    this.y = n + x;\n    return this;\n  };\n  /**\n   * For an equilateral triangle OAB with O at isovector (0, 0) and A at isovector (m, n)\n   * Rotates one IsoVector 120 degrees clockwise about the center of the triangle\n   * Please note that this is an in place operation\n   * @param m integer a measure a Primary triangle of order (m, n) m > n\n   * @param n >= 0 integer a measure for a Primary triangle of order (m, n)\n   * @returns the rotated IsoVector\n   */\n\n\n  _IsoVector.prototype.rotateNeg120 = function (m, n) {\n    //m, n integers\n    if (m !== Math.floor(m)) {\n      m === Math.floor(m);\n      Logger.Warn(\"m is not an integer, floor(m) used\");\n    }\n\n    if (n !== Math.floor(n)) {\n      n === Math.floor(n);\n      Logger.Warn(\"n is not an integer,   floor(n) used\");\n    }\n\n    var x = this.x;\n    this.x = this.y - n;\n    this.y = m + n - x - this.y;\n    return this;\n  };\n  /**\n   * Transforms an IsoVector to one in Cartesian 3D space based on an isovector\n   * @param origin an IsoVector\n   * @param isoGridSize\n   * @returns Point as a Vector3\n   */\n\n\n  _IsoVector.prototype.toCartesianOrigin = function (origin, isoGridSize) {\n    var point = Vector3.Zero();\n    point.x = origin.x + 2 * this.x * isoGridSize + this.y * isoGridSize;\n    point.y = origin.y + Math.sqrt(3) * this.y * isoGridSize;\n    return point;\n  }; // Statics\n\n  /**\n   * Gets a new IsoVector(0, 0)\n   * @returns a new IsoVector\n   */\n\n\n  _IsoVector.Zero = function () {\n    return new _IsoVector(0, 0);\n  };\n\n  return _IsoVector;\n}();\n\nexport { _IsoVector };","map":{"version":3,"mappings":"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","names":["Logger","Vector3","x","y","Math","floor","Warn","_IsoVector","other","m","n","origin","isoGridSize","point","Zero","sqrt"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Maths/math.isovector.ts"],"sourcesContent":["import { Logger } from \"../Misc/logger\";\r\nimport { Vector3 } from \"./math.vector\";\r\n\r\n/**\r\n * Class representing an isovector a vector containing 2 INTEGER coordinates\r\n * x axis is horizontal\r\n * y axis is 60 deg counter clockwise from positive y axis\r\n * @hidden\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class _IsoVector {\r\n    /**\r\n     * Creates a new isovector from the given x and y coordinates\r\n     * @param x defines the first coordinate, must be an integer\r\n     * @param y defines the second coordinate, must be an integer\r\n     */\r\n    constructor(\r\n        /** defines the first coordinate */\r\n        public x: number = 0,\r\n        /** defines the second coordinate */\r\n        public y: number = 0\r\n    ) {\r\n        if (x !== Math.floor(x)) {\r\n            x === Math.floor(x);\r\n            Logger.Warn(\"x is not an integer, floor(x) used\");\r\n        }\r\n        if (y !== Math.floor(y)) {\r\n            y === Math.floor(y);\r\n            Logger.Warn(\"y is not an integer, floor(y) used\");\r\n        }\r\n    }\r\n\r\n    // Operators\r\n\r\n    /**\r\n     * Gets a new IsoVector copied from the IsoVector\r\n     * @returns a new IsoVector\r\n     */\r\n    public clone(): _IsoVector {\r\n        return new _IsoVector(this.x, this.y);\r\n    }\r\n\r\n    /**\r\n     * Rotates one IsoVector 60 degrees counter clockwise about another\r\n     * Please note that this is an in place operation\r\n     * @param other an IsoVector a center of rotation\r\n     * @returns the rotated IsoVector\r\n     */\r\n    public rotate60About(other: _IsoVector) {\r\n        //other IsoVector\r\n        const x: number = this.x;\r\n        this.x = other.x + other.y - this.y;\r\n        this.y = x + this.y - other.x;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotates one IsoVector 60 degrees clockwise about another\r\n     * Please note that this is an in place operation\r\n     * @param other an IsoVector as center of rotation\r\n     * @returns the rotated IsoVector\r\n     */\r\n    public rotateNeg60About(other: _IsoVector) {\r\n        const x = this.x;\r\n        this.x = x + this.y - other.y;\r\n        this.y = other.x + other.y - x;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * For an equilateral triangle OAB with O at isovector (0, 0) and A at isovector (m, n)\r\n     * Rotates one IsoVector 120 degrees counter clockwise about the center of the triangle\r\n     * Please note that this is an in place operation\r\n     * @param m integer a measure a Primary triangle of order (m, n) m > n\r\n     * @param n >= 0 integer a measure for a Primary triangle of order (m, n)\r\n     * @returns the rotated IsoVector\r\n     */\r\n    public rotate120(m: number, n: number) {\r\n        //m, n integers\r\n        if (m !== Math.floor(m)) {\r\n            m === Math.floor(m);\r\n            Logger.Warn(\"m not an integer only floor(m) used\");\r\n        }\r\n        if (n !== Math.floor(n)) {\r\n            n === Math.floor(n);\r\n            Logger.Warn(\"n not an integer only floor(n) used\");\r\n        }\r\n        const x = this.x;\r\n        this.x = m - x - this.y;\r\n        this.y = n + x;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * For an equilateral triangle OAB with O at isovector (0, 0) and A at isovector (m, n)\r\n     * Rotates one IsoVector 120 degrees clockwise about the center of the triangle\r\n     * Please note that this is an in place operation\r\n     * @param m integer a measure a Primary triangle of order (m, n) m > n\r\n     * @param n >= 0 integer a measure for a Primary triangle of order (m, n)\r\n     * @returns the rotated IsoVector\r\n     */\r\n    public rotateNeg120(m: number, n: number) {\r\n        //m, n integers\r\n        if (m !== Math.floor(m)) {\r\n            m === Math.floor(m);\r\n            Logger.Warn(\"m is not an integer, floor(m) used\");\r\n        }\r\n        if (n !== Math.floor(n)) {\r\n            n === Math.floor(n);\r\n            Logger.Warn(\"n is not an integer,   floor(n) used\");\r\n        }\r\n        const x = this.x;\r\n        this.x = this.y - n;\r\n        this.y = m + n - x - this.y;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Transforms an IsoVector to one in Cartesian 3D space based on an isovector\r\n     * @param origin an IsoVector\r\n     * @param isoGridSize\r\n     * @returns Point as a Vector3\r\n     */\r\n    public toCartesianOrigin(origin: _IsoVector, isoGridSize: number) {\r\n        const point = Vector3.Zero();\r\n        point.x = origin.x + 2 * this.x * isoGridSize + this.y * isoGridSize;\r\n        point.y = origin.y + Math.sqrt(3) * this.y * isoGridSize;\r\n        return point;\r\n    }\r\n\r\n    // Statics\r\n\r\n    /**\r\n     * Gets a new IsoVector(0, 0)\r\n     * @returns a new IsoVector\r\n     */\r\n    public static Zero(): _IsoVector {\r\n        return new _IsoVector(0, 0);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}