{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport { Tools } from \"../../Misc/tools.js\";\n/**\n * Meshopt compression (https://github.com/zeux/meshoptimizer)\n *\n * This class wraps the meshopt library from https://github.com/zeux/meshoptimizer/tree/master/js.\n *\n * **Encoder**\n *\n * The encoder is not currently implemented.\n *\n * **Decoder**\n *\n * By default, the configuration points to a copy of the meshopt files on the Babylon.js preview CDN (e.g. https://preview.babylonjs.com/meshopt_decoder.js).\n *\n * To update the configuration, use the following code:\n * ```javascript\n *     MeshoptCompression.Configuration = {\n *         decoder: {\n *             url: \"<url to the meshopt decoder library>\"\n *         }\n *     };\n * ```\n */\n\nvar MeshoptCompression =\n/** @class */\nfunction () {\n  /**\n   * Constructor\n   */\n  function MeshoptCompression() {\n    var decoder = MeshoptCompression.Configuration.decoder;\n    this._decoderModulePromise = Tools.LoadScriptAsync(Tools.GetAbsoluteUrl(decoder.url)).then(function () {\n      // Wait for WebAssembly compilation before resolving promise\n      return MeshoptDecoder.ready;\n    });\n  }\n\n  Object.defineProperty(MeshoptCompression, \"Default\", {\n    /**\n     * Default instance for the meshoptimizer object.\n     */\n    get: function get() {\n      if (!MeshoptCompression._Default) {\n        MeshoptCompression._Default = new MeshoptCompression();\n      }\n\n      return MeshoptCompression._Default;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Stop all async operations and release resources.\n   */\n\n  MeshoptCompression.prototype.dispose = function () {\n    delete this._decoderModulePromise;\n  };\n  /**\n   * Decode meshopt data.\n   * @see https://github.com/zeux/meshoptimizer/tree/master/js#decoder\n   * @param source The input data.\n   * @param count The number of elements.\n   * @param stride The stride in bytes.\n   * @param mode The compression mode.\n   * @param filter The compression filter.\n   * @returns a Promise<Uint8Array> that resolves to the decoded data\n   */\n\n\n  MeshoptCompression.prototype.decodeGltfBufferAsync = function (source, count, stride, mode, filter) {\n    return this._decoderModulePromise.then(function () {\n      var result = new Uint8Array(count * stride);\n      MeshoptDecoder.decodeGltfBuffer(result, count, stride, source, mode, filter);\n      return result;\n    });\n  };\n  /**\n   * The configuration. Defaults to the following:\n   * ```javascript\n   * decoder: {\n   *   url: \"https://preview.babylonjs.com/meshopt_decoder.js\"\n   * }\n   * ```\n   */\n\n\n  MeshoptCompression.Configuration = {\n    decoder: {\n      url: \"https://preview.babylonjs.com/meshopt_decoder.js\"\n    }\n  };\n  MeshoptCompression._Default = null;\n  return MeshoptCompression;\n}();\n\nexport { MeshoptCompression };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,KAAT,QAAsB,qBAAtB;AAsBA;;;;;;;;;;;;;;;;;;;;;;;AAsBA;AAAA;AAAA;AA8BI;;;AAGA;AACI,QAAMC,OAAO,GAAGC,kBAAkB,CAACC,aAAnB,CAAiCF,OAAjD;AAEA,SAAKG,qBAAL,GAA6BJ,KAAK,CAACK,eAAN,CAAsBL,KAAK,CAACM,cAAN,CAAqBL,OAAO,CAACM,GAA7B,CAAtB,EAAyDC,IAAzD,CAA8D;AACvF;AACA,aAAOC,cAAc,CAACC,KAAtB;AACH,KAH4B,CAA7B;AAIH;;AAlBDC,wBAAkBT,kBAAlB,EAAkB,SAAlB,EAAyB;AAHzB;;;SAGA;AACI,UAAI,CAACA,kBAAkB,CAACU,QAAxB,EAAkC;AAC9BV,0BAAkB,CAACU,QAAnB,GAA8B,IAAIV,kBAAJ,EAA9B;AACH;;AAED,aAAOA,kBAAkB,CAACU,QAA1B;AACH,KANwB;qBAAA;;AAAA,GAAzB;AAoBA;;;;AAGOV,yCAAP;AACI,WAAO,KAAKE,qBAAZ;AACH,GAFM;AAIP;;;;;;;;;;;;AAUOF,uDAAP,UAA6BW,MAA7B,EAAiDC,KAAjD,EAAgEC,MAAhE,EAAgFC,IAAhF,EAA8HC,MAA9H,EAA6I;AACzI,WAAO,KAAKb,qBAAL,CAA4BI,IAA5B,CAAiC;AACpC,UAAMU,MAAM,GAAG,IAAIC,UAAJ,CAAeL,KAAK,GAAGC,MAAvB,CAAf;AACAN,oBAAc,CAACW,gBAAf,CAAgCF,MAAhC,EAAwCJ,KAAxC,EAA+CC,MAA/C,EAAuDF,MAAvD,EAA+DG,IAA/D,EAAqEC,MAArE;AACA,aAAOC,MAAP;AACH,KAJM,CAAP;AAKH,GANM;AAxDP;;;;;;;;;;AAQchB,qCAAkD;AAC5DD,WAAO,EAAE;AACLM,SAAG,EAAE;AADA;AADmD,GAAlD;AAMCL,gCAAyC,IAAzC;AAiDnB;AAAC,CAlED;;SAAaA","names":["Tools","decoder","MeshoptCompression","Configuration","_decoderModulePromise","LoadScriptAsync","GetAbsoluteUrl","url","then","MeshoptDecoder","ready","Object","_Default","source","count","stride","mode","filter","result","Uint8Array","decodeGltfBuffer"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Meshes/Compression/meshoptCompression.ts"],"sourcesContent":["import { Tools } from \"../../Misc/tools\";\r\nimport type { IDisposable } from \"../../scene\";\r\nimport type { Nullable } from \"../../types\";\r\n\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\ndeclare let MeshoptDecoder: any;\r\n\r\n/**\r\n * Configuration for meshoptimizer compression\r\n */\r\nexport interface IMeshoptCompressionConfiguration {\r\n    /**\r\n     * Configuration for the decoder.\r\n     */\r\n    decoder: {\r\n        /**\r\n         * The url to the meshopt decoder library.\r\n         */\r\n        url: string;\r\n    };\r\n}\r\n\r\n/**\r\n * Meshopt compression (https://github.com/zeux/meshoptimizer)\r\n *\r\n * This class wraps the meshopt library from https://github.com/zeux/meshoptimizer/tree/master/js.\r\n *\r\n * **Encoder**\r\n *\r\n * The encoder is not currently implemented.\r\n *\r\n * **Decoder**\r\n *\r\n * By default, the configuration points to a copy of the meshopt files on the Babylon.js preview CDN (e.g. https://preview.babylonjs.com/meshopt_decoder.js).\r\n *\r\n * To update the configuration, use the following code:\r\n * ```javascript\r\n *     MeshoptCompression.Configuration = {\r\n *         decoder: {\r\n *             url: \"<url to the meshopt decoder library>\"\r\n *         }\r\n *     };\r\n * ```\r\n */\r\nexport class MeshoptCompression implements IDisposable {\r\n    private _decoderModulePromise?: Promise<any>;\r\n\r\n    /**\r\n     * The configuration. Defaults to the following:\r\n     * ```javascript\r\n     * decoder: {\r\n     *   url: \"https://preview.babylonjs.com/meshopt_decoder.js\"\r\n     * }\r\n     * ```\r\n     */\r\n    public static Configuration: IMeshoptCompressionConfiguration = {\r\n        decoder: {\r\n            url: \"https://preview.babylonjs.com/meshopt_decoder.js\",\r\n        },\r\n    };\r\n\r\n    private static _Default: Nullable<MeshoptCompression> = null;\r\n\r\n    /**\r\n     * Default instance for the meshoptimizer object.\r\n     */\r\n    public static get Default(): MeshoptCompression {\r\n        if (!MeshoptCompression._Default) {\r\n            MeshoptCompression._Default = new MeshoptCompression();\r\n        }\r\n\r\n        return MeshoptCompression._Default;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() {\r\n        const decoder = MeshoptCompression.Configuration.decoder;\r\n\r\n        this._decoderModulePromise = Tools.LoadScriptAsync(Tools.GetAbsoluteUrl(decoder.url)).then(() => {\r\n            // Wait for WebAssembly compilation before resolving promise\r\n            return MeshoptDecoder.ready;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Stop all async operations and release resources.\r\n     */\r\n    public dispose(): void {\r\n        delete this._decoderModulePromise;\r\n    }\r\n\r\n    /**\r\n     * Decode meshopt data.\r\n     * @see https://github.com/zeux/meshoptimizer/tree/master/js#decoder\r\n     * @param source The input data.\r\n     * @param count The number of elements.\r\n     * @param stride The stride in bytes.\r\n     * @param mode The compression mode.\r\n     * @param filter The compression filter.\r\n     * @returns a Promise<Uint8Array> that resolves to the decoded data\r\n     */\r\n    public decodeGltfBufferAsync(source: Uint8Array, count: number, stride: number, mode: \"ATTRIBUTES\" | \"TRIANGLES\" | \"INDICES\", filter?: string): Promise<Uint8Array> {\r\n        return this._decoderModulePromise!.then(() => {\r\n            const result = new Uint8Array(count * stride);\r\n            MeshoptDecoder.decodeGltfBuffer(result, count, stride, source, mode, filter);\r\n            return result;\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}