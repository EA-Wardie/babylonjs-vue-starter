{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Vector2 } from \"../Maths/math.vector.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/vrDistortionCorrection.fragment.js\";\n/**\n * VRDistortionCorrectionPostProcess used for mobile VR\n */\n\nvar VRDistortionCorrectionPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(VRDistortionCorrectionPostProcess, _super);\n  /**\n   * Initializes the VRDistortionCorrectionPostProcess\n   * @param name The name of the effect.\n   * @param camera The camera to apply the render pass to.\n   * @param isRightEye If this is for the right eye distortion\n   * @param vrMetrics All the required metrics for the VR camera\n   */\n\n\n  function VRDistortionCorrectionPostProcess(name, camera, isRightEye, vrMetrics) {\n    var _this = _super.call(this, name, \"vrDistortionCorrection\", [\"LensCenter\", \"Scale\", \"ScaleIn\", \"HmdWarpParam\"], null, vrMetrics.postProcessScaleFactor, camera, Texture.BILINEAR_SAMPLINGMODE) || this;\n\n    _this._isRightEye = isRightEye;\n    _this._distortionFactors = vrMetrics.distortionK;\n    _this._postProcessScaleFactor = vrMetrics.postProcessScaleFactor;\n    _this._lensCenterOffset = vrMetrics.lensCenterOffset;\n    _this.adaptScaleToCurrentViewport = true;\n\n    _this.onSizeChangedObservable.add(function () {\n      _this._scaleIn = new Vector2(2, 2 / _this.aspectRatio);\n      _this._scaleFactor = new Vector2(0.5 * (1 / _this._postProcessScaleFactor), 0.5 * (1 / _this._postProcessScaleFactor) * _this.aspectRatio);\n      _this._lensCenter = new Vector2(_this._isRightEye ? 0.5 - _this._lensCenterOffset * 0.5 : 0.5 + _this._lensCenterOffset * 0.5, 0.5);\n    });\n\n    _this.onApplyObservable.add(function (effect) {\n      effect.setFloat2(\"LensCenter\", _this._lensCenter.x, _this._lensCenter.y);\n      effect.setFloat2(\"Scale\", _this._scaleFactor.x, _this._scaleFactor.y);\n      effect.setFloat2(\"ScaleIn\", _this._scaleIn.x, _this._scaleIn.y);\n      effect.setFloat4(\"HmdWarpParam\", _this._distortionFactors[0], _this._distortionFactors[1], _this._distortionFactors[2], _this._distortionFactors[3]);\n    });\n\n    return _this;\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"VRDistortionCorrectionPostProcess\" string\n   */\n\n\n  VRDistortionCorrectionPostProcess.prototype.getClassName = function () {\n    return \"VRDistortionCorrectionPostProcess\";\n  };\n\n  return VRDistortionCorrectionPostProcess;\n}(PostProcess);\n\nexport { VRDistortionCorrectionPostProcess };","map":{"version":3,"mappings":";AAAA,SAASA,OAAT,QAAwB,yBAAxB;AAIA,SAASC,OAAT,QAAwB,kCAAxB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,OAAO,+CAAP;AAEA;;;;AAGA;AAAA;AAAA;AAAuDC;AAiBnD;;;;;;;;;AAOA,6CAAYC,IAAZ,EAA0BC,MAA1B,EAA0CC,UAA1C,EAA+DC,SAA/D,EAAyF;AAAzF,gBACIC,kBAAMJ,IAAN,EAAY,wBAAZ,EAAsC,CAAC,YAAD,EAAe,OAAf,EAAwB,SAAxB,EAAmC,cAAnC,CAAtC,EAA0F,IAA1F,EAAgGG,SAAS,CAACE,sBAA1G,EAAkIJ,MAAlI,EAA0IJ,OAAO,CAACS,qBAAlJ,KAAwK,IAD5K;;AAGIC,SAAI,CAACC,WAAL,GAAmBN,UAAnB;AACAK,SAAI,CAACE,kBAAL,GAA0BN,SAAS,CAACO,WAApC;AACAH,SAAI,CAACI,uBAAL,GAA+BR,SAAS,CAACE,sBAAzC;AACAE,SAAI,CAACK,iBAAL,GAAyBT,SAAS,CAACU,gBAAnC;AACAN,SAAI,CAACO,2BAAL,GAAmC,IAAnC;;AAEAP,SAAI,CAACQ,uBAAL,CAA6BC,GAA7B,CAAiC;AAC7BT,WAAI,CAACU,QAAL,GAAgB,IAAIrB,OAAJ,CAAY,CAAZ,EAAe,IAAIW,KAAI,CAACW,WAAxB,CAAhB;AACAX,WAAI,CAACY,YAAL,GAAoB,IAAIvB,OAAJ,CAAY,OAAO,IAAIW,KAAI,CAACI,uBAAhB,CAAZ,EAAsD,OAAO,IAAIJ,KAAI,CAACI,uBAAhB,IAA2CJ,KAAI,CAACW,WAAtG,CAApB;AACAX,WAAI,CAACa,WAAL,GAAmB,IAAIxB,OAAJ,CAAYW,KAAI,CAACC,WAAL,GAAmB,MAAMD,KAAI,CAACK,iBAAL,GAAyB,GAAlD,GAAwD,MAAML,KAAI,CAACK,iBAAL,GAAyB,GAAnG,EAAwG,GAAxG,CAAnB;AACH,KAJD;;AAKAL,SAAI,CAACc,iBAAL,CAAuBL,GAAvB,CAA2B,UAACM,MAAD,EAAe;AACtCA,YAAM,CAACC,SAAP,CAAiB,YAAjB,EAA+BhB,KAAI,CAACa,WAAL,CAAiBI,CAAhD,EAAmDjB,KAAI,CAACa,WAAL,CAAiBK,CAApE;AACAH,YAAM,CAACC,SAAP,CAAiB,OAAjB,EAA0BhB,KAAI,CAACY,YAAL,CAAkBK,CAA5C,EAA+CjB,KAAI,CAACY,YAAL,CAAkBM,CAAjE;AACAH,YAAM,CAACC,SAAP,CAAiB,SAAjB,EAA4BhB,KAAI,CAACU,QAAL,CAAcO,CAA1C,EAA6CjB,KAAI,CAACU,QAAL,CAAcQ,CAA3D;AACAH,YAAM,CAACI,SAAP,CAAiB,cAAjB,EAAiCnB,KAAI,CAACE,kBAAL,CAAwB,CAAxB,CAAjC,EAA6DF,KAAI,CAACE,kBAAL,CAAwB,CAAxB,CAA7D,EAAyFF,KAAI,CAACE,kBAAL,CAAwB,CAAxB,CAAzF,EAAqHF,KAAI,CAACE,kBAAL,CAAwB,CAAxB,CAArH;AACH,KALD;;;AAMH;AAnCD;;;;;;AAIOkB,6DAAP;AACI,WAAO,mCAAP;AACH,GAFM;;AAgCX;AAAC,CA7CD,CAAuD7B,WAAvD","names":["Vector2","Texture","PostProcess","__extends","name","camera","isRightEye","vrMetrics","_super","postProcessScaleFactor","BILINEAR_SAMPLINGMODE","_this","_isRightEye","_distortionFactors","distortionK","_postProcessScaleFactor","_lensCenterOffset","lensCenterOffset","adaptScaleToCurrentViewport","onSizeChangedObservable","add","_scaleIn","aspectRatio","_scaleFactor","_lensCenter","onApplyObservable","effect","setFloat2","x","y","setFloat4","VRDistortionCorrectionPostProcess"],"sourceRoot":"","sources":["../../../../../lts/core/generated/PostProcesses/vrDistortionCorrectionPostProcess.ts"],"sourcesContent":["import { Vector2 } from \"../Maths/math.vector\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { VRCameraMetrics } from \"../Cameras/VR/vrCameraMetrics\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { PostProcess } from \"./postProcess\";\r\n\r\nimport \"../Shaders/vrDistortionCorrection.fragment\";\r\n\r\n/**\r\n * VRDistortionCorrectionPostProcess used for mobile VR\r\n */\r\nexport class VRDistortionCorrectionPostProcess extends PostProcess {\r\n    private _isRightEye: boolean;\r\n    private _distortionFactors: number[];\r\n    private _postProcessScaleFactor: number;\r\n    private _lensCenterOffset: number;\r\n    private _scaleIn: Vector2;\r\n    private _scaleFactor: Vector2;\r\n    private _lensCenter: Vector2;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"VRDistortionCorrectionPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"VRDistortionCorrectionPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Initializes the VRDistortionCorrectionPostProcess\r\n     * @param name The name of the effect.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param isRightEye If this is for the right eye distortion\r\n     * @param vrMetrics All the required metrics for the VR camera\r\n     */\r\n    constructor(name: string, camera: Camera, isRightEye: boolean, vrMetrics: VRCameraMetrics) {\r\n        super(name, \"vrDistortionCorrection\", [\"LensCenter\", \"Scale\", \"ScaleIn\", \"HmdWarpParam\"], null, vrMetrics.postProcessScaleFactor, camera, Texture.BILINEAR_SAMPLINGMODE);\r\n\r\n        this._isRightEye = isRightEye;\r\n        this._distortionFactors = vrMetrics.distortionK;\r\n        this._postProcessScaleFactor = vrMetrics.postProcessScaleFactor;\r\n        this._lensCenterOffset = vrMetrics.lensCenterOffset;\r\n        this.adaptScaleToCurrentViewport = true;\r\n\r\n        this.onSizeChangedObservable.add(() => {\r\n            this._scaleIn = new Vector2(2, 2 / this.aspectRatio);\r\n            this._scaleFactor = new Vector2(0.5 * (1 / this._postProcessScaleFactor), 0.5 * (1 / this._postProcessScaleFactor) * this.aspectRatio);\r\n            this._lensCenter = new Vector2(this._isRightEye ? 0.5 - this._lensCenterOffset * 0.5 : 0.5 + this._lensCenterOffset * 0.5, 0.5);\r\n        });\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            effect.setFloat2(\"LensCenter\", this._lensCenter.x, this._lensCenter.y);\r\n            effect.setFloat2(\"Scale\", this._scaleFactor.x, this._scaleFactor.y);\r\n            effect.setFloat2(\"ScaleIn\", this._scaleIn.x, this._scaleIn.y);\r\n            effect.setFloat4(\"HmdWarpParam\", this._distortionFactors[0], this._distortionFactors[1], this._distortionFactors[2], this._distortionFactors[3]);\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}