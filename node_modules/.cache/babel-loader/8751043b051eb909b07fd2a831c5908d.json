{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { WebXRControllerComponent } from \"./webXRControllerComponent.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { SceneLoader } from \"../../Loading/sceneLoader.js\";\nimport { Quaternion, Vector3 } from \"../../Maths/math.vector.js\";\nimport { Mesh } from \"../../Meshes/mesh.js\";\n/**\n * An Abstract Motion controller\n * This class receives an xrInput and a profile layout and uses those to initialize the components\n * Each component has an observable to check for changes in value and state\n */\n\nvar WebXRAbstractMotionController =\n/** @class */\nfunction () {\n  /**\n   * constructs a new abstract motion controller\n   * @param scene the scene to which the model of the controller will be added\n   * @param layout The profile layout to load\n   * @param gamepadObject The gamepad object correlating to this controller\n   * @param handedness handedness (left/right/none) of this controller\n   * @param _doNotLoadControllerMesh set this flag to ignore the mesh loading\n   * @param _controllerCache a cache holding controller models already loaded in this session\n   */\n  function WebXRAbstractMotionController( // eslint-disable-next-line @typescript-eslint/naming-convention\n  scene, // eslint-disable-next-line @typescript-eslint/naming-convention\n  layout,\n  /**\n   * The gamepad object correlating to this controller\n   */\n  gamepadObject,\n  /**\n   * handedness (left/right/none) of this controller\n   */\n  handedness,\n  /**\n   * @hidden\n   */\n  _doNotLoadControllerMesh, _controllerCache) {\n    if (_doNotLoadControllerMesh === void 0) {\n      _doNotLoadControllerMesh = false;\n    }\n\n    var _this = this;\n\n    this.scene = scene;\n    this.layout = layout;\n    this.gamepadObject = gamepadObject;\n    this.handedness = handedness;\n    this._doNotLoadControllerMesh = _doNotLoadControllerMesh;\n    this._controllerCache = _controllerCache;\n\n    this._initComponent = function (id) {\n      if (!id) {\n        return;\n      }\n\n      var componentDef = _this.layout.components[id];\n      var type = componentDef.type;\n      var buttonIndex = componentDef.gamepadIndices.button; // search for axes\n\n      var axes = [];\n\n      if (componentDef.gamepadIndices.xAxis !== undefined && componentDef.gamepadIndices.yAxis !== undefined) {\n        axes.push(componentDef.gamepadIndices.xAxis, componentDef.gamepadIndices.yAxis);\n      }\n\n      _this.components[id] = new WebXRControllerComponent(id, type, buttonIndex, axes);\n    };\n\n    this._modelReady = false;\n    /**\n     * A map of components (WebXRControllerComponent) in this motion controller\n     * Components have a ComponentType and can also have both button and axis definitions\n     */\n\n    this.components = {};\n    /**\n     * Disable the model's animation. Can be set at any time.\n     */\n\n    this.disableAnimation = false;\n    /**\n     * Observers registered here will be triggered when the model of this controller is done loading\n     */\n\n    this.onModelLoadedObservable = new Observable(); // initialize the components\n\n    if (layout.components) {\n      Object.keys(layout.components).forEach(this._initComponent);\n    } // Model is loaded in WebXRInput\n\n  }\n  /**\n   * Dispose this controller, the model mesh and all its components\n   */\n\n\n  WebXRAbstractMotionController.prototype.dispose = function () {\n    var _this = this;\n\n    this.getComponentIds().forEach(function (id) {\n      return _this.getComponent(id).dispose();\n    });\n\n    if (this.rootMesh) {\n      this.rootMesh.getChildren(undefined, true).forEach(function (node) {\n        node.setEnabled(false);\n      });\n      this.rootMesh.dispose(!!this._controllerCache, !this._controllerCache);\n    }\n  };\n  /**\n   * Returns all components of specific type\n   * @param type the type to search for\n   * @return an array of components with this type\n   */\n\n\n  WebXRAbstractMotionController.prototype.getAllComponentsOfType = function (type) {\n    var _this = this;\n\n    return this.getComponentIds().map(function (id) {\n      return _this.components[id];\n    }).filter(function (component) {\n      return component.type === type;\n    });\n  };\n  /**\n   * get a component based an its component id as defined in layout.components\n   * @param id the id of the component\n   * @returns the component correlates to the id or undefined if not found\n   */\n\n\n  WebXRAbstractMotionController.prototype.getComponent = function (id) {\n    return this.components[id];\n  };\n  /**\n   * Get the list of components available in this motion controller\n   * @returns an array of strings correlating to available components\n   */\n\n\n  WebXRAbstractMotionController.prototype.getComponentIds = function () {\n    return Object.keys(this.components);\n  };\n  /**\n   * Get the first component of specific type\n   * @param type type of component to find\n   * @return a controller component or null if not found\n   */\n\n\n  WebXRAbstractMotionController.prototype.getComponentOfType = function (type) {\n    return this.getAllComponentsOfType(type)[0] || null;\n  };\n  /**\n   * Get the main (Select) component of this controller as defined in the layout\n   * @returns the main component of this controller\n   */\n\n\n  WebXRAbstractMotionController.prototype.getMainComponent = function () {\n    return this.getComponent(this.layout.selectComponentId);\n  };\n  /**\n   * Loads the model correlating to this controller\n   * When the mesh is loaded, the onModelLoadedObservable will be triggered\n   * @returns A promise fulfilled with the result of the model loading\n   */\n\n\n  WebXRAbstractMotionController.prototype.loadModel = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var useGeneric, loadingParams;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        useGeneric = !this._getModelLoadingConstraints();\n        loadingParams = this._getGenericFilenameAndPath(); // Checking if GLB loader is present\n\n        if (useGeneric) {\n          Logger.Warn(\"Falling back to generic models\");\n        } else {\n          loadingParams = this._getFilenameAndPath();\n        }\n\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          var meshesLoaded = function meshesLoaded(meshes) {\n            if (useGeneric) {\n              _this._getGenericParentMesh(meshes);\n            } else {\n              _this._setRootMesh(meshes);\n            }\n\n            _this._processLoadedModel(meshes);\n\n            _this._modelReady = true;\n\n            _this.onModelLoadedObservable.notifyObservers(_this);\n\n            resolve(true);\n          };\n\n          if (_this._controllerCache) {\n            // look for it in the cache\n            var found = _this._controllerCache.filter(function (c) {\n              return c.filename === loadingParams.filename && c.path === loadingParams.path;\n            });\n\n            if (found[0]) {\n              found[0].meshes.forEach(function (mesh) {\n                return mesh.setEnabled(true);\n              });\n              meshesLoaded(found[0].meshes);\n              return; // found, don't continue to load\n            }\n          }\n\n          SceneLoader.ImportMesh(\"\", loadingParams.path, loadingParams.filename, _this.scene, function (meshes) {\n            if (_this._controllerCache) {\n              _this._controllerCache.push(__assign(__assign({}, loadingParams), {\n                meshes: meshes\n              }));\n            }\n\n            meshesLoaded(meshes);\n          }, null, function (_scene, message) {\n            Logger.Log(message);\n            Logger.Warn(\"Failed to retrieve controller model of type \".concat(_this.profileId, \" from the remote server: \").concat(loadingParams.path).concat(loadingParams.filename));\n            reject(message);\n          });\n        })];\n      });\n    });\n  };\n  /**\n   * Update this model using the current XRFrame\n   * @param xrFrame the current xr frame to use and update the model\n   */\n\n\n  WebXRAbstractMotionController.prototype.updateFromXRFrame = function (xrFrame) {\n    var _this = this;\n\n    this.getComponentIds().forEach(function (id) {\n      return _this.getComponent(id).update(_this.gamepadObject);\n    });\n    this.updateModel(xrFrame);\n  };\n\n  Object.defineProperty(WebXRAbstractMotionController.prototype, \"handness\", {\n    /**\n     * Backwards compatibility due to a deeply-integrated typo\n     */\n    get: function get() {\n      return this.handedness;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Pulse (vibrate) this controller\n   * If the controller does not support pulses, this function will fail silently and return Promise<false> directly after called\n   * Consecutive calls to this function will cancel the last pulse call\n   *\n   * @param value the strength of the pulse in 0.0...1.0 range\n   * @param duration Duration of the pulse in milliseconds\n   * @param hapticActuatorIndex optional index of actuator (will usually be 0)\n   * @returns a promise that will send true when the pulse has ended and false if the device doesn't support pulse or an error accrued\n   */\n\n  WebXRAbstractMotionController.prototype.pulse = function (value, duration, hapticActuatorIndex) {\n    if (hapticActuatorIndex === void 0) {\n      hapticActuatorIndex = 0;\n    }\n\n    if (this.gamepadObject.hapticActuators && this.gamepadObject.hapticActuators[hapticActuatorIndex]) {\n      return this.gamepadObject.hapticActuators[hapticActuatorIndex].pulse(value, duration);\n    } else {\n      return Promise.resolve(false);\n    }\n  }; // Look through all children recursively. This will return null if no mesh exists with the given name.\n\n\n  WebXRAbstractMotionController.prototype._getChildByName = function (node, name) {\n    return node.getChildren(function (n) {\n      return n.name === name;\n    }, false)[0];\n  }; // Look through only immediate children. This will return null if no mesh exists with the given name.\n\n\n  WebXRAbstractMotionController.prototype._getImmediateChildByName = function (node, name) {\n    return node.getChildren(function (n) {\n      return n.name == name;\n    }, true)[0];\n  };\n  /**\n   * Moves the axis on the controller mesh based on its current state\n   * @param axisMap\n   * @param axisValue the value of the axis which determines the meshes new position\n   * @param fixValueCoordinates\n   * @hidden\n   */\n\n\n  WebXRAbstractMotionController.prototype._lerpTransform = function (axisMap, axisValue, fixValueCoordinates) {\n    if (!axisMap.minMesh || !axisMap.maxMesh || !axisMap.valueMesh) {\n      return;\n    }\n\n    if (!axisMap.minMesh.rotationQuaternion || !axisMap.maxMesh.rotationQuaternion || !axisMap.valueMesh.rotationQuaternion) {\n      return;\n    } // Convert from gamepad value range (-1 to +1) to lerp range (0 to 1)\n\n\n    var lerpValue = fixValueCoordinates ? axisValue * 0.5 + 0.5 : axisValue;\n    Quaternion.SlerpToRef(axisMap.minMesh.rotationQuaternion, axisMap.maxMesh.rotationQuaternion, lerpValue, axisMap.valueMesh.rotationQuaternion);\n    Vector3.LerpToRef(axisMap.minMesh.position, axisMap.maxMesh.position, lerpValue, axisMap.valueMesh.position);\n  };\n  /**\n   * Update the model itself with the current frame data\n   * @param xrFrame the frame to use for updating the model mesh\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n\n\n  WebXRAbstractMotionController.prototype.updateModel = function (xrFrame) {\n    if (!this._modelReady) {\n      return;\n    }\n\n    this._updateModel(xrFrame);\n  };\n\n  WebXRAbstractMotionController.prototype._getGenericFilenameAndPath = function () {\n    return {\n      filename: \"generic.babylon\",\n      path: \"https://controllers.babylonjs.com/generic/\"\n    };\n  };\n\n  WebXRAbstractMotionController.prototype._getGenericParentMesh = function (meshes) {\n    var _this = this;\n\n    this.rootMesh = new Mesh(this.profileId + \" \" + this.handedness, this.scene);\n    meshes.forEach(function (mesh) {\n      if (!mesh.parent) {\n        mesh.isPickable = false;\n        mesh.setParent(_this.rootMesh);\n      }\n    });\n    this.rootMesh.rotationQuaternion = Quaternion.FromEulerAngles(0, Math.PI, 0);\n  };\n\n  return WebXRAbstractMotionController;\n}();\n\nexport { WebXRAbstractMotionController };","map":{"version":3,"mappings":"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","names":["WebXRControllerComponent","Observable","Logger","SceneLoader","Quaternion","Vector3","Mesh","scene","layout","gamepadObject","handedness","_doNotLoadControllerMesh","_controllerCache","id","componentDef","_this","components","type","buttonIndex","gamepadIndices","button","axes","xAxis","undefined","yAxis","push","Object","keys","forEach","_initComponent","WebXRAbstractMotionController","getComponentIds","getComponent","dispose","rootMesh","getChildren","node","setEnabled","map","filter","component","getAllComponentsOfType","selectComponentId","useGeneric","_getModelLoadingConstraints","loadingParams","_getGenericFilenameAndPath","Warn","_getFilenameAndPath","Promise","resolve","reject","meshesLoaded","meshes","_getGenericParentMesh","_setRootMesh","_processLoadedModel","_modelReady","onModelLoadedObservable","notifyObservers","found","c","filename","path","mesh","ImportMesh","__assign","_scene","message","Log","profileId","concat","xrFrame","update","updateModel","value","duration","hapticActuatorIndex","hapticActuators","pulse","name","n","axisMap","axisValue","fixValueCoordinates","minMesh","maxMesh","valueMesh","rotationQuaternion","lerpValue","SlerpToRef","LerpToRef","position","_updateModel","parent","isPickable","setParent","FromEulerAngles","Math","PI"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/XR/motionController/webXRAbstractMotionController.ts"],"sourcesContent":["import type { IDisposable, Scene } from \"../../scene\";\r\nimport { WebXRControllerComponent } from \"./webXRControllerComponent\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Quaternion, Vector3 } from \"../../Maths/math.vector\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\n\r\n/**\r\n * Handedness type in xrInput profiles. These can be used to define layouts in the Layout Map.\r\n */\r\nexport type MotionControllerHandedness = \"none\" | \"left\" | \"right\";\r\n/**\r\n * The type of components available in motion controllers.\r\n * This is not the name of the component.\r\n */\r\nexport type MotionControllerComponentType = \"trigger\" | \"squeeze\" | \"touchpad\" | \"thumbstick\" | \"button\";\r\n\r\n/**\r\n * The state of a controller component\r\n */\r\nexport type MotionControllerComponentStateType = \"default\" | \"touched\" | \"pressed\";\r\n\r\n/**\r\n * The schema of motion controller layout.\r\n * No object will be initialized using this interface\r\n * This is used just to define the profile.\r\n */\r\nexport interface IMotionControllerLayout {\r\n    /**\r\n     * Path to load the assets. Usually relative to the base path\r\n     */\r\n    assetPath: string;\r\n    /**\r\n     * Available components (unsorted)\r\n     */\r\n    components: {\r\n        /**\r\n         * A map of component Ids\r\n         */\r\n        [componentId: string]: {\r\n            /**\r\n             * The type of input the component outputs\r\n             */\r\n            type: MotionControllerComponentType;\r\n            /**\r\n             * The indices of this component in the gamepad object\r\n             */\r\n            gamepadIndices: {\r\n                /**\r\n                 * Index of button\r\n                 */\r\n                button?: number;\r\n                /**\r\n                 * If available, index of x-axis\r\n                 */\r\n                xAxis?: number;\r\n                /**\r\n                 * If available, index of y-axis\r\n                 */\r\n                yAxis?: number;\r\n            };\r\n            /**\r\n             * The mesh's root node name\r\n             */\r\n            rootNodeName: string;\r\n            /**\r\n             * Animation definitions for this model\r\n             */\r\n            visualResponses: {\r\n                [stateKey: string]: {\r\n                    /**\r\n                     * What property will be animated\r\n                     */\r\n                    componentProperty: \"xAxis\" | \"yAxis\" | \"button\" | \"state\";\r\n                    /**\r\n                     * What states influence this visual response\r\n                     */\r\n                    states: MotionControllerComponentStateType[];\r\n                    /**\r\n                     * Type of animation - movement or visibility\r\n                     */\r\n                    valueNodeProperty: \"transform\" | \"visibility\";\r\n                    /**\r\n                     * Base node name to move. Its position will be calculated according to the min and max nodes\r\n                     */\r\n                    valueNodeName?: string;\r\n                    /**\r\n                     * Minimum movement node\r\n                     */\r\n                    minNodeName?: string;\r\n                    /**\r\n                     * Max movement node\r\n                     */\r\n                    maxNodeName?: string;\r\n                };\r\n            };\r\n            /**\r\n             * If touch enabled, what is the name of node to display user feedback\r\n             */\r\n            touchPointNodeName?: string;\r\n        };\r\n    };\r\n    /**\r\n     * Is it xr standard mapping or not\r\n     */\r\n    gamepadMapping: \"\" | \"xr-standard\";\r\n    /**\r\n     * Base root node of this entire model\r\n     */\r\n    rootNodeName: string;\r\n    /**\r\n     * Defines the main button component id\r\n     */\r\n    selectComponentId: string;\r\n}\r\n\r\n/**\r\n * A definition for the layout map in the input profile\r\n */\r\nexport interface IMotionControllerLayoutMap {\r\n    /**\r\n     * Layouts with handedness type as a key\r\n     */\r\n    [handedness: string /* handedness */]: IMotionControllerLayout;\r\n}\r\n\r\n/**\r\n * The XR Input profile schema\r\n * Profiles can be found here:\r\n * https://github.com/immersive-web/webxr-input-profiles/tree/master/packages/registry/profiles\r\n */\r\nexport interface IMotionControllerProfile {\r\n    /**\r\n     * fallback profiles for this profileId\r\n     */\r\n    fallbackProfileIds: string[];\r\n    /**\r\n     * The layout map, with handedness as key\r\n     */\r\n    layouts: IMotionControllerLayoutMap;\r\n    /**\r\n     * The id of this profile\r\n     * correlates to the profile(s) in the xrInput.profiles array\r\n     */\r\n    profileId: string;\r\n}\r\n\r\n/**\r\n * A helper-interface for the 3 meshes needed for controller button animation\r\n * The meshes are provided to the _lerpButtonTransform function to calculate the current position of the value mesh\r\n */\r\nexport interface IMotionControllerButtonMeshMap {\r\n    /**\r\n     * the mesh that defines the pressed value mesh position.\r\n     * This is used to find the max-position of this button\r\n     */\r\n    pressedMesh: AbstractMesh;\r\n    /**\r\n     * the mesh that defines the unpressed value mesh position.\r\n     * This is used to find the min (or initial) position of this button\r\n     */\r\n    unpressedMesh: AbstractMesh;\r\n    /**\r\n     * The mesh that will be changed when value changes\r\n     */\r\n    valueMesh: AbstractMesh;\r\n}\r\n\r\n/**\r\n * A helper-interface for the 3 meshes needed for controller axis animation.\r\n * This will be expanded when touchpad animations are fully supported\r\n * The meshes are provided to the _lerpAxisTransform function to calculate the current position of the value mesh\r\n */\r\nexport interface IMotionControllerMeshMap {\r\n    /**\r\n     * the mesh that defines the maximum value mesh position.\r\n     */\r\n    maxMesh?: AbstractMesh;\r\n    /**\r\n     * the mesh that defines the minimum value mesh position.\r\n     */\r\n    minMesh?: AbstractMesh;\r\n    /**\r\n     * The mesh that will be changed when axis value changes\r\n     */\r\n    valueMesh?: AbstractMesh;\r\n}\r\n\r\n/**\r\n * The elements needed for change-detection of the gamepad objects in motion controllers\r\n */\r\nexport interface IMinimalMotionControllerObject {\r\n    /**\r\n     * Available axes of this controller\r\n     */\r\n    axes: number[];\r\n    /**\r\n     * An array of available buttons\r\n     */\r\n    buttons: Array<{\r\n        /**\r\n         * Value of the button/trigger\r\n         */\r\n        value: number;\r\n        /**\r\n         * If the button/trigger is currently touched\r\n         */\r\n        touched: boolean;\r\n        /**\r\n         * If the button/trigger is currently pressed\r\n         */\r\n        pressed: boolean;\r\n    }>;\r\n\r\n    /**\r\n     * EXPERIMENTAL haptic support.\r\n     */\r\n    hapticActuators?: Array<{\r\n        pulse: (value: number, duration: number) => Promise<boolean>;\r\n    }>;\r\n}\r\n\r\n/**\r\n * An Abstract Motion controller\r\n * This class receives an xrInput and a profile layout and uses those to initialize the components\r\n * Each component has an observable to check for changes in value and state\r\n */\r\nexport abstract class WebXRAbstractMotionController implements IDisposable {\r\n    private _initComponent = (id: string) => {\r\n        if (!id) {\r\n            return;\r\n        }\r\n        const componentDef = this.layout.components[id];\r\n        const type = componentDef.type;\r\n        const buttonIndex = componentDef.gamepadIndices.button;\r\n        // search for axes\r\n        const axes: number[] = [];\r\n        if (componentDef.gamepadIndices.xAxis !== undefined && componentDef.gamepadIndices.yAxis !== undefined) {\r\n            axes.push(componentDef.gamepadIndices.xAxis, componentDef.gamepadIndices.yAxis);\r\n        }\r\n\r\n        this.components[id] = new WebXRControllerComponent(id, type, buttonIndex, axes);\r\n    };\r\n\r\n    private _modelReady: boolean = false;\r\n\r\n    /**\r\n     * A map of components (WebXRControllerComponent) in this motion controller\r\n     * Components have a ComponentType and can also have both button and axis definitions\r\n     */\r\n    public readonly components: {\r\n        [id: string]: WebXRControllerComponent;\r\n    } = {};\r\n\r\n    /**\r\n     * Disable the model's animation. Can be set at any time.\r\n     */\r\n    public disableAnimation: boolean = false;\r\n    /**\r\n     * Observers registered here will be triggered when the model of this controller is done loading\r\n     */\r\n    public onModelLoadedObservable: Observable<WebXRAbstractMotionController> = new Observable();\r\n    /**\r\n     * The profile id of this motion controller\r\n     */\r\n    public abstract profileId: string;\r\n    /**\r\n     * The root mesh of the model. It is null if the model was not yet initialized\r\n     */\r\n    public rootMesh: Nullable<AbstractMesh>;\r\n\r\n    /**\r\n     * constructs a new abstract motion controller\r\n     * @param scene the scene to which the model of the controller will be added\r\n     * @param layout The profile layout to load\r\n     * @param gamepadObject The gamepad object correlating to this controller\r\n     * @param handedness handedness (left/right/none) of this controller\r\n     * @param _doNotLoadControllerMesh set this flag to ignore the mesh loading\r\n     * @param _controllerCache a cache holding controller models already loaded in this session\r\n     */\r\n    constructor(\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        protected scene: Scene,\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        protected layout: IMotionControllerLayout,\r\n        /**\r\n         * The gamepad object correlating to this controller\r\n         */\r\n        public gamepadObject: IMinimalMotionControllerObject,\r\n        /**\r\n         * handedness (left/right/none) of this controller\r\n         */\r\n        public handedness: MotionControllerHandedness,\r\n        /**\r\n         * @hidden\r\n         */\r\n        public _doNotLoadControllerMesh: boolean = false,\r\n        private _controllerCache?: Array<{\r\n            filename: string;\r\n            path: string;\r\n            meshes: AbstractMesh[];\r\n        }>\r\n    ) {\r\n        // initialize the components\r\n        if (layout.components) {\r\n            Object.keys(layout.components).forEach(this._initComponent);\r\n        }\r\n        // Model is loaded in WebXRInput\r\n    }\r\n\r\n    /**\r\n     * Dispose this controller, the model mesh and all its components\r\n     */\r\n    public dispose(): void {\r\n        this.getComponentIds().forEach((id) => this.getComponent(id).dispose());\r\n        if (this.rootMesh) {\r\n            this.rootMesh.getChildren(undefined, true).forEach((node) => {\r\n                node.setEnabled(false);\r\n            });\r\n            this.rootMesh.dispose(!!this._controllerCache, !this._controllerCache);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns all components of specific type\r\n     * @param type the type to search for\r\n     * @return an array of components with this type\r\n     */\r\n    public getAllComponentsOfType(type: MotionControllerComponentType): WebXRControllerComponent[] {\r\n        return this.getComponentIds()\r\n            .map((id) => this.components[id])\r\n            .filter((component) => component.type === type);\r\n    }\r\n\r\n    /**\r\n     * get a component based an its component id as defined in layout.components\r\n     * @param id the id of the component\r\n     * @returns the component correlates to the id or undefined if not found\r\n     */\r\n    public getComponent(id: string): WebXRControllerComponent {\r\n        return this.components[id];\r\n    }\r\n\r\n    /**\r\n     * Get the list of components available in this motion controller\r\n     * @returns an array of strings correlating to available components\r\n     */\r\n    public getComponentIds(): string[] {\r\n        return Object.keys(this.components);\r\n    }\r\n\r\n    /**\r\n     * Get the first component of specific type\r\n     * @param type type of component to find\r\n     * @return a controller component or null if not found\r\n     */\r\n    public getComponentOfType(type: MotionControllerComponentType): Nullable<WebXRControllerComponent> {\r\n        return this.getAllComponentsOfType(type)[0] || null;\r\n    }\r\n\r\n    /**\r\n     * Get the main (Select) component of this controller as defined in the layout\r\n     * @returns the main component of this controller\r\n     */\r\n    public getMainComponent(): WebXRControllerComponent {\r\n        return this.getComponent(this.layout.selectComponentId);\r\n    }\r\n\r\n    /**\r\n     * Loads the model correlating to this controller\r\n     * When the mesh is loaded, the onModelLoadedObservable will be triggered\r\n     * @returns A promise fulfilled with the result of the model loading\r\n     */\r\n    public async loadModel(): Promise<boolean> {\r\n        const useGeneric = !this._getModelLoadingConstraints();\r\n        let loadingParams = this._getGenericFilenameAndPath();\r\n        // Checking if GLB loader is present\r\n        if (useGeneric) {\r\n            Logger.Warn(\"Falling back to generic models\");\r\n        } else {\r\n            loadingParams = this._getFilenameAndPath();\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            const meshesLoaded = (meshes: AbstractMesh[]) => {\r\n                if (useGeneric) {\r\n                    this._getGenericParentMesh(meshes);\r\n                } else {\r\n                    this._setRootMesh(meshes);\r\n                }\r\n                this._processLoadedModel(meshes);\r\n                this._modelReady = true;\r\n                this.onModelLoadedObservable.notifyObservers(this);\r\n                resolve(true);\r\n            };\r\n            if (this._controllerCache) {\r\n                // look for it in the cache\r\n                const found = this._controllerCache.filter((c) => {\r\n                    return c.filename === loadingParams.filename && c.path === loadingParams.path;\r\n                });\r\n                if (found[0]) {\r\n                    found[0].meshes.forEach((mesh) => mesh.setEnabled(true));\r\n                    meshesLoaded(found[0].meshes);\r\n                    return;\r\n                    // found, don't continue to load\r\n                }\r\n            }\r\n            SceneLoader.ImportMesh(\r\n                \"\",\r\n                loadingParams.path,\r\n                loadingParams.filename,\r\n                this.scene,\r\n                (meshes) => {\r\n                    if (this._controllerCache) {\r\n                        this._controllerCache.push({\r\n                            ...loadingParams,\r\n                            meshes,\r\n                        });\r\n                    }\r\n                    meshesLoaded(meshes);\r\n                },\r\n                null,\r\n                (_scene: Scene, message: string) => {\r\n                    Logger.Log(message);\r\n                    Logger.Warn(`Failed to retrieve controller model of type ${this.profileId} from the remote server: ${loadingParams.path}${loadingParams.filename}`);\r\n                    reject(message);\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update this model using the current XRFrame\r\n     * @param xrFrame the current xr frame to use and update the model\r\n     */\r\n    public updateFromXRFrame(xrFrame: XRFrame): void {\r\n        this.getComponentIds().forEach((id) => this.getComponent(id).update(this.gamepadObject));\r\n        this.updateModel(xrFrame);\r\n    }\r\n\r\n    /**\r\n     * Backwards compatibility due to a deeply-integrated typo\r\n     */\r\n    public get handness() {\r\n        return this.handedness;\r\n    }\r\n\r\n    /**\r\n     * Pulse (vibrate) this controller\r\n     * If the controller does not support pulses, this function will fail silently and return Promise<false> directly after called\r\n     * Consecutive calls to this function will cancel the last pulse call\r\n     *\r\n     * @param value the strength of the pulse in 0.0...1.0 range\r\n     * @param duration Duration of the pulse in milliseconds\r\n     * @param hapticActuatorIndex optional index of actuator (will usually be 0)\r\n     * @returns a promise that will send true when the pulse has ended and false if the device doesn't support pulse or an error accrued\r\n     */\r\n    public pulse(value: number, duration: number, hapticActuatorIndex: number = 0): Promise<boolean> {\r\n        if (this.gamepadObject.hapticActuators && this.gamepadObject.hapticActuators[hapticActuatorIndex]) {\r\n            return this.gamepadObject.hapticActuators[hapticActuatorIndex].pulse(value, duration);\r\n        } else {\r\n            return Promise.resolve(false);\r\n        }\r\n    }\r\n\r\n    // Look through all children recursively. This will return null if no mesh exists with the given name.\r\n    protected _getChildByName(node: AbstractMesh, name: string): AbstractMesh | undefined {\r\n        return <AbstractMesh | undefined>node.getChildren((n) => n.name === name, false)[0];\r\n    }\r\n\r\n    // Look through only immediate children. This will return null if no mesh exists with the given name.\r\n    protected _getImmediateChildByName(node: AbstractMesh, name: string): AbstractMesh | undefined {\r\n        return <AbstractMesh | undefined>node.getChildren((n) => n.name == name, true)[0];\r\n    }\r\n\r\n    /**\r\n     * Moves the axis on the controller mesh based on its current state\r\n     * @param axisMap\r\n     * @param axisValue the value of the axis which determines the meshes new position\r\n     * @param fixValueCoordinates\r\n     * @hidden\r\n     */\r\n    protected _lerpTransform(axisMap: IMotionControllerMeshMap, axisValue: number, fixValueCoordinates?: boolean): void {\r\n        if (!axisMap.minMesh || !axisMap.maxMesh || !axisMap.valueMesh) {\r\n            return;\r\n        }\r\n\r\n        if (!axisMap.minMesh.rotationQuaternion || !axisMap.maxMesh.rotationQuaternion || !axisMap.valueMesh.rotationQuaternion) {\r\n            return;\r\n        }\r\n\r\n        // Convert from gamepad value range (-1 to +1) to lerp range (0 to 1)\r\n        const lerpValue = fixValueCoordinates ? axisValue * 0.5 + 0.5 : axisValue;\r\n        Quaternion.SlerpToRef(axisMap.minMesh.rotationQuaternion, axisMap.maxMesh.rotationQuaternion, lerpValue, axisMap.valueMesh.rotationQuaternion);\r\n        Vector3.LerpToRef(axisMap.minMesh.position, axisMap.maxMesh.position, lerpValue, axisMap.valueMesh.position);\r\n    }\r\n\r\n    /**\r\n     * Update the model itself with the current frame data\r\n     * @param xrFrame the frame to use for updating the model mesh\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected updateModel(xrFrame: XRFrame): void {\r\n        if (!this._modelReady) {\r\n            return;\r\n        }\r\n        this._updateModel(xrFrame);\r\n    }\r\n\r\n    /**\r\n     * Get the filename and path for this controller's model\r\n     * @returns a map of filename and path\r\n     */\r\n    protected abstract _getFilenameAndPath(): { filename: string; path: string };\r\n    /**\r\n     * This function is called before the mesh is loaded. It checks for loading constraints.\r\n     * For example, this function can check if the GLB loader is available\r\n     * If this function returns false, the generic controller will be loaded instead\r\n     * @returns Is the client ready to load the mesh\r\n     */\r\n    protected abstract _getModelLoadingConstraints(): boolean;\r\n    /**\r\n     * This function will be called after the model was successfully loaded and can be used\r\n     * for mesh transformations before it is available for the user\r\n     * @param meshes the loaded meshes\r\n     */\r\n    protected abstract _processLoadedModel(meshes: AbstractMesh[]): void;\r\n    /**\r\n     * Set the root mesh for this controller. Important for the WebXR controller class\r\n     * @param meshes the loaded meshes\r\n     */\r\n    protected abstract _setRootMesh(meshes: AbstractMesh[]): void;\r\n    /**\r\n     * A function executed each frame that updates the mesh (if needed)\r\n     * @param xrFrame the current xrFrame\r\n     */\r\n    protected abstract _updateModel(xrFrame: XRFrame): void;\r\n\r\n    private _getGenericFilenameAndPath(): { filename: string; path: string } {\r\n        return {\r\n            filename: \"generic.babylon\",\r\n            path: \"https://controllers.babylonjs.com/generic/\",\r\n        };\r\n    }\r\n\r\n    private _getGenericParentMesh(meshes: AbstractMesh[]): void {\r\n        this.rootMesh = new Mesh(this.profileId + \" \" + this.handedness, this.scene);\r\n\r\n        meshes.forEach((mesh) => {\r\n            if (!mesh.parent) {\r\n                mesh.isPickable = false;\r\n                mesh.setParent(this.rootMesh);\r\n            }\r\n        });\r\n\r\n        this.rootMesh.rotationQuaternion = Quaternion.FromEulerAngles(0, Math.PI, 0);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}