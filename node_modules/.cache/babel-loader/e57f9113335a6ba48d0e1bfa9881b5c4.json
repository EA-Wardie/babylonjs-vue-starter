{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { Texture } from \"../../../Textures/texture.js\";\n/**\n * Base block used as input for post process\n */\n\nvar CurrentScreenBlock =\n/** @class */\nfunction (_super) {\n  __extends(CurrentScreenBlock, _super);\n  /**\n   * Create a new CurrentScreenBlock\n   * @param name defines the block name\n   */\n\n\n  function CurrentScreenBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.VertexAndFragment) || this;\n\n    _this._samplerName = \"textureSampler\";\n    /**\n     * Gets or sets a boolean indicating if content needs to be converted to gamma space\n     */\n\n    _this.convertToGammaSpace = false;\n    /**\n     * Gets or sets a boolean indicating if content needs to be converted to linear space\n     */\n\n    _this.convertToLinearSpace = false;\n    _this._isUnique = false;\n\n    _this.registerInput(\"uv\", NodeMaterialBlockConnectionPointTypes.Vector2, false, NodeMaterialBlockTargets.VertexAndFragment);\n\n    _this.registerOutput(\"rgba\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Neutral);\n\n    _this.registerOutput(\"rgb\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Neutral);\n\n    _this.registerOutput(\"r\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\n\n    _this.registerOutput(\"g\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\n\n    _this.registerOutput(\"b\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\n\n    _this.registerOutput(\"a\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\n\n    _this._inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector3);\n\n    _this._inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector4);\n\n    _this._inputs[0]._prioritizeVertex = false;\n    return _this;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  CurrentScreenBlock.prototype.getClassName = function () {\n    return \"CurrentScreenBlock\";\n  };\n\n  Object.defineProperty(CurrentScreenBlock.prototype, \"uv\", {\n    /**\n     * Gets the uv input component\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(CurrentScreenBlock.prototype, \"rgba\", {\n    /**\n     * Gets the rgba output component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(CurrentScreenBlock.prototype, \"rgb\", {\n    /**\n     * Gets the rgb output component\n     */\n    get: function get() {\n      return this._outputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(CurrentScreenBlock.prototype, \"r\", {\n    /**\n     * Gets the r output component\n     */\n    get: function get() {\n      return this._outputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(CurrentScreenBlock.prototype, \"g\", {\n    /**\n     * Gets the g output component\n     */\n    get: function get() {\n      return this._outputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(CurrentScreenBlock.prototype, \"b\", {\n    /**\n     * Gets the b output component\n     */\n    get: function get() {\n      return this._outputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(CurrentScreenBlock.prototype, \"a\", {\n    /**\n     * Gets the a output component\n     */\n    get: function get() {\n      return this._outputs[5];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Initialize the block and prepare the context for build\n   * @param state defines the state that will be used for the build\n   */\n\n  CurrentScreenBlock.prototype.initialize = function (state) {\n    state._excludeVariableName(\"textureSampler\");\n  };\n\n  Object.defineProperty(CurrentScreenBlock.prototype, \"target\", {\n    get: function get() {\n      if (!this.uv.isConnected) {\n        return NodeMaterialBlockTargets.VertexAndFragment;\n      }\n\n      if (this.uv.sourceBlock.isInput) {\n        return NodeMaterialBlockTargets.VertexAndFragment;\n      }\n\n      return NodeMaterialBlockTargets.Fragment;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  CurrentScreenBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    defines.setValue(this._linearDefineName, this.convertToGammaSpace, true);\n    defines.setValue(this._gammaDefineName, this.convertToLinearSpace, true);\n  };\n\n  CurrentScreenBlock.prototype.isReady = function () {\n    if (this.texture && !this.texture.isReadyOrNotBlocking()) {\n      return false;\n    }\n\n    return true;\n  };\n\n  CurrentScreenBlock.prototype._injectVertexCode = function (state) {\n    var uvInput = this.uv;\n\n    if (uvInput.connectedPoint.ownerBlock.isInput) {\n      var uvInputOwnerBlock = uvInput.connectedPoint.ownerBlock;\n\n      if (!uvInputOwnerBlock.isAttribute) {\n        state._emitUniformFromString(uvInput.associatedVariableName, \"vec2\");\n      }\n    }\n\n    this._mainUVName = \"vMain\" + uvInput.associatedVariableName;\n\n    state._emitVaryingFromString(this._mainUVName, \"vec2\");\n\n    state.compilationString += \"\".concat(this._mainUVName, \" = \").concat(uvInput.associatedVariableName, \".xy;\\r\\n\");\n\n    if (!this._outputs.some(function (o) {\n      return o.isConnectedInVertexShader;\n    })) {\n      return;\n    }\n\n    this._writeTextureRead(state, true);\n\n    for (var _i = 0, _a = this._outputs; _i < _a.length; _i++) {\n      var output = _a[_i];\n\n      if (output.hasEndpoints) {\n        this._writeOutput(state, output, output.name, true);\n      }\n    }\n  };\n\n  CurrentScreenBlock.prototype._writeTextureRead = function (state, vertexMode) {\n    if (vertexMode === void 0) {\n      vertexMode = false;\n    }\n\n    var uvInput = this.uv;\n\n    if (vertexMode) {\n      if (state.target === NodeMaterialBlockTargets.Fragment) {\n        return;\n      }\n\n      state.compilationString += \"vec4 \".concat(this._tempTextureRead, \" = texture2D(\").concat(this._samplerName, \", \").concat(uvInput.associatedVariableName, \");\\r\\n\");\n      return;\n    }\n\n    if (this.uv.ownerBlock.target === NodeMaterialBlockTargets.Fragment) {\n      state.compilationString += \"vec4 \".concat(this._tempTextureRead, \" = texture2D(\").concat(this._samplerName, \", \").concat(uvInput.associatedVariableName, \");\\r\\n\");\n      return;\n    }\n\n    state.compilationString += \"vec4 \".concat(this._tempTextureRead, \" = texture2D(\").concat(this._samplerName, \", \").concat(this._mainUVName, \");\\r\\n\");\n  };\n\n  CurrentScreenBlock.prototype._writeOutput = function (state, output, swizzle, vertexMode) {\n    if (vertexMode === void 0) {\n      vertexMode = false;\n    }\n\n    if (vertexMode) {\n      if (state.target === NodeMaterialBlockTargets.Fragment) {\n        return;\n      }\n\n      state.compilationString += \"\".concat(this._declareOutput(output, state), \" = \").concat(this._tempTextureRead, \".\").concat(swizzle, \";\\r\\n\");\n      return;\n    }\n\n    if (this.uv.ownerBlock.target === NodeMaterialBlockTargets.Fragment) {\n      state.compilationString += \"\".concat(this._declareOutput(output, state), \" = \").concat(this._tempTextureRead, \".\").concat(swizzle, \";\\r\\n\");\n      return;\n    }\n\n    state.compilationString += \"\".concat(this._declareOutput(output, state), \" = \").concat(this._tempTextureRead, \".\").concat(swizzle, \";\\r\\n\");\n    state.compilationString += \"#ifdef \".concat(this._linearDefineName, \"\\r\\n\");\n    state.compilationString += \"\".concat(output.associatedVariableName, \" = toGammaSpace(\").concat(output.associatedVariableName, \");\\r\\n\");\n    state.compilationString += \"#endif\\r\\n\";\n    state.compilationString += \"#ifdef \".concat(this._gammaDefineName, \"\\r\\n\");\n    state.compilationString += \"\".concat(output.associatedVariableName, \" = toLinearSpace(\").concat(output.associatedVariableName, \");\\r\\n\");\n    state.compilationString += \"#endif\\r\\n\";\n  };\n\n  CurrentScreenBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    this._tempTextureRead = state._getFreeVariableName(\"tempTextureRead\");\n\n    if (state.sharedData.blockingBlocks.indexOf(this) < 0) {\n      state.sharedData.blockingBlocks.push(this);\n    }\n\n    if (state.sharedData.textureBlocks.indexOf(this) < 0) {\n      state.sharedData.textureBlocks.push(this);\n    }\n\n    if (state.sharedData.blocksWithDefines.indexOf(this) < 0) {\n      state.sharedData.blocksWithDefines.push(this);\n    }\n\n    if (state.target !== NodeMaterialBlockTargets.Fragment) {\n      // Vertex\n      state._emit2DSampler(this._samplerName);\n\n      this._injectVertexCode(state);\n\n      return;\n    } // Fragment\n\n\n    if (!this._outputs.some(function (o) {\n      return o.isConnectedInFragmentShader;\n    })) {\n      return;\n    }\n\n    state._emit2DSampler(this._samplerName);\n\n    this._linearDefineName = state._getFreeDefineName(\"ISLINEAR\");\n    this._gammaDefineName = state._getFreeDefineName(\"ISGAMMA\");\n    var comments = \"//\".concat(this.name);\n\n    state._emitFunctionFromInclude(\"helperFunctions\", comments);\n\n    this._writeTextureRead(state);\n\n    for (var _i = 0, _a = this._outputs; _i < _a.length; _i++) {\n      var output = _a[_i];\n\n      if (output.hasEndpoints) {\n        this._writeOutput(state, output, output.name);\n      }\n    }\n\n    return this;\n  };\n\n  CurrentScreenBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    serializationObject.convertToGammaSpace = this.convertToGammaSpace;\n    serializationObject.convertToLinearSpace = this.convertToLinearSpace;\n\n    if (this.texture && !this.texture.isRenderTarget) {\n      serializationObject.texture = this.texture.serialize();\n    }\n\n    return serializationObject;\n  };\n\n  CurrentScreenBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    this.convertToGammaSpace = serializationObject.convertToGammaSpace;\n    this.convertToLinearSpace = !!serializationObject.convertToLinearSpace;\n\n    if (serializationObject.texture) {\n      rootUrl = serializationObject.texture.url.indexOf(\"data:\") === 0 ? \"\" : rootUrl;\n      this.texture = Texture.Parse(serializationObject.texture, scene, rootUrl);\n    }\n  };\n\n  return CurrentScreenBlock;\n}(NodeMaterialBlock);\n\nexport { CurrentScreenBlock };\nRegisterClass(\"BABYLON.CurrentScreenBlock\", CurrentScreenBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","Texture","__extends","name","_super","VertexAndFragment","_this","_isUnique","registerInput","Vector2","registerOutput","Color4","Neutral","Color3","Float","_inputs","acceptedConnectionPointTypes","push","Vector3","Vector4","_prioritizeVertex","CurrentScreenBlock","Object","_outputs","state","_excludeVariableName","uv","isConnected","sourceBlock","isInput","Fragment","mesh","nodeMaterial","defines","setValue","_linearDefineName","convertToGammaSpace","_gammaDefineName","convertToLinearSpace","texture","isReadyOrNotBlocking","uvInput","connectedPoint","ownerBlock","uvInputOwnerBlock","isAttribute","_emitUniformFromString","associatedVariableName","_mainUVName","_emitVaryingFromString","compilationString","concat","some","o","isConnectedInVertexShader","_writeTextureRead","_i","output","hasEndpoints","_writeOutput","vertexMode","target","_tempTextureRead","_samplerName","swizzle","_declareOutput","_buildBlock","call","_getFreeVariableName","sharedData","blockingBlocks","indexOf","textureBlocks","blocksWithDefines","_emit2DSampler","_injectVertexCode","isConnectedInFragmentShader","_getFreeDefineName","comments","_emitFunctionFromInclude","serializationObject","serialize","isRenderTarget","scene","rootUrl","_deserialize","url","Parse"],"sourceRoot":"","sources":["../../../../../../../../lts/core/generated/Materials/Node/Blocks/Dual/currentScreenBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\nimport type { NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport type { BaseTexture } from \"../../../Textures/baseTexture\";\r\nimport type { Nullable } from \"../../../../types\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { Texture } from \"../../../Textures/texture\";\r\nimport type { Scene } from \"../../../../scene\";\r\nimport type { InputBlock } from \"../Input/inputBlock\";\r\n\r\ndeclare type NodeMaterial = import(\"../../nodeMaterial\").NodeMaterial;\r\n\r\n/**\r\n * Base block used as input for post process\r\n */\r\nexport class CurrentScreenBlock extends NodeMaterialBlock {\r\n    private _samplerName = \"textureSampler\";\r\n    private _linearDefineName: string;\r\n    private _gammaDefineName: string;\r\n    private _mainUVName: string;\r\n    private _tempTextureRead: string;\r\n\r\n    /**\r\n     * Gets or sets the texture associated with the node\r\n     */\r\n    public texture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if content needs to be converted to gamma space\r\n     */\r\n    public convertToGammaSpace = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if content needs to be converted to linear space\r\n     */\r\n    public convertToLinearSpace = false;\r\n\r\n    /**\r\n     * Create a new CurrentScreenBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.VertexAndFragment);\r\n\r\n        this._isUnique = false;\r\n\r\n        this.registerInput(\"uv\", NodeMaterialBlockConnectionPointTypes.Vector2, false, NodeMaterialBlockTargets.VertexAndFragment);\r\n\r\n        this.registerOutput(\"rgba\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Neutral);\r\n        this.registerOutput(\"rgb\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Neutral);\r\n        this.registerOutput(\"r\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\r\n        this.registerOutput(\"g\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\r\n        this.registerOutput(\"b\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\r\n        this.registerOutput(\"a\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this._inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector3);\r\n        this._inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector4);\r\n\r\n        this._inputs[0]._prioritizeVertex = false;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"CurrentScreenBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the uv input component\r\n     */\r\n    public get uv(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the rgba output component\r\n     */\r\n    public get rgba(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the rgb output component\r\n     */\r\n    public get rgb(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the r output component\r\n     */\r\n    public get r(): NodeMaterialConnectionPoint {\r\n        return this._outputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the g output component\r\n     */\r\n    public get g(): NodeMaterialConnectionPoint {\r\n        return this._outputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the b output component\r\n     */\r\n    public get b(): NodeMaterialConnectionPoint {\r\n        return this._outputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the a output component\r\n     */\r\n    public get a(): NodeMaterialConnectionPoint {\r\n        return this._outputs[5];\r\n    }\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"textureSampler\");\r\n    }\r\n\r\n    public get target() {\r\n        if (!this.uv.isConnected) {\r\n            return NodeMaterialBlockTargets.VertexAndFragment;\r\n        }\r\n\r\n        if (this.uv.sourceBlock!.isInput) {\r\n            return NodeMaterialBlockTargets.VertexAndFragment;\r\n        }\r\n\r\n        return NodeMaterialBlockTargets.Fragment;\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        defines.setValue(this._linearDefineName, this.convertToGammaSpace, true);\r\n        defines.setValue(this._gammaDefineName, this.convertToLinearSpace, true);\r\n    }\r\n\r\n    public isReady() {\r\n        if (this.texture && !this.texture.isReadyOrNotBlocking()) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private _injectVertexCode(state: NodeMaterialBuildState) {\r\n        const uvInput = this.uv;\r\n\r\n        if (uvInput.connectedPoint!.ownerBlock.isInput) {\r\n            const uvInputOwnerBlock = uvInput.connectedPoint!.ownerBlock as InputBlock;\r\n\r\n            if (!uvInputOwnerBlock.isAttribute) {\r\n                state._emitUniformFromString(uvInput.associatedVariableName, \"vec2\");\r\n            }\r\n        }\r\n\r\n        this._mainUVName = \"vMain\" + uvInput.associatedVariableName;\r\n\r\n        state._emitVaryingFromString(this._mainUVName, \"vec2\");\r\n\r\n        state.compilationString += `${this._mainUVName} = ${uvInput.associatedVariableName}.xy;\\r\\n`;\r\n\r\n        if (!this._outputs.some((o) => o.isConnectedInVertexShader)) {\r\n            return;\r\n        }\r\n\r\n        this._writeTextureRead(state, true);\r\n\r\n        for (const output of this._outputs) {\r\n            if (output.hasEndpoints) {\r\n                this._writeOutput(state, output, output.name, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _writeTextureRead(state: NodeMaterialBuildState, vertexMode = false) {\r\n        const uvInput = this.uv;\r\n\r\n        if (vertexMode) {\r\n            if (state.target === NodeMaterialBlockTargets.Fragment) {\r\n                return;\r\n            }\r\n\r\n            state.compilationString += `vec4 ${this._tempTextureRead} = texture2D(${this._samplerName}, ${uvInput.associatedVariableName});\\r\\n`;\r\n            return;\r\n        }\r\n\r\n        if (this.uv.ownerBlock.target === NodeMaterialBlockTargets.Fragment) {\r\n            state.compilationString += `vec4 ${this._tempTextureRead} = texture2D(${this._samplerName}, ${uvInput.associatedVariableName});\\r\\n`;\r\n            return;\r\n        }\r\n\r\n        state.compilationString += `vec4 ${this._tempTextureRead} = texture2D(${this._samplerName}, ${this._mainUVName});\\r\\n`;\r\n    }\r\n\r\n    private _writeOutput(state: NodeMaterialBuildState, output: NodeMaterialConnectionPoint, swizzle: string, vertexMode = false) {\r\n        if (vertexMode) {\r\n            if (state.target === NodeMaterialBlockTargets.Fragment) {\r\n                return;\r\n            }\r\n\r\n            state.compilationString += `${this._declareOutput(output, state)} = ${this._tempTextureRead}.${swizzle};\\r\\n`;\r\n\r\n            return;\r\n        }\r\n\r\n        if (this.uv.ownerBlock.target === NodeMaterialBlockTargets.Fragment) {\r\n            state.compilationString += `${this._declareOutput(output, state)} = ${this._tempTextureRead}.${swizzle};\\r\\n`;\r\n            return;\r\n        }\r\n\r\n        state.compilationString += `${this._declareOutput(output, state)} = ${this._tempTextureRead}.${swizzle};\\r\\n`;\r\n\r\n        state.compilationString += `#ifdef ${this._linearDefineName}\\r\\n`;\r\n        state.compilationString += `${output.associatedVariableName} = toGammaSpace(${output.associatedVariableName});\\r\\n`;\r\n        state.compilationString += `#endif\\r\\n`;\r\n\r\n        state.compilationString += `#ifdef ${this._gammaDefineName}\\r\\n`;\r\n        state.compilationString += `${output.associatedVariableName} = toLinearSpace(${output.associatedVariableName});\\r\\n`;\r\n        state.compilationString += `#endif\\r\\n`;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        this._tempTextureRead = state._getFreeVariableName(\"tempTextureRead\");\r\n\r\n        if (state.sharedData.blockingBlocks.indexOf(this) < 0) {\r\n            state.sharedData.blockingBlocks.push(this);\r\n        }\r\n        if (state.sharedData.textureBlocks.indexOf(this) < 0) {\r\n            state.sharedData.textureBlocks.push(this);\r\n        }\r\n        if (state.sharedData.blocksWithDefines.indexOf(this) < 0) {\r\n            state.sharedData.blocksWithDefines.push(this);\r\n        }\r\n\r\n        if (state.target !== NodeMaterialBlockTargets.Fragment) {\r\n            // Vertex\r\n            state._emit2DSampler(this._samplerName);\r\n            this._injectVertexCode(state);\r\n            return;\r\n        }\r\n\r\n        // Fragment\r\n        if (!this._outputs.some((o) => o.isConnectedInFragmentShader)) {\r\n            return;\r\n        }\r\n\r\n        state._emit2DSampler(this._samplerName);\r\n\r\n        this._linearDefineName = state._getFreeDefineName(\"ISLINEAR\");\r\n        this._gammaDefineName = state._getFreeDefineName(\"ISGAMMA\");\r\n\r\n        const comments = `//${this.name}`;\r\n        state._emitFunctionFromInclude(\"helperFunctions\", comments);\r\n\r\n        this._writeTextureRead(state);\r\n\r\n        for (const output of this._outputs) {\r\n            if (output.hasEndpoints) {\r\n                this._writeOutput(state, output, output.name);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.convertToGammaSpace = this.convertToGammaSpace;\r\n        serializationObject.convertToLinearSpace = this.convertToLinearSpace;\r\n        if (this.texture && !this.texture.isRenderTarget) {\r\n            serializationObject.texture = this.texture.serialize();\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.convertToGammaSpace = serializationObject.convertToGammaSpace;\r\n        this.convertToLinearSpace = !!serializationObject.convertToLinearSpace;\r\n\r\n        if (serializationObject.texture) {\r\n            rootUrl = serializationObject.texture.url.indexOf(\"data:\") === 0 ? \"\" : rootUrl;\r\n            this.texture = Texture.Parse(serializationObject.texture, scene, rootUrl) as Texture;\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.CurrentScreenBlock\", CurrentScreenBlock);\r\n"]},"metadata":{},"sourceType":"module"}