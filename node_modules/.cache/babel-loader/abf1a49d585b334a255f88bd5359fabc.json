{"ast":null,"code":"import \"core-js/modules/web.timers.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n\n/**\n * A behavior that when attached to a mesh will allow the mesh to fade in and out\n */\nvar FadeInOutBehavior =\n/** @class */\nfunction () {\n  /**\n   * Instantiates the FadeInOutBehavior\n   */\n  function FadeInOutBehavior() {\n    var _this = this;\n    /**\n     * Time in milliseconds to delay before fading in (Default: 0)\n     */\n\n\n    this.delay = 0;\n    /**\n     * Time in milliseconds for the mesh to fade in (Default: 300)\n     */\n\n    this.fadeInTime = 300;\n    this._millisecondsPerFrame = 1000 / 60;\n    this._hovered = false;\n    this._hoverValue = 0;\n    this._ownerNode = null;\n\n    this._update = function () {\n      if (_this._ownerNode) {\n        _this._hoverValue += _this._hovered ? _this._millisecondsPerFrame : -_this._millisecondsPerFrame;\n\n        _this._setAllVisibility(_this._ownerNode, (_this._hoverValue - _this.delay) / _this.fadeInTime);\n\n        if (_this._ownerNode.visibility > 1) {\n          _this._setAllVisibility(_this._ownerNode, 1);\n\n          _this._hoverValue = _this.fadeInTime + _this.delay;\n          return;\n        } else if (_this._ownerNode.visibility < 0) {\n          _this._setAllVisibility(_this._ownerNode, 0);\n\n          if (_this._hoverValue < 0) {\n            _this._hoverValue = 0;\n            return;\n          }\n        }\n\n        setTimeout(_this._update, _this._millisecondsPerFrame);\n      }\n    };\n  }\n\n  Object.defineProperty(FadeInOutBehavior.prototype, \"name\", {\n    /**\n     *  The name of the behavior\n     */\n    get: function get() {\n      return \"FadeInOut\";\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   *  Initializes the behavior\n   */\n\n  FadeInOutBehavior.prototype.init = function () {};\n  /**\n   * Attaches the fade behavior on the passed in mesh\n   * @param ownerNode The mesh that will be faded in/out once attached\n   */\n\n\n  FadeInOutBehavior.prototype.attach = function (ownerNode) {\n    this._ownerNode = ownerNode;\n\n    this._setAllVisibility(this._ownerNode, 0);\n  };\n  /**\n   *  Detaches the behavior from the mesh\n   */\n\n\n  FadeInOutBehavior.prototype.detach = function () {\n    this._ownerNode = null;\n  };\n  /**\n   * Triggers the mesh to begin fading in or out\n   * @param value if the object should fade in or out (true to fade in)\n   */\n\n\n  FadeInOutBehavior.prototype.fadeIn = function (value) {\n    this._hovered = value;\n\n    this._update();\n  };\n\n  FadeInOutBehavior.prototype._setAllVisibility = function (mesh, value) {\n    var _this = this;\n\n    mesh.visibility = value;\n    mesh.getChildMeshes().forEach(function (c) {\n      _this._setAllVisibility(c, value);\n    });\n  };\n\n  return FadeInOutBehavior;\n}();\n\nexport { FadeInOutBehavior };","map":{"version":3,"mappings":";;;;;;AAKA;;;AAGA;AAAA;AAAA;AAeI;;;AAGA;AAAA;AAjBA;;;;;AAGO,iBAAQ,CAAR;AACP;;;;AAGO,sBAAa,GAAb;AAEC,iCAAwB,OAAO,EAA/B;AACA,oBAAW,KAAX;AACA,uBAAc,CAAd;AACA,sBAA6B,IAA7B;;AA2CA,mBAAU;AACd,UAAIA,KAAI,CAACC,UAAT,EAAqB;AACjBD,aAAI,CAACE,WAAL,IAAoBF,KAAI,CAACG,QAAL,GAAgBH,KAAI,CAACI,qBAArB,GAA6C,CAACJ,KAAI,CAACI,qBAAvE;;AAEAJ,aAAI,CAACK,iBAAL,CAAuBL,KAAI,CAACC,UAA5B,EAAwC,CAACD,KAAI,CAACE,WAAL,GAAmBF,KAAI,CAACM,KAAzB,IAAkCN,KAAI,CAACO,UAA/E;;AAEA,YAAIP,KAAI,CAACC,UAAL,CAAgBO,UAAhB,GAA6B,CAAjC,EAAoC;AAChCR,eAAI,CAACK,iBAAL,CAAuBL,KAAI,CAACC,UAA5B,EAAwC,CAAxC;;AACAD,eAAI,CAACE,WAAL,GAAmBF,KAAI,CAACO,UAAL,GAAkBP,KAAI,CAACM,KAA1C;AACA;AACH,SAJD,MAIO,IAAIN,KAAI,CAACC,UAAL,CAAgBO,UAAhB,GAA6B,CAAjC,EAAoC;AACvCR,eAAI,CAACK,iBAAL,CAAuBL,KAAI,CAACC,UAA5B,EAAwC,CAAxC;;AACA,cAAID,KAAI,CAACE,WAAL,GAAmB,CAAvB,EAA0B;AACtBF,iBAAI,CAACE,WAAL,GAAmB,CAAnB;AACA;AACH;AACJ;;AACDO,kBAAU,CAACT,KAAI,CAACU,OAAN,EAAeV,KAAI,CAACI,qBAApB,CAAV;AACH;AACJ,KAnBO;AAtCQ;;AAKhBO,wBAAWC,2BAAX,EAAW,MAAX,EAAe;AAHf;;;SAGA;AACI,aAAO,WAAP;AACH,KAFc;qBAAA;;AAAA,GAAf;AAIA;;;;AAGOA,qCAAP,aAAgB,CAAT;AAEP;;;;;;AAIOA,uCAAP,UAAcC,SAAd,EAA6B;AACzB,SAAKZ,UAAL,GAAkBY,SAAlB;;AACA,SAAKR,iBAAL,CAAuB,KAAKJ,UAA5B,EAAwC,CAAxC;AACH,GAHM;AAIP;;;;;AAGOW,uCAAP;AACI,SAAKX,UAAL,GAAkB,IAAlB;AACH,GAFM;AAIP;;;;;;AAIOW,uCAAP,UAAcE,KAAd,EAA4B;AACxB,SAAKX,QAAL,GAAgBW,KAAhB;;AACA,SAAKJ,OAAL;AACH,GAHM;;AA0BCE,kDAAR,UAA0BG,IAA1B,EAA8CD,KAA9C,EAA2D;AAA3D;;AACIC,QAAI,CAACP,UAAL,GAAkBM,KAAlB;AACAC,QAAI,CAACC,cAAL,GAAsBC,OAAtB,CAA8B,UAACC,CAAD,EAAE;AAC5BlB,WAAI,CAACK,iBAAL,CAAuBa,CAAvB,EAA0BJ,KAA1B;AACH,KAFD;AAGH,GALO;;AAMZ;AAAC,CAnFD","names":["_this","_ownerNode","_hoverValue","_hovered","_millisecondsPerFrame","_setAllVisibility","delay","fadeInTime","visibility","setTimeout","_update","Object","FadeInOutBehavior","ownerNode","value","mesh","getChildMeshes","forEach","c"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Behaviors/Meshes/fadeInOutBehavior.ts"],"sourcesContent":["import type { Behavior } from \"../behavior\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { Mesh } from \"../../Meshes/mesh\";\r\nimport type { Nullable } from \"../../types\";\r\n\r\n/**\r\n * A behavior that when attached to a mesh will allow the mesh to fade in and out\r\n */\r\nexport class FadeInOutBehavior implements Behavior<Mesh> {\r\n    /**\r\n     * Time in milliseconds to delay before fading in (Default: 0)\r\n     */\r\n    public delay = 0;\r\n    /**\r\n     * Time in milliseconds for the mesh to fade in (Default: 300)\r\n     */\r\n    public fadeInTime = 300;\r\n\r\n    private _millisecondsPerFrame = 1000 / 60;\r\n    private _hovered = false;\r\n    private _hoverValue = 0;\r\n    private _ownerNode: Nullable<Mesh> = null;\r\n\r\n    /**\r\n     * Instantiates the FadeInOutBehavior\r\n     */\r\n    constructor() {}\r\n\r\n    /**\r\n     *  The name of the behavior\r\n     */\r\n    public get name(): string {\r\n        return \"FadeInOut\";\r\n    }\r\n\r\n    /**\r\n     *  Initializes the behavior\r\n     */\r\n    public init() {}\r\n\r\n    /**\r\n     * Attaches the fade behavior on the passed in mesh\r\n     * @param ownerNode The mesh that will be faded in/out once attached\r\n     */\r\n    public attach(ownerNode: Mesh): void {\r\n        this._ownerNode = ownerNode;\r\n        this._setAllVisibility(this._ownerNode, 0);\r\n    }\r\n    /**\r\n     *  Detaches the behavior from the mesh\r\n     */\r\n    public detach(): void {\r\n        this._ownerNode = null;\r\n    }\r\n\r\n    /**\r\n     * Triggers the mesh to begin fading in or out\r\n     * @param value if the object should fade in or out (true to fade in)\r\n     */\r\n    public fadeIn(value: boolean) {\r\n        this._hovered = value;\r\n        this._update();\r\n    }\r\n\r\n    private _update = () => {\r\n        if (this._ownerNode) {\r\n            this._hoverValue += this._hovered ? this._millisecondsPerFrame : -this._millisecondsPerFrame;\r\n\r\n            this._setAllVisibility(this._ownerNode, (this._hoverValue - this.delay) / this.fadeInTime);\r\n\r\n            if (this._ownerNode.visibility > 1) {\r\n                this._setAllVisibility(this._ownerNode, 1);\r\n                this._hoverValue = this.fadeInTime + this.delay;\r\n                return;\r\n            } else if (this._ownerNode.visibility < 0) {\r\n                this._setAllVisibility(this._ownerNode, 0);\r\n                if (this._hoverValue < 0) {\r\n                    this._hoverValue = 0;\r\n                    return;\r\n                }\r\n            }\r\n            setTimeout(this._update, this._millisecondsPerFrame);\r\n        }\r\n    };\r\n\r\n    private _setAllVisibility(mesh: AbstractMesh, value: number) {\r\n        mesh.visibility = value;\r\n        mesh.getChildMeshes().forEach((c) => {\r\n            this._setAllVisibility(c, value);\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}