{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { serialize, serializeAsTexture, expandToProperty } from \"../../Misc/decorators.js\";\nimport { MaterialFlags } from \"../materialFlags.js\";\nimport { MaterialHelper } from \"../../Materials/materialHelper.js\";\nimport { MaterialPluginBase } from \"../materialPluginBase.js\";\nimport { MaterialDefines } from \"../materialDefines.js\";\n/**\n * @hidden\n */\n\nvar MaterialIridescenceDefines =\n/** @class */\nfunction (_super) {\n  __extends(MaterialIridescenceDefines, _super);\n\n  function MaterialIridescenceDefines() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.IRIDESCENCE = false;\n    _this.IRIDESCENCE_TEXTURE = false;\n    _this.IRIDESCENCE_TEXTUREDIRECTUV = 0;\n    _this.IRIDESCENCE_THICKNESS_TEXTURE = false;\n    _this.IRIDESCENCE_THICKNESS_TEXTUREDIRECTUV = 0;\n    _this.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE = false;\n    return _this;\n  }\n\n  return MaterialIridescenceDefines;\n}(MaterialDefines);\n\nexport { MaterialIridescenceDefines };\n/**\n * Plugin that implements the iridescence (thin film) component of the PBR material\n */\n\nvar PBRIridescenceConfiguration =\n/** @class */\nfunction (_super) {\n  __extends(PBRIridescenceConfiguration, _super);\n\n  function PBRIridescenceConfiguration(material, addToPluginList) {\n    if (addToPluginList === void 0) {\n      addToPluginList = true;\n    }\n\n    var _this = _super.call(this, material, \"PBRIridescence\", 110, new MaterialIridescenceDefines(), addToPluginList) || this;\n\n    _this._isEnabled = false;\n    /**\n     * Defines if the iridescence is enabled in the material.\n     */\n\n    _this.isEnabled = false;\n    /**\n     * Defines the iridescence layer strength (between 0 and 1) it defaults to 1.\n     */\n\n    _this.intensity = 1;\n    /**\n     * Defines the minimum thickness of the thin-film layer given in nanometers (nm).\n     */\n\n    _this.minimumThickness = PBRIridescenceConfiguration._DefaultMinimumThickness;\n    /**\n     * Defines the maximum thickness of the thin-film layer given in nanometers (nm). This will be the thickness used if not thickness texture has been set.\n     */\n\n    _this.maximumThickness = PBRIridescenceConfiguration._DefaultMaximumThickness;\n    /**\n     * Defines the maximum thickness of the thin-film layer given in nanometers (nm).\n     */\n\n    _this.indexOfRefraction = PBRIridescenceConfiguration._DefaultIndexOfRefraction;\n    _this._texture = null;\n    /**\n     * Stores the iridescence intensity in a texture (red channel)\n     */\n\n    _this.texture = null;\n    _this._thicknessTexture = null;\n    /**\n     * Stores the iridescence thickness in a texture (green channel)\n     */\n\n    _this.thicknessTexture = null;\n    _this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[1];\n    return _this;\n  }\n  /** @hidden */\n\n\n  PBRIridescenceConfiguration.prototype._markAllSubMeshesAsTexturesDirty = function () {\n    this._enable(this._isEnabled);\n\n    this._internalMarkAllSubMeshesAsTexturesDirty();\n  };\n\n  PBRIridescenceConfiguration.prototype.isReadyForSubMesh = function (defines, scene) {\n    if (!this._isEnabled) {\n      return true;\n    }\n\n    if (defines._areTexturesDirty) {\n      if (scene.texturesEnabled) {\n        if (this._texture && MaterialFlags.IridescenceTextureEnabled) {\n          if (!this._texture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n\n        if (this._thicknessTexture && MaterialFlags.IridescenceTextureEnabled) {\n          if (!this._thicknessTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  };\n\n  PBRIridescenceConfiguration.prototype.prepareDefines = function (defines, scene) {\n    var _a;\n\n    if (this._isEnabled) {\n      defines.IRIDESCENCE = true;\n      defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE = this._texture !== null && this._texture._texture === ((_a = this._thicknessTexture) === null || _a === void 0 ? void 0 : _a._texture) && this._texture.checkTransformsAreIdentical(this._thicknessTexture);\n\n      if (defines._areTexturesDirty) {\n        if (scene.texturesEnabled) {\n          if (this._texture && MaterialFlags.IridescenceTextureEnabled) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"IRIDESCENCE_TEXTURE\");\n          } else {\n            defines.IRIDESCENCE_TEXTURE = false;\n          }\n\n          if (!defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE && this._thicknessTexture && MaterialFlags.IridescenceTextureEnabled) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._thicknessTexture, defines, \"IRIDESCENCE_THICKNESS_TEXTURE\");\n          } else {\n            defines.IRIDESCENCE_THICKNESS_TEXTURE = false;\n          }\n        }\n      }\n    } else {\n      defines.IRIDESCENCE = false;\n      defines.IRIDESCENCE_TEXTURE = false;\n      defines.IRIDESCENCE_THICKNESS_TEXTURE = false;\n      defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE = false;\n    }\n  };\n\n  PBRIridescenceConfiguration.prototype.bindForSubMesh = function (uniformBuffer, scene, engine, subMesh) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n\n    if (!this._isEnabled) {\n      return;\n    }\n\n    var defines = subMesh.materialDefines;\n    var isFrozen = this._material.isFrozen;\n    var identicalTextures = defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE;\n\n    if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\n      if (identicalTextures && MaterialFlags.IridescenceTextureEnabled) {\n        uniformBuffer.updateFloat4(\"vIridescenceInfos\", this._texture.coordinatesIndex, this._texture.level, -1, -1);\n        MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"iridescence\");\n      } else if ((this._texture || this._thicknessTexture) && MaterialFlags.IridescenceTextureEnabled) {\n        uniformBuffer.updateFloat4(\"vIridescenceInfos\", (_b = (_a = this._texture) === null || _a === void 0 ? void 0 : _a.coordinatesIndex) !== null && _b !== void 0 ? _b : 0, (_d = (_c = this._texture) === null || _c === void 0 ? void 0 : _c.level) !== null && _d !== void 0 ? _d : 0, (_f = (_e = this._thicknessTexture) === null || _e === void 0 ? void 0 : _e.coordinatesIndex) !== null && _f !== void 0 ? _f : 0, (_h = (_g = this._thicknessTexture) === null || _g === void 0 ? void 0 : _g.level) !== null && _h !== void 0 ? _h : 0);\n\n        if (this._texture) {\n          MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"iridescence\");\n        }\n\n        if (this._thicknessTexture && !identicalTextures && !defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE) {\n          MaterialHelper.BindTextureMatrix(this._thicknessTexture, uniformBuffer, \"iridescenceThickness\");\n        }\n      } // Clear Coat General params\n\n\n      uniformBuffer.updateFloat4(\"vIridescenceParams\", this.intensity, this.indexOfRefraction, this.minimumThickness, this.maximumThickness);\n    } // Textures\n\n\n    if (scene.texturesEnabled) {\n      if (this._texture && MaterialFlags.IridescenceTextureEnabled) {\n        uniformBuffer.setTexture(\"iridescenceSampler\", this._texture);\n      }\n\n      if (this._thicknessTexture && !identicalTextures && !defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE && MaterialFlags.IridescenceTextureEnabled) {\n        uniformBuffer.setTexture(\"iridescenceThicknessSampler\", this._thicknessTexture);\n      }\n    }\n  };\n\n  PBRIridescenceConfiguration.prototype.hasTexture = function (texture) {\n    if (this._texture === texture) {\n      return true;\n    }\n\n    if (this._thicknessTexture === texture) {\n      return true;\n    }\n\n    return false;\n  };\n\n  PBRIridescenceConfiguration.prototype.getActiveTextures = function (activeTextures) {\n    if (this._texture) {\n      activeTextures.push(this._texture);\n    }\n\n    if (this._thicknessTexture) {\n      activeTextures.push(this._thicknessTexture);\n    }\n  };\n\n  PBRIridescenceConfiguration.prototype.getAnimatables = function (animatables) {\n    if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\n      animatables.push(this._texture);\n    }\n\n    if (this._thicknessTexture && this._thicknessTexture.animations && this._thicknessTexture.animations.length > 0) {\n      animatables.push(this._thicknessTexture);\n    }\n  };\n\n  PBRIridescenceConfiguration.prototype.dispose = function (forceDisposeTextures) {\n    var _a, _b;\n\n    if (forceDisposeTextures) {\n      (_a = this._texture) === null || _a === void 0 ? void 0 : _a.dispose();\n      (_b = this._thicknessTexture) === null || _b === void 0 ? void 0 : _b.dispose();\n    }\n  };\n\n  PBRIridescenceConfiguration.prototype.getClassName = function () {\n    return \"PBRIridescenceConfiguration\";\n  };\n\n  PBRIridescenceConfiguration.prototype.addFallbacks = function (defines, fallbacks, currentRank) {\n    if (defines.IRIDESCENCE) {\n      fallbacks.addFallback(currentRank++, \"IRIDESCENCE\");\n    }\n\n    return currentRank;\n  };\n\n  PBRIridescenceConfiguration.prototype.getSamplers = function (samplers) {\n    samplers.push(\"iridescenceSampler\", \"iridescenceThicknessSampler\");\n  };\n\n  PBRIridescenceConfiguration.prototype.getUniforms = function () {\n    return {\n      ubo: [{\n        name: \"vIridescenceParams\",\n        size: 4,\n        type: \"vec4\"\n      }, {\n        name: \"vIridescenceInfos\",\n        size: 4,\n        type: \"vec4\"\n      }, {\n        name: \"iridescenceMatrix\",\n        size: 16,\n        type: \"mat4\"\n      }, {\n        name: \"iridescenceThicknessMatrix\",\n        size: 16,\n        type: \"mat4\"\n      }]\n    };\n  };\n  /**\n   * The default minimum thickness of the thin-film layer given in nanometers (nm).\n   * Defaults to 100 nm.\n   * @hidden\n   */\n\n\n  PBRIridescenceConfiguration._DefaultMinimumThickness = 100;\n  /**\n   * The default maximum thickness of the thin-film layer given in nanometers (nm).\n   * Defaults to 400 nm.\n   * @hidden\n   */\n\n  PBRIridescenceConfiguration._DefaultMaximumThickness = 400;\n  /**\n   * The default index of refraction of the thin-film layer.\n   * Defaults to 1.3\n   * @hidden\n   */\n\n  PBRIridescenceConfiguration._DefaultIndexOfRefraction = 1.3;\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRIridescenceConfiguration.prototype, \"isEnabled\", void 0);\n\n  __decorate([serialize()], PBRIridescenceConfiguration.prototype, \"intensity\", void 0);\n\n  __decorate([serialize()], PBRIridescenceConfiguration.prototype, \"minimumThickness\", void 0);\n\n  __decorate([serialize()], PBRIridescenceConfiguration.prototype, \"maximumThickness\", void 0);\n\n  __decorate([serialize()], PBRIridescenceConfiguration.prototype, \"indexOfRefraction\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRIridescenceConfiguration.prototype, \"texture\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRIridescenceConfiguration.prototype, \"thicknessTexture\", void 0);\n\n  return PBRIridescenceConfiguration;\n}(MaterialPluginBase);\n\nexport { PBRIridescenceConfiguration };","map":{"version":3,"mappings":"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","names":["serialize","serializeAsTexture","expandToProperty","MaterialFlags","MaterialHelper","MaterialPluginBase","MaterialDefines","__extends","_this","material","addToPluginList","_super","MaterialIridescenceDefines","PBRIridescenceConfiguration","_DefaultMinimumThickness","_DefaultMaximumThickness","_DefaultIndexOfRefraction","_internalMarkAllSubMeshesAsTexturesDirty","_dirtyCallbacks","_enable","_isEnabled","defines","scene","_areTexturesDirty","texturesEnabled","_texture","IridescenceTextureEnabled","isReadyOrNotBlocking","_thicknessTexture","IRIDESCENCE","IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE","_a","checkTransformsAreIdentical","PrepareDefinesForMergedUV","IRIDESCENCE_TEXTURE","IRIDESCENCE_THICKNESS_TEXTURE","uniformBuffer","engine","subMesh","materialDefines","isFrozen","_material","identicalTextures","useUbo","isSync","updateFloat4","coordinatesIndex","level","BindTextureMatrix","_b","_c","_d","_e","_f","_g","_h","intensity","indexOfRefraction","minimumThickness","maximumThickness","setTexture","texture","activeTextures","push","animatables","animations","length","forceDisposeTextures","dispose","fallbacks","currentRank","addFallback","samplers","ubo","name","size","type","__decorate"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/PBR/pbrIridescenceConfiguration.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"../../types\";\r\nimport { serialize, serializeAsTexture, expandToProperty } from \"../../Misc/decorators\";\r\nimport type { BaseTexture } from \"../../Materials/Textures/baseTexture\";\r\nimport { MaterialFlags } from \"../materialFlags\";\r\nimport type { UniformBuffer } from \"../../Materials/uniformBuffer\";\r\nimport { MaterialHelper } from \"../../Materials/materialHelper\";\r\nimport type { IAnimatable } from \"../../Animations/animatable.interface\";\r\nimport type { EffectFallbacks } from \"../effectFallbacks\";\r\nimport type { SubMesh } from \"../../Meshes/subMesh\";\r\nimport { Constants } from \"../../Engines/constants\";\r\nimport { MaterialPluginBase } from \"../materialPluginBase\";\r\nimport { MaterialDefines } from \"../materialDefines\";\r\n\r\ndeclare type Engine = import(\"../../Engines/engine\").Engine;\r\ndeclare type Scene = import(\"../../scene\").Scene;\r\ndeclare type PBRBaseMaterial = import(\"./pbrBaseMaterial\").PBRBaseMaterial;\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class MaterialIridescenceDefines extends MaterialDefines {\r\n    public IRIDESCENCE = false;\r\n    public IRIDESCENCE_TEXTURE = false;\r\n    public IRIDESCENCE_TEXTUREDIRECTUV = 0;\r\n    public IRIDESCENCE_THICKNESS_TEXTURE = false;\r\n    public IRIDESCENCE_THICKNESS_TEXTUREDIRECTUV = 0;\r\n    public IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE = false;\r\n}\r\n\r\n/**\r\n * Plugin that implements the iridescence (thin film) component of the PBR material\r\n */\r\nexport class PBRIridescenceConfiguration extends MaterialPluginBase {\r\n    protected _material: PBRBaseMaterial;\r\n\r\n    /**\r\n     * The default minimum thickness of the thin-film layer given in nanometers (nm).\r\n     * Defaults to 100 nm.\r\n     * @hidden\r\n     */\r\n    public static readonly _DefaultMinimumThickness = 100;\r\n\r\n    /**\r\n     * The default maximum thickness of the thin-film layer given in nanometers (nm).\r\n     * Defaults to 400 nm.\r\n     * @hidden\r\n     */\r\n    public static readonly _DefaultMaximumThickness = 400;\r\n\r\n    /**\r\n     * The default index of refraction of the thin-film layer.\r\n     * Defaults to 1.3\r\n     * @hidden\r\n     */\r\n    public static readonly _DefaultIndexOfRefraction = 1.3;\r\n\r\n    private _isEnabled = false;\r\n    /**\r\n     * Defines if the iridescence is enabled in the material.\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public isEnabled = false;\r\n\r\n    /**\r\n     * Defines the iridescence layer strength (between 0 and 1) it defaults to 1.\r\n     */\r\n    @serialize()\r\n    public intensity: number = 1;\r\n\r\n    /**\r\n     * Defines the minimum thickness of the thin-film layer given in nanometers (nm).\r\n     */\r\n    @serialize()\r\n    public minimumThickness: number = PBRIridescenceConfiguration._DefaultMinimumThickness;\r\n\r\n    /**\r\n     * Defines the maximum thickness of the thin-film layer given in nanometers (nm). This will be the thickness used if not thickness texture has been set.\r\n     */\r\n    @serialize()\r\n    public maximumThickness: number = PBRIridescenceConfiguration._DefaultMaximumThickness;\r\n\r\n    /**\r\n     * Defines the maximum thickness of the thin-film layer given in nanometers (nm).\r\n     */\r\n    @serialize()\r\n    public indexOfRefraction: number = PBRIridescenceConfiguration._DefaultIndexOfRefraction;\r\n\r\n    private _texture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Stores the iridescence intensity in a texture (red channel)\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public texture: Nullable<BaseTexture> = null;\r\n\r\n    private _thicknessTexture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * Stores the iridescence thickness in a texture (green channel)\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public thicknessTexture: Nullable<BaseTexture> = null;\r\n\r\n    /** @hidden */\r\n    private _internalMarkAllSubMeshesAsTexturesDirty: () => void;\r\n\r\n    /** @hidden */\r\n    public _markAllSubMeshesAsTexturesDirty(): void {\r\n        this._enable(this._isEnabled);\r\n        this._internalMarkAllSubMeshesAsTexturesDirty();\r\n    }\r\n\r\n    constructor(material: PBRBaseMaterial, addToPluginList = true) {\r\n        super(material, \"PBRIridescence\", 110, new MaterialIridescenceDefines(), addToPluginList);\r\n\r\n        this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[Constants.MATERIAL_TextureDirtyFlag];\r\n    }\r\n\r\n    public isReadyForSubMesh(defines: MaterialIridescenceDefines, scene: Scene): boolean {\r\n        if (!this._isEnabled) {\r\n            return true;\r\n        }\r\n\r\n        if (defines._areTexturesDirty) {\r\n            if (scene.texturesEnabled) {\r\n                if (this._texture && MaterialFlags.IridescenceTextureEnabled) {\r\n                    if (!this._texture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (this._thicknessTexture && MaterialFlags.IridescenceTextureEnabled) {\r\n                    if (!this._thicknessTexture.isReadyOrNotBlocking()) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public prepareDefines(defines: MaterialIridescenceDefines, scene: Scene): void {\r\n        if (this._isEnabled) {\r\n            defines.IRIDESCENCE = true;\r\n            defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE =\r\n                this._texture !== null && this._texture._texture === this._thicknessTexture?._texture && this._texture.checkTransformsAreIdentical(this._thicknessTexture);\r\n\r\n            if (defines._areTexturesDirty) {\r\n                if (scene.texturesEnabled) {\r\n                    if (this._texture && MaterialFlags.IridescenceTextureEnabled) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"IRIDESCENCE_TEXTURE\");\r\n                    } else {\r\n                        defines.IRIDESCENCE_TEXTURE = false;\r\n                    }\r\n\r\n                    if (!defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE && this._thicknessTexture && MaterialFlags.IridescenceTextureEnabled) {\r\n                        MaterialHelper.PrepareDefinesForMergedUV(this._thicknessTexture, defines, \"IRIDESCENCE_THICKNESS_TEXTURE\");\r\n                    } else {\r\n                        defines.IRIDESCENCE_THICKNESS_TEXTURE = false;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            defines.IRIDESCENCE = false;\r\n            defines.IRIDESCENCE_TEXTURE = false;\r\n            defines.IRIDESCENCE_THICKNESS_TEXTURE = false;\r\n            defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE = false;\r\n        }\r\n    }\r\n\r\n    public bindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene, engine: Engine, subMesh: SubMesh): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n\r\n        const defines = subMesh!.materialDefines as unknown as MaterialIridescenceDefines;\r\n\r\n        const isFrozen = this._material.isFrozen;\r\n\r\n        const identicalTextures = defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE;\r\n\r\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\r\n            if (identicalTextures && MaterialFlags.IridescenceTextureEnabled) {\r\n                uniformBuffer.updateFloat4(\"vIridescenceInfos\", this._texture!.coordinatesIndex, this._texture!.level, -1, -1);\r\n                MaterialHelper.BindTextureMatrix(this._texture!, uniformBuffer, \"iridescence\");\r\n            } else if ((this._texture || this._thicknessTexture) && MaterialFlags.IridescenceTextureEnabled) {\r\n                uniformBuffer.updateFloat4(\r\n                    \"vIridescenceInfos\",\r\n                    this._texture?.coordinatesIndex ?? 0,\r\n                    this._texture?.level ?? 0,\r\n                    this._thicknessTexture?.coordinatesIndex ?? 0,\r\n                    this._thicknessTexture?.level ?? 0\r\n                );\r\n                if (this._texture) {\r\n                    MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"iridescence\");\r\n                }\r\n                if (this._thicknessTexture && !identicalTextures && !defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE) {\r\n                    MaterialHelper.BindTextureMatrix(this._thicknessTexture, uniformBuffer, \"iridescenceThickness\");\r\n                }\r\n            }\r\n\r\n            // Clear Coat General params\r\n            uniformBuffer.updateFloat4(\"vIridescenceParams\", this.intensity, this.indexOfRefraction, this.minimumThickness, this.maximumThickness);\r\n        }\r\n\r\n        // Textures\r\n        if (scene.texturesEnabled) {\r\n            if (this._texture && MaterialFlags.IridescenceTextureEnabled) {\r\n                uniformBuffer.setTexture(\"iridescenceSampler\", this._texture);\r\n            }\r\n\r\n            if (this._thicknessTexture && !identicalTextures && !defines.IRIDESCENCE_USE_THICKNESS_FROM_MAINTEXTURE && MaterialFlags.IridescenceTextureEnabled) {\r\n                uniformBuffer.setTexture(\"iridescenceThicknessSampler\", this._thicknessTexture);\r\n            }\r\n        }\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (this._texture === texture) {\r\n            return true;\r\n        }\r\n\r\n        if (this._thicknessTexture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public getActiveTextures(activeTextures: BaseTexture[]): void {\r\n        if (this._texture) {\r\n            activeTextures.push(this._texture);\r\n        }\r\n\r\n        if (this._thicknessTexture) {\r\n            activeTextures.push(this._thicknessTexture);\r\n        }\r\n    }\r\n\r\n    public getAnimatables(animatables: IAnimatable[]): void {\r\n        if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\r\n            animatables.push(this._texture);\r\n        }\r\n\r\n        if (this._thicknessTexture && this._thicknessTexture.animations && this._thicknessTexture.animations.length > 0) {\r\n            animatables.push(this._thicknessTexture);\r\n        }\r\n    }\r\n\r\n    public dispose(forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            this._texture?.dispose();\r\n            this._thicknessTexture?.dispose();\r\n        }\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"PBRIridescenceConfiguration\";\r\n    }\r\n\r\n    public addFallbacks(defines: MaterialIridescenceDefines, fallbacks: EffectFallbacks, currentRank: number): number {\r\n        if (defines.IRIDESCENCE) {\r\n            fallbacks.addFallback(currentRank++, \"IRIDESCENCE\");\r\n        }\r\n        return currentRank;\r\n    }\r\n\r\n    public getSamplers(samplers: string[]): void {\r\n        samplers.push(\"iridescenceSampler\", \"iridescenceThicknessSampler\");\r\n    }\r\n\r\n    public getUniforms(): { ubo?: Array<{ name: string; size: number; type: string }>; vertex?: string; fragment?: string } {\r\n        return {\r\n            ubo: [\r\n                { name: \"vIridescenceParams\", size: 4, type: \"vec4\" },\r\n                { name: \"vIridescenceInfos\", size: 4, type: \"vec4\" },\r\n                { name: \"iridescenceMatrix\", size: 16, type: \"mat4\" },\r\n                { name: \"iridescenceThicknessMatrix\", size: 16, type: \"mat4\" },\r\n            ],\r\n        };\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}