{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { Tools } from \"../Misc/tools.js\";\nimport { SceneComponentConstants } from \"../sceneComponent.js\";\nimport { AbstractScene } from \"../abstractScene.js\";\nimport { LensFlareSystem } from \"./lensFlareSystem.js\"; // Adds the parser to the scene parsers.\n\nAbstractScene.AddParser(SceneComponentConstants.NAME_LENSFLARESYSTEM, function (parsedData, scene, container, rootUrl) {\n  // Lens flares\n  if (parsedData.lensFlareSystems !== undefined && parsedData.lensFlareSystems !== null) {\n    if (!container.lensFlareSystems) {\n      container.lensFlareSystems = new Array();\n    }\n\n    for (var index = 0, cache = parsedData.lensFlareSystems.length; index < cache; index++) {\n      var parsedLensFlareSystem = parsedData.lensFlareSystems[index];\n      var lf = LensFlareSystem.Parse(parsedLensFlareSystem, scene, rootUrl);\n      container.lensFlareSystems.push(lf);\n    }\n  }\n});\n\nAbstractScene.prototype.getLensFlareSystemByName = function (name) {\n  for (var index = 0; index < this.lensFlareSystems.length; index++) {\n    if (this.lensFlareSystems[index].name === name) {\n      return this.lensFlareSystems[index];\n    }\n  }\n\n  return null;\n};\n\nAbstractScene.prototype.getLensFlareSystemById = function (id) {\n  for (var index = 0; index < this.lensFlareSystems.length; index++) {\n    if (this.lensFlareSystems[index].id === id) {\n      return this.lensFlareSystems[index];\n    }\n  }\n\n  return null;\n};\n\nAbstractScene.prototype.getLensFlareSystemByID = function (id) {\n  return this.getLensFlareSystemById(id);\n};\n\nAbstractScene.prototype.removeLensFlareSystem = function (toRemove) {\n  var index = this.lensFlareSystems.indexOf(toRemove);\n\n  if (index !== -1) {\n    this.lensFlareSystems.splice(index, 1);\n  }\n\n  return index;\n};\n\nAbstractScene.prototype.addLensFlareSystem = function (newLensFlareSystem) {\n  this.lensFlareSystems.push(newLensFlareSystem);\n};\n/**\n * Defines the lens flare scene component responsible to manage any lens flares\n * in a given scene.\n */\n\n\nvar LensFlareSystemSceneComponent =\n/** @class */\nfunction () {\n  /**\n   * Creates a new instance of the component for the given scene\n   * @param scene Defines the scene to register the component in\n   */\n  function LensFlareSystemSceneComponent(scene) {\n    /**\n     * The component name helpful to identify the component in the list of scene components.\n     */\n    this.name = SceneComponentConstants.NAME_LENSFLARESYSTEM;\n    this.scene = scene;\n    scene.lensFlareSystems = new Array();\n  }\n  /**\n   * Registers the component in a given scene\n   */\n\n\n  LensFlareSystemSceneComponent.prototype.register = function () {\n    this.scene._afterCameraDrawStage.registerStep(SceneComponentConstants.STEP_AFTERCAMERADRAW_LENSFLARESYSTEM, this, this._draw);\n  };\n  /**\n   * Rebuilds the elements related to this component in case of\n   * context lost for instance.\n   */\n\n\n  LensFlareSystemSceneComponent.prototype.rebuild = function () {\n    for (var index = 0; index < this.scene.lensFlareSystems.length; index++) {\n      this.scene.lensFlareSystems[index].rebuild();\n    }\n  };\n  /**\n   * Adds all the elements from the container to the scene\n   * @param container the container holding the elements\n   */\n\n\n  LensFlareSystemSceneComponent.prototype.addFromContainer = function (container) {\n    var _this = this;\n\n    if (!container.lensFlareSystems) {\n      return;\n    }\n\n    container.lensFlareSystems.forEach(function (o) {\n      _this.scene.addLensFlareSystem(o);\n    });\n  };\n  /**\n   * Removes all the elements in the container from the scene\n   * @param container contains the elements to remove\n   * @param dispose if the removed element should be disposed (default: false)\n   */\n\n\n  LensFlareSystemSceneComponent.prototype.removeFromContainer = function (container, dispose) {\n    var _this = this;\n\n    if (!container.lensFlareSystems) {\n      return;\n    }\n\n    container.lensFlareSystems.forEach(function (o) {\n      _this.scene.removeLensFlareSystem(o);\n\n      if (dispose) {\n        o.dispose();\n      }\n    });\n  };\n  /**\n   * Serializes the component data to the specified json object\n   * @param serializationObject The object to serialize to\n   */\n\n\n  LensFlareSystemSceneComponent.prototype.serialize = function (serializationObject) {\n    // Lens flares\n    serializationObject.lensFlareSystems = [];\n    var lensFlareSystems = this.scene.lensFlareSystems;\n\n    for (var _i = 0, lensFlareSystems_1 = lensFlareSystems; _i < lensFlareSystems_1.length; _i++) {\n      var lensFlareSystem = lensFlareSystems_1[_i];\n      serializationObject.lensFlareSystems.push(lensFlareSystem.serialize());\n    }\n  };\n  /**\n   * Disposes the component and the associated resources.\n   */\n\n\n  LensFlareSystemSceneComponent.prototype.dispose = function () {\n    var lensFlareSystems = this.scene.lensFlareSystems;\n\n    while (lensFlareSystems.length) {\n      lensFlareSystems[0].dispose();\n    }\n  };\n\n  LensFlareSystemSceneComponent.prototype._draw = function (camera) {\n    // Lens flares\n    if (this.scene.lensFlaresEnabled) {\n      var lensFlareSystems = this.scene.lensFlareSystems;\n      Tools.StartPerformanceCounter(\"Lens flares\", lensFlareSystems.length > 0);\n\n      for (var _i = 0, lensFlareSystems_2 = lensFlareSystems; _i < lensFlareSystems_2.length; _i++) {\n        var lensFlareSystem = lensFlareSystems_2[_i];\n\n        if ((camera.layerMask & lensFlareSystem.layerMask) !== 0) {\n          lensFlareSystem.render();\n        }\n      }\n\n      Tools.EndPerformanceCounter(\"Lens flares\", lensFlareSystems.length > 0);\n    }\n  };\n\n  return LensFlareSystemSceneComponent;\n}();\n\nexport { LensFlareSystemSceneComponent };\n\nLensFlareSystem._SceneComponentInitialization = function (scene) {\n  var component = scene._getComponent(SceneComponentConstants.NAME_LENSFLARESYSTEM);\n\n  if (!component) {\n    component = new LensFlareSystemSceneComponent(scene);\n\n    scene._addComponent(component);\n  }\n};","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,KAAT,QAAsB,kBAAtB;AAKA,SAASC,uBAAT,QAAwC,sBAAxC;AACA,SAASC,aAAT,QAA8B,qBAA9B;AAEA,SAASC,eAAT,QAAgC,sBAAhC,C,CACA;;AACAD,aAAa,CAACE,SAAd,CAAwBH,uBAAuB,CAACI,oBAAhD,EAAsE,UAACC,UAAD,EAAkBC,KAAlB,EAAgCC,SAAhC,EAA2DC,OAA3D,EAA0E;AAC5I;AACA,MAAIH,UAAU,CAACI,gBAAX,KAAgCC,SAAhC,IAA6CL,UAAU,CAACI,gBAAX,KAAgC,IAAjF,EAAuF;AACnF,QAAI,CAACF,SAAS,CAACE,gBAAf,EAAiC;AAC7BF,eAAS,CAACE,gBAAV,GAA6B,IAAIE,KAAJ,EAA7B;AACH;;AAED,SAAK,IAAIC,KAAK,GAAG,CAAZ,EAAeC,KAAK,GAAGR,UAAU,CAACI,gBAAX,CAA4BK,MAAxD,EAAgEF,KAAK,GAAGC,KAAxE,EAA+ED,KAAK,EAApF,EAAwF;AACpF,UAAMG,qBAAqB,GAAGV,UAAU,CAACI,gBAAX,CAA4BG,KAA5B,CAA9B;AACA,UAAMI,EAAE,GAAGd,eAAe,CAACe,KAAhB,CAAsBF,qBAAtB,EAA6CT,KAA7C,EAAoDE,OAApD,CAAX;AACAD,eAAS,CAACE,gBAAV,CAA2BS,IAA3B,CAAgCF,EAAhC;AACH;AACJ;AACJ,CAbD;;AA4DAf,aAAa,CAACkB,SAAd,CAAwBC,wBAAxB,GAAmD,UAAUC,IAAV,EAAsB;AACrE,OAAK,IAAIT,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKH,gBAAL,CAAsBK,MAAlD,EAA0DF,KAAK,EAA/D,EAAmE;AAC/D,QAAI,KAAKH,gBAAL,CAAsBG,KAAtB,EAA6BS,IAA7B,KAAsCA,IAA1C,EAAgD;AAC5C,aAAO,KAAKZ,gBAAL,CAAsBG,KAAtB,CAAP;AACH;AACJ;;AAED,SAAO,IAAP;AACH,CARD;;AAUAX,aAAa,CAACkB,SAAd,CAAwBG,sBAAxB,GAAiD,UAAUC,EAAV,EAAoB;AACjE,OAAK,IAAIX,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKH,gBAAL,CAAsBK,MAAlD,EAA0DF,KAAK,EAA/D,EAAmE;AAC/D,QAAI,KAAKH,gBAAL,CAAsBG,KAAtB,EAA6BW,EAA7B,KAAoCA,EAAxC,EAA4C;AACxC,aAAO,KAAKd,gBAAL,CAAsBG,KAAtB,CAAP;AACH;AACJ;;AAED,SAAO,IAAP;AACH,CARD;;AAUAX,aAAa,CAACkB,SAAd,CAAwBK,sBAAxB,GAAiD,UAAUD,EAAV,EAAoB;AACjE,SAAO,KAAKD,sBAAL,CAA4BC,EAA5B,CAAP;AACH,CAFD;;AAIAtB,aAAa,CAACkB,SAAd,CAAwBM,qBAAxB,GAAgD,UAAUC,QAAV,EAAmC;AAC/E,MAAMd,KAAK,GAAG,KAAKH,gBAAL,CAAsBkB,OAAtB,CAA8BD,QAA9B,CAAd;;AACA,MAAId,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd,SAAKH,gBAAL,CAAsBmB,MAAtB,CAA6BhB,KAA7B,EAAoC,CAApC;AACH;;AACD,SAAOA,KAAP;AACH,CAND;;AAQAX,aAAa,CAACkB,SAAd,CAAwBU,kBAAxB,GAA6C,UAAUC,kBAAV,EAA6C;AACtF,OAAKrB,gBAAL,CAAsBS,IAAtB,CAA2BY,kBAA3B;AACH,CAFD;AAIA;;;;;;AAIA;AAAA;AAAA;AAWI;;;;AAIA,yCAAYxB,KAAZ,EAAwB;AAdxB;;;AAGgB,gBAAON,uBAAuB,CAACI,oBAA/B;AAYZ,SAAKE,KAAL,GAAaA,KAAb;AAEAA,SAAK,CAACG,gBAAN,GAAyB,IAAIE,KAAJ,EAAzB;AACH;AAED;;;;;AAGOoB,qDAAP;AACI,SAAKzB,KAAL,CAAW0B,qBAAX,CAAiCC,YAAjC,CAA8CjC,uBAAuB,CAACkC,oCAAtE,EAA4G,IAA5G,EAAkH,KAAKC,KAAvH;AACH,GAFM;AAIP;;;;;;AAIOJ,oDAAP;AACI,SAAK,IAAInB,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKN,KAAL,CAAWG,gBAAX,CAA4BK,MAAxD,EAAgEF,KAAK,EAArE,EAAyE;AACrE,WAAKN,KAAL,CAAWG,gBAAX,CAA4BG,KAA5B,EAAmCwB,OAAnC;AACH;AACJ,GAJM;AAMP;;;;;;AAIOL,6DAAP,UAAwBxB,SAAxB,EAAgD;AAAhD;;AACI,QAAI,CAACA,SAAS,CAACE,gBAAf,EAAiC;AAC7B;AACH;;AACDF,aAAS,CAACE,gBAAV,CAA2B4B,OAA3B,CAAmC,UAACC,CAAD,EAAE;AACjCC,WAAI,CAACjC,KAAL,CAAWuB,kBAAX,CAA8BS,CAA9B;AACH,KAFD;AAGH,GAPM;AASP;;;;;;;AAKOP,gEAAP,UAA2BxB,SAA3B,EAAqDiC,OAArD,EAAsE;AAAtE;;AACI,QAAI,CAACjC,SAAS,CAACE,gBAAf,EAAiC;AAC7B;AACH;;AACDF,aAAS,CAACE,gBAAV,CAA2B4B,OAA3B,CAAmC,UAACC,CAAD,EAAE;AACjCC,WAAI,CAACjC,KAAL,CAAWmB,qBAAX,CAAiCa,CAAjC;;AACA,UAAIE,OAAJ,EAAa;AACTF,SAAC,CAACE,OAAF;AACH;AACJ,KALD;AAMH,GAVM;AAYP;;;;;;AAIOT,sDAAP,UAAiBU,mBAAjB,EAAyC;AACrC;AACAA,uBAAmB,CAAChC,gBAApB,GAAuC,EAAvC;AACA,QAAMA,gBAAgB,GAAG,KAAKH,KAAL,CAAWG,gBAApC;;AACA,SAA8B,iDAA9B,EAA8BiC,8BAA9B,EAA8BA,IAA9B,EAAgD;AAA3C,UAAMC,eAAe,yBAArB;AACDF,yBAAmB,CAAChC,gBAApB,CAAqCS,IAArC,CAA0CyB,eAAe,CAACC,SAAhB,EAA1C;AACH;AACJ,GAPM;AASP;;;;;AAGOb,oDAAP;AACI,QAAMtB,gBAAgB,GAAG,KAAKH,KAAL,CAAWG,gBAApC;;AACA,WAAOA,gBAAgB,CAACK,MAAxB,EAAgC;AAC5BL,sBAAgB,CAAC,CAAD,CAAhB,CAAoB+B,OAApB;AACH;AACJ,GALM;;AAOCT,kDAAR,UAAcc,MAAd,EAA4B;AACxB;AACA,QAAI,KAAKvC,KAAL,CAAWwC,iBAAf,EAAkC;AAC9B,UAAMrC,gBAAgB,GAAG,KAAKH,KAAL,CAAWG,gBAApC;AACAV,WAAK,CAACgD,uBAAN,CAA8B,aAA9B,EAA6CtC,gBAAgB,CAACK,MAAjB,GAA0B,CAAvE;;AACA,WAA8B,iDAA9B,EAA8B4B,8BAA9B,EAA8BA,IAA9B,EAAgD;AAA3C,YAAMC,eAAe,yBAArB;;AACD,YAAI,CAACE,MAAM,CAACG,SAAP,GAAmBL,eAAe,CAACK,SAApC,MAAmD,CAAvD,EAA0D;AACtDL,yBAAe,CAACM,MAAhB;AACH;AACJ;;AACDlD,WAAK,CAACmD,qBAAN,CAA4B,aAA5B,EAA2CzC,gBAAgB,CAACK,MAAjB,GAA0B,CAArE;AACH;AACJ,GAZO;;AAaZ;AAAC,CAxGD;;;;AA0GAZ,eAAe,CAACiD,6BAAhB,GAAgD,UAAC7C,KAAD,EAAa;AACzD,MAAI8C,SAAS,GAAG9C,KAAK,CAAC+C,aAAN,CAAoBrD,uBAAuB,CAACI,oBAA5C,CAAhB;;AACA,MAAI,CAACgD,SAAL,EAAgB;AACZA,aAAS,GAAG,IAAIrB,6BAAJ,CAAkCzB,KAAlC,CAAZ;;AACAA,SAAK,CAACgD,aAAN,CAAoBF,SAApB;AACH;AACJ,CAND","names":["Tools","SceneComponentConstants","AbstractScene","LensFlareSystem","AddParser","NAME_LENSFLARESYSTEM","parsedData","scene","container","rootUrl","lensFlareSystems","undefined","Array","index","cache","length","parsedLensFlareSystem","lf","Parse","push","prototype","getLensFlareSystemByName","name","getLensFlareSystemById","id","getLensFlareSystemByID","removeLensFlareSystem","toRemove","indexOf","splice","addLensFlareSystem","newLensFlareSystem","LensFlareSystemSceneComponent","_afterCameraDrawStage","registerStep","STEP_AFTERCAMERADRAW_LENSFLARESYSTEM","_draw","rebuild","forEach","o","_this","dispose","serializationObject","_i","lensFlareSystem","serialize","camera","lensFlaresEnabled","StartPerformanceCounter","layerMask","render","EndPerformanceCounter","_SceneComponentInitialization","component","_getComponent","_addComponent"],"sourceRoot":"","sources":["../../../../../lts/core/generated/LensFlares/lensFlareSystemSceneComponent.ts"],"sourcesContent":["import { Tools } from \"../Misc/tools\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { ISceneSerializableComponent } from \"../sceneComponent\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\nimport { AbstractScene } from \"../abstractScene\";\r\nimport type { AssetContainer } from \"../assetContainer\";\r\nimport { LensFlareSystem } from \"./lensFlareSystem\";\r\n// Adds the parser to the scene parsers.\r\nAbstractScene.AddParser(SceneComponentConstants.NAME_LENSFLARESYSTEM, (parsedData: any, scene: Scene, container: AssetContainer, rootUrl: string) => {\r\n    // Lens flares\r\n    if (parsedData.lensFlareSystems !== undefined && parsedData.lensFlareSystems !== null) {\r\n        if (!container.lensFlareSystems) {\r\n            container.lensFlareSystems = new Array<LensFlareSystem>();\r\n        }\r\n\r\n        for (let index = 0, cache = parsedData.lensFlareSystems.length; index < cache; index++) {\r\n            const parsedLensFlareSystem = parsedData.lensFlareSystems[index];\r\n            const lf = LensFlareSystem.Parse(parsedLensFlareSystem, scene, rootUrl);\r\n            container.lensFlareSystems.push(lf);\r\n        }\r\n    }\r\n});\r\n\r\ndeclare module \"../abstractScene\" {\r\n    export interface AbstractScene {\r\n        /**\r\n         * The list of lens flare system added to the scene\r\n         * @see https://doc.babylonjs.com/how_to/how_to_use_lens_flares\r\n         */\r\n        lensFlareSystems: Array<LensFlareSystem>;\r\n\r\n        /**\r\n         * Removes the given lens flare system from this scene.\r\n         * @param toRemove The lens flare system to remove\r\n         * @returns The index of the removed lens flare system\r\n         */\r\n        removeLensFlareSystem(toRemove: LensFlareSystem): number;\r\n\r\n        /**\r\n         * Adds the given lens flare system to this scene\r\n         * @param newLensFlareSystem The lens flare system to add\r\n         */\r\n        addLensFlareSystem(newLensFlareSystem: LensFlareSystem): void;\r\n\r\n        /**\r\n         * Gets a lens flare system using its name\r\n         * @param name defines the name to look for\r\n         * @returns the lens flare system or null if not found\r\n         */\r\n        getLensFlareSystemByName(name: string): Nullable<LensFlareSystem>;\r\n\r\n        /**\r\n         * Gets a lens flare system using its Id\r\n         * @param id defines the Id to look for\r\n         * @returns the lens flare system or null if not found\r\n         * @deprecated Please use getLensFlareSystemById instead\r\n         */\r\n        getLensFlareSystemByID(id: string): Nullable<LensFlareSystem>;\r\n\r\n        /**\r\n         * Gets a lens flare system using its Id\r\n         * @param id defines the Id to look for\r\n         * @returns the lens flare system or null if not found\r\n         */\r\n        getLensFlareSystemById(id: string): Nullable<LensFlareSystem>;\r\n    }\r\n}\r\n\r\nAbstractScene.prototype.getLensFlareSystemByName = function (name: string): Nullable<LensFlareSystem> {\r\n    for (let index = 0; index < this.lensFlareSystems.length; index++) {\r\n        if (this.lensFlareSystems[index].name === name) {\r\n            return this.lensFlareSystems[index];\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nAbstractScene.prototype.getLensFlareSystemById = function (id: string): Nullable<LensFlareSystem> {\r\n    for (let index = 0; index < this.lensFlareSystems.length; index++) {\r\n        if (this.lensFlareSystems[index].id === id) {\r\n            return this.lensFlareSystems[index];\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nAbstractScene.prototype.getLensFlareSystemByID = function (id: string): Nullable<LensFlareSystem> {\r\n    return this.getLensFlareSystemById(id);\r\n};\r\n\r\nAbstractScene.prototype.removeLensFlareSystem = function (toRemove: LensFlareSystem): number {\r\n    const index = this.lensFlareSystems.indexOf(toRemove);\r\n    if (index !== -1) {\r\n        this.lensFlareSystems.splice(index, 1);\r\n    }\r\n    return index;\r\n};\r\n\r\nAbstractScene.prototype.addLensFlareSystem = function (newLensFlareSystem: LensFlareSystem): void {\r\n    this.lensFlareSystems.push(newLensFlareSystem);\r\n};\r\n\r\n/**\r\n * Defines the lens flare scene component responsible to manage any lens flares\r\n * in a given scene.\r\n */\r\nexport class LensFlareSystemSceneComponent implements ISceneSerializableComponent {\r\n    /**\r\n     * The component name helpful to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_LENSFLARESYSTEM;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n\r\n        scene.lensFlareSystems = new Array<LensFlareSystem>();\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._afterCameraDrawStage.registerStep(SceneComponentConstants.STEP_AFTERCAMERADRAW_LENSFLARESYSTEM, this, this._draw);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        for (let index = 0; index < this.scene.lensFlareSystems.length; index++) {\r\n            this.scene.lensFlareSystems[index].rebuild();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds all the elements from the container to the scene\r\n     * @param container the container holding the elements\r\n     */\r\n    public addFromContainer(container: AbstractScene): void {\r\n        if (!container.lensFlareSystems) {\r\n            return;\r\n        }\r\n        container.lensFlareSystems.forEach((o) => {\r\n            this.scene.addLensFlareSystem(o);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes all the elements in the container from the scene\r\n     * @param container contains the elements to remove\r\n     * @param dispose if the removed element should be disposed (default: false)\r\n     */\r\n    public removeFromContainer(container: AbstractScene, dispose?: boolean): void {\r\n        if (!container.lensFlareSystems) {\r\n            return;\r\n        }\r\n        container.lensFlareSystems.forEach((o) => {\r\n            this.scene.removeLensFlareSystem(o);\r\n            if (dispose) {\r\n                o.dispose();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Serializes the component data to the specified json object\r\n     * @param serializationObject The object to serialize to\r\n     */\r\n    public serialize(serializationObject: any): void {\r\n        // Lens flares\r\n        serializationObject.lensFlareSystems = [];\r\n        const lensFlareSystems = this.scene.lensFlareSystems;\r\n        for (const lensFlareSystem of lensFlareSystems) {\r\n            serializationObject.lensFlareSystems.push(lensFlareSystem.serialize());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated resources.\r\n     */\r\n    public dispose(): void {\r\n        const lensFlareSystems = this.scene.lensFlareSystems;\r\n        while (lensFlareSystems.length) {\r\n            lensFlareSystems[0].dispose();\r\n        }\r\n    }\r\n\r\n    private _draw(camera: Camera): void {\r\n        // Lens flares\r\n        if (this.scene.lensFlaresEnabled) {\r\n            const lensFlareSystems = this.scene.lensFlareSystems;\r\n            Tools.StartPerformanceCounter(\"Lens flares\", lensFlareSystems.length > 0);\r\n            for (const lensFlareSystem of lensFlareSystems) {\r\n                if ((camera.layerMask & lensFlareSystem.layerMask) !== 0) {\r\n                    lensFlareSystem.render();\r\n                }\r\n            }\r\n            Tools.EndPerformanceCounter(\"Lens flares\", lensFlareSystems.length > 0);\r\n        }\r\n    }\r\n}\r\n\r\nLensFlareSystem._SceneComponentInitialization = (scene: Scene) => {\r\n    let component = scene._getComponent(SceneComponentConstants.NAME_LENSFLARESYSTEM) as LensFlareSystemSceneComponent;\r\n    if (!component) {\r\n        component = new LensFlareSystemSceneComponent(scene);\r\n        scene._addComponent(component);\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}