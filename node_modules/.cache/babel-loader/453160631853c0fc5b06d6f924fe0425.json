{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Operations supported by the Trigonometry block\n */\n\nexport var TrigonometryBlockOperations;\n\n(function (TrigonometryBlockOperations) {\n  /** Cos */\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Cos\"] = 0] = \"Cos\";\n  /** Sin */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Sin\"] = 1] = \"Sin\";\n  /** Abs */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Abs\"] = 2] = \"Abs\";\n  /** Exp */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Exp\"] = 3] = \"Exp\";\n  /** Exp2 */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Exp2\"] = 4] = \"Exp2\";\n  /** Round */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Round\"] = 5] = \"Round\";\n  /** Floor */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Floor\"] = 6] = \"Floor\";\n  /** Ceiling */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Ceiling\"] = 7] = \"Ceiling\";\n  /** Square root */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Sqrt\"] = 8] = \"Sqrt\";\n  /** Log */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Log\"] = 9] = \"Log\";\n  /** Tangent */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Tan\"] = 10] = \"Tan\";\n  /** Arc tangent */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"ArcTan\"] = 11] = \"ArcTan\";\n  /** Arc cosinus */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"ArcCos\"] = 12] = \"ArcCos\";\n  /** Arc sinus */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"ArcSin\"] = 13] = \"ArcSin\";\n  /** Fraction */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Fract\"] = 14] = \"Fract\";\n  /** Sign */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Sign\"] = 15] = \"Sign\";\n  /** To radians (from degrees) */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Radians\"] = 16] = \"Radians\";\n  /** To degrees (from radians) */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Degrees\"] = 17] = \"Degrees\";\n})(TrigonometryBlockOperations || (TrigonometryBlockOperations = {}));\n/**\n * Block used to apply trigonometry operation to floats\n */\n\n\nvar TrigonometryBlock =\n/** @class */\nfunction (_super) {\n  __extends(TrigonometryBlock, _super);\n  /**\n   * Creates a new TrigonometryBlock\n   * @param name defines the block name\n   */\n\n\n  function TrigonometryBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Neutral) || this;\n    /**\n     * Gets or sets the operation applied by the block\n     */\n\n\n    _this.operation = TrigonometryBlockOperations.Cos;\n\n    _this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n\n    _this._outputs[0]._typeConnectionSource = _this._inputs[0];\n    return _this;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  TrigonometryBlock.prototype.getClassName = function () {\n    return \"TrigonometryBlock\";\n  };\n\n  Object.defineProperty(TrigonometryBlock.prototype, \"input\", {\n    /**\n     * Gets the input component\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TrigonometryBlock.prototype, \"output\", {\n    /**\n     * Gets the output component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  TrigonometryBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var output = this._outputs[0];\n    var operation = \"\";\n\n    switch (this.operation) {\n      case TrigonometryBlockOperations.Cos:\n        {\n          operation = \"cos\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Sin:\n        {\n          operation = \"sin\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Abs:\n        {\n          operation = \"abs\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Exp:\n        {\n          operation = \"exp\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Exp2:\n        {\n          operation = \"exp2\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Round:\n        {\n          operation = \"round\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Floor:\n        {\n          operation = \"floor\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Ceiling:\n        {\n          operation = \"ceil\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Sqrt:\n        {\n          operation = \"sqrt\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Log:\n        {\n          operation = \"log\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Tan:\n        {\n          operation = \"tan\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.ArcTan:\n        {\n          operation = \"atan\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.ArcCos:\n        {\n          operation = \"acos\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.ArcSin:\n        {\n          operation = \"asin\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Fract:\n        {\n          operation = \"fract\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Sign:\n        {\n          operation = \"sign\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Radians:\n        {\n          operation = \"radians\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Degrees:\n        {\n          operation = \"degrees\";\n          break;\n        }\n    }\n\n    state.compilationString += this._declareOutput(output, state) + \" = \".concat(operation, \"(\").concat(this.input.associatedVariableName, \");\\r\\n\");\n    return this;\n  };\n\n  TrigonometryBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    serializationObject.operation = this.operation;\n    return serializationObject;\n  };\n\n  TrigonometryBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    this.operation = serializationObject.operation;\n  };\n\n  TrigonometryBlock.prototype._dumpPropertiesCode = function () {\n    var codeString = _super.prototype._dumpPropertiesCode.call(this) + \"\".concat(this._codeVariableName, \".operation = BABYLON.TrigonometryBlockOperations.\").concat(TrigonometryBlockOperations[this.operation], \";\\r\\n\");\n    return codeString;\n  };\n\n  return TrigonometryBlock;\n}(NodeMaterialBlock);\n\nexport { TrigonometryBlock };\nRegisterClass(\"BABYLON.TrigonometryBlock\", TrigonometryBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","TrigonometryBlockOperations","__extends","name","_super","Neutral","_this","Cos","registerInput","AutoDetect","registerOutput","BasedOnInput","_outputs","_typeConnectionSource","_inputs","TrigonometryBlock","Object","state","_buildBlock","call","output","operation","Sin","Abs","Exp","Exp2","Round","Floor","Ceiling","Sqrt","Log","Tan","ArcTan","ArcCos","ArcSin","Fract","Sign","Radians","Degrees","compilationString","_declareOutput","concat","input","associatedVariableName","serializationObject","serialize","scene","rootUrl","_deserialize","codeString","_dumpPropertiesCode","_codeVariableName"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Node/Blocks/trigonometryBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport type { Scene } from \"../../../scene\";\r\n\r\n/**\r\n * Operations supported by the Trigonometry block\r\n */\r\nexport enum TrigonometryBlockOperations {\r\n    /** Cos */\r\n    Cos,\r\n    /** Sin */\r\n    Sin,\r\n    /** Abs */\r\n    Abs,\r\n    /** Exp */\r\n    Exp,\r\n    /** Exp2 */\r\n    Exp2,\r\n    /** Round */\r\n    Round,\r\n    /** Floor */\r\n    Floor,\r\n    /** Ceiling */\r\n    Ceiling,\r\n    /** Square root */\r\n    Sqrt,\r\n    /** Log */\r\n    Log,\r\n    /** Tangent */\r\n    Tan,\r\n    /** Arc tangent */\r\n    ArcTan,\r\n    /** Arc cosinus */\r\n    ArcCos,\r\n    /** Arc sinus */\r\n    ArcSin,\r\n    /** Fraction */\r\n    Fract,\r\n    /** Sign */\r\n    Sign,\r\n    /** To radians (from degrees) */\r\n    Radians,\r\n    /** To degrees (from radians) */\r\n    Degrees,\r\n}\r\n\r\n/**\r\n * Block used to apply trigonometry operation to floats\r\n */\r\nexport class TrigonometryBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Gets or sets the operation applied by the block\r\n     */\r\n    public operation = TrigonometryBlockOperations.Cos;\r\n\r\n    /**\r\n     * Creates a new TrigonometryBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this._outputs[0]._typeConnectionSource = this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"TrigonometryBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the input component\r\n     */\r\n    public get input(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const output = this._outputs[0];\r\n        let operation = \"\";\r\n\r\n        switch (this.operation) {\r\n            case TrigonometryBlockOperations.Cos: {\r\n                operation = \"cos\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Sin: {\r\n                operation = \"sin\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Abs: {\r\n                operation = \"abs\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Exp: {\r\n                operation = \"exp\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Exp2: {\r\n                operation = \"exp2\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Round: {\r\n                operation = \"round\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Floor: {\r\n                operation = \"floor\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Ceiling: {\r\n                operation = \"ceil\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Sqrt: {\r\n                operation = \"sqrt\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Log: {\r\n                operation = \"log\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Tan: {\r\n                operation = \"tan\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.ArcTan: {\r\n                operation = \"atan\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.ArcCos: {\r\n                operation = \"acos\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.ArcSin: {\r\n                operation = \"asin\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Fract: {\r\n                operation = \"fract\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Sign: {\r\n                operation = \"sign\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Radians: {\r\n                operation = \"radians\";\r\n                break;\r\n            }\r\n            case TrigonometryBlockOperations.Degrees: {\r\n                operation = \"degrees\";\r\n                break;\r\n            }\r\n        }\r\n\r\n        state.compilationString += this._declareOutput(output, state) + ` = ${operation}(${this.input.associatedVariableName});\\r\\n`;\r\n\r\n        return this;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.operation = this.operation;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.operation = serializationObject.operation;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        const codeString =\r\n            super._dumpPropertiesCode() + `${this._codeVariableName}.operation = BABYLON.TrigonometryBlockOperations.${TrigonometryBlockOperations[this.operation]};\\r\\n`;\r\n        return codeString;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.TrigonometryBlock\", TrigonometryBlock);\r\n"]},"metadata":{},"sourceType":"module"}