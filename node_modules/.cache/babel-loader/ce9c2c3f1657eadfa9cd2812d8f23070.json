{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { Material } from \"./material.js\";\nimport { serialize, expandToProperty, serializeAsTexture } from \"../Misc/decorators.js\";\nimport { MaterialFlags } from \"./materialFlags.js\";\nimport { MaterialHelper } from \"./materialHelper.js\";\nimport { MaterialDefines } from \"./materialDefines.js\";\nimport { MaterialPluginBase } from \"./materialPluginBase.js\";\n/**\n * @hidden\n */\n\nvar MaterialDetailMapDefines =\n/** @class */\nfunction (_super) {\n  __extends(MaterialDetailMapDefines, _super);\n\n  function MaterialDetailMapDefines() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.DETAIL = false;\n    _this.DETAILDIRECTUV = 0;\n    _this.DETAIL_NORMALBLENDMETHOD = 0;\n    return _this;\n  }\n\n  return MaterialDetailMapDefines;\n}(MaterialDefines);\n\nexport { MaterialDetailMapDefines };\n/**\n * Plugin that implements the detail map component of a material\n *\n * Inspired from:\n *   Unity: https://docs.unity3d.com/Packages/com.unity.render-pipelines.high-definition@9.0/manual/Mask-Map-and-Detail-Map.html and https://docs.unity3d.com/Manual/StandardShaderMaterialParameterDetail.html\n *   Unreal: https://docs.unrealengine.com/en-US/Engine/Rendering/Materials/HowTo/DetailTexturing/index.html\n *   Cryengine: https://docs.cryengine.com/display/SDKDOC2/Detail+Maps\n */\n\nvar DetailMapConfiguration =\n/** @class */\nfunction (_super) {\n  __extends(DetailMapConfiguration, _super);\n\n  function DetailMapConfiguration(material, addToPluginList) {\n    if (addToPluginList === void 0) {\n      addToPluginList = true;\n    }\n\n    var _this = _super.call(this, material, \"DetailMap\", 140, new MaterialDetailMapDefines(), addToPluginList) || this;\n\n    _this._texture = null;\n    /**\n     * Defines how strongly the detail diffuse/albedo channel is blended with the regular diffuse/albedo texture\n     * Bigger values mean stronger blending\n     */\n\n    _this.diffuseBlendLevel = 1;\n    /**\n     * Defines how strongly the detail roughness channel is blended with the regular roughness value\n     * Bigger values mean stronger blending. Only used with PBR materials\n     */\n\n    _this.roughnessBlendLevel = 1;\n    /**\n     * Defines how strong the bump effect from the detail map is\n     * Bigger values mean stronger effect\n     */\n\n    _this.bumpLevel = 1;\n    _this._normalBlendMethod = Material.MATERIAL_NORMALBLENDMETHOD_WHITEOUT;\n    _this._isEnabled = false;\n    /**\n     * Enable or disable the detail map on this material\n     */\n\n    _this.isEnabled = false;\n    _this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[1];\n    return _this;\n  }\n  /** @hidden */\n\n\n  DetailMapConfiguration.prototype._markAllSubMeshesAsTexturesDirty = function () {\n    this._enable(this._isEnabled);\n\n    this._internalMarkAllSubMeshesAsTexturesDirty();\n  };\n\n  DetailMapConfiguration.prototype.isReadyForSubMesh = function (defines, scene, engine) {\n    if (!this._isEnabled) {\n      return true;\n    }\n\n    if (defines._areTexturesDirty && scene.texturesEnabled) {\n      if (engine.getCaps().standardDerivatives && this._texture && MaterialFlags.DetailTextureEnabled) {\n        // Detail texture cannot be not blocking.\n        if (!this._texture.isReady()) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  DetailMapConfiguration.prototype.prepareDefines = function (defines, scene) {\n    if (this._isEnabled) {\n      defines.DETAIL_NORMALBLENDMETHOD = this._normalBlendMethod;\n      var engine = scene.getEngine();\n\n      if (defines._areTexturesDirty) {\n        if (engine.getCaps().standardDerivatives && this._texture && MaterialFlags.DetailTextureEnabled && this._isEnabled) {\n          MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"DETAIL\");\n          defines.DETAIL_NORMALBLENDMETHOD = this._normalBlendMethod;\n        } else {\n          defines.DETAIL = false;\n        }\n      }\n    } else {\n      defines.DETAIL = false;\n    }\n  };\n\n  DetailMapConfiguration.prototype.bindForSubMesh = function (uniformBuffer, scene) {\n    if (!this._isEnabled) {\n      return;\n    }\n\n    var isFrozen = this._material.isFrozen;\n\n    if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\n      if (this._texture && MaterialFlags.DetailTextureEnabled) {\n        uniformBuffer.updateFloat4(\"vDetailInfos\", this._texture.coordinatesIndex, this.diffuseBlendLevel, this.bumpLevel, this.roughnessBlendLevel);\n        MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"detail\");\n      }\n    } // Textures\n\n\n    if (scene.texturesEnabled) {\n      if (this._texture && MaterialFlags.DetailTextureEnabled) {\n        uniformBuffer.setTexture(\"detailSampler\", this._texture);\n      }\n    }\n  };\n\n  DetailMapConfiguration.prototype.hasTexture = function (texture) {\n    if (this._texture === texture) {\n      return true;\n    }\n\n    return false;\n  };\n\n  DetailMapConfiguration.prototype.getActiveTextures = function (activeTextures) {\n    if (this._texture) {\n      activeTextures.push(this._texture);\n    }\n  };\n\n  DetailMapConfiguration.prototype.getAnimatables = function (animatables) {\n    if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\n      animatables.push(this._texture);\n    }\n  };\n\n  DetailMapConfiguration.prototype.dispose = function (forceDisposeTextures) {\n    var _a;\n\n    if (forceDisposeTextures) {\n      (_a = this._texture) === null || _a === void 0 ? void 0 : _a.dispose();\n    }\n  };\n\n  DetailMapConfiguration.prototype.getClassName = function () {\n    return \"DetailMapConfiguration\";\n  };\n\n  DetailMapConfiguration.prototype.getSamplers = function (samplers) {\n    samplers.push(\"detailSampler\");\n  };\n\n  DetailMapConfiguration.prototype.getUniforms = function () {\n    return {\n      ubo: [{\n        name: \"vDetailInfos\",\n        size: 4,\n        type: \"vec4\"\n      }, {\n        name: \"detailMatrix\",\n        size: 16,\n        type: \"mat4\"\n      }]\n    };\n  };\n\n  __decorate([serializeAsTexture(\"detailTexture\"), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], DetailMapConfiguration.prototype, \"texture\", void 0);\n\n  __decorate([serialize()], DetailMapConfiguration.prototype, \"diffuseBlendLevel\", void 0);\n\n  __decorate([serialize()], DetailMapConfiguration.prototype, \"roughnessBlendLevel\", void 0);\n\n  __decorate([serialize()], DetailMapConfiguration.prototype, \"bumpLevel\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], DetailMapConfiguration.prototype, \"normalBlendMethod\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], DetailMapConfiguration.prototype, \"isEnabled\", void 0);\n\n  return DetailMapConfiguration;\n}(MaterialPluginBase);\n\nexport { DetailMapConfiguration };","map":{"version":3,"mappings":"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","names":["Material","serialize","expandToProperty","serializeAsTexture","MaterialFlags","MaterialHelper","MaterialDefines","MaterialPluginBase","__extends","_this","material","addToPluginList","_super","MaterialDetailMapDefines","MATERIAL_NORMALBLENDMETHOD_WHITEOUT","_internalMarkAllSubMeshesAsTexturesDirty","_dirtyCallbacks","DetailMapConfiguration","_enable","_isEnabled","defines","scene","engine","_areTexturesDirty","texturesEnabled","getCaps","standardDerivatives","_texture","DetailTextureEnabled","isReady","DETAIL_NORMALBLENDMETHOD","_normalBlendMethod","getEngine","PrepareDefinesForMergedUV","DETAIL","uniformBuffer","isFrozen","_material","useUbo","isSync","updateFloat4","coordinatesIndex","diffuseBlendLevel","bumpLevel","roughnessBlendLevel","BindTextureMatrix","setTexture","texture","activeTextures","push","animatables","animations","length","forceDisposeTextures","_a","dispose","samplers","ubo","name","size","type","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Materials/material.detailMapConfiguration.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"../types\";\r\nimport { Material } from \"./material\";\r\nimport { serialize, expandToProperty, serializeAsTexture } from \"../Misc/decorators\";\r\nimport { MaterialFlags } from \"./materialFlags\";\r\nimport { MaterialHelper } from \"./materialHelper\";\r\nimport type { BaseTexture } from \"./Textures/baseTexture\";\r\nimport type { UniformBuffer } from \"./uniformBuffer\";\r\nimport type { IAnimatable } from \"../Animations/animatable.interface\";\r\nimport { MaterialDefines } from \"./materialDefines\";\r\nimport { MaterialPluginBase } from \"./materialPluginBase\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\ndeclare type Engine = import(\"../Engines/engine\").Engine;\r\ndeclare type Scene = import(\"../scene\").Scene;\r\ndeclare type StandardMaterial = import(\"./standardMaterial\").StandardMaterial;\r\ndeclare type PBRBaseMaterial = import(\"./PBR/pbrBaseMaterial\").PBRBaseMaterial;\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class MaterialDetailMapDefines extends MaterialDefines {\r\n    DETAIL = false;\r\n    DETAILDIRECTUV = 0;\r\n    DETAIL_NORMALBLENDMETHOD = 0;\r\n}\r\n\r\n/**\r\n * Plugin that implements the detail map component of a material\r\n *\r\n * Inspired from:\r\n *   Unity: https://docs.unity3d.com/Packages/com.unity.render-pipelines.high-definition@9.0/manual/Mask-Map-and-Detail-Map.html and https://docs.unity3d.com/Manual/StandardShaderMaterialParameterDetail.html\r\n *   Unreal: https://docs.unrealengine.com/en-US/Engine/Rendering/Materials/HowTo/DetailTexturing/index.html\r\n *   Cryengine: https://docs.cryengine.com/display/SDKDOC2/Detail+Maps\r\n */\r\nexport class DetailMapConfiguration extends MaterialPluginBase {\r\n    private _texture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * The detail texture of the material.\r\n     */\r\n    @serializeAsTexture(\"detailTexture\")\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public texture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Defines how strongly the detail diffuse/albedo channel is blended with the regular diffuse/albedo texture\r\n     * Bigger values mean stronger blending\r\n     */\r\n    @serialize()\r\n    public diffuseBlendLevel = 1;\r\n\r\n    /**\r\n     * Defines how strongly the detail roughness channel is blended with the regular roughness value\r\n     * Bigger values mean stronger blending. Only used with PBR materials\r\n     */\r\n    @serialize()\r\n    public roughnessBlendLevel = 1;\r\n\r\n    /**\r\n     * Defines how strong the bump effect from the detail map is\r\n     * Bigger values mean stronger effect\r\n     */\r\n    @serialize()\r\n    public bumpLevel = 1;\r\n\r\n    private _normalBlendMethod = Material.MATERIAL_NORMALBLENDMETHOD_WHITEOUT;\r\n    /**\r\n     * The method used to blend the bump and detail normals together\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public normalBlendMethod: number;\r\n\r\n    private _isEnabled = false;\r\n    /**\r\n     * Enable or disable the detail map on this material\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")\r\n    public isEnabled = false;\r\n\r\n    /** @hidden */\r\n    private _internalMarkAllSubMeshesAsTexturesDirty: () => void;\r\n\r\n    /** @hidden */\r\n    public _markAllSubMeshesAsTexturesDirty(): void {\r\n        this._enable(this._isEnabled);\r\n        this._internalMarkAllSubMeshesAsTexturesDirty();\r\n    }\r\n\r\n    constructor(material: PBRBaseMaterial | StandardMaterial, addToPluginList = true) {\r\n        super(material, \"DetailMap\", 140, new MaterialDetailMapDefines(), addToPluginList);\r\n\r\n        this._internalMarkAllSubMeshesAsTexturesDirty = material._dirtyCallbacks[Constants.MATERIAL_TextureDirtyFlag];\r\n    }\r\n\r\n    public isReadyForSubMesh(defines: MaterialDetailMapDefines, scene: Scene, engine: Engine): boolean {\r\n        if (!this._isEnabled) {\r\n            return true;\r\n        }\r\n\r\n        if (defines._areTexturesDirty && scene.texturesEnabled) {\r\n            if (engine.getCaps().standardDerivatives && this._texture && MaterialFlags.DetailTextureEnabled) {\r\n                // Detail texture cannot be not blocking.\r\n                if (!this._texture.isReady()) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public prepareDefines(defines: MaterialDetailMapDefines, scene: Scene): void {\r\n        if (this._isEnabled) {\r\n            defines.DETAIL_NORMALBLENDMETHOD = this._normalBlendMethod;\r\n\r\n            const engine = scene.getEngine();\r\n\r\n            if (defines._areTexturesDirty) {\r\n                if (engine.getCaps().standardDerivatives && this._texture && MaterialFlags.DetailTextureEnabled && this._isEnabled) {\r\n                    MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"DETAIL\");\r\n                    defines.DETAIL_NORMALBLENDMETHOD = this._normalBlendMethod;\r\n                } else {\r\n                    defines.DETAIL = false;\r\n                }\r\n            }\r\n        } else {\r\n            defines.DETAIL = false;\r\n        }\r\n    }\r\n\r\n    public bindForSubMesh(uniformBuffer: UniformBuffer, scene: Scene): void {\r\n        if (!this._isEnabled) {\r\n            return;\r\n        }\r\n\r\n        const isFrozen = this._material.isFrozen;\r\n\r\n        if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\r\n            if (this._texture && MaterialFlags.DetailTextureEnabled) {\r\n                uniformBuffer.updateFloat4(\"vDetailInfos\", this._texture.coordinatesIndex, this.diffuseBlendLevel, this.bumpLevel, this.roughnessBlendLevel);\r\n                MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"detail\");\r\n            }\r\n        }\r\n\r\n        // Textures\r\n        if (scene.texturesEnabled) {\r\n            if (this._texture && MaterialFlags.DetailTextureEnabled) {\r\n                uniformBuffer.setTexture(\"detailSampler\", this._texture);\r\n            }\r\n        }\r\n    }\r\n\r\n    public hasTexture(texture: BaseTexture): boolean {\r\n        if (this._texture === texture) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public getActiveTextures(activeTextures: BaseTexture[]): void {\r\n        if (this._texture) {\r\n            activeTextures.push(this._texture);\r\n        }\r\n    }\r\n\r\n    public getAnimatables(animatables: IAnimatable[]): void {\r\n        if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\r\n            animatables.push(this._texture);\r\n        }\r\n    }\r\n\r\n    public dispose(forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            this._texture?.dispose();\r\n        }\r\n    }\r\n\r\n    public getClassName(): string {\r\n        return \"DetailMapConfiguration\";\r\n    }\r\n\r\n    public getSamplers(samplers: string[]): void {\r\n        samplers.push(\"detailSampler\");\r\n    }\r\n\r\n    public getUniforms(): { ubo?: Array<{ name: string; size: number; type: string }>; vertex?: string; fragment?: string } {\r\n        return {\r\n            ubo: [\r\n                { name: \"vDetailInfos\", size: 4, type: \"vec4\" },\r\n                { name: \"detailMatrix\", size: 16, type: \"mat4\" },\r\n            ],\r\n        };\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}