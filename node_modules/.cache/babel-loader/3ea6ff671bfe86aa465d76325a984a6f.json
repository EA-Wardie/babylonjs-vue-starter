{"ast":null,"code":"/** Defines the cross module constantsused by lights to avoid circular dependencies */\nvar LightConstants =\n/** @class */\nfunction () {\n  function LightConstants() {}\n  /**\n   * Sort function to order lights for rendering.\n   * @param a First Light object to compare to second.\n   * @param b Second Light object to compare first.\n   * @return -1 to reduce's a's index relative to be, 0 for no change, 1 to increase a's index relative to b.\n   */\n\n\n  LightConstants.CompareLightsPriority = function (a, b) {\n    //shadow-casting lights have priority over non-shadow-casting lights\n    //the renderPriority is a secondary sort criterion\n    if (a.shadowEnabled !== b.shadowEnabled) {\n      return (b.shadowEnabled ? 1 : 0) - (a.shadowEnabled ? 1 : 0);\n    }\n\n    return b.renderPriority - a.renderPriority;\n  };\n  /**\n   * Falloff Default: light is falling off following the material specification:\n   * standard material is using standard falloff whereas pbr material can request special falloff per materials.\n   */\n\n\n  LightConstants.FALLOFF_DEFAULT = 0;\n  /**\n   * Falloff Physical: light is falling off following the inverse squared distance law.\n   */\n\n  LightConstants.FALLOFF_PHYSICAL = 1;\n  /**\n   * Falloff gltf: light is falling off as described in the gltf moving to PBR document\n   * to enhance interoperability with other engines.\n   */\n\n  LightConstants.FALLOFF_GLTF = 2;\n  /**\n   * Falloff Standard: light is falling off like in the standard material\n   * to enhance interoperability with other materials.\n   */\n\n  LightConstants.FALLOFF_STANDARD = 3; //lightmapMode Consts\n\n  /**\n   * If every light affecting the material is in this lightmapMode,\n   * material.lightmapTexture adds or multiplies\n   * (depends on material.useLightmapAsShadowmap)\n   * after every other light calculations.\n   */\n\n  LightConstants.LIGHTMAP_DEFAULT = 0;\n  /**\n   * material.lightmapTexture as only diffuse lighting from this light\n   * adds only specular lighting from this light\n   * adds dynamic shadows\n   */\n\n  LightConstants.LIGHTMAP_SPECULAR = 1;\n  /**\n   * material.lightmapTexture as only lighting\n   * no light calculation from this light\n   * only adds dynamic shadows from this light\n   */\n\n  LightConstants.LIGHTMAP_SHADOWSONLY = 2; // Intensity Mode Consts\n\n  /**\n   * Each light type uses the default quantity according to its type:\n   *      point/spot lights use luminous intensity\n   *      directional lights use illuminance\n   */\n\n  LightConstants.INTENSITYMODE_AUTOMATIC = 0;\n  /**\n   * lumen (lm)\n   */\n\n  LightConstants.INTENSITYMODE_LUMINOUSPOWER = 1;\n  /**\n   * candela (lm/sr)\n   */\n\n  LightConstants.INTENSITYMODE_LUMINOUSINTENSITY = 2;\n  /**\n   * lux (lm/m^2)\n   */\n\n  LightConstants.INTENSITYMODE_ILLUMINANCE = 3;\n  /**\n   * nit (cd/m^2)\n   */\n\n  LightConstants.INTENSITYMODE_LUMINANCE = 4; // Light types ids const.\n\n  /**\n   * Light type const id of the point light.\n   */\n\n  LightConstants.LIGHTTYPEID_POINTLIGHT = 0;\n  /**\n   * Light type const id of the directional light.\n   */\n\n  LightConstants.LIGHTTYPEID_DIRECTIONALLIGHT = 1;\n  /**\n   * Light type const id of the spot light.\n   */\n\n  LightConstants.LIGHTTYPEID_SPOTLIGHT = 2;\n  /**\n   * Light type const id of the hemispheric light.\n   */\n\n  LightConstants.LIGHTTYPEID_HEMISPHERICLIGHT = 3;\n  return LightConstants;\n}();\n\nexport { LightConstants };","map":{"version":3,"mappings":"AAAA;AACA;AAAA;AAAA;AAAA,6BAqGC;AAdG;;;;;;;;AAMcA,yCAAd,UAAoCC,CAApC,EAAuDC,CAAvD,EAAwE;AACpE;AACA;AACA,QAAID,CAAC,CAACE,aAAF,KAAoBD,CAAC,CAACC,aAA1B,EAAyC;AACrC,aAAO,CAACD,CAAC,CAACC,aAAF,GAAkB,CAAlB,GAAsB,CAAvB,KAA6BF,CAAC,CAACE,aAAF,GAAkB,CAAlB,GAAsB,CAAnD,CAAP;AACH;;AACD,WAAOD,CAAC,CAACE,cAAF,GAAmBH,CAAC,CAACG,cAA5B;AACH,GAPa;AA5Fd;;;;;;AAIuBJ,mCAAkB,CAAlB;AAEvB;;;;AAGuBA,oCAAmB,CAAnB;AAEvB;;;;;AAIuBA,gCAAe,CAAf;AAEvB;;;;;AAIuBA,oCAAmB,CAAnB,CAtB3B,CAwBI;;AACA;;;;;;;AAMuBA,oCAAmB,CAAnB;AACvB;;;;;;AAKuBA,qCAAoB,CAApB;AACvB;;;;;;AAKuBA,wCAAuB,CAAvB,CA3C3B,CA6CI;;AACA;;;;;;AAKuBA,2CAA0B,CAA1B;AACvB;;;;AAGuBA,+CAA8B,CAA9B;AACvB;;;;AAGuBA,mDAAkC,CAAlC;AACvB;;;;AAGuBA,6CAA4B,CAA5B;AACvB;;;;AAGuBA,2CAA0B,CAA1B,CAnE3B,CAqEI;;AACA;;;;AAGuBA,0CAAyB,CAAzB;AACvB;;;;AAGuBA,gDAA+B,CAA/B;AACvB;;;;AAGuBA,yCAAwB,CAAxB;AACvB;;;;AAGuBA,gDAA+B,CAA/B;AAgB3B;AAAC,CArGD;;SAAaA","names":["LightConstants","a","b","shadowEnabled","renderPriority"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Lights/lightConstants.ts"],"sourcesContent":["/** Defines the cross module constantsused by lights to avoid circular dependencies */\r\nexport class LightConstants {\r\n    /**\r\n     * Falloff Default: light is falling off following the material specification:\r\n     * standard material is using standard falloff whereas pbr material can request special falloff per materials.\r\n     */\r\n    public static readonly FALLOFF_DEFAULT = 0;\r\n\r\n    /**\r\n     * Falloff Physical: light is falling off following the inverse squared distance law.\r\n     */\r\n    public static readonly FALLOFF_PHYSICAL = 1;\r\n\r\n    /**\r\n     * Falloff gltf: light is falling off as described in the gltf moving to PBR document\r\n     * to enhance interoperability with other engines.\r\n     */\r\n    public static readonly FALLOFF_GLTF = 2;\r\n\r\n    /**\r\n     * Falloff Standard: light is falling off like in the standard material\r\n     * to enhance interoperability with other materials.\r\n     */\r\n    public static readonly FALLOFF_STANDARD = 3;\r\n\r\n    //lightmapMode Consts\r\n    /**\r\n     * If every light affecting the material is in this lightmapMode,\r\n     * material.lightmapTexture adds or multiplies\r\n     * (depends on material.useLightmapAsShadowmap)\r\n     * after every other light calculations.\r\n     */\r\n    public static readonly LIGHTMAP_DEFAULT = 0;\r\n    /**\r\n     * material.lightmapTexture as only diffuse lighting from this light\r\n     * adds only specular lighting from this light\r\n     * adds dynamic shadows\r\n     */\r\n    public static readonly LIGHTMAP_SPECULAR = 1;\r\n    /**\r\n     * material.lightmapTexture as only lighting\r\n     * no light calculation from this light\r\n     * only adds dynamic shadows from this light\r\n     */\r\n    public static readonly LIGHTMAP_SHADOWSONLY = 2;\r\n\r\n    // Intensity Mode Consts\r\n    /**\r\n     * Each light type uses the default quantity according to its type:\r\n     *      point/spot lights use luminous intensity\r\n     *      directional lights use illuminance\r\n     */\r\n    public static readonly INTENSITYMODE_AUTOMATIC = 0;\r\n    /**\r\n     * lumen (lm)\r\n     */\r\n    public static readonly INTENSITYMODE_LUMINOUSPOWER = 1;\r\n    /**\r\n     * candela (lm/sr)\r\n     */\r\n    public static readonly INTENSITYMODE_LUMINOUSINTENSITY = 2;\r\n    /**\r\n     * lux (lm/m^2)\r\n     */\r\n    public static readonly INTENSITYMODE_ILLUMINANCE = 3;\r\n    /**\r\n     * nit (cd/m^2)\r\n     */\r\n    public static readonly INTENSITYMODE_LUMINANCE = 4;\r\n\r\n    // Light types ids const.\r\n    /**\r\n     * Light type const id of the point light.\r\n     */\r\n    public static readonly LIGHTTYPEID_POINTLIGHT = 0;\r\n    /**\r\n     * Light type const id of the directional light.\r\n     */\r\n    public static readonly LIGHTTYPEID_DIRECTIONALLIGHT = 1;\r\n    /**\r\n     * Light type const id of the spot light.\r\n     */\r\n    public static readonly LIGHTTYPEID_SPOTLIGHT = 2;\r\n    /**\r\n     * Light type const id of the hemispheric light.\r\n     */\r\n    public static readonly LIGHTTYPEID_HEMISPHERICLIGHT = 3;\r\n\r\n    /**\r\n     * Sort function to order lights for rendering.\r\n     * @param a First Light object to compare to second.\r\n     * @param b Second Light object to compare first.\r\n     * @return -1 to reduce's a's index relative to be, 0 for no change, 1 to increase a's index relative to b.\r\n     */\r\n    public static CompareLightsPriority(a: ISortableLight, b: ISortableLight): number {\r\n        //shadow-casting lights have priority over non-shadow-casting lights\r\n        //the renderPriority is a secondary sort criterion\r\n        if (a.shadowEnabled !== b.shadowEnabled) {\r\n            return (b.shadowEnabled ? 1 : 0) - (a.shadowEnabled ? 1 : 0);\r\n        }\r\n        return b.renderPriority - a.renderPriority;\r\n    }\r\n}\r\n\r\n/**\r\n * Defines the common interface of sortable lights\r\n */\r\nexport interface ISortableLight {\r\n    /**\r\n     * Gets or sets whether or not the shadows are enabled for this light. This can help turning off/on shadow without detaching\r\n     * the current shadow generator.\r\n     */\r\n    shadowEnabled: boolean;\r\n    /**\r\n     * Defines the rendering priority of the lights. It can help in case of fallback or number of lights\r\n     * exceeding the number allowed of the materials.\r\n     */\r\n    renderPriority: number;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}