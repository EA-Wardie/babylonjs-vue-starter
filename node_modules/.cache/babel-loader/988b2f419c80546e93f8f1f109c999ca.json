{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial.js\";\nimport { GLTFLoader } from \"../glTFLoader.js\";\nvar NAME = \"KHR_materials_clearcoat\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_materials_clearcoat/README.md)\n * [Playground Sample](https://www.babylonjs-playground.com/frame.html#7F7PN6#8)\n */\n\nvar KHR_materials_clearcoat =\n/** @class */\nfunction () {\n  /**\n   * @param loader\n   * @hidden\n   */\n  function KHR_materials_clearcoat(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    /**\n     * Defines a number that determines the order the extensions are applied.\n     */\n\n    this.order = 190;\n    this._loader = loader;\n    this.enabled = this._loader.isExtensionUsed(NAME);\n  }\n  /** @hidden */\n\n\n  KHR_materials_clearcoat.prototype.dispose = function () {\n    this._loader = null;\n  };\n  /**\n   * @param context\n   * @param material\n   * @param babylonMaterial\n   * @hidden\n   */\n\n\n  KHR_materials_clearcoat.prototype.loadMaterialPropertiesAsync = function (context, material, babylonMaterial) {\n    var _this = this;\n\n    return GLTFLoader.LoadExtensionAsync(context, material, this.name, function (extensionContext, extension) {\n      var promises = new Array();\n      promises.push(_this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n      promises.push(_this._loadClearCoatPropertiesAsync(extensionContext, extension, babylonMaterial));\n      return Promise.all(promises).then(function () {});\n    });\n  };\n\n  KHR_materials_clearcoat.prototype._loadClearCoatPropertiesAsync = function (context, properties, babylonMaterial) {\n    if (!(babylonMaterial instanceof PBRMaterial)) {\n      throw new Error(\"\".concat(context, \": Material type not supported\"));\n    }\n\n    var promises = new Array();\n    babylonMaterial.clearCoat.isEnabled = true;\n    babylonMaterial.clearCoat.useRoughnessFromMainTexture = false;\n    babylonMaterial.clearCoat.remapF0OnInterfaceChange = false;\n\n    if (properties.clearcoatFactor != undefined) {\n      babylonMaterial.clearCoat.intensity = properties.clearcoatFactor;\n    } else {\n      babylonMaterial.clearCoat.intensity = 0;\n    }\n\n    if (properties.clearcoatTexture) {\n      promises.push(this._loader.loadTextureInfoAsync(\"\".concat(context, \"/clearcoatTexture\"), properties.clearcoatTexture, function (texture) {\n        texture.name = \"\".concat(babylonMaterial.name, \" (ClearCoat Intensity)\");\n        babylonMaterial.clearCoat.texture = texture;\n      }));\n    }\n\n    if (properties.clearcoatRoughnessFactor != undefined) {\n      babylonMaterial.clearCoat.roughness = properties.clearcoatRoughnessFactor;\n    } else {\n      babylonMaterial.clearCoat.roughness = 0;\n    }\n\n    if (properties.clearcoatRoughnessTexture) {\n      properties.clearcoatRoughnessTexture.nonColorData = true;\n      promises.push(this._loader.loadTextureInfoAsync(\"\".concat(context, \"/clearcoatRoughnessTexture\"), properties.clearcoatRoughnessTexture, function (texture) {\n        texture.name = \"\".concat(babylonMaterial.name, \" (ClearCoat Roughness)\");\n        babylonMaterial.clearCoat.textureRoughness = texture;\n      }));\n    }\n\n    if (properties.clearcoatNormalTexture) {\n      properties.clearcoatNormalTexture.nonColorData = true;\n      promises.push(this._loader.loadTextureInfoAsync(\"\".concat(context, \"/clearcoatNormalTexture\"), properties.clearcoatNormalTexture, function (texture) {\n        texture.name = \"\".concat(babylonMaterial.name, \" (ClearCoat Normal)\");\n        babylonMaterial.clearCoat.bumpTexture = texture;\n      }));\n      babylonMaterial.invertNormalMapX = !babylonMaterial.getScene().useRightHandedSystem;\n      babylonMaterial.invertNormalMapY = babylonMaterial.getScene().useRightHandedSystem;\n\n      if (properties.clearcoatNormalTexture.scale != undefined) {\n        babylonMaterial.clearCoat.bumpTexture.level = properties.clearcoatNormalTexture.scale;\n      }\n    }\n\n    return Promise.all(promises).then(function () {});\n  };\n\n  return KHR_materials_clearcoat;\n}();\n\nexport { KHR_materials_clearcoat };\nGLTFLoader.RegisterExtension(NAME, function (loader) {\n  return new KHR_materials_clearcoat(loader);\n});","map":{"version":3,"mappings":"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","names":["PBRMaterial","GLTFLoader","NAME","loader","_loader","enabled","isExtensionUsed","KHR_materials_clearcoat","context","material","babylonMaterial","LoadExtensionAsync","name","extensionContext","extension","promises","Array","push","_this","loadMaterialPropertiesAsync","_loadClearCoatPropertiesAsync","Promise","all","then","properties","Error","clearCoat","isEnabled","useRoughnessFromMainTexture","remapF0OnInterfaceChange","clearcoatFactor","undefined","intensity","clearcoatTexture","loadTextureInfoAsync","texture","clearcoatRoughnessFactor","roughness","clearcoatRoughnessTexture","nonColorData","textureRoughness","clearcoatNormalTexture","bumpTexture","invertNormalMapX","getScene","useRightHandedSystem","invertNormalMapY","scale","level","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../../lts/loaders/generated/glTF/2.0/Extensions/KHR_materials_clearcoat.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial, ITextureInfo } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsClearcoat } from \"babylonjs-gltf2interface\";\r\n\r\nconst NAME = \"KHR_materials_clearcoat\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_materials_clearcoat/README.md)\r\n * [Playground Sample](https://www.babylonjs-playground.com/frame.html#7F7PN6#8)\r\n */\r\nexport class KHR_materials_clearcoat implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 190;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @param loader\r\n     * @hidden\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @hidden */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @param context\r\n     * @param material\r\n     * @param babylonMaterial\r\n     * @hidden\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsClearcoat>(context, material, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadClearCoatPropertiesAsync(extensionContext, extension, babylonMaterial));\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    private _loadClearCoatPropertiesAsync(context: string, properties: IKHRMaterialsClearcoat, babylonMaterial: Material): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        const promises = new Array<Promise<any>>();\r\n\r\n        babylonMaterial.clearCoat.isEnabled = true;\r\n        babylonMaterial.clearCoat.useRoughnessFromMainTexture = false;\r\n        babylonMaterial.clearCoat.remapF0OnInterfaceChange = false;\r\n\r\n        if (properties.clearcoatFactor != undefined) {\r\n            babylonMaterial.clearCoat.intensity = properties.clearcoatFactor;\r\n        } else {\r\n            babylonMaterial.clearCoat.intensity = 0;\r\n        }\r\n\r\n        if (properties.clearcoatTexture) {\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/clearcoatTexture`, properties.clearcoatTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (ClearCoat Intensity)`;\r\n                    babylonMaterial.clearCoat.texture = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        if (properties.clearcoatRoughnessFactor != undefined) {\r\n            babylonMaterial.clearCoat.roughness = properties.clearcoatRoughnessFactor;\r\n        } else {\r\n            babylonMaterial.clearCoat.roughness = 0;\r\n        }\r\n\r\n        if (properties.clearcoatRoughnessTexture) {\r\n            (properties.clearcoatRoughnessTexture as ITextureInfo).nonColorData = true;\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/clearcoatRoughnessTexture`, properties.clearcoatRoughnessTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (ClearCoat Roughness)`;\r\n                    babylonMaterial.clearCoat.textureRoughness = texture;\r\n                })\r\n            );\r\n        }\r\n\r\n        if (properties.clearcoatNormalTexture) {\r\n            (properties.clearcoatNormalTexture as ITextureInfo).nonColorData = true;\r\n            promises.push(\r\n                this._loader.loadTextureInfoAsync(`${context}/clearcoatNormalTexture`, properties.clearcoatNormalTexture, (texture) => {\r\n                    texture.name = `${babylonMaterial.name} (ClearCoat Normal)`;\r\n                    babylonMaterial.clearCoat.bumpTexture = texture;\r\n                })\r\n            );\r\n\r\n            babylonMaterial.invertNormalMapX = !babylonMaterial.getScene().useRightHandedSystem;\r\n            babylonMaterial.invertNormalMapY = babylonMaterial.getScene().useRightHandedSystem;\r\n            if (properties.clearcoatNormalTexture.scale != undefined) {\r\n                babylonMaterial.clearCoat.bumpTexture!.level = properties.clearcoatNormalTexture.scale;\r\n            }\r\n        }\r\n\r\n        return Promise.all(promises).then(() => {});\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_materials_clearcoat(loader));\r\n"]},"metadata":{},"sourceType":"module"}