{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { PointLight } from \"../../../../Lights/pointLight.js\";\n/**\n * Block used to get data information from a light\n */\n\nvar LightInformationBlock =\n/** @class */\nfunction (_super) {\n  __extends(LightInformationBlock, _super);\n  /**\n   * Creates a new LightInformationBlock\n   * @param name defines the block name\n   */\n\n\n  function LightInformationBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Vertex) || this;\n\n    _this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Vertex);\n\n    _this.registerOutput(\"direction\", NodeMaterialBlockConnectionPointTypes.Vector3);\n\n    _this.registerOutput(\"color\", NodeMaterialBlockConnectionPointTypes.Color3);\n\n    _this.registerOutput(\"intensity\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    return _this;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  LightInformationBlock.prototype.getClassName = function () {\n    return \"LightInformationBlock\";\n  };\n\n  Object.defineProperty(LightInformationBlock.prototype, \"worldPosition\", {\n    /**\n     * Gets the world position input component\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LightInformationBlock.prototype, \"direction\", {\n    /**\n     * Gets the direction output component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LightInformationBlock.prototype, \"color\", {\n    /**\n     * Gets the direction output component\n     */\n    get: function get() {\n      return this._outputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LightInformationBlock.prototype, \"intensity\", {\n    /**\n     * Gets the direction output component\n     */\n    get: function get() {\n      return this._outputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  LightInformationBlock.prototype.bind = function (effect, nodeMaterial, mesh) {\n    if (!mesh) {\n      return;\n    }\n\n    if (this.light && this.light.isDisposed) {\n      this.light = null;\n    }\n\n    var light = this.light;\n    var scene = nodeMaterial.getScene();\n\n    if (!light && scene.lights.length) {\n      light = this.light = scene.lights[0];\n      this._forcePrepareDefines = true;\n    }\n\n    if (!light || !light.isEnabled) {\n      effect.setFloat3(this._lightDataUniformName, 0, 0, 0);\n      effect.setFloat4(this._lightColorUniformName, 0, 0, 0, 0);\n      return;\n    }\n\n    light.transferToNodeMaterialEffect(effect, this._lightDataUniformName);\n    effect.setColor4(this._lightColorUniformName, light.diffuse, light.intensity);\n  };\n\n  LightInformationBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    if (!defines._areLightsDirty && !this._forcePrepareDefines) {\n      return;\n    }\n\n    this._forcePrepareDefines = false;\n    var light = this.light;\n    defines.setValue(this._lightTypeDefineName, light && light instanceof PointLight ? true : false, true);\n  };\n\n  LightInformationBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    state.sharedData.bindableBlocks.push(this);\n    state.sharedData.blocksWithDefines.push(this);\n    var direction = this.direction;\n    var color = this.color;\n    var intensity = this.intensity;\n    this._lightDataUniformName = state._getFreeVariableName(\"lightData\");\n    this._lightColorUniformName = state._getFreeVariableName(\"lightColor\");\n    this._lightTypeDefineName = state._getFreeDefineName(\"LIGHTPOINTTYPE\");\n\n    state._emitUniformFromString(this._lightDataUniformName, \"vec3\");\n\n    state._emitUniformFromString(this._lightColorUniformName, \"vec4\");\n\n    state.compilationString += \"#ifdef \".concat(this._lightTypeDefineName, \"\\r\\n\");\n    state.compilationString += this._declareOutput(direction, state) + \" = normalize(\".concat(this.worldPosition.associatedVariableName, \".xyz - \").concat(this._lightDataUniformName, \");\\r\\n\");\n    state.compilationString += \"#else\\r\\n\";\n    state.compilationString += this._declareOutput(direction, state) + \" = \".concat(this._lightDataUniformName, \";\\r\\n\");\n    state.compilationString += \"#endif\\r\\n\";\n    state.compilationString += this._declareOutput(color, state) + \" = \".concat(this._lightColorUniformName, \".rgb;\\r\\n\");\n    state.compilationString += this._declareOutput(intensity, state) + \" = \".concat(this._lightColorUniformName, \".a;\\r\\n\");\n    return this;\n  };\n\n  LightInformationBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    if (this.light) {\n      serializationObject.lightId = this.light.id;\n    }\n\n    return serializationObject;\n  };\n\n  LightInformationBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    if (serializationObject.lightId) {\n      this.light = scene.getLightById(serializationObject.lightId);\n    }\n  };\n\n  return LightInformationBlock;\n}(NodeMaterialBlock);\n\nexport { LightInformationBlock };\nRegisterClass(\"BABYLON.LightInformationBlock\", LightInformationBlock);","map":{"version":3,"mappings":";;;;AAAA,SAASA,iBAAT,QAAkC,4BAAlC;AACA,SAASC,qCAAT,QAAsD,sDAAtD;AAGA,SAASC,wBAAT,QAAyC,yCAAzC;AACA,SAASC,aAAT,QAA8B,+BAA9B;AAOA,SAASC,UAAT,QAA2B,kCAA3B;AAEA;;;;AAGA;AAAA;AAAA;AAA2CC;AAWvC;;;;;;AAIA,iCAAmBC,IAAnB,EAA+B;AAA/B,gBACIC,kBAAMD,IAAN,EAAYJ,wBAAwB,CAACM,MAArC,KAA4C,IADhD;;AAGIC,SAAI,CAACC,aAAL,CAAmB,eAAnB,EAAoCT,qCAAqC,CAACU,OAA1E,EAAmF,KAAnF,EAA0FT,wBAAwB,CAACM,MAAnH;;AACAC,SAAI,CAACG,cAAL,CAAoB,WAApB,EAAiCX,qCAAqC,CAACY,OAAvE;;AACAJ,SAAI,CAACG,cAAL,CAAoB,OAApB,EAA6BX,qCAAqC,CAACa,MAAnE;;AACAL,SAAI,CAACG,cAAL,CAAoB,WAApB,EAAiCX,qCAAqC,CAACc,KAAvE;;;AACH;AAED;;;;;;AAIOC,iDAAP;AACI,WAAO,uBAAP;AACH,GAFM;;AAOPC,wBAAWD,+BAAX,EAAW,eAAX,EAAwB;AAHxB;;;SAGA;AACI,aAAO,KAAKE,OAAL,CAAa,CAAb,CAAP;AACH,KAFuB;qBAAA;;AAAA,GAAxB;AAOAD,wBAAWD,+BAAX,EAAW,WAAX,EAAoB;AAHpB;;;SAGA;AACI,aAAO,KAAKG,QAAL,CAAc,CAAd,CAAP;AACH,KAFmB;qBAAA;;AAAA,GAApB;AAOAF,wBAAWD,+BAAX,EAAW,OAAX,EAAgB;AAHhB;;;SAGA;AACI,aAAO,KAAKG,QAAL,CAAc,CAAd,CAAP;AACH,KAFe;qBAAA;;AAAA,GAAhB;AAOAF,wBAAWD,+BAAX,EAAW,WAAX,EAAoB;AAHpB;;;SAGA;AACI,aAAO,KAAKG,QAAL,CAAc,CAAd,CAAP;AACH,KAFmB;qBAAA;;AAAA,GAApB;;AAIOH,yCAAP,UAAYI,MAAZ,EAA4BC,YAA5B,EAAwDC,IAAxD,EAAmE;AAC/D,QAAI,CAACA,IAAL,EAAW;AACP;AACH;;AAED,QAAI,KAAKC,KAAL,IAAc,KAAKA,KAAL,CAAWC,UAA7B,EAAyC;AACrC,WAAKD,KAAL,GAAa,IAAb;AACH;;AAED,QAAIA,KAAK,GAAG,KAAKA,KAAjB;AACA,QAAME,KAAK,GAAGJ,YAAY,CAACK,QAAb,EAAd;;AAEA,QAAI,CAACH,KAAD,IAAUE,KAAK,CAACE,MAAN,CAAaC,MAA3B,EAAmC;AAC/BL,WAAK,GAAG,KAAKA,KAAL,GAAaE,KAAK,CAACE,MAAN,CAAa,CAAb,CAArB;AACA,WAAKE,oBAAL,GAA4B,IAA5B;AACH;;AAED,QAAI,CAACN,KAAD,IAAU,CAACA,KAAK,CAACO,SAArB,EAAgC;AAC5BV,YAAM,CAACW,SAAP,CAAiB,KAAKC,qBAAtB,EAA6C,CAA7C,EAAgD,CAAhD,EAAmD,CAAnD;AACAZ,YAAM,CAACa,SAAP,CAAiB,KAAKC,sBAAtB,EAA8C,CAA9C,EAAiD,CAAjD,EAAoD,CAApD,EAAuD,CAAvD;AACA;AACH;;AAEDX,SAAK,CAACY,4BAAN,CAAmCf,MAAnC,EAA2C,KAAKY,qBAAhD;AAEAZ,UAAM,CAACgB,SAAP,CAAiB,KAAKF,sBAAtB,EAA8CX,KAAK,CAACc,OAApD,EAA6Dd,KAAK,CAACe,SAAnE;AACH,GA1BM;;AA4BAtB,mDAAP,UAAsBM,IAAtB,EAA0CD,YAA1C,EAAsEkB,OAAtE,EAAkG;AAC9F,QAAI,CAACA,OAAO,CAACC,eAAT,IAA4B,CAAC,KAAKX,oBAAtC,EAA4D;AACxD;AACH;;AAED,SAAKA,oBAAL,GAA4B,KAA5B;AAEA,QAAMN,KAAK,GAAG,KAAKA,KAAnB;AACAgB,WAAO,CAACE,QAAR,CAAiB,KAAKC,oBAAtB,EAA4CnB,KAAK,IAAIA,KAAK,YAAYnB,UAA1B,GAAuC,IAAvC,GAA8C,KAA1F,EAAiG,IAAjG;AACH,GATM;;AAWGY,gDAAV,UAAsB2B,KAAtB,EAAmD;AAC/CpC,qBAAMqC,WAAN,CAAiBC,IAAjB,CAAiB,IAAjB,EAAkBF,KAAlB;;AAEAA,SAAK,CAACG,UAAN,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC,IAArC;AACAL,SAAK,CAACG,UAAN,CAAiBG,iBAAjB,CAAmCD,IAAnC,CAAwC,IAAxC;AAEA,QAAME,SAAS,GAAG,KAAKA,SAAvB;AACA,QAAMC,KAAK,GAAG,KAAKA,KAAnB;AACA,QAAMb,SAAS,GAAG,KAAKA,SAAvB;AAEA,SAAKN,qBAAL,GAA6BW,KAAK,CAACS,oBAAN,CAA2B,WAA3B,CAA7B;AACA,SAAKlB,sBAAL,GAA8BS,KAAK,CAACS,oBAAN,CAA2B,YAA3B,CAA9B;AACA,SAAKV,oBAAL,GAA4BC,KAAK,CAACU,kBAAN,CAAyB,gBAAzB,CAA5B;;AAEAV,SAAK,CAACW,sBAAN,CAA6B,KAAKtB,qBAAlC,EAAyD,MAAzD;;AACAW,SAAK,CAACW,sBAAN,CAA6B,KAAKpB,sBAAlC,EAA0D,MAA1D;;AAEAS,SAAK,CAACY,iBAAN,IAA2B,iBAAU,KAAKb,oBAAf,EAAmC,MAAnC,CAA3B;AACAC,SAAK,CAACY,iBAAN,IAA2B,KAAKC,cAAL,CAAoBN,SAApB,EAA+BP,KAA/B,IAAwC,uBAAgB,KAAKc,aAAL,CAAmBC,sBAAnC,EAAyD,SAAzD,EAAyDC,MAAzD,CAAmE,KAAK3B,qBAAxE,EAA6F,QAA7F,CAAnE;AACAW,SAAK,CAACY,iBAAN,IAA2B,WAA3B;AACAZ,SAAK,CAACY,iBAAN,IAA2B,KAAKC,cAAL,CAAoBN,SAApB,EAA+BP,KAA/B,IAAwC,aAAM,KAAKX,qBAAX,EAAgC,OAAhC,CAAnE;AACAW,SAAK,CAACY,iBAAN,IAA2B,YAA3B;AAEAZ,SAAK,CAACY,iBAAN,IAA2B,KAAKC,cAAL,CAAoBL,KAApB,EAA2BR,KAA3B,IAAoC,aAAM,KAAKT,sBAAX,EAAiC,WAAjC,CAA/D;AACAS,SAAK,CAACY,iBAAN,IAA2B,KAAKC,cAAL,CAAoBlB,SAApB,EAA+BK,KAA/B,IAAwC,aAAM,KAAKT,sBAAX,EAAiC,SAAjC,CAAnE;AAEA,WAAO,IAAP;AACH,GA3BS;;AA6BHlB,8CAAP;AACI,QAAM4C,mBAAmB,GAAGrD,iBAAMsD,SAAN,CAAehB,IAAf,CAAe,IAAf,CAA5B;;AAEA,QAAI,KAAKtB,KAAT,EAAgB;AACZqC,yBAAmB,CAACE,OAApB,GAA8B,KAAKvC,KAAL,CAAWwC,EAAzC;AACH;;AAED,WAAOH,mBAAP;AACH,GARM;;AAUA5C,iDAAP,UAAoB4C,mBAApB,EAA8CnC,KAA9C,EAA4DuC,OAA5D,EAA2E;AACvEzD,qBAAM0D,YAAN,CAAkBpB,IAAlB,CAAkB,IAAlB,EAAmBe,mBAAnB,EAAwCnC,KAAxC,EAA+CuC,OAA/C;;AAEA,QAAIJ,mBAAmB,CAACE,OAAxB,EAAiC;AAC7B,WAAKvC,KAAL,GAAaE,KAAK,CAACyC,YAAN,CAAmBN,mBAAmB,CAACE,OAAvC,CAAb;AACH;AACJ,GANM;;AAOX;AAAC,CAjJD,CAA2C9D,iBAA3C;;;AAmJAG,aAAa,CAAC,+BAAD,EAAkCa,qBAAlC,CAAb","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","PointLight","__extends","name","_super","Vertex","_this","registerInput","Vector4","registerOutput","Vector3","Color3","Float","LightInformationBlock","Object","_inputs","_outputs","effect","nodeMaterial","mesh","light","isDisposed","scene","getScene","lights","length","_forcePrepareDefines","isEnabled","setFloat3","_lightDataUniformName","setFloat4","_lightColorUniformName","transferToNodeMaterialEffect","setColor4","diffuse","intensity","defines","_areLightsDirty","setValue","_lightTypeDefineName","state","_buildBlock","call","sharedData","bindableBlocks","push","blocksWithDefines","direction","color","_getFreeVariableName","_getFreeDefineName","_emitUniformFromString","compilationString","_declareOutput","worldPosition","associatedVariableName","concat","serializationObject","serialize","lightId","id","rootUrl","_deserialize","getLightById"],"sourceRoot":"","sources":["../../../../../../../../lts/core/generated/Materials/Node/Blocks/Vertex/lightInformationBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { Nullable } from \"../../../../types\";\r\nimport type { Scene } from \"../../../../scene\";\r\nimport type { Effect } from \"../../../effect\";\r\nimport type { NodeMaterial, NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport type { Mesh } from \"../../../../Meshes/mesh\";\r\nimport type { Light } from \"../../../../Lights/light\";\r\nimport { PointLight } from \"../../../../Lights/pointLight\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\n/**\r\n * Block used to get data information from a light\r\n */\r\nexport class LightInformationBlock extends NodeMaterialBlock {\r\n    private _lightDataUniformName: string;\r\n    private _lightColorUniformName: string;\r\n    private _lightTypeDefineName: string;\r\n    private _forcePrepareDefines: boolean;\r\n\r\n    /**\r\n     * Gets or sets the light associated with this block\r\n     */\r\n    public light: Nullable<Light>;\r\n\r\n    /**\r\n     * Creates a new LightInformationBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Vertex);\r\n\r\n        this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Vertex);\r\n        this.registerOutput(\"direction\", NodeMaterialBlockConnectionPointTypes.Vector3);\r\n        this.registerOutput(\"color\", NodeMaterialBlockConnectionPointTypes.Color3);\r\n        this.registerOutput(\"intensity\", NodeMaterialBlockConnectionPointTypes.Float);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"LightInformationBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the world position input component\r\n     */\r\n    public get worldPosition(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the direction output component\r\n     */\r\n    public get direction(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the direction output component\r\n     */\r\n    public get color(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the direction output component\r\n     */\r\n    public get intensity(): NodeMaterialConnectionPoint {\r\n        return this._outputs[2];\r\n    }\r\n\r\n    public bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh) {\r\n        if (!mesh) {\r\n            return;\r\n        }\r\n\r\n        if (this.light && this.light.isDisposed) {\r\n            this.light = null;\r\n        }\r\n\r\n        let light = this.light;\r\n        const scene = nodeMaterial.getScene();\r\n\r\n        if (!light && scene.lights.length) {\r\n            light = this.light = scene.lights[0];\r\n            this._forcePrepareDefines = true;\r\n        }\r\n\r\n        if (!light || !light.isEnabled) {\r\n            effect.setFloat3(this._lightDataUniformName, 0, 0, 0);\r\n            effect.setFloat4(this._lightColorUniformName, 0, 0, 0, 0);\r\n            return;\r\n        }\r\n\r\n        light.transferToNodeMaterialEffect(effect, this._lightDataUniformName);\r\n\r\n        effect.setColor4(this._lightColorUniformName, light.diffuse, light.intensity);\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        if (!defines._areLightsDirty && !this._forcePrepareDefines) {\r\n            return;\r\n        }\r\n\r\n        this._forcePrepareDefines = false;\r\n\r\n        const light = this.light;\r\n        defines.setValue(this._lightTypeDefineName, light && light instanceof PointLight ? true : false, true);\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        state.sharedData.bindableBlocks.push(this);\r\n        state.sharedData.blocksWithDefines.push(this);\r\n\r\n        const direction = this.direction;\r\n        const color = this.color;\r\n        const intensity = this.intensity;\r\n\r\n        this._lightDataUniformName = state._getFreeVariableName(\"lightData\");\r\n        this._lightColorUniformName = state._getFreeVariableName(\"lightColor\");\r\n        this._lightTypeDefineName = state._getFreeDefineName(\"LIGHTPOINTTYPE\");\r\n\r\n        state._emitUniformFromString(this._lightDataUniformName, \"vec3\");\r\n        state._emitUniformFromString(this._lightColorUniformName, \"vec4\");\r\n\r\n        state.compilationString += `#ifdef ${this._lightTypeDefineName}\\r\\n`;\r\n        state.compilationString += this._declareOutput(direction, state) + ` = normalize(${this.worldPosition.associatedVariableName}.xyz - ${this._lightDataUniformName});\\r\\n`;\r\n        state.compilationString += `#else\\r\\n`;\r\n        state.compilationString += this._declareOutput(direction, state) + ` = ${this._lightDataUniformName};\\r\\n`;\r\n        state.compilationString += `#endif\\r\\n`;\r\n\r\n        state.compilationString += this._declareOutput(color, state) + ` = ${this._lightColorUniformName}.rgb;\\r\\n`;\r\n        state.compilationString += this._declareOutput(intensity, state) + ` = ${this._lightColorUniformName}.a;\\r\\n`;\r\n\r\n        return this;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        if (this.light) {\r\n            serializationObject.lightId = this.light.id;\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        if (serializationObject.lightId) {\r\n            this.light = scene.getLightById(serializationObject.lightId);\r\n        }\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.LightInformationBlock\", LightInformationBlock);\r\n"]},"metadata":{},"sourceType":"module"}