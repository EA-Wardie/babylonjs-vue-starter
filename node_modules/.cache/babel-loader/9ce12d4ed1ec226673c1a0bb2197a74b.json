{"ast":null,"code":"import \"core-js/modules/es.function.bind.js\";\nimport { __extends } from \"tslib\";\nimport { VRDeviceOrientationFreeCamera } from \"./vrDeviceOrientationFreeCamera.js\";\nimport { VRCameraMetrics } from \"./vrCameraMetrics.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Node } from \"../../node.js\";\nimport { setVRRigMode } from \"../RigModes/vrRigMode.js\";\nimport \"../../Gamepads/gamepadSceneComponent.js\";\nNode.AddNodeConstructor(\"VRDeviceOrientationGamepadCamera\", function (name, scene) {\n  return function () {\n    return new VRDeviceOrientationGamepadCamera(name, Vector3.Zero(), scene);\n  };\n});\n/**\n * Camera used to simulate VR rendering (based on VRDeviceOrientationFreeCamera)\n * @see https://doc.babylonjs.com/babylon101/cameras#vr-device-orientation-cameras\n */\n\nvar VRDeviceOrientationGamepadCamera =\n/** @class */\nfunction (_super) {\n  __extends(VRDeviceOrientationGamepadCamera, _super);\n  /**\n   * Creates a new VRDeviceOrientationGamepadCamera\n   * @param name defines camera name\n   * @param position defines the start position of the camera\n   * @param scene defines the scene the camera belongs to\n   * @param compensateDistortion defines if the camera needs to compensate the lens distortion\n   * @param vrCameraMetrics defines the vr metrics associated to the camera\n   */\n\n\n  function VRDeviceOrientationGamepadCamera(name, position, scene, compensateDistortion, vrCameraMetrics) {\n    if (compensateDistortion === void 0) {\n      compensateDistortion = true;\n    }\n\n    if (vrCameraMetrics === void 0) {\n      vrCameraMetrics = VRCameraMetrics.GetDefault();\n    }\n\n    var _this = _super.call(this, name, position, scene, compensateDistortion, vrCameraMetrics) || this;\n\n    _this._setRigMode = setVRRigMode.bind(null, _this);\n\n    _this.inputs.addGamepad();\n\n    return _this;\n  }\n  /**\n   * Gets camera class name\n   * @returns VRDeviceOrientationGamepadCamera\n   */\n\n\n  VRDeviceOrientationGamepadCamera.prototype.getClassName = function () {\n    return \"VRDeviceOrientationGamepadCamera\";\n  };\n\n  return VRDeviceOrientationGamepadCamera;\n}(VRDeviceOrientationFreeCamera);\n\nexport { VRDeviceOrientationGamepadCamera };","map":{"version":3,"mappings":";;AAAA,SAASA,6BAAT,QAA8C,oCAA9C;AACA,SAASC,eAAT,QAAgC,sBAAhC;AAEA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,IAAT,QAAqB,eAArB;AACA,SAASC,YAAT,QAA6B,0BAA7B;AAEA,OAAO,yCAAP;AAEAD,IAAI,CAACE,kBAAL,CAAwB,kCAAxB,EAA4D,UAACC,IAAD,EAAOC,KAAP,EAAY;AACpE,SAAO;AAAM,eAAIC,gCAAJ,CAAqCF,IAArC,EAA2CJ,OAAO,CAACO,IAAR,EAA3C,EAA2DF,KAA3D;AAAiE,GAA9E;AACH,CAFD;AAIA;;;;;AAIA;AAAA;AAAA;AAAsDG;AAClD;;;;;;;;;;AAQA,4CAAYJ,IAAZ,EAA0BK,QAA1B,EAA6CJ,KAA7C,EAA4DK,oBAA5D,EAAyFC,eAAzF,EAAwJ;AAA5F;AAAAD;AAA2B;;AAAE;AAAAC,wBAAmCZ,eAAe,CAACa,UAAhB,EAAnC;AAA+D;;AAAxJ,gBACIC,kBAAMT,IAAN,EAAYK,QAAZ,EAAsBJ,KAAtB,EAA6BK,oBAA7B,EAAmDC,eAAnD,KAAmE,IADvE;;AAcUG,wBAAcZ,YAAY,CAACa,IAAb,CAAkB,IAAlB,EAAwBD,KAAxB,CAAd;;AAXNA,SAAI,CAACE,MAAL,CAAYC,UAAZ;;;AACH;AAED;;;;;;AAIOX,4DAAP;AACI,WAAO,kCAAP;AACH,GAFM;;AAKX;AAAC,CAxBD,CAAsDR,6BAAtD","names":["VRDeviceOrientationFreeCamera","VRCameraMetrics","Vector3","Node","setVRRigMode","AddNodeConstructor","name","scene","VRDeviceOrientationGamepadCamera","Zero","__extends","position","compensateDistortion","vrCameraMetrics","GetDefault","_super","_this","bind","inputs","addGamepad"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Cameras/VR/vrDeviceOrientationGamepadCamera.ts"],"sourcesContent":["import { VRDeviceOrientationFreeCamera } from \"./vrDeviceOrientationFreeCamera\";\r\nimport { VRCameraMetrics } from \"./vrCameraMetrics\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Node } from \"../../node\";\r\nimport { setVRRigMode } from \"../RigModes/vrRigMode\";\r\n\r\nimport \"../../Gamepads/gamepadSceneComponent\";\r\n\r\nNode.AddNodeConstructor(\"VRDeviceOrientationGamepadCamera\", (name, scene) => {\r\n    return () => new VRDeviceOrientationGamepadCamera(name, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * Camera used to simulate VR rendering (based on VRDeviceOrientationFreeCamera)\r\n * @see https://doc.babylonjs.com/babylon101/cameras#vr-device-orientation-cameras\r\n */\r\nexport class VRDeviceOrientationGamepadCamera extends VRDeviceOrientationFreeCamera {\r\n    /**\r\n     * Creates a new VRDeviceOrientationGamepadCamera\r\n     * @param name defines camera name\r\n     * @param position defines the start position of the camera\r\n     * @param scene defines the scene the camera belongs to\r\n     * @param compensateDistortion defines if the camera needs to compensate the lens distortion\r\n     * @param vrCameraMetrics defines the vr metrics associated to the camera\r\n     */\r\n    constructor(name: string, position: Vector3, scene?: Scene, compensateDistortion = true, vrCameraMetrics: VRCameraMetrics = VRCameraMetrics.GetDefault()) {\r\n        super(name, position, scene, compensateDistortion, vrCameraMetrics);\r\n\r\n        this.inputs.addGamepad();\r\n    }\r\n\r\n    /**\r\n     * Gets camera class name\r\n     * @returns VRDeviceOrientationGamepadCamera\r\n     */\r\n    public getClassName(): string {\r\n        return \"VRDeviceOrientationGamepadCamera\";\r\n    }\r\n\r\n    protected _setRigMode = setVRRigMode.bind(null, this);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}