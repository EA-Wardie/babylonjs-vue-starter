{"ast":null,"code":"// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore.js\";\nimport \"./ShadersInclude/bonesDeclaration.js\";\nimport \"./ShadersInclude/bakedVertexAnimationDeclaration.js\";\nimport \"./ShadersInclude/morphTargetsVertexGlobalDeclaration.js\";\nimport \"./ShadersInclude/morphTargetsVertexDeclaration.js\";\nimport \"./ShadersInclude/instancesDeclaration.js\";\nimport \"./ShadersInclude/morphTargetsVertexGlobal.js\";\nimport \"./ShadersInclude/morphTargetsVertex.js\";\nimport \"./ShadersInclude/instancesVertex.js\";\nimport \"./ShadersInclude/bonesVertex.js\";\nimport \"./ShadersInclude/bakedVertexAnimation.js\";\nvar name = \"depthVertexShader\";\nvar shader = \"attribute vec3 position;\\n#include<bonesDeclaration>\\n#include<bakedVertexAnimationDeclaration>\\n#include<morphTargetsVertexGlobalDeclaration>\\n#include<morphTargetsVertexDeclaration>[0..maxSimultaneousMorphTargets]\\n#include<instancesDeclaration>\\nuniform mat4 viewProjection;\\nuniform vec2 depthValues;\\n#if defined(ALPHATEST) || defined(NEED_UV)\\nvarying vec2 vUV;\\nuniform mat4 diffuseMatrix;\\n#ifdef UV1\\nattribute vec2 uv;\\n#endif\\n#ifdef UV2\\nattribute vec2 uv2;\\n#endif\\n#endif\\nvarying float vDepthMetric;\\n#define CUSTOM_VERTEX_DEFINITIONS\\nvoid main(void)\\n{\\nvec3 positionUpdated=position;\\n#ifdef UV1\\nvec2 uvUpdated=uv;\\n#endif\\n#include<morphTargetsVertexGlobal>\\n#include<morphTargetsVertex>[0..maxSimultaneousMorphTargets]\\n#include<instancesVertex>\\n#include<bonesVertex>\\n#include<bakedVertexAnimation>\\ngl_Position=viewProjection*finalWorld*vec4(positionUpdated,1.0);\\n#ifdef USE_REVERSE_DEPTHBUFFER\\nvDepthMetric=((-gl_Position.z+depthValues.x)/(depthValues.y));\\n#else\\nvDepthMetric=((gl_Position.z+depthValues.x)/(depthValues.y));\\n#endif\\n#if defined(ALPHATEST) || defined(BASIC_RENDER)\\n#ifdef UV1\\nvUV=vec2(diffuseMatrix*vec4(uvUpdated,1.0,0.0));\\n#endif\\n#ifdef UV2\\nvUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\\n#endif\\n#endif\\n}\\n\"; // Sideeffect\n\nShaderStore.ShadersStore[name] = shader;\n/** @hidden */\n\nexport var depthVertexShader = {\n  name: name,\n  shader: shader\n};","map":{"version":3,"mappings":"AAAA;AACA,SAASA,WAAT,QAA4B,2BAA5B;AACA,OAAO,sCAAP;AACA,OAAO,qDAAP;AACA,OAAO,yDAAP;AACA,OAAO,mDAAP;AACA,OAAO,0CAAP;AACA,OAAO,8CAAP;AACA,OAAO,wCAAP;AACA,OAAO,qCAAP;AACA,OAAO,iCAAP;AACA,OAAO,0CAAP;AAEA,IAAMC,IAAI,GAAG,mBAAb;AACA,IAAMC,MAAM,GAAG,2uCAAf,C,CA+CA;;AACAF,WAAW,CAACG,YAAZ,CAAyBF,IAAzB,IAAiCC,MAAjC;AACA;;AACA,OAAO,IAAME,iBAAiB,GAAG;AAAEH,MAAI,MAAN;AAAQC,QAAM;AAAd,CAA1B","names":["ShaderStore","name","shader","ShadersStore","depthVertexShader"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Shaders/depth.vertex.ts"],"sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../Engines/shaderStore\";\nimport \"./ShadersInclude/bonesDeclaration\";\nimport \"./ShadersInclude/bakedVertexAnimationDeclaration\";\nimport \"./ShadersInclude/morphTargetsVertexGlobalDeclaration\";\nimport \"./ShadersInclude/morphTargetsVertexDeclaration\";\nimport \"./ShadersInclude/instancesDeclaration\";\nimport \"./ShadersInclude/morphTargetsVertexGlobal\";\nimport \"./ShadersInclude/morphTargetsVertex\";\nimport \"./ShadersInclude/instancesVertex\";\nimport \"./ShadersInclude/bonesVertex\";\nimport \"./ShadersInclude/bakedVertexAnimation\";\n\nconst name = \"depthVertexShader\";\nconst shader = `attribute vec3 position;\r#include<bonesDeclaration>\n#include<bakedVertexAnimationDeclaration>\n#include<morphTargetsVertexGlobalDeclaration>\n#include<morphTargetsVertexDeclaration>[0..maxSimultaneousMorphTargets]\n#include<instancesDeclaration>\nuniform mat4 viewProjection;\runiform vec2 depthValues;\r#if defined(ALPHATEST) || defined(NEED_UV)\nvarying vec2 vUV;\runiform mat4 diffuseMatrix;\r#ifdef UV1\nattribute vec2 uv;\r#endif\n#ifdef UV2\nattribute vec2 uv2;\r#endif\n#endif\nvarying float vDepthMetric;\r#define CUSTOM_VERTEX_DEFINITIONS\nvoid main(void)\r{\rvec3 positionUpdated=position;\r#ifdef UV1\nvec2 uvUpdated=uv;\r#endif\n#include<morphTargetsVertexGlobal>\n#include<morphTargetsVertex>[0..maxSimultaneousMorphTargets]\n#include<instancesVertex>\n#include<bonesVertex>\n#include<bakedVertexAnimation>\ngl_Position=viewProjection*finalWorld*vec4(positionUpdated,1.0);\r#ifdef USE_REVERSE_DEPTHBUFFER\nvDepthMetric=((-gl_Position.z+depthValues.x)/(depthValues.y));\r#else\nvDepthMetric=((gl_Position.z+depthValues.x)/(depthValues.y));\r#endif\n#if defined(ALPHATEST) || defined(BASIC_RENDER)\n#ifdef UV1\nvUV=vec2(diffuseMatrix*vec4(uvUpdated,1.0,0.0));\r#endif\n#ifdef UV2\nvUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\r#endif\n#endif\n}\r`;\n// Sideeffect\nShaderStore.ShadersStore[name] = shader;\n/** @hidden */\nexport const depthVertexShader = { name, shader };\n"]},"metadata":{},"sourceType":"module"}