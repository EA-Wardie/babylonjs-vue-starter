{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { __extends } from \"tslib\";\n/**\n * Gather the list of keyboard event types as constants.\n */\n\nvar KeyboardEventTypes =\n/** @class */\nfunction () {\n  function KeyboardEventTypes() {}\n  /**\n   * The keydown event is fired when a key becomes active (pressed).\n   */\n\n\n  KeyboardEventTypes.KEYDOWN = 0x01;\n  /**\n   * The keyup event is fired when a key has been released.\n   */\n\n  KeyboardEventTypes.KEYUP = 0x02;\n  return KeyboardEventTypes;\n}();\n\nexport { KeyboardEventTypes };\n/**\n * This class is used to store keyboard related info for the onKeyboardObservable event.\n */\n\nvar KeyboardInfo =\n/** @class */\nfunction () {\n  /**\n   * Instantiates a new keyboard info.\n   * This class is used to store keyboard related info for the onKeyboardObservable event.\n   * @param type Defines the type of event (KeyboardEventTypes)\n   * @param event Defines the related dom event\n   */\n  function KeyboardInfo(\n  /**\n   * Defines the type of event (KeyboardEventTypes)\n   */\n  type,\n  /**\n   * Defines the related dom event\n   */\n  event) {\n    this.type = type;\n    this.event = event;\n  }\n\n  return KeyboardInfo;\n}();\n\nexport { KeyboardInfo };\n/**\n * This class is used to store keyboard related info for the onPreKeyboardObservable event.\n * Set the skipOnKeyboardObservable property to true if you want the engine to stop any process after this event is triggered, even not calling onKeyboardObservable\n */\n\nvar KeyboardInfoPre =\n/** @class */\nfunction (_super) {\n  __extends(KeyboardInfoPre, _super);\n  /**\n   * Instantiates a new keyboard pre info.\n   * This class is used to store keyboard related info for the onPreKeyboardObservable event.\n   * @param type Defines the type of event (KeyboardEventTypes)\n   * @param event Defines the related dom event\n   */\n\n\n  function KeyboardInfoPre(\n  /**\n   * Defines the type of event (KeyboardEventTypes)\n   */\n  type,\n  /**\n   * Defines the related dom event\n   */\n  event) {\n    var _this = _super.call(this, type, event) || this;\n\n    _this.type = type;\n    _this.event = event;\n    _this.skipOnKeyboardObservable = false;\n    return _this;\n  }\n\n  Object.defineProperty(KeyboardInfoPre.prototype, \"skipOnPointerObservable\", {\n    /**\n     * Defines whether the engine should skip the next onKeyboardObservable associated to this pre.\n     * @deprecated use skipOnKeyboardObservable property instead\n     */\n    get: function get() {\n      return this.skipOnKeyboardObservable;\n    },\n    set: function set(value) {\n      this.skipOnKeyboardObservable = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return KeyboardInfoPre;\n}(KeyboardInfo);\n\nexport { KeyboardInfoPre };","map":{"version":3,"mappings":";;AAEA;;;;AAGA;AAAA;AAAA;AAAA,iCASC;AARG;;;;;AAGuBA,+BAAU,IAAV;AACvB;;;;AAGuBA,6BAAQ,IAAR;AAC3B;AAAC,CATD;;SAAaA;AAWb;;;;AAGA;AAAA;AAAA;AACI;;;;;;AAMA;AACI;;;AAGOC,MAJX;AAKI;;;AAGOC,OARX,EAQgC;AAJrB;AAIA;AACP;;AACR;AAAC,CAjBD;;;AAmBA;;;;;AAIA;AAAA;AAAA;AAAqCC;AAiBjC;;;;;;;;AAMA;AACI;;;AAGOF,MAJX;AAKI;;;AAGOC,OARX,EAQgC;AARhC,gBAUIE,kBAAMH,IAAN,EAAYC,KAAZ,KAAkB,IAVtB;;AAIWG;AAIAA;AAGPA,SAAI,CAACC,wBAAL,GAAgC,KAAhC;;AACH;;AAzBDC,wBAAWC,yBAAX,EAAW,yBAAX,EAAkC;AAJlC;;;;SAIA;AACI,aAAO,KAAKF,wBAAZ;AACH,KAFiC;SAGlC,aAAmCG,KAAnC,EAAwC;AACpC,WAAKH,wBAAL,GAAgCG,KAAhC;AACH,KALiC;qBAAA;;AAAA,GAAlC;AA0BJ;AAAC,CApCD,CAAqCC,YAArC","names":["KeyboardEventTypes","type","event","__extends","_super","_this","skipOnKeyboardObservable","Object","KeyboardInfoPre","value","KeyboardInfo"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Events/keyboardEvents.ts"],"sourcesContent":["import type { IKeyboardEvent } from \"./deviceInputEvents\";\r\n\r\n/**\r\n * Gather the list of keyboard event types as constants.\r\n */\r\nexport class KeyboardEventTypes {\r\n    /**\r\n     * The keydown event is fired when a key becomes active (pressed).\r\n     */\r\n    public static readonly KEYDOWN = 0x01;\r\n    /**\r\n     * The keyup event is fired when a key has been released.\r\n     */\r\n    public static readonly KEYUP = 0x02;\r\n}\r\n\r\n/**\r\n * This class is used to store keyboard related info for the onKeyboardObservable event.\r\n */\r\nexport class KeyboardInfo {\r\n    /**\r\n     * Instantiates a new keyboard info.\r\n     * This class is used to store keyboard related info for the onKeyboardObservable event.\r\n     * @param type Defines the type of event (KeyboardEventTypes)\r\n     * @param event Defines the related dom event\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the type of event (KeyboardEventTypes)\r\n         */\r\n        public type: number,\r\n        /**\r\n         * Defines the related dom event\r\n         */\r\n        public event: IKeyboardEvent\r\n    ) {}\r\n}\r\n\r\n/**\r\n * This class is used to store keyboard related info for the onPreKeyboardObservable event.\r\n * Set the skipOnKeyboardObservable property to true if you want the engine to stop any process after this event is triggered, even not calling onKeyboardObservable\r\n */\r\nexport class KeyboardInfoPre extends KeyboardInfo {\r\n    /**\r\n     * Defines whether the engine should skip the next onKeyboardObservable associated to this pre.\r\n     */\r\n    public skipOnKeyboardObservable: boolean;\r\n\r\n    /**\r\n     * Defines whether the engine should skip the next onKeyboardObservable associated to this pre.\r\n     * @deprecated use skipOnKeyboardObservable property instead\r\n     */\r\n    public get skipOnPointerObservable() {\r\n        return this.skipOnKeyboardObservable;\r\n    }\r\n    public set skipOnPointerObservable(value) {\r\n        this.skipOnKeyboardObservable = value;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new keyboard pre info.\r\n     * This class is used to store keyboard related info for the onPreKeyboardObservable event.\r\n     * @param type Defines the type of event (KeyboardEventTypes)\r\n     * @param event Defines the related dom event\r\n     */\r\n    constructor(\r\n        /**\r\n         * Defines the type of event (KeyboardEventTypes)\r\n         */\r\n        public type: number,\r\n        /**\r\n         * Defines the related dom event\r\n         */\r\n        public event: IKeyboardEvent\r\n    ) {\r\n        super(type, event);\r\n        this.skipOnKeyboardObservable = false;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}