{"ast":null,"code":"import \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { DeviceType } from \"./deviceEnums.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { InternalDeviceSourceManager } from \"./internalDeviceSourceManager.js\";\n/**\n * Class to keep track of devices\n */\n\nvar DeviceSourceManager =\n/** @class */\nfunction () {\n  /**\n   * Default constructor\n   * @param engine - Used to get canvas (if applicable)\n   */\n  function DeviceSourceManager(engine) {\n    var _this = this;\n\n    var numberOfDeviceTypes = Object.keys(DeviceType).length / 2;\n    this._devices = new Array(numberOfDeviceTypes);\n    this._firstDevice = new Array(numberOfDeviceTypes);\n    this._engine = engine;\n\n    if (!this._engine._deviceSourceManager) {\n      this._engine._deviceSourceManager = new InternalDeviceSourceManager(engine);\n    }\n\n    this._engine._deviceSourceManager._refCount++; // Observables\n\n    this.onDeviceConnectedObservable = new Observable(function (observer) {\n      for (var _i = 0, _a = _this._devices; _i < _a.length; _i++) {\n        var devices = _a[_i];\n\n        if (devices) {\n          for (var _b = 0, devices_1 = devices; _b < devices_1.length; _b++) {\n            var device = devices_1[_b];\n\n            if (device) {\n              _this.onDeviceConnectedObservable.notifyObserver(observer, device);\n            }\n          }\n        }\n      }\n    });\n    this.onDeviceDisconnectedObservable = new Observable();\n\n    this._engine._deviceSourceManager.registerManager(this);\n\n    this._onDisposeObserver = engine.onDisposeObservable.add(function () {\n      _this.dispose();\n    });\n  } // Public Functions\n\n  /**\n   * Gets a DeviceSource, given a type and slot\n   * @param deviceType - Type of Device\n   * @param deviceSlot - Slot or ID of device\n   * @returns DeviceSource\n   */\n\n\n  DeviceSourceManager.prototype.getDeviceSource = function (deviceType, deviceSlot) {\n    if (deviceSlot === undefined) {\n      if (this._firstDevice[deviceType] === undefined) {\n        return null;\n      }\n\n      deviceSlot = this._firstDevice[deviceType];\n    }\n\n    if (!this._devices[deviceType] || this._devices[deviceType][deviceSlot] === undefined) {\n      return null;\n    }\n\n    return this._devices[deviceType][deviceSlot];\n  };\n  /**\n   * Gets an array of DeviceSource objects for a given device type\n   * @param deviceType - Type of Device\n   * @returns All available DeviceSources of a given type\n   */\n\n\n  DeviceSourceManager.prototype.getDeviceSources = function (deviceType) {\n    return this._devices[deviceType].filter(function (source) {\n      return !!source;\n    });\n  };\n  /**\n   * Dispose of DeviceSourceManager\n   */\n\n\n  DeviceSourceManager.prototype.dispose = function () {\n    // Null out observable refs\n    this.onDeviceConnectedObservable.clear();\n    this.onDeviceDisconnectedObservable.clear();\n\n    if (this._engine._deviceSourceManager) {\n      this._engine._deviceSourceManager.unregisterManager(this);\n\n      if (--this._engine._deviceSourceManager._refCount < 1) {\n        this._engine._deviceSourceManager.dispose();\n\n        delete this._engine._deviceSourceManager;\n      }\n    }\n\n    this._engine.onDisposeObservable.remove(this._onDisposeObserver);\n  }; // Hidden Functions\n\n  /**\n   * @param deviceSource - Source to add\n   * @hidden\n   */\n\n\n  DeviceSourceManager.prototype._addDevice = function (deviceSource) {\n    if (!this._devices[deviceSource.deviceType]) {\n      this._devices[deviceSource.deviceType] = new Array();\n    }\n\n    if (!this._devices[deviceSource.deviceType][deviceSource.deviceSlot]) {\n      this._devices[deviceSource.deviceType][deviceSource.deviceSlot] = deviceSource;\n\n      this._updateFirstDevices(deviceSource.deviceType);\n    }\n\n    this.onDeviceConnectedObservable.notifyObservers(deviceSource);\n  };\n  /**\n   * @param deviceType - DeviceType\n   * @param deviceSlot - DeviceSlot\n   * @hidden\n   */\n\n\n  DeviceSourceManager.prototype._removeDevice = function (deviceType, deviceSlot) {\n    var _a, _b;\n\n    var deviceSource = (_a = this._devices[deviceType]) === null || _a === void 0 ? void 0 : _a[deviceSlot]; // Grab local reference to use before removing from devices\n\n    this.onDeviceDisconnectedObservable.notifyObservers(deviceSource);\n\n    if ((_b = this._devices[deviceType]) === null || _b === void 0 ? void 0 : _b[deviceSlot]) {\n      delete this._devices[deviceType][deviceSlot];\n    } // Even if we don't delete a device, we should still check for the first device as things may have gotten out of sync.\n\n\n    this._updateFirstDevices(deviceType);\n  };\n  /**\n   * @param deviceType - DeviceType\n   * @param deviceSlot - DeviceSlot\n   * @param eventData - Event\n   * @hidden\n   */\n\n\n  DeviceSourceManager.prototype._onInputChanged = function (deviceType, deviceSlot, eventData) {\n    var _a, _b;\n\n    (_b = (_a = this._devices[deviceType]) === null || _a === void 0 ? void 0 : _a[deviceSlot]) === null || _b === void 0 ? void 0 : _b.onInputChangedObservable.notifyObservers(eventData);\n  }; // Private Functions\n\n\n  DeviceSourceManager.prototype._updateFirstDevices = function (type) {\n    switch (type) {\n      case DeviceType.Keyboard:\n      case DeviceType.Mouse:\n        this._firstDevice[type] = 0;\n        break;\n\n      case DeviceType.Touch:\n      case DeviceType.DualSense:\n      case DeviceType.DualShock:\n      case DeviceType.Xbox:\n      case DeviceType.Switch:\n      case DeviceType.Generic:\n        {\n          delete this._firstDevice[type]; // eslint-disable-next-line no-case-declarations\n\n          var devices = this._devices[type];\n\n          if (devices) {\n            for (var i = 0; i < devices.length; i++) {\n              if (devices[i]) {\n                this._firstDevice[type] = i;\n                break;\n              }\n            }\n          }\n\n          break;\n        }\n    }\n  };\n\n  return DeviceSourceManager;\n}();\n\nexport { DeviceSourceManager };","map":{"version":3,"mappings":"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","names":["DeviceType","Observable","InternalDeviceSourceManager","engine","numberOfDeviceTypes","Object","keys","length","_devices","Array","_firstDevice","_engine","_deviceSourceManager","_refCount","onDeviceConnectedObservable","observer","_i","devices","_b","device","_this","notifyObserver","onDeviceDisconnectedObservable","registerManager","_onDisposeObserver","onDisposeObservable","add","dispose","DeviceSourceManager","deviceType","deviceSlot","undefined","filter","source","clear","unregisterManager","remove","deviceSource","_updateFirstDevices","notifyObservers","_a","eventData","onInputChangedObservable","type","Keyboard","Mouse","Touch","DualSense","DualShock","Xbox","Switch","Generic","i"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/DeviceInput/InputDevices/deviceSourceManager.ts"],"sourcesContent":["import type { Engine } from \"../../Engines/engine\";\r\nimport { DeviceType } from \"./deviceEnums\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport type { DeviceSource } from \"./deviceSource\";\r\nimport type { IObservableManager, DeviceSourceType } from \"./internalDeviceSourceManager\";\r\nimport { InternalDeviceSourceManager } from \"./internalDeviceSourceManager\";\r\nimport type { IDisposable } from \"../../scene\";\r\nimport type { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport type { IKeyboardEvent, IPointerEvent, IUIEvent, IWheelEvent } from \"../../Events/deviceInputEvents\";\r\n\r\n/**\r\n * Class to keep track of devices\r\n */\r\nexport class DeviceSourceManager implements IDisposable, IObservableManager {\r\n    // Public Members\r\n    /**\r\n     * Observable to be triggered when after a device is connected, any new observers added will be triggered against already connected devices\r\n     */\r\n    public readonly onDeviceConnectedObservable: Observable<DeviceSourceType>;\r\n\r\n    /**\r\n     * Observable to be triggered when after a device is disconnected\r\n     */\r\n    public readonly onDeviceDisconnectedObservable: Observable<DeviceSourceType>;\r\n\r\n    // Private Members\r\n    private _engine: Engine;\r\n    private _onDisposeObserver: Nullable<Observer<ThinEngine>>;\r\n    private readonly _devices: Array<Array<DeviceSource<DeviceType>>>;\r\n    private readonly _firstDevice: Array<number>;\r\n\r\n    // Public Functions\r\n    /**\r\n     * Gets a DeviceSource, given a type and slot\r\n     * @param deviceType - Type of Device\r\n     * @param deviceSlot - Slot or ID of device\r\n     * @returns DeviceSource\r\n     */\r\n    public getDeviceSource<T extends DeviceType>(deviceType: T, deviceSlot?: number): Nullable<DeviceSource<T>> {\r\n        if (deviceSlot === undefined) {\r\n            if (this._firstDevice[deviceType] === undefined) {\r\n                return null;\r\n            }\r\n\r\n            deviceSlot = this._firstDevice[deviceType];\r\n        }\r\n\r\n        if (!this._devices[deviceType] || this._devices[deviceType][deviceSlot] === undefined) {\r\n            return null;\r\n        }\r\n\r\n        return this._devices[deviceType][deviceSlot] as DeviceSource<T>;\r\n    }\r\n    /**\r\n     * Gets an array of DeviceSource objects for a given device type\r\n     * @param deviceType - Type of Device\r\n     * @returns All available DeviceSources of a given type\r\n     */\r\n    public getDeviceSources<T extends DeviceType>(deviceType: T): ReadonlyArray<DeviceSource<T>> {\r\n        return this._devices[deviceType].filter((source) => {\r\n            return !!source;\r\n        }) as Array<DeviceSource<T>>;\r\n    }\r\n\r\n    /**\r\n     * Default constructor\r\n     * @param engine - Used to get canvas (if applicable)\r\n     */\r\n    constructor(engine: Engine) {\r\n        const numberOfDeviceTypes = Object.keys(DeviceType).length / 2;\r\n        this._devices = new Array(numberOfDeviceTypes);\r\n        this._firstDevice = new Array(numberOfDeviceTypes);\r\n        this._engine = engine;\r\n\r\n        if (!this._engine._deviceSourceManager) {\r\n            this._engine._deviceSourceManager = new InternalDeviceSourceManager(engine);\r\n        }\r\n        this._engine._deviceSourceManager._refCount++;\r\n\r\n        // Observables\r\n        this.onDeviceConnectedObservable = new Observable((observer) => {\r\n            for (const devices of this._devices) {\r\n                if (devices) {\r\n                    for (const device of devices) {\r\n                        if (device) {\r\n                            this.onDeviceConnectedObservable.notifyObserver(observer, device as DeviceSourceType);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        this.onDeviceDisconnectedObservable = new Observable();\r\n\r\n        this._engine._deviceSourceManager.registerManager(this);\r\n\r\n        this._onDisposeObserver = engine.onDisposeObservable.add(() => {\r\n            this.dispose();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispose of DeviceSourceManager\r\n     */\r\n    public dispose(): void {\r\n        // Null out observable refs\r\n        this.onDeviceConnectedObservable.clear();\r\n        this.onDeviceDisconnectedObservable.clear();\r\n\r\n        if (this._engine._deviceSourceManager) {\r\n            this._engine._deviceSourceManager.unregisterManager(this);\r\n            if (--this._engine._deviceSourceManager._refCount < 1) {\r\n                this._engine._deviceSourceManager.dispose();\r\n                delete this._engine._deviceSourceManager;\r\n            }\r\n        }\r\n        this._engine.onDisposeObservable.remove(this._onDisposeObserver);\r\n    }\r\n\r\n    // Hidden Functions\r\n    /**\r\n     * @param deviceSource - Source to add\r\n     * @hidden\r\n     */\r\n    public _addDevice(deviceSource: DeviceSourceType): void {\r\n        if (!this._devices[deviceSource.deviceType]) {\r\n            this._devices[deviceSource.deviceType] = new Array();\r\n        }\r\n\r\n        if (!this._devices[deviceSource.deviceType][deviceSource.deviceSlot]) {\r\n            this._devices[deviceSource.deviceType][deviceSource.deviceSlot] = deviceSource;\r\n            this._updateFirstDevices(deviceSource.deviceType);\r\n        }\r\n\r\n        this.onDeviceConnectedObservable.notifyObservers(deviceSource);\r\n    }\r\n\r\n    /**\r\n     * @param deviceType - DeviceType\r\n     * @param deviceSlot - DeviceSlot\r\n     * @hidden\r\n     */\r\n    public _removeDevice(deviceType: DeviceType, deviceSlot: number): void {\r\n        const deviceSource = this._devices[deviceType]?.[deviceSlot]; // Grab local reference to use before removing from devices\r\n        this.onDeviceDisconnectedObservable.notifyObservers(deviceSource as DeviceSourceType);\r\n        if (this._devices[deviceType]?.[deviceSlot]) {\r\n            delete this._devices[deviceType][deviceSlot];\r\n        }\r\n        // Even if we don't delete a device, we should still check for the first device as things may have gotten out of sync.\r\n        this._updateFirstDevices(deviceType);\r\n    }\r\n\r\n    /**\r\n     * @param deviceType - DeviceType\r\n     * @param deviceSlot - DeviceSlot\r\n     * @param eventData - Event\r\n     * @hidden\r\n     */\r\n    public _onInputChanged<T extends DeviceType>(deviceType: T, deviceSlot: number, eventData: IUIEvent): void {\r\n        this._devices[deviceType]?.[deviceSlot]?.onInputChangedObservable.notifyObservers(eventData as IKeyboardEvent | IWheelEvent | IPointerEvent);\r\n    }\r\n\r\n    // Private Functions\r\n    private _updateFirstDevices(type: DeviceType): void {\r\n        switch (type) {\r\n            case DeviceType.Keyboard:\r\n            case DeviceType.Mouse:\r\n                this._firstDevice[type] = 0;\r\n                break;\r\n            case DeviceType.Touch:\r\n            case DeviceType.DualSense:\r\n            case DeviceType.DualShock:\r\n            case DeviceType.Xbox:\r\n            case DeviceType.Switch:\r\n            case DeviceType.Generic: {\r\n                delete this._firstDevice[type];\r\n                // eslint-disable-next-line no-case-declarations\r\n                const devices = this._devices[type];\r\n                if (devices) {\r\n                    for (let i = 0; i < devices.length; i++) {\r\n                        if (devices[i]) {\r\n                            this._firstDevice[type] = i;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}