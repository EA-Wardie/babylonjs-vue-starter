{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport { StorageBuffer } from \"../Buffers/storageBuffer.js\";\nimport { ComputeShader } from \"../Compute/computeShader.js\";\nimport { UniformBuffer } from \"../Materials/uniformBuffer.js\";\nimport { UniformBufferEffectCommonAccessor } from \"../Materials/uniformBufferEffectCommonAccessor.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport \"../ShadersWGSL/gpuUpdateParticles.compute.js\";\n/** @hidden */\n\nvar ComputeShaderParticleSystem =\n/** @class */\nfunction () {\n  function ComputeShaderParticleSystem(parent, engine) {\n    this._bufferComputeShader = [];\n    this._renderVertexBuffers = [];\n    this.alignDataInBuffer = true;\n    this._parent = parent;\n    this._engine = engine;\n  }\n\n  ComputeShaderParticleSystem.prototype.isUpdateBufferCreated = function () {\n    return !!this._updateComputeShader;\n  };\n\n  ComputeShaderParticleSystem.prototype.isUpdateBufferReady = function () {\n    var _a, _b;\n\n    return (_b = (_a = this._updateComputeShader) === null || _a === void 0 ? void 0 : _a.isReady()) !== null && _b !== void 0 ? _b : false;\n  };\n\n  ComputeShaderParticleSystem.prototype.createUpdateBuffer = function (defines) {\n    var _a;\n\n    var bindingsMapping = {\n      params: {\n        group: 0,\n        binding: 0\n      },\n      particlesIn: {\n        group: 0,\n        binding: 1\n      },\n      particlesOut: {\n        group: 0,\n        binding: 2\n      },\n      randomTexture: {\n        group: 0,\n        binding: 3\n      },\n      randomTexture2: {\n        group: 0,\n        binding: 4\n      }\n    };\n\n    if (this._parent._sizeGradientsTexture) {\n      bindingsMapping[\"sizeGradientTexture\"] = {\n        group: 1,\n        binding: 1\n      };\n    }\n\n    if (this._parent._angularSpeedGradientsTexture) {\n      bindingsMapping[\"angularSpeedGradientTexture\"] = {\n        group: 1,\n        binding: 3\n      };\n    }\n\n    if (this._parent._velocityGradientsTexture) {\n      bindingsMapping[\"velocityGradientTexture\"] = {\n        group: 1,\n        binding: 5\n      };\n    }\n\n    if (this._parent._limitVelocityGradientsTexture) {\n      bindingsMapping[\"limitVelocityGradientTexture\"] = {\n        group: 1,\n        binding: 7\n      };\n    }\n\n    if (this._parent._dragGradientsTexture) {\n      bindingsMapping[\"dragGradientTexture\"] = {\n        group: 1,\n        binding: 9\n      };\n    }\n\n    if (this._parent.noiseTexture) {\n      bindingsMapping[\"noiseTexture\"] = {\n        group: 1,\n        binding: 11\n      };\n    }\n\n    this._updateComputeShader = new ComputeShader(\"updateParticles\", this._engine, \"gpuUpdateParticles\", {\n      bindingsMapping: bindingsMapping,\n      defines: defines.split(\"\\n\")\n    });\n    (_a = this._simParamsComputeShader) === null || _a === void 0 ? void 0 : _a.dispose();\n    this._simParamsComputeShader = new UniformBuffer(this._engine);\n\n    this._simParamsComputeShader.addUniform(\"currentCount\", 1);\n\n    this._simParamsComputeShader.addUniform(\"timeDelta\", 1);\n\n    this._simParamsComputeShader.addUniform(\"stopFactor\", 1);\n\n    this._simParamsComputeShader.addUniform(\"randomTextureSize\", 1);\n\n    this._simParamsComputeShader.addUniform(\"lifeTime\", 2);\n\n    this._simParamsComputeShader.addUniform(\"emitPower\", 2);\n\n    if (!this._parent._colorGradientsTexture) {\n      this._simParamsComputeShader.addUniform(\"color1\", 4);\n\n      this._simParamsComputeShader.addUniform(\"color2\", 4);\n    }\n\n    this._simParamsComputeShader.addUniform(\"sizeRange\", 2);\n\n    this._simParamsComputeShader.addUniform(\"scaleRange\", 4);\n\n    this._simParamsComputeShader.addUniform(\"angleRange\", 4);\n\n    this._simParamsComputeShader.addUniform(\"gravity\", 3);\n\n    if (this._parent._limitVelocityGradientsTexture) {\n      this._simParamsComputeShader.addUniform(\"limitVelocityDamping\", 1);\n    }\n\n    if (this._parent.isAnimationSheetEnabled) {\n      this._simParamsComputeShader.addUniform(\"cellInfos\", 4);\n    }\n\n    if (this._parent.noiseTexture) {\n      this._simParamsComputeShader.addUniform(\"noiseStrength\", 3);\n    }\n\n    if (!this._parent.isLocal) {\n      this._simParamsComputeShader.addUniform(\"emitterWM\", 16);\n    }\n\n    if (this._parent.particleEmitterType) {\n      this._parent.particleEmitterType.buildUniformLayout(this._simParamsComputeShader);\n    }\n\n    this._updateComputeShader.setUniformBuffer(\"params\", this._simParamsComputeShader);\n\n    return new UniformBufferEffectCommonAccessor(this._simParamsComputeShader);\n  };\n\n  ComputeShaderParticleSystem.prototype.createVertexBuffers = function (updateBuffer, renderVertexBuffers) {\n    this._renderVertexBuffers.push(renderVertexBuffers);\n  };\n\n  ComputeShaderParticleSystem.prototype.createParticleBuffer = function (data) {\n    var buffer = new StorageBuffer(this._engine, data.length * 4, 3 | 8);\n    buffer.update(data);\n\n    this._bufferComputeShader.push(buffer);\n\n    return buffer.getBuffer();\n  };\n\n  ComputeShaderParticleSystem.prototype.bindDrawBuffers = function (index, effect) {\n    this._engine.bindBuffers(this._renderVertexBuffers[index], null, effect);\n  };\n\n  ComputeShaderParticleSystem.prototype.preUpdateParticleBuffer = function () {};\n\n  ComputeShaderParticleSystem.prototype.updateParticleBuffer = function (index, targetBuffer, currentActiveCount) {\n    this._simParamsComputeShader.update();\n\n    this._updateComputeShader.setTexture(\"randomTexture\", this._parent._randomTexture, false);\n\n    this._updateComputeShader.setTexture(\"randomTexture2\", this._parent._randomTexture2, false);\n\n    if (this._parent._sizeGradientsTexture) {\n      this._updateComputeShader.setTexture(\"sizeGradientTexture\", this._parent._sizeGradientsTexture);\n    }\n\n    if (this._parent._angularSpeedGradientsTexture) {\n      this._updateComputeShader.setTexture(\"angularSpeedGradientTexture\", this._parent._angularSpeedGradientsTexture);\n    }\n\n    if (this._parent._velocityGradientsTexture) {\n      this._updateComputeShader.setTexture(\"velocityGradientTexture\", this._parent._velocityGradientsTexture);\n    }\n\n    if (this._parent._limitVelocityGradientsTexture) {\n      this._updateComputeShader.setTexture(\"limitVelocityGradientTexture\", this._parent._limitVelocityGradientsTexture);\n    }\n\n    if (this._parent._dragGradientsTexture) {\n      this._updateComputeShader.setTexture(\"dragGradientTexture\", this._parent._dragGradientsTexture);\n    }\n\n    if (this._parent.noiseTexture) {\n      this._updateComputeShader.setTexture(\"noiseTexture\", this._parent.noiseTexture);\n    }\n\n    this._updateComputeShader.setStorageBuffer(\"particlesIn\", this._bufferComputeShader[index]);\n\n    this._updateComputeShader.setStorageBuffer(\"particlesOut\", this._bufferComputeShader[index ^ 1]);\n\n    this._updateComputeShader.dispatch(Math.ceil(currentActiveCount / 64));\n  };\n\n  ComputeShaderParticleSystem.prototype.releaseBuffers = function () {\n    var _a;\n\n    for (var i = 0; i < this._bufferComputeShader.length; ++i) {\n      this._bufferComputeShader[i].dispose();\n    }\n\n    this._bufferComputeShader = [];\n    (_a = this._simParamsComputeShader) === null || _a === void 0 ? void 0 : _a.dispose();\n    this._simParamsComputeShader = null;\n    this._updateComputeShader = null;\n  };\n\n  ComputeShaderParticleSystem.prototype.releaseVertexBuffers = function () {\n    this._renderVertexBuffers = [];\n  };\n\n  return ComputeShaderParticleSystem;\n}();\n\nexport { ComputeShaderParticleSystem };\nRegisterClass(\"BABYLON.ComputeShaderParticleSystem\", ComputeShaderParticleSystem);","map":{"version":3,"mappings":"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","names":["StorageBuffer","ComputeShader","UniformBuffer","UniformBufferEffectCommonAccessor","RegisterClass","parent","engine","_parent","_engine","ComputeShaderParticleSystem","_updateComputeShader","_a","isReady","_b","defines","bindingsMapping","params","group","binding","particlesIn","particlesOut","randomTexture","randomTexture2","_sizeGradientsTexture","_angularSpeedGradientsTexture","_velocityGradientsTexture","_limitVelocityGradientsTexture","_dragGradientsTexture","noiseTexture","split","_simParamsComputeShader","dispose","addUniform","_colorGradientsTexture","isAnimationSheetEnabled","isLocal","particleEmitterType","buildUniformLayout","setUniformBuffer","updateBuffer","renderVertexBuffers","_renderVertexBuffers","push","data","buffer","length","update","_bufferComputeShader","getBuffer","index","effect","bindBuffers","targetBuffer","currentActiveCount","setTexture","_randomTexture","_randomTexture2","setStorageBuffer","dispatch","Math","ceil","i"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Particles/computeShaderParticleSystem.ts"],"sourcesContent":["import type { ThinEngine } from \"../Engines/thinEngine\";\r\nimport { StorageBuffer } from \"../Buffers/storageBuffer\";\r\nimport { ComputeShader } from \"../Compute/computeShader\";\r\nimport { UniformBuffer } from \"../Materials/uniformBuffer\";\r\nimport type { IGPUParticleSystemPlatform } from \"./IGPUParticleSystemPlatform\";\r\nimport type { Buffer, VertexBuffer } from \"../Buffers/buffer\";\r\nimport type { GPUParticleSystem } from \"./gpuParticleSystem\";\r\n\r\nimport type { DataArray } from \"../types\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { UniformBufferEffectCommonAccessor } from \"../Materials/uniformBufferEffectCommonAccessor\";\r\nimport type { ComputeBindingMapping } from \"../Engines/Extensions/engine.computeShader\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\nimport \"../ShadersWGSL/gpuUpdateParticles.compute\";\r\n\r\n/** @hidden */\r\nexport class ComputeShaderParticleSystem implements IGPUParticleSystemPlatform {\r\n    private _parent: GPUParticleSystem;\r\n    private _engine: ThinEngine;\r\n    private _updateComputeShader: ComputeShader;\r\n    private _simParamsComputeShader: UniformBuffer;\r\n    private _bufferComputeShader: StorageBuffer[] = [];\r\n    private _renderVertexBuffers: Array<{ [key: string]: VertexBuffer }> = [];\r\n\r\n    public readonly alignDataInBuffer = true;\r\n\r\n    constructor(parent: GPUParticleSystem, engine: ThinEngine) {\r\n        this._parent = parent;\r\n        this._engine = engine;\r\n    }\r\n\r\n    public isUpdateBufferCreated(): boolean {\r\n        return !!this._updateComputeShader;\r\n    }\r\n\r\n    public isUpdateBufferReady(): boolean {\r\n        return this._updateComputeShader?.isReady() ?? false;\r\n    }\r\n\r\n    public createUpdateBuffer(defines: string): UniformBufferEffectCommonAccessor {\r\n        const bindingsMapping: ComputeBindingMapping = {\r\n            params: { group: 0, binding: 0 },\r\n            particlesIn: { group: 0, binding: 1 },\r\n            particlesOut: { group: 0, binding: 2 },\r\n            randomTexture: { group: 0, binding: 3 },\r\n            randomTexture2: { group: 0, binding: 4 },\r\n        };\r\n        if (this._parent._sizeGradientsTexture) {\r\n            bindingsMapping[\"sizeGradientTexture\"] = { group: 1, binding: 1 };\r\n        }\r\n        if (this._parent._angularSpeedGradientsTexture) {\r\n            bindingsMapping[\"angularSpeedGradientTexture\"] = { group: 1, binding: 3 };\r\n        }\r\n        if (this._parent._velocityGradientsTexture) {\r\n            bindingsMapping[\"velocityGradientTexture\"] = { group: 1, binding: 5 };\r\n        }\r\n        if (this._parent._limitVelocityGradientsTexture) {\r\n            bindingsMapping[\"limitVelocityGradientTexture\"] = { group: 1, binding: 7 };\r\n        }\r\n        if (this._parent._dragGradientsTexture) {\r\n            bindingsMapping[\"dragGradientTexture\"] = { group: 1, binding: 9 };\r\n        }\r\n        if (this._parent.noiseTexture) {\r\n            bindingsMapping[\"noiseTexture\"] = { group: 1, binding: 11 };\r\n        }\r\n\r\n        this._updateComputeShader = new ComputeShader(\"updateParticles\", this._engine, \"gpuUpdateParticles\", { bindingsMapping, defines: defines.split(\"\\n\") });\r\n\r\n        this._simParamsComputeShader?.dispose();\r\n        this._simParamsComputeShader = new UniformBuffer(this._engine);\r\n\r\n        this._simParamsComputeShader.addUniform(\"currentCount\", 1);\r\n        this._simParamsComputeShader.addUniform(\"timeDelta\", 1);\r\n        this._simParamsComputeShader.addUniform(\"stopFactor\", 1);\r\n        this._simParamsComputeShader.addUniform(\"randomTextureSize\", 1);\r\n        this._simParamsComputeShader.addUniform(\"lifeTime\", 2);\r\n        this._simParamsComputeShader.addUniform(\"emitPower\", 2);\r\n        if (!this._parent._colorGradientsTexture) {\r\n            this._simParamsComputeShader.addUniform(\"color1\", 4);\r\n            this._simParamsComputeShader.addUniform(\"color2\", 4);\r\n        }\r\n        this._simParamsComputeShader.addUniform(\"sizeRange\", 2);\r\n        this._simParamsComputeShader.addUniform(\"scaleRange\", 4);\r\n        this._simParamsComputeShader.addUniform(\"angleRange\", 4);\r\n        this._simParamsComputeShader.addUniform(\"gravity\", 3);\r\n        if (this._parent._limitVelocityGradientsTexture) {\r\n            this._simParamsComputeShader.addUniform(\"limitVelocityDamping\", 1);\r\n        }\r\n        if (this._parent.isAnimationSheetEnabled) {\r\n            this._simParamsComputeShader.addUniform(\"cellInfos\", 4);\r\n        }\r\n        if (this._parent.noiseTexture) {\r\n            this._simParamsComputeShader.addUniform(\"noiseStrength\", 3);\r\n        }\r\n        if (!this._parent.isLocal) {\r\n            this._simParamsComputeShader.addUniform(\"emitterWM\", 16);\r\n        }\r\n        if (this._parent.particleEmitterType) {\r\n            this._parent.particleEmitterType.buildUniformLayout(this._simParamsComputeShader);\r\n        }\r\n\r\n        this._updateComputeShader.setUniformBuffer(\"params\", this._simParamsComputeShader);\r\n\r\n        return new UniformBufferEffectCommonAccessor(this._simParamsComputeShader);\r\n    }\r\n\r\n    public createVertexBuffers(updateBuffer: Buffer, renderVertexBuffers: { [key: string]: VertexBuffer }): void {\r\n        this._renderVertexBuffers.push(renderVertexBuffers);\r\n    }\r\n\r\n    public createParticleBuffer(data: number[]): DataArray | DataBuffer {\r\n        const buffer = new StorageBuffer(this._engine, data.length * 4, Constants.BUFFER_CREATIONFLAG_READWRITE | Constants.BUFFER_CREATIONFLAG_VERTEX);\r\n\r\n        buffer.update(data);\r\n        this._bufferComputeShader.push(buffer);\r\n\r\n        return buffer.getBuffer();\r\n    }\r\n\r\n    public bindDrawBuffers(index: number, effect: Effect): void {\r\n        this._engine.bindBuffers(this._renderVertexBuffers[index], null, effect);\r\n    }\r\n\r\n    public preUpdateParticleBuffer(): void {}\r\n\r\n    public updateParticleBuffer(index: number, targetBuffer: Buffer, currentActiveCount: number): void {\r\n        this._simParamsComputeShader.update();\r\n\r\n        this._updateComputeShader.setTexture(\"randomTexture\", this._parent._randomTexture, false);\r\n        this._updateComputeShader.setTexture(\"randomTexture2\", this._parent._randomTexture2, false);\r\n        if (this._parent._sizeGradientsTexture) {\r\n            this._updateComputeShader.setTexture(\"sizeGradientTexture\", this._parent._sizeGradientsTexture);\r\n        }\r\n\r\n        if (this._parent._angularSpeedGradientsTexture) {\r\n            this._updateComputeShader.setTexture(\"angularSpeedGradientTexture\", this._parent._angularSpeedGradientsTexture);\r\n        }\r\n\r\n        if (this._parent._velocityGradientsTexture) {\r\n            this._updateComputeShader.setTexture(\"velocityGradientTexture\", this._parent._velocityGradientsTexture);\r\n        }\r\n\r\n        if (this._parent._limitVelocityGradientsTexture) {\r\n            this._updateComputeShader.setTexture(\"limitVelocityGradientTexture\", this._parent._limitVelocityGradientsTexture);\r\n        }\r\n\r\n        if (this._parent._dragGradientsTexture) {\r\n            this._updateComputeShader.setTexture(\"dragGradientTexture\", this._parent._dragGradientsTexture);\r\n        }\r\n\r\n        if (this._parent.noiseTexture) {\r\n            this._updateComputeShader.setTexture(\"noiseTexture\", this._parent.noiseTexture);\r\n        }\r\n\r\n        this._updateComputeShader.setStorageBuffer(\"particlesIn\", this._bufferComputeShader[index]);\r\n        this._updateComputeShader.setStorageBuffer(\"particlesOut\", this._bufferComputeShader[index ^ 1]);\r\n\r\n        this._updateComputeShader.dispatch(Math.ceil(currentActiveCount / 64));\r\n    }\r\n\r\n    public releaseBuffers(): void {\r\n        for (let i = 0; i < this._bufferComputeShader.length; ++i) {\r\n            this._bufferComputeShader[i].dispose();\r\n        }\r\n\r\n        this._bufferComputeShader = [];\r\n\r\n        this._simParamsComputeShader?.dispose();\r\n        (<any>this._simParamsComputeShader) = null;\r\n\r\n        (<any>this._updateComputeShader) = null;\r\n    }\r\n\r\n    public releaseVertexBuffers(): void {\r\n        this._renderVertexBuffers = [];\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ComputeShaderParticleSystem\", ComputeShaderParticleSystem);\r\n"]},"metadata":{},"sourceType":"module"}