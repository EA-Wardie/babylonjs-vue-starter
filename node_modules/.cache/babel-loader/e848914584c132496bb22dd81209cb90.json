{"ast":null,"code":"import { Scene, Engine, FreeCamera, Vector3, HemisphericLight, MeshBuilder, StandardMaterial, Texture, SolidParticleSystem, Scalar } from \"@babylonjs/core\";\nimport '@babylonjs/loaders';\nexport default {\n  data: function data() {\n    return {\n      engine: null,\n      scene: null,\n      camera: null,\n      light: null,\n      ground: null\n    };\n  },\n  methods: {\n    initGame: function initGame(canvas) {\n      //Setup game environment\n      this.createEngine(canvas);\n      this.createScene();\n      this.createLight();\n      this.createCamera(); // //Create game meshes\n      // this.createGround();\n\n      this.generateVoxelTerrain(); //Start game render\n\n      this.renderGame();\n    },\n    //Environment\n    createEngine: function createEngine(canvas) {\n      this.engine = new Engine(canvas, true);\n    },\n    createScene: function createScene() {\n      this.scene = new Scene(this.engine);\n    },\n    createLight: function createLight() {\n      this.light = new HemisphericLight('light', new Vector3(0, 1, 0), this.scene);\n      this.light.intensity = 0.75;\n    },\n    createCamera: function createCamera() {\n      this.camera = new FreeCamera('camera', new Vector3(0, 7, -12), this.scene);\n      this.camera.speed = 0.25;\n      this.camera.rotation = new Vector3(0.5, 0, 0);\n      this.camera.attachControl();\n    },\n    //Meshes\n    createGround: function createGround() {\n      this.ground = MeshBuilder.CreateGround('ground', {\n        width: 200,\n        height: 100\n      }, this.scene);\n      this.setGroundTexture();\n    },\n    generateVoxelTerrain: function generateVoxelTerrain() {\n      // const voxelSpacing = 0.5;\n      // const voxel = MeshBuilder.CreateBox('voxel', {size: voxelSpacing}, this.scene);\n      // const voxelClone = voxel.clone();\n      // voxelClone.position = new Vector3(voxelSpacing, 0, 0);\n      // const voxelArea = this.createVoxelMap(5, 5, voxel);\n      // console.log(voxelArea);\n      var sps = new SolidParticleSystem('sps', this.scene),\n          voxelSpacing = 0.5,\n          voxel = MeshBuilder.CreateBox('voxel', {\n        size: voxelSpacing\n      }, this.scene);\n      sps.addShape(voxel, 30);\n      voxel.dispose();\n      sps.buildMesh();\n\n      sps.initParticles = function () {\n        for (var p = 0; p < sps.nbParticles; p++) {\n          var particle = sps.particles[p];\n          particle.position.x = Scalar.RandomRange(-5, 5);\n          particle.position.y = Scalar.RandomRange(-5, 5);\n          particle.position.z = Scalar.RandomRange(-5, 5); // const scale = Scalar.RandomRange(0.5, 1.5);\n          // particle.scale.x = scale;\n          // particle.scale.y = scale;\n          // particle.scale.z = scale;\n          // particle.rotation.x = Scalar.RandomRange(0, Math.PI);\n          // particle.rotation.y = Scalar.RandomRange(0, Math.PI);\n          // particle.rotation.z = Scalar.RandomRange(0, Math.PI);\n        }\n      };\n\n      sps.initParticles();\n      sps.setParticles();\n    },\n    //Render Main Game\n    renderGame: function renderGame() {\n      var _this = this;\n\n      this.engine.runRenderLoop(function () {\n        _this.scene.render();\n      });\n    },\n    //Helpers\n    setGroundTexture: function setGroundTexture() {\n      var groundMaterial = new StandardMaterial('ground_texture', this.scene);\n      groundMaterial.diffuseTexture = new Texture('./assets/textures/mars_1k_color.jpg');\n      this.ground.material = groundMaterial;\n    },\n    createVoxelMap: function createVoxelMap(height, width, voxel) {\n      var voxelArea = [];\n\n      for (var r = 0; r < height; r++) {\n        voxelArea[r] = [];\n\n        for (var c = 0; c < width; c++) {\n          // const voxelHeight = (Math.random() * 3 | 0) + 2;\n          voxelArea[r][c] = voxel.clone();\n          voxelArea[r][c] = voxel.freezeWorldMatrix();\n          voxelArea[r][c].position = new Vector3(r / 2, 0, c / 2);\n        }\n      }\n\n      return voxelArea;\n    }\n  }\n};","map":{"version":3,"sources":["/home/ea/Development/Babylon/red/src/framework/GameInitializer.js"],"names":["Scene","Engine","FreeCamera","Vector3","HemisphericLight","MeshBuilder","StandardMaterial","Texture","SolidParticleSystem","Scalar","data","engine","scene","camera","light","ground","methods","initGame","canvas","createEngine","createScene","createLight","createCamera","generateVoxelTerrain","renderGame","intensity","speed","rotation","attachControl","createGround","CreateGround","width","height","setGroundTexture","sps","voxelSpacing","voxel","CreateBox","size","addShape","dispose","buildMesh","initParticles","p","nbParticles","particle","particles","position","x","RandomRange","y","z","setParticles","runRenderLoop","render","groundMaterial","diffuseTexture","material","createVoxelMap","voxelArea","r","c","clone","freezeWorldMatrix"],"mappings":"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","sourcesContent":["import {\n    Scene,\n    Engine,\n    FreeCamera,\n    Vector3,\n    HemisphericLight,\n    MeshBuilder,\n    StandardMaterial,\n    Texture,\n    SolidParticleSystem,\n    Scalar,\n} from \"@babylonjs/core\";\nimport '@babylonjs/loaders';\n\nexport default {\n    data() {\n        return {\n            engine: null,\n            scene: null,\n            camera: null,\n            light: null,\n            ground: null,\n        };\n    },\n    methods: {\n        initGame(canvas) {\n            //Setup game environment\n            this.createEngine(canvas);\n            this.createScene();\n            this.createLight();\n            this.createCamera();\n\n            // //Create game meshes\n            // this.createGround();\n            this.generateVoxelTerrain();\n\n            //Start game render\n            this.renderGame();\n        },\n\n        //Environment\n        createEngine(canvas) {\n            this.engine = new Engine(canvas, true);\n        },\n        createScene() {\n            this.scene = new Scene(this.engine);\n        },\n        createLight() {\n            this.light = new HemisphericLight('light', new Vector3(0, 1, 0), this.scene);\n            this.light.intensity = 0.75;\n        },\n        createCamera() {\n            this.camera = new FreeCamera('camera', new Vector3(0, 7, -12), this.scene);\n            this.camera.speed = 0.25;\n            this.camera.rotation = new Vector3(0.5, 0, 0);\n            this.camera.attachControl();\n        },\n\n        //Meshes\n        createGround() {\n            this.ground = MeshBuilder.CreateGround('ground', {width: 200, height: 100}, this.scene);\n\n            this.setGroundTexture();\n        },\n        generateVoxelTerrain() {\n            // const voxelSpacing = 0.5;\n            // const voxel = MeshBuilder.CreateBox('voxel', {size: voxelSpacing}, this.scene);\n            // const voxelClone = voxel.clone();\n            // voxelClone.position = new Vector3(voxelSpacing, 0, 0);\n            // const voxelArea = this.createVoxelMap(5, 5, voxel);\n            // console.log(voxelArea);\n            const sps = new SolidParticleSystem('sps', this.scene),\n                voxelSpacing = 0.5,\n                voxel = MeshBuilder.CreateBox('voxel', {size: voxelSpacing}, this.scene);\n\n            sps.addShape(voxel, 30);\n            voxel.dispose();\n            sps.buildMesh();\n            sps.initParticles = () => {\n                for (let p = 0; p < sps.nbParticles; p++) {\n                    const particle = sps.particles[p];\n                    particle.position.x = Scalar.RandomRange(-5, 5);\n                    particle.position.y = Scalar.RandomRange(-5, 5);\n                    particle.position.z = Scalar.RandomRange(-5, 5);\n\n                    // const scale = Scalar.RandomRange(0.5, 1.5);\n                    // particle.scale.x = scale;\n                    // particle.scale.y = scale;\n                    // particle.scale.z = scale;\n\n                    // particle.rotation.x = Scalar.RandomRange(0, Math.PI);\n                    // particle.rotation.y = Scalar.RandomRange(0, Math.PI);\n                    // particle.rotation.z = Scalar.RandomRange(0, Math.PI);\n                }\n            };\n\n            sps.initParticles();\n            sps.setParticles();\n        },\n        //Render Main Game\n        renderGame() {\n            this.engine.runRenderLoop(() => {\n                this.scene.render();\n            });\n        },\n\n        //Helpers\n        setGroundTexture() {\n            const groundMaterial = new StandardMaterial('ground_texture', this.scene);\n            groundMaterial.diffuseTexture = new Texture('./assets/textures/mars_1k_color.jpg');\n\n            this.ground.material = groundMaterial;\n        },\n        createVoxelMap(height, width, voxel) {\n            const voxelArea = [];\n            for (let r = 0; r < height; r++) {\n                voxelArea[r] = [];\n                for (let c = 0; c < width; c++) {\n                    // const voxelHeight = (Math.random() * 3 | 0) + 2;\n                    voxelArea[r][c] = voxel.clone();\n                    voxelArea[r][c] = voxel.freezeWorldMatrix();\n                    voxelArea[r][c].position = new Vector3(r / 2, 0, c / 2);\n                }\n            }\n\n            return voxelArea;\n        },\n    },\n}"]},"metadata":{},"sourceType":"module"}