{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { Scene } from \"../scene.js\";\nimport { DepthRenderer } from \"./depthRenderer.js\";\nimport { SceneComponentConstants } from \"../sceneComponent.js\";\n\nScene.prototype.enableDepthRenderer = function (camera, storeNonLinearDepth, force32bitsFloat) {\n  if (storeNonLinearDepth === void 0) {\n    storeNonLinearDepth = false;\n  }\n\n  if (force32bitsFloat === void 0) {\n    force32bitsFloat = false;\n  }\n\n  camera = camera || this.activeCamera;\n\n  if (!camera) {\n    throw \"No camera available to enable depth renderer\";\n  }\n\n  if (!this._depthRenderer) {\n    this._depthRenderer = {};\n  }\n\n  if (!this._depthRenderer[camera.id]) {\n    var supportFullfloat = !!this.getEngine().getCaps().textureFloatRender;\n    var textureType = 0;\n\n    if (this.getEngine().getCaps().textureHalfFloatRender && (!force32bitsFloat || !supportFullfloat)) {\n      textureType = 2;\n    } else if (supportFullfloat) {\n      textureType = 1;\n    } else {\n      textureType = 0;\n    }\n\n    this._depthRenderer[camera.id] = new DepthRenderer(this, textureType, camera, storeNonLinearDepth);\n  }\n\n  return this._depthRenderer[camera.id];\n};\n\nScene.prototype.disableDepthRenderer = function (camera) {\n  camera = camera || this.activeCamera;\n\n  if (!camera || !this._depthRenderer || !this._depthRenderer[camera.id]) {\n    return;\n  }\n\n  this._depthRenderer[camera.id].dispose();\n};\n/**\n * Defines the Depth Renderer scene component responsible to manage a depth buffer useful\n * in several rendering techniques.\n */\n\n\nvar DepthRendererSceneComponent =\n/** @class */\nfunction () {\n  /**\n   * Creates a new instance of the component for the given scene\n   * @param scene Defines the scene to register the component in\n   */\n  function DepthRendererSceneComponent(scene) {\n    /**\n     * The component name helpful to identify the component in the list of scene components.\n     */\n    this.name = SceneComponentConstants.NAME_DEPTHRENDERER;\n    this.scene = scene;\n  }\n  /**\n   * Registers the component in a given scene\n   */\n\n\n  DepthRendererSceneComponent.prototype.register = function () {\n    this.scene._gatherRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERRENDERTARGETS_DEPTHRENDERER, this, this._gatherRenderTargets);\n\n    this.scene._gatherActiveCameraRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERACTIVECAMERARENDERTARGETS_DEPTHRENDERER, this, this._gatherActiveCameraRenderTargets);\n  };\n  /**\n   * Rebuilds the elements related to this component in case of\n   * context lost for instance.\n   */\n\n\n  DepthRendererSceneComponent.prototype.rebuild = function () {// Nothing to do for this component\n  };\n  /**\n   * Disposes the component and the associated resources\n   */\n\n\n  DepthRendererSceneComponent.prototype.dispose = function () {\n    for (var key in this.scene._depthRenderer) {\n      this.scene._depthRenderer[key].dispose();\n    }\n  };\n\n  DepthRendererSceneComponent.prototype._gatherRenderTargets = function (renderTargets) {\n    if (this.scene._depthRenderer) {\n      for (var key in this.scene._depthRenderer) {\n        var depthRenderer = this.scene._depthRenderer[key];\n\n        if (depthRenderer.enabled && !depthRenderer.useOnlyInActiveCamera) {\n          renderTargets.push(depthRenderer.getDepthMap());\n        }\n      }\n    }\n  };\n\n  DepthRendererSceneComponent.prototype._gatherActiveCameraRenderTargets = function (renderTargets) {\n    if (this.scene._depthRenderer) {\n      for (var key in this.scene._depthRenderer) {\n        var depthRenderer = this.scene._depthRenderer[key];\n\n        if (depthRenderer.enabled && depthRenderer.useOnlyInActiveCamera && this.scene.activeCamera.id === key) {\n          renderTargets.push(depthRenderer.getDepthMap());\n        }\n      }\n    }\n  };\n\n  return DepthRendererSceneComponent;\n}();\n\nexport { DepthRendererSceneComponent };\n\nDepthRenderer._SceneComponentInitialization = function (scene) {\n  // Register the G Buffer component to the scene.\n  var component = scene._getComponent(SceneComponentConstants.NAME_DEPTHRENDERER);\n\n  if (!component) {\n    component = new DepthRendererSceneComponent(scene);\n\n    scene._addComponent(component);\n  }\n};","map":{"version":3,"mappings":"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","names":["Scene","DepthRenderer","SceneComponentConstants","prototype","enableDepthRenderer","camera","storeNonLinearDepth","force32bitsFloat","activeCamera","_depthRenderer","id","supportFullfloat","getEngine","getCaps","textureFloatRender","textureType","textureHalfFloatRender","disableDepthRenderer","dispose","scene","NAME_DEPTHRENDERER","DepthRendererSceneComponent","_gatherRenderTargetsStage","registerStep","STEP_GATHERRENDERTARGETS_DEPTHRENDERER","_gatherRenderTargets","_gatherActiveCameraRenderTargetsStage","STEP_GATHERACTIVECAMERARENDERTARGETS_DEPTHRENDERER","_gatherActiveCameraRenderTargets","key","renderTargets","depthRenderer","enabled","useOnlyInActiveCamera","push","getDepthMap","_SceneComponentInitialization","component","_getComponent","_addComponent"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Rendering/depthRendererSceneComponent.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport { Scene } from \"../scene\";\r\nimport type { SmartArrayNoDuplicate } from \"../Misc/smartArray\";\r\nimport { DepthRenderer } from \"./depthRenderer\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { ISceneComponent } from \"../sceneComponent\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /** @hidden (Backing field) */\r\n        _depthRenderer: { [id: string]: DepthRenderer };\r\n\r\n        /**\r\n         * Creates a depth renderer a given camera which contains a depth map which can be used for post processing.\r\n         * @param camera The camera to create the depth renderer on (default: scene's active camera)\r\n         * @param storeNonLinearDepth Defines whether the depth is stored linearly like in Babylon Shadows or directly like glFragCoord.z\r\n         * @param force32bitsFloat Forces 32 bits float when supported (else 16 bits float is prioritized over 32 bits float if supported)\r\n         * @returns the created depth renderer\r\n         */\r\n        enableDepthRenderer(camera?: Nullable<Camera>, storeNonLinearDepth?: boolean, force32bitsFloat?: boolean): DepthRenderer;\r\n\r\n        /**\r\n         * Disables a depth renderer for a given camera\r\n         * @param camera The camera to disable the depth renderer on (default: scene's active camera)\r\n         */\r\n        disableDepthRenderer(camera?: Nullable<Camera>): void;\r\n    }\r\n}\r\n\r\nScene.prototype.enableDepthRenderer = function (camera?: Nullable<Camera>, storeNonLinearDepth = false, force32bitsFloat: boolean = false): DepthRenderer {\r\n    camera = camera || this.activeCamera;\r\n    if (!camera) {\r\n        throw \"No camera available to enable depth renderer\";\r\n    }\r\n    if (!this._depthRenderer) {\r\n        this._depthRenderer = {};\r\n    }\r\n    if (!this._depthRenderer[camera.id]) {\r\n        const supportFullfloat = !!this.getEngine().getCaps().textureFloatRender;\r\n        let textureType = 0;\r\n        if (this.getEngine().getCaps().textureHalfFloatRender && (!force32bitsFloat || !supportFullfloat)) {\r\n            textureType = Constants.TEXTURETYPE_HALF_FLOAT;\r\n        } else if (supportFullfloat) {\r\n            textureType = Constants.TEXTURETYPE_FLOAT;\r\n        } else {\r\n            textureType = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n        }\r\n        this._depthRenderer[camera.id] = new DepthRenderer(this, textureType, camera, storeNonLinearDepth);\r\n    }\r\n\r\n    return this._depthRenderer[camera.id];\r\n};\r\n\r\nScene.prototype.disableDepthRenderer = function (camera?: Nullable<Camera>): void {\r\n    camera = camera || this.activeCamera;\r\n    if (!camera || !this._depthRenderer || !this._depthRenderer[camera.id]) {\r\n        return;\r\n    }\r\n\r\n    this._depthRenderer[camera.id].dispose();\r\n};\r\n\r\n/**\r\n * Defines the Depth Renderer scene component responsible to manage a depth buffer useful\r\n * in several rendering techniques.\r\n */\r\nexport class DepthRendererSceneComponent implements ISceneComponent {\r\n    /**\r\n     * The component name helpful to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_DEPTHRENDERER;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._gatherRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERRENDERTARGETS_DEPTHRENDERER, this, this._gatherRenderTargets);\r\n        this.scene._gatherActiveCameraRenderTargetsStage.registerStep(\r\n            SceneComponentConstants.STEP_GATHERACTIVECAMERARENDERTARGETS_DEPTHRENDERER,\r\n            this,\r\n            this._gatherActiveCameraRenderTargets\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        // Nothing to do for this component\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated resources\r\n     */\r\n    public dispose(): void {\r\n        for (const key in this.scene._depthRenderer) {\r\n            this.scene._depthRenderer[key].dispose();\r\n        }\r\n    }\r\n\r\n    private _gatherRenderTargets(renderTargets: SmartArrayNoDuplicate<RenderTargetTexture>): void {\r\n        if (this.scene._depthRenderer) {\r\n            for (const key in this.scene._depthRenderer) {\r\n                const depthRenderer = this.scene._depthRenderer[key];\r\n                if (depthRenderer.enabled && !depthRenderer.useOnlyInActiveCamera) {\r\n                    renderTargets.push(depthRenderer.getDepthMap());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _gatherActiveCameraRenderTargets(renderTargets: SmartArrayNoDuplicate<RenderTargetTexture>): void {\r\n        if (this.scene._depthRenderer) {\r\n            for (const key in this.scene._depthRenderer) {\r\n                const depthRenderer = this.scene._depthRenderer[key];\r\n                if (depthRenderer.enabled && depthRenderer.useOnlyInActiveCamera && this.scene.activeCamera!.id === key) {\r\n                    renderTargets.push(depthRenderer.getDepthMap());\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nDepthRenderer._SceneComponentInitialization = (scene: Scene) => {\r\n    // Register the G Buffer component to the scene.\r\n    let component = scene._getComponent(SceneComponentConstants.NAME_DEPTHRENDERER) as DepthRendererSceneComponent;\r\n    if (!component) {\r\n        component = new DepthRendererSceneComponent(scene);\r\n        scene._addComponent(component);\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}