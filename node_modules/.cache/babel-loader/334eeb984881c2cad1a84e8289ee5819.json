{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { SceneComponentConstants } from \"../../sceneComponent.js\";\nimport { PostProcessRenderPipelineManager } from \"./postProcessRenderPipelineManager.js\";\nimport { Scene } from \"../../scene.js\";\nObject.defineProperty(Scene.prototype, \"postProcessRenderPipelineManager\", {\n  get: function get() {\n    if (!this._postProcessRenderPipelineManager) {\n      // Register the G Buffer component to the scene.\n      var component = this._getComponent(SceneComponentConstants.NAME_POSTPROCESSRENDERPIPELINEMANAGER);\n\n      if (!component) {\n        component = new PostProcessRenderPipelineManagerSceneComponent(this);\n\n        this._addComponent(component);\n      }\n\n      this._postProcessRenderPipelineManager = new PostProcessRenderPipelineManager();\n    }\n\n    return this._postProcessRenderPipelineManager;\n  },\n  enumerable: true,\n  configurable: true\n});\n/**\n * Defines the Render Pipeline scene component responsible to rendering pipelines\n */\n\nvar PostProcessRenderPipelineManagerSceneComponent =\n/** @class */\nfunction () {\n  /**\n   * Creates a new instance of the component for the given scene\n   * @param scene Defines the scene to register the component in\n   */\n  function PostProcessRenderPipelineManagerSceneComponent(scene) {\n    /**\n     * The component name helpful to identify the component in the list of scene components.\n     */\n    this.name = SceneComponentConstants.NAME_POSTPROCESSRENDERPIPELINEMANAGER;\n    this.scene = scene;\n  }\n  /**\n   * Registers the component in a given scene\n   */\n\n\n  PostProcessRenderPipelineManagerSceneComponent.prototype.register = function () {\n    this.scene._gatherRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERRENDERTARGETS_POSTPROCESSRENDERPIPELINEMANAGER, this, this._gatherRenderTargets);\n  };\n  /**\n   * Rebuilds the elements related to this component in case of\n   * context lost for instance.\n   */\n\n\n  PostProcessRenderPipelineManagerSceneComponent.prototype.rebuild = function () {\n    if (this.scene._postProcessRenderPipelineManager) {\n      this.scene._postProcessRenderPipelineManager._rebuild();\n    }\n  };\n  /**\n   * Disposes the component and the associated resources\n   */\n\n\n  PostProcessRenderPipelineManagerSceneComponent.prototype.dispose = function () {\n    if (this.scene._postProcessRenderPipelineManager) {\n      this.scene._postProcessRenderPipelineManager.dispose();\n    }\n  };\n\n  PostProcessRenderPipelineManagerSceneComponent.prototype._gatherRenderTargets = function () {\n    if (this.scene._postProcessRenderPipelineManager) {\n      this.scene._postProcessRenderPipelineManager.update();\n    }\n  };\n\n  return PostProcessRenderPipelineManagerSceneComponent;\n}();\n\nexport { PostProcessRenderPipelineManagerSceneComponent };","map":{"version":3,"mappings":";;AACA,SAASA,uBAAT,QAAwC,yBAAxC;AACA,SAASC,gCAAT,QAAiD,uCAAjD;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAgBAC,MAAM,CAACC,cAAP,CAAsBF,KAAK,CAACG,SAA5B,EAAuC,kCAAvC,EAA2E;AACvEC,KAAG,EAAE;AACD,QAAI,CAAC,KAAKC,iCAAV,EAA6C;AACzC;AACA,UAAIC,SAAS,GAAG,KAAKC,aAAL,CAAmBT,uBAAuB,CAACU,qCAA3C,CAAhB;;AACA,UAAI,CAACF,SAAL,EAAgB;AACZA,iBAAS,GAAG,IAAIG,8CAAJ,CAAmD,IAAnD,CAAZ;;AACA,aAAKC,aAAL,CAAmBJ,SAAnB;AACH;;AACD,WAAKD,iCAAL,GAAyC,IAAIN,gCAAJ,EAAzC;AACH;;AAED,WAAO,KAAKM,iCAAZ;AACH,GAbsE;AAcvEM,YAAU,EAAE,IAd2D;AAevEC,cAAY,EAAE;AAfyD,CAA3E;AAkBA;;;;AAGA;AAAA;AAAA;AAWI;;;;AAIA,0DAAYC,KAAZ,EAAwB;AAdxB;;;AAGgB,gBAAOf,uBAAuB,CAACU,qCAA/B;AAYZ,SAAKK,KAAL,GAAaA,KAAb;AACH;AAED;;;;;AAGOJ,sEAAP;AACI,SAAKI,KAAL,CAAWC,yBAAX,CAAqCC,YAArC,CAAkDjB,uBAAuB,CAACkB,yDAA1E,EAAqI,IAArI,EAA2I,KAAKC,oBAAhJ;AACH,GAFM;AAIP;;;;;;AAIOR,qEAAP;AACI,QAAI,KAAKI,KAAL,CAAWR,iCAAf,EAAkD;AAC9C,WAAKQ,KAAL,CAAWR,iCAAX,CAA6Ca,QAA7C;AACH;AACJ,GAJM;AAMP;;;;;AAGOT,qEAAP;AACI,QAAI,KAAKI,KAAL,CAAWR,iCAAf,EAAkD;AAC9C,WAAKQ,KAAL,CAAWR,iCAAX,CAA6Cc,OAA7C;AACH;AACJ,GAJM;;AAMCV,kFAAR;AACI,QAAI,KAAKI,KAAL,CAAWR,iCAAf,EAAkD;AAC9C,WAAKQ,KAAL,CAAWR,iCAAX,CAA6Ce,MAA7C;AACH;AACJ,GAJO;;AAKZ;AAAC,CAlDD","names":["SceneComponentConstants","PostProcessRenderPipelineManager","Scene","Object","defineProperty","prototype","get","_postProcessRenderPipelineManager","component","_getComponent","NAME_POSTPROCESSRENDERPIPELINEMANAGER","PostProcessRenderPipelineManagerSceneComponent","_addComponent","enumerable","configurable","scene","_gatherRenderTargetsStage","registerStep","STEP_GATHERRENDERTARGETS_POSTPROCESSRENDERPIPELINEMANAGER","_gatherRenderTargets","_rebuild","dispose","update"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent.ts"],"sourcesContent":["import type { ISceneComponent } from \"../../sceneComponent\";\r\nimport { SceneComponentConstants } from \"../../sceneComponent\";\r\nimport { PostProcessRenderPipelineManager } from \"./postProcessRenderPipelineManager\";\r\nimport { Scene } from \"../../scene\";\r\n\r\ndeclare module \"../../scene\" {\r\n    export interface Scene {\r\n        /** @hidden (Backing field) */\r\n        _postProcessRenderPipelineManager: PostProcessRenderPipelineManager;\r\n\r\n        /**\r\n         * Gets the postprocess render pipeline manager\r\n         * @see https://doc.babylonjs.com/how_to/how_to_use_postprocessrenderpipeline\r\n         * @see https://doc.babylonjs.com/how_to/using_default_rendering_pipeline\r\n         */\r\n        readonly postProcessRenderPipelineManager: PostProcessRenderPipelineManager;\r\n    }\r\n}\r\n\r\nObject.defineProperty(Scene.prototype, \"postProcessRenderPipelineManager\", {\r\n    get: function (this: Scene) {\r\n        if (!this._postProcessRenderPipelineManager) {\r\n            // Register the G Buffer component to the scene.\r\n            let component = this._getComponent(SceneComponentConstants.NAME_POSTPROCESSRENDERPIPELINEMANAGER) as PostProcessRenderPipelineManagerSceneComponent;\r\n            if (!component) {\r\n                component = new PostProcessRenderPipelineManagerSceneComponent(this);\r\n                this._addComponent(component);\r\n            }\r\n            this._postProcessRenderPipelineManager = new PostProcessRenderPipelineManager();\r\n        }\r\n\r\n        return this._postProcessRenderPipelineManager;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\n/**\r\n * Defines the Render Pipeline scene component responsible to rendering pipelines\r\n */\r\nexport class PostProcessRenderPipelineManagerSceneComponent implements ISceneComponent {\r\n    /**\r\n     * The component name helpful to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_POSTPROCESSRENDERPIPELINEMANAGER;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene: Scene) {\r\n        this.scene = scene;\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._gatherRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERRENDERTARGETS_POSTPROCESSRENDERPIPELINEMANAGER, this, this._gatherRenderTargets);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        if (this.scene._postProcessRenderPipelineManager) {\r\n            this.scene._postProcessRenderPipelineManager._rebuild();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated resources\r\n     */\r\n    public dispose(): void {\r\n        if (this.scene._postProcessRenderPipelineManager) {\r\n            this.scene._postProcessRenderPipelineManager.dispose();\r\n        }\r\n    }\r\n\r\n    private _gatherRenderTargets(): void {\r\n        if (this.scene._postProcessRenderPipelineManager) {\r\n            this.scene._postProcessRenderPipelineManager.update();\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}