{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\n/**\n * Block used to add support for instances\n * @see https://doc.babylonjs.com/how_to/how_to_use_instances\n */\n\nvar InstancesBlock =\n/** @class */\nfunction (_super) {\n  __extends(InstancesBlock, _super);\n  /**\n   * Creates a new InstancesBlock\n   * @param name defines the block name\n   */\n\n\n  function InstancesBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Vertex) || this;\n\n    _this.registerInput(\"world0\", NodeMaterialBlockConnectionPointTypes.Vector4);\n\n    _this.registerInput(\"world1\", NodeMaterialBlockConnectionPointTypes.Vector4);\n\n    _this.registerInput(\"world2\", NodeMaterialBlockConnectionPointTypes.Vector4);\n\n    _this.registerInput(\"world3\", NodeMaterialBlockConnectionPointTypes.Vector4);\n\n    _this.registerInput(\"world\", NodeMaterialBlockConnectionPointTypes.Matrix, true);\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Matrix);\n\n    _this.registerOutput(\"instanceID\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    return _this;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  InstancesBlock.prototype.getClassName = function () {\n    return \"InstancesBlock\";\n  };\n\n  Object.defineProperty(InstancesBlock.prototype, \"world0\", {\n    /**\n     * Gets the first world row input component\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InstancesBlock.prototype, \"world1\", {\n    /**\n     * Gets the second world row input component\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InstancesBlock.prototype, \"world2\", {\n    /**\n     * Gets the third world row input component\n     */\n    get: function get() {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InstancesBlock.prototype, \"world3\", {\n    /**\n     * Gets the forth world row input component\n     */\n    get: function get() {\n      return this._inputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InstancesBlock.prototype, \"world\", {\n    /**\n     * Gets the world input component\n     */\n    get: function get() {\n      return this._inputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InstancesBlock.prototype, \"output\", {\n    /**\n     * Gets the output component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InstancesBlock.prototype, \"instanceID\", {\n    /**\n     * Gets the instanceID component\n     */\n    get: function get() {\n      return this._outputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  InstancesBlock.prototype.autoConfigure = function (material) {\n    if (!this.world0.connectedPoint) {\n      var world0Input = material.getInputBlockByPredicate(function (b) {\n        return b.isAttribute && b.name === \"world0\";\n      });\n\n      if (!world0Input) {\n        world0Input = new InputBlock(\"world0\");\n        world0Input.setAsAttribute(\"world0\");\n      }\n\n      world0Input.output.connectTo(this.world0);\n    }\n\n    if (!this.world1.connectedPoint) {\n      var world1Input = material.getInputBlockByPredicate(function (b) {\n        return b.isAttribute && b.name === \"world1\";\n      });\n\n      if (!world1Input) {\n        world1Input = new InputBlock(\"world1\");\n        world1Input.setAsAttribute(\"world1\");\n      }\n\n      world1Input.output.connectTo(this.world1);\n    }\n\n    if (!this.world2.connectedPoint) {\n      var world2Input = material.getInputBlockByPredicate(function (b) {\n        return b.isAttribute && b.name === \"world2\";\n      });\n\n      if (!world2Input) {\n        world2Input = new InputBlock(\"world2\");\n        world2Input.setAsAttribute(\"world2\");\n      }\n\n      world2Input.output.connectTo(this.world2);\n    }\n\n    if (!this.world3.connectedPoint) {\n      var world3Input = material.getInputBlockByPredicate(function (b) {\n        return b.isAttribute && b.name === \"world3\";\n      });\n\n      if (!world3Input) {\n        world3Input = new InputBlock(\"world3\");\n        world3Input.setAsAttribute(\"world3\");\n      }\n\n      world3Input.output.connectTo(this.world3);\n    }\n\n    if (!this.world.connectedPoint) {\n      var worldInput = material.getInputBlockByPredicate(function (b) {\n        return b.isAttribute && b.name === \"world\";\n      });\n\n      if (!worldInput) {\n        worldInput = new InputBlock(\"world\");\n        worldInput.setAsSystemValue(NodeMaterialSystemValues.World);\n      }\n\n      worldInput.output.connectTo(this.world);\n    }\n\n    this.world.define = \"!INSTANCES || THIN_INSTANCES\";\n  };\n\n  InstancesBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines, useInstances, subMesh) {\n    if (useInstances === void 0) {\n      useInstances = false;\n    }\n\n    var changed = false;\n\n    if (defines[\"INSTANCES\"] !== useInstances) {\n      defines.setValue(\"INSTANCES\", useInstances);\n      changed = true;\n    }\n\n    if (subMesh && defines[\"THIN_INSTANCES\"] !== !!(subMesh === null || subMesh === void 0 ? void 0 : subMesh.getRenderingMesh().hasThinInstances)) {\n      defines.setValue(\"THIN_INSTANCES\", !!(subMesh === null || subMesh === void 0 ? void 0 : subMesh.getRenderingMesh().hasThinInstances));\n      changed = true;\n    }\n\n    if (changed) {\n      defines.markAsUnprocessed();\n    }\n  };\n\n  InstancesBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var engine = state.sharedData.scene.getEngine(); // Register for defines\n\n    state.sharedData.blocksWithDefines.push(this); // Emit code\n\n    var output = this._outputs[0];\n    var instanceID = this._outputs[1];\n    var world0 = this.world0;\n    var world1 = this.world1;\n    var world2 = this.world2;\n    var world3 = this.world3;\n    state.compilationString += \"#ifdef INSTANCES\\r\\n\";\n    state.compilationString += this._declareOutput(output, state) + \" = mat4(\".concat(world0.associatedVariableName, \", \").concat(world1.associatedVariableName, \", \").concat(world2.associatedVariableName, \", \").concat(world3.associatedVariableName, \");\\r\\n\");\n    state.compilationString += \"#ifdef THIN_INSTANCES\\r\\n\";\n    state.compilationString += \"\".concat(output.associatedVariableName, \" = \").concat(this.world.associatedVariableName, \" * \").concat(output.associatedVariableName, \";\\r\\n\");\n    state.compilationString += \"#endif\\r\\n\";\n\n    if (engine._caps.canUseGLInstanceID) {\n      state.compilationString += this._declareOutput(instanceID, state) + \" = float(gl_InstanceID);\\r\\n\";\n    } else {\n      state.compilationString += this._declareOutput(instanceID, state) + \" = 0.0;\\r\\n\";\n    }\n\n    state.compilationString += \"#else\\r\\n\";\n    state.compilationString += this._declareOutput(output, state) + \" = \".concat(this.world.associatedVariableName, \";\\r\\n\");\n    state.compilationString += this._declareOutput(instanceID, state) + \" = 0.0;\\r\\n\";\n    state.compilationString += \"#endif\\r\\n\";\n    return this;\n  };\n\n  return InstancesBlock;\n}(NodeMaterialBlock);\n\nexport { InstancesBlock };\nRegisterClass(\"BABYLON.InstancesBlock\", InstancesBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockTargets","NodeMaterialBlockConnectionPointTypes","NodeMaterialSystemValues","InputBlock","RegisterClass","__extends","name","_super","Vertex","_this","registerInput","Vector4","Matrix","registerOutput","Float","InstancesBlock","Object","_inputs","_outputs","material","world0","connectedPoint","world0Input","getInputBlockByPredicate","b","isAttribute","setAsAttribute","output","connectTo","world1","world1Input","world2","world2Input","world3","world3Input","world","worldInput","setAsSystemValue","World","define","mesh","nodeMaterial","defines","useInstances","subMesh","changed","setValue","getRenderingMesh","hasThinInstances","markAsUnprocessed","state","_buildBlock","call","engine","sharedData","scene","getEngine","blocksWithDefines","push","instanceID","compilationString","_declareOutput","associatedVariableName","concat","_caps","canUseGLInstanceID"],"sourceRoot":"","sources":["../../../../../../../../lts/core/generated/Materials/Node/Blocks/Vertex/instancesBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\nimport type { NodeMaterial, NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues\";\r\nimport { InputBlock } from \"../Input/inputBlock\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport type { SubMesh } from \"../../../../Meshes/subMesh\";\r\n\r\n/**\r\n * Block used to add support for instances\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_instances\r\n */\r\nexport class InstancesBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Creates a new InstancesBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Vertex);\r\n\r\n        this.registerInput(\"world0\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerInput(\"world1\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerInput(\"world2\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerInput(\"world3\", NodeMaterialBlockConnectionPointTypes.Vector4);\r\n        this.registerInput(\"world\", NodeMaterialBlockConnectionPointTypes.Matrix, true);\r\n\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Matrix);\r\n        this.registerOutput(\"instanceID\", NodeMaterialBlockConnectionPointTypes.Float);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"InstancesBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the first world row input component\r\n     */\r\n    public get world0(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the second world row input component\r\n     */\r\n    public get world1(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the third world row input component\r\n     */\r\n    public get world2(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the forth world row input component\r\n     */\r\n    public get world3(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the world input component\r\n     */\r\n    public get world(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the instanceID component\r\n     */\r\n    public get instanceID(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    public autoConfigure(material: NodeMaterial) {\r\n        if (!this.world0.connectedPoint) {\r\n            let world0Input = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"world0\");\r\n\r\n            if (!world0Input) {\r\n                world0Input = new InputBlock(\"world0\");\r\n                world0Input.setAsAttribute(\"world0\");\r\n            }\r\n            world0Input.output.connectTo(this.world0);\r\n        }\r\n        if (!this.world1.connectedPoint) {\r\n            let world1Input = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"world1\");\r\n\r\n            if (!world1Input) {\r\n                world1Input = new InputBlock(\"world1\");\r\n                world1Input.setAsAttribute(\"world1\");\r\n            }\r\n            world1Input.output.connectTo(this.world1);\r\n        }\r\n        if (!this.world2.connectedPoint) {\r\n            let world2Input = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"world2\");\r\n\r\n            if (!world2Input) {\r\n                world2Input = new InputBlock(\"world2\");\r\n                world2Input.setAsAttribute(\"world2\");\r\n            }\r\n            world2Input.output.connectTo(this.world2);\r\n        }\r\n        if (!this.world3.connectedPoint) {\r\n            let world3Input = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"world3\");\r\n\r\n            if (!world3Input) {\r\n                world3Input = new InputBlock(\"world3\");\r\n                world3Input.setAsAttribute(\"world3\");\r\n            }\r\n            world3Input.output.connectTo(this.world3);\r\n        }\r\n        if (!this.world.connectedPoint) {\r\n            let worldInput = material.getInputBlockByPredicate((b) => b.isAttribute && b.name === \"world\");\r\n\r\n            if (!worldInput) {\r\n                worldInput = new InputBlock(\"world\");\r\n                worldInput.setAsSystemValue(NodeMaterialSystemValues.World);\r\n            }\r\n            worldInput.output.connectTo(this.world);\r\n        }\r\n\r\n        this.world.define = \"!INSTANCES || THIN_INSTANCES\";\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines, useInstances: boolean = false, subMesh?: SubMesh) {\r\n        let changed = false;\r\n        if (defines[\"INSTANCES\"] !== useInstances) {\r\n            defines.setValue(\"INSTANCES\", useInstances);\r\n            changed = true;\r\n        }\r\n\r\n        if (subMesh && defines[\"THIN_INSTANCES\"] !== !!subMesh?.getRenderingMesh().hasThinInstances) {\r\n            defines.setValue(\"THIN_INSTANCES\", !!subMesh?.getRenderingMesh().hasThinInstances);\r\n            changed = true;\r\n        }\r\n\r\n        if (changed) {\r\n            defines.markAsUnprocessed();\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const engine = state.sharedData.scene.getEngine();\r\n\r\n        // Register for defines\r\n        state.sharedData.blocksWithDefines.push(this);\r\n\r\n        // Emit code\r\n        const output = this._outputs[0];\r\n        const instanceID = this._outputs[1];\r\n        const world0 = this.world0;\r\n        const world1 = this.world1;\r\n        const world2 = this.world2;\r\n        const world3 = this.world3;\r\n\r\n        state.compilationString += `#ifdef INSTANCES\\r\\n`;\r\n        state.compilationString +=\r\n            this._declareOutput(output, state) +\r\n            ` = mat4(${world0.associatedVariableName}, ${world1.associatedVariableName}, ${world2.associatedVariableName}, ${world3.associatedVariableName});\\r\\n`;\r\n        state.compilationString += `#ifdef THIN_INSTANCES\\r\\n`;\r\n        state.compilationString += `${output.associatedVariableName} = ${this.world.associatedVariableName} * ${output.associatedVariableName};\\r\\n`;\r\n        state.compilationString += `#endif\\r\\n`;\r\n        if (engine._caps.canUseGLInstanceID) {\r\n            state.compilationString += this._declareOutput(instanceID, state) + ` = float(gl_InstanceID);\\r\\n`;\r\n        } else {\r\n            state.compilationString += this._declareOutput(instanceID, state) + ` = 0.0;\\r\\n`;\r\n        }\r\n        state.compilationString += `#else\\r\\n`;\r\n        state.compilationString += this._declareOutput(output, state) + ` = ${this.world.associatedVariableName};\\r\\n`;\r\n        state.compilationString += this._declareOutput(instanceID, state) + ` = 0.0;\\r\\n`;\r\n        state.compilationString += `#endif\\r\\n`;\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.InstancesBlock\", InstancesBlock);\r\n"]},"metadata":{},"sourceType":"module"}