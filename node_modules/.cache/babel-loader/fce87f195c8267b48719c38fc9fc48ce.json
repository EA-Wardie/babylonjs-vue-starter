{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/sharpen.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * The SharpenPostProcess applies a sharpen kernel to every pixel\n * See http://en.wikipedia.org/wiki/Kernel_(image_processing)\n */\n\nvar SharpenPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(SharpenPostProcess, _super);\n  /**\n   * Creates a new instance ConvolutionPostProcess\n   * @param name The name of the effect.\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   * @param textureType Type of textures used when performing the post process. (default: 0)\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\n   */\n\n\n  function SharpenPostProcess(name, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    var _this = _super.call(this, name, \"sharpen\", [\"sharpnessAmounts\", \"screenSize\"], null, options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation) || this;\n    /**\n     * How much of the original color should be applied. Setting this to 0 will display edge detection. (default: 1)\n     */\n\n\n    _this.colorAmount = 1.0;\n    /**\n     * How much sharpness should be applied (default: 0.3)\n     */\n\n    _this.edgeAmount = 0.3;\n\n    _this.onApply = function (effect) {\n      effect.setFloat2(\"screenSize\", _this.width, _this.height);\n      effect.setFloat2(\"sharpnessAmounts\", _this.edgeAmount, _this.colorAmount);\n    };\n\n    return _this;\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"SharpenPostProcess\" string\n   */\n\n\n  SharpenPostProcess.prototype.getClassName = function () {\n    return \"SharpenPostProcess\";\n  };\n  /**\n   * @param parsedPostProcess\n   * @param targetCamera\n   * @param scene\n   * @param rootUrl\n   * @hidden\n   */\n\n\n  SharpenPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new SharpenPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.textureType, parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  __decorate([serialize()], SharpenPostProcess.prototype, \"colorAmount\", void 0);\n\n  __decorate([serialize()], SharpenPostProcess.prototype, \"edgeAmount\", void 0);\n\n  return SharpenPostProcess;\n}(PostProcess);\n\nexport { SharpenPostProcess };\nRegisterClass(\"BABYLON.SharpenPostProcess\", SharpenPostProcess);","map":{"version":3,"mappings":";;AAIA,SAASA,WAAT,QAA4B,kBAA5B;AAGA,OAAO,gCAAP;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,SAAT,EAAoBC,mBAApB,QAA+C,uBAA/C;AAKA;;;;;AAIA;AAAA;AAAA;AAAwCC;AAoBpC;;;;;;;;;;;;;AAWA,8BACIC,IADJ,EAEIC,OAFJ,EAGIC,MAHJ,EAIIC,YAJJ,EAKIC,MALJ,EAMIC,QANJ,EAOIC,WAPJ,EAQIC,gBARJ,EAQ4B;AADxB;AAAAD,oBAAsB,CAAtB;AAAsB;;AACtB;AAAAC;AAAwB;;AAR5B,gBAUIC,kBAAMR,IAAN,EAAY,SAAZ,EAAuB,CAAC,kBAAD,EAAqB,YAArB,CAAvB,EAA2D,IAA3D,EAAiEC,OAAjE,EAA0EC,MAA1E,EAAkFC,YAAlF,EAAgGC,MAAhG,EAAwGC,QAAxG,EAAkH,IAAlH,EAAwHC,WAAxH,EAAqIG,SAArI,EAAgJ,IAAhJ,EAAsJF,gBAAtJ,KAAuK,IAV3K;AA9BA;;;;;AAIOG,wBAAsB,GAAtB;AACP;;;;AAIOA,uBAAqB,GAArB;;AAiCHA,SAAI,CAACC,OAAL,GAAe,UAACC,MAAD,EAAe;AAC1BA,YAAM,CAACC,SAAP,CAAiB,YAAjB,EAA+BH,KAAI,CAACI,KAApC,EAA2CJ,KAAI,CAACK,MAAhD;AACAH,YAAM,CAACC,SAAP,CAAiB,kBAAjB,EAAqCH,KAAI,CAACM,UAA1C,EAAsDN,KAAI,CAACO,WAA3D;AACH,KAHD;;;AAIH;AAnCD;;;;;;AAIOC,8CAAP;AACI,WAAO,oBAAP;AACH,GAFM;AAiCP;;;;;;;;;AAOcA,8BAAd,UAAqBC,iBAArB,EAA6CC,YAA7C,EAAmEC,KAAnE,EAAiFC,OAAjF,EAAgG;AAC5F,WAAOxB,mBAAmB,CAACyB,KAApB,CACH;AACI,aAAO,IAAIL,kBAAJ,CACHC,iBAAiB,CAACnB,IADf,EAEHmB,iBAAiB,CAAClB,OAFf,EAGHmB,YAHG,EAIHD,iBAAiB,CAACK,wBAJf,EAKHH,KAAK,CAACI,SAAN,EALG,EAMHN,iBAAiB,CAACb,WANf,EAOHa,iBAAiB,CAACd,QAPf,CAAP;AASH,KAXE,EAYHc,iBAZG,EAaHE,KAbG,EAcHC,OAdG,CAAP;AAgBH,GAjBa;;AAnDdI,cADC7B,SAAS,EACV;;AAKA6B,cADC7B,SAAS,EACV;;AAgEJ;AAAC,CA1ED,CAAwCF,WAAxC;;SAAauB;AA4EbtB,aAAa,CAAC,4BAAD,EAA+BsB,kBAA/B,CAAb","names":["PostProcess","RegisterClass","serialize","SerializationHelper","__extends","name","options","camera","samplingMode","engine","reusable","textureType","blockCompilation","_super","undefined","_this","onApply","effect","setFloat2","width","height","edgeAmount","colorAmount","SharpenPostProcess","parsedPostProcess","targetCamera","scene","rootUrl","Parse","renderTargetSamplingMode","getEngine","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/PostProcesses/sharpenPostProcess.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/sharpen.fragment\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { serialize, SerializationHelper } from \"../Misc/decorators\";\r\n\r\ndeclare type Engine = import(\"../Engines/engine\").Engine;\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * The SharpenPostProcess applies a sharpen kernel to every pixel\r\n * See http://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n */\r\nexport class SharpenPostProcess extends PostProcess {\r\n    /**\r\n     * How much of the original color should be applied. Setting this to 0 will display edge detection. (default: 1)\r\n     */\r\n    @serialize()\r\n    public colorAmount: number = 1.0;\r\n    /**\r\n     * How much sharpness should be applied (default: 0.3)\r\n     */\r\n    @serialize()\r\n    public edgeAmount: number = 0.3;\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"SharpenPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"SharpenPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance ConvolutionPostProcess\r\n     * @param name The name of the effect.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        blockCompilation = false\r\n    ) {\r\n        super(name, \"sharpen\", [\"sharpnessAmounts\", \"screenSize\"], null, options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation);\r\n\r\n        this.onApply = (effect: Effect) => {\r\n            effect.setFloat2(\"screenSize\", this.width, this.height);\r\n            effect.setFloat2(\"sharpnessAmounts\", this.edgeAmount, this.colorAmount);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @param parsedPostProcess\r\n     * @param targetCamera\r\n     * @param scene\r\n     * @param rootUrl\r\n     * @hidden\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string) {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new SharpenPostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    scene.getEngine(),\r\n                    parsedPostProcess.textureType,\r\n                    parsedPostProcess.reusable\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.SharpenPostProcess\", SharpenPostProcess);\r\n"]},"metadata":{},"sourceType":"module"}