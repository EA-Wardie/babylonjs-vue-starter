{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.timers.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { Quaternion } from \"../../Maths/math.vector.js\";\nimport { Tools } from \"../../Misc/tools.js\";\nimport { FreeCameraInputsManager } from \"../../Cameras/freeCameraInputsManager.js\";\nimport { Observable } from \"../../Misc/observable.js\";\n/**\n * Add orientation input support to the input manager.\n * @returns the current input manager\n */\n\nFreeCameraInputsManager.prototype.addDeviceOrientation = function () {\n  if (!this._deviceOrientationInput) {\n    this._deviceOrientationInput = new FreeCameraDeviceOrientationInput();\n    this.add(this._deviceOrientationInput);\n  }\n\n  return this;\n};\n/**\n * Takes information about the orientation of the device as reported by the deviceorientation event to orient the camera.\n * Screen rotation is taken into account.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\n\n\nvar FreeCameraDeviceOrientationInput =\n/** @class */\nfunction () {\n  /**\n   * Instantiates a new input\n   * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n   */\n  function FreeCameraDeviceOrientationInput() {\n    var _this = this;\n\n    this._screenOrientationAngle = 0;\n    this._screenQuaternion = new Quaternion();\n    this._alpha = 0;\n    this._beta = 0;\n    this._gamma = 0;\n    /**\n     * @hidden\n     */\n\n    this._onDeviceOrientationChangedObservable = new Observable();\n\n    this._orientationChanged = function () {\n      _this._screenOrientationAngle = window.orientation !== undefined ? +window.orientation : window.screen.orientation && window.screen.orientation[\"angle\"] ? window.screen.orientation.angle : 0;\n      _this._screenOrientationAngle = -Tools.ToRadians(_this._screenOrientationAngle / 2);\n\n      _this._screenQuaternion.copyFromFloats(0, Math.sin(_this._screenOrientationAngle), 0, Math.cos(_this._screenOrientationAngle));\n    };\n\n    this._deviceOrientation = function (evt) {\n      _this._alpha = evt.alpha !== null ? evt.alpha : 0;\n      _this._beta = evt.beta !== null ? evt.beta : 0;\n      _this._gamma = evt.gamma !== null ? evt.gamma : 0;\n\n      if (evt.alpha !== null) {\n        _this._onDeviceOrientationChangedObservable.notifyObservers();\n      }\n    };\n\n    this._constantTranform = new Quaternion(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5));\n\n    this._orientationChanged();\n  }\n  /**\n   * Can be used to detect if a device orientation sensor is available on a device\n   * @param timeout amount of time in milliseconds to wait for a response from the sensor (default: infinite)\n   * @returns a promise that will resolve on orientation change\n   */\n\n\n  FreeCameraDeviceOrientationInput.WaitForOrientationChangeAsync = function (timeout) {\n    return new Promise(function (res, rej) {\n      var gotValue = false;\n\n      var eventHandler = function eventHandler() {\n        window.removeEventListener(\"deviceorientation\", eventHandler);\n        gotValue = true;\n        res();\n      }; // If timeout is populated reject the promise\n\n\n      if (timeout) {\n        setTimeout(function () {\n          if (!gotValue) {\n            window.removeEventListener(\"deviceorientation\", eventHandler);\n            rej(\"WaitForOrientationChangeAsync timed out\");\n          }\n        }, timeout);\n      }\n\n      if (typeof DeviceOrientationEvent !== \"undefined\" && typeof DeviceOrientationEvent.requestPermission === \"function\") {\n        DeviceOrientationEvent.requestPermission().then(function (response) {\n          if (response == \"granted\") {\n            window.addEventListener(\"deviceorientation\", eventHandler);\n          } else {\n            Tools.Warn(\"Permission not granted.\");\n          }\n        })[\"catch\"](function (error) {\n          Tools.Error(error);\n        });\n      } else {\n        window.addEventListener(\"deviceorientation\", eventHandler);\n      }\n    });\n  };\n\n  Object.defineProperty(FreeCameraDeviceOrientationInput.prototype, \"camera\", {\n    /**\n     * Define the camera controlled by the input.\n     */\n    get: function get() {\n      return this._camera;\n    },\n    set: function set(camera) {\n      var _this = this;\n\n      this._camera = camera;\n\n      if (this._camera != null && !this._camera.rotationQuaternion) {\n        this._camera.rotationQuaternion = new Quaternion();\n      }\n\n      if (this._camera) {\n        this._camera.onDisposeObservable.add(function () {\n          _this._onDeviceOrientationChangedObservable.clear();\n        });\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Attach the input controls to a specific dom element to get the input from.\n   */\n\n  FreeCameraDeviceOrientationInput.prototype.attachControl = function () {\n    var _this = this;\n\n    var hostWindow = this.camera.getScene().getEngine().getHostWindow();\n\n    if (hostWindow) {\n      var eventHandler_1 = function eventHandler_1() {\n        hostWindow.addEventListener(\"orientationchange\", _this._orientationChanged);\n        hostWindow.addEventListener(\"deviceorientation\", _this._deviceOrientation); //In certain cases, the attach control is called AFTER orientation was changed,\n        //So this is needed.\n\n        _this._orientationChanged();\n      };\n\n      if (typeof DeviceOrientationEvent !== \"undefined\" && typeof DeviceOrientationEvent.requestPermission === \"function\") {\n        DeviceOrientationEvent.requestPermission().then(function (response) {\n          if (response === \"granted\") {\n            eventHandler_1();\n          } else {\n            Tools.Warn(\"Permission not granted.\");\n          }\n        })[\"catch\"](function (error) {\n          Tools.Error(error);\n        });\n      } else {\n        eventHandler_1();\n      }\n    }\n  };\n  /**\n   * Detach the current controls from the specified dom element.\n   */\n\n\n  FreeCameraDeviceOrientationInput.prototype.detachControl = function () {\n    window.removeEventListener(\"orientationchange\", this._orientationChanged);\n    window.removeEventListener(\"deviceorientation\", this._deviceOrientation);\n    this._alpha = 0;\n  };\n  /**\n   * Update the current camera state depending on the inputs that have been used this frame.\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n   */\n\n\n  FreeCameraDeviceOrientationInput.prototype.checkInputs = function () {\n    //if no device orientation provided, don't update the rotation.\n    //Only testing against alpha under the assumption thatnorientation will never be so exact when set.\n    if (!this._alpha) {\n      return;\n    }\n\n    Quaternion.RotationYawPitchRollToRef(Tools.ToRadians(this._alpha), Tools.ToRadians(this._beta), -Tools.ToRadians(this._gamma), this.camera.rotationQuaternion);\n\n    this._camera.rotationQuaternion.multiplyInPlace(this._screenQuaternion);\n\n    this._camera.rotationQuaternion.multiplyInPlace(this._constantTranform); //Mirror on XY Plane\n\n\n    this._camera.rotationQuaternion.z *= -1;\n    this._camera.rotationQuaternion.w *= -1;\n  };\n  /**\n   * Gets the class name of the current input.\n   * @returns the class name\n   */\n\n\n  FreeCameraDeviceOrientationInput.prototype.getClassName = function () {\n    return \"FreeCameraDeviceOrientationInput\";\n  };\n  /**\n   * Get the friendly name associated with the input class.\n   * @returns the input friendly name\n   */\n\n\n  FreeCameraDeviceOrientationInput.prototype.getSimpleName = function () {\n    return \"deviceOrientation\";\n  };\n\n  return FreeCameraDeviceOrientationInput;\n}();\n\nexport { FreeCameraDeviceOrientationInput };\nCameraInputTypes[\"FreeCameraDeviceOrientationInput\"] = FreeCameraDeviceOrientationInput;","map":{"version":3,"mappings":"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","names":["CameraInputTypes","Quaternion","Tools","FreeCameraInputsManager","Observable","prototype","addDeviceOrientation","_deviceOrientationInput","FreeCameraDeviceOrientationInput","add","_this","_screenOrientationAngle","window","orientation","undefined","screen","angle","ToRadians","_screenQuaternion","copyFromFloats","Math","sin","cos","evt","_alpha","alpha","_beta","beta","_gamma","gamma","_onDeviceOrientationChangedObservable","notifyObservers","_constantTranform","sqrt","_orientationChanged","timeout","Promise","res","rej","gotValue","eventHandler","removeEventListener","setTimeout","DeviceOrientationEvent","requestPermission","then","response","addEventListener","Warn","error","Error","Object","_camera","camera","rotationQuaternion","onDisposeObservable","clear","hostWindow","getScene","getEngine","getHostWindow","eventHandler_1","_deviceOrientation","RotationYawPitchRollToRef","multiplyInPlace","z","w"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Cameras/Inputs/freeCameraDeviceOrientationInput.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport type { FreeCamera } from \"../../Cameras/freeCamera\";\r\nimport { Quaternion } from \"../../Maths/math.vector\";\r\nimport { Tools } from \"../../Misc/tools\";\r\nimport { FreeCameraInputsManager } from \"../../Cameras/freeCameraInputsManager\";\r\nimport { Observable } from \"../../Misc/observable\";\r\n\r\n// Module augmentation to abstract orientation inputs from camera.\r\ndeclare module \"../../Cameras/freeCameraInputsManager\" {\r\n    export interface FreeCameraInputsManager {\r\n        /**\r\n         * @hidden\r\n         */\r\n        _deviceOrientationInput: Nullable<FreeCameraDeviceOrientationInput>;\r\n        /**\r\n         * Add orientation input support to the input manager.\r\n         * @returns the current input manager\r\n         */\r\n        addDeviceOrientation(): FreeCameraInputsManager;\r\n    }\r\n}\r\n\r\n/**\r\n * Add orientation input support to the input manager.\r\n * @returns the current input manager\r\n */\r\nFreeCameraInputsManager.prototype.addDeviceOrientation = function (): FreeCameraInputsManager {\r\n    if (!this._deviceOrientationInput) {\r\n        this._deviceOrientationInput = new FreeCameraDeviceOrientationInput();\r\n        this.add(this._deviceOrientationInput);\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Takes information about the orientation of the device as reported by the deviceorientation event to orient the camera.\r\n * Screen rotation is taken into account.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class FreeCameraDeviceOrientationInput implements ICameraInput<FreeCamera> {\r\n    private _camera: FreeCamera;\r\n\r\n    private _screenOrientationAngle: number = 0;\r\n\r\n    private _constantTranform: Quaternion;\r\n    private _screenQuaternion: Quaternion = new Quaternion();\r\n\r\n    private _alpha: number = 0;\r\n    private _beta: number = 0;\r\n    private _gamma: number = 0;\r\n\r\n    /**\r\n     * Can be used to detect if a device orientation sensor is available on a device\r\n     * @param timeout amount of time in milliseconds to wait for a response from the sensor (default: infinite)\r\n     * @returns a promise that will resolve on orientation change\r\n     */\r\n    public static WaitForOrientationChangeAsync(timeout?: number): Promise<void> {\r\n        return new Promise((res, rej) => {\r\n            let gotValue = false;\r\n            const eventHandler = () => {\r\n                window.removeEventListener(\"deviceorientation\", eventHandler);\r\n                gotValue = true;\r\n                res();\r\n            };\r\n\r\n            // If timeout is populated reject the promise\r\n            if (timeout) {\r\n                setTimeout(() => {\r\n                    if (!gotValue) {\r\n                        window.removeEventListener(\"deviceorientation\", eventHandler);\r\n                        rej(\"WaitForOrientationChangeAsync timed out\");\r\n                    }\r\n                }, timeout);\r\n            }\r\n\r\n            if (typeof DeviceOrientationEvent !== \"undefined\" && typeof (<any>DeviceOrientationEvent).requestPermission === \"function\") {\r\n                (<any>DeviceOrientationEvent)\r\n                    .requestPermission()\r\n                    .then((response: string) => {\r\n                        if (response == \"granted\") {\r\n                            window.addEventListener(\"deviceorientation\", eventHandler);\r\n                        } else {\r\n                            Tools.Warn(\"Permission not granted.\");\r\n                        }\r\n                    })\r\n                    .catch((error: any) => {\r\n                        Tools.Error(error);\r\n                    });\r\n            } else {\r\n                window.addEventListener(\"deviceorientation\", eventHandler);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    public _onDeviceOrientationChangedObservable = new Observable<void>();\r\n    /**\r\n     * Instantiates a new input\r\n     * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n     */\r\n    constructor() {\r\n        this._constantTranform = new Quaternion(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5));\r\n        this._orientationChanged();\r\n    }\r\n\r\n    /**\r\n     * Define the camera controlled by the input.\r\n     */\r\n    public get camera(): FreeCamera {\r\n        return this._camera;\r\n    }\r\n\r\n    public set camera(camera: FreeCamera) {\r\n        this._camera = camera;\r\n        if (this._camera != null && !this._camera.rotationQuaternion) {\r\n            this._camera.rotationQuaternion = new Quaternion();\r\n        }\r\n        if (this._camera) {\r\n            this._camera.onDisposeObservable.add(() => {\r\n                this._onDeviceOrientationChangedObservable.clear();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     */\r\n    public attachControl(): void {\r\n        const hostWindow = this.camera.getScene().getEngine().getHostWindow();\r\n\r\n        if (hostWindow) {\r\n            const eventHandler = () => {\r\n                hostWindow!.addEventListener(\"orientationchange\", this._orientationChanged);\r\n                hostWindow!.addEventListener(\"deviceorientation\", this._deviceOrientation);\r\n                //In certain cases, the attach control is called AFTER orientation was changed,\r\n                //So this is needed.\r\n                this._orientationChanged();\r\n            };\r\n            if (typeof DeviceOrientationEvent !== \"undefined\" && typeof (<any>DeviceOrientationEvent).requestPermission === \"function\") {\r\n                (<any>DeviceOrientationEvent)\r\n                    .requestPermission()\r\n                    .then((response: string) => {\r\n                        if (response === \"granted\") {\r\n                            eventHandler();\r\n                        } else {\r\n                            Tools.Warn(\"Permission not granted.\");\r\n                        }\r\n                    })\r\n                    .catch((error: any) => {\r\n                        Tools.Error(error);\r\n                    });\r\n            } else {\r\n                eventHandler();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _orientationChanged = () => {\r\n        this._screenOrientationAngle =\r\n            <any>window.orientation !== undefined\r\n                ? +(<any>window.orientation)\r\n                : (<any>window.screen).orientation && (<any>window.screen).orientation[\"angle\"]\r\n                ? (<any>window.screen).orientation.angle\r\n                : 0;\r\n        this._screenOrientationAngle = -Tools.ToRadians(this._screenOrientationAngle / 2);\r\n        this._screenQuaternion.copyFromFloats(0, Math.sin(this._screenOrientationAngle), 0, Math.cos(this._screenOrientationAngle));\r\n    };\r\n\r\n    private _deviceOrientation = (evt: DeviceOrientationEvent) => {\r\n        this._alpha = evt.alpha !== null ? evt.alpha : 0;\r\n        this._beta = evt.beta !== null ? evt.beta : 0;\r\n        this._gamma = evt.gamma !== null ? evt.gamma : 0;\r\n        if (evt.alpha !== null) {\r\n            this._onDeviceOrientationChangedObservable.notifyObservers();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        window.removeEventListener(\"orientationchange\", this._orientationChanged);\r\n        window.removeEventListener(\"deviceorientation\", this._deviceOrientation);\r\n        this._alpha = 0;\r\n    }\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs(): void {\r\n        //if no device orientation provided, don't update the rotation.\r\n        //Only testing against alpha under the assumption thatnorientation will never be so exact when set.\r\n        if (!this._alpha) {\r\n            return;\r\n        }\r\n        Quaternion.RotationYawPitchRollToRef(Tools.ToRadians(this._alpha), Tools.ToRadians(this._beta), -Tools.ToRadians(this._gamma), this.camera.rotationQuaternion);\r\n        this._camera.rotationQuaternion.multiplyInPlace(this._screenQuaternion);\r\n        this._camera.rotationQuaternion.multiplyInPlace(this._constantTranform);\r\n        //Mirror on XY Plane\r\n        this._camera.rotationQuaternion.z *= -1;\r\n        this._camera.rotationQuaternion.w *= -1;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FreeCameraDeviceOrientationInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"deviceOrientation\";\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FreeCameraDeviceOrientationInput\"] = FreeCameraDeviceOrientationInput;\r\n"]},"metadata":{},"sourceType":"module"}