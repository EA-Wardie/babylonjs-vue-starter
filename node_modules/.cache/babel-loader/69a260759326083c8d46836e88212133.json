{"ast":null,"code":"import { Vector3, Vector2 } from \"./math.vector.js\";\n/**\n * Contains position and normal vectors for a vertex\n */\n\nvar PositionNormalVertex =\n/** @class */\nfunction () {\n  /**\n   * Creates a PositionNormalVertex\n   * @param position the position of the vertex (defaut: 0,0,0)\n   * @param normal the normal of the vertex (defaut: 0,1,0)\n   */\n  function PositionNormalVertex(\n  /** the position of the vertex (defaut: 0,0,0) */\n  position,\n  /** the normal of the vertex (defaut: 0,1,0) */\n  normal) {\n    if (position === void 0) {\n      position = Vector3.Zero();\n    }\n\n    if (normal === void 0) {\n      normal = Vector3.Up();\n    }\n\n    this.position = position;\n    this.normal = normal;\n  }\n  /**\n   * Clones the PositionNormalVertex\n   * @returns the cloned PositionNormalVertex\n   */\n\n\n  PositionNormalVertex.prototype.clone = function () {\n    return new PositionNormalVertex(this.position.clone(), this.normal.clone());\n  };\n\n  return PositionNormalVertex;\n}();\n\nexport { PositionNormalVertex };\n/**\n * Contains position, normal and uv vectors for a vertex\n */\n\nvar PositionNormalTextureVertex =\n/** @class */\nfunction () {\n  /**\n   * Creates a PositionNormalTextureVertex\n   * @param position the position of the vertex (defaut: 0,0,0)\n   * @param normal the normal of the vertex (defaut: 0,1,0)\n   * @param uv the uv of the vertex (default: 0,0)\n   */\n  function PositionNormalTextureVertex(\n  /** the position of the vertex (defaut: 0,0,0) */\n  position,\n  /** the normal of the vertex (defaut: 0,1,0) */\n  normal,\n  /** the uv of the vertex (default: 0,0) */\n  uv) {\n    if (position === void 0) {\n      position = Vector3.Zero();\n    }\n\n    if (normal === void 0) {\n      normal = Vector3.Up();\n    }\n\n    if (uv === void 0) {\n      uv = Vector2.Zero();\n    }\n\n    this.position = position;\n    this.normal = normal;\n    this.uv = uv;\n  }\n  /**\n   * Clones the PositionNormalTextureVertex\n   * @returns the cloned PositionNormalTextureVertex\n   */\n\n\n  PositionNormalTextureVertex.prototype.clone = function () {\n    return new PositionNormalTextureVertex(this.position.clone(), this.normal.clone(), this.uv.clone());\n  };\n\n  return PositionNormalTextureVertex;\n}();\n\nexport { PositionNormalTextureVertex };","map":{"version":3,"mappings":"AAAA,SAASA,OAAT,EAAkBC,OAAlB,QAAiC,kBAAjC;AAEA;;;;AAGA;AAAA;AAAA;AACI;;;;;AAKA;AACI;AACOC,UAFX;AAGI;AACOC,QAJX,EAIyC;AAF9B;AAAAD,iBAAoBF,OAAO,CAACI,IAAR,EAApB;AAAkC;;AAElC;AAAAD,eAAkBH,OAAO,CAACK,EAAR,EAAlB;AAA8B;;AAF9B;AAEA;AACP;AAEJ;;;;;;AAIOC,yCAAP;AACI,WAAO,IAAIA,oBAAJ,CAAyB,KAAKJ,QAAL,CAAcK,KAAd,EAAzB,EAAgD,KAAKJ,MAAL,CAAYI,KAAZ,EAAhD,CAAP;AACH,GAFM;;AAGX;AAAC,CApBD;;;AAsBA;;;;AAGA;AAAA;AAAA;AACI;;;;;;AAMA;AACI;AACOL,UAFX;AAGI;AACOC,QAJX;AAKI;AACOK,IANX,EAMuC;AAJ5B;AAAAN,iBAAoBF,OAAO,CAACI,IAAR,EAApB;AAAkC;;AAElC;AAAAD,eAAkBH,OAAO,CAACK,EAAR,EAAlB;AAA8B;;AAE9B;AAAAG,WAAcP,OAAO,CAACG,IAAR,EAAd;AAA4B;;AAJ5B;AAEA;AAEA;AACP;AACJ;;;;;;AAIOK,gDAAP;AACI,WAAO,IAAIA,2BAAJ,CAAgC,KAAKP,QAAL,CAAcK,KAAd,EAAhC,EAAuD,KAAKJ,MAAL,CAAYI,KAAZ,EAAvD,EAA4E,KAAKC,EAAL,CAAQD,KAAR,EAA5E,CAAP;AACH,GAFM;;AAGX;AAAC,CAtBD","names":["Vector3","Vector2","position","normal","Zero","Up","PositionNormalVertex","clone","uv","PositionNormalTextureVertex"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Maths/math.vertexFormat.ts"],"sourcesContent":["import { Vector3, Vector2 } from \"./math.vector\";\r\n\r\n/**\r\n * Contains position and normal vectors for a vertex\r\n */\r\nexport class PositionNormalVertex {\r\n    /**\r\n     * Creates a PositionNormalVertex\r\n     * @param position the position of the vertex (defaut: 0,0,0)\r\n     * @param normal the normal of the vertex (defaut: 0,1,0)\r\n     */\r\n    constructor(\r\n        /** the position of the vertex (defaut: 0,0,0) */\r\n        public position: Vector3 = Vector3.Zero(),\r\n        /** the normal of the vertex (defaut: 0,1,0) */\r\n        public normal: Vector3 = Vector3.Up()\r\n    ) {}\r\n\r\n    /**\r\n     * Clones the PositionNormalVertex\r\n     * @returns the cloned PositionNormalVertex\r\n     */\r\n    public clone(): PositionNormalVertex {\r\n        return new PositionNormalVertex(this.position.clone(), this.normal.clone());\r\n    }\r\n}\r\n\r\n/**\r\n * Contains position, normal and uv vectors for a vertex\r\n */\r\nexport class PositionNormalTextureVertex {\r\n    /**\r\n     * Creates a PositionNormalTextureVertex\r\n     * @param position the position of the vertex (defaut: 0,0,0)\r\n     * @param normal the normal of the vertex (defaut: 0,1,0)\r\n     * @param uv the uv of the vertex (default: 0,0)\r\n     */\r\n    constructor(\r\n        /** the position of the vertex (defaut: 0,0,0) */\r\n        public position: Vector3 = Vector3.Zero(),\r\n        /** the normal of the vertex (defaut: 0,1,0) */\r\n        public normal: Vector3 = Vector3.Up(),\r\n        /** the uv of the vertex (default: 0,0) */\r\n        public uv: Vector2 = Vector2.Zero()\r\n    ) {}\r\n    /**\r\n     * Clones the PositionNormalTextureVertex\r\n     * @returns the cloned PositionNormalTextureVertex\r\n     */\r\n    public clone(): PositionNormalTextureVertex {\r\n        return new PositionNormalTextureVertex(this.position.clone(), this.normal.clone(), this.uv.clone());\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}