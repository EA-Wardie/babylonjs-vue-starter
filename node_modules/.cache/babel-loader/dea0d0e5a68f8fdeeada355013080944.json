{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Action } from \"./action.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\n/**\n * This defines an action responsible to toggle a boolean once triggered.\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\n */\n\nvar SwitchBooleanAction =\n/** @class */\nfunction (_super) {\n  __extends(SwitchBooleanAction, _super);\n  /**\n   * Instantiate the action\n   * @param triggerOptions defines the trigger options\n   * @param target defines the object containing the boolean\n   * @param propertyPath defines the path to the boolean property in the target object\n   * @param condition defines the trigger related conditions\n   */\n\n\n  function SwitchBooleanAction(triggerOptions, target, propertyPath, condition) {\n    var _this = _super.call(this, triggerOptions, condition) || this;\n\n    _this.propertyPath = propertyPath;\n    _this._target = _this._effectiveTarget = target;\n    return _this;\n  }\n  /** @hidden */\n\n\n  SwitchBooleanAction.prototype._prepare = function () {\n    this._effectiveTarget = this._getEffectiveTarget(this._effectiveTarget, this.propertyPath);\n    this._property = this._getProperty(this.propertyPath);\n  };\n  /**\n   * Execute the action toggle the boolean value.\n   */\n\n\n  SwitchBooleanAction.prototype.execute = function () {\n    this._effectiveTarget[this._property] = !this._effectiveTarget[this._property];\n  };\n  /**\n   * Serializes the actions and its related information.\n   * @param parent defines the object to serialize in\n   * @returns the serialized object\n   */\n\n\n  SwitchBooleanAction.prototype.serialize = function (parent) {\n    return _super.prototype._serialize.call(this, {\n      name: \"SwitchBooleanAction\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"propertyPath\",\n        value: this.propertyPath\n      }]\n    }, parent);\n  };\n\n  return SwitchBooleanAction;\n}(Action);\n\nexport { SwitchBooleanAction };\n/**\n * This defines an action responsible to set a the state field of the target\n *  to a desired value once triggered.\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\n */\n\nvar SetStateAction =\n/** @class */\nfunction (_super) {\n  __extends(SetStateAction, _super);\n  /**\n   * Instantiate the action\n   * @param triggerOptions defines the trigger options\n   * @param target defines the object containing the state property\n   * @param value defines the value to store in the state field\n   * @param condition defines the trigger related conditions\n   */\n\n\n  function SetStateAction(triggerOptions, target, value, condition) {\n    var _this = _super.call(this, triggerOptions, condition) || this;\n\n    _this.value = value;\n    _this._target = target;\n    return _this;\n  }\n  /**\n   * Execute the action and store the value on the target state property.\n   */\n\n\n  SetStateAction.prototype.execute = function () {\n    this._target.state = this.value;\n  };\n  /**\n   * Serializes the actions and its related information.\n   * @param parent defines the object to serialize in\n   * @returns the serialized object\n   */\n\n\n  SetStateAction.prototype.serialize = function (parent) {\n    return _super.prototype._serialize.call(this, {\n      name: \"SetStateAction\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"value\",\n        value: this.value\n      }]\n    }, parent);\n  };\n\n  return SetStateAction;\n}(Action);\n\nexport { SetStateAction };\n/**\n * This defines an action responsible to set a property of the target\n *  to a desired value once triggered.\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\n */\n\nvar SetValueAction =\n/** @class */\nfunction (_super) {\n  __extends(SetValueAction, _super);\n  /**\n   * Instantiate the action\n   * @param triggerOptions defines the trigger options\n   * @param target defines the object containing the property\n   * @param propertyPath defines the path of the property to set in the target\n   * @param value defines the value to set in the property\n   * @param condition defines the trigger related conditions\n   */\n\n\n  function SetValueAction(triggerOptions, target, propertyPath, value, condition) {\n    var _this = _super.call(this, triggerOptions, condition) || this;\n\n    _this.propertyPath = propertyPath;\n    _this.value = value;\n    _this._target = _this._effectiveTarget = target;\n    return _this;\n  }\n  /** @hidden */\n\n\n  SetValueAction.prototype._prepare = function () {\n    this._effectiveTarget = this._getEffectiveTarget(this._effectiveTarget, this.propertyPath);\n    this._property = this._getProperty(this.propertyPath);\n  };\n  /**\n   * Execute the action and set the targeted property to the desired value.\n   */\n\n\n  SetValueAction.prototype.execute = function () {\n    this._effectiveTarget[this._property] = this.value;\n\n    if (this._target.markAsDirty) {\n      this._target.markAsDirty(this._property);\n    }\n  };\n  /**\n   * Serializes the actions and its related information.\n   * @param parent defines the object to serialize in\n   * @returns the serialized object\n   */\n\n\n  SetValueAction.prototype.serialize = function (parent) {\n    return _super.prototype._serialize.call(this, {\n      name: \"SetValueAction\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"propertyPath\",\n        value: this.propertyPath\n      }, {\n        name: \"value\",\n        value: Action._SerializeValueAsString(this.value)\n      }]\n    }, parent);\n  };\n\n  return SetValueAction;\n}(Action);\n\nexport { SetValueAction };\n/**\n * This defines an action responsible to increment the target value\n *  to a desired value once triggered.\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\n */\n\nvar IncrementValueAction =\n/** @class */\nfunction (_super) {\n  __extends(IncrementValueAction, _super);\n  /**\n   * Instantiate the action\n   * @param triggerOptions defines the trigger options\n   * @param target defines the object containing the property\n   * @param propertyPath defines the path of the property to increment in the target\n   * @param value defines the value value we should increment the property by\n   * @param condition defines the trigger related conditions\n   */\n\n\n  function IncrementValueAction(triggerOptions, target, propertyPath, value, condition) {\n    var _this = _super.call(this, triggerOptions, condition) || this;\n\n    _this.propertyPath = propertyPath;\n    _this.value = value;\n    _this._target = _this._effectiveTarget = target;\n    return _this;\n  }\n  /** @hidden */\n\n\n  IncrementValueAction.prototype._prepare = function () {\n    this._effectiveTarget = this._getEffectiveTarget(this._effectiveTarget, this.propertyPath);\n    this._property = this._getProperty(this.propertyPath);\n\n    if (typeof this._effectiveTarget[this._property] !== \"number\") {\n      Logger.Warn(\"Warning: IncrementValueAction can only be used with number values\");\n    }\n  };\n  /**\n   * Execute the action and increment the target of the value amount.\n   */\n\n\n  IncrementValueAction.prototype.execute = function () {\n    this._effectiveTarget[this._property] += this.value;\n\n    if (this._target.markAsDirty) {\n      this._target.markAsDirty(this._property);\n    }\n  };\n  /**\n   * Serializes the actions and its related information.\n   * @param parent defines the object to serialize in\n   * @returns the serialized object\n   */\n\n\n  IncrementValueAction.prototype.serialize = function (parent) {\n    return _super.prototype._serialize.call(this, {\n      name: \"IncrementValueAction\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"propertyPath\",\n        value: this.propertyPath\n      }, {\n        name: \"value\",\n        value: Action._SerializeValueAsString(this.value)\n      }]\n    }, parent);\n  };\n\n  return IncrementValueAction;\n}(Action);\n\nexport { IncrementValueAction };\n/**\n * This defines an action responsible to start an animation once triggered.\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\n */\n\nvar PlayAnimationAction =\n/** @class */\nfunction (_super) {\n  __extends(PlayAnimationAction, _super);\n  /**\n   * Instantiate the action\n   * @param triggerOptions defines the trigger options\n   * @param target defines the target animation or animation name\n   * @param from defines from where the animation should start (animation frame)\n   * @param to defines where the animation should stop (animation frame)\n   * @param loop defines if the animation should loop or stop after the first play\n   * @param condition defines the trigger related conditions\n   */\n\n\n  function PlayAnimationAction(triggerOptions, target, from, to, loop, condition) {\n    var _this = _super.call(this, triggerOptions, condition) || this;\n\n    _this.from = from;\n    _this.to = to;\n    _this.loop = loop;\n    _this._target = target;\n    return _this;\n  }\n  /** @hidden */\n\n\n  PlayAnimationAction.prototype._prepare = function () {};\n  /**\n   * Execute the action and play the animation.\n   */\n\n\n  PlayAnimationAction.prototype.execute = function () {\n    var scene = this._actionManager.getScene();\n\n    scene.beginAnimation(this._target, this.from, this.to, this.loop);\n  };\n  /**\n   * Serializes the actions and its related information.\n   * @param parent defines the object to serialize in\n   * @returns the serialized object\n   */\n\n\n  PlayAnimationAction.prototype.serialize = function (parent) {\n    return _super.prototype._serialize.call(this, {\n      name: \"PlayAnimationAction\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"from\",\n        value: String(this.from)\n      }, {\n        name: \"to\",\n        value: String(this.to)\n      }, {\n        name: \"loop\",\n        value: Action._SerializeValueAsString(this.loop) || false\n      }]\n    }, parent);\n  };\n\n  return PlayAnimationAction;\n}(Action);\n\nexport { PlayAnimationAction };\n/**\n * This defines an action responsible to stop an animation once triggered.\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\n */\n\nvar StopAnimationAction =\n/** @class */\nfunction (_super) {\n  __extends(StopAnimationAction, _super);\n  /**\n   * Instantiate the action\n   * @param triggerOptions defines the trigger options\n   * @param target defines the target animation or animation name\n   * @param condition defines the trigger related conditions\n   */\n\n\n  function StopAnimationAction(triggerOptions, target, condition) {\n    var _this = _super.call(this, triggerOptions, condition) || this;\n\n    _this._target = target;\n    return _this;\n  }\n  /** @hidden */\n\n\n  StopAnimationAction.prototype._prepare = function () {};\n  /**\n   * Execute the action and stop the animation.\n   */\n\n\n  StopAnimationAction.prototype.execute = function () {\n    var scene = this._actionManager.getScene();\n\n    scene.stopAnimation(this._target);\n  };\n  /**\n   * Serializes the actions and its related information.\n   * @param parent defines the object to serialize in\n   * @returns the serialized object\n   */\n\n\n  StopAnimationAction.prototype.serialize = function (parent) {\n    return _super.prototype._serialize.call(this, {\n      name: \"StopAnimationAction\",\n      properties: [Action._GetTargetProperty(this._target)]\n    }, parent);\n  };\n\n  return StopAnimationAction;\n}(Action);\n\nexport { StopAnimationAction };\n/**\n * This defines an action responsible that does nothing once triggered.\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\n */\n\nvar DoNothingAction =\n/** @class */\nfunction (_super) {\n  __extends(DoNothingAction, _super);\n  /**\n   * Instantiate the action\n   * @param triggerOptions defines the trigger options\n   * @param condition defines the trigger related conditions\n   */\n\n\n  function DoNothingAction(triggerOptions, condition) {\n    if (triggerOptions === void 0) {\n      triggerOptions = 0;\n    }\n\n    return _super.call(this, triggerOptions, condition) || this;\n  }\n  /**\n   * Execute the action and do nothing.\n   */\n\n\n  DoNothingAction.prototype.execute = function () {};\n  /**\n   * Serializes the actions and its related information.\n   * @param parent defines the object to serialize in\n   * @returns the serialized object\n   */\n\n\n  DoNothingAction.prototype.serialize = function (parent) {\n    return _super.prototype._serialize.call(this, {\n      name: \"DoNothingAction\",\n      properties: []\n    }, parent);\n  };\n\n  return DoNothingAction;\n}(Action);\n\nexport { DoNothingAction };\n/**\n * This defines an action responsible to trigger several actions once triggered.\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\n */\n\nvar CombineAction =\n/** @class */\nfunction (_super) {\n  __extends(CombineAction, _super);\n  /**\n   * Instantiate the action\n   * @param triggerOptions defines the trigger options\n   * @param children defines the list of aggregated animations to run\n   * @param condition defines the trigger related conditions\n   * @param enableChildrenConditions defines if the children actions conditions should be check before execution\n   */\n\n\n  function CombineAction(triggerOptions, children, condition, enableChildrenConditions) {\n    if (enableChildrenConditions === void 0) {\n      enableChildrenConditions = true;\n    }\n\n    var _this = _super.call(this, triggerOptions, condition) || this;\n\n    _this.children = children;\n    _this.enableChildrenConditions = enableChildrenConditions;\n    return _this;\n  }\n  /** @hidden */\n\n\n  CombineAction.prototype._prepare = function () {\n    for (var index = 0; index < this.children.length; index++) {\n      this.children[index]._actionManager = this._actionManager;\n\n      this.children[index]._prepare();\n    }\n  };\n  /**\n   * Execute the action and executes all the aggregated actions.\n   * @param evt\n   */\n\n\n  CombineAction.prototype.execute = function (evt) {\n    for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n      var action = _a[_i];\n\n      if (!this.enableChildrenConditions || action._evaluateConditionForCurrentFrame()) {\n        action.execute(evt);\n      }\n    }\n  };\n  /**\n   * Serializes the actions and its related information.\n   * @param parent defines the object to serialize in\n   * @returns the serialized object\n   */\n\n\n  CombineAction.prototype.serialize = function (parent) {\n    var serializationObject = _super.prototype._serialize.call(this, {\n      name: \"CombineAction\",\n      properties: [],\n      combine: []\n    }, parent);\n\n    for (var i = 0; i < this.children.length; i++) {\n      serializationObject.combine.push(this.children[i].serialize(null));\n    }\n\n    return serializationObject;\n  };\n\n  return CombineAction;\n}(Action);\n\nexport { CombineAction };\n/**\n * This defines an action responsible to run code (external event) once triggered.\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\n */\n\nvar ExecuteCodeAction =\n/** @class */\nfunction (_super) {\n  __extends(ExecuteCodeAction, _super);\n  /**\n   * Instantiate the action\n   * @param triggerOptions defines the trigger options\n   * @param func defines the callback function to run\n   * @param condition defines the trigger related conditions\n   */\n\n\n  function ExecuteCodeAction(triggerOptions, func, condition) {\n    var _this = _super.call(this, triggerOptions, condition) || this;\n\n    _this.func = func;\n    return _this;\n  }\n  /**\n   * Execute the action and run the attached code.\n   * @param evt\n   */\n\n\n  ExecuteCodeAction.prototype.execute = function (evt) {\n    this.func(evt);\n  };\n\n  return ExecuteCodeAction;\n}(Action);\n\nexport { ExecuteCodeAction };\n/**\n * This defines an action responsible to set the parent property of the target once triggered.\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\n */\n\nvar SetParentAction =\n/** @class */\nfunction (_super) {\n  __extends(SetParentAction, _super);\n  /**\n   * Instantiate the action\n   * @param triggerOptions defines the trigger options\n   * @param target defines the target containing the parent property\n   * @param parent defines from where the animation should start (animation frame)\n   * @param condition defines the trigger related conditions\n   */\n\n\n  function SetParentAction(triggerOptions, target, parent, condition) {\n    var _this = _super.call(this, triggerOptions, condition) || this;\n\n    _this._target = target;\n    _this._parent = parent;\n    return _this;\n  }\n  /** @hidden */\n\n\n  SetParentAction.prototype._prepare = function () {};\n  /**\n   * Execute the action and set the parent property.\n   */\n\n\n  SetParentAction.prototype.execute = function () {\n    if (this._target.parent === this._parent) {\n      return;\n    }\n\n    var invertParentWorldMatrix = this._parent.getWorldMatrix().clone();\n\n    invertParentWorldMatrix.invert();\n    this._target.position = Vector3.TransformCoordinates(this._target.position, invertParentWorldMatrix);\n    this._target.parent = this._parent;\n  };\n  /**\n   * Serializes the actions and its related information.\n   * @param parent defines the object to serialize in\n   * @returns the serialized object\n   */\n\n\n  SetParentAction.prototype.serialize = function (parent) {\n    return _super.prototype._serialize.call(this, {\n      name: \"SetParentAction\",\n      properties: [Action._GetTargetProperty(this._target), Action._GetTargetProperty(this._parent)]\n    }, parent);\n  };\n\n  return SetParentAction;\n}(Action);\n\nexport { SetParentAction };\nRegisterClass(\"BABYLON.SetParentAction\", SetParentAction);\nRegisterClass(\"BABYLON.ExecuteCodeAction\", ExecuteCodeAction);\nRegisterClass(\"BABYLON.DoNothingAction\", DoNothingAction);\nRegisterClass(\"BABYLON.StopAnimationAction\", StopAnimationAction);\nRegisterClass(\"BABYLON.PlayAnimationAction\", PlayAnimationAction);\nRegisterClass(\"BABYLON.IncrementValueAction\", IncrementValueAction);\nRegisterClass(\"BABYLON.SetValueAction\", SetValueAction);\nRegisterClass(\"BABYLON.SetStateAction\", SetStateAction);\nRegisterClass(\"BABYLON.SetParentAction\", SetParentAction);","map":{"version":3,"mappings":"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","names":["Logger","Vector3","Action","RegisterClass","__extends","triggerOptions","target","propertyPath","condition","_super","_this","_target","_effectiveTarget","SwitchBooleanAction","_getEffectiveTarget","_property","_getProperty","parent","_serialize","call","name","properties","_GetTargetProperty","value","SetStateAction","state","SetValueAction","markAsDirty","_SerializeValueAsString","IncrementValueAction","Warn","from","to","loop","PlayAnimationAction","scene","_actionManager","getScene","beginAnimation","String","StopAnimationAction","stopAnimation","DoNothingAction","children","enableChildrenConditions","CombineAction","index","length","_prepare","evt","_i","action","_evaluateConditionForCurrentFrame","execute","serializationObject","combine","i","push","serialize","func","ExecuteCodeAction","_parent","SetParentAction","invertParentWorldMatrix","getWorldMatrix","clone","invert","position","TransformCoordinates"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Actions/directActions.ts"],"sourcesContent":["import { Logger } from \"../Misc/logger\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Action } from \"./action\";\r\nimport type { Condition } from \"./condition\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\n\r\ndeclare type ActionEvent = import(\"./actionEvent\").ActionEvent;\r\n\r\n/**\r\n * This defines an action responsible to toggle a boolean once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\r\nexport class SwitchBooleanAction extends Action {\r\n    /**\r\n     * The path to the boolean property in the target object\r\n     */\r\n    public propertyPath: string;\r\n\r\n    private _target: any;\r\n    private _effectiveTarget: any;\r\n    private _property: string;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the object containing the boolean\r\n     * @param propertyPath defines the path to the boolean property in the target object\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, target: any, propertyPath: string, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this.propertyPath = propertyPath;\r\n        this._target = this._effectiveTarget = target;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _prepare(): void {\r\n        this._effectiveTarget = this._getEffectiveTarget(this._effectiveTarget, this.propertyPath);\r\n        this._property = this._getProperty(this.propertyPath);\r\n    }\r\n\r\n    /**\r\n     * Execute the action toggle the boolean value.\r\n     */\r\n    public execute(): void {\r\n        this._effectiveTarget[this._property] = !this._effectiveTarget[this._property];\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n        return super._serialize(\r\n            {\r\n                name: \"SwitchBooleanAction\",\r\n                properties: [Action._GetTargetProperty(this._target), { name: \"propertyPath\", value: this.propertyPath }],\r\n            },\r\n            parent\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to set a the state field of the target\r\n *  to a desired value once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\r\nexport class SetStateAction extends Action {\r\n    /**\r\n     * The value to store in the state field.\r\n     */\r\n    public value: string;\r\n\r\n    private _target: any;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the object containing the state property\r\n     * @param value defines the value to store in the state field\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, target: any, value: string, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this.value = value;\r\n        this._target = target;\r\n    }\r\n\r\n    /**\r\n     * Execute the action and store the value on the target state property.\r\n     */\r\n    public execute(): void {\r\n        this._target.state = this.value;\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n        return super._serialize(\r\n            {\r\n                name: \"SetStateAction\",\r\n                properties: [Action._GetTargetProperty(this._target), { name: \"value\", value: this.value }],\r\n            },\r\n            parent\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to set a property of the target\r\n *  to a desired value once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\r\nexport class SetValueAction extends Action {\r\n    /**\r\n     * The path of the property to set in the target.\r\n     */\r\n    public propertyPath: string;\r\n\r\n    /**\r\n     * The value to set in the property\r\n     */\r\n    public value: any;\r\n\r\n    private _target: any;\r\n    private _effectiveTarget: any;\r\n    private _property: string;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the object containing the property\r\n     * @param propertyPath defines the path of the property to set in the target\r\n     * @param value defines the value to set in the property\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, target: any, propertyPath: string, value: any, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this.propertyPath = propertyPath;\r\n        this.value = value;\r\n        this._target = this._effectiveTarget = target;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _prepare(): void {\r\n        this._effectiveTarget = this._getEffectiveTarget(this._effectiveTarget, this.propertyPath);\r\n        this._property = this._getProperty(this.propertyPath);\r\n    }\r\n\r\n    /**\r\n     * Execute the action and set the targeted property to the desired value.\r\n     */\r\n    public execute(): void {\r\n        this._effectiveTarget[this._property] = this.value;\r\n\r\n        if (this._target.markAsDirty) {\r\n            this._target.markAsDirty(this._property);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n        return super._serialize(\r\n            {\r\n                name: \"SetValueAction\",\r\n                properties: [\r\n                    Action._GetTargetProperty(this._target),\r\n                    { name: \"propertyPath\", value: this.propertyPath },\r\n                    { name: \"value\", value: Action._SerializeValueAsString(this.value) },\r\n                ],\r\n            },\r\n            parent\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to increment the target value\r\n *  to a desired value once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\r\nexport class IncrementValueAction extends Action {\r\n    /**\r\n     * The path of the property to increment in the target.\r\n     */\r\n    public propertyPath: string;\r\n\r\n    /**\r\n     * The value we should increment the property by.\r\n     */\r\n    public value: any;\r\n\r\n    private _target: any;\r\n    private _effectiveTarget: any;\r\n    private _property: string;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the object containing the property\r\n     * @param propertyPath defines the path of the property to increment in the target\r\n     * @param value defines the value value we should increment the property by\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, target: any, propertyPath: string, value: any, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this.propertyPath = propertyPath;\r\n        this.value = value;\r\n        this._target = this._effectiveTarget = target;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _prepare(): void {\r\n        this._effectiveTarget = this._getEffectiveTarget(this._effectiveTarget, this.propertyPath);\r\n        this._property = this._getProperty(this.propertyPath);\r\n\r\n        if (typeof this._effectiveTarget[this._property] !== \"number\") {\r\n            Logger.Warn(\"Warning: IncrementValueAction can only be used with number values\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute the action and increment the target of the value amount.\r\n     */\r\n    public execute(): void {\r\n        this._effectiveTarget[this._property] += this.value;\r\n\r\n        if (this._target.markAsDirty) {\r\n            this._target.markAsDirty(this._property);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n        return super._serialize(\r\n            {\r\n                name: \"IncrementValueAction\",\r\n                properties: [\r\n                    Action._GetTargetProperty(this._target),\r\n                    { name: \"propertyPath\", value: this.propertyPath },\r\n                    { name: \"value\", value: Action._SerializeValueAsString(this.value) },\r\n                ],\r\n            },\r\n            parent\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to start an animation once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\r\nexport class PlayAnimationAction extends Action {\r\n    /**\r\n     * Where the animation should start (animation frame)\r\n     */\r\n    public from: number;\r\n\r\n    /**\r\n     * Where the animation should stop (animation frame)\r\n     */\r\n    public to: number;\r\n\r\n    /**\r\n     * Define if the animation should loop or stop after the first play.\r\n     */\r\n    public loop?: boolean;\r\n\r\n    private _target: any;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the target animation or animation name\r\n     * @param from defines from where the animation should start (animation frame)\r\n     * @param to defines where the animation should stop (animation frame)\r\n     * @param loop defines if the animation should loop or stop after the first play\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, target: any, from: number, to: number, loop?: boolean, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this.from = from;\r\n        this.to = to;\r\n        this.loop = loop;\r\n        this._target = target;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _prepare(): void {}\r\n\r\n    /**\r\n     * Execute the action and play the animation.\r\n     */\r\n    public execute(): void {\r\n        const scene = this._actionManager.getScene();\r\n        scene.beginAnimation(this._target, this.from, this.to, this.loop);\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n        return super._serialize(\r\n            {\r\n                name: \"PlayAnimationAction\",\r\n                properties: [\r\n                    Action._GetTargetProperty(this._target),\r\n                    { name: \"from\", value: String(this.from) },\r\n                    { name: \"to\", value: String(this.to) },\r\n                    { name: \"loop\", value: Action._SerializeValueAsString(this.loop) || false },\r\n                ],\r\n            },\r\n            parent\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to stop an animation once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\r\nexport class StopAnimationAction extends Action {\r\n    private _target: any;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the target animation or animation name\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, target: any, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this._target = target;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _prepare(): void {}\r\n\r\n    /**\r\n     * Execute the action and stop the animation.\r\n     */\r\n    public execute(): void {\r\n        const scene = this._actionManager.getScene();\r\n        scene.stopAnimation(this._target);\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n        return super._serialize(\r\n            {\r\n                name: \"StopAnimationAction\",\r\n                properties: [Action._GetTargetProperty(this._target)],\r\n            },\r\n            parent\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible that does nothing once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\r\nexport class DoNothingAction extends Action {\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any = Constants.ACTION_NothingTrigger, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n    }\r\n\r\n    /**\r\n     * Execute the action and do nothing.\r\n     */\r\n    public execute(): void {}\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n        return super._serialize(\r\n            {\r\n                name: \"DoNothingAction\",\r\n                properties: [],\r\n            },\r\n            parent\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to trigger several actions once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\r\nexport class CombineAction extends Action {\r\n    /**\r\n     * The list of aggregated animations to run.\r\n     */\r\n    public children: Action[];\r\n\r\n    /**\r\n     * defines if the children actions conditions should be check before execution\r\n     */\r\n    public enableChildrenConditions: boolean;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param children defines the list of aggregated animations to run\r\n     * @param condition defines the trigger related conditions\r\n     * @param enableChildrenConditions defines if the children actions conditions should be check before execution\r\n     */\r\n    constructor(triggerOptions: any, children: Action[], condition?: Condition, enableChildrenConditions = true) {\r\n        super(triggerOptions, condition);\r\n        this.children = children;\r\n        this.enableChildrenConditions = enableChildrenConditions;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _prepare(): void {\r\n        for (let index = 0; index < this.children.length; index++) {\r\n            this.children[index]._actionManager = this._actionManager;\r\n            this.children[index]._prepare();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute the action and executes all the aggregated actions.\r\n     * @param evt\r\n     */\r\n    public execute(evt: ActionEvent): void {\r\n        for (const action of this.children) {\r\n            if (!this.enableChildrenConditions || action._evaluateConditionForCurrentFrame()) {\r\n                action.execute(evt);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n        const serializationObject = super._serialize(\r\n            {\r\n                name: \"CombineAction\",\r\n                properties: [],\r\n                combine: [],\r\n            },\r\n            parent\r\n        );\r\n\r\n        for (let i = 0; i < this.children.length; i++) {\r\n            serializationObject.combine.push(this.children[i].serialize(null));\r\n        }\r\n\r\n        return serializationObject;\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to run code (external event) once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\r\nexport class ExecuteCodeAction extends Action {\r\n    /**\r\n     * The callback function to run.\r\n     */\r\n    public func: (evt: ActionEvent) => void;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param func defines the callback function to run\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, func: (evt: ActionEvent) => void, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this.func = func;\r\n    }\r\n\r\n    /**\r\n     * Execute the action and run the attached code.\r\n     * @param evt\r\n     */\r\n    public execute(evt: ActionEvent): void {\r\n        this.func(evt);\r\n    }\r\n}\r\n\r\n/**\r\n * This defines an action responsible to set the parent property of the target once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\r\nexport class SetParentAction extends Action {\r\n    private _parent: any;\r\n    private _target: any;\r\n\r\n    /**\r\n     * Instantiate the action\r\n     * @param triggerOptions defines the trigger options\r\n     * @param target defines the target containing the parent property\r\n     * @param parent defines from where the animation should start (animation frame)\r\n     * @param condition defines the trigger related conditions\r\n     */\r\n    constructor(triggerOptions: any, target: any, parent: any, condition?: Condition) {\r\n        super(triggerOptions, condition);\r\n        this._target = target;\r\n        this._parent = parent;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _prepare(): void {}\r\n\r\n    /**\r\n     * Execute the action and set the parent property.\r\n     */\r\n    public execute(): void {\r\n        if (this._target.parent === this._parent) {\r\n            return;\r\n        }\r\n\r\n        const invertParentWorldMatrix = this._parent.getWorldMatrix().clone();\r\n        invertParentWorldMatrix.invert();\r\n\r\n        this._target.position = Vector3.TransformCoordinates(this._target.position, invertParentWorldMatrix);\r\n\r\n        this._target.parent = this._parent;\r\n    }\r\n\r\n    /**\r\n     * Serializes the actions and its related information.\r\n     * @param parent defines the object to serialize in\r\n     * @returns the serialized object\r\n     */\r\n    public serialize(parent: any): any {\r\n        return super._serialize(\r\n            {\r\n                name: \"SetParentAction\",\r\n                properties: [Action._GetTargetProperty(this._target), Action._GetTargetProperty(this._parent)],\r\n            },\r\n            parent\r\n        );\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.SetParentAction\", SetParentAction);\r\nRegisterClass(\"BABYLON.ExecuteCodeAction\", ExecuteCodeAction);\r\nRegisterClass(\"BABYLON.DoNothingAction\", DoNothingAction);\r\nRegisterClass(\"BABYLON.StopAnimationAction\", StopAnimationAction);\r\nRegisterClass(\"BABYLON.PlayAnimationAction\", PlayAnimationAction);\r\nRegisterClass(\"BABYLON.IncrementValueAction\", IncrementValueAction);\r\nRegisterClass(\"BABYLON.SetValueAction\", SetValueAction);\r\nRegisterClass(\"BABYLON.SetStateAction\", SetStateAction);\r\nRegisterClass(\"BABYLON.SetParentAction\", SetParentAction);\r\n"]},"metadata":{},"sourceType":"module"}