{"ast":null,"code":"import \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { __extends } from \"tslib\";\nimport { GLTFLoaderExtension, GLTFLoader, GLTFLoaderBase } from \"./glTFLoader.js\";\nimport { GLTFUtils } from \"./glTFLoaderUtils.js\";\nimport { EComponentType } from \"./glTFLoaderInterfaces.js\";\nvar BinaryExtensionBufferName = \"binary_glTF\";\n/** @hidden */\n\nvar GLTFBinaryExtension =\n/** @class */\nfunction (_super) {\n  __extends(GLTFBinaryExtension, _super);\n\n  function GLTFBinaryExtension() {\n    return _super.call(this, \"KHR_binary_glTF\") || this;\n  }\n\n  GLTFBinaryExtension.prototype.loadRuntimeAsync = function (scene, data, rootUrl, onSuccess) {\n    var extensionsUsed = data.json.extensionsUsed;\n\n    if (!extensionsUsed || extensionsUsed.indexOf(this.name) === -1 || !data.bin) {\n      return false;\n    }\n\n    this._bin = data.bin;\n    onSuccess(GLTFLoaderBase.CreateRuntime(data.json, scene, rootUrl));\n    return true;\n  };\n\n  GLTFBinaryExtension.prototype.loadBufferAsync = function (gltfRuntime, id, onSuccess, onError) {\n    if (gltfRuntime.extensionsUsed.indexOf(this.name) === -1) {\n      return false;\n    }\n\n    if (id !== BinaryExtensionBufferName) {\n      return false;\n    }\n\n    this._bin.readAsync(0, this._bin.byteLength).then(onSuccess, function (error) {\n      return onError(error.message);\n    });\n\n    return true;\n  };\n\n  GLTFBinaryExtension.prototype.loadTextureBufferAsync = function (gltfRuntime, id, onSuccess) {\n    var texture = gltfRuntime.textures[id];\n    var source = gltfRuntime.images[texture.source];\n\n    if (!source.extensions || !(this.name in source.extensions)) {\n      return false;\n    }\n\n    var sourceExt = source.extensions[this.name];\n    var bufferView = gltfRuntime.bufferViews[sourceExt.bufferView];\n    var buffer = GLTFUtils.GetBufferFromBufferView(gltfRuntime, bufferView, 0, bufferView.byteLength, EComponentType.UNSIGNED_BYTE);\n    onSuccess(buffer);\n    return true;\n  };\n\n  GLTFBinaryExtension.prototype.loadShaderStringAsync = function (gltfRuntime, id, onSuccess) {\n    var shader = gltfRuntime.shaders[id];\n\n    if (!shader.extensions || !(this.name in shader.extensions)) {\n      return false;\n    }\n\n    var binaryExtensionShader = shader.extensions[this.name];\n    var bufferView = gltfRuntime.bufferViews[binaryExtensionShader.bufferView];\n    var shaderBytes = GLTFUtils.GetBufferFromBufferView(gltfRuntime, bufferView, 0, bufferView.byteLength, EComponentType.UNSIGNED_BYTE);\n    setTimeout(function () {\n      var shaderString = GLTFUtils.DecodeBufferToText(shaderBytes);\n      onSuccess(shaderString);\n    });\n    return true;\n  };\n\n  return GLTFBinaryExtension;\n}(GLTFLoaderExtension);\n\nexport { GLTFBinaryExtension };\nGLTFLoader.RegisterExtension(new GLTFBinaryExtension());","map":{"version":3,"mappings":"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","names":["GLTFLoaderExtension","GLTFLoader","GLTFLoaderBase","GLTFUtils","EComponentType","BinaryExtensionBufferName","__extends","_super","GLTFBinaryExtension","scene","data","rootUrl","onSuccess","extensionsUsed","json","indexOf","name","bin","_bin","CreateRuntime","gltfRuntime","id","onError","readAsync","byteLength","then","error","message","texture","textures","source","images","extensions","sourceExt","bufferView","bufferViews","buffer","GetBufferFromBufferView","UNSIGNED_BYTE","shader","shaders","binaryExtensionShader","shaderBytes","setTimeout","shaderString","DecodeBufferToText","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../lts/loaders/generated/glTF/1.0/glTFBinaryExtension.ts"],"sourcesContent":["import { GLTFLoaderExtension, GLTFLoader, GLTFLoaderBase } from \"./glTFLoader\";\r\nimport { GLTFUtils } from \"./glTFLoaderUtils\";\r\nimport type { Scene } from \"core/scene\";\r\nimport type { IGLTFLoaderData } from \"../glTFFileLoader\";\r\nimport type { IGLTFRuntime, IGLTFTexture, IGLTFImage, IGLTFBufferView, IGLTFShader } from \"./glTFLoaderInterfaces\";\r\nimport { EComponentType } from \"./glTFLoaderInterfaces\";\r\n\r\nimport type { IDataBuffer } from \"core/Misc/dataReader\";\r\n\r\nconst BinaryExtensionBufferName = \"binary_glTF\";\r\n\r\ninterface IGLTFBinaryExtensionShader {\r\n    bufferView: string;\r\n}\r\n\r\ninterface IGLTFBinaryExtensionImage {\r\n    bufferView: string;\r\n    mimeType: string;\r\n    height: number;\r\n    width: number;\r\n}\r\n\r\n/** @hidden */\r\nexport class GLTFBinaryExtension extends GLTFLoaderExtension {\r\n    private _bin: IDataBuffer;\r\n\r\n    public constructor() {\r\n        super(\"KHR_binary_glTF\");\r\n    }\r\n\r\n    public loadRuntimeAsync(scene: Scene, data: IGLTFLoaderData, rootUrl: string, onSuccess: (gltfRuntime: IGLTFRuntime) => void): boolean {\r\n        const extensionsUsed = (<any>data.json).extensionsUsed;\r\n        if (!extensionsUsed || extensionsUsed.indexOf(this.name) === -1 || !data.bin) {\r\n            return false;\r\n        }\r\n\r\n        this._bin = data.bin;\r\n        onSuccess(GLTFLoaderBase.CreateRuntime(data.json, scene, rootUrl));\r\n        return true;\r\n    }\r\n\r\n    public loadBufferAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (buffer: ArrayBufferView) => void, onError: (message: string) => void): boolean {\r\n        if (gltfRuntime.extensionsUsed.indexOf(this.name) === -1) {\r\n            return false;\r\n        }\r\n\r\n        if (id !== BinaryExtensionBufferName) {\r\n            return false;\r\n        }\r\n\r\n        this._bin.readAsync(0, this._bin.byteLength).then(onSuccess, (error) => onError(error.message));\r\n        return true;\r\n    }\r\n\r\n    public loadTextureBufferAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (buffer: ArrayBufferView) => void): boolean {\r\n        const texture: IGLTFTexture = gltfRuntime.textures[id];\r\n        const source: IGLTFImage = gltfRuntime.images[texture.source];\r\n        if (!source.extensions || !(this.name in source.extensions)) {\r\n            return false;\r\n        }\r\n\r\n        const sourceExt: IGLTFBinaryExtensionImage = source.extensions[this.name];\r\n        const bufferView: IGLTFBufferView = gltfRuntime.bufferViews[sourceExt.bufferView];\r\n        const buffer = GLTFUtils.GetBufferFromBufferView(gltfRuntime, bufferView, 0, bufferView.byteLength, EComponentType.UNSIGNED_BYTE);\r\n        onSuccess(buffer);\r\n        return true;\r\n    }\r\n\r\n    public loadShaderStringAsync(gltfRuntime: IGLTFRuntime, id: string, onSuccess: (shaderString: string) => void): boolean {\r\n        const shader: IGLTFShader = gltfRuntime.shaders[id];\r\n        if (!shader.extensions || !(this.name in shader.extensions)) {\r\n            return false;\r\n        }\r\n\r\n        const binaryExtensionShader: IGLTFBinaryExtensionShader = shader.extensions[this.name];\r\n        const bufferView: IGLTFBufferView = gltfRuntime.bufferViews[binaryExtensionShader.bufferView];\r\n        const shaderBytes = GLTFUtils.GetBufferFromBufferView(gltfRuntime, bufferView, 0, bufferView.byteLength, EComponentType.UNSIGNED_BYTE);\r\n\r\n        setTimeout(() => {\r\n            const shaderString = GLTFUtils.DecodeBufferToText(shaderBytes);\r\n            onSuccess(shaderString);\r\n        });\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(new GLTFBinaryExtension());\r\n"]},"metadata":{},"sourceType":"module"}