{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/convolution.fragment.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { serialize, SerializationHelper } from \"../Misc/decorators.js\";\n/**\n * The ConvolutionPostProcess applies a 3x3 kernel to every pixel of the\n * input texture to perform effects such as edge detection or sharpening\n * See http://en.wikipedia.org/wiki/Kernel_(image_processing)\n */\n\nvar ConvolutionPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(ConvolutionPostProcess, _super);\n  /**\n   * Creates a new instance ConvolutionPostProcess\n   * @param name The name of the effect.\n   * @param kernel Array of 9 values corresponding to the 3x3 kernel to be applied\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   * @param textureType Type of textures used when performing the post process. (default: 0)\n   */\n\n\n  function ConvolutionPostProcess(name, kernel, options, camera, samplingMode, engine, reusable, textureType) {\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    var _this = _super.call(this, name, \"convolution\", [\"kernel\", \"screenSize\"], null, options, camera, samplingMode, engine, reusable, null, textureType) || this;\n\n    _this.kernel = kernel;\n\n    _this.onApply = function (effect) {\n      effect.setFloat2(\"screenSize\", _this.width, _this.height);\n      effect.setArray(\"kernel\", _this.kernel);\n    };\n\n    return _this;\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"ConvolutionPostProcess\" string\n   */\n\n\n  ConvolutionPostProcess.prototype.getClassName = function () {\n    return \"ConvolutionPostProcess\";\n  };\n  /**\n   * @param parsedPostProcess\n   * @param targetCamera\n   * @param scene\n   * @param rootUrl\n   * @hidden\n   */\n\n\n  ConvolutionPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new ConvolutionPostProcess(parsedPostProcess.name, parsedPostProcess.kernel, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable, parsedPostProcess.textureType);\n    }, parsedPostProcess, scene, rootUrl);\n  }; // Statics\n\n  /**\n   * Edge detection 0 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\n   */\n\n\n  ConvolutionPostProcess.EdgeDetect0Kernel = [1, 0, -1, 0, 0, 0, -1, 0, 1];\n  /**\n   * Edge detection 1 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\n   */\n\n  ConvolutionPostProcess.EdgeDetect1Kernel = [0, 1, 0, 1, -4, 1, 0, 1, 0];\n  /**\n   * Edge detection 2 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\n   */\n\n  ConvolutionPostProcess.EdgeDetect2Kernel = [-1, -1, -1, -1, 8, -1, -1, -1, -1];\n  /**\n   * Kernel to sharpen an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\n   */\n\n  ConvolutionPostProcess.SharpenKernel = [0, -1, 0, -1, 5, -1, 0, -1, 0];\n  /**\n   * Kernel to emboss an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\n   */\n\n  ConvolutionPostProcess.EmbossKernel = [-2, -1, 0, -1, 1, 1, 0, 1, 2];\n  /**\n   * Kernel to blur an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\n   */\n\n  ConvolutionPostProcess.GaussianKernel = [0, 1, 0, 1, 1, 1, 0, 1, 0];\n\n  __decorate([serialize()], ConvolutionPostProcess.prototype, \"kernel\", void 0);\n\n  return ConvolutionPostProcess;\n}(PostProcess);\n\nexport { ConvolutionPostProcess };\nRegisterClass(\"BABYLON.ConvolutionPostProcess\", ConvolutionPostProcess);","map":{"version":3,"mappings":"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","names":["PostProcess","RegisterClass","serialize","SerializationHelper","__extends","name","kernel","options","camera","samplingMode","engine","reusable","textureType","_super","_this","onApply","effect","setFloat2","width","height","setArray","ConvolutionPostProcess","parsedPostProcess","targetCamera","scene","rootUrl","Parse","renderTargetSamplingMode","getEngine","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/PostProcesses/convolutionPostProcess.ts"],"sourcesContent":["import type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/convolution.fragment\";\r\nimport { RegisterClass } from \"../Misc/typeStore\";\r\nimport { serialize, SerializationHelper } from \"../Misc/decorators\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * The ConvolutionPostProcess applies a 3x3 kernel to every pixel of the\r\n * input texture to perform effects such as edge detection or sharpening\r\n * See http://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n */\r\nexport class ConvolutionPostProcess extends PostProcess {\r\n    /** Array of 9 values corresponding to the 3x3 kernel to be applied */\r\n    @serialize()\r\n    public kernel: number[];\r\n\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"ConvolutionPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"ConvolutionPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance ConvolutionPostProcess\r\n     * @param name The name of the effect.\r\n     * @param kernel Array of 9 values corresponding to the 3x3 kernel to be applied\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of textures used when performing the post process. (default: 0)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        kernel: number[],\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT\r\n    ) {\r\n        super(name, \"convolution\", [\"kernel\", \"screenSize\"], null, options, camera, samplingMode, engine, reusable, null, textureType);\r\n        this.kernel = kernel;\r\n        this.onApply = (effect: Effect) => {\r\n            effect.setFloat2(\"screenSize\", this.width, this.height);\r\n            effect.setArray(\"kernel\", this.kernel);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @param parsedPostProcess\r\n     * @param targetCamera\r\n     * @param scene\r\n     * @param rootUrl\r\n     * @hidden\r\n     */\r\n    public static _Parse(parsedPostProcess: any, targetCamera: Camera, scene: Scene, rootUrl: string): Nullable<ConvolutionPostProcess> {\r\n        return SerializationHelper.Parse(\r\n            () => {\r\n                return new ConvolutionPostProcess(\r\n                    parsedPostProcess.name,\r\n                    parsedPostProcess.kernel,\r\n                    parsedPostProcess.options,\r\n                    targetCamera,\r\n                    parsedPostProcess.renderTargetSamplingMode,\r\n                    scene.getEngine(),\r\n                    parsedPostProcess.reusable,\r\n                    parsedPostProcess.textureType\r\n                );\r\n            },\r\n            parsedPostProcess,\r\n            scene,\r\n            rootUrl\r\n        );\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Edge detection 0 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static EdgeDetect0Kernel = [1, 0, -1, 0, 0, 0, -1, 0, 1];\r\n    /**\r\n     * Edge detection 1 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static EdgeDetect1Kernel = [0, 1, 0, 1, -4, 1, 0, 1, 0];\r\n    /**\r\n     * Edge detection 2 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static EdgeDetect2Kernel = [-1, -1, -1, -1, 8, -1, -1, -1, -1];\r\n    /**\r\n     * Kernel to sharpen an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static SharpenKernel = [0, -1, 0, -1, 5, -1, 0, -1, 0];\r\n    /**\r\n     * Kernel to emboss an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static EmbossKernel = [-2, -1, 0, -1, 1, 1, 0, 1, 2];\r\n    /**\r\n     * Kernel to blur an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n     */\r\n    public static GaussianKernel = [0, 1, 0, 1, 1, 1, 0, 1, 0];\r\n}\r\n\r\nRegisterClass(\"BABYLON.ConvolutionPostProcess\", ConvolutionPostProcess);\r\n"]},"metadata":{},"sourceType":"module"}