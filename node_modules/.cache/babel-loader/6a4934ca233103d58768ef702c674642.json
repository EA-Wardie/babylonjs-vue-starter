{"ast":null,"code":"import \"core-js/modules/es.date.now.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport { Observable } from \"../Misc/observable.js\";\n/**\n * The current state of the timer\n */\n\nexport var TimerState;\n\n(function (TimerState) {\n  /**\n   * Timer initialized, not yet started\n   */\n  TimerState[TimerState[\"INIT\"] = 0] = \"INIT\";\n  /**\n   * Timer started and counting\n   */\n\n  TimerState[TimerState[\"STARTED\"] = 1] = \"STARTED\";\n  /**\n   * Timer ended (whether aborted or time reached)\n   */\n\n  TimerState[TimerState[\"ENDED\"] = 2] = \"ENDED\";\n})(TimerState || (TimerState = {}));\n/**\n * A simple version of the timer. Will take options and start the timer immediately after calling it\n *\n * @param options options with which to initialize this timer\n */\n\n\nexport function setAndStartTimer(options) {\n  var _a;\n\n  var timer = 0;\n  var startTime = Date.now();\n  options.observableParameters = (_a = options.observableParameters) !== null && _a !== void 0 ? _a : {};\n  var observer = options.contextObservable.add(function (payload) {\n    var now = Date.now();\n    timer = now - startTime;\n    var data = {\n      startTime: startTime,\n      currentTime: now,\n      deltaTime: timer,\n      completeRate: timer / options.timeout,\n      payload: payload\n    };\n    options.onTick && options.onTick(data);\n\n    if (options.breakCondition && options.breakCondition()) {\n      options.contextObservable.remove(observer);\n      options.onAborted && options.onAborted(data);\n    }\n\n    if (timer >= options.timeout) {\n      options.contextObservable.remove(observer);\n      options.onEnded && options.onEnded(data);\n    }\n  }, options.observableParameters.mask, options.observableParameters.insertFirst, options.observableParameters.scope);\n  return observer;\n}\n/**\n * An advanced implementation of a timer class\n */\n\nvar AdvancedTimer =\n/** @class */\nfunction () {\n  /**\n   * Will construct a new advanced timer based on the options provided. Timer will not start until start() is called.\n   * @param options construction options for this advanced timer\n   */\n  function AdvancedTimer(options) {\n    var _this = this;\n\n    var _a, _b;\n    /**\n     * Will notify each time the timer calculates the remaining time\n     */\n\n\n    this.onEachCountObservable = new Observable();\n    /**\n     * Will trigger when the timer was aborted due to the break condition\n     */\n\n    this.onTimerAbortedObservable = new Observable();\n    /**\n     * Will trigger when the timer ended successfully\n     */\n\n    this.onTimerEndedObservable = new Observable();\n    /**\n     * Will trigger when the timer state has changed\n     */\n\n    this.onStateChangedObservable = new Observable();\n    this._observer = null;\n    this._breakOnNextTick = false;\n\n    this._tick = function (payload) {\n      var now = Date.now();\n      _this._timer = now - _this._startTime;\n      var data = {\n        startTime: _this._startTime,\n        currentTime: now,\n        deltaTime: _this._timer,\n        completeRate: _this._timer / _this._timeToEnd,\n        payload: payload\n      };\n\n      var shouldBreak = _this._breakOnNextTick || _this._breakCondition(data);\n\n      if (shouldBreak || _this._timer >= _this._timeToEnd) {\n        _this._stop(data, shouldBreak);\n      } else {\n        _this.onEachCountObservable.notifyObservers(data);\n      }\n    };\n\n    this._setState(TimerState.INIT);\n\n    this._contextObservable = options.contextObservable;\n    this._observableParameters = (_a = options.observableParameters) !== null && _a !== void 0 ? _a : {};\n    this._breakCondition = (_b = options.breakCondition) !== null && _b !== void 0 ? _b : function () {\n      return false;\n    };\n    this._timeToEnd = options.timeout;\n\n    if (options.onEnded) {\n      this.onTimerEndedObservable.add(options.onEnded);\n    }\n\n    if (options.onTick) {\n      this.onEachCountObservable.add(options.onTick);\n    }\n\n    if (options.onAborted) {\n      this.onTimerAbortedObservable.add(options.onAborted);\n    }\n  }\n\n  Object.defineProperty(AdvancedTimer.prototype, \"breakCondition\", {\n    /**\n     * set a breaking condition for this timer. Default is to never break during count\n     * @param predicate the new break condition. Returns true to break, false otherwise\n     */\n    set: function set(predicate) {\n      this._breakCondition = predicate;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Reset ALL associated observables in this advanced timer\n   */\n\n  AdvancedTimer.prototype.clearObservables = function () {\n    this.onEachCountObservable.clear();\n    this.onTimerAbortedObservable.clear();\n    this.onTimerEndedObservable.clear();\n    this.onStateChangedObservable.clear();\n  };\n  /**\n   * Will start a new iteration of this timer. Only one instance of this timer can run at a time.\n   *\n   * @param timeToEnd how much time to measure until timer ended\n   */\n\n\n  AdvancedTimer.prototype.start = function (timeToEnd) {\n    if (timeToEnd === void 0) {\n      timeToEnd = this._timeToEnd;\n    }\n\n    if (this._state === TimerState.STARTED) {\n      throw new Error(\"Timer already started. Please stop it before starting again\");\n    }\n\n    this._timeToEnd = timeToEnd;\n    this._startTime = Date.now();\n    this._timer = 0;\n    this._observer = this._contextObservable.add(this._tick, this._observableParameters.mask, this._observableParameters.insertFirst, this._observableParameters.scope);\n\n    this._setState(TimerState.STARTED);\n  };\n  /**\n   * Will force a stop on the next tick.\n   */\n\n\n  AdvancedTimer.prototype.stop = function () {\n    if (this._state !== TimerState.STARTED) {\n      return;\n    }\n\n    this._breakOnNextTick = true;\n  };\n  /**\n   * Dispose this timer, clearing all resources\n   */\n\n\n  AdvancedTimer.prototype.dispose = function () {\n    if (this._observer) {\n      this._contextObservable.remove(this._observer);\n    }\n\n    this.clearObservables();\n  };\n\n  AdvancedTimer.prototype._setState = function (newState) {\n    this._state = newState;\n    this.onStateChangedObservable.notifyObservers(this._state);\n  };\n\n  AdvancedTimer.prototype._stop = function (data, aborted) {\n    if (aborted === void 0) {\n      aborted = false;\n    }\n\n    this._contextObservable.remove(this._observer);\n\n    this._setState(TimerState.ENDED);\n\n    if (aborted) {\n      this.onTimerAbortedObservable.notifyObservers(data);\n    } else {\n      this.onTimerEndedObservable.notifyObservers(data);\n    }\n  };\n\n  return AdvancedTimer;\n}();\n\nexport { AdvancedTimer };","map":{"version":3,"mappings":"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","names":["Observable","TimerState","setAndStartTimer","options","timer","startTime","Date","now","observableParameters","_a","observer","contextObservable","add","payload","data","currentTime","deltaTime","completeRate","timeout","onTick","breakCondition","remove","onAborted","onEnded","mask","insertFirst","scope","_this","_timer","_startTime","_timeToEnd","shouldBreak","_breakOnNextTick","_breakCondition","_stop","onEachCountObservable","notifyObservers","_setState","INIT","_contextObservable","_observableParameters","_b","onTimerEndedObservable","onTimerAbortedObservable","Object","AdvancedTimer","predicate","clear","onStateChangedObservable","timeToEnd","_state","STARTED","Error","_observer","_tick","clearObservables","newState","aborted","ENDED"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Misc/timer.ts"],"sourcesContent":["import type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { IDisposable } from \"../scene\";\r\n\r\n/**\r\n * Construction options for a timer\r\n */\r\nexport interface ITimerOptions<T> {\r\n    /**\r\n     * Time-to-end\r\n     */\r\n    timeout: number;\r\n    /**\r\n     * The context observable is used to calculate time deltas and provides the context of the timer's callbacks. Will usually be OnBeforeRenderObservable.\r\n     * Countdown calculation is done ONLY when the observable is notifying its observers, meaning that if\r\n     * you choose an observable that doesn't trigger too often, the wait time might extend further than the requested max time\r\n     */\r\n    contextObservable: Observable<T>;\r\n    /**\r\n     * Optional parameters when adding an observer to the observable\r\n     */\r\n    observableParameters?: {\r\n        mask?: number;\r\n        insertFirst?: boolean;\r\n        scope?: any;\r\n    };\r\n    /**\r\n     * An optional break condition that will stop the times prematurely. In this case onEnded will not be triggered!\r\n     */\r\n    breakCondition?: (data?: ITimerData<T>) => boolean;\r\n    /**\r\n     * Will be triggered when the time condition has met\r\n     */\r\n    onEnded?: (data: ITimerData<any>) => void;\r\n    /**\r\n     * Will be triggered when the break condition has met (prematurely ended)\r\n     */\r\n    onAborted?: (data: ITimerData<any>) => void;\r\n    /**\r\n     * Optional function to execute on each tick (or count)\r\n     */\r\n    onTick?: (data: ITimerData<any>) => void;\r\n}\r\n\r\n/**\r\n * An interface defining the data sent by the timer\r\n */\r\nexport interface ITimerData<T> {\r\n    /**\r\n     * When did it start\r\n     */\r\n    startTime: number;\r\n    /**\r\n     * Time now\r\n     */\r\n    currentTime: number;\r\n    /**\r\n     * Time passed since started\r\n     */\r\n    deltaTime: number;\r\n    /**\r\n     * How much is completed, in [0.0...1.0].\r\n     * Note that this CAN be higher than 1 due to the fact that we don't actually measure time but delta between observable calls\r\n     */\r\n    completeRate: number;\r\n    /**\r\n     * What the registered observable sent in the last count\r\n     */\r\n    payload: T;\r\n}\r\n\r\n/**\r\n * The current state of the timer\r\n */\r\nexport enum TimerState {\r\n    /**\r\n     * Timer initialized, not yet started\r\n     */\r\n    INIT,\r\n    /**\r\n     * Timer started and counting\r\n     */\r\n    STARTED,\r\n    /**\r\n     * Timer ended (whether aborted or time reached)\r\n     */\r\n    ENDED,\r\n}\r\n\r\n/**\r\n * A simple version of the timer. Will take options and start the timer immediately after calling it\r\n *\r\n * @param options options with which to initialize this timer\r\n */\r\nexport function setAndStartTimer(options: ITimerOptions<any>): Nullable<Observer<any>> {\r\n    let timer = 0;\r\n    const startTime = Date.now();\r\n    options.observableParameters = options.observableParameters ?? {};\r\n    const observer = options.contextObservable.add(\r\n        (payload: any) => {\r\n            const now = Date.now();\r\n            timer = now - startTime;\r\n            const data: ITimerData<any> = {\r\n                startTime,\r\n                currentTime: now,\r\n                deltaTime: timer,\r\n                completeRate: timer / options.timeout,\r\n                payload,\r\n            };\r\n            options.onTick && options.onTick(data);\r\n            if (options.breakCondition && options.breakCondition()) {\r\n                options.contextObservable.remove(observer);\r\n                options.onAborted && options.onAborted(data);\r\n            }\r\n            if (timer >= options.timeout) {\r\n                options.contextObservable.remove(observer);\r\n                options.onEnded && options.onEnded(data);\r\n            }\r\n        },\r\n        options.observableParameters.mask,\r\n        options.observableParameters.insertFirst,\r\n        options.observableParameters.scope\r\n    );\r\n    return observer;\r\n}\r\n\r\n/**\r\n * An advanced implementation of a timer class\r\n */\r\nexport class AdvancedTimer<T = any> implements IDisposable {\r\n    /**\r\n     * Will notify each time the timer calculates the remaining time\r\n     */\r\n    public onEachCountObservable: Observable<ITimerData<T>> = new Observable();\r\n    /**\r\n     * Will trigger when the timer was aborted due to the break condition\r\n     */\r\n    public onTimerAbortedObservable: Observable<ITimerData<T>> = new Observable();\r\n    /**\r\n     * Will trigger when the timer ended successfully\r\n     */\r\n    public onTimerEndedObservable: Observable<ITimerData<T>> = new Observable();\r\n    /**\r\n     * Will trigger when the timer state has changed\r\n     */\r\n    public onStateChangedObservable: Observable<TimerState> = new Observable();\r\n\r\n    private _observer: Nullable<Observer<T>> = null;\r\n    private _contextObservable: Observable<T>;\r\n    private _observableParameters: {\r\n        mask?: number;\r\n        insertFirst?: boolean;\r\n        scope?: any;\r\n    };\r\n    private _startTime: number;\r\n    private _timer: number;\r\n    private _state: TimerState;\r\n    private _breakCondition: (data: ITimerData<T>) => boolean;\r\n    private _timeToEnd: number;\r\n    private _breakOnNextTick: boolean = false;\r\n\r\n    /**\r\n     * Will construct a new advanced timer based on the options provided. Timer will not start until start() is called.\r\n     * @param options construction options for this advanced timer\r\n     */\r\n    constructor(options: ITimerOptions<T>) {\r\n        this._setState(TimerState.INIT);\r\n        this._contextObservable = options.contextObservable;\r\n        this._observableParameters = options.observableParameters ?? {};\r\n        this._breakCondition = options.breakCondition ?? (() => false);\r\n        this._timeToEnd = options.timeout;\r\n        if (options.onEnded) {\r\n            this.onTimerEndedObservable.add(options.onEnded);\r\n        }\r\n        if (options.onTick) {\r\n            this.onEachCountObservable.add(options.onTick);\r\n        }\r\n        if (options.onAborted) {\r\n            this.onTimerAbortedObservable.add(options.onAborted);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * set a breaking condition for this timer. Default is to never break during count\r\n     * @param predicate the new break condition. Returns true to break, false otherwise\r\n     */\r\n    public set breakCondition(predicate: (data: ITimerData<T>) => boolean) {\r\n        this._breakCondition = predicate;\r\n    }\r\n\r\n    /**\r\n     * Reset ALL associated observables in this advanced timer\r\n     */\r\n    public clearObservables() {\r\n        this.onEachCountObservable.clear();\r\n        this.onTimerAbortedObservable.clear();\r\n        this.onTimerEndedObservable.clear();\r\n        this.onStateChangedObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * Will start a new iteration of this timer. Only one instance of this timer can run at a time.\r\n     *\r\n     * @param timeToEnd how much time to measure until timer ended\r\n     */\r\n    public start(timeToEnd: number = this._timeToEnd) {\r\n        if (this._state === TimerState.STARTED) {\r\n            throw new Error(\"Timer already started. Please stop it before starting again\");\r\n        }\r\n        this._timeToEnd = timeToEnd;\r\n        this._startTime = Date.now();\r\n        this._timer = 0;\r\n        this._observer = this._contextObservable.add(this._tick, this._observableParameters.mask, this._observableParameters.insertFirst, this._observableParameters.scope);\r\n        this._setState(TimerState.STARTED);\r\n    }\r\n\r\n    /**\r\n     * Will force a stop on the next tick.\r\n     */\r\n    public stop() {\r\n        if (this._state !== TimerState.STARTED) {\r\n            return;\r\n        }\r\n        this._breakOnNextTick = true;\r\n    }\r\n\r\n    /**\r\n     * Dispose this timer, clearing all resources\r\n     */\r\n    public dispose() {\r\n        if (this._observer) {\r\n            this._contextObservable.remove(this._observer);\r\n        }\r\n        this.clearObservables();\r\n    }\r\n\r\n    private _setState(newState: TimerState) {\r\n        this._state = newState;\r\n        this.onStateChangedObservable.notifyObservers(this._state);\r\n    }\r\n\r\n    private _tick = (payload: T) => {\r\n        const now = Date.now();\r\n        this._timer = now - this._startTime;\r\n        const data: ITimerData<T> = {\r\n            startTime: this._startTime,\r\n            currentTime: now,\r\n            deltaTime: this._timer,\r\n            completeRate: this._timer / this._timeToEnd,\r\n            payload,\r\n        };\r\n        const shouldBreak = this._breakOnNextTick || this._breakCondition(data);\r\n        if (shouldBreak || this._timer >= this._timeToEnd) {\r\n            this._stop(data, shouldBreak);\r\n        } else {\r\n            this.onEachCountObservable.notifyObservers(data);\r\n        }\r\n    };\r\n\r\n    private _stop(data: ITimerData<T>, aborted: boolean = false) {\r\n        this._contextObservable.remove(this._observer);\r\n        this._setState(TimerState.ENDED);\r\n        if (aborted) {\r\n            this.onTimerAbortedObservable.notifyObservers(data);\r\n        } else {\r\n            this.onTimerEndedObservable.notifyObservers(data);\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}