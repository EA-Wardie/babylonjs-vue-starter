{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport { GLTFLoader } from \"../glTFLoader.js\";\nvar NAME = \"KHR_mesh_quantization\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization)\n */\n\nvar KHR_mesh_quantization =\n/** @class */\nfunction () {\n  /**\n   * @param loader\n   * @hidden\n   */\n  function KHR_mesh_quantization(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    this.enabled = loader.isExtensionUsed(NAME);\n  }\n  /** @hidden */\n\n\n  KHR_mesh_quantization.prototype.dispose = function () {};\n\n  return KHR_mesh_quantization;\n}();\n\nexport { KHR_mesh_quantization };\nGLTFLoader.RegisterExtension(NAME, function (loader) {\n  return new KHR_mesh_quantization(loader);\n});","map":{"version":3,"mappings":";AAEA,SAASA,UAAT,QAA2B,kBAA3B;AAEA,IAAMC,IAAI,GAAG,uBAAb;AAEA;;;;AAGA;AAAA;AAAA;AAWI;;;;AAIA,iCAAYC,MAAZ,EAA8B;AAd9B;;;AAGgB,gBAAOD,IAAP;AAYZ,SAAKE,OAAL,GAAeD,MAAM,CAACE,eAAP,CAAuBH,IAAvB,CAAf;AACH;AAED;;;AACOI,4CAAP,aAAmB,CAAZ;;AACX;AAAC,CArBD;;;AAuBAL,UAAU,CAACM,iBAAX,CAA6BL,IAA7B,EAAmC,UAACC,MAAD,EAAO;AAAK,aAAIG,qBAAJ,CAA0BH,MAA1B;AAAiC,CAAhF","names":["GLTFLoader","NAME","loader","enabled","isExtensionUsed","KHR_mesh_quantization","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../../lts/loaders/generated/glTF/2.0/Extensions/KHR_mesh_quantization.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\n\r\nconst NAME = \"KHR_mesh_quantization\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization)\r\n */\r\nexport class KHR_mesh_quantization implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * @param loader\r\n     * @hidden\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this.enabled = loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @hidden */\r\n    public dispose() {}\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_mesh_quantization(loader));\r\n"]},"metadata":{},"sourceType":"module"}