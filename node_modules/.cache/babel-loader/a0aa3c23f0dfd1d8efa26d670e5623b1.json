{"ast":null,"code":"import _typeof from \"/home/ea/Development/Babylon/red/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url-search-params.js\";\nimport \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport { AutoReleaseWorkerPool } from \"./workerPool.js\";\nimport { Tools } from \"./tools.js\";\n/**\n * Class for loading KTX2 files\n */\n\nvar KhronosTextureContainer2 =\n/** @class */\nfunction () {\n  /**\n   * Constructor\n   * @param engine The engine to use\n   * @param numWorkers The number of workers for async operations. Specify `0` to disable web workers and run synchronously in the current context.\n   */\n  function KhronosTextureContainer2(engine, numWorkers) {\n    if (numWorkers === void 0) {\n      numWorkers = KhronosTextureContainer2.DefaultNumWorkers;\n    }\n\n    this._engine = engine;\n\n    KhronosTextureContainer2._Initialize(numWorkers);\n  }\n\n  KhronosTextureContainer2.GetDefaultNumWorkers = function () {\n    if ((typeof navigator === \"undefined\" ? \"undefined\" : _typeof(navigator)) !== \"object\" || !navigator.hardwareConcurrency) {\n      return 1;\n    } // Use 50% of the available logical processors but capped at 4.\n\n\n    return Math.min(Math.floor(navigator.hardwareConcurrency * 0.5), 4);\n  };\n\n  KhronosTextureContainer2._Initialize = function (numWorkers) {\n    if (KhronosTextureContainer2._WorkerPoolPromise || KhronosTextureContainer2._DecoderModulePromise) {\n      return;\n    }\n\n    if (numWorkers && typeof Worker === \"function\") {\n      KhronosTextureContainer2._WorkerPoolPromise = new Promise(function (resolve) {\n        var workerContent = \"(\".concat(workerFunc, \")()\");\n        var workerBlobUrl = URL.createObjectURL(new Blob([workerContent], {\n          type: \"application/javascript\"\n        }));\n        resolve(new AutoReleaseWorkerPool(numWorkers, function () {\n          return new Promise(function (resolve, reject) {\n            var worker = new Worker(workerBlobUrl);\n\n            var onError = function onError(error) {\n              worker.removeEventListener(\"error\", onError);\n              worker.removeEventListener(\"message\", onMessage);\n              reject(error);\n            };\n\n            var onMessage = function onMessage(message) {\n              if (message.data.action === \"init\") {\n                worker.removeEventListener(\"error\", onError);\n                worker.removeEventListener(\"message\", onMessage);\n                resolve(worker);\n              }\n            };\n\n            worker.addEventListener(\"error\", onError);\n            worker.addEventListener(\"message\", onMessage);\n            worker.postMessage({\n              action: \"init\",\n              urls: KhronosTextureContainer2.URLConfig\n            });\n          });\n        }));\n      });\n    } else if (typeof KTX2DECODER === \"undefined\") {\n      KhronosTextureContainer2._DecoderModulePromise = Tools.LoadScriptAsync(KhronosTextureContainer2.URLConfig.jsDecoderModule).then(function () {\n        KTX2DECODER.MSCTranscoder.UseFromWorkerThread = false;\n        KTX2DECODER.WASMMemoryManager.LoadBinariesFromCurrentThread = true;\n        var urls = KhronosTextureContainer2.URLConfig;\n\n        if (urls.wasmUASTCToASTC !== null) {\n          KTX2DECODER.LiteTranscoder_UASTC_ASTC.WasmModuleURL = urls.wasmUASTCToASTC;\n        }\n\n        if (urls.wasmUASTCToBC7 !== null) {\n          KTX2DECODER.LiteTranscoder_UASTC_BC7.WasmModuleURL = urls.wasmUASTCToBC7;\n        }\n\n        if (urls.wasmUASTCToRGBA_UNORM !== null) {\n          KTX2DECODER.LiteTranscoder_UASTC_RGBA_UNORM.WasmModuleURL = urls.wasmUASTCToRGBA_UNORM;\n        }\n\n        if (urls.wasmUASTCToRGBA_SRGB !== null) {\n          KTX2DECODER.LiteTranscoder_UASTC_RGBA_SRGB.WasmModuleURL = urls.wasmUASTCToRGBA_SRGB;\n        }\n\n        if (urls.jsMSCTranscoder !== null) {\n          KTX2DECODER.MSCTranscoder.JSModuleURL = urls.jsMSCTranscoder;\n        }\n\n        if (urls.wasmMSCTranscoder !== null) {\n          KTX2DECODER.MSCTranscoder.WasmModuleURL = urls.wasmMSCTranscoder;\n        }\n\n        if (urls.wasmZSTDDecoder !== null) {\n          KTX2DECODER.ZSTDDecoder.WasmModuleURL = urls.wasmZSTDDecoder;\n        }\n\n        return new KTX2DECODER.KTX2Decoder();\n      });\n    } else {\n      KTX2DECODER.MSCTranscoder.UseFromWorkerThread = false;\n      KTX2DECODER.WASMMemoryManager.LoadBinariesFromCurrentThread = true;\n      KhronosTextureContainer2._DecoderModulePromise = Promise.resolve(new KTX2DECODER.KTX2Decoder());\n    }\n  };\n  /**\n   * @param data\n   * @param internalTexture\n   * @param options\n   * @hidden\n   */\n\n\n  KhronosTextureContainer2.prototype.uploadAsync = function (data, internalTexture, options) {\n    var _this = this;\n\n    var caps = this._engine.getCaps();\n\n    var compressedTexturesCaps = {\n      astc: !!caps.astc,\n      bptc: !!caps.bptc,\n      s3tc: !!caps.s3tc,\n      pvrtc: !!caps.pvrtc,\n      etc2: !!caps.etc2,\n      etc1: !!caps.etc1\n    };\n\n    if (KhronosTextureContainer2._WorkerPoolPromise) {\n      return KhronosTextureContainer2._WorkerPoolPromise.then(function (workerPool) {\n        return new Promise(function (resolve, reject) {\n          workerPool.push(function (worker, onComplete) {\n            var onError = function onError(error) {\n              worker.removeEventListener(\"error\", onError);\n              worker.removeEventListener(\"message\", onMessage);\n              reject(error);\n              onComplete();\n            };\n\n            var onMessage = function onMessage(message) {\n              if (message.data.action === \"decoded\") {\n                worker.removeEventListener(\"error\", onError);\n                worker.removeEventListener(\"message\", onMessage);\n\n                if (!message.data.success) {\n                  reject({\n                    message: message.data.msg\n                  });\n                } else {\n                  try {\n                    _this._createTexture(message.data.decodedData, internalTexture, options);\n\n                    resolve();\n                  } catch (err) {\n                    reject({\n                      message: err\n                    });\n                  }\n                }\n\n                onComplete();\n              }\n            };\n\n            worker.addEventListener(\"error\", onError);\n            worker.addEventListener(\"message\", onMessage);\n            var dataCopy = new Uint8Array(data.byteLength);\n            dataCopy.set(new Uint8Array(data.buffer, data.byteOffset, data.byteLength));\n            worker.postMessage({\n              action: \"decode\",\n              data: dataCopy,\n              caps: compressedTexturesCaps,\n              options: options\n            }, [dataCopy.buffer]);\n          });\n        });\n      });\n    } else if (KhronosTextureContainer2._DecoderModulePromise) {\n      return KhronosTextureContainer2._DecoderModulePromise.then(function (decoder) {\n        return new Promise(function (resolve, reject) {\n          decoder.decode(data, caps).then(function (data) {\n            _this._createTexture(data, internalTexture);\n\n            resolve();\n          })[\"catch\"](function (reason) {\n            reject({\n              message: reason\n            });\n          });\n        });\n      });\n    }\n\n    throw new Error(\"KTX2 decoder module is not available\");\n  };\n\n  KhronosTextureContainer2.prototype._createTexture = function (data\n  /* IEncodedData */\n  , internalTexture, options) {\n    var oglTexture2D = 3553; // gl.TEXTURE_2D\n\n    this._engine._bindTextureDirectly(oglTexture2D, internalTexture);\n\n    if (options) {\n      // return back some information about the decoded data\n      options.transcodedFormat = data.transcodedFormat;\n      options.isInGammaSpace = data.isInGammaSpace;\n      options.hasAlpha = data.hasAlpha;\n      options.transcoderName = data.transcoderName;\n    }\n\n    if (data.transcodedFormat === 0x8058\n    /* RGBA8 */\n    ) {\n      internalTexture.type = 0;\n      internalTexture.format = 5;\n    } else {\n      internalTexture.format = data.transcodedFormat;\n    }\n\n    internalTexture._gammaSpace = data.isInGammaSpace;\n    internalTexture.generateMipMaps = data.mipmaps.length > 1;\n\n    if (data.errors) {\n      throw new Error(\"KTX2 container - could not transcode the data. \" + data.errors);\n    }\n\n    for (var t = 0; t < data.mipmaps.length; ++t) {\n      var mipmap = data.mipmaps[t];\n\n      if (!mipmap || !mipmap.data) {\n        throw new Error(\"KTX2 container - could not transcode one of the image\");\n      }\n\n      if (data.transcodedFormat === 0x8058\n      /* RGBA8 */\n      ) {\n        // uncompressed RGBA\n        internalTexture.width = mipmap.width; // need to set width/height so that the call to _uploadDataToTextureDirectly uses the right dimensions\n\n        internalTexture.height = mipmap.height;\n\n        this._engine._uploadDataToTextureDirectly(internalTexture, mipmap.data, 0, t, undefined, true);\n      } else {\n        this._engine._uploadCompressedDataToTextureDirectly(internalTexture, data.transcodedFormat, mipmap.width, mipmap.height, mipmap.data, 0, t);\n      }\n    }\n\n    internalTexture._extension = \".ktx2\";\n    internalTexture.width = data.mipmaps[0].width;\n    internalTexture.height = data.mipmaps[0].height;\n    internalTexture.isReady = true;\n\n    this._engine._bindTextureDirectly(oglTexture2D, null);\n  };\n  /**\n   * Checks if the given data starts with a KTX2 file identifier.\n   * @param data the data to check\n   * @returns true if the data is a KTX2 file or false otherwise\n   */\n\n\n  KhronosTextureContainer2.IsValid = function (data) {\n    if (data.byteLength >= 12) {\n      // '«', 'K', 'T', 'X', ' ', '2', '0', '»', '\\r', '\\n', '\\x1A', '\\n'\n      var identifier = new Uint8Array(data.buffer, data.byteOffset, 12);\n\n      if (identifier[0] === 0xab && identifier[1] === 0x4b && identifier[2] === 0x54 && identifier[3] === 0x58 && identifier[4] === 0x20 && identifier[5] === 0x32 && identifier[6] === 0x30 && identifier[7] === 0xbb && identifier[8] === 0x0d && identifier[9] === 0x0a && identifier[10] === 0x1a && identifier[11] === 0x0a) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * URLs to use when loading the KTX2 decoder module as well as its dependencies\n   * If a url is null, the default url is used (pointing to https://preview.babylonjs.com)\n   * Note that jsDecoderModule can't be null and that the other dependencies will only be loaded if necessary\n   * Urls you can change:\n   *     URLConfig.jsDecoderModule\n   *     URLConfig.wasmUASTCToASTC\n   *     URLConfig.wasmUASTCToBC7\n   *     URLConfig.wasmUASTCToRGBA_UNORM\n   *     URLConfig.wasmUASTCToRGBA_SRGB\n   *     URLConfig.jsMSCTranscoder\n   *     URLConfig.wasmMSCTranscoder\n   *     URLConfig.wasmZSTDDecoder\n   * You can see their default values in this PG: https://playground.babylonjs.com/#EIJH8L#29\n   */\n\n\n  KhronosTextureContainer2.URLConfig = {\n    jsDecoderModule: \"https://preview.babylonjs.com/babylon.ktx2Decoder.js\",\n    wasmUASTCToASTC: null,\n    wasmUASTCToBC7: null,\n    wasmUASTCToRGBA_UNORM: null,\n    wasmUASTCToRGBA_SRGB: null,\n    jsMSCTranscoder: null,\n    wasmMSCTranscoder: null,\n    wasmZSTDDecoder: null\n  };\n  /**\n   * Default number of workers used to handle data decoding\n   */\n\n  KhronosTextureContainer2.DefaultNumWorkers = KhronosTextureContainer2.GetDefaultNumWorkers();\n  return KhronosTextureContainer2;\n}();\n\nexport { KhronosTextureContainer2 };\n\nfunction workerFunc() {\n  var ktx2Decoder;\n\n  onmessage = function onmessage(event) {\n    if (!event.data) {\n      return;\n    }\n\n    switch (event.data.action) {\n      case \"init\":\n        {\n          var urls = event.data.urls;\n          importScripts(urls.jsDecoderModule);\n\n          if (urls.wasmUASTCToASTC !== null) {\n            KTX2DECODER.LiteTranscoder_UASTC_ASTC.WasmModuleURL = urls.wasmUASTCToASTC;\n          }\n\n          if (urls.wasmUASTCToBC7 !== null) {\n            KTX2DECODER.LiteTranscoder_UASTC_BC7.WasmModuleURL = urls.wasmUASTCToBC7;\n          }\n\n          if (urls.wasmUASTCToRGBA_UNORM !== null) {\n            KTX2DECODER.LiteTranscoder_UASTC_RGBA_UNORM.WasmModuleURL = urls.wasmUASTCToRGBA_UNORM;\n          }\n\n          if (urls.wasmUASTCToRGBA_SRGB !== null) {\n            KTX2DECODER.LiteTranscoder_UASTC_RGBA_SRGB.WasmModuleURL = urls.wasmUASTCToRGBA_SRGB;\n          }\n\n          if (urls.jsMSCTranscoder !== null) {\n            KTX2DECODER.MSCTranscoder.JSModuleURL = urls.jsMSCTranscoder;\n          }\n\n          if (urls.wasmMSCTranscoder !== null) {\n            KTX2DECODER.MSCTranscoder.WasmModuleURL = urls.wasmMSCTranscoder;\n          }\n\n          if (urls.wasmZSTDDecoder !== null) {\n            KTX2DECODER.ZSTDDecoder.WasmModuleURL = urls.wasmZSTDDecoder;\n          }\n\n          ktx2Decoder = new KTX2DECODER.KTX2Decoder();\n          postMessage({\n            action: \"init\"\n          });\n          break;\n        }\n\n      case \"decode\":\n        ktx2Decoder.decode(event.data.data, event.data.caps, event.data.options).then(function (data) {\n          var buffers = [];\n\n          for (var mip = 0; mip < data.mipmaps.length; ++mip) {\n            var mipmap = data.mipmaps[mip];\n\n            if (mipmap && mipmap.data) {\n              buffers.push(mipmap.data.buffer);\n            }\n          }\n\n          postMessage({\n            action: \"decoded\",\n            success: true,\n            decodedData: data\n          }, buffers);\n        })[\"catch\"](function (reason) {\n          postMessage({\n            action: \"decoded\",\n            success: false,\n            msg: reason\n          });\n        });\n        break;\n    }\n  };\n}","map":{"version":3,"mappings":"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","names":["AutoReleaseWorkerPool","Tools","engine","numWorkers","KhronosTextureContainer2","DefaultNumWorkers","_engine","_Initialize","navigator","hardwareConcurrency","Math","min","floor","_WorkerPoolPromise","_DecoderModulePromise","Worker","Promise","resolve","workerContent","workerFunc","workerBlobUrl","URL","createObjectURL","Blob","type","reject","worker","onError","error","removeEventListener","onMessage","message","data","action","addEventListener","postMessage","urls","URLConfig","KTX2DECODER","LoadScriptAsync","jsDecoderModule","then","MSCTranscoder","UseFromWorkerThread","WASMMemoryManager","LoadBinariesFromCurrentThread","wasmUASTCToASTC","LiteTranscoder_UASTC_ASTC","WasmModuleURL","wasmUASTCToBC7","LiteTranscoder_UASTC_BC7","wasmUASTCToRGBA_UNORM","LiteTranscoder_UASTC_RGBA_UNORM","wasmUASTCToRGBA_SRGB","LiteTranscoder_UASTC_RGBA_SRGB","jsMSCTranscoder","JSModuleURL","wasmMSCTranscoder","wasmZSTDDecoder","ZSTDDecoder","KTX2Decoder","internalTexture","options","caps","getCaps","compressedTexturesCaps","astc","bptc","s3tc","pvrtc","etc2","etc1","workerPool","push","onComplete","success","msg","_this","_createTexture","decodedData","err","dataCopy","Uint8Array","byteLength","set","buffer","byteOffset","decoder","decode","reason","Error","oglTexture2D","_bindTextureDirectly","transcodedFormat","isInGammaSpace","hasAlpha","transcoderName","format","_gammaSpace","generateMipMaps","mipmaps","length","errors","t","mipmap","width","height","_uploadDataToTextureDirectly","undefined","_uploadCompressedDataToTextureDirectly","_extension","isReady","identifier","GetDefaultNumWorkers","ktx2Decoder","onmessage","event","importScripts","buffers","mip"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Misc/khronosTextureContainer2.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\nimport type { ThinEngine } from \"../Engines/thinEngine\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport { AutoReleaseWorkerPool } from \"./workerPool\";\r\nimport { Tools } from \"./tools\";\r\nimport type { Nullable } from \"../types\";\r\n\r\ndeclare let KTX2DECODER: any;\r\n\r\n/**\r\n * Class for loading KTX2 files\r\n */\r\nexport class KhronosTextureContainer2 {\r\n    private static _WorkerPoolPromise?: Promise<AutoReleaseWorkerPool>;\r\n    private static _DecoderModulePromise?: Promise<any>;\r\n\r\n    /**\r\n     * URLs to use when loading the KTX2 decoder module as well as its dependencies\r\n     * If a url is null, the default url is used (pointing to https://preview.babylonjs.com)\r\n     * Note that jsDecoderModule can't be null and that the other dependencies will only be loaded if necessary\r\n     * Urls you can change:\r\n     *     URLConfig.jsDecoderModule\r\n     *     URLConfig.wasmUASTCToASTC\r\n     *     URLConfig.wasmUASTCToBC7\r\n     *     URLConfig.wasmUASTCToRGBA_UNORM\r\n     *     URLConfig.wasmUASTCToRGBA_SRGB\r\n     *     URLConfig.jsMSCTranscoder\r\n     *     URLConfig.wasmMSCTranscoder\r\n     *     URLConfig.wasmZSTDDecoder\r\n     * You can see their default values in this PG: https://playground.babylonjs.com/#EIJH8L#29\r\n     */\r\n    public static URLConfig: {\r\n        jsDecoderModule: string;\r\n        wasmUASTCToASTC: Nullable<string>;\r\n        wasmUASTCToBC7: Nullable<string>;\r\n        wasmUASTCToRGBA_UNORM: Nullable<string>;\r\n        wasmUASTCToRGBA_SRGB: Nullable<string>;\r\n        jsMSCTranscoder: Nullable<string>;\r\n        wasmMSCTranscoder: Nullable<string>;\r\n        wasmZSTDDecoder: Nullable<string>;\r\n    } = {\r\n        jsDecoderModule: \"https://preview.babylonjs.com/babylon.ktx2Decoder.js\",\r\n        wasmUASTCToASTC: null,\r\n        wasmUASTCToBC7: null,\r\n        wasmUASTCToRGBA_UNORM: null,\r\n        wasmUASTCToRGBA_SRGB: null,\r\n        jsMSCTranscoder: null,\r\n        wasmMSCTranscoder: null,\r\n        wasmZSTDDecoder: null,\r\n    };\r\n\r\n    /**\r\n     * Default number of workers used to handle data decoding\r\n     */\r\n    public static DefaultNumWorkers = KhronosTextureContainer2.GetDefaultNumWorkers();\r\n\r\n    private static GetDefaultNumWorkers(): number {\r\n        if (typeof navigator !== \"object\" || !navigator.hardwareConcurrency) {\r\n            return 1;\r\n        }\r\n\r\n        // Use 50% of the available logical processors but capped at 4.\r\n        return Math.min(Math.floor(navigator.hardwareConcurrency * 0.5), 4);\r\n    }\r\n\r\n    private _engine: ThinEngine;\r\n\r\n    private static _Initialize(numWorkers: number) {\r\n        if (KhronosTextureContainer2._WorkerPoolPromise || KhronosTextureContainer2._DecoderModulePromise) {\r\n            return;\r\n        }\r\n\r\n        if (numWorkers && typeof Worker === \"function\") {\r\n            KhronosTextureContainer2._WorkerPoolPromise = new Promise((resolve) => {\r\n                const workerContent = `(${workerFunc})()`;\r\n                const workerBlobUrl = URL.createObjectURL(new Blob([workerContent], { type: \"application/javascript\" }));\r\n                resolve(\r\n                    new AutoReleaseWorkerPool(\r\n                        numWorkers,\r\n                        () =>\r\n                            new Promise((resolve, reject) => {\r\n                                const worker = new Worker(workerBlobUrl);\r\n\r\n                                const onError = (error: ErrorEvent) => {\r\n                                    worker.removeEventListener(\"error\", onError);\r\n                                    worker.removeEventListener(\"message\", onMessage);\r\n                                    reject(error);\r\n                                };\r\n\r\n                                const onMessage = (message: MessageEvent) => {\r\n                                    if (message.data.action === \"init\") {\r\n                                        worker.removeEventListener(\"error\", onError);\r\n                                        worker.removeEventListener(\"message\", onMessage);\r\n                                        resolve(worker);\r\n                                    }\r\n                                };\r\n\r\n                                worker.addEventListener(\"error\", onError);\r\n                                worker.addEventListener(\"message\", onMessage);\r\n\r\n                                worker.postMessage({\r\n                                    action: \"init\",\r\n                                    urls: KhronosTextureContainer2.URLConfig,\r\n                                });\r\n                            })\r\n                    )\r\n                );\r\n            });\r\n        } else if (typeof KTX2DECODER === \"undefined\") {\r\n            KhronosTextureContainer2._DecoderModulePromise = Tools.LoadScriptAsync(KhronosTextureContainer2.URLConfig.jsDecoderModule).then(() => {\r\n                KTX2DECODER.MSCTranscoder.UseFromWorkerThread = false;\r\n                KTX2DECODER.WASMMemoryManager.LoadBinariesFromCurrentThread = true;\r\n\r\n                const urls = KhronosTextureContainer2.URLConfig;\r\n                if (urls.wasmUASTCToASTC !== null) {\r\n                    KTX2DECODER.LiteTranscoder_UASTC_ASTC.WasmModuleURL = urls.wasmUASTCToASTC;\r\n                }\r\n                if (urls.wasmUASTCToBC7 !== null) {\r\n                    KTX2DECODER.LiteTranscoder_UASTC_BC7.WasmModuleURL = urls.wasmUASTCToBC7;\r\n                }\r\n                if (urls.wasmUASTCToRGBA_UNORM !== null) {\r\n                    KTX2DECODER.LiteTranscoder_UASTC_RGBA_UNORM.WasmModuleURL = urls.wasmUASTCToRGBA_UNORM;\r\n                }\r\n                if (urls.wasmUASTCToRGBA_SRGB !== null) {\r\n                    KTX2DECODER.LiteTranscoder_UASTC_RGBA_SRGB.WasmModuleURL = urls.wasmUASTCToRGBA_SRGB;\r\n                }\r\n                if (urls.jsMSCTranscoder !== null) {\r\n                    KTX2DECODER.MSCTranscoder.JSModuleURL = urls.jsMSCTranscoder;\r\n                }\r\n                if (urls.wasmMSCTranscoder !== null) {\r\n                    KTX2DECODER.MSCTranscoder.WasmModuleURL = urls.wasmMSCTranscoder;\r\n                }\r\n                if (urls.wasmZSTDDecoder !== null) {\r\n                    KTX2DECODER.ZSTDDecoder.WasmModuleURL = urls.wasmZSTDDecoder;\r\n                }\r\n\r\n                return new KTX2DECODER.KTX2Decoder();\r\n            });\r\n        } else {\r\n            KTX2DECODER.MSCTranscoder.UseFromWorkerThread = false;\r\n            KTX2DECODER.WASMMemoryManager.LoadBinariesFromCurrentThread = true;\r\n            KhronosTextureContainer2._DecoderModulePromise = Promise.resolve(new KTX2DECODER.KTX2Decoder());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     * @param engine The engine to use\r\n     * @param numWorkers The number of workers for async operations. Specify `0` to disable web workers and run synchronously in the current context.\r\n     */\r\n    public constructor(engine: ThinEngine, numWorkers = KhronosTextureContainer2.DefaultNumWorkers) {\r\n        this._engine = engine;\r\n\r\n        KhronosTextureContainer2._Initialize(numWorkers);\r\n    }\r\n\r\n    /**\r\n     * @param data\r\n     * @param internalTexture\r\n     * @param options\r\n     * @hidden\r\n     */\r\n    public uploadAsync(data: ArrayBufferView, internalTexture: InternalTexture, options?: any): Promise<void> {\r\n        const caps = this._engine.getCaps();\r\n\r\n        const compressedTexturesCaps = {\r\n            astc: !!caps.astc,\r\n            bptc: !!caps.bptc,\r\n            s3tc: !!caps.s3tc,\r\n            pvrtc: !!caps.pvrtc,\r\n            etc2: !!caps.etc2,\r\n            etc1: !!caps.etc1,\r\n        };\r\n\r\n        if (KhronosTextureContainer2._WorkerPoolPromise) {\r\n            return KhronosTextureContainer2._WorkerPoolPromise.then((workerPool) => {\r\n                return new Promise((resolve, reject) => {\r\n                    workerPool.push((worker, onComplete) => {\r\n                        const onError = (error: ErrorEvent) => {\r\n                            worker.removeEventListener(\"error\", onError);\r\n                            worker.removeEventListener(\"message\", onMessage);\r\n                            reject(error);\r\n                            onComplete();\r\n                        };\r\n\r\n                        const onMessage = (message: MessageEvent) => {\r\n                            if (message.data.action === \"decoded\") {\r\n                                worker.removeEventListener(\"error\", onError);\r\n                                worker.removeEventListener(\"message\", onMessage);\r\n                                if (!message.data.success) {\r\n                                    reject({ message: message.data.msg });\r\n                                } else {\r\n                                    try {\r\n                                        this._createTexture(message.data.decodedData, internalTexture, options);\r\n                                        resolve();\r\n                                    } catch (err) {\r\n                                        reject({ message: err });\r\n                                    }\r\n                                }\r\n                                onComplete();\r\n                            }\r\n                        };\r\n\r\n                        worker.addEventListener(\"error\", onError);\r\n                        worker.addEventListener(\"message\", onMessage);\r\n\r\n                        const dataCopy = new Uint8Array(data.byteLength);\r\n                        dataCopy.set(new Uint8Array(data.buffer, data.byteOffset, data.byteLength));\r\n\r\n                        worker.postMessage({ action: \"decode\", data: dataCopy, caps: compressedTexturesCaps, options }, [dataCopy.buffer]);\r\n                    });\r\n                });\r\n            });\r\n        } else if (KhronosTextureContainer2._DecoderModulePromise) {\r\n            return KhronosTextureContainer2._DecoderModulePromise.then((decoder) => {\r\n                return new Promise((resolve, reject) => {\r\n                    decoder\r\n                        .decode(data, caps)\r\n                        .then((data: any) => {\r\n                            this._createTexture(data, internalTexture);\r\n                            resolve();\r\n                        })\r\n                        .catch((reason: any) => {\r\n                            reject({ message: reason });\r\n                        });\r\n                });\r\n            });\r\n        }\r\n\r\n        throw new Error(\"KTX2 decoder module is not available\");\r\n    }\r\n\r\n    protected _createTexture(data: any /* IEncodedData */, internalTexture: InternalTexture, options?: any) {\r\n        const oglTexture2D = 3553; // gl.TEXTURE_2D\r\n\r\n        this._engine._bindTextureDirectly(oglTexture2D, internalTexture);\r\n\r\n        if (options) {\r\n            // return back some information about the decoded data\r\n            options.transcodedFormat = data.transcodedFormat;\r\n            options.isInGammaSpace = data.isInGammaSpace;\r\n            options.hasAlpha = data.hasAlpha;\r\n            options.transcoderName = data.transcoderName;\r\n        }\r\n\r\n        if (data.transcodedFormat === 0x8058 /* RGBA8 */) {\r\n            internalTexture.type = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n            internalTexture.format = Constants.TEXTUREFORMAT_RGBA;\r\n        } else {\r\n            internalTexture.format = data.transcodedFormat;\r\n        }\r\n\r\n        internalTexture._gammaSpace = data.isInGammaSpace;\r\n        internalTexture.generateMipMaps = data.mipmaps.length > 1;\r\n\r\n        if (data.errors) {\r\n            throw new Error(\"KTX2 container - could not transcode the data. \" + data.errors);\r\n        }\r\n\r\n        for (let t = 0; t < data.mipmaps.length; ++t) {\r\n            const mipmap = data.mipmaps[t];\r\n\r\n            if (!mipmap || !mipmap.data) {\r\n                throw new Error(\"KTX2 container - could not transcode one of the image\");\r\n            }\r\n\r\n            if (data.transcodedFormat === 0x8058 /* RGBA8 */) {\r\n                // uncompressed RGBA\r\n                internalTexture.width = mipmap.width; // need to set width/height so that the call to _uploadDataToTextureDirectly uses the right dimensions\r\n                internalTexture.height = mipmap.height;\r\n\r\n                this._engine._uploadDataToTextureDirectly(internalTexture, mipmap.data, 0, t, undefined, true);\r\n            } else {\r\n                this._engine._uploadCompressedDataToTextureDirectly(internalTexture, data.transcodedFormat, mipmap.width, mipmap.height, mipmap.data, 0, t);\r\n            }\r\n        }\r\n\r\n        internalTexture._extension = \".ktx2\";\r\n        internalTexture.width = data.mipmaps[0].width;\r\n        internalTexture.height = data.mipmaps[0].height;\r\n        internalTexture.isReady = true;\r\n\r\n        this._engine._bindTextureDirectly(oglTexture2D, null);\r\n    }\r\n\r\n    /**\r\n     * Checks if the given data starts with a KTX2 file identifier.\r\n     * @param data the data to check\r\n     * @returns true if the data is a KTX2 file or false otherwise\r\n     */\r\n    public static IsValid(data: ArrayBufferView): boolean {\r\n        if (data.byteLength >= 12) {\r\n            // '«', 'K', 'T', 'X', ' ', '2', '0', '»', '\\r', '\\n', '\\x1A', '\\n'\r\n            const identifier = new Uint8Array(data.buffer, data.byteOffset, 12);\r\n            if (\r\n                identifier[0] === 0xab &&\r\n                identifier[1] === 0x4b &&\r\n                identifier[2] === 0x54 &&\r\n                identifier[3] === 0x58 &&\r\n                identifier[4] === 0x20 &&\r\n                identifier[5] === 0x32 &&\r\n                identifier[6] === 0x30 &&\r\n                identifier[7] === 0xbb &&\r\n                identifier[8] === 0x0d &&\r\n                identifier[9] === 0x0a &&\r\n                identifier[10] === 0x1a &&\r\n                identifier[11] === 0x0a\r\n            ) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\ndeclare function importScripts(...urls: string[]): void;\r\ndeclare function postMessage(message: any, transfer?: any[]): void;\r\n\r\nfunction workerFunc(): void {\r\n    let ktx2Decoder: any;\r\n\r\n    onmessage = (event) => {\r\n        if (!event.data) {\r\n            return;\r\n        }\r\n        switch (event.data.action) {\r\n            case \"init\": {\r\n                const urls = event.data.urls;\r\n                importScripts(urls.jsDecoderModule);\r\n                if (urls.wasmUASTCToASTC !== null) {\r\n                    KTX2DECODER.LiteTranscoder_UASTC_ASTC.WasmModuleURL = urls.wasmUASTCToASTC;\r\n                }\r\n                if (urls.wasmUASTCToBC7 !== null) {\r\n                    KTX2DECODER.LiteTranscoder_UASTC_BC7.WasmModuleURL = urls.wasmUASTCToBC7;\r\n                }\r\n                if (urls.wasmUASTCToRGBA_UNORM !== null) {\r\n                    KTX2DECODER.LiteTranscoder_UASTC_RGBA_UNORM.WasmModuleURL = urls.wasmUASTCToRGBA_UNORM;\r\n                }\r\n                if (urls.wasmUASTCToRGBA_SRGB !== null) {\r\n                    KTX2DECODER.LiteTranscoder_UASTC_RGBA_SRGB.WasmModuleURL = urls.wasmUASTCToRGBA_SRGB;\r\n                }\r\n                if (urls.jsMSCTranscoder !== null) {\r\n                    KTX2DECODER.MSCTranscoder.JSModuleURL = urls.jsMSCTranscoder;\r\n                }\r\n                if (urls.wasmMSCTranscoder !== null) {\r\n                    KTX2DECODER.MSCTranscoder.WasmModuleURL = urls.wasmMSCTranscoder;\r\n                }\r\n                if (urls.wasmZSTDDecoder !== null) {\r\n                    KTX2DECODER.ZSTDDecoder.WasmModuleURL = urls.wasmZSTDDecoder;\r\n                }\r\n                ktx2Decoder = new KTX2DECODER.KTX2Decoder();\r\n                postMessage({ action: \"init\" });\r\n                break;\r\n            }\r\n            case \"decode\":\r\n                ktx2Decoder\r\n                    .decode(event.data.data, event.data.caps, event.data.options)\r\n                    .then((data: any) => {\r\n                        const buffers = [];\r\n                        for (let mip = 0; mip < data.mipmaps.length; ++mip) {\r\n                            const mipmap = data.mipmaps[mip];\r\n                            if (mipmap && mipmap.data) {\r\n                                buffers.push(mipmap.data.buffer);\r\n                            }\r\n                        }\r\n                        postMessage({ action: \"decoded\", success: true, decodedData: data }, buffers);\r\n                    })\r\n                    .catch((reason: any) => {\r\n                        postMessage({ action: \"decoded\", success: false, msg: reason });\r\n                    });\r\n                break;\r\n        }\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}