{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { Sound } from \"./sound.js\";\nimport { SoundTrack } from \"./soundTrack.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport { Matrix, Vector3 } from \"../Maths/math.vector.js\";\nimport { SceneComponentConstants } from \"../sceneComponent.js\";\nimport { Scene } from \"../scene.js\";\nimport { AbstractScene } from \"../abstractScene.js\";\nimport \"./audioEngine.js\";\nimport { PrecisionDate } from \"../Misc/precisionDate.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\"; // Adds the parser to the scene parsers.\n\nAbstractScene.AddParser(SceneComponentConstants.NAME_AUDIO, function (parsedData, scene, container, rootUrl) {\n  var _a; // TODO: add sound\n\n\n  var loadedSounds = [];\n  var loadedSound;\n  container.sounds = container.sounds || [];\n\n  if (parsedData.sounds !== undefined && parsedData.sounds !== null) {\n    for (var index = 0, cache = parsedData.sounds.length; index < cache; index++) {\n      var parsedSound = parsedData.sounds[index];\n\n      if ((_a = Engine.audioEngine) === null || _a === void 0 ? void 0 : _a.canUseWebAudio) {\n        if (!parsedSound.url) {\n          parsedSound.url = parsedSound.name;\n        }\n\n        if (!loadedSounds[parsedSound.url]) {\n          loadedSound = Sound.Parse(parsedSound, scene, rootUrl);\n          loadedSounds[parsedSound.url] = loadedSound;\n          container.sounds.push(loadedSound);\n        } else {\n          container.sounds.push(Sound.Parse(parsedSound, scene, rootUrl, loadedSounds[parsedSound.url]));\n        }\n      } else {\n        container.sounds.push(new Sound(parsedSound.name, null, scene));\n      }\n    }\n  }\n\n  loadedSounds = [];\n});\nObject.defineProperty(Scene.prototype, \"mainSoundTrack\", {\n  get: function get() {\n    var compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n\n      this._addComponent(compo);\n    }\n\n    if (!this._mainSoundTrack) {\n      this._mainSoundTrack = new SoundTrack(this, {\n        mainTrack: true\n      });\n    }\n\n    return this._mainSoundTrack;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nScene.prototype.getSoundByName = function (name) {\n  var index;\n\n  for (index = 0; index < this.mainSoundTrack.soundCollection.length; index++) {\n    if (this.mainSoundTrack.soundCollection[index].name === name) {\n      return this.mainSoundTrack.soundCollection[index];\n    }\n  }\n\n  if (this.soundTracks) {\n    for (var sdIndex = 0; sdIndex < this.soundTracks.length; sdIndex++) {\n      for (index = 0; index < this.soundTracks[sdIndex].soundCollection.length; index++) {\n        if (this.soundTracks[sdIndex].soundCollection[index].name === name) {\n          return this.soundTracks[sdIndex].soundCollection[index];\n        }\n      }\n    }\n  }\n\n  return null;\n};\n\nObject.defineProperty(Scene.prototype, \"audioEnabled\", {\n  get: function get() {\n    var compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n\n      this._addComponent(compo);\n    }\n\n    return compo.audioEnabled;\n  },\n  set: function set(value) {\n    var compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n\n      this._addComponent(compo);\n    }\n\n    if (value) {\n      compo.enableAudio();\n    } else {\n      compo.disableAudio();\n    }\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Scene.prototype, \"headphone\", {\n  get: function get() {\n    var compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n\n      this._addComponent(compo);\n    }\n\n    return compo.headphone;\n  },\n  set: function set(value) {\n    var compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n\n      this._addComponent(compo);\n    }\n\n    if (value) {\n      compo.switchAudioModeForHeadphones();\n    } else {\n      compo.switchAudioModeForNormalSpeakers();\n    }\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Scene.prototype, \"audioListenerPositionProvider\", {\n  get: function get() {\n    var compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n\n      this._addComponent(compo);\n    }\n\n    return compo.audioListenerPositionProvider;\n  },\n  set: function set(value) {\n    var compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n\n      this._addComponent(compo);\n    }\n\n    if (typeof value !== \"function\") {\n      throw new Error(\"The value passed to [Scene.audioListenerPositionProvider] must be a function that returns a Vector3\");\n    } else {\n      compo.audioListenerPositionProvider = value;\n    }\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Scene.prototype, \"audioPositioningRefreshRate\", {\n  get: function get() {\n    var compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n\n      this._addComponent(compo);\n    }\n\n    return compo.audioPositioningRefreshRate;\n  },\n  set: function set(value) {\n    var compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n\n      this._addComponent(compo);\n    }\n\n    compo.audioPositioningRefreshRate = value;\n  },\n  enumerable: true,\n  configurable: true\n});\n/**\n * Defines the sound scene component responsible to manage any sounds\n * in a given scene.\n */\n\nvar AudioSceneComponent =\n/** @class */\nfunction () {\n  /**\n   * Creates a new instance of the component for the given scene\n   * @param scene Defines the scene to register the component in\n   */\n  function AudioSceneComponent(scene) {\n    /**\n     * The component name helpful to identify the component in the list of scene components.\n     */\n    this.name = SceneComponentConstants.NAME_AUDIO;\n    this._audioEnabled = true;\n    this._headphone = false;\n    /**\n     * Gets or sets a refresh rate when using 3D audio positioning\n     */\n\n    this.audioPositioningRefreshRate = 500;\n    this._audioListenerPositionProvider = null;\n    this._cachedCameraDirection = new Vector3();\n    this._cachedCameraPosition = new Vector3();\n    this._lastCheck = 0;\n    this._invertMatrixTemp = new Matrix();\n    this._cameraDirectionTemp = new Vector3();\n    scene = scene || EngineStore.LastCreatedScene;\n\n    if (!scene) {\n      return;\n    }\n\n    this.scene = scene;\n    scene.soundTracks = new Array();\n    scene.sounds = new Array();\n  }\n\n  Object.defineProperty(AudioSceneComponent.prototype, \"audioEnabled\", {\n    /**\n     * Gets whether audio is enabled or not.\n     * Please use related enable/disable method to switch state.\n     */\n    get: function get() {\n      return this._audioEnabled;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AudioSceneComponent.prototype, \"headphone\", {\n    /**\n     * Gets whether audio is outputting to headphone or not.\n     * Please use the according Switch methods to change output.\n     */\n    get: function get() {\n      return this._headphone;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AudioSceneComponent.prototype, \"audioListenerPositionProvider\", {\n    /**\n     * Gets the current audio listener position provider\n     */\n    get: function get() {\n      return this._audioListenerPositionProvider;\n    },\n\n    /**\n     * Sets a custom listener position for all sounds in the scene\n     * By default, this is the position of the first active camera\n     */\n    set: function set(value) {\n      this._audioListenerPositionProvider = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Registers the component in a given scene\n   */\n\n  AudioSceneComponent.prototype.register = function () {\n    this.scene._afterRenderStage.registerStep(SceneComponentConstants.STEP_AFTERRENDER_AUDIO, this, this._afterRender);\n  };\n  /**\n   * Rebuilds the elements related to this component in case of\n   * context lost for instance.\n   */\n\n\n  AudioSceneComponent.prototype.rebuild = function () {// Nothing to do here. (Not rendering related)\n  };\n  /**\n   * Serializes the component data to the specified json object\n   * @param serializationObject The object to serialize to\n   */\n\n\n  AudioSceneComponent.prototype.serialize = function (serializationObject) {\n    serializationObject.sounds = [];\n\n    if (this.scene.soundTracks) {\n      for (var index = 0; index < this.scene.soundTracks.length; index++) {\n        var soundtrack = this.scene.soundTracks[index];\n\n        for (var soundId = 0; soundId < soundtrack.soundCollection.length; soundId++) {\n          serializationObject.sounds.push(soundtrack.soundCollection[soundId].serialize());\n        }\n      }\n    }\n  };\n  /**\n   * Adds all the elements from the container to the scene\n   * @param container the container holding the elements\n   */\n\n\n  AudioSceneComponent.prototype.addFromContainer = function (container) {\n    var _this = this;\n\n    if (!container.sounds) {\n      return;\n    }\n\n    container.sounds.forEach(function (sound) {\n      sound.play();\n      sound.autoplay = true;\n\n      _this.scene.mainSoundTrack.addSound(sound);\n    });\n  };\n  /**\n   * Removes all the elements in the container from the scene\n   * @param container contains the elements to remove\n   * @param dispose if the removed element should be disposed (default: false)\n   */\n\n\n  AudioSceneComponent.prototype.removeFromContainer = function (container, dispose) {\n    var _this = this;\n\n    if (dispose === void 0) {\n      dispose = false;\n    }\n\n    if (!container.sounds) {\n      return;\n    }\n\n    container.sounds.forEach(function (sound) {\n      sound.stop();\n      sound.autoplay = false;\n\n      _this.scene.mainSoundTrack.removeSound(sound);\n\n      if (dispose) {\n        sound.dispose();\n      }\n    });\n  };\n  /**\n   * Disposes the component and the associated resources.\n   */\n\n\n  AudioSceneComponent.prototype.dispose = function () {\n    var scene = this.scene;\n\n    if (scene._mainSoundTrack) {\n      scene.mainSoundTrack.dispose();\n    }\n\n    if (scene.soundTracks) {\n      for (var scIndex = 0; scIndex < scene.soundTracks.length; scIndex++) {\n        scene.soundTracks[scIndex].dispose();\n      }\n    }\n  };\n  /**\n   * Disables audio in the associated scene.\n   */\n\n\n  AudioSceneComponent.prototype.disableAudio = function () {\n    var scene = this.scene;\n    this._audioEnabled = false;\n\n    if (Engine.audioEngine && Engine.audioEngine.audioContext) {\n      Engine.audioEngine.audioContext.suspend();\n    }\n\n    var i;\n\n    for (i = 0; i < scene.mainSoundTrack.soundCollection.length; i++) {\n      scene.mainSoundTrack.soundCollection[i].pause();\n    }\n\n    if (scene.soundTracks) {\n      for (i = 0; i < scene.soundTracks.length; i++) {\n        for (var j = 0; j < scene.soundTracks[i].soundCollection.length; j++) {\n          scene.soundTracks[i].soundCollection[j].pause();\n        }\n      }\n    }\n  };\n  /**\n   * Enables audio in the associated scene.\n   */\n\n\n  AudioSceneComponent.prototype.enableAudio = function () {\n    var scene = this.scene;\n    this._audioEnabled = true;\n\n    if (Engine.audioEngine && Engine.audioEngine.audioContext) {\n      Engine.audioEngine.audioContext.resume();\n    }\n\n    var i;\n\n    for (i = 0; i < scene.mainSoundTrack.soundCollection.length; i++) {\n      if (scene.mainSoundTrack.soundCollection[i].isPaused) {\n        scene.mainSoundTrack.soundCollection[i].play();\n      }\n    }\n\n    if (scene.soundTracks) {\n      for (i = 0; i < scene.soundTracks.length; i++) {\n        for (var j = 0; j < scene.soundTracks[i].soundCollection.length; j++) {\n          if (scene.soundTracks[i].soundCollection[j].isPaused) {\n            scene.soundTracks[i].soundCollection[j].play();\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Switch audio to headphone output.\n   */\n\n\n  AudioSceneComponent.prototype.switchAudioModeForHeadphones = function () {\n    var scene = this.scene;\n    this._headphone = true;\n    scene.mainSoundTrack.switchPanningModelToHRTF();\n\n    if (scene.soundTracks) {\n      for (var i = 0; i < scene.soundTracks.length; i++) {\n        scene.soundTracks[i].switchPanningModelToHRTF();\n      }\n    }\n  };\n  /**\n   * Switch audio to normal speakers.\n   */\n\n\n  AudioSceneComponent.prototype.switchAudioModeForNormalSpeakers = function () {\n    var scene = this.scene;\n    this._headphone = false;\n    scene.mainSoundTrack.switchPanningModelToEqualPower();\n\n    if (scene.soundTracks) {\n      for (var i = 0; i < scene.soundTracks.length; i++) {\n        scene.soundTracks[i].switchPanningModelToEqualPower();\n      }\n    }\n  };\n\n  AudioSceneComponent.prototype._afterRender = function () {\n    var now = PrecisionDate.Now;\n\n    if (this._lastCheck && now - this._lastCheck < this.audioPositioningRefreshRate) {\n      return;\n    }\n\n    this._lastCheck = now;\n    var scene = this.scene;\n\n    if (!this._audioEnabled || !scene._mainSoundTrack || !scene.soundTracks || scene._mainSoundTrack.soundCollection.length === 0 && scene.soundTracks.length === 1) {\n      return;\n    }\n\n    var audioEngine = Engine.audioEngine;\n\n    if (!audioEngine) {\n      return;\n    }\n\n    if (audioEngine.audioContext) {\n      // A custom listener position provider was set\n      // Use the users provided position instead of camera's\n      if (this._audioListenerPositionProvider) {\n        var position = this._audioListenerPositionProvider(); // Make sure all coordinates were provided\n\n\n        position.x = position.x || 0;\n        position.y = position.y || 0;\n        position.z = position.z || 0; // Set the listener position\n\n        audioEngine.audioContext.listener.setPosition(position.x, position.y, position.z);\n      } else {\n        var listeningCamera = void 0;\n\n        if (scene.activeCameras && scene.activeCameras.length > 0) {\n          listeningCamera = scene.activeCameras[0];\n        } else {\n          listeningCamera = scene.activeCamera;\n        } // Check if there is a listening camera\n\n\n        if (listeningCamera) {\n          // Set the listener position to the listening camera global position\n          if (!this._cachedCameraPosition.equals(listeningCamera.globalPosition)) {\n            this._cachedCameraPosition.copyFrom(listeningCamera.globalPosition);\n\n            audioEngine.audioContext.listener.setPosition(listeningCamera.globalPosition.x, listeningCamera.globalPosition.y, listeningCamera.globalPosition.z);\n          } // for VR cameras\n\n\n          if (listeningCamera.rigCameras && listeningCamera.rigCameras.length > 0) {\n            listeningCamera = listeningCamera.rigCameras[0];\n          }\n\n          listeningCamera.getViewMatrix().invertToRef(this._invertMatrixTemp);\n          Vector3.TransformNormalToRef(AudioSceneComponent._CameraDirection, this._invertMatrixTemp, this._cameraDirectionTemp);\n\n          this._cameraDirectionTemp.normalize(); // To avoid some errors on GearVR\n\n\n          if (!isNaN(this._cameraDirectionTemp.x) && !isNaN(this._cameraDirectionTemp.y) && !isNaN(this._cameraDirectionTemp.z)) {\n            if (!this._cachedCameraDirection.equals(this._cameraDirectionTemp)) {\n              this._cachedCameraDirection.copyFrom(this._cameraDirectionTemp);\n\n              audioEngine.audioContext.listener.setOrientation(this._cameraDirectionTemp.x, this._cameraDirectionTemp.y, this._cameraDirectionTemp.z, 0, 1, 0);\n            }\n          }\n        } // Otherwise set the listener position to 0, 0 ,0\n        else {\n          // Set the listener position\n          audioEngine.audioContext.listener.setPosition(0, 0, 0);\n        }\n      }\n\n      var i = void 0;\n\n      for (i = 0; i < scene.mainSoundTrack.soundCollection.length; i++) {\n        var sound = scene.mainSoundTrack.soundCollection[i];\n\n        if (sound.useCustomAttenuation) {\n          sound.updateDistanceFromListener();\n        }\n      }\n\n      if (scene.soundTracks) {\n        for (i = 0; i < scene.soundTracks.length; i++) {\n          for (var j = 0; j < scene.soundTracks[i].soundCollection.length; j++) {\n            var sound = scene.soundTracks[i].soundCollection[j];\n\n            if (sound.useCustomAttenuation) {\n              sound.updateDistanceFromListener();\n            }\n          }\n        }\n      }\n    }\n  };\n\n  AudioSceneComponent._CameraDirection = new Vector3(0, 0, -1);\n  return AudioSceneComponent;\n}();\n\nexport { AudioSceneComponent };\n\nSound._SceneComponentInitialization = function (scene) {\n  var compo = scene._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n  if (!compo) {\n    compo = new AudioSceneComponent(scene);\n\n    scene._addComponent(compo);\n  }\n};","map":{"version":3,"mappings":"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","names":["Sound","SoundTrack","Engine","Matrix","Vector3","SceneComponentConstants","Scene","AbstractScene","PrecisionDate","EngineStore","AddParser","NAME_AUDIO","parsedData","scene","container","rootUrl","loadedSounds","loadedSound","sounds","undefined","index","cache","length","parsedSound","audioEngine","_a","canUseWebAudio","url","name","Parse","push","Object","defineProperty","prototype","get","compo","_getComponent","AudioSceneComponent","_addComponent","_mainSoundTrack","mainTrack","enumerable","configurable","getSoundByName","mainSoundTrack","soundCollection","soundTracks","sdIndex","audioEnabled","set","value","enableAudio","disableAudio","headphone","switchAudioModeForHeadphones","switchAudioModeForNormalSpeakers","audioListenerPositionProvider","Error","audioPositioningRefreshRate","LastCreatedScene","Array","_audioEnabled","_headphone","_audioListenerPositionProvider","_afterRenderStage","registerStep","STEP_AFTERRENDER_AUDIO","_afterRender","serializationObject","soundtrack","soundId","serialize","forEach","sound","play","autoplay","_this","addSound","dispose","stop","removeSound","scIndex","audioContext","suspend","i","pause","j","resume","isPaused","switchPanningModelToHRTF","switchPanningModelToEqualPower","now","Now","_lastCheck","position","x","y","z","listener","setPosition","listeningCamera","activeCameras","activeCamera","_cachedCameraPosition","equals","globalPosition","copyFrom","rigCameras","getViewMatrix","invertToRef","_invertMatrixTemp","TransformNormalToRef","_CameraDirection","_cameraDirectionTemp","normalize","isNaN","_cachedCameraDirection","setOrientation","useCustomAttenuation","updateDistanceFromListener","_SceneComponentInitialization"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Audio/audioSceneComponent.ts"],"sourcesContent":["import { Sound } from \"./sound\";\r\nimport { SoundTrack } from \"./soundTrack\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { Nullable } from \"../types\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport type { ISceneSerializableComponent } from \"../sceneComponent\";\r\nimport { SceneComponentConstants } from \"../sceneComponent\";\r\nimport { Scene } from \"../scene\";\r\nimport { AbstractScene } from \"../abstractScene\";\r\nimport type { AssetContainer } from \"../assetContainer\";\r\n\r\nimport \"./audioEngine\";\r\nimport { PrecisionDate } from \"../Misc/precisionDate\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\n\r\n// Adds the parser to the scene parsers.\r\nAbstractScene.AddParser(SceneComponentConstants.NAME_AUDIO, (parsedData: any, scene: Scene, container: AssetContainer, rootUrl: string) => {\r\n    // TODO: add sound\r\n    let loadedSounds: Sound[] = [];\r\n    let loadedSound: Sound;\r\n    container.sounds = container.sounds || [];\r\n    if (parsedData.sounds !== undefined && parsedData.sounds !== null) {\r\n        for (let index = 0, cache = parsedData.sounds.length; index < cache; index++) {\r\n            const parsedSound = parsedData.sounds[index];\r\n            if (Engine.audioEngine?.canUseWebAudio) {\r\n                if (!parsedSound.url) {\r\n                    parsedSound.url = parsedSound.name;\r\n                }\r\n                if (!loadedSounds[parsedSound.url]) {\r\n                    loadedSound = Sound.Parse(parsedSound, scene, rootUrl);\r\n                    loadedSounds[parsedSound.url] = loadedSound;\r\n                    container.sounds.push(loadedSound);\r\n                } else {\r\n                    container.sounds.push(Sound.Parse(parsedSound, scene, rootUrl, loadedSounds[parsedSound.url]));\r\n                }\r\n            } else {\r\n                container.sounds.push(new Sound(parsedSound.name, null, scene));\r\n            }\r\n        }\r\n    }\r\n\r\n    loadedSounds = [];\r\n});\r\n\r\ndeclare module \"../abstractScene\" {\r\n    export interface AbstractScene {\r\n        /**\r\n         * The list of sounds used in the scene.\r\n         */\r\n        sounds: Nullable<Array<Sound>>;\r\n    }\r\n}\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /**\r\n         * @hidden\r\n         * Backing field\r\n         */\r\n        _mainSoundTrack: SoundTrack;\r\n        /**\r\n         * The main sound track played by the scene.\r\n         * It contains your primary collection of sounds.\r\n         */\r\n        mainSoundTrack: SoundTrack;\r\n        /**\r\n         * The list of sound tracks added to the scene\r\n         * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music\r\n         */\r\n        soundTracks: Nullable<Array<SoundTrack>>;\r\n\r\n        /**\r\n         * Gets a sound using a given name\r\n         * @param name defines the name to search for\r\n         * @return the found sound or null if not found at all.\r\n         */\r\n        getSoundByName(name: string): Nullable<Sound>;\r\n\r\n        /**\r\n         * Gets or sets if audio support is enabled\r\n         * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music\r\n         */\r\n        audioEnabled: boolean;\r\n\r\n        /**\r\n         * Gets or sets if audio will be output to headphones\r\n         * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music\r\n         */\r\n        headphone: boolean;\r\n\r\n        /**\r\n         * Gets or sets custom audio listener position provider\r\n         * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music\r\n         */\r\n        audioListenerPositionProvider: Nullable<() => Vector3>;\r\n\r\n        /**\r\n         * Gets or sets a refresh rate when using 3D audio positioning\r\n         */\r\n        audioPositioningRefreshRate: number;\r\n    }\r\n}\r\n\r\nObject.defineProperty(Scene.prototype, \"mainSoundTrack\", {\r\n    get: function (this: Scene) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        if (!this._mainSoundTrack) {\r\n            this._mainSoundTrack = new SoundTrack(this, { mainTrack: true });\r\n        }\r\n\r\n        return this._mainSoundTrack;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nScene.prototype.getSoundByName = function (name: string): Nullable<Sound> {\r\n    let index: number;\r\n    for (index = 0; index < this.mainSoundTrack.soundCollection.length; index++) {\r\n        if (this.mainSoundTrack.soundCollection[index].name === name) {\r\n            return this.mainSoundTrack.soundCollection[index];\r\n        }\r\n    }\r\n\r\n    if (this.soundTracks) {\r\n        for (let sdIndex = 0; sdIndex < this.soundTracks.length; sdIndex++) {\r\n            for (index = 0; index < this.soundTracks[sdIndex].soundCollection.length; index++) {\r\n                if (this.soundTracks[sdIndex].soundCollection[index].name === name) {\r\n                    return this.soundTracks[sdIndex].soundCollection[index];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nObject.defineProperty(Scene.prototype, \"audioEnabled\", {\r\n    get: function (this: Scene) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        return compo.audioEnabled;\r\n    },\r\n    set: function (this: Scene, value: boolean) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        if (value) {\r\n            compo.enableAudio();\r\n        } else {\r\n            compo.disableAudio();\r\n        }\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nObject.defineProperty(Scene.prototype, \"headphone\", {\r\n    get: function (this: Scene) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        return compo.headphone;\r\n    },\r\n    set: function (this: Scene, value: boolean) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        if (value) {\r\n            compo.switchAudioModeForHeadphones();\r\n        } else {\r\n            compo.switchAudioModeForNormalSpeakers();\r\n        }\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nObject.defineProperty(Scene.prototype, \"audioListenerPositionProvider\", {\r\n    get: function (this: Scene) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        return compo.audioListenerPositionProvider;\r\n    },\r\n    set: function (this: Scene, value: () => Vector3) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        if (typeof value !== \"function\") {\r\n            throw new Error(\"The value passed to [Scene.audioListenerPositionProvider] must be a function that returns a Vector3\");\r\n        } else {\r\n            compo.audioListenerPositionProvider = value;\r\n        }\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\nObject.defineProperty(Scene.prototype, \"audioPositioningRefreshRate\", {\r\n    get: function (this: Scene) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        return compo.audioPositioningRefreshRate;\r\n    },\r\n    set: function (this: Scene, value: number) {\r\n        let compo = this._getComponent(SceneComponentConstants.NAME_AUDIO) as AudioSceneComponent;\r\n        if (!compo) {\r\n            compo = new AudioSceneComponent(this);\r\n            this._addComponent(compo);\r\n        }\r\n\r\n        compo.audioPositioningRefreshRate = value;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\n/**\r\n * Defines the sound scene component responsible to manage any sounds\r\n * in a given scene.\r\n */\r\nexport class AudioSceneComponent implements ISceneSerializableComponent {\r\n    private static _CameraDirection = new Vector3(0, 0, -1);\r\n\r\n    /**\r\n     * The component name helpful to identify the component in the list of scene components.\r\n     */\r\n    public readonly name = SceneComponentConstants.NAME_AUDIO;\r\n\r\n    /**\r\n     * The scene the component belongs to.\r\n     */\r\n    public scene: Scene;\r\n\r\n    private _audioEnabled = true;\r\n    /**\r\n     * Gets whether audio is enabled or not.\r\n     * Please use related enable/disable method to switch state.\r\n     */\r\n    public get audioEnabled(): boolean {\r\n        return this._audioEnabled;\r\n    }\r\n\r\n    private _headphone = false;\r\n    /**\r\n     * Gets whether audio is outputting to headphone or not.\r\n     * Please use the according Switch methods to change output.\r\n     */\r\n    public get headphone(): boolean {\r\n        return this._headphone;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets a refresh rate when using 3D audio positioning\r\n     */\r\n    public audioPositioningRefreshRate = 500;\r\n\r\n    private _audioListenerPositionProvider: Nullable<() => Vector3> = null;\r\n    /**\r\n     * Gets the current audio listener position provider\r\n     */\r\n    public get audioListenerPositionProvider(): Nullable<() => Vector3> {\r\n        return this._audioListenerPositionProvider;\r\n    }\r\n    /**\r\n     * Sets a custom listener position for all sounds in the scene\r\n     * By default, this is the position of the first active camera\r\n     */\r\n    public set audioListenerPositionProvider(value: Nullable<() => Vector3>) {\r\n        this._audioListenerPositionProvider = value;\r\n    }\r\n\r\n    /**\r\n     * Creates a new instance of the component for the given scene\r\n     * @param scene Defines the scene to register the component in\r\n     */\r\n    constructor(scene?: Nullable<Scene>) {\r\n        scene = scene || EngineStore.LastCreatedScene;\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this.scene = scene;\r\n\r\n        scene.soundTracks = new Array<SoundTrack>();\r\n        scene.sounds = new Array<Sound>();\r\n    }\r\n\r\n    /**\r\n     * Registers the component in a given scene\r\n     */\r\n    public register(): void {\r\n        this.scene._afterRenderStage.registerStep(SceneComponentConstants.STEP_AFTERRENDER_AUDIO, this, this._afterRender);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the elements related to this component in case of\r\n     * context lost for instance.\r\n     */\r\n    public rebuild(): void {\r\n        // Nothing to do here. (Not rendering related)\r\n    }\r\n\r\n    /**\r\n     * Serializes the component data to the specified json object\r\n     * @param serializationObject The object to serialize to\r\n     */\r\n    public serialize(serializationObject: any): void {\r\n        serializationObject.sounds = [];\r\n\r\n        if (this.scene.soundTracks) {\r\n            for (let index = 0; index < this.scene.soundTracks.length; index++) {\r\n                const soundtrack = this.scene.soundTracks[index];\r\n\r\n                for (let soundId = 0; soundId < soundtrack.soundCollection.length; soundId++) {\r\n                    serializationObject.sounds.push(soundtrack.soundCollection[soundId].serialize());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds all the elements from the container to the scene\r\n     * @param container the container holding the elements\r\n     */\r\n    public addFromContainer(container: AbstractScene): void {\r\n        if (!container.sounds) {\r\n            return;\r\n        }\r\n        container.sounds.forEach((sound) => {\r\n            sound.play();\r\n            sound.autoplay = true;\r\n            this.scene.mainSoundTrack.addSound(sound);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes all the elements in the container from the scene\r\n     * @param container contains the elements to remove\r\n     * @param dispose if the removed element should be disposed (default: false)\r\n     */\r\n    public removeFromContainer(container: AbstractScene, dispose = false): void {\r\n        if (!container.sounds) {\r\n            return;\r\n        }\r\n        container.sounds.forEach((sound) => {\r\n            sound.stop();\r\n            sound.autoplay = false;\r\n            this.scene.mainSoundTrack.removeSound(sound);\r\n            if (dispose) {\r\n                sound.dispose();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disposes the component and the associated resources.\r\n     */\r\n    public dispose(): void {\r\n        const scene = this.scene;\r\n        if (scene._mainSoundTrack) {\r\n            scene.mainSoundTrack.dispose();\r\n        }\r\n\r\n        if (scene.soundTracks) {\r\n            for (let scIndex = 0; scIndex < scene.soundTracks.length; scIndex++) {\r\n                scene.soundTracks[scIndex].dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disables audio in the associated scene.\r\n     */\r\n    public disableAudio() {\r\n        const scene = this.scene;\r\n        this._audioEnabled = false;\r\n\r\n        if (Engine.audioEngine && Engine.audioEngine.audioContext) {\r\n            Engine.audioEngine.audioContext.suspend();\r\n        }\r\n\r\n        let i: number;\r\n        for (i = 0; i < scene.mainSoundTrack.soundCollection.length; i++) {\r\n            scene.mainSoundTrack.soundCollection[i].pause();\r\n        }\r\n        if (scene.soundTracks) {\r\n            for (i = 0; i < scene.soundTracks.length; i++) {\r\n                for (let j = 0; j < scene.soundTracks[i].soundCollection.length; j++) {\r\n                    scene.soundTracks[i].soundCollection[j].pause();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enables audio in the associated scene.\r\n     */\r\n    public enableAudio() {\r\n        const scene = this.scene;\r\n        this._audioEnabled = true;\r\n\r\n        if (Engine.audioEngine && Engine.audioEngine.audioContext) {\r\n            Engine.audioEngine.audioContext.resume();\r\n        }\r\n\r\n        let i: number;\r\n        for (i = 0; i < scene.mainSoundTrack.soundCollection.length; i++) {\r\n            if (scene.mainSoundTrack.soundCollection[i].isPaused) {\r\n                scene.mainSoundTrack.soundCollection[i].play();\r\n            }\r\n        }\r\n        if (scene.soundTracks) {\r\n            for (i = 0; i < scene.soundTracks.length; i++) {\r\n                for (let j = 0; j < scene.soundTracks[i].soundCollection.length; j++) {\r\n                    if (scene.soundTracks[i].soundCollection[j].isPaused) {\r\n                        scene.soundTracks[i].soundCollection[j].play();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switch audio to headphone output.\r\n     */\r\n    public switchAudioModeForHeadphones() {\r\n        const scene = this.scene;\r\n        this._headphone = true;\r\n\r\n        scene.mainSoundTrack.switchPanningModelToHRTF();\r\n        if (scene.soundTracks) {\r\n            for (let i = 0; i < scene.soundTracks.length; i++) {\r\n                scene.soundTracks[i].switchPanningModelToHRTF();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switch audio to normal speakers.\r\n     */\r\n    public switchAudioModeForNormalSpeakers() {\r\n        const scene = this.scene;\r\n        this._headphone = false;\r\n\r\n        scene.mainSoundTrack.switchPanningModelToEqualPower();\r\n\r\n        if (scene.soundTracks) {\r\n            for (let i = 0; i < scene.soundTracks.length; i++) {\r\n                scene.soundTracks[i].switchPanningModelToEqualPower();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _cachedCameraDirection = new Vector3();\r\n    private _cachedCameraPosition = new Vector3();\r\n    private _lastCheck = 0;\r\n    private _invertMatrixTemp = new Matrix();\r\n    private _cameraDirectionTemp = new Vector3();\r\n\r\n    private _afterRender() {\r\n        const now = PrecisionDate.Now;\r\n        if (this._lastCheck && now - this._lastCheck < this.audioPositioningRefreshRate) {\r\n            return;\r\n        }\r\n\r\n        this._lastCheck = now;\r\n\r\n        const scene = this.scene;\r\n        if (!this._audioEnabled || !scene._mainSoundTrack || !scene.soundTracks || (scene._mainSoundTrack.soundCollection.length === 0 && scene.soundTracks.length === 1)) {\r\n            return;\r\n        }\r\n\r\n        const audioEngine = Engine.audioEngine;\r\n\r\n        if (!audioEngine) {\r\n            return;\r\n        }\r\n\r\n        if (audioEngine.audioContext) {\r\n            // A custom listener position provider was set\r\n            // Use the users provided position instead of camera's\r\n            if (this._audioListenerPositionProvider) {\r\n                const position: Vector3 = this._audioListenerPositionProvider();\r\n                // Make sure all coordinates were provided\r\n                position.x = position.x || 0;\r\n                position.y = position.y || 0;\r\n                position.z = position.z || 0;\r\n                // Set the listener position\r\n                audioEngine.audioContext.listener.setPosition(position.x, position.y, position.z);\r\n            } else {\r\n                let listeningCamera: Nullable<Camera>;\r\n\r\n                if (scene.activeCameras && scene.activeCameras.length > 0) {\r\n                    listeningCamera = scene.activeCameras[0];\r\n                } else {\r\n                    listeningCamera = scene.activeCamera;\r\n                }\r\n\r\n                // Check if there is a listening camera\r\n                if (listeningCamera) {\r\n                    // Set the listener position to the listening camera global position\r\n                    if (!this._cachedCameraPosition.equals(listeningCamera.globalPosition)) {\r\n                        this._cachedCameraPosition.copyFrom(listeningCamera.globalPosition);\r\n                        audioEngine.audioContext.listener.setPosition(listeningCamera.globalPosition.x, listeningCamera.globalPosition.y, listeningCamera.globalPosition.z);\r\n                    }\r\n\r\n                    // for VR cameras\r\n                    if (listeningCamera.rigCameras && listeningCamera.rigCameras.length > 0) {\r\n                        listeningCamera = listeningCamera.rigCameras[0];\r\n                    }\r\n                    listeningCamera.getViewMatrix().invertToRef(this._invertMatrixTemp);\r\n                    Vector3.TransformNormalToRef(AudioSceneComponent._CameraDirection, this._invertMatrixTemp, this._cameraDirectionTemp);\r\n                    this._cameraDirectionTemp.normalize();\r\n                    // To avoid some errors on GearVR\r\n                    if (!isNaN(this._cameraDirectionTemp.x) && !isNaN(this._cameraDirectionTemp.y) && !isNaN(this._cameraDirectionTemp.z)) {\r\n                        if (!this._cachedCameraDirection.equals(this._cameraDirectionTemp)) {\r\n                            this._cachedCameraDirection.copyFrom(this._cameraDirectionTemp);\r\n                            audioEngine.audioContext.listener.setOrientation(this._cameraDirectionTemp.x, this._cameraDirectionTemp.y, this._cameraDirectionTemp.z, 0, 1, 0);\r\n                        }\r\n                    }\r\n                }\r\n                // Otherwise set the listener position to 0, 0 ,0\r\n                else {\r\n                    // Set the listener position\r\n                    audioEngine.audioContext.listener.setPosition(0, 0, 0);\r\n                }\r\n            }\r\n\r\n            let i: number;\r\n            for (i = 0; i < scene.mainSoundTrack.soundCollection.length; i++) {\r\n                const sound = scene.mainSoundTrack.soundCollection[i];\r\n                if (sound.useCustomAttenuation) {\r\n                    sound.updateDistanceFromListener();\r\n                }\r\n            }\r\n            if (scene.soundTracks) {\r\n                for (i = 0; i < scene.soundTracks.length; i++) {\r\n                    for (let j = 0; j < scene.soundTracks[i].soundCollection.length; j++) {\r\n                        const sound = scene.soundTracks[i].soundCollection[j];\r\n                        if (sound.useCustomAttenuation) {\r\n                            sound.updateDistanceFromListener();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nSound._SceneComponentInitialization = (scene: Scene) => {\r\n    let compo = scene._getComponent(SceneComponentConstants.NAME_AUDIO);\r\n    if (!compo) {\r\n        compo = new AudioSceneComponent(scene);\r\n        scene._addComponent(compo);\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}