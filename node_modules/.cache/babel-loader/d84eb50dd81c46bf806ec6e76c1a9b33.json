{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport { __extends } from \"tslib\";\nimport { WebXRAbstractMotionController } from \"./webXRAbstractMotionController.js\";\nimport { WebXRMotionControllerManager } from \"./webXRMotionControllerManager.js\";\nimport { Mesh } from \"../../Meshes/mesh.js\";\nimport { Quaternion } from \"../../Maths/math.vector.js\";\n/**\n * The motion controller class for oculus touch (quest, rift).\n * This class supports legacy mapping as well the standard xr mapping\n */\n\nvar WebXROculusTouchMotionController =\n/** @class */\nfunction (_super) {\n  __extends(WebXROculusTouchMotionController, _super);\n\n  function WebXROculusTouchMotionController(scene, gamepadObject, handedness, _legacyMapping, _forceLegacyControllers) {\n    if (_legacyMapping === void 0) {\n      _legacyMapping = false;\n    }\n\n    if (_forceLegacyControllers === void 0) {\n      _forceLegacyControllers = false;\n    }\n\n    var _this = _super.call(this, scene, OculusTouchLayouts[handedness], gamepadObject, handedness) || this;\n\n    _this._forceLegacyControllers = _forceLegacyControllers;\n    _this.profileId = \"oculus-touch\";\n    return _this;\n  }\n\n  WebXROculusTouchMotionController.prototype._getFilenameAndPath = function () {\n    var filename = \"\";\n\n    if (this.handedness === \"left\") {\n      filename = WebXROculusTouchMotionController.MODEL_LEFT_FILENAME;\n    } else {\n      // Right is the default if no hand is specified\n      filename = WebXROculusTouchMotionController.MODEL_RIGHT_FILENAME;\n    }\n\n    var path = this._isQuest() ? WebXROculusTouchMotionController.QUEST_MODEL_BASE_URL : WebXROculusTouchMotionController.MODEL_BASE_URL;\n    return {\n      filename: filename,\n      path: path\n    };\n  };\n\n  WebXROculusTouchMotionController.prototype._getModelLoadingConstraints = function () {\n    return true;\n  };\n\n  WebXROculusTouchMotionController.prototype._processLoadedModel = function (_meshes) {\n    var _this = this;\n\n    var isQuest = this._isQuest();\n\n    var triggerDirection = this.handedness === \"right\" ? -1 : 1;\n    this.getComponentIds().forEach(function (id) {\n      var comp = id && _this.getComponent(id);\n\n      if (comp) {\n        comp.onButtonStateChangedObservable.add(function (component) {\n          if (!_this.rootMesh || _this.disableAnimation) {\n            return;\n          }\n\n          switch (id) {\n            case \"xr-standard-trigger\":\n              // index trigger\n              if (!isQuest) {\n                _this._modelRootNode.getChildren()[3].rotation.x = -component.value * 0.2;\n                _this._modelRootNode.getChildren()[3].position.y = -component.value * 0.005;\n                _this._modelRootNode.getChildren()[3].position.z = -component.value * 0.005;\n              }\n\n              return;\n\n            case \"xr-standard-squeeze\":\n              // secondary trigger\n              if (!isQuest) {\n                _this._modelRootNode.getChildren()[4].position.x = triggerDirection * component.value * 0.0035;\n              }\n\n              return;\n\n            case \"xr-standard-thumbstick\":\n              // thumbstick\n              return;\n\n            case \"a-button\":\n            case \"x-button\":\n              if (!isQuest) {\n                if (component.pressed) {\n                  _this._modelRootNode.getChildren()[1].position.y = -0.001;\n                } else {\n                  _this._modelRootNode.getChildren()[1].position.y = 0;\n                }\n              }\n\n              return;\n\n            case \"b-button\":\n            case \"y-button\":\n              if (!isQuest) {\n                if (component.pressed) {\n                  _this._modelRootNode.getChildren()[2].position.y = -0.001;\n                } else {\n                  _this._modelRootNode.getChildren()[2].position.y = 0;\n                }\n              }\n\n              return;\n          }\n        }, undefined, true);\n      }\n    });\n  };\n\n  WebXROculusTouchMotionController.prototype._setRootMesh = function (meshes) {\n    this.rootMesh = new Mesh(this.profileId + \" \" + this.handedness, this.scene);\n\n    if (!this.scene.useRightHandedSystem) {\n      this.rootMesh.rotationQuaternion = Quaternion.FromEulerAngles(0, Math.PI, 0);\n    }\n\n    meshes.forEach(function (mesh) {\n      mesh.isPickable = false;\n    });\n\n    if (this._isQuest()) {\n      this._modelRootNode = meshes[0];\n    } else {\n      this._modelRootNode = meshes[1];\n      this.rootMesh.position.y = 0.034;\n      this.rootMesh.position.z = 0.052;\n    }\n\n    this._modelRootNode.parent = this.rootMesh;\n  };\n\n  WebXROculusTouchMotionController.prototype._updateModel = function () {// no-op. model is updated using observables.\n  };\n  /**\n   * Is this the new type of oculus touch. At the moment both have the same profile and it is impossible to differentiate\n   * between the touch and touch 2.\n   */\n\n\n  WebXROculusTouchMotionController.prototype._isQuest = function () {\n    // this is SADLY the only way to currently check. Until proper profiles will be available.\n    return !!navigator.userAgent.match(/Quest/gi) && !this._forceLegacyControllers;\n  };\n  /**\n   * The base url used to load the left and right controller models\n   */\n\n\n  WebXROculusTouchMotionController.MODEL_BASE_URL = \"https://controllers.babylonjs.com/oculus/\";\n  /**\n   * The name of the left controller model file\n   */\n\n  WebXROculusTouchMotionController.MODEL_LEFT_FILENAME = \"left.babylon\";\n  /**\n   * The name of the right controller model file\n   */\n\n  WebXROculusTouchMotionController.MODEL_RIGHT_FILENAME = \"right.babylon\";\n  /**\n   * Base Url for the Quest controller model.\n   */\n\n  WebXROculusTouchMotionController.QUEST_MODEL_BASE_URL = \"https://controllers.babylonjs.com/oculusQuest/\";\n  return WebXROculusTouchMotionController;\n}(WebXRAbstractMotionController);\n\nexport { WebXROculusTouchMotionController }; // register the profile\n\nWebXRMotionControllerManager.RegisterController(\"oculus-touch\", function (xrInput, scene) {\n  return new WebXROculusTouchMotionController(scene, xrInput.gamepad, xrInput.handedness);\n});\nWebXRMotionControllerManager.RegisterController(\"oculus-touch-legacy\", function (xrInput, scene) {\n  return new WebXROculusTouchMotionController(scene, xrInput.gamepad, xrInput.handedness, true);\n});\nvar OculusTouchLayouts = {\n  left: {\n    selectComponentId: \"xr-standard-trigger\",\n    components: {\n      \"xr-standard-trigger\": {\n        type: \"trigger\",\n        gamepadIndices: {\n          button: 0\n        },\n        rootNodeName: \"xr_standard_trigger\",\n        visualResponses: {}\n      },\n      \"xr-standard-squeeze\": {\n        type: \"squeeze\",\n        gamepadIndices: {\n          button: 1\n        },\n        rootNodeName: \"xr_standard_squeeze\",\n        visualResponses: {}\n      },\n      \"xr-standard-thumbstick\": {\n        type: \"thumbstick\",\n        gamepadIndices: {\n          button: 3,\n          xAxis: 2,\n          yAxis: 3\n        },\n        rootNodeName: \"xr_standard_thumbstick\",\n        visualResponses: {}\n      },\n      \"x-button\": {\n        type: \"button\",\n        gamepadIndices: {\n          button: 4\n        },\n        rootNodeName: \"x_button\",\n        visualResponses: {}\n      },\n      \"y-button\": {\n        type: \"button\",\n        gamepadIndices: {\n          button: 5\n        },\n        rootNodeName: \"y_button\",\n        visualResponses: {}\n      },\n      thumbrest: {\n        type: \"button\",\n        gamepadIndices: {\n          button: 6\n        },\n        rootNodeName: \"thumbrest\",\n        visualResponses: {}\n      }\n    },\n    gamepadMapping: \"xr-standard\",\n    rootNodeName: \"oculus-touch-v2-left\",\n    assetPath: \"left.glb\"\n  },\n  right: {\n    selectComponentId: \"xr-standard-trigger\",\n    components: {\n      \"xr-standard-trigger\": {\n        type: \"trigger\",\n        gamepadIndices: {\n          button: 0\n        },\n        rootNodeName: \"xr_standard_trigger\",\n        visualResponses: {}\n      },\n      \"xr-standard-squeeze\": {\n        type: \"squeeze\",\n        gamepadIndices: {\n          button: 1\n        },\n        rootNodeName: \"xr_standard_squeeze\",\n        visualResponses: {}\n      },\n      \"xr-standard-thumbstick\": {\n        type: \"thumbstick\",\n        gamepadIndices: {\n          button: 3,\n          xAxis: 2,\n          yAxis: 3\n        },\n        rootNodeName: \"xr_standard_thumbstick\",\n        visualResponses: {}\n      },\n      \"a-button\": {\n        type: \"button\",\n        gamepadIndices: {\n          button: 4\n        },\n        rootNodeName: \"a_button\",\n        visualResponses: {}\n      },\n      \"b-button\": {\n        type: \"button\",\n        gamepadIndices: {\n          button: 5\n        },\n        rootNodeName: \"b_button\",\n        visualResponses: {}\n      },\n      thumbrest: {\n        type: \"button\",\n        gamepadIndices: {\n          button: 6\n        },\n        rootNodeName: \"thumbrest\",\n        visualResponses: {}\n      }\n    },\n    gamepadMapping: \"xr-standard\",\n    rootNodeName: \"oculus-touch-v2-right\",\n    assetPath: \"right.glb\"\n  }\n};","map":{"version":3,"mappings":"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","names":["WebXRAbstractMotionController","WebXRMotionControllerManager","Mesh","Quaternion","__extends","scene","gamepadObject","handedness","_legacyMapping","_forceLegacyControllers","_super","OculusTouchLayouts","_this","WebXROculusTouchMotionController","filename","MODEL_LEFT_FILENAME","MODEL_RIGHT_FILENAME","path","_isQuest","QUEST_MODEL_BASE_URL","MODEL_BASE_URL","_meshes","isQuest","triggerDirection","getComponentIds","forEach","id","comp","getComponent","onButtonStateChangedObservable","add","component","rootMesh","disableAnimation","_modelRootNode","getChildren","rotation","x","value","position","y","z","pressed","undefined","meshes","profileId","useRightHandedSystem","rotationQuaternion","FromEulerAngles","Math","PI","mesh","isPickable","parent","navigator","userAgent","match","RegisterController","xrInput","gamepad","left","selectComponentId","components","type","gamepadIndices","button","rootNodeName","visualResponses","xAxis","yAxis","thumbrest","gamepadMapping","assetPath","right"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/XR/motionController/webXROculusTouchMotionController.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { IMinimalMotionControllerObject, MotionControllerHandedness, IMotionControllerLayoutMap } from \"./webXRAbstractMotionController\";\r\nimport { WebXRAbstractMotionController } from \"./webXRAbstractMotionController\";\r\nimport { WebXRMotionControllerManager } from \"./webXRMotionControllerManager\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport { Quaternion } from \"../../Maths/math.vector\";\r\n\r\n/**\r\n * The motion controller class for oculus touch (quest, rift).\r\n * This class supports legacy mapping as well the standard xr mapping\r\n */\r\nexport class WebXROculusTouchMotionController extends WebXRAbstractMotionController {\r\n    private _modelRootNode: AbstractMesh;\r\n\r\n    /**\r\n     * The base url used to load the left and right controller models\r\n     */\r\n    public static MODEL_BASE_URL: string = \"https://controllers.babylonjs.com/oculus/\";\r\n    /**\r\n     * The name of the left controller model file\r\n     */\r\n    public static MODEL_LEFT_FILENAME: string = \"left.babylon\";\r\n    /**\r\n     * The name of the right controller model file\r\n     */\r\n    public static MODEL_RIGHT_FILENAME: string = \"right.babylon\";\r\n    /**\r\n     * Base Url for the Quest controller model.\r\n     */\r\n    public static QUEST_MODEL_BASE_URL: string = \"https://controllers.babylonjs.com/oculusQuest/\";\r\n\r\n    public profileId = \"oculus-touch\";\r\n\r\n    constructor(\r\n        scene: Scene,\r\n        gamepadObject: IMinimalMotionControllerObject,\r\n        handedness: MotionControllerHandedness,\r\n        _legacyMapping: boolean = false,\r\n        private _forceLegacyControllers: boolean = false\r\n    ) {\r\n        super(scene, OculusTouchLayouts[handedness], gamepadObject, handedness);\r\n    }\r\n\r\n    protected _getFilenameAndPath(): { filename: string; path: string } {\r\n        let filename = \"\";\r\n        if (this.handedness === \"left\") {\r\n            filename = WebXROculusTouchMotionController.MODEL_LEFT_FILENAME;\r\n        } else {\r\n            // Right is the default if no hand is specified\r\n            filename = WebXROculusTouchMotionController.MODEL_RIGHT_FILENAME;\r\n        }\r\n\r\n        const path = this._isQuest() ? WebXROculusTouchMotionController.QUEST_MODEL_BASE_URL : WebXROculusTouchMotionController.MODEL_BASE_URL;\r\n        return {\r\n            filename,\r\n            path,\r\n        };\r\n    }\r\n\r\n    protected _getModelLoadingConstraints(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected _processLoadedModel(_meshes: AbstractMesh[]): void {\r\n        const isQuest = this._isQuest();\r\n        const triggerDirection = this.handedness === \"right\" ? -1 : 1;\r\n\r\n        this.getComponentIds().forEach((id) => {\r\n            const comp = id && this.getComponent(id);\r\n            if (comp) {\r\n                comp.onButtonStateChangedObservable.add(\r\n                    (component) => {\r\n                        if (!this.rootMesh || this.disableAnimation) {\r\n                            return;\r\n                        }\r\n\r\n                        switch (id) {\r\n                            case \"xr-standard-trigger\": // index trigger\r\n                                if (!isQuest) {\r\n                                    (<AbstractMesh>this._modelRootNode.getChildren()[3]).rotation.x = -component.value * 0.2;\r\n                                    (<AbstractMesh>this._modelRootNode.getChildren()[3]).position.y = -component.value * 0.005;\r\n                                    (<AbstractMesh>this._modelRootNode.getChildren()[3]).position.z = -component.value * 0.005;\r\n                                }\r\n                                return;\r\n                            case \"xr-standard-squeeze\": // secondary trigger\r\n                                if (!isQuest) {\r\n                                    (<AbstractMesh>this._modelRootNode.getChildren()[4]).position.x = triggerDirection * component.value * 0.0035;\r\n                                }\r\n                                return;\r\n                            case \"xr-standard-thumbstick\": // thumbstick\r\n                                return;\r\n                            case \"a-button\":\r\n                            case \"x-button\":\r\n                                if (!isQuest) {\r\n                                    if (component.pressed) {\r\n                                        (<AbstractMesh>this._modelRootNode.getChildren()[1]).position.y = -0.001;\r\n                                    } else {\r\n                                        (<AbstractMesh>this._modelRootNode.getChildren()[1]).position.y = 0;\r\n                                    }\r\n                                }\r\n                                return;\r\n                            case \"b-button\":\r\n                            case \"y-button\":\r\n                                if (!isQuest) {\r\n                                    if (component.pressed) {\r\n                                        (<AbstractMesh>this._modelRootNode.getChildren()[2]).position.y = -0.001;\r\n                                    } else {\r\n                                        (<AbstractMesh>this._modelRootNode.getChildren()[2]).position.y = 0;\r\n                                    }\r\n                                }\r\n                                return;\r\n                        }\r\n                    },\r\n                    undefined,\r\n                    true\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    protected _setRootMesh(meshes: AbstractMesh[]): void {\r\n        this.rootMesh = new Mesh(this.profileId + \" \" + this.handedness, this.scene);\r\n        if (!this.scene.useRightHandedSystem) {\r\n            this.rootMesh.rotationQuaternion = Quaternion.FromEulerAngles(0, Math.PI, 0);\r\n        }\r\n\r\n        meshes.forEach((mesh) => {\r\n            mesh.isPickable = false;\r\n        });\r\n        if (this._isQuest()) {\r\n            this._modelRootNode = meshes[0];\r\n        } else {\r\n            this._modelRootNode = meshes[1];\r\n            this.rootMesh.position.y = 0.034;\r\n            this.rootMesh.position.z = 0.052;\r\n        }\r\n        this._modelRootNode.parent = this.rootMesh;\r\n    }\r\n\r\n    protected _updateModel(): void {\r\n        // no-op. model is updated using observables.\r\n    }\r\n\r\n    /**\r\n     * Is this the new type of oculus touch. At the moment both have the same profile and it is impossible to differentiate\r\n     * between the touch and touch 2.\r\n     */\r\n    private _isQuest() {\r\n        // this is SADLY the only way to currently check. Until proper profiles will be available.\r\n        return !!navigator.userAgent.match(/Quest/gi) && !this._forceLegacyControllers;\r\n    }\r\n}\r\n\r\n// register the profile\r\nWebXRMotionControllerManager.RegisterController(\"oculus-touch\", (xrInput: XRInputSource, scene: Scene) => {\r\n    return new WebXROculusTouchMotionController(scene, <any>xrInput.gamepad, xrInput.handedness);\r\n});\r\n\r\nWebXRMotionControllerManager.RegisterController(\"oculus-touch-legacy\", (xrInput: XRInputSource, scene: Scene) => {\r\n    return new WebXROculusTouchMotionController(scene, <any>xrInput.gamepad, xrInput.handedness, true);\r\n});\r\n\r\nconst OculusTouchLayouts: IMotionControllerLayoutMap = {\r\n    left: {\r\n        selectComponentId: \"xr-standard-trigger\",\r\n        components: {\r\n            \"xr-standard-trigger\": {\r\n                type: \"trigger\",\r\n                gamepadIndices: {\r\n                    button: 0,\r\n                },\r\n                rootNodeName: \"xr_standard_trigger\",\r\n                visualResponses: {},\r\n            },\r\n            \"xr-standard-squeeze\": {\r\n                type: \"squeeze\",\r\n                gamepadIndices: {\r\n                    button: 1,\r\n                },\r\n                rootNodeName: \"xr_standard_squeeze\",\r\n                visualResponses: {},\r\n            },\r\n            \"xr-standard-thumbstick\": {\r\n                type: \"thumbstick\",\r\n                gamepadIndices: {\r\n                    button: 3,\r\n                    xAxis: 2,\r\n                    yAxis: 3,\r\n                },\r\n                rootNodeName: \"xr_standard_thumbstick\",\r\n                visualResponses: {},\r\n            },\r\n            \"x-button\": {\r\n                type: \"button\",\r\n                gamepadIndices: {\r\n                    button: 4,\r\n                },\r\n                rootNodeName: \"x_button\",\r\n                visualResponses: {},\r\n            },\r\n            \"y-button\": {\r\n                type: \"button\",\r\n                gamepadIndices: {\r\n                    button: 5,\r\n                },\r\n                rootNodeName: \"y_button\",\r\n                visualResponses: {},\r\n            },\r\n            thumbrest: {\r\n                type: \"button\",\r\n                gamepadIndices: {\r\n                    button: 6,\r\n                },\r\n                rootNodeName: \"thumbrest\",\r\n                visualResponses: {},\r\n            },\r\n        },\r\n        gamepadMapping: \"xr-standard\",\r\n        rootNodeName: \"oculus-touch-v2-left\",\r\n        assetPath: \"left.glb\",\r\n    },\r\n    right: {\r\n        selectComponentId: \"xr-standard-trigger\",\r\n        components: {\r\n            \"xr-standard-trigger\": {\r\n                type: \"trigger\",\r\n                gamepadIndices: {\r\n                    button: 0,\r\n                },\r\n                rootNodeName: \"xr_standard_trigger\",\r\n                visualResponses: {},\r\n            },\r\n            \"xr-standard-squeeze\": {\r\n                type: \"squeeze\",\r\n                gamepadIndices: {\r\n                    button: 1,\r\n                },\r\n                rootNodeName: \"xr_standard_squeeze\",\r\n                visualResponses: {},\r\n            },\r\n            \"xr-standard-thumbstick\": {\r\n                type: \"thumbstick\",\r\n                gamepadIndices: {\r\n                    button: 3,\r\n                    xAxis: 2,\r\n                    yAxis: 3,\r\n                },\r\n                rootNodeName: \"xr_standard_thumbstick\",\r\n                visualResponses: {},\r\n            },\r\n            \"a-button\": {\r\n                type: \"button\",\r\n                gamepadIndices: {\r\n                    button: 4,\r\n                },\r\n                rootNodeName: \"a_button\",\r\n                visualResponses: {},\r\n            },\r\n            \"b-button\": {\r\n                type: \"button\",\r\n                gamepadIndices: {\r\n                    button: 5,\r\n                },\r\n                rootNodeName: \"b_button\",\r\n                visualResponses: {},\r\n            },\r\n            thumbrest: {\r\n                type: \"button\",\r\n                gamepadIndices: {\r\n                    button: 6,\r\n                },\r\n                rootNodeName: \"thumbrest\",\r\n                visualResponses: {},\r\n            },\r\n        },\r\n        gamepadMapping: \"xr-standard\",\r\n        rootNodeName: \"oculus-touch-v2-right\",\r\n        assetPath: \"right.glb\",\r\n    },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}