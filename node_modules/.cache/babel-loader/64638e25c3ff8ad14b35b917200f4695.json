{"ast":null,"code":"import \"core-js/modules/es.function.bind.js\";\nimport { __extends } from \"tslib\";\nimport { Camera } from \"../../Cameras/camera.js\";\nimport { DeviceOrientationCamera } from \"../../Cameras/deviceOrientationCamera.js\";\nimport { VRCameraMetrics } from \"./vrCameraMetrics.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Node } from \"../../node.js\";\nimport { setVRRigMode } from \"../RigModes/vrRigMode.js\";\nNode.AddNodeConstructor(\"VRDeviceOrientationFreeCamera\", function (name, scene) {\n  return function () {\n    return new VRDeviceOrientationFreeCamera(name, Vector3.Zero(), scene);\n  };\n});\n/**\n * Camera used to simulate VR rendering (based on FreeCamera)\n * @see https://doc.babylonjs.com/babylon101/cameras#vr-device-orientation-cameras\n */\n\nvar VRDeviceOrientationFreeCamera =\n/** @class */\nfunction (_super) {\n  __extends(VRDeviceOrientationFreeCamera, _super);\n  /**\n   * Creates a new VRDeviceOrientationFreeCamera\n   * @param name defines camera name\n   * @param position defines the start position of the camera\n   * @param scene defines the scene the camera belongs to\n   * @param compensateDistortion defines if the camera needs to compensate the lens distortion\n   * @param vrCameraMetrics defines the vr metrics associated to the camera\n   */\n\n\n  function VRDeviceOrientationFreeCamera(name, position, scene, compensateDistortion, vrCameraMetrics) {\n    if (compensateDistortion === void 0) {\n      compensateDistortion = true;\n    }\n\n    if (vrCameraMetrics === void 0) {\n      vrCameraMetrics = VRCameraMetrics.GetDefault();\n    }\n\n    var _this = _super.call(this, name, position, scene) || this;\n\n    _this._setRigMode = setVRRigMode.bind(null, _this);\n    vrCameraMetrics.compensateDistortion = compensateDistortion;\n\n    _this.setCameraRigMode(Camera.RIG_MODE_VR, {\n      vrCameraMetrics: vrCameraMetrics\n    });\n\n    return _this;\n  }\n  /**\n   * Gets camera class name\n   * @returns VRDeviceOrientationFreeCamera\n   */\n\n\n  VRDeviceOrientationFreeCamera.prototype.getClassName = function () {\n    return \"VRDeviceOrientationFreeCamera\";\n  };\n\n  return VRDeviceOrientationFreeCamera;\n}(DeviceOrientationCamera);\n\nexport { VRDeviceOrientationFreeCamera };","map":{"version":3,"mappings":";;AAAA,SAASA,MAAT,QAAuB,yBAAvB;AACA,SAASC,uBAAT,QAAwC,0CAAxC;AACA,SAASC,eAAT,QAAgC,sBAAhC;AAEA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,IAAT,QAAqB,eAArB;AACA,SAASC,YAAT,QAA6B,0BAA7B;AAEAD,IAAI,CAACE,kBAAL,CAAwB,+BAAxB,EAAyD,UAACC,IAAD,EAAOC,KAAP,EAAY;AACjE,SAAO;AAAM,eAAIC,6BAAJ,CAAkCF,IAAlC,EAAwCJ,OAAO,CAACO,IAAR,EAAxC,EAAwDF,KAAxD;AAA8D,GAA3E;AACH,CAFD;AAIA;;;;;AAIA;AAAA;AAAA;AAAmDG;AAC/C;;;;;;;;;;AAQA,yCAAYJ,IAAZ,EAA0BK,QAA1B,EAA6CJ,KAA7C,EAA4DK,oBAA5D,EAAyFC,eAAzF,EAAwJ;AAA5F;AAAAD;AAA2B;;AAAE;AAAAC,wBAAmCZ,eAAe,CAACa,UAAhB,EAAnC;AAA+D;;AAAxJ,gBACIC,kBAAMT,IAAN,EAAYK,QAAZ,EAAsBJ,KAAtB,KAA4B,IADhC;;AAeUS,wBAAcZ,YAAY,CAACa,IAAb,CAAkB,IAAlB,EAAwBD,KAAxB,CAAd;AAZNH,mBAAe,CAACD,oBAAhB,GAAuCA,oBAAvC;;AACAI,SAAI,CAACE,gBAAL,CAAsBnB,MAAM,CAACoB,WAA7B,EAA0C;AAAEN,qBAAe,EAAEA;AAAnB,KAA1C;;;AACH;AAED;;;;;;AAIOL,yDAAP;AACI,WAAO,+BAAP;AACH,GAFM;;AAKX;AAAC,CAzBD,CAAmDR,uBAAnD","names":["Camera","DeviceOrientationCamera","VRCameraMetrics","Vector3","Node","setVRRigMode","AddNodeConstructor","name","scene","VRDeviceOrientationFreeCamera","Zero","__extends","position","compensateDistortion","vrCameraMetrics","GetDefault","_super","_this","bind","setCameraRigMode","RIG_MODE_VR"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Cameras/VR/vrDeviceOrientationFreeCamera.ts"],"sourcesContent":["import { Camera } from \"../../Cameras/camera\";\r\nimport { DeviceOrientationCamera } from \"../../Cameras/deviceOrientationCamera\";\r\nimport { VRCameraMetrics } from \"./vrCameraMetrics\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Node } from \"../../node\";\r\nimport { setVRRigMode } from \"../RigModes/vrRigMode\";\r\n\r\nNode.AddNodeConstructor(\"VRDeviceOrientationFreeCamera\", (name, scene) => {\r\n    return () => new VRDeviceOrientationFreeCamera(name, Vector3.Zero(), scene);\r\n});\r\n\r\n/**\r\n * Camera used to simulate VR rendering (based on FreeCamera)\r\n * @see https://doc.babylonjs.com/babylon101/cameras#vr-device-orientation-cameras\r\n */\r\nexport class VRDeviceOrientationFreeCamera extends DeviceOrientationCamera {\r\n    /**\r\n     * Creates a new VRDeviceOrientationFreeCamera\r\n     * @param name defines camera name\r\n     * @param position defines the start position of the camera\r\n     * @param scene defines the scene the camera belongs to\r\n     * @param compensateDistortion defines if the camera needs to compensate the lens distortion\r\n     * @param vrCameraMetrics defines the vr metrics associated to the camera\r\n     */\r\n    constructor(name: string, position: Vector3, scene?: Scene, compensateDistortion = true, vrCameraMetrics: VRCameraMetrics = VRCameraMetrics.GetDefault()) {\r\n        super(name, position, scene);\r\n\r\n        vrCameraMetrics.compensateDistortion = compensateDistortion;\r\n        this.setCameraRigMode(Camera.RIG_MODE_VR, { vrCameraMetrics: vrCameraMetrics });\r\n    }\r\n\r\n    /**\r\n     * Gets camera class name\r\n     * @returns VRDeviceOrientationFreeCamera\r\n     */\r\n    public getClassName(): string {\r\n        return \"VRDeviceOrientationFreeCamera\";\r\n    }\r\n\r\n    protected _setRigMode = setVRRigMode.bind(null, this);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}