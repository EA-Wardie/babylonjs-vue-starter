{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { InternalTexture } from \"./internalTexture.js\";\n/**\n * Class used to store an external texture (like GPUExternalTexture in WebGPU)\n */\n\nvar ExternalTexture =\n/** @class */\nfunction () {\n  /**\n   * Constructs the texture\n   * @param video The video the texture should be wrapped around\n   */\n  function ExternalTexture(video) {\n    /**\n     * Gets a boolean indicating if the texture uses mipmaps\n     */\n    this.useMipMaps = false;\n    /**\n     * The type of the underlying texture is implementation dependent, so return \"UNDEFINED\" for the type\n     */\n\n    this.type = 16;\n    this._video = video;\n    this.uniqueId = InternalTexture._Counter++;\n  }\n  /**\n   * Checks if a texture is an external or internal texture\n   * @param texture the external or internal texture\n   * @returns true if the texture is an external texture, else false\n   */\n\n\n  ExternalTexture.IsExternalTexture = function (texture) {\n    return texture.underlyingResource !== undefined;\n  };\n  /**\n   * Get the class name of the texture.\n   * @returns \"ExternalTexture\"\n   */\n\n\n  ExternalTexture.prototype.getClassName = function () {\n    return \"ExternalTexture\";\n  };\n\n  Object.defineProperty(ExternalTexture.prototype, \"underlyingResource\", {\n    /**\n     * Gets the underlying texture object\n     */\n    get: function get() {\n      return this._video;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Get if the texture is ready to be used (downloaded, converted, mip mapped...).\n   * @returns true if fully ready\n   */\n\n  ExternalTexture.prototype.isReady = function () {\n    return this._video.readyState >= this._video.HAVE_CURRENT_DATA;\n  };\n  /**\n   * Dispose the texture and release its associated resources.\n   */\n\n\n  ExternalTexture.prototype.dispose = function () {};\n\n  return ExternalTexture;\n}();\n\nexport { ExternalTexture };","map":{"version":3,"mappings":";AACA,SAASA,eAAT,QAAgC,sBAAhC;AAEA;;;;AAGA;AAAA;AAAA;AA0CI;;;;AAIA,2BAAYC,KAAZ,EAAmC;AAnBnC;;;AAGO,sBAAsB,KAAtB;AAEP;;;;AAGgB,gBAAO,EAAP;AAYZ,SAAKC,MAAL,GAAcD,KAAd;AACA,SAAKE,QAAL,GAAgBH,eAAe,CAACI,QAAhB,EAAhB;AACH;AAhDD;;;;;;;AAKcC,sCAAd,UAAgCC,OAAhC,EAA0E;AACtE,WAAQA,OAA2B,CAACC,kBAA5B,KAAmDC,SAA3D;AACH,GAFa;AAMd;;;;;;AAIOH,2CAAP;AACI,WAAO,iBAAP;AACH,GAFM;;AAOPI,wBAAWJ,yBAAX,EAAW,oBAAX,EAA6B;AAH7B;;;SAGA;AACI,aAAO,KAAKH,MAAZ;AACH,KAF4B;qBAAA;;AAAA,GAA7B;AA4BA;;;;;AAIOG,sCAAP;AACI,WAAO,KAAKH,MAAL,CAAYQ,UAAZ,IAA0B,KAAKR,MAAL,CAAYS,iBAA7C;AACH,GAFM;AAIP;;;;;AAGON,sCAAP,aAAyB,CAAlB;;AACX;AAAC,CA/DD","names":["InternalTexture","video","_video","uniqueId","_Counter","ExternalTexture","texture","underlyingResource","undefined","Object","readyState","HAVE_CURRENT_DATA"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Materials/Textures/externalTexture.ts"],"sourcesContent":["import { Constants } from \"../../Engines/constants\";\r\nimport { InternalTexture } from \"./internalTexture\";\r\n\r\n/**\r\n * Class used to store an external texture (like GPUExternalTexture in WebGPU)\r\n */\r\nexport class ExternalTexture {\r\n    /**\r\n     * Checks if a texture is an external or internal texture\r\n     * @param texture the external or internal texture\r\n     * @returns true if the texture is an external texture, else false\r\n     */\r\n    public static IsExternalTexture(texture: ExternalTexture | InternalTexture): texture is ExternalTexture {\r\n        return (texture as ExternalTexture).underlyingResource !== undefined;\r\n    }\r\n\r\n    private _video: HTMLVideoElement;\r\n\r\n    /**\r\n     * Get the class name of the texture.\r\n     * @returns \"ExternalTexture\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"ExternalTexture\";\r\n    }\r\n\r\n    /**\r\n     * Gets the underlying texture object\r\n     */\r\n    public get underlyingResource(): any {\r\n        return this._video;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the texture uses mipmaps\r\n     */\r\n    public useMipMaps: boolean = false;\r\n\r\n    /**\r\n     * The type of the underlying texture is implementation dependent, so return \"UNDEFINED\" for the type\r\n     */\r\n    public readonly type = Constants.TEXTURETYPE_UNDEFINED;\r\n\r\n    /**\r\n     * Gets the unique id of this texture\r\n     */\r\n    public readonly uniqueId: number;\r\n\r\n    /**\r\n     * Constructs the texture\r\n     * @param video The video the texture should be wrapped around\r\n     */\r\n    constructor(video: HTMLVideoElement) {\r\n        this._video = video;\r\n        this.uniqueId = InternalTexture._Counter++;\r\n    }\r\n\r\n    /**\r\n     * Get if the texture is ready to be used (downloaded, converted, mip mapped...).\r\n     * @returns true if fully ready\r\n     */\r\n    public isReady(): boolean {\r\n        return this._video.readyState >= this._video.HAVE_CURRENT_DATA;\r\n    }\r\n\r\n    /**\r\n     * Dispose the texture and release its associated resources.\r\n     */\r\n    public dispose(): void {}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}