{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { __assign } from \"tslib\";\nimport { Vector3, Vector2 } from \"../Maths/math.vector.js\";\nimport { StringDictionary } from \"./stringDictionary.js\"; // Mainly based on these 2 articles :\n// Creating an universal virtual touch joystick working for all Touch models thanks to Hand.JS : http://blogs.msdn.com/b/davrous/archive/2013/02/22/creating-an-universal-virtual-touch-joystick-working-for-all-touch-models-thanks-to-hand-js.aspx\n// & on Seb Lee-Delisle original work: http://seb.ly/2011/04/multi-touch-game-controller-in-javascripthtml5-for-ipad/\n\n/**\n * Defines the potential axis of a Joystick\n */\n\nexport var JoystickAxis;\n\n(function (JoystickAxis) {\n  /** X axis */\n  JoystickAxis[JoystickAxis[\"X\"] = 0] = \"X\";\n  /** Y axis */\n\n  JoystickAxis[JoystickAxis[\"Y\"] = 1] = \"Y\";\n  /** Z axis */\n\n  JoystickAxis[JoystickAxis[\"Z\"] = 2] = \"Z\";\n})(JoystickAxis || (JoystickAxis = {}));\n/**\n * Class used to define virtual joystick (used in touch mode)\n */\n\n\nvar VirtualJoystick =\n/** @class */\nfunction () {\n  /**\n   * Creates a new virtual joystick\n   * @param leftJoystick defines that the joystick is for left hand (false by default)\n   * @param customizations Defines the options we want to customize the VirtualJoystick\n   */\n  function VirtualJoystick(leftJoystick, customizations) {\n    var _this = this;\n\n    var options = __assign(__assign({}, VirtualJoystick._GetDefaultOptions()), customizations);\n\n    if (leftJoystick) {\n      this._leftJoystick = true;\n    } else {\n      this._leftJoystick = false;\n    }\n\n    VirtualJoystick._GlobalJoystickIndex++; // By default left & right arrow keys are moving the X\n    // and up & down keys are moving the Y\n\n    this._axisTargetedByLeftAndRight = JoystickAxis.X;\n    this._axisTargetedByUpAndDown = JoystickAxis.Y;\n    this.reverseLeftRight = false;\n    this.reverseUpDown = false; // collections of pointers\n\n    this._touches = new StringDictionary();\n    this.deltaPosition = Vector3.Zero();\n    this._joystickSensibility = 25;\n    this._inversedSensibility = 1 / (this._joystickSensibility / 1000);\n\n    this._onResize = function () {\n      VirtualJoystick._VJCanvasWidth = window.innerWidth;\n      VirtualJoystick._VJCanvasHeight = window.innerHeight;\n\n      if (VirtualJoystick.Canvas) {\n        VirtualJoystick.Canvas.width = VirtualJoystick._VJCanvasWidth;\n        VirtualJoystick.Canvas.height = VirtualJoystick._VJCanvasHeight;\n      }\n\n      VirtualJoystick._HalfWidth = VirtualJoystick._VJCanvasWidth / 2;\n    }; // injecting a canvas element on top of the canvas 3D game\n\n\n    if (!VirtualJoystick.Canvas) {\n      window.addEventListener(\"resize\", this._onResize, false);\n      VirtualJoystick.Canvas = document.createElement(\"canvas\");\n      VirtualJoystick._VJCanvasWidth = window.innerWidth;\n      VirtualJoystick._VJCanvasHeight = window.innerHeight;\n      VirtualJoystick.Canvas.width = window.innerWidth;\n      VirtualJoystick.Canvas.height = window.innerHeight;\n      VirtualJoystick.Canvas.style.width = \"100%\";\n      VirtualJoystick.Canvas.style.height = \"100%\";\n      VirtualJoystick.Canvas.style.position = \"absolute\";\n      VirtualJoystick.Canvas.style.backgroundColor = \"transparent\";\n      VirtualJoystick.Canvas.style.top = \"0px\";\n      VirtualJoystick.Canvas.style.left = \"0px\";\n      VirtualJoystick.Canvas.style.zIndex = \"5\";\n      VirtualJoystick.Canvas.style.msTouchAction = \"none\";\n      VirtualJoystick.Canvas.style.touchAction = \"none\"; // fix https://forum.babylonjs.com/t/virtualjoystick-needs-to-set-style-touch-action-none-explicitly/9562\n      // Support for jQuery PEP polyfill\n\n      VirtualJoystick.Canvas.setAttribute(\"touch-action\", \"none\");\n      var context_1 = VirtualJoystick.Canvas.getContext(\"2d\");\n\n      if (!context_1) {\n        throw new Error(\"Unable to create canvas for virtual joystick\");\n      }\n\n      VirtualJoystick._VJCanvasContext = context_1;\n      VirtualJoystick._VJCanvasContext.strokeStyle = \"#ffffff\";\n      VirtualJoystick._VJCanvasContext.lineWidth = 2;\n      document.body.appendChild(VirtualJoystick.Canvas);\n    }\n\n    VirtualJoystick._HalfWidth = VirtualJoystick.Canvas.width / 2;\n    this.pressed = false;\n    this.limitToContainer = options.limitToContainer; // default joystick color\n\n    this._joystickColor = options.color; // default joystick size\n\n    this.containerSize = options.containerSize;\n    this.puckSize = options.puckSize;\n\n    if (options.position) {\n      this.setPosition(options.position.x, options.position.y);\n    }\n\n    if (options.puckImage) {\n      this.setPuckImage(options.puckImage);\n    }\n\n    if (options.containerImage) {\n      this.setContainerImage(options.containerImage);\n    }\n\n    if (options.alwaysVisible) {\n      VirtualJoystick._AlwaysVisibleSticks++;\n    } // must come after position potentially set\n\n\n    this.alwaysVisible = options.alwaysVisible;\n    this._joystickPointerId = -1; // current joystick position\n\n    this._joystickPointerPos = new Vector2(0, 0);\n    this._joystickPreviousPointerPos = new Vector2(0, 0); // origin joystick position\n\n    this._joystickPointerStartPos = new Vector2(0, 0);\n    this._deltaJoystickVector = new Vector2(0, 0);\n\n    this._onPointerDownHandlerRef = function (evt) {\n      _this._onPointerDown(evt);\n    };\n\n    this._onPointerMoveHandlerRef = function (evt) {\n      _this._onPointerMove(evt);\n    };\n\n    this._onPointerUpHandlerRef = function (evt) {\n      _this._onPointerUp(evt);\n    };\n\n    VirtualJoystick.Canvas.addEventListener(\"pointerdown\", this._onPointerDownHandlerRef, false);\n    VirtualJoystick.Canvas.addEventListener(\"pointermove\", this._onPointerMoveHandlerRef, false);\n    VirtualJoystick.Canvas.addEventListener(\"pointerup\", this._onPointerUpHandlerRef, false);\n    VirtualJoystick.Canvas.addEventListener(\"pointerout\", this._onPointerUpHandlerRef, false);\n    VirtualJoystick.Canvas.addEventListener(\"contextmenu\", function (evt) {\n      evt.preventDefault(); // Disables system menu\n    }, false);\n    requestAnimationFrame(function () {\n      _this._drawVirtualJoystick();\n    });\n  }\n\n  VirtualJoystick._GetDefaultOptions = function () {\n    return {\n      puckSize: 40,\n      containerSize: 60,\n      color: \"cyan\",\n      puckImage: undefined,\n      containerImage: undefined,\n      position: undefined,\n      alwaysVisible: false,\n      limitToContainer: false\n    };\n  };\n  /**\n   * Defines joystick sensibility (ie. the ratio between a physical move and virtual joystick position change)\n   * @param newJoystickSensibility defines the new sensibility\n   */\n\n\n  VirtualJoystick.prototype.setJoystickSensibility = function (newJoystickSensibility) {\n    this._joystickSensibility = newJoystickSensibility;\n    this._inversedSensibility = 1 / (this._joystickSensibility / 1000);\n  };\n\n  VirtualJoystick.prototype._onPointerDown = function (e) {\n    var positionOnScreenCondition;\n    e.preventDefault();\n\n    if (this._leftJoystick === true) {\n      positionOnScreenCondition = e.clientX < VirtualJoystick._HalfWidth;\n    } else {\n      positionOnScreenCondition = e.clientX > VirtualJoystick._HalfWidth;\n    }\n\n    if (positionOnScreenCondition && this._joystickPointerId < 0) {\n      // First contact will be dedicated to the virtual joystick\n      this._joystickPointerId = e.pointerId;\n\n      if (this._joystickPosition) {\n        this._joystickPointerStartPos = this._joystickPosition.clone();\n        this._joystickPointerPos = this._joystickPosition.clone();\n        this._joystickPreviousPointerPos = this._joystickPosition.clone(); // in case the user only clicks down && doesn't move:\n        // this ensures the delta is properly set\n\n        this._onPointerMove(e);\n      } else {\n        this._joystickPointerStartPos.x = e.clientX;\n        this._joystickPointerStartPos.y = e.clientY;\n        this._joystickPointerPos = this._joystickPointerStartPos.clone();\n        this._joystickPreviousPointerPos = this._joystickPointerStartPos.clone();\n      }\n\n      this._deltaJoystickVector.x = 0;\n      this._deltaJoystickVector.y = 0;\n      this.pressed = true;\n\n      this._touches.add(e.pointerId.toString(), e);\n    } else {\n      // You can only trigger the action buttons with a joystick declared\n      if (VirtualJoystick._GlobalJoystickIndex < 2 && this._action) {\n        this._action();\n\n        this._touches.add(e.pointerId.toString(), {\n          x: e.clientX,\n          y: e.clientY,\n          prevX: e.clientX,\n          prevY: e.clientY\n        });\n      }\n    }\n  };\n\n  VirtualJoystick.prototype._onPointerMove = function (e) {\n    // If the current pointer is the one associated to the joystick (first touch contact)\n    if (this._joystickPointerId == e.pointerId) {\n      // limit to container if need be\n      if (this.limitToContainer) {\n        var vector = new Vector2(e.clientX - this._joystickPointerStartPos.x, e.clientY - this._joystickPointerStartPos.y);\n        var distance = vector.length();\n\n        if (distance > this.containerSize) {\n          vector.scaleInPlace(this.containerSize / distance);\n        }\n\n        this._joystickPointerPos.x = this._joystickPointerStartPos.x + vector.x;\n        this._joystickPointerPos.y = this._joystickPointerStartPos.y + vector.y;\n      } else {\n        this._joystickPointerPos.x = e.clientX;\n        this._joystickPointerPos.y = e.clientY;\n      } // create delta vector\n\n\n      this._deltaJoystickVector = this._joystickPointerPos.clone();\n      this._deltaJoystickVector = this._deltaJoystickVector.subtract(this._joystickPointerStartPos); // if a joystick is always visible, there will be clipping issues if\n      // you drag the puck from one over the container of the other\n\n      if (0 < VirtualJoystick._AlwaysVisibleSticks) {\n        if (this._leftJoystick) {\n          this._joystickPointerPos.x = Math.min(VirtualJoystick._HalfWidth, this._joystickPointerPos.x);\n        } else {\n          this._joystickPointerPos.x = Math.max(VirtualJoystick._HalfWidth, this._joystickPointerPos.x);\n        }\n      }\n\n      var directionLeftRight = this.reverseLeftRight ? -1 : 1;\n      var deltaJoystickX = directionLeftRight * this._deltaJoystickVector.x / this._inversedSensibility;\n\n      switch (this._axisTargetedByLeftAndRight) {\n        case JoystickAxis.X:\n          this.deltaPosition.x = Math.min(1, Math.max(-1, deltaJoystickX));\n          break;\n\n        case JoystickAxis.Y:\n          this.deltaPosition.y = Math.min(1, Math.max(-1, deltaJoystickX));\n          break;\n\n        case JoystickAxis.Z:\n          this.deltaPosition.z = Math.min(1, Math.max(-1, deltaJoystickX));\n          break;\n      }\n\n      var directionUpDown = this.reverseUpDown ? 1 : -1;\n      var deltaJoystickY = directionUpDown * this._deltaJoystickVector.y / this._inversedSensibility;\n\n      switch (this._axisTargetedByUpAndDown) {\n        case JoystickAxis.X:\n          this.deltaPosition.x = Math.min(1, Math.max(-1, deltaJoystickY));\n          break;\n\n        case JoystickAxis.Y:\n          this.deltaPosition.y = Math.min(1, Math.max(-1, deltaJoystickY));\n          break;\n\n        case JoystickAxis.Z:\n          this.deltaPosition.z = Math.min(1, Math.max(-1, deltaJoystickY));\n          break;\n      }\n    } else {\n      var data = this._touches.get(e.pointerId.toString());\n\n      if (data) {\n        data.x = e.clientX;\n        data.y = e.clientY;\n      }\n    }\n  };\n\n  VirtualJoystick.prototype._onPointerUp = function (e) {\n    if (this._joystickPointerId == e.pointerId) {\n      this._clearPreviousDraw();\n\n      this._joystickPointerId = -1;\n      this.pressed = false;\n    } else {\n      var touch = this._touches.get(e.pointerId.toString());\n\n      if (touch) {\n        VirtualJoystick._VJCanvasContext.clearRect(touch.prevX - 44, touch.prevY - 44, 88, 88);\n      }\n    }\n\n    this._deltaJoystickVector.x = 0;\n    this._deltaJoystickVector.y = 0;\n\n    this._touches.remove(e.pointerId.toString());\n  };\n  /**\n   * Change the color of the virtual joystick\n   * @param newColor a string that must be a CSS color value (like \"red\") or the hexa value (like \"#FF0000\")\n   */\n\n\n  VirtualJoystick.prototype.setJoystickColor = function (newColor) {\n    this._joystickColor = newColor;\n  };\n\n  Object.defineProperty(VirtualJoystick.prototype, \"containerSize\", {\n    get: function get() {\n      return this._joystickContainerSize;\n    },\n\n    /**\n     * Size of the joystick's container\n     */\n    set: function set(newSize) {\n      this._joystickContainerSize = newSize;\n      this._clearContainerSize = ~~(this._joystickContainerSize * 2.1);\n      this._clearContainerSizeOffset = ~~(this._clearContainerSize / 2);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VirtualJoystick.prototype, \"puckSize\", {\n    get: function get() {\n      return this._joystickPuckSize;\n    },\n\n    /**\n     * Size of the joystick's puck\n     */\n    set: function set(newSize) {\n      this._joystickPuckSize = newSize;\n      this._clearPuckSize = ~~(this._joystickPuckSize * 2.1);\n      this._clearPuckSizeOffset = ~~(this._clearPuckSize / 2);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Clears the set position of the joystick\n   */\n\n  VirtualJoystick.prototype.clearPosition = function () {\n    this.alwaysVisible = false;\n    this._joystickPosition = null;\n  };\n\n  Object.defineProperty(VirtualJoystick.prototype, \"alwaysVisible\", {\n    get: function get() {\n      return this._alwaysVisible;\n    },\n\n    /**\n     * Defines whether or not the joystick container is always visible\n     */\n    set: function set(value) {\n      if (this._alwaysVisible === value) {\n        return;\n      }\n\n      if (value && this._joystickPosition) {\n        VirtualJoystick._AlwaysVisibleSticks++;\n        this._alwaysVisible = true;\n      } else {\n        VirtualJoystick._AlwaysVisibleSticks--;\n        this._alwaysVisible = false;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Sets the constant position of the Joystick container\n   * @param x X axis coordinate\n   * @param y Y axis coordinate\n   */\n\n  VirtualJoystick.prototype.setPosition = function (x, y) {\n    // just in case position is moved while the container is visible\n    if (this._joystickPointerStartPos) {\n      this._clearPreviousDraw();\n    }\n\n    this._joystickPosition = new Vector2(x, y);\n  };\n  /**\n   * Defines a callback to call when the joystick is touched\n   * @param action defines the callback\n   */\n\n\n  VirtualJoystick.prototype.setActionOnTouch = function (action) {\n    this._action = action;\n  };\n  /**\n   * Defines which axis you'd like to control for left & right\n   * @param axis defines the axis to use\n   */\n\n\n  VirtualJoystick.prototype.setAxisForLeftRight = function (axis) {\n    switch (axis) {\n      case JoystickAxis.X:\n      case JoystickAxis.Y:\n      case JoystickAxis.Z:\n        this._axisTargetedByLeftAndRight = axis;\n        break;\n\n      default:\n        this._axisTargetedByLeftAndRight = JoystickAxis.X;\n        break;\n    }\n  };\n  /**\n   * Defines which axis you'd like to control for up & down\n   * @param axis defines the axis to use\n   */\n\n\n  VirtualJoystick.prototype.setAxisForUpDown = function (axis) {\n    switch (axis) {\n      case JoystickAxis.X:\n      case JoystickAxis.Y:\n      case JoystickAxis.Z:\n        this._axisTargetedByUpAndDown = axis;\n        break;\n\n      default:\n        this._axisTargetedByUpAndDown = JoystickAxis.Y;\n        break;\n    }\n  };\n  /**\n   * Clears the canvas from the previous puck / container draw\n   */\n\n\n  VirtualJoystick.prototype._clearPreviousDraw = function () {\n    var jp = this._joystickPosition || this._joystickPointerStartPos; // clear container pixels\n\n    VirtualJoystick._VJCanvasContext.clearRect(jp.x - this._clearContainerSizeOffset, jp.y - this._clearContainerSizeOffset, this._clearContainerSize, this._clearContainerSize); // clear puck pixels\n\n\n    VirtualJoystick._VJCanvasContext.clearRect(this._joystickPreviousPointerPos.x - this._clearPuckSizeOffset, this._joystickPreviousPointerPos.y - this._clearPuckSizeOffset, this._clearPuckSize, this._clearPuckSize);\n  };\n  /**\n   * Loads `urlPath` to be used for the container's image\n   * @param urlPath defines the urlPath of an image to use\n   */\n\n\n  VirtualJoystick.prototype.setContainerImage = function (urlPath) {\n    var _this = this;\n\n    var image = new Image();\n    image.src = urlPath;\n\n    image.onload = function () {\n      return _this._containerImage = image;\n    };\n  };\n  /**\n   * Loads `urlPath` to be used for the puck's image\n   * @param urlPath defines the urlPath of an image to use\n   */\n\n\n  VirtualJoystick.prototype.setPuckImage = function (urlPath) {\n    var _this = this;\n\n    var image = new Image();\n    image.src = urlPath;\n\n    image.onload = function () {\n      return _this._puckImage = image;\n    };\n  };\n  /**\n   * Draws the Virtual Joystick's container\n   */\n\n\n  VirtualJoystick.prototype._drawContainer = function () {\n    var jp = this._joystickPosition || this._joystickPointerStartPos;\n\n    this._clearPreviousDraw();\n\n    if (this._containerImage) {\n      VirtualJoystick._VJCanvasContext.drawImage(this._containerImage, jp.x - this.containerSize, jp.y - this.containerSize, this.containerSize * 2, this.containerSize * 2);\n    } else {\n      // outer container\n      VirtualJoystick._VJCanvasContext.beginPath();\n\n      VirtualJoystick._VJCanvasContext.strokeStyle = this._joystickColor;\n      VirtualJoystick._VJCanvasContext.lineWidth = 2;\n\n      VirtualJoystick._VJCanvasContext.arc(jp.x, jp.y, this.containerSize, 0, Math.PI * 2, true);\n\n      VirtualJoystick._VJCanvasContext.stroke();\n\n      VirtualJoystick._VJCanvasContext.closePath(); // inner container\n\n\n      VirtualJoystick._VJCanvasContext.beginPath();\n\n      VirtualJoystick._VJCanvasContext.lineWidth = 6;\n      VirtualJoystick._VJCanvasContext.strokeStyle = this._joystickColor;\n\n      VirtualJoystick._VJCanvasContext.arc(jp.x, jp.y, this.puckSize, 0, Math.PI * 2, true);\n\n      VirtualJoystick._VJCanvasContext.stroke();\n\n      VirtualJoystick._VJCanvasContext.closePath();\n    }\n  };\n  /**\n   * Draws the Virtual Joystick's puck\n   */\n\n\n  VirtualJoystick.prototype._drawPuck = function () {\n    if (this._puckImage) {\n      VirtualJoystick._VJCanvasContext.drawImage(this._puckImage, this._joystickPointerPos.x - this.puckSize, this._joystickPointerPos.y - this.puckSize, this.puckSize * 2, this.puckSize * 2);\n    } else {\n      VirtualJoystick._VJCanvasContext.beginPath();\n\n      VirtualJoystick._VJCanvasContext.strokeStyle = this._joystickColor;\n      VirtualJoystick._VJCanvasContext.lineWidth = 2;\n\n      VirtualJoystick._VJCanvasContext.arc(this._joystickPointerPos.x, this._joystickPointerPos.y, this.puckSize, 0, Math.PI * 2, true);\n\n      VirtualJoystick._VJCanvasContext.stroke();\n\n      VirtualJoystick._VJCanvasContext.closePath();\n    }\n  };\n\n  VirtualJoystick.prototype._drawVirtualJoystick = function () {\n    var _this = this;\n\n    if (this.alwaysVisible) {\n      this._drawContainer();\n    }\n\n    if (this.pressed) {\n      this._touches.forEach(function (key, touch) {\n        if (touch.pointerId === _this._joystickPointerId) {\n          if (!_this.alwaysVisible) {\n            _this._drawContainer();\n          }\n\n          _this._drawPuck(); // store current pointer for next clear\n\n\n          _this._joystickPreviousPointerPos = _this._joystickPointerPos.clone();\n        } else {\n          VirtualJoystick._VJCanvasContext.clearRect(touch.prevX - 44, touch.prevY - 44, 88, 88);\n\n          VirtualJoystick._VJCanvasContext.beginPath();\n\n          VirtualJoystick._VJCanvasContext.fillStyle = \"white\";\n\n          VirtualJoystick._VJCanvasContext.beginPath();\n\n          VirtualJoystick._VJCanvasContext.strokeStyle = \"red\";\n          VirtualJoystick._VJCanvasContext.lineWidth = 6;\n\n          VirtualJoystick._VJCanvasContext.arc(touch.x, touch.y, 40, 0, Math.PI * 2, true);\n\n          VirtualJoystick._VJCanvasContext.stroke();\n\n          VirtualJoystick._VJCanvasContext.closePath();\n\n          touch.prevX = touch.x;\n          touch.prevY = touch.y;\n        }\n      });\n    }\n\n    requestAnimationFrame(function () {\n      _this._drawVirtualJoystick();\n    });\n  };\n  /**\n   * Release internal HTML canvas\n   */\n\n\n  VirtualJoystick.prototype.releaseCanvas = function () {\n    if (VirtualJoystick.Canvas) {\n      VirtualJoystick.Canvas.removeEventListener(\"pointerdown\", this._onPointerDownHandlerRef);\n      VirtualJoystick.Canvas.removeEventListener(\"pointermove\", this._onPointerMoveHandlerRef);\n      VirtualJoystick.Canvas.removeEventListener(\"pointerup\", this._onPointerUpHandlerRef);\n      VirtualJoystick.Canvas.removeEventListener(\"pointerout\", this._onPointerUpHandlerRef);\n      window.removeEventListener(\"resize\", this._onResize);\n      document.body.removeChild(VirtualJoystick.Canvas);\n      VirtualJoystick.Canvas = null;\n    }\n  }; // Used to draw the virtual joystick inside a 2D canvas on top of the WebGL rendering canvas\n\n\n  VirtualJoystick._GlobalJoystickIndex = 0;\n  VirtualJoystick._AlwaysVisibleSticks = 0;\n  return VirtualJoystick;\n}();\n\nexport { VirtualJoystick };","map":{"version":3,"mappings":"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","names":["Vector3","Vector2","StringDictionary","JoystickAxis","leftJoystick","customizations","options","VirtualJoystick","_GetDefaultOptions","_leftJoystick","_GlobalJoystickIndex","_axisTargetedByLeftAndRight","X","_axisTargetedByUpAndDown","Y","reverseLeftRight","reverseUpDown","_touches","deltaPosition","Zero","_joystickSensibility","_inversedSensibility","_onResize","_VJCanvasWidth","window","innerWidth","_VJCanvasHeight","innerHeight","Canvas","width","height","_HalfWidth","addEventListener","document","createElement","style","position","backgroundColor","top","left","zIndex","msTouchAction","touchAction","setAttribute","context_1","getContext","Error","_VJCanvasContext","strokeStyle","lineWidth","body","appendChild","pressed","limitToContainer","_joystickColor","color","containerSize","puckSize","setPosition","x","y","puckImage","setPuckImage","containerImage","setContainerImage","alwaysVisible","_AlwaysVisibleSticks","_joystickPointerId","_joystickPointerPos","_joystickPreviousPointerPos","_joystickPointerStartPos","_deltaJoystickVector","_onPointerDownHandlerRef","evt","_this","_onPointerDown","_onPointerMoveHandlerRef","_onPointerMove","_onPointerUpHandlerRef","_onPointerUp","preventDefault","requestAnimationFrame","_drawVirtualJoystick","undefined","newJoystickSensibility","e","positionOnScreenCondition","clientX","pointerId","_joystickPosition","clone","clientY","add","toString","_action","prevX","prevY","vector","distance","length","scaleInPlace","subtract","Math","min","max","directionLeftRight","deltaJoystickX","Z","z","directionUpDown","deltaJoystickY","data","get","_clearPreviousDraw","touch","clearRect","remove","newColor","Object","_joystickContainerSize","newSize","_clearContainerSize","_clearContainerSizeOffset","_joystickPuckSize","_clearPuckSize","_clearPuckSizeOffset","_alwaysVisible","value","action","axis","jp","urlPath","image","Image","src","onload","_containerImage","_puckImage","drawImage","beginPath","arc","PI","stroke","closePath","_drawContainer","forEach","key","_drawPuck","fillStyle","removeEventListener","removeChild"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Misc/virtualJoystick.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport { Vector3, Vector2 } from \"../Maths/math.vector\";\r\nimport { StringDictionary } from \"./stringDictionary\";\r\n\r\n// Mainly based on these 2 articles :\r\n// Creating an universal virtual touch joystick working for all Touch models thanks to Hand.JS : http://blogs.msdn.com/b/davrous/archive/2013/02/22/creating-an-universal-virtual-touch-joystick-working-for-all-touch-models-thanks-to-hand-js.aspx\r\n// & on Seb Lee-Delisle original work: http://seb.ly/2011/04/multi-touch-game-controller-in-javascripthtml5-for-ipad/\r\n\r\n/**\r\n * Defines the potential axis of a Joystick\r\n */\r\nexport enum JoystickAxis {\r\n    /** X axis */\r\n    X,\r\n    /** Y axis */\r\n    Y,\r\n    /** Z axis */\r\n    Z,\r\n}\r\n\r\n/**\r\n * Represents the different customization options available\r\n * for VirtualJoystick\r\n */\r\ninterface VirtualJoystickCustomizations {\r\n    /**\r\n     * Size of the joystick's puck\r\n     */\r\n    puckSize: number;\r\n    /**\r\n     * Size of the joystick's container\r\n     */\r\n    containerSize: number;\r\n    /**\r\n     * Color of the joystick && puck\r\n     */\r\n    color: string;\r\n    /**\r\n     * Image URL for the joystick's puck\r\n     */\r\n    puckImage?: string;\r\n    /**\r\n     * Image URL for the joystick's container\r\n     */\r\n    containerImage?: string;\r\n    /**\r\n     * Defines the unmoving position of the joystick container\r\n     */\r\n    position?: { x: number; y: number };\r\n    /**\r\n     * Defines whether or not the joystick container is always visible\r\n     */\r\n    alwaysVisible: boolean;\r\n    /**\r\n     * Defines whether or not to limit the movement of the puck to the joystick's container\r\n     */\r\n    limitToContainer: boolean;\r\n}\r\n\r\n/**\r\n * Class used to define virtual joystick (used in touch mode)\r\n */\r\nexport class VirtualJoystick {\r\n    /**\r\n     * Gets or sets a boolean indicating that left and right values must be inverted\r\n     */\r\n    public reverseLeftRight: boolean;\r\n    /**\r\n     * Gets or sets a boolean indicating that up and down values must be inverted\r\n     */\r\n    public reverseUpDown: boolean;\r\n    /**\r\n     * Gets the offset value for the position (ie. the change of the position value)\r\n     */\r\n    public deltaPosition: Vector3;\r\n    /**\r\n     * Gets a boolean indicating if the virtual joystick was pressed\r\n     */\r\n    public pressed: boolean;\r\n    /**\r\n     * Canvas the virtual joystick will render onto, default z-index of this is 5\r\n     */\r\n    public static Canvas: Nullable<HTMLCanvasElement>;\r\n\r\n    /**\r\n     * boolean indicating whether or not the joystick's puck's movement should be limited to the joystick's container area\r\n     */\r\n    public limitToContainer: boolean;\r\n\r\n    // Used to draw the virtual joystick inside a 2D canvas on top of the WebGL rendering canvas\r\n    private static _GlobalJoystickIndex: number = 0;\r\n    private static _AlwaysVisibleSticks: number = 0;\r\n    private static _VJCanvasContext: CanvasRenderingContext2D;\r\n    private static _VJCanvasWidth: number;\r\n    private static _VJCanvasHeight: number;\r\n    private static _HalfWidth: number;\r\n    private static _GetDefaultOptions(): VirtualJoystickCustomizations {\r\n        return {\r\n            puckSize: 40,\r\n            containerSize: 60,\r\n            color: \"cyan\",\r\n            puckImage: undefined,\r\n            containerImage: undefined,\r\n            position: undefined,\r\n            alwaysVisible: false,\r\n            limitToContainer: false,\r\n        };\r\n    }\r\n\r\n    private _action: () => any;\r\n    private _axisTargetedByLeftAndRight: JoystickAxis;\r\n    private _axisTargetedByUpAndDown: JoystickAxis;\r\n    private _joystickSensibility: number;\r\n    private _inversedSensibility: number;\r\n    private _joystickPointerId: number;\r\n    private _joystickColor: string;\r\n    private _joystickPointerPos: Vector2;\r\n    private _joystickPreviousPointerPos: Vector2;\r\n    private _joystickPointerStartPos: Vector2;\r\n    private _deltaJoystickVector: Vector2;\r\n    private _leftJoystick: boolean;\r\n    private _touches: StringDictionary<{ x: number; y: number; prevX: number; prevY: number } | PointerEvent>;\r\n    private _joystickPosition: Nullable<Vector2>;\r\n    private _alwaysVisible: boolean;\r\n    private _puckImage: HTMLImageElement;\r\n    private _containerImage: HTMLImageElement;\r\n\r\n    // size properties\r\n    private _joystickPuckSize: number;\r\n    private _joystickContainerSize: number;\r\n    private _clearPuckSize: number;\r\n    private _clearContainerSize: number;\r\n    private _clearPuckSizeOffset: number;\r\n    private _clearContainerSizeOffset: number;\r\n\r\n    private _onPointerDownHandlerRef: (e: PointerEvent) => any;\r\n    private _onPointerMoveHandlerRef: (e: PointerEvent) => any;\r\n    private _onPointerUpHandlerRef: (e: PointerEvent) => any;\r\n    private _onResize: (e: any) => any;\r\n\r\n    /**\r\n     * Creates a new virtual joystick\r\n     * @param leftJoystick defines that the joystick is for left hand (false by default)\r\n     * @param customizations Defines the options we want to customize the VirtualJoystick\r\n     */\r\n    constructor(leftJoystick?: boolean, customizations?: Partial<VirtualJoystickCustomizations>) {\r\n        const options = {\r\n            ...VirtualJoystick._GetDefaultOptions(),\r\n            ...customizations,\r\n        };\r\n\r\n        if (leftJoystick) {\r\n            this._leftJoystick = true;\r\n        } else {\r\n            this._leftJoystick = false;\r\n        }\r\n\r\n        VirtualJoystick._GlobalJoystickIndex++;\r\n\r\n        // By default left & right arrow keys are moving the X\r\n        // and up & down keys are moving the Y\r\n        this._axisTargetedByLeftAndRight = JoystickAxis.X;\r\n        this._axisTargetedByUpAndDown = JoystickAxis.Y;\r\n\r\n        this.reverseLeftRight = false;\r\n        this.reverseUpDown = false;\r\n\r\n        // collections of pointers\r\n        this._touches = new StringDictionary<{ x: number; y: number; prevX: number; prevY: number } | PointerEvent>();\r\n        this.deltaPosition = Vector3.Zero();\r\n\r\n        this._joystickSensibility = 25;\r\n        this._inversedSensibility = 1 / (this._joystickSensibility / 1000);\r\n\r\n        this._onResize = () => {\r\n            VirtualJoystick._VJCanvasWidth = window.innerWidth;\r\n            VirtualJoystick._VJCanvasHeight = window.innerHeight;\r\n            if (VirtualJoystick.Canvas) {\r\n                VirtualJoystick.Canvas.width = VirtualJoystick._VJCanvasWidth;\r\n                VirtualJoystick.Canvas.height = VirtualJoystick._VJCanvasHeight;\r\n            }\r\n            VirtualJoystick._HalfWidth = VirtualJoystick._VJCanvasWidth / 2;\r\n        };\r\n\r\n        // injecting a canvas element on top of the canvas 3D game\r\n        if (!VirtualJoystick.Canvas) {\r\n            window.addEventListener(\"resize\", this._onResize, false);\r\n            VirtualJoystick.Canvas = document.createElement(\"canvas\");\r\n            VirtualJoystick._VJCanvasWidth = window.innerWidth;\r\n            VirtualJoystick._VJCanvasHeight = window.innerHeight;\r\n            VirtualJoystick.Canvas.width = window.innerWidth;\r\n            VirtualJoystick.Canvas.height = window.innerHeight;\r\n            VirtualJoystick.Canvas.style.width = \"100%\";\r\n            VirtualJoystick.Canvas.style.height = \"100%\";\r\n            VirtualJoystick.Canvas.style.position = \"absolute\";\r\n            VirtualJoystick.Canvas.style.backgroundColor = \"transparent\";\r\n            VirtualJoystick.Canvas.style.top = \"0px\";\r\n            VirtualJoystick.Canvas.style.left = \"0px\";\r\n            VirtualJoystick.Canvas.style.zIndex = \"5\";\r\n            (VirtualJoystick.Canvas.style as any).msTouchAction = \"none\";\r\n            VirtualJoystick.Canvas.style.touchAction = \"none\"; // fix https://forum.babylonjs.com/t/virtualjoystick-needs-to-set-style-touch-action-none-explicitly/9562\r\n            // Support for jQuery PEP polyfill\r\n            VirtualJoystick.Canvas.setAttribute(\"touch-action\", \"none\");\r\n            const context = VirtualJoystick.Canvas.getContext(\"2d\");\r\n\r\n            if (!context) {\r\n                throw new Error(\"Unable to create canvas for virtual joystick\");\r\n            }\r\n\r\n            VirtualJoystick._VJCanvasContext = context;\r\n            VirtualJoystick._VJCanvasContext.strokeStyle = \"#ffffff\";\r\n            VirtualJoystick._VJCanvasContext.lineWidth = 2;\r\n            document.body.appendChild(VirtualJoystick.Canvas);\r\n        }\r\n        VirtualJoystick._HalfWidth = VirtualJoystick.Canvas.width / 2;\r\n        this.pressed = false;\r\n        this.limitToContainer = options.limitToContainer;\r\n\r\n        // default joystick color\r\n        this._joystickColor = options.color;\r\n\r\n        // default joystick size\r\n        this.containerSize = options.containerSize;\r\n        this.puckSize = options.puckSize;\r\n\r\n        if (options.position) {\r\n            this.setPosition(options.position.x, options.position.y);\r\n        }\r\n        if (options.puckImage) {\r\n            this.setPuckImage(options.puckImage);\r\n        }\r\n        if (options.containerImage) {\r\n            this.setContainerImage(options.containerImage);\r\n        }\r\n        if (options.alwaysVisible) {\r\n            VirtualJoystick._AlwaysVisibleSticks++;\r\n        }\r\n\r\n        // must come after position potentially set\r\n        this.alwaysVisible = options.alwaysVisible;\r\n\r\n        this._joystickPointerId = -1;\r\n        // current joystick position\r\n        this._joystickPointerPos = new Vector2(0, 0);\r\n        this._joystickPreviousPointerPos = new Vector2(0, 0);\r\n        // origin joystick position\r\n        this._joystickPointerStartPos = new Vector2(0, 0);\r\n        this._deltaJoystickVector = new Vector2(0, 0);\r\n\r\n        this._onPointerDownHandlerRef = (evt) => {\r\n            this._onPointerDown(evt);\r\n        };\r\n        this._onPointerMoveHandlerRef = (evt) => {\r\n            this._onPointerMove(evt);\r\n        };\r\n        this._onPointerUpHandlerRef = (evt) => {\r\n            this._onPointerUp(evt);\r\n        };\r\n\r\n        VirtualJoystick.Canvas.addEventListener(\"pointerdown\", this._onPointerDownHandlerRef, false);\r\n        VirtualJoystick.Canvas.addEventListener(\"pointermove\", this._onPointerMoveHandlerRef, false);\r\n        VirtualJoystick.Canvas.addEventListener(\"pointerup\", this._onPointerUpHandlerRef, false);\r\n        VirtualJoystick.Canvas.addEventListener(\"pointerout\", this._onPointerUpHandlerRef, false);\r\n        VirtualJoystick.Canvas.addEventListener(\r\n            \"contextmenu\",\r\n            (evt) => {\r\n                evt.preventDefault(); // Disables system menu\r\n            },\r\n            false\r\n        );\r\n        requestAnimationFrame(() => {\r\n            this._drawVirtualJoystick();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Defines joystick sensibility (ie. the ratio between a physical move and virtual joystick position change)\r\n     * @param newJoystickSensibility defines the new sensibility\r\n     */\r\n    public setJoystickSensibility(newJoystickSensibility: number) {\r\n        this._joystickSensibility = newJoystickSensibility;\r\n        this._inversedSensibility = 1 / (this._joystickSensibility / 1000);\r\n    }\r\n\r\n    private _onPointerDown(e: PointerEvent) {\r\n        let positionOnScreenCondition: boolean;\r\n\r\n        e.preventDefault();\r\n\r\n        if (this._leftJoystick === true) {\r\n            positionOnScreenCondition = e.clientX < VirtualJoystick._HalfWidth;\r\n        } else {\r\n            positionOnScreenCondition = e.clientX > VirtualJoystick._HalfWidth;\r\n        }\r\n\r\n        if (positionOnScreenCondition && this._joystickPointerId < 0) {\r\n            // First contact will be dedicated to the virtual joystick\r\n            this._joystickPointerId = e.pointerId;\r\n\r\n            if (this._joystickPosition) {\r\n                this._joystickPointerStartPos = this._joystickPosition.clone();\r\n                this._joystickPointerPos = this._joystickPosition.clone();\r\n                this._joystickPreviousPointerPos = this._joystickPosition.clone();\r\n\r\n                // in case the user only clicks down && doesn't move:\r\n                // this ensures the delta is properly set\r\n                this._onPointerMove(e);\r\n            } else {\r\n                this._joystickPointerStartPos.x = e.clientX;\r\n                this._joystickPointerStartPos.y = e.clientY;\r\n                this._joystickPointerPos = this._joystickPointerStartPos.clone();\r\n                this._joystickPreviousPointerPos = this._joystickPointerStartPos.clone();\r\n            }\r\n\r\n            this._deltaJoystickVector.x = 0;\r\n            this._deltaJoystickVector.y = 0;\r\n            this.pressed = true;\r\n            this._touches.add(e.pointerId.toString(), e);\r\n        } else {\r\n            // You can only trigger the action buttons with a joystick declared\r\n            if (VirtualJoystick._GlobalJoystickIndex < 2 && this._action) {\r\n                this._action();\r\n                this._touches.add(e.pointerId.toString(), { x: e.clientX, y: e.clientY, prevX: e.clientX, prevY: e.clientY });\r\n            }\r\n        }\r\n    }\r\n\r\n    private _onPointerMove(e: PointerEvent) {\r\n        // If the current pointer is the one associated to the joystick (first touch contact)\r\n        if (this._joystickPointerId == e.pointerId) {\r\n            // limit to container if need be\r\n            if (this.limitToContainer) {\r\n                const vector = new Vector2(e.clientX - this._joystickPointerStartPos.x, e.clientY - this._joystickPointerStartPos.y);\r\n                const distance = vector.length();\r\n\r\n                if (distance > this.containerSize) {\r\n                    vector.scaleInPlace(this.containerSize / distance);\r\n                }\r\n\r\n                this._joystickPointerPos.x = this._joystickPointerStartPos.x + vector.x;\r\n                this._joystickPointerPos.y = this._joystickPointerStartPos.y + vector.y;\r\n            } else {\r\n                this._joystickPointerPos.x = e.clientX;\r\n                this._joystickPointerPos.y = e.clientY;\r\n            }\r\n\r\n            // create delta vector\r\n            this._deltaJoystickVector = this._joystickPointerPos.clone();\r\n            this._deltaJoystickVector = this._deltaJoystickVector.subtract(this._joystickPointerStartPos);\r\n\r\n            // if a joystick is always visible, there will be clipping issues if\r\n            // you drag the puck from one over the container of the other\r\n            if (0 < VirtualJoystick._AlwaysVisibleSticks) {\r\n                if (this._leftJoystick) {\r\n                    this._joystickPointerPos.x = Math.min(VirtualJoystick._HalfWidth, this._joystickPointerPos.x);\r\n                } else {\r\n                    this._joystickPointerPos.x = Math.max(VirtualJoystick._HalfWidth, this._joystickPointerPos.x);\r\n                }\r\n            }\r\n\r\n            const directionLeftRight = this.reverseLeftRight ? -1 : 1;\r\n            const deltaJoystickX = (directionLeftRight * this._deltaJoystickVector.x) / this._inversedSensibility;\r\n            switch (this._axisTargetedByLeftAndRight) {\r\n                case JoystickAxis.X:\r\n                    this.deltaPosition.x = Math.min(1, Math.max(-1, deltaJoystickX));\r\n                    break;\r\n                case JoystickAxis.Y:\r\n                    this.deltaPosition.y = Math.min(1, Math.max(-1, deltaJoystickX));\r\n                    break;\r\n                case JoystickAxis.Z:\r\n                    this.deltaPosition.z = Math.min(1, Math.max(-1, deltaJoystickX));\r\n                    break;\r\n            }\r\n            const directionUpDown = this.reverseUpDown ? 1 : -1;\r\n            const deltaJoystickY = (directionUpDown * this._deltaJoystickVector.y) / this._inversedSensibility;\r\n            switch (this._axisTargetedByUpAndDown) {\r\n                case JoystickAxis.X:\r\n                    this.deltaPosition.x = Math.min(1, Math.max(-1, deltaJoystickY));\r\n                    break;\r\n                case JoystickAxis.Y:\r\n                    this.deltaPosition.y = Math.min(1, Math.max(-1, deltaJoystickY));\r\n                    break;\r\n                case JoystickAxis.Z:\r\n                    this.deltaPosition.z = Math.min(1, Math.max(-1, deltaJoystickY));\r\n                    break;\r\n            }\r\n        } else {\r\n            const data = this._touches.get(e.pointerId.toString());\r\n            if (data) {\r\n                (data as any).x = e.clientX;\r\n                (data as any).y = e.clientY;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _onPointerUp(e: PointerEvent) {\r\n        if (this._joystickPointerId == e.pointerId) {\r\n            this._clearPreviousDraw();\r\n\r\n            this._joystickPointerId = -1;\r\n            this.pressed = false;\r\n        } else {\r\n            const touch = <{ x: number; y: number; prevX: number; prevY: number }>this._touches.get(e.pointerId.toString());\r\n            if (touch) {\r\n                VirtualJoystick._VJCanvasContext.clearRect(touch.prevX - 44, touch.prevY - 44, 88, 88);\r\n            }\r\n        }\r\n        this._deltaJoystickVector.x = 0;\r\n        this._deltaJoystickVector.y = 0;\r\n\r\n        this._touches.remove(e.pointerId.toString());\r\n    }\r\n\r\n    /**\r\n     * Change the color of the virtual joystick\r\n     * @param newColor a string that must be a CSS color value (like \"red\") or the hexa value (like \"#FF0000\")\r\n     */\r\n    public setJoystickColor(newColor: string) {\r\n        this._joystickColor = newColor;\r\n    }\r\n\r\n    /**\r\n     * Size of the joystick's container\r\n     */\r\n    public set containerSize(newSize: number) {\r\n        this._joystickContainerSize = newSize;\r\n        this._clearContainerSize = ~~(this._joystickContainerSize * 2.1);\r\n        this._clearContainerSizeOffset = ~~(this._clearContainerSize / 2);\r\n    }\r\n    public get containerSize() {\r\n        return this._joystickContainerSize;\r\n    }\r\n\r\n    /**\r\n     * Size of the joystick's puck\r\n     */\r\n    public set puckSize(newSize: number) {\r\n        this._joystickPuckSize = newSize;\r\n        this._clearPuckSize = ~~(this._joystickPuckSize * 2.1);\r\n        this._clearPuckSizeOffset = ~~(this._clearPuckSize / 2);\r\n    }\r\n    public get puckSize() {\r\n        return this._joystickPuckSize;\r\n    }\r\n\r\n    /**\r\n     * Clears the set position of the joystick\r\n     */\r\n    public clearPosition() {\r\n        this.alwaysVisible = false;\r\n\r\n        this._joystickPosition = null;\r\n    }\r\n\r\n    /**\r\n     * Defines whether or not the joystick container is always visible\r\n     */\r\n    public set alwaysVisible(value: boolean) {\r\n        if (this._alwaysVisible === value) {\r\n            return;\r\n        }\r\n\r\n        if (value && this._joystickPosition) {\r\n            VirtualJoystick._AlwaysVisibleSticks++;\r\n\r\n            this._alwaysVisible = true;\r\n        } else {\r\n            VirtualJoystick._AlwaysVisibleSticks--;\r\n\r\n            this._alwaysVisible = false;\r\n        }\r\n    }\r\n    public get alwaysVisible() {\r\n        return this._alwaysVisible;\r\n    }\r\n\r\n    /**\r\n     * Sets the constant position of the Joystick container\r\n     * @param x X axis coordinate\r\n     * @param y Y axis coordinate\r\n     */\r\n    public setPosition(x: number, y: number) {\r\n        // just in case position is moved while the container is visible\r\n        if (this._joystickPointerStartPos) {\r\n            this._clearPreviousDraw();\r\n        }\r\n\r\n        this._joystickPosition = new Vector2(x, y);\r\n    }\r\n\r\n    /**\r\n     * Defines a callback to call when the joystick is touched\r\n     * @param action defines the callback\r\n     */\r\n    public setActionOnTouch(action: () => any) {\r\n        this._action = action;\r\n    }\r\n\r\n    /**\r\n     * Defines which axis you'd like to control for left & right\r\n     * @param axis defines the axis to use\r\n     */\r\n    public setAxisForLeftRight(axis: JoystickAxis) {\r\n        switch (axis) {\r\n            case JoystickAxis.X:\r\n            case JoystickAxis.Y:\r\n            case JoystickAxis.Z:\r\n                this._axisTargetedByLeftAndRight = axis;\r\n                break;\r\n            default:\r\n                this._axisTargetedByLeftAndRight = JoystickAxis.X;\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Defines which axis you'd like to control for up & down\r\n     * @param axis defines the axis to use\r\n     */\r\n    public setAxisForUpDown(axis: JoystickAxis) {\r\n        switch (axis) {\r\n            case JoystickAxis.X:\r\n            case JoystickAxis.Y:\r\n            case JoystickAxis.Z:\r\n                this._axisTargetedByUpAndDown = axis;\r\n                break;\r\n            default:\r\n                this._axisTargetedByUpAndDown = JoystickAxis.Y;\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the canvas from the previous puck / container draw\r\n     */\r\n    private _clearPreviousDraw() {\r\n        const jp = this._joystickPosition || this._joystickPointerStartPos;\r\n\r\n        // clear container pixels\r\n        VirtualJoystick._VJCanvasContext.clearRect(\r\n            jp.x - this._clearContainerSizeOffset,\r\n            jp.y - this._clearContainerSizeOffset,\r\n            this._clearContainerSize,\r\n            this._clearContainerSize\r\n        );\r\n\r\n        // clear puck pixels\r\n        VirtualJoystick._VJCanvasContext.clearRect(\r\n            this._joystickPreviousPointerPos.x - this._clearPuckSizeOffset,\r\n            this._joystickPreviousPointerPos.y - this._clearPuckSizeOffset,\r\n            this._clearPuckSize,\r\n            this._clearPuckSize\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Loads `urlPath` to be used for the container's image\r\n     * @param urlPath defines the urlPath of an image to use\r\n     */\r\n    public setContainerImage(urlPath: string) {\r\n        const image = new Image();\r\n        image.src = urlPath;\r\n\r\n        image.onload = () => (this._containerImage = image);\r\n    }\r\n\r\n    /**\r\n     * Loads `urlPath` to be used for the puck's image\r\n     * @param urlPath defines the urlPath of an image to use\r\n     */\r\n    public setPuckImage(urlPath: string) {\r\n        const image = new Image();\r\n        image.src = urlPath;\r\n\r\n        image.onload = () => (this._puckImage = image);\r\n    }\r\n\r\n    /**\r\n     * Draws the Virtual Joystick's container\r\n     */\r\n    private _drawContainer() {\r\n        const jp = this._joystickPosition || this._joystickPointerStartPos;\r\n\r\n        this._clearPreviousDraw();\r\n\r\n        if (this._containerImage) {\r\n            VirtualJoystick._VJCanvasContext.drawImage(this._containerImage, jp.x - this.containerSize, jp.y - this.containerSize, this.containerSize * 2, this.containerSize * 2);\r\n        } else {\r\n            // outer container\r\n            VirtualJoystick._VJCanvasContext.beginPath();\r\n            VirtualJoystick._VJCanvasContext.strokeStyle = this._joystickColor;\r\n            VirtualJoystick._VJCanvasContext.lineWidth = 2;\r\n            VirtualJoystick._VJCanvasContext.arc(jp.x, jp.y, this.containerSize, 0, Math.PI * 2, true);\r\n            VirtualJoystick._VJCanvasContext.stroke();\r\n            VirtualJoystick._VJCanvasContext.closePath();\r\n\r\n            // inner container\r\n            VirtualJoystick._VJCanvasContext.beginPath();\r\n            VirtualJoystick._VJCanvasContext.lineWidth = 6;\r\n            VirtualJoystick._VJCanvasContext.strokeStyle = this._joystickColor;\r\n            VirtualJoystick._VJCanvasContext.arc(jp.x, jp.y, this.puckSize, 0, Math.PI * 2, true);\r\n            VirtualJoystick._VJCanvasContext.stroke();\r\n            VirtualJoystick._VJCanvasContext.closePath();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draws the Virtual Joystick's puck\r\n     */\r\n    private _drawPuck() {\r\n        if (this._puckImage) {\r\n            VirtualJoystick._VJCanvasContext.drawImage(\r\n                this._puckImage,\r\n                this._joystickPointerPos.x - this.puckSize,\r\n                this._joystickPointerPos.y - this.puckSize,\r\n                this.puckSize * 2,\r\n                this.puckSize * 2\r\n            );\r\n        } else {\r\n            VirtualJoystick._VJCanvasContext.beginPath();\r\n            VirtualJoystick._VJCanvasContext.strokeStyle = this._joystickColor;\r\n            VirtualJoystick._VJCanvasContext.lineWidth = 2;\r\n            VirtualJoystick._VJCanvasContext.arc(this._joystickPointerPos.x, this._joystickPointerPos.y, this.puckSize, 0, Math.PI * 2, true);\r\n            VirtualJoystick._VJCanvasContext.stroke();\r\n            VirtualJoystick._VJCanvasContext.closePath();\r\n        }\r\n    }\r\n\r\n    private _drawVirtualJoystick() {\r\n        if (this.alwaysVisible) {\r\n            this._drawContainer();\r\n        }\r\n\r\n        if (this.pressed) {\r\n            this._touches.forEach((key, touch) => {\r\n                if ((<PointerEvent>touch).pointerId === this._joystickPointerId) {\r\n                    if (!this.alwaysVisible) {\r\n                        this._drawContainer();\r\n                    }\r\n\r\n                    this._drawPuck();\r\n\r\n                    // store current pointer for next clear\r\n                    this._joystickPreviousPointerPos = this._joystickPointerPos.clone();\r\n                } else {\r\n                    VirtualJoystick._VJCanvasContext.clearRect((<any>touch).prevX - 44, (<any>touch).prevY - 44, 88, 88);\r\n                    VirtualJoystick._VJCanvasContext.beginPath();\r\n                    VirtualJoystick._VJCanvasContext.fillStyle = \"white\";\r\n                    VirtualJoystick._VJCanvasContext.beginPath();\r\n                    VirtualJoystick._VJCanvasContext.strokeStyle = \"red\";\r\n                    VirtualJoystick._VJCanvasContext.lineWidth = 6;\r\n                    VirtualJoystick._VJCanvasContext.arc(touch.x, touch.y, 40, 0, Math.PI * 2, true);\r\n                    VirtualJoystick._VJCanvasContext.stroke();\r\n                    VirtualJoystick._VJCanvasContext.closePath();\r\n                    (<any>touch).prevX = touch.x;\r\n                    (<any>touch).prevY = touch.y;\r\n                }\r\n            });\r\n        }\r\n        requestAnimationFrame(() => {\r\n            this._drawVirtualJoystick();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Release internal HTML canvas\r\n     */\r\n    public releaseCanvas() {\r\n        if (VirtualJoystick.Canvas) {\r\n            VirtualJoystick.Canvas.removeEventListener(\"pointerdown\", this._onPointerDownHandlerRef);\r\n            VirtualJoystick.Canvas.removeEventListener(\"pointermove\", this._onPointerMoveHandlerRef);\r\n            VirtualJoystick.Canvas.removeEventListener(\"pointerup\", this._onPointerUpHandlerRef);\r\n            VirtualJoystick.Canvas.removeEventListener(\"pointerout\", this._onPointerUpHandlerRef);\r\n            window.removeEventListener(\"resize\", this._onResize);\r\n            document.body.removeChild(VirtualJoystick.Canvas);\r\n            VirtualJoystick.Canvas = null;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}