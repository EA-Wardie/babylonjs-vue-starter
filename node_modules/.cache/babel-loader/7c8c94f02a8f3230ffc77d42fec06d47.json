{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport * as WebGPUConstants from \"./webgpuConstants.js\";\n/** @hidden */\n\nvar WebGPUDrawContext =\n/** @class */\nfunction () {\n  function WebGPUDrawContext(bufferManager) {\n    this._bufferManager = bufferManager;\n    this.uniqueId = WebGPUDrawContext._Counter++;\n    this._useInstancing = false;\n    this._currentInstanceCount = 0;\n    this.reset();\n  }\n\n  WebGPUDrawContext.prototype.isDirty = function (materialContextUpdateId) {\n    return this._isDirty || this._materialContextUpdateId !== materialContextUpdateId;\n  };\n\n  WebGPUDrawContext.prototype.resetIsDirty = function (materialContextUpdateId) {\n    this._isDirty = false;\n    this._materialContextUpdateId = materialContextUpdateId;\n  };\n\n  Object.defineProperty(WebGPUDrawContext.prototype, \"useInstancing\", {\n    get: function get() {\n      return this._useInstancing;\n    },\n    set: function set(use) {\n      if (this._useInstancing === use) {\n        return;\n      }\n\n      if (!use) {\n        if (this.indirectDrawBuffer) {\n          this._bufferManager.releaseBuffer(this.indirectDrawBuffer);\n        }\n\n        this.indirectDrawBuffer = undefined;\n        this._indirectDrawData = undefined;\n      } else {\n        this.indirectDrawBuffer = this._bufferManager.createRawBuffer(40, WebGPUConstants.BufferUsage.CopyDst | WebGPUConstants.BufferUsage.Indirect);\n        this._indirectDrawData = new Uint32Array(5);\n        this._indirectDrawData[3] = 0;\n        this._indirectDrawData[4] = 0;\n      }\n\n      this._useInstancing = use;\n      this._currentInstanceCount = -1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  WebGPUDrawContext.prototype.reset = function () {\n    this.buffers = {};\n    this._isDirty = true;\n    this._materialContextUpdateId = 0;\n    this.fastBundle = undefined;\n    this.bindGroups = undefined;\n  };\n\n  WebGPUDrawContext.prototype.setBuffer = function (name, buffer) {\n    var _a;\n\n    this._isDirty || (this._isDirty = (buffer === null || buffer === void 0 ? void 0 : buffer.uniqueId) !== ((_a = this.buffers[name]) === null || _a === void 0 ? void 0 : _a.uniqueId));\n    this.buffers[name] = buffer;\n  };\n\n  WebGPUDrawContext.prototype.setIndirectData = function (indexOrVertexCount, instanceCount, firstIndexOrVertex) {\n    if (instanceCount === this._currentInstanceCount || !this.indirectDrawBuffer || !this._indirectDrawData) {\n      // The current buffer is already up to date so do nothing\n      // Note that we only check for instanceCount and not indexOrVertexCount nor firstIndexOrVertex because those values\n      // are supposed to not change during the lifetime of a draw context\n      return;\n    }\n\n    this._currentInstanceCount = instanceCount;\n    this._indirectDrawData[0] = indexOrVertexCount;\n    this._indirectDrawData[1] = instanceCount;\n    this._indirectDrawData[2] = firstIndexOrVertex;\n\n    this._bufferManager.setRawData(this.indirectDrawBuffer, 0, this._indirectDrawData, 0, 20);\n  };\n\n  WebGPUDrawContext.prototype.dispose = function () {\n    if (this.indirectDrawBuffer) {\n      this._bufferManager.releaseBuffer(this.indirectDrawBuffer);\n\n      this.indirectDrawBuffer = undefined;\n      this._indirectDrawData = undefined;\n    }\n\n    this.fastBundle = undefined;\n    this.bindGroups = undefined;\n    this.buffers = undefined;\n  };\n\n  WebGPUDrawContext._Counter = 0;\n  return WebGPUDrawContext;\n}();\n\nexport { WebGPUDrawContext };","map":{"version":3,"mappings":"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","names":["WebGPUConstants","bufferManager","_bufferManager","uniqueId","WebGPUDrawContext","_Counter","_useInstancing","_currentInstanceCount","reset","materialContextUpdateId","_isDirty","_materialContextUpdateId","Object","use","indirectDrawBuffer","releaseBuffer","undefined","_indirectDrawData","createRawBuffer","BufferUsage","CopyDst","Indirect","Uint32Array","buffers","fastBundle","bindGroups","name","buffer","_a","indexOrVertexCount","instanceCount","firstIndexOrVertex","setRawData"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/WebGPU/webgpuDrawContext.ts"],"sourcesContent":["import type { WebGPUDataBuffer } from \"../../Meshes/WebGPU/webgpuDataBuffer\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { IDrawContext } from \"../IDrawContext\";\r\nimport type { WebGPUBufferManager } from \"./webgpuBufferManager\";\r\nimport * as WebGPUConstants from \"./webgpuConstants\";\r\n\r\n/** @hidden */\r\nexport class WebGPUDrawContext implements IDrawContext {\r\n    private static _Counter = 0;\r\n\r\n    public fastBundle?: GPURenderBundle; // used only when compatibilityMode==false (fast mode)\r\n    public bindGroups?: GPUBindGroup[]; // cache of the bind groups. Will be reused for the next draw if isDirty==false (and materialContext.isDirty==false)\r\n\r\n    public uniqueId: number;\r\n\r\n    public buffers: { [name: string]: Nullable<WebGPUDataBuffer> };\r\n\r\n    public indirectDrawBuffer?: GPUBuffer;\r\n\r\n    private _materialContextUpdateId: number;\r\n    private _bufferManager: WebGPUBufferManager;\r\n    private _useInstancing: boolean;\r\n    private _indirectDrawData?: Uint32Array;\r\n    private _currentInstanceCount: number;\r\n    private _isDirty: boolean;\r\n\r\n    public isDirty(materialContextUpdateId: number): boolean {\r\n        return this._isDirty || this._materialContextUpdateId !== materialContextUpdateId;\r\n    }\r\n\r\n    public resetIsDirty(materialContextUpdateId: number): void {\r\n        this._isDirty = false;\r\n        this._materialContextUpdateId = materialContextUpdateId;\r\n    }\r\n\r\n    public get useInstancing() {\r\n        return this._useInstancing;\r\n    }\r\n\r\n    public set useInstancing(use: boolean) {\r\n        if (this._useInstancing === use) {\r\n            return;\r\n        }\r\n\r\n        if (!use) {\r\n            if (this.indirectDrawBuffer) {\r\n                this._bufferManager.releaseBuffer(this.indirectDrawBuffer);\r\n            }\r\n            this.indirectDrawBuffer = undefined;\r\n            this._indirectDrawData = undefined;\r\n        } else {\r\n            this.indirectDrawBuffer = this._bufferManager.createRawBuffer(40, WebGPUConstants.BufferUsage.CopyDst | WebGPUConstants.BufferUsage.Indirect);\r\n            this._indirectDrawData = new Uint32Array(5);\r\n            this._indirectDrawData[3] = 0;\r\n            this._indirectDrawData[4] = 0;\r\n        }\r\n\r\n        this._useInstancing = use;\r\n        this._currentInstanceCount = -1;\r\n    }\r\n\r\n    constructor(bufferManager: WebGPUBufferManager) {\r\n        this._bufferManager = bufferManager;\r\n        this.uniqueId = WebGPUDrawContext._Counter++;\r\n        this._useInstancing = false;\r\n        this._currentInstanceCount = 0;\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.buffers = {};\r\n        this._isDirty = true;\r\n        this._materialContextUpdateId = 0;\r\n        this.fastBundle = undefined;\r\n        this.bindGroups = undefined;\r\n    }\r\n\r\n    public setBuffer(name: string, buffer: Nullable<WebGPUDataBuffer>): void {\r\n        this._isDirty ||= buffer?.uniqueId !== this.buffers[name]?.uniqueId;\r\n\r\n        this.buffers[name] = buffer;\r\n    }\r\n\r\n    public setIndirectData(indexOrVertexCount: number, instanceCount: number, firstIndexOrVertex: number): void {\r\n        if (instanceCount === this._currentInstanceCount || !this.indirectDrawBuffer || !this._indirectDrawData) {\r\n            // The current buffer is already up to date so do nothing\r\n            // Note that we only check for instanceCount and not indexOrVertexCount nor firstIndexOrVertex because those values\r\n            // are supposed to not change during the lifetime of a draw context\r\n            return;\r\n        }\r\n        this._currentInstanceCount = instanceCount;\r\n\r\n        this._indirectDrawData![0] = indexOrVertexCount;\r\n        this._indirectDrawData![1] = instanceCount;\r\n        this._indirectDrawData![2] = firstIndexOrVertex;\r\n\r\n        this._bufferManager.setRawData(this.indirectDrawBuffer, 0, this._indirectDrawData, 0, 20);\r\n    }\r\n\r\n    public dispose(): void {\r\n        if (this.indirectDrawBuffer) {\r\n            this._bufferManager.releaseBuffer(this.indirectDrawBuffer);\r\n            this.indirectDrawBuffer = undefined;\r\n            this._indirectDrawData = undefined;\r\n        }\r\n        this.fastBundle = undefined;\r\n        this.bindGroups = undefined;\r\n        this.buffers = undefined as any;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}