{"ast":null,"code":"import \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { __decorate } from \"tslib\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { KeyboardEventTypes } from \"../../Events/keyboardEvents.js\";\nimport { Tools } from \"../../Misc/tools.js\";\n/**\n * Manage the keyboard inputs to control the movement of a follow camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\n\nvar FollowCameraKeyboardMoveInput =\n/** @class */\nfunction () {\n  function FollowCameraKeyboardMoveInput() {\n    /**\n     * Defines the list of key codes associated with the up action (increase heightOffset)\n     */\n    this.keysHeightOffsetIncr = [38];\n    /**\n     * Defines the list of key codes associated with the down action (decrease heightOffset)\n     */\n\n    this.keysHeightOffsetDecr = [40];\n    /**\n     * Defines whether the Alt modifier key is required to move up/down (alter heightOffset)\n     */\n\n    this.keysHeightOffsetModifierAlt = false;\n    /**\n     * Defines whether the Ctrl modifier key is required to move up/down (alter heightOffset)\n     */\n\n    this.keysHeightOffsetModifierCtrl = false;\n    /**\n     * Defines whether the Shift modifier key is required to move up/down (alter heightOffset)\n     */\n\n    this.keysHeightOffsetModifierShift = false;\n    /**\n     * Defines the list of key codes associated with the left action (increase rotationOffset)\n     */\n\n    this.keysRotationOffsetIncr = [37];\n    /**\n     * Defines the list of key codes associated with the right action (decrease rotationOffset)\n     */\n\n    this.keysRotationOffsetDecr = [39];\n    /**\n     * Defines whether the Alt modifier key is required to move left/right (alter rotationOffset)\n     */\n\n    this.keysRotationOffsetModifierAlt = false;\n    /**\n     * Defines whether the Ctrl modifier key is required to move left/right (alter rotationOffset)\n     */\n\n    this.keysRotationOffsetModifierCtrl = false;\n    /**\n     * Defines whether the Shift modifier key is required to move left/right (alter rotationOffset)\n     */\n\n    this.keysRotationOffsetModifierShift = false;\n    /**\n     * Defines the list of key codes associated with the zoom-in action (decrease radius)\n     */\n\n    this.keysRadiusIncr = [40];\n    /**\n     * Defines the list of key codes associated with the zoom-out action (increase radius)\n     */\n\n    this.keysRadiusDecr = [38];\n    /**\n     * Defines whether the Alt modifier key is required to zoom in/out (alter radius value)\n     */\n\n    this.keysRadiusModifierAlt = true;\n    /**\n     * Defines whether the Ctrl modifier key is required to zoom in/out (alter radius value)\n     */\n\n    this.keysRadiusModifierCtrl = false;\n    /**\n     * Defines whether the Shift modifier key is required to zoom in/out (alter radius value)\n     */\n\n    this.keysRadiusModifierShift = false;\n    /**\n     * Defines the rate of change of heightOffset.\n     */\n\n    this.heightSensibility = 1;\n    /**\n     * Defines the rate of change of rotationOffset.\n     */\n\n    this.rotationSensibility = 1;\n    /**\n     * Defines the rate of change of radius.\n     */\n\n    this.radiusSensibility = 1;\n    this._keys = new Array();\n  }\n  /**\n   * Attach the input controls to a specific dom element to get the input from.\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n   */\n\n\n  FollowCameraKeyboardMoveInput.prototype.attachControl = function (noPreventDefault) {\n    var _this = this; // eslint-disable-next-line prefer-rest-params\n\n\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n\n    if (this._onCanvasBlurObserver) {\n      return;\n    }\n\n    this._scene = this.camera.getScene();\n    this._engine = this._scene.getEngine();\n    this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(function () {\n      _this._keys = [];\n    });\n    this._onKeyboardObserver = this._scene.onKeyboardObservable.add(function (info) {\n      var evt = info.event;\n\n      if (!evt.metaKey) {\n        if (info.type === KeyboardEventTypes.KEYDOWN) {\n          _this._ctrlPressed = evt.ctrlKey;\n          _this._altPressed = evt.altKey;\n          _this._shiftPressed = evt.shiftKey;\n\n          if (_this.keysHeightOffsetIncr.indexOf(evt.keyCode) !== -1 || _this.keysHeightOffsetDecr.indexOf(evt.keyCode) !== -1 || _this.keysRotationOffsetIncr.indexOf(evt.keyCode) !== -1 || _this.keysRotationOffsetDecr.indexOf(evt.keyCode) !== -1 || _this.keysRadiusIncr.indexOf(evt.keyCode) !== -1 || _this.keysRadiusDecr.indexOf(evt.keyCode) !== -1) {\n            var index = _this._keys.indexOf(evt.keyCode);\n\n            if (index === -1) {\n              _this._keys.push(evt.keyCode);\n            }\n\n            if (evt.preventDefault) {\n              if (!noPreventDefault) {\n                evt.preventDefault();\n              }\n            }\n          }\n        } else {\n          if (_this.keysHeightOffsetIncr.indexOf(evt.keyCode) !== -1 || _this.keysHeightOffsetDecr.indexOf(evt.keyCode) !== -1 || _this.keysRotationOffsetIncr.indexOf(evt.keyCode) !== -1 || _this.keysRotationOffsetDecr.indexOf(evt.keyCode) !== -1 || _this.keysRadiusIncr.indexOf(evt.keyCode) !== -1 || _this.keysRadiusDecr.indexOf(evt.keyCode) !== -1) {\n            var index = _this._keys.indexOf(evt.keyCode);\n\n            if (index >= 0) {\n              _this._keys.splice(index, 1);\n            }\n\n            if (evt.preventDefault) {\n              if (!noPreventDefault) {\n                evt.preventDefault();\n              }\n            }\n          }\n        }\n      }\n    });\n  };\n  /**\n   * Detach the current controls from the specified dom element.\n   */\n\n\n  FollowCameraKeyboardMoveInput.prototype.detachControl = function () {\n    if (this._scene) {\n      if (this._onKeyboardObserver) {\n        this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\n      }\n\n      if (this._onCanvasBlurObserver) {\n        this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\n      }\n\n      this._onKeyboardObserver = null;\n      this._onCanvasBlurObserver = null;\n    }\n\n    this._keys = [];\n  };\n  /**\n   * Update the current camera state depending on the inputs that have been used this frame.\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n   */\n\n\n  FollowCameraKeyboardMoveInput.prototype.checkInputs = function () {\n    var _this = this;\n\n    if (this._onKeyboardObserver) {\n      this._keys.forEach(function (keyCode) {\n        if (_this.keysHeightOffsetIncr.indexOf(keyCode) !== -1 && _this._modifierHeightOffset()) {\n          _this.camera.heightOffset += _this.heightSensibility;\n        } else if (_this.keysHeightOffsetDecr.indexOf(keyCode) !== -1 && _this._modifierHeightOffset()) {\n          _this.camera.heightOffset -= _this.heightSensibility;\n        } else if (_this.keysRotationOffsetIncr.indexOf(keyCode) !== -1 && _this._modifierRotationOffset()) {\n          _this.camera.rotationOffset += _this.rotationSensibility;\n          _this.camera.rotationOffset %= 360;\n        } else if (_this.keysRotationOffsetDecr.indexOf(keyCode) !== -1 && _this._modifierRotationOffset()) {\n          _this.camera.rotationOffset -= _this.rotationSensibility;\n          _this.camera.rotationOffset %= 360;\n        } else if (_this.keysRadiusIncr.indexOf(keyCode) !== -1 && _this._modifierRadius()) {\n          _this.camera.radius += _this.radiusSensibility;\n        } else if (_this.keysRadiusDecr.indexOf(keyCode) !== -1 && _this._modifierRadius()) {\n          _this.camera.radius -= _this.radiusSensibility;\n        }\n      });\n    }\n  };\n  /**\n   * Gets the class name of the current input.\n   * @returns the class name\n   */\n\n\n  FollowCameraKeyboardMoveInput.prototype.getClassName = function () {\n    return \"FollowCameraKeyboardMoveInput\";\n  };\n  /**\n   * Get the friendly name associated with the input class.\n   * @returns the input friendly name\n   */\n\n\n  FollowCameraKeyboardMoveInput.prototype.getSimpleName = function () {\n    return \"keyboard\";\n  };\n  /**\n   * Check if the pressed modifier keys (Alt/Ctrl/Shift) match those configured to\n   * allow modification of the heightOffset value.\n   */\n\n\n  FollowCameraKeyboardMoveInput.prototype._modifierHeightOffset = function () {\n    return this.keysHeightOffsetModifierAlt === this._altPressed && this.keysHeightOffsetModifierCtrl === this._ctrlPressed && this.keysHeightOffsetModifierShift === this._shiftPressed;\n  };\n  /**\n   * Check if the pressed modifier keys (Alt/Ctrl/Shift) match those configured to\n   * allow modification of the rotationOffset value.\n   */\n\n\n  FollowCameraKeyboardMoveInput.prototype._modifierRotationOffset = function () {\n    return this.keysRotationOffsetModifierAlt === this._altPressed && this.keysRotationOffsetModifierCtrl === this._ctrlPressed && this.keysRotationOffsetModifierShift === this._shiftPressed;\n  };\n  /**\n   * Check if the pressed modifier keys (Alt/Ctrl/Shift) match those configured to\n   * allow modification of the radius value.\n   */\n\n\n  FollowCameraKeyboardMoveInput.prototype._modifierRadius = function () {\n    return this.keysRadiusModifierAlt === this._altPressed && this.keysRadiusModifierCtrl === this._ctrlPressed && this.keysRadiusModifierShift === this._shiftPressed;\n  };\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysHeightOffsetIncr\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysHeightOffsetDecr\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysHeightOffsetModifierAlt\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysHeightOffsetModifierCtrl\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysHeightOffsetModifierShift\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRotationOffsetIncr\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRotationOffsetDecr\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRotationOffsetModifierAlt\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRotationOffsetModifierCtrl\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRotationOffsetModifierShift\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRadiusIncr\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRadiusDecr\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRadiusModifierAlt\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRadiusModifierCtrl\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRadiusModifierShift\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"heightSensibility\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"rotationSensibility\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"radiusSensibility\", void 0);\n\n  return FollowCameraKeyboardMoveInput;\n}();\n\nexport { FollowCameraKeyboardMoveInput };\nCameraInputTypes[\"FollowCameraKeyboardMoveInput\"] = FollowCameraKeyboardMoveInput;","map":{"version":3,"mappings":"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","names":["CameraInputTypes","serialize","KeyboardEventTypes","Tools","Array","FollowCameraKeyboardMoveInput","noPreventDefault","BackCompatCameraNoPreventDefault","arguments","_onCanvasBlurObserver","_scene","camera","getScene","_engine","getEngine","onCanvasBlurObservable","add","_this","_keys","_onKeyboardObserver","onKeyboardObservable","info","evt","event","metaKey","type","KEYDOWN","_ctrlPressed","ctrlKey","_altPressed","altKey","_shiftPressed","shiftKey","keysHeightOffsetIncr","indexOf","keyCode","keysHeightOffsetDecr","keysRotationOffsetIncr","keysRotationOffsetDecr","keysRadiusIncr","keysRadiusDecr","index","push","preventDefault","splice","remove","forEach","_modifierHeightOffset","heightOffset","heightSensibility","_modifierRotationOffset","rotationOffset","rotationSensibility","_modifierRadius","radius","radiusSensibility","keysHeightOffsetModifierAlt","keysHeightOffsetModifierCtrl","keysHeightOffsetModifierShift","keysRotationOffsetModifierAlt","keysRotationOffsetModifierCtrl","keysRotationOffsetModifierShift","keysRadiusModifierAlt","keysRadiusModifierCtrl","keysRadiusModifierShift","__decorate"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Cameras/Inputs/followCameraKeyboardMoveInput.ts"],"sourcesContent":["import type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport type { FollowCamera } from \"../../Cameras/followCamera\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport type { Engine } from \"../../Engines/engine\";\r\nimport type { KeyboardInfo } from \"../../Events/keyboardEvents\";\r\nimport { KeyboardEventTypes } from \"../../Events/keyboardEvents\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Tools } from \"../../Misc/tools\";\r\n\r\n/**\r\n * Manage the keyboard inputs to control the movement of a follow camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class FollowCameraKeyboardMoveInput implements ICameraInput<FollowCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: FollowCamera;\r\n\r\n    /**\r\n     * Defines the list of key codes associated with the up action (increase heightOffset)\r\n     */\r\n    @serialize()\r\n    public keysHeightOffsetIncr = [38];\r\n\r\n    /**\r\n     * Defines the list of key codes associated with the down action (decrease heightOffset)\r\n     */\r\n    @serialize()\r\n    public keysHeightOffsetDecr = [40];\r\n\r\n    /**\r\n     * Defines whether the Alt modifier key is required to move up/down (alter heightOffset)\r\n     */\r\n    @serialize()\r\n    public keysHeightOffsetModifierAlt: boolean = false;\r\n\r\n    /**\r\n     * Defines whether the Ctrl modifier key is required to move up/down (alter heightOffset)\r\n     */\r\n    @serialize()\r\n    public keysHeightOffsetModifierCtrl: boolean = false;\r\n\r\n    /**\r\n     * Defines whether the Shift modifier key is required to move up/down (alter heightOffset)\r\n     */\r\n    @serialize()\r\n    public keysHeightOffsetModifierShift: boolean = false;\r\n\r\n    /**\r\n     * Defines the list of key codes associated with the left action (increase rotationOffset)\r\n     */\r\n    @serialize()\r\n    public keysRotationOffsetIncr = [37];\r\n\r\n    /**\r\n     * Defines the list of key codes associated with the right action (decrease rotationOffset)\r\n     */\r\n    @serialize()\r\n    public keysRotationOffsetDecr = [39];\r\n\r\n    /**\r\n     * Defines whether the Alt modifier key is required to move left/right (alter rotationOffset)\r\n     */\r\n    @serialize()\r\n    public keysRotationOffsetModifierAlt: boolean = false;\r\n\r\n    /**\r\n     * Defines whether the Ctrl modifier key is required to move left/right (alter rotationOffset)\r\n     */\r\n    @serialize()\r\n    public keysRotationOffsetModifierCtrl: boolean = false;\r\n\r\n    /**\r\n     * Defines whether the Shift modifier key is required to move left/right (alter rotationOffset)\r\n     */\r\n    @serialize()\r\n    public keysRotationOffsetModifierShift: boolean = false;\r\n\r\n    /**\r\n     * Defines the list of key codes associated with the zoom-in action (decrease radius)\r\n     */\r\n    @serialize()\r\n    public keysRadiusIncr = [40];\r\n\r\n    /**\r\n     * Defines the list of key codes associated with the zoom-out action (increase radius)\r\n     */\r\n    @serialize()\r\n    public keysRadiusDecr = [38];\r\n\r\n    /**\r\n     * Defines whether the Alt modifier key is required to zoom in/out (alter radius value)\r\n     */\r\n    @serialize()\r\n    public keysRadiusModifierAlt: boolean = true;\r\n\r\n    /**\r\n     * Defines whether the Ctrl modifier key is required to zoom in/out (alter radius value)\r\n     */\r\n    @serialize()\r\n    public keysRadiusModifierCtrl: boolean = false;\r\n\r\n    /**\r\n     * Defines whether the Shift modifier key is required to zoom in/out (alter radius value)\r\n     */\r\n    @serialize()\r\n    public keysRadiusModifierShift: boolean = false;\r\n\r\n    /**\r\n     * Defines the rate of change of heightOffset.\r\n     */\r\n    @serialize()\r\n    public heightSensibility: number = 1;\r\n\r\n    /**\r\n     * Defines the rate of change of rotationOffset.\r\n     */\r\n    @serialize()\r\n    public rotationSensibility: number = 1;\r\n\r\n    /**\r\n     * Defines the rate of change of radius.\r\n     */\r\n    @serialize()\r\n    public radiusSensibility: number = 1;\r\n\r\n    private _keys = new Array<number>();\r\n    private _ctrlPressed: boolean;\r\n    private _altPressed: boolean;\r\n    private _shiftPressed: boolean;\r\n    private _onCanvasBlurObserver: Nullable<Observer<Engine>>;\r\n    private _onKeyboardObserver: Nullable<Observer<KeyboardInfo>>;\r\n    private _engine: Engine;\r\n    private _scene: Scene;\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        // eslint-disable-next-line prefer-rest-params\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n        if (this._onCanvasBlurObserver) {\r\n            return;\r\n        }\r\n\r\n        this._scene = this.camera.getScene();\r\n        this._engine = this._scene.getEngine();\r\n\r\n        this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(() => {\r\n            this._keys = [];\r\n        });\r\n\r\n        this._onKeyboardObserver = this._scene.onKeyboardObservable.add((info) => {\r\n            const evt = info.event;\r\n            if (!evt.metaKey) {\r\n                if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                    this._ctrlPressed = evt.ctrlKey;\r\n                    this._altPressed = evt.altKey;\r\n                    this._shiftPressed = evt.shiftKey;\r\n\r\n                    if (\r\n                        this.keysHeightOffsetIncr.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysHeightOffsetDecr.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotationOffsetIncr.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotationOffsetDecr.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRadiusIncr.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRadiusDecr.indexOf(evt.keyCode) !== -1\r\n                    ) {\r\n                        const index = this._keys.indexOf(evt.keyCode);\r\n\r\n                        if (index === -1) {\r\n                            this._keys.push(evt.keyCode);\r\n                        }\r\n\r\n                        if (evt.preventDefault) {\r\n                            if (!noPreventDefault) {\r\n                                evt.preventDefault();\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (\r\n                        this.keysHeightOffsetIncr.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysHeightOffsetDecr.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotationOffsetIncr.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRotationOffsetDecr.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRadiusIncr.indexOf(evt.keyCode) !== -1 ||\r\n                        this.keysRadiusDecr.indexOf(evt.keyCode) !== -1\r\n                    ) {\r\n                        const index = this._keys.indexOf(evt.keyCode);\r\n\r\n                        if (index >= 0) {\r\n                            this._keys.splice(index, 1);\r\n                        }\r\n\r\n                        if (evt.preventDefault) {\r\n                            if (!noPreventDefault) {\r\n                                evt.preventDefault();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        if (this._scene) {\r\n            if (this._onKeyboardObserver) {\r\n                this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\r\n            }\r\n            if (this._onCanvasBlurObserver) {\r\n                this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\r\n            }\r\n            this._onKeyboardObserver = null;\r\n            this._onCanvasBlurObserver = null;\r\n        }\r\n\r\n        this._keys = [];\r\n    }\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs(): void {\r\n        if (this._onKeyboardObserver) {\r\n            this._keys.forEach((keyCode) => {\r\n                if (this.keysHeightOffsetIncr.indexOf(keyCode) !== -1 && this._modifierHeightOffset()) {\r\n                    this.camera.heightOffset += this.heightSensibility;\r\n                } else if (this.keysHeightOffsetDecr.indexOf(keyCode) !== -1 && this._modifierHeightOffset()) {\r\n                    this.camera.heightOffset -= this.heightSensibility;\r\n                } else if (this.keysRotationOffsetIncr.indexOf(keyCode) !== -1 && this._modifierRotationOffset()) {\r\n                    this.camera.rotationOffset += this.rotationSensibility;\r\n                    this.camera.rotationOffset %= 360;\r\n                } else if (this.keysRotationOffsetDecr.indexOf(keyCode) !== -1 && this._modifierRotationOffset()) {\r\n                    this.camera.rotationOffset -= this.rotationSensibility;\r\n                    this.camera.rotationOffset %= 360;\r\n                } else if (this.keysRadiusIncr.indexOf(keyCode) !== -1 && this._modifierRadius()) {\r\n                    this.camera.radius += this.radiusSensibility;\r\n                } else if (this.keysRadiusDecr.indexOf(keyCode) !== -1 && this._modifierRadius()) {\r\n                    this.camera.radius -= this.radiusSensibility;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FollowCameraKeyboardMoveInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"keyboard\";\r\n    }\r\n\r\n    /**\r\n     * Check if the pressed modifier keys (Alt/Ctrl/Shift) match those configured to\r\n     * allow modification of the heightOffset value.\r\n     */\r\n    private _modifierHeightOffset(): boolean {\r\n        return (\r\n            this.keysHeightOffsetModifierAlt === this._altPressed &&\r\n            this.keysHeightOffsetModifierCtrl === this._ctrlPressed &&\r\n            this.keysHeightOffsetModifierShift === this._shiftPressed\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Check if the pressed modifier keys (Alt/Ctrl/Shift) match those configured to\r\n     * allow modification of the rotationOffset value.\r\n     */\r\n    private _modifierRotationOffset(): boolean {\r\n        return (\r\n            this.keysRotationOffsetModifierAlt === this._altPressed &&\r\n            this.keysRotationOffsetModifierCtrl === this._ctrlPressed &&\r\n            this.keysRotationOffsetModifierShift === this._shiftPressed\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Check if the pressed modifier keys (Alt/Ctrl/Shift) match those configured to\r\n     * allow modification of the radius value.\r\n     */\r\n    private _modifierRadius(): boolean {\r\n        return this.keysRadiusModifierAlt === this._altPressed && this.keysRadiusModifierCtrl === this._ctrlPressed && this.keysRadiusModifierShift === this._shiftPressed;\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FollowCameraKeyboardMoveInput\"] = FollowCameraKeyboardMoveInput;\r\n"]},"metadata":{},"sourceType":"module"}