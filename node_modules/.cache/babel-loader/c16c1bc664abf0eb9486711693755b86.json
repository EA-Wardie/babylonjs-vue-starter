{"ast":null,"code":"import \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { Tools } from \"../../Misc/tools.js\";\nimport { PointerEventTypes } from \"../../Events/pointerEvents.js\";\n/**\n * Base class for Camera Pointer Inputs.\n * See FollowCameraPointersInput in src/Cameras/Inputs/followCameraPointersInput.ts\n * for example usage.\n */\n\nvar BaseCameraPointersInput =\n/** @class */\nfunction () {\n  function BaseCameraPointersInput() {\n    this._currentActiveButton = -1;\n    /**\n     * Defines the buttons associated with the input to handle camera move.\n     */\n\n    this.buttons = [0, 1, 2];\n  }\n  /**\n   * Attach the input controls to a specific dom element to get the input from.\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n   */\n\n\n  BaseCameraPointersInput.prototype.attachControl = function (noPreventDefault) {\n    var _this = this; // eslint-disable-next-line prefer-rest-params\n\n\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n    var engine = this.camera.getEngine();\n    var element = engine.getInputElement();\n    var previousPinchSquaredDistance = 0;\n    var previousMultiTouchPanPosition = null;\n    this._pointA = null;\n    this._pointB = null;\n    this._altKey = false;\n    this._ctrlKey = false;\n    this._metaKey = false;\n    this._shiftKey = false;\n    this._buttonsPressed = 0;\n\n    this._pointerInput = function (p) {\n      var evt = p.event;\n      var isTouch = evt.pointerType === \"touch\";\n\n      if (engine.isInVRExclusivePointerMode) {\n        return;\n      }\n\n      if (p.type !== PointerEventTypes.POINTERMOVE && _this.buttons.indexOf(evt.button) === -1) {\n        return;\n      }\n\n      var srcElement = evt.srcElement || evt.target;\n      _this._altKey = evt.altKey;\n      _this._ctrlKey = evt.ctrlKey;\n      _this._metaKey = evt.metaKey;\n      _this._shiftKey = evt.shiftKey;\n      _this._buttonsPressed = evt.buttons;\n\n      if (engine.isPointerLock) {\n        var offsetX = evt.movementX || evt.mozMovementX || evt.webkitMovementX || evt.msMovementX || 0;\n        var offsetY = evt.movementY || evt.mozMovementY || evt.webkitMovementY || evt.msMovementY || 0;\n\n        _this.onTouch(null, offsetX, offsetY);\n\n        _this._pointA = null;\n        _this._pointB = null;\n      } else if (p.type === PointerEventTypes.POINTERDOWN && (_this._currentActiveButton === -1 || isTouch)) {\n        try {\n          srcElement === null || srcElement === void 0 ? void 0 : srcElement.setPointerCapture(evt.pointerId);\n        } catch (e) {//Nothing to do with the error. Execution will continue.\n        }\n\n        if (_this._pointA === null) {\n          _this._pointA = {\n            x: evt.clientX,\n            y: evt.clientY,\n            pointerId: evt.pointerId,\n            type: evt.pointerType\n          };\n        } else if (_this._pointB === null) {\n          _this._pointB = {\n            x: evt.clientX,\n            y: evt.clientY,\n            pointerId: evt.pointerId,\n            type: evt.pointerType\n          };\n        }\n\n        if (_this._currentActiveButton === -1 && !isTouch) {\n          _this._currentActiveButton = evt.button;\n        }\n\n        _this.onButtonDown(evt);\n\n        if (!noPreventDefault) {\n          evt.preventDefault();\n          element && element.focus();\n        }\n      } else if (p.type === PointerEventTypes.POINTERDOUBLETAP) {\n        _this.onDoubleTap(evt.pointerType);\n      } else if (p.type === PointerEventTypes.POINTERUP && (_this._currentActiveButton === evt.button || isTouch)) {\n        try {\n          srcElement === null || srcElement === void 0 ? void 0 : srcElement.releasePointerCapture(evt.pointerId);\n        } catch (e) {//Nothing to do with the error.\n        }\n\n        if (!isTouch) {\n          _this._pointB = null; // Mouse and pen are mono pointer\n        } //would be better to use pointers.remove(evt.pointerId) for multitouch gestures,\n        //but emptying completely pointers collection is required to fix a bug on iPhone :\n        //when changing orientation while pinching camera,\n        //one pointer stay pressed forever if we don't release all pointers\n        //will be ok to put back pointers.remove(evt.pointerId); when iPhone bug corrected\n\n\n        if (engine._badOS) {\n          _this._pointA = _this._pointB = null;\n        } else {\n          //only remove the impacted pointer in case of multitouch allowing on most\n          //platforms switching from rotate to zoom and pan seamlessly.\n          if (_this._pointB && _this._pointA && _this._pointA.pointerId == evt.pointerId) {\n            _this._pointA = _this._pointB;\n            _this._pointB = null;\n          } else if (_this._pointA && _this._pointB && _this._pointB.pointerId == evt.pointerId) {\n            _this._pointB = null;\n          } else {\n            _this._pointA = _this._pointB = null;\n          }\n        }\n\n        if (previousPinchSquaredDistance !== 0 || previousMultiTouchPanPosition) {\n          // Previous pinch data is populated but a button has been lifted\n          // so pinch has ended.\n          _this.onMultiTouch(_this._pointA, _this._pointB, previousPinchSquaredDistance, 0, // pinchSquaredDistance\n          previousMultiTouchPanPosition, null // multiTouchPanPosition\n          );\n\n          previousPinchSquaredDistance = 0;\n          previousMultiTouchPanPosition = null;\n        }\n\n        _this._currentActiveButton = -1;\n\n        _this.onButtonUp(evt);\n\n        if (!noPreventDefault) {\n          evt.preventDefault();\n        }\n      } else if (p.type === PointerEventTypes.POINTERMOVE) {\n        if (!noPreventDefault) {\n          evt.preventDefault();\n        } // One button down\n\n\n        if (_this._pointA && _this._pointB === null) {\n          var offsetX = evt.clientX - _this._pointA.x;\n          var offsetY = evt.clientY - _this._pointA.y;\n\n          _this.onTouch(_this._pointA, offsetX, offsetY);\n\n          _this._pointA.x = evt.clientX;\n          _this._pointA.y = evt.clientY;\n        } // Two buttons down: pinch\n        else if (_this._pointA && _this._pointB) {\n          var ed = _this._pointA.pointerId === evt.pointerId ? _this._pointA : _this._pointB;\n          ed.x = evt.clientX;\n          ed.y = evt.clientY;\n          var distX = _this._pointA.x - _this._pointB.x;\n          var distY = _this._pointA.y - _this._pointB.y;\n          var pinchSquaredDistance = distX * distX + distY * distY;\n          var multiTouchPanPosition = {\n            x: (_this._pointA.x + _this._pointB.x) / 2,\n            y: (_this._pointA.y + _this._pointB.y) / 2,\n            pointerId: evt.pointerId,\n            type: p.type\n          };\n\n          _this.onMultiTouch(_this._pointA, _this._pointB, previousPinchSquaredDistance, pinchSquaredDistance, previousMultiTouchPanPosition, multiTouchPanPosition);\n\n          previousMultiTouchPanPosition = multiTouchPanPosition;\n          previousPinchSquaredDistance = pinchSquaredDistance;\n        }\n      }\n    };\n\n    this._observer = this.camera.getScene().onPointerObservable.add(this._pointerInput, PointerEventTypes.POINTERDOWN | PointerEventTypes.POINTERUP | PointerEventTypes.POINTERMOVE | PointerEventTypes.POINTERDOUBLETAP);\n\n    this._onLostFocus = function () {\n      _this._pointA = _this._pointB = null;\n      previousPinchSquaredDistance = 0;\n      previousMultiTouchPanPosition = null;\n\n      _this.onLostFocus();\n    };\n\n    this._contextMenuBind = this.onContextMenu.bind(this);\n    element && element.addEventListener(\"contextmenu\", this._contextMenuBind, false);\n    var hostWindow = this.camera.getScene().getEngine().getHostWindow();\n\n    if (hostWindow) {\n      Tools.RegisterTopRootEvents(hostWindow, [{\n        name: \"blur\",\n        handler: this._onLostFocus\n      }]);\n    }\n  };\n  /**\n   * Detach the current controls from the specified dom element.\n   */\n\n\n  BaseCameraPointersInput.prototype.detachControl = function () {\n    if (this._onLostFocus) {\n      var hostWindow = this.camera.getScene().getEngine().getHostWindow();\n\n      if (hostWindow) {\n        Tools.UnregisterTopRootEvents(hostWindow, [{\n          name: \"blur\",\n          handler: this._onLostFocus\n        }]);\n      }\n    }\n\n    if (this._observer) {\n      this.camera.getScene().onPointerObservable.remove(this._observer);\n      this._observer = null;\n\n      if (this._contextMenuBind) {\n        var inputElement = this.camera.getScene().getEngine().getInputElement();\n        inputElement && inputElement.removeEventListener(\"contextmenu\", this._contextMenuBind);\n      }\n\n      this._onLostFocus = null;\n    }\n\n    this._altKey = false;\n    this._ctrlKey = false;\n    this._metaKey = false;\n    this._shiftKey = false;\n    this._buttonsPressed = 0;\n    this._currentActiveButton = -1;\n  };\n  /**\n   * Gets the class name of the current input.\n   * @returns the class name\n   */\n\n\n  BaseCameraPointersInput.prototype.getClassName = function () {\n    return \"BaseCameraPointersInput\";\n  };\n  /**\n   * Get the friendly name associated with the input class.\n   * @returns the input friendly name\n   */\n\n\n  BaseCameraPointersInput.prototype.getSimpleName = function () {\n    return \"pointers\";\n  };\n  /**\n   * Called on pointer POINTERDOUBLETAP event.\n   * Override this method to provide functionality on POINTERDOUBLETAP event.\n   * @param type\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  BaseCameraPointersInput.prototype.onDoubleTap = function (type) {};\n  /**\n   * Called on pointer POINTERMOVE event if only a single touch is active.\n   * Override this method to provide functionality.\n   * @param point\n   * @param offsetX\n   * @param offsetY\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  BaseCameraPointersInput.prototype.onTouch = function (point, offsetX, offsetY) {};\n  /**\n   * Called on pointer POINTERMOVE event if multiple touches are active.\n   * Override this method to provide functionality.\n   * @param _pointA\n   * @param _pointB\n   * @param previousPinchSquaredDistance\n   * @param pinchSquaredDistance\n   * @param previousMultiTouchPanPosition\n   * @param multiTouchPanPosition\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  BaseCameraPointersInput.prototype.onMultiTouch = function (_pointA, _pointB, previousPinchSquaredDistance, pinchSquaredDistance, previousMultiTouchPanPosition, multiTouchPanPosition) {};\n  /**\n   * Called on JS contextmenu event.\n   * Override this method to provide functionality.\n   * @param evt\n   */\n\n\n  BaseCameraPointersInput.prototype.onContextMenu = function (evt) {\n    evt.preventDefault();\n  };\n  /**\n   * Called each time a new POINTERDOWN event occurs. Ie, for each button\n   * press.\n   * Override this method to provide functionality.\n   * @param evt\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  BaseCameraPointersInput.prototype.onButtonDown = function (evt) {};\n  /**\n   * Called each time a new POINTERUP event occurs. Ie, for each button\n   * release.\n   * Override this method to provide functionality.\n   * @param evt\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  BaseCameraPointersInput.prototype.onButtonUp = function (evt) {};\n  /**\n   * Called when window becomes inactive.\n   * Override this method to provide functionality.\n   */\n\n\n  BaseCameraPointersInput.prototype.onLostFocus = function () {};\n\n  __decorate([serialize()], BaseCameraPointersInput.prototype, \"buttons\", void 0);\n\n  return BaseCameraPointersInput;\n}();\n\nexport { BaseCameraPointersInput };","map":{"version":3,"mappings":"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","names":["serialize","Tools","PointerEventTypes","BaseCameraPointersInput","noPreventDefault","BackCompatCameraNoPreventDefault","arguments","engine","camera","getEngine","element","getInputElement","previousPinchSquaredDistance","previousMultiTouchPanPosition","_pointA","_pointB","_altKey","_ctrlKey","_metaKey","_shiftKey","_buttonsPressed","_pointerInput","p","evt","event","isTouch","pointerType","isInVRExclusivePointerMode","type","POINTERMOVE","_this","buttons","indexOf","button","srcElement","target","altKey","ctrlKey","metaKey","shiftKey","isPointerLock","offsetX","movementX","mozMovementX","webkitMovementX","msMovementX","offsetY","movementY","mozMovementY","webkitMovementY","msMovementY","onTouch","POINTERDOWN","_currentActiveButton","setPointerCapture","pointerId","e","x","clientX","y","clientY","onButtonDown","preventDefault","focus","POINTERDOUBLETAP","onDoubleTap","POINTERUP","releasePointerCapture","_badOS","onMultiTouch","onButtonUp","ed","distX","distY","pinchSquaredDistance","multiTouchPanPosition","_observer","getScene","onPointerObservable","add","_onLostFocus","onLostFocus","_contextMenuBind","onContextMenu","bind","addEventListener","hostWindow","getHostWindow","RegisterTopRootEvents","name","handler","UnregisterTopRootEvents","remove","inputElement","removeEventListener","point","__decorate"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Cameras/Inputs/BaseCameraPointersInput.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport type { Nullable } from \"../../types\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport type { EventState, Observer } from \"../../Misc/observable\";\r\nimport { Tools } from \"../../Misc/tools\";\r\nimport type { Camera } from \"../../Cameras/camera\";\r\nimport type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport type { PointerInfo, PointerTouch } from \"../../Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\r\nimport type { IPointerEvent } from \"../../Events/deviceInputEvents\";\r\n\r\n/**\r\n * Base class for Camera Pointer Inputs.\r\n * See FollowCameraPointersInput in src/Cameras/Inputs/followCameraPointersInput.ts\r\n * for example usage.\r\n */\r\nexport abstract class BaseCameraPointersInput implements ICameraInput<Camera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public abstract camera: Camera;\r\n\r\n    /**\r\n     * Whether keyboard modifier keys are pressed at time of last mouse event.\r\n     */\r\n    protected _altKey: boolean;\r\n    protected _ctrlKey: boolean;\r\n    protected _metaKey: boolean;\r\n    protected _shiftKey: boolean;\r\n\r\n    /**\r\n     * Which mouse buttons were pressed at time of last mouse event.\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\r\n     */\r\n    protected _buttonsPressed: number;\r\n\r\n    private _currentActiveButton: number = -1;\r\n    private _contextMenuBind: EventListener;\r\n\r\n    /**\r\n     * Defines the buttons associated with the input to handle camera move.\r\n     */\r\n    @serialize()\r\n    public buttons = [0, 1, 2];\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        // eslint-disable-next-line prefer-rest-params\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n        const engine = this.camera.getEngine();\r\n        const element = engine.getInputElement();\r\n        let previousPinchSquaredDistance = 0;\r\n        let previousMultiTouchPanPosition: Nullable<PointerTouch> = null;\r\n\r\n        this._pointA = null;\r\n        this._pointB = null;\r\n\r\n        this._altKey = false;\r\n        this._ctrlKey = false;\r\n        this._metaKey = false;\r\n        this._shiftKey = false;\r\n        this._buttonsPressed = 0;\r\n\r\n        this._pointerInput = (p) => {\r\n            const evt = <IPointerEvent>p.event;\r\n            const isTouch = evt.pointerType === \"touch\";\r\n\r\n            if (engine.isInVRExclusivePointerMode) {\r\n                return;\r\n            }\r\n\r\n            if (p.type !== PointerEventTypes.POINTERMOVE && this.buttons.indexOf(evt.button) === -1) {\r\n                return;\r\n            }\r\n\r\n            const srcElement = <HTMLElement>(evt.srcElement || evt.target);\r\n\r\n            this._altKey = evt.altKey;\r\n            this._ctrlKey = evt.ctrlKey;\r\n            this._metaKey = evt.metaKey;\r\n            this._shiftKey = evt.shiftKey;\r\n            this._buttonsPressed = evt.buttons;\r\n\r\n            if (engine.isPointerLock) {\r\n                const offsetX = evt.movementX || evt.mozMovementX || evt.webkitMovementX || evt.msMovementX || 0;\r\n                const offsetY = evt.movementY || evt.mozMovementY || evt.webkitMovementY || evt.msMovementY || 0;\r\n\r\n                this.onTouch(null, offsetX, offsetY);\r\n                this._pointA = null;\r\n                this._pointB = null;\r\n            } else if (p.type === PointerEventTypes.POINTERDOWN && (this._currentActiveButton === -1 || isTouch)) {\r\n                try {\r\n                    srcElement?.setPointerCapture(evt.pointerId);\r\n                } catch (e) {\r\n                    //Nothing to do with the error. Execution will continue.\r\n                }\r\n\r\n                if (this._pointA === null) {\r\n                    this._pointA = {\r\n                        x: evt.clientX,\r\n                        y: evt.clientY,\r\n                        pointerId: evt.pointerId,\r\n                        type: evt.pointerType,\r\n                    };\r\n                } else if (this._pointB === null) {\r\n                    this._pointB = {\r\n                        x: evt.clientX,\r\n                        y: evt.clientY,\r\n                        pointerId: evt.pointerId,\r\n                        type: evt.pointerType,\r\n                    };\r\n                }\r\n\r\n                if (this._currentActiveButton === -1 && !isTouch) {\r\n                    this._currentActiveButton = evt.button;\r\n                }\r\n                this.onButtonDown(evt);\r\n\r\n                if (!noPreventDefault) {\r\n                    evt.preventDefault();\r\n                    element && element.focus();\r\n                }\r\n            } else if (p.type === PointerEventTypes.POINTERDOUBLETAP) {\r\n                this.onDoubleTap(evt.pointerType);\r\n            } else if (p.type === PointerEventTypes.POINTERUP && (this._currentActiveButton === evt.button || isTouch)) {\r\n                try {\r\n                    srcElement?.releasePointerCapture(evt.pointerId);\r\n                } catch (e) {\r\n                    //Nothing to do with the error.\r\n                }\r\n\r\n                if (!isTouch) {\r\n                    this._pointB = null; // Mouse and pen are mono pointer\r\n                }\r\n\r\n                //would be better to use pointers.remove(evt.pointerId) for multitouch gestures,\r\n                //but emptying completely pointers collection is required to fix a bug on iPhone :\r\n                //when changing orientation while pinching camera,\r\n                //one pointer stay pressed forever if we don't release all pointers\r\n                //will be ok to put back pointers.remove(evt.pointerId); when iPhone bug corrected\r\n                if (engine._badOS) {\r\n                    this._pointA = this._pointB = null;\r\n                } else {\r\n                    //only remove the impacted pointer in case of multitouch allowing on most\r\n                    //platforms switching from rotate to zoom and pan seamlessly.\r\n                    if (this._pointB && this._pointA && this._pointA.pointerId == evt.pointerId) {\r\n                        this._pointA = this._pointB;\r\n                        this._pointB = null;\r\n                    } else if (this._pointA && this._pointB && this._pointB.pointerId == evt.pointerId) {\r\n                        this._pointB = null;\r\n                    } else {\r\n                        this._pointA = this._pointB = null;\r\n                    }\r\n                }\r\n\r\n                if (previousPinchSquaredDistance !== 0 || previousMultiTouchPanPosition) {\r\n                    // Previous pinch data is populated but a button has been lifted\r\n                    // so pinch has ended.\r\n                    this.onMultiTouch(\r\n                        this._pointA,\r\n                        this._pointB,\r\n                        previousPinchSquaredDistance,\r\n                        0, // pinchSquaredDistance\r\n                        previousMultiTouchPanPosition,\r\n                        null // multiTouchPanPosition\r\n                    );\r\n                    previousPinchSquaredDistance = 0;\r\n                    previousMultiTouchPanPosition = null;\r\n                }\r\n\r\n                this._currentActiveButton = -1;\r\n                this.onButtonUp(evt);\r\n\r\n                if (!noPreventDefault) {\r\n                    evt.preventDefault();\r\n                }\r\n            } else if (p.type === PointerEventTypes.POINTERMOVE) {\r\n                if (!noPreventDefault) {\r\n                    evt.preventDefault();\r\n                }\r\n\r\n                // One button down\r\n                if (this._pointA && this._pointB === null) {\r\n                    const offsetX = evt.clientX - this._pointA.x;\r\n                    const offsetY = evt.clientY - this._pointA.y;\r\n                    this.onTouch(this._pointA, offsetX, offsetY);\r\n\r\n                    this._pointA.x = evt.clientX;\r\n                    this._pointA.y = evt.clientY;\r\n                }\r\n                // Two buttons down: pinch\r\n                else if (this._pointA && this._pointB) {\r\n                    const ed = this._pointA.pointerId === evt.pointerId ? this._pointA : this._pointB;\r\n                    ed.x = evt.clientX;\r\n                    ed.y = evt.clientY;\r\n                    const distX = this._pointA.x - this._pointB.x;\r\n                    const distY = this._pointA.y - this._pointB.y;\r\n                    const pinchSquaredDistance = distX * distX + distY * distY;\r\n                    const multiTouchPanPosition = {\r\n                        x: (this._pointA.x + this._pointB.x) / 2,\r\n                        y: (this._pointA.y + this._pointB.y) / 2,\r\n                        pointerId: evt.pointerId,\r\n                        type: p.type,\r\n                    };\r\n\r\n                    this.onMultiTouch(this._pointA, this._pointB, previousPinchSquaredDistance, pinchSquaredDistance, previousMultiTouchPanPosition, multiTouchPanPosition);\r\n\r\n                    previousMultiTouchPanPosition = multiTouchPanPosition;\r\n                    previousPinchSquaredDistance = pinchSquaredDistance;\r\n                }\r\n            }\r\n        };\r\n\r\n        this._observer = this.camera\r\n            .getScene()\r\n            .onPointerObservable.add(\r\n                this._pointerInput,\r\n                PointerEventTypes.POINTERDOWN | PointerEventTypes.POINTERUP | PointerEventTypes.POINTERMOVE | PointerEventTypes.POINTERDOUBLETAP\r\n            );\r\n\r\n        this._onLostFocus = () => {\r\n            this._pointA = this._pointB = null;\r\n            previousPinchSquaredDistance = 0;\r\n            previousMultiTouchPanPosition = null;\r\n            this.onLostFocus();\r\n        };\r\n\r\n        this._contextMenuBind = this.onContextMenu.bind(this);\r\n\r\n        element && element.addEventListener(\"contextmenu\", this._contextMenuBind, false);\r\n\r\n        const hostWindow = this.camera.getScene().getEngine().getHostWindow();\r\n\r\n        if (hostWindow) {\r\n            Tools.RegisterTopRootEvents(hostWindow, [{ name: \"blur\", handler: this._onLostFocus }]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        if (this._onLostFocus) {\r\n            const hostWindow = this.camera.getScene().getEngine().getHostWindow();\r\n            if (hostWindow) {\r\n                Tools.UnregisterTopRootEvents(hostWindow, [{ name: \"blur\", handler: this._onLostFocus }]);\r\n            }\r\n        }\r\n\r\n        if (this._observer) {\r\n            this.camera.getScene().onPointerObservable.remove(this._observer);\r\n            this._observer = null;\r\n\r\n            if (this._contextMenuBind) {\r\n                const inputElement = this.camera.getScene().getEngine().getInputElement();\r\n                inputElement && inputElement.removeEventListener(\"contextmenu\", this._contextMenuBind);\r\n            }\r\n\r\n            this._onLostFocus = null;\r\n        }\r\n\r\n        this._altKey = false;\r\n        this._ctrlKey = false;\r\n        this._metaKey = false;\r\n        this._shiftKey = false;\r\n        this._buttonsPressed = 0;\r\n        this._currentActiveButton = -1;\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"BaseCameraPointersInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"pointers\";\r\n    }\r\n\r\n    /**\r\n     * Called on pointer POINTERDOUBLETAP event.\r\n     * Override this method to provide functionality on POINTERDOUBLETAP event.\r\n     * @param type\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public onDoubleTap(type: string) {}\r\n\r\n    /**\r\n     * Called on pointer POINTERMOVE event if only a single touch is active.\r\n     * Override this method to provide functionality.\r\n     * @param point\r\n     * @param offsetX\r\n     * @param offsetY\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public onTouch(point: Nullable<PointerTouch>, offsetX: number, offsetY: number): void {}\r\n\r\n    /**\r\n     * Called on pointer POINTERMOVE event if multiple touches are active.\r\n     * Override this method to provide functionality.\r\n     * @param _pointA\r\n     * @param _pointB\r\n     * @param previousPinchSquaredDistance\r\n     * @param pinchSquaredDistance\r\n     * @param previousMultiTouchPanPosition\r\n     * @param multiTouchPanPosition\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public onMultiTouch(\r\n        _pointA: Nullable<PointerTouch>,\r\n        _pointB: Nullable<PointerTouch>,\r\n        previousPinchSquaredDistance: number,\r\n        pinchSquaredDistance: number,\r\n        previousMultiTouchPanPosition: Nullable<PointerTouch>,\r\n        multiTouchPanPosition: Nullable<PointerTouch>\r\n    ): void {}\r\n\r\n    /**\r\n     * Called on JS contextmenu event.\r\n     * Override this method to provide functionality.\r\n     * @param evt\r\n     */\r\n    public onContextMenu(evt: PointerEvent): void {\r\n        evt.preventDefault();\r\n    }\r\n\r\n    /**\r\n     * Called each time a new POINTERDOWN event occurs. Ie, for each button\r\n     * press.\r\n     * Override this method to provide functionality.\r\n     * @param evt\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public onButtonDown(evt: IPointerEvent): void {}\r\n\r\n    /**\r\n     * Called each time a new POINTERUP event occurs. Ie, for each button\r\n     * release.\r\n     * Override this method to provide functionality.\r\n     * @param evt\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public onButtonUp(evt: IPointerEvent): void {}\r\n\r\n    /**\r\n     * Called when window becomes inactive.\r\n     * Override this method to provide functionality.\r\n     */\r\n    public onLostFocus(): void {}\r\n\r\n    private _pointerInput: (p: PointerInfo, s: EventState) => void;\r\n    private _observer: Nullable<Observer<PointerInfo>>;\r\n    private _onLostFocus: Nullable<(e: FocusEvent) => any>;\r\n    private _pointA: Nullable<PointerTouch>;\r\n    private _pointB: Nullable<PointerTouch>;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}