{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial.js\";\nimport { GLTFLoader } from \"../glTFLoader.js\";\nvar NAME = \"KHR_materials_ior\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_ior)\n */\n\nvar KHR_materials_ior =\n/** @class */\nfunction () {\n  /**\n   * @param loader\n   * @hidden\n   */\n  function KHR_materials_ior(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    /**\n     * Defines a number that determines the order the extensions are applied.\n     */\n\n    this.order = 180;\n    this._loader = loader;\n    this.enabled = this._loader.isExtensionUsed(NAME);\n  }\n  /** @hidden */\n\n\n  KHR_materials_ior.prototype.dispose = function () {\n    this._loader = null;\n  };\n  /**\n   * @param context\n   * @param material\n   * @param babylonMaterial\n   * @hidden\n   */\n\n\n  KHR_materials_ior.prototype.loadMaterialPropertiesAsync = function (context, material, babylonMaterial) {\n    var _this = this;\n\n    return GLTFLoader.LoadExtensionAsync(context, material, this.name, function (extensionContext, extension) {\n      var promises = new Array();\n      promises.push(_this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n      promises.push(_this._loadIorPropertiesAsync(extensionContext, extension, babylonMaterial));\n      return Promise.all(promises).then(function () {});\n    });\n  };\n\n  KHR_materials_ior.prototype._loadIorPropertiesAsync = function (context, properties, babylonMaterial) {\n    if (!(babylonMaterial instanceof PBRMaterial)) {\n      throw new Error(\"\".concat(context, \": Material type not supported\"));\n    }\n\n    if (properties.ior !== undefined) {\n      babylonMaterial.indexOfRefraction = properties.ior;\n    } else {\n      babylonMaterial.indexOfRefraction = KHR_materials_ior._DEFAULT_IOR;\n    }\n\n    return Promise.resolve();\n  };\n  /**\n   * Default ior Value from the spec.\n   */\n\n\n  KHR_materials_ior._DEFAULT_IOR = 1.5;\n  return KHR_materials_ior;\n}();\n\nexport { KHR_materials_ior };\nGLTFLoader.RegisterExtension(NAME, function (loader) {\n  return new KHR_materials_ior(loader);\n});","map":{"version":3,"mappings":";;;;;;AAEA,SAASA,WAAT,QAAsB,8CAAtB;AAKA,SAASC,UAAT,QAA2B,kBAA3B;AAGA,IAAMC,IAAI,GAAG,mBAAb;AAEA;;;;AAGA;AAAA;AAAA;AAuBI;;;;AAIA,6BAAYC,MAAZ,EAA8B;AArB9B;;;AAGgB,gBAAOD,IAAP;AAOhB;;;;AAGO,iBAAQ,GAAR;AASH,SAAKE,OAAL,GAAeD,MAAf;AACA,SAAKE,OAAL,GAAe,KAAKD,OAAL,CAAaE,eAAb,CAA6BJ,IAA7B,CAAf;AACH;AAED;;;AACOK,wCAAP;AACK,SAAKH,OAAL,GAAuB,IAAvB;AACJ,GAFM;AAIP;;;;;;;;AAMOG,4DAAP,UAAmCC,OAAnC,EAAoDC,QAApD,EAAyEC,eAAzE,EAAkG;AAAlG;;AACI,WAAOT,UAAU,CAACU,kBAAX,CAAgDH,OAAhD,EAAyDC,QAAzD,EAAmE,KAAKG,IAAxE,EAA8E,UAACC,gBAAD,EAAmBC,SAAnB,EAA4B;AAC7G,UAAMC,QAAQ,GAAG,IAAIC,KAAJ,EAAjB;AACAD,cAAQ,CAACE,IAAT,CAAcC,KAAI,CAACd,OAAL,CAAae,2BAAb,CAAyCX,OAAzC,EAAkDC,QAAlD,EAA4DC,eAA5D,CAAd;AACAK,cAAQ,CAACE,IAAT,CAAcC,KAAI,CAACE,uBAAL,CAA6BP,gBAA7B,EAA+CC,SAA/C,EAA0DJ,eAA1D,CAAd;AACA,aAAOW,OAAO,CAACC,GAAR,CAAYP,QAAZ,EAAsBQ,IAAtB,CAA2B,aAAQ,CAAnC,CAAP;AACH,KALM,CAAP;AAMH,GAPM;;AASChB,wDAAR,UAAgCC,OAAhC,EAAiDgB,UAAjD,EAA+Ed,eAA/E,EAAwG;AACpG,QAAI,EAAEA,eAAe,YAAYV,WAA7B,CAAJ,EAA+C;AAC3C,YAAM,IAAIyB,KAAJ,CAAU,UAAGjB,OAAH,EAAU,+BAAV,CAAV,CAAN;AACH;;AAED,QAAIgB,UAAU,CAACE,GAAX,KAAmBC,SAAvB,EAAkC;AAC9BjB,qBAAe,CAACkB,iBAAhB,GAAoCJ,UAAU,CAACE,GAA/C;AACH,KAFD,MAEO;AACHhB,qBAAe,CAACkB,iBAAhB,GAAoCrB,iBAAiB,CAACsB,YAAtD;AACH;;AAED,WAAOR,OAAO,CAACS,OAAR,EAAP;AACH,GAZO;AAnDR;;;;;AAGwBvB,mCAAe,GAAf;AA6D5B;AAAC,CAjED;;SAAaA;AAmEbN,UAAU,CAAC8B,iBAAX,CAA6B7B,IAA7B,EAAmC,UAACC,MAAD,EAAO;AAAK,aAAII,iBAAJ,CAAsBJ,MAAtB;AAA6B,CAA5E","names":["PBRMaterial","GLTFLoader","NAME","loader","_loader","enabled","isExtensionUsed","KHR_materials_ior","context","material","babylonMaterial","LoadExtensionAsync","name","extensionContext","extension","promises","Array","push","_this","loadMaterialPropertiesAsync","_loadIorPropertiesAsync","Promise","all","then","properties","Error","ior","undefined","indexOfRefraction","_DEFAULT_IOR","resolve","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../../lts/loaders/generated/glTF/2.0/Extensions/KHR_materials_ior.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { PBRMaterial } from \"core/Materials/PBR/pbrMaterial\";\r\nimport type { Material } from \"core/Materials/material\";\r\n\r\nimport type { IMaterial } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader } from \"../glTFLoader\";\r\nimport type { IKHRMaterialsIor } from \"babylonjs-gltf2interface\";\r\n\r\nconst NAME = \"KHR_materials_ior\";\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_ior)\r\n */\r\nexport class KHR_materials_ior implements IGLTFLoaderExtension {\r\n    /**\r\n     * Default ior Value from the spec.\r\n     */\r\n    private static readonly _DEFAULT_IOR = 1.5;\r\n\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\r\n    public order = 180;\r\n\r\n    private _loader: GLTFLoader;\r\n\r\n    /**\r\n     * @param loader\r\n     * @hidden\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @hidden */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n    }\r\n\r\n    /**\r\n     * @param context\r\n     * @param material\r\n     * @param babylonMaterial\r\n     * @hidden\r\n     */\r\n    public loadMaterialPropertiesAsync(context: string, material: IMaterial, babylonMaterial: Material): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IKHRMaterialsIor>(context, material, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n            promises.push(this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\r\n            promises.push(this._loadIorPropertiesAsync(extensionContext, extension, babylonMaterial));\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    private _loadIorPropertiesAsync(context: string, properties: IKHRMaterialsIor, babylonMaterial: Material): Promise<void> {\r\n        if (!(babylonMaterial instanceof PBRMaterial)) {\r\n            throw new Error(`${context}: Material type not supported`);\r\n        }\r\n\r\n        if (properties.ior !== undefined) {\r\n            babylonMaterial.indexOfRefraction = properties.ior;\r\n        } else {\r\n            babylonMaterial.indexOfRefraction = KHR_materials_ior._DEFAULT_IOR;\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new KHR_materials_ior(loader));\r\n"]},"metadata":{},"sourceType":"module"}