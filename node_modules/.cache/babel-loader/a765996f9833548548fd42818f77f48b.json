{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { __decorate, __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject.js\";\nimport { PBRClearCoatConfiguration } from \"../../../PBR/pbrClearCoatConfiguration.js\";\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator.js\";\n/**\n * Block used to implement the clear coat module of the PBR material\n */\n\nvar ClearCoatBlock =\n/** @class */\nfunction (_super) {\n  __extends(ClearCoatBlock, _super);\n  /**\n   * Create a new ClearCoatBlock\n   * @param name defines the block name\n   */\n\n\n  function ClearCoatBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;\n    /**\n     * Defines if the F0 value should be remapped to account for the interface change in the material.\n     */\n\n\n    _this.remapF0OnInterfaceChange = true;\n    _this._isUnique = true;\n\n    _this.registerInput(\"intensity\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"roughness\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"indexOfRefraction\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"normalMapColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"uv\", NodeMaterialBlockConnectionPointTypes.Vector2, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"tintColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"tintAtDistance\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"tintThickness\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"worldTangent\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\n\n    _this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\n\n    _this.worldNormal.acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector3);\n\n    _this.registerOutput(\"clearcoat\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"clearcoat\", _this, NodeMaterialConnectionPointDirection.Output, ClearCoatBlock, \"ClearCoatBlock\"));\n\n    return _this;\n  }\n  /**\n   * Initialize the block and prepare the context for build\n   * @param state defines the state that will be used for the build\n   */\n\n\n  ClearCoatBlock.prototype.initialize = function (state) {\n    state._excludeVariableName(\"clearcoatOut\");\n\n    state._excludeVariableName(\"vClearCoatParams\");\n\n    state._excludeVariableName(\"vClearCoatTintParams\");\n\n    state._excludeVariableName(\"vClearCoatRefractionParams\");\n\n    state._excludeVariableName(\"vClearCoatTangentSpaceParams\");\n\n    state._excludeVariableName(\"vGeometricNormaClearCoatW\");\n  };\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  ClearCoatBlock.prototype.getClassName = function () {\n    return \"ClearCoatBlock\";\n  };\n\n  Object.defineProperty(ClearCoatBlock.prototype, \"intensity\", {\n    /**\n     * Gets the intensity input component\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClearCoatBlock.prototype, \"roughness\", {\n    /**\n     * Gets the roughness input component\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClearCoatBlock.prototype, \"indexOfRefraction\", {\n    /**\n     * Gets the ior input component\n     */\n    get: function get() {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClearCoatBlock.prototype, \"normalMapColor\", {\n    /**\n     * Gets the bump texture input component\n     */\n    get: function get() {\n      return this._inputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClearCoatBlock.prototype, \"uv\", {\n    /**\n     * Gets the uv input component\n     */\n    get: function get() {\n      return this._inputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClearCoatBlock.prototype, \"tintColor\", {\n    /**\n     * Gets the tint color input component\n     */\n    get: function get() {\n      return this._inputs[5];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClearCoatBlock.prototype, \"tintAtDistance\", {\n    /**\n     * Gets the tint \"at distance\" input component\n     */\n    get: function get() {\n      return this._inputs[6];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClearCoatBlock.prototype, \"tintThickness\", {\n    /**\n     * Gets the tint thickness input component\n     */\n    get: function get() {\n      return this._inputs[7];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClearCoatBlock.prototype, \"worldTangent\", {\n    /**\n     * Gets the world tangent input component\n     */\n    get: function get() {\n      return this._inputs[8];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClearCoatBlock.prototype, \"worldNormal\", {\n    /**\n     * Gets the world normal input component\n     */\n    get: function get() {\n      return this._inputs[9];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClearCoatBlock.prototype, \"clearcoat\", {\n    /**\n     * Gets the clear coat object output component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ClearCoatBlock.prototype.autoConfigure = function () {\n    if (!this.intensity.isConnected) {\n      var intensityInput = new InputBlock(\"ClearCoat intensity\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\n      intensityInput.value = 1;\n      intensityInput.output.connectTo(this.intensity);\n    }\n  };\n\n  ClearCoatBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    _super.prototype.prepareDefines.call(this, mesh, nodeMaterial, defines);\n\n    defines.setValue(\"CLEARCOAT\", true);\n    defines.setValue(\"CLEARCOAT_TEXTURE\", false, true);\n    defines.setValue(\"CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE\", true, true);\n    defines.setValue(\"CLEARCOAT_TINT\", this.tintColor.isConnected || this.tintThickness.isConnected || this.tintAtDistance.isConnected, true);\n    defines.setValue(\"CLEARCOAT_BUMP\", this.normalMapColor.isConnected, true);\n    defines.setValue(\"CLEARCOAT_DEFAULTIOR\", this.indexOfRefraction.isConnected ? this.indexOfRefraction.connectInputBlock.value === PBRClearCoatConfiguration._DefaultIndexOfRefraction : true, true);\n    defines.setValue(\"CLEARCOAT_REMAP_F0\", this.remapF0OnInterfaceChange, true);\n  };\n\n  ClearCoatBlock.prototype.bind = function (effect, nodeMaterial, mesh) {\n    var _a, _b;\n\n    _super.prototype.bind.call(this, effect, nodeMaterial, mesh); // Clear Coat Refraction params\n\n\n    var indexOfRefraction = (_b = (_a = this.indexOfRefraction.connectInputBlock) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : PBRClearCoatConfiguration._DefaultIndexOfRefraction;\n    var a = 1 - indexOfRefraction;\n    var b = 1 + indexOfRefraction;\n    var f0 = Math.pow(-a / b, 2); // Schlicks approx: (ior1 - ior2) / (ior1 + ior2) where ior2 for air is close to vacuum = 1.\n\n    var eta = 1 / indexOfRefraction;\n    effect.setFloat4(\"vClearCoatRefractionParams\", f0, eta, a, b); // Clear Coat tangent space params\n\n    var mainPBRBlock = this.clearcoat.hasEndpoints ? this.clearcoat.endpoints[0].ownerBlock : null;\n    var perturbedNormalBlock = (mainPBRBlock === null || mainPBRBlock === void 0 ? void 0 : mainPBRBlock.perturbedNormal.isConnected) ? mainPBRBlock.perturbedNormal.connectedPoint.ownerBlock : null;\n\n    if (this._scene._mirroredCameraPosition) {\n      effect.setFloat2(\"vClearCoatTangentSpaceParams\", (perturbedNormalBlock === null || perturbedNormalBlock === void 0 ? void 0 : perturbedNormalBlock.invertX) ? 1.0 : -1.0, (perturbedNormalBlock === null || perturbedNormalBlock === void 0 ? void 0 : perturbedNormalBlock.invertY) ? 1.0 : -1.0);\n    } else {\n      effect.setFloat2(\"vClearCoatTangentSpaceParams\", (perturbedNormalBlock === null || perturbedNormalBlock === void 0 ? void 0 : perturbedNormalBlock.invertX) ? -1.0 : 1.0, (perturbedNormalBlock === null || perturbedNormalBlock === void 0 ? void 0 : perturbedNormalBlock.invertY) ? -1.0 : 1.0);\n    }\n  };\n\n  ClearCoatBlock.prototype._generateTBNSpace = function (state, worldPositionVarName, worldNormalVarName) {\n    var code = \"\";\n    var comments = \"//\".concat(this.name);\n    var worldTangent = this.worldTangent;\n\n    state._emitExtension(\"derivatives\", \"#extension GL_OES_standard_derivatives : enable\");\n\n    var tangentReplaceString = {\n      search: /defined\\(TANGENT\\)/g,\n      replace: worldTangent.isConnected ? \"defined(TANGENT)\" : \"defined(IGNORE)\"\n    };\n\n    if (worldTangent.isConnected) {\n      code += \"vec3 tbnNormal = normalize(\".concat(worldNormalVarName, \".xyz);\\r\\n\");\n      code += \"vec3 tbnTangent = normalize(\".concat(worldTangent.associatedVariableName, \".xyz);\\r\\n\");\n      code += \"vec3 tbnBitangent = cross(tbnNormal, tbnTangent);\\r\\n\";\n      code += \"mat3 vTBN = mat3(tbnTangent, tbnBitangent, tbnNormal);\\r\\n\";\n    }\n\n    state._emitFunctionFromInclude(\"bumpFragmentMainFunctions\", comments, {\n      replaceStrings: [tangentReplaceString]\n    });\n\n    return code;\n  };\n  /**\n   * Gets the main code of the block (fragment side)\n   * @param state current state of the node material building\n   * @param ccBlock instance of a ClearCoatBlock or null if the code must be generated without an active clear coat module\n   * @param reflectionBlock instance of a ReflectionBlock null if the code must be generated without an active reflection module\n   * @param worldPosVarName name of the variable holding the world position\n   * @param generateTBNSpace if true, the code needed to create the TBN coordinate space is generated\n   * @param vTBNAvailable indicate that the vTBN variable is already existing because it has already been generated by another block (PerturbNormal or Anisotropy)\n   * @param worldNormalVarName name of the variable holding the world normal\n   * @returns the shader code\n   */\n\n\n  ClearCoatBlock.GetCode = function (state, ccBlock, reflectionBlock, worldPosVarName, generateTBNSpace, vTBNAvailable, worldNormalVarName) {\n    var code = \"\";\n    var intensity = (ccBlock === null || ccBlock === void 0 ? void 0 : ccBlock.intensity.isConnected) ? ccBlock.intensity.associatedVariableName : \"1.\";\n    var roughness = (ccBlock === null || ccBlock === void 0 ? void 0 : ccBlock.roughness.isConnected) ? ccBlock.roughness.associatedVariableName : \"0.\";\n    var normalMapColor = (ccBlock === null || ccBlock === void 0 ? void 0 : ccBlock.normalMapColor.isConnected) ? ccBlock.normalMapColor.associatedVariableName : \"vec3(0.)\";\n    var uv = (ccBlock === null || ccBlock === void 0 ? void 0 : ccBlock.uv.isConnected) ? ccBlock.uv.associatedVariableName : \"vec2(0.)\";\n    var tintColor = (ccBlock === null || ccBlock === void 0 ? void 0 : ccBlock.tintColor.isConnected) ? ccBlock.tintColor.associatedVariableName : \"vec3(1.)\";\n    var tintThickness = (ccBlock === null || ccBlock === void 0 ? void 0 : ccBlock.tintThickness.isConnected) ? ccBlock.tintThickness.associatedVariableName : \"1.\";\n    var tintAtDistance = (ccBlock === null || ccBlock === void 0 ? void 0 : ccBlock.tintAtDistance.isConnected) ? ccBlock.tintAtDistance.associatedVariableName : \"1.\";\n    var tintTexture = \"vec4(0.)\";\n\n    if (ccBlock) {\n      state._emitUniformFromString(\"vClearCoatRefractionParams\", \"vec4\");\n\n      state._emitUniformFromString(\"vClearCoatTangentSpaceParams\", \"vec2\");\n\n      var normalShading = ccBlock.worldNormal;\n      code += \"vec3 vGeometricNormaClearCoatW = \".concat(normalShading.isConnected ? \"normalize(\" + normalShading.associatedVariableName + \".xyz)\" : \"geometricNormalW\", \";\\r\\n\");\n    } else {\n      code += \"vec3 vGeometricNormaClearCoatW = geometricNormalW;\\r\\n\";\n    }\n\n    if (generateTBNSpace && ccBlock) {\n      code += ccBlock._generateTBNSpace(state, worldPosVarName, worldNormalVarName);\n      vTBNAvailable = ccBlock.worldTangent.isConnected;\n    }\n\n    code += \"clearcoatOutParams clearcoatOut;\\n\\n        #ifdef CLEARCOAT\\n            vec2 vClearCoatParams = vec2(\".concat(intensity, \", \").concat(roughness, \");\\n            vec4 vClearCoatTintParams = vec4(\").concat(tintColor, \", \").concat(tintThickness, \");\\n\\n            clearcoatBlock(\\n                \").concat(worldPosVarName, \".xyz,\\n                vGeometricNormaClearCoatW,\\n                viewDirectionW,\\n                vClearCoatParams,\\n                specularEnvironmentR0,\\n            #ifdef CLEARCOAT_TEXTURE\\n                vec2(0.),\\n            #endif\\n            #ifdef CLEARCOAT_TINT\\n                vClearCoatTintParams,\\n                \").concat(tintAtDistance, \",\\n                vClearCoatRefractionParams,\\n                #ifdef CLEARCOAT_TINT_TEXTURE\\n                    \").concat(tintTexture, \",\\n                #endif\\n            #endif\\n            #ifdef CLEARCOAT_BUMP\\n                vec2(0., 1.),\\n                vec4(\").concat(normalMapColor, \", 0.),\\n                \").concat(uv, \",\\n                #if defined(\").concat(vTBNAvailable ? \"TANGENT\" : \"IGNORE\", \") && defined(NORMAL)\\n                    vTBN,\\n                #else\\n                    vClearCoatTangentSpaceParams,\\n                #endif\\n                #ifdef OBJECTSPACE_NORMALMAP\\n                    normalMatrix,\\n                #endif\\n            #endif\\n            #if defined(FORCENORMALFORWARD) && defined(NORMAL)\\n                faceNormal,\\n            #endif\\n            #ifdef REFLECTION\\n                \").concat(reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._vReflectionMicrosurfaceInfosName, \",\\n                \").concat(reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._vReflectionInfosName, \",\\n                \").concat(reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock.reflectionColor, \",\\n                vLightingIntensity,\\n                #ifdef \").concat(reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName, \"\\n                    \").concat(reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName, \",\\n                #else\\n                    \").concat(reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._2DSamplerName, \",\\n                #endif\\n                #ifndef LODBASEDMICROSFURACE\\n                    #ifdef \").concat(reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName, \"\\n                        \").concat(reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName, \",\\n                        \").concat(reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName, \",\\n                    #else\\n                        \").concat(reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._2DSamplerName, \",\\n                        \").concat(reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._2DSamplerName, \",\\n                    #endif\\n                #endif\\n            #endif\\n            #if defined(ENVIRONMENTBRDF) && !defined(\").concat(reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName, \")\\n                #ifdef RADIANCEOCCLUSION\\n                    ambientMonochrome,\\n                #endif\\n            #endif\\n            #if defined(CLEARCOAT_BUMP) || defined(TWOSIDEDLIGHTING)\\n                (gl_FrontFacing ? 1. : -1.),\\n            #endif\\n                clearcoatOut\\n            );\\n        #else\\n            clearcoatOut.specularEnvironmentR0 = specularEnvironmentR0;\\n        #endif\\r\\n\");\n    return code;\n  };\n\n  ClearCoatBlock.prototype._buildBlock = function (state) {\n    this._scene = state.sharedData.scene;\n\n    if (state.target === NodeMaterialBlockTargets.Fragment) {\n      state.sharedData.bindableBlocks.push(this);\n      state.sharedData.blocksWithDefines.push(this);\n    }\n\n    return this;\n  };\n\n  ClearCoatBlock.prototype._dumpPropertiesCode = function () {\n    var codeString = _super.prototype._dumpPropertiesCode.call(this);\n\n    codeString += \"\".concat(this._codeVariableName, \".remapF0OnInterfaceChange = \").concat(this.remapF0OnInterfaceChange, \";\\r\\n\");\n    return codeString;\n  };\n\n  ClearCoatBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    serializationObject.remapF0OnInterfaceChange = this.remapF0OnInterfaceChange;\n    return serializationObject;\n  };\n\n  ClearCoatBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    var _a;\n\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    this.remapF0OnInterfaceChange = (_a = serializationObject.remapF0OnInterfaceChange) !== null && _a !== void 0 ? _a : true;\n  };\n\n  __decorate([editableInPropertyPage(\"Remap F0 on interface change\", PropertyTypeForEdition.Boolean, \"ADVANCED\")], ClearCoatBlock.prototype, \"remapF0OnInterfaceChange\", void 0);\n\n  return ClearCoatBlock;\n}(NodeMaterialBlock);\n\nexport { ClearCoatBlock };\nRegisterClass(\"BABYLON.ClearCoatBlock\", ClearCoatBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialConnectionPointDirection","NodeMaterialBlockTargets","RegisterClass","InputBlock","NodeMaterialConnectionPointCustomObject","PBRClearCoatConfiguration","editableInPropertyPage","PropertyTypeForEdition","__extends","name","_super","Fragment","_this","_isUnique","registerInput","Float","Color3","Vector2","Vector4","worldNormal","acceptedConnectionPointTypes","push","Vector3","registerOutput","Object","Output","ClearCoatBlock","state","_excludeVariableName","_inputs","_outputs","intensity","isConnected","intensityInput","value","output","connectTo","mesh","nodeMaterial","defines","prepareDefines","call","setValue","tintColor","tintThickness","tintAtDistance","normalMapColor","indexOfRefraction","connectInputBlock","_DefaultIndexOfRefraction","remapF0OnInterfaceChange","effect","bind","_a","_b","a","b","f0","Math","pow","eta","setFloat4","mainPBRBlock","clearcoat","hasEndpoints","endpoints","ownerBlock","perturbedNormalBlock","perturbedNormal","connectedPoint","_scene","_mirroredCameraPosition","setFloat2","invertX","invertY","worldPositionVarName","worldNormalVarName","code","comments","worldTangent","_emitExtension","tangentReplaceString","search","replace","associatedVariableName","_emitFunctionFromInclude","replaceStrings","ccBlock","reflectionBlock","worldPosVarName","generateTBNSpace","vTBNAvailable","roughness","uv","tintTexture","_emitUniformFromString","normalShading","_generateTBNSpace","concat","_vReflectionMicrosurfaceInfosName","_vReflectionInfosName","reflectionColor","_define3DName","_cubeSamplerName","_2DSamplerName","_defineSkyboxName","sharedData","scene","target","bindableBlocks","blocksWithDefines","codeString","_dumpPropertiesCode","_codeVariableName","serializationObject","serialize","rootUrl","_deserialize","__decorate","Boolean"],"sourceRoot":"","sources":["../../../../../../../../lts/core/generated/Materials/Node/Blocks/PBR/clearCoatBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { InputBlock } from \"../Input/inputBlock\";\r\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\r\nimport type { NodeMaterial, NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\nimport type { ReflectionBlock } from \"./reflectionBlock\";\r\nimport type { Scene } from \"../../../../scene\";\r\nimport type { Nullable } from \"../../../../types\";\r\nimport type { Mesh } from \"../../../../Meshes/mesh\";\r\nimport type { Effect } from \"../../../effect\";\r\nimport type { PBRMetallicRoughnessBlock } from \"./pbrMetallicRoughnessBlock\";\r\nimport type { PerturbNormalBlock } from \"../Fragment/perturbNormalBlock\";\r\nimport { PBRClearCoatConfiguration } from \"../../../PBR/pbrClearCoatConfiguration\";\r\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator\";\r\n\r\n/**\r\n * Block used to implement the clear coat module of the PBR material\r\n */\r\nexport class ClearCoatBlock extends NodeMaterialBlock {\r\n    private _scene: Scene;\r\n\r\n    /**\r\n     * Create a new ClearCoatBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this._isUnique = true;\r\n\r\n        this.registerInput(\"intensity\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"roughness\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"indexOfRefraction\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"normalMapColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"uv\", NodeMaterialBlockConnectionPointTypes.Vector2, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"tintColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"tintAtDistance\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"tintThickness\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"worldTangent\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\r\n        this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\r\n        this.worldNormal.acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector3);\r\n\r\n        this.registerOutput(\r\n            \"clearcoat\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"clearcoat\", this, NodeMaterialConnectionPointDirection.Output, ClearCoatBlock, \"ClearCoatBlock\")\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Defines if the F0 value should be remapped to account for the interface change in the material.\r\n     */\r\n    @editableInPropertyPage(\"Remap F0 on interface change\", PropertyTypeForEdition.Boolean, \"ADVANCED\")\r\n    public remapF0OnInterfaceChange: boolean = true;\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"clearcoatOut\");\r\n        state._excludeVariableName(\"vClearCoatParams\");\r\n        state._excludeVariableName(\"vClearCoatTintParams\");\r\n        state._excludeVariableName(\"vClearCoatRefractionParams\");\r\n        state._excludeVariableName(\"vClearCoatTangentSpaceParams\");\r\n        state._excludeVariableName(\"vGeometricNormaClearCoatW\");\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ClearCoatBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the intensity input component\r\n     */\r\n    public get intensity(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the roughness input component\r\n     */\r\n    public get roughness(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the ior input component\r\n     */\r\n    public get indexOfRefraction(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the bump texture input component\r\n     */\r\n    public get normalMapColor(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the uv input component\r\n     */\r\n    public get uv(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the tint color input component\r\n     */\r\n    public get tintColor(): NodeMaterialConnectionPoint {\r\n        return this._inputs[5];\r\n    }\r\n\r\n    /**\r\n     * Gets the tint \"at distance\" input component\r\n     */\r\n    public get tintAtDistance(): NodeMaterialConnectionPoint {\r\n        return this._inputs[6];\r\n    }\r\n\r\n    /**\r\n     * Gets the tint thickness input component\r\n     */\r\n    public get tintThickness(): NodeMaterialConnectionPoint {\r\n        return this._inputs[7];\r\n    }\r\n\r\n    /**\r\n     * Gets the world tangent input component\r\n     */\r\n    public get worldTangent(): NodeMaterialConnectionPoint {\r\n        return this._inputs[8];\r\n    }\r\n\r\n    /**\r\n     * Gets the world normal input component\r\n     */\r\n    public get worldNormal(): NodeMaterialConnectionPoint {\r\n        return this._inputs[9];\r\n    }\r\n\r\n    /**\r\n     * Gets the clear coat object output component\r\n     */\r\n    public get clearcoat(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public autoConfigure() {\r\n        if (!this.intensity.isConnected) {\r\n            const intensityInput = new InputBlock(\"ClearCoat intensity\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\r\n            intensityInput.value = 1;\r\n            intensityInput.output.connectTo(this.intensity);\r\n        }\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        super.prepareDefines(mesh, nodeMaterial, defines);\r\n\r\n        defines.setValue(\"CLEARCOAT\", true);\r\n        defines.setValue(\"CLEARCOAT_TEXTURE\", false, true);\r\n        defines.setValue(\"CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE\", true, true);\r\n        defines.setValue(\"CLEARCOAT_TINT\", this.tintColor.isConnected || this.tintThickness.isConnected || this.tintAtDistance.isConnected, true);\r\n        defines.setValue(\"CLEARCOAT_BUMP\", this.normalMapColor.isConnected, true);\r\n        defines.setValue(\r\n            \"CLEARCOAT_DEFAULTIOR\",\r\n            this.indexOfRefraction.isConnected ? this.indexOfRefraction.connectInputBlock!.value === PBRClearCoatConfiguration._DefaultIndexOfRefraction : true,\r\n            true\r\n        );\r\n        defines.setValue(\"CLEARCOAT_REMAP_F0\", this.remapF0OnInterfaceChange, true);\r\n    }\r\n\r\n    public bind(effect: Effect, nodeMaterial: NodeMaterial, mesh?: Mesh) {\r\n        super.bind(effect, nodeMaterial, mesh);\r\n\r\n        // Clear Coat Refraction params\r\n        const indexOfRefraction = this.indexOfRefraction.connectInputBlock?.value ?? PBRClearCoatConfiguration._DefaultIndexOfRefraction;\r\n\r\n        const a = 1 - indexOfRefraction;\r\n        const b = 1 + indexOfRefraction;\r\n        const f0 = Math.pow(-a / b, 2); // Schlicks approx: (ior1 - ior2) / (ior1 + ior2) where ior2 for air is close to vacuum = 1.\r\n        const eta = 1 / indexOfRefraction;\r\n\r\n        effect.setFloat4(\"vClearCoatRefractionParams\", f0, eta, a, b);\r\n\r\n        // Clear Coat tangent space params\r\n        const mainPBRBlock = this.clearcoat.hasEndpoints ? (this.clearcoat.endpoints[0].ownerBlock as PBRMetallicRoughnessBlock) : null;\r\n        const perturbedNormalBlock = mainPBRBlock?.perturbedNormal.isConnected ? (mainPBRBlock.perturbedNormal.connectedPoint!.ownerBlock as PerturbNormalBlock) : null;\r\n\r\n        if (this._scene._mirroredCameraPosition) {\r\n            effect.setFloat2(\"vClearCoatTangentSpaceParams\", perturbedNormalBlock?.invertX ? 1.0 : -1.0, perturbedNormalBlock?.invertY ? 1.0 : -1.0);\r\n        } else {\r\n            effect.setFloat2(\"vClearCoatTangentSpaceParams\", perturbedNormalBlock?.invertX ? -1.0 : 1.0, perturbedNormalBlock?.invertY ? -1.0 : 1.0);\r\n        }\r\n    }\r\n\r\n    private _generateTBNSpace(state: NodeMaterialBuildState, worldPositionVarName: string, worldNormalVarName: string) {\r\n        let code = \"\";\r\n\r\n        const comments = `//${this.name}`;\r\n        const worldTangent = this.worldTangent;\r\n\r\n        state._emitExtension(\"derivatives\", \"#extension GL_OES_standard_derivatives : enable\");\r\n\r\n        const tangentReplaceString = { search: /defined\\(TANGENT\\)/g, replace: worldTangent.isConnected ? \"defined(TANGENT)\" : \"defined(IGNORE)\" };\r\n\r\n        if (worldTangent.isConnected) {\r\n            code += `vec3 tbnNormal = normalize(${worldNormalVarName}.xyz);\\r\\n`;\r\n            code += `vec3 tbnTangent = normalize(${worldTangent.associatedVariableName}.xyz);\\r\\n`;\r\n            code += `vec3 tbnBitangent = cross(tbnNormal, tbnTangent);\\r\\n`;\r\n            code += `mat3 vTBN = mat3(tbnTangent, tbnBitangent, tbnNormal);\\r\\n`;\r\n        }\r\n\r\n        state._emitFunctionFromInclude(\"bumpFragmentMainFunctions\", comments, {\r\n            replaceStrings: [tangentReplaceString],\r\n        });\r\n\r\n        return code;\r\n    }\r\n\r\n    /**\r\n     * Gets the main code of the block (fragment side)\r\n     * @param state current state of the node material building\r\n     * @param ccBlock instance of a ClearCoatBlock or null if the code must be generated without an active clear coat module\r\n     * @param reflectionBlock instance of a ReflectionBlock null if the code must be generated without an active reflection module\r\n     * @param worldPosVarName name of the variable holding the world position\r\n     * @param generateTBNSpace if true, the code needed to create the TBN coordinate space is generated\r\n     * @param vTBNAvailable indicate that the vTBN variable is already existing because it has already been generated by another block (PerturbNormal or Anisotropy)\r\n     * @param worldNormalVarName name of the variable holding the world normal\r\n     * @returns the shader code\r\n     */\r\n    public static GetCode(\r\n        state: NodeMaterialBuildState,\r\n        ccBlock: Nullable<ClearCoatBlock>,\r\n        reflectionBlock: Nullable<ReflectionBlock>,\r\n        worldPosVarName: string,\r\n        generateTBNSpace: boolean,\r\n        vTBNAvailable: boolean,\r\n        worldNormalVarName: string\r\n    ): string {\r\n        let code = \"\";\r\n\r\n        const intensity = ccBlock?.intensity.isConnected ? ccBlock.intensity.associatedVariableName : \"1.\";\r\n        const roughness = ccBlock?.roughness.isConnected ? ccBlock.roughness.associatedVariableName : \"0.\";\r\n        const normalMapColor = ccBlock?.normalMapColor.isConnected ? ccBlock.normalMapColor.associatedVariableName : \"vec3(0.)\";\r\n        const uv = ccBlock?.uv.isConnected ? ccBlock.uv.associatedVariableName : \"vec2(0.)\";\r\n\r\n        const tintColor = ccBlock?.tintColor.isConnected ? ccBlock.tintColor.associatedVariableName : \"vec3(1.)\";\r\n        const tintThickness = ccBlock?.tintThickness.isConnected ? ccBlock.tintThickness.associatedVariableName : \"1.\";\r\n        const tintAtDistance = ccBlock?.tintAtDistance.isConnected ? ccBlock.tintAtDistance.associatedVariableName : \"1.\";\r\n        const tintTexture = \"vec4(0.)\";\r\n\r\n        if (ccBlock) {\r\n            state._emitUniformFromString(\"vClearCoatRefractionParams\", \"vec4\");\r\n            state._emitUniformFromString(\"vClearCoatTangentSpaceParams\", \"vec2\");\r\n\r\n            const normalShading = ccBlock.worldNormal;\r\n            code += `vec3 vGeometricNormaClearCoatW = ${normalShading.isConnected ? \"normalize(\" + normalShading.associatedVariableName + \".xyz)\" : \"geometricNormalW\"};\\r\\n`;\r\n        } else {\r\n            code += `vec3 vGeometricNormaClearCoatW = geometricNormalW;\\r\\n`;\r\n        }\r\n\r\n        if (generateTBNSpace && ccBlock) {\r\n            code += ccBlock._generateTBNSpace(state, worldPosVarName, worldNormalVarName);\r\n            vTBNAvailable = ccBlock.worldTangent.isConnected;\r\n        }\r\n\r\n        code += `clearcoatOutParams clearcoatOut;\r\n\r\n        #ifdef CLEARCOAT\r\n            vec2 vClearCoatParams = vec2(${intensity}, ${roughness});\r\n            vec4 vClearCoatTintParams = vec4(${tintColor}, ${tintThickness});\r\n\r\n            clearcoatBlock(\r\n                ${worldPosVarName}.xyz,\r\n                vGeometricNormaClearCoatW,\r\n                viewDirectionW,\r\n                vClearCoatParams,\r\n                specularEnvironmentR0,\r\n            #ifdef CLEARCOAT_TEXTURE\r\n                vec2(0.),\r\n            #endif\r\n            #ifdef CLEARCOAT_TINT\r\n                vClearCoatTintParams,\r\n                ${tintAtDistance},\r\n                vClearCoatRefractionParams,\r\n                #ifdef CLEARCOAT_TINT_TEXTURE\r\n                    ${tintTexture},\r\n                #endif\r\n            #endif\r\n            #ifdef CLEARCOAT_BUMP\r\n                vec2(0., 1.),\r\n                vec4(${normalMapColor}, 0.),\r\n                ${uv},\r\n                #if defined(${vTBNAvailable ? \"TANGENT\" : \"IGNORE\"}) && defined(NORMAL)\r\n                    vTBN,\r\n                #else\r\n                    vClearCoatTangentSpaceParams,\r\n                #endif\r\n                #ifdef OBJECTSPACE_NORMALMAP\r\n                    normalMatrix,\r\n                #endif\r\n            #endif\r\n            #if defined(FORCENORMALFORWARD) && defined(NORMAL)\r\n                faceNormal,\r\n            #endif\r\n            #ifdef REFLECTION\r\n                ${reflectionBlock?._vReflectionMicrosurfaceInfosName},\r\n                ${reflectionBlock?._vReflectionInfosName},\r\n                ${reflectionBlock?.reflectionColor},\r\n                vLightingIntensity,\r\n                #ifdef ${reflectionBlock?._define3DName}\r\n                    ${reflectionBlock?._cubeSamplerName},\r\n                #else\r\n                    ${reflectionBlock?._2DSamplerName},\r\n                #endif\r\n                #ifndef LODBASEDMICROSFURACE\r\n                    #ifdef ${reflectionBlock?._define3DName}\r\n                        ${reflectionBlock?._cubeSamplerName},\r\n                        ${reflectionBlock?._cubeSamplerName},\r\n                    #else\r\n                        ${reflectionBlock?._2DSamplerName},\r\n                        ${reflectionBlock?._2DSamplerName},\r\n                    #endif\r\n                #endif\r\n            #endif\r\n            #if defined(ENVIRONMENTBRDF) && !defined(${reflectionBlock?._defineSkyboxName})\r\n                #ifdef RADIANCEOCCLUSION\r\n                    ambientMonochrome,\r\n                #endif\r\n            #endif\r\n            #if defined(CLEARCOAT_BUMP) || defined(TWOSIDEDLIGHTING)\r\n                (gl_FrontFacing ? 1. : -1.),\r\n            #endif\r\n                clearcoatOut\r\n            );\r\n        #else\r\n            clearcoatOut.specularEnvironmentR0 = specularEnvironmentR0;\r\n        #endif\\r\\n`;\r\n\r\n        return code;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        this._scene = state.sharedData.scene;\r\n\r\n        if (state.target === NodeMaterialBlockTargets.Fragment) {\r\n            state.sharedData.bindableBlocks.push(this);\r\n            state.sharedData.blocksWithDefines.push(this);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        let codeString = super._dumpPropertiesCode();\r\n\r\n        codeString += `${this._codeVariableName}.remapF0OnInterfaceChange = ${this.remapF0OnInterfaceChange};\\r\\n`;\r\n\r\n        return codeString;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.remapF0OnInterfaceChange = this.remapF0OnInterfaceChange;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.remapF0OnInterfaceChange = serializationObject.remapF0OnInterfaceChange ?? true;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ClearCoatBlock\", ClearCoatBlock);\r\n"]},"metadata":{},"sourceType":"module"}