{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport { __extends } from \"tslib\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Color4 } from \"../Maths/math.color.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { ThinSprite } from \"./thinSprite.js\";\n/**\n * Class used to represent a sprite\n * @see https://doc.babylonjs.com/babylon101/sprites\n */\n\nvar Sprite =\n/** @class */\nfunction (_super) {\n  __extends(Sprite, _super);\n  /**\n   * Creates a new Sprite\n   * @param name defines the name\n   * @param manager defines the manager\n   */\n\n\n  function Sprite(\n  /** defines the name */\n  name, manager) {\n    var _this = _super.call(this) || this;\n\n    _this.name = name;\n    /** Gets the list of attached animations */\n\n    _this.animations = new Array();\n    /** Gets or sets a boolean indicating if the sprite can be picked */\n\n    _this.isPickable = false;\n    /** Gets or sets a boolean indicating that sprite texture alpha will be used for precise picking (false by default) */\n\n    _this.useAlphaForPicking = false;\n    /**\n     * An event triggered when the control has been disposed\n     */\n\n    _this.onDisposeObservable = new Observable();\n    _this._onAnimationEnd = null;\n\n    _this._endAnimation = function () {\n      if (_this._onAnimationEnd) {\n        _this._onAnimationEnd();\n      }\n\n      if (_this.disposeWhenFinishedAnimating) {\n        _this.dispose();\n      }\n    };\n\n    _this.color = new Color4(1.0, 1.0, 1.0, 1.0);\n    _this.position = Vector3.Zero();\n    _this._manager = manager;\n\n    _this._manager.sprites.push(_this);\n\n    _this.uniqueId = _this._manager.scene.getUniqueId();\n    return _this;\n  }\n\n  Object.defineProperty(Sprite.prototype, \"size\", {\n    /**\n     * Gets or sets the sprite size\n     */\n    get: function get() {\n      return this.width;\n    },\n    set: function set(value) {\n      this.width = value;\n      this.height = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"manager\", {\n    /**\n     * Gets the manager of this sprite\n     */\n    get: function get() {\n      return this._manager;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Returns the string \"Sprite\"\n   * @returns \"Sprite\"\n   */\n\n  Sprite.prototype.getClassName = function () {\n    return \"Sprite\";\n  };\n\n  Object.defineProperty(Sprite.prototype, \"fromIndex\", {\n    /** Gets or sets the initial key for the animation (setting it will restart the animation)  */\n    get: function get() {\n      return this._fromIndex;\n    },\n    set: function set(value) {\n      this.playAnimation(value, this._toIndex, this._loopAnimation, this._delay, this._onAnimationEnd);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"toIndex\", {\n    /** Gets or sets the end key for the animation (setting it will restart the animation)  */\n    get: function get() {\n      return this._toIndex;\n    },\n    set: function set(value) {\n      this.playAnimation(this._fromIndex, value, this._loopAnimation, this._delay, this._onAnimationEnd);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"loopAnimation\", {\n    /** Gets or sets a boolean indicating if the animation is looping (setting it will restart the animation)  */\n    get: function get() {\n      return this._loopAnimation;\n    },\n    set: function set(value) {\n      this.playAnimation(this._fromIndex, this._toIndex, value, this._delay, this._onAnimationEnd);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"delay\", {\n    /** Gets or sets the delay between cell changes (setting it will restart the animation)  */\n    get: function get() {\n      return Math.max(this._delay, 1);\n    },\n    set: function set(value) {\n      this.playAnimation(this._fromIndex, this._toIndex, this._loopAnimation, value, this._onAnimationEnd);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Starts an animation\n   * @param from defines the initial key\n   * @param to defines the end key\n   * @param loop defines if the animation must loop\n   * @param delay defines the start delay (in ms)\n   * @param onAnimationEnd defines a callback to call when animation ends\n   */\n\n  Sprite.prototype.playAnimation = function (from, to, loop, delay, onAnimationEnd) {\n    if (onAnimationEnd === void 0) {\n      onAnimationEnd = null;\n    }\n\n    this._onAnimationEnd = onAnimationEnd;\n\n    _super.prototype.playAnimation.call(this, from, to, loop, delay, this._endAnimation);\n  };\n  /** Release associated resources */\n\n\n  Sprite.prototype.dispose = function () {\n    for (var i = 0; i < this._manager.sprites.length; i++) {\n      if (this._manager.sprites[i] == this) {\n        this._manager.sprites.splice(i, 1);\n      }\n    } // Callback\n\n\n    this.onDisposeObservable.notifyObservers(this);\n    this.onDisposeObservable.clear();\n  };\n  /**\n   * Serializes the sprite to a JSON object\n   * @returns the JSON object\n   */\n\n\n  Sprite.prototype.serialize = function () {\n    var serializationObject = {};\n    serializationObject.name = this.name;\n    serializationObject.position = this.position.asArray();\n    serializationObject.color = this.color.asArray();\n    serializationObject.width = this.width;\n    serializationObject.height = this.height;\n    serializationObject.angle = this.angle;\n    serializationObject.cellIndex = this.cellIndex;\n    serializationObject.cellRef = this.cellRef;\n    serializationObject.invertU = this.invertU;\n    serializationObject.invertV = this.invertV;\n    serializationObject.disposeWhenFinishedAnimating = this.disposeWhenFinishedAnimating;\n    serializationObject.isPickable = this.isPickable;\n    serializationObject.isVisible = this.isVisible;\n    serializationObject.useAlphaForPicking = this.useAlphaForPicking;\n    serializationObject.animationStarted = this.animationStarted;\n    serializationObject.fromIndex = this.fromIndex;\n    serializationObject.toIndex = this.toIndex;\n    serializationObject.loopAnimation = this.loopAnimation;\n    serializationObject.delay = this.delay;\n    return serializationObject;\n  };\n  /**\n   * Parses a JSON object to create a new sprite\n   * @param parsedSprite The JSON object to parse\n   * @param manager defines the hosting manager\n   * @returns the new sprite\n   */\n\n\n  Sprite.Parse = function (parsedSprite, manager) {\n    var sprite = new Sprite(parsedSprite.name, manager);\n    sprite.position = Vector3.FromArray(parsedSprite.position);\n    sprite.color = Color4.FromArray(parsedSprite.color);\n    sprite.width = parsedSprite.width;\n    sprite.height = parsedSprite.height;\n    sprite.angle = parsedSprite.angle;\n    sprite.cellIndex = parsedSprite.cellIndex;\n    sprite.cellRef = parsedSprite.cellRef;\n    sprite.invertU = parsedSprite.invertU;\n    sprite.invertV = parsedSprite.invertV;\n    sprite.disposeWhenFinishedAnimating = parsedSprite.disposeWhenFinishedAnimating;\n    sprite.isPickable = parsedSprite.isPickable;\n    sprite.isVisible = parsedSprite.isVisible;\n    sprite.useAlphaForPicking = parsedSprite.useAlphaForPicking;\n    sprite.fromIndex = parsedSprite.fromIndex;\n    sprite.toIndex = parsedSprite.toIndex;\n    sprite.loopAnimation = parsedSprite.loopAnimation;\n    sprite.delay = parsedSprite.delay;\n\n    if (parsedSprite.animationStarted) {\n      sprite.playAnimation(sprite.fromIndex, sprite.toIndex, sprite.loopAnimation, sprite.delay);\n    }\n\n    return sprite;\n  };\n\n  return Sprite;\n}(ThinSprite);\n\nexport { Sprite };","map":{"version":3,"mappings":"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","names":["Vector3","Color4","Observable","ThinSprite","__extends","name","manager","_super","_this","Array","_onAnimationEnd","disposeWhenFinishedAnimating","dispose","color","position","Zero","_manager","sprites","push","uniqueId","scene","getUniqueId","Object","Sprite","width","value","height","_fromIndex","playAnimation","_toIndex","_loopAnimation","_delay","Math","max","from","to","loop","delay","onAnimationEnd","call","_endAnimation","i","length","splice","onDisposeObservable","notifyObservers","clear","serializationObject","asArray","angle","cellIndex","cellRef","invertU","invertV","isPickable","isVisible","useAlphaForPicking","animationStarted","fromIndex","toIndex","loopAnimation","parsedSprite","sprite","FromArray"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Sprites/sprite.ts"],"sourcesContent":["import { Vector3 } from \"../Maths/math.vector\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { ActionManager } from \"../Actions/actionManager\";\r\nimport type { ISpriteManager, SpriteManager } from \"./spriteManager\";\r\nimport { Color4 } from \"../Maths/math.color\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport type { IAnimatable } from \"../Animations/animatable.interface\";\r\nimport { ThinSprite } from \"./thinSprite\";\r\n\r\ndeclare type Animation = import(\"../Animations/animation\").Animation;\r\n\r\n/**\r\n * Class used to represent a sprite\r\n * @see https://doc.babylonjs.com/babylon101/sprites\r\n */\r\nexport class Sprite extends ThinSprite implements IAnimatable {\r\n    /** Gets or sets the current world position */\r\n    public position: Vector3;\r\n    /** Gets or sets the main color */\r\n    public color: Color4;\r\n    /** Gets or sets a boolean indicating that this sprite should be disposed after animation ends */\r\n    public disposeWhenFinishedAnimating: boolean;\r\n    /** Gets the list of attached animations */\r\n    public animations: Nullable<Array<Animation>> = new Array<Animation>();\r\n    /** Gets or sets a boolean indicating if the sprite can be picked */\r\n    public isPickable = false;\r\n    /** Gets or sets a boolean indicating that sprite texture alpha will be used for precise picking (false by default) */\r\n    public useAlphaForPicking = false;\r\n\r\n    /**\r\n     * Gets or sets the associated action manager\r\n     */\r\n    public actionManager: Nullable<ActionManager>;\r\n\r\n    /**\r\n     * An event triggered when the control has been disposed\r\n     */\r\n    public onDisposeObservable = new Observable<Sprite>();\r\n\r\n    private _manager: ISpriteManager;\r\n    private _onAnimationEnd: Nullable<() => void> = null;\r\n\r\n    /**\r\n     * Gets or sets the sprite size\r\n     */\r\n    public get size(): number {\r\n        return this.width;\r\n    }\r\n\r\n    public set size(value: number) {\r\n        this.width = value;\r\n        this.height = value;\r\n    }\r\n\r\n    /**\r\n     * Gets or sets the unique id of the sprite\r\n     */\r\n    public uniqueId: number;\r\n\r\n    /**\r\n     * Gets the manager of this sprite\r\n     */\r\n    public get manager() {\r\n        return this._manager;\r\n    }\r\n\r\n    /**\r\n     * Creates a new Sprite\r\n     * @param name defines the name\r\n     * @param manager defines the manager\r\n     */\r\n    constructor(\r\n        /** defines the name */\r\n        public name: string,\r\n        manager: ISpriteManager\r\n    ) {\r\n        super();\r\n        this.color = new Color4(1.0, 1.0, 1.0, 1.0);\r\n        this.position = Vector3.Zero();\r\n\r\n        this._manager = manager;\r\n        this._manager.sprites.push(this);\r\n        this.uniqueId = this._manager.scene.getUniqueId();\r\n    }\r\n\r\n    /**\r\n     * Returns the string \"Sprite\"\r\n     * @returns \"Sprite\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"Sprite\";\r\n    }\r\n\r\n    /** Gets or sets the initial key for the animation (setting it will restart the animation)  */\r\n    public get fromIndex() {\r\n        return this._fromIndex;\r\n    }\r\n    public set fromIndex(value: number) {\r\n        this.playAnimation(value, this._toIndex, this._loopAnimation, this._delay, this._onAnimationEnd);\r\n    }\r\n\r\n    /** Gets or sets the end key for the animation (setting it will restart the animation)  */\r\n    public get toIndex() {\r\n        return this._toIndex;\r\n    }\r\n    public set toIndex(value: number) {\r\n        this.playAnimation(this._fromIndex, value, this._loopAnimation, this._delay, this._onAnimationEnd);\r\n    }\r\n\r\n    /** Gets or sets a boolean indicating if the animation is looping (setting it will restart the animation)  */\r\n    public get loopAnimation() {\r\n        return this._loopAnimation;\r\n    }\r\n    public set loopAnimation(value: boolean) {\r\n        this.playAnimation(this._fromIndex, this._toIndex, value, this._delay, this._onAnimationEnd);\r\n    }\r\n\r\n    /** Gets or sets the delay between cell changes (setting it will restart the animation)  */\r\n    public get delay() {\r\n        return Math.max(this._delay, 1);\r\n    }\r\n    public set delay(value: number) {\r\n        this.playAnimation(this._fromIndex, this._toIndex, this._loopAnimation, value, this._onAnimationEnd);\r\n    }\r\n\r\n    /**\r\n     * Starts an animation\r\n     * @param from defines the initial key\r\n     * @param to defines the end key\r\n     * @param loop defines if the animation must loop\r\n     * @param delay defines the start delay (in ms)\r\n     * @param onAnimationEnd defines a callback to call when animation ends\r\n     */\r\n    public playAnimation(from: number, to: number, loop: boolean, delay: number, onAnimationEnd: Nullable<() => void> = null): void {\r\n        this._onAnimationEnd = onAnimationEnd;\r\n\r\n        super.playAnimation(from, to, loop, delay, this._endAnimation);\r\n    }\r\n\r\n    private _endAnimation = () => {\r\n        if (this._onAnimationEnd) {\r\n            this._onAnimationEnd();\r\n        }\r\n        if (this.disposeWhenFinishedAnimating) {\r\n            this.dispose();\r\n        }\r\n    };\r\n\r\n    /** Release associated resources */\r\n    public dispose(): void {\r\n        for (let i = 0; i < this._manager.sprites.length; i++) {\r\n            if (this._manager.sprites[i] == this) {\r\n                this._manager.sprites.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        // Callback\r\n        this.onDisposeObservable.notifyObservers(this);\r\n        this.onDisposeObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * Serializes the sprite to a JSON object\r\n     * @returns the JSON object\r\n     */\r\n    public serialize(): any {\r\n        const serializationObject: any = {};\r\n\r\n        serializationObject.name = this.name;\r\n        serializationObject.position = this.position.asArray();\r\n        serializationObject.color = this.color.asArray();\r\n        serializationObject.width = this.width;\r\n        serializationObject.height = this.height;\r\n        serializationObject.angle = this.angle;\r\n        serializationObject.cellIndex = this.cellIndex;\r\n        serializationObject.cellRef = this.cellRef;\r\n        serializationObject.invertU = this.invertU;\r\n        serializationObject.invertV = this.invertV;\r\n        serializationObject.disposeWhenFinishedAnimating = this.disposeWhenFinishedAnimating;\r\n        serializationObject.isPickable = this.isPickable;\r\n        serializationObject.isVisible = this.isVisible;\r\n        serializationObject.useAlphaForPicking = this.useAlphaForPicking;\r\n\r\n        serializationObject.animationStarted = this.animationStarted;\r\n        serializationObject.fromIndex = this.fromIndex;\r\n        serializationObject.toIndex = this.toIndex;\r\n        serializationObject.loopAnimation = this.loopAnimation;\r\n        serializationObject.delay = this.delay;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    /**\r\n     * Parses a JSON object to create a new sprite\r\n     * @param parsedSprite The JSON object to parse\r\n     * @param manager defines the hosting manager\r\n     * @returns the new sprite\r\n     */\r\n    public static Parse(parsedSprite: any, manager: SpriteManager): Sprite {\r\n        const sprite = new Sprite(parsedSprite.name, manager);\r\n\r\n        sprite.position = Vector3.FromArray(parsedSprite.position);\r\n        sprite.color = Color4.FromArray(parsedSprite.color);\r\n        sprite.width = parsedSprite.width;\r\n        sprite.height = parsedSprite.height;\r\n        sprite.angle = parsedSprite.angle;\r\n        sprite.cellIndex = parsedSprite.cellIndex;\r\n        sprite.cellRef = parsedSprite.cellRef;\r\n        sprite.invertU = parsedSprite.invertU;\r\n        sprite.invertV = parsedSprite.invertV;\r\n        sprite.disposeWhenFinishedAnimating = parsedSprite.disposeWhenFinishedAnimating;\r\n        sprite.isPickable = parsedSprite.isPickable;\r\n        sprite.isVisible = parsedSprite.isVisible;\r\n        sprite.useAlphaForPicking = parsedSprite.useAlphaForPicking;\r\n\r\n        sprite.fromIndex = parsedSprite.fromIndex;\r\n        sprite.toIndex = parsedSprite.toIndex;\r\n        sprite.loopAnimation = parsedSprite.loopAnimation;\r\n        sprite.delay = parsedSprite.delay;\r\n\r\n        if (parsedSprite.animationStarted) {\r\n            sprite.playAnimation(sprite.fromIndex, sprite.toIndex, sprite.loopAnimation, sprite.delay);\r\n        }\r\n\r\n        return sprite;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}