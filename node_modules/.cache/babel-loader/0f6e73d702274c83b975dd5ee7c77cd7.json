{"ast":null,"code":"import \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport { HDRTools } from \"../../../Misc/HighDynamicRange/hdr.js\";\nimport { Engine } from \"../../../Engines/engine.js\";\nimport { EndsWith } from \"../../../Misc/stringTools.js\";\n/**\n * Implementation of the HDR Texture Loader.\n * @hidden\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\n\nvar _HDRTextureLoader =\n/** @class */\nfunction () {\n  function _HDRTextureLoader() {\n    /**\n     * Defines whether the loader supports cascade loading the different faces.\n     */\n    this.supportCascades = false;\n  }\n  /**\n   * This returns if the loader support the current file information.\n   * @param extension defines the file extension of the file being loaded\n   * @returns true if the loader can load the specified file\n   */\n\n\n  _HDRTextureLoader.prototype.canLoad = function (extension) {\n    return EndsWith(extension, \".hdr\");\n  };\n  /**\n   * Uploads the cube texture data to the WebGL texture. It has already been bound.\n   */\n\n\n  _HDRTextureLoader.prototype.loadCubeData = function () {\n    throw \".env not supported in Cube.\";\n  };\n  /**\n   * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\n   * @param data contains the texture data\n   * @param texture defines the BabylonJS internal texture\n   * @param callback defines the method to call once ready to upload\n   */\n\n\n  _HDRTextureLoader.prototype.loadData = function (data, texture, callback) {\n    var uint8array = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n    var hdrInfo = HDRTools.RGBE_ReadHeader(uint8array);\n    var pixelsDataRGB32 = HDRTools.RGBE_ReadPixels(uint8array, hdrInfo);\n    var pixels = hdrInfo.width * hdrInfo.height;\n    var pixelsDataRGBA32 = new Float32Array(pixels * 4);\n\n    for (var i = 0; i < pixels; i += 1) {\n      pixelsDataRGBA32[i * 4] = pixelsDataRGB32[i * 3];\n      pixelsDataRGBA32[i * 4 + 1] = pixelsDataRGB32[i * 3 + 1];\n      pixelsDataRGBA32[i * 4 + 2] = pixelsDataRGB32[i * 3 + 2];\n      pixelsDataRGBA32[i * 4 + 3] = 1;\n    }\n\n    callback(hdrInfo.width, hdrInfo.height, texture.generateMipMaps, false, function () {\n      var engine = texture.getEngine();\n      texture.type = 1;\n      texture.format = 5;\n      texture._gammaSpace = false;\n\n      engine._uploadDataToTextureDirectly(texture, pixelsDataRGBA32);\n    });\n  };\n\n  return _HDRTextureLoader;\n}();\n\nexport { _HDRTextureLoader }; // Register the loader.\n\nEngine._TextureLoaders.push(new _HDRTextureLoader());","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,uCAAzB;AACA,SAASC,MAAT,QAAuB,4BAAvB;AAGA,SAASC,QAAT,QAAyB,8BAAzB;AAGA;;;;AAIA;;AACA;AAAA;AAAA;AAAA;AACI;;;AAGgB,2BAAkB,KAAlB;AAkDnB;AAhDG;;;;;;;AAKOC,wCAAP,UAAeC,SAAf,EAAgC;AAC5B,WAAOF,QAAQ,CAACE,SAAD,EAAY,MAAZ,CAAf;AACH,GAFM;AAIP;;;;;AAGOD,6CAAP;AACI,UAAM,6BAAN;AACH,GAFM;AAIP;;;;;;;;AAMOA,yCAAP,UACIE,IADJ,EAEIC,OAFJ,EAGIC,QAHJ,EAGmH;AAE/G,QAAMC,UAAU,GAAG,IAAIC,UAAJ,CAAeJ,IAAI,CAACK,MAApB,EAA4BL,IAAI,CAACM,UAAjC,EAA6CN,IAAI,CAACO,UAAlD,CAAnB;AACA,QAAMC,OAAO,GAAGb,QAAQ,CAACc,eAAT,CAAyBN,UAAzB,CAAhB;AACA,QAAMO,eAAe,GAAGf,QAAQ,CAACgB,eAAT,CAAyBR,UAAzB,EAAqCK,OAArC,CAAxB;AAEA,QAAMI,MAAM,GAAGJ,OAAO,CAACK,KAAR,GAAgBL,OAAO,CAACM,MAAvC;AACA,QAAMC,gBAAgB,GAAG,IAAIC,YAAJ,CAAiBJ,MAAM,GAAG,CAA1B,CAAzB;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAApB,EAA4BK,CAAC,IAAI,CAAjC,EAAoC;AAChCF,sBAAgB,CAACE,CAAC,GAAG,CAAL,CAAhB,GAA0BP,eAAe,CAACO,CAAC,GAAG,CAAL,CAAzC;AACAF,sBAAgB,CAACE,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAhB,GAA8BP,eAAe,CAACO,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAA7C;AACAF,sBAAgB,CAACE,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAhB,GAA8BP,eAAe,CAACO,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAA7C;AACAF,sBAAgB,CAACE,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAhB,GAA8B,CAA9B;AACH;;AAEDf,YAAQ,CAACM,OAAO,CAACK,KAAT,EAAgBL,OAAO,CAACM,MAAxB,EAAgCb,OAAO,CAACiB,eAAxC,EAAyD,KAAzD,EAAgE;AACpE,UAAMC,MAAM,GAAGlB,OAAO,CAACmB,SAAR,EAAf;AACAnB,aAAO,CAACoB,IAAR,GAAe,CAAf;AACApB,aAAO,CAACqB,MAAR,GAAiB,CAAjB;AACArB,aAAO,CAACsB,WAAR,GAAsB,KAAtB;;AACAJ,YAAM,CAACK,4BAAP,CAAoCvB,OAApC,EAA6Cc,gBAA7C;AACH,KANO,CAAR;AAOH,GAzBM;;AA0BX;AAAC,CAtDD;;8BAwDA;;AACAnB,MAAM,CAAC6B,eAAP,CAAuBC,IAAvB,CAA4B,IAAI5B,iBAAJ,EAA5B","names":["HDRTools","Engine","EndsWith","_HDRTextureLoader","extension","data","texture","callback","uint8array","Uint8Array","buffer","byteOffset","byteLength","hdrInfo","RGBE_ReadHeader","pixelsDataRGB32","RGBE_ReadPixels","pixels","width","height","pixelsDataRGBA32","Float32Array","i","generateMipMaps","engine","getEngine","type","format","_gammaSpace","_uploadDataToTextureDirectly","_TextureLoaders","push"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Textures/Loaders/hdrTextureLoader.ts"],"sourcesContent":["import { HDRTools } from \"../../../Misc/HighDynamicRange/hdr\";\r\nimport { Engine } from \"../../../Engines/engine\";\r\nimport type { InternalTexture } from \"../../../Materials/Textures/internalTexture\";\r\nimport type { IInternalTextureLoader } from \"../../../Materials/Textures/internalTextureLoader\";\r\nimport { EndsWith } from \"../../../Misc/stringTools\";\r\nimport { Constants } from \"../../../Engines/constants\";\r\n\r\n/**\r\n * Implementation of the HDR Texture Loader.\r\n * @hidden\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport class _HDRTextureLoader implements IInternalTextureLoader {\r\n    /**\r\n     * Defines whether the loader supports cascade loading the different faces.\r\n     */\r\n    public readonly supportCascades = false;\r\n\r\n    /**\r\n     * This returns if the loader support the current file information.\r\n     * @param extension defines the file extension of the file being loaded\r\n     * @returns true if the loader can load the specified file\r\n     */\r\n    public canLoad(extension: string): boolean {\r\n        return EndsWith(extension, \".hdr\");\r\n    }\r\n\r\n    /**\r\n     * Uploads the cube texture data to the WebGL texture. It has already been bound.\r\n     */\r\n    public loadCubeData(): void {\r\n        throw \".env not supported in Cube.\";\r\n    }\r\n\r\n    /**\r\n     * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\r\n     * @param data contains the texture data\r\n     * @param texture defines the BabylonJS internal texture\r\n     * @param callback defines the method to call once ready to upload\r\n     */\r\n    public loadData(\r\n        data: ArrayBufferView,\r\n        texture: InternalTexture,\r\n        callback: (width: number, height: number, loadMipmap: boolean, isCompressed: boolean, done: () => void) => void\r\n    ): void {\r\n        const uint8array = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\r\n        const hdrInfo = HDRTools.RGBE_ReadHeader(uint8array);\r\n        const pixelsDataRGB32 = HDRTools.RGBE_ReadPixels(uint8array, hdrInfo);\r\n\r\n        const pixels = hdrInfo.width * hdrInfo.height;\r\n        const pixelsDataRGBA32 = new Float32Array(pixels * 4);\r\n        for (let i = 0; i < pixels; i += 1) {\r\n            pixelsDataRGBA32[i * 4] = pixelsDataRGB32[i * 3];\r\n            pixelsDataRGBA32[i * 4 + 1] = pixelsDataRGB32[i * 3 + 1];\r\n            pixelsDataRGBA32[i * 4 + 2] = pixelsDataRGB32[i * 3 + 2];\r\n            pixelsDataRGBA32[i * 4 + 3] = 1;\r\n        }\r\n\r\n        callback(hdrInfo.width, hdrInfo.height, texture.generateMipMaps, false, () => {\r\n            const engine = texture.getEngine();\r\n            texture.type = Constants.TEXTURETYPE_FLOAT;\r\n            texture.format = Constants.TEXTUREFORMAT_RGBA;\r\n            texture._gammaSpace = false;\r\n            engine._uploadDataToTextureDirectly(texture, pixelsDataRGBA32);\r\n        });\r\n    }\r\n}\r\n\r\n// Register the loader.\r\nEngine._TextureLoaders.push(new _HDRTextureLoader());\r\n"]},"metadata":{},"sourceType":"module"}