{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject.js\";\nimport { RefractionBlock } from \"./refractionBlock.js\";\n/**\n * Block used to implement the sub surface module of the PBR material\n */\n\nvar SubSurfaceBlock =\n/** @class */\nfunction (_super) {\n  __extends(SubSurfaceBlock, _super);\n  /**\n   * Create a new SubSurfaceBlock\n   * @param name defines the block name\n   */\n\n\n  function SubSurfaceBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;\n\n    _this._isUnique = true;\n\n    _this.registerInput(\"thickness\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"tintColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"translucencyIntensity\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"translucencyDiffusionDist\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"refraction\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"refraction\", _this, NodeMaterialConnectionPointDirection.Input, RefractionBlock, \"RefractionBlock\"));\n\n    _this.registerOutput(\"subsurface\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"subsurface\", _this, NodeMaterialConnectionPointDirection.Output, SubSurfaceBlock, \"SubSurfaceBlock\"));\n\n    return _this;\n  }\n  /**\n   * Initialize the block and prepare the context for build\n   * @param state defines the state that will be used for the build\n   */\n\n\n  SubSurfaceBlock.prototype.initialize = function (state) {\n    state._excludeVariableName(\"subSurfaceOut\");\n\n    state._excludeVariableName(\"vThicknessParam\");\n\n    state._excludeVariableName(\"vTintColor\");\n\n    state._excludeVariableName(\"vSubSurfaceIntensity\");\n  };\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  SubSurfaceBlock.prototype.getClassName = function () {\n    return \"SubSurfaceBlock\";\n  };\n\n  Object.defineProperty(SubSurfaceBlock.prototype, \"thickness\", {\n    /**\n     * Gets the thickness component\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SubSurfaceBlock.prototype, \"tintColor\", {\n    /**\n     * Gets the tint color input component\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SubSurfaceBlock.prototype, \"translucencyIntensity\", {\n    /**\n     * Gets the translucency intensity input component\n     */\n    get: function get() {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SubSurfaceBlock.prototype, \"translucencyDiffusionDist\", {\n    /**\n     * Gets the translucency diffusion distance input component\n     */\n    get: function get() {\n      return this._inputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SubSurfaceBlock.prototype, \"refraction\", {\n    /**\n     * Gets the refraction object parameters\n     */\n    get: function get() {\n      return this._inputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SubSurfaceBlock.prototype, \"subsurface\", {\n    /**\n     * Gets the sub surface object output component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  SubSurfaceBlock.prototype.autoConfigure = function () {\n    if (!this.thickness.isConnected) {\n      var thicknessInput = new InputBlock(\"SubSurface thickness\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\n      thicknessInput.value = 0;\n      thicknessInput.output.connectTo(this.thickness);\n    }\n  };\n\n  SubSurfaceBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    _super.prototype.prepareDefines.call(this, mesh, nodeMaterial, defines);\n\n    var translucencyEnabled = this.translucencyDiffusionDist.isConnected || this.translucencyIntensity.isConnected;\n    defines.setValue(\"SUBSURFACE\", translucencyEnabled || this.refraction.isConnected, true);\n    defines.setValue(\"SS_TRANSLUCENCY\", translucencyEnabled, true);\n    defines.setValue(\"SS_THICKNESSANDMASK_TEXTURE\", false, true);\n    defines.setValue(\"SS_REFRACTIONINTENSITY_TEXTURE\", false, true);\n    defines.setValue(\"SS_TRANSLUCENCYINTENSITY_TEXTURE\", false, true);\n    defines.setValue(\"SS_MASK_FROM_THICKNESS_TEXTURE\", false, true);\n    defines.setValue(\"SS_USE_GLTF_TEXTURES\", false, true);\n  };\n  /**\n   * Gets the main code of the block (fragment side)\n   * @param state current state of the node material building\n   * @param ssBlock instance of a SubSurfaceBlock or null if the code must be generated without an active sub surface module\n   * @param reflectionBlock instance of a ReflectionBlock null if the code must be generated without an active reflection module\n   * @param worldPosVarName name of the variable holding the world position\n   * @returns the shader code\n   */\n\n\n  SubSurfaceBlock.GetCode = function (state, ssBlock, reflectionBlock, worldPosVarName) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;\n\n    var code = \"\";\n    var thickness = (ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.thickness.isConnected) ? ssBlock.thickness.associatedVariableName : \"0.\";\n    var tintColor = (ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.tintColor.isConnected) ? ssBlock.tintColor.associatedVariableName : \"vec3(1.)\";\n    var translucencyIntensity = (ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.translucencyIntensity.isConnected) ? ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.translucencyIntensity.associatedVariableName : \"1.\";\n    var translucencyDiffusionDistance = (ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.translucencyDiffusionDist.isConnected) ? ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.translucencyDiffusionDist.associatedVariableName : \"vec3(1.)\";\n    var refractionBlock = (ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.refraction.isConnected) ? (_a = ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.refraction.connectedPoint) === null || _a === void 0 ? void 0 : _a.ownerBlock : null;\n    var refractionTintAtDistance = (refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock.tintAtDistance.isConnected) ? refractionBlock.tintAtDistance.associatedVariableName : \"1.\";\n    var refractionIntensity = (refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock.intensity.isConnected) ? refractionBlock.intensity.associatedVariableName : \"1.\";\n    var refractionView = (refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock.view.isConnected) ? refractionBlock.view.associatedVariableName : \"\";\n    code += (_b = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock.getCode(state)) !== null && _b !== void 0 ? _b : \"\";\n    code += \"subSurfaceOutParams subSurfaceOut;\\n\\n        #ifdef SUBSURFACE\\n            vec2 vThicknessParam = vec2(0., \".concat(thickness, \");\\n            vec4 vTintColor = vec4(\").concat(tintColor, \", \").concat(refractionTintAtDistance, \");\\n            vec3 vSubSurfaceIntensity = vec3(\").concat(refractionIntensity, \", \").concat(translucencyIntensity, \", 0.);\\n\\n            subSurfaceBlock(\\n                vSubSurfaceIntensity,\\n                vThicknessParam,\\n                vTintColor,\\n                normalW,\\n                specularEnvironmentReflectance,\\n            #ifdef SS_THICKNESSANDMASK_TEXTURE\\n                vec4(0.),\\n            #endif\\n            #ifdef REFLECTION\\n                #ifdef SS_TRANSLUCENCY\\n                    \").concat(reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._reflectionMatrixName, \",\\n                    #ifdef USESPHERICALFROMREFLECTIONMAP\\n                        #if !defined(NORMAL) || !defined(USESPHERICALINVERTEX)\\n                            reflectionOut.irradianceVector,\\n                        #endif\\n                        #if defined(REALTIME_FILTERING)\\n                            \").concat(reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName, \",\\n                            \").concat(reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._vReflectionFilteringInfoName, \",\\n                        #endif\\n                        #endif\\n                    #ifdef USEIRRADIANCEMAP\\n                        irradianceSampler,\\n                    #endif\\n                #endif\\n            #endif\\n            #if defined(SS_REFRACTION) || defined(SS_TRANSLUCENCY)\\n                surfaceAlbedo,\\n            #endif\\n            #ifdef SS_REFRACTION\\n                \").concat(worldPosVarName, \".xyz,\\n                viewDirectionW,\\n                \").concat(refractionView, \",\\n                \").concat((_c = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._vRefractionInfosName) !== null && _c !== void 0 ? _c : \"\", \",\\n                \").concat((_d = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._refractionMatrixName) !== null && _d !== void 0 ? _d : \"\", \",\\n                \").concat((_e = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._vRefractionMicrosurfaceInfosName) !== null && _e !== void 0 ? _e : \"\", \",\\n                vLightingIntensity,\\n                #ifdef SS_LINKREFRACTIONTOTRANSPARENCY\\n                    alpha,\\n                #endif\\n                #ifdef \").concat((_f = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._defineLODRefractionAlpha) !== null && _f !== void 0 ? _f : \"IGNORE\", \"\\n                    NdotVUnclamped,\\n                #endif\\n                #ifdef \").concat((_g = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._defineLinearSpecularRefraction) !== null && _g !== void 0 ? _g : \"IGNORE\", \"\\n                    roughness,\\n                #endif\\n                alphaG,\\n                #ifdef \").concat((_h = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._define3DName) !== null && _h !== void 0 ? _h : \"IGNORE\", \"\\n                    \").concat((_j = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._cubeSamplerName) !== null && _j !== void 0 ? _j : \"\", \",\\n                #else\\n                    \").concat((_k = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._2DSamplerName) !== null && _k !== void 0 ? _k : \"\", \",\\n                #endif\\n                #ifndef LODBASEDMICROSFURACE\\n                    #ifdef \").concat((_l = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._define3DName) !== null && _l !== void 0 ? _l : \"IGNORE\", \"\\n                        \").concat((_m = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._cubeSamplerName) !== null && _m !== void 0 ? _m : \"\", \",\\n                        \").concat((_o = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._cubeSamplerName) !== null && _o !== void 0 ? _o : \"\", \",\\n                    #else\\n                        \").concat((_p = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._2DSamplerName) !== null && _p !== void 0 ? _p : \"\", \",\\n                        \").concat((_q = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._2DSamplerName) !== null && _q !== void 0 ? _q : \"\", \",\\n                    #endif\\n                #endif\\n                #ifdef ANISOTROPIC\\n                    anisotropicOut,\\n                #endif\\n                #ifdef REALTIME_FILTERING\\n                    \").concat((_r = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._vRefractionFilteringInfoName) !== null && _r !== void 0 ? _r : \"\", \",\\n                #endif\\n                #ifdef SS_USE_LOCAL_REFRACTIONMAP_CUBIC\\n                    vRefractionPosition,\\n                    vRefractionSize,\\n                #endif\\n            #endif\\n            #ifdef SS_TRANSLUCENCY\\n                \").concat(translucencyDiffusionDistance, \",\\n            #endif\\n                subSurfaceOut\\n            );\\n\\n            #ifdef SS_REFRACTION\\n                surfaceAlbedo = subSurfaceOut.surfaceAlbedo;\\n                #ifdef SS_LINKREFRACTIONTOTRANSPARENCY\\n                    alpha = subSurfaceOut.alpha;\\n                #endif\\n            #endif\\n        #else\\n            subSurfaceOut.specularEnvironmentReflectance = specularEnvironmentReflectance;\\n        #endif\\r\\n\");\n    return code;\n  };\n\n  SubSurfaceBlock.prototype._buildBlock = function (state) {\n    if (state.target === NodeMaterialBlockTargets.Fragment) {\n      state.sharedData.blocksWithDefines.push(this);\n    }\n\n    return this;\n  };\n\n  return SubSurfaceBlock;\n}(NodeMaterialBlock);\n\nexport { SubSurfaceBlock };\nRegisterClass(\"BABYLON.SubSurfaceBlock\", SubSurfaceBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialConnectionPointDirection","NodeMaterialBlockTargets","RegisterClass","InputBlock","NodeMaterialConnectionPointCustomObject","RefractionBlock","__extends","name","_super","Fragment","_this","_isUnique","registerInput","Float","Color3","Object","Input","registerOutput","Output","SubSurfaceBlock","state","_excludeVariableName","_inputs","_outputs","thickness","isConnected","thicknessInput","value","output","connectTo","mesh","nodeMaterial","defines","prepareDefines","call","translucencyEnabled","translucencyDiffusionDist","translucencyIntensity","setValue","refraction","ssBlock","reflectionBlock","worldPosVarName","code","associatedVariableName","tintColor","translucencyDiffusionDistance","refractionBlock","connectedPoint","_a","ownerBlock","refractionTintAtDistance","tintAtDistance","refractionIntensity","intensity","refractionView","view","getCode","_b","concat","_reflectionMatrixName","_cubeSamplerName","_vReflectionFilteringInfoName","_vRefractionInfosName","_c","_refractionMatrixName","_d","_vRefractionMicrosurfaceInfosName","_e","_defineLODRefractionAlpha","_f","_defineLinearSpecularRefraction","_g","_define3DName","_h","_j","_2DSamplerName","_k","_l","_m","_o","_p","_q","_vRefractionFilteringInfoName","_r","target","sharedData","blocksWithDefines","push"],"sourceRoot":"","sources":["../../../../../../../../lts/core/generated/Materials/Node/Blocks/PBR/subSurfaceBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialConnectionPointDirection } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { InputBlock } from \"../Input/inputBlock\";\r\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\r\nimport type { NodeMaterial, NodeMaterialDefines } from \"../../nodeMaterial\";\r\nimport type { AbstractMesh } from \"../../../../Meshes/abstractMesh\";\r\nimport type { ReflectionBlock } from \"./reflectionBlock\";\r\nimport type { Nullable } from \"../../../../types\";\r\nimport { RefractionBlock } from \"./refractionBlock\";\r\n\r\n/**\r\n * Block used to implement the sub surface module of the PBR material\r\n */\r\nexport class SubSurfaceBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Create a new SubSurfaceBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this._isUnique = true;\r\n\r\n        this.registerInput(\"thickness\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"tintColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"translucencyIntensity\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"translucencyDiffusionDist\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\r\n            \"refraction\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            true,\r\n            NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"refraction\", this, NodeMaterialConnectionPointDirection.Input, RefractionBlock, \"RefractionBlock\")\r\n        );\r\n\r\n        this.registerOutput(\r\n            \"subsurface\",\r\n            NodeMaterialBlockConnectionPointTypes.Object,\r\n            NodeMaterialBlockTargets.Fragment,\r\n            new NodeMaterialConnectionPointCustomObject(\"subsurface\", this, NodeMaterialConnectionPointDirection.Output, SubSurfaceBlock, \"SubSurfaceBlock\")\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Initialize the block and prepare the context for build\r\n     * @param state defines the state that will be used for the build\r\n     */\r\n    public initialize(state: NodeMaterialBuildState) {\r\n        state._excludeVariableName(\"subSurfaceOut\");\r\n        state._excludeVariableName(\"vThicknessParam\");\r\n        state._excludeVariableName(\"vTintColor\");\r\n        state._excludeVariableName(\"vSubSurfaceIntensity\");\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"SubSurfaceBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the thickness component\r\n     */\r\n    public get thickness(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the tint color input component\r\n     */\r\n    public get tintColor(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the translucency intensity input component\r\n     */\r\n    public get translucencyIntensity(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the translucency diffusion distance input component\r\n     */\r\n    public get translucencyDiffusionDist(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the refraction object parameters\r\n     */\r\n    public get refraction(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the sub surface object output component\r\n     */\r\n    public get subsurface(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    public autoConfigure() {\r\n        if (!this.thickness.isConnected) {\r\n            const thicknessInput = new InputBlock(\"SubSurface thickness\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\r\n            thicknessInput.value = 0;\r\n            thicknessInput.output.connectTo(this.thickness);\r\n        }\r\n    }\r\n\r\n    public prepareDefines(mesh: AbstractMesh, nodeMaterial: NodeMaterial, defines: NodeMaterialDefines) {\r\n        super.prepareDefines(mesh, nodeMaterial, defines);\r\n\r\n        const translucencyEnabled = this.translucencyDiffusionDist.isConnected || this.translucencyIntensity.isConnected;\r\n\r\n        defines.setValue(\"SUBSURFACE\", translucencyEnabled || this.refraction.isConnected, true);\r\n        defines.setValue(\"SS_TRANSLUCENCY\", translucencyEnabled, true);\r\n        defines.setValue(\"SS_THICKNESSANDMASK_TEXTURE\", false, true);\r\n        defines.setValue(\"SS_REFRACTIONINTENSITY_TEXTURE\", false, true);\r\n        defines.setValue(\"SS_TRANSLUCENCYINTENSITY_TEXTURE\", false, true);\r\n        defines.setValue(\"SS_MASK_FROM_THICKNESS_TEXTURE\", false, true);\r\n        defines.setValue(\"SS_USE_GLTF_TEXTURES\", false, true);\r\n    }\r\n\r\n    /**\r\n     * Gets the main code of the block (fragment side)\r\n     * @param state current state of the node material building\r\n     * @param ssBlock instance of a SubSurfaceBlock or null if the code must be generated without an active sub surface module\r\n     * @param reflectionBlock instance of a ReflectionBlock null if the code must be generated without an active reflection module\r\n     * @param worldPosVarName name of the variable holding the world position\r\n     * @returns the shader code\r\n     */\r\n    public static GetCode(state: NodeMaterialBuildState, ssBlock: Nullable<SubSurfaceBlock>, reflectionBlock: Nullable<ReflectionBlock>, worldPosVarName: string): string {\r\n        let code = \"\";\r\n\r\n        const thickness = ssBlock?.thickness.isConnected ? ssBlock.thickness.associatedVariableName : \"0.\";\r\n        const tintColor = ssBlock?.tintColor.isConnected ? ssBlock.tintColor.associatedVariableName : \"vec3(1.)\";\r\n        const translucencyIntensity = ssBlock?.translucencyIntensity.isConnected ? ssBlock?.translucencyIntensity.associatedVariableName : \"1.\";\r\n        const translucencyDiffusionDistance = ssBlock?.translucencyDiffusionDist.isConnected ? ssBlock?.translucencyDiffusionDist.associatedVariableName : \"vec3(1.)\";\r\n\r\n        const refractionBlock: Nullable<RefractionBlock> = (ssBlock?.refraction.isConnected ? ssBlock?.refraction.connectedPoint?.ownerBlock : null) as Nullable<RefractionBlock>;\r\n\r\n        const refractionTintAtDistance = refractionBlock?.tintAtDistance.isConnected ? refractionBlock.tintAtDistance.associatedVariableName : \"1.\";\r\n        const refractionIntensity = refractionBlock?.intensity.isConnected ? refractionBlock.intensity.associatedVariableName : \"1.\";\r\n        const refractionView = refractionBlock?.view.isConnected ? refractionBlock.view.associatedVariableName : \"\";\r\n\r\n        code += refractionBlock?.getCode(state) ?? \"\";\r\n\r\n        code += `subSurfaceOutParams subSurfaceOut;\r\n\r\n        #ifdef SUBSURFACE\r\n            vec2 vThicknessParam = vec2(0., ${thickness});\r\n            vec4 vTintColor = vec4(${tintColor}, ${refractionTintAtDistance});\r\n            vec3 vSubSurfaceIntensity = vec3(${refractionIntensity}, ${translucencyIntensity}, 0.);\r\n\r\n            subSurfaceBlock(\r\n                vSubSurfaceIntensity,\r\n                vThicknessParam,\r\n                vTintColor,\r\n                normalW,\r\n                specularEnvironmentReflectance,\r\n            #ifdef SS_THICKNESSANDMASK_TEXTURE\r\n                vec4(0.),\r\n            #endif\r\n            #ifdef REFLECTION\r\n                #ifdef SS_TRANSLUCENCY\r\n                    ${reflectionBlock?._reflectionMatrixName},\r\n                    #ifdef USESPHERICALFROMREFLECTIONMAP\r\n                        #if !defined(NORMAL) || !defined(USESPHERICALINVERTEX)\r\n                            reflectionOut.irradianceVector,\r\n                        #endif\r\n                        #if defined(REALTIME_FILTERING)\r\n                            ${reflectionBlock?._cubeSamplerName},\r\n                            ${reflectionBlock?._vReflectionFilteringInfoName},\r\n                        #endif\r\n                        #endif\r\n                    #ifdef USEIRRADIANCEMAP\r\n                        irradianceSampler,\r\n                    #endif\r\n                #endif\r\n            #endif\r\n            #if defined(SS_REFRACTION) || defined(SS_TRANSLUCENCY)\r\n                surfaceAlbedo,\r\n            #endif\r\n            #ifdef SS_REFRACTION\r\n                ${worldPosVarName}.xyz,\r\n                viewDirectionW,\r\n                ${refractionView},\r\n                ${refractionBlock?._vRefractionInfosName ?? \"\"},\r\n                ${refractionBlock?._refractionMatrixName ?? \"\"},\r\n                ${refractionBlock?._vRefractionMicrosurfaceInfosName ?? \"\"},\r\n                vLightingIntensity,\r\n                #ifdef SS_LINKREFRACTIONTOTRANSPARENCY\r\n                    alpha,\r\n                #endif\r\n                #ifdef ${refractionBlock?._defineLODRefractionAlpha ?? \"IGNORE\"}\r\n                    NdotVUnclamped,\r\n                #endif\r\n                #ifdef ${refractionBlock?._defineLinearSpecularRefraction ?? \"IGNORE\"}\r\n                    roughness,\r\n                #endif\r\n                alphaG,\r\n                #ifdef ${refractionBlock?._define3DName ?? \"IGNORE\"}\r\n                    ${refractionBlock?._cubeSamplerName ?? \"\"},\r\n                #else\r\n                    ${refractionBlock?._2DSamplerName ?? \"\"},\r\n                #endif\r\n                #ifndef LODBASEDMICROSFURACE\r\n                    #ifdef ${refractionBlock?._define3DName ?? \"IGNORE\"}\r\n                        ${refractionBlock?._cubeSamplerName ?? \"\"},\r\n                        ${refractionBlock?._cubeSamplerName ?? \"\"},\r\n                    #else\r\n                        ${refractionBlock?._2DSamplerName ?? \"\"},\r\n                        ${refractionBlock?._2DSamplerName ?? \"\"},\r\n                    #endif\r\n                #endif\r\n                #ifdef ANISOTROPIC\r\n                    anisotropicOut,\r\n                #endif\r\n                #ifdef REALTIME_FILTERING\r\n                    ${refractionBlock?._vRefractionFilteringInfoName ?? \"\"},\r\n                #endif\r\n                #ifdef SS_USE_LOCAL_REFRACTIONMAP_CUBIC\r\n                    vRefractionPosition,\r\n                    vRefractionSize,\r\n                #endif\r\n            #endif\r\n            #ifdef SS_TRANSLUCENCY\r\n                ${translucencyDiffusionDistance},\r\n            #endif\r\n                subSurfaceOut\r\n            );\r\n\r\n            #ifdef SS_REFRACTION\r\n                surfaceAlbedo = subSurfaceOut.surfaceAlbedo;\r\n                #ifdef SS_LINKREFRACTIONTOTRANSPARENCY\r\n                    alpha = subSurfaceOut.alpha;\r\n                #endif\r\n            #endif\r\n        #else\r\n            subSurfaceOut.specularEnvironmentReflectance = specularEnvironmentReflectance;\r\n        #endif\\r\\n`;\r\n\r\n        return code;\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        if (state.target === NodeMaterialBlockTargets.Fragment) {\r\n            state.sharedData.blocksWithDefines.push(this);\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.SubSurfaceBlock\", SubSurfaceBlock);\r\n"]},"metadata":{},"sourceType":"module"}