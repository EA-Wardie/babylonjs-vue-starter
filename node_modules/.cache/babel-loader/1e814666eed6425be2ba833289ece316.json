{"ast":null,"code":"import \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.typed-array.int8-array.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport \"core-js/modules/es.typed-array.int16-array.js\";\nimport \"core-js/modules/es.typed-array.uint16-array.js\";\nimport \"core-js/modules/es.typed-array.int32-array.js\";\nimport \"core-js/modules/es.typed-array.uint32-array.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array-buffer.constructor.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.data-view.js\";\nimport { DataBuffer } from \"./dataBuffer.js\";\nimport { SliceTools } from \"../Misc/sliceTools.js\";\n/**\n * Class used to store data that will be store in GPU memory\n */\n\nvar Buffer =\n/** @class */\nfunction () {\n  /**\n   * Constructor\n   * @param engine the engine\n   * @param data the data to use for this buffer\n   * @param updatable whether the data is updatable\n   * @param stride the stride (optional)\n   * @param postponeInternalCreation whether to postpone creating the internal WebGL buffer (optional)\n   * @param instanced whether the buffer is instanced (optional)\n   * @param useBytes set to true if the stride in in bytes (optional)\n   * @param divisor sets an optional divisor for instances (1 by default)\n   */\n  function Buffer(engine, data, updatable, stride, postponeInternalCreation, instanced, useBytes, divisor) {\n    if (stride === void 0) {\n      stride = 0;\n    }\n\n    if (postponeInternalCreation === void 0) {\n      postponeInternalCreation = false;\n    }\n\n    if (instanced === void 0) {\n      instanced = false;\n    }\n\n    if (useBytes === void 0) {\n      useBytes = false;\n    }\n\n    this._isAlreadyOwned = false;\n\n    if (engine.getScene) {\n      // old versions of VertexBuffer accepted 'mesh' instead of 'engine'\n      this._engine = engine.getScene().getEngine();\n    } else {\n      this._engine = engine;\n    }\n\n    this._updatable = updatable;\n    this._instanced = instanced;\n    this._divisor = divisor || 1;\n\n    if (data instanceof DataBuffer) {\n      this._data = null;\n      this._buffer = data;\n    } else {\n      this._data = data;\n      this._buffer = null;\n    }\n\n    this.byteStride = useBytes ? stride : stride * Float32Array.BYTES_PER_ELEMENT;\n\n    if (!postponeInternalCreation) {\n      // by default\n      this.create();\n    }\n  }\n  /**\n   * Create a new VertexBuffer based on the current buffer\n   * @param kind defines the vertex buffer kind (position, normal, etc.)\n   * @param offset defines offset in the buffer (0 by default)\n   * @param size defines the size in floats of attributes (position is 3 for instance)\n   * @param stride defines the stride size in floats in the buffer (the offset to apply to reach next value when data is interleaved)\n   * @param instanced defines if the vertex buffer contains indexed data\n   * @param useBytes defines if the offset and stride are in bytes     *\n   * @param divisor sets an optional divisor for instances (1 by default)\n   * @returns the new vertex buffer\n   */\n\n\n  Buffer.prototype.createVertexBuffer = function (kind, offset, size, stride, instanced, useBytes, divisor) {\n    if (useBytes === void 0) {\n      useBytes = false;\n    }\n\n    var byteOffset = useBytes ? offset : offset * Float32Array.BYTES_PER_ELEMENT;\n    var byteStride = stride ? useBytes ? stride : stride * Float32Array.BYTES_PER_ELEMENT : this.byteStride; // a lot of these parameters are ignored as they are overridden by the buffer\n\n    return new VertexBuffer(this._engine, this, kind, this._updatable, true, byteStride, instanced === undefined ? this._instanced : instanced, byteOffset, size, undefined, undefined, true, this._divisor || divisor);\n  }; // Properties\n\n  /**\n   * Gets a boolean indicating if the Buffer is updatable?\n   * @returns true if the buffer is updatable\n   */\n\n\n  Buffer.prototype.isUpdatable = function () {\n    return this._updatable;\n  };\n  /**\n   * Gets current buffer's data\n   * @returns a DataArray or null\n   */\n\n\n  Buffer.prototype.getData = function () {\n    return this._data;\n  };\n  /**\n   * Gets underlying native buffer\n   * @returns underlying native buffer\n   */\n\n\n  Buffer.prototype.getBuffer = function () {\n    return this._buffer;\n  };\n  /**\n   * Gets the stride in float32 units (i.e. byte stride / 4).\n   * May not be an integer if the byte stride is not divisible by 4.\n   * @returns the stride in float32 units\n   * @deprecated Please use byteStride instead.\n   */\n\n\n  Buffer.prototype.getStrideSize = function () {\n    return this.byteStride / Float32Array.BYTES_PER_ELEMENT;\n  }; // Methods\n\n  /**\n   * Store data into the buffer. Creates the buffer if not used already.\n   * If the buffer was already used, it will be updated only if it is updatable, otherwise it will do nothing.\n   * @param data defines the data to store\n   */\n\n\n  Buffer.prototype.create = function (data) {\n    if (data === void 0) {\n      data = null;\n    }\n\n    if (!data && this._buffer) {\n      return; // nothing to do\n    }\n\n    data = data || this._data;\n\n    if (!data) {\n      return;\n    }\n\n    if (!this._buffer) {\n      // create buffer\n      if (this._updatable) {\n        this._buffer = this._engine.createDynamicVertexBuffer(data);\n        this._data = data;\n      } else {\n        this._buffer = this._engine.createVertexBuffer(data);\n      }\n    } else if (this._updatable) {\n      // update buffer\n      this._engine.updateDynamicVertexBuffer(this._buffer, data);\n\n      this._data = data;\n    }\n  };\n  /** @hidden */\n\n\n  Buffer.prototype._rebuild = function () {\n    this._buffer = null;\n    this.create(this._data);\n  };\n  /**\n   * Update current buffer data\n   * @param data defines the data to store\n   */\n\n\n  Buffer.prototype.update = function (data) {\n    this.create(data);\n  };\n  /**\n   * Updates the data directly.\n   * @param data the new data\n   * @param offset the new offset\n   * @param vertexCount the vertex count (optional)\n   * @param useBytes set to true if the offset is in bytes\n   */\n\n\n  Buffer.prototype.updateDirectly = function (data, offset, vertexCount, useBytes) {\n    if (useBytes === void 0) {\n      useBytes = false;\n    }\n\n    if (!this._buffer) {\n      return;\n    }\n\n    if (this._updatable) {\n      // update buffer\n      this._engine.updateDynamicVertexBuffer(this._buffer, data, useBytes ? offset : offset * Float32Array.BYTES_PER_ELEMENT, vertexCount ? vertexCount * this.byteStride : undefined);\n\n      if (offset === 0 && vertexCount === undefined) {\n        // Keep the data if we easily can\n        this._data = data;\n      } else {\n        this._data = null;\n      }\n    }\n  };\n  /** @hidden */\n\n\n  Buffer.prototype._increaseReferences = function () {\n    if (!this._buffer) {\n      return;\n    }\n\n    if (!this._isAlreadyOwned) {\n      this._isAlreadyOwned = true;\n      return;\n    }\n\n    this._buffer.references++;\n  };\n  /**\n   * Release all resources\n   */\n\n\n  Buffer.prototype.dispose = function () {\n    if (!this._buffer) {\n      return;\n    }\n\n    if (this._engine._releaseBuffer(this._buffer)) {\n      this._buffer = null;\n      this._data = null;\n    }\n  };\n\n  return Buffer;\n}();\n\nexport { Buffer };\n/**\n * Specialized buffer used to store vertex data\n */\n\nvar VertexBuffer =\n/** @class */\nfunction () {\n  /**\n   * Constructor\n   * @param engine the engine\n   * @param data the data to use for this vertex buffer\n   * @param kind the vertex buffer kind\n   * @param updatable whether the data is updatable\n   * @param postponeInternalCreation whether to postpone creating the internal WebGL buffer (optional)\n   * @param stride the stride (optional)\n   * @param instanced whether the buffer is instanced (optional)\n   * @param offset the offset of the data (optional)\n   * @param size the number of components (optional)\n   * @param type the type of the component (optional)\n   * @param normalized whether the data contains normalized data (optional)\n   * @param useBytes set to true if stride and offset are in bytes (optional)\n   * @param divisor defines the instance divisor to use (1 by default)\n   * @param takeBufferOwnership defines if the buffer should be released when the vertex buffer is disposed\n   */\n  function VertexBuffer(engine, data, kind, updatable, postponeInternalCreation, stride, instanced, offset, size, type, normalized, useBytes, divisor, takeBufferOwnership) {\n    if (normalized === void 0) {\n      normalized = false;\n    }\n\n    if (useBytes === void 0) {\n      useBytes = false;\n    }\n\n    if (divisor === void 0) {\n      divisor = 1;\n    }\n\n    if (takeBufferOwnership === void 0) {\n      takeBufferOwnership = false;\n    }\n\n    if (data instanceof Buffer) {\n      this._buffer = data;\n      this._ownsBuffer = takeBufferOwnership;\n    } else {\n      this._buffer = new Buffer(engine, data, updatable, stride, postponeInternalCreation, instanced, useBytes);\n      this._ownsBuffer = true;\n    }\n\n    this.uniqueId = VertexBuffer._Counter++;\n    this._kind = kind;\n\n    if (type == undefined) {\n      var data_1 = this.getData();\n      this.type = VertexBuffer.FLOAT;\n\n      if (data_1 instanceof Int8Array) {\n        this.type = VertexBuffer.BYTE;\n      } else if (data_1 instanceof Uint8Array) {\n        this.type = VertexBuffer.UNSIGNED_BYTE;\n      } else if (data_1 instanceof Int16Array) {\n        this.type = VertexBuffer.SHORT;\n      } else if (data_1 instanceof Uint16Array) {\n        this.type = VertexBuffer.UNSIGNED_SHORT;\n      } else if (data_1 instanceof Int32Array) {\n        this.type = VertexBuffer.INT;\n      } else if (data_1 instanceof Uint32Array) {\n        this.type = VertexBuffer.UNSIGNED_INT;\n      }\n    } else {\n      this.type = type;\n    }\n\n    var typeByteLength = VertexBuffer.GetTypeByteLength(this.type);\n\n    if (useBytes) {\n      this._size = size || (stride ? stride / typeByteLength : VertexBuffer.DeduceStride(kind));\n      this.byteStride = stride || this._buffer.byteStride || this._size * typeByteLength;\n      this.byteOffset = offset || 0;\n    } else {\n      this._size = size || stride || VertexBuffer.DeduceStride(kind);\n      this.byteStride = stride ? stride * typeByteLength : this._buffer.byteStride || this._size * typeByteLength;\n      this.byteOffset = (offset || 0) * typeByteLength;\n    }\n\n    this.normalized = normalized;\n    this._instanced = instanced !== undefined ? instanced : false;\n    this._instanceDivisor = instanced ? divisor : 0;\n\n    this._computeHashCode();\n  }\n\n  Object.defineProperty(VertexBuffer.prototype, \"instanceDivisor\", {\n    /**\n     * Gets or sets the instance divisor when in instanced mode\n     */\n    get: function get() {\n      return this._instanceDivisor;\n    },\n    set: function set(value) {\n      this._instanceDivisor = value;\n\n      if (value == 0) {\n        this._instanced = false;\n      } else {\n        this._instanced = true;\n      }\n\n      this._computeHashCode();\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  VertexBuffer.prototype._computeHashCode = function () {\n    // note: cast to any because the property is declared readonly\n    this.hashCode = (this.type - 5120 << 0) + ((this.normalized ? 1 : 0) << 3) + (this._size << 4) + ((this._instanced ? 1 : 0) << 6) + (\n    /* keep 5 bits free */\n    this.byteStride << 12);\n  };\n  /** @hidden */\n\n\n  VertexBuffer.prototype._rebuild = function () {\n    if (!this._buffer) {\n      return;\n    }\n\n    this._buffer._rebuild();\n  };\n  /**\n   * Returns the kind of the VertexBuffer (string)\n   * @returns a string\n   */\n\n\n  VertexBuffer.prototype.getKind = function () {\n    return this._kind;\n  }; // Properties\n\n  /**\n   * Gets a boolean indicating if the VertexBuffer is updatable?\n   * @returns true if the buffer is updatable\n   */\n\n\n  VertexBuffer.prototype.isUpdatable = function () {\n    return this._buffer.isUpdatable();\n  };\n  /**\n   * Gets current buffer's data\n   * @returns a DataArray or null\n   */\n\n\n  VertexBuffer.prototype.getData = function () {\n    return this._buffer.getData();\n  };\n  /**\n   * Gets current buffer's data as a float array. Float data is constructed if the vertex buffer data cannot be returned directly.\n   * @param totalVertices number of vertices in the buffer to take into account\n   * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\n   * @returns a float array containing vertex data\n   */\n\n\n  VertexBuffer.prototype.getFloatData = function (totalVertices, forceCopy) {\n    var data = this.getData();\n\n    if (!data) {\n      return null;\n    }\n\n    var tightlyPackedByteStride = this.getSize() * VertexBuffer.GetTypeByteLength(this.type);\n    var count = totalVertices * this.getSize();\n\n    if (this.type !== VertexBuffer.FLOAT || this.byteStride !== tightlyPackedByteStride) {\n      var copy_1 = new Float32Array(count);\n      this.forEach(count, function (value, index) {\n        return copy_1[index] = value;\n      });\n      return copy_1;\n    }\n\n    if (!(data instanceof Array || data instanceof Float32Array) || this.byteOffset !== 0 || data.length !== count) {\n      if (data instanceof Array) {\n        var offset = this.byteOffset / 4;\n        return SliceTools.Slice(data, offset, offset + count);\n      } else if (data instanceof ArrayBuffer) {\n        return new Float32Array(data, this.byteOffset, count);\n      } else {\n        var offset = data.byteOffset + this.byteOffset;\n\n        if (forceCopy) {\n          var result = new Float32Array(count);\n          var source = new Float32Array(data.buffer, offset, count);\n          result.set(source);\n          return result;\n        } // Protect against bad data\n\n\n        var remainder = offset % 4;\n\n        if (remainder) {\n          offset = Math.max(0, offset - remainder);\n        }\n\n        return new Float32Array(data.buffer, offset, count);\n      }\n    }\n\n    if (forceCopy) {\n      return SliceTools.Slice(data);\n    }\n\n    return data;\n  };\n  /**\n   * Gets underlying native buffer\n   * @returns underlying native buffer\n   */\n\n\n  VertexBuffer.prototype.getBuffer = function () {\n    return this._buffer.getBuffer();\n  };\n  /**\n   * Gets the stride in float32 units (i.e. byte stride / 4).\n   * May not be an integer if the byte stride is not divisible by 4.\n   * @returns the stride in float32 units\n   * @deprecated Please use byteStride instead.\n   */\n\n\n  VertexBuffer.prototype.getStrideSize = function () {\n    return this.byteStride / VertexBuffer.GetTypeByteLength(this.type);\n  };\n  /**\n   * Returns the offset as a multiple of the type byte length.\n   * @returns the offset in bytes\n   * @deprecated Please use byteOffset instead.\n   */\n\n\n  VertexBuffer.prototype.getOffset = function () {\n    return this.byteOffset / VertexBuffer.GetTypeByteLength(this.type);\n  };\n  /**\n   * Returns the number of components or the byte size per vertex attribute\n   * @param sizeInBytes If true, returns the size in bytes or else the size in number of components of the vertex attribute (default: false)\n   * @returns the number of components\n   */\n\n\n  VertexBuffer.prototype.getSize = function (sizeInBytes) {\n    if (sizeInBytes === void 0) {\n      sizeInBytes = false;\n    }\n\n    return sizeInBytes ? this._size * VertexBuffer.GetTypeByteLength(this.type) : this._size;\n  };\n  /**\n   * Gets a boolean indicating is the internal buffer of the VertexBuffer is instanced\n   * @returns true if this buffer is instanced\n   */\n\n\n  VertexBuffer.prototype.getIsInstanced = function () {\n    return this._instanced;\n  };\n  /**\n   * Returns the instancing divisor, zero for non-instanced (integer).\n   * @returns a number\n   */\n\n\n  VertexBuffer.prototype.getInstanceDivisor = function () {\n    return this._instanceDivisor;\n  }; // Methods\n\n  /**\n   * Store data into the buffer. If the buffer was already used it will be either recreated or updated depending on isUpdatable property\n   * @param data defines the data to store\n   */\n\n\n  VertexBuffer.prototype.create = function (data) {\n    this._buffer.create(data);\n  };\n  /**\n   * Updates the underlying buffer according to the passed numeric array or Float32Array.\n   * This function will create a new buffer if the current one is not updatable\n   * @param data defines the data to store\n   */\n\n\n  VertexBuffer.prototype.update = function (data) {\n    this._buffer.update(data);\n  };\n  /**\n   * Updates directly the underlying WebGLBuffer according to the passed numeric array or Float32Array.\n   * Returns the directly updated WebGLBuffer.\n   * @param data the new data\n   * @param offset the new offset\n   * @param useBytes set to true if the offset is in bytes\n   */\n\n\n  VertexBuffer.prototype.updateDirectly = function (data, offset, useBytes) {\n    if (useBytes === void 0) {\n      useBytes = false;\n    }\n\n    this._buffer.updateDirectly(data, offset, undefined, useBytes);\n  };\n  /**\n   * Disposes the VertexBuffer and the underlying WebGLBuffer.\n   */\n\n\n  VertexBuffer.prototype.dispose = function () {\n    if (this._ownsBuffer) {\n      this._buffer.dispose();\n    }\n  };\n  /**\n   * Enumerates each value of this vertex buffer as numbers.\n   * @param count the number of values to enumerate\n   * @param callback the callback function called for each value\n   */\n\n\n  VertexBuffer.prototype.forEach = function (count, callback) {\n    VertexBuffer.ForEach(this._buffer.getData(), this.byteOffset, this.byteStride, this._size, this.type, count, this.normalized, callback);\n  };\n  /**\n   * Deduces the stride given a kind.\n   * @param kind The kind string to deduce\n   * @returns The deduced stride\n   */\n\n\n  VertexBuffer.DeduceStride = function (kind) {\n    switch (kind) {\n      case VertexBuffer.UVKind:\n      case VertexBuffer.UV2Kind:\n      case VertexBuffer.UV3Kind:\n      case VertexBuffer.UV4Kind:\n      case VertexBuffer.UV5Kind:\n      case VertexBuffer.UV6Kind:\n        return 2;\n\n      case VertexBuffer.NormalKind:\n      case VertexBuffer.PositionKind:\n        return 3;\n\n      case VertexBuffer.ColorKind:\n      case VertexBuffer.MatricesIndicesKind:\n      case VertexBuffer.MatricesIndicesExtraKind:\n      case VertexBuffer.MatricesWeightsKind:\n      case VertexBuffer.MatricesWeightsExtraKind:\n      case VertexBuffer.TangentKind:\n        return 4;\n\n      default:\n        throw new Error(\"Invalid kind '\" + kind + \"'\");\n    }\n  };\n  /**\n   * Gets the byte length of the given type.\n   * @param type the type\n   * @returns the number of bytes\n   */\n\n\n  VertexBuffer.GetTypeByteLength = function (type) {\n    switch (type) {\n      case VertexBuffer.BYTE:\n      case VertexBuffer.UNSIGNED_BYTE:\n        return 1;\n\n      case VertexBuffer.SHORT:\n      case VertexBuffer.UNSIGNED_SHORT:\n        return 2;\n\n      case VertexBuffer.INT:\n      case VertexBuffer.UNSIGNED_INT:\n      case VertexBuffer.FLOAT:\n        return 4;\n\n      default:\n        throw new Error(\"Invalid type '\".concat(type, \"'\"));\n    }\n  };\n  /**\n   * Enumerates each value of the given parameters as numbers.\n   * @param data the data to enumerate\n   * @param byteOffset the byte offset of the data\n   * @param byteStride the byte stride of the data\n   * @param componentCount the number of components per element\n   * @param componentType the type of the component\n   * @param count the number of values to enumerate\n   * @param normalized whether the data is normalized\n   * @param callback the callback function called for each value\n   */\n\n\n  VertexBuffer.ForEach = function (data, byteOffset, byteStride, componentCount, componentType, count, normalized, callback) {\n    if (data instanceof Array) {\n      var offset = byteOffset / 4;\n      var stride = byteStride / 4;\n\n      for (var index = 0; index < count; index += componentCount) {\n        for (var componentIndex = 0; componentIndex < componentCount; componentIndex++) {\n          callback(data[offset + componentIndex], index + componentIndex);\n        }\n\n        offset += stride;\n      }\n    } else {\n      var dataView = data instanceof ArrayBuffer ? new DataView(data) : new DataView(data.buffer, data.byteOffset, data.byteLength);\n      var componentByteLength = VertexBuffer.GetTypeByteLength(componentType);\n\n      for (var index = 0; index < count; index += componentCount) {\n        var componentByteOffset = byteOffset;\n\n        for (var componentIndex = 0; componentIndex < componentCount; componentIndex++) {\n          var value = VertexBuffer._GetFloatValue(dataView, componentType, componentByteOffset, normalized);\n\n          callback(value, index + componentIndex);\n          componentByteOffset += componentByteLength;\n        }\n\n        byteOffset += byteStride;\n      }\n    }\n  };\n\n  VertexBuffer._GetFloatValue = function (dataView, type, byteOffset, normalized) {\n    switch (type) {\n      case VertexBuffer.BYTE:\n        {\n          var value = dataView.getInt8(byteOffset);\n\n          if (normalized) {\n            value = Math.max(value / 127, -1);\n          }\n\n          return value;\n        }\n\n      case VertexBuffer.UNSIGNED_BYTE:\n        {\n          var value = dataView.getUint8(byteOffset);\n\n          if (normalized) {\n            value = value / 255;\n          }\n\n          return value;\n        }\n\n      case VertexBuffer.SHORT:\n        {\n          var value = dataView.getInt16(byteOffset, true);\n\n          if (normalized) {\n            value = Math.max(value / 32767, -1);\n          }\n\n          return value;\n        }\n\n      case VertexBuffer.UNSIGNED_SHORT:\n        {\n          var value = dataView.getUint16(byteOffset, true);\n\n          if (normalized) {\n            value = value / 65535;\n          }\n\n          return value;\n        }\n\n      case VertexBuffer.INT:\n        {\n          return dataView.getInt32(byteOffset, true);\n        }\n\n      case VertexBuffer.UNSIGNED_INT:\n        {\n          return dataView.getUint32(byteOffset, true);\n        }\n\n      case VertexBuffer.FLOAT:\n        {\n          return dataView.getFloat32(byteOffset, true);\n        }\n\n      default:\n        {\n          throw new Error(\"Invalid component type \".concat(type));\n        }\n    }\n  };\n\n  VertexBuffer._Counter = 0;\n  /**\n   * The byte type.\n   */\n\n  VertexBuffer.BYTE = 5120;\n  /**\n   * The unsigned byte type.\n   */\n\n  VertexBuffer.UNSIGNED_BYTE = 5121;\n  /**\n   * The short type.\n   */\n\n  VertexBuffer.SHORT = 5122;\n  /**\n   * The unsigned short type.\n   */\n\n  VertexBuffer.UNSIGNED_SHORT = 5123;\n  /**\n   * The integer type.\n   */\n\n  VertexBuffer.INT = 5124;\n  /**\n   * The unsigned integer type.\n   */\n\n  VertexBuffer.UNSIGNED_INT = 5125;\n  /**\n   * The float type.\n   */\n\n  VertexBuffer.FLOAT = 5126; // Enums\n\n  /**\n   * Positions\n   */\n\n  VertexBuffer.PositionKind = \"position\";\n  /**\n   * Normals\n   */\n\n  VertexBuffer.NormalKind = \"normal\";\n  /**\n   * Tangents\n   */\n\n  VertexBuffer.TangentKind = \"tangent\";\n  /**\n   * Texture coordinates\n   */\n\n  VertexBuffer.UVKind = \"uv\";\n  /**\n   * Texture coordinates 2\n   */\n\n  VertexBuffer.UV2Kind = \"uv2\";\n  /**\n   * Texture coordinates 3\n   */\n\n  VertexBuffer.UV3Kind = \"uv3\";\n  /**\n   * Texture coordinates 4\n   */\n\n  VertexBuffer.UV4Kind = \"uv4\";\n  /**\n   * Texture coordinates 5\n   */\n\n  VertexBuffer.UV5Kind = \"uv5\";\n  /**\n   * Texture coordinates 6\n   */\n\n  VertexBuffer.UV6Kind = \"uv6\";\n  /**\n   * Colors\n   */\n\n  VertexBuffer.ColorKind = \"color\";\n  /**\n   * Instance Colors\n   */\n\n  VertexBuffer.ColorInstanceKind = \"instanceColor\";\n  /**\n   * Matrix indices (for bones)\n   */\n\n  VertexBuffer.MatricesIndicesKind = \"matricesIndices\";\n  /**\n   * Matrix weights (for bones)\n   */\n\n  VertexBuffer.MatricesWeightsKind = \"matricesWeights\";\n  /**\n   * Additional matrix indices (for bones)\n   */\n\n  VertexBuffer.MatricesIndicesExtraKind = \"matricesIndicesExtra\";\n  /**\n   * Additional matrix weights (for bones)\n   */\n\n  VertexBuffer.MatricesWeightsExtraKind = \"matricesWeightsExtra\";\n  return VertexBuffer;\n}();\n\nexport { VertexBuffer };","map":{"version":3,"mappings":"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","names":["DataBuffer","SliceTools","engine","data","updatable","stride","postponeInternalCreation","instanced","useBytes","divisor","getScene","_engine","getEngine","_updatable","_instanced","_divisor","_data","_buffer","byteStride","Float32Array","BYTES_PER_ELEMENT","create","Buffer","kind","offset","size","byteOffset","VertexBuffer","undefined","createDynamicVertexBuffer","createVertexBuffer","updateDynamicVertexBuffer","vertexCount","_isAlreadyOwned","references","_releaseBuffer","type","normalized","takeBufferOwnership","_ownsBuffer","uniqueId","_Counter","_kind","data_1","getData","FLOAT","Int8Array","BYTE","Uint8Array","UNSIGNED_BYTE","Int16Array","SHORT","Uint16Array","UNSIGNED_SHORT","Int32Array","INT","Uint32Array","UNSIGNED_INT","typeByteLength","GetTypeByteLength","_size","DeduceStride","_instanceDivisor","_computeHashCode","Object","value","hashCode","_rebuild","isUpdatable","totalVertices","forceCopy","tightlyPackedByteStride","getSize","count","copy_1","forEach","index","Array","length","Slice","ArrayBuffer","result","source","buffer","set","remainder","Math","max","getBuffer","sizeInBytes","update","updateDirectly","dispose","callback","ForEach","UVKind","UV2Kind","UV3Kind","UV4Kind","UV5Kind","UV6Kind","NormalKind","PositionKind","ColorKind","MatricesIndicesKind","MatricesIndicesExtraKind","MatricesWeightsKind","MatricesWeightsExtraKind","TangentKind","Error","componentCount","componentType","componentIndex","dataView","DataView","byteLength","componentByteLength","componentByteOffset","_GetFloatValue","getInt8","getUint8","getInt16","getUint16","getInt32","getUint32","getFloat32"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Buffers/buffer.ts"],"sourcesContent":["import type { Nullable, DataArray, FloatArray } from \"../types\";\r\nimport type { ThinEngine } from \"../Engines/thinEngine\";\r\nimport { DataBuffer } from \"./dataBuffer\";\r\nimport { SliceTools } from \"../Misc/sliceTools\";\r\n\r\n/**\r\n * Class used to store data that will be store in GPU memory\r\n */\r\nexport class Buffer {\r\n    private _engine: ThinEngine;\r\n    private _buffer: Nullable<DataBuffer>;\r\n    /** @hidden */\r\n    public _data: Nullable<DataArray>;\r\n    private _updatable: boolean;\r\n    private _instanced: boolean;\r\n    private _divisor: number;\r\n    private _isAlreadyOwned = false;\r\n\r\n    /**\r\n     * Gets the byte stride.\r\n     */\r\n    public readonly byteStride: number;\r\n\r\n    /**\r\n     * Constructor\r\n     * @param engine the engine\r\n     * @param data the data to use for this buffer\r\n     * @param updatable whether the data is updatable\r\n     * @param stride the stride (optional)\r\n     * @param postponeInternalCreation whether to postpone creating the internal WebGL buffer (optional)\r\n     * @param instanced whether the buffer is instanced (optional)\r\n     * @param useBytes set to true if the stride in in bytes (optional)\r\n     * @param divisor sets an optional divisor for instances (1 by default)\r\n     */\r\n    constructor(\r\n        engine: any,\r\n        data: DataArray | DataBuffer,\r\n        updatable: boolean,\r\n        stride = 0,\r\n        postponeInternalCreation = false,\r\n        instanced = false,\r\n        useBytes = false,\r\n        divisor?: number\r\n    ) {\r\n        if (engine.getScene) {\r\n            // old versions of VertexBuffer accepted 'mesh' instead of 'engine'\r\n            this._engine = engine.getScene().getEngine();\r\n        } else {\r\n            this._engine = engine;\r\n        }\r\n\r\n        this._updatable = updatable;\r\n        this._instanced = instanced;\r\n        this._divisor = divisor || 1;\r\n\r\n        if (data instanceof DataBuffer) {\r\n            this._data = null;\r\n            this._buffer = data;\r\n        } else {\r\n            this._data = data;\r\n            this._buffer = null;\r\n        }\r\n\r\n        this.byteStride = useBytes ? stride : stride * Float32Array.BYTES_PER_ELEMENT;\r\n\r\n        if (!postponeInternalCreation) {\r\n            // by default\r\n            this.create();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a new VertexBuffer based on the current buffer\r\n     * @param kind defines the vertex buffer kind (position, normal, etc.)\r\n     * @param offset defines offset in the buffer (0 by default)\r\n     * @param size defines the size in floats of attributes (position is 3 for instance)\r\n     * @param stride defines the stride size in floats in the buffer (the offset to apply to reach next value when data is interleaved)\r\n     * @param instanced defines if the vertex buffer contains indexed data\r\n     * @param useBytes defines if the offset and stride are in bytes     *\r\n     * @param divisor sets an optional divisor for instances (1 by default)\r\n     * @returns the new vertex buffer\r\n     */\r\n    public createVertexBuffer(kind: string, offset: number, size: number, stride?: number, instanced?: boolean, useBytes = false, divisor?: number): VertexBuffer {\r\n        const byteOffset = useBytes ? offset : offset * Float32Array.BYTES_PER_ELEMENT;\r\n        const byteStride = stride ? (useBytes ? stride : stride * Float32Array.BYTES_PER_ELEMENT) : this.byteStride;\r\n\r\n        // a lot of these parameters are ignored as they are overridden by the buffer\r\n        return new VertexBuffer(\r\n            this._engine,\r\n            this,\r\n            kind,\r\n            this._updatable,\r\n            true,\r\n            byteStride,\r\n            instanced === undefined ? this._instanced : instanced,\r\n            byteOffset,\r\n            size,\r\n            undefined,\r\n            undefined,\r\n            true,\r\n            this._divisor || divisor\r\n        );\r\n    }\r\n\r\n    // Properties\r\n\r\n    /**\r\n     * Gets a boolean indicating if the Buffer is updatable?\r\n     * @returns true if the buffer is updatable\r\n     */\r\n    public isUpdatable(): boolean {\r\n        return this._updatable;\r\n    }\r\n\r\n    /**\r\n     * Gets current buffer's data\r\n     * @returns a DataArray or null\r\n     */\r\n    public getData(): Nullable<DataArray> {\r\n        return this._data;\r\n    }\r\n\r\n    /**\r\n     * Gets underlying native buffer\r\n     * @returns underlying native buffer\r\n     */\r\n    public getBuffer(): Nullable<DataBuffer> {\r\n        return this._buffer;\r\n    }\r\n\r\n    /**\r\n     * Gets the stride in float32 units (i.e. byte stride / 4).\r\n     * May not be an integer if the byte stride is not divisible by 4.\r\n     * @returns the stride in float32 units\r\n     * @deprecated Please use byteStride instead.\r\n     */\r\n    public getStrideSize(): number {\r\n        return this.byteStride / Float32Array.BYTES_PER_ELEMENT;\r\n    }\r\n\r\n    // Methods\r\n\r\n    /**\r\n     * Store data into the buffer. Creates the buffer if not used already.\r\n     * If the buffer was already used, it will be updated only if it is updatable, otherwise it will do nothing.\r\n     * @param data defines the data to store\r\n     */\r\n    public create(data: Nullable<DataArray> = null): void {\r\n        if (!data && this._buffer) {\r\n            return; // nothing to do\r\n        }\r\n\r\n        data = data || this._data;\r\n\r\n        if (!data) {\r\n            return;\r\n        }\r\n\r\n        if (!this._buffer) {\r\n            // create buffer\r\n            if (this._updatable) {\r\n                this._buffer = this._engine.createDynamicVertexBuffer(data);\r\n                this._data = data;\r\n            } else {\r\n                this._buffer = this._engine.createVertexBuffer(data);\r\n            }\r\n        } else if (this._updatable) {\r\n            // update buffer\r\n            this._engine.updateDynamicVertexBuffer(this._buffer, data);\r\n            this._data = data;\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _rebuild(): void {\r\n        this._buffer = null;\r\n        this.create(this._data);\r\n    }\r\n\r\n    /**\r\n     * Update current buffer data\r\n     * @param data defines the data to store\r\n     */\r\n    public update(data: DataArray): void {\r\n        this.create(data);\r\n    }\r\n\r\n    /**\r\n     * Updates the data directly.\r\n     * @param data the new data\r\n     * @param offset the new offset\r\n     * @param vertexCount the vertex count (optional)\r\n     * @param useBytes set to true if the offset is in bytes\r\n     */\r\n    public updateDirectly(data: DataArray, offset: number, vertexCount?: number, useBytes: boolean = false): void {\r\n        if (!this._buffer) {\r\n            return;\r\n        }\r\n\r\n        if (this._updatable) {\r\n            // update buffer\r\n            this._engine.updateDynamicVertexBuffer(\r\n                this._buffer,\r\n                data,\r\n                useBytes ? offset : offset * Float32Array.BYTES_PER_ELEMENT,\r\n                vertexCount ? vertexCount * this.byteStride : undefined\r\n            );\r\n            if (offset === 0 && vertexCount === undefined) {\r\n                // Keep the data if we easily can\r\n                this._data = data;\r\n            } else {\r\n                this._data = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _increaseReferences() {\r\n        if (!this._buffer) {\r\n            return;\r\n        }\r\n\r\n        if (!this._isAlreadyOwned) {\r\n            this._isAlreadyOwned = true;\r\n            return;\r\n        }\r\n\r\n        this._buffer.references++;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        if (!this._buffer) {\r\n            return;\r\n        }\r\n        if (this._engine._releaseBuffer(this._buffer)) {\r\n            this._buffer = null;\r\n            this._data = null;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Specialized buffer used to store vertex data\r\n */\r\nexport class VertexBuffer {\r\n    private static _Counter = 0;\r\n\r\n    /** @hidden */\r\n    public _buffer: Buffer;\r\n    /** @hidden */\r\n    public _validOffsetRange: boolean; // used internally by the engine\r\n    private _kind: string;\r\n    private _size: number;\r\n    private _ownsBuffer: boolean;\r\n    private _instanced: boolean;\r\n    private _instanceDivisor: number;\r\n\r\n    /**\r\n     * The byte type.\r\n     */\r\n    public static readonly BYTE = 5120;\r\n\r\n    /**\r\n     * The unsigned byte type.\r\n     */\r\n    public static readonly UNSIGNED_BYTE = 5121;\r\n\r\n    /**\r\n     * The short type.\r\n     */\r\n    public static readonly SHORT = 5122;\r\n\r\n    /**\r\n     * The unsigned short type.\r\n     */\r\n    public static readonly UNSIGNED_SHORT = 5123;\r\n\r\n    /**\r\n     * The integer type.\r\n     */\r\n    public static readonly INT = 5124;\r\n\r\n    /**\r\n     * The unsigned integer type.\r\n     */\r\n    public static readonly UNSIGNED_INT = 5125;\r\n\r\n    /**\r\n     * The float type.\r\n     */\r\n    public static readonly FLOAT = 5126;\r\n\r\n    /**\r\n     * Gets or sets the instance divisor when in instanced mode\r\n     */\r\n    public get instanceDivisor(): number {\r\n        return this._instanceDivisor;\r\n    }\r\n\r\n    public set instanceDivisor(value: number) {\r\n        this._instanceDivisor = value;\r\n        if (value == 0) {\r\n            this._instanced = false;\r\n        } else {\r\n            this._instanced = true;\r\n        }\r\n        this._computeHashCode();\r\n    }\r\n\r\n    /**\r\n     * Gets the byte stride.\r\n     */\r\n    public readonly byteStride: number;\r\n\r\n    /**\r\n     * Gets the byte offset.\r\n     */\r\n    public readonly byteOffset: number;\r\n\r\n    /**\r\n     * Gets whether integer data values should be normalized into a certain range when being casted to a float.\r\n     */\r\n    public readonly normalized: boolean;\r\n\r\n    /**\r\n     * Gets the data type of each component in the array.\r\n     */\r\n    public readonly type: number;\r\n\r\n    /**\r\n     * Gets the unique id of this vertex buffer\r\n     */\r\n    public readonly uniqueId: number;\r\n\r\n    /**\r\n     * Gets a hash code representing the format (type, normalized, size, instanced, stride) of this buffer\r\n     * All buffers with the same format will have the same hash code\r\n     */\r\n    public readonly hashCode: number;\r\n\r\n    /**\r\n     * Constructor\r\n     * @param engine the engine\r\n     * @param data the data to use for this vertex buffer\r\n     * @param kind the vertex buffer kind\r\n     * @param updatable whether the data is updatable\r\n     * @param postponeInternalCreation whether to postpone creating the internal WebGL buffer (optional)\r\n     * @param stride the stride (optional)\r\n     * @param instanced whether the buffer is instanced (optional)\r\n     * @param offset the offset of the data (optional)\r\n     * @param size the number of components (optional)\r\n     * @param type the type of the component (optional)\r\n     * @param normalized whether the data contains normalized data (optional)\r\n     * @param useBytes set to true if stride and offset are in bytes (optional)\r\n     * @param divisor defines the instance divisor to use (1 by default)\r\n     * @param takeBufferOwnership defines if the buffer should be released when the vertex buffer is disposed\r\n     */\r\n    constructor(\r\n        engine: any,\r\n        data: DataArray | Buffer | DataBuffer,\r\n        kind: string,\r\n        updatable: boolean,\r\n        postponeInternalCreation?: boolean,\r\n        stride?: number,\r\n        instanced?: boolean,\r\n        offset?: number,\r\n        size?: number,\r\n        type?: number,\r\n        normalized = false,\r\n        useBytes = false,\r\n        divisor = 1,\r\n        takeBufferOwnership = false\r\n    ) {\r\n        if (data instanceof Buffer) {\r\n            this._buffer = data;\r\n            this._ownsBuffer = takeBufferOwnership;\r\n        } else {\r\n            this._buffer = new Buffer(engine, data, updatable, stride, postponeInternalCreation, instanced, useBytes);\r\n            this._ownsBuffer = true;\r\n        }\r\n\r\n        this.uniqueId = VertexBuffer._Counter++;\r\n        this._kind = kind;\r\n\r\n        if (type == undefined) {\r\n            const data = this.getData();\r\n            this.type = VertexBuffer.FLOAT;\r\n            if (data instanceof Int8Array) {\r\n                this.type = VertexBuffer.BYTE;\r\n            } else if (data instanceof Uint8Array) {\r\n                this.type = VertexBuffer.UNSIGNED_BYTE;\r\n            } else if (data instanceof Int16Array) {\r\n                this.type = VertexBuffer.SHORT;\r\n            } else if (data instanceof Uint16Array) {\r\n                this.type = VertexBuffer.UNSIGNED_SHORT;\r\n            } else if (data instanceof Int32Array) {\r\n                this.type = VertexBuffer.INT;\r\n            } else if (data instanceof Uint32Array) {\r\n                this.type = VertexBuffer.UNSIGNED_INT;\r\n            }\r\n        } else {\r\n            this.type = type;\r\n        }\r\n\r\n        const typeByteLength = VertexBuffer.GetTypeByteLength(this.type);\r\n\r\n        if (useBytes) {\r\n            this._size = size || (stride ? stride / typeByteLength : VertexBuffer.DeduceStride(kind));\r\n            this.byteStride = stride || this._buffer.byteStride || this._size * typeByteLength;\r\n            this.byteOffset = offset || 0;\r\n        } else {\r\n            this._size = size || stride || VertexBuffer.DeduceStride(kind);\r\n            this.byteStride = stride ? stride * typeByteLength : this._buffer.byteStride || this._size * typeByteLength;\r\n            this.byteOffset = (offset || 0) * typeByteLength;\r\n        }\r\n\r\n        this.normalized = normalized;\r\n\r\n        this._instanced = instanced !== undefined ? instanced : false;\r\n        this._instanceDivisor = instanced ? divisor : 0;\r\n\r\n        this._computeHashCode();\r\n    }\r\n\r\n    private _computeHashCode(): void {\r\n        // note: cast to any because the property is declared readonly\r\n        (this.hashCode as any) =\r\n            ((this.type - 5120) << 0) +\r\n            ((this.normalized ? 1 : 0) << 3) +\r\n            (this._size << 4) +\r\n            ((this._instanced ? 1 : 0) << 6) +\r\n            /* keep 5 bits free */\r\n            (this.byteStride << 12);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _rebuild(): void {\r\n        if (!this._buffer) {\r\n            return;\r\n        }\r\n\r\n        this._buffer._rebuild();\r\n    }\r\n\r\n    /**\r\n     * Returns the kind of the VertexBuffer (string)\r\n     * @returns a string\r\n     */\r\n    public getKind(): string {\r\n        return this._kind;\r\n    }\r\n\r\n    // Properties\r\n\r\n    /**\r\n     * Gets a boolean indicating if the VertexBuffer is updatable?\r\n     * @returns true if the buffer is updatable\r\n     */\r\n    public isUpdatable(): boolean {\r\n        return this._buffer.isUpdatable();\r\n    }\r\n\r\n    /**\r\n     * Gets current buffer's data\r\n     * @returns a DataArray or null\r\n     */\r\n    public getData(): Nullable<DataArray> {\r\n        return this._buffer.getData();\r\n    }\r\n\r\n    /**\r\n     * Gets current buffer's data as a float array. Float data is constructed if the vertex buffer data cannot be returned directly.\r\n     * @param totalVertices number of vertices in the buffer to take into account\r\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\r\n     * @returns a float array containing vertex data\r\n     */\r\n    public getFloatData(totalVertices: number, forceCopy?: boolean): Nullable<FloatArray> {\r\n        const data = this.getData();\r\n        if (!data) {\r\n            return null;\r\n        }\r\n\r\n        const tightlyPackedByteStride = this.getSize() * VertexBuffer.GetTypeByteLength(this.type);\r\n        const count = totalVertices * this.getSize();\r\n\r\n        if (this.type !== VertexBuffer.FLOAT || this.byteStride !== tightlyPackedByteStride) {\r\n            const copy = new Float32Array(count);\r\n            this.forEach(count, (value, index) => (copy[index] = value));\r\n            return copy;\r\n        }\r\n\r\n        if (!(data instanceof Array || data instanceof Float32Array) || this.byteOffset !== 0 || data.length !== count) {\r\n            if (data instanceof Array) {\r\n                const offset = this.byteOffset / 4;\r\n                return SliceTools.Slice(data, offset, offset + count);\r\n            } else if (data instanceof ArrayBuffer) {\r\n                return new Float32Array(data, this.byteOffset, count);\r\n            } else {\r\n                let offset = data.byteOffset + this.byteOffset;\r\n                if (forceCopy) {\r\n                    const result = new Float32Array(count);\r\n                    const source = new Float32Array(data.buffer, offset, count);\r\n\r\n                    result.set(source);\r\n\r\n                    return result;\r\n                }\r\n\r\n                // Protect against bad data\r\n                const remainder = offset % 4;\r\n\r\n                if (remainder) {\r\n                    offset = Math.max(0, offset - remainder);\r\n                }\r\n\r\n                return new Float32Array(data.buffer, offset, count);\r\n            }\r\n        }\r\n\r\n        if (forceCopy) {\r\n            return SliceTools.Slice(data);\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Gets underlying native buffer\r\n     * @returns underlying native buffer\r\n     */\r\n    public getBuffer(): Nullable<DataBuffer> {\r\n        return this._buffer.getBuffer();\r\n    }\r\n\r\n    /**\r\n     * Gets the stride in float32 units (i.e. byte stride / 4).\r\n     * May not be an integer if the byte stride is not divisible by 4.\r\n     * @returns the stride in float32 units\r\n     * @deprecated Please use byteStride instead.\r\n     */\r\n    public getStrideSize(): number {\r\n        return this.byteStride / VertexBuffer.GetTypeByteLength(this.type);\r\n    }\r\n\r\n    /**\r\n     * Returns the offset as a multiple of the type byte length.\r\n     * @returns the offset in bytes\r\n     * @deprecated Please use byteOffset instead.\r\n     */\r\n    public getOffset(): number {\r\n        return this.byteOffset / VertexBuffer.GetTypeByteLength(this.type);\r\n    }\r\n\r\n    /**\r\n     * Returns the number of components or the byte size per vertex attribute\r\n     * @param sizeInBytes If true, returns the size in bytes or else the size in number of components of the vertex attribute (default: false)\r\n     * @returns the number of components\r\n     */\r\n    public getSize(sizeInBytes = false): number {\r\n        return sizeInBytes ? this._size * VertexBuffer.GetTypeByteLength(this.type) : this._size;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating is the internal buffer of the VertexBuffer is instanced\r\n     * @returns true if this buffer is instanced\r\n     */\r\n    public getIsInstanced(): boolean {\r\n        return this._instanced;\r\n    }\r\n\r\n    /**\r\n     * Returns the instancing divisor, zero for non-instanced (integer).\r\n     * @returns a number\r\n     */\r\n    public getInstanceDivisor(): number {\r\n        return this._instanceDivisor;\r\n    }\r\n\r\n    // Methods\r\n\r\n    /**\r\n     * Store data into the buffer. If the buffer was already used it will be either recreated or updated depending on isUpdatable property\r\n     * @param data defines the data to store\r\n     */\r\n    public create(data?: DataArray): void {\r\n        this._buffer.create(data);\r\n    }\r\n\r\n    /**\r\n     * Updates the underlying buffer according to the passed numeric array or Float32Array.\r\n     * This function will create a new buffer if the current one is not updatable\r\n     * @param data defines the data to store\r\n     */\r\n    public update(data: DataArray): void {\r\n        this._buffer.update(data);\r\n    }\r\n\r\n    /**\r\n     * Updates directly the underlying WebGLBuffer according to the passed numeric array or Float32Array.\r\n     * Returns the directly updated WebGLBuffer.\r\n     * @param data the new data\r\n     * @param offset the new offset\r\n     * @param useBytes set to true if the offset is in bytes\r\n     */\r\n    public updateDirectly(data: DataArray, offset: number, useBytes: boolean = false): void {\r\n        this._buffer.updateDirectly(data, offset, undefined, useBytes);\r\n    }\r\n\r\n    /**\r\n     * Disposes the VertexBuffer and the underlying WebGLBuffer.\r\n     */\r\n    public dispose(): void {\r\n        if (this._ownsBuffer) {\r\n            this._buffer.dispose();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enumerates each value of this vertex buffer as numbers.\r\n     * @param count the number of values to enumerate\r\n     * @param callback the callback function called for each value\r\n     */\r\n    public forEach(count: number, callback: (value: number, index: number) => void): void {\r\n        VertexBuffer.ForEach(this._buffer.getData()!, this.byteOffset, this.byteStride, this._size, this.type, count, this.normalized, callback);\r\n    }\r\n\r\n    // Enums\r\n    /**\r\n     * Positions\r\n     */\r\n    public static readonly PositionKind = \"position\";\r\n    /**\r\n     * Normals\r\n     */\r\n    public static readonly NormalKind = \"normal\";\r\n    /**\r\n     * Tangents\r\n     */\r\n    public static readonly TangentKind = \"tangent\";\r\n    /**\r\n     * Texture coordinates\r\n     */\r\n    public static readonly UVKind = \"uv\";\r\n    /**\r\n     * Texture coordinates 2\r\n     */\r\n    public static readonly UV2Kind = \"uv2\";\r\n    /**\r\n     * Texture coordinates 3\r\n     */\r\n    public static readonly UV3Kind = \"uv3\";\r\n    /**\r\n     * Texture coordinates 4\r\n     */\r\n    public static readonly UV4Kind = \"uv4\";\r\n    /**\r\n     * Texture coordinates 5\r\n     */\r\n    public static readonly UV5Kind = \"uv5\";\r\n    /**\r\n     * Texture coordinates 6\r\n     */\r\n    public static readonly UV6Kind = \"uv6\";\r\n    /**\r\n     * Colors\r\n     */\r\n    public static readonly ColorKind = \"color\";\r\n    /**\r\n     * Instance Colors\r\n     */\r\n    public static readonly ColorInstanceKind = \"instanceColor\";\r\n    /**\r\n     * Matrix indices (for bones)\r\n     */\r\n    public static readonly MatricesIndicesKind = \"matricesIndices\";\r\n    /**\r\n     * Matrix weights (for bones)\r\n     */\r\n    public static readonly MatricesWeightsKind = \"matricesWeights\";\r\n    /**\r\n     * Additional matrix indices (for bones)\r\n     */\r\n    public static readonly MatricesIndicesExtraKind = \"matricesIndicesExtra\";\r\n    /**\r\n     * Additional matrix weights (for bones)\r\n     */\r\n    public static readonly MatricesWeightsExtraKind = \"matricesWeightsExtra\";\r\n\r\n    /**\r\n     * Deduces the stride given a kind.\r\n     * @param kind The kind string to deduce\r\n     * @returns The deduced stride\r\n     */\r\n    public static DeduceStride(kind: string): number {\r\n        switch (kind) {\r\n            case VertexBuffer.UVKind:\r\n            case VertexBuffer.UV2Kind:\r\n            case VertexBuffer.UV3Kind:\r\n            case VertexBuffer.UV4Kind:\r\n            case VertexBuffer.UV5Kind:\r\n            case VertexBuffer.UV6Kind:\r\n                return 2;\r\n            case VertexBuffer.NormalKind:\r\n            case VertexBuffer.PositionKind:\r\n                return 3;\r\n            case VertexBuffer.ColorKind:\r\n            case VertexBuffer.MatricesIndicesKind:\r\n            case VertexBuffer.MatricesIndicesExtraKind:\r\n            case VertexBuffer.MatricesWeightsKind:\r\n            case VertexBuffer.MatricesWeightsExtraKind:\r\n            case VertexBuffer.TangentKind:\r\n                return 4;\r\n            default:\r\n                throw new Error(\"Invalid kind '\" + kind + \"'\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the byte length of the given type.\r\n     * @param type the type\r\n     * @returns the number of bytes\r\n     */\r\n    public static GetTypeByteLength(type: number): number {\r\n        switch (type) {\r\n            case VertexBuffer.BYTE:\r\n            case VertexBuffer.UNSIGNED_BYTE:\r\n                return 1;\r\n            case VertexBuffer.SHORT:\r\n            case VertexBuffer.UNSIGNED_SHORT:\r\n                return 2;\r\n            case VertexBuffer.INT:\r\n            case VertexBuffer.UNSIGNED_INT:\r\n            case VertexBuffer.FLOAT:\r\n                return 4;\r\n            default:\r\n                throw new Error(`Invalid type '${type}'`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enumerates each value of the given parameters as numbers.\r\n     * @param data the data to enumerate\r\n     * @param byteOffset the byte offset of the data\r\n     * @param byteStride the byte stride of the data\r\n     * @param componentCount the number of components per element\r\n     * @param componentType the type of the component\r\n     * @param count the number of values to enumerate\r\n     * @param normalized whether the data is normalized\r\n     * @param callback the callback function called for each value\r\n     */\r\n    public static ForEach(\r\n        data: DataArray,\r\n        byteOffset: number,\r\n        byteStride: number,\r\n        componentCount: number,\r\n        componentType: number,\r\n        count: number,\r\n        normalized: boolean,\r\n        callback: (value: number, index: number) => void\r\n    ): void {\r\n        if (data instanceof Array) {\r\n            let offset = byteOffset / 4;\r\n            const stride = byteStride / 4;\r\n            for (let index = 0; index < count; index += componentCount) {\r\n                for (let componentIndex = 0; componentIndex < componentCount; componentIndex++) {\r\n                    callback(data[offset + componentIndex], index + componentIndex);\r\n                }\r\n                offset += stride;\r\n            }\r\n        } else {\r\n            const dataView = data instanceof ArrayBuffer ? new DataView(data) : new DataView(data.buffer, data.byteOffset, data.byteLength);\r\n            const componentByteLength = VertexBuffer.GetTypeByteLength(componentType);\r\n            for (let index = 0; index < count; index += componentCount) {\r\n                let componentByteOffset = byteOffset;\r\n                for (let componentIndex = 0; componentIndex < componentCount; componentIndex++) {\r\n                    const value = VertexBuffer._GetFloatValue(dataView, componentType, componentByteOffset, normalized);\r\n                    callback(value, index + componentIndex);\r\n                    componentByteOffset += componentByteLength;\r\n                }\r\n                byteOffset += byteStride;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _GetFloatValue(dataView: DataView, type: number, byteOffset: number, normalized: boolean): number {\r\n        switch (type) {\r\n            case VertexBuffer.BYTE: {\r\n                let value = dataView.getInt8(byteOffset);\r\n                if (normalized) {\r\n                    value = Math.max(value / 127, -1);\r\n                }\r\n                return value;\r\n            }\r\n            case VertexBuffer.UNSIGNED_BYTE: {\r\n                let value = dataView.getUint8(byteOffset);\r\n                if (normalized) {\r\n                    value = value / 255;\r\n                }\r\n                return value;\r\n            }\r\n            case VertexBuffer.SHORT: {\r\n                let value = dataView.getInt16(byteOffset, true);\r\n                if (normalized) {\r\n                    value = Math.max(value / 32767, -1);\r\n                }\r\n                return value;\r\n            }\r\n            case VertexBuffer.UNSIGNED_SHORT: {\r\n                let value = dataView.getUint16(byteOffset, true);\r\n                if (normalized) {\r\n                    value = value / 65535;\r\n                }\r\n                return value;\r\n            }\r\n            case VertexBuffer.INT: {\r\n                return dataView.getInt32(byteOffset, true);\r\n            }\r\n            case VertexBuffer.UNSIGNED_INT: {\r\n                return dataView.getUint32(byteOffset, true);\r\n            }\r\n            case VertexBuffer.FLOAT: {\r\n                return dataView.getFloat32(byteOffset, true);\r\n            }\r\n            default: {\r\n                throw new Error(`Invalid component type ${type}`);\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}