{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/vrMultiviewToSingleview.fragment.js\";\nimport \"../Engines/Extensions/engine.multiview.js\";\n/**\n * VRMultiviewToSingleview used to convert multiview texture arrays to standard textures for scenarios such as webVR\n * This will not be used for webXR as it supports displaying texture arrays directly\n */\n\nvar VRMultiviewToSingleviewPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(VRMultiviewToSingleviewPostProcess, _super);\n  /**\n   * Initializes a VRMultiviewToSingleview\n   * @param name name of the post process\n   * @param camera camera to be applied to\n   * @param scaleFactor scaling factor to the size of the output texture\n   */\n\n\n  function VRMultiviewToSingleviewPostProcess(name, camera, scaleFactor) {\n    var _this = _super.call(this, name, \"vrMultiviewToSingleview\", [\"imageIndex\"], [\"multiviewSampler\"], scaleFactor, camera, Texture.BILINEAR_SAMPLINGMODE) || this;\n\n    _this.onSizeChangedObservable.add(function () {});\n\n    _this.onApplyObservable.add(function (effect) {\n      if (camera._scene.activeCamera && camera._scene.activeCamera.isLeftCamera) {\n        effect.setInt(\"imageIndex\", 0);\n      } else {\n        effect.setInt(\"imageIndex\", 1);\n      }\n\n      effect.setTexture(\"multiviewSampler\", camera._multiviewTexture);\n    });\n\n    return _this;\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"VRMultiviewToSingleviewPostProcess\" string\n   */\n\n\n  VRMultiviewToSingleviewPostProcess.prototype.getClassName = function () {\n    return \"VRMultiviewToSingleviewPostProcess\";\n  };\n\n  return VRMultiviewToSingleviewPostProcess;\n}(PostProcess);\n\nexport { VRMultiviewToSingleviewPostProcess };","map":{"version":3,"mappings":";AAEA,SAASA,OAAT,QAAwB,kCAAxB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,OAAO,gDAAP;AACA,OAAO,2CAAP;AAEA;;;;;AAIA;AAAA;AAAA;AAAwDC;AASpD;;;;;;;;AAMA,8CAAYC,IAAZ,EAA0BC,MAA1B,EAA0CC,WAA1C,EAA6D;AAA7D,gBACIC,kBAAMH,IAAN,EAAY,yBAAZ,EAAuC,CAAC,YAAD,CAAvC,EAAuD,CAAC,kBAAD,CAAvD,EAA6EE,WAA7E,EAA0FD,MAA1F,EAAkGJ,OAAO,CAACO,qBAA1G,KAAgI,IADpI;;AAGIC,SAAI,CAACC,uBAAL,CAA6BC,GAA7B,CAAiC,aAAQ,CAAzC;;AACAF,SAAI,CAACG,iBAAL,CAAuBD,GAAvB,CAA2B,UAACE,MAAD,EAAe;AACtC,UAAIR,MAAM,CAACS,MAAP,CAAcC,YAAd,IAA8BV,MAAM,CAACS,MAAP,CAAcC,YAAd,CAA2BC,YAA7D,EAA2E;AACvEH,cAAM,CAACI,MAAP,CAAc,YAAd,EAA4B,CAA5B;AACH,OAFD,MAEO;AACHJ,cAAM,CAACI,MAAP,CAAc,YAAd,EAA4B,CAA5B;AACH;;AACDJ,YAAM,CAACK,UAAP,CAAkB,kBAAlB,EAAsCb,MAAM,CAACc,iBAA7C;AACH,KAPD;;;AAQH;AA1BD;;;;;;AAIOC,8DAAP;AACI,WAAO,oCAAP;AACH,GAFM;;AAuBX;AAAC,CA5BD,CAAwDlB,WAAxD","names":["Texture","PostProcess","__extends","name","camera","scaleFactor","_super","BILINEAR_SAMPLINGMODE","_this","onSizeChangedObservable","add","onApplyObservable","effect","_scene","activeCamera","isLeftCamera","setInt","setTexture","_multiviewTexture","VRMultiviewToSingleviewPostProcess"],"sourceRoot":"","sources":["../../../../../lts/core/generated/PostProcesses/vrMultiviewToSingleviewPostProcess.ts"],"sourcesContent":["import type { Camera } from \"../Cameras/camera\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { PostProcess } from \"./postProcess\";\r\n\r\nimport \"../Shaders/vrMultiviewToSingleview.fragment\";\r\nimport \"../Engines/Extensions/engine.multiview\";\r\n\r\n/**\r\n * VRMultiviewToSingleview used to convert multiview texture arrays to standard textures for scenarios such as webVR\r\n * This will not be used for webXR as it supports displaying texture arrays directly\r\n */\r\nexport class VRMultiviewToSingleviewPostProcess extends PostProcess {\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"VRMultiviewToSingleviewPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"VRMultiviewToSingleviewPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Initializes a VRMultiviewToSingleview\r\n     * @param name name of the post process\r\n     * @param camera camera to be applied to\r\n     * @param scaleFactor scaling factor to the size of the output texture\r\n     */\r\n    constructor(name: string, camera: Camera, scaleFactor: number) {\r\n        super(name, \"vrMultiviewToSingleview\", [\"imageIndex\"], [\"multiviewSampler\"], scaleFactor, camera, Texture.BILINEAR_SAMPLINGMODE);\r\n\r\n        this.onSizeChangedObservable.add(() => {});\r\n        this.onApplyObservable.add((effect: Effect) => {\r\n            if (camera._scene.activeCamera && camera._scene.activeCamera.isLeftCamera) {\r\n                effect.setInt(\"imageIndex\", 0);\r\n            } else {\r\n                effect.setInt(\"imageIndex\", 1);\r\n            }\r\n            effect.setTexture(\"multiviewSampler\", camera._multiviewTexture);\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}