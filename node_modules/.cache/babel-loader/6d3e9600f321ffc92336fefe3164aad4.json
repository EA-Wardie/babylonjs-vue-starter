{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { __assign } from \"tslib\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { ArcRotateCamera } from \"../Cameras/arcRotateCamera.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Color3, Color4 } from \"../Maths/math.color.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { BaseTexture } from \"../Materials/Textures/baseTexture.js\";\nimport { Texture } from \"../Materials/Textures/texture.js\";\nimport { MirrorTexture } from \"../Materials/Textures/mirrorTexture.js\";\nimport { CubeTexture } from \"../Materials/Textures/cubeTexture.js\";\nimport { BackgroundMaterial } from \"../Materials/Background/backgroundMaterial.js\";\nimport { CreatePlane } from \"../Meshes/Builders/planeBuilder.js\";\nimport { CreateBox } from \"../Meshes/Builders/boxBuilder.js\";\nimport { Plane } from \"../Maths/math.plane.js\";\n/**\n * The Environment helper class can be used to add a fully featured none expensive background to your scene.\n * It includes by default a skybox and a ground relying on the BackgroundMaterial.\n * It also helps with the default setup of your imageProcessing configuration.\n */\n\nvar EnvironmentHelper =\n/** @class */\nfunction () {\n  /**\n   * constructor\n   * @param options Defines the options we want to customize the helper\n   * @param scene The scene to add the material to\n   */\n  function EnvironmentHelper(options, scene) {\n    var _this = this;\n\n    this._errorHandler = function (message, exception) {\n      _this.onErrorObservable.notifyObservers({\n        message: message,\n        exception: exception\n      });\n    };\n\n    this._options = __assign(__assign({}, EnvironmentHelper._GetDefaultOptions()), options);\n    this._scene = scene;\n    this.onErrorObservable = new Observable();\n\n    this._setupBackground();\n\n    this._setupImageProcessing();\n  }\n  /**\n   * Creates the default options for the helper.\n   */\n\n\n  EnvironmentHelper._GetDefaultOptions = function () {\n    return {\n      createGround: true,\n      groundSize: 15,\n      groundTexture: this._GroundTextureCDNUrl,\n      groundColor: new Color3(0.2, 0.2, 0.3).toLinearSpace().scale(3),\n      groundOpacity: 0.9,\n      enableGroundShadow: true,\n      groundShadowLevel: 0.5,\n      enableGroundMirror: false,\n      groundMirrorSizeRatio: 0.3,\n      groundMirrorBlurKernel: 64,\n      groundMirrorAmount: 1,\n      groundMirrorFresnelWeight: 1,\n      groundMirrorFallOffDistance: 0,\n      groundMirrorTextureType: 0,\n      groundYBias: 0.00001,\n      createSkybox: true,\n      skyboxSize: 20,\n      skyboxTexture: this._SkyboxTextureCDNUrl,\n      skyboxColor: new Color3(0.2, 0.2, 0.3).toLinearSpace().scale(3),\n      backgroundYRotation: 0,\n      sizeAuto: true,\n      rootPosition: Vector3.Zero(),\n      setupImageProcessing: true,\n      environmentTexture: this._EnvironmentTextureCDNUrl,\n      cameraExposure: 0.8,\n      cameraContrast: 1.2,\n      toneMappingEnabled: true\n    };\n  };\n\n  Object.defineProperty(EnvironmentHelper.prototype, \"rootMesh\", {\n    /**\n     * Gets the root mesh created by the helper.\n     */\n    get: function get() {\n      return this._rootMesh;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EnvironmentHelper.prototype, \"skybox\", {\n    /**\n     * Gets the skybox created by the helper.\n     */\n    get: function get() {\n      return this._skybox;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EnvironmentHelper.prototype, \"skyboxTexture\", {\n    /**\n     * Gets the skybox texture created by the helper.\n     */\n    get: function get() {\n      return this._skyboxTexture;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EnvironmentHelper.prototype, \"skyboxMaterial\", {\n    /**\n     * Gets the skybox material created by the helper.\n     */\n    get: function get() {\n      return this._skyboxMaterial;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EnvironmentHelper.prototype, \"ground\", {\n    /**\n     * Gets the ground mesh created by the helper.\n     */\n    get: function get() {\n      return this._ground;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EnvironmentHelper.prototype, \"groundTexture\", {\n    /**\n     * Gets the ground texture created by the helper.\n     */\n    get: function get() {\n      return this._groundTexture;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EnvironmentHelper.prototype, \"groundMirror\", {\n    /**\n     * Gets the ground mirror created by the helper.\n     */\n    get: function get() {\n      return this._groundMirror;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EnvironmentHelper.prototype, \"groundMirrorRenderList\", {\n    /**\n     * Gets the ground mirror render list to helps pushing the meshes\n     * you wish in the ground reflection.\n     */\n    get: function get() {\n      if (this._groundMirror) {\n        return this._groundMirror.renderList;\n      }\n\n      return null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EnvironmentHelper.prototype, \"groundMaterial\", {\n    /**\n     * Gets the ground material created by the helper.\n     */\n    get: function get() {\n      return this._groundMaterial;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Updates the background according to the new options\n   * @param options\n   */\n\n  EnvironmentHelper.prototype.updateOptions = function (options) {\n    var newOptions = __assign(__assign({}, this._options), options);\n\n    if (this._ground && !newOptions.createGround) {\n      this._ground.dispose();\n\n      this._ground = null;\n    }\n\n    if (this._groundMaterial && !newOptions.createGround) {\n      this._groundMaterial.dispose();\n\n      this._groundMaterial = null;\n    }\n\n    if (this._groundTexture) {\n      if (this._options.groundTexture != newOptions.groundTexture) {\n        this._groundTexture.dispose();\n\n        this._groundTexture = null;\n      }\n    }\n\n    if (this._skybox && !newOptions.createSkybox) {\n      this._skybox.dispose();\n\n      this._skybox = null;\n    }\n\n    if (this._skyboxMaterial && !newOptions.createSkybox) {\n      this._skyboxMaterial.dispose();\n\n      this._skyboxMaterial = null;\n    }\n\n    if (this._skyboxTexture) {\n      if (this._options.skyboxTexture != newOptions.skyboxTexture) {\n        this._skyboxTexture.dispose();\n\n        this._skyboxTexture = null;\n      }\n    }\n\n    if (this._groundMirror && !newOptions.enableGroundMirror) {\n      this._groundMirror.dispose();\n\n      this._groundMirror = null;\n    }\n\n    if (this._scene.environmentTexture) {\n      if (this._options.environmentTexture != newOptions.environmentTexture) {\n        this._scene.environmentTexture.dispose();\n      }\n    }\n\n    this._options = newOptions;\n\n    this._setupBackground();\n\n    this._setupImageProcessing();\n  };\n  /**\n   * Sets the primary color of all the available elements.\n   * @param color the main color to affect to the ground and the background\n   */\n\n\n  EnvironmentHelper.prototype.setMainColor = function (color) {\n    if (this.groundMaterial) {\n      this.groundMaterial.primaryColor = color;\n    }\n\n    if (this.skyboxMaterial) {\n      this.skyboxMaterial.primaryColor = color;\n    }\n\n    if (this.groundMirror) {\n      this.groundMirror.clearColor = new Color4(color.r, color.g, color.b, 1.0);\n    }\n  };\n  /**\n   * Setup the image processing according to the specified options.\n   */\n\n\n  EnvironmentHelper.prototype._setupImageProcessing = function () {\n    if (this._options.setupImageProcessing) {\n      this._scene.imageProcessingConfiguration.contrast = this._options.cameraContrast;\n      this._scene.imageProcessingConfiguration.exposure = this._options.cameraExposure;\n      this._scene.imageProcessingConfiguration.toneMappingEnabled = this._options.toneMappingEnabled;\n\n      this._setupEnvironmentTexture();\n    }\n  };\n  /**\n   * Setup the environment texture according to the specified options.\n   */\n\n\n  EnvironmentHelper.prototype._setupEnvironmentTexture = function () {\n    if (this._scene.environmentTexture) {\n      return;\n    }\n\n    if (this._options.environmentTexture instanceof BaseTexture) {\n      this._scene.environmentTexture = this._options.environmentTexture;\n      return;\n    }\n\n    var environmentTexture = CubeTexture.CreateFromPrefilteredData(this._options.environmentTexture, this._scene);\n    this._scene.environmentTexture = environmentTexture;\n  };\n  /**\n   * Setup the background according to the specified options.\n   */\n\n\n  EnvironmentHelper.prototype._setupBackground = function () {\n    if (!this._rootMesh) {\n      this._rootMesh = new Mesh(\"BackgroundHelper\", this._scene);\n    }\n\n    this._rootMesh.rotation.y = this._options.backgroundYRotation;\n\n    var sceneSize = this._getSceneSize();\n\n    if (this._options.createGround) {\n      this._setupGround(sceneSize);\n\n      this._setupGroundMaterial();\n\n      this._setupGroundDiffuseTexture();\n\n      if (this._options.enableGroundMirror) {\n        this._setupGroundMirrorTexture(sceneSize);\n      }\n\n      this._setupMirrorInGroundMaterial();\n    }\n\n    if (this._options.createSkybox) {\n      this._setupSkybox(sceneSize);\n\n      this._setupSkyboxMaterial();\n\n      this._setupSkyboxReflectionTexture();\n    }\n\n    this._rootMesh.position.x = sceneSize.rootPosition.x;\n    this._rootMesh.position.z = sceneSize.rootPosition.z;\n    this._rootMesh.position.y = sceneSize.rootPosition.y;\n  };\n  /**\n   * Get the scene sizes according to the setup.\n   */\n\n\n  EnvironmentHelper.prototype._getSceneSize = function () {\n    var _this = this;\n\n    var groundSize = this._options.groundSize;\n    var skyboxSize = this._options.skyboxSize;\n    var rootPosition = this._options.rootPosition;\n\n    if (!this._scene.meshes || this._scene.meshes.length === 1) {\n      // 1 only means the root of the helper.\n      return {\n        groundSize: groundSize,\n        skyboxSize: skyboxSize,\n        rootPosition: rootPosition\n      };\n    }\n\n    var sceneExtends = this._scene.getWorldExtends(function (mesh) {\n      return mesh !== _this._ground && mesh !== _this._rootMesh && mesh !== _this._skybox;\n    });\n\n    var sceneDiagonal = sceneExtends.max.subtract(sceneExtends.min);\n\n    if (this._options.sizeAuto) {\n      if (this._scene.activeCamera instanceof ArcRotateCamera && this._scene.activeCamera.upperRadiusLimit) {\n        groundSize = this._scene.activeCamera.upperRadiusLimit * 2;\n        skyboxSize = groundSize;\n      }\n\n      var sceneDiagonalLenght = sceneDiagonal.length();\n\n      if (sceneDiagonalLenght > groundSize) {\n        groundSize = sceneDiagonalLenght * 2;\n        skyboxSize = groundSize;\n      } // 10 % bigger.\n\n\n      groundSize *= 1.1;\n      skyboxSize *= 1.5;\n      rootPosition = sceneExtends.min.add(sceneDiagonal.scale(0.5));\n      rootPosition.y = sceneExtends.min.y - this._options.groundYBias;\n    }\n\n    return {\n      groundSize: groundSize,\n      skyboxSize: skyboxSize,\n      rootPosition: rootPosition\n    };\n  };\n  /**\n   * Setup the ground according to the specified options.\n   * @param sceneSize\n   */\n\n\n  EnvironmentHelper.prototype._setupGround = function (sceneSize) {\n    var _this = this;\n\n    if (!this._ground || this._ground.isDisposed()) {\n      this._ground = CreatePlane(\"BackgroundPlane\", {\n        size: sceneSize.groundSize\n      }, this._scene);\n      this._ground.rotation.x = Math.PI / 2; // Face up by default.\n\n      this._ground.parent = this._rootMesh;\n\n      this._ground.onDisposeObservable.add(function () {\n        _this._ground = null;\n      });\n    }\n\n    this._ground.receiveShadows = this._options.enableGroundShadow;\n  };\n  /**\n   * Setup the ground material according to the specified options.\n   */\n\n\n  EnvironmentHelper.prototype._setupGroundMaterial = function () {\n    if (!this._groundMaterial) {\n      this._groundMaterial = new BackgroundMaterial(\"BackgroundPlaneMaterial\", this._scene);\n    }\n\n    this._groundMaterial.alpha = this._options.groundOpacity;\n    this._groundMaterial.alphaMode = 8;\n    this._groundMaterial.shadowLevel = this._options.groundShadowLevel;\n    this._groundMaterial.primaryColor = this._options.groundColor;\n    this._groundMaterial.useRGBColor = false;\n    this._groundMaterial.enableNoise = true;\n\n    if (this._ground) {\n      this._ground.material = this._groundMaterial;\n    }\n  };\n  /**\n   * Setup the ground diffuse texture according to the specified options.\n   */\n\n\n  EnvironmentHelper.prototype._setupGroundDiffuseTexture = function () {\n    if (!this._groundMaterial) {\n      return;\n    }\n\n    if (this._groundTexture) {\n      return;\n    }\n\n    if (this._options.groundTexture instanceof BaseTexture) {\n      this._groundMaterial.diffuseTexture = this._options.groundTexture;\n      return;\n    }\n\n    this._groundTexture = new Texture(this._options.groundTexture, this._scene, undefined, undefined, undefined, undefined, this._errorHandler);\n    this._groundTexture.gammaSpace = false;\n    this._groundTexture.hasAlpha = true;\n    this._groundMaterial.diffuseTexture = this._groundTexture;\n  };\n  /**\n   * Setup the ground mirror texture according to the specified options.\n   * @param sceneSize\n   */\n\n\n  EnvironmentHelper.prototype._setupGroundMirrorTexture = function (sceneSize) {\n    var wrapping = Texture.CLAMP_ADDRESSMODE;\n\n    if (!this._groundMirror) {\n      this._groundMirror = new MirrorTexture(\"BackgroundPlaneMirrorTexture\", {\n        ratio: this._options.groundMirrorSizeRatio\n      }, this._scene, false, this._options.groundMirrorTextureType, Texture.BILINEAR_SAMPLINGMODE, true);\n      this._groundMirror.mirrorPlane = new Plane(0, -1, 0, sceneSize.rootPosition.y);\n      this._groundMirror.anisotropicFilteringLevel = 1;\n      this._groundMirror.wrapU = wrapping;\n      this._groundMirror.wrapV = wrapping;\n\n      if (this._groundMirror.renderList) {\n        for (var i = 0; i < this._scene.meshes.length; i++) {\n          var mesh = this._scene.meshes[i];\n\n          if (mesh !== this._ground && mesh !== this._skybox && mesh !== this._rootMesh) {\n            this._groundMirror.renderList.push(mesh);\n          }\n        }\n      }\n    }\n\n    var gammaGround = this._options.groundColor.toGammaSpace();\n\n    this._groundMirror.clearColor = new Color4(gammaGround.r, gammaGround.g, gammaGround.b, 1);\n    this._groundMirror.adaptiveBlurKernel = this._options.groundMirrorBlurKernel;\n  };\n  /**\n   * Setup the ground to receive the mirror texture.\n   */\n\n\n  EnvironmentHelper.prototype._setupMirrorInGroundMaterial = function () {\n    if (this._groundMaterial) {\n      this._groundMaterial.reflectionTexture = this._groundMirror;\n      this._groundMaterial.reflectionFresnel = true;\n      this._groundMaterial.reflectionAmount = this._options.groundMirrorAmount;\n      this._groundMaterial.reflectionStandardFresnelWeight = this._options.groundMirrorFresnelWeight;\n      this._groundMaterial.reflectionFalloffDistance = this._options.groundMirrorFallOffDistance;\n    }\n  };\n  /**\n   * Setup the skybox according to the specified options.\n   * @param sceneSize\n   */\n\n\n  EnvironmentHelper.prototype._setupSkybox = function (sceneSize) {\n    var _this = this;\n\n    if (!this._skybox || this._skybox.isDisposed()) {\n      this._skybox = CreateBox(\"BackgroundSkybox\", {\n        size: sceneSize.skyboxSize,\n        sideOrientation: Mesh.BACKSIDE\n      }, this._scene);\n\n      this._skybox.onDisposeObservable.add(function () {\n        _this._skybox = null;\n      });\n    }\n\n    this._skybox.parent = this._rootMesh;\n  };\n  /**\n   * Setup the skybox material according to the specified options.\n   */\n\n\n  EnvironmentHelper.prototype._setupSkyboxMaterial = function () {\n    if (!this._skybox) {\n      return;\n    }\n\n    if (!this._skyboxMaterial) {\n      this._skyboxMaterial = new BackgroundMaterial(\"BackgroundSkyboxMaterial\", this._scene);\n    }\n\n    this._skyboxMaterial.useRGBColor = false;\n    this._skyboxMaterial.primaryColor = this._options.skyboxColor;\n    this._skyboxMaterial.enableNoise = true;\n    this._skybox.material = this._skyboxMaterial;\n  };\n  /**\n   * Setup the skybox reflection texture according to the specified options.\n   */\n\n\n  EnvironmentHelper.prototype._setupSkyboxReflectionTexture = function () {\n    if (!this._skyboxMaterial) {\n      return;\n    }\n\n    if (this._skyboxTexture) {\n      return;\n    }\n\n    if (this._options.skyboxTexture instanceof BaseTexture) {\n      this._skyboxMaterial.reflectionTexture = this._options.skyboxTexture;\n      return;\n    }\n\n    this._skyboxTexture = new CubeTexture(this._options.skyboxTexture, this._scene, undefined, undefined, undefined, undefined, this._errorHandler);\n    this._skyboxTexture.coordinatesMode = Texture.SKYBOX_MODE;\n    this._skyboxTexture.gammaSpace = false;\n    this._skyboxMaterial.reflectionTexture = this._skyboxTexture;\n  };\n  /**\n   * Dispose all the elements created by the Helper.\n   */\n\n\n  EnvironmentHelper.prototype.dispose = function () {\n    if (this._groundMaterial) {\n      this._groundMaterial.dispose(true, true);\n    }\n\n    if (this._skyboxMaterial) {\n      this._skyboxMaterial.dispose(true, true);\n    }\n\n    this._rootMesh.dispose(false);\n  };\n  /**\n   * Default ground texture URL.\n   */\n\n\n  EnvironmentHelper._GroundTextureCDNUrl = \"https://assets.babylonjs.com/environments/backgroundGround.png\";\n  /**\n   * Default skybox texture URL.\n   */\n\n  EnvironmentHelper._SkyboxTextureCDNUrl = \"https://assets.babylonjs.com/environments/backgroundSkybox.dds\";\n  /**\n   * Default environment texture URL.\n   */\n\n  EnvironmentHelper._EnvironmentTextureCDNUrl = \"https://assets.babylonjs.com/environments/environmentSpecular.env\";\n  return EnvironmentHelper;\n}();\n\nexport { EnvironmentHelper };","map":{"version":3,"mappings":"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","names":["Observable","ArcRotateCamera","Vector3","Color3","Color4","Mesh","BaseTexture","Texture","MirrorTexture","CubeTexture","BackgroundMaterial","CreatePlane","CreateBox","Plane","options","scene","message","exception","_this","onErrorObservable","notifyObservers","_options","__assign","EnvironmentHelper","_GetDefaultOptions","_scene","_setupBackground","_setupImageProcessing","createGround","groundSize","groundTexture","_GroundTextureCDNUrl","groundColor","toLinearSpace","scale","groundOpacity","enableGroundShadow","groundShadowLevel","enableGroundMirror","groundMirrorSizeRatio","groundMirrorBlurKernel","groundMirrorAmount","groundMirrorFresnelWeight","groundMirrorFallOffDistance","groundMirrorTextureType","groundYBias","createSkybox","skyboxSize","skyboxTexture","_SkyboxTextureCDNUrl","skyboxColor","backgroundYRotation","sizeAuto","rootPosition","Zero","setupImageProcessing","environmentTexture","_EnvironmentTextureCDNUrl","cameraExposure","cameraContrast","toneMappingEnabled","Object","_rootMesh","_skybox","_skyboxTexture","_skyboxMaterial","_ground","_groundTexture","_groundMirror","renderList","_groundMaterial","newOptions","dispose","color","groundMaterial","primaryColor","skyboxMaterial","groundMirror","clearColor","r","g","b","imageProcessingConfiguration","contrast","exposure","_setupEnvironmentTexture","CreateFromPrefilteredData","rotation","y","sceneSize","_getSceneSize","_setupGround","_setupGroundMaterial","_setupGroundDiffuseTexture","_setupGroundMirrorTexture","_setupMirrorInGroundMaterial","_setupSkybox","_setupSkyboxMaterial","_setupSkyboxReflectionTexture","position","x","z","meshes","length","sceneExtends","getWorldExtends","mesh","sceneDiagonal","max","subtract","min","activeCamera","upperRadiusLimit","sceneDiagonalLenght","add","isDisposed","size","Math","PI","parent","onDisposeObservable","receiveShadows","alpha","alphaMode","shadowLevel","useRGBColor","enableNoise","material","diffuseTexture","undefined","_errorHandler","gammaSpace","hasAlpha","wrapping","CLAMP_ADDRESSMODE","ratio","BILINEAR_SAMPLINGMODE","mirrorPlane","anisotropicFilteringLevel","wrapU","wrapV","i","push","gammaGround","toGammaSpace","adaptiveBlurKernel","reflectionTexture","reflectionFresnel","reflectionAmount","reflectionStandardFresnelWeight","reflectionFalloffDistance","sideOrientation","BACKSIDE","coordinatesMode","SKYBOX_MODE"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Helpers/environmentHelper.ts"],"sourcesContent":["import { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport { ArcRotateCamera } from \"../Cameras/arcRotateCamera\";\r\nimport type { Scene } from \"../scene\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Color3, Color4 } from \"../Maths/math.color\";\r\nimport type { AbstractMesh } from \"../Meshes/abstractMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { Texture } from \"../Materials/Textures/texture\";\r\nimport { MirrorTexture } from \"../Materials/Textures/mirrorTexture\";\r\nimport { CubeTexture } from \"../Materials/Textures/cubeTexture\";\r\nimport { BackgroundMaterial } from \"../Materials/Background/backgroundMaterial\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport { CreatePlane } from \"../Meshes/Builders/planeBuilder\";\r\nimport { CreateBox } from \"../Meshes/Builders/boxBuilder\";\r\nimport { Plane } from \"../Maths/math.plane\";\r\n\r\n/**\r\n * Represents the different options available during the creation of\r\n * a Environment helper.\r\n *\r\n * This can control the default ground, skybox and image processing setup of your scene.\r\n */\r\nexport interface IEnvironmentHelperOptions {\r\n    /**\r\n     * Specifies whether or not to create a ground.\r\n     * True by default.\r\n     */\r\n    createGround: boolean;\r\n    /**\r\n     * Specifies the ground size.\r\n     * 15 by default.\r\n     */\r\n    groundSize: number;\r\n    /**\r\n     * The texture used on the ground for the main color.\r\n     * Comes from the BabylonJS CDN by default.\r\n     *\r\n     * Remarks: Can be either a texture or a url.\r\n     */\r\n    groundTexture: string | BaseTexture;\r\n    /**\r\n     * The color mixed in the ground texture by default.\r\n     * BabylonJS clearColor by default.\r\n     */\r\n    groundColor: Color3;\r\n    /**\r\n     * Specifies the ground opacity.\r\n     * 1 by default.\r\n     */\r\n    groundOpacity: number;\r\n    /**\r\n     * Enables the ground to receive shadows.\r\n     * True by default.\r\n     */\r\n    enableGroundShadow: boolean;\r\n    /**\r\n     * Helps preventing the shadow to be fully black on the ground.\r\n     * 0.5 by default.\r\n     */\r\n    groundShadowLevel: number;\r\n    /**\r\n     * Creates a mirror texture attach to the ground.\r\n     * false by default.\r\n     */\r\n    enableGroundMirror: boolean;\r\n    /**\r\n     * Specifies the ground mirror size ratio.\r\n     * 0.3 by default as the default kernel is 64.\r\n     */\r\n    groundMirrorSizeRatio: number;\r\n    /**\r\n     * Specifies the ground mirror blur kernel size.\r\n     * 64 by default.\r\n     */\r\n    groundMirrorBlurKernel: number;\r\n    /**\r\n     * Specifies the ground mirror visibility amount.\r\n     * 1 by default\r\n     */\r\n    groundMirrorAmount: number;\r\n    /**\r\n     * Specifies the ground mirror reflectance weight.\r\n     * This uses the standard weight of the background material to setup the fresnel effect\r\n     * of the mirror.\r\n     * 1 by default.\r\n     */\r\n    groundMirrorFresnelWeight: number;\r\n    /**\r\n     * Specifies the ground mirror Falloff distance.\r\n     * This can helps reducing the size of the reflection.\r\n     * 0 by Default.\r\n     */\r\n    groundMirrorFallOffDistance: number;\r\n    /**\r\n     * Specifies the ground mirror texture type.\r\n     * Unsigned Int by Default.\r\n     */\r\n    groundMirrorTextureType: number;\r\n    /**\r\n     * Specifies a bias applied to the ground vertical position to prevent z-fighting with\r\n     * the shown objects.\r\n     */\r\n    groundYBias: number;\r\n\r\n    /**\r\n     * Specifies whether or not to create a skybox.\r\n     * True by default.\r\n     */\r\n    createSkybox: boolean;\r\n    /**\r\n     * Specifies the skybox size.\r\n     * 20 by default.\r\n     */\r\n    skyboxSize: number;\r\n    /**\r\n     * The texture used on the skybox for the main color.\r\n     * Comes from the BabylonJS CDN by default.\r\n     *\r\n     * Remarks: Can be either a texture or a url.\r\n     */\r\n    skyboxTexture: string | BaseTexture;\r\n    /**\r\n     * The color mixed in the skybox texture by default.\r\n     * BabylonJS clearColor by default.\r\n     */\r\n    skyboxColor: Color3;\r\n\r\n    /**\r\n     * The background rotation around the Y axis of the scene.\r\n     * This helps aligning the key lights of your scene with the background.\r\n     * 0 by default.\r\n     */\r\n    backgroundYRotation: number;\r\n\r\n    /**\r\n     * Compute automatically the size of the elements to best fit with the scene.\r\n     */\r\n    sizeAuto: boolean;\r\n\r\n    /**\r\n     * Default position of the rootMesh if autoSize is not true.\r\n     */\r\n    rootPosition: Vector3;\r\n\r\n    /**\r\n     * Sets up the image processing in the scene.\r\n     * true by default.\r\n     */\r\n    setupImageProcessing: boolean;\r\n\r\n    /**\r\n     * The texture used as your environment texture in the scene.\r\n     * Comes from the BabylonJS CDN by default and in use if setupImageProcessing is true.\r\n     *\r\n     * Remarks: Can be either a texture or a url.\r\n     */\r\n    environmentTexture: string | BaseTexture;\r\n\r\n    /**\r\n     * The value of the exposure to apply to the scene.\r\n     * 0.6 by default if setupImageProcessing is true.\r\n     */\r\n    cameraExposure: number;\r\n\r\n    /**\r\n     * The value of the contrast to apply to the scene.\r\n     * 1.6 by default if setupImageProcessing is true.\r\n     */\r\n    cameraContrast: number;\r\n\r\n    /**\r\n     * Specifies whether or not tonemapping should be enabled in the scene.\r\n     * true by default if setupImageProcessing is true.\r\n     */\r\n    toneMappingEnabled: boolean;\r\n}\r\n\r\ninterface ISceneSize {\r\n    groundSize: number;\r\n    skyboxSize: number;\r\n    rootPosition: Vector3;\r\n}\r\n\r\n/**\r\n * The Environment helper class can be used to add a fully featured none expensive background to your scene.\r\n * It includes by default a skybox and a ground relying on the BackgroundMaterial.\r\n * It also helps with the default setup of your imageProcessing configuration.\r\n */\r\nexport class EnvironmentHelper {\r\n    /**\r\n     * Default ground texture URL.\r\n     */\r\n    private static _GroundTextureCDNUrl = \"https://assets.babylonjs.com/environments/backgroundGround.png\";\r\n\r\n    /**\r\n     * Default skybox texture URL.\r\n     */\r\n    private static _SkyboxTextureCDNUrl = \"https://assets.babylonjs.com/environments/backgroundSkybox.dds\";\r\n\r\n    /**\r\n     * Default environment texture URL.\r\n     */\r\n    private static _EnvironmentTextureCDNUrl = \"https://assets.babylonjs.com/environments/environmentSpecular.env\";\r\n\r\n    /**\r\n     * Creates the default options for the helper.\r\n     */\r\n    private static _GetDefaultOptions(): IEnvironmentHelperOptions {\r\n        return {\r\n            createGround: true,\r\n            groundSize: 15,\r\n            groundTexture: this._GroundTextureCDNUrl,\r\n            groundColor: new Color3(0.2, 0.2, 0.3).toLinearSpace().scale(3),\r\n            groundOpacity: 0.9,\r\n            enableGroundShadow: true,\r\n            groundShadowLevel: 0.5,\r\n\r\n            enableGroundMirror: false,\r\n            groundMirrorSizeRatio: 0.3,\r\n            groundMirrorBlurKernel: 64,\r\n            groundMirrorAmount: 1,\r\n            groundMirrorFresnelWeight: 1,\r\n            groundMirrorFallOffDistance: 0,\r\n            groundMirrorTextureType: Constants.TEXTURETYPE_UNSIGNED_INT,\r\n\r\n            groundYBias: 0.00001,\r\n\r\n            createSkybox: true,\r\n            skyboxSize: 20,\r\n            skyboxTexture: this._SkyboxTextureCDNUrl,\r\n            skyboxColor: new Color3(0.2, 0.2, 0.3).toLinearSpace().scale(3),\r\n\r\n            backgroundYRotation: 0,\r\n            sizeAuto: true,\r\n            rootPosition: Vector3.Zero(),\r\n\r\n            setupImageProcessing: true,\r\n            environmentTexture: this._EnvironmentTextureCDNUrl,\r\n            cameraExposure: 0.8,\r\n            cameraContrast: 1.2,\r\n            toneMappingEnabled: true,\r\n        };\r\n    }\r\n\r\n    private _rootMesh: Mesh;\r\n    /**\r\n     * Gets the root mesh created by the helper.\r\n     */\r\n    public get rootMesh(): Mesh {\r\n        return this._rootMesh;\r\n    }\r\n\r\n    private _skybox: Nullable<Mesh>;\r\n    /**\r\n     * Gets the skybox created by the helper.\r\n     */\r\n    public get skybox(): Nullable<Mesh> {\r\n        return this._skybox;\r\n    }\r\n\r\n    private _skyboxTexture: Nullable<BaseTexture>;\r\n    /**\r\n     * Gets the skybox texture created by the helper.\r\n     */\r\n    public get skyboxTexture(): Nullable<BaseTexture> {\r\n        return this._skyboxTexture;\r\n    }\r\n\r\n    private _skyboxMaterial: Nullable<BackgroundMaterial>;\r\n    /**\r\n     * Gets the skybox material created by the helper.\r\n     */\r\n    public get skyboxMaterial(): Nullable<BackgroundMaterial> {\r\n        return this._skyboxMaterial;\r\n    }\r\n\r\n    private _ground: Nullable<Mesh>;\r\n    /**\r\n     * Gets the ground mesh created by the helper.\r\n     */\r\n    public get ground(): Nullable<Mesh> {\r\n        return this._ground;\r\n    }\r\n\r\n    private _groundTexture: Nullable<BaseTexture>;\r\n    /**\r\n     * Gets the ground texture created by the helper.\r\n     */\r\n    public get groundTexture(): Nullable<BaseTexture> {\r\n        return this._groundTexture;\r\n    }\r\n\r\n    private _groundMirror: Nullable<MirrorTexture>;\r\n    /**\r\n     * Gets the ground mirror created by the helper.\r\n     */\r\n    public get groundMirror(): Nullable<MirrorTexture> {\r\n        return this._groundMirror;\r\n    }\r\n\r\n    /**\r\n     * Gets the ground mirror render list to helps pushing the meshes\r\n     * you wish in the ground reflection.\r\n     */\r\n    public get groundMirrorRenderList(): Nullable<AbstractMesh[]> {\r\n        if (this._groundMirror) {\r\n            return this._groundMirror.renderList;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private _groundMaterial: Nullable<BackgroundMaterial>;\r\n    /**\r\n     * Gets the ground material created by the helper.\r\n     */\r\n    public get groundMaterial(): Nullable<BackgroundMaterial> {\r\n        return this._groundMaterial;\r\n    }\r\n\r\n    /**\r\n     * Stores the creation options.\r\n     */\r\n    private readonly _scene: Scene;\r\n    private _options: IEnvironmentHelperOptions;\r\n\r\n    /**\r\n     * This observable will be notified with any error during the creation of the environment,\r\n     * mainly texture creation errors.\r\n     */\r\n    public onErrorObservable: Observable<{ message?: string; exception?: any }>;\r\n\r\n    /**\r\n     * constructor\r\n     * @param options Defines the options we want to customize the helper\r\n     * @param scene The scene to add the material to\r\n     */\r\n    constructor(options: Partial<IEnvironmentHelperOptions>, scene: Scene) {\r\n        this._options = {\r\n            ...EnvironmentHelper._GetDefaultOptions(),\r\n            ...options,\r\n        };\r\n        this._scene = scene;\r\n        this.onErrorObservable = new Observable();\r\n\r\n        this._setupBackground();\r\n        this._setupImageProcessing();\r\n    }\r\n\r\n    /**\r\n     * Updates the background according to the new options\r\n     * @param options\r\n     */\r\n    public updateOptions(options: Partial<IEnvironmentHelperOptions>) {\r\n        const newOptions = {\r\n            ...this._options,\r\n            ...options,\r\n        };\r\n\r\n        if (this._ground && !newOptions.createGround) {\r\n            this._ground.dispose();\r\n            this._ground = null;\r\n        }\r\n\r\n        if (this._groundMaterial && !newOptions.createGround) {\r\n            this._groundMaterial.dispose();\r\n            this._groundMaterial = null;\r\n        }\r\n\r\n        if (this._groundTexture) {\r\n            if (this._options.groundTexture != newOptions.groundTexture) {\r\n                this._groundTexture.dispose();\r\n                this._groundTexture = null;\r\n            }\r\n        }\r\n\r\n        if (this._skybox && !newOptions.createSkybox) {\r\n            this._skybox.dispose();\r\n            this._skybox = null;\r\n        }\r\n\r\n        if (this._skyboxMaterial && !newOptions.createSkybox) {\r\n            this._skyboxMaterial.dispose();\r\n            this._skyboxMaterial = null;\r\n        }\r\n\r\n        if (this._skyboxTexture) {\r\n            if (this._options.skyboxTexture != newOptions.skyboxTexture) {\r\n                this._skyboxTexture.dispose();\r\n                this._skyboxTexture = null;\r\n            }\r\n        }\r\n\r\n        if (this._groundMirror && !newOptions.enableGroundMirror) {\r\n            this._groundMirror.dispose();\r\n            this._groundMirror = null;\r\n        }\r\n\r\n        if (this._scene.environmentTexture) {\r\n            if (this._options.environmentTexture != newOptions.environmentTexture) {\r\n                this._scene.environmentTexture.dispose();\r\n            }\r\n        }\r\n\r\n        this._options = newOptions;\r\n\r\n        this._setupBackground();\r\n        this._setupImageProcessing();\r\n    }\r\n\r\n    /**\r\n     * Sets the primary color of all the available elements.\r\n     * @param color the main color to affect to the ground and the background\r\n     */\r\n    public setMainColor(color: Color3): void {\r\n        if (this.groundMaterial) {\r\n            this.groundMaterial.primaryColor = color;\r\n        }\r\n\r\n        if (this.skyboxMaterial) {\r\n            this.skyboxMaterial.primaryColor = color;\r\n        }\r\n\r\n        if (this.groundMirror) {\r\n            this.groundMirror.clearColor = new Color4(color.r, color.g, color.b, 1.0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup the image processing according to the specified options.\r\n     */\r\n    private _setupImageProcessing(): void {\r\n        if (this._options.setupImageProcessing) {\r\n            this._scene.imageProcessingConfiguration.contrast = this._options.cameraContrast;\r\n            this._scene.imageProcessingConfiguration.exposure = this._options.cameraExposure;\r\n            this._scene.imageProcessingConfiguration.toneMappingEnabled = this._options.toneMappingEnabled;\r\n            this._setupEnvironmentTexture();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup the environment texture according to the specified options.\r\n     */\r\n    private _setupEnvironmentTexture(): void {\r\n        if (this._scene.environmentTexture) {\r\n            return;\r\n        }\r\n\r\n        if (this._options.environmentTexture instanceof BaseTexture) {\r\n            this._scene.environmentTexture = this._options.environmentTexture;\r\n            return;\r\n        }\r\n\r\n        const environmentTexture = CubeTexture.CreateFromPrefilteredData(this._options.environmentTexture, this._scene);\r\n        this._scene.environmentTexture = environmentTexture;\r\n    }\r\n\r\n    /**\r\n     * Setup the background according to the specified options.\r\n     */\r\n    private _setupBackground(): void {\r\n        if (!this._rootMesh) {\r\n            this._rootMesh = new Mesh(\"BackgroundHelper\", this._scene);\r\n        }\r\n        this._rootMesh.rotation.y = this._options.backgroundYRotation;\r\n\r\n        const sceneSize = this._getSceneSize();\r\n        if (this._options.createGround) {\r\n            this._setupGround(sceneSize);\r\n            this._setupGroundMaterial();\r\n            this._setupGroundDiffuseTexture();\r\n\r\n            if (this._options.enableGroundMirror) {\r\n                this._setupGroundMirrorTexture(sceneSize);\r\n            }\r\n            this._setupMirrorInGroundMaterial();\r\n        }\r\n\r\n        if (this._options.createSkybox) {\r\n            this._setupSkybox(sceneSize);\r\n            this._setupSkyboxMaterial();\r\n            this._setupSkyboxReflectionTexture();\r\n        }\r\n\r\n        this._rootMesh.position.x = sceneSize.rootPosition.x;\r\n        this._rootMesh.position.z = sceneSize.rootPosition.z;\r\n        this._rootMesh.position.y = sceneSize.rootPosition.y;\r\n    }\r\n\r\n    /**\r\n     * Get the scene sizes according to the setup.\r\n     */\r\n    private _getSceneSize(): ISceneSize {\r\n        let groundSize = this._options.groundSize;\r\n        let skyboxSize = this._options.skyboxSize;\r\n        let rootPosition = this._options.rootPosition;\r\n        if (!this._scene.meshes || this._scene.meshes.length === 1) {\r\n            // 1 only means the root of the helper.\r\n            return { groundSize, skyboxSize, rootPosition };\r\n        }\r\n\r\n        const sceneExtends = this._scene.getWorldExtends((mesh) => {\r\n            return mesh !== this._ground && mesh !== this._rootMesh && mesh !== this._skybox;\r\n        });\r\n        const sceneDiagonal = sceneExtends.max.subtract(sceneExtends.min);\r\n\r\n        if (this._options.sizeAuto) {\r\n            if (this._scene.activeCamera instanceof ArcRotateCamera && this._scene.activeCamera.upperRadiusLimit) {\r\n                groundSize = this._scene.activeCamera.upperRadiusLimit * 2;\r\n                skyboxSize = groundSize;\r\n            }\r\n\r\n            const sceneDiagonalLenght = sceneDiagonal.length();\r\n            if (sceneDiagonalLenght > groundSize) {\r\n                groundSize = sceneDiagonalLenght * 2;\r\n                skyboxSize = groundSize;\r\n            }\r\n\r\n            // 10 % bigger.\r\n            groundSize *= 1.1;\r\n            skyboxSize *= 1.5;\r\n            rootPosition = sceneExtends.min.add(sceneDiagonal.scale(0.5));\r\n            rootPosition.y = sceneExtends.min.y - this._options.groundYBias;\r\n        }\r\n\r\n        return { groundSize, skyboxSize, rootPosition };\r\n    }\r\n\r\n    /**\r\n     * Setup the ground according to the specified options.\r\n     * @param sceneSize\r\n     */\r\n    private _setupGround(sceneSize: ISceneSize): void {\r\n        if (!this._ground || this._ground.isDisposed()) {\r\n            this._ground = CreatePlane(\"BackgroundPlane\", { size: sceneSize.groundSize }, this._scene);\r\n            this._ground.rotation.x = Math.PI / 2; // Face up by default.\r\n            this._ground.parent = this._rootMesh;\r\n            this._ground.onDisposeObservable.add(() => {\r\n                this._ground = null;\r\n            });\r\n        }\r\n\r\n        this._ground.receiveShadows = this._options.enableGroundShadow;\r\n    }\r\n\r\n    /**\r\n     * Setup the ground material according to the specified options.\r\n     */\r\n    private _setupGroundMaterial(): void {\r\n        if (!this._groundMaterial) {\r\n            this._groundMaterial = new BackgroundMaterial(\"BackgroundPlaneMaterial\", this._scene);\r\n        }\r\n        this._groundMaterial.alpha = this._options.groundOpacity;\r\n        this._groundMaterial.alphaMode = Constants.ALPHA_PREMULTIPLIED_PORTERDUFF;\r\n        this._groundMaterial.shadowLevel = this._options.groundShadowLevel;\r\n        this._groundMaterial.primaryColor = this._options.groundColor;\r\n        this._groundMaterial.useRGBColor = false;\r\n        this._groundMaterial.enableNoise = true;\r\n\r\n        if (this._ground) {\r\n            this._ground.material = this._groundMaterial;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup the ground diffuse texture according to the specified options.\r\n     */\r\n    private _setupGroundDiffuseTexture(): void {\r\n        if (!this._groundMaterial) {\r\n            return;\r\n        }\r\n\r\n        if (this._groundTexture) {\r\n            return;\r\n        }\r\n\r\n        if (this._options.groundTexture instanceof BaseTexture) {\r\n            this._groundMaterial.diffuseTexture = this._options.groundTexture;\r\n            return;\r\n        }\r\n\r\n        this._groundTexture = new Texture(this._options.groundTexture, this._scene, undefined, undefined, undefined, undefined, this._errorHandler);\r\n        this._groundTexture.gammaSpace = false;\r\n        this._groundTexture.hasAlpha = true;\r\n        this._groundMaterial.diffuseTexture = this._groundTexture;\r\n    }\r\n\r\n    /**\r\n     * Setup the ground mirror texture according to the specified options.\r\n     * @param sceneSize\r\n     */\r\n    private _setupGroundMirrorTexture(sceneSize: ISceneSize): void {\r\n        const wrapping = Texture.CLAMP_ADDRESSMODE;\r\n        if (!this._groundMirror) {\r\n            this._groundMirror = new MirrorTexture(\r\n                \"BackgroundPlaneMirrorTexture\",\r\n                { ratio: this._options.groundMirrorSizeRatio },\r\n                this._scene,\r\n                false,\r\n                this._options.groundMirrorTextureType,\r\n                Texture.BILINEAR_SAMPLINGMODE,\r\n                true\r\n            );\r\n            this._groundMirror.mirrorPlane = new Plane(0, -1, 0, sceneSize.rootPosition.y);\r\n            this._groundMirror.anisotropicFilteringLevel = 1;\r\n            this._groundMirror.wrapU = wrapping;\r\n            this._groundMirror.wrapV = wrapping;\r\n\r\n            if (this._groundMirror.renderList) {\r\n                for (let i = 0; i < this._scene.meshes.length; i++) {\r\n                    const mesh = this._scene.meshes[i];\r\n                    if (mesh !== this._ground && mesh !== this._skybox && mesh !== this._rootMesh) {\r\n                        this._groundMirror.renderList.push(mesh);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const gammaGround = this._options.groundColor.toGammaSpace();\r\n        this._groundMirror.clearColor = new Color4(gammaGround.r, gammaGround.g, gammaGround.b, 1);\r\n        this._groundMirror.adaptiveBlurKernel = this._options.groundMirrorBlurKernel;\r\n    }\r\n\r\n    /**\r\n     * Setup the ground to receive the mirror texture.\r\n     */\r\n    private _setupMirrorInGroundMaterial(): void {\r\n        if (this._groundMaterial) {\r\n            this._groundMaterial.reflectionTexture = this._groundMirror;\r\n            this._groundMaterial.reflectionFresnel = true;\r\n            this._groundMaterial.reflectionAmount = this._options.groundMirrorAmount;\r\n            this._groundMaterial.reflectionStandardFresnelWeight = this._options.groundMirrorFresnelWeight;\r\n            this._groundMaterial.reflectionFalloffDistance = this._options.groundMirrorFallOffDistance;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup the skybox according to the specified options.\r\n     * @param sceneSize\r\n     */\r\n    private _setupSkybox(sceneSize: ISceneSize): void {\r\n        if (!this._skybox || this._skybox.isDisposed()) {\r\n            this._skybox = CreateBox(\"BackgroundSkybox\", { size: sceneSize.skyboxSize, sideOrientation: Mesh.BACKSIDE }, this._scene);\r\n            this._skybox.onDisposeObservable.add(() => {\r\n                this._skybox = null;\r\n            });\r\n        }\r\n        this._skybox.parent = this._rootMesh;\r\n    }\r\n\r\n    /**\r\n     * Setup the skybox material according to the specified options.\r\n     */\r\n    private _setupSkyboxMaterial(): void {\r\n        if (!this._skybox) {\r\n            return;\r\n        }\r\n\r\n        if (!this._skyboxMaterial) {\r\n            this._skyboxMaterial = new BackgroundMaterial(\"BackgroundSkyboxMaterial\", this._scene);\r\n        }\r\n        this._skyboxMaterial.useRGBColor = false;\r\n        this._skyboxMaterial.primaryColor = this._options.skyboxColor;\r\n        this._skyboxMaterial.enableNoise = true;\r\n\r\n        this._skybox.material = this._skyboxMaterial;\r\n    }\r\n\r\n    /**\r\n     * Setup the skybox reflection texture according to the specified options.\r\n     */\r\n    private _setupSkyboxReflectionTexture(): void {\r\n        if (!this._skyboxMaterial) {\r\n            return;\r\n        }\r\n\r\n        if (this._skyboxTexture) {\r\n            return;\r\n        }\r\n\r\n        if (this._options.skyboxTexture instanceof BaseTexture) {\r\n            this._skyboxMaterial.reflectionTexture = this._options.skyboxTexture;\r\n            return;\r\n        }\r\n\r\n        this._skyboxTexture = new CubeTexture(this._options.skyboxTexture, this._scene, undefined, undefined, undefined, undefined, this._errorHandler);\r\n        this._skyboxTexture.coordinatesMode = Texture.SKYBOX_MODE;\r\n        this._skyboxTexture.gammaSpace = false;\r\n        this._skyboxMaterial.reflectionTexture = this._skyboxTexture;\r\n    }\r\n\r\n    private _errorHandler = (message?: string, exception?: any) => {\r\n        this.onErrorObservable.notifyObservers({ message: message, exception: exception });\r\n    };\r\n\r\n    /**\r\n     * Dispose all the elements created by the Helper.\r\n     */\r\n    public dispose(): void {\r\n        if (this._groundMaterial) {\r\n            this._groundMaterial.dispose(true, true);\r\n        }\r\n        if (this._skyboxMaterial) {\r\n            this._skyboxMaterial.dispose(true, true);\r\n        }\r\n        this._rootMesh.dispose(false);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}