{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport { __extends } from \"tslib\";\nimport { WebXRFeaturesManager, WebXRFeatureName } from \"../webXRFeaturesManager.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature.js\";\n/**\n * The feature point system is used to detect feature points from real world geometry.\n * This feature is currently experimental and only supported on BabylonNative, and should not be used in the browser.\n * The newly introduced API can be seen in webxr.nativeextensions.d.ts and described in FeaturePoints.md.\n */\n\nvar WebXRFeaturePointSystem =\n/** @class */\nfunction (_super) {\n  __extends(WebXRFeaturePointSystem, _super);\n  /**\n   * construct the feature point system\n   * @param _xrSessionManager an instance of xr Session manager\n   */\n\n\n  function WebXRFeaturePointSystem(_xrSessionManager) {\n    var _this = _super.call(this, _xrSessionManager) || this;\n\n    _this._enabled = false;\n    _this._featurePointCloud = [];\n    /**\n     * Observers registered here will be executed whenever new feature points are added (on XRFrame while the session is tracking).\n     * Will notify the observers about which feature points have been added.\n     */\n\n    _this.onFeaturePointsAddedObservable = new Observable();\n    /**\n     * Observers registered here will be executed whenever a feature point has been updated (on XRFrame while the session is tracking).\n     * Will notify the observers about which feature points have been updated.\n     */\n\n    _this.onFeaturePointsUpdatedObservable = new Observable();\n    _this.xrNativeFeatureName = \"bjsfeature-points\";\n\n    if (_this._xrSessionManager.session) {\n      _this._init();\n    } else {\n      _this._xrSessionManager.onXRSessionInit.addOnce(function () {\n        _this._init();\n      });\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(WebXRFeaturePointSystem.prototype, \"featurePointCloud\", {\n    /**\n     * The current feature point cloud maintained across frames.\n     */\n    get: function get() {\n      return this._featurePointCloud;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Detach this feature.\n   * Will usually be called by the features manager\n   *\n   * @returns true if successful.\n   */\n\n  WebXRFeaturePointSystem.prototype.detach = function () {\n    if (!_super.prototype.detach.call(this)) {\n      return false;\n    }\n\n    this.featurePointCloud.length = 0;\n    return true;\n  };\n  /**\n   * Dispose this feature and all of the resources attached\n   */\n\n\n  WebXRFeaturePointSystem.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._featurePointCloud.length = 0;\n    this.onFeaturePointsUpdatedObservable.clear();\n    this.onFeaturePointsAddedObservable.clear();\n  };\n  /**\n   * On receiving a new XR frame if this feature is attached notify observers new feature point data is available.\n   * @param frame\n   */\n\n\n  WebXRFeaturePointSystem.prototype._onXRFrame = function (frame) {\n    if (!this.attached || !this._enabled || !frame) {\n      return;\n    }\n\n    var featurePointRawData = frame.featurePointCloud;\n\n    if (!featurePointRawData || featurePointRawData.length === 0) {\n      return;\n    } else {\n      if (featurePointRawData.length % 5 !== 0) {\n        throw new Error(\"Received malformed feature point cloud of length: \" + featurePointRawData.length);\n      }\n\n      var numberOfFeaturePoints = featurePointRawData.length / 5;\n      var updatedFeaturePoints = new Array();\n      var addedFeaturePoints = new Array();\n\n      for (var i = 0; i < numberOfFeaturePoints; i++) {\n        var rawIndex = i * 5;\n        var id = featurePointRawData[rawIndex + 4]; // IDs should be durable across frames and strictly increasing from 0 up, so use them as indexing into the feature point array.\n\n        if (!this._featurePointCloud[id]) {\n          this._featurePointCloud[id] = {\n            position: new Vector3(),\n            confidenceValue: 0\n          };\n          addedFeaturePoints.push(id);\n        } else {\n          updatedFeaturePoints.push(id);\n        } // Set the feature point values.\n\n\n        this._featurePointCloud[id].position.x = featurePointRawData[rawIndex];\n        this._featurePointCloud[id].position.y = featurePointRawData[rawIndex + 1];\n        this._featurePointCloud[id].position.z = featurePointRawData[rawIndex + 2];\n        this._featurePointCloud[id].confidenceValue = featurePointRawData[rawIndex + 3];\n      } // Signal observers that feature points have been added if necessary.\n\n\n      if (addedFeaturePoints.length > 0) {\n        this.onFeaturePointsAddedObservable.notifyObservers(addedFeaturePoints);\n      } // Signal observers that feature points have been updated if necessary.\n\n\n      if (updatedFeaturePoints.length > 0) {\n        this.onFeaturePointsUpdatedObservable.notifyObservers(updatedFeaturePoints);\n      }\n    }\n  };\n  /**\n   * Initializes the feature. If the feature point feature is not available for this environment do not mark the feature as enabled.\n   */\n\n\n  WebXRFeaturePointSystem.prototype._init = function () {\n    if (!this._xrSessionManager.session.trySetFeaturePointCloudEnabled || !this._xrSessionManager.session.trySetFeaturePointCloudEnabled(true)) {\n      // fail silently\n      return;\n    }\n\n    this._enabled = true;\n  };\n  /**\n   * The module's name\n   */\n\n\n  WebXRFeaturePointSystem.Name = WebXRFeatureName.FEATURE_POINTS;\n  /**\n   * The (Babylon) version of this module.\n   * This is an integer representing the implementation version.\n   * This number does not correspond to the WebXR specs version\n   */\n\n  WebXRFeaturePointSystem.Version = 1;\n  return WebXRFeaturePointSystem;\n}(WebXRAbstractFeature);\n\nexport { WebXRFeaturePointSystem }; // register the plugin\n\nWebXRFeaturesManager.AddWebXRFeature(WebXRFeaturePointSystem.Name, function (xrSessionManager) {\n  return function () {\n    return new WebXRFeaturePointSystem(xrSessionManager);\n  };\n}, WebXRFeaturePointSystem.Version);","map":{"version":3,"mappings":"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","names":["WebXRFeaturesManager","WebXRFeatureName","Observable","Vector3","WebXRAbstractFeature","__extends","_xrSessionManager","_super","_this","xrNativeFeatureName","session","_init","onXRSessionInit","addOnce","Object","WebXRFeaturePointSystem","_featurePointCloud","detach","call","featurePointCloud","length","dispose","onFeaturePointsUpdatedObservable","clear","onFeaturePointsAddedObservable","frame","attached","_enabled","featurePointRawData","Error","numberOfFeaturePoints","updatedFeaturePoints","Array","addedFeaturePoints","i","rawIndex","id","position","confidenceValue","push","x","y","z","notifyObservers","trySetFeaturePointCloudEnabled","FEATURE_POINTS","AddWebXRFeature","Name","xrSessionManager","Version"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/XR/features/WebXRFeaturePointSystem.ts"],"sourcesContent":["import { WebXRFeaturesManager, WebXRFeatureName } from \"../webXRFeaturesManager\";\r\nimport type { WebXRSessionManager } from \"../webXRSessionManager\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature\";\r\n\r\n/**\r\n * A babylon interface for a \"WebXR\" feature point.\r\n * Represents the position and confidence value of a given feature point.\r\n */\r\nexport interface IWebXRFeaturePoint {\r\n    /**\r\n     * Represents the position of the feature point in world space.\r\n     */\r\n    position: Vector3;\r\n    /**\r\n     * Represents the confidence value of the feature point in world space. 0 being least confident, and 1 being most confident.\r\n     */\r\n    confidenceValue: number;\r\n}\r\n\r\n/**\r\n * The feature point system is used to detect feature points from real world geometry.\r\n * This feature is currently experimental and only supported on BabylonNative, and should not be used in the browser.\r\n * The newly introduced API can be seen in webxr.nativeextensions.d.ts and described in FeaturePoints.md.\r\n */\r\nexport class WebXRFeaturePointSystem extends WebXRAbstractFeature {\r\n    private _enabled: boolean = false;\r\n    private _featurePointCloud: Array<IWebXRFeaturePoint> = [];\r\n\r\n    /**\r\n     * The module's name\r\n     */\r\n    public static readonly Name = WebXRFeatureName.FEATURE_POINTS;\r\n    /**\r\n     * The (Babylon) version of this module.\r\n     * This is an integer representing the implementation version.\r\n     * This number does not correspond to the WebXR specs version\r\n     */\r\n    public static readonly Version = 1;\r\n    /**\r\n     * Observers registered here will be executed whenever new feature points are added (on XRFrame while the session is tracking).\r\n     * Will notify the observers about which feature points have been added.\r\n     */\r\n    public readonly onFeaturePointsAddedObservable: Observable<number[]> = new Observable();\r\n    /**\r\n     * Observers registered here will be executed whenever a feature point has been updated (on XRFrame while the session is tracking).\r\n     * Will notify the observers about which feature points have been updated.\r\n     */\r\n    public readonly onFeaturePointsUpdatedObservable: Observable<number[]> = new Observable();\r\n    /**\r\n     * The current feature point cloud maintained across frames.\r\n     */\r\n    public get featurePointCloud(): Array<IWebXRFeaturePoint> {\r\n        return this._featurePointCloud;\r\n    }\r\n\r\n    /**\r\n     * construct the feature point system\r\n     * @param _xrSessionManager an instance of xr Session manager\r\n     */\r\n    constructor(_xrSessionManager: WebXRSessionManager) {\r\n        super(_xrSessionManager);\r\n        this.xrNativeFeatureName = \"bjsfeature-points\";\r\n        if (this._xrSessionManager.session) {\r\n            this._init();\r\n        } else {\r\n            this._xrSessionManager.onXRSessionInit.addOnce(() => {\r\n                this._init();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Detach this feature.\r\n     * Will usually be called by the features manager\r\n     *\r\n     * @returns true if successful.\r\n     */\r\n    public detach(): boolean {\r\n        if (!super.detach()) {\r\n            return false;\r\n        }\r\n\r\n        this.featurePointCloud.length = 0;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Dispose this feature and all of the resources attached\r\n     */\r\n    public dispose(): void {\r\n        super.dispose();\r\n\r\n        this._featurePointCloud.length = 0;\r\n        this.onFeaturePointsUpdatedObservable.clear();\r\n        this.onFeaturePointsAddedObservable.clear();\r\n    }\r\n\r\n    /**\r\n     * On receiving a new XR frame if this feature is attached notify observers new feature point data is available.\r\n     * @param frame\r\n     */\r\n    protected _onXRFrame(frame: XRFrame) {\r\n        if (!this.attached || !this._enabled || !frame) {\r\n            return;\r\n        }\r\n\r\n        const featurePointRawData: number[] | undefined = frame.featurePointCloud;\r\n        if (!featurePointRawData || featurePointRawData.length === 0) {\r\n            return;\r\n        } else {\r\n            if (featurePointRawData.length % 5 !== 0) {\r\n                throw new Error(\"Received malformed feature point cloud of length: \" + featurePointRawData.length);\r\n            }\r\n\r\n            const numberOfFeaturePoints: number = featurePointRawData.length / 5;\r\n            const updatedFeaturePoints = new Array();\r\n            const addedFeaturePoints = new Array();\r\n            for (let i = 0; i < numberOfFeaturePoints; i++) {\r\n                const rawIndex: number = i * 5;\r\n                const id = featurePointRawData[rawIndex + 4];\r\n\r\n                // IDs should be durable across frames and strictly increasing from 0 up, so use them as indexing into the feature point array.\r\n                if (!this._featurePointCloud[id]) {\r\n                    this._featurePointCloud[id] = { position: new Vector3(), confidenceValue: 0 };\r\n                    addedFeaturePoints.push(id);\r\n                } else {\r\n                    updatedFeaturePoints.push(id);\r\n                }\r\n\r\n                // Set the feature point values.\r\n                this._featurePointCloud[id].position.x = featurePointRawData[rawIndex];\r\n                this._featurePointCloud[id].position.y = featurePointRawData[rawIndex + 1];\r\n                this._featurePointCloud[id].position.z = featurePointRawData[rawIndex + 2];\r\n                this._featurePointCloud[id].confidenceValue = featurePointRawData[rawIndex + 3];\r\n            }\r\n\r\n            // Signal observers that feature points have been added if necessary.\r\n            if (addedFeaturePoints.length > 0) {\r\n                this.onFeaturePointsAddedObservable.notifyObservers(addedFeaturePoints);\r\n            }\r\n\r\n            // Signal observers that feature points have been updated if necessary.\r\n            if (updatedFeaturePoints.length > 0) {\r\n                this.onFeaturePointsUpdatedObservable.notifyObservers(updatedFeaturePoints);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes the feature. If the feature point feature is not available for this environment do not mark the feature as enabled.\r\n     */\r\n    private _init() {\r\n        if (!this._xrSessionManager.session.trySetFeaturePointCloudEnabled || !this._xrSessionManager.session.trySetFeaturePointCloudEnabled(true)) {\r\n            // fail silently\r\n            return;\r\n        }\r\n\r\n        this._enabled = true;\r\n    }\r\n}\r\n\r\n// register the plugin\r\nWebXRFeaturesManager.AddWebXRFeature(\r\n    WebXRFeaturePointSystem.Name,\r\n    (xrSessionManager) => {\r\n        return () => new WebXRFeaturePointSystem(xrSessionManager);\r\n    },\r\n    WebXRFeaturePointSystem.Version\r\n);\r\n"]},"metadata":{},"sourceType":"module"}