{"ast":null,"code":"import \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport { AndOrNotEvaluator } from \"./andOrNotEvaluator.js\";\n/**\n * Class used to store custom tags\n */\n\nvar Tags =\n/** @class */\nfunction () {\n  function Tags() {}\n  /**\n   * Adds support for tags on the given object\n   * @param obj defines the object to use\n   */\n\n\n  Tags.EnableFor = function (obj) {\n    obj._tags = obj._tags || {};\n\n    obj.hasTags = function () {\n      return Tags.HasTags(obj);\n    };\n\n    obj.addTags = function (tagsString) {\n      return Tags.AddTagsTo(obj, tagsString);\n    };\n\n    obj.removeTags = function (tagsString) {\n      return Tags.RemoveTagsFrom(obj, tagsString);\n    };\n\n    obj.matchesTagsQuery = function (tagsQuery) {\n      return Tags.MatchesQuery(obj, tagsQuery);\n    };\n  };\n  /**\n   * Removes tags support\n   * @param obj defines the object to use\n   */\n\n\n  Tags.DisableFor = function (obj) {\n    delete obj._tags;\n    delete obj.hasTags;\n    delete obj.addTags;\n    delete obj.removeTags;\n    delete obj.matchesTagsQuery;\n  };\n  /**\n   * Gets a boolean indicating if the given object has tags\n   * @param obj defines the object to use\n   * @returns a boolean\n   */\n\n\n  Tags.HasTags = function (obj) {\n    if (!obj._tags) {\n      return false;\n    }\n\n    var tags = obj._tags;\n\n    for (var i in tags) {\n      if (Object.prototype.hasOwnProperty.call(tags, i)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Gets the tags available on a given object\n   * @param obj defines the object to use\n   * @param asString defines if the tags must be returned as a string instead of an array of strings\n   * @returns the tags\n   */\n\n\n  Tags.GetTags = function (obj, asString) {\n    if (asString === void 0) {\n      asString = true;\n    }\n\n    if (!obj._tags) {\n      return null;\n    }\n\n    if (asString) {\n      var tagsArray = [];\n\n      for (var tag in obj._tags) {\n        if (Object.prototype.hasOwnProperty.call(obj._tags, tag) && obj._tags[tag] === true) {\n          tagsArray.push(tag);\n        }\n      }\n\n      return tagsArray.join(\" \");\n    } else {\n      return obj._tags;\n    }\n  };\n  /**\n   * Adds tags to an object\n   * @param obj defines the object to use\n   * @param tagsString defines the tag string. The tags 'true' and 'false' are reserved and cannot be used as tags.\n   * A tag cannot start with '||', '&&', and '!'. It cannot contain whitespaces\n   */\n\n\n  Tags.AddTagsTo = function (obj, tagsString) {\n    if (!tagsString) {\n      return;\n    }\n\n    if (typeof tagsString !== \"string\") {\n      return;\n    }\n\n    var tags = tagsString.split(\" \");\n    tags.forEach(function (tag) {\n      Tags._AddTagTo(obj, tag);\n    });\n  };\n  /**\n   * @param obj\n   * @param tag\n   * @hidden\n   */\n\n\n  Tags._AddTagTo = function (obj, tag) {\n    tag = tag.trim();\n\n    if (tag === \"\" || tag === \"true\" || tag === \"false\") {\n      return;\n    }\n\n    if (tag.match(/[\\s]/) || tag.match(/^([!]|([|]|[&]){2})/)) {\n      return;\n    }\n\n    Tags.EnableFor(obj);\n    obj._tags[tag] = true;\n  };\n  /**\n   * Removes specific tags from a specific object\n   * @param obj defines the object to use\n   * @param tagsString defines the tags to remove\n   */\n\n\n  Tags.RemoveTagsFrom = function (obj, tagsString) {\n    if (!Tags.HasTags(obj)) {\n      return;\n    }\n\n    var tags = tagsString.split(\" \");\n\n    for (var t in tags) {\n      Tags._RemoveTagFrom(obj, tags[t]);\n    }\n  };\n  /**\n   * @param obj\n   * @param tag\n   * @hidden\n   */\n\n\n  Tags._RemoveTagFrom = function (obj, tag) {\n    delete obj._tags[tag];\n  };\n  /**\n   * Defines if tags hosted on an object match a given query\n   * @param obj defines the object to use\n   * @param tagsQuery defines the tag query\n   * @returns a boolean\n   */\n\n\n  Tags.MatchesQuery = function (obj, tagsQuery) {\n    if (tagsQuery === undefined) {\n      return true;\n    }\n\n    if (tagsQuery === \"\") {\n      return Tags.HasTags(obj);\n    }\n\n    return AndOrNotEvaluator.Eval(tagsQuery, function (r) {\n      return Tags.HasTags(obj) && obj._tags[r];\n    });\n  };\n\n  return Tags;\n}();\n\nexport { Tags };","map":{"version":3,"mappings":"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","names":["AndOrNotEvaluator","Tags","obj","_tags","hasTags","HasTags","addTags","tagsString","AddTagsTo","removeTags","RemoveTagsFrom","matchesTagsQuery","tagsQuery","MatchesQuery","tags","i","Object","prototype","hasOwnProperty","call","asString","tagsArray","tag","push","join","split","forEach","_AddTagTo","trim","match","EnableFor","t","_RemoveTagFrom","undefined","Eval","r"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Misc/tags.ts"],"sourcesContent":["import { AndOrNotEvaluator } from \"./andOrNotEvaluator\";\r\n\r\n/**\r\n * Class used to store custom tags\r\n */\r\nexport class Tags {\r\n    /**\r\n     * Adds support for tags on the given object\r\n     * @param obj defines the object to use\r\n     */\r\n    public static EnableFor(obj: any): void {\r\n        obj._tags = obj._tags || {};\r\n\r\n        obj.hasTags = () => {\r\n            return Tags.HasTags(obj);\r\n        };\r\n\r\n        obj.addTags = (tagsString: string) => {\r\n            return Tags.AddTagsTo(obj, tagsString);\r\n        };\r\n\r\n        obj.removeTags = (tagsString: string) => {\r\n            return Tags.RemoveTagsFrom(obj, tagsString);\r\n        };\r\n\r\n        obj.matchesTagsQuery = (tagsQuery: string) => {\r\n            return Tags.MatchesQuery(obj, tagsQuery);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Removes tags support\r\n     * @param obj defines the object to use\r\n     */\r\n    public static DisableFor(obj: any): void {\r\n        delete obj._tags;\r\n        delete obj.hasTags;\r\n        delete obj.addTags;\r\n        delete obj.removeTags;\r\n        delete obj.matchesTagsQuery;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if the given object has tags\r\n     * @param obj defines the object to use\r\n     * @returns a boolean\r\n     */\r\n    public static HasTags(obj: any): boolean {\r\n        if (!obj._tags) {\r\n            return false;\r\n        }\r\n\r\n        const tags = obj._tags;\r\n        for (const i in tags) {\r\n            if (Object.prototype.hasOwnProperty.call(tags, i)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets the tags available on a given object\r\n     * @param obj defines the object to use\r\n     * @param asString defines if the tags must be returned as a string instead of an array of strings\r\n     * @returns the tags\r\n     */\r\n    public static GetTags(obj: any, asString: boolean = true): any {\r\n        if (!obj._tags) {\r\n            return null;\r\n        }\r\n        if (asString) {\r\n            const tagsArray = [];\r\n            for (const tag in obj._tags) {\r\n                if (Object.prototype.hasOwnProperty.call(obj._tags, tag) && obj._tags[tag] === true) {\r\n                    tagsArray.push(tag);\r\n                }\r\n            }\r\n            return tagsArray.join(\" \");\r\n        } else {\r\n            return obj._tags;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds tags to an object\r\n     * @param obj defines the object to use\r\n     * @param tagsString defines the tag string. The tags 'true' and 'false' are reserved and cannot be used as tags.\r\n     * A tag cannot start with '||', '&&', and '!'. It cannot contain whitespaces\r\n     */\r\n    public static AddTagsTo(obj: any, tagsString: string): void {\r\n        if (!tagsString) {\r\n            return;\r\n        }\r\n\r\n        if (typeof tagsString !== \"string\") {\r\n            return;\r\n        }\r\n\r\n        const tags = tagsString.split(\" \");\r\n        tags.forEach(function (tag) {\r\n            Tags._AddTagTo(obj, tag);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param obj\r\n     * @param tag\r\n     * @hidden\r\n     */\r\n    public static _AddTagTo(obj: any, tag: string): void {\r\n        tag = tag.trim();\r\n\r\n        if (tag === \"\" || tag === \"true\" || tag === \"false\") {\r\n            return;\r\n        }\r\n\r\n        if (tag.match(/[\\s]/) || tag.match(/^([!]|([|]|[&]){2})/)) {\r\n            return;\r\n        }\r\n\r\n        Tags.EnableFor(obj);\r\n        obj._tags[tag] = true;\r\n    }\r\n\r\n    /**\r\n     * Removes specific tags from a specific object\r\n     * @param obj defines the object to use\r\n     * @param tagsString defines the tags to remove\r\n     */\r\n    public static RemoveTagsFrom(obj: any, tagsString: string) {\r\n        if (!Tags.HasTags(obj)) {\r\n            return;\r\n        }\r\n        const tags = tagsString.split(\" \");\r\n        for (const t in tags) {\r\n            Tags._RemoveTagFrom(obj, tags[t]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param obj\r\n     * @param tag\r\n     * @hidden\r\n     */\r\n    public static _RemoveTagFrom(obj: any, tag: string): void {\r\n        delete obj._tags[tag];\r\n    }\r\n\r\n    /**\r\n     * Defines if tags hosted on an object match a given query\r\n     * @param obj defines the object to use\r\n     * @param tagsQuery defines the tag query\r\n     * @returns a boolean\r\n     */\r\n    public static MatchesQuery(obj: any, tagsQuery: string): boolean {\r\n        if (tagsQuery === undefined) {\r\n            return true;\r\n        }\r\n\r\n        if (tagsQuery === \"\") {\r\n            return Tags.HasTags(obj);\r\n        }\r\n\r\n        return AndOrNotEvaluator.Eval(tagsQuery, (r) => Tags.HasTags(obj) && obj._tags[r]);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}