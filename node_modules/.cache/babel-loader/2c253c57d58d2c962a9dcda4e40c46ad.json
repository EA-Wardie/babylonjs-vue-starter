{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.fill.js\";\nimport { __extends } from \"tslib\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { Observable } from \"../../Misc/observable.js\";\nimport { FreeCamera } from \"../../Cameras/freeCamera.js\";\nimport { TargetCamera } from \"../../Cameras/targetCamera.js\";\nimport { DeviceOrientationCamera } from \"../../Cameras/deviceOrientationCamera.js\";\nimport { VRDeviceOrientationFreeCamera } from \"../../Cameras/VR/vrDeviceOrientationFreeCamera.js\";\nimport { WebVRFreeCamera } from \"../../Cameras/VR/webVRCamera.js\";\nimport { PointerEventTypes } from \"../../Events/pointerEvents.js\";\nimport { Quaternion, Matrix, Vector3 } from \"../../Maths/math.vector.js\";\nimport { Color3, Color4 } from \"../../Maths/math.color.js\";\nimport { Gamepad } from \"../../Gamepads/gamepad.js\";\nimport { PoseEnabledController, PoseEnabledControllerType } from \"../../Gamepads/Controllers/poseEnabledController.js\";\nimport { WebVRController } from \"../../Gamepads/Controllers/webVRController.js\";\nimport { Xbox360Button } from \"../../Gamepads/xboxGamepad.js\";\nimport { Mesh } from \"../../Meshes/mesh.js\";\nimport { Ray } from \"../../Culling/ray.js\";\nimport { ImageProcessingConfiguration } from \"../../Materials/imageProcessingConfiguration.js\";\nimport { StandardMaterial } from \"../../Materials/standardMaterial.js\";\nimport { DynamicTexture } from \"../../Materials/Textures/dynamicTexture.js\";\nimport { ImageProcessingPostProcess } from \"../../PostProcesses/imageProcessingPostProcess.js\";\nimport { SineEase, EasingFunction, CircleEase } from \"../../Animations/easing.js\";\nimport { Animation } from \"../../Animations/animation.js\";\nimport { VRCameraMetrics } from \"../../Cameras/VR/vrCameraMetrics.js\";\nimport \"../../Gamepads/gamepadSceneComponent.js\";\nimport \"../../Animations/animatable.js\";\nimport { Axis } from \"../../Maths/math.axis.js\";\nimport { WebXRSessionManager } from \"../../XR/webXRSessionManager.js\";\nimport { WebXRState } from \"../../XR/webXRTypes.js\";\nimport { CreateCylinder } from \"../../Meshes/Builders/cylinderBuilder.js\";\nimport { CreateTorus } from \"../../Meshes/Builders/torusBuilder.js\";\nimport { CreateGround } from \"../../Meshes/Builders/groundBuilder.js\";\n\nvar VRExperienceHelperGazer =\n/** @class */\nfunction () {\n  function VRExperienceHelperGazer(scene, gazeTrackerToClone) {\n    if (gazeTrackerToClone === void 0) {\n      gazeTrackerToClone = null;\n    }\n\n    this.scene = scene;\n    /** @hidden */\n\n    this._pointerDownOnMeshAsked = false;\n    /** @hidden */\n\n    this._isActionableMesh = false;\n    /** @hidden */\n\n    this._teleportationRequestInitiated = false;\n    /** @hidden */\n\n    this._teleportationBackRequestInitiated = false;\n    /** @hidden */\n\n    this._rotationRightAsked = false;\n    /** @hidden */\n\n    this._rotationLeftAsked = false;\n    /** @hidden */\n\n    this._dpadPressed = true;\n    /** @hidden */\n\n    this._activePointer = false;\n    this._id = VRExperienceHelperGazer._IdCounter++; // Gaze tracker\n\n    if (!gazeTrackerToClone) {\n      this._gazeTracker = CreateTorus(\"gazeTracker\", {\n        diameter: 0.0035,\n        thickness: 0.0025,\n        tessellation: 20,\n        updatable: false\n      }, scene);\n\n      this._gazeTracker.bakeCurrentTransformIntoVertices();\n\n      this._gazeTracker.isPickable = false;\n      this._gazeTracker.isVisible = false;\n      var targetMat = new StandardMaterial(\"targetMat\", scene);\n      targetMat.specularColor = Color3.Black();\n      targetMat.emissiveColor = new Color3(0.7, 0.7, 0.7);\n      targetMat.backFaceCulling = false;\n      this._gazeTracker.material = targetMat;\n    } else {\n      this._gazeTracker = gazeTrackerToClone.clone(\"gazeTracker\");\n    }\n  }\n  /**\n   * @param length\n   * @hidden\n   */\n\n\n  VRExperienceHelperGazer.prototype._getForwardRay = function (length) {\n    return new Ray(Vector3.Zero(), new Vector3(0, 0, length));\n  };\n  /** @hidden */\n\n\n  VRExperienceHelperGazer.prototype._selectionPointerDown = function () {\n    this._pointerDownOnMeshAsked = true;\n\n    if (this._currentHit) {\n      this.scene.simulatePointerDown(this._currentHit, {\n        pointerId: this._id\n      });\n    }\n  };\n  /** @hidden */\n\n\n  VRExperienceHelperGazer.prototype._selectionPointerUp = function () {\n    if (this._currentHit) {\n      this.scene.simulatePointerUp(this._currentHit, {\n        pointerId: this._id\n      });\n    }\n\n    this._pointerDownOnMeshAsked = false;\n  };\n  /** @hidden */\n\n\n  VRExperienceHelperGazer.prototype._activatePointer = function () {\n    this._activePointer = true;\n  };\n  /** @hidden */\n\n\n  VRExperienceHelperGazer.prototype._deactivatePointer = function () {\n    this._activePointer = false;\n  };\n  /**\n   * @param distance\n   * @hidden\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  VRExperienceHelperGazer.prototype._updatePointerDistance = function (distance) {\n    if (distance === void 0) {\n      distance = 100;\n    }\n  };\n\n  VRExperienceHelperGazer.prototype.dispose = function () {\n    this._interactionsEnabled = false;\n    this._teleportationEnabled = false;\n\n    if (this._gazeTracker) {\n      this._gazeTracker.dispose();\n    }\n  };\n\n  VRExperienceHelperGazer._IdCounter = 0;\n  return VRExperienceHelperGazer;\n}();\n\nvar VRExperienceHelperControllerGazer =\n/** @class */\nfunction (_super) {\n  __extends(VRExperienceHelperControllerGazer, _super);\n\n  function VRExperienceHelperControllerGazer(webVRController, scene, gazeTrackerToClone) {\n    var _this = _super.call(this, scene, gazeTrackerToClone) || this;\n\n    _this.webVRController = webVRController; // Laser pointer\n\n    _this._laserPointer = CreateCylinder(\"laserPointer\", {\n      updatable: false,\n      height: 1,\n      diameterTop: 0.004,\n      diameterBottom: 0.0002,\n      tessellation: 20,\n      subdivisions: 1\n    }, scene);\n    var laserPointerMaterial = new StandardMaterial(\"laserPointerMat\", scene);\n    laserPointerMaterial.emissiveColor = new Color3(0.7, 0.7, 0.7);\n    laserPointerMaterial.alpha = 0.6;\n    _this._laserPointer.material = laserPointerMaterial;\n    _this._laserPointer.rotation.x = Math.PI / 2;\n    _this._laserPointer.position.z = -0.5;\n    _this._laserPointer.isVisible = false;\n    _this._laserPointer.isPickable = false;\n\n    if (!webVRController.mesh) {\n      // Create an empty mesh that is used prior to loading the high quality model\n      var preloadMesh = new Mesh(\"preloadControllerMesh\", scene);\n      var preloadPointerPose = new Mesh(PoseEnabledController.POINTING_POSE, scene);\n      preloadPointerPose.rotation.x = -0.7;\n      preloadMesh.addChild(preloadPointerPose);\n      webVRController.attachToMesh(preloadMesh);\n    }\n\n    _this._setLaserPointerParent(webVRController.mesh);\n\n    _this._meshAttachedObserver = webVRController._meshAttachedObservable.add(function (mesh) {\n      _this._setLaserPointerParent(mesh);\n    });\n    return _this;\n  }\n\n  VRExperienceHelperControllerGazer.prototype._getForwardRay = function (length) {\n    return this.webVRController.getForwardRay(length);\n  };\n  /** @hidden */\n\n\n  VRExperienceHelperControllerGazer.prototype._activatePointer = function () {\n    _super.prototype._activatePointer.call(this);\n\n    this._laserPointer.isVisible = true;\n  };\n  /** @hidden */\n\n\n  VRExperienceHelperControllerGazer.prototype._deactivatePointer = function () {\n    _super.prototype._deactivatePointer.call(this);\n\n    this._laserPointer.isVisible = false;\n  };\n  /**\n   * @param color\n   * @hidden\n   */\n\n\n  VRExperienceHelperControllerGazer.prototype._setLaserPointerColor = function (color) {\n    this._laserPointer.material.emissiveColor = color;\n  };\n  /**\n   * @param disabled\n   * @hidden\n   */\n\n\n  VRExperienceHelperControllerGazer.prototype._setLaserPointerLightingDisabled = function (disabled) {\n    this._laserPointer.material.disableLighting = disabled;\n  };\n  /**\n   * @param mesh\n   * @hidden\n   */\n\n\n  VRExperienceHelperControllerGazer.prototype._setLaserPointerParent = function (mesh) {\n    var makeNotPick = function makeNotPick(root) {\n      root.isPickable = false;\n      root.getChildMeshes().forEach(function (c) {\n        makeNotPick(c);\n      });\n    };\n\n    makeNotPick(mesh);\n    var meshChildren = mesh.getChildren(undefined, false);\n    var laserParent = mesh;\n    this.webVRController._pointingPoseNode = null;\n\n    for (var i = 0; i < meshChildren.length; i++) {\n      if (meshChildren[i].name && meshChildren[i].name.indexOf(PoseEnabledController.POINTING_POSE) >= 0) {\n        laserParent = meshChildren[i];\n        this.webVRController._pointingPoseNode = laserParent;\n        break;\n      }\n    }\n\n    this._laserPointer.parent = laserParent;\n  };\n\n  VRExperienceHelperControllerGazer.prototype._updatePointerDistance = function (distance) {\n    if (distance === void 0) {\n      distance = 100;\n    }\n\n    this._laserPointer.scaling.y = distance;\n    this._laserPointer.position.z = -distance / 2;\n  };\n\n  VRExperienceHelperControllerGazer.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._laserPointer.dispose();\n\n    if (this._meshAttachedObserver) {\n      this.webVRController._meshAttachedObservable.remove(this._meshAttachedObserver);\n    }\n  };\n\n  return VRExperienceHelperControllerGazer;\n}(VRExperienceHelperGazer);\n\nvar VRExperienceHelperCameraGazer =\n/** @class */\nfunction (_super) {\n  __extends(VRExperienceHelperCameraGazer, _super);\n\n  function VRExperienceHelperCameraGazer(_getCamera, scene) {\n    var _this = _super.call(this, scene) || this;\n\n    _this._getCamera = _getCamera;\n    return _this;\n  }\n\n  VRExperienceHelperCameraGazer.prototype._getForwardRay = function (length) {\n    var camera = this._getCamera();\n\n    if (camera) {\n      return camera.getForwardRay(length);\n    } else {\n      return new Ray(Vector3.Zero(), Vector3.Forward());\n    }\n  };\n\n  return VRExperienceHelperCameraGazer;\n}(VRExperienceHelperGazer);\n/**\n * Event containing information after VR has been entered\n */\n\n\nvar OnAfterEnteringVRObservableEvent =\n/** @class */\nfunction () {\n  function OnAfterEnteringVRObservableEvent() {}\n\n  return OnAfterEnteringVRObservableEvent;\n}();\n\nexport { OnAfterEnteringVRObservableEvent };\n/**\n * Helps to quickly add VR support to an existing scene.\n * See https://doc.babylonjs.com/divingDeeper/cameras/webVRHelper\n * @deprecated\n */\n\nvar VRExperienceHelper =\n/** @class */\nfunction () {\n  /**\n   * Instantiates a VRExperienceHelper.\n   * Helps to quickly add VR support to an existing scene.\n   * @param scene The scene the VRExperienceHelper belongs to.\n   * @param webVROptions Options to modify the vr experience helper's behavior.\n   */\n  function VRExperienceHelper(scene,\n  /** Options to modify the vr experience helper's behavior. */\n  webVROptions) {\n    if (webVROptions === void 0) {\n      webVROptions = {};\n    }\n\n    var _this = this;\n\n    this.webVROptions = webVROptions; // Can the system support WebVR, even if a headset isn't plugged in?\n\n    this._webVRsupported = false; // If WebVR is supported, is a headset plugged in and are we ready to present?\n\n    this._webVRready = false; // Are we waiting for the requestPresent callback to complete?\n\n    this._webVRrequesting = false; // Are we presenting to the headset right now? (this is the vrDevice state)\n\n    this._webVRpresenting = false; // Are we presenting in the fullscreen fallback?\n\n    this._fullscreenVRpresenting = false;\n    /**\n     * Gets or sets a boolean indicating that gaze can be enabled even if pointer lock is not engage (useful on iOS where fullscreen mode and pointer lock are not supported)\n     */\n\n    this.enableGazeEvenWhenNoPointerLock = false;\n    /**\n     * Gets or sets a boolean indicating that the VREXperienceHelper will exit VR if double tap is detected\n     */\n\n    this.exitVROnDoubleTap = true;\n    /**\n     * Observable raised right before entering VR.\n     */\n\n    this.onEnteringVRObservable = new Observable();\n    /**\n     * Observable raised when entering VR has completed.\n     */\n\n    this.onAfterEnteringVRObservable = new Observable();\n    /**\n     * Observable raised when exiting VR.\n     */\n\n    this.onExitingVRObservable = new Observable();\n    /**\n     * Observable raised when controller mesh is loaded.\n     */\n\n    this.onControllerMeshLoadedObservable = new Observable();\n    this._useCustomVRButton = false;\n    this._teleportationRequested = false;\n    this._teleportActive = false;\n    this._floorMeshesCollection = [];\n    this._teleportationMode = VRExperienceHelper.TELEPORTATIONMODE_CONSTANTTIME;\n    this._teleportationTime = 122;\n    this._teleportationSpeed = 20;\n    this._rotationAllowed = true;\n    this._teleportBackwardsVector = new Vector3(0, -1, -1);\n    this._isDefaultTeleportationTarget = true;\n    this._teleportationFillColor = \"#444444\";\n    this._teleportationBorderColor = \"#FFFFFF\";\n    this._rotationAngle = 0;\n    this._haloCenter = new Vector3(0, 0, 0);\n    this._padSensibilityUp = 0.65;\n    this._padSensibilityDown = 0.35;\n    this._leftController = null;\n    this._rightController = null;\n    this._gazeColor = new Color3(0.7, 0.7, 0.7);\n    this._laserColor = new Color3(0.7, 0.7, 0.7);\n    this._pickedLaserColor = new Color3(0.2, 0.2, 1);\n    this._pickedGazeColor = new Color3(0, 0, 1);\n    /**\n     * Observable raised when a new mesh is selected based on meshSelectionPredicate\n     */\n\n    this.onNewMeshSelected = new Observable();\n    /**\n     * Observable raised when a new mesh is selected based on meshSelectionPredicate.\n     * This observable will provide the mesh and the controller used to select the mesh\n     */\n\n    this.onMeshSelectedWithController = new Observable();\n    /**\n     * Observable raised when a new mesh is picked based on meshSelectionPredicate\n     */\n\n    this.onNewMeshPicked = new Observable();\n    /**\n     * Observable raised before camera teleportation\n     */\n\n    this.onBeforeCameraTeleport = new Observable();\n    /**\n     *  Observable raised after camera teleportation\n     */\n\n    this.onAfterCameraTeleport = new Observable();\n    /**\n     * Observable raised when current selected mesh gets unselected\n     */\n\n    this.onSelectedMeshUnselected = new Observable();\n    /**\n     * Set teleportation enabled. If set to false camera teleportation will be disabled but camera rotation will be kept.\n     */\n\n    this.teleportationEnabled = true;\n    this._teleportationInitialized = false;\n    this._interactionsEnabled = false;\n    this._interactionsRequested = false;\n    this._displayGaze = true;\n    this._displayLaserPointer = true;\n    /**\n     * If the gaze trackers scale should be updated to be constant size when pointing at near/far meshes\n     */\n\n    this.updateGazeTrackerScale = true;\n    /**\n     * If the gaze trackers color should be updated when selecting meshes\n     */\n\n    this.updateGazeTrackerColor = true;\n    /**\n     * If the controller laser color should be updated when selecting meshes\n     */\n\n    this.updateControllerLaserColor = true;\n    /**\n     * Defines whether or not Pointer lock should be requested when switching to\n     * full screen.\n     */\n\n    this.requestPointerLockOnFullScreen = true;\n    /**\n     * Was the XR test done already. If this is true AND this.xr exists, xr is initialized.\n     * If this is true and no this.xr, xr exists but is not supported, using WebVR.\n     */\n\n    this.xrTestDone = false;\n\n    this._onResize = function () {\n      _this._moveButtonToBottomRight();\n\n      if (_this._fullscreenVRpresenting && _this._webVRready) {\n        _this.exitVR();\n      }\n    };\n\n    this._onFullscreenChange = function () {\n      var anyDoc = document;\n\n      if (anyDoc.fullscreen !== undefined) {\n        _this._fullscreenVRpresenting = document.fullscreen;\n      } else if (anyDoc.mozFullScreen !== undefined) {\n        _this._fullscreenVRpresenting = anyDoc.mozFullScreen;\n      } else if (anyDoc.webkitIsFullScreen !== undefined) {\n        _this._fullscreenVRpresenting = anyDoc.webkitIsFullScreen;\n      } else if (anyDoc.msIsFullScreen !== undefined) {\n        _this._fullscreenVRpresenting = anyDoc.msIsFullScreen;\n      } else if (document.msFullscreenElement !== undefined) {\n        _this._fullscreenVRpresenting = document.msFullscreenElement;\n      }\n\n      if (!_this._fullscreenVRpresenting && _this._inputElement) {\n        _this.exitVR();\n\n        if (!_this._useCustomVRButton && _this._btnVR) {\n          _this._btnVR.style.top = _this._inputElement.offsetTop + _this._inputElement.offsetHeight - 70 + \"px\";\n          _this._btnVR.style.left = _this._inputElement.offsetLeft + _this._inputElement.offsetWidth - 100 + \"px\"; // make sure the button is visible after setting its position\n\n          _this._updateButtonVisibility();\n        }\n      }\n    };\n\n    this._cachedAngularSensibility = {\n      angularSensibilityX: null,\n      angularSensibilityY: null,\n      angularSensibility: null\n    };\n\n    this._beforeRender = function () {\n      if (_this._leftController && _this._leftController._activePointer) {\n        _this._castRayAndSelectObject(_this._leftController);\n      }\n\n      if (_this._rightController && _this._rightController._activePointer) {\n        _this._castRayAndSelectObject(_this._rightController);\n      }\n\n      if (_this._noControllerIsActive && (_this._scene.getEngine().isPointerLock || _this.enableGazeEvenWhenNoPointerLock)) {\n        _this._castRayAndSelectObject(_this._cameraGazer);\n      } else {\n        _this._cameraGazer._gazeTracker.isVisible = false;\n      }\n    };\n\n    this._onNewGamepadConnected = function (gamepad) {\n      if (gamepad.type !== Gamepad.POSE_ENABLED) {\n        if (gamepad.leftStick) {\n          gamepad.onleftstickchanged(function (stickValues) {\n            if (_this._teleportationInitialized && _this.teleportationEnabled) {\n              // Listening to classic/xbox gamepad only if no VR controller is active\n              if (!_this._leftController && !_this._rightController || _this._leftController && !_this._leftController._activePointer && _this._rightController && !_this._rightController._activePointer) {\n                _this._checkTeleportWithRay(stickValues, _this._cameraGazer);\n\n                _this._checkTeleportBackwards(stickValues, _this._cameraGazer);\n              }\n            }\n          });\n        }\n\n        if (gamepad.rightStick) {\n          gamepad.onrightstickchanged(function (stickValues) {\n            if (_this._teleportationInitialized) {\n              _this._checkRotate(stickValues, _this._cameraGazer);\n            }\n          });\n        }\n\n        if (gamepad.type === Gamepad.XBOX) {\n          gamepad.onbuttondown(function (buttonPressed) {\n            if (_this._interactionsEnabled && buttonPressed === Xbox360Button.A) {\n              _this._cameraGazer._selectionPointerDown();\n            }\n          });\n          gamepad.onbuttonup(function (buttonPressed) {\n            if (_this._interactionsEnabled && buttonPressed === Xbox360Button.A) {\n              _this._cameraGazer._selectionPointerUp();\n            }\n          });\n        }\n      } else {\n        var webVRController = gamepad;\n        var controller = new VRExperienceHelperControllerGazer(webVRController, _this._scene, _this._cameraGazer._gazeTracker);\n\n        if (webVRController.hand === \"right\" || _this._leftController && _this._leftController.webVRController != webVRController) {\n          _this._rightController = controller;\n        } else {\n          _this._leftController = controller;\n        }\n\n        _this._tryEnableInteractionOnController(controller);\n      }\n    }; // This only succeeds if the controller's mesh exists for the controller so this must be called whenever new controller is connected or when mesh is loaded\n\n\n    this._tryEnableInteractionOnController = function (controller) {\n      if (_this._interactionsRequested && !controller._interactionsEnabled) {\n        _this._enableInteractionOnController(controller);\n      }\n\n      if (_this._teleportationRequested && !controller._teleportationEnabled) {\n        _this._enableTeleportationOnController(controller);\n      }\n    };\n\n    this._onNewGamepadDisconnected = function (gamepad) {\n      if (gamepad instanceof WebVRController) {\n        if (gamepad.hand === \"left\" && _this._leftController != null) {\n          _this._leftController.dispose();\n\n          _this._leftController = null;\n        }\n\n        if (gamepad.hand === \"right\" && _this._rightController != null) {\n          _this._rightController.dispose();\n\n          _this._rightController = null;\n        }\n      }\n    };\n\n    this._workingVector = Vector3.Zero();\n    this._workingQuaternion = Quaternion.Identity();\n    this._workingMatrix = Matrix.Identity();\n    Logger.Warn(\"WebVR is deprecated. Please avoid using this experience helper and use the WebXR experience helper instead\");\n    this._scene = scene;\n    this._inputElement = scene.getEngine().getInputElement(); // check for VR support:\n\n    var vrSupported = (\"getVRDisplays\" in navigator); // no VR support? force XR but only when it is not set because web vr can work without the getVRDisplays\n\n    if (!vrSupported && webVROptions.useXR === undefined) {\n      webVROptions.useXR = true;\n    } // Parse options\n\n\n    if (webVROptions.createFallbackVRDeviceOrientationFreeCamera === undefined) {\n      webVROptions.createFallbackVRDeviceOrientationFreeCamera = true;\n    }\n\n    if (webVROptions.createDeviceOrientationCamera === undefined) {\n      webVROptions.createDeviceOrientationCamera = true;\n    }\n\n    if (webVROptions.laserToggle === undefined) {\n      webVROptions.laserToggle = true;\n    }\n\n    if (webVROptions.defaultHeight === undefined) {\n      webVROptions.defaultHeight = 1.7;\n    }\n\n    if (webVROptions.useCustomVRButton) {\n      this._useCustomVRButton = true;\n\n      if (webVROptions.customVRButton) {\n        this._btnVR = webVROptions.customVRButton;\n      }\n    }\n\n    if (webVROptions.rayLength) {\n      this._rayLength = webVROptions.rayLength;\n    }\n\n    this._defaultHeight = webVROptions.defaultHeight;\n\n    if (webVROptions.positionScale) {\n      this._rayLength *= webVROptions.positionScale;\n      this._defaultHeight *= webVROptions.positionScale;\n    }\n\n    this._hasEnteredVR = false; // Set position\n\n    if (this._scene.activeCamera) {\n      this._position = this._scene.activeCamera.position.clone();\n    } else {\n      this._position = new Vector3(0, this._defaultHeight, 0);\n    } // Set non-vr camera\n\n\n    if (webVROptions.createDeviceOrientationCamera || !this._scene.activeCamera) {\n      this._deviceOrientationCamera = new DeviceOrientationCamera(\"deviceOrientationVRHelper\", this._position.clone(), scene); // Copy data from existing camera\n\n      if (this._scene.activeCamera) {\n        this._deviceOrientationCamera.minZ = this._scene.activeCamera.minZ;\n        this._deviceOrientationCamera.maxZ = this._scene.activeCamera.maxZ; // Set rotation from previous camera\n\n        if (this._scene.activeCamera instanceof TargetCamera && this._scene.activeCamera.rotation) {\n          var targetCamera = this._scene.activeCamera;\n\n          if (targetCamera.rotationQuaternion) {\n            this._deviceOrientationCamera.rotationQuaternion.copyFrom(targetCamera.rotationQuaternion);\n          } else {\n            this._deviceOrientationCamera.rotationQuaternion.copyFrom(Quaternion.RotationYawPitchRoll(targetCamera.rotation.y, targetCamera.rotation.x, targetCamera.rotation.z));\n          }\n\n          this._deviceOrientationCamera.rotation = targetCamera.rotation.clone();\n        }\n      }\n\n      this._scene.activeCamera = this._deviceOrientationCamera;\n\n      if (this._inputElement) {\n        this._scene.activeCamera.attachControl();\n      }\n    } else {\n      this._existingCamera = this._scene.activeCamera;\n    }\n\n    if (this.webVROptions.useXR && navigator.xr) {\n      // force-check XR session support\n      WebXRSessionManager.IsSessionSupportedAsync(\"immersive-vr\").then(function (supported) {\n        if (supported) {\n          Logger.Log(\"Using WebXR. It is recommended to use the WebXRDefaultExperience directly\"); // it is possible to use XR, let's do it!\n\n          scene.createDefaultXRExperienceAsync({\n            floorMeshes: webVROptions.floorMeshes || []\n          }).then(function (xr) {\n            _this.xr = xr; // connect observables\n\n            _this.xrTestDone = true;\n            _this._cameraGazer = new VRExperienceHelperCameraGazer(function () {\n              return _this.xr.baseExperience.camera;\n            }, scene);\n\n            _this.xr.baseExperience.onStateChangedObservable.add(function (state) {\n              // support for entering / exiting\n              switch (state) {\n                case WebXRState.ENTERING_XR:\n                  _this.onEnteringVRObservable.notifyObservers(_this);\n\n                  if (!_this._interactionsEnabled) {\n                    _this.xr.pointerSelection.detach();\n                  }\n\n                  _this.xr.pointerSelection.displayLaserPointer = _this._displayLaserPointer;\n                  break;\n\n                case WebXRState.EXITING_XR:\n                  _this.onExitingVRObservable.notifyObservers(_this); // resize to update width and height when exiting vr exits fullscreen\n\n\n                  _this._scene.getEngine().resize();\n\n                  break;\n\n                case WebXRState.IN_XR:\n                  _this._hasEnteredVR = true;\n                  break;\n\n                case WebXRState.NOT_IN_XR:\n                  _this._hasEnteredVR = false;\n                  break;\n              }\n            });\n          });\n        } else {\n          // XR not supported (thou exists), continue WebVR init\n          _this._completeVRInit(scene, webVROptions);\n        }\n      });\n    } else {\n      // no XR, continue init synchronous\n      this._completeVRInit(scene, webVROptions);\n    }\n  }\n\n  Object.defineProperty(VRExperienceHelper.prototype, \"onEnteringVR\", {\n    /** Return this.onEnteringVRObservable\n     * Note: This one is for backward compatibility. Please use onEnteringVRObservable directly\n     */\n    get: function get() {\n      return this.onEnteringVRObservable;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRExperienceHelper.prototype, \"onExitingVR\", {\n    /** Return this.onExitingVRObservable\n     * Note: This one is for backward compatibility. Please use onExitingVRObservable directly\n     */\n    get: function get() {\n      return this.onExitingVRObservable;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRExperienceHelper.prototype, \"onControllerMeshLoaded\", {\n    /** Return this.onControllerMeshLoadedObservable\n     * Note: This one is for backward compatibility. Please use onControllerMeshLoadedObservable directly\n     */\n    get: function get() {\n      return this.onControllerMeshLoadedObservable;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRExperienceHelper.prototype, \"teleportationTarget\", {\n    /**\n     * The mesh used to display where the user is going to teleport.\n     */\n    get: function get() {\n      return this._teleportationTarget;\n    },\n\n    /**\n     * Sets the mesh to be used to display where the user is going to teleport.\n     */\n    set: function set(value) {\n      if (value) {\n        value.name = \"teleportationTarget\";\n        this._isDefaultTeleportationTarget = false;\n        this._teleportationTarget = value;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRExperienceHelper.prototype, \"gazeTrackerMesh\", {\n    /**\n     * The mesh used to display where the user is selecting, this mesh will be cloned and set as the gazeTracker for the left and right controller\n     * when set bakeCurrentTransformIntoVertices will be called on the mesh.\n     * See https://doc.babylonjs.com/resources/baking_transformations\n     */\n    get: function get() {\n      return this._cameraGazer._gazeTracker;\n    },\n    set: function set(value) {\n      if (value) {\n        // Dispose of existing meshes\n        if (this._cameraGazer._gazeTracker) {\n          this._cameraGazer._gazeTracker.dispose();\n        }\n\n        if (this._leftController && this._leftController._gazeTracker) {\n          this._leftController._gazeTracker.dispose();\n        }\n\n        if (this._rightController && this._rightController._gazeTracker) {\n          this._rightController._gazeTracker.dispose();\n        } // Set and create gaze trackers on head and controllers\n\n\n        this._cameraGazer._gazeTracker = value;\n\n        this._cameraGazer._gazeTracker.bakeCurrentTransformIntoVertices();\n\n        this._cameraGazer._gazeTracker.isPickable = false;\n        this._cameraGazer._gazeTracker.isVisible = false;\n        this._cameraGazer._gazeTracker.name = \"gazeTracker\";\n\n        if (this._leftController) {\n          this._leftController._gazeTracker = this._cameraGazer._gazeTracker.clone(\"gazeTracker\");\n        }\n\n        if (this._rightController) {\n          this._rightController._gazeTracker = this._cameraGazer._gazeTracker.clone(\"gazeTracker\");\n        }\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRExperienceHelper.prototype, \"leftControllerGazeTrackerMesh\", {\n    /**\n     * The gaze tracking mesh corresponding to the left controller\n     */\n    get: function get() {\n      if (this._leftController) {\n        return this._leftController._gazeTracker;\n      }\n\n      return null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRExperienceHelper.prototype, \"rightControllerGazeTrackerMesh\", {\n    /**\n     * The gaze tracking mesh corresponding to the right controller\n     */\n    get: function get() {\n      if (this._rightController) {\n        return this._rightController._gazeTracker;\n      }\n\n      return null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRExperienceHelper.prototype, \"displayGaze\", {\n    /**\n     * If the ray of the gaze should be displayed.\n     */\n    get: function get() {\n      return this._displayGaze;\n    },\n\n    /**\n     * Sets if the ray of the gaze should be displayed.\n     */\n    set: function set(value) {\n      this._displayGaze = value;\n\n      if (!value) {\n        this._cameraGazer._gazeTracker.isVisible = false;\n\n        if (this._leftController) {\n          this._leftController._gazeTracker.isVisible = false;\n        }\n\n        if (this._rightController) {\n          this._rightController._gazeTracker.isVisible = false;\n        }\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRExperienceHelper.prototype, \"displayLaserPointer\", {\n    /**\n     * If the ray of the LaserPointer should be displayed.\n     */\n    get: function get() {\n      return this._displayLaserPointer;\n    },\n\n    /**\n     * Sets if the ray of the LaserPointer should be displayed.\n     */\n    set: function set(value) {\n      this._displayLaserPointer = value;\n\n      if (!value) {\n        if (this._rightController) {\n          this._rightController._deactivatePointer();\n\n          this._rightController._gazeTracker.isVisible = false;\n        }\n\n        if (this._leftController) {\n          this._leftController._deactivatePointer();\n\n          this._leftController._gazeTracker.isVisible = false;\n        }\n      } else {\n        if (this._rightController) {\n          this._rightController._activatePointer();\n        }\n\n        if (this._leftController) {\n          this._leftController._activatePointer();\n        }\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRExperienceHelper.prototype, \"deviceOrientationCamera\", {\n    /**\n     * The deviceOrientationCamera used as the camera when not in VR.\n     */\n    get: function get() {\n      return this._deviceOrientationCamera;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRExperienceHelper.prototype, \"currentVRCamera\", {\n    /**\n     * Based on the current WebVR support, returns the current VR camera used.\n     */\n    get: function get() {\n      if (this._webVRready) {\n        return this._webVRCamera;\n      } else {\n        return this._scene.activeCamera;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRExperienceHelper.prototype, \"webVRCamera\", {\n    /**\n     * The webVRCamera which is used when in VR.\n     */\n    get: function get() {\n      return this._webVRCamera;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRExperienceHelper.prototype, \"vrDeviceOrientationCamera\", {\n    /**\n     * The deviceOrientationCamera that is used as a fallback when vr device is not connected.\n     */\n    get: function get() {\n      return this._vrDeviceOrientationCamera;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRExperienceHelper.prototype, \"vrButton\", {\n    /**\n     * The html button that is used to trigger entering into VR.\n     */\n    get: function get() {\n      return this._btnVR;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRExperienceHelper.prototype, \"_teleportationRequestInitiated\", {\n    get: function get() {\n      var result = this._cameraGazer._teleportationRequestInitiated || this._leftController !== null && this._leftController._teleportationRequestInitiated || this._rightController !== null && this._rightController._teleportationRequestInitiated;\n      return result;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  VRExperienceHelper.prototype._completeVRInit = function (scene, webVROptions) {\n    var _this = this;\n\n    this.xrTestDone = true; // Create VR cameras\n\n    if (webVROptions.createFallbackVRDeviceOrientationFreeCamera) {\n      if (webVROptions.useMultiview) {\n        if (!webVROptions.vrDeviceOrientationCameraMetrics) {\n          webVROptions.vrDeviceOrientationCameraMetrics = VRCameraMetrics.GetDefault();\n        }\n\n        webVROptions.vrDeviceOrientationCameraMetrics.multiviewEnabled = true;\n      }\n\n      this._vrDeviceOrientationCamera = new VRDeviceOrientationFreeCamera(\"VRDeviceOrientationVRHelper\", this._position, this._scene, true, webVROptions.vrDeviceOrientationCameraMetrics);\n      this._vrDeviceOrientationCamera.angularSensibility = Number.MAX_VALUE;\n    }\n\n    this._webVRCamera = new WebVRFreeCamera(\"WebVRHelper\", this._position, this._scene, webVROptions);\n\n    this._webVRCamera.useStandingMatrix();\n\n    this._cameraGazer = new VRExperienceHelperCameraGazer(function () {\n      return _this.currentVRCamera;\n    }, scene); // Create default button\n\n    if (!this._useCustomVRButton) {\n      this._btnVR = document.createElement(\"BUTTON\");\n      this._btnVR.className = \"babylonVRicon\";\n      this._btnVR.id = \"babylonVRiconbtn\";\n      this._btnVR.title = \"Click to switch to VR\";\n      var url = !window.SVGSVGElement ? \"https://cdn.babylonjs.com/Assets/vrButton.png\" : \"data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20width%3D%222048%22%20height%3D%221152%22%20viewBox%3D%220%200%202048%201152%22%20version%3D%221.1%22%3E%3Cpath%20transform%3D%22rotate%28180%201024%2C576.0000000000001%29%22%20d%3D%22m1109%2C896q17%2C0%2030%2C-12t13%2C-30t-12.5%2C-30.5t-30.5%2C-12.5l-170%2C0q-18%2C0%20-30.5%2C12.5t-12.5%2C30.5t13%2C30t30%2C12l170%2C0zm-85%2C256q59%2C0%20132.5%2C-1.5t154.5%2C-5.5t164.5%2C-11.5t163%2C-20t150%2C-30t124.5%2C-41.5q23%2C-11%2042%2C-24t38%2C-30q27%2C-25%2041%2C-61.5t14%2C-72.5l0%2C-257q0%2C-123%20-47%2C-232t-128%2C-190t-190%2C-128t-232%2C-47l-81%2C0q-37%2C0%20-68.5%2C14t-60.5%2C34.5t-55.5%2C45t-53%2C45t-53%2C34.5t-55.5%2C14t-55.5%2C-14t-53%2C-34.5t-53%2C-45t-55.5%2C-45t-60.5%2C-34.5t-68.5%2C-14l-81%2C0q-123%2C0%20-232%2C47t-190%2C128t-128%2C190t-47%2C232l0%2C257q0%2C68%2038%2C115t97%2C73q54%2C24%20124.5%2C41.5t150%2C30t163%2C20t164.5%2C11.5t154.5%2C5.5t132.5%2C1.5zm939%2C-298q0%2C39%20-24.5%2C67t-58.5%2C42q-54%2C23%20-122%2C39.5t-143.5%2C28t-155.5%2C19t-157%2C11t-148.5%2C5t-129.5%2C1.5q-59%2C0%20-130%2C-1.5t-148%2C-5t-157%2C-11t-155.5%2C-19t-143.5%2C-28t-122%2C-39.5q-34%2C-14%20-58.5%2C-42t-24.5%2C-67l0%2C-257q0%2C-106%2040.5%2C-199t110%2C-162.5t162.5%2C-109.5t199%2C-40l81%2C0q27%2C0%2052%2C14t50%2C34.5t51%2C44.5t55.5%2C44.5t63.5%2C34.5t74%2C14t74%2C-14t63.5%2C-34.5t55.5%2C-44.5t51%2C-44.5t50%2C-34.5t52%2C-14l14%2C0q37%2C0%2070%2C0.5t64.5%2C4.5t63.5%2C12t68%2C23q71%2C30%20128.5%2C78.5t98.5%2C110t63.5%2C133.5t22.5%2C149l0%2C257z%22%20fill%3D%22white%22%20/%3E%3C/svg%3E%0A\";\n      var css = \".babylonVRicon { position: absolute; right: 20px; height: 50px; width: 80px; background-color: rgba(51,51,51,0.7); background-image: url(\" + url + \"); background-size: 80%; background-repeat:no-repeat; background-position: center; border: none; outline: none; transition: transform 0.125s ease-out } .babylonVRicon:hover { transform: scale(1.05) } .babylonVRicon:active {background-color: rgba(51,51,51,1) } .babylonVRicon:focus {background-color: rgba(51,51,51,1) }\";\n      css += \".babylonVRicon.vrdisplaypresenting { display: none; }\"; // TODO: Add user feedback so that they know what state the VRDisplay is in (disconnected, connected, entering-VR)\n      // css += \".babylonVRicon.vrdisplaysupported { }\";\n      // css += \".babylonVRicon.vrdisplayready { }\";\n      // css += \".babylonVRicon.vrdisplayrequesting { }\";\n\n      var style = document.createElement(\"style\");\n      style.appendChild(document.createTextNode(css));\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n\n      this._moveButtonToBottomRight();\n    } // VR button click event\n\n\n    if (this._btnVR) {\n      this._btnVR.addEventListener(\"click\", function () {\n        if (!_this.isInVRMode) {\n          _this.enterVR();\n        } else {\n          _this._scene.getEngine().disableVR();\n        }\n      });\n    } // Window events\n\n\n    var hostWindow = this._scene.getEngine().getHostWindow();\n\n    if (!hostWindow) {\n      return;\n    }\n\n    hostWindow.addEventListener(\"resize\", this._onResize);\n    document.addEventListener(\"fullscreenchange\", this._onFullscreenChange, false);\n    document.addEventListener(\"mozfullscreenchange\", this._onFullscreenChange, false);\n    document.addEventListener(\"webkitfullscreenchange\", this._onFullscreenChange, false);\n    document.addEventListener(\"msfullscreenchange\", this._onFullscreenChange, false);\n    document.onmsfullscreenchange = this._onFullscreenChange; // Display vr button when headset is connected\n\n    if (webVROptions.createFallbackVRDeviceOrientationFreeCamera) {\n      this._displayVRButton();\n    } else {\n      this._scene.getEngine().onVRDisplayChangedObservable.add(function (e) {\n        if (e.vrDisplay) {\n          _this._displayVRButton();\n        }\n      });\n    } // Exiting VR mode using 'ESC' key on desktop\n\n\n    this._onKeyDown = function (event) {\n      if (event.keyCode === 27 && _this.isInVRMode) {\n        _this.exitVR();\n      }\n    };\n\n    document.addEventListener(\"keydown\", this._onKeyDown); // Exiting VR mode double tapping the touch screen\n\n    this._scene.onPrePointerObservable.add(function () {\n      if (_this._hasEnteredVR && _this.exitVROnDoubleTap) {\n        _this.exitVR();\n\n        if (_this._fullscreenVRpresenting) {\n          _this._scene.getEngine().exitFullscreen();\n        }\n      }\n    }, PointerEventTypes.POINTERDOUBLETAP, false); // Listen for WebVR display changes\n\n\n    this._onVRDisplayChangedBind = function (eventArgs) {\n      return _this._onVRDisplayChanged(eventArgs);\n    };\n\n    this._onVrDisplayPresentChangeBind = function () {\n      return _this._onVrDisplayPresentChange();\n    };\n\n    this._onVRRequestPresentStart = function () {\n      _this._webVRrequesting = true;\n\n      _this._updateButtonVisibility();\n    };\n\n    this._onVRRequestPresentComplete = function () {\n      _this._webVRrequesting = false;\n\n      _this._updateButtonVisibility();\n    };\n\n    scene.getEngine().onVRDisplayChangedObservable.add(this._onVRDisplayChangedBind);\n    scene.getEngine().onVRRequestPresentStart.add(this._onVRRequestPresentStart);\n    scene.getEngine().onVRRequestPresentComplete.add(this._onVRRequestPresentComplete);\n    hostWindow.addEventListener(\"vrdisplaypresentchange\", this._onVrDisplayPresentChangeBind);\n    scene.onDisposeObservable.add(function () {\n      _this.dispose();\n    }); // Gamepad connection events\n\n    this._webVRCamera.onControllerMeshLoadedObservable.add(function (webVRController) {\n      return _this._onDefaultMeshLoaded(webVRController);\n    });\n\n    this._scene.gamepadManager.onGamepadConnectedObservable.add(this._onNewGamepadConnected);\n\n    this._scene.gamepadManager.onGamepadDisconnectedObservable.add(this._onNewGamepadDisconnected);\n\n    this._updateButtonVisibility(); //create easing functions\n\n\n    this._circleEase = new CircleEase();\n\n    this._circleEase.setEasingMode(EasingFunction.EASINGMODE_EASEINOUT);\n\n    this._teleportationEasing = this._circleEase; // Allow clicking in the vrDeviceOrientationCamera\n\n    scene.onPointerObservable.add(function (e) {\n      if (_this._interactionsEnabled) {\n        if (scene.activeCamera === _this.vrDeviceOrientationCamera && e.event.pointerType === \"mouse\") {\n          if (e.type === PointerEventTypes.POINTERDOWN) {\n            _this._cameraGazer._selectionPointerDown();\n          } else if (e.type === PointerEventTypes.POINTERUP) {\n            _this._cameraGazer._selectionPointerUp();\n          }\n        }\n      }\n    });\n\n    if (this.webVROptions.floorMeshes) {\n      this.enableTeleportation({\n        floorMeshes: this.webVROptions.floorMeshes\n      });\n    }\n  }; // Raised when one of the controller has loaded successfully its associated default mesh\n\n\n  VRExperienceHelper.prototype._onDefaultMeshLoaded = function (webVRController) {\n    if (this._leftController && this._leftController.webVRController == webVRController) {\n      if (webVRController.mesh) {\n        this._leftController._setLaserPointerParent(webVRController.mesh);\n      }\n    }\n\n    if (this._rightController && this._rightController.webVRController == webVRController) {\n      if (webVRController.mesh) {\n        this._rightController._setLaserPointerParent(webVRController.mesh);\n      }\n    }\n\n    try {\n      this.onControllerMeshLoadedObservable.notifyObservers(webVRController);\n    } catch (err) {\n      Logger.Warn(\"Error in your custom logic onControllerMeshLoaded: \" + err);\n    }\n  };\n\n  Object.defineProperty(VRExperienceHelper.prototype, \"isInVRMode\", {\n    /**\n     * Gets a value indicating if we are currently in VR mode.\n     */\n    get: function get() {\n      return this.xr && this.webVROptions.useXR && this.xr.baseExperience.state === WebXRState.IN_XR || this._webVRpresenting || this._fullscreenVRpresenting;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  VRExperienceHelper.prototype._onVrDisplayPresentChange = function () {\n    var vrDisplay = this._scene.getEngine().getVRDevice();\n\n    if (vrDisplay) {\n      var wasPresenting = this._webVRpresenting;\n      this._webVRpresenting = vrDisplay.isPresenting;\n\n      if (wasPresenting && !this._webVRpresenting) {\n        this.exitVR();\n      }\n    } else {\n      Logger.Warn(\"Detected VRDisplayPresentChange on an unknown VRDisplay. Did you can enterVR on the vrExperienceHelper?\");\n    }\n\n    this._updateButtonVisibility();\n  };\n\n  VRExperienceHelper.prototype._onVRDisplayChanged = function (eventArgs) {\n    this._webVRsupported = eventArgs.vrSupported;\n    this._webVRready = !!eventArgs.vrDisplay;\n    this._webVRpresenting = eventArgs.vrDisplay && eventArgs.vrDisplay.isPresenting;\n\n    this._updateButtonVisibility();\n  };\n\n  VRExperienceHelper.prototype._moveButtonToBottomRight = function () {\n    if (this._inputElement && !this._useCustomVRButton && this._btnVR) {\n      var rect = this._inputElement.getBoundingClientRect();\n\n      this._btnVR.style.top = rect.top + rect.height - 70 + \"px\";\n      this._btnVR.style.left = rect.left + rect.width - 100 + \"px\";\n    }\n  };\n\n  VRExperienceHelper.prototype._displayVRButton = function () {\n    if (!this._useCustomVRButton && !this._btnVRDisplayed && this._btnVR) {\n      document.body.appendChild(this._btnVR);\n      this._btnVRDisplayed = true;\n    }\n  };\n\n  VRExperienceHelper.prototype._updateButtonVisibility = function () {\n    if (!this._btnVR || this._useCustomVRButton) {\n      return;\n    }\n\n    this._btnVR.className = \"babylonVRicon\";\n\n    if (this.isInVRMode) {\n      this._btnVR.className += \" vrdisplaypresenting\";\n    } else {\n      if (this._webVRready) {\n        this._btnVR.className += \" vrdisplayready\";\n      }\n\n      if (this._webVRsupported) {\n        this._btnVR.className += \" vrdisplaysupported\";\n      }\n\n      if (this._webVRrequesting) {\n        this._btnVR.className += \" vrdisplayrequesting\";\n      }\n    }\n  };\n  /**\n   * Attempt to enter VR. If a headset is connected and ready, will request present on that.\n   * Otherwise, will use the fullscreen API.\n   */\n\n\n  VRExperienceHelper.prototype.enterVR = function () {\n    var _this = this;\n\n    if (this.xr) {\n      this.xr.baseExperience.enterXRAsync(\"immersive-vr\", \"local-floor\", this.xr.renderTarget);\n      return;\n    }\n\n    if (this.onEnteringVRObservable) {\n      try {\n        this.onEnteringVRObservable.notifyObservers(this);\n      } catch (err) {\n        Logger.Warn(\"Error in your custom logic onEnteringVR: \" + err);\n      }\n    }\n\n    if (this._scene.activeCamera) {\n      this._position = this._scene.activeCamera.position.clone();\n\n      if (this.vrDeviceOrientationCamera) {\n        this.vrDeviceOrientationCamera.rotation = Quaternion.FromRotationMatrix(this._scene.activeCamera.getWorldMatrix().getRotationMatrix()).toEulerAngles();\n        this.vrDeviceOrientationCamera.angularSensibility = 2000;\n      }\n\n      if (this.webVRCamera) {\n        var currentYRotation = this.webVRCamera.deviceRotationQuaternion.toEulerAngles().y;\n        var desiredYRotation = Quaternion.FromRotationMatrix(this._scene.activeCamera.getWorldMatrix().getRotationMatrix()).toEulerAngles().y;\n        var delta = desiredYRotation - currentYRotation;\n        var currentGlobalRotation = this.webVRCamera.rotationQuaternion.toEulerAngles().y;\n        this.webVRCamera.rotationQuaternion = Quaternion.FromEulerAngles(0, currentGlobalRotation + delta, 0);\n      } // make sure that we return to the last active camera\n\n\n      this._existingCamera = this._scene.activeCamera; // Remove and cache angular sensability to avoid camera rotation when in VR\n\n      if (this._existingCamera.angularSensibilityX) {\n        this._cachedAngularSensibility.angularSensibilityX = this._existingCamera.angularSensibilityX;\n        this._existingCamera.angularSensibilityX = Number.MAX_VALUE;\n      }\n\n      if (this._existingCamera.angularSensibilityY) {\n        this._cachedAngularSensibility.angularSensibilityY = this._existingCamera.angularSensibilityY;\n        this._existingCamera.angularSensibilityY = Number.MAX_VALUE;\n      }\n\n      if (this._existingCamera.angularSensibility) {\n        this._cachedAngularSensibility.angularSensibility = this._existingCamera.angularSensibility;\n        this._existingCamera.angularSensibility = Number.MAX_VALUE;\n      }\n    }\n\n    if (this._webVRrequesting) {\n      return;\n    } // If WebVR is supported and a headset is connected\n\n\n    if (this._webVRready) {\n      if (!this._webVRpresenting) {\n        this._scene.getEngine().onVRRequestPresentComplete.addOnce(function (result) {\n          _this.onAfterEnteringVRObservable.notifyObservers({\n            success: result\n          });\n        });\n\n        this._webVRCamera.position = this._position;\n        this._scene.activeCamera = this._webVRCamera;\n      }\n    } else if (this._vrDeviceOrientationCamera) {\n      this._vrDeviceOrientationCamera.position = this._position;\n\n      if (this._scene.activeCamera) {\n        this._vrDeviceOrientationCamera.minZ = this._scene.activeCamera.minZ;\n      }\n\n      this._scene.activeCamera = this._vrDeviceOrientationCamera;\n\n      this._scene.getEngine().enterFullscreen(this.requestPointerLockOnFullScreen);\n\n      this._updateButtonVisibility();\n\n      this._vrDeviceOrientationCamera.onViewMatrixChangedObservable.addOnce(function () {\n        _this.onAfterEnteringVRObservable.notifyObservers({\n          success: true\n        });\n      });\n    }\n\n    if (this._scene.activeCamera && this._inputElement) {\n      this._scene.activeCamera.attachControl();\n    }\n\n    if (this._interactionsEnabled) {\n      this._scene.registerBeforeRender(this._beforeRender);\n    }\n\n    if (this._displayLaserPointer) {\n      [this._leftController, this._rightController].forEach(function (controller) {\n        if (controller) {\n          controller._activatePointer();\n        }\n      });\n    }\n\n    this._hasEnteredVR = true;\n  };\n  /**\n   * Attempt to exit VR, or fullscreen.\n   */\n\n\n  VRExperienceHelper.prototype.exitVR = function () {\n    if (this.xr) {\n      this.xr.baseExperience.exitXRAsync();\n      return;\n    }\n\n    if (this._hasEnteredVR) {\n      if (this.onExitingVRObservable) {\n        try {\n          this.onExitingVRObservable.notifyObservers(this);\n        } catch (err) {\n          Logger.Warn(\"Error in your custom logic onExitingVR: \" + err);\n        }\n      }\n\n      if (this._webVRpresenting) {\n        this._scene.getEngine().disableVR();\n      }\n\n      if (this._scene.activeCamera) {\n        this._position = this._scene.activeCamera.position.clone();\n      }\n\n      if (this.vrDeviceOrientationCamera) {\n        this.vrDeviceOrientationCamera.angularSensibility = Number.MAX_VALUE;\n      }\n\n      if (this._deviceOrientationCamera) {\n        this._deviceOrientationCamera.position = this._position;\n        this._scene.activeCamera = this._deviceOrientationCamera; // Restore angular sensibility\n\n        if (this._cachedAngularSensibility.angularSensibilityX) {\n          this._deviceOrientationCamera.angularSensibilityX = this._cachedAngularSensibility.angularSensibilityX;\n          this._cachedAngularSensibility.angularSensibilityX = null;\n        }\n\n        if (this._cachedAngularSensibility.angularSensibilityY) {\n          this._deviceOrientationCamera.angularSensibilityY = this._cachedAngularSensibility.angularSensibilityY;\n          this._cachedAngularSensibility.angularSensibilityY = null;\n        }\n\n        if (this._cachedAngularSensibility.angularSensibility) {\n          this._deviceOrientationCamera.angularSensibility = this._cachedAngularSensibility.angularSensibility;\n          this._cachedAngularSensibility.angularSensibility = null;\n        }\n      } else if (this._existingCamera) {\n        this._existingCamera.position = this._position;\n        this._scene.activeCamera = this._existingCamera;\n\n        if (this._inputElement) {\n          this._scene.activeCamera.attachControl();\n        } // Restore angular sensibility\n\n\n        if (this._cachedAngularSensibility.angularSensibilityX) {\n          this._existingCamera.angularSensibilityX = this._cachedAngularSensibility.angularSensibilityX;\n          this._cachedAngularSensibility.angularSensibilityX = null;\n        }\n\n        if (this._cachedAngularSensibility.angularSensibilityY) {\n          this._existingCamera.angularSensibilityY = this._cachedAngularSensibility.angularSensibilityY;\n          this._cachedAngularSensibility.angularSensibilityY = null;\n        }\n\n        if (this._cachedAngularSensibility.angularSensibility) {\n          this._existingCamera.angularSensibility = this._cachedAngularSensibility.angularSensibility;\n          this._cachedAngularSensibility.angularSensibility = null;\n        }\n      }\n\n      this._updateButtonVisibility();\n\n      if (this._interactionsEnabled) {\n        this._scene.unregisterBeforeRender(this._beforeRender);\n\n        this._cameraGazer._gazeTracker.isVisible = false;\n\n        if (this._leftController) {\n          this._leftController._gazeTracker.isVisible = false;\n        }\n\n        if (this._rightController) {\n          this._rightController._gazeTracker.isVisible = false;\n        }\n      } // resize to update width and height when exiting vr exits fullscreen\n\n\n      this._scene.getEngine().resize();\n\n      [this._leftController, this._rightController].forEach(function (controller) {\n        if (controller) {\n          controller._deactivatePointer();\n        }\n      });\n      this._hasEnteredVR = false; // Update engine state to re enable non-vr camera input\n\n      var engine = this._scene.getEngine();\n\n      if (engine._onVrDisplayPresentChange) {\n        engine._onVrDisplayPresentChange();\n      }\n    }\n  };\n\n  Object.defineProperty(VRExperienceHelper.prototype, \"position\", {\n    /**\n     * The position of the vr experience helper.\n     */\n    get: function get() {\n      return this._position;\n    },\n\n    /**\n     * Sets the position of the vr experience helper.\n     */\n    set: function set(value) {\n      this._position = value;\n\n      if (this._scene.activeCamera) {\n        this._scene.activeCamera.position = value;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Enables controllers and user interactions such as selecting and object or clicking on an object.\n   */\n\n  VRExperienceHelper.prototype.enableInteractions = function () {\n    var _this = this;\n\n    if (!this._interactionsEnabled) {\n      this._interactionsRequested = true; // in XR it is enabled by default, but just to make sure, re-attach\n\n      if (this.xr) {\n        if (this.xr.baseExperience.state === WebXRState.IN_XR) {\n          this.xr.pointerSelection.attach();\n        }\n\n        return;\n      }\n\n      if (this._leftController) {\n        this._enableInteractionOnController(this._leftController);\n      }\n\n      if (this._rightController) {\n        this._enableInteractionOnController(this._rightController);\n      }\n\n      this.raySelectionPredicate = function (mesh) {\n        return mesh.isVisible && (mesh.isPickable || mesh.name === _this._floorMeshName);\n      };\n\n      this.meshSelectionPredicate = function () {\n        return true;\n      };\n\n      this._raySelectionPredicate = function (mesh) {\n        if (_this._isTeleportationFloor(mesh) || mesh.name.indexOf(\"gazeTracker\") === -1 && mesh.name.indexOf(\"teleportationTarget\") === -1 && mesh.name.indexOf(\"torusTeleportation\") === -1) {\n          return _this.raySelectionPredicate(mesh);\n        }\n\n        return false;\n      };\n\n      this._interactionsEnabled = true;\n    }\n  };\n\n  Object.defineProperty(VRExperienceHelper.prototype, \"_noControllerIsActive\", {\n    get: function get() {\n      return !(this._leftController && this._leftController._activePointer) && !(this._rightController && this._rightController._activePointer);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  VRExperienceHelper.prototype._isTeleportationFloor = function (mesh) {\n    for (var i = 0; i < this._floorMeshesCollection.length; i++) {\n      if (this._floorMeshesCollection[i].id === mesh.id) {\n        return true;\n      }\n    }\n\n    if (this._floorMeshName && mesh.name === this._floorMeshName) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * Adds a floor mesh to be used for teleportation.\n   * @param floorMesh the mesh to be used for teleportation.\n   */\n\n\n  VRExperienceHelper.prototype.addFloorMesh = function (floorMesh) {\n    if (!this._floorMeshesCollection) {\n      return;\n    }\n\n    if (this._floorMeshesCollection.indexOf(floorMesh) > -1) {\n      return;\n    }\n\n    this._floorMeshesCollection.push(floorMesh);\n  };\n  /**\n   * Removes a floor mesh from being used for teleportation.\n   * @param floorMesh the mesh to be removed.\n   */\n\n\n  VRExperienceHelper.prototype.removeFloorMesh = function (floorMesh) {\n    if (!this._floorMeshesCollection) {\n      return;\n    }\n\n    var meshIndex = this._floorMeshesCollection.indexOf(floorMesh);\n\n    if (meshIndex !== -1) {\n      this._floorMeshesCollection.splice(meshIndex, 1);\n    }\n  };\n  /**\n   * Enables interactions and teleportation using the VR controllers and gaze.\n   * @param vrTeleportationOptions options to modify teleportation behavior.\n   */\n\n\n  VRExperienceHelper.prototype.enableTeleportation = function (vrTeleportationOptions) {\n    var _this = this;\n\n    if (vrTeleportationOptions === void 0) {\n      vrTeleportationOptions = {};\n    }\n\n    if (!this._teleportationInitialized) {\n      this._teleportationRequested = true;\n      this.enableInteractions();\n\n      if (this.webVROptions.useXR && (vrTeleportationOptions.floorMeshes || vrTeleportationOptions.floorMeshName)) {\n        var floorMeshes = vrTeleportationOptions.floorMeshes || [];\n\n        if (!floorMeshes.length) {\n          var floorMesh = this._scene.getMeshByName(vrTeleportationOptions.floorMeshName);\n\n          if (floorMesh) {\n            floorMeshes.push(floorMesh);\n          }\n        }\n\n        if (this.xr) {\n          floorMeshes.forEach(function (mesh) {\n            _this.xr.teleportation.addFloorMesh(mesh);\n          });\n\n          if (!this.xr.teleportation.attached) {\n            this.xr.teleportation.attach();\n          }\n\n          return;\n        } else if (!this.xrTestDone) {\n          var waitForXr_1 = function waitForXr_1() {\n            if (_this.xrTestDone) {\n              _this._scene.unregisterBeforeRender(waitForXr_1);\n\n              if (_this.xr) {\n                if (!_this.xr.teleportation.attached) {\n                  _this.xr.teleportation.attach();\n                }\n              } else {\n                _this.enableTeleportation(vrTeleportationOptions);\n              }\n            }\n          };\n\n          this._scene.registerBeforeRender(waitForXr_1);\n\n          return;\n        }\n      }\n\n      if (vrTeleportationOptions.floorMeshName) {\n        this._floorMeshName = vrTeleportationOptions.floorMeshName;\n      }\n\n      if (vrTeleportationOptions.floorMeshes) {\n        this._floorMeshesCollection = vrTeleportationOptions.floorMeshes;\n      }\n\n      if (vrTeleportationOptions.teleportationMode) {\n        this._teleportationMode = vrTeleportationOptions.teleportationMode;\n      }\n\n      if (vrTeleportationOptions.teleportationTime && vrTeleportationOptions.teleportationTime > 0) {\n        this._teleportationTime = vrTeleportationOptions.teleportationTime;\n      }\n\n      if (vrTeleportationOptions.teleportationSpeed && vrTeleportationOptions.teleportationSpeed > 0) {\n        this._teleportationSpeed = vrTeleportationOptions.teleportationSpeed;\n      }\n\n      if (vrTeleportationOptions.easingFunction !== undefined) {\n        this._teleportationEasing = vrTeleportationOptions.easingFunction;\n      }\n\n      if (this._leftController != null) {\n        this._enableTeleportationOnController(this._leftController);\n      }\n\n      if (this._rightController != null) {\n        this._enableTeleportationOnController(this._rightController);\n      } // Creates an image processing post process for the vignette not relying\n      // on the main scene configuration for image processing to reduce setup and spaces\n      // (gamma/linear) conflicts.\n\n\n      var imageProcessingConfiguration = new ImageProcessingConfiguration();\n      imageProcessingConfiguration.vignetteColor = new Color4(0, 0, 0, 0);\n      imageProcessingConfiguration.vignetteEnabled = true;\n      this._postProcessMove = new ImageProcessingPostProcess(\"postProcessMove\", 1.0, this._webVRCamera, undefined, undefined, undefined, undefined, imageProcessingConfiguration);\n\n      this._webVRCamera.detachPostProcess(this._postProcessMove);\n\n      this._teleportationInitialized = true;\n\n      if (this._isDefaultTeleportationTarget) {\n        this._createTeleportationCircles();\n\n        this._teleportationTarget.scaling.scaleInPlace(this._webVRCamera.deviceScaleFactor);\n      }\n    }\n  };\n\n  VRExperienceHelper.prototype._enableInteractionOnController = function (controller) {\n    var _this = this;\n\n    var controllerMesh = controller.webVRController.mesh;\n\n    if (controllerMesh) {\n      controller._interactionsEnabled = true;\n\n      if (this.isInVRMode && this._displayLaserPointer) {\n        controller._activatePointer();\n      }\n\n      if (this.webVROptions.laserToggle) {\n        controller.webVRController.onMainButtonStateChangedObservable.add(function (stateObject) {\n          // Enabling / disabling laserPointer\n          if (_this._displayLaserPointer && stateObject.value === 1) {\n            if (controller._activePointer) {\n              controller._deactivatePointer();\n            } else {\n              controller._activatePointer();\n            }\n\n            if (_this.displayGaze) {\n              controller._gazeTracker.isVisible = controller._activePointer;\n            }\n          }\n        });\n      }\n\n      controller.webVRController.onTriggerStateChangedObservable.add(function (stateObject) {\n        var gazer = controller;\n\n        if (_this._noControllerIsActive) {\n          gazer = _this._cameraGazer;\n        }\n\n        if (!gazer._pointerDownOnMeshAsked) {\n          if (stateObject.value > _this._padSensibilityUp) {\n            gazer._selectionPointerDown();\n          }\n        } else if (stateObject.value < _this._padSensibilityDown) {\n          gazer._selectionPointerUp();\n        }\n      });\n    }\n  };\n\n  VRExperienceHelper.prototype._checkTeleportWithRay = function (stateObject, gazer) {\n    // Dont teleport if another gaze already requested teleportation\n    if (this._teleportationRequestInitiated && !gazer._teleportationRequestInitiated) {\n      return;\n    }\n\n    if (!gazer._teleportationRequestInitiated) {\n      if (stateObject.y < -this._padSensibilityUp && gazer._dpadPressed) {\n        gazer._activatePointer();\n\n        gazer._teleportationRequestInitiated = true;\n      }\n    } else {\n      // Listening to the proper controller values changes to confirm teleportation\n      if (Math.sqrt(stateObject.y * stateObject.y + stateObject.x * stateObject.x) < this._padSensibilityDown) {\n        if (this._teleportActive) {\n          this.teleportCamera(this._haloCenter);\n        }\n\n        gazer._teleportationRequestInitiated = false;\n      }\n    }\n  };\n\n  VRExperienceHelper.prototype._checkRotate = function (stateObject, gazer) {\n    // Only rotate when user is not currently selecting a teleportation location\n    if (gazer._teleportationRequestInitiated) {\n      return;\n    }\n\n    if (!gazer._rotationLeftAsked) {\n      if (stateObject.x < -this._padSensibilityUp && gazer._dpadPressed) {\n        gazer._rotationLeftAsked = true;\n\n        if (this._rotationAllowed) {\n          this._rotateCamera(false);\n        }\n      }\n    } else {\n      if (stateObject.x > -this._padSensibilityDown) {\n        gazer._rotationLeftAsked = false;\n      }\n    }\n\n    if (!gazer._rotationRightAsked) {\n      if (stateObject.x > this._padSensibilityUp && gazer._dpadPressed) {\n        gazer._rotationRightAsked = true;\n\n        if (this._rotationAllowed) {\n          this._rotateCamera(true);\n        }\n      }\n    } else {\n      if (stateObject.x < this._padSensibilityDown) {\n        gazer._rotationRightAsked = false;\n      }\n    }\n  };\n\n  VRExperienceHelper.prototype._checkTeleportBackwards = function (stateObject, gazer) {\n    // Only teleport backwards when user is not currently selecting a teleportation location\n    if (gazer._teleportationRequestInitiated) {\n      return;\n    } // Teleport backwards\n\n\n    if (stateObject.y > this._padSensibilityUp && gazer._dpadPressed) {\n      if (!gazer._teleportationBackRequestInitiated) {\n        if (!this.currentVRCamera) {\n          return;\n        } // Get rotation and position of the current camera\n\n\n        var rotation = Quaternion.FromRotationMatrix(this.currentVRCamera.getWorldMatrix().getRotationMatrix());\n        var position = this.currentVRCamera.position; // If the camera has device position, use that instead\n\n        if (this.currentVRCamera.devicePosition && this.currentVRCamera.deviceRotationQuaternion) {\n          rotation = this.currentVRCamera.deviceRotationQuaternion;\n          position = this.currentVRCamera.devicePosition;\n        } // Get matrix with only the y rotation of the device rotation\n\n\n        rotation.toEulerAnglesToRef(this._workingVector);\n        this._workingVector.z = 0;\n        this._workingVector.x = 0;\n        Quaternion.RotationYawPitchRollToRef(this._workingVector.y, this._workingVector.x, this._workingVector.z, this._workingQuaternion);\n\n        this._workingQuaternion.toRotationMatrix(this._workingMatrix); // Rotate backwards ray by device rotation to cast at the ground behind the user\n\n\n        Vector3.TransformCoordinatesToRef(this._teleportBackwardsVector, this._workingMatrix, this._workingVector); // Teleport if ray hit the ground and is not to far away eg. backwards off a cliff\n\n        var ray = new Ray(position, this._workingVector);\n\n        var hit = this._scene.pickWithRay(ray, this._raySelectionPredicate);\n\n        if (hit && hit.pickedPoint && hit.pickedMesh && this._isTeleportationFloor(hit.pickedMesh) && hit.distance < 5) {\n          this.teleportCamera(hit.pickedPoint);\n        }\n\n        gazer._teleportationBackRequestInitiated = true;\n      }\n    } else {\n      gazer._teleportationBackRequestInitiated = false;\n    }\n  };\n\n  VRExperienceHelper.prototype._enableTeleportationOnController = function (controller) {\n    var _this = this;\n\n    var controllerMesh = controller.webVRController.mesh;\n\n    if (controllerMesh) {\n      if (!controller._interactionsEnabled) {\n        this._enableInteractionOnController(controller);\n      }\n\n      controller._interactionsEnabled = true;\n      controller._teleportationEnabled = true;\n\n      if (controller.webVRController.controllerType === PoseEnabledControllerType.VIVE) {\n        controller._dpadPressed = false;\n        controller.webVRController.onPadStateChangedObservable.add(function (stateObject) {\n          controller._dpadPressed = stateObject.pressed;\n\n          if (!controller._dpadPressed) {\n            controller._rotationLeftAsked = false;\n            controller._rotationRightAsked = false;\n            controller._teleportationBackRequestInitiated = false;\n          }\n        });\n      }\n\n      controller.webVRController.onPadValuesChangedObservable.add(function (stateObject) {\n        if (_this.teleportationEnabled) {\n          _this._checkTeleportBackwards(stateObject, controller);\n\n          _this._checkTeleportWithRay(stateObject, controller);\n        }\n\n        _this._checkRotate(stateObject, controller);\n      });\n    }\n  };\n\n  VRExperienceHelper.prototype._createTeleportationCircles = function () {\n    this._teleportationTarget = CreateGround(\"teleportationTarget\", {\n      width: 2,\n      height: 2,\n      subdivisions: 2\n    }, this._scene);\n    this._teleportationTarget.isPickable = false;\n    var length = 512;\n    var dynamicTexture = new DynamicTexture(\"DynamicTexture\", length, this._scene, true);\n    dynamicTexture.hasAlpha = true;\n    var context = dynamicTexture.getContext();\n    var centerX = length / 2;\n    var centerY = length / 2;\n    var radius = 200;\n    context.beginPath();\n    context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n    context.fillStyle = this._teleportationFillColor;\n    context.fill();\n    context.lineWidth = 10;\n    context.strokeStyle = this._teleportationBorderColor;\n    context.stroke();\n    context.closePath();\n    dynamicTexture.update();\n    var teleportationCircleMaterial = new StandardMaterial(\"TextPlaneMaterial\", this._scene);\n    teleportationCircleMaterial.diffuseTexture = dynamicTexture;\n    this._teleportationTarget.material = teleportationCircleMaterial;\n    var torus = CreateTorus(\"torusTeleportation\", {\n      diameter: 0.75,\n      thickness: 0.1,\n      tessellation: 25,\n      updatable: false\n    }, this._scene);\n    torus.isPickable = false;\n    torus.parent = this._teleportationTarget;\n    var animationInnerCircle = new Animation(\"animationInnerCircle\", \"position.y\", 30, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CYCLE);\n    var keys = [];\n    keys.push({\n      frame: 0,\n      value: 0\n    });\n    keys.push({\n      frame: 30,\n      value: 0.4\n    });\n    keys.push({\n      frame: 60,\n      value: 0\n    });\n    animationInnerCircle.setKeys(keys);\n    var easingFunction = new SineEase();\n    easingFunction.setEasingMode(EasingFunction.EASINGMODE_EASEINOUT);\n    animationInnerCircle.setEasingFunction(easingFunction);\n    torus.animations = [];\n    torus.animations.push(animationInnerCircle);\n\n    this._scene.beginAnimation(torus, 0, 60, true);\n\n    this._hideTeleportationTarget();\n  };\n\n  VRExperienceHelper.prototype._displayTeleportationTarget = function () {\n    this._teleportActive = true;\n\n    if (this._teleportationInitialized) {\n      this._teleportationTarget.isVisible = true;\n\n      if (this._isDefaultTeleportationTarget) {\n        this._teleportationTarget.getChildren()[0].isVisible = true;\n      }\n    }\n  };\n\n  VRExperienceHelper.prototype._hideTeleportationTarget = function () {\n    this._teleportActive = false;\n\n    if (this._teleportationInitialized) {\n      this._teleportationTarget.isVisible = false;\n\n      if (this._isDefaultTeleportationTarget) {\n        this._teleportationTarget.getChildren()[0].isVisible = false;\n      }\n    }\n  };\n\n  VRExperienceHelper.prototype._rotateCamera = function (right) {\n    var _this = this;\n\n    if (!(this.currentVRCamera instanceof FreeCamera)) {\n      return;\n    }\n\n    if (right) {\n      this._rotationAngle++;\n    } else {\n      this._rotationAngle--;\n    }\n\n    this.currentVRCamera.animations = [];\n    var target = Quaternion.FromRotationMatrix(Matrix.RotationY(Math.PI / 4 * this._rotationAngle));\n    var animationRotation = new Animation(\"animationRotation\", \"rotationQuaternion\", 90, Animation.ANIMATIONTYPE_QUATERNION, Animation.ANIMATIONLOOPMODE_CONSTANT);\n    var animationRotationKeys = [];\n    animationRotationKeys.push({\n      frame: 0,\n      value: this.currentVRCamera.rotationQuaternion\n    });\n    animationRotationKeys.push({\n      frame: 6,\n      value: target\n    });\n    animationRotation.setKeys(animationRotationKeys);\n    animationRotation.setEasingFunction(this._circleEase);\n    this.currentVRCamera.animations.push(animationRotation);\n    this._postProcessMove.animations = [];\n    var animationPP = new Animation(\"animationPP\", \"vignetteWeight\", 90, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CONSTANT);\n    var vignetteWeightKeys = [];\n    vignetteWeightKeys.push({\n      frame: 0,\n      value: 0\n    });\n    vignetteWeightKeys.push({\n      frame: 3,\n      value: 4\n    });\n    vignetteWeightKeys.push({\n      frame: 6,\n      value: 0\n    });\n    animationPP.setKeys(vignetteWeightKeys);\n    animationPP.setEasingFunction(this._circleEase);\n\n    this._postProcessMove.animations.push(animationPP);\n\n    var animationPP2 = new Animation(\"animationPP2\", \"vignetteStretch\", 90, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CONSTANT);\n    var vignetteStretchKeys = [];\n    vignetteStretchKeys.push({\n      frame: 0,\n      value: 0\n    });\n    vignetteStretchKeys.push({\n      frame: 3,\n      value: 10\n    });\n    vignetteStretchKeys.push({\n      frame: 6,\n      value: 0\n    });\n    animationPP2.setKeys(vignetteStretchKeys);\n    animationPP2.setEasingFunction(this._circleEase);\n\n    this._postProcessMove.animations.push(animationPP2);\n\n    this._postProcessMove.imageProcessingConfiguration.vignetteWeight = 0;\n    this._postProcessMove.imageProcessingConfiguration.vignetteStretch = 0;\n    this._postProcessMove.samples = 4;\n\n    this._webVRCamera.attachPostProcess(this._postProcessMove);\n\n    this._scene.beginAnimation(this._postProcessMove, 0, 6, false, 1, function () {\n      _this._webVRCamera.detachPostProcess(_this._postProcessMove);\n    });\n\n    this._scene.beginAnimation(this.currentVRCamera, 0, 6, false, 1);\n  };\n\n  VRExperienceHelper.prototype._moveTeleportationSelectorTo = function (hit, gazer, ray) {\n    if (hit.pickedPoint) {\n      if (gazer._teleportationRequestInitiated) {\n        this._displayTeleportationTarget();\n\n        this._haloCenter.copyFrom(hit.pickedPoint);\n\n        this._teleportationTarget.position.copyFrom(hit.pickedPoint);\n      }\n\n      var pickNormal = this._convertNormalToDirectionOfRay(hit.getNormal(true, false), ray);\n\n      if (pickNormal) {\n        var axis1 = Vector3.Cross(Axis.Y, pickNormal);\n        var axis2 = Vector3.Cross(pickNormal, axis1);\n        Vector3.RotationFromAxisToRef(axis2, pickNormal, axis1, this._teleportationTarget.rotation);\n      }\n\n      this._teleportationTarget.position.y += 0.1;\n    }\n  };\n  /**\n   * Teleports the users feet to the desired location\n   * @param location The location where the user's feet should be placed\n   */\n\n\n  VRExperienceHelper.prototype.teleportCamera = function (location) {\n    var _this = this;\n\n    if (!(this.currentVRCamera instanceof FreeCamera)) {\n      return;\n    } // Teleport the hmd to where the user is looking by moving the anchor to where they are looking minus the\n    // offset of the headset from the anchor.\n\n\n    if (this.webVRCamera.leftCamera) {\n      this._workingVector.copyFrom(this.webVRCamera.leftCamera.globalPosition);\n\n      this._workingVector.subtractInPlace(this.webVRCamera.position);\n\n      location.subtractToRef(this._workingVector, this._workingVector);\n    } else {\n      this._workingVector.copyFrom(location);\n    } // Add height to account for user's height offset\n\n\n    if (this.isInVRMode) {\n      this._workingVector.y += this.webVRCamera.deviceDistanceToRoomGround() * this._webVRCamera.deviceScaleFactor;\n    } else {\n      this._workingVector.y += this._defaultHeight;\n    }\n\n    this.onBeforeCameraTeleport.notifyObservers(this._workingVector); // Animations FPS\n\n    var FPS = 90;\n    var speedRatio, lastFrame;\n\n    if (this._teleportationMode == VRExperienceHelper.TELEPORTATIONMODE_CONSTANTSPEED) {\n      lastFrame = FPS;\n      var dist = Vector3.Distance(this.currentVRCamera.position, this._workingVector);\n      speedRatio = this._teleportationSpeed / dist;\n    } else {\n      // teleportationMode is TELEPORTATIONMODE_CONSTANTTIME\n      lastFrame = Math.round(this._teleportationTime * FPS / 1000);\n      speedRatio = 1;\n    } // Create animation from the camera's position to the new location\n\n\n    this.currentVRCamera.animations = [];\n    var animationCameraTeleportation = new Animation(\"animationCameraTeleportation\", \"position\", FPS, Animation.ANIMATIONTYPE_VECTOR3, Animation.ANIMATIONLOOPMODE_CONSTANT);\n    var animationCameraTeleportationKeys = [{\n      frame: 0,\n      value: this.currentVRCamera.position\n    }, {\n      frame: lastFrame,\n      value: this._workingVector\n    }];\n    animationCameraTeleportation.setKeys(animationCameraTeleportationKeys);\n    animationCameraTeleportation.setEasingFunction(this._teleportationEasing);\n    this.currentVRCamera.animations.push(animationCameraTeleportation);\n    this._postProcessMove.animations = []; // Calculate the mid frame for vignette animations\n\n    var midFrame = Math.round(lastFrame / 2);\n    var animationPP = new Animation(\"animationPP\", \"vignetteWeight\", FPS, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CONSTANT);\n    var vignetteWeightKeys = [];\n    vignetteWeightKeys.push({\n      frame: 0,\n      value: 0\n    });\n    vignetteWeightKeys.push({\n      frame: midFrame,\n      value: 8\n    });\n    vignetteWeightKeys.push({\n      frame: lastFrame,\n      value: 0\n    });\n    animationPP.setKeys(vignetteWeightKeys);\n\n    this._postProcessMove.animations.push(animationPP);\n\n    var animationPP2 = new Animation(\"animationPP2\", \"vignetteStretch\", FPS, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CONSTANT);\n    var vignetteStretchKeys = [];\n    vignetteStretchKeys.push({\n      frame: 0,\n      value: 0\n    });\n    vignetteStretchKeys.push({\n      frame: midFrame,\n      value: 10\n    });\n    vignetteStretchKeys.push({\n      frame: lastFrame,\n      value: 0\n    });\n    animationPP2.setKeys(vignetteStretchKeys);\n\n    this._postProcessMove.animations.push(animationPP2);\n\n    this._postProcessMove.imageProcessingConfiguration.vignetteWeight = 0;\n    this._postProcessMove.imageProcessingConfiguration.vignetteStretch = 0;\n\n    this._webVRCamera.attachPostProcess(this._postProcessMove);\n\n    this._scene.beginAnimation(this._postProcessMove, 0, lastFrame, false, speedRatio, function () {\n      _this._webVRCamera.detachPostProcess(_this._postProcessMove);\n    });\n\n    this._scene.beginAnimation(this.currentVRCamera, 0, lastFrame, false, speedRatio, function () {\n      _this.onAfterCameraTeleport.notifyObservers(_this._workingVector);\n    });\n\n    this._hideTeleportationTarget();\n  };\n\n  VRExperienceHelper.prototype._convertNormalToDirectionOfRay = function (normal, ray) {\n    if (normal) {\n      var angle = Math.acos(Vector3.Dot(normal, ray.direction));\n\n      if (angle < Math.PI / 2) {\n        normal.scaleInPlace(-1);\n      }\n    }\n\n    return normal;\n  };\n\n  VRExperienceHelper.prototype._castRayAndSelectObject = function (gazer) {\n    if (!(this.currentVRCamera instanceof FreeCamera)) {\n      return;\n    }\n\n    var ray = gazer._getForwardRay(this._rayLength);\n\n    var hit = this._scene.pickWithRay(ray, this._raySelectionPredicate);\n\n    if (hit) {\n      this._scene.simulatePointerMove(hit, {\n        pointerId: gazer._id\n      });\n    }\n\n    gazer._currentHit = hit; // Moving the gazeTracker on the mesh face targetted\n\n    if (hit && hit.pickedPoint) {\n      if (this._displayGaze) {\n        var multiplier = 1;\n        gazer._gazeTracker.isVisible = true;\n\n        if (gazer._isActionableMesh) {\n          multiplier = 3;\n        }\n\n        if (this.updateGazeTrackerScale) {\n          gazer._gazeTracker.scaling.x = hit.distance * multiplier;\n          gazer._gazeTracker.scaling.y = hit.distance * multiplier;\n          gazer._gazeTracker.scaling.z = hit.distance * multiplier;\n        }\n\n        var pickNormal = this._convertNormalToDirectionOfRay(hit.getNormal(), ray); // To avoid z-fighting\n\n\n        var deltaFighting = 0.002;\n\n        if (pickNormal) {\n          var axis1 = Vector3.Cross(Axis.Y, pickNormal);\n          var axis2 = Vector3.Cross(pickNormal, axis1);\n          Vector3.RotationFromAxisToRef(axis2, pickNormal, axis1, gazer._gazeTracker.rotation);\n        }\n\n        gazer._gazeTracker.position.copyFrom(hit.pickedPoint);\n\n        if (gazer._gazeTracker.position.x < 0) {\n          gazer._gazeTracker.position.x += deltaFighting;\n        } else {\n          gazer._gazeTracker.position.x -= deltaFighting;\n        }\n\n        if (gazer._gazeTracker.position.y < 0) {\n          gazer._gazeTracker.position.y += deltaFighting;\n        } else {\n          gazer._gazeTracker.position.y -= deltaFighting;\n        }\n\n        if (gazer._gazeTracker.position.z < 0) {\n          gazer._gazeTracker.position.z += deltaFighting;\n        } else {\n          gazer._gazeTracker.position.z -= deltaFighting;\n        }\n      } // Changing the size of the laser pointer based on the distance from the targetted point\n\n\n      gazer._updatePointerDistance(hit.distance);\n    } else {\n      gazer._updatePointerDistance();\n\n      gazer._gazeTracker.isVisible = false;\n    }\n\n    if (hit && hit.pickedMesh) {\n      // The object selected is the floor, we're in a teleportation scenario\n      if (this._teleportationInitialized && this._isTeleportationFloor(hit.pickedMesh) && hit.pickedPoint) {\n        // Moving the teleportation area to this targetted point\n        //Raise onSelectedMeshUnselected observable if ray collided floor mesh/meshes and a non floor mesh was previously selected\n        if (gazer._currentMeshSelected && !this._isTeleportationFloor(gazer._currentMeshSelected)) {\n          this._notifySelectedMeshUnselected(gazer._currentMeshSelected);\n        }\n\n        gazer._currentMeshSelected = null;\n\n        if (gazer._teleportationRequestInitiated) {\n          this._moveTeleportationSelectorTo(hit, gazer, ray);\n        }\n\n        return;\n      } // If not, we're in a selection scenario\n      //this._teleportationAllowed = false;\n\n\n      if (hit.pickedMesh !== gazer._currentMeshSelected) {\n        if (this.meshSelectionPredicate(hit.pickedMesh)) {\n          this.onNewMeshPicked.notifyObservers(hit);\n          gazer._currentMeshSelected = hit.pickedMesh;\n\n          if (hit.pickedMesh.isPickable && hit.pickedMesh.actionManager) {\n            this.changeGazeColor(this._pickedGazeColor);\n            this.changeLaserColor(this._pickedLaserColor);\n            gazer._isActionableMesh = true;\n          } else {\n            this.changeGazeColor(this._gazeColor);\n            this.changeLaserColor(this._laserColor);\n            gazer._isActionableMesh = false;\n          }\n\n          try {\n            this.onNewMeshSelected.notifyObservers(hit.pickedMesh);\n            var gazerAsControllerGazer = gazer;\n\n            if (gazerAsControllerGazer.webVRController) {\n              this.onMeshSelectedWithController.notifyObservers({\n                mesh: hit.pickedMesh,\n                controller: gazerAsControllerGazer.webVRController\n              });\n            }\n          } catch (err) {\n            Logger.Warn(\"Error while raising onNewMeshSelected or onMeshSelectedWithController: \" + err);\n          }\n        } else {\n          this._notifySelectedMeshUnselected(gazer._currentMeshSelected);\n\n          gazer._currentMeshSelected = null;\n          this.changeGazeColor(this._gazeColor);\n          this.changeLaserColor(this._laserColor);\n        }\n      }\n    } else {\n      this._notifySelectedMeshUnselected(gazer._currentMeshSelected);\n\n      gazer._currentMeshSelected = null; //this._teleportationAllowed = false;\n\n      this.changeGazeColor(this._gazeColor);\n      this.changeLaserColor(this._laserColor);\n    }\n  };\n\n  VRExperienceHelper.prototype._notifySelectedMeshUnselected = function (mesh) {\n    if (mesh) {\n      this.onSelectedMeshUnselected.notifyObservers(mesh);\n    }\n  };\n  /**\n   * Permanently set new colors for the laser pointer\n   * @param color the new laser color\n   * @param pickedColor the new laser color when picked mesh detected\n   */\n\n\n  VRExperienceHelper.prototype.setLaserColor = function (color, pickedColor) {\n    if (pickedColor === void 0) {\n      pickedColor = this._pickedLaserColor;\n    }\n\n    this._laserColor = color;\n    this._pickedLaserColor = pickedColor;\n  };\n  /**\n   * Set lighting enabled / disabled on the laser pointer of both controllers\n   * @param enabled should the lighting be enabled on the laser pointer\n   */\n\n\n  VRExperienceHelper.prototype.setLaserLightingState = function (enabled) {\n    if (enabled === void 0) {\n      enabled = true;\n    }\n\n    if (this._leftController) {\n      this._leftController._setLaserPointerLightingDisabled(!enabled);\n    }\n\n    if (this._rightController) {\n      this._rightController._setLaserPointerLightingDisabled(!enabled);\n    }\n  };\n  /**\n   * Permanently set new colors for the gaze pointer\n   * @param color the new gaze color\n   * @param pickedColor the new gaze color when picked mesh detected\n   */\n\n\n  VRExperienceHelper.prototype.setGazeColor = function (color, pickedColor) {\n    if (pickedColor === void 0) {\n      pickedColor = this._pickedGazeColor;\n    }\n\n    this._gazeColor = color;\n    this._pickedGazeColor = pickedColor;\n  };\n  /**\n   * Sets the color of the laser ray from the vr controllers.\n   * @param color new color for the ray.\n   */\n\n\n  VRExperienceHelper.prototype.changeLaserColor = function (color) {\n    if (!this.updateControllerLaserColor) {\n      return;\n    }\n\n    if (this._leftController) {\n      this._leftController._setLaserPointerColor(color);\n    }\n\n    if (this._rightController) {\n      this._rightController._setLaserPointerColor(color);\n    }\n  };\n  /**\n   * Sets the color of the ray from the vr headsets gaze.\n   * @param color new color for the ray.\n   */\n\n\n  VRExperienceHelper.prototype.changeGazeColor = function (color) {\n    if (!this.updateGazeTrackerColor) {\n      return;\n    }\n\n    if (!this._cameraGazer._gazeTracker.material) {\n      return;\n    }\n\n    this._cameraGazer._gazeTracker.material.emissiveColor = color;\n\n    if (this._leftController) {\n      this._leftController._gazeTracker.material.emissiveColor = color;\n    }\n\n    if (this._rightController) {\n      this._rightController._gazeTracker.material.emissiveColor = color;\n    }\n  };\n  /**\n   * Exits VR and disposes of the vr experience helper\n   */\n\n\n  VRExperienceHelper.prototype.dispose = function () {\n    if (this.isInVRMode) {\n      this.exitVR();\n    }\n\n    if (this._postProcessMove) {\n      this._postProcessMove.dispose();\n    }\n\n    if (this._webVRCamera) {\n      this._webVRCamera.dispose();\n    }\n\n    if (this._vrDeviceOrientationCamera) {\n      this._vrDeviceOrientationCamera.dispose();\n    }\n\n    if (!this._useCustomVRButton && this._btnVR && this._btnVR.parentNode) {\n      document.body.removeChild(this._btnVR);\n    }\n\n    if (this._deviceOrientationCamera && this._scene.activeCamera != this._deviceOrientationCamera) {\n      this._deviceOrientationCamera.dispose();\n    }\n\n    if (this._cameraGazer) {\n      this._cameraGazer.dispose();\n    }\n\n    if (this._leftController) {\n      this._leftController.dispose();\n    }\n\n    if (this._rightController) {\n      this._rightController.dispose();\n    }\n\n    if (this._teleportationTarget) {\n      this._teleportationTarget.dispose();\n    }\n\n    if (this.xr) {\n      this.xr.dispose();\n    }\n\n    this._floorMeshesCollection = [];\n    document.removeEventListener(\"keydown\", this._onKeyDown);\n    window.removeEventListener(\"vrdisplaypresentchange\", this._onVrDisplayPresentChangeBind);\n    window.removeEventListener(\"resize\", this._onResize);\n    document.removeEventListener(\"fullscreenchange\", this._onFullscreenChange);\n    document.removeEventListener(\"mozfullscreenchange\", this._onFullscreenChange);\n    document.removeEventListener(\"webkitfullscreenchange\", this._onFullscreenChange);\n    document.removeEventListener(\"msfullscreenchange\", this._onFullscreenChange);\n    document.onmsfullscreenchange = null;\n\n    this._scene.getEngine().onVRDisplayChangedObservable.removeCallback(this._onVRDisplayChangedBind);\n\n    this._scene.getEngine().onVRRequestPresentStart.removeCallback(this._onVRRequestPresentStart);\n\n    this._scene.getEngine().onVRRequestPresentComplete.removeCallback(this._onVRRequestPresentComplete);\n\n    this._scene.gamepadManager.onGamepadConnectedObservable.removeCallback(this._onNewGamepadConnected);\n\n    this._scene.gamepadManager.onGamepadDisconnectedObservable.removeCallback(this._onNewGamepadDisconnected);\n\n    this._scene.unregisterBeforeRender(this._beforeRender);\n  };\n  /**\n   * Gets the name of the VRExperienceHelper class\n   * @returns \"VRExperienceHelper\"\n   */\n\n\n  VRExperienceHelper.prototype.getClassName = function () {\n    return \"VRExperienceHelper\";\n  };\n  /**\n   * Time Constant Teleportation Mode\n   */\n\n\n  VRExperienceHelper.TELEPORTATIONMODE_CONSTANTTIME = 0;\n  /**\n   * Speed Constant Teleportation Mode\n   */\n\n  VRExperienceHelper.TELEPORTATIONMODE_CONSTANTSPEED = 1;\n  return VRExperienceHelper;\n}();\n\nexport { VRExperienceHelper };","map":{"version":3,"mappings":"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","names":["Logger","Observable","FreeCamera","TargetCamera","DeviceOrientationCamera","VRDeviceOrientationFreeCamera","WebVRFreeCamera","PointerEventTypes","Quaternion","Matrix","Vector3","Color3","Color4","Gamepad","PoseEnabledController","PoseEnabledControllerType","WebVRController","Xbox360Button","Mesh","Ray","ImageProcessingConfiguration","StandardMaterial","DynamicTexture","ImageProcessingPostProcess","SineEase","EasingFunction","CircleEase","Animation","VRCameraMetrics","Axis","WebXRSessionManager","WebXRState","CreateCylinder","CreateTorus","CreateGround","scene","gazeTrackerToClone","_id","VRExperienceHelperGazer","_IdCounter","_gazeTracker","diameter","thickness","tessellation","updatable","bakeCurrentTransformIntoVertices","isPickable","isVisible","targetMat","specularColor","Black","emissiveColor","backFaceCulling","material","clone","length","Zero","_pointerDownOnMeshAsked","_currentHit","simulatePointerDown","pointerId","simulatePointerUp","_activePointer","distance","_interactionsEnabled","_teleportationEnabled","dispose","__extends","webVRController","_super","_this","_laserPointer","height","diameterTop","diameterBottom","subdivisions","laserPointerMaterial","alpha","rotation","x","Math","PI","position","z","mesh","preloadMesh","preloadPointerPose","POINTING_POSE","addChild","attachToMesh","_setLaserPointerParent","_meshAttachedObserver","_meshAttachedObservable","add","VRExperienceHelperControllerGazer","getForwardRay","_activatePointer","call","_deactivatePointer","color","disabled","disableLighting","makeNotPick","root","getChildMeshes","forEach","c","meshChildren","getChildren","undefined","laserParent","_pointingPoseNode","i","name","indexOf","parent","scaling","y","remove","_getCamera","VRExperienceHelperCameraGazer","camera","Forward","webVROptions","VRExperienceHelper","TELEPORTATIONMODE_CONSTANTTIME","_moveButtonToBottomRight","_fullscreenVRpresenting","_webVRready","exitVR","anyDoc","document","fullscreen","mozFullScreen","webkitIsFullScreen","msIsFullScreen","msFullscreenElement","_inputElement","_useCustomVRButton","_btnVR","style","top","offsetTop","offsetHeight","left","offsetLeft","offsetWidth","_updateButtonVisibility","angularSensibilityX","angularSensibilityY","angularSensibility","_leftController","_castRayAndSelectObject","_rightController","_noControllerIsActive","_scene","getEngine","isPointerLock","enableGazeEvenWhenNoPointerLock","_cameraGazer","gamepad","type","POSE_ENABLED","leftStick","onleftstickchanged","stickValues","_teleportationInitialized","teleportationEnabled","_checkTeleportWithRay","_checkTeleportBackwards","rightStick","onrightstickchanged","_checkRotate","XBOX","onbuttondown","buttonPressed","A","_selectionPointerDown","onbuttonup","_selectionPointerUp","controller","hand","_tryEnableInteractionOnController","_interactionsRequested","_enableInteractionOnController","_teleportationRequested","_enableTeleportationOnController","Identity","Warn","getInputElement","vrSupported","navigator","useXR","createFallbackVRDeviceOrientationFreeCamera","createDeviceOrientationCamera","laserToggle","defaultHeight","useCustomVRButton","customVRButton","rayLength","_rayLength","_defaultHeight","positionScale","_hasEnteredVR","activeCamera","_position","_deviceOrientationCamera","minZ","maxZ","targetCamera","rotationQuaternion","copyFrom","RotationYawPitchRoll","attachControl","_existingCamera","xr","IsSessionSupportedAsync","then","supported","Log","createDefaultXRExperienceAsync","floorMeshes","xrTestDone","baseExperience","onStateChangedObservable","state","ENTERING_XR","onEnteringVRObservable","notifyObservers","pointerSelection","detach","displayLaserPointer","_displayLaserPointer","EXITING_XR","onExitingVRObservable","resize","IN_XR","NOT_IN_XR","_completeVRInit","Object","onControllerMeshLoadedObservable","_teleportationTarget","value","_isDefaultTeleportationTarget","_displayGaze","_webVRCamera","_vrDeviceOrientationCamera","result","_teleportationRequestInitiated","useMultiview","vrDeviceOrientationCameraMetrics","GetDefault","multiviewEnabled","Number","MAX_VALUE","useStandingMatrix","currentVRCamera","createElement","className","id","title","url","window","SVGSVGElement","css","appendChild","createTextNode","getElementsByTagName","addEventListener","isInVRMode","enterVR","disableVR","hostWindow","getHostWindow","_onResize","_onFullscreenChange","onmsfullscreenchange","_displayVRButton","onVRDisplayChangedObservable","e","vrDisplay","_onKeyDown","event","keyCode","onPrePointerObservable","exitVROnDoubleTap","exitFullscreen","POINTERDOUBLETAP","_onVRDisplayChangedBind","eventArgs","_onVRDisplayChanged","_onVrDisplayPresentChangeBind","_onVrDisplayPresentChange","_onVRRequestPresentStart","_webVRrequesting","_onVRRequestPresentComplete","onVRRequestPresentStart","onVRRequestPresentComplete","onDisposeObservable","_onDefaultMeshLoaded","gamepadManager","onGamepadConnectedObservable","_onNewGamepadConnected","onGamepadDisconnectedObservable","_onNewGamepadDisconnected","_circleEase","setEasingMode","EASINGMODE_EASEINOUT","_teleportationEasing","onPointerObservable","vrDeviceOrientationCamera","pointerType","POINTERDOWN","POINTERUP","enableTeleportation","err","_webVRpresenting","getVRDevice","wasPresenting","isPresenting","_webVRsupported","rect","getBoundingClientRect","width","_btnVRDisplayed","body","enterXRAsync","renderTarget","FromRotationMatrix","getWorldMatrix","getRotationMatrix","toEulerAngles","webVRCamera","currentYRotation","deviceRotationQuaternion","desiredYRotation","delta","currentGlobalRotation","FromEulerAngles","_cachedAngularSensibility","addOnce","onAfterEnteringVRObservable","success","enterFullscreen","requestPointerLockOnFullScreen","onViewMatrixChangedObservable","registerBeforeRender","_beforeRender","exitXRAsync","unregisterBeforeRender","engine","attach","raySelectionPredicate","_floorMeshName","meshSelectionPredicate","_raySelectionPredicate","_isTeleportationFloor","_floorMeshesCollection","floorMesh","push","meshIndex","splice","vrTeleportationOptions","enableInteractions","floorMeshName","getMeshByName","teleportation","addFloorMesh","attached","waitForXr_1","teleportationMode","_teleportationMode","teleportationTime","_teleportationTime","teleportationSpeed","_teleportationSpeed","easingFunction","imageProcessingConfiguration","vignetteColor","vignetteEnabled","_postProcessMove","detachPostProcess","_createTeleportationCircles","scaleInPlace","deviceScaleFactor","controllerMesh","onMainButtonStateChangedObservable","stateObject","displayGaze","onTriggerStateChangedObservable","gazer","_padSensibilityUp","_padSensibilityDown","_dpadPressed","sqrt","_teleportActive","teleportCamera","_haloCenter","_rotationLeftAsked","_rotationAllowed","_rotateCamera","_rotationRightAsked","_teleportationBackRequestInitiated","devicePosition","toEulerAnglesToRef","_workingVector","RotationYawPitchRollToRef","_workingQuaternion","toRotationMatrix","_workingMatrix","TransformCoordinatesToRef","_teleportBackwardsVector","ray","hit","pickWithRay","pickedPoint","pickedMesh","controllerType","VIVE","onPadStateChangedObservable","pressed","onPadValuesChangedObservable","dynamicTexture","hasAlpha","context","getContext","centerX","centerY","radius","beginPath","arc","fillStyle","_teleportationFillColor","fill","lineWidth","strokeStyle","_teleportationBorderColor","stroke","closePath","update","teleportationCircleMaterial","diffuseTexture","torus","animationInnerCircle","ANIMATIONTYPE_FLOAT","ANIMATIONLOOPMODE_CYCLE","keys","frame","setKeys","setEasingFunction","animations","beginAnimation","_hideTeleportationTarget","right","_rotationAngle","target","RotationY","animationRotation","ANIMATIONTYPE_QUATERNION","ANIMATIONLOOPMODE_CONSTANT","animationRotationKeys","animationPP","vignetteWeightKeys","animationPP2","vignetteStretchKeys","vignetteWeight","vignetteStretch","samples","attachPostProcess","_displayTeleportationTarget","pickNormal","_convertNormalToDirectionOfRay","getNormal","axis1","Cross","Y","axis2","RotationFromAxisToRef","location","leftCamera","globalPosition","subtractInPlace","subtractToRef","deviceDistanceToRoomGround","onBeforeCameraTeleport","FPS","speedRatio","lastFrame","TELEPORTATIONMODE_CONSTANTSPEED","dist","Distance","round","animationCameraTeleportation","ANIMATIONTYPE_VECTOR3","animationCameraTeleportationKeys","midFrame","onAfterCameraTeleport","normal","angle","acos","Dot","direction","_getForwardRay","simulatePointerMove","multiplier","_isActionableMesh","updateGazeTrackerScale","deltaFighting","_updatePointerDistance","_currentMeshSelected","_notifySelectedMeshUnselected","_moveTeleportationSelectorTo","onNewMeshPicked","actionManager","changeGazeColor","_pickedGazeColor","changeLaserColor","_pickedLaserColor","_gazeColor","_laserColor","onNewMeshSelected","gazerAsControllerGazer","onMeshSelectedWithController","onSelectedMeshUnselected","pickedColor","enabled","_setLaserPointerLightingDisabled","updateControllerLaserColor","_setLaserPointerColor","updateGazeTrackerColor","parentNode","removeChild","removeEventListener","removeCallback"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Cameras/VR/vrExperienceHelper.ts"],"sourcesContent":["import { Logger } from \"../../Misc/logger\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport { Observable } from \"../../Misc/observable\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { Camera } from \"../../Cameras/camera\";\r\nimport { FreeCamera } from \"../../Cameras/freeCamera\";\r\nimport { TargetCamera } from \"../../Cameras/targetCamera\";\r\nimport { DeviceOrientationCamera } from \"../../Cameras/deviceOrientationCamera\";\r\nimport { VRDeviceOrientationFreeCamera } from \"../../Cameras/VR/vrDeviceOrientationFreeCamera\";\r\nimport type { WebVROptions } from \"../../Cameras/VR/webVRCamera\";\r\nimport { WebVRFreeCamera } from \"../../Cameras/VR/webVRCamera\";\r\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\r\nimport type { Scene, IDisposable } from \"../../scene\";\r\nimport { Quaternion, Matrix, Vector3 } from \"../../Maths/math.vector\";\r\nimport { Color3, Color4 } from \"../../Maths/math.color\";\r\nimport type { StickValues } from \"../../Gamepads/gamepad\";\r\nimport { Gamepad } from \"../../Gamepads/gamepad\";\r\nimport { PoseEnabledController, PoseEnabledControllerType } from \"../../Gamepads/Controllers/poseEnabledController\";\r\nimport { WebVRController } from \"../../Gamepads/Controllers/webVRController\";\r\nimport type { Xbox360Pad } from \"../../Gamepads/xboxGamepad\";\r\nimport { Xbox360Button } from \"../../Gamepads/xboxGamepad\";\r\nimport type { IDisplayChangedEventArgs } from \"../../Engines/engine\";\r\nimport type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { TransformNode } from \"../../Meshes/transformNode\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport type { PickingInfo } from \"../../Collisions/pickingInfo\";\r\nimport { Ray } from \"../../Culling/ray\";\r\nimport { ImageProcessingConfiguration } from \"../../Materials/imageProcessingConfiguration\";\r\nimport { StandardMaterial } from \"../../Materials/standardMaterial\";\r\nimport { DynamicTexture } from \"../../Materials/Textures/dynamicTexture\";\r\nimport { ImageProcessingPostProcess } from \"../../PostProcesses/imageProcessingPostProcess\";\r\nimport { SineEase, EasingFunction, CircleEase } from \"../../Animations/easing\";\r\nimport { Animation } from \"../../Animations/animation\";\r\nimport { VRCameraMetrics } from \"../../Cameras/VR/vrCameraMetrics\";\r\nimport \"../../Gamepads/gamepadSceneComponent\";\r\nimport \"../../Animations/animatable\";\r\nimport { Axis } from \"../../Maths/math.axis\";\r\nimport { WebXRSessionManager } from \"../../XR/webXRSessionManager\";\r\nimport type { WebXRDefaultExperience } from \"../../XR/webXRDefaultExperience\";\r\nimport { WebXRState } from \"../../XR/webXRTypes\";\r\nimport { CreateCylinder } from \"../../Meshes/Builders/cylinderBuilder\";\r\nimport { CreateTorus } from \"../../Meshes/Builders/torusBuilder\";\r\nimport { CreateGround } from \"../../Meshes/Builders/groundBuilder\";\r\nimport type { IPointerEvent } from \"../../Events/deviceInputEvents\";\r\n\r\n/**\r\n * Options to modify the vr teleportation behavior.\r\n */\r\nexport interface VRTeleportationOptions {\r\n    /**\r\n     * The name of the mesh which should be used as the teleportation floor. (default: null)\r\n     */\r\n    floorMeshName?: string;\r\n    /**\r\n     * A list of meshes to be used as the teleportation floor. (default: empty)\r\n     */\r\n    floorMeshes?: Mesh[];\r\n    /**\r\n     * The teleportation mode. (default: TELEPORTATIONMODE_CONSTANTTIME)\r\n     */\r\n    teleportationMode?: number;\r\n    /**\r\n     * The duration of the animation in ms, apply when animationMode is TELEPORTATIONMODE_CONSTANTTIME. (default 122ms)\r\n     */\r\n    teleportationTime?: number;\r\n    /**\r\n     * The speed of the animation in distance/sec, apply when animationMode is TELEPORTATIONMODE_CONSTANTSPEED. (default 20 units / sec)\r\n     */\r\n    teleportationSpeed?: number;\r\n    /**\r\n     * The easing function used in the animation or null for Linear. (default CircleEase)\r\n     */\r\n    easingFunction?: EasingFunction;\r\n}\r\n\r\n/**\r\n * Options to modify the vr experience helper's behavior.\r\n */\r\nexport interface VRExperienceHelperOptions extends WebVROptions {\r\n    /**\r\n     * Create a DeviceOrientationCamera to be used as your out of vr camera. (default: true)\r\n     */\r\n    createDeviceOrientationCamera?: boolean;\r\n    /**\r\n     * Create a VRDeviceOrientationFreeCamera to be used for VR when no external HMD is found. (default: true)\r\n     */\r\n    createFallbackVRDeviceOrientationFreeCamera?: boolean;\r\n    /**\r\n     * Uses the main button on the controller to toggle the laser casted. (default: true)\r\n     */\r\n    laserToggle?: boolean;\r\n    /**\r\n     * A list of meshes to be used as the teleportation floor. If specified, teleportation will be enabled (default: undefined)\r\n     */\r\n    floorMeshes?: Mesh[];\r\n    /**\r\n     * Distortion metrics for the fallback vrDeviceOrientationCamera (default: VRCameraMetrics.Default)\r\n     */\r\n    vrDeviceOrientationCameraMetrics?: VRCameraMetrics;\r\n    /**\r\n     * Defines if WebXR should be used instead of WebVR (if available)\r\n     */\r\n    useXR?: boolean;\r\n}\r\n\r\nclass VRExperienceHelperGazer implements IDisposable {\r\n    /** @hidden */\r\n    public _gazeTracker: Mesh;\r\n\r\n    /** @hidden */\r\n    public _currentMeshSelected: Nullable<AbstractMesh>;\r\n    /** @hidden */\r\n    public _currentHit: Nullable<PickingInfo>;\r\n\r\n    public static _IdCounter = 0;\r\n    /** @hidden */\r\n    public _id: number;\r\n\r\n    /** @hidden */\r\n    public _pointerDownOnMeshAsked: boolean = false;\r\n    /** @hidden */\r\n    public _isActionableMesh: boolean = false;\r\n\r\n    /** @hidden */\r\n    public _interactionsEnabled: boolean;\r\n    /** @hidden */\r\n    public _teleportationEnabled: boolean;\r\n    /** @hidden */\r\n    public _teleportationRequestInitiated = false;\r\n    /** @hidden */\r\n    public _teleportationBackRequestInitiated = false;\r\n    /** @hidden */\r\n    public _rotationRightAsked = false;\r\n    /** @hidden */\r\n    public _rotationLeftAsked = false;\r\n    /** @hidden */\r\n    public _dpadPressed = true;\r\n\r\n    /** @hidden */\r\n    public _activePointer = false;\r\n\r\n    constructor(public scene: Scene, gazeTrackerToClone: Nullable<Mesh> = null) {\r\n        this._id = VRExperienceHelperGazer._IdCounter++;\r\n\r\n        // Gaze tracker\r\n        if (!gazeTrackerToClone) {\r\n            this._gazeTracker = CreateTorus(\r\n                \"gazeTracker\",\r\n                {\r\n                    diameter: 0.0035,\r\n                    thickness: 0.0025,\r\n                    tessellation: 20,\r\n                    updatable: false,\r\n                },\r\n                scene\r\n            );\r\n            this._gazeTracker.bakeCurrentTransformIntoVertices();\r\n            this._gazeTracker.isPickable = false;\r\n            this._gazeTracker.isVisible = false;\r\n            const targetMat = new StandardMaterial(\"targetMat\", scene);\r\n            targetMat.specularColor = Color3.Black();\r\n            targetMat.emissiveColor = new Color3(0.7, 0.7, 0.7);\r\n            targetMat.backFaceCulling = false;\r\n            this._gazeTracker.material = targetMat;\r\n        } else {\r\n            this._gazeTracker = gazeTrackerToClone.clone(\"gazeTracker\") as Mesh;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param length\r\n     * @hidden\r\n     */\r\n    public _getForwardRay(length: number): Ray {\r\n        return new Ray(Vector3.Zero(), new Vector3(0, 0, length));\r\n    }\r\n\r\n    /** @hidden */\r\n    public _selectionPointerDown() {\r\n        this._pointerDownOnMeshAsked = true;\r\n        if (this._currentHit) {\r\n            this.scene.simulatePointerDown(this._currentHit, { pointerId: this._id });\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _selectionPointerUp() {\r\n        if (this._currentHit) {\r\n            this.scene.simulatePointerUp(this._currentHit, { pointerId: this._id });\r\n        }\r\n        this._pointerDownOnMeshAsked = false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _activatePointer() {\r\n        this._activePointer = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _deactivatePointer() {\r\n        this._activePointer = false;\r\n    }\r\n\r\n    /**\r\n     * @param distance\r\n     * @hidden\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public _updatePointerDistance(distance: number = 100) {}\r\n\r\n    public dispose() {\r\n        this._interactionsEnabled = false;\r\n        this._teleportationEnabled = false;\r\n        if (this._gazeTracker) {\r\n            this._gazeTracker.dispose();\r\n        }\r\n    }\r\n}\r\n\r\nclass VRExperienceHelperControllerGazer extends VRExperienceHelperGazer {\r\n    private _laserPointer: Mesh;\r\n    private _meshAttachedObserver: Nullable<Observer<AbstractMesh>>;\r\n    constructor(public webVRController: WebVRController, scene: Scene, gazeTrackerToClone: Mesh) {\r\n        super(scene, gazeTrackerToClone);\r\n        // Laser pointer\r\n        this._laserPointer = CreateCylinder(\r\n            \"laserPointer\",\r\n            {\r\n                updatable: false,\r\n                height: 1,\r\n                diameterTop: 0.004,\r\n                diameterBottom: 0.0002,\r\n                tessellation: 20,\r\n                subdivisions: 1,\r\n            },\r\n            scene\r\n        );\r\n        const laserPointerMaterial = new StandardMaterial(\"laserPointerMat\", scene);\r\n        laserPointerMaterial.emissiveColor = new Color3(0.7, 0.7, 0.7);\r\n        laserPointerMaterial.alpha = 0.6;\r\n        this._laserPointer.material = laserPointerMaterial;\r\n        this._laserPointer.rotation.x = Math.PI / 2;\r\n        this._laserPointer.position.z = -0.5;\r\n        this._laserPointer.isVisible = false;\r\n        this._laserPointer.isPickable = false;\r\n\r\n        if (!webVRController.mesh) {\r\n            // Create an empty mesh that is used prior to loading the high quality model\r\n            const preloadMesh = new Mesh(\"preloadControllerMesh\", scene);\r\n            const preloadPointerPose = new Mesh(PoseEnabledController.POINTING_POSE, scene);\r\n            preloadPointerPose.rotation.x = -0.7;\r\n            preloadMesh.addChild(preloadPointerPose);\r\n            webVRController.attachToMesh(preloadMesh);\r\n        }\r\n\r\n        this._setLaserPointerParent(webVRController.mesh!);\r\n\r\n        this._meshAttachedObserver = webVRController._meshAttachedObservable.add((mesh) => {\r\n            this._setLaserPointerParent(mesh);\r\n        });\r\n    }\r\n\r\n    _getForwardRay(length: number): Ray {\r\n        return this.webVRController.getForwardRay(length);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _activatePointer() {\r\n        super._activatePointer();\r\n        this._laserPointer.isVisible = true;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _deactivatePointer() {\r\n        super._deactivatePointer();\r\n        this._laserPointer.isVisible = false;\r\n    }\r\n\r\n    /**\r\n     * @param color\r\n     * @hidden\r\n     */\r\n    public _setLaserPointerColor(color: Color3) {\r\n        (<StandardMaterial>this._laserPointer.material).emissiveColor = color;\r\n    }\r\n\r\n    /**\r\n     * @param disabled\r\n     * @hidden\r\n     */\r\n    public _setLaserPointerLightingDisabled(disabled: boolean) {\r\n        (<StandardMaterial>this._laserPointer.material).disableLighting = disabled;\r\n    }\r\n\r\n    /**\r\n     * @param mesh\r\n     * @hidden\r\n     */\r\n    public _setLaserPointerParent(mesh: AbstractMesh) {\r\n        const makeNotPick = (root: AbstractMesh) => {\r\n            root.isPickable = false;\r\n            root.getChildMeshes().forEach((c) => {\r\n                makeNotPick(c);\r\n            });\r\n        };\r\n        makeNotPick(mesh);\r\n        const meshChildren = mesh.getChildren(undefined, false);\r\n\r\n        let laserParent: TransformNode = mesh;\r\n        this.webVRController._pointingPoseNode = null;\r\n        for (let i = 0; i < meshChildren.length; i++) {\r\n            if (meshChildren[i].name && meshChildren[i].name.indexOf(PoseEnabledController.POINTING_POSE) >= 0) {\r\n                laserParent = <TransformNode>meshChildren[i];\r\n                this.webVRController._pointingPoseNode = laserParent;\r\n                break;\r\n            }\r\n        }\r\n        this._laserPointer.parent = laserParent;\r\n    }\r\n\r\n    public _updatePointerDistance(distance: number = 100) {\r\n        this._laserPointer.scaling.y = distance;\r\n        this._laserPointer.position.z = -distance / 2;\r\n    }\r\n\r\n    dispose() {\r\n        super.dispose();\r\n        this._laserPointer.dispose();\r\n        if (this._meshAttachedObserver) {\r\n            this.webVRController._meshAttachedObservable.remove(this._meshAttachedObserver);\r\n        }\r\n    }\r\n}\r\n\r\nclass VRExperienceHelperCameraGazer extends VRExperienceHelperGazer {\r\n    constructor(private _getCamera: () => Nullable<Camera>, scene: Scene) {\r\n        super(scene);\r\n    }\r\n\r\n    _getForwardRay(length: number): Ray {\r\n        const camera = this._getCamera();\r\n        if (camera) {\r\n            return camera.getForwardRay(length);\r\n        } else {\r\n            return new Ray(Vector3.Zero(), Vector3.Forward());\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Event containing information after VR has been entered\r\n */\r\nexport class OnAfterEnteringVRObservableEvent {\r\n    /**\r\n     * If entering vr was successful\r\n     */\r\n    public success: boolean;\r\n}\r\n\r\n/**\r\n * Helps to quickly add VR support to an existing scene.\r\n * See https://doc.babylonjs.com/divingDeeper/cameras/webVRHelper\r\n * @deprecated\r\n */\r\nexport class VRExperienceHelper {\r\n    private _scene: Scene;\r\n    private _position: Vector3;\r\n    private _btnVR: Nullable<HTMLButtonElement>;\r\n    private _btnVRDisplayed: boolean;\r\n\r\n    // Can the system support WebVR, even if a headset isn't plugged in?\r\n    private _webVRsupported = false;\r\n    // If WebVR is supported, is a headset plugged in and are we ready to present?\r\n    private _webVRready = false;\r\n    // Are we waiting for the requestPresent callback to complete?\r\n    private _webVRrequesting = false;\r\n    // Are we presenting to the headset right now? (this is the vrDevice state)\r\n    private _webVRpresenting = false;\r\n    // Have we entered VR? (this is the VRExperienceHelper state)\r\n    private _hasEnteredVR: boolean;\r\n\r\n    // Are we presenting in the fullscreen fallback?\r\n    private _fullscreenVRpresenting = false;\r\n\r\n    private _inputElement: Nullable<HTMLElement>;\r\n    private _webVRCamera: WebVRFreeCamera;\r\n    private _vrDeviceOrientationCamera: Nullable<VRDeviceOrientationFreeCamera>;\r\n    private _deviceOrientationCamera: Nullable<DeviceOrientationCamera>;\r\n    private _existingCamera: Camera;\r\n\r\n    private _onKeyDown: (event: KeyboardEvent) => void;\r\n    private _onVrDisplayPresentChangeBind: any;\r\n    private _onVRDisplayChangedBind: (eventArgs: IDisplayChangedEventArgs) => void;\r\n    private _onVRRequestPresentStart: () => void;\r\n    private _onVRRequestPresentComplete: (success: boolean) => void;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that gaze can be enabled even if pointer lock is not engage (useful on iOS where fullscreen mode and pointer lock are not supported)\r\n     */\r\n    public enableGazeEvenWhenNoPointerLock = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the VREXperienceHelper will exit VR if double tap is detected\r\n     */\r\n    public exitVROnDoubleTap = true;\r\n\r\n    /**\r\n     * Observable raised right before entering VR.\r\n     */\r\n    public onEnteringVRObservable = new Observable<VRExperienceHelper>();\r\n\r\n    /**\r\n     * Observable raised when entering VR has completed.\r\n     */\r\n    public onAfterEnteringVRObservable = new Observable<OnAfterEnteringVRObservableEvent>();\r\n\r\n    /**\r\n     * Observable raised when exiting VR.\r\n     */\r\n    public onExitingVRObservable = new Observable<VRExperienceHelper>();\r\n\r\n    /**\r\n     * Observable raised when controller mesh is loaded.\r\n     */\r\n    public onControllerMeshLoadedObservable = new Observable<WebVRController>();\r\n\r\n    /** Return this.onEnteringVRObservable\r\n     * Note: This one is for backward compatibility. Please use onEnteringVRObservable directly\r\n     */\r\n    public get onEnteringVR(): Observable<VRExperienceHelper> {\r\n        return this.onEnteringVRObservable;\r\n    }\r\n\r\n    /** Return this.onExitingVRObservable\r\n     * Note: This one is for backward compatibility. Please use onExitingVRObservable directly\r\n     */\r\n    public get onExitingVR(): Observable<VRExperienceHelper> {\r\n        return this.onExitingVRObservable;\r\n    }\r\n\r\n    /** Return this.onControllerMeshLoadedObservable\r\n     * Note: This one is for backward compatibility. Please use onControllerMeshLoadedObservable directly\r\n     */\r\n    public get onControllerMeshLoaded(): Observable<WebVRController> {\r\n        return this.onControllerMeshLoadedObservable;\r\n    }\r\n\r\n    private _rayLength: number;\r\n    private _useCustomVRButton: boolean = false;\r\n    private _teleportationRequested: boolean = false;\r\n    private _teleportActive = false;\r\n    private _floorMeshName: string;\r\n    private _floorMeshesCollection: Mesh[] = [];\r\n    private _teleportationMode: number = VRExperienceHelper.TELEPORTATIONMODE_CONSTANTTIME;\r\n    private _teleportationTime: number = 122;\r\n    private _teleportationSpeed: number = 20;\r\n    private _teleportationEasing: EasingFunction;\r\n    private _rotationAllowed: boolean = true;\r\n    private _teleportBackwardsVector = new Vector3(0, -1, -1);\r\n    private _teleportationTarget: Mesh;\r\n    private _isDefaultTeleportationTarget = true;\r\n    private _postProcessMove: ImageProcessingPostProcess;\r\n    private _teleportationFillColor: string = \"#444444\";\r\n    private _teleportationBorderColor: string = \"#FFFFFF\";\r\n    private _rotationAngle: number = 0;\r\n    private _haloCenter = new Vector3(0, 0, 0);\r\n    private _cameraGazer: VRExperienceHelperCameraGazer;\r\n    private _padSensibilityUp = 0.65;\r\n    private _padSensibilityDown = 0.35;\r\n\r\n    private _leftController: Nullable<VRExperienceHelperControllerGazer> = null;\r\n    private _rightController: Nullable<VRExperienceHelperControllerGazer> = null;\r\n\r\n    private _gazeColor: Color3 = new Color3(0.7, 0.7, 0.7);\r\n    private _laserColor: Color3 = new Color3(0.7, 0.7, 0.7);\r\n    private _pickedLaserColor: Color3 = new Color3(0.2, 0.2, 1);\r\n    private _pickedGazeColor: Color3 = new Color3(0, 0, 1);\r\n\r\n    /**\r\n     * Observable raised when a new mesh is selected based on meshSelectionPredicate\r\n     */\r\n    public onNewMeshSelected = new Observable<AbstractMesh>();\r\n\r\n    /**\r\n     * Observable raised when a new mesh is selected based on meshSelectionPredicate.\r\n     * This observable will provide the mesh and the controller used to select the mesh\r\n     */\r\n    public onMeshSelectedWithController = new Observable<{ mesh: AbstractMesh; controller: WebVRController }>();\r\n\r\n    /**\r\n     * Observable raised when a new mesh is picked based on meshSelectionPredicate\r\n     */\r\n    public onNewMeshPicked = new Observable<PickingInfo>();\r\n\r\n    private _circleEase: CircleEase;\r\n\r\n    /**\r\n     * Observable raised before camera teleportation\r\n     */\r\n    public onBeforeCameraTeleport = new Observable<Vector3>();\r\n\r\n    /**\r\n     *  Observable raised after camera teleportation\r\n     */\r\n    public onAfterCameraTeleport = new Observable<Vector3>();\r\n\r\n    /**\r\n     * Observable raised when current selected mesh gets unselected\r\n     */\r\n    public onSelectedMeshUnselected = new Observable<AbstractMesh>();\r\n\r\n    private _raySelectionPredicate: (mesh: AbstractMesh) => boolean;\r\n\r\n    /**\r\n     * To be optionally changed by user to define custom ray selection\r\n     */\r\n    public raySelectionPredicate: (mesh: AbstractMesh) => boolean;\r\n\r\n    /**\r\n     * To be optionally changed by user to define custom selection logic (after ray selection)\r\n     */\r\n    public meshSelectionPredicate: (mesh: AbstractMesh) => boolean;\r\n\r\n    /**\r\n     * Set teleportation enabled. If set to false camera teleportation will be disabled but camera rotation will be kept.\r\n     */\r\n    public teleportationEnabled: boolean = true;\r\n\r\n    private _defaultHeight: number;\r\n    private _teleportationInitialized = false;\r\n    private _interactionsEnabled = false;\r\n    private _interactionsRequested = false;\r\n    private _displayGaze = true;\r\n    private _displayLaserPointer = true;\r\n\r\n    /**\r\n     * The mesh used to display where the user is going to teleport.\r\n     */\r\n    public get teleportationTarget(): Mesh {\r\n        return this._teleportationTarget;\r\n    }\r\n\r\n    /**\r\n     * Sets the mesh to be used to display where the user is going to teleport.\r\n     */\r\n    public set teleportationTarget(value: Mesh) {\r\n        if (value) {\r\n            value.name = \"teleportationTarget\";\r\n            this._isDefaultTeleportationTarget = false;\r\n            this._teleportationTarget = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The mesh used to display where the user is selecting, this mesh will be cloned and set as the gazeTracker for the left and right controller\r\n     * when set bakeCurrentTransformIntoVertices will be called on the mesh.\r\n     * See https://doc.babylonjs.com/resources/baking_transformations\r\n     */\r\n    public get gazeTrackerMesh(): Mesh {\r\n        return this._cameraGazer._gazeTracker;\r\n    }\r\n\r\n    public set gazeTrackerMesh(value: Mesh) {\r\n        if (value) {\r\n            // Dispose of existing meshes\r\n            if (this._cameraGazer._gazeTracker) {\r\n                this._cameraGazer._gazeTracker.dispose();\r\n            }\r\n            if (this._leftController && this._leftController._gazeTracker) {\r\n                this._leftController._gazeTracker.dispose();\r\n            }\r\n            if (this._rightController && this._rightController._gazeTracker) {\r\n                this._rightController._gazeTracker.dispose();\r\n            }\r\n\r\n            // Set and create gaze trackers on head and controllers\r\n            this._cameraGazer._gazeTracker = value;\r\n            this._cameraGazer._gazeTracker.bakeCurrentTransformIntoVertices();\r\n            this._cameraGazer._gazeTracker.isPickable = false;\r\n            this._cameraGazer._gazeTracker.isVisible = false;\r\n            this._cameraGazer._gazeTracker.name = \"gazeTracker\";\r\n            if (this._leftController) {\r\n                this._leftController._gazeTracker = this._cameraGazer._gazeTracker.clone(\"gazeTracker\") as Mesh;\r\n            }\r\n\r\n            if (this._rightController) {\r\n                this._rightController._gazeTracker = this._cameraGazer._gazeTracker.clone(\"gazeTracker\") as Mesh;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If the gaze trackers scale should be updated to be constant size when pointing at near/far meshes\r\n     */\r\n    public updateGazeTrackerScale = true;\r\n    /**\r\n     * If the gaze trackers color should be updated when selecting meshes\r\n     */\r\n    public updateGazeTrackerColor = true;\r\n    /**\r\n     * If the controller laser color should be updated when selecting meshes\r\n     */\r\n    public updateControllerLaserColor = true;\r\n\r\n    /**\r\n     * The gaze tracking mesh corresponding to the left controller\r\n     */\r\n    public get leftControllerGazeTrackerMesh(): Nullable<Mesh> {\r\n        if (this._leftController) {\r\n            return this._leftController._gazeTracker;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * The gaze tracking mesh corresponding to the right controller\r\n     */\r\n    public get rightControllerGazeTrackerMesh(): Nullable<Mesh> {\r\n        if (this._rightController) {\r\n            return this._rightController._gazeTracker;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * If the ray of the gaze should be displayed.\r\n     */\r\n    public get displayGaze(): boolean {\r\n        return this._displayGaze;\r\n    }\r\n\r\n    /**\r\n     * Sets if the ray of the gaze should be displayed.\r\n     */\r\n    public set displayGaze(value: boolean) {\r\n        this._displayGaze = value;\r\n        if (!value) {\r\n            this._cameraGazer._gazeTracker.isVisible = false;\r\n\r\n            if (this._leftController) {\r\n                this._leftController._gazeTracker.isVisible = false;\r\n            }\r\n\r\n            if (this._rightController) {\r\n                this._rightController._gazeTracker.isVisible = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If the ray of the LaserPointer should be displayed.\r\n     */\r\n    public get displayLaserPointer(): boolean {\r\n        return this._displayLaserPointer;\r\n    }\r\n\r\n    /**\r\n     * Sets if the ray of the LaserPointer should be displayed.\r\n     */\r\n    public set displayLaserPointer(value: boolean) {\r\n        this._displayLaserPointer = value;\r\n        if (!value) {\r\n            if (this._rightController) {\r\n                this._rightController._deactivatePointer();\r\n                this._rightController._gazeTracker.isVisible = false;\r\n            }\r\n            if (this._leftController) {\r\n                this._leftController._deactivatePointer();\r\n                this._leftController._gazeTracker.isVisible = false;\r\n            }\r\n        } else {\r\n            if (this._rightController) {\r\n                this._rightController._activatePointer();\r\n            }\r\n            if (this._leftController) {\r\n                this._leftController._activatePointer();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The deviceOrientationCamera used as the camera when not in VR.\r\n     */\r\n    public get deviceOrientationCamera(): Nullable<DeviceOrientationCamera> {\r\n        return this._deviceOrientationCamera;\r\n    }\r\n\r\n    /**\r\n     * Based on the current WebVR support, returns the current VR camera used.\r\n     */\r\n    public get currentVRCamera(): Nullable<Camera> {\r\n        if (this._webVRready) {\r\n            return this._webVRCamera;\r\n        } else {\r\n            return this._scene.activeCamera;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The webVRCamera which is used when in VR.\r\n     */\r\n    public get webVRCamera(): WebVRFreeCamera {\r\n        return this._webVRCamera;\r\n    }\r\n\r\n    /**\r\n     * The deviceOrientationCamera that is used as a fallback when vr device is not connected.\r\n     */\r\n    public get vrDeviceOrientationCamera(): Nullable<VRDeviceOrientationFreeCamera> {\r\n        return this._vrDeviceOrientationCamera;\r\n    }\r\n\r\n    /**\r\n     * The html button that is used to trigger entering into VR.\r\n     */\r\n    public get vrButton(): Nullable<HTMLButtonElement> {\r\n        return this._btnVR;\r\n    }\r\n\r\n    private get _teleportationRequestInitiated(): boolean {\r\n        const result =\r\n            this._cameraGazer._teleportationRequestInitiated ||\r\n            (this._leftController !== null && this._leftController._teleportationRequestInitiated) ||\r\n            (this._rightController !== null && this._rightController._teleportationRequestInitiated);\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Defines whether or not Pointer lock should be requested when switching to\r\n     * full screen.\r\n     */\r\n    public requestPointerLockOnFullScreen = true;\r\n\r\n    // XR\r\n\r\n    /**\r\n     * If asking to force XR, this will be populated with the default xr experience\r\n     */\r\n    public xr: WebXRDefaultExperience;\r\n\r\n    /**\r\n     * Was the XR test done already. If this is true AND this.xr exists, xr is initialized.\r\n     * If this is true and no this.xr, xr exists but is not supported, using WebVR.\r\n     */\r\n    public xrTestDone: boolean = false;\r\n\r\n    /**\r\n     * Instantiates a VRExperienceHelper.\r\n     * Helps to quickly add VR support to an existing scene.\r\n     * @param scene The scene the VRExperienceHelper belongs to.\r\n     * @param webVROptions Options to modify the vr experience helper's behavior.\r\n     */\r\n    constructor(\r\n        scene: Scene,\r\n        /** Options to modify the vr experience helper's behavior. */\r\n        public webVROptions: VRExperienceHelperOptions = {}\r\n    ) {\r\n        Logger.Warn(\"WebVR is deprecated. Please avoid using this experience helper and use the WebXR experience helper instead\");\r\n        this._scene = scene;\r\n        this._inputElement = scene.getEngine().getInputElement();\r\n\r\n        // check for VR support:\r\n\r\n        const vrSupported = \"getVRDisplays\" in navigator;\r\n        // no VR support? force XR but only when it is not set because web vr can work without the getVRDisplays\r\n        if (!vrSupported && webVROptions.useXR === undefined) {\r\n            webVROptions.useXR = true;\r\n        }\r\n\r\n        // Parse options\r\n        if (webVROptions.createFallbackVRDeviceOrientationFreeCamera === undefined) {\r\n            webVROptions.createFallbackVRDeviceOrientationFreeCamera = true;\r\n        }\r\n        if (webVROptions.createDeviceOrientationCamera === undefined) {\r\n            webVROptions.createDeviceOrientationCamera = true;\r\n        }\r\n        if (webVROptions.laserToggle === undefined) {\r\n            webVROptions.laserToggle = true;\r\n        }\r\n        if (webVROptions.defaultHeight === undefined) {\r\n            webVROptions.defaultHeight = 1.7;\r\n        }\r\n        if (webVROptions.useCustomVRButton) {\r\n            this._useCustomVRButton = true;\r\n            if (webVROptions.customVRButton) {\r\n                this._btnVR = webVROptions.customVRButton;\r\n            }\r\n        }\r\n        if (webVROptions.rayLength) {\r\n            this._rayLength = webVROptions.rayLength;\r\n        }\r\n        this._defaultHeight = webVROptions.defaultHeight;\r\n\r\n        if (webVROptions.positionScale) {\r\n            this._rayLength *= webVROptions.positionScale;\r\n            this._defaultHeight *= webVROptions.positionScale;\r\n        }\r\n\r\n        this._hasEnteredVR = false;\r\n\r\n        // Set position\r\n        if (this._scene.activeCamera) {\r\n            this._position = this._scene.activeCamera.position.clone();\r\n        } else {\r\n            this._position = new Vector3(0, this._defaultHeight, 0);\r\n        }\r\n\r\n        // Set non-vr camera\r\n        if (webVROptions.createDeviceOrientationCamera || !this._scene.activeCamera) {\r\n            this._deviceOrientationCamera = new DeviceOrientationCamera(\"deviceOrientationVRHelper\", this._position.clone(), scene);\r\n\r\n            // Copy data from existing camera\r\n            if (this._scene.activeCamera) {\r\n                this._deviceOrientationCamera.minZ = this._scene.activeCamera.minZ;\r\n                this._deviceOrientationCamera.maxZ = this._scene.activeCamera.maxZ;\r\n                // Set rotation from previous camera\r\n                if (this._scene.activeCamera instanceof TargetCamera && this._scene.activeCamera.rotation) {\r\n                    const targetCamera = this._scene.activeCamera;\r\n                    if (targetCamera.rotationQuaternion) {\r\n                        this._deviceOrientationCamera.rotationQuaternion.copyFrom(targetCamera.rotationQuaternion);\r\n                    } else {\r\n                        this._deviceOrientationCamera.rotationQuaternion.copyFrom(\r\n                            Quaternion.RotationYawPitchRoll(targetCamera.rotation.y, targetCamera.rotation.x, targetCamera.rotation.z)\r\n                        );\r\n                    }\r\n                    this._deviceOrientationCamera.rotation = targetCamera.rotation.clone();\r\n                }\r\n            }\r\n\r\n            this._scene.activeCamera = this._deviceOrientationCamera;\r\n            if (this._inputElement) {\r\n                this._scene.activeCamera.attachControl();\r\n            }\r\n        } else {\r\n            this._existingCamera = this._scene.activeCamera;\r\n        }\r\n\r\n        if (this.webVROptions.useXR && (navigator as any).xr) {\r\n            // force-check XR session support\r\n            WebXRSessionManager.IsSessionSupportedAsync(\"immersive-vr\").then((supported) => {\r\n                if (supported) {\r\n                    Logger.Log(\"Using WebXR. It is recommended to use the WebXRDefaultExperience directly\");\r\n                    // it is possible to use XR, let's do it!\r\n                    scene\r\n                        .createDefaultXRExperienceAsync({\r\n                            floorMeshes: webVROptions.floorMeshes || [],\r\n                        })\r\n                        .then((xr) => {\r\n                            this.xr = xr;\r\n                            // connect observables\r\n                            this.xrTestDone = true;\r\n\r\n                            this._cameraGazer = new VRExperienceHelperCameraGazer(() => {\r\n                                return this.xr.baseExperience.camera;\r\n                            }, scene);\r\n\r\n                            this.xr.baseExperience.onStateChangedObservable.add((state) => {\r\n                                // support for entering / exiting\r\n                                switch (state) {\r\n                                    case WebXRState.ENTERING_XR:\r\n                                        this.onEnteringVRObservable.notifyObservers(this);\r\n                                        if (!this._interactionsEnabled) {\r\n                                            this.xr.pointerSelection.detach();\r\n                                        }\r\n                                        this.xr.pointerSelection.displayLaserPointer = this._displayLaserPointer;\r\n                                        break;\r\n                                    case WebXRState.EXITING_XR:\r\n                                        this.onExitingVRObservable.notifyObservers(this);\r\n\r\n                                        // resize to update width and height when exiting vr exits fullscreen\r\n                                        this._scene.getEngine().resize();\r\n                                        break;\r\n                                    case WebXRState.IN_XR:\r\n                                        this._hasEnteredVR = true;\r\n                                        break;\r\n                                    case WebXRState.NOT_IN_XR:\r\n                                        this._hasEnteredVR = false;\r\n                                        break;\r\n                                }\r\n                            });\r\n                        });\r\n                } else {\r\n                    // XR not supported (thou exists), continue WebVR init\r\n                    this._completeVRInit(scene, webVROptions);\r\n                }\r\n            });\r\n        } else {\r\n            // no XR, continue init synchronous\r\n            this._completeVRInit(scene, webVROptions);\r\n        }\r\n    }\r\n\r\n    private _completeVRInit(scene: Scene, webVROptions: VRExperienceHelperOptions): void {\r\n        this.xrTestDone = true;\r\n        // Create VR cameras\r\n        if (webVROptions.createFallbackVRDeviceOrientationFreeCamera) {\r\n            if (webVROptions.useMultiview) {\r\n                if (!webVROptions.vrDeviceOrientationCameraMetrics) {\r\n                    webVROptions.vrDeviceOrientationCameraMetrics = VRCameraMetrics.GetDefault();\r\n                }\r\n                webVROptions.vrDeviceOrientationCameraMetrics.multiviewEnabled = true;\r\n            }\r\n            this._vrDeviceOrientationCamera = new VRDeviceOrientationFreeCamera(\r\n                \"VRDeviceOrientationVRHelper\",\r\n                this._position,\r\n                this._scene,\r\n                true,\r\n                webVROptions.vrDeviceOrientationCameraMetrics\r\n            );\r\n            this._vrDeviceOrientationCamera.angularSensibility = Number.MAX_VALUE;\r\n        }\r\n        this._webVRCamera = new WebVRFreeCamera(\"WebVRHelper\", this._position, this._scene, webVROptions);\r\n        this._webVRCamera.useStandingMatrix();\r\n\r\n        this._cameraGazer = new VRExperienceHelperCameraGazer(() => {\r\n            return this.currentVRCamera;\r\n        }, scene);\r\n        // Create default button\r\n        if (!this._useCustomVRButton) {\r\n            this._btnVR = <HTMLButtonElement>document.createElement(\"BUTTON\");\r\n            this._btnVR.className = \"babylonVRicon\";\r\n            this._btnVR.id = \"babylonVRiconbtn\";\r\n            this._btnVR.title = \"Click to switch to VR\";\r\n            const url = !window.SVGSVGElement\r\n                ? \"https://cdn.babylonjs.com/Assets/vrButton.png\"\r\n                : \"data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20width%3D%222048%22%20height%3D%221152%22%20viewBox%3D%220%200%202048%201152%22%20version%3D%221.1%22%3E%3Cpath%20transform%3D%22rotate%28180%201024%2C576.0000000000001%29%22%20d%3D%22m1109%2C896q17%2C0%2030%2C-12t13%2C-30t-12.5%2C-30.5t-30.5%2C-12.5l-170%2C0q-18%2C0%20-30.5%2C12.5t-12.5%2C30.5t13%2C30t30%2C12l170%2C0zm-85%2C256q59%2C0%20132.5%2C-1.5t154.5%2C-5.5t164.5%2C-11.5t163%2C-20t150%2C-30t124.5%2C-41.5q23%2C-11%2042%2C-24t38%2C-30q27%2C-25%2041%2C-61.5t14%2C-72.5l0%2C-257q0%2C-123%20-47%2C-232t-128%2C-190t-190%2C-128t-232%2C-47l-81%2C0q-37%2C0%20-68.5%2C14t-60.5%2C34.5t-55.5%2C45t-53%2C45t-53%2C34.5t-55.5%2C14t-55.5%2C-14t-53%2C-34.5t-53%2C-45t-55.5%2C-45t-60.5%2C-34.5t-68.5%2C-14l-81%2C0q-123%2C0%20-232%2C47t-190%2C128t-128%2C190t-47%2C232l0%2C257q0%2C68%2038%2C115t97%2C73q54%2C24%20124.5%2C41.5t150%2C30t163%2C20t164.5%2C11.5t154.5%2C5.5t132.5%2C1.5zm939%2C-298q0%2C39%20-24.5%2C67t-58.5%2C42q-54%2C23%20-122%2C39.5t-143.5%2C28t-155.5%2C19t-157%2C11t-148.5%2C5t-129.5%2C1.5q-59%2C0%20-130%2C-1.5t-148%2C-5t-157%2C-11t-155.5%2C-19t-143.5%2C-28t-122%2C-39.5q-34%2C-14%20-58.5%2C-42t-24.5%2C-67l0%2C-257q0%2C-106%2040.5%2C-199t110%2C-162.5t162.5%2C-109.5t199%2C-40l81%2C0q27%2C0%2052%2C14t50%2C34.5t51%2C44.5t55.5%2C44.5t63.5%2C34.5t74%2C14t74%2C-14t63.5%2C-34.5t55.5%2C-44.5t51%2C-44.5t50%2C-34.5t52%2C-14l14%2C0q37%2C0%2070%2C0.5t64.5%2C4.5t63.5%2C12t68%2C23q71%2C30%20128.5%2C78.5t98.5%2C110t63.5%2C133.5t22.5%2C149l0%2C257z%22%20fill%3D%22white%22%20/%3E%3C/svg%3E%0A\";\r\n            let css =\r\n                \".babylonVRicon { position: absolute; right: 20px; height: 50px; width: 80px; background-color: rgba(51,51,51,0.7); background-image: url(\" +\r\n                url +\r\n                \"); background-size: 80%; background-repeat:no-repeat; background-position: center; border: none; outline: none; transition: transform 0.125s ease-out } .babylonVRicon:hover { transform: scale(1.05) } .babylonVRicon:active {background-color: rgba(51,51,51,1) } .babylonVRicon:focus {background-color: rgba(51,51,51,1) }\";\r\n            css += \".babylonVRicon.vrdisplaypresenting { display: none; }\";\r\n            // TODO: Add user feedback so that they know what state the VRDisplay is in (disconnected, connected, entering-VR)\r\n            // css += \".babylonVRicon.vrdisplaysupported { }\";\r\n            // css += \".babylonVRicon.vrdisplayready { }\";\r\n            // css += \".babylonVRicon.vrdisplayrequesting { }\";\r\n\r\n            const style = document.createElement(\"style\");\r\n            style.appendChild(document.createTextNode(css));\r\n            document.getElementsByTagName(\"head\")[0].appendChild(style);\r\n\r\n            this._moveButtonToBottomRight();\r\n        }\r\n\r\n        // VR button click event\r\n        if (this._btnVR) {\r\n            this._btnVR.addEventListener(\"click\", () => {\r\n                if (!this.isInVRMode) {\r\n                    this.enterVR();\r\n                } else {\r\n                    this._scene.getEngine().disableVR();\r\n                }\r\n            });\r\n        }\r\n\r\n        // Window events\r\n\r\n        const hostWindow = this._scene.getEngine().getHostWindow();\r\n        if (!hostWindow) {\r\n            return;\r\n        }\r\n\r\n        hostWindow.addEventListener(\"resize\", this._onResize);\r\n        document.addEventListener(\"fullscreenchange\", this._onFullscreenChange, false);\r\n        document.addEventListener(\"mozfullscreenchange\", this._onFullscreenChange, false);\r\n        document.addEventListener(\"webkitfullscreenchange\", this._onFullscreenChange, false);\r\n        document.addEventListener(\"msfullscreenchange\", this._onFullscreenChange, false);\r\n        (<any>document).onmsfullscreenchange = this._onFullscreenChange;\r\n\r\n        // Display vr button when headset is connected\r\n        if (webVROptions.createFallbackVRDeviceOrientationFreeCamera) {\r\n            this._displayVRButton();\r\n        } else {\r\n            this._scene.getEngine().onVRDisplayChangedObservable.add((e) => {\r\n                if (e.vrDisplay) {\r\n                    this._displayVRButton();\r\n                }\r\n            });\r\n        }\r\n\r\n        // Exiting VR mode using 'ESC' key on desktop\r\n        this._onKeyDown = (event: KeyboardEvent) => {\r\n            if (event.keyCode === 27 && this.isInVRMode) {\r\n                this.exitVR();\r\n            }\r\n        };\r\n        document.addEventListener(\"keydown\", this._onKeyDown);\r\n\r\n        // Exiting VR mode double tapping the touch screen\r\n        this._scene.onPrePointerObservable.add(\r\n            () => {\r\n                if (this._hasEnteredVR && this.exitVROnDoubleTap) {\r\n                    this.exitVR();\r\n                    if (this._fullscreenVRpresenting) {\r\n                        this._scene.getEngine().exitFullscreen();\r\n                    }\r\n                }\r\n            },\r\n            PointerEventTypes.POINTERDOUBLETAP,\r\n            false\r\n        );\r\n\r\n        // Listen for WebVR display changes\r\n        this._onVRDisplayChangedBind = (eventArgs: IDisplayChangedEventArgs) => this._onVRDisplayChanged(eventArgs);\r\n        this._onVrDisplayPresentChangeBind = () => this._onVrDisplayPresentChange();\r\n        this._onVRRequestPresentStart = () => {\r\n            this._webVRrequesting = true;\r\n            this._updateButtonVisibility();\r\n        };\r\n        this._onVRRequestPresentComplete = () => {\r\n            this._webVRrequesting = false;\r\n            this._updateButtonVisibility();\r\n        };\r\n        scene.getEngine().onVRDisplayChangedObservable.add(this._onVRDisplayChangedBind);\r\n        scene.getEngine().onVRRequestPresentStart.add(this._onVRRequestPresentStart);\r\n        scene.getEngine().onVRRequestPresentComplete.add(this._onVRRequestPresentComplete);\r\n        hostWindow.addEventListener(\"vrdisplaypresentchange\", this._onVrDisplayPresentChangeBind);\r\n\r\n        scene.onDisposeObservable.add(() => {\r\n            this.dispose();\r\n        });\r\n\r\n        // Gamepad connection events\r\n        this._webVRCamera.onControllerMeshLoadedObservable.add((webVRController) => this._onDefaultMeshLoaded(webVRController));\r\n        this._scene.gamepadManager.onGamepadConnectedObservable.add(this._onNewGamepadConnected);\r\n        this._scene.gamepadManager.onGamepadDisconnectedObservable.add(this._onNewGamepadDisconnected);\r\n\r\n        this._updateButtonVisibility();\r\n\r\n        //create easing functions\r\n        this._circleEase = new CircleEase();\r\n        this._circleEase.setEasingMode(EasingFunction.EASINGMODE_EASEINOUT);\r\n        this._teleportationEasing = this._circleEase;\r\n\r\n        // Allow clicking in the vrDeviceOrientationCamera\r\n        scene.onPointerObservable.add((e) => {\r\n            if (this._interactionsEnabled) {\r\n                if (scene.activeCamera === this.vrDeviceOrientationCamera && (e.event as IPointerEvent).pointerType === \"mouse\") {\r\n                    if (e.type === PointerEventTypes.POINTERDOWN) {\r\n                        this._cameraGazer._selectionPointerDown();\r\n                    } else if (e.type === PointerEventTypes.POINTERUP) {\r\n                        this._cameraGazer._selectionPointerUp();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        if (this.webVROptions.floorMeshes) {\r\n            this.enableTeleportation({ floorMeshes: this.webVROptions.floorMeshes });\r\n        }\r\n    }\r\n\r\n    // Raised when one of the controller has loaded successfully its associated default mesh\r\n    private _onDefaultMeshLoaded(webVRController: WebVRController) {\r\n        if (this._leftController && this._leftController.webVRController == webVRController) {\r\n            if (webVRController.mesh) {\r\n                this._leftController._setLaserPointerParent(webVRController.mesh);\r\n            }\r\n        }\r\n        if (this._rightController && this._rightController.webVRController == webVRController) {\r\n            if (webVRController.mesh) {\r\n                this._rightController._setLaserPointerParent(webVRController.mesh);\r\n            }\r\n        }\r\n\r\n        try {\r\n            this.onControllerMeshLoadedObservable.notifyObservers(webVRController);\r\n        } catch (err) {\r\n            Logger.Warn(\"Error in your custom logic onControllerMeshLoaded: \" + err);\r\n        }\r\n    }\r\n\r\n    private _onResize = () => {\r\n        this._moveButtonToBottomRight();\r\n        if (this._fullscreenVRpresenting && this._webVRready) {\r\n            this.exitVR();\r\n        }\r\n    };\r\n\r\n    private _onFullscreenChange = () => {\r\n        const anyDoc = document as any;\r\n        if (anyDoc.fullscreen !== undefined) {\r\n            this._fullscreenVRpresenting = (<any>document).fullscreen;\r\n        } else if (anyDoc.mozFullScreen !== undefined) {\r\n            this._fullscreenVRpresenting = anyDoc.mozFullScreen;\r\n        } else if (anyDoc.webkitIsFullScreen !== undefined) {\r\n            this._fullscreenVRpresenting = anyDoc.webkitIsFullScreen;\r\n        } else if (anyDoc.msIsFullScreen !== undefined) {\r\n            this._fullscreenVRpresenting = anyDoc.msIsFullScreen;\r\n        } else if ((<any>document).msFullscreenElement !== undefined) {\r\n            this._fullscreenVRpresenting = (<any>document).msFullscreenElement;\r\n        }\r\n        if (!this._fullscreenVRpresenting && this._inputElement) {\r\n            this.exitVR();\r\n            if (!this._useCustomVRButton && this._btnVR) {\r\n                this._btnVR.style.top = this._inputElement.offsetTop + this._inputElement.offsetHeight - 70 + \"px\";\r\n                this._btnVR.style.left = this._inputElement.offsetLeft + this._inputElement.offsetWidth - 100 + \"px\";\r\n                // make sure the button is visible after setting its position\r\n                this._updateButtonVisibility();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets a value indicating if we are currently in VR mode.\r\n     */\r\n    public get isInVRMode(): boolean {\r\n        return (this.xr && this.webVROptions.useXR && this.xr.baseExperience.state === WebXRState.IN_XR) || this._webVRpresenting || this._fullscreenVRpresenting;\r\n    }\r\n\r\n    private _onVrDisplayPresentChange() {\r\n        const vrDisplay = this._scene.getEngine().getVRDevice();\r\n        if (vrDisplay) {\r\n            const wasPresenting = this._webVRpresenting;\r\n            this._webVRpresenting = vrDisplay.isPresenting;\r\n\r\n            if (wasPresenting && !this._webVRpresenting) {\r\n                this.exitVR();\r\n            }\r\n        } else {\r\n            Logger.Warn(\"Detected VRDisplayPresentChange on an unknown VRDisplay. Did you can enterVR on the vrExperienceHelper?\");\r\n        }\r\n\r\n        this._updateButtonVisibility();\r\n    }\r\n\r\n    private _onVRDisplayChanged(eventArgs: IDisplayChangedEventArgs) {\r\n        this._webVRsupported = eventArgs.vrSupported;\r\n        this._webVRready = !!eventArgs.vrDisplay;\r\n        this._webVRpresenting = eventArgs.vrDisplay && eventArgs.vrDisplay.isPresenting;\r\n\r\n        this._updateButtonVisibility();\r\n    }\r\n\r\n    private _moveButtonToBottomRight() {\r\n        if (this._inputElement && !this._useCustomVRButton && this._btnVR) {\r\n            const rect: ClientRect = this._inputElement.getBoundingClientRect();\r\n            this._btnVR.style.top = rect.top + rect.height - 70 + \"px\";\r\n            this._btnVR.style.left = rect.left + rect.width - 100 + \"px\";\r\n        }\r\n    }\r\n\r\n    private _displayVRButton() {\r\n        if (!this._useCustomVRButton && !this._btnVRDisplayed && this._btnVR) {\r\n            document.body.appendChild(this._btnVR);\r\n            this._btnVRDisplayed = true;\r\n        }\r\n    }\r\n\r\n    private _updateButtonVisibility() {\r\n        if (!this._btnVR || this._useCustomVRButton) {\r\n            return;\r\n        }\r\n        this._btnVR.className = \"babylonVRicon\";\r\n        if (this.isInVRMode) {\r\n            this._btnVR.className += \" vrdisplaypresenting\";\r\n        } else {\r\n            if (this._webVRready) {\r\n                this._btnVR.className += \" vrdisplayready\";\r\n            }\r\n            if (this._webVRsupported) {\r\n                this._btnVR.className += \" vrdisplaysupported\";\r\n            }\r\n            if (this._webVRrequesting) {\r\n                this._btnVR.className += \" vrdisplayrequesting\";\r\n            }\r\n        }\r\n    }\r\n\r\n    private _cachedAngularSensibility = { angularSensibilityX: null, angularSensibilityY: null, angularSensibility: null };\r\n    /**\r\n     * Attempt to enter VR. If a headset is connected and ready, will request present on that.\r\n     * Otherwise, will use the fullscreen API.\r\n     */\r\n    public enterVR() {\r\n        if (this.xr) {\r\n            this.xr.baseExperience.enterXRAsync(\"immersive-vr\", \"local-floor\", this.xr.renderTarget);\r\n            return;\r\n        }\r\n        if (this.onEnteringVRObservable) {\r\n            try {\r\n                this.onEnteringVRObservable.notifyObservers(this);\r\n            } catch (err) {\r\n                Logger.Warn(\"Error in your custom logic onEnteringVR: \" + err);\r\n            }\r\n        }\r\n\r\n        if (this._scene.activeCamera) {\r\n            this._position = this._scene.activeCamera.position.clone();\r\n\r\n            if (this.vrDeviceOrientationCamera) {\r\n                this.vrDeviceOrientationCamera.rotation = Quaternion.FromRotationMatrix(this._scene.activeCamera.getWorldMatrix().getRotationMatrix()).toEulerAngles();\r\n                this.vrDeviceOrientationCamera.angularSensibility = 2000;\r\n            }\r\n            if (this.webVRCamera) {\r\n                const currentYRotation = this.webVRCamera.deviceRotationQuaternion.toEulerAngles().y;\r\n                const desiredYRotation = Quaternion.FromRotationMatrix(this._scene.activeCamera.getWorldMatrix().getRotationMatrix()).toEulerAngles().y;\r\n                const delta = desiredYRotation - currentYRotation;\r\n                const currentGlobalRotation = this.webVRCamera.rotationQuaternion.toEulerAngles().y;\r\n                this.webVRCamera.rotationQuaternion = Quaternion.FromEulerAngles(0, currentGlobalRotation + delta, 0);\r\n            }\r\n\r\n            // make sure that we return to the last active camera\r\n            this._existingCamera = this._scene.activeCamera;\r\n\r\n            // Remove and cache angular sensability to avoid camera rotation when in VR\r\n            if ((<any>this._existingCamera).angularSensibilityX) {\r\n                this._cachedAngularSensibility.angularSensibilityX = (<any>this._existingCamera).angularSensibilityX;\r\n                (<any>this._existingCamera).angularSensibilityX = Number.MAX_VALUE;\r\n            }\r\n            if ((<any>this._existingCamera).angularSensibilityY) {\r\n                this._cachedAngularSensibility.angularSensibilityY = (<any>this._existingCamera).angularSensibilityY;\r\n                (<any>this._existingCamera).angularSensibilityY = Number.MAX_VALUE;\r\n            }\r\n            if ((<any>this._existingCamera).angularSensibility) {\r\n                this._cachedAngularSensibility.angularSensibility = (<any>this._existingCamera).angularSensibility;\r\n                (<any>this._existingCamera).angularSensibility = Number.MAX_VALUE;\r\n            }\r\n        }\r\n\r\n        if (this._webVRrequesting) {\r\n            return;\r\n        }\r\n\r\n        // If WebVR is supported and a headset is connected\r\n        if (this._webVRready) {\r\n            if (!this._webVRpresenting) {\r\n                this._scene.getEngine().onVRRequestPresentComplete.addOnce((result) => {\r\n                    this.onAfterEnteringVRObservable.notifyObservers({ success: result });\r\n                });\r\n                this._webVRCamera.position = this._position;\r\n                this._scene.activeCamera = this._webVRCamera;\r\n            }\r\n        } else if (this._vrDeviceOrientationCamera) {\r\n            this._vrDeviceOrientationCamera.position = this._position;\r\n            if (this._scene.activeCamera) {\r\n                this._vrDeviceOrientationCamera.minZ = this._scene.activeCamera.minZ;\r\n            }\r\n            this._scene.activeCamera = this._vrDeviceOrientationCamera;\r\n            this._scene.getEngine().enterFullscreen(this.requestPointerLockOnFullScreen);\r\n            this._updateButtonVisibility();\r\n            this._vrDeviceOrientationCamera.onViewMatrixChangedObservable.addOnce(() => {\r\n                this.onAfterEnteringVRObservable.notifyObservers({ success: true });\r\n            });\r\n        }\r\n\r\n        if (this._scene.activeCamera && this._inputElement) {\r\n            this._scene.activeCamera.attachControl();\r\n        }\r\n\r\n        if (this._interactionsEnabled) {\r\n            this._scene.registerBeforeRender(this._beforeRender);\r\n        }\r\n\r\n        if (this._displayLaserPointer) {\r\n            [this._leftController, this._rightController].forEach((controller) => {\r\n                if (controller) {\r\n                    controller._activatePointer();\r\n                }\r\n            });\r\n        }\r\n\r\n        this._hasEnteredVR = true;\r\n    }\r\n\r\n    /**\r\n     * Attempt to exit VR, or fullscreen.\r\n     */\r\n    public exitVR() {\r\n        if (this.xr) {\r\n            this.xr.baseExperience.exitXRAsync();\r\n            return;\r\n        }\r\n        if (this._hasEnteredVR) {\r\n            if (this.onExitingVRObservable) {\r\n                try {\r\n                    this.onExitingVRObservable.notifyObservers(this);\r\n                } catch (err) {\r\n                    Logger.Warn(\"Error in your custom logic onExitingVR: \" + err);\r\n                }\r\n            }\r\n            if (this._webVRpresenting) {\r\n                this._scene.getEngine().disableVR();\r\n            }\r\n            if (this._scene.activeCamera) {\r\n                this._position = this._scene.activeCamera.position.clone();\r\n            }\r\n\r\n            if (this.vrDeviceOrientationCamera) {\r\n                this.vrDeviceOrientationCamera.angularSensibility = Number.MAX_VALUE;\r\n            }\r\n\r\n            if (this._deviceOrientationCamera) {\r\n                this._deviceOrientationCamera.position = this._position;\r\n                this._scene.activeCamera = this._deviceOrientationCamera;\r\n\r\n                // Restore angular sensibility\r\n                if (this._cachedAngularSensibility.angularSensibilityX) {\r\n                    (<any>this._deviceOrientationCamera).angularSensibilityX = this._cachedAngularSensibility.angularSensibilityX;\r\n                    this._cachedAngularSensibility.angularSensibilityX = null;\r\n                }\r\n                if (this._cachedAngularSensibility.angularSensibilityY) {\r\n                    (<any>this._deviceOrientationCamera).angularSensibilityY = this._cachedAngularSensibility.angularSensibilityY;\r\n                    this._cachedAngularSensibility.angularSensibilityY = null;\r\n                }\r\n                if (this._cachedAngularSensibility.angularSensibility) {\r\n                    (<any>this._deviceOrientationCamera).angularSensibility = this._cachedAngularSensibility.angularSensibility;\r\n                    this._cachedAngularSensibility.angularSensibility = null;\r\n                }\r\n            } else if (this._existingCamera) {\r\n                this._existingCamera.position = this._position;\r\n                this._scene.activeCamera = this._existingCamera;\r\n                if (this._inputElement) {\r\n                    this._scene.activeCamera.attachControl();\r\n                }\r\n\r\n                // Restore angular sensibility\r\n                if (this._cachedAngularSensibility.angularSensibilityX) {\r\n                    (<any>this._existingCamera).angularSensibilityX = this._cachedAngularSensibility.angularSensibilityX;\r\n                    this._cachedAngularSensibility.angularSensibilityX = null;\r\n                }\r\n                if (this._cachedAngularSensibility.angularSensibilityY) {\r\n                    (<any>this._existingCamera).angularSensibilityY = this._cachedAngularSensibility.angularSensibilityY;\r\n                    this._cachedAngularSensibility.angularSensibilityY = null;\r\n                }\r\n                if (this._cachedAngularSensibility.angularSensibility) {\r\n                    (<any>this._existingCamera).angularSensibility = this._cachedAngularSensibility.angularSensibility;\r\n                    this._cachedAngularSensibility.angularSensibility = null;\r\n                }\r\n            }\r\n\r\n            this._updateButtonVisibility();\r\n\r\n            if (this._interactionsEnabled) {\r\n                this._scene.unregisterBeforeRender(this._beforeRender);\r\n                this._cameraGazer._gazeTracker.isVisible = false;\r\n                if (this._leftController) {\r\n                    this._leftController._gazeTracker.isVisible = false;\r\n                }\r\n                if (this._rightController) {\r\n                    this._rightController._gazeTracker.isVisible = false;\r\n                }\r\n            }\r\n\r\n            // resize to update width and height when exiting vr exits fullscreen\r\n            this._scene.getEngine().resize();\r\n\r\n            [this._leftController, this._rightController].forEach((controller) => {\r\n                if (controller) {\r\n                    controller._deactivatePointer();\r\n                }\r\n            });\r\n\r\n            this._hasEnteredVR = false;\r\n\r\n            // Update engine state to re enable non-vr camera input\r\n            const engine = this._scene.getEngine();\r\n            if (engine._onVrDisplayPresentChange) {\r\n                engine._onVrDisplayPresentChange();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The position of the vr experience helper.\r\n     */\r\n    public get position(): Vector3 {\r\n        return this._position;\r\n    }\r\n\r\n    /**\r\n     * Sets the position of the vr experience helper.\r\n     */\r\n    public set position(value: Vector3) {\r\n        this._position = value;\r\n\r\n        if (this._scene.activeCamera) {\r\n            this._scene.activeCamera.position = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enables controllers and user interactions such as selecting and object or clicking on an object.\r\n     */\r\n    public enableInteractions() {\r\n        if (!this._interactionsEnabled) {\r\n            this._interactionsRequested = true;\r\n\r\n            // in XR it is enabled by default, but just to make sure, re-attach\r\n            if (this.xr) {\r\n                if (this.xr.baseExperience.state === WebXRState.IN_XR) {\r\n                    this.xr.pointerSelection.attach();\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (this._leftController) {\r\n                this._enableInteractionOnController(this._leftController);\r\n            }\r\n\r\n            if (this._rightController) {\r\n                this._enableInteractionOnController(this._rightController);\r\n            }\r\n\r\n            this.raySelectionPredicate = (mesh) => {\r\n                return mesh.isVisible && (mesh.isPickable || mesh.name === this._floorMeshName);\r\n            };\r\n\r\n            this.meshSelectionPredicate = () => {\r\n                return true;\r\n            };\r\n\r\n            this._raySelectionPredicate = (mesh) => {\r\n                if (\r\n                    this._isTeleportationFloor(mesh) ||\r\n                    (mesh.name.indexOf(\"gazeTracker\") === -1 && mesh.name.indexOf(\"teleportationTarget\") === -1 && mesh.name.indexOf(\"torusTeleportation\") === -1)\r\n                ) {\r\n                    return this.raySelectionPredicate(mesh);\r\n                }\r\n                return false;\r\n            };\r\n\r\n            this._interactionsEnabled = true;\r\n        }\r\n    }\r\n\r\n    private get _noControllerIsActive() {\r\n        return !(this._leftController && this._leftController._activePointer) && !(this._rightController && this._rightController._activePointer);\r\n    }\r\n\r\n    private _beforeRender = () => {\r\n        if (this._leftController && this._leftController._activePointer) {\r\n            this._castRayAndSelectObject(this._leftController);\r\n        }\r\n\r\n        if (this._rightController && this._rightController._activePointer) {\r\n            this._castRayAndSelectObject(this._rightController);\r\n        }\r\n\r\n        if (this._noControllerIsActive && (this._scene.getEngine().isPointerLock || this.enableGazeEvenWhenNoPointerLock)) {\r\n            this._castRayAndSelectObject(this._cameraGazer);\r\n        } else {\r\n            this._cameraGazer._gazeTracker.isVisible = false;\r\n        }\r\n    };\r\n\r\n    private _isTeleportationFloor(mesh: AbstractMesh): boolean {\r\n        for (let i = 0; i < this._floorMeshesCollection.length; i++) {\r\n            if (this._floorMeshesCollection[i].id === mesh.id) {\r\n                return true;\r\n            }\r\n        }\r\n        if (this._floorMeshName && mesh.name === this._floorMeshName) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Adds a floor mesh to be used for teleportation.\r\n     * @param floorMesh the mesh to be used for teleportation.\r\n     */\r\n    public addFloorMesh(floorMesh: Mesh): void {\r\n        if (!this._floorMeshesCollection) {\r\n            return;\r\n        }\r\n\r\n        if (this._floorMeshesCollection.indexOf(floorMesh) > -1) {\r\n            return;\r\n        }\r\n\r\n        this._floorMeshesCollection.push(floorMesh);\r\n    }\r\n\r\n    /**\r\n     * Removes a floor mesh from being used for teleportation.\r\n     * @param floorMesh the mesh to be removed.\r\n     */\r\n    public removeFloorMesh(floorMesh: Mesh): void {\r\n        if (!this._floorMeshesCollection) {\r\n            return;\r\n        }\r\n\r\n        const meshIndex = this._floorMeshesCollection.indexOf(floorMesh);\r\n        if (meshIndex !== -1) {\r\n            this._floorMeshesCollection.splice(meshIndex, 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enables interactions and teleportation using the VR controllers and gaze.\r\n     * @param vrTeleportationOptions options to modify teleportation behavior.\r\n     */\r\n    public enableTeleportation(vrTeleportationOptions: VRTeleportationOptions = {}) {\r\n        if (!this._teleportationInitialized) {\r\n            this._teleportationRequested = true;\r\n\r\n            this.enableInteractions();\r\n\r\n            if (this.webVROptions.useXR && (vrTeleportationOptions.floorMeshes || vrTeleportationOptions.floorMeshName)) {\r\n                const floorMeshes: AbstractMesh[] = vrTeleportationOptions.floorMeshes || [];\r\n                if (!floorMeshes.length) {\r\n                    const floorMesh = this._scene.getMeshByName(vrTeleportationOptions.floorMeshName!);\r\n                    if (floorMesh) {\r\n                        floorMeshes.push(floorMesh);\r\n                    }\r\n                }\r\n                if (this.xr) {\r\n                    floorMeshes.forEach((mesh) => {\r\n                        this.xr.teleportation.addFloorMesh(mesh);\r\n                    });\r\n                    if (!this.xr.teleportation.attached) {\r\n                        this.xr.teleportation.attach();\r\n                    }\r\n                    return;\r\n                } else if (!this.xrTestDone) {\r\n                    const waitForXr = () => {\r\n                        if (this.xrTestDone) {\r\n                            this._scene.unregisterBeforeRender(waitForXr);\r\n                            if (this.xr) {\r\n                                if (!this.xr.teleportation.attached) {\r\n                                    this.xr.teleportation.attach();\r\n                                }\r\n                            } else {\r\n                                this.enableTeleportation(vrTeleportationOptions);\r\n                            }\r\n                        }\r\n                    };\r\n                    this._scene.registerBeforeRender(waitForXr);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (vrTeleportationOptions.floorMeshName) {\r\n                this._floorMeshName = vrTeleportationOptions.floorMeshName;\r\n            }\r\n            if (vrTeleportationOptions.floorMeshes) {\r\n                this._floorMeshesCollection = vrTeleportationOptions.floorMeshes;\r\n            }\r\n\r\n            if (vrTeleportationOptions.teleportationMode) {\r\n                this._teleportationMode = vrTeleportationOptions.teleportationMode;\r\n            }\r\n            if (vrTeleportationOptions.teleportationTime && vrTeleportationOptions.teleportationTime > 0) {\r\n                this._teleportationTime = vrTeleportationOptions.teleportationTime;\r\n            }\r\n            if (vrTeleportationOptions.teleportationSpeed && vrTeleportationOptions.teleportationSpeed > 0) {\r\n                this._teleportationSpeed = vrTeleportationOptions.teleportationSpeed;\r\n            }\r\n            if (vrTeleportationOptions.easingFunction !== undefined) {\r\n                this._teleportationEasing = vrTeleportationOptions.easingFunction;\r\n            }\r\n\r\n            if (this._leftController != null) {\r\n                this._enableTeleportationOnController(this._leftController);\r\n            }\r\n            if (this._rightController != null) {\r\n                this._enableTeleportationOnController(this._rightController);\r\n            }\r\n\r\n            // Creates an image processing post process for the vignette not relying\r\n            // on the main scene configuration for image processing to reduce setup and spaces\r\n            // (gamma/linear) conflicts.\r\n            const imageProcessingConfiguration = new ImageProcessingConfiguration();\r\n            imageProcessingConfiguration.vignetteColor = new Color4(0, 0, 0, 0);\r\n            imageProcessingConfiguration.vignetteEnabled = true;\r\n            this._postProcessMove = new ImageProcessingPostProcess(\r\n                \"postProcessMove\",\r\n                1.0,\r\n                this._webVRCamera,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                imageProcessingConfiguration\r\n            );\r\n\r\n            this._webVRCamera.detachPostProcess(this._postProcessMove);\r\n            this._teleportationInitialized = true;\r\n            if (this._isDefaultTeleportationTarget) {\r\n                this._createTeleportationCircles();\r\n                this._teleportationTarget.scaling.scaleInPlace(this._webVRCamera.deviceScaleFactor);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _onNewGamepadConnected = (gamepad: Gamepad) => {\r\n        if (gamepad.type !== Gamepad.POSE_ENABLED) {\r\n            if (gamepad.leftStick) {\r\n                gamepad.onleftstickchanged((stickValues) => {\r\n                    if (this._teleportationInitialized && this.teleportationEnabled) {\r\n                        // Listening to classic/xbox gamepad only if no VR controller is active\r\n                        if (\r\n                            (!this._leftController && !this._rightController) ||\r\n                            (this._leftController && !this._leftController._activePointer && this._rightController && !this._rightController._activePointer)\r\n                        ) {\r\n                            this._checkTeleportWithRay(stickValues, this._cameraGazer);\r\n                            this._checkTeleportBackwards(stickValues, this._cameraGazer);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            if (gamepad.rightStick) {\r\n                gamepad.onrightstickchanged((stickValues) => {\r\n                    if (this._teleportationInitialized) {\r\n                        this._checkRotate(stickValues, this._cameraGazer);\r\n                    }\r\n                });\r\n            }\r\n            if (gamepad.type === Gamepad.XBOX) {\r\n                (<Xbox360Pad>gamepad).onbuttondown((buttonPressed: Xbox360Button) => {\r\n                    if (this._interactionsEnabled && buttonPressed === Xbox360Button.A) {\r\n                        this._cameraGazer._selectionPointerDown();\r\n                    }\r\n                });\r\n                (<Xbox360Pad>gamepad).onbuttonup((buttonPressed: Xbox360Button) => {\r\n                    if (this._interactionsEnabled && buttonPressed === Xbox360Button.A) {\r\n                        this._cameraGazer._selectionPointerUp();\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            const webVRController = <WebVRController>gamepad;\r\n            const controller = new VRExperienceHelperControllerGazer(webVRController, this._scene, this._cameraGazer._gazeTracker);\r\n\r\n            if (webVRController.hand === \"right\" || (this._leftController && this._leftController.webVRController != webVRController)) {\r\n                this._rightController = controller;\r\n            } else {\r\n                this._leftController = controller;\r\n            }\r\n\r\n            this._tryEnableInteractionOnController(controller);\r\n        }\r\n    };\r\n\r\n    // This only succeeds if the controller's mesh exists for the controller so this must be called whenever new controller is connected or when mesh is loaded\r\n    private _tryEnableInteractionOnController = (controller: VRExperienceHelperControllerGazer) => {\r\n        if (this._interactionsRequested && !controller._interactionsEnabled) {\r\n            this._enableInteractionOnController(controller);\r\n        }\r\n        if (this._teleportationRequested && !controller._teleportationEnabled) {\r\n            this._enableTeleportationOnController(controller);\r\n        }\r\n    };\r\n\r\n    private _onNewGamepadDisconnected = (gamepad: Gamepad) => {\r\n        if (gamepad instanceof WebVRController) {\r\n            if (gamepad.hand === \"left\" && this._leftController != null) {\r\n                this._leftController.dispose();\r\n                this._leftController = null;\r\n            }\r\n            if (gamepad.hand === \"right\" && this._rightController != null) {\r\n                this._rightController.dispose();\r\n                this._rightController = null;\r\n            }\r\n        }\r\n    };\r\n\r\n    private _enableInteractionOnController(controller: VRExperienceHelperControllerGazer) {\r\n        const controllerMesh = controller.webVRController.mesh;\r\n        if (controllerMesh) {\r\n            controller._interactionsEnabled = true;\r\n            if (this.isInVRMode && this._displayLaserPointer) {\r\n                controller._activatePointer();\r\n            }\r\n            if (this.webVROptions.laserToggle) {\r\n                controller.webVRController.onMainButtonStateChangedObservable.add((stateObject) => {\r\n                    // Enabling / disabling laserPointer\r\n                    if (this._displayLaserPointer && stateObject.value === 1) {\r\n                        if (controller._activePointer) {\r\n                            controller._deactivatePointer();\r\n                        } else {\r\n                            controller._activatePointer();\r\n                        }\r\n                        if (this.displayGaze) {\r\n                            controller._gazeTracker.isVisible = controller._activePointer;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            controller.webVRController.onTriggerStateChangedObservable.add((stateObject) => {\r\n                let gazer: VRExperienceHelperGazer = controller;\r\n                if (this._noControllerIsActive) {\r\n                    gazer = this._cameraGazer;\r\n                }\r\n                if (!gazer._pointerDownOnMeshAsked) {\r\n                    if (stateObject.value > this._padSensibilityUp) {\r\n                        gazer._selectionPointerDown();\r\n                    }\r\n                } else if (stateObject.value < this._padSensibilityDown) {\r\n                    gazer._selectionPointerUp();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private _checkTeleportWithRay(stateObject: StickValues, gazer: VRExperienceHelperGazer) {\r\n        // Dont teleport if another gaze already requested teleportation\r\n        if (this._teleportationRequestInitiated && !gazer._teleportationRequestInitiated) {\r\n            return;\r\n        }\r\n        if (!gazer._teleportationRequestInitiated) {\r\n            if (stateObject.y < -this._padSensibilityUp && gazer._dpadPressed) {\r\n                gazer._activatePointer();\r\n                gazer._teleportationRequestInitiated = true;\r\n            }\r\n        } else {\r\n            // Listening to the proper controller values changes to confirm teleportation\r\n            if (Math.sqrt(stateObject.y * stateObject.y + stateObject.x * stateObject.x) < this._padSensibilityDown) {\r\n                if (this._teleportActive) {\r\n                    this.teleportCamera(this._haloCenter);\r\n                }\r\n\r\n                gazer._teleportationRequestInitiated = false;\r\n            }\r\n        }\r\n    }\r\n    private _checkRotate(stateObject: StickValues, gazer: VRExperienceHelperGazer) {\r\n        // Only rotate when user is not currently selecting a teleportation location\r\n        if (gazer._teleportationRequestInitiated) {\r\n            return;\r\n        }\r\n\r\n        if (!gazer._rotationLeftAsked) {\r\n            if (stateObject.x < -this._padSensibilityUp && gazer._dpadPressed) {\r\n                gazer._rotationLeftAsked = true;\r\n                if (this._rotationAllowed) {\r\n                    this._rotateCamera(false);\r\n                }\r\n            }\r\n        } else {\r\n            if (stateObject.x > -this._padSensibilityDown) {\r\n                gazer._rotationLeftAsked = false;\r\n            }\r\n        }\r\n\r\n        if (!gazer._rotationRightAsked) {\r\n            if (stateObject.x > this._padSensibilityUp && gazer._dpadPressed) {\r\n                gazer._rotationRightAsked = true;\r\n                if (this._rotationAllowed) {\r\n                    this._rotateCamera(true);\r\n                }\r\n            }\r\n        } else {\r\n            if (stateObject.x < this._padSensibilityDown) {\r\n                gazer._rotationRightAsked = false;\r\n            }\r\n        }\r\n    }\r\n    private _checkTeleportBackwards(stateObject: StickValues, gazer: VRExperienceHelperGazer) {\r\n        // Only teleport backwards when user is not currently selecting a teleportation location\r\n        if (gazer._teleportationRequestInitiated) {\r\n            return;\r\n        }\r\n        // Teleport backwards\r\n        if (stateObject.y > this._padSensibilityUp && gazer._dpadPressed) {\r\n            if (!gazer._teleportationBackRequestInitiated) {\r\n                if (!this.currentVRCamera) {\r\n                    return;\r\n                }\r\n\r\n                // Get rotation and position of the current camera\r\n                let rotation = Quaternion.FromRotationMatrix(this.currentVRCamera.getWorldMatrix().getRotationMatrix());\r\n                let position = this.currentVRCamera.position;\r\n\r\n                // If the camera has device position, use that instead\r\n                if ((<WebVRFreeCamera>this.currentVRCamera).devicePosition && (<WebVRFreeCamera>this.currentVRCamera).deviceRotationQuaternion) {\r\n                    rotation = (<WebVRFreeCamera>this.currentVRCamera).deviceRotationQuaternion;\r\n                    position = (<WebVRFreeCamera>this.currentVRCamera).devicePosition;\r\n                }\r\n\r\n                // Get matrix with only the y rotation of the device rotation\r\n                rotation.toEulerAnglesToRef(this._workingVector);\r\n                this._workingVector.z = 0;\r\n                this._workingVector.x = 0;\r\n                Quaternion.RotationYawPitchRollToRef(this._workingVector.y, this._workingVector.x, this._workingVector.z, this._workingQuaternion);\r\n                this._workingQuaternion.toRotationMatrix(this._workingMatrix);\r\n\r\n                // Rotate backwards ray by device rotation to cast at the ground behind the user\r\n                Vector3.TransformCoordinatesToRef(this._teleportBackwardsVector, this._workingMatrix, this._workingVector);\r\n\r\n                // Teleport if ray hit the ground and is not to far away eg. backwards off a cliff\r\n                const ray = new Ray(position, this._workingVector);\r\n                const hit = this._scene.pickWithRay(ray, this._raySelectionPredicate);\r\n                if (hit && hit.pickedPoint && hit.pickedMesh && this._isTeleportationFloor(hit.pickedMesh) && hit.distance < 5) {\r\n                    this.teleportCamera(hit.pickedPoint);\r\n                }\r\n\r\n                gazer._teleportationBackRequestInitiated = true;\r\n            }\r\n        } else {\r\n            gazer._teleportationBackRequestInitiated = false;\r\n        }\r\n    }\r\n\r\n    private _enableTeleportationOnController(controller: VRExperienceHelperControllerGazer) {\r\n        const controllerMesh = controller.webVRController.mesh;\r\n        if (controllerMesh) {\r\n            if (!controller._interactionsEnabled) {\r\n                this._enableInteractionOnController(controller);\r\n            }\r\n            controller._interactionsEnabled = true;\r\n            controller._teleportationEnabled = true;\r\n            if (controller.webVRController.controllerType === PoseEnabledControllerType.VIVE) {\r\n                controller._dpadPressed = false;\r\n                controller.webVRController.onPadStateChangedObservable.add((stateObject) => {\r\n                    controller._dpadPressed = stateObject.pressed;\r\n                    if (!controller._dpadPressed) {\r\n                        controller._rotationLeftAsked = false;\r\n                        controller._rotationRightAsked = false;\r\n                        controller._teleportationBackRequestInitiated = false;\r\n                    }\r\n                });\r\n            }\r\n            controller.webVRController.onPadValuesChangedObservable.add((stateObject) => {\r\n                if (this.teleportationEnabled) {\r\n                    this._checkTeleportBackwards(stateObject, controller);\r\n                    this._checkTeleportWithRay(stateObject, controller);\r\n                }\r\n                this._checkRotate(stateObject, controller);\r\n            });\r\n        }\r\n    }\r\n\r\n    private _createTeleportationCircles() {\r\n        this._teleportationTarget = CreateGround(\"teleportationTarget\", { width: 2, height: 2, subdivisions: 2 }, this._scene);\r\n        this._teleportationTarget.isPickable = false;\r\n\r\n        const length = 512;\r\n        const dynamicTexture = new DynamicTexture(\"DynamicTexture\", length, this._scene, true);\r\n        dynamicTexture.hasAlpha = true;\r\n        const context = dynamicTexture.getContext();\r\n\r\n        const centerX = length / 2;\r\n        const centerY = length / 2;\r\n        const radius = 200;\r\n\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\r\n        context.fillStyle = this._teleportationFillColor;\r\n        context.fill();\r\n        context.lineWidth = 10;\r\n        context.strokeStyle = this._teleportationBorderColor;\r\n        context.stroke();\r\n        context.closePath();\r\n        dynamicTexture.update();\r\n\r\n        const teleportationCircleMaterial = new StandardMaterial(\"TextPlaneMaterial\", this._scene);\r\n        teleportationCircleMaterial.diffuseTexture = dynamicTexture;\r\n        this._teleportationTarget.material = teleportationCircleMaterial;\r\n\r\n        const torus = CreateTorus(\r\n            \"torusTeleportation\",\r\n            {\r\n                diameter: 0.75,\r\n                thickness: 0.1,\r\n                tessellation: 25,\r\n                updatable: false,\r\n            },\r\n            this._scene\r\n        );\r\n        torus.isPickable = false;\r\n        torus.parent = this._teleportationTarget;\r\n\r\n        const animationInnerCircle = new Animation(\"animationInnerCircle\", \"position.y\", 30, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CYCLE);\r\n\r\n        const keys = [];\r\n        keys.push({\r\n            frame: 0,\r\n            value: 0,\r\n        });\r\n        keys.push({\r\n            frame: 30,\r\n            value: 0.4,\r\n        });\r\n        keys.push({\r\n            frame: 60,\r\n            value: 0,\r\n        });\r\n\r\n        animationInnerCircle.setKeys(keys);\r\n\r\n        const easingFunction = new SineEase();\r\n        easingFunction.setEasingMode(EasingFunction.EASINGMODE_EASEINOUT);\r\n        animationInnerCircle.setEasingFunction(easingFunction);\r\n\r\n        torus.animations = [];\r\n        torus.animations.push(animationInnerCircle);\r\n\r\n        this._scene.beginAnimation(torus, 0, 60, true);\r\n\r\n        this._hideTeleportationTarget();\r\n    }\r\n\r\n    private _displayTeleportationTarget() {\r\n        this._teleportActive = true;\r\n        if (this._teleportationInitialized) {\r\n            this._teleportationTarget.isVisible = true;\r\n            if (this._isDefaultTeleportationTarget) {\r\n                (<Mesh>this._teleportationTarget.getChildren()[0]).isVisible = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _hideTeleportationTarget() {\r\n        this._teleportActive = false;\r\n        if (this._teleportationInitialized) {\r\n            this._teleportationTarget.isVisible = false;\r\n            if (this._isDefaultTeleportationTarget) {\r\n                (<Mesh>this._teleportationTarget.getChildren()[0]).isVisible = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _rotateCamera(right: boolean) {\r\n        if (!(this.currentVRCamera instanceof FreeCamera)) {\r\n            return;\r\n        }\r\n\r\n        if (right) {\r\n            this._rotationAngle++;\r\n        } else {\r\n            this._rotationAngle--;\r\n        }\r\n\r\n        this.currentVRCamera.animations = [];\r\n\r\n        const target = Quaternion.FromRotationMatrix(Matrix.RotationY((Math.PI / 4) * this._rotationAngle));\r\n\r\n        const animationRotation = new Animation(\"animationRotation\", \"rotationQuaternion\", 90, Animation.ANIMATIONTYPE_QUATERNION, Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n\r\n        const animationRotationKeys = [];\r\n        animationRotationKeys.push({\r\n            frame: 0,\r\n            value: this.currentVRCamera.rotationQuaternion,\r\n        });\r\n        animationRotationKeys.push({\r\n            frame: 6,\r\n            value: target,\r\n        });\r\n\r\n        animationRotation.setKeys(animationRotationKeys);\r\n\r\n        animationRotation.setEasingFunction(this._circleEase);\r\n\r\n        this.currentVRCamera.animations.push(animationRotation);\r\n\r\n        this._postProcessMove.animations = [];\r\n\r\n        const animationPP = new Animation(\"animationPP\", \"vignetteWeight\", 90, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n\r\n        const vignetteWeightKeys = [];\r\n        vignetteWeightKeys.push({\r\n            frame: 0,\r\n            value: 0,\r\n        });\r\n        vignetteWeightKeys.push({\r\n            frame: 3,\r\n            value: 4,\r\n        });\r\n        vignetteWeightKeys.push({\r\n            frame: 6,\r\n            value: 0,\r\n        });\r\n\r\n        animationPP.setKeys(vignetteWeightKeys);\r\n        animationPP.setEasingFunction(this._circleEase);\r\n        this._postProcessMove.animations.push(animationPP);\r\n\r\n        const animationPP2 = new Animation(\"animationPP2\", \"vignetteStretch\", 90, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n\r\n        const vignetteStretchKeys = [];\r\n        vignetteStretchKeys.push({\r\n            frame: 0,\r\n            value: 0,\r\n        });\r\n        vignetteStretchKeys.push({\r\n            frame: 3,\r\n            value: 10,\r\n        });\r\n        vignetteStretchKeys.push({\r\n            frame: 6,\r\n            value: 0,\r\n        });\r\n\r\n        animationPP2.setKeys(vignetteStretchKeys);\r\n        animationPP2.setEasingFunction(this._circleEase);\r\n        this._postProcessMove.animations.push(animationPP2);\r\n\r\n        this._postProcessMove.imageProcessingConfiguration.vignetteWeight = 0;\r\n        this._postProcessMove.imageProcessingConfiguration.vignetteStretch = 0;\r\n        this._postProcessMove.samples = 4;\r\n        this._webVRCamera.attachPostProcess(this._postProcessMove);\r\n        this._scene.beginAnimation(this._postProcessMove, 0, 6, false, 1, () => {\r\n            this._webVRCamera.detachPostProcess(this._postProcessMove);\r\n        });\r\n        this._scene.beginAnimation(this.currentVRCamera, 0, 6, false, 1);\r\n    }\r\n\r\n    private _moveTeleportationSelectorTo(hit: PickingInfo, gazer: VRExperienceHelperGazer, ray: Ray) {\r\n        if (hit.pickedPoint) {\r\n            if (gazer._teleportationRequestInitiated) {\r\n                this._displayTeleportationTarget();\r\n                this._haloCenter.copyFrom(hit.pickedPoint);\r\n                this._teleportationTarget.position.copyFrom(hit.pickedPoint);\r\n            }\r\n\r\n            const pickNormal = this._convertNormalToDirectionOfRay(hit.getNormal(true, false), ray);\r\n            if (pickNormal) {\r\n                const axis1 = Vector3.Cross(Axis.Y, pickNormal);\r\n                const axis2 = Vector3.Cross(pickNormal, axis1);\r\n                Vector3.RotationFromAxisToRef(axis2, pickNormal, axis1, this._teleportationTarget.rotation);\r\n            }\r\n            this._teleportationTarget.position.y += 0.1;\r\n        }\r\n    }\r\n    private _workingVector = Vector3.Zero();\r\n    private _workingQuaternion = Quaternion.Identity();\r\n    private _workingMatrix = Matrix.Identity();\r\n\r\n    /**\r\n     * Time Constant Teleportation Mode\r\n     */\r\n    public static readonly TELEPORTATIONMODE_CONSTANTTIME = 0;\r\n    /**\r\n     * Speed Constant Teleportation Mode\r\n     */\r\n    public static readonly TELEPORTATIONMODE_CONSTANTSPEED = 1;\r\n\r\n    /**\r\n     * Teleports the users feet to the desired location\r\n     * @param location The location where the user's feet should be placed\r\n     */\r\n    public teleportCamera(location: Vector3) {\r\n        if (!(this.currentVRCamera instanceof FreeCamera)) {\r\n            return;\r\n        }\r\n        // Teleport the hmd to where the user is looking by moving the anchor to where they are looking minus the\r\n        // offset of the headset from the anchor.\r\n        if (this.webVRCamera.leftCamera) {\r\n            this._workingVector.copyFrom(this.webVRCamera.leftCamera.globalPosition);\r\n            this._workingVector.subtractInPlace(this.webVRCamera.position);\r\n            location.subtractToRef(this._workingVector, this._workingVector);\r\n        } else {\r\n            this._workingVector.copyFrom(location);\r\n        }\r\n        // Add height to account for user's height offset\r\n        if (this.isInVRMode) {\r\n            this._workingVector.y += this.webVRCamera.deviceDistanceToRoomGround() * this._webVRCamera.deviceScaleFactor;\r\n        } else {\r\n            this._workingVector.y += this._defaultHeight;\r\n        }\r\n\r\n        this.onBeforeCameraTeleport.notifyObservers(this._workingVector);\r\n\r\n        // Animations FPS\r\n        const FPS = 90;\r\n        let speedRatio, lastFrame;\r\n        if (this._teleportationMode == VRExperienceHelper.TELEPORTATIONMODE_CONSTANTSPEED) {\r\n            lastFrame = FPS;\r\n            const dist = Vector3.Distance(this.currentVRCamera.position, this._workingVector);\r\n            speedRatio = this._teleportationSpeed / dist;\r\n        } else {\r\n            // teleportationMode is TELEPORTATIONMODE_CONSTANTTIME\r\n            lastFrame = Math.round((this._teleportationTime * FPS) / 1000);\r\n            speedRatio = 1;\r\n        }\r\n\r\n        // Create animation from the camera's position to the new location\r\n        this.currentVRCamera.animations = [];\r\n        const animationCameraTeleportation = new Animation(\"animationCameraTeleportation\", \"position\", FPS, Animation.ANIMATIONTYPE_VECTOR3, Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n        const animationCameraTeleportationKeys = [\r\n            {\r\n                frame: 0,\r\n                value: this.currentVRCamera.position,\r\n            },\r\n            {\r\n                frame: lastFrame,\r\n                value: this._workingVector,\r\n            },\r\n        ];\r\n\r\n        animationCameraTeleportation.setKeys(animationCameraTeleportationKeys);\r\n        animationCameraTeleportation.setEasingFunction(this._teleportationEasing);\r\n        this.currentVRCamera.animations.push(animationCameraTeleportation);\r\n\r\n        this._postProcessMove.animations = [];\r\n\r\n        // Calculate the mid frame for vignette animations\r\n        const midFrame = Math.round(lastFrame / 2);\r\n\r\n        const animationPP = new Animation(\"animationPP\", \"vignetteWeight\", FPS, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n\r\n        const vignetteWeightKeys = [];\r\n        vignetteWeightKeys.push({\r\n            frame: 0,\r\n            value: 0,\r\n        });\r\n        vignetteWeightKeys.push({\r\n            frame: midFrame,\r\n            value: 8,\r\n        });\r\n        vignetteWeightKeys.push({\r\n            frame: lastFrame,\r\n            value: 0,\r\n        });\r\n\r\n        animationPP.setKeys(vignetteWeightKeys);\r\n        this._postProcessMove.animations.push(animationPP);\r\n\r\n        const animationPP2 = new Animation(\"animationPP2\", \"vignetteStretch\", FPS, Animation.ANIMATIONTYPE_FLOAT, Animation.ANIMATIONLOOPMODE_CONSTANT);\r\n\r\n        const vignetteStretchKeys = [];\r\n        vignetteStretchKeys.push({\r\n            frame: 0,\r\n            value: 0,\r\n        });\r\n        vignetteStretchKeys.push({\r\n            frame: midFrame,\r\n            value: 10,\r\n        });\r\n        vignetteStretchKeys.push({\r\n            frame: lastFrame,\r\n            value: 0,\r\n        });\r\n\r\n        animationPP2.setKeys(vignetteStretchKeys);\r\n        this._postProcessMove.animations.push(animationPP2);\r\n\r\n        this._postProcessMove.imageProcessingConfiguration.vignetteWeight = 0;\r\n        this._postProcessMove.imageProcessingConfiguration.vignetteStretch = 0;\r\n\r\n        this._webVRCamera.attachPostProcess(this._postProcessMove);\r\n        this._scene.beginAnimation(this._postProcessMove, 0, lastFrame, false, speedRatio, () => {\r\n            this._webVRCamera.detachPostProcess(this._postProcessMove);\r\n        });\r\n        this._scene.beginAnimation(this.currentVRCamera, 0, lastFrame, false, speedRatio, () => {\r\n            this.onAfterCameraTeleport.notifyObservers(this._workingVector);\r\n        });\r\n\r\n        this._hideTeleportationTarget();\r\n    }\r\n\r\n    private _convertNormalToDirectionOfRay(normal: Nullable<Vector3>, ray: Ray) {\r\n        if (normal) {\r\n            const angle = Math.acos(Vector3.Dot(normal, ray.direction));\r\n            if (angle < Math.PI / 2) {\r\n                normal.scaleInPlace(-1);\r\n            }\r\n        }\r\n        return normal;\r\n    }\r\n\r\n    private _castRayAndSelectObject(gazer: VRExperienceHelperGazer) {\r\n        if (!(this.currentVRCamera instanceof FreeCamera)) {\r\n            return;\r\n        }\r\n\r\n        const ray = gazer._getForwardRay(this._rayLength);\r\n        const hit = this._scene.pickWithRay(ray, this._raySelectionPredicate);\r\n\r\n        if (hit) {\r\n            this._scene.simulatePointerMove(hit, { pointerId: gazer._id });\r\n        }\r\n        gazer._currentHit = hit;\r\n\r\n        // Moving the gazeTracker on the mesh face targetted\r\n        if (hit && hit.pickedPoint) {\r\n            if (this._displayGaze) {\r\n                let multiplier = 1;\r\n\r\n                gazer._gazeTracker.isVisible = true;\r\n\r\n                if (gazer._isActionableMesh) {\r\n                    multiplier = 3;\r\n                }\r\n                if (this.updateGazeTrackerScale) {\r\n                    gazer._gazeTracker.scaling.x = hit.distance * multiplier;\r\n                    gazer._gazeTracker.scaling.y = hit.distance * multiplier;\r\n                    gazer._gazeTracker.scaling.z = hit.distance * multiplier;\r\n                }\r\n\r\n                const pickNormal = this._convertNormalToDirectionOfRay(hit.getNormal(), ray);\r\n                // To avoid z-fighting\r\n                const deltaFighting = 0.002;\r\n\r\n                if (pickNormal) {\r\n                    const axis1 = Vector3.Cross(Axis.Y, pickNormal);\r\n                    const axis2 = Vector3.Cross(pickNormal, axis1);\r\n                    Vector3.RotationFromAxisToRef(axis2, pickNormal, axis1, gazer._gazeTracker.rotation);\r\n                }\r\n                gazer._gazeTracker.position.copyFrom(hit.pickedPoint);\r\n\r\n                if (gazer._gazeTracker.position.x < 0) {\r\n                    gazer._gazeTracker.position.x += deltaFighting;\r\n                } else {\r\n                    gazer._gazeTracker.position.x -= deltaFighting;\r\n                }\r\n                if (gazer._gazeTracker.position.y < 0) {\r\n                    gazer._gazeTracker.position.y += deltaFighting;\r\n                } else {\r\n                    gazer._gazeTracker.position.y -= deltaFighting;\r\n                }\r\n                if (gazer._gazeTracker.position.z < 0) {\r\n                    gazer._gazeTracker.position.z += deltaFighting;\r\n                } else {\r\n                    gazer._gazeTracker.position.z -= deltaFighting;\r\n                }\r\n            }\r\n\r\n            // Changing the size of the laser pointer based on the distance from the targetted point\r\n            gazer._updatePointerDistance(hit.distance);\r\n        } else {\r\n            gazer._updatePointerDistance();\r\n            gazer._gazeTracker.isVisible = false;\r\n        }\r\n\r\n        if (hit && hit.pickedMesh) {\r\n            // The object selected is the floor, we're in a teleportation scenario\r\n            if (this._teleportationInitialized && this._isTeleportationFloor(hit.pickedMesh) && hit.pickedPoint) {\r\n                // Moving the teleportation area to this targetted point\r\n\r\n                //Raise onSelectedMeshUnselected observable if ray collided floor mesh/meshes and a non floor mesh was previously selected\r\n                if (gazer._currentMeshSelected && !this._isTeleportationFloor(gazer._currentMeshSelected)) {\r\n                    this._notifySelectedMeshUnselected(gazer._currentMeshSelected);\r\n                }\r\n\r\n                gazer._currentMeshSelected = null;\r\n                if (gazer._teleportationRequestInitiated) {\r\n                    this._moveTeleportationSelectorTo(hit, gazer, ray);\r\n                }\r\n                return;\r\n            }\r\n            // If not, we're in a selection scenario\r\n            //this._teleportationAllowed = false;\r\n            if (hit.pickedMesh !== gazer._currentMeshSelected) {\r\n                if (this.meshSelectionPredicate(hit.pickedMesh)) {\r\n                    this.onNewMeshPicked.notifyObservers(hit);\r\n                    gazer._currentMeshSelected = hit.pickedMesh;\r\n                    if (hit.pickedMesh.isPickable && hit.pickedMesh.actionManager) {\r\n                        this.changeGazeColor(this._pickedGazeColor);\r\n                        this.changeLaserColor(this._pickedLaserColor);\r\n                        gazer._isActionableMesh = true;\r\n                    } else {\r\n                        this.changeGazeColor(this._gazeColor);\r\n                        this.changeLaserColor(this._laserColor);\r\n                        gazer._isActionableMesh = false;\r\n                    }\r\n                    try {\r\n                        this.onNewMeshSelected.notifyObservers(hit.pickedMesh);\r\n                        const gazerAsControllerGazer = gazer as VRExperienceHelperControllerGazer;\r\n                        if (gazerAsControllerGazer.webVRController) {\r\n                            this.onMeshSelectedWithController.notifyObservers({ mesh: hit.pickedMesh, controller: gazerAsControllerGazer.webVRController });\r\n                        }\r\n                    } catch (err) {\r\n                        Logger.Warn(\"Error while raising onNewMeshSelected or onMeshSelectedWithController: \" + err);\r\n                    }\r\n                } else {\r\n                    this._notifySelectedMeshUnselected(gazer._currentMeshSelected);\r\n                    gazer._currentMeshSelected = null;\r\n                    this.changeGazeColor(this._gazeColor);\r\n                    this.changeLaserColor(this._laserColor);\r\n                }\r\n            }\r\n        } else {\r\n            this._notifySelectedMeshUnselected(gazer._currentMeshSelected);\r\n            gazer._currentMeshSelected = null;\r\n            //this._teleportationAllowed = false;\r\n            this.changeGazeColor(this._gazeColor);\r\n            this.changeLaserColor(this._laserColor);\r\n        }\r\n    }\r\n\r\n    private _notifySelectedMeshUnselected(mesh: Nullable<AbstractMesh>) {\r\n        if (mesh) {\r\n            this.onSelectedMeshUnselected.notifyObservers(mesh);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Permanently set new colors for the laser pointer\r\n     * @param color the new laser color\r\n     * @param pickedColor the new laser color when picked mesh detected\r\n     */\r\n    public setLaserColor(color: Color3, pickedColor: Color3 = this._pickedLaserColor) {\r\n        this._laserColor = color;\r\n        this._pickedLaserColor = pickedColor;\r\n    }\r\n\r\n    /**\r\n     * Set lighting enabled / disabled on the laser pointer of both controllers\r\n     * @param enabled should the lighting be enabled on the laser pointer\r\n     */\r\n    public setLaserLightingState(enabled: boolean = true) {\r\n        if (this._leftController) {\r\n            this._leftController._setLaserPointerLightingDisabled(!enabled);\r\n        }\r\n        if (this._rightController) {\r\n            this._rightController._setLaserPointerLightingDisabled(!enabled);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Permanently set new colors for the gaze pointer\r\n     * @param color the new gaze color\r\n     * @param pickedColor the new gaze color when picked mesh detected\r\n     */\r\n    public setGazeColor(color: Color3, pickedColor: Color3 = this._pickedGazeColor) {\r\n        this._gazeColor = color;\r\n        this._pickedGazeColor = pickedColor;\r\n    }\r\n\r\n    /**\r\n     * Sets the color of the laser ray from the vr controllers.\r\n     * @param color new color for the ray.\r\n     */\r\n    public changeLaserColor(color: Color3) {\r\n        if (!this.updateControllerLaserColor) {\r\n            return;\r\n        }\r\n\r\n        if (this._leftController) {\r\n            this._leftController._setLaserPointerColor(color);\r\n        }\r\n        if (this._rightController) {\r\n            this._rightController._setLaserPointerColor(color);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the color of the ray from the vr headsets gaze.\r\n     * @param color new color for the ray.\r\n     */\r\n    public changeGazeColor(color: Color3) {\r\n        if (!this.updateGazeTrackerColor) {\r\n            return;\r\n        }\r\n        if (!(<StandardMaterial>this._cameraGazer._gazeTracker.material)) {\r\n            return;\r\n        }\r\n        (<StandardMaterial>this._cameraGazer._gazeTracker.material).emissiveColor = color;\r\n        if (this._leftController) {\r\n            (<StandardMaterial>this._leftController._gazeTracker.material).emissiveColor = color;\r\n        }\r\n        if (this._rightController) {\r\n            (<StandardMaterial>this._rightController._gazeTracker.material).emissiveColor = color;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Exits VR and disposes of the vr experience helper\r\n     */\r\n    public dispose() {\r\n        if (this.isInVRMode) {\r\n            this.exitVR();\r\n        }\r\n\r\n        if (this._postProcessMove) {\r\n            this._postProcessMove.dispose();\r\n        }\r\n\r\n        if (this._webVRCamera) {\r\n            this._webVRCamera.dispose();\r\n        }\r\n        if (this._vrDeviceOrientationCamera) {\r\n            this._vrDeviceOrientationCamera.dispose();\r\n        }\r\n        if (!this._useCustomVRButton && this._btnVR && this._btnVR.parentNode) {\r\n            document.body.removeChild(this._btnVR);\r\n        }\r\n\r\n        if (this._deviceOrientationCamera && this._scene.activeCamera != this._deviceOrientationCamera) {\r\n            this._deviceOrientationCamera.dispose();\r\n        }\r\n\r\n        if (this._cameraGazer) {\r\n            this._cameraGazer.dispose();\r\n        }\r\n        if (this._leftController) {\r\n            this._leftController.dispose();\r\n        }\r\n        if (this._rightController) {\r\n            this._rightController.dispose();\r\n        }\r\n\r\n        if (this._teleportationTarget) {\r\n            this._teleportationTarget.dispose();\r\n        }\r\n\r\n        if (this.xr) {\r\n            this.xr.dispose();\r\n        }\r\n\r\n        this._floorMeshesCollection = [];\r\n\r\n        document.removeEventListener(\"keydown\", this._onKeyDown);\r\n        window.removeEventListener(\"vrdisplaypresentchange\", this._onVrDisplayPresentChangeBind);\r\n\r\n        window.removeEventListener(\"resize\", this._onResize);\r\n        document.removeEventListener(\"fullscreenchange\", this._onFullscreenChange);\r\n        document.removeEventListener(\"mozfullscreenchange\", this._onFullscreenChange);\r\n        document.removeEventListener(\"webkitfullscreenchange\", this._onFullscreenChange);\r\n        document.removeEventListener(\"msfullscreenchange\", this._onFullscreenChange);\r\n        (<any>document).onmsfullscreenchange = null;\r\n\r\n        this._scene.getEngine().onVRDisplayChangedObservable.removeCallback(this._onVRDisplayChangedBind);\r\n        this._scene.getEngine().onVRRequestPresentStart.removeCallback(this._onVRRequestPresentStart);\r\n        this._scene.getEngine().onVRRequestPresentComplete.removeCallback(this._onVRRequestPresentComplete);\r\n\r\n        this._scene.gamepadManager.onGamepadConnectedObservable.removeCallback(this._onNewGamepadConnected);\r\n        this._scene.gamepadManager.onGamepadDisconnectedObservable.removeCallback(this._onNewGamepadDisconnected);\r\n\r\n        this._scene.unregisterBeforeRender(this._beforeRender);\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the VRExperienceHelper class\r\n     * @returns \"VRExperienceHelper\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"VRExperienceHelper\";\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}