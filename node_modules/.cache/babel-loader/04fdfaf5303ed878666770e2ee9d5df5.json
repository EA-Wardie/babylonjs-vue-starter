{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport { __decorate } from \"tslib\";\nimport { Tools } from \"../../Misc/tools.js\";\nimport { serialize } from \"../../Misc/decorators.js\";\n/**\n * PostProcessRenderPipeline\n * @see https://doc.babylonjs.com/how_to/how_to_use_postprocessrenderpipeline\n */\n\nvar PostProcessRenderPipeline =\n/** @class */\nfunction () {\n  /**\n   * Initializes a PostProcessRenderPipeline\n   * @param _engine engine to add the pipeline to\n   * @param name name of the pipeline\n   */\n  function PostProcessRenderPipeline(_engine, name) {\n    this._engine = _engine;\n    this._name = name;\n    this._renderEffects = {};\n    this._renderEffectsForIsolatedPass = new Array();\n    this._cameras = [];\n  }\n\n  Object.defineProperty(PostProcessRenderPipeline.prototype, \"name\", {\n    /**\n     * Gets pipeline name\n     */\n    get: function get() {\n      return this._name;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PostProcessRenderPipeline.prototype, \"cameras\", {\n    /** Gets the list of attached cameras */\n    get: function get() {\n      return this._cameras;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Gets the class name\n   * @returns \"PostProcessRenderPipeline\"\n   */\n\n  PostProcessRenderPipeline.prototype.getClassName = function () {\n    return \"PostProcessRenderPipeline\";\n  };\n\n  Object.defineProperty(PostProcessRenderPipeline.prototype, \"isSupported\", {\n    /**\n     * If all the render effects in the pipeline are supported\n     */\n    get: function get() {\n      for (var renderEffectName in this._renderEffects) {\n        if (Object.prototype.hasOwnProperty.call(this._renderEffects, renderEffectName)) {\n          if (!this._renderEffects[renderEffectName].isSupported) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Adds an effect to the pipeline\n   * @param renderEffect the effect to add\n   */\n\n  PostProcessRenderPipeline.prototype.addEffect = function (renderEffect) {\n    this._renderEffects[renderEffect._name] = renderEffect;\n  }; // private\n\n  /** @hidden */\n\n\n  PostProcessRenderPipeline.prototype._rebuild = function () {};\n  /**\n   * @param renderEffectName\n   * @param cameras\n   * @hidden\n   */\n\n\n  PostProcessRenderPipeline.prototype._enableEffect = function (renderEffectName, cameras) {\n    var renderEffects = this._renderEffects[renderEffectName];\n\n    if (!renderEffects) {\n      return;\n    }\n\n    renderEffects._enable(Tools.MakeArray(cameras || this._cameras));\n  };\n  /**\n   * @param renderEffectName\n   * @param cameras\n   * @hidden\n   */\n\n\n  PostProcessRenderPipeline.prototype._disableEffect = function (renderEffectName, cameras) {\n    var renderEffects = this._renderEffects[renderEffectName];\n\n    if (!renderEffects) {\n      return;\n    }\n\n    renderEffects._disable(Tools.MakeArray(cameras || this._cameras));\n  };\n  /**\n   * @param cameras\n   * @param unique\n   * @hidden\n   */\n\n\n  PostProcessRenderPipeline.prototype._attachCameras = function (cameras, unique) {\n    var cams = Tools.MakeArray(cameras || this._cameras);\n\n    if (!cams) {\n      return;\n    }\n\n    var indicesToDelete = [];\n    var i;\n\n    for (i = 0; i < cams.length; i++) {\n      var camera = cams[i];\n\n      if (!camera) {\n        continue;\n      }\n\n      var cameraName = camera.name;\n\n      if (this._cameras.indexOf(camera) === -1) {\n        this._cameras[cameraName] = camera;\n      } else if (unique) {\n        indicesToDelete.push(i);\n      }\n    }\n\n    for (i = 0; i < indicesToDelete.length; i++) {\n      cams.splice(indicesToDelete[i], 1);\n    }\n\n    for (var renderEffectName in this._renderEffects) {\n      if (Object.prototype.hasOwnProperty.call(this._renderEffects, renderEffectName)) {\n        this._renderEffects[renderEffectName]._attachCameras(cams);\n      }\n    }\n  };\n  /**\n   * @param cameras\n   * @hidden\n   */\n\n\n  PostProcessRenderPipeline.prototype._detachCameras = function (cameras) {\n    var cams = Tools.MakeArray(cameras || this._cameras);\n\n    if (!cams) {\n      return;\n    }\n\n    for (var renderEffectName in this._renderEffects) {\n      if (Object.prototype.hasOwnProperty.call(this._renderEffects, renderEffectName)) {\n        this._renderEffects[renderEffectName]._detachCameras(cams);\n      }\n    }\n\n    for (var i = 0; i < cams.length; i++) {\n      this._cameras.splice(this._cameras.indexOf(cams[i]), 1);\n    }\n  };\n  /** @hidden */\n\n\n  PostProcessRenderPipeline.prototype._update = function () {\n    for (var renderEffectName in this._renderEffects) {\n      if (Object.prototype.hasOwnProperty.call(this._renderEffects, renderEffectName)) {\n        this._renderEffects[renderEffectName]._update();\n      }\n    }\n\n    for (var i = 0; i < this._cameras.length; i++) {\n      if (!this._cameras[i]) {\n        continue;\n      }\n\n      var cameraName = this._cameras[i].name;\n\n      if (this._renderEffectsForIsolatedPass[cameraName]) {\n        this._renderEffectsForIsolatedPass[cameraName]._update();\n      }\n    }\n  };\n  /** @hidden */\n\n\n  PostProcessRenderPipeline.prototype._reset = function () {\n    this._renderEffects = {};\n    this._renderEffectsForIsolatedPass = new Array();\n  };\n\n  PostProcessRenderPipeline.prototype._enableMSAAOnFirstPostProcess = function (sampleCount) {\n    if (!this._engine._features.supportMSAA) {\n      return false;\n    } // Set samples of the very first post process to 4 to enable native anti-aliasing in browsers that support webGL 2.0 (See: https://github.com/BabylonJS/Babylon.js/issues/3754)\n\n\n    var effectKeys = Object.keys(this._renderEffects);\n\n    if (effectKeys.length > 0) {\n      var postProcesses = this._renderEffects[effectKeys[0]].getPostProcesses();\n\n      if (postProcesses) {\n        postProcesses[0].samples = sampleCount;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Sets the required values to the prepass renderer.\n   * @param prePassRenderer defines the prepass renderer to setup.\n   * @returns true if the pre pass is needed.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  PostProcessRenderPipeline.prototype.setPrePassRenderer = function (prePassRenderer) {\n    // Do Nothing by default\n    return false;\n  };\n  /**\n   * Disposes of the pipeline\n   */\n\n\n  PostProcessRenderPipeline.prototype.dispose = function () {// Must be implemented by children\n  };\n\n  __decorate([serialize()], PostProcessRenderPipeline.prototype, \"_name\", void 0);\n\n  return PostProcessRenderPipeline;\n}();\n\nexport { PostProcessRenderPipeline };","map":{"version":3,"mappings":";;;;;;AACA,SAASA,KAAT,QAAsB,qBAAtB;AACA,SAASC,SAAT,QAA0B,0BAA1B;AAQA;;;;;AAIA;AAAA;AAAA;AA+BI;;;;;AAKA,qCAAoBC,OAApB,EAAqCC,IAArC,EAAiD;AAA7B;AAChB,SAAKC,KAAL,GAAaD,IAAb;AAEA,SAAKE,cAAL,GAAsB,EAAtB;AACA,SAAKC,6BAAL,GAAqC,IAAIC,KAAJ,EAArC;AAEA,SAAKC,QAAL,GAAgB,EAAhB;AACH;;AArBDC,wBAAWC,mCAAX,EAAW,MAAX,EAAe;AAHf;;;SAGA;AACI,aAAO,KAAKN,KAAZ;AACH,KAFc;qBAAA;;AAAA,GAAf;AAKAK,wBAAWC,mCAAX,EAAW,SAAX,EAAkB;AADlB;SACA;AACI,aAAO,KAAKF,QAAZ;AACH,KAFiB;qBAAA;;AAAA,GAAlB;AAkBA;;;;;AAIOE,qDAAP;AACI,WAAO,2BAAP;AACH,GAFM;;AAOPD,wBAAWC,mCAAX,EAAW,aAAX,EAAsB;AAHtB;;;SAGA;AACI,WAAK,IAAMC,gBAAX,IAA+B,KAAKN,cAApC,EAAoD;AAChD,YAAII,MAAM,CAACG,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC,KAAKT,cAA1C,EAA0DM,gBAA1D,CAAJ,EAAiF;AAC7E,cAAI,CAAC,KAAKN,cAAL,CAAoBM,gBAApB,EAAsCI,WAA3C,EAAwD;AACpD,mBAAO,KAAP;AACH;AACJ;AACJ;;AAED,aAAO,IAAP;AACH,KAVqB;qBAAA;;AAAA,GAAtB;AAYA;;;;;AAIOL,kDAAP,UAAiBM,YAAjB,EAAsD;AAC5C,SAAKX,cAAL,CAAqBW,YAAY,CAACZ,KAAlC,IAA2CY,YAA3C;AACT,GAFM,CAxEX,CA4EI;;AAEA;;;AACON,iDAAP,aAAoB,CAAb;AAMP;;;;;;;AAKOA,sDAAP,UAAqBC,gBAArB,EAA+CM,OAA/C,EAA2D;AACvD,QAAMC,aAAa,GAAkC,KAAKb,cAAL,CAAqBM,gBAArB,CAArD;;AAEA,QAAI,CAACO,aAAL,EAAoB;AAChB;AACH;;AAEDA,iBAAa,CAACC,OAAd,CAAsBnB,KAAK,CAACoB,SAAN,CAAgBH,OAAO,IAAI,KAAKT,QAAhC,CAAtB;AACH,GARM;AAcP;;;;;;;AAKOE,uDAAP,UAAsBC,gBAAtB,EAAgDM,OAAhD,EAA2E;AACvE,QAAMC,aAAa,GAAkC,KAAKb,cAAL,CAAqBM,gBAArB,CAArD;;AAEA,QAAI,CAACO,aAAL,EAAoB;AAChB;AACH;;AAEDA,iBAAa,CAACG,QAAd,CAAuBrB,KAAK,CAACoB,SAAN,CAAgBH,OAAO,IAAI,KAAKT,QAAhC,CAAvB;AACH,GARM;AAcP;;;;;;;AAKOE,uDAAP,UAAsBO,OAAtB,EAAoCK,MAApC,EAAmD;AAC/C,QAAMC,IAAI,GAAGvB,KAAK,CAACoB,SAAN,CAAgBH,OAAO,IAAI,KAAKT,QAAhC,CAAb;;AAEA,QAAI,CAACe,IAAL,EAAW;AACP;AACH;;AAED,QAAMC,eAAe,GAAG,EAAxB;AACA,QAAIC,CAAJ;;AACA,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGF,IAAI,CAACG,MAArB,EAA6BD,CAAC,EAA9B,EAAkC;AAC9B,UAAME,MAAM,GAAGJ,IAAI,CAACE,CAAD,CAAnB;;AACA,UAAI,CAACE,MAAL,EAAa;AACT;AACH;;AACD,UAAMC,UAAU,GAAGD,MAAM,CAACxB,IAA1B;;AAEA,UAAI,KAAKK,QAAL,CAAcqB,OAAd,CAAsBF,MAAtB,MAAkC,CAAC,CAAvC,EAA0C;AACtC,aAAKnB,QAAL,CAAcoB,UAAd,IAA4BD,MAA5B;AACH,OAFD,MAEO,IAAIL,MAAJ,EAAY;AACfE,uBAAe,CAACM,IAAhB,CAAqBL,CAArB;AACH;AACJ;;AAED,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,eAAe,CAACE,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzCF,UAAI,CAACQ,MAAL,CAAYP,eAAe,CAACC,CAAD,CAA3B,EAAgC,CAAhC;AACH;;AAED,SAAK,IAAMd,gBAAX,IAA+B,KAAKN,cAApC,EAAoD;AAChD,UAAII,MAAM,CAACG,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC,KAAKT,cAA1C,EAA0DM,gBAA1D,CAAJ,EAAiF;AAC7E,aAAKN,cAAL,CAAoBM,gBAApB,EAAsCqB,cAAtC,CAAqDT,IAArD;AACH;AACJ;AACJ,GAhCM;AAsCP;;;;;;AAIOb,uDAAP,UAAsBO,OAAtB,EAAkC;AAC9B,QAAMM,IAAI,GAAGvB,KAAK,CAACoB,SAAN,CAAgBH,OAAO,IAAI,KAAKT,QAAhC,CAAb;;AAEA,QAAI,CAACe,IAAL,EAAW;AACP;AACH;;AAED,SAAK,IAAMZ,gBAAX,IAA+B,KAAKN,cAApC,EAAoD;AAChD,UAAII,MAAM,CAACG,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC,KAAKT,cAA1C,EAA0DM,gBAA1D,CAAJ,EAAiF;AAC7E,aAAKN,cAAL,CAAoBM,gBAApB,EAAsCsB,cAAtC,CAAqDV,IAArD;AACH;AACJ;;AAED,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,WAAKjB,QAAL,CAAcuB,MAAd,CAAqB,KAAKvB,QAAL,CAAcqB,OAAd,CAAsBN,IAAI,CAACE,CAAD,CAA1B,CAArB,EAAqD,CAArD;AACH;AACJ,GAhBM;AAkBP;;;AACOf,gDAAP;AACI,SAAK,IAAMC,gBAAX,IAA+B,KAAKN,cAApC,EAAoD;AAChD,UAAII,MAAM,CAACG,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC,KAAKT,cAA1C,EAA0DM,gBAA1D,CAAJ,EAAiF;AAC7E,aAAKN,cAAL,CAAoBM,gBAApB,EAAsCuB,OAAtC;AACH;AACJ;;AAED,SAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKjB,QAAL,CAAckB,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3C,UAAI,CAAC,KAAKjB,QAAL,CAAciB,CAAd,CAAL,EAAuB;AACnB;AACH;;AACD,UAAMG,UAAU,GAAG,KAAKpB,QAAL,CAAciB,CAAd,EAAiBtB,IAApC;;AACA,UAAU,KAAKG,6BAAL,CAAoCsB,UAApC,CAAV,EAA2D;AACjD,aAAKtB,6BAAL,CAAoCsB,UAApC,EAAgDM,OAAhD;AACT;AACJ;AACJ,GAhBM;AAkBP;;;AACOxB,+CAAP;AACI,SAAKL,cAAL,GAAsB,EAAtB;AACA,SAAKC,6BAAL,GAAqC,IAAIC,KAAJ,EAArC;AACH,GAHM;;AAKGG,sEAAV,UAAwCyB,WAAxC,EAA2D;AACvD,QAAI,CAAC,KAAKjC,OAAL,CAAakC,SAAb,CAAuBC,WAA5B,EAAyC;AACrC,aAAO,KAAP;AACH,KAHsD,CAKvD;;;AACA,QAAMC,UAAU,GAAG7B,MAAM,CAAC8B,IAAP,CAAY,KAAKlC,cAAjB,CAAnB;;AACA,QAAIiC,UAAU,CAACZ,MAAX,GAAoB,CAAxB,EAA2B;AACvB,UAAMc,aAAa,GAAG,KAAKnC,cAAL,CAAoBiC,UAAU,CAAC,CAAD,CAA9B,EAAmCG,gBAAnC,EAAtB;;AACA,UAAID,aAAJ,EAAmB;AACfA,qBAAa,CAAC,CAAD,CAAb,CAAiBE,OAAjB,GAA2BP,WAA3B;AACH;AACJ;;AACD,WAAO,IAAP;AACH,GAdS;AAgBV;;;;;AAKA;;;AACOzB,2DAAP,UAA0BiC,eAA1B,EAA0D;AACtD;AACA,WAAO,KAAP;AACH,GAHM;AAKP;;;;;AAGOjC,gDAAP,aACI;AACH,GAFM;;AAlOPkC,cADC3C,SAAS,EACV;;AAqOJ;AAAC,CAtPD;;SAAaS","names":["Tools","serialize","_engine","name","_name","_renderEffects","_renderEffectsForIsolatedPass","Array","_cameras","Object","PostProcessRenderPipeline","renderEffectName","prototype","hasOwnProperty","call","isSupported","renderEffect","cameras","renderEffects","_enable","MakeArray","_disable","unique","cams","indicesToDelete","i","length","camera","cameraName","indexOf","push","splice","_attachCameras","_detachCameras","_update","sampleCount","_features","supportMSAA","effectKeys","keys","postProcesses","getPostProcesses","samples","prePassRenderer","__decorate"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/PostProcesses/RenderPipeline/postProcessRenderPipeline.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport { Tools } from \"../../Misc/tools\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport type { Camera } from \"../../Cameras/camera\";\r\nimport type { Engine } from \"../../Engines/engine\";\r\nimport type { PostProcessRenderEffect } from \"./postProcessRenderEffect\";\r\nimport type { IInspectable } from \"../../Misc/iInspectable\";\r\n\r\ndeclare type PrePassRenderer = import(\"../../Rendering/prePassRenderer\").PrePassRenderer;\r\n\r\n/**\r\n * PostProcessRenderPipeline\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_postprocessrenderpipeline\r\n */\r\nexport class PostProcessRenderPipeline {\r\n    private _renderEffects: { [key: string]: PostProcessRenderEffect };\r\n    private _renderEffectsForIsolatedPass: PostProcessRenderEffect[];\r\n\r\n    /**\r\n     * List of inspectable custom properties (used by the Inspector)\r\n     * @see https://doc.babylonjs.com/how_to/debug_layer#extensibility\r\n     */\r\n    public inspectableCustomProperties: IInspectable[];\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    protected _cameras: Camera[];\r\n\r\n    /** @hidden */\r\n    @serialize()\r\n    public _name: string;\r\n\r\n    /**\r\n     * Gets pipeline name\r\n     */\r\n    public get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    /** Gets the list of attached cameras */\r\n    public get cameras() {\r\n        return this._cameras;\r\n    }\r\n\r\n    /**\r\n     * Initializes a PostProcessRenderPipeline\r\n     * @param _engine engine to add the pipeline to\r\n     * @param name name of the pipeline\r\n     */\r\n    constructor(private _engine: Engine, name: string) {\r\n        this._name = name;\r\n\r\n        this._renderEffects = {};\r\n        this._renderEffectsForIsolatedPass = new Array<PostProcessRenderEffect>();\r\n\r\n        this._cameras = [];\r\n    }\r\n\r\n    /**\r\n     * Gets the class name\r\n     * @returns \"PostProcessRenderPipeline\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"PostProcessRenderPipeline\";\r\n    }\r\n\r\n    /**\r\n     * If all the render effects in the pipeline are supported\r\n     */\r\n    public get isSupported(): boolean {\r\n        for (const renderEffectName in this._renderEffects) {\r\n            if (Object.prototype.hasOwnProperty.call(this._renderEffects, renderEffectName)) {\r\n                if (!this._renderEffects[renderEffectName].isSupported) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Adds an effect to the pipeline\r\n     * @param renderEffect the effect to add\r\n     */\r\n    public addEffect(renderEffect: PostProcessRenderEffect): void {\r\n        (<any>this._renderEffects)[renderEffect._name] = renderEffect;\r\n    }\r\n\r\n    // private\r\n\r\n    /** @hidden */\r\n    public _rebuild() {}\r\n\r\n    /** @hidden */\r\n    public _enableEffect(renderEffectName: string, cameras: Camera): void;\r\n    /** @hidden */\r\n    public _enableEffect(renderEffectName: string, cameras: Camera[]): void;\r\n    /**\r\n     * @param renderEffectName\r\n     * @param cameras\r\n     * @hidden\r\n     */\r\n    public _enableEffect(renderEffectName: string, cameras: any): void {\r\n        const renderEffects: PostProcessRenderEffect = (<any>this._renderEffects)[renderEffectName];\r\n\r\n        if (!renderEffects) {\r\n            return;\r\n        }\r\n\r\n        renderEffects._enable(Tools.MakeArray(cameras || this._cameras));\r\n    }\r\n\r\n    /** @hidden */\r\n    public _disableEffect(renderEffectName: string, cameras: Nullable<Camera[]>): void;\r\n    /** @hidden */\r\n    public _disableEffect(renderEffectName: string, cameras: Nullable<Camera[]>): void;\r\n    /**\r\n     * @param renderEffectName\r\n     * @param cameras\r\n     * @hidden\r\n     */\r\n    public _disableEffect(renderEffectName: string, cameras: Nullable<Camera[]>): void {\r\n        const renderEffects: PostProcessRenderEffect = (<any>this._renderEffects)[renderEffectName];\r\n\r\n        if (!renderEffects) {\r\n            return;\r\n        }\r\n\r\n        renderEffects._disable(Tools.MakeArray(cameras || this._cameras));\r\n    }\r\n\r\n    /** @hidden */\r\n    public _attachCameras(cameras: Camera, unique: boolean): void;\r\n    /** @hidden */\r\n    public _attachCameras(cameras: Camera[], unique: boolean): void;\r\n    /**\r\n     * @param cameras\r\n     * @param unique\r\n     * @hidden\r\n     */\r\n    public _attachCameras(cameras: any, unique: boolean): void {\r\n        const cams = Tools.MakeArray(cameras || this._cameras);\r\n\r\n        if (!cams) {\r\n            return;\r\n        }\r\n\r\n        const indicesToDelete = [];\r\n        let i: number;\r\n        for (i = 0; i < cams.length; i++) {\r\n            const camera = cams[i];\r\n            if (!camera) {\r\n                continue;\r\n            }\r\n            const cameraName = camera.name;\r\n\r\n            if (this._cameras.indexOf(camera) === -1) {\r\n                this._cameras[cameraName] = camera;\r\n            } else if (unique) {\r\n                indicesToDelete.push(i);\r\n            }\r\n        }\r\n\r\n        for (i = 0; i < indicesToDelete.length; i++) {\r\n            cams.splice(indicesToDelete[i], 1);\r\n        }\r\n\r\n        for (const renderEffectName in this._renderEffects) {\r\n            if (Object.prototype.hasOwnProperty.call(this._renderEffects, renderEffectName)) {\r\n                this._renderEffects[renderEffectName]._attachCameras(cams);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _detachCameras(cameras: Camera): void;\r\n    /** @hidden */\r\n    public _detachCameras(cameras: Nullable<Camera[]>): void;\r\n    /**\r\n     * @param cameras\r\n     * @hidden\r\n     */\r\n    public _detachCameras(cameras: any): void {\r\n        const cams = Tools.MakeArray(cameras || this._cameras);\r\n\r\n        if (!cams) {\r\n            return;\r\n        }\r\n\r\n        for (const renderEffectName in this._renderEffects) {\r\n            if (Object.prototype.hasOwnProperty.call(this._renderEffects, renderEffectName)) {\r\n                this._renderEffects[renderEffectName]._detachCameras(cams);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < cams.length; i++) {\r\n            this._cameras.splice(this._cameras.indexOf(cams[i]), 1);\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _update(): void {\r\n        for (const renderEffectName in this._renderEffects) {\r\n            if (Object.prototype.hasOwnProperty.call(this._renderEffects, renderEffectName)) {\r\n                this._renderEffects[renderEffectName]._update();\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this._cameras.length; i++) {\r\n            if (!this._cameras[i]) {\r\n                continue;\r\n            }\r\n            const cameraName = this._cameras[i].name;\r\n            if ((<any>this._renderEffectsForIsolatedPass)[cameraName]) {\r\n                (<any>this._renderEffectsForIsolatedPass)[cameraName]._update();\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden */\r\n    public _reset(): void {\r\n        this._renderEffects = {};\r\n        this._renderEffectsForIsolatedPass = new Array<PostProcessRenderEffect>();\r\n    }\r\n\r\n    protected _enableMSAAOnFirstPostProcess(sampleCount: number): boolean {\r\n        if (!this._engine._features.supportMSAA) {\r\n            return false;\r\n        }\r\n\r\n        // Set samples of the very first post process to 4 to enable native anti-aliasing in browsers that support webGL 2.0 (See: https://github.com/BabylonJS/Babylon.js/issues/3754)\r\n        const effectKeys = Object.keys(this._renderEffects);\r\n        if (effectKeys.length > 0) {\r\n            const postProcesses = this._renderEffects[effectKeys[0]].getPostProcesses();\r\n            if (postProcesses) {\r\n                postProcesses[0].samples = sampleCount;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Sets the required values to the prepass renderer.\r\n     * @param prePassRenderer defines the prepass renderer to setup.\r\n     * @returns true if the pre pass is needed.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public setPrePassRenderer(prePassRenderer: PrePassRenderer): boolean {\r\n        // Do Nothing by default\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Disposes of the pipeline\r\n     */\r\n    public dispose() {\r\n        // Must be implemented by children\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}