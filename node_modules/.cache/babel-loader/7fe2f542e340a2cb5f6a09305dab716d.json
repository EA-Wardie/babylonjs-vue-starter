{"ast":null,"code":"/*\n * A speed-improved perlin and simplex noise algorithms for 2D.\n *\n * Based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n * Converted to Javascript by Joseph Gentle.\n *\n * Version 2012-03-09\n *\n * This code was placed in the public domain by its original author,\n * Stefan Gustavson. You may use it as you see fit, but\n * attribution is appreciated.\n *\n */\nvar noise;\n\n(function (global) {\n  var module = global.noise = {};\n\n  function Grad(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  Grad.prototype.dot2 = function (x, y) {\n    return this.x * x + this.y * y;\n  };\n\n  Grad.prototype.dot3 = function (x, y, z) {\n    return this.x * x + this.y * y + this.z * z;\n  }; // To remove the need for index wrapping, double the permutation table length\n\n\n  var grad3 = [new Grad(1, 1, 0), new Grad(-1, 1, 0), new Grad(1, -1, 0), new Grad(-1, -1, 0), new Grad(1, 0, 1), new Grad(-1, 0, 1), new Grad(1, 0, -1), new Grad(-1, 0, -1), new Grad(0, 1, 1), new Grad(0, -1, 1), new Grad(0, 1, -1), new Grad(0, -1, -1)],\n      p = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180],\n      perm = new Array(512),\n      gradP = new Array(512); // This isn't a very good seeding function, but it works ok. It supports 2^16\n  // different seed values. Write something better if you need more seeds.\n\n  module.seed = function (seed) {\n    if (seed > 0 && seed < 1) {\n      // Scale the seed out\n      seed *= 65536;\n    }\n\n    seed = Math.floor(seed);\n\n    if (seed < 256) {\n      seed |= seed << 8;\n    }\n\n    for (var i = 0; i < 256; i++) {\n      var v = void 0;\n\n      if (i & 1) {\n        v = p[i] ^ seed & 255;\n      } else {\n        v = p[i] ^ seed >> 8 & 255;\n      }\n\n      perm[i] = perm[i + 256] = v;\n      gradP[i] = gradP[i + 256] = grad3[v % 12];\n    }\n  };\n\n  module.seed(0);\n  /*\n  for(var i=0; i<256; i++) {\n    perm[i] = perm[i + 256] = p[i];\n    gradP[i] = gradP[i + 256] = grad3[perm[i] % 12];\n  }*/\n  // Skewing and unskewing factors for 2, 3, and 4 dimensions\n\n  var F2 = 0.5 * (Math.sqrt(3) - 1),\n      G2 = (3 - Math.sqrt(3)) / 6,\n      F3 = 1 / 3,\n      G3 = 1 / 6; // 2D simplex noise\n\n  module.simplex2 = function (xin, yin) {\n    // Noise contributions from the three corners\n    // Skew the input space to determine which simplex cell we're in\n    // Hairy factor for 2D\n    // The x,y distances from the cell origin, unskewed.\n    // For the 2D case, the simplex shape is an equilateral triangle.\n    // Determine which simplex we are in.\n    var n0,\n        n1,\n        n2,\n        s = (xin + yin) * F2,\n        i = Math.floor(xin + s),\n        j = Math.floor(yin + s),\n        t = (i + j) * G2,\n        x0 = xin - i + t,\n        y0 = yin - j + t,\n        i1,\n        j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n    if (x0 > y0) {\n      // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      i1 = 1;\n      j1 = 0;\n    } else {\n      // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      i1 = 0;\n      j1 = 1;\n    } // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n    // c = (3-sqrt(3))/6\n    // Offsets for middle corner in (x,y) unskewed coords\n    // Offsets for last corner in (x,y) unskewed coords\n\n\n    var x1 = x0 - i1 + G2,\n        y1 = y0 - j1 + G2,\n        x2 = x0 - 1 + 2 * G2,\n        y2 = y0 - 1 + 2 * G2; // Work out the hashed gradient indices of the three simplex corners\n\n    i &= 255;\n    j &= 255; // Calculate the contribution from the three corners\n\n    var gi0 = gradP[i + perm[j]],\n        gi1 = gradP[i + i1 + perm[j + j1]],\n        gi2 = gradP[i + 1 + perm[j + 1]],\n        t0 = 0.5 - x0 * x0 - y0 * y0;\n\n    if (t0 < 0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * gi0.dot2(x0, y0); // (x,y) of grad3 used for 2D gradient\n    }\n\n    var t1 = 0.5 - x1 * x1 - y1 * y1;\n\n    if (t1 < 0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * gi1.dot2(x1, y1);\n    }\n\n    var t2 = 0.5 - x2 * x2 - y2 * y2;\n\n    if (t2 < 0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * gi2.dot2(x2, y2);\n    } // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n\n\n    return 70 * (n0 + n1 + n2);\n  }; // 3D simplex noise\n\n\n  module.simplex3 = function (xin, yin, zin) {\n    var n0, n1, n2, n3; // Noise contributions from the four corners\n    // Skew the input space to determine which simplex cell we're in\n    // Hairy factor for 2D\n    // The x,y distances from the cell origin, unskewed.\n    // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n    // Determine which simplex we are in.\n\n    var s = (xin + yin + zin) * F3,\n        i = Math.floor(xin + s),\n        j = Math.floor(yin + s),\n        k = Math.floor(zin + s),\n        t = (i + j + k) * G3,\n        x0 = xin - i + t,\n        y0 = yin - j + t,\n        z0 = zin - k + t,\n        i1,\n        j1,\n        k1,\n        i2,\n        j2,\n        k2; // Offsets for third corner of simplex in (i,j,k) coords\n    // Offsets for second corner of simplex in (i,j,k) coords\n\n    if (x0 >= y0) {\n      if (y0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      } else if (x0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n      } else {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n      }\n    } else {\n      if (y0 < z0) {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1;\n      } else if (x0 < z0) {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1;\n      } else {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      }\n    } // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n    // c = 1/6.\n    // Offsets for second corner\n    // Offsets for third corner\n    // Offsets for fourth corner\n\n\n    var x1 = x0 - i1 + G3,\n        y1 = y0 - j1 + G3,\n        z1 = z0 - k1 + G3,\n        x2 = x0 - i2 + 2 * G3,\n        y2 = y0 - j2 + 2 * G3,\n        z2 = z0 - k2 + 2 * G3,\n        x3 = x0 - 1 + 3 * G3,\n        y3 = y0 - 1 + 3 * G3,\n        z3 = z0 - 1 + 3 * G3; // Work out the hashed gradient indices of the four simplex corners\n\n    i &= 255;\n    j &= 255;\n    k &= 255; // Calculate the contribution from the four corners\n\n    var gi0 = gradP[i + perm[j + perm[k]]],\n        gi1 = gradP[i + i1 + perm[j + j1 + perm[k + k1]]],\n        gi2 = gradP[i + i2 + perm[j + j2 + perm[k + k2]]],\n        gi3 = gradP[i + 1 + perm[j + 1 + perm[k + 1]]],\n        t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\n    if (t0 < 0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * gi0.dot3(x0, y0, z0); // (x,y) of grad3 used for 2D gradient\n    }\n\n    var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\n    if (t1 < 0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * gi1.dot3(x1, y1, z1);\n    }\n\n    var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\n    if (t2 < 0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * gi2.dot3(x2, y2, z2);\n    }\n\n    var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\n    if (t3 < 0) {\n      n3 = 0;\n    } else {\n      t3 *= t3;\n      n3 = t3 * t3 * gi3.dot3(x3, y3, z3);\n    } // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n\n\n    return 32 * (n0 + n1 + n2 + n3);\n  }; // ##### Perlin noise stuff\n\n\n  function fade(t) {\n    return t * t * t * (t * (t * 6 - 15) + 10);\n  }\n\n  function lerp(a, b, t) {\n    return (1 - t) * a + t * b;\n  } // 2D Perlin Noise\n\n\n  module.perlin2 = function (x, y) {\n    // Find unit grid cell containing point\n    var X = Math.floor(x),\n        Y = Math.floor(y); // Get relative xy coordinates of point within that cell\n\n    x = x - X;\n    y = y - Y; // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n\n    X = X & 255;\n    Y = Y & 255; // Calculate noise contributions from each of the four corners\n    // Compute the fade curve value for x\n\n    var n00 = gradP[X + perm[Y]].dot2(x, y),\n        n01 = gradP[X + perm[Y + 1]].dot2(x, y - 1),\n        n10 = gradP[X + 1 + perm[Y]].dot2(x - 1, y),\n        n11 = gradP[X + 1 + perm[Y + 1]].dot2(x - 1, y - 1),\n        u = fade(x); // Interpolate the four results\n\n    return lerp(lerp(n00, n10, u), lerp(n01, n11, u), fade(y));\n  }; // 3D Perlin Noise\n\n\n  module.perlin3 = function (x, y, z) {\n    // Find unit grid cell containing point\n    var X = Math.floor(x),\n        Y = Math.floor(y),\n        Z = Math.floor(z); // Get relative xyz coordinates of point within that cell\n\n    x = x - X;\n    y = y - Y;\n    z = z - Z; // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n\n    X = X & 255;\n    Y = Y & 255;\n    Z = Z & 255; // Calculate noise contributions from each of the eight corners\n    // Compute the fade curve value for x, y, z\n\n    var n000 = gradP[X + perm[Y + perm[Z]]].dot3(x, y, z),\n        n001 = gradP[X + perm[Y + perm[Z + 1]]].dot3(x, y, z - 1),\n        n010 = gradP[X + perm[Y + 1 + perm[Z]]].dot3(x, y - 1, z),\n        n011 = gradP[X + perm[Y + 1 + perm[Z + 1]]].dot3(x, y - 1, z - 1),\n        n100 = gradP[X + 1 + perm[Y + perm[Z]]].dot3(x - 1, y, z),\n        n101 = gradP[X + 1 + perm[Y + perm[Z + 1]]].dot3(x - 1, y, z - 1),\n        n110 = gradP[X + 1 + perm[Y + 1 + perm[Z]]].dot3(x - 1, y - 1, z),\n        n111 = gradP[X + 1 + perm[Y + 1 + perm[Z + 1]]].dot3(x - 1, y - 1, z - 1),\n        u = fade(x),\n        v = fade(y),\n        w = fade(z); // Interpolate\n\n    return lerp(lerp(lerp(n000, n100, u), lerp(n001, n101, u), w), lerp(lerp(n010, n110, u), lerp(n011, n111, u), w), v);\n  };\n})(this);","map":{"version":3,"sources":["/home/ea/Development/Babylon/red/src/tools/noise.js"],"names":["noise","global","module","Grad","x","y","z","prototype","dot2","dot3","grad3","p","perm","Array","gradP","seed","Math","floor","i","v","F2","sqrt","G2","F3","G3","simplex2","xin","yin","n0","n1","n2","s","j","t","x0","y0","i1","j1","x1","y1","x2","y2","gi0","gi1","gi2","t0","t1","t2","simplex3","zin","n3","k","z0","k1","i2","j2","k2","z1","z2","x3","y3","z3","gi3","t3","fade","lerp","a","b","perlin2","X","Y","n00","n01","n10","n11","u","perlin3","Z","n000","n001","n010","n011","n100","n101","n110","n111","w"],"mappings":"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","sourcesContent":["/*\n * A speed-improved perlin and simplex noise algorithms for 2D.\n *\n * Based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n * Converted to Javascript by Joseph Gentle.\n *\n * Version 2012-03-09\n *\n * This code was placed in the public domain by its original author,\n * Stefan Gustavson. You may use it as you see fit, but\n * attribution is appreciated.\n *\n */\n\nlet noise;\n(function(global){\n    const module = global.noise = {};\n\n    function Grad(x, y, z) {\n        this.x = x; this.y = y; this.z = z;\n    }\n\n    Grad.prototype.dot2 = function(x, y) {\n        return this.x*x + this.y*y;\n    };\n\n    Grad.prototype.dot3 = function(x, y, z) {\n        return this.x*x + this.y*y + this.z*z;\n    };\n    // To remove the need for index wrapping, double the permutation table length\n    const grad3 = [new Grad(1, 1, 0), new Grad(-1, 1, 0), new Grad(1, -1, 0), new Grad(-1, -1, 0),\n            new Grad(1, 0, 1), new Grad(-1, 0, 1), new Grad(1, 0, -1), new Grad(-1, 0, -1),\n            new Grad(0, 1, 1), new Grad(0, -1, 1), new Grad(0, 1, -1), new Grad(0, -1, -1)], p = [151, 160, 137, 91, 90, 15,\n            131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n            190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n            88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n            77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n            102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n            135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n            5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n            223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n            129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n            251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n            49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n            138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180],\n        perm = new Array(512), gradP = new Array(512);\n\n    // This isn't a very good seeding function, but it works ok. It supports 2^16\n    // different seed values. Write something better if you need more seeds.\n    module.seed = function(seed) {\n        if(seed > 0 && seed < 1) {\n            // Scale the seed out\n            seed *= 65536;\n        }\n\n        seed = Math.floor(seed);\n        if(seed < 256) {\n            seed |= seed << 8;\n        }\n\n        for(let i = 0; i < 256; i++) {\n            let v;\n            if (i & 1) {\n                v = p[i] ^ (seed & 255);\n            } else {\n                v = p[i] ^ ((seed>>8) & 255);\n            }\n\n            perm[i] = perm[i + 256] = v;\n            gradP[i] = gradP[i + 256] = grad3[v % 12];\n        }\n    };\n\n    module.seed(0);\n    /*\n    for(var i=0; i<256; i++) {\n      perm[i] = perm[i + 256] = p[i];\n      gradP[i] = gradP[i + 256] = grad3[perm[i] % 12];\n    }*/\n    // Skewing and unskewing factors for 2, 3, and 4 dimensions\n    const F2 = 0.5 * (Math.sqrt(3) - 1), G2 = (3 - Math.sqrt(3)) / 6, F3 = 1 / 3, G3 = 1 / 6;\n\n    // 2D simplex noise\n    module.simplex2 = function(xin, yin) {\n        // Noise contributions from the three corners\n        // Skew the input space to determine which simplex cell we're in\n        // Hairy factor for 2D\n        // The x,y distances from the cell origin, unskewed.\n        // For the 2D case, the simplex shape is an equilateral triangle.\n        // Determine which simplex we are in.\n        let n0, n1, n2, s = (xin + yin) * F2, i = Math.floor(xin + s), j = Math.floor(yin + s), t = (i + j) * G2,\n            x0 = xin - i + t, y0 = yin - j + t, i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n        if(x0>y0) { // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n            i1=1; j1=0;\n        } else {    // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n            i1=0; j1=1;\n        }\n        // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n        // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n        // c = (3-sqrt(3))/6\n        // Offsets for middle corner in (x,y) unskewed coords\n        // Offsets for last corner in (x,y) unskewed coords\n        const x1 = x0 - i1 + G2, y1 = y0 - j1 + G2, x2 = x0 - 1 + 2 * G2, y2 = y0 - 1 + 2 * G2;\n        // Work out the hashed gradient indices of the three simplex corners\n        i &= 255;\n        j &= 255;\n        // Calculate the contribution from the three corners\n        let gi0 = gradP[i + perm[j]], gi1 = gradP[i + i1 + perm[j + j1]], gi2 = gradP[i + 1 + perm[j + 1]],\n            t0 = 0.5 - x0 * x0 - y0 * y0;\n        if(t0<0) {\n            n0 = 0;\n        } else {\n            t0 *= t0;\n            n0 = t0 * t0 * gi0.dot2(x0, y0);  // (x,y) of grad3 used for 2D gradient\n        }\n        let t1 = 0.5 - x1 * x1 - y1 * y1;\n        if(t1<0) {\n            n1 = 0;\n        } else {\n            t1 *= t1;\n            n1 = t1 * t1 * gi1.dot2(x1, y1);\n        }\n        let t2 = 0.5 - x2 * x2 - y2 * y2;\n        if(t2<0) {\n            n2 = 0;\n        } else {\n            t2 *= t2;\n            n2 = t2 * t2 * gi2.dot2(x2, y2);\n        }\n        // Add contributions from each corner to get the final noise value.\n        // The result is scaled to return values in the interval [-1,1].\n        return 70 * (n0 + n1 + n2);\n    };\n\n    // 3D simplex noise\n    module.simplex3 = function(xin, yin, zin) {\n        let n0, n1, n2, n3;\n        // Noise contributions from the four corners\n        // Skew the input space to determine which simplex cell we're in\n        // Hairy factor for 2D\n        // The x,y distances from the cell origin, unskewed.\n        // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n        // Determine which simplex we are in.\n        let s = (xin + yin + zin) * F3, i = Math.floor(xin + s), j = Math.floor(yin + s), k = Math.floor(zin + s),\n            t = (i + j + k) * G3, x0 = xin - i + t, y0 = yin - j + t, z0 = zin - k + t, i1, j1, k1, i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n         // Offsets for second corner of simplex in (i,j,k) coords\n\n        if(x0 >= y0) {\n            if(y0 >= z0)      { i1=1; j1=0; k1=0; i2=1; j2=1; k2=0; }\n            else if(x0 >= z0) { i1=1; j1=0; k1=0; i2=1; j2=0; k2=1; }\n            else              { i1=0; j1=0; k1=1; i2=1; j2=0; k2=1; }\n        } else {\n            if(y0 < z0)      { i1=0; j1=0; k1=1; i2=0; j2=1; k2=1; }\n            else if(x0 < z0) { i1=0; j1=1; k1=0; i2=0; j2=1; k2=1; }\n            else             { i1=0; j1=1; k1=0; i2=1; j2=1; k2=0; }\n        }\n        // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n        // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n        // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n        // c = 1/6.\n        // Offsets for second corner\n        // Offsets for third corner\n        // Offsets for fourth corner\n        const x1 = x0 - i1 + G3, y1 = y0 - j1 + G3, z1 = z0 - k1 + G3, x2 = x0 - i2 + 2 * G3, y2 = y0 - j2 + 2 * G3,\n            z2 = z0 - k2 + 2 * G3, x3 = x0 - 1 + 3 * G3, y3 = y0 - 1 + 3 * G3, z3 = z0 - 1 + 3 * G3;\n\n        // Work out the hashed gradient indices of the four simplex corners\n        i &= 255;\n        j &= 255;\n        k &= 255;\n        // Calculate the contribution from the four corners\n        let gi0 = gradP[i + perm[j + perm[k]]], gi1 = gradP[i + i1 + perm[j + j1 + perm[k + k1]]],\n            gi2 = gradP[i + i2 + perm[j + j2 + perm[k + k2]]], gi3 = gradP[i + 1 + perm[j + 1 + perm[k + 1]]],\n            t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n        if(t0<0) {\n            n0 = 0;\n        } else {\n            t0 *= t0;\n            n0 = t0 * t0 * gi0.dot3(x0, y0, z0);  // (x,y) of grad3 used for 2D gradient\n        }\n        let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n        if(t1<0) {\n            n1 = 0;\n        } else {\n            t1 *= t1;\n            n1 = t1 * t1 * gi1.dot3(x1, y1, z1);\n        }\n        let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n        if(t2<0) {\n            n2 = 0;\n        } else {\n            t2 *= t2;\n            n2 = t2 * t2 * gi2.dot3(x2, y2, z2);\n        }\n        let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n        if(t3<0) {\n            n3 = 0;\n        } else {\n            t3 *= t3;\n            n3 = t3 * t3 * gi3.dot3(x3, y3, z3);\n        }\n        // Add contributions from each corner to get the final noise value.\n        // The result is scaled to return values in the interval [-1,1].\n        return 32 * (n0 + n1 + n2 + n3);\n\n    };\n\n    // ##### Perlin noise stuff\n\n    function fade(t) {\n        return t*t*t*(t*(t*6-15)+10);\n    }\n\n    function lerp(a, b, t) {\n        return (1-t)*a + t*b;\n    }\n\n    // 2D Perlin Noise\n    module.perlin2 = function(x, y) {\n        // Find unit grid cell containing point\n        let X = Math.floor(x), Y = Math.floor(y);\n        // Get relative xy coordinates of point within that cell\n        x = x - X; y = y - Y;\n        // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n        X = X & 255; Y = Y & 255;\n        // Calculate noise contributions from each of the four corners\n        // Compute the fade curve value for x\n        const n00 = gradP[X + perm[Y]].dot2(x, y), n01 = gradP[X + perm[Y + 1]].dot2(x, y - 1),\n            n10 = gradP[X + 1 + perm[Y]].dot2(x - 1, y), n11 = gradP[X + 1 + perm[Y + 1]].dot2(x - 1, y - 1),\n            u = fade(x);\n\n        // Interpolate the four results\n        return lerp(\n            lerp(n00, n10, u),\n            lerp(n01, n11, u),\n            fade(y));\n    };\n\n    // 3D Perlin Noise\n    module.perlin3 = function(x, y, z) {\n        // Find unit grid cell containing point\n        let X = Math.floor(x), Y = Math.floor(y), Z = Math.floor(z);\n        // Get relative xyz coordinates of point within that cell\n        x = x - X; y = y - Y; z = z - Z;\n        // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n        X = X & 255; Y = Y & 255; Z = Z & 255;\n        // Calculate noise contributions from each of the eight corners\n        // Compute the fade curve value for x, y, z\n        const n000 = gradP[X + perm[Y + perm[Z]]].dot3(x, y, z),\n            n001 = gradP[X + perm[Y + perm[Z + 1]]].dot3(x, y, z - 1),\n            n010 = gradP[X + perm[Y + 1 + perm[Z]]].dot3(x, y - 1, z),\n            n011 = gradP[X + perm[Y + 1 + perm[Z + 1]]].dot3(x, y - 1, z - 1),\n            n100 = gradP[X + 1 + perm[Y + perm[Z]]].dot3(x - 1, y, z),\n            n101 = gradP[X + 1 + perm[Y + perm[Z + 1]]].dot3(x - 1, y, z - 1),\n            n110 = gradP[X + 1 + perm[Y + 1 + perm[Z]]].dot3(x - 1, y - 1, z),\n            n111 = gradP[X + 1 + perm[Y + 1 + perm[Z + 1]]].dot3(x - 1, y - 1, z - 1), u = fade(x), v = fade(y),\n            w = fade(z);\n\n        // Interpolate\n        return lerp(\n            lerp(\n                lerp(n000, n100, u),\n                lerp(n001, n101, u), w),\n            lerp(\n                lerp(n010, n110, u),\n                lerp(n011, n111, u), w),\n            v);\n    };\n})(this);"]},"metadata":{},"sourceType":"script"}