{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { Matrix, Vector3, Vector2 } from \"../../Maths/math.vector.js\";\nimport { Gamepad } from \"../../Gamepads/gamepad.js\";\n/**\n * Manage the gamepad inputs to control a free camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\n\nvar FreeCameraGamepadInput =\n/** @class */\nfunction () {\n  function FreeCameraGamepadInput() {\n    /**\n     * Defines the gamepad rotation sensibility.\n     * This is the threshold from when rotation starts to be accounted for to prevent jittering.\n     */\n    this.gamepadAngularSensibility = 200;\n    /**\n     * Defines the gamepad move sensibility.\n     * This is the threshold from when moving starts to be accounted for for to prevent jittering.\n     */\n\n    this.gamepadMoveSensibility = 40;\n    /**\n     * Defines the minimum value at which any analog stick input is ignored.\n     * Note: This value should only be a value between 0 and 1.\n     */\n\n    this.deadzoneDelta = 0.1;\n    this._yAxisScale = 1.0;\n    this._cameraTransform = Matrix.Identity();\n    this._deltaTransform = Vector3.Zero();\n    this._vector3 = Vector3.Zero();\n    this._vector2 = Vector2.Zero();\n  }\n\n  Object.defineProperty(FreeCameraGamepadInput.prototype, \"invertYAxis\", {\n    /**\n     * Gets or sets a boolean indicating that Yaxis (for right stick) should be inverted\n     */\n    get: function get() {\n      return this._yAxisScale !== 1.0;\n    },\n    set: function set(value) {\n      this._yAxisScale = value ? -1.0 : 1.0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Attach the input controls to a specific dom element to get the input from.\n   */\n\n  FreeCameraGamepadInput.prototype.attachControl = function () {\n    var _this = this;\n\n    var manager = this.camera.getScene().gamepadManager;\n    this._onGamepadConnectedObserver = manager.onGamepadConnectedObservable.add(function (gamepad) {\n      if (gamepad.type !== Gamepad.POSE_ENABLED) {\n        // prioritize XBOX gamepads.\n        if (!_this.gamepad || gamepad.type === Gamepad.XBOX) {\n          _this.gamepad = gamepad;\n        }\n      }\n    });\n    this._onGamepadDisconnectedObserver = manager.onGamepadDisconnectedObservable.add(function (gamepad) {\n      if (_this.gamepad === gamepad) {\n        _this.gamepad = null;\n      }\n    }); // check if there are already other controllers connected\n\n    this.gamepad = manager.getGamepadByType(Gamepad.XBOX); // if no xbox controller was found, but there are gamepad controllers, take the first one\n\n    if (!this.gamepad && manager.gamepads.length) {\n      this.gamepad = manager.gamepads[0];\n    }\n  };\n  /**\n   * Detach the current controls from the specified dom element.\n   */\n\n\n  FreeCameraGamepadInput.prototype.detachControl = function () {\n    this.camera.getScene().gamepadManager.onGamepadConnectedObservable.remove(this._onGamepadConnectedObserver);\n    this.camera.getScene().gamepadManager.onGamepadDisconnectedObservable.remove(this._onGamepadDisconnectedObserver);\n    this.gamepad = null;\n  };\n  /**\n   * Update the current camera state depending on the inputs that have been used this frame.\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n   */\n\n\n  FreeCameraGamepadInput.prototype.checkInputs = function () {\n    if (this.gamepad && this.gamepad.leftStick) {\n      var camera = this.camera;\n      var lsValues = this.gamepad.leftStick;\n\n      if (this.gamepadMoveSensibility !== 0) {\n        lsValues.x = Math.abs(lsValues.x) > this.deadzoneDelta ? lsValues.x / this.gamepadMoveSensibility : 0;\n        lsValues.y = Math.abs(lsValues.y) > this.deadzoneDelta ? lsValues.y / this.gamepadMoveSensibility : 0;\n      }\n\n      var rsValues = this.gamepad.rightStick;\n\n      if (rsValues && this.gamepadAngularSensibility !== 0) {\n        rsValues.x = Math.abs(rsValues.x) > this.deadzoneDelta ? rsValues.x / this.gamepadAngularSensibility : 0;\n        rsValues.y = (Math.abs(rsValues.y) > this.deadzoneDelta ? rsValues.y / this.gamepadAngularSensibility : 0) * this._yAxisScale;\n      } else {\n        rsValues = {\n          x: 0,\n          y: 0\n        };\n      }\n\n      if (!camera.rotationQuaternion) {\n        Matrix.RotationYawPitchRollToRef(camera.rotation.y, camera.rotation.x, 0, this._cameraTransform);\n      } else {\n        camera.rotationQuaternion.toRotationMatrix(this._cameraTransform);\n      }\n\n      var speed = camera._computeLocalCameraSpeed() * 50.0;\n\n      this._vector3.copyFromFloats(lsValues.x * speed, 0, -lsValues.y * speed);\n\n      Vector3.TransformCoordinatesToRef(this._vector3, this._cameraTransform, this._deltaTransform);\n      camera.cameraDirection.addInPlace(this._deltaTransform);\n\n      this._vector2.copyFromFloats(rsValues.y, rsValues.x);\n\n      camera.cameraRotation.addInPlace(this._vector2);\n    }\n  };\n  /**\n   * Gets the class name of the current input.\n   * @returns the class name\n   */\n\n\n  FreeCameraGamepadInput.prototype.getClassName = function () {\n    return \"FreeCameraGamepadInput\";\n  };\n  /**\n   * Get the friendly name associated with the input class.\n   * @returns the input friendly name\n   */\n\n\n  FreeCameraGamepadInput.prototype.getSimpleName = function () {\n    return \"gamepad\";\n  };\n\n  __decorate([serialize()], FreeCameraGamepadInput.prototype, \"gamepadAngularSensibility\", void 0);\n\n  __decorate([serialize()], FreeCameraGamepadInput.prototype, \"gamepadMoveSensibility\", void 0);\n\n  return FreeCameraGamepadInput;\n}();\n\nexport { FreeCameraGamepadInput };\nCameraInputTypes[\"FreeCameraGamepadInput\"] = FreeCameraGamepadInput;","map":{"version":3,"mappings":"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","names":["serialize","CameraInputTypes","Matrix","Vector3","Vector2","Gamepad","Identity","Zero","Object","FreeCameraGamepadInput","_yAxisScale","value","manager","camera","getScene","gamepadManager","_onGamepadConnectedObserver","onGamepadConnectedObservable","add","gamepad","type","POSE_ENABLED","_this","XBOX","_onGamepadDisconnectedObserver","onGamepadDisconnectedObservable","getGamepadByType","gamepads","length","remove","leftStick","lsValues","gamepadMoveSensibility","x","Math","abs","deadzoneDelta","y","rsValues","rightStick","gamepadAngularSensibility","rotationQuaternion","RotationYawPitchRollToRef","rotation","_cameraTransform","toRotationMatrix","speed","_computeLocalCameraSpeed","_vector3","copyFromFloats","TransformCoordinatesToRef","_deltaTransform","cameraDirection","addInPlace","_vector2","cameraRotation","__decorate"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Cameras/Inputs/freeCameraGamepadInput.ts"],"sourcesContent":["import { serialize } from \"../../Misc/decorators\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport type { FreeCamera } from \"../../Cameras/freeCamera\";\r\nimport { Matrix, Vector3, Vector2 } from \"../../Maths/math.vector\";\r\nimport { Gamepad } from \"../../Gamepads/gamepad\";\r\n\r\n/**\r\n * Manage the gamepad inputs to control a free camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class FreeCameraGamepadInput implements ICameraInput<FreeCamera> {\r\n    /**\r\n     * Define the camera the input is attached to.\r\n     */\r\n    public camera: FreeCamera;\r\n\r\n    /**\r\n     * Define the Gamepad controlling the input\r\n     */\r\n    public gamepad: Nullable<Gamepad>;\r\n\r\n    /**\r\n     * Defines the gamepad rotation sensibility.\r\n     * This is the threshold from when rotation starts to be accounted for to prevent jittering.\r\n     */\r\n    @serialize()\r\n    public gamepadAngularSensibility = 200;\r\n\r\n    /**\r\n     * Defines the gamepad move sensibility.\r\n     * This is the threshold from when moving starts to be accounted for for to prevent jittering.\r\n     */\r\n    @serialize()\r\n    public gamepadMoveSensibility = 40;\r\n\r\n    /**\r\n     * Defines the minimum value at which any analog stick input is ignored.\r\n     * Note: This value should only be a value between 0 and 1.\r\n     */\r\n    public deadzoneDelta = 0.1;\r\n\r\n    private _yAxisScale = 1.0;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that Yaxis (for right stick) should be inverted\r\n     */\r\n    public get invertYAxis() {\r\n        return this._yAxisScale !== 1.0;\r\n    }\r\n\r\n    public set invertYAxis(value: boolean) {\r\n        this._yAxisScale = value ? -1.0 : 1.0;\r\n    }\r\n\r\n    // private members\r\n    private _onGamepadConnectedObserver: Nullable<Observer<Gamepad>>;\r\n    private _onGamepadDisconnectedObserver: Nullable<Observer<Gamepad>>;\r\n    private _cameraTransform: Matrix = Matrix.Identity();\r\n    private _deltaTransform: Vector3 = Vector3.Zero();\r\n    private _vector3: Vector3 = Vector3.Zero();\r\n    private _vector2: Vector2 = Vector2.Zero();\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     */\r\n    public attachControl(): void {\r\n        const manager = this.camera.getScene().gamepadManager;\r\n        this._onGamepadConnectedObserver = manager.onGamepadConnectedObservable.add((gamepad) => {\r\n            if (gamepad.type !== Gamepad.POSE_ENABLED) {\r\n                // prioritize XBOX gamepads.\r\n                if (!this.gamepad || gamepad.type === Gamepad.XBOX) {\r\n                    this.gamepad = gamepad;\r\n                }\r\n            }\r\n        });\r\n\r\n        this._onGamepadDisconnectedObserver = manager.onGamepadDisconnectedObservable.add((gamepad) => {\r\n            if (this.gamepad === gamepad) {\r\n                this.gamepad = null;\r\n            }\r\n        });\r\n\r\n        // check if there are already other controllers connected\r\n        this.gamepad = manager.getGamepadByType(Gamepad.XBOX);\r\n        // if no xbox controller was found, but there are gamepad controllers, take the first one\r\n        if (!this.gamepad && manager.gamepads.length) {\r\n            this.gamepad = manager.gamepads[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        this.camera.getScene().gamepadManager.onGamepadConnectedObservable.remove(this._onGamepadConnectedObserver);\r\n        this.camera.getScene().gamepadManager.onGamepadDisconnectedObservable.remove(this._onGamepadDisconnectedObserver);\r\n        this.gamepad = null;\r\n    }\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs(): void {\r\n        if (this.gamepad && this.gamepad.leftStick) {\r\n            const camera = this.camera;\r\n            const lsValues = this.gamepad.leftStick;\r\n            if (this.gamepadMoveSensibility !== 0) {\r\n                lsValues.x = Math.abs(lsValues.x) > this.deadzoneDelta ? lsValues.x / this.gamepadMoveSensibility : 0;\r\n                lsValues.y = Math.abs(lsValues.y) > this.deadzoneDelta ? lsValues.y / this.gamepadMoveSensibility : 0;\r\n            }\r\n\r\n            let rsValues = this.gamepad.rightStick;\r\n            if (rsValues && this.gamepadAngularSensibility !== 0) {\r\n                rsValues.x = Math.abs(rsValues.x) > this.deadzoneDelta ? rsValues.x / this.gamepadAngularSensibility : 0;\r\n                rsValues.y = (Math.abs(rsValues.y) > this.deadzoneDelta ? rsValues.y / this.gamepadAngularSensibility : 0) * this._yAxisScale;\r\n            } else {\r\n                rsValues = { x: 0, y: 0 };\r\n            }\r\n\r\n            if (!camera.rotationQuaternion) {\r\n                Matrix.RotationYawPitchRollToRef(camera.rotation.y, camera.rotation.x, 0, this._cameraTransform);\r\n            } else {\r\n                camera.rotationQuaternion.toRotationMatrix(this._cameraTransform);\r\n            }\r\n\r\n            const speed = camera._computeLocalCameraSpeed() * 50.0;\r\n            this._vector3.copyFromFloats(lsValues.x * speed, 0, -lsValues.y * speed);\r\n\r\n            Vector3.TransformCoordinatesToRef(this._vector3, this._cameraTransform, this._deltaTransform);\r\n            camera.cameraDirection.addInPlace(this._deltaTransform);\r\n            this._vector2.copyFromFloats(rsValues.y, rsValues.x);\r\n            camera.cameraRotation.addInPlace(this._vector2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FreeCameraGamepadInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"gamepad\";\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FreeCameraGamepadInput\"] = FreeCameraGamepadInput;\r\n"]},"metadata":{},"sourceType":"module"}