{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\n/**\n * Block used to test if the fragment shader is front facing\n */\n\nvar FrontFacingBlock =\n/** @class */\nfunction (_super) {\n  __extends(FrontFacingBlock, _super);\n  /**\n   * Creates a new FrontFacingBlock\n   * @param name defines the block name\n   */\n\n\n  function FrontFacingBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\n\n    return _this;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  FrontFacingBlock.prototype.getClassName = function () {\n    return \"FrontFacingBlock\";\n  };\n\n  Object.defineProperty(FrontFacingBlock.prototype, \"output\", {\n    /**\n     * Gets the output component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  FrontFacingBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    if (state.target === NodeMaterialBlockTargets.Vertex) {\n      throw \"FrontFacingBlock must only be used in a fragment shader\";\n    }\n\n    var output = this._outputs[0];\n    state.compilationString += this._declareOutput(output, state) + \" = gl_FrontFacing ? 1.0 : 0.0;\\r\\n\";\n    return this;\n  };\n\n  return FrontFacingBlock;\n}(NodeMaterialBlock);\n\nexport { FrontFacingBlock };\nRegisterClass(\"BABYLON.FrontFacingBlock\", FrontFacingBlock);","map":{"version":3,"mappings":";;AAAA,SAASA,iBAAT,QAAkC,4BAAlC;AACA,SAASC,qCAAT,QAAsD,sDAAtD;AAGA,SAASC,wBAAT,QAAyC,yCAAzC;AACA,SAASC,aAAT,QAA8B,+BAA9B;AACA;;;;AAGA;AAAA;AAAA;AAAsCC;AAClC;;;;;;AAIA,4BAAmBC,IAAnB,EAA+B;AAA/B,gBACIC,kBAAMD,IAAN,EAAYH,wBAAwB,CAACK,QAArC,KAA8C,IADlD;;AAGIC,SAAI,CAACC,cAAL,CAAoB,QAApB,EAA8BR,qCAAqC,CAACS,KAApE,EAA2ER,wBAAwB,CAACK,QAApG;;;AACH;AAED;;;;;;AAIOI,4CAAP;AACI,WAAO,kBAAP;AACH,GAFM;;AAOPC,wBAAWD,0BAAX,EAAW,QAAX,EAAiB;AAHjB;;;SAGA;AACI,aAAO,KAAKE,QAAL,CAAc,CAAd,CAAP;AACH,KAFgB;qBAAA;;AAAA,GAAjB;;AAIUF,2CAAV,UAAsBG,KAAtB,EAAmD;AAC/CR,qBAAMS,WAAN,CAAiBC,IAAjB,CAAiB,IAAjB,EAAkBF,KAAlB;;AAEA,QAAIA,KAAK,CAACG,MAAN,KAAiBf,wBAAwB,CAACgB,MAA9C,EAAsD;AAClD,YAAM,yDAAN;AACH;;AAED,QAAMC,MAAM,GAAG,KAAKN,QAAL,CAAc,CAAd,CAAf;AAEAC,SAAK,CAACM,iBAAN,IAA2B,KAAKC,cAAL,CAAoBF,MAApB,EAA4BL,KAA5B,IAAqC,oCAAhE;AAEA,WAAO,IAAP;AACH,GAZS;;AAad;AAAC,CAvCD,CAAsCd,iBAAtC;;;AAyCAG,aAAa,CAAC,0BAAD,EAA6BQ,gBAA7B,CAAb","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","__extends","name","_super","Fragment","_this","registerOutput","Float","FrontFacingBlock","Object","_outputs","state","_buildBlock","call","target","Vertex","output","compilationString","_declareOutput"],"sourceRoot":"","sources":["../../../../../../../../lts/core/generated/Materials/Node/Blocks/Fragment/frontFacingBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\n/**\r\n * Block used to test if the fragment shader is front facing\r\n */\r\nexport class FrontFacingBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Creates a new FrontFacingBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"FrontFacingBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (state.target === NodeMaterialBlockTargets.Vertex) {\r\n            throw \"FrontFacingBlock must only be used in a fragment shader\";\r\n        }\r\n\r\n        const output = this._outputs[0];\r\n\r\n        state.compilationString += this._declareOutput(output, state) + ` = gl_FrontFacing ? 1.0 : 0.0;\\r\\n`;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.FrontFacingBlock\", FrontFacingBlock);\r\n"]},"metadata":{},"sourceType":"module"}