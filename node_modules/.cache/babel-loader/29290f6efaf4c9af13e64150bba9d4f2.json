{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { VertexBuffer } from \"../Buffers/buffer.js\";\n/**\n * PostProcessManager is used to manage one or more post processes or post process pipelines\n * See https://doc.babylonjs.com/how_to/how_to_use_postprocesses\n */\n\nvar PostProcessManager =\n/** @class */\nfunction () {\n  /**\n   * Creates a new instance PostProcess\n   * @param scene The scene that the post process is associated with.\n   */\n  function PostProcessManager(scene) {\n    this._vertexBuffers = {};\n    this._scene = scene;\n  }\n\n  PostProcessManager.prototype._prepareBuffers = function () {\n    if (this._vertexBuffers[VertexBuffer.PositionKind]) {\n      return;\n    } // VBO\n\n\n    var vertices = [];\n    vertices.push(1, 1);\n    vertices.push(-1, 1);\n    vertices.push(-1, -1);\n    vertices.push(1, -1);\n    this._vertexBuffers[VertexBuffer.PositionKind] = new VertexBuffer(this._scene.getEngine(), vertices, VertexBuffer.PositionKind, false, false, 2);\n\n    this._buildIndexBuffer();\n  };\n\n  PostProcessManager.prototype._buildIndexBuffer = function () {\n    // Indices\n    var indices = [];\n    indices.push(0);\n    indices.push(1);\n    indices.push(2);\n    indices.push(0);\n    indices.push(2);\n    indices.push(3);\n    this._indexBuffer = this._scene.getEngine().createIndexBuffer(indices);\n  };\n  /**\n   * Rebuilds the vertex buffers of the manager.\n   * @hidden\n   */\n\n\n  PostProcessManager.prototype._rebuild = function () {\n    var vb = this._vertexBuffers[VertexBuffer.PositionKind];\n\n    if (!vb) {\n      return;\n    }\n\n    vb._rebuild();\n\n    this._buildIndexBuffer();\n  }; // Methods\n\n  /**\n   * Prepares a frame to be run through a post process.\n   * @param sourceTexture The input texture to the post processes. (default: null)\n   * @param postProcesses An array of post processes to be run. (default: null)\n   * @returns True if the post processes were able to be run.\n   * @hidden\n   */\n\n\n  PostProcessManager.prototype._prepareFrame = function (sourceTexture, postProcesses) {\n    if (sourceTexture === void 0) {\n      sourceTexture = null;\n    }\n\n    if (postProcesses === void 0) {\n      postProcesses = null;\n    }\n\n    var camera = this._scene.activeCamera;\n\n    if (!camera) {\n      return false;\n    }\n\n    postProcesses = postProcesses || camera._postProcesses.filter(function (pp) {\n      return pp != null;\n    });\n\n    if (!postProcesses || postProcesses.length === 0 || !this._scene.postProcessesEnabled) {\n      return false;\n    }\n\n    postProcesses[0].activate(camera, sourceTexture, postProcesses !== null && postProcesses !== undefined);\n    return true;\n  };\n  /**\n   * Manually render a set of post processes to a texture.\n   * Please note, the frame buffer won't be unbound after the call in case you have more render to do.\n   * @param postProcesses An array of post processes to be run.\n   * @param targetTexture The render target wrapper to render to.\n   * @param forceFullscreenViewport force gl.viewport to be full screen eg. 0,0,textureWidth,textureHeight\n   * @param faceIndex defines the face to render to if a cubemap is defined as the target\n   * @param lodLevel defines which lod of the texture to render to\n   * @param doNotBindFrambuffer If set to true, assumes that the framebuffer has been bound previously\n   */\n\n\n  PostProcessManager.prototype.directRender = function (postProcesses, targetTexture, forceFullscreenViewport, faceIndex, lodLevel, doNotBindFrambuffer) {\n    var _a;\n\n    if (targetTexture === void 0) {\n      targetTexture = null;\n    }\n\n    if (forceFullscreenViewport === void 0) {\n      forceFullscreenViewport = false;\n    }\n\n    if (faceIndex === void 0) {\n      faceIndex = 0;\n    }\n\n    if (lodLevel === void 0) {\n      lodLevel = 0;\n    }\n\n    if (doNotBindFrambuffer === void 0) {\n      doNotBindFrambuffer = false;\n    }\n\n    var engine = this._scene.getEngine();\n\n    for (var index = 0; index < postProcesses.length; index++) {\n      if (index < postProcesses.length - 1) {\n        postProcesses[index + 1].activate(this._scene.activeCamera, targetTexture === null || targetTexture === void 0 ? void 0 : targetTexture.texture);\n      } else {\n        if (targetTexture) {\n          engine.bindFramebuffer(targetTexture, faceIndex, undefined, undefined, forceFullscreenViewport, lodLevel);\n        } else if (!doNotBindFrambuffer) {\n          engine.restoreDefaultFramebuffer();\n        }\n\n        (_a = engine._debugInsertMarker) === null || _a === void 0 ? void 0 : _a.call(engine, \"post process \".concat(postProcesses[index].name, \" output\"));\n      }\n\n      var pp = postProcesses[index];\n      var effect = pp.apply();\n\n      if (effect) {\n        pp.onBeforeRenderObservable.notifyObservers(effect); // VBOs\n\n        this._prepareBuffers();\n\n        engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect); // Draw order\n\n        engine.drawElementsType(0, 0, 6);\n        pp.onAfterRenderObservable.notifyObservers(effect);\n      }\n    } // Restore depth buffer\n\n\n    engine.setDepthBuffer(true);\n    engine.setDepthWrite(true);\n  };\n  /**\n   * Finalize the result of the output of the postprocesses.\n   * @param doNotPresent If true the result will not be displayed to the screen.\n   * @param targetTexture The render target wrapper to render to.\n   * @param faceIndex The index of the face to bind the target texture to.\n   * @param postProcesses The array of post processes to render.\n   * @param forceFullscreenViewport force gl.viewport to be full screen eg. 0,0,textureWidth,textureHeight (default: false)\n   * @hidden\n   */\n\n\n  PostProcessManager.prototype._finalizeFrame = function (doNotPresent, targetTexture, faceIndex, postProcesses, forceFullscreenViewport) {\n    var _a;\n\n    if (forceFullscreenViewport === void 0) {\n      forceFullscreenViewport = false;\n    }\n\n    var camera = this._scene.activeCamera;\n\n    if (!camera) {\n      return;\n    }\n\n    postProcesses = postProcesses || camera._postProcesses.filter(function (pp) {\n      return pp != null;\n    });\n\n    if (postProcesses.length === 0 || !this._scene.postProcessesEnabled) {\n      return;\n    }\n\n    var engine = this._scene.getEngine();\n\n    for (var index = 0, len = postProcesses.length; index < len; index++) {\n      var pp = postProcesses[index];\n\n      if (index < len - 1) {\n        pp._outputTexture = postProcesses[index + 1].activate(camera, targetTexture === null || targetTexture === void 0 ? void 0 : targetTexture.texture);\n      } else {\n        if (targetTexture) {\n          engine.bindFramebuffer(targetTexture, faceIndex, undefined, undefined, forceFullscreenViewport);\n          pp._outputTexture = targetTexture;\n        } else {\n          engine.restoreDefaultFramebuffer();\n          pp._outputTexture = null;\n        }\n\n        (_a = engine._debugInsertMarker) === null || _a === void 0 ? void 0 : _a.call(engine, \"post process \".concat(postProcesses[index].name, \" output\"));\n      }\n\n      if (doNotPresent) {\n        break;\n      }\n\n      var effect = pp.apply();\n\n      if (effect) {\n        pp.onBeforeRenderObservable.notifyObservers(effect); // VBOs\n\n        this._prepareBuffers();\n\n        engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect); // Draw order\n\n        engine.drawElementsType(0, 0, 6);\n        pp.onAfterRenderObservable.notifyObservers(effect);\n      }\n    } // Restore states\n\n\n    engine.setDepthBuffer(true);\n    engine.setDepthWrite(true);\n    engine.setAlphaMode(0);\n  };\n  /**\n   * Disposes of the post process manager.\n   */\n\n\n  PostProcessManager.prototype.dispose = function () {\n    var buffer = this._vertexBuffers[VertexBuffer.PositionKind];\n\n    if (buffer) {\n      buffer.dispose();\n      this._vertexBuffers[VertexBuffer.PositionKind] = null;\n    }\n\n    if (this._indexBuffer) {\n      this._scene.getEngine()._releaseBuffer(this._indexBuffer);\n\n      this._indexBuffer = null;\n    }\n  };\n\n  return PostProcessManager;\n}();\n\nexport { PostProcessManager };","map":{"version":3,"mappings":"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","names":["VertexBuffer","scene","_scene","PostProcessManager","_vertexBuffers","PositionKind","vertices","push","getEngine","_buildIndexBuffer","indices","_indexBuffer","createIndexBuffer","vb","_rebuild","sourceTexture","postProcesses","camera","activeCamera","_postProcesses","filter","pp","length","postProcessesEnabled","activate","undefined","targetTexture","forceFullscreenViewport","faceIndex","lodLevel","doNotBindFrambuffer","engine","index","texture","bindFramebuffer","restoreDefaultFramebuffer","_debugInsertMarker","_a","name","effect","apply","onBeforeRenderObservable","notifyObservers","_prepareBuffers","bindBuffers","drawElementsType","onAfterRenderObservable","setDepthBuffer","setDepthWrite","doNotPresent","len","_outputTexture","setAlphaMode","buffer","dispose","_releaseBuffer"],"sourceRoot":"","sources":["../../../../../lts/core/generated/PostProcesses/postProcessManager.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { InternalTexture } from \"../Materials/Textures/internalTexture\";\r\nimport type { PostProcess } from \"./postProcess\";\r\nimport { VertexBuffer } from \"../Buffers/buffer\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport type { RenderTargetWrapper } from \"../Engines/renderTargetWrapper\";\r\n\r\ndeclare type Scene = import(\"../scene\").Scene;\r\n\r\n/**\r\n * PostProcessManager is used to manage one or more post processes or post process pipelines\r\n * See https://doc.babylonjs.com/how_to/how_to_use_postprocesses\r\n */\r\nexport class PostProcessManager {\r\n    private _scene: Scene;\r\n    private _indexBuffer: Nullable<DataBuffer>;\r\n    private _vertexBuffers: { [key: string]: Nullable<VertexBuffer> } = {};\r\n\r\n    /**\r\n     * Creates a new instance PostProcess\r\n     * @param scene The scene that the post process is associated with.\r\n     */\r\n    constructor(scene: Scene) {\r\n        this._scene = scene;\r\n    }\r\n\r\n    private _prepareBuffers(): void {\r\n        if (this._vertexBuffers[VertexBuffer.PositionKind]) {\r\n            return;\r\n        }\r\n\r\n        // VBO\r\n        const vertices = [];\r\n        vertices.push(1, 1);\r\n        vertices.push(-1, 1);\r\n        vertices.push(-1, -1);\r\n        vertices.push(1, -1);\r\n\r\n        this._vertexBuffers[VertexBuffer.PositionKind] = new VertexBuffer(this._scene.getEngine(), vertices, VertexBuffer.PositionKind, false, false, 2);\r\n\r\n        this._buildIndexBuffer();\r\n    }\r\n\r\n    private _buildIndexBuffer(): void {\r\n        // Indices\r\n        const indices = [];\r\n        indices.push(0);\r\n        indices.push(1);\r\n        indices.push(2);\r\n\r\n        indices.push(0);\r\n        indices.push(2);\r\n        indices.push(3);\r\n\r\n        this._indexBuffer = this._scene.getEngine().createIndexBuffer(indices);\r\n    }\r\n\r\n    /**\r\n     * Rebuilds the vertex buffers of the manager.\r\n     * @hidden\r\n     */\r\n    public _rebuild(): void {\r\n        const vb = this._vertexBuffers[VertexBuffer.PositionKind];\r\n\r\n        if (!vb) {\r\n            return;\r\n        }\r\n        vb._rebuild();\r\n        this._buildIndexBuffer();\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * Prepares a frame to be run through a post process.\r\n     * @param sourceTexture The input texture to the post processes. (default: null)\r\n     * @param postProcesses An array of post processes to be run. (default: null)\r\n     * @returns True if the post processes were able to be run.\r\n     * @hidden\r\n     */\r\n    public _prepareFrame(sourceTexture: Nullable<InternalTexture> = null, postProcesses: Nullable<PostProcess[]> = null): boolean {\r\n        const camera = this._scene.activeCamera;\r\n        if (!camera) {\r\n            return false;\r\n        }\r\n\r\n        postProcesses = postProcesses || <Nullable<PostProcess[]>>camera._postProcesses.filter((pp) => {\r\n                return pp != null;\r\n            });\r\n\r\n        if (!postProcesses || postProcesses.length === 0 || !this._scene.postProcessesEnabled) {\r\n            return false;\r\n        }\r\n\r\n        postProcesses[0].activate(camera, sourceTexture, postProcesses !== null && postProcesses !== undefined);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Manually render a set of post processes to a texture.\r\n     * Please note, the frame buffer won't be unbound after the call in case you have more render to do.\r\n     * @param postProcesses An array of post processes to be run.\r\n     * @param targetTexture The render target wrapper to render to.\r\n     * @param forceFullscreenViewport force gl.viewport to be full screen eg. 0,0,textureWidth,textureHeight\r\n     * @param faceIndex defines the face to render to if a cubemap is defined as the target\r\n     * @param lodLevel defines which lod of the texture to render to\r\n     * @param doNotBindFrambuffer If set to true, assumes that the framebuffer has been bound previously\r\n     */\r\n    public directRender(\r\n        postProcesses: PostProcess[],\r\n        targetTexture: Nullable<RenderTargetWrapper> = null,\r\n        forceFullscreenViewport = false,\r\n        faceIndex = 0,\r\n        lodLevel = 0,\r\n        doNotBindFrambuffer = false\r\n    ): void {\r\n        const engine = this._scene.getEngine();\r\n\r\n        for (let index = 0; index < postProcesses.length; index++) {\r\n            if (index < postProcesses.length - 1) {\r\n                postProcesses[index + 1].activate(this._scene.activeCamera, targetTexture?.texture);\r\n            } else {\r\n                if (targetTexture) {\r\n                    engine.bindFramebuffer(targetTexture, faceIndex, undefined, undefined, forceFullscreenViewport, lodLevel);\r\n                } else if (!doNotBindFrambuffer) {\r\n                    engine.restoreDefaultFramebuffer();\r\n                }\r\n                engine._debugInsertMarker?.(`post process ${postProcesses[index].name} output`);\r\n            }\r\n\r\n            const pp = postProcesses[index];\r\n            const effect = pp.apply();\r\n\r\n            if (effect) {\r\n                pp.onBeforeRenderObservable.notifyObservers(effect);\r\n\r\n                // VBOs\r\n                this._prepareBuffers();\r\n                engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect);\r\n\r\n                // Draw order\r\n                engine.drawElementsType(Constants.MATERIAL_TriangleFillMode, 0, 6);\r\n\r\n                pp.onAfterRenderObservable.notifyObservers(effect);\r\n            }\r\n        }\r\n\r\n        // Restore depth buffer\r\n        engine.setDepthBuffer(true);\r\n        engine.setDepthWrite(true);\r\n    }\r\n\r\n    /**\r\n     * Finalize the result of the output of the postprocesses.\r\n     * @param doNotPresent If true the result will not be displayed to the screen.\r\n     * @param targetTexture The render target wrapper to render to.\r\n     * @param faceIndex The index of the face to bind the target texture to.\r\n     * @param postProcesses The array of post processes to render.\r\n     * @param forceFullscreenViewport force gl.viewport to be full screen eg. 0,0,textureWidth,textureHeight (default: false)\r\n     * @hidden\r\n     */\r\n    public _finalizeFrame(\r\n        doNotPresent?: boolean,\r\n        targetTexture?: RenderTargetWrapper,\r\n        faceIndex?: number,\r\n        postProcesses?: Array<PostProcess>,\r\n        forceFullscreenViewport = false\r\n    ): void {\r\n        const camera = this._scene.activeCamera;\r\n\r\n        if (!camera) {\r\n            return;\r\n        }\r\n\r\n        postProcesses = postProcesses || <Array<PostProcess>>camera._postProcesses.filter((pp) => {\r\n                return pp != null;\r\n            });\r\n        if (postProcesses.length === 0 || !this._scene.postProcessesEnabled) {\r\n            return;\r\n        }\r\n        const engine = this._scene.getEngine();\r\n\r\n        for (let index = 0, len = postProcesses.length; index < len; index++) {\r\n            const pp = postProcesses[index];\r\n\r\n            if (index < len - 1) {\r\n                pp._outputTexture = postProcesses[index + 1].activate(camera, targetTexture?.texture);\r\n            } else {\r\n                if (targetTexture) {\r\n                    engine.bindFramebuffer(targetTexture, faceIndex, undefined, undefined, forceFullscreenViewport);\r\n                    pp._outputTexture = targetTexture;\r\n                } else {\r\n                    engine.restoreDefaultFramebuffer();\r\n                    pp._outputTexture = null;\r\n                }\r\n                engine._debugInsertMarker?.(`post process ${postProcesses[index].name} output`);\r\n            }\r\n\r\n            if (doNotPresent) {\r\n                break;\r\n            }\r\n\r\n            const effect = pp.apply();\r\n\r\n            if (effect) {\r\n                pp.onBeforeRenderObservable.notifyObservers(effect);\r\n\r\n                // VBOs\r\n                this._prepareBuffers();\r\n                engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect);\r\n\r\n                // Draw order\r\n                engine.drawElementsType(Constants.MATERIAL_TriangleFillMode, 0, 6);\r\n\r\n                pp.onAfterRenderObservable.notifyObservers(effect);\r\n            }\r\n        }\r\n\r\n        // Restore states\r\n        engine.setDepthBuffer(true);\r\n        engine.setDepthWrite(true);\r\n        engine.setAlphaMode(Constants.ALPHA_DISABLE);\r\n    }\r\n\r\n    /**\r\n     * Disposes of the post process manager.\r\n     */\r\n    public dispose(): void {\r\n        const buffer = this._vertexBuffers[VertexBuffer.PositionKind];\r\n        if (buffer) {\r\n            buffer.dispose();\r\n            this._vertexBuffers[VertexBuffer.PositionKind] = null;\r\n        }\r\n\r\n        if (this._indexBuffer) {\r\n            this._scene.getEngine()._releaseBuffer(this._indexBuffer);\r\n            this._indexBuffer = null;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}