{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { __extends } from \"tslib\";\n/**\n * This is a holder class for the physics joint created by the physics plugin\n * It holds a set of functions to control the underlying joint\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\n */\n\nvar PhysicsJoint =\n/** @class */\nfunction () {\n  /**\n   * Initializes the physics joint\n   * @param type The type of the physics joint\n   * @param jointData The data for the physics joint\n   */\n  function PhysicsJoint(\n  /**\n   * The type of the physics joint\n   */\n  type,\n  /**\n   * The data for the physics joint\n   */\n  jointData) {\n    this.type = type;\n    this.jointData = jointData;\n    jointData.nativeParams = jointData.nativeParams || {};\n  }\n\n  Object.defineProperty(PhysicsJoint.prototype, \"physicsJoint\", {\n    /**\n     * Gets the physics joint\n     */\n    get: function get() {\n      return this._physicsJoint;\n    },\n\n    /**\n     * Sets the physics joint\n     */\n    set: function set(newJoint) {\n      if (this._physicsJoint) {//remove from the world\n      }\n\n      this._physicsJoint = newJoint;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsJoint.prototype, \"physicsPlugin\", {\n    /**\n     * Sets the physics plugin\n     */\n    set: function set(physicsPlugin) {\n      this._physicsPlugin = physicsPlugin;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Execute a function that is physics-plugin specific.\n   * @param {Function} func the function that will be executed.\n   *                        It accepts two parameters: the physics world and the physics joint\n   */\n\n  PhysicsJoint.prototype.executeNativeFunction = function (func) {\n    func(this._physicsPlugin.world, this._physicsJoint);\n  }; //TODO check if the native joints are the same\n  //Joint Types\n\n  /**\n   * Distance-Joint type\n   */\n\n\n  PhysicsJoint.DistanceJoint = 0;\n  /**\n   * Hinge-Joint type\n   */\n\n  PhysicsJoint.HingeJoint = 1;\n  /**\n   * Ball-and-Socket joint type\n   */\n\n  PhysicsJoint.BallAndSocketJoint = 2;\n  /**\n   * Wheel-Joint type\n   */\n\n  PhysicsJoint.WheelJoint = 3;\n  /**\n   * Slider-Joint type\n   */\n\n  PhysicsJoint.SliderJoint = 4; //OIMO\n\n  /**\n   * Prismatic-Joint type\n   */\n\n  PhysicsJoint.PrismaticJoint = 5; //\n\n  /**\n   * Universal-Joint type\n   * ENERGY FTW! (compare with this - @see http://ode-wiki.org/wiki/index.php?title=Manual:_Joint_Types_and_Functions)\n   */\n\n  PhysicsJoint.UniversalJoint = 6;\n  /**\n   * Hinge-Joint 2 type\n   */\n\n  PhysicsJoint.Hinge2Joint = PhysicsJoint.WheelJoint; //Cannon\n\n  /**\n   * Point to Point Joint type.  Similar to a Ball-Joint.  Different in parameters\n   */\n\n  PhysicsJoint.PointToPointJoint = 8; //Cannon only at the moment\n\n  /**\n   * Spring-Joint type\n   */\n\n  PhysicsJoint.SpringJoint = 9;\n  /**\n   * Lock-Joint type\n   */\n\n  PhysicsJoint.LockJoint = 10;\n  return PhysicsJoint;\n}();\n\nexport { PhysicsJoint };\n/**\n * A class representing a physics distance joint\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\n */\n\nvar DistanceJoint =\n/** @class */\nfunction (_super) {\n  __extends(DistanceJoint, _super);\n  /**\n   *\n   * @param jointData The data for the Distance-Joint\n   */\n\n\n  function DistanceJoint(jointData) {\n    return _super.call(this, PhysicsJoint.DistanceJoint, jointData) || this;\n  }\n  /**\n   * Update the predefined distance.\n   * @param maxDistance The maximum preferred distance\n   * @param minDistance The minimum preferred distance\n   */\n\n\n  DistanceJoint.prototype.updateDistance = function (maxDistance, minDistance) {\n    this._physicsPlugin.updateDistanceJoint(this, maxDistance, minDistance);\n  };\n\n  return DistanceJoint;\n}(PhysicsJoint);\n\nexport { DistanceJoint };\n/**\n * Represents a Motor-Enabled Joint\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\n */\n\nvar MotorEnabledJoint =\n/** @class */\nfunction (_super) {\n  __extends(MotorEnabledJoint, _super);\n  /**\n   * Initializes the Motor-Enabled Joint\n   * @param type The type of the joint\n   * @param jointData The physical joint data for the joint\n   */\n\n\n  function MotorEnabledJoint(type, jointData) {\n    return _super.call(this, type, jointData) || this;\n  }\n  /**\n   * Set the motor values.\n   * Attention, this function is plugin specific. Engines won't react 100% the same.\n   * @param force the force to apply\n   * @param maxForce max force for this motor.\n   */\n\n\n  MotorEnabledJoint.prototype.setMotor = function (force, maxForce) {\n    this._physicsPlugin.setMotor(this, force || 0, maxForce);\n  };\n  /**\n   * Set the motor's limits.\n   * Attention, this function is plugin specific. Engines won't react 100% the same.\n   * @param upperLimit The upper limit of the motor\n   * @param lowerLimit The lower limit of the motor\n   */\n\n\n  MotorEnabledJoint.prototype.setLimit = function (upperLimit, lowerLimit) {\n    this._physicsPlugin.setLimit(this, upperLimit, lowerLimit);\n  };\n\n  return MotorEnabledJoint;\n}(PhysicsJoint);\n\nexport { MotorEnabledJoint };\n/**\n * This class represents a single physics Hinge-Joint\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\n */\n\nvar HingeJoint =\n/** @class */\nfunction (_super) {\n  __extends(HingeJoint, _super);\n  /**\n   * Initializes the Hinge-Joint\n   * @param jointData The joint data for the Hinge-Joint\n   */\n\n\n  function HingeJoint(jointData) {\n    return _super.call(this, PhysicsJoint.HingeJoint, jointData) || this;\n  }\n  /**\n   * Set the motor values.\n   * Attention, this function is plugin specific. Engines won't react 100% the same.\n   * @param {number} force the force to apply\n   * @param {number} maxForce max force for this motor.\n   */\n\n\n  HingeJoint.prototype.setMotor = function (force, maxForce) {\n    this._physicsPlugin.setMotor(this, force || 0, maxForce);\n  };\n  /**\n   * Set the motor's limits.\n   * Attention, this function is plugin specific. Engines won't react 100% the same.\n   * @param upperLimit The upper limit of the motor\n   * @param lowerLimit The lower limit of the motor\n   */\n\n\n  HingeJoint.prototype.setLimit = function (upperLimit, lowerLimit) {\n    this._physicsPlugin.setLimit(this, upperLimit, lowerLimit);\n  };\n\n  return HingeJoint;\n}(MotorEnabledJoint);\n\nexport { HingeJoint };\n/**\n * This class represents a dual hinge physics joint (same as wheel joint)\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\n */\n\nvar Hinge2Joint =\n/** @class */\nfunction (_super) {\n  __extends(Hinge2Joint, _super);\n  /**\n   * Initializes the Hinge2-Joint\n   * @param jointData The joint data for the Hinge2-Joint\n   */\n\n\n  function Hinge2Joint(jointData) {\n    return _super.call(this, PhysicsJoint.Hinge2Joint, jointData) || this;\n  }\n  /**\n   * Set the motor values.\n   * Attention, this function is plugin specific. Engines won't react 100% the same.\n   * @param targetSpeed the speed the motor is to reach\n   * @param maxForce max force for this motor.\n   * @param motorIndex motor's index, 0 or 1.\n   */\n\n\n  Hinge2Joint.prototype.setMotor = function (targetSpeed, maxForce, motorIndex) {\n    if (motorIndex === void 0) {\n      motorIndex = 0;\n    }\n\n    this._physicsPlugin.setMotor(this, targetSpeed || 0, maxForce, motorIndex);\n  };\n  /**\n   * Set the motor limits.\n   * Attention, this function is plugin specific. Engines won't react 100% the same.\n   * @param upperLimit the upper limit\n   * @param lowerLimit lower limit\n   * @param motorIndex the motor's index, 0 or 1.\n   */\n\n\n  Hinge2Joint.prototype.setLimit = function (upperLimit, lowerLimit, motorIndex) {\n    if (motorIndex === void 0) {\n      motorIndex = 0;\n    }\n\n    this._physicsPlugin.setLimit(this, upperLimit, lowerLimit, motorIndex);\n  };\n\n  return Hinge2Joint;\n}(MotorEnabledJoint);\n\nexport { Hinge2Joint };","map":{"version":3,"mappings":"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","names":["type","jointData","nativeParams","Object","PhysicsJoint","_physicsJoint","newJoint","physicsPlugin","_physicsPlugin","func","world","WheelJoint","__extends","_super","DistanceJoint","maxDistance","minDistance","updateDistanceJoint","MotorEnabledJoint","force","maxForce","setMotor","upperLimit","lowerLimit","setLimit","HingeJoint","Hinge2Joint","targetSpeed","motorIndex"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Physics/physicsJoint.ts"],"sourcesContent":["import type { Vector3 } from \"../Maths/math.vector\";\r\nimport type { IPhysicsEnginePlugin } from \"./IPhysicsEngine\";\r\n/**\r\n * Interface for Physics-Joint data\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\r\nexport interface PhysicsJointData {\r\n    //Important for some engines, optional!\r\n    /**\r\n     * The main pivot of the joint\r\n     */\r\n    mainPivot?: Vector3;\r\n    /**\r\n     * The connected pivot of the joint\r\n     */\r\n    connectedPivot?: Vector3;\r\n    /**\r\n     * The main axis of the joint\r\n     */\r\n    mainAxis?: Vector3;\r\n    /**\r\n     * The connected axis of the joint\r\n     */\r\n    connectedAxis?: Vector3;\r\n    /**\r\n     * The collision of the joint\r\n     */\r\n    collision?: boolean;\r\n    /**\r\n     * Native Oimo/Cannon/Energy data\r\n     */\r\n    nativeParams?: any;\r\n}\r\n\r\n/**\r\n * This is a holder class for the physics joint created by the physics plugin\r\n * It holds a set of functions to control the underlying joint\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\r\nexport class PhysicsJoint {\r\n    private _physicsJoint: any;\r\n    protected _physicsPlugin: IPhysicsEnginePlugin;\r\n\r\n    /**\r\n     * Initializes the physics joint\r\n     * @param type The type of the physics joint\r\n     * @param jointData The data for the physics joint\r\n     */\r\n    constructor(\r\n        /**\r\n         * The type of the physics joint\r\n         */\r\n        public type: number,\r\n        /**\r\n         * The data for the physics joint\r\n         */\r\n        public jointData: PhysicsJointData\r\n    ) {\r\n        jointData.nativeParams = jointData.nativeParams || {};\r\n    }\r\n\r\n    /**\r\n     * Gets the physics joint\r\n     */\r\n    public get physicsJoint(): any {\r\n        return this._physicsJoint;\r\n    }\r\n\r\n    /**\r\n     * Sets the physics joint\r\n     */\r\n    public set physicsJoint(newJoint: any) {\r\n        if (this._physicsJoint) {\r\n            //remove from the world\r\n        }\r\n\r\n        this._physicsJoint = newJoint;\r\n    }\r\n\r\n    /**\r\n     * Sets the physics plugin\r\n     */\r\n    public set physicsPlugin(physicsPlugin: IPhysicsEnginePlugin) {\r\n        this._physicsPlugin = physicsPlugin;\r\n    }\r\n\r\n    /**\r\n     * Execute a function that is physics-plugin specific.\r\n     * @param {Function} func the function that will be executed.\r\n     *                        It accepts two parameters: the physics world and the physics joint\r\n     */\r\n    public executeNativeFunction(func: (world: any, physicsJoint: any) => void) {\r\n        func(this._physicsPlugin.world, this._physicsJoint);\r\n    }\r\n\r\n    //TODO check if the native joints are the same\r\n\r\n    //Joint Types\r\n    /**\r\n     * Distance-Joint type\r\n     */\r\n    public static DistanceJoint = 0;\r\n    /**\r\n     * Hinge-Joint type\r\n     */\r\n    public static HingeJoint = 1;\r\n    /**\r\n     * Ball-and-Socket joint type\r\n     */\r\n    public static BallAndSocketJoint = 2;\r\n    /**\r\n     * Wheel-Joint type\r\n     */\r\n    public static WheelJoint = 3;\r\n    /**\r\n     * Slider-Joint type\r\n     */\r\n    public static SliderJoint = 4;\r\n    //OIMO\r\n    /**\r\n     * Prismatic-Joint type\r\n     */\r\n    public static PrismaticJoint = 5;\r\n    //\r\n    /**\r\n     * Universal-Joint type\r\n     * ENERGY FTW! (compare with this - @see http://ode-wiki.org/wiki/index.php?title=Manual:_Joint_Types_and_Functions)\r\n     */\r\n    public static UniversalJoint = 6;\r\n    /**\r\n     * Hinge-Joint 2 type\r\n     */\r\n    public static Hinge2Joint = PhysicsJoint.WheelJoint;\r\n    //Cannon\r\n    /**\r\n     * Point to Point Joint type.  Similar to a Ball-Joint.  Different in parameters\r\n     */\r\n    public static PointToPointJoint = 8;\r\n    //Cannon only at the moment\r\n    /**\r\n     * Spring-Joint type\r\n     */\r\n    public static SpringJoint = 9;\r\n    /**\r\n     * Lock-Joint type\r\n     */\r\n    public static LockJoint = 10;\r\n}\r\n\r\n/**\r\n * A class representing a physics distance joint\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\r\nexport class DistanceJoint extends PhysicsJoint {\r\n    /**\r\n     *\r\n     * @param jointData The data for the Distance-Joint\r\n     */\r\n    constructor(jointData: DistanceJointData) {\r\n        super(PhysicsJoint.DistanceJoint, jointData);\r\n    }\r\n\r\n    /**\r\n     * Update the predefined distance.\r\n     * @param maxDistance The maximum preferred distance\r\n     * @param minDistance The minimum preferred distance\r\n     */\r\n    public updateDistance(maxDistance: number, minDistance?: number) {\r\n        this._physicsPlugin.updateDistanceJoint(this, maxDistance, minDistance);\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a Motor-Enabled Joint\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\r\nexport class MotorEnabledJoint extends PhysicsJoint implements IMotorEnabledJoint {\r\n    /**\r\n     * Initializes the Motor-Enabled Joint\r\n     * @param type The type of the joint\r\n     * @param jointData The physical joint data for the joint\r\n     */\r\n    constructor(type: number, jointData: PhysicsJointData) {\r\n        super(type, jointData);\r\n    }\r\n\r\n    /**\r\n     * Set the motor values.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param force the force to apply\r\n     * @param maxForce max force for this motor.\r\n     */\r\n    public setMotor(force?: number, maxForce?: number) {\r\n        this._physicsPlugin.setMotor(this, force || 0, maxForce);\r\n    }\r\n\r\n    /**\r\n     * Set the motor's limits.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param upperLimit The upper limit of the motor\r\n     * @param lowerLimit The lower limit of the motor\r\n     */\r\n    public setLimit(upperLimit: number, lowerLimit?: number) {\r\n        this._physicsPlugin.setLimit(this, upperLimit, lowerLimit);\r\n    }\r\n}\r\n\r\n/**\r\n * This class represents a single physics Hinge-Joint\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\r\nexport class HingeJoint extends MotorEnabledJoint {\r\n    /**\r\n     * Initializes the Hinge-Joint\r\n     * @param jointData The joint data for the Hinge-Joint\r\n     */\r\n    constructor(jointData: PhysicsJointData) {\r\n        super(PhysicsJoint.HingeJoint, jointData);\r\n    }\r\n\r\n    /**\r\n     * Set the motor values.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param {number} force the force to apply\r\n     * @param {number} maxForce max force for this motor.\r\n     */\r\n    public setMotor(force?: number, maxForce?: number) {\r\n        this._physicsPlugin.setMotor(this, force || 0, maxForce);\r\n    }\r\n\r\n    /**\r\n     * Set the motor's limits.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param upperLimit The upper limit of the motor\r\n     * @param lowerLimit The lower limit of the motor\r\n     */\r\n    public setLimit(upperLimit: number, lowerLimit?: number) {\r\n        this._physicsPlugin.setLimit(this, upperLimit, lowerLimit);\r\n    }\r\n}\r\n\r\n/**\r\n * This class represents a dual hinge physics joint (same as wheel joint)\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\r\nexport class Hinge2Joint extends MotorEnabledJoint {\r\n    /**\r\n     * Initializes the Hinge2-Joint\r\n     * @param jointData The joint data for the Hinge2-Joint\r\n     */\r\n    constructor(jointData: PhysicsJointData) {\r\n        super(PhysicsJoint.Hinge2Joint, jointData);\r\n    }\r\n\r\n    /**\r\n     * Set the motor values.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param targetSpeed the speed the motor is to reach\r\n     * @param maxForce max force for this motor.\r\n     * @param motorIndex motor's index, 0 or 1.\r\n     */\r\n    public setMotor(targetSpeed?: number, maxForce?: number, motorIndex: number = 0) {\r\n        this._physicsPlugin.setMotor(this, targetSpeed || 0, maxForce, motorIndex);\r\n    }\r\n\r\n    /**\r\n     * Set the motor limits.\r\n     * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n     * @param upperLimit the upper limit\r\n     * @param lowerLimit lower limit\r\n     * @param motorIndex the motor's index, 0 or 1.\r\n     */\r\n    public setLimit(upperLimit: number, lowerLimit?: number, motorIndex: number = 0) {\r\n        this._physicsPlugin.setLimit(this, upperLimit, lowerLimit, motorIndex);\r\n    }\r\n}\r\n\r\n/**\r\n * Interface for a motor enabled joint\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\r\nexport interface IMotorEnabledJoint {\r\n    /**\r\n     * Physics joint\r\n     */\r\n    physicsJoint: any;\r\n    /**\r\n     * Sets the motor of the motor-enabled joint\r\n     * @param force The force of the motor\r\n     * @param maxForce The maximum force of the motor\r\n     * @param motorIndex The index of the motor\r\n     */\r\n    setMotor(force?: number, maxForce?: number, motorIndex?: number): void;\r\n    /**\r\n     * Sets the limit of the motor\r\n     * @param upperLimit The upper limit of the motor\r\n     * @param lowerLimit The lower limit of the motor\r\n     * @param motorIndex The index of the motor\r\n     */\r\n    setLimit(upperLimit: number, lowerLimit?: number, motorIndex?: number): void;\r\n}\r\n\r\n/**\r\n * Joint data for a Distance-Joint\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\r\nexport interface DistanceJointData extends PhysicsJointData {\r\n    /**\r\n     * Max distance the 2 joint objects can be apart\r\n     */\r\n    maxDistance: number;\r\n    //Oimo - minDistance\r\n    //Cannon - maxForce\r\n}\r\n\r\n/**\r\n * Joint data from a spring joint\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\r\nexport interface SpringJointData extends PhysicsJointData {\r\n    /**\r\n     * Length of the spring\r\n     */\r\n    length: number;\r\n    /**\r\n     * Stiffness of the spring\r\n     */\r\n    stiffness: number;\r\n    /**\r\n     * Damping of the spring\r\n     */\r\n    damping: number;\r\n    /** this callback will be called when applying the force to the impostors. */\r\n    forceApplicationCallback: () => void;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}