{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture.js\";\nimport { Logger } from \"../../Misc/logger.js\";\nimport { ThinEngine } from \"../thinEngine.js\";\n\nThinEngine.prototype.createRenderTargetCubeTexture = function (size, options) {\n  var rtWrapper = this._createHardwareRenderTargetWrapper(false, true, size);\n\n  var fullOptions = __assign({\n    generateMipMaps: true,\n    generateDepthBuffer: true,\n    generateStencilBuffer: false,\n    type: 0,\n    samplingMode: 3,\n    format: 5\n  }, options);\n\n  fullOptions.generateStencilBuffer = fullOptions.generateDepthBuffer && fullOptions.generateStencilBuffer;\n\n  if (fullOptions.type === 1 && !this._caps.textureFloatLinearFiltering) {\n    // if floating point linear (gl.FLOAT) then force to NEAREST_SAMPLINGMODE\n    fullOptions.samplingMode = 1;\n  } else if (fullOptions.type === 2 && !this._caps.textureHalfFloatLinearFiltering) {\n    // if floating point linear (HALF_FLOAT) then force to NEAREST_SAMPLINGMODE\n    fullOptions.samplingMode = 1;\n  }\n\n  var gl = this._gl;\n  var texture = new InternalTexture(this, InternalTextureSource.RenderTarget);\n\n  this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\n\n  var filters = this._getSamplingParameters(fullOptions.samplingMode, fullOptions.generateMipMaps);\n\n  if (fullOptions.type === 1 && !this._caps.textureFloat) {\n    fullOptions.type = 0;\n    Logger.Warn(\"Float textures are not supported. Cube render target forced to TEXTURETYPE_UNESIGNED_BYTE type\");\n  }\n\n  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, filters.mag);\n  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, filters.min);\n  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n  for (var face = 0; face < 6; face++) {\n    gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + face, 0, this._getRGBABufferInternalSizedFormat(fullOptions.type, fullOptions.format), size, size, 0, this._getInternalFormat(fullOptions.format), this._getWebGLTextureType(fullOptions.type), null);\n  } // Create the framebuffer\n\n\n  var framebuffer = gl.createFramebuffer();\n\n  this._bindUnboundFramebuffer(framebuffer);\n\n  rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(fullOptions.generateStencilBuffer, fullOptions.generateDepthBuffer, size, size); // MipMaps\n\n  if (fullOptions.generateMipMaps) {\n    gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\n  } // Unbind\n\n\n  this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\n\n  this._bindUnboundFramebuffer(null);\n\n  rtWrapper._framebuffer = framebuffer;\n  rtWrapper._generateDepthBuffer = fullOptions.generateDepthBuffer;\n  rtWrapper._generateStencilBuffer = fullOptions.generateStencilBuffer;\n  texture.width = size;\n  texture.height = size;\n  texture.isReady = true;\n  texture.isCube = true;\n  texture.samples = 1;\n  texture.generateMipMaps = fullOptions.generateMipMaps;\n  texture.samplingMode = fullOptions.samplingMode;\n  texture.type = fullOptions.type;\n  texture.format = fullOptions.format;\n\n  this._internalTexturesCache.push(texture);\n\n  rtWrapper.setTextures(texture);\n  return rtWrapper;\n};","map":{"version":3,"mappings":";AAAA,SAASA,eAAT,EAA0BC,qBAA1B,QAAuD,6CAAvD;AACA,SAASC,MAAT,QAAuB,sBAAvB;AAEA,SAASC,UAAT,QAA2B,kBAA3B;;AAiBAA,UAAU,CAACC,SAAX,CAAqBC,6BAArB,GAAqD,UAAUC,IAAV,EAAwBC,OAAxB,EAAsE;AACvH,MAAMC,SAAS,GAAG,KAAKC,kCAAL,CAAwC,KAAxC,EAA+C,IAA/C,EAAqDH,IAArD,CAAlB;;AAEA,MAAMI,WAAW;AACbC,mBAAe,EAAE,IADJ;AAEbC,uBAAmB,EAAE,IAFR;AAGbC,yBAAqB,EAAE,KAHV;AAIbC,QAAI,EAAE,CAJO;AAIPC,gBAAU,GAJH;AAIGC;AAJH,KAIGT,OAJH,CAAjB;;AASAG,aAAW,CAACG,qBAAZ,GAAoCH,WAAW,CAACE,mBAAZ,IAAmCF,WAAW,CAACG,qBAAnF;;AAEA,MAAIH,WAAW,CAACI,IAAZ,KAAqB,CAArB,IAAqB,MAAUG,KAAV,CAAUC,2BAAnC,EAAoE;AAChE;AACAR,eAAW,CAACK,YAAZ,GAA2B,CAA3B;AACH,GAHD,MAGO,IAAIL,WAAW,CAACI,IAAZ,KAAqB,CAArB,IAAqB,MAAUG,KAAV,CAAUE,+BAAnC,EAAyE;AAC5E;AACAT,eAAW,CAACK,YAAZ,GAA2B,CAA3B;AACH;;AACD,MAAMK,EAAE,GAAG,KAAKC,GAAhB;AAEA,MAAMC,OAAO,GAAG,IAAItB,eAAJ,CAAoB,IAApB,EAA0BC,qBAAqB,CAACsB,YAAhD,CAAhB;;AACA,OAAKC,oBAAL,CAA0BJ,EAAE,CAACK,gBAA7B,EAA+CH,OAA/C,EAAwD,IAAxD;;AAEA,MAAMI,OAAO,GAAG,KAAKC,sBAAL,CAA4BjB,WAAW,CAACK,YAAxC,EAAsDL,WAAW,CAACC,eAAlE,CAAhB;;AAEA,MAAID,WAAW,CAACI,IAAZ,KAAqB,CAArB,IAAqB,MAAUG,KAAV,CAAUW,YAAnC,EAAwD;AACpDlB,eAAW,CAACI,IAAZ,GAAmB,CAAnB;AACAZ,UAAM,CAAC2B,IAAP,CAAY,gGAAZ;AACH;;AAEDT,IAAE,CAACU,aAAH,CAAiBV,EAAE,CAACK,gBAApB,EAAsCL,EAAE,CAACW,kBAAzC,EAA6DL,OAAO,CAACM,GAArE;AACAZ,IAAE,CAACU,aAAH,CAAiBV,EAAE,CAACK,gBAApB,EAAsCL,EAAE,CAACa,kBAAzC,EAA6DP,OAAO,CAACQ,GAArE;AACAd,IAAE,CAACU,aAAH,CAAiBV,EAAE,CAACK,gBAApB,EAAsCL,EAAE,CAACe,cAAzC,EAAyDf,EAAE,CAACgB,aAA5D;AACAhB,IAAE,CAACU,aAAH,CAAiBV,EAAE,CAACK,gBAApB,EAAsCL,EAAE,CAACiB,cAAzC,EAAyDjB,EAAE,CAACgB,aAA5D;;AAEA,OAAK,IAAIE,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAG,CAA1B,EAA6BA,IAAI,EAAjC,EAAqC;AACjClB,MAAE,CAACmB,UAAH,CACInB,EAAE,CAACoB,2BAAH,GAAiCF,IADrC,EAEI,CAFJ,EAGI,KAAKG,iCAAL,CAAuC/B,WAAW,CAACI,IAAnD,EAAyDJ,WAAW,CAACM,MAArE,CAHJ,EAIIV,IAJJ,EAKIA,IALJ,EAMI,CANJ,EAOI,KAAKoC,kBAAL,CAAwBhC,WAAW,CAACM,MAApC,CAPJ,EAQI,KAAK2B,oBAAL,CAA0BjC,WAAW,CAACI,IAAtC,CARJ,EASI,IATJ;AAWH,GAlDsH,CAoDvH;;;AACA,MAAM8B,WAAW,GAAGxB,EAAE,CAACyB,iBAAH,EAApB;;AACA,OAAKC,uBAAL,CAA6BF,WAA7B;;AAEApC,WAAS,CAACuC,mBAAV,GAAgC,KAAKC,iCAAL,CAAuCtC,WAAW,CAACG,qBAAnD,EAA0EH,WAAW,CAACE,mBAAtF,EAA2GN,IAA3G,EAAiHA,IAAjH,CAAhC,CAxDuH,CA0DvH;;AACA,MAAII,WAAW,CAACC,eAAhB,EAAiC;AAC7BS,MAAE,CAAC6B,cAAH,CAAkB7B,EAAE,CAACK,gBAArB;AACH,GA7DsH,CA+DvH;;;AACA,OAAKD,oBAAL,CAA0BJ,EAAE,CAACK,gBAA7B,EAA+C,IAA/C;;AACA,OAAKqB,uBAAL,CAA6B,IAA7B;;AAEAtC,WAAS,CAAC0C,YAAV,GAAyBN,WAAzB;AACApC,WAAS,CAAC2C,oBAAV,GAAiCzC,WAAW,CAACE,mBAA7C;AACAJ,WAAS,CAAC4C,sBAAV,GAAmC1C,WAAW,CAACG,qBAA/C;AAEAS,SAAO,CAAC+B,KAAR,GAAgB/C,IAAhB;AACAgB,SAAO,CAACgC,MAAR,GAAiBhD,IAAjB;AACAgB,SAAO,CAACiC,OAAR,GAAkB,IAAlB;AACAjC,SAAO,CAACkC,MAAR,GAAiB,IAAjB;AACAlC,SAAO,CAACmC,OAAR,GAAkB,CAAlB;AACAnC,SAAO,CAACX,eAAR,GAA0BD,WAAW,CAACC,eAAtC;AACAW,SAAO,CAACP,YAAR,GAAuBL,WAAW,CAACK,YAAnC;AACAO,SAAO,CAACR,IAAR,GAAeJ,WAAW,CAACI,IAA3B;AACAQ,SAAO,CAACN,MAAR,GAAiBN,WAAW,CAACM,MAA7B;;AAEA,OAAK0C,sBAAL,CAA4BC,IAA5B,CAAiCrC,OAAjC;;AACAd,WAAS,CAACoD,WAAV,CAAsBtC,OAAtB;AAEA,SAAOd,SAAP;AACH,CArFD","names":["InternalTexture","InternalTextureSource","Logger","ThinEngine","prototype","createRenderTargetCubeTexture","size","options","rtWrapper","_createHardwareRenderTargetWrapper","fullOptions","generateMipMaps","generateDepthBuffer","generateStencilBuffer","type","samplingMode","format","_caps","textureFloatLinearFiltering","textureHalfFloatLinearFiltering","gl","_gl","texture","RenderTarget","_bindTextureDirectly","TEXTURE_CUBE_MAP","filters","_getSamplingParameters","textureFloat","Warn","texParameteri","TEXTURE_MAG_FILTER","mag","TEXTURE_MIN_FILTER","min","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","face","texImage2D","TEXTURE_CUBE_MAP_POSITIVE_X","_getRGBABufferInternalSizedFormat","_getInternalFormat","_getWebGLTextureType","framebuffer","createFramebuffer","_bindUnboundFramebuffer","_depthStencilBuffer","_setupFramebufferDepthAttachments","generateMipmap","_framebuffer","_generateDepthBuffer","_generateStencilBuffer","width","height","isReady","isCube","samples","_internalTexturesCache","push","setTextures"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/Extensions/engine.renderTargetCube.ts"],"sourcesContent":["import { InternalTexture, InternalTextureSource } from \"../../Materials/Textures/internalTexture\";\r\nimport { Logger } from \"../../Misc/logger\";\r\nimport { Constants } from \"../constants\";\r\nimport { ThinEngine } from \"../thinEngine\";\r\nimport type { RenderTargetWrapper } from \"../renderTargetWrapper\";\r\nimport type { WebGLRenderTargetWrapper } from \"../WebGL/webGLRenderTargetWrapper\";\r\nimport type { RenderTargetCreationOptions } from \"../../Materials/Textures/textureCreationOptions\";\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n    export interface ThinEngine {\r\n        /**\r\n         * Creates a new render target cube wrapper\r\n         * @param size defines the size of the texture\r\n         * @param options defines the options used to create the texture\r\n         * @returns a new render target cube wrapper\r\n         */\r\n        createRenderTargetCubeTexture(size: number, options?: Partial<RenderTargetCreationOptions>): RenderTargetWrapper;\r\n    }\r\n}\r\n\r\nThinEngine.prototype.createRenderTargetCubeTexture = function (size: number, options?: Partial<RenderTargetCreationOptions>): RenderTargetWrapper {\r\n    const rtWrapper = this._createHardwareRenderTargetWrapper(false, true, size) as WebGLRenderTargetWrapper;\r\n\r\n    const fullOptions = {\r\n        generateMipMaps: true,\r\n        generateDepthBuffer: true,\r\n        generateStencilBuffer: false,\r\n        type: Constants.TEXTURETYPE_UNSIGNED_INT,\r\n        samplingMode: Constants.TEXTURE_TRILINEAR_SAMPLINGMODE,\r\n        format: Constants.TEXTUREFORMAT_RGBA,\r\n        ...options,\r\n    };\r\n    fullOptions.generateStencilBuffer = fullOptions.generateDepthBuffer && fullOptions.generateStencilBuffer;\r\n\r\n    if (fullOptions.type === Constants.TEXTURETYPE_FLOAT && !this._caps.textureFloatLinearFiltering) {\r\n        // if floating point linear (gl.FLOAT) then force to NEAREST_SAMPLINGMODE\r\n        fullOptions.samplingMode = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n    } else if (fullOptions.type === Constants.TEXTURETYPE_HALF_FLOAT && !this._caps.textureHalfFloatLinearFiltering) {\r\n        // if floating point linear (HALF_FLOAT) then force to NEAREST_SAMPLINGMODE\r\n        fullOptions.samplingMode = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n    }\r\n    const gl = this._gl;\r\n\r\n    const texture = new InternalTexture(this, InternalTextureSource.RenderTarget);\r\n    this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\r\n\r\n    const filters = this._getSamplingParameters(fullOptions.samplingMode, fullOptions.generateMipMaps);\r\n\r\n    if (fullOptions.type === Constants.TEXTURETYPE_FLOAT && !this._caps.textureFloat) {\r\n        fullOptions.type = Constants.TEXTURETYPE_UNSIGNED_INT;\r\n        Logger.Warn(\"Float textures are not supported. Cube render target forced to TEXTURETYPE_UNESIGNED_BYTE type\");\r\n    }\r\n\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, filters.mag);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, filters.min);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n    for (let face = 0; face < 6; face++) {\r\n        gl.texImage2D(\r\n            gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,\r\n            0,\r\n            this._getRGBABufferInternalSizedFormat(fullOptions.type, fullOptions.format),\r\n            size,\r\n            size,\r\n            0,\r\n            this._getInternalFormat(fullOptions.format),\r\n            this._getWebGLTextureType(fullOptions.type),\r\n            null\r\n        );\r\n    }\r\n\r\n    // Create the framebuffer\r\n    const framebuffer = gl.createFramebuffer();\r\n    this._bindUnboundFramebuffer(framebuffer);\r\n\r\n    rtWrapper._depthStencilBuffer = this._setupFramebufferDepthAttachments(fullOptions.generateStencilBuffer, fullOptions.generateDepthBuffer, size, size);\r\n\r\n    // MipMaps\r\n    if (fullOptions.generateMipMaps) {\r\n        gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\r\n    }\r\n\r\n    // Unbind\r\n    this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\r\n    this._bindUnboundFramebuffer(null);\r\n\r\n    rtWrapper._framebuffer = framebuffer;\r\n    rtWrapper._generateDepthBuffer = fullOptions.generateDepthBuffer;\r\n    rtWrapper._generateStencilBuffer = fullOptions.generateStencilBuffer;\r\n\r\n    texture.width = size;\r\n    texture.height = size;\r\n    texture.isReady = true;\r\n    texture.isCube = true;\r\n    texture.samples = 1;\r\n    texture.generateMipMaps = fullOptions.generateMipMaps;\r\n    texture.samplingMode = fullOptions.samplingMode;\r\n    texture.type = fullOptions.type;\r\n    texture.format = fullOptions.format;\r\n\r\n    this._internalTexturesCache.push(texture);\r\n    rtWrapper.setTextures(texture);\r\n\r\n    return rtWrapper;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}