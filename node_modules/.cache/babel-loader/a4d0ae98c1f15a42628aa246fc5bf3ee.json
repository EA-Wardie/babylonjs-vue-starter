{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from \"../nodeMaterialBlock.js\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../Misc/typeStore.js\";\n/**\n * Operations supported by the ConditionalBlock block\n */\n\nexport var ConditionalBlockConditions;\n\n(function (ConditionalBlockConditions) {\n  /** Equal */\n  ConditionalBlockConditions[ConditionalBlockConditions[\"Equal\"] = 0] = \"Equal\";\n  /** NotEqual */\n\n  ConditionalBlockConditions[ConditionalBlockConditions[\"NotEqual\"] = 1] = \"NotEqual\";\n  /** LessThan */\n\n  ConditionalBlockConditions[ConditionalBlockConditions[\"LessThan\"] = 2] = \"LessThan\";\n  /** GreaterThan */\n\n  ConditionalBlockConditions[ConditionalBlockConditions[\"GreaterThan\"] = 3] = \"GreaterThan\";\n  /** LessOrEqual */\n\n  ConditionalBlockConditions[ConditionalBlockConditions[\"LessOrEqual\"] = 4] = \"LessOrEqual\";\n  /** GreaterOrEqual */\n\n  ConditionalBlockConditions[ConditionalBlockConditions[\"GreaterOrEqual\"] = 5] = \"GreaterOrEqual\";\n  /** Logical Exclusive OR */\n\n  ConditionalBlockConditions[ConditionalBlockConditions[\"Xor\"] = 6] = \"Xor\";\n  /** Logical Or */\n\n  ConditionalBlockConditions[ConditionalBlockConditions[\"Or\"] = 7] = \"Or\";\n  /** Logical And */\n\n  ConditionalBlockConditions[ConditionalBlockConditions[\"And\"] = 8] = \"And\";\n})(ConditionalBlockConditions || (ConditionalBlockConditions = {}));\n/**\n * Block used to apply conditional operation between floats\n * @since 5.0.0\n */\n\n\nvar ConditionalBlock =\n/** @class */\nfunction (_super) {\n  __extends(ConditionalBlock, _super);\n  /**\n   * Creates a new ConditionalBlock\n   * @param name defines the block name\n   */\n\n\n  function ConditionalBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Neutral) || this;\n    /**\n     * Gets or sets the condition applied by the block\n     */\n\n\n    _this.condition = ConditionalBlockConditions.LessThan;\n\n    _this.registerInput(\"a\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    _this.registerInput(\"b\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    _this.registerInput(\"true\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\n\n    _this.registerInput(\"false\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n\n    _this._linkConnectionTypes(2, 3);\n\n    _this._outputs[0]._typeConnectionSource = _this._inputs[2];\n    _this._outputs[0]._defaultConnectionPointType = NodeMaterialBlockConnectionPointTypes.Float;\n    return _this;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  ConditionalBlock.prototype.getClassName = function () {\n    return \"ConditionalBlock\";\n  };\n\n  Object.defineProperty(ConditionalBlock.prototype, \"a\", {\n    /**\n     * Gets the first operand component\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConditionalBlock.prototype, \"b\", {\n    /**\n     * Gets the second operand component\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConditionalBlock.prototype, \"true\", {\n    /**\n     * Gets the value to return if condition is true\n     */\n    get: function get() {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConditionalBlock.prototype, \"false\", {\n    /**\n     * Gets the value to return if condition is false\n     */\n    get: function get() {\n      return this._inputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ConditionalBlock.prototype, \"output\", {\n    /**\n     * Gets the output component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ConditionalBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var output = this._outputs[0];\n    var trueStatement = this[\"true\"].isConnected ? this[\"true\"].associatedVariableName : \"1.0\";\n    var falseStatement = this[\"false\"].isConnected ? this[\"false\"].associatedVariableName : \"0.0\";\n\n    switch (this.condition) {\n      case ConditionalBlockConditions.Equal:\n        {\n          state.compilationString += this._declareOutput(output, state) + \" = \".concat(this.a.associatedVariableName, \" == \").concat(this.b.associatedVariableName, \" ? \").concat(trueStatement, \" : \").concat(falseStatement, \";\\r\\n\");\n          break;\n        }\n\n      case ConditionalBlockConditions.NotEqual:\n        {\n          state.compilationString += this._declareOutput(output, state) + \" = \".concat(this.a.associatedVariableName, \" != \").concat(this.b.associatedVariableName, \" ? \").concat(trueStatement, \" : \").concat(falseStatement, \";\\r\\n\");\n          break;\n        }\n\n      case ConditionalBlockConditions.LessThan:\n        {\n          state.compilationString += this._declareOutput(output, state) + \" = \".concat(this.a.associatedVariableName, \" < \").concat(this.b.associatedVariableName, \" ? \").concat(trueStatement, \" : \").concat(falseStatement, \";\\r\\n\");\n          break;\n        }\n\n      case ConditionalBlockConditions.LessOrEqual:\n        {\n          state.compilationString += this._declareOutput(output, state) + \" = \".concat(this.a.associatedVariableName, \" <= \").concat(this.b.associatedVariableName, \" ? \").concat(trueStatement, \" : \").concat(falseStatement, \";\\r\\n\");\n          break;\n        }\n\n      case ConditionalBlockConditions.GreaterThan:\n        {\n          state.compilationString += this._declareOutput(output, state) + \" = \".concat(this.a.associatedVariableName, \" > \").concat(this.b.associatedVariableName, \" ? \").concat(trueStatement, \" : \").concat(falseStatement, \";\\r\\n\");\n          break;\n        }\n\n      case ConditionalBlockConditions.GreaterOrEqual:\n        {\n          state.compilationString += this._declareOutput(output, state) + \" = \".concat(this.a.associatedVariableName, \" >= \").concat(this.b.associatedVariableName, \" ? \").concat(trueStatement, \" : \").concat(falseStatement, \";\\r\\n\");\n          break;\n        }\n\n      case ConditionalBlockConditions.Xor:\n        {\n          state.compilationString += this._declareOutput(output, state) + \" = (mod(\".concat(this.a.associatedVariableName, \" + \").concat(this.b.associatedVariableName, \", 2.0) > 0.0) ? \").concat(trueStatement, \" : \").concat(falseStatement, \";\\r\\n\");\n          break;\n        }\n\n      case ConditionalBlockConditions.Or:\n        {\n          state.compilationString += this._declareOutput(output, state) + \" = (min(\".concat(this.a.associatedVariableName, \" + \").concat(this.b.associatedVariableName, \", 1.0) > 0.0) ? \").concat(trueStatement, \" : \").concat(falseStatement, \";\\r\\n\");\n          break;\n        }\n\n      case ConditionalBlockConditions.And:\n        {\n          state.compilationString += this._declareOutput(output, state) + \" = (\".concat(this.a.associatedVariableName, \" * \").concat(this.b.associatedVariableName, \" > 0.0)  ? \").concat(trueStatement, \" : \").concat(falseStatement, \";\\r\\n\");\n          break;\n        }\n    }\n\n    return this;\n  };\n\n  ConditionalBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    serializationObject.condition = this.condition;\n    return serializationObject;\n  };\n\n  ConditionalBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    this.condition = serializationObject.condition;\n  };\n\n  ConditionalBlock.prototype._dumpPropertiesCode = function () {\n    var codeString = _super.prototype._dumpPropertiesCode.call(this) + \"\".concat(this._codeVariableName, \".condition = BABYLON.ConditionalBlockConditions.\").concat(ConditionalBlockConditions[this.condition], \";\\r\\n\");\n    return codeString;\n  };\n\n  return ConditionalBlock;\n}(NodeMaterialBlock);\n\nexport { ConditionalBlock };\nRegisterClass(\"BABYLON.ConditionalBlock\", ConditionalBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlock","NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","ConditionalBlockConditions","__extends","name","_super","Neutral","_this","LessThan","registerInput","Float","AutoDetect","registerOutput","BasedOnInput","_linkConnectionTypes","_outputs","_typeConnectionSource","_inputs","_defaultConnectionPointType","ConditionalBlock","Object","state","_buildBlock","call","output","trueStatement","isConnected","associatedVariableName","falseStatement","condition","Equal","compilationString","_declareOutput","a","concat","b","NotEqual","LessOrEqual","GreaterThan","GreaterOrEqual","Xor","Or","And","serializationObject","serialize","scene","rootUrl","_deserialize","codeString","_dumpPropertiesCode","_codeVariableName"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/Materials/Node/Blocks/conditionalBlock.ts"],"sourcesContent":["import { NodeMaterialBlock } from \"../nodeMaterialBlock\";\r\nimport { NodeMaterialBlockConnectionPointTypes } from \"../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../nodeMaterialBuildState\";\r\nimport type { NodeMaterialConnectionPoint } from \"../nodeMaterialBlockConnectionPoint\";\r\nimport { NodeMaterialBlockTargets } from \"../Enums/nodeMaterialBlockTargets\";\r\nimport { RegisterClass } from \"../../../Misc/typeStore\";\r\nimport type { Scene } from \"../../../scene\";\r\n\r\n/**\r\n * Operations supported by the ConditionalBlock block\r\n */\r\nexport enum ConditionalBlockConditions {\r\n    /** Equal */\r\n    Equal,\r\n    /** NotEqual */\r\n    NotEqual,\r\n    /** LessThan */\r\n    LessThan,\r\n    /** GreaterThan */\r\n    GreaterThan,\r\n    /** LessOrEqual */\r\n    LessOrEqual,\r\n    /** GreaterOrEqual */\r\n    GreaterOrEqual,\r\n    /** Logical Exclusive OR */\r\n    Xor,\r\n    /** Logical Or */\r\n    Or,\r\n    /** Logical And */\r\n    And,\r\n}\r\n\r\n/**\r\n * Block used to apply conditional operation between floats\r\n * @since 5.0.0\r\n */\r\nexport class ConditionalBlock extends NodeMaterialBlock {\r\n    /**\r\n     * Gets or sets the condition applied by the block\r\n     */\r\n    public condition = ConditionalBlockConditions.LessThan;\r\n\r\n    /**\r\n     * Creates a new ConditionalBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name, NodeMaterialBlockTargets.Neutral);\r\n\r\n        this.registerInput(\"a\", NodeMaterialBlockConnectionPointTypes.Float);\r\n        this.registerInput(\"b\", NodeMaterialBlockConnectionPointTypes.Float);\r\n        this.registerInput(\"true\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\r\n        this.registerInput(\"false\", NodeMaterialBlockConnectionPointTypes.AutoDetect, true);\r\n        this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\r\n\r\n        this._linkConnectionTypes(2, 3);\r\n        this._outputs[0]._typeConnectionSource = this._inputs[2];\r\n        this._outputs[0]._defaultConnectionPointType = NodeMaterialBlockConnectionPointTypes.Float;\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ConditionalBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the first operand component\r\n     */\r\n    public get a(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the second operand component\r\n     */\r\n    public get b(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the value to return if condition is true\r\n     */\r\n    public get true(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the value to return if condition is false\r\n     */\r\n    public get false(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the output component\r\n     */\r\n    public get output(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        const output = this._outputs[0];\r\n\r\n        const trueStatement = this.true.isConnected ? this.true.associatedVariableName : \"1.0\";\r\n        const falseStatement = this.false.isConnected ? this.false.associatedVariableName : \"0.0\";\r\n\r\n        switch (this.condition) {\r\n            case ConditionalBlockConditions.Equal: {\r\n                state.compilationString +=\r\n                    this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} == ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\r\\n`;\r\n                break;\r\n            }\r\n            case ConditionalBlockConditions.NotEqual: {\r\n                state.compilationString +=\r\n                    this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} != ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\r\\n`;\r\n                break;\r\n            }\r\n            case ConditionalBlockConditions.LessThan: {\r\n                state.compilationString +=\r\n                    this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} < ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\r\\n`;\r\n                break;\r\n            }\r\n            case ConditionalBlockConditions.LessOrEqual: {\r\n                state.compilationString +=\r\n                    this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} <= ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\r\\n`;\r\n                break;\r\n            }\r\n            case ConditionalBlockConditions.GreaterThan: {\r\n                state.compilationString +=\r\n                    this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} > ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\r\\n`;\r\n                break;\r\n            }\r\n            case ConditionalBlockConditions.GreaterOrEqual: {\r\n                state.compilationString +=\r\n                    this._declareOutput(output, state) + ` = ${this.a.associatedVariableName} >= ${this.b.associatedVariableName} ? ${trueStatement} : ${falseStatement};\\r\\n`;\r\n                break;\r\n            }\r\n            case ConditionalBlockConditions.Xor: {\r\n                state.compilationString +=\r\n                    this._declareOutput(output, state) +\r\n                    ` = (mod(${this.a.associatedVariableName} + ${this.b.associatedVariableName}, 2.0) > 0.0) ? ${trueStatement} : ${falseStatement};\\r\\n`;\r\n                break;\r\n            }\r\n            case ConditionalBlockConditions.Or: {\r\n                state.compilationString +=\r\n                    this._declareOutput(output, state) +\r\n                    ` = (min(${this.a.associatedVariableName} + ${this.b.associatedVariableName}, 1.0) > 0.0) ? ${trueStatement} : ${falseStatement};\\r\\n`;\r\n                break;\r\n            }\r\n            case ConditionalBlockConditions.And: {\r\n                state.compilationString +=\r\n                    this._declareOutput(output, state) +\r\n                    ` = (${this.a.associatedVariableName} * ${this.b.associatedVariableName} > 0.0)  ? ${trueStatement} : ${falseStatement};\\r\\n`;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    public serialize(): any {\r\n        const serializationObject = super.serialize();\r\n\r\n        serializationObject.condition = this.condition;\r\n\r\n        return serializationObject;\r\n    }\r\n\r\n    public _deserialize(serializationObject: any, scene: Scene, rootUrl: string) {\r\n        super._deserialize(serializationObject, scene, rootUrl);\r\n\r\n        this.condition = serializationObject.condition;\r\n    }\r\n\r\n    protected _dumpPropertiesCode() {\r\n        const codeString =\r\n            super._dumpPropertiesCode() + `${this._codeVariableName}.condition = BABYLON.ConditionalBlockConditions.${ConditionalBlockConditions[this.condition]};\\r\\n`;\r\n        return codeString;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ConditionalBlock\", ConditionalBlock);\r\n"]},"metadata":{},"sourceType":"module"}