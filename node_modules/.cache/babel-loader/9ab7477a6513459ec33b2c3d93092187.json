{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { __decorate, __extends } from \"tslib\";\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport { Vector2, Vector3, TmpVectors } from \"../../../Maths/math.vector.js\";\nimport { Texture } from \"../../../Materials/Textures/texture.js\";\nimport { DynamicTexture } from \"../../../Materials/Textures/dynamicTexture.js\";\nimport { PostProcess } from \"../../../PostProcesses/postProcess.js\";\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline.js\";\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect.js\";\nimport { PassPostProcess } from \"../../../PostProcesses/passPostProcess.js\";\nimport { BlurPostProcess } from \"../../../PostProcesses/blurPostProcess.js\";\nimport { serialize } from \"../../../Misc/decorators.js\";\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent.js\";\nimport \"../../../Shaders/ssao.fragment.js\";\nimport \"../../../Shaders/ssaoCombine.fragment.js\";\n/**\n * Render pipeline to produce ssao effect\n */\n\nvar SSAORenderingPipeline =\n/** @class */\nfunction (_super) {\n  __extends(SSAORenderingPipeline, _super);\n  /**\n   * @constructor\n   * @param name - The rendering pipeline name\n   * @param scene - The scene linked to this pipeline\n   * @param ratio - The size of the postprocesses. Can be a number shared between passes or an object for more precision: { ssaoRatio: 0.5, combineRatio: 1.0 }\n   * @param cameras - The array of cameras that the rendering pipeline will be attached to\n   */\n\n\n  function SSAORenderingPipeline(name, scene, ratio, cameras) {\n    var _this = _super.call(this, scene.getEngine(), name) || this; // Members\n\n    /**\n     * @ignore\n     * The PassPostProcess id in the pipeline that contains the original scene color\n     */\n\n\n    _this.SSAOOriginalSceneColorEffect = \"SSAOOriginalSceneColorEffect\";\n    /**\n     * @ignore\n     * The SSAO PostProcess id in the pipeline\n     */\n\n    _this.SSAORenderEffect = \"SSAORenderEffect\";\n    /**\n     * @ignore\n     * The horizontal blur PostProcess id in the pipeline\n     */\n\n    _this.SSAOBlurHRenderEffect = \"SSAOBlurHRenderEffect\";\n    /**\n     * @ignore\n     * The vertical blur PostProcess id in the pipeline\n     */\n\n    _this.SSAOBlurVRenderEffect = \"SSAOBlurVRenderEffect\";\n    /**\n     * @ignore\n     * The PostProcess id in the pipeline that combines the SSAO-Blur output with the original scene color (SSAOOriginalSceneColorEffect)\n     */\n\n    _this.SSAOCombineRenderEffect = \"SSAOCombineRenderEffect\";\n    /**\n     * The output strength of the SSAO post-process. Default value is 1.0.\n     */\n\n    _this.totalStrength = 1.0;\n    /**\n     * The radius around the analyzed pixel used by the SSAO post-process. Default value is 0.0006\n     */\n\n    _this.radius = 0.0001;\n    /**\n     * Related to fallOff, used to interpolate SSAO samples (first interpolate function input) based on the occlusion difference of each pixel\n     * Must not be equal to fallOff and superior to fallOff.\n     * Default value is 0.0075\n     */\n\n    _this.area = 0.0075;\n    /**\n     * Related to area, used to interpolate SSAO samples (second interpolate function input) based on the occlusion difference of each pixel\n     * Must not be equal to area and inferior to area.\n     * Default value is 0.000001\n     */\n\n    _this.fallOff = 0.000001;\n    /**\n     * The base color of the SSAO post-process\n     * The final result is \"base + ssao\" between [0, 1]\n     */\n\n    _this.base = 0.5;\n    _this._firstUpdate = true;\n    _this._scene = scene; // Set up assets\n\n    _this._createRandomTexture();\n\n    var ssaoRatio = ratio.ssaoRatio || ratio;\n    var combineRatio = ratio.combineRatio || ratio;\n    _this._originalColorPostProcess = new PassPostProcess(\"SSAOOriginalSceneColor\", combineRatio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false);\n\n    _this._createSSAOPostProcess(ssaoRatio);\n\n    _this._createBlurPostProcess(ssaoRatio);\n\n    _this._createSSAOCombinePostProcess(combineRatio); // Set up pipeline\n\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOOriginalSceneColorEffect, function () {\n      return _this._originalColorPostProcess;\n    }, true));\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAORenderEffect, function () {\n      return _this._ssaoPostProcess;\n    }, true));\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOBlurHRenderEffect, function () {\n      return _this._blurHPostProcess;\n    }, true));\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOBlurVRenderEffect, function () {\n      return _this._blurVPostProcess;\n    }, true));\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOCombineRenderEffect, function () {\n      return _this._ssaoCombinePostProcess;\n    }, true)); // Finish\n\n\n    scene.postProcessRenderPipelineManager.addPipeline(_this);\n\n    if (cameras) {\n      scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(SSAORenderingPipeline.prototype, \"scene\", {\n    /**\n     * Gets active scene\n     */\n    get: function get() {\n      return this._scene;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * @param cameras\n   * @param unique\n   * @hidden\n   */\n\n  SSAORenderingPipeline.prototype._attachCameras = function (cameras, unique) {\n    _super.prototype._attachCameras.call(this, cameras, unique);\n\n    for (var _i = 0, _a = this._cameras; _i < _a.length; _i++) {\n      var camera = _a[_i];\n\n      this._scene.enableDepthRenderer(camera).getDepthMap(); // Force depth renderer \"on\"\n\n    }\n  }; // Public Methods\n\n  /**\n   * Get the class name\n   * @returns \"SSAORenderingPipeline\"\n   */\n\n\n  SSAORenderingPipeline.prototype.getClassName = function () {\n    return \"SSAORenderingPipeline\";\n  };\n  /**\n   * Removes the internal pipeline assets and detaches the pipeline from the scene cameras\n   * @param disableDepthRender\n   */\n\n\n  SSAORenderingPipeline.prototype.dispose = function (disableDepthRender) {\n    if (disableDepthRender === void 0) {\n      disableDepthRender = false;\n    }\n\n    for (var i = 0; i < this._scene.cameras.length; i++) {\n      var camera = this._scene.cameras[i];\n\n      this._originalColorPostProcess.dispose(camera);\n\n      this._ssaoPostProcess.dispose(camera);\n\n      this._blurHPostProcess.dispose(camera);\n\n      this._blurVPostProcess.dispose(camera);\n\n      this._ssaoCombinePostProcess.dispose(camera);\n    }\n\n    this._randomTexture.dispose();\n\n    if (disableDepthRender) {\n      this._scene.disableDepthRenderer();\n    }\n\n    this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\n\n    _super.prototype.dispose.call(this);\n  }; // Private Methods\n\n\n  SSAORenderingPipeline.prototype._createBlurPostProcess = function (ratio) {\n    var _this = this;\n\n    var size = 16;\n    this._blurHPostProcess = new BlurPostProcess(\"BlurH\", new Vector2(1, 0), size, ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, 0);\n    this._blurVPostProcess = new BlurPostProcess(\"BlurV\", new Vector2(0, 1), size, ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, 0);\n\n    this._blurHPostProcess.onActivateObservable.add(function () {\n      var dw = _this._blurHPostProcess.width / _this._scene.getEngine().getRenderWidth();\n\n      _this._blurHPostProcess.kernel = size * dw;\n    });\n\n    this._blurVPostProcess.onActivateObservable.add(function () {\n      var dw = _this._blurVPostProcess.height / _this._scene.getEngine().getRenderHeight();\n\n      _this._blurVPostProcess.kernel = size * dw;\n    });\n  };\n  /** @hidden */\n\n\n  SSAORenderingPipeline.prototype._rebuild = function () {\n    this._firstUpdate = true;\n\n    _super.prototype._rebuild.call(this);\n  };\n\n  SSAORenderingPipeline.prototype._createSSAOPostProcess = function (ratio) {\n    var _this = this;\n\n    var numSamples = 16;\n    var sampleSphere = [0.5381, 0.1856, -0.4319, 0.1379, 0.2486, 0.443, 0.3371, 0.5679, -0.0057, -0.6999, -0.0451, -0.0019, 0.0689, -0.1598, -0.8547, 0.056, 0.0069, -0.1843, -0.0146, 0.1402, 0.0762, 0.01, -0.1924, -0.0344, -0.3577, -0.5301, -0.4358, -0.3169, 0.1063, 0.0158, 0.0103, -0.5869, 0.0046, -0.0897, -0.494, 0.3287, 0.7119, -0.0154, -0.0918, -0.0533, 0.0596, -0.5411, 0.0352, -0.0631, 0.546, -0.4776, 0.2847, -0.0271];\n    var samplesFactor = 1.0 / numSamples;\n    this._ssaoPostProcess = new PostProcess(\"ssao\", \"ssao\", [\"sampleSphere\", \"samplesFactor\", \"randTextureTiles\", \"totalStrength\", \"radius\", \"area\", \"fallOff\", \"base\", \"range\", \"viewport\"], [\"randomSampler\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, \"#define SAMPLES \" + numSamples + \"\\n#define SSAO\");\n    this._ssaoPostProcess.externalTextureSamplerBinding = true;\n\n    this._ssaoPostProcess.onApply = function (effect) {\n      if (_this._firstUpdate) {\n        effect.setArray3(\"sampleSphere\", sampleSphere);\n        effect.setFloat(\"samplesFactor\", samplesFactor);\n        effect.setFloat(\"randTextureTiles\", 4.0);\n      }\n\n      effect.setFloat(\"totalStrength\", _this.totalStrength);\n      effect.setFloat(\"radius\", _this.radius);\n      effect.setFloat(\"area\", _this.area);\n      effect.setFloat(\"fallOff\", _this.fallOff);\n      effect.setFloat(\"base\", _this.base);\n      effect.setTexture(\"textureSampler\", _this._scene.enableDepthRenderer(_this._scene.activeCamera).getDepthMap());\n      effect.setTexture(\"randomSampler\", _this._randomTexture);\n    };\n  };\n\n  SSAORenderingPipeline.prototype._createSSAOCombinePostProcess = function (ratio) {\n    var _this = this;\n\n    this._ssaoCombinePostProcess = new PostProcess(\"ssaoCombine\", \"ssaoCombine\", [], [\"originalColor\", \"viewport\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false);\n\n    this._ssaoCombinePostProcess.onApply = function (effect) {\n      effect.setVector4(\"viewport\", TmpVectors.Vector4[0].copyFromFloats(0, 0, 1.0, 1.0));\n      effect.setTextureFromPostProcess(\"originalColor\", _this._originalColorPostProcess);\n    };\n  };\n\n  SSAORenderingPipeline.prototype._createRandomTexture = function () {\n    var size = 512;\n    this._randomTexture = new DynamicTexture(\"SSAORandomTexture\", size, this._scene, false, Texture.TRILINEAR_SAMPLINGMODE);\n    this._randomTexture.wrapU = Texture.WRAP_ADDRESSMODE;\n    this._randomTexture.wrapV = Texture.WRAP_ADDRESSMODE;\n\n    var context = this._randomTexture.getContext();\n\n    var rand = function rand(min, max) {\n      return Math.random() * (max - min) + min;\n    };\n\n    var randVector = Vector3.Zero();\n\n    for (var x = 0; x < size; x++) {\n      for (var y = 0; y < size; y++) {\n        randVector.x = Math.floor(rand(-1.0, 1.0) * 255);\n        randVector.y = Math.floor(rand(-1.0, 1.0) * 255);\n        randVector.z = Math.floor(rand(-1.0, 1.0) * 255);\n        context.fillStyle = \"rgb(\" + randVector.x + \", \" + randVector.y + \", \" + randVector.z + \")\";\n        context.fillRect(x, y, 1, 1);\n      }\n    }\n\n    this._randomTexture.update(false);\n  };\n\n  __decorate([serialize()], SSAORenderingPipeline.prototype, \"totalStrength\", void 0);\n\n  __decorate([serialize()], SSAORenderingPipeline.prototype, \"radius\", void 0);\n\n  __decorate([serialize()], SSAORenderingPipeline.prototype, \"area\", void 0);\n\n  __decorate([serialize()], SSAORenderingPipeline.prototype, \"fallOff\", void 0);\n\n  __decorate([serialize()], SSAORenderingPipeline.prototype, \"base\", void 0);\n\n  return SSAORenderingPipeline;\n}(PostProcessRenderPipeline);\n\nexport { SSAORenderingPipeline };","map":{"version":3,"mappings":"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","names":["Vector2","Vector3","TmpVectors","Texture","DynamicTexture","PostProcess","PostProcessRenderPipeline","PostProcessRenderEffect","PassPostProcess","BlurPostProcess","serialize","__extends","name","scene","ratio","cameras","_super","getEngine","_this","_scene","_createRandomTexture","ssaoRatio","combineRatio","_originalColorPostProcess","BILINEAR_SAMPLINGMODE","_createSSAOPostProcess","_createBlurPostProcess","_createSSAOCombinePostProcess","addEffect","SSAOOriginalSceneColorEffect","SSAORenderEffect","_ssaoPostProcess","SSAOBlurHRenderEffect","_blurHPostProcess","SSAOBlurVRenderEffect","_blurVPostProcess","SSAOCombineRenderEffect","_ssaoCombinePostProcess","postProcessRenderPipelineManager","addPipeline","attachCamerasToRenderPipeline","Object","SSAORenderingPipeline","unique","_attachCameras","call","_cameras","_i","camera","enableDepthRenderer","getDepthMap","disableDepthRender","i","length","dispose","_randomTexture","disableDepthRenderer","detachCamerasFromRenderPipeline","_name","size","onActivateObservable","add","dw","width","getRenderWidth","kernel","height","getRenderHeight","_firstUpdate","_rebuild","numSamples","sampleSphere","samplesFactor","externalTextureSamplerBinding","onApply","effect","setArray3","setFloat","totalStrength","radius","area","fallOff","base","setTexture","activeCamera","setVector4","Vector4","copyFromFloats","setTextureFromPostProcess","TRILINEAR_SAMPLINGMODE","wrapU","WRAP_ADDRESSMODE","wrapV","context","getContext","rand","min","max","Math","random","randVector","Zero","x","y","floor","z","fillStyle","fillRect","update","__decorate"],"sourceRoot":"","sources":["../../../../../../../lts/core/generated/PostProcesses/RenderPipeline/Pipelines/ssaoRenderingPipeline.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport { Vector2, Vector3, TmpVectors } from \"../../../Maths/math.vector\";\r\nimport type { Camera } from \"../../../Cameras/camera\";\r\nimport type { Effect } from \"../../../Materials/effect\";\r\nimport { Texture } from \"../../../Materials/Textures/texture\";\r\nimport { DynamicTexture } from \"../../../Materials/Textures/dynamicTexture\";\r\nimport { PostProcess } from \"../../../PostProcesses/postProcess\";\r\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline\";\r\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect\";\r\nimport { PassPostProcess } from \"../../../PostProcesses/passPostProcess\";\r\nimport { BlurPostProcess } from \"../../../PostProcesses/blurPostProcess\";\r\nimport { Constants } from \"../../../Engines/constants\";\r\nimport { serialize } from \"../../../Misc/decorators\";\r\nimport type { Scene } from \"../../../scene\";\r\n\r\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent\";\r\n\r\nimport \"../../../Shaders/ssao.fragment\";\r\nimport \"../../../Shaders/ssaoCombine.fragment\";\r\n\r\n/**\r\n * Render pipeline to produce ssao effect\r\n */\r\nexport class SSAORenderingPipeline extends PostProcessRenderPipeline {\r\n    // Members\r\n\r\n    /**\r\n     * @ignore\r\n     * The PassPostProcess id in the pipeline that contains the original scene color\r\n     */\r\n    public SSAOOriginalSceneColorEffect: string = \"SSAOOriginalSceneColorEffect\";\r\n    /**\r\n     * @ignore\r\n     * The SSAO PostProcess id in the pipeline\r\n     */\r\n    public SSAORenderEffect: string = \"SSAORenderEffect\";\r\n    /**\r\n     * @ignore\r\n     * The horizontal blur PostProcess id in the pipeline\r\n     */\r\n    public SSAOBlurHRenderEffect: string = \"SSAOBlurHRenderEffect\";\r\n    /**\r\n     * @ignore\r\n     * The vertical blur PostProcess id in the pipeline\r\n     */\r\n    public SSAOBlurVRenderEffect: string = \"SSAOBlurVRenderEffect\";\r\n    /**\r\n     * @ignore\r\n     * The PostProcess id in the pipeline that combines the SSAO-Blur output with the original scene color (SSAOOriginalSceneColorEffect)\r\n     */\r\n    public SSAOCombineRenderEffect: string = \"SSAOCombineRenderEffect\";\r\n\r\n    /**\r\n     * The output strength of the SSAO post-process. Default value is 1.0.\r\n     */\r\n    @serialize()\r\n    public totalStrength: number = 1.0;\r\n\r\n    /**\r\n     * The radius around the analyzed pixel used by the SSAO post-process. Default value is 0.0006\r\n     */\r\n    @serialize()\r\n    public radius: number = 0.0001;\r\n\r\n    /**\r\n     * Related to fallOff, used to interpolate SSAO samples (first interpolate function input) based on the occlusion difference of each pixel\r\n     * Must not be equal to fallOff and superior to fallOff.\r\n     * Default value is 0.0075\r\n     */\r\n    @serialize()\r\n    public area: number = 0.0075;\r\n\r\n    /**\r\n     * Related to area, used to interpolate SSAO samples (second interpolate function input) based on the occlusion difference of each pixel\r\n     * Must not be equal to area and inferior to area.\r\n     * Default value is 0.000001\r\n     */\r\n    @serialize()\r\n    public fallOff: number = 0.000001;\r\n\r\n    /**\r\n     * The base color of the SSAO post-process\r\n     * The final result is \"base + ssao\" between [0, 1]\r\n     */\r\n    @serialize()\r\n    public base: number = 0.5;\r\n\r\n    private _scene: Scene;\r\n    private _randomTexture: DynamicTexture;\r\n\r\n    private _originalColorPostProcess: PassPostProcess;\r\n    private _ssaoPostProcess: PostProcess;\r\n    private _blurHPostProcess: BlurPostProcess;\r\n    private _blurVPostProcess: BlurPostProcess;\r\n    private _ssaoCombinePostProcess: PostProcess;\r\n\r\n    private _firstUpdate: boolean = true;\r\n\r\n    /**\r\n     * Gets active scene\r\n     */\r\n    public get scene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n    /**\r\n     * @constructor\r\n     * @param name - The rendering pipeline name\r\n     * @param scene - The scene linked to this pipeline\r\n     * @param ratio - The size of the postprocesses. Can be a number shared between passes or an object for more precision: { ssaoRatio: 0.5, combineRatio: 1.0 }\r\n     * @param cameras - The array of cameras that the rendering pipeline will be attached to\r\n     */\r\n    constructor(name: string, scene: Scene, ratio: any, cameras?: Camera[]) {\r\n        super(scene.getEngine(), name);\r\n\r\n        this._scene = scene;\r\n\r\n        // Set up assets\r\n        this._createRandomTexture();\r\n\r\n        const ssaoRatio = ratio.ssaoRatio || ratio;\r\n        const combineRatio = ratio.combineRatio || ratio;\r\n\r\n        this._originalColorPostProcess = new PassPostProcess(\"SSAOOriginalSceneColor\", combineRatio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false);\r\n        this._createSSAOPostProcess(ssaoRatio);\r\n        this._createBlurPostProcess(ssaoRatio);\r\n        this._createSSAOCombinePostProcess(combineRatio);\r\n\r\n        // Set up pipeline\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.SSAOOriginalSceneColorEffect,\r\n                () => {\r\n                    return this._originalColorPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.SSAORenderEffect,\r\n                () => {\r\n                    return this._ssaoPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.SSAOBlurHRenderEffect,\r\n                () => {\r\n                    return this._blurHPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.SSAOBlurVRenderEffect,\r\n                () => {\r\n                    return this._blurVPostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n\r\n        this.addEffect(\r\n            new PostProcessRenderEffect(\r\n                scene.getEngine(),\r\n                this.SSAOCombineRenderEffect,\r\n                () => {\r\n                    return this._ssaoCombinePostProcess;\r\n                },\r\n                true\r\n            )\r\n        );\r\n\r\n        // Finish\r\n        scene.postProcessRenderPipelineManager.addPipeline(this);\r\n        if (cameras) {\r\n            scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param cameras\r\n     * @param unique\r\n     * @hidden\r\n     */\r\n    public _attachCameras(cameras: any, unique: boolean): void {\r\n        super._attachCameras(cameras, unique);\r\n\r\n        for (const camera of this._cameras) {\r\n            this._scene.enableDepthRenderer(camera).getDepthMap(); // Force depth renderer \"on\"\r\n        }\r\n    }\r\n\r\n    // Public Methods\r\n\r\n    /**\r\n     * Get the class name\r\n     * @returns \"SSAORenderingPipeline\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"SSAORenderingPipeline\";\r\n    }\r\n\r\n    /**\r\n     * Removes the internal pipeline assets and detaches the pipeline from the scene cameras\r\n     * @param disableDepthRender\r\n     */\r\n    public dispose(disableDepthRender: boolean = false): void {\r\n        for (let i = 0; i < this._scene.cameras.length; i++) {\r\n            const camera = this._scene.cameras[i];\r\n\r\n            this._originalColorPostProcess.dispose(camera);\r\n            this._ssaoPostProcess.dispose(camera);\r\n            this._blurHPostProcess.dispose(camera);\r\n            this._blurVPostProcess.dispose(camera);\r\n            this._ssaoCombinePostProcess.dispose(camera);\r\n        }\r\n\r\n        this._randomTexture.dispose();\r\n\r\n        if (disableDepthRender) {\r\n            this._scene.disableDepthRenderer();\r\n        }\r\n\r\n        this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    // Private Methods\r\n    private _createBlurPostProcess(ratio: number): void {\r\n        const size = 16;\r\n\r\n        this._blurHPostProcess = new BlurPostProcess(\r\n            \"BlurH\",\r\n            new Vector2(1, 0),\r\n            size,\r\n            ratio,\r\n            null,\r\n            Texture.BILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false,\r\n            Constants.TEXTURETYPE_UNSIGNED_INT\r\n        );\r\n        this._blurVPostProcess = new BlurPostProcess(\r\n            \"BlurV\",\r\n            new Vector2(0, 1),\r\n            size,\r\n            ratio,\r\n            null,\r\n            Texture.BILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false,\r\n            Constants.TEXTURETYPE_UNSIGNED_INT\r\n        );\r\n\r\n        this._blurHPostProcess.onActivateObservable.add(() => {\r\n            const dw = this._blurHPostProcess.width / this._scene.getEngine().getRenderWidth();\r\n            this._blurHPostProcess.kernel = size * dw;\r\n        });\r\n\r\n        this._blurVPostProcess.onActivateObservable.add(() => {\r\n            const dw = this._blurVPostProcess.height / this._scene.getEngine().getRenderHeight();\r\n            this._blurVPostProcess.kernel = size * dw;\r\n        });\r\n    }\r\n\r\n    /** @hidden */\r\n    public _rebuild() {\r\n        this._firstUpdate = true;\r\n        super._rebuild();\r\n    }\r\n\r\n    private _createSSAOPostProcess(ratio: number): void {\r\n        const numSamples = 16;\r\n        const sampleSphere = [\r\n            0.5381, 0.1856, -0.4319, 0.1379, 0.2486, 0.443, 0.3371, 0.5679, -0.0057, -0.6999, -0.0451, -0.0019, 0.0689, -0.1598, -0.8547, 0.056, 0.0069, -0.1843, -0.0146, 0.1402,\r\n            0.0762, 0.01, -0.1924, -0.0344, -0.3577, -0.5301, -0.4358, -0.3169, 0.1063, 0.0158, 0.0103, -0.5869, 0.0046, -0.0897, -0.494, 0.3287, 0.7119, -0.0154, -0.0918, -0.0533,\r\n            0.0596, -0.5411, 0.0352, -0.0631, 0.546, -0.4776, 0.2847, -0.0271,\r\n        ];\r\n        const samplesFactor = 1.0 / numSamples;\r\n\r\n        this._ssaoPostProcess = new PostProcess(\r\n            \"ssao\",\r\n            \"ssao\",\r\n            [\"sampleSphere\", \"samplesFactor\", \"randTextureTiles\", \"totalStrength\", \"radius\", \"area\", \"fallOff\", \"base\", \"range\", \"viewport\"],\r\n            [\"randomSampler\"],\r\n            ratio,\r\n            null,\r\n            Texture.BILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false,\r\n            \"#define SAMPLES \" + numSamples + \"\\n#define SSAO\"\r\n        );\r\n\r\n        this._ssaoPostProcess.externalTextureSamplerBinding = true;\r\n        this._ssaoPostProcess.onApply = (effect: Effect) => {\r\n            if (this._firstUpdate) {\r\n                effect.setArray3(\"sampleSphere\", sampleSphere);\r\n                effect.setFloat(\"samplesFactor\", samplesFactor);\r\n                effect.setFloat(\"randTextureTiles\", 4.0);\r\n            }\r\n\r\n            effect.setFloat(\"totalStrength\", this.totalStrength);\r\n            effect.setFloat(\"radius\", this.radius);\r\n            effect.setFloat(\"area\", this.area);\r\n            effect.setFloat(\"fallOff\", this.fallOff);\r\n            effect.setFloat(\"base\", this.base);\r\n\r\n            effect.setTexture(\"textureSampler\", this._scene.enableDepthRenderer(this._scene.activeCamera).getDepthMap());\r\n            effect.setTexture(\"randomSampler\", this._randomTexture);\r\n        };\r\n    }\r\n\r\n    private _createSSAOCombinePostProcess(ratio: number): void {\r\n        this._ssaoCombinePostProcess = new PostProcess(\r\n            \"ssaoCombine\",\r\n            \"ssaoCombine\",\r\n            [],\r\n            [\"originalColor\", \"viewport\"],\r\n            ratio,\r\n            null,\r\n            Texture.BILINEAR_SAMPLINGMODE,\r\n            this._scene.getEngine(),\r\n            false\r\n        );\r\n\r\n        this._ssaoCombinePostProcess.onApply = (effect: Effect) => {\r\n            effect.setVector4(\"viewport\", TmpVectors.Vector4[0].copyFromFloats(0, 0, 1.0, 1.0));\r\n            effect.setTextureFromPostProcess(\"originalColor\", this._originalColorPostProcess);\r\n        };\r\n    }\r\n\r\n    private _createRandomTexture(): void {\r\n        const size = 512;\r\n\r\n        this._randomTexture = new DynamicTexture(\"SSAORandomTexture\", size, this._scene, false, Texture.TRILINEAR_SAMPLINGMODE);\r\n        this._randomTexture.wrapU = Texture.WRAP_ADDRESSMODE;\r\n        this._randomTexture.wrapV = Texture.WRAP_ADDRESSMODE;\r\n\r\n        const context = this._randomTexture.getContext();\r\n\r\n        const rand = (min: number, max: number) => {\r\n            return Math.random() * (max - min) + min;\r\n        };\r\n\r\n        const randVector = Vector3.Zero();\r\n\r\n        for (let x = 0; x < size; x++) {\r\n            for (let y = 0; y < size; y++) {\r\n                randVector.x = Math.floor(rand(-1.0, 1.0) * 255);\r\n                randVector.y = Math.floor(rand(-1.0, 1.0) * 255);\r\n                randVector.z = Math.floor(rand(-1.0, 1.0) * 255);\r\n\r\n                context.fillStyle = \"rgb(\" + randVector.x + \", \" + randVector.y + \", \" + randVector.z + \")\";\r\n                context.fillRect(x, y, 1, 1);\r\n            }\r\n        }\r\n\r\n        this._randomTexture.update(false);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}