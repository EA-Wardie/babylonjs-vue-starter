{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { __extends } from \"tslib\";\nimport { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes.js\";\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets.js\";\nimport { RegisterClass } from \"../../../../Misc/typeStore.js\";\nimport { InputBlock } from \"../Input/inputBlock.js\";\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues.js\";\nimport { ReflectionTextureBaseBlock } from \"./reflectionTextureBaseBlock.js\";\n/**\n * Block used to read a reflection texture from a sampler\n */\n\nvar ReflectionTextureBlock =\n/** @class */\nfunction (_super) {\n  __extends(ReflectionTextureBlock, _super);\n  /**\n   * Create a new ReflectionTextureBlock\n   * @param name defines the block name\n   */\n\n\n  function ReflectionTextureBlock(name) {\n    var _this = _super.call(this, name) || this;\n\n    _this.registerInput(\"position\", NodeMaterialBlockConnectionPointTypes.Vector3, false, NodeMaterialBlockTargets.Vertex);\n\n    _this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Vertex);\n\n    _this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Fragment); // Flagging as fragment as the normal can be changed by fragment code\n\n\n    _this.registerInput(\"world\", NodeMaterialBlockConnectionPointTypes.Matrix, false, NodeMaterialBlockTargets.Vertex);\n\n    _this.registerInput(\"cameraPosition\", NodeMaterialBlockConnectionPointTypes.Vector3, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"view\", NodeMaterialBlockConnectionPointTypes.Matrix, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"rgb\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"rgba\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"r\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"g\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"b\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"a\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\n\n    _this._inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector4);\n\n    return _this;\n  }\n  /**\n   * Gets the current class name\n   * @returns the class name\n   */\n\n\n  ReflectionTextureBlock.prototype.getClassName = function () {\n    return \"ReflectionTextureBlock\";\n  };\n\n  Object.defineProperty(ReflectionTextureBlock.prototype, \"position\", {\n    /**\n     * Gets the world position input component\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionTextureBlock.prototype, \"worldPosition\", {\n    /**\n     * Gets the world position input component\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionTextureBlock.prototype, \"worldNormal\", {\n    /**\n     * Gets the world normal input component\n     */\n    get: function get() {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionTextureBlock.prototype, \"world\", {\n    /**\n     * Gets the world input component\n     */\n    get: function get() {\n      return this._inputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionTextureBlock.prototype, \"cameraPosition\", {\n    /**\n     * Gets the camera (or eye) position component\n     */\n    get: function get() {\n      return this._inputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionTextureBlock.prototype, \"view\", {\n    /**\n     * Gets the view input component\n     */\n    get: function get() {\n      return this._inputs[5];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionTextureBlock.prototype, \"rgb\", {\n    /**\n     * Gets the rgb output component\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionTextureBlock.prototype, \"rgba\", {\n    /**\n     * Gets the rgba output component\n     */\n    get: function get() {\n      return this._outputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionTextureBlock.prototype, \"r\", {\n    /**\n     * Gets the r output component\n     */\n    get: function get() {\n      return this._outputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionTextureBlock.prototype, \"g\", {\n    /**\n     * Gets the g output component\n     */\n    get: function get() {\n      return this._outputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionTextureBlock.prototype, \"b\", {\n    /**\n     * Gets the b output component\n     */\n    get: function get() {\n      return this._outputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReflectionTextureBlock.prototype, \"a\", {\n    /**\n     * Gets the a output component\n     */\n    get: function get() {\n      return this._outputs[5];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ReflectionTextureBlock.prototype.autoConfigure = function (material) {\n    _super.prototype.autoConfigure.call(this, material);\n\n    if (!this.cameraPosition.isConnected) {\n      var cameraPositionInput = material.getInputBlockByPredicate(function (b) {\n        return b.systemValue === NodeMaterialSystemValues.CameraPosition;\n      });\n\n      if (!cameraPositionInput) {\n        cameraPositionInput = new InputBlock(\"cameraPosition\");\n        cameraPositionInput.setAsSystemValue(NodeMaterialSystemValues.CameraPosition);\n      }\n\n      cameraPositionInput.output.connectTo(this.cameraPosition);\n    }\n  };\n\n  ReflectionTextureBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    if (!this.texture) {\n      state.compilationString += this.writeOutputs(state, \"vec3(0.)\");\n      return this;\n    }\n\n    if (state.target !== NodeMaterialBlockTargets.Fragment) {\n      state.compilationString += this.handleVertexSide(state);\n      return this;\n    }\n\n    this.handleFragmentSideInits(state);\n\n    var normalWUnit = state._getFreeVariableName(\"normalWUnit\");\n\n    state.compilationString += \"vec4 \".concat(normalWUnit, \" = normalize(\").concat(this.worldNormal.associatedVariableName, \");\\r\\n\");\n    state.compilationString += this.handleFragmentSideCodeReflectionCoords(normalWUnit);\n    state.compilationString += this.handleFragmentSideCodeReflectionColor(undefined, \"\");\n    state.compilationString += this.writeOutputs(state, this._reflectionColorName);\n    return this;\n  };\n\n  return ReflectionTextureBlock;\n}(ReflectionTextureBaseBlock);\n\nexport { ReflectionTextureBlock };\nRegisterClass(\"BABYLON.ReflectionTextureBlock\", ReflectionTextureBlock);","map":{"version":3,"mappings":"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","names":["NodeMaterialBlockConnectionPointTypes","NodeMaterialBlockTargets","RegisterClass","InputBlock","NodeMaterialSystemValues","ReflectionTextureBaseBlock","__extends","name","_super","_this","registerInput","Vector3","Vertex","Vector4","Fragment","Matrix","registerOutput","Color3","Color4","Float","_inputs","acceptedConnectionPointTypes","push","ReflectionTextureBlock","Object","_outputs","material","autoConfigure","call","cameraPosition","isConnected","cameraPositionInput","getInputBlockByPredicate","b","systemValue","CameraPosition","setAsSystemValue","output","connectTo","state","_buildBlock","texture","compilationString","writeOutputs","target","handleVertexSide","handleFragmentSideInits","normalWUnit","_getFreeVariableName","concat","worldNormal","associatedVariableName","handleFragmentSideCodeReflectionCoords","handleFragmentSideCodeReflectionColor","undefined","_reflectionColorName"],"sourceRoot":"","sources":["../../../../../../../../lts/core/generated/Materials/Node/Blocks/Dual/reflectionTextureBlock.ts"],"sourcesContent":["import { NodeMaterialBlockConnectionPointTypes } from \"../../Enums/nodeMaterialBlockConnectionPointTypes\";\r\nimport type { NodeMaterialBuildState } from \"../../nodeMaterialBuildState\";\r\nimport { NodeMaterialBlockTargets } from \"../../Enums/nodeMaterialBlockTargets\";\r\nimport type { NodeMaterialConnectionPoint } from \"../../nodeMaterialBlockConnectionPoint\";\r\nimport type { NodeMaterial } from \"../../nodeMaterial\";\r\nimport { RegisterClass } from \"../../../../Misc/typeStore\";\r\nimport { InputBlock } from \"../Input/inputBlock\";\r\nimport { NodeMaterialSystemValues } from \"../../Enums/nodeMaterialSystemValues\";\r\nimport { ReflectionTextureBaseBlock } from \"./reflectionTextureBaseBlock\";\r\n\r\n/**\r\n * Block used to read a reflection texture from a sampler\r\n */\r\nexport class ReflectionTextureBlock extends ReflectionTextureBaseBlock {\r\n    /**\r\n     * Create a new ReflectionTextureBlock\r\n     * @param name defines the block name\r\n     */\r\n    public constructor(name: string) {\r\n        super(name);\r\n\r\n        this.registerInput(\"position\", NodeMaterialBlockConnectionPointTypes.Vector3, false, NodeMaterialBlockTargets.Vertex);\r\n        this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Vertex);\r\n        this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Fragment); // Flagging as fragment as the normal can be changed by fragment code\r\n        this.registerInput(\"world\", NodeMaterialBlockConnectionPointTypes.Matrix, false, NodeMaterialBlockTargets.Vertex);\r\n\r\n        this.registerInput(\"cameraPosition\", NodeMaterialBlockConnectionPointTypes.Vector3, false, NodeMaterialBlockTargets.Fragment);\r\n        this.registerInput(\"view\", NodeMaterialBlockConnectionPointTypes.Matrix, false, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this.registerOutput(\"rgb\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"rgba\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"r\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"g\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"b\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\r\n        this.registerOutput(\"a\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\r\n\r\n        this._inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector4);\r\n    }\r\n\r\n    /**\r\n     * Gets the current class name\r\n     * @returns the class name\r\n     */\r\n    public getClassName() {\r\n        return \"ReflectionTextureBlock\";\r\n    }\r\n\r\n    /**\r\n     * Gets the world position input component\r\n     */\r\n    public get position(): NodeMaterialConnectionPoint {\r\n        return this._inputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the world position input component\r\n     */\r\n    public get worldPosition(): NodeMaterialConnectionPoint {\r\n        return this._inputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the world normal input component\r\n     */\r\n    public get worldNormal(): NodeMaterialConnectionPoint {\r\n        return this._inputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the world input component\r\n     */\r\n    public get world(): NodeMaterialConnectionPoint {\r\n        return this._inputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the camera (or eye) position component\r\n     */\r\n    public get cameraPosition(): NodeMaterialConnectionPoint {\r\n        return this._inputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the view input component\r\n     */\r\n    public get view(): NodeMaterialConnectionPoint {\r\n        return this._inputs[5];\r\n    }\r\n\r\n    /**\r\n     * Gets the rgb output component\r\n     */\r\n    public get rgb(): NodeMaterialConnectionPoint {\r\n        return this._outputs[0];\r\n    }\r\n\r\n    /**\r\n     * Gets the rgba output component\r\n     */\r\n    public get rgba(): NodeMaterialConnectionPoint {\r\n        return this._outputs[1];\r\n    }\r\n\r\n    /**\r\n     * Gets the r output component\r\n     */\r\n    public get r(): NodeMaterialConnectionPoint {\r\n        return this._outputs[2];\r\n    }\r\n\r\n    /**\r\n     * Gets the g output component\r\n     */\r\n    public get g(): NodeMaterialConnectionPoint {\r\n        return this._outputs[3];\r\n    }\r\n\r\n    /**\r\n     * Gets the b output component\r\n     */\r\n    public get b(): NodeMaterialConnectionPoint {\r\n        return this._outputs[4];\r\n    }\r\n\r\n    /**\r\n     * Gets the a output component\r\n     */\r\n    public get a(): NodeMaterialConnectionPoint {\r\n        return this._outputs[5];\r\n    }\r\n\r\n    public autoConfigure(material: NodeMaterial) {\r\n        super.autoConfigure(material);\r\n\r\n        if (!this.cameraPosition.isConnected) {\r\n            let cameraPositionInput = material.getInputBlockByPredicate((b) => b.systemValue === NodeMaterialSystemValues.CameraPosition);\r\n\r\n            if (!cameraPositionInput) {\r\n                cameraPositionInput = new InputBlock(\"cameraPosition\");\r\n                cameraPositionInput.setAsSystemValue(NodeMaterialSystemValues.CameraPosition);\r\n            }\r\n            cameraPositionInput.output.connectTo(this.cameraPosition);\r\n        }\r\n    }\r\n\r\n    protected _buildBlock(state: NodeMaterialBuildState) {\r\n        super._buildBlock(state);\r\n\r\n        if (!this.texture) {\r\n            state.compilationString += this.writeOutputs(state, \"vec3(0.)\");\r\n            return this;\r\n        }\r\n\r\n        if (state.target !== NodeMaterialBlockTargets.Fragment) {\r\n            state.compilationString += this.handleVertexSide(state);\r\n            return this;\r\n        }\r\n\r\n        this.handleFragmentSideInits(state);\r\n\r\n        const normalWUnit = state._getFreeVariableName(\"normalWUnit\");\r\n\r\n        state.compilationString += `vec4 ${normalWUnit} = normalize(${this.worldNormal.associatedVariableName});\\r\\n`;\r\n\r\n        state.compilationString += this.handleFragmentSideCodeReflectionCoords(normalWUnit);\r\n\r\n        state.compilationString += this.handleFragmentSideCodeReflectionColor(undefined, \"\");\r\n\r\n        state.compilationString += this.writeOutputs(state, this._reflectionColorName);\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRegisterClass(\"BABYLON.ReflectionTextureBlock\", ReflectionTextureBlock);\r\n"]},"metadata":{},"sourceType":"module"}