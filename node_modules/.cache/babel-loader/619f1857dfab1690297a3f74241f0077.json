{"ast":null,"code":"import \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { KeyboardEventTypes } from \"../../Events/keyboardEvents.js\";\nimport { Vector3 } from \"../../Maths/math.vector.js\";\nimport { Tools } from \"../../Misc/tools.js\";\n/**\n * Listen to keyboard events to control the camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\n\nvar FlyCameraKeyboardInput =\n/** @class */\nfunction () {\n  function FlyCameraKeyboardInput() {\n    /**\n     * The list of keyboard keys used to control the forward move of the camera.\n     */\n    this.keysForward = [87];\n    /**\n     * The list of keyboard keys used to control the backward move of the camera.\n     */\n\n    this.keysBackward = [83];\n    /**\n     * The list of keyboard keys used to control the forward move of the camera.\n     */\n\n    this.keysUp = [69];\n    /**\n     * The list of keyboard keys used to control the backward move of the camera.\n     */\n\n    this.keysDown = [81];\n    /**\n     * The list of keyboard keys used to control the right strafe move of the camera.\n     */\n\n    this.keysRight = [68];\n    /**\n     * The list of keyboard keys used to control the left strafe move of the camera.\n     */\n\n    this.keysLeft = [65];\n    this._keys = new Array();\n  }\n  /**\n   * Attach the input controls to a specific dom element to get the input from.\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\n   */\n\n\n  FlyCameraKeyboardInput.prototype.attachControl = function (noPreventDefault) {\n    var _this = this; // eslint-disable-next-line prefer-rest-params\n\n\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n\n    if (this._onCanvasBlurObserver) {\n      return;\n    }\n\n    this._scene = this.camera.getScene();\n    this._engine = this._scene.getEngine();\n    this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(function () {\n      _this._keys = [];\n    });\n    this._onKeyboardObserver = this._scene.onKeyboardObservable.add(function (info) {\n      var evt = info.event;\n\n      if (info.type === KeyboardEventTypes.KEYDOWN) {\n        if (_this.keysForward.indexOf(evt.keyCode) !== -1 || _this.keysBackward.indexOf(evt.keyCode) !== -1 || _this.keysUp.indexOf(evt.keyCode) !== -1 || _this.keysDown.indexOf(evt.keyCode) !== -1 || _this.keysLeft.indexOf(evt.keyCode) !== -1 || _this.keysRight.indexOf(evt.keyCode) !== -1) {\n          var index = _this._keys.indexOf(evt.keyCode);\n\n          if (index === -1) {\n            _this._keys.push(evt.keyCode);\n          }\n\n          if (!noPreventDefault) {\n            evt.preventDefault();\n          }\n        }\n      } else {\n        if (_this.keysForward.indexOf(evt.keyCode) !== -1 || _this.keysBackward.indexOf(evt.keyCode) !== -1 || _this.keysUp.indexOf(evt.keyCode) !== -1 || _this.keysDown.indexOf(evt.keyCode) !== -1 || _this.keysLeft.indexOf(evt.keyCode) !== -1 || _this.keysRight.indexOf(evt.keyCode) !== -1) {\n          var index = _this._keys.indexOf(evt.keyCode);\n\n          if (index >= 0) {\n            _this._keys.splice(index, 1);\n          }\n\n          if (!noPreventDefault) {\n            evt.preventDefault();\n          }\n        }\n      }\n    });\n  };\n  /**\n   * Detach the current controls from the specified dom element.\n   */\n\n\n  FlyCameraKeyboardInput.prototype.detachControl = function () {\n    if (this._scene) {\n      if (this._onKeyboardObserver) {\n        this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\n      }\n\n      if (this._onCanvasBlurObserver) {\n        this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\n      }\n\n      this._onKeyboardObserver = null;\n      this._onCanvasBlurObserver = null;\n    }\n\n    this._keys = [];\n  };\n  /**\n   * Gets the class name of the current input.\n   * @returns the class name\n   */\n\n\n  FlyCameraKeyboardInput.prototype.getClassName = function () {\n    return \"FlyCameraKeyboardInput\";\n  };\n  /**\n   * @hidden\n   */\n\n\n  FlyCameraKeyboardInput.prototype._onLostFocus = function () {\n    this._keys = [];\n  };\n  /**\n   * Get the friendly name associated with the input class.\n   * @returns the input friendly name\n   */\n\n\n  FlyCameraKeyboardInput.prototype.getSimpleName = function () {\n    return \"keyboard\";\n  };\n  /**\n   * Update the current camera state depending on the inputs that have been used this frame.\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n   */\n\n\n  FlyCameraKeyboardInput.prototype.checkInputs = function () {\n    if (this._onKeyboardObserver) {\n      var camera = this.camera; // Keyboard\n\n      for (var index = 0; index < this._keys.length; index++) {\n        var keyCode = this._keys[index];\n\n        var speed = camera._computeLocalCameraSpeed();\n\n        if (this.keysForward.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(0, 0, speed);\n        } else if (this.keysBackward.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(0, 0, -speed);\n        } else if (this.keysUp.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(0, speed, 0);\n        } else if (this.keysDown.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(0, -speed, 0);\n        } else if (this.keysRight.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(speed, 0, 0);\n        } else if (this.keysLeft.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(-speed, 0, 0);\n        }\n\n        if (camera.getScene().useRightHandedSystem) {\n          camera._localDirection.z *= -1;\n        }\n\n        camera.getViewMatrix().invertToRef(camera._cameraTransformMatrix);\n        Vector3.TransformNormalToRef(camera._localDirection, camera._cameraTransformMatrix, camera._transformedDirection);\n        camera.cameraDirection.addInPlace(camera._transformedDirection);\n      }\n    }\n  };\n\n  __decorate([serialize()], FlyCameraKeyboardInput.prototype, \"keysForward\", void 0);\n\n  __decorate([serialize()], FlyCameraKeyboardInput.prototype, \"keysBackward\", void 0);\n\n  __decorate([serialize()], FlyCameraKeyboardInput.prototype, \"keysUp\", void 0);\n\n  __decorate([serialize()], FlyCameraKeyboardInput.prototype, \"keysDown\", void 0);\n\n  __decorate([serialize()], FlyCameraKeyboardInput.prototype, \"keysRight\", void 0);\n\n  __decorate([serialize()], FlyCameraKeyboardInput.prototype, \"keysLeft\", void 0);\n\n  return FlyCameraKeyboardInput;\n}();\n\nexport { FlyCameraKeyboardInput };\nCameraInputTypes[\"FlyCameraKeyboardInput\"] = FlyCameraKeyboardInput;","map":{"version":3,"mappings":"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","names":["serialize","CameraInputTypes","KeyboardEventTypes","Vector3","Tools","Array","FlyCameraKeyboardInput","noPreventDefault","BackCompatCameraNoPreventDefault","arguments","_onCanvasBlurObserver","_scene","camera","getScene","_engine","getEngine","onCanvasBlurObservable","add","_this","_keys","_onKeyboardObserver","onKeyboardObservable","info","evt","event","type","KEYDOWN","keysForward","indexOf","keyCode","keysBackward","keysUp","keysDown","keysLeft","keysRight","index","push","preventDefault","splice","remove","length","speed","_computeLocalCameraSpeed","_localDirection","copyFromFloats","useRightHandedSystem","z","getViewMatrix","invertToRef","_cameraTransformMatrix","TransformNormalToRef","_transformedDirection","cameraDirection","addInPlace","__decorate"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Cameras/Inputs/flyCameraKeyboardInput.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport type { FlyCamera } from \"../../Cameras/flyCamera\";\r\nimport type { Engine } from \"../../Engines/engine\";\r\nimport type { KeyboardInfo } from \"../../Events/keyboardEvents\";\r\nimport { KeyboardEventTypes } from \"../../Events/keyboardEvents\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Vector3 } from \"../../Maths/math.vector\";\r\nimport { Tools } from \"../../Misc/tools\";\r\n\r\n/**\r\n * Listen to keyboard events to control the camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class FlyCameraKeyboardInput implements ICameraInput<FlyCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: FlyCamera;\r\n\r\n    /**\r\n     * The list of keyboard keys used to control the forward move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysForward = [87];\r\n\r\n    /**\r\n     * The list of keyboard keys used to control the backward move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysBackward = [83];\r\n\r\n    /**\r\n     * The list of keyboard keys used to control the forward move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysUp = [69];\r\n\r\n    /**\r\n     * The list of keyboard keys used to control the backward move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysDown = [81];\r\n\r\n    /**\r\n     * The list of keyboard keys used to control the right strafe move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysRight = [68];\r\n\r\n    /**\r\n     * The list of keyboard keys used to control the left strafe move of the camera.\r\n     */\r\n    @serialize()\r\n    public keysLeft = [65];\r\n\r\n    private _keys = new Array<number>();\r\n    private _onCanvasBlurObserver: Nullable<Observer<Engine>>;\r\n    private _onKeyboardObserver: Nullable<Observer<KeyboardInfo>>;\r\n    private _engine: Engine;\r\n    private _scene: Scene;\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n     */\r\n    public attachControl(noPreventDefault?: boolean): void {\r\n        // eslint-disable-next-line prefer-rest-params\r\n        noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\r\n        if (this._onCanvasBlurObserver) {\r\n            return;\r\n        }\r\n\r\n        this._scene = this.camera.getScene();\r\n        this._engine = this._scene.getEngine();\r\n\r\n        this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(() => {\r\n            this._keys = [];\r\n        });\r\n\r\n        this._onKeyboardObserver = this._scene.onKeyboardObservable.add((info) => {\r\n            const evt = info.event;\r\n\r\n            if (info.type === KeyboardEventTypes.KEYDOWN) {\r\n                if (\r\n                    this.keysForward.indexOf(evt.keyCode) !== -1 ||\r\n                    this.keysBackward.indexOf(evt.keyCode) !== -1 ||\r\n                    this.keysUp.indexOf(evt.keyCode) !== -1 ||\r\n                    this.keysDown.indexOf(evt.keyCode) !== -1 ||\r\n                    this.keysLeft.indexOf(evt.keyCode) !== -1 ||\r\n                    this.keysRight.indexOf(evt.keyCode) !== -1\r\n                ) {\r\n                    const index = this._keys.indexOf(evt.keyCode);\r\n\r\n                    if (index === -1) {\r\n                        this._keys.push(evt.keyCode);\r\n                    }\r\n                    if (!noPreventDefault) {\r\n                        evt.preventDefault();\r\n                    }\r\n                }\r\n            } else {\r\n                if (\r\n                    this.keysForward.indexOf(evt.keyCode) !== -1 ||\r\n                    this.keysBackward.indexOf(evt.keyCode) !== -1 ||\r\n                    this.keysUp.indexOf(evt.keyCode) !== -1 ||\r\n                    this.keysDown.indexOf(evt.keyCode) !== -1 ||\r\n                    this.keysLeft.indexOf(evt.keyCode) !== -1 ||\r\n                    this.keysRight.indexOf(evt.keyCode) !== -1\r\n                ) {\r\n                    const index = this._keys.indexOf(evt.keyCode);\r\n\r\n                    if (index >= 0) {\r\n                        this._keys.splice(index, 1);\r\n                    }\r\n                    if (!noPreventDefault) {\r\n                        evt.preventDefault();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        if (this._scene) {\r\n            if (this._onKeyboardObserver) {\r\n                this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\r\n            }\r\n\r\n            if (this._onCanvasBlurObserver) {\r\n                this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\r\n            }\r\n            this._onKeyboardObserver = null;\r\n            this._onCanvasBlurObserver = null;\r\n        }\r\n        this._keys = [];\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current input.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"FlyCameraKeyboardInput\";\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     */\r\n    public _onLostFocus(): void {\r\n        this._keys = [];\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"keyboard\";\r\n    }\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs(): void {\r\n        if (this._onKeyboardObserver) {\r\n            const camera = this.camera;\r\n            // Keyboard\r\n            for (let index = 0; index < this._keys.length; index++) {\r\n                const keyCode = this._keys[index];\r\n                const speed = camera._computeLocalCameraSpeed();\r\n\r\n                if (this.keysForward.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, 0, speed);\r\n                } else if (this.keysBackward.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, 0, -speed);\r\n                } else if (this.keysUp.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, speed, 0);\r\n                } else if (this.keysDown.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(0, -speed, 0);\r\n                } else if (this.keysRight.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(speed, 0, 0);\r\n                } else if (this.keysLeft.indexOf(keyCode) !== -1) {\r\n                    camera._localDirection.copyFromFloats(-speed, 0, 0);\r\n                }\r\n\r\n                if (camera.getScene().useRightHandedSystem) {\r\n                    camera._localDirection.z *= -1;\r\n                }\r\n\r\n                camera.getViewMatrix().invertToRef(camera._cameraTransformMatrix);\r\n                Vector3.TransformNormalToRef(camera._localDirection, camera._cameraTransformMatrix, camera._transformedDirection);\r\n                camera.cameraDirection.addInPlace(camera._transformedDirection);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"FlyCameraKeyboardInput\"] = FlyCameraKeyboardInput;\r\n"]},"metadata":{},"sourceType":"module"}