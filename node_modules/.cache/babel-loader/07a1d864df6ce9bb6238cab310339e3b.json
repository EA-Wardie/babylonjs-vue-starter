{"ast":null,"code":"import \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\n\n/** @hidden */\nvar PerformanceConfigurator =\n/** @class */\nfunction () {\n  function PerformanceConfigurator() {}\n  /**\n   * @param use64bits\n   * @hidden\n   */\n\n\n  PerformanceConfigurator.SetMatrixPrecision = function (use64bits) {\n    PerformanceConfigurator.MatrixTrackPrecisionChange = false;\n\n    if (use64bits && !PerformanceConfigurator.MatrixUse64Bits) {\n      if (PerformanceConfigurator.MatrixTrackedMatrices) {\n        for (var m = 0; m < PerformanceConfigurator.MatrixTrackedMatrices.length; ++m) {\n          var matrix = PerformanceConfigurator.MatrixTrackedMatrices[m];\n          var values = matrix._m;\n          matrix._m = new Array(16);\n\n          for (var i = 0; i < 16; ++i) {\n            matrix._m[i] = values[i];\n          }\n        }\n      }\n    }\n\n    PerformanceConfigurator.MatrixUse64Bits = use64bits;\n    PerformanceConfigurator.MatrixCurrentType = PerformanceConfigurator.MatrixUse64Bits ? Array : Float32Array;\n    PerformanceConfigurator.MatrixTrackedMatrices = null; // reclaim some memory, as we don't need _TrackedMatrices anymore\n  };\n  /** @hidden */\n\n\n  PerformanceConfigurator.MatrixUse64Bits = false;\n  /** @hidden */\n\n  PerformanceConfigurator.MatrixTrackPrecisionChange = true;\n  /** @hidden */\n\n  PerformanceConfigurator.MatrixCurrentType = Float32Array;\n  /** @hidden */\n\n  PerformanceConfigurator.MatrixTrackedMatrices = [];\n  return PerformanceConfigurator;\n}();\n\nexport { PerformanceConfigurator };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAAA;AAAA;AAAA,sCAoCC;AA1BG;;;;;;AAIcA,+CAAd,UAAiCC,SAAjC,EAAmD;AAC/CD,2BAAuB,CAACE,0BAAxB,GAAqD,KAArD;;AAEA,QAAID,SAAS,IAAI,CAACD,uBAAuB,CAACG,eAA1C,EAA2D;AACvD,UAAIH,uBAAuB,CAACI,qBAA5B,EAAmD;AAC/C,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,uBAAuB,CAACI,qBAAxB,CAA8CE,MAAlE,EAA0E,EAAED,CAA5E,EAA+E;AAC3E,cAAME,MAAM,GAAGP,uBAAuB,CAACI,qBAAxB,CAA8CC,CAA9C,CAAf;AACA,cAAMG,MAAM,GAAGD,MAAM,CAACE,EAAtB;AAEAF,gBAAM,CAACE,EAAP,GAAY,IAAIC,KAAJ,CAAU,EAAV,CAAZ;;AAEA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwB,EAAEA,CAA1B,EAA6B;AACzBJ,kBAAM,CAACE,EAAP,CAAUE,CAAV,IAAeH,MAAM,CAACG,CAAD,CAArB;AACH;AACJ;AACJ;AACJ;;AAEDX,2BAAuB,CAACG,eAAxB,GAA0CF,SAA1C;AACAD,2BAAuB,CAACY,iBAAxB,GAA4CZ,uBAAuB,CAACG,eAAxB,GAA0CO,KAA1C,GAAkDG,YAA9F;AACAb,2BAAuB,CAACI,qBAAxB,GAAgD,IAAhD,CApB+C,CAoBO;AACzD,GArBa;AAbd;;;AACcJ,4CAAkB,KAAlB;AACd;;AACcA,uDAA6B,IAA7B;AACd;;AACcA,8CAAyBa,YAAzB;AACd;;AACcb,kDAA2C,EAA3C;AA4BlB;AAAC,CApCD;;SAAaA","names":["PerformanceConfigurator","use64bits","MatrixTrackPrecisionChange","MatrixUse64Bits","MatrixTrackedMatrices","m","length","matrix","values","_m","Array","i","MatrixCurrentType","Float32Array"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Engines/performanceConfigurator.ts"],"sourcesContent":["/** @hidden */\r\nexport class PerformanceConfigurator {\r\n    /** @hidden */\r\n    public static MatrixUse64Bits = false;\r\n    /** @hidden */\r\n    public static MatrixTrackPrecisionChange = true;\r\n    /** @hidden */\r\n    public static MatrixCurrentType: any = Float32Array;\r\n    /** @hidden */\r\n    public static MatrixTrackedMatrices: Array<any> | null = [];\r\n\r\n    /**\r\n     * @param use64bits\r\n     * @hidden\r\n     */\r\n    public static SetMatrixPrecision(use64bits: boolean) {\r\n        PerformanceConfigurator.MatrixTrackPrecisionChange = false;\r\n\r\n        if (use64bits && !PerformanceConfigurator.MatrixUse64Bits) {\r\n            if (PerformanceConfigurator.MatrixTrackedMatrices) {\r\n                for (let m = 0; m < PerformanceConfigurator.MatrixTrackedMatrices.length; ++m) {\r\n                    const matrix = PerformanceConfigurator.MatrixTrackedMatrices[m];\r\n                    const values = matrix._m;\r\n\r\n                    matrix._m = new Array(16);\r\n\r\n                    for (let i = 0; i < 16; ++i) {\r\n                        matrix._m[i] = values[i];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        PerformanceConfigurator.MatrixUse64Bits = use64bits;\r\n        PerformanceConfigurator.MatrixCurrentType = PerformanceConfigurator.MatrixUse64Bits ? Array : Float32Array;\r\n        PerformanceConfigurator.MatrixTrackedMatrices = null; // reclaim some memory, as we don't need _TrackedMatrices anymore\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}