{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.parse-int.js\";\n\n/**\n * Abstract class used to decouple action Manager from scene and meshes.\n * Do not instantiate.\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\n */\nvar AbstractActionManager =\n/** @class */\nfunction () {\n  function AbstractActionManager() {\n    /** Gets the cursor to use when hovering items */\n    this.hoverCursor = \"\";\n    /** Gets the list of actions */\n\n    this.actions = new Array();\n    /**\n     * Gets or sets a boolean indicating that the manager is recursive meaning that it can trigger action from children\n     */\n\n    this.isRecursive = false;\n  }\n\n  Object.defineProperty(AbstractActionManager, \"HasTriggers\", {\n    /**\n     * Does exist one action manager with at least one trigger\n     **/\n    get: function get() {\n      for (var t in AbstractActionManager.Triggers) {\n        if (Object.prototype.hasOwnProperty.call(AbstractActionManager.Triggers, t)) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AbstractActionManager, \"HasPickTriggers\", {\n    /**\n     * Does exist one action manager with at least one pick trigger\n     **/\n    get: function get() {\n      for (var t in AbstractActionManager.Triggers) {\n        if (Object.prototype.hasOwnProperty.call(AbstractActionManager.Triggers, t)) {\n          var tAsInt = parseInt(t);\n\n          if (tAsInt >= 1 && tAsInt <= 7) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Does exist one action manager that handles actions of a given trigger\n   * @param trigger defines the trigger to be tested\n   * @return a boolean indicating whether the trigger is handled by at least one action manager\n   **/\n\n  AbstractActionManager.HasSpecificTrigger = function (trigger) {\n    for (var t in AbstractActionManager.Triggers) {\n      if (Object.prototype.hasOwnProperty.call(AbstractActionManager.Triggers, t)) {\n        var tAsInt = parseInt(t);\n\n        if (tAsInt === trigger) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n  /** Gets the list of active triggers */\n\n\n  AbstractActionManager.Triggers = {};\n  return AbstractActionManager;\n}();\n\nexport { AbstractActionManager };","map":{"version":3,"mappings":";;;AAMA;;;;;AAKA;AAAA;AAAA;AAAA;AAII;AACO,uBAAsB,EAAtB;AAEP;;AACO,mBAAU,IAAIA,KAAJ,EAAV;AAEP;;;;AAGO,uBAAc,KAAd;AAgHV;;AAxCGC,wBAAkBC,qBAAlB,EAAkB,aAAlB,EAA6B;AAH7B;;;SAGA;AACI,WAAK,IAAMC,CAAX,IAAgBD,qBAAqB,CAACE,QAAtC,EAAgD;AAC5C,YAAIH,MAAM,CAACI,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,qBAAqB,CAACE,QAA3D,EAAqED,CAArE,CAAJ,EAA6E;AACzE,iBAAO,IAAP;AACH;AACJ;;AACD,aAAO,KAAP;AACH,KAP4B;qBAAA;;AAAA,GAA7B;AAYAF,wBAAkBC,qBAAlB,EAAkB,iBAAlB,EAAiC;AAHjC;;;SAGA;AACI,WAAK,IAAMC,CAAX,IAAgBD,qBAAqB,CAACE,QAAtC,EAAgD;AAC5C,YAAIH,MAAM,CAACI,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,qBAAqB,CAACE,QAA3D,EAAqED,CAArE,CAAJ,EAA6E;AACzE,cAAMK,MAAM,GAAGC,QAAQ,CAACN,CAAD,CAAvB;;AACA,cAAIK,MAAM,IAAI,CAAV,IAAUA,MAAU,KAAxB,EAAwB;AACpB,mBAAO,IAAP;AACH;AACJ;AACJ;;AACD,aAAO,KAAP;AACH,KAVgC;qBAAA;;AAAA,GAAjC;AAYA;;;;;;AAKcN,6CAAd,UAAiCQ,OAAjC,EAAgD;AAC5C,SAAK,IAAMP,CAAX,IAAgBD,qBAAqB,CAACE,QAAtC,EAAgD;AAC5C,UAAIH,MAAM,CAACI,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCL,qBAAqB,CAACE,QAA3D,EAAqED,CAArE,CAAJ,EAA6E;AACzE,YAAMK,MAAM,GAAGC,QAAQ,CAACN,CAAD,CAAvB;;AACA,YAAIK,MAAM,KAAKE,OAAf,EAAwB;AACpB,iBAAO,IAAP;AACH;AACJ;AACJ;;AACD,WAAO,KAAP;AACH,GAVa;AAjHd;;;AACcR,mCAAsC,EAAtC;AA2HlB;AAAC,CA7HD;;SAAsBA","names":["Array","Object","AbstractActionManager","t","Triggers","prototype","hasOwnProperty","call","tAsInt","parseInt","trigger"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Actions/abstractActionManager.ts"],"sourcesContent":["import type { IDisposable } from \"../scene\";\r\nimport type { IActionEvent } from \"./actionEvent\";\r\nimport type { IAction } from \"./action\";\r\nimport { Constants } from \"../Engines/constants\";\r\nimport type { Nullable } from \"../types\";\r\n\r\n/**\r\n * Abstract class used to decouple action Manager from scene and meshes.\r\n * Do not instantiate.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\r\nexport abstract class AbstractActionManager implements IDisposable {\r\n    /** Gets the list of active triggers */\r\n    public static Triggers: { [key: string]: number } = {};\r\n\r\n    /** Gets the cursor to use when hovering items */\r\n    public hoverCursor: string = \"\";\r\n\r\n    /** Gets the list of actions */\r\n    public actions = new Array<IAction>();\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that the manager is recursive meaning that it can trigger action from children\r\n     */\r\n    public isRecursive = false;\r\n\r\n    /**\r\n     * Releases all associated resources\r\n     */\r\n    public abstract dispose(): void;\r\n\r\n    /**\r\n     * Does this action manager has pointer triggers\r\n     */\r\n    public abstract get hasPointerTriggers(): boolean;\r\n\r\n    /**\r\n     * Does this action manager has pick triggers\r\n     */\r\n    public abstract get hasPickTriggers(): boolean;\r\n\r\n    /**\r\n     * Process a specific trigger\r\n     * @param trigger defines the trigger to process\r\n     * @param evt defines the event details to be processed\r\n     */\r\n    public abstract processTrigger(trigger: number, evt?: IActionEvent): void;\r\n\r\n    /**\r\n     * Does this action manager handles actions of any of the given triggers\r\n     * @param triggers defines the triggers to be tested\r\n     * @return a boolean indicating whether one (or more) of the triggers is handled\r\n     */\r\n    public abstract hasSpecificTriggers(triggers: number[]): boolean;\r\n\r\n    /**\r\n     * Does this action manager handles actions of any of the given triggers. This function takes two arguments for\r\n     * speed.\r\n     * @param triggerA defines the trigger to be tested\r\n     * @param triggerB defines the trigger to be tested\r\n     * @return a boolean indicating whether one (or more) of the triggers is handled\r\n     */\r\n    public abstract hasSpecificTriggers2(triggerA: number, triggerB: number): boolean;\r\n\r\n    /**\r\n     * Does this action manager handles actions of a given trigger\r\n     * @param trigger defines the trigger to be tested\r\n     * @param parameterPredicate defines an optional predicate to filter triggers by parameter\r\n     * @return whether the trigger is handled\r\n     */\r\n    public abstract hasSpecificTrigger(trigger: number, parameterPredicate?: (parameter: any) => boolean): boolean;\r\n\r\n    /**\r\n     * Serialize this manager to a JSON object\r\n     * @param name defines the property name to store this manager\r\n     * @returns a JSON representation of this manager\r\n     */\r\n    public abstract serialize(name: string): any;\r\n\r\n    /**\r\n     * Registers an action to this action manager\r\n     * @param action defines the action to be registered\r\n     * @return the action amended (prepared) after registration\r\n     */\r\n    public abstract registerAction(action: IAction): Nullable<IAction>;\r\n\r\n    /**\r\n     * Unregisters an action to this action manager\r\n     * @param action defines the action to be unregistered\r\n     * @return a boolean indicating whether the action has been unregistered\r\n     */\r\n    public abstract unregisterAction(action: IAction): Boolean;\r\n\r\n    /**\r\n     * Does exist one action manager with at least one trigger\r\n     **/\r\n    public static get HasTriggers(): boolean {\r\n        for (const t in AbstractActionManager.Triggers) {\r\n            if (Object.prototype.hasOwnProperty.call(AbstractActionManager.Triggers, t)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Does exist one action manager with at least one pick trigger\r\n     **/\r\n    public static get HasPickTriggers(): boolean {\r\n        for (const t in AbstractActionManager.Triggers) {\r\n            if (Object.prototype.hasOwnProperty.call(AbstractActionManager.Triggers, t)) {\r\n                const tAsInt = parseInt(t);\r\n                if (tAsInt >= Constants.ACTION_OnPickTrigger && tAsInt <= Constants.ACTION_OnPickUpTrigger) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Does exist one action manager that handles actions of a given trigger\r\n     * @param trigger defines the trigger to be tested\r\n     * @return a boolean indicating whether the trigger is handled by at least one action manager\r\n     **/\r\n    public static HasSpecificTrigger(trigger: number): boolean {\r\n        for (const t in AbstractActionManager.Triggers) {\r\n            if (Object.prototype.hasOwnProperty.call(AbstractActionManager.Triggers, t)) {\r\n                const tAsInt = parseInt(t);\r\n                if (tAsInt === trigger) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}