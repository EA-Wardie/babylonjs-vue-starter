{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { Matrix, TmpVectors, Vector3 } from \"../Maths/math.vector.js\";\nimport { CreateLines } from \"../Meshes/Builders/linesBuilder.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { VertexData } from \"../Meshes/mesh.vertexData.js\";\nimport { TransformNode } from \"../Meshes/transformNode.js\";\n/**\n * Class used to render a debug view of the frustum for a directional light\n * @see https://playground.babylonjs.com/#7EFGSG#4\n * @since 5.0.0\n */\n\nvar DirectionalLightFrustumViewer =\n/** @class */\nfunction () {\n  /**\n   * Creates a new frustum viewer\n   * @param light directional light to display the frustum for\n   * @param camera camera used to retrieve the minZ / maxZ values if the shadowMinZ/shadowMaxZ values of the light are not setup\n   */\n  function DirectionalLightFrustumViewer(light, camera) {\n    this._oldPosition = new Vector3(Number.NaN, Number.NaN, Number.NaN);\n    this._oldDirection = new Vector3(Number.NaN, Number.NaN, Number.NaN);\n    this._transparency = 0.3;\n    this._showLines = true;\n    this._showPlanes = true;\n    this._scene = light.getScene();\n    this._light = light;\n    this._camera = camera;\n    this._inverseViewMatrix = Matrix.Identity();\n    this._lightHelperFrustumMeshes = [];\n\n    this._createGeometry();\n\n    this.show();\n    this.update();\n  }\n\n  Object.defineProperty(DirectionalLightFrustumViewer.prototype, \"transparency\", {\n    /**\n     * Gets or sets the transparency of the frustum planes\n     */\n    get: function get() {\n      return this._transparency;\n    },\n    set: function set(alpha) {\n      this._transparency = alpha;\n\n      for (var i = 6; i < 12; ++i) {\n        this._lightHelperFrustumMeshes[i].material.alpha = alpha;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DirectionalLightFrustumViewer.prototype, \"showLines\", {\n    /**\n     * true to display the edges of the frustum\n     */\n    get: function get() {\n      return this._showLines;\n    },\n    set: function set(show) {\n      if (this._showLines === show) {\n        return;\n      }\n\n      this._showLines = show;\n\n      for (var i = 0; i < 6; ++i) {\n        this._lightHelperFrustumMeshes[i].setEnabled(show);\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DirectionalLightFrustumViewer.prototype, \"showPlanes\", {\n    /**\n     * true to display the planes of the frustum\n     */\n    get: function get() {\n      return this._showPlanes;\n    },\n    set: function set(show) {\n      if (this._showPlanes === show) {\n        return;\n      }\n\n      this._showPlanes = show;\n\n      for (var i = 6; i < 12; ++i) {\n        this._lightHelperFrustumMeshes[i].setEnabled(show);\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Shows the frustum\n   */\n\n  DirectionalLightFrustumViewer.prototype.show = function () {\n    var _this = this;\n\n    this._lightHelperFrustumMeshes.forEach(function (mesh, index) {\n      mesh.setEnabled(index < 6 && _this._showLines || index >= 6 && _this._showPlanes);\n    });\n\n    this._oldPosition.set(Number.NaN, Number.NaN, Number.NaN);\n\n    this._visible = true;\n  };\n  /**\n   * Hides the frustum\n   */\n\n\n  DirectionalLightFrustumViewer.prototype.hide = function () {\n    this._lightHelperFrustumMeshes.forEach(function (mesh) {\n      mesh.setEnabled(false);\n    });\n\n    this._visible = false;\n  };\n  /**\n   * Updates the frustum.\n   * Call this method to update the frustum view if the light has changed position/direction\n   */\n\n\n  DirectionalLightFrustumViewer.prototype.update = function () {\n    var _a, _b, _c, _d, _e, _f;\n\n    if (!this._visible) {\n      return;\n    }\n\n    if (this._oldPosition.equals(this._light.position) && this._oldDirection.equals(this._light.direction) && this._oldAutoCalc === this._light.autoCalcShadowZBounds && this._oldMinZ === this._light.shadowMinZ && this._oldMaxZ === this._light.shadowMaxZ) {\n      return;\n    }\n\n    this._oldPosition.copyFrom(this._light.position);\n\n    this._oldDirection.copyFrom(this._light.direction);\n\n    this._oldAutoCalc = this._light.autoCalcShadowZBounds;\n    this._oldMinZ = this._light.shadowMinZ;\n    this._oldMaxZ = this._light.shadowMaxZ;\n    TmpVectors.Vector3[0].set(this._light.orthoLeft, this._light.orthoBottom, this._light.shadowMinZ !== undefined ? this._light.shadowMinZ : this._camera.minZ); // min light extents\n\n    TmpVectors.Vector3[1].set(this._light.orthoRight, this._light.orthoTop, this._light.shadowMaxZ !== undefined ? this._light.shadowMaxZ : this._camera.maxZ); // max light extents\n\n    var invLightView = this._getInvertViewMatrix();\n\n    TmpVectors.Vector3[2].copyFromFloats(TmpVectors.Vector3[1].x, TmpVectors.Vector3[1].y, TmpVectors.Vector3[0].z); // n1\n\n    TmpVectors.Vector3[3].copyFromFloats(TmpVectors.Vector3[1].x, TmpVectors.Vector3[0].y, TmpVectors.Vector3[0].z); // n2\n\n    TmpVectors.Vector3[4].copyFromFloats(TmpVectors.Vector3[0].x, TmpVectors.Vector3[0].y, TmpVectors.Vector3[0].z); // n3\n\n    TmpVectors.Vector3[5].copyFromFloats(TmpVectors.Vector3[0].x, TmpVectors.Vector3[1].y, TmpVectors.Vector3[0].z); // n4\n\n    Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[2], invLightView, TmpVectors.Vector3[2]); // near1\n\n    Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[3], invLightView, TmpVectors.Vector3[3]); // near2\n\n    Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[4], invLightView, TmpVectors.Vector3[4]); // near3\n\n    Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[5], invLightView, TmpVectors.Vector3[5]); // near4\n\n    TmpVectors.Vector3[6].copyFromFloats(TmpVectors.Vector3[1].x, TmpVectors.Vector3[1].y, TmpVectors.Vector3[1].z); // f1\n\n    TmpVectors.Vector3[7].copyFromFloats(TmpVectors.Vector3[1].x, TmpVectors.Vector3[0].y, TmpVectors.Vector3[1].z); // f2\n\n    TmpVectors.Vector3[8].copyFromFloats(TmpVectors.Vector3[0].x, TmpVectors.Vector3[0].y, TmpVectors.Vector3[1].z); // f3\n\n    TmpVectors.Vector3[9].copyFromFloats(TmpVectors.Vector3[0].x, TmpVectors.Vector3[1].y, TmpVectors.Vector3[1].z); // f4\n\n    Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[6], invLightView, TmpVectors.Vector3[6]); // far1\n\n    Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[7], invLightView, TmpVectors.Vector3[7]); // far2\n\n    Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[8], invLightView, TmpVectors.Vector3[8]); // far3\n\n    Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[9], invLightView, TmpVectors.Vector3[9]); // far4\n\n    CreateLines(\"nearlines\", {\n      updatable: true,\n      points: this._nearLinesPoints,\n      instance: this._lightHelperFrustumMeshes[0]\n    }, this._scene);\n    CreateLines(\"farlines\", {\n      updatable: true,\n      points: this._farLinesPoints,\n      instance: this._lightHelperFrustumMeshes[1]\n    }, this._scene);\n    CreateLines(\"trlines\", {\n      updatable: true,\n      points: this._trLinesPoints,\n      instance: this._lightHelperFrustumMeshes[2]\n    }, this._scene);\n    CreateLines(\"brlines\", {\n      updatable: true,\n      points: this._brLinesPoints,\n      instance: this._lightHelperFrustumMeshes[3]\n    }, this._scene);\n    CreateLines(\"tllines\", {\n      updatable: true,\n      points: this._tlLinesPoints,\n      instance: this._lightHelperFrustumMeshes[4]\n    }, this._scene);\n    CreateLines(\"bllines\", {\n      updatable: true,\n      points: this._blLinesPoints,\n      instance: this._lightHelperFrustumMeshes[5]\n    }, this._scene);\n    TmpVectors.Vector3[2].toArray(this._nearPlaneVertices, 0);\n    TmpVectors.Vector3[3].toArray(this._nearPlaneVertices, 3);\n    TmpVectors.Vector3[4].toArray(this._nearPlaneVertices, 6);\n    TmpVectors.Vector3[5].toArray(this._nearPlaneVertices, 9);\n    (_a = this._lightHelperFrustumMeshes[6].geometry) === null || _a === void 0 ? void 0 : _a.updateVerticesDataDirectly(\"position\", this._nearPlaneVertices, 0);\n    TmpVectors.Vector3[6].toArray(this._farPlaneVertices, 0);\n    TmpVectors.Vector3[7].toArray(this._farPlaneVertices, 3);\n    TmpVectors.Vector3[8].toArray(this._farPlaneVertices, 6);\n    TmpVectors.Vector3[9].toArray(this._farPlaneVertices, 9);\n    (_b = this._lightHelperFrustumMeshes[7].geometry) === null || _b === void 0 ? void 0 : _b.updateVerticesDataDirectly(\"position\", this._farPlaneVertices, 0);\n    TmpVectors.Vector3[2].toArray(this._rightPlaneVertices, 0);\n    TmpVectors.Vector3[6].toArray(this._rightPlaneVertices, 3);\n    TmpVectors.Vector3[7].toArray(this._rightPlaneVertices, 6);\n    TmpVectors.Vector3[3].toArray(this._rightPlaneVertices, 9);\n    (_c = this._lightHelperFrustumMeshes[8].geometry) === null || _c === void 0 ? void 0 : _c.updateVerticesDataDirectly(\"position\", this._rightPlaneVertices, 0);\n    TmpVectors.Vector3[5].toArray(this._leftPlaneVertices, 0);\n    TmpVectors.Vector3[9].toArray(this._leftPlaneVertices, 3);\n    TmpVectors.Vector3[8].toArray(this._leftPlaneVertices, 6);\n    TmpVectors.Vector3[4].toArray(this._leftPlaneVertices, 9);\n    (_d = this._lightHelperFrustumMeshes[9].geometry) === null || _d === void 0 ? void 0 : _d.updateVerticesDataDirectly(\"position\", this._leftPlaneVertices, 0);\n    TmpVectors.Vector3[2].toArray(this._topPlaneVertices, 0);\n    TmpVectors.Vector3[6].toArray(this._topPlaneVertices, 3);\n    TmpVectors.Vector3[9].toArray(this._topPlaneVertices, 6);\n    TmpVectors.Vector3[5].toArray(this._topPlaneVertices, 9);\n    (_e = this._lightHelperFrustumMeshes[10].geometry) === null || _e === void 0 ? void 0 : _e.updateVerticesDataDirectly(\"position\", this._topPlaneVertices, 0);\n    TmpVectors.Vector3[3].toArray(this._bottomPlaneVertices, 0);\n    TmpVectors.Vector3[7].toArray(this._bottomPlaneVertices, 3);\n    TmpVectors.Vector3[8].toArray(this._bottomPlaneVertices, 6);\n    TmpVectors.Vector3[4].toArray(this._bottomPlaneVertices, 9);\n    (_f = this._lightHelperFrustumMeshes[11].geometry) === null || _f === void 0 ? void 0 : _f.updateVerticesDataDirectly(\"position\", this._bottomPlaneVertices, 0);\n  };\n  /**\n   * Dispose of the class / remove the frustum view\n   */\n\n\n  DirectionalLightFrustumViewer.prototype.dispose = function () {\n    this._lightHelperFrustumMeshes.forEach(function (mesh) {\n      var _a;\n\n      (_a = mesh.material) === null || _a === void 0 ? void 0 : _a.dispose();\n      mesh.dispose();\n    });\n\n    this._rootNode.dispose();\n  };\n\n  DirectionalLightFrustumViewer.prototype._createGeometry = function () {\n    var _this = this;\n\n    this._rootNode = new TransformNode(\"directionalLightHelperRoot_\" + this._light.name, this._scene);\n    this._rootNode.parent = this._light.parent;\n    this._nearLinesPoints = [Vector3.ZeroReadOnly, Vector3.ZeroReadOnly, Vector3.ZeroReadOnly, Vector3.ZeroReadOnly, Vector3.ZeroReadOnly];\n    var nearLines = CreateLines(\"nearlines\", {\n      updatable: true,\n      points: this._nearLinesPoints\n    }, this._scene);\n    nearLines.parent = this._rootNode;\n    nearLines.alwaysSelectAsActiveMesh = true;\n    this._farLinesPoints = [Vector3.ZeroReadOnly, Vector3.ZeroReadOnly, Vector3.ZeroReadOnly, Vector3.ZeroReadOnly, Vector3.ZeroReadOnly];\n    var farLines = CreateLines(\"farlines\", {\n      updatable: true,\n      points: this._farLinesPoints\n    }, this._scene);\n    farLines.parent = this._rootNode;\n    farLines.alwaysSelectAsActiveMesh = true;\n    this._trLinesPoints = [Vector3.ZeroReadOnly, Vector3.ZeroReadOnly];\n    var trLines = CreateLines(\"trlines\", {\n      updatable: true,\n      points: this._trLinesPoints\n    }, this._scene);\n    trLines.parent = this._rootNode;\n    trLines.alwaysSelectAsActiveMesh = true;\n    this._brLinesPoints = [Vector3.ZeroReadOnly, Vector3.ZeroReadOnly];\n    var brLines = CreateLines(\"brlines\", {\n      updatable: true,\n      points: this._brLinesPoints\n    }, this._scene);\n    brLines.parent = this._rootNode;\n    brLines.alwaysSelectAsActiveMesh = true;\n    this._tlLinesPoints = [Vector3.ZeroReadOnly, Vector3.ZeroReadOnly];\n    var tlLines = CreateLines(\"tllines\", {\n      updatable: true,\n      points: this._tlLinesPoints\n    }, this._scene);\n    tlLines.parent = this._rootNode;\n    tlLines.alwaysSelectAsActiveMesh = true;\n    this._blLinesPoints = [Vector3.ZeroReadOnly, Vector3.ZeroReadOnly];\n    var blLines = CreateLines(\"bllines\", {\n      updatable: true,\n      points: this._blLinesPoints\n    }, this._scene);\n    blLines.parent = this._rootNode;\n    blLines.alwaysSelectAsActiveMesh = true;\n\n    this._lightHelperFrustumMeshes.push(nearLines, farLines, trLines, brLines, tlLines, blLines);\n\n    var makePlane = function makePlane(name, color, positions) {\n      var plane = new Mesh(name + \"plane\", _this._scene);\n      var mat = new StandardMaterial(name + \"PlaneMat\", _this._scene);\n      plane.material = mat;\n      plane.parent = _this._rootNode;\n      plane.alwaysSelectAsActiveMesh = true;\n      mat.emissiveColor = color;\n      mat.alpha = _this.transparency;\n      mat.backFaceCulling = false;\n      mat.disableLighting = true;\n      var indices = [0, 1, 2, 0, 2, 3];\n      var vertexData = new VertexData();\n      vertexData.positions = positions;\n      vertexData.indices = indices;\n      vertexData.applyToMesh(plane, true);\n\n      _this._lightHelperFrustumMeshes.push(plane);\n    };\n\n    this._nearPlaneVertices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    this._farPlaneVertices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    this._rightPlaneVertices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    this._leftPlaneVertices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    this._topPlaneVertices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    this._bottomPlaneVertices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    makePlane(\"near\", new Color3(1, 0, 0), this._nearPlaneVertices);\n    makePlane(\"far\", new Color3(0.3, 0, 0), this._farPlaneVertices);\n    makePlane(\"right\", new Color3(0, 1, 0), this._rightPlaneVertices);\n    makePlane(\"left\", new Color3(0, 0.3, 0), this._leftPlaneVertices);\n    makePlane(\"top\", new Color3(0, 0, 1), this._topPlaneVertices);\n    makePlane(\"bottom\", new Color3(0, 0, 0.3), this._bottomPlaneVertices);\n    this._nearLinesPoints[0] = TmpVectors.Vector3[2];\n    this._nearLinesPoints[1] = TmpVectors.Vector3[3];\n    this._nearLinesPoints[2] = TmpVectors.Vector3[4];\n    this._nearLinesPoints[3] = TmpVectors.Vector3[5];\n    this._nearLinesPoints[4] = TmpVectors.Vector3[2];\n    this._farLinesPoints[0] = TmpVectors.Vector3[6];\n    this._farLinesPoints[1] = TmpVectors.Vector3[7];\n    this._farLinesPoints[2] = TmpVectors.Vector3[8];\n    this._farLinesPoints[3] = TmpVectors.Vector3[9];\n    this._farLinesPoints[4] = TmpVectors.Vector3[6];\n    this._trLinesPoints[0] = TmpVectors.Vector3[2];\n    this._trLinesPoints[1] = TmpVectors.Vector3[6];\n    this._brLinesPoints[0] = TmpVectors.Vector3[3];\n    this._brLinesPoints[1] = TmpVectors.Vector3[7];\n    this._tlLinesPoints[0] = TmpVectors.Vector3[4];\n    this._tlLinesPoints[1] = TmpVectors.Vector3[8];\n    this._blLinesPoints[0] = TmpVectors.Vector3[5];\n    this._blLinesPoints[1] = TmpVectors.Vector3[9];\n  };\n\n  DirectionalLightFrustumViewer.prototype._getInvertViewMatrix = function () {\n    Matrix.LookAtLHToRef(this._light.position, this._light.position.add(this._light.direction), Vector3.UpReadOnly, this._inverseViewMatrix);\n\n    this._inverseViewMatrix.invertToRef(this._inverseViewMatrix);\n\n    return this._inverseViewMatrix;\n  };\n\n  return DirectionalLightFrustumViewer;\n}();\n\nexport { DirectionalLightFrustumViewer };","map":{"version":3,"mappings":"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","names":["StandardMaterial","Color3","Matrix","TmpVectors","Vector3","CreateLines","Mesh","VertexData","TransformNode","light","camera","Number","NaN","_scene","getScene","_light","_camera","_inverseViewMatrix","Identity","_lightHelperFrustumMeshes","_createGeometry","show","update","Object","DirectionalLightFrustumViewer","_transparency","alpha","i","material","_showLines","setEnabled","_showPlanes","forEach","mesh","index","_this","_oldPosition","set","_visible","equals","position","_oldDirection","direction","_oldAutoCalc","autoCalcShadowZBounds","_oldMinZ","shadowMinZ","_oldMaxZ","shadowMaxZ","copyFrom","orthoLeft","orthoBottom","undefined","minZ","orthoRight","orthoTop","maxZ","invLightView","_getInvertViewMatrix","copyFromFloats","x","y","z","TransformCoordinatesToRef","updatable","points","_nearLinesPoints","instance","_farLinesPoints","_trLinesPoints","_brLinesPoints","_tlLinesPoints","_blLinesPoints","toArray","_nearPlaneVertices","geometry","_a","updateVerticesDataDirectly","_farPlaneVertices","_b","_rightPlaneVertices","_c","_leftPlaneVertices","_d","_topPlaneVertices","_e","_bottomPlaneVertices","_f","dispose","_rootNode","name","parent","ZeroReadOnly","nearLines","alwaysSelectAsActiveMesh","farLines","trLines","brLines","tlLines","blLines","push","makePlane","color","positions","plane","mat","emissiveColor","transparency","backFaceCulling","disableLighting","indices","vertexData","applyToMesh","LookAtLHToRef","add","UpReadOnly","invertToRef"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Debug/directionalLightFrustumViewer.ts"],"sourcesContent":["import type { Camera } from \"../Cameras/camera\";\r\nimport type { DirectionalLight } from \"../Lights/directionalLight\";\r\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { Matrix, TmpVectors, Vector3 } from \"../Maths/math.vector\";\r\nimport { CreateLines } from \"../Meshes/Builders/linesBuilder\";\r\nimport type { LinesMesh } from \"../Meshes/linesMesh\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { VertexData } from \"../Meshes/mesh.vertexData\";\r\nimport { TransformNode } from \"../Meshes/transformNode\";\r\nimport type { Scene } from \"../scene\";\r\n\r\n/**\r\n * Class used to render a debug view of the frustum for a directional light\r\n * @see https://playground.babylonjs.com/#7EFGSG#4\r\n * @since 5.0.0\r\n */\r\nexport class DirectionalLightFrustumViewer {\r\n    private _scene: Scene;\r\n    private _light: DirectionalLight;\r\n    private _camera: Camera;\r\n    private _inverseViewMatrix: Matrix;\r\n    private _visible: boolean;\r\n\r\n    private _rootNode: TransformNode;\r\n    private _lightHelperFrustumMeshes: Mesh[];\r\n\r\n    private _nearLinesPoints: Vector3[];\r\n    private _farLinesPoints: Vector3[];\r\n    private _trLinesPoints: Vector3[];\r\n    private _brLinesPoints: Vector3[];\r\n    private _tlLinesPoints: Vector3[];\r\n    private _blLinesPoints: Vector3[];\r\n\r\n    private _nearPlaneVertices: number[];\r\n    private _farPlaneVertices: number[];\r\n    private _rightPlaneVertices: number[];\r\n    private _leftPlaneVertices: number[];\r\n    private _topPlaneVertices: number[];\r\n    private _bottomPlaneVertices: number[];\r\n\r\n    private _oldPosition: Vector3 = new Vector3(Number.NaN, Number.NaN, Number.NaN);\r\n    private _oldDirection: Vector3 = new Vector3(Number.NaN, Number.NaN, Number.NaN);\r\n    private _oldAutoCalc: boolean;\r\n    private _oldMinZ: number;\r\n    private _oldMaxZ: number;\r\n\r\n    private _transparency = 0.3;\r\n    /**\r\n     * Gets or sets the transparency of the frustum planes\r\n     */\r\n    public get transparency(): number {\r\n        return this._transparency;\r\n    }\r\n\r\n    public set transparency(alpha: number) {\r\n        this._transparency = alpha;\r\n        for (let i = 6; i < 12; ++i) {\r\n            this._lightHelperFrustumMeshes[i].material!.alpha = alpha;\r\n        }\r\n    }\r\n\r\n    private _showLines = true;\r\n    /**\r\n     * true to display the edges of the frustum\r\n     */\r\n    public get showLines(): boolean {\r\n        return this._showLines;\r\n    }\r\n\r\n    public set showLines(show: boolean) {\r\n        if (this._showLines === show) {\r\n            return;\r\n        }\r\n        this._showLines = show;\r\n        for (let i = 0; i < 6; ++i) {\r\n            this._lightHelperFrustumMeshes[i].setEnabled(show);\r\n        }\r\n    }\r\n\r\n    private _showPlanes = true;\r\n    /**\r\n     * true to display the planes of the frustum\r\n     */\r\n    public get showPlanes(): boolean {\r\n        return this._showPlanes;\r\n    }\r\n\r\n    public set showPlanes(show: boolean) {\r\n        if (this._showPlanes === show) {\r\n            return;\r\n        }\r\n        this._showPlanes = show;\r\n        for (let i = 6; i < 12; ++i) {\r\n            this._lightHelperFrustumMeshes[i].setEnabled(show);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new frustum viewer\r\n     * @param light directional light to display the frustum for\r\n     * @param camera camera used to retrieve the minZ / maxZ values if the shadowMinZ/shadowMaxZ values of the light are not setup\r\n     */\r\n    constructor(light: DirectionalLight, camera: Camera) {\r\n        this._scene = light.getScene();\r\n        this._light = light;\r\n        this._camera = camera;\r\n        this._inverseViewMatrix = Matrix.Identity();\r\n        this._lightHelperFrustumMeshes = [];\r\n        this._createGeometry();\r\n        this.show();\r\n        this.update();\r\n    }\r\n\r\n    /**\r\n     * Shows the frustum\r\n     */\r\n    public show() {\r\n        this._lightHelperFrustumMeshes.forEach((mesh, index) => {\r\n            mesh.setEnabled((index < 6 && this._showLines) || (index >= 6 && this._showPlanes));\r\n        });\r\n        this._oldPosition.set(Number.NaN, Number.NaN, Number.NaN);\r\n        this._visible = true;\r\n    }\r\n\r\n    /**\r\n     * Hides the frustum\r\n     */\r\n    public hide() {\r\n        this._lightHelperFrustumMeshes.forEach((mesh) => {\r\n            mesh.setEnabled(false);\r\n        });\r\n        this._visible = false;\r\n    }\r\n\r\n    /**\r\n     * Updates the frustum.\r\n     * Call this method to update the frustum view if the light has changed position/direction\r\n     */\r\n    public update() {\r\n        if (!this._visible) {\r\n            return;\r\n        }\r\n\r\n        if (\r\n            this._oldPosition.equals(this._light.position) &&\r\n            this._oldDirection.equals(this._light.direction) &&\r\n            this._oldAutoCalc === this._light.autoCalcShadowZBounds &&\r\n            this._oldMinZ === this._light.shadowMinZ &&\r\n            this._oldMaxZ === this._light.shadowMaxZ\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        this._oldPosition.copyFrom(this._light.position);\r\n        this._oldDirection.copyFrom(this._light.direction);\r\n        this._oldAutoCalc = this._light.autoCalcShadowZBounds;\r\n        this._oldMinZ = this._light.shadowMinZ;\r\n        this._oldMaxZ = this._light.shadowMaxZ;\r\n\r\n        TmpVectors.Vector3[0].set(this._light.orthoLeft, this._light.orthoBottom, this._light.shadowMinZ !== undefined ? this._light.shadowMinZ : this._camera.minZ); // min light extents\r\n        TmpVectors.Vector3[1].set(this._light.orthoRight, this._light.orthoTop, this._light.shadowMaxZ !== undefined ? this._light.shadowMaxZ : this._camera.maxZ); // max light extents\r\n\r\n        const invLightView = this._getInvertViewMatrix();\r\n\r\n        TmpVectors.Vector3[2].copyFromFloats(TmpVectors.Vector3[1].x, TmpVectors.Vector3[1].y, TmpVectors.Vector3[0].z); // n1\r\n        TmpVectors.Vector3[3].copyFromFloats(TmpVectors.Vector3[1].x, TmpVectors.Vector3[0].y, TmpVectors.Vector3[0].z); // n2\r\n        TmpVectors.Vector3[4].copyFromFloats(TmpVectors.Vector3[0].x, TmpVectors.Vector3[0].y, TmpVectors.Vector3[0].z); // n3\r\n        TmpVectors.Vector3[5].copyFromFloats(TmpVectors.Vector3[0].x, TmpVectors.Vector3[1].y, TmpVectors.Vector3[0].z); // n4\r\n\r\n        Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[2], invLightView, TmpVectors.Vector3[2]); // near1\r\n        Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[3], invLightView, TmpVectors.Vector3[3]); // near2\r\n        Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[4], invLightView, TmpVectors.Vector3[4]); // near3\r\n        Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[5], invLightView, TmpVectors.Vector3[5]); // near4\r\n\r\n        TmpVectors.Vector3[6].copyFromFloats(TmpVectors.Vector3[1].x, TmpVectors.Vector3[1].y, TmpVectors.Vector3[1].z); // f1\r\n        TmpVectors.Vector3[7].copyFromFloats(TmpVectors.Vector3[1].x, TmpVectors.Vector3[0].y, TmpVectors.Vector3[1].z); // f2\r\n        TmpVectors.Vector3[8].copyFromFloats(TmpVectors.Vector3[0].x, TmpVectors.Vector3[0].y, TmpVectors.Vector3[1].z); // f3\r\n        TmpVectors.Vector3[9].copyFromFloats(TmpVectors.Vector3[0].x, TmpVectors.Vector3[1].y, TmpVectors.Vector3[1].z); // f4\r\n\r\n        Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[6], invLightView, TmpVectors.Vector3[6]); // far1\r\n        Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[7], invLightView, TmpVectors.Vector3[7]); // far2\r\n        Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[8], invLightView, TmpVectors.Vector3[8]); // far3\r\n        Vector3.TransformCoordinatesToRef(TmpVectors.Vector3[9], invLightView, TmpVectors.Vector3[9]); // far4\r\n\r\n        CreateLines(\"nearlines\", { updatable: true, points: this._nearLinesPoints, instance: this._lightHelperFrustumMeshes[0] as LinesMesh }, this._scene);\r\n\r\n        CreateLines(\"farlines\", { updatable: true, points: this._farLinesPoints, instance: this._lightHelperFrustumMeshes[1] as LinesMesh }, this._scene);\r\n\r\n        CreateLines(\"trlines\", { updatable: true, points: this._trLinesPoints, instance: this._lightHelperFrustumMeshes[2] as LinesMesh }, this._scene);\r\n\r\n        CreateLines(\"brlines\", { updatable: true, points: this._brLinesPoints, instance: this._lightHelperFrustumMeshes[3] as LinesMesh }, this._scene);\r\n\r\n        CreateLines(\"tllines\", { updatable: true, points: this._tlLinesPoints, instance: this._lightHelperFrustumMeshes[4] as LinesMesh }, this._scene);\r\n\r\n        CreateLines(\"bllines\", { updatable: true, points: this._blLinesPoints, instance: this._lightHelperFrustumMeshes[5] as LinesMesh }, this._scene);\r\n\r\n        TmpVectors.Vector3[2].toArray(this._nearPlaneVertices, 0);\r\n        TmpVectors.Vector3[3].toArray(this._nearPlaneVertices, 3);\r\n        TmpVectors.Vector3[4].toArray(this._nearPlaneVertices, 6);\r\n        TmpVectors.Vector3[5].toArray(this._nearPlaneVertices, 9);\r\n        this._lightHelperFrustumMeshes[6].geometry?.updateVerticesDataDirectly(\"position\", this._nearPlaneVertices, 0);\r\n\r\n        TmpVectors.Vector3[6].toArray(this._farPlaneVertices, 0);\r\n        TmpVectors.Vector3[7].toArray(this._farPlaneVertices, 3);\r\n        TmpVectors.Vector3[8].toArray(this._farPlaneVertices, 6);\r\n        TmpVectors.Vector3[9].toArray(this._farPlaneVertices, 9);\r\n        this._lightHelperFrustumMeshes[7].geometry?.updateVerticesDataDirectly(\"position\", this._farPlaneVertices, 0);\r\n\r\n        TmpVectors.Vector3[2].toArray(this._rightPlaneVertices, 0);\r\n        TmpVectors.Vector3[6].toArray(this._rightPlaneVertices, 3);\r\n        TmpVectors.Vector3[7].toArray(this._rightPlaneVertices, 6);\r\n        TmpVectors.Vector3[3].toArray(this._rightPlaneVertices, 9);\r\n        this._lightHelperFrustumMeshes[8].geometry?.updateVerticesDataDirectly(\"position\", this._rightPlaneVertices, 0);\r\n\r\n        TmpVectors.Vector3[5].toArray(this._leftPlaneVertices, 0);\r\n        TmpVectors.Vector3[9].toArray(this._leftPlaneVertices, 3);\r\n        TmpVectors.Vector3[8].toArray(this._leftPlaneVertices, 6);\r\n        TmpVectors.Vector3[4].toArray(this._leftPlaneVertices, 9);\r\n        this._lightHelperFrustumMeshes[9].geometry?.updateVerticesDataDirectly(\"position\", this._leftPlaneVertices, 0);\r\n\r\n        TmpVectors.Vector3[2].toArray(this._topPlaneVertices, 0);\r\n        TmpVectors.Vector3[6].toArray(this._topPlaneVertices, 3);\r\n        TmpVectors.Vector3[9].toArray(this._topPlaneVertices, 6);\r\n        TmpVectors.Vector3[5].toArray(this._topPlaneVertices, 9);\r\n        this._lightHelperFrustumMeshes[10].geometry?.updateVerticesDataDirectly(\"position\", this._topPlaneVertices, 0);\r\n\r\n        TmpVectors.Vector3[3].toArray(this._bottomPlaneVertices, 0);\r\n        TmpVectors.Vector3[7].toArray(this._bottomPlaneVertices, 3);\r\n        TmpVectors.Vector3[8].toArray(this._bottomPlaneVertices, 6);\r\n        TmpVectors.Vector3[4].toArray(this._bottomPlaneVertices, 9);\r\n        this._lightHelperFrustumMeshes[11].geometry?.updateVerticesDataDirectly(\"position\", this._bottomPlaneVertices, 0);\r\n    }\r\n\r\n    /**\r\n     * Dispose of the class / remove the frustum view\r\n     */\r\n    public dispose() {\r\n        this._lightHelperFrustumMeshes.forEach((mesh) => {\r\n            mesh.material?.dispose();\r\n            mesh.dispose();\r\n        });\r\n        this._rootNode.dispose();\r\n    }\r\n\r\n    protected _createGeometry() {\r\n        this._rootNode = new TransformNode(\"directionalLightHelperRoot_\" + this._light.name, this._scene);\r\n        this._rootNode.parent = this._light.parent;\r\n\r\n        this._nearLinesPoints = [Vector3.ZeroReadOnly, Vector3.ZeroReadOnly, Vector3.ZeroReadOnly, Vector3.ZeroReadOnly, Vector3.ZeroReadOnly];\r\n        const nearLines = CreateLines(\"nearlines\", { updatable: true, points: this._nearLinesPoints }, this._scene);\r\n        nearLines.parent = this._rootNode;\r\n        nearLines.alwaysSelectAsActiveMesh = true;\r\n\r\n        this._farLinesPoints = [Vector3.ZeroReadOnly, Vector3.ZeroReadOnly, Vector3.ZeroReadOnly, Vector3.ZeroReadOnly, Vector3.ZeroReadOnly];\r\n        const farLines = CreateLines(\"farlines\", { updatable: true, points: this._farLinesPoints }, this._scene);\r\n        farLines.parent = this._rootNode;\r\n        farLines.alwaysSelectAsActiveMesh = true;\r\n\r\n        this._trLinesPoints = [Vector3.ZeroReadOnly, Vector3.ZeroReadOnly];\r\n        const trLines = CreateLines(\"trlines\", { updatable: true, points: this._trLinesPoints }, this._scene);\r\n        trLines.parent = this._rootNode;\r\n        trLines.alwaysSelectAsActiveMesh = true;\r\n\r\n        this._brLinesPoints = [Vector3.ZeroReadOnly, Vector3.ZeroReadOnly];\r\n        const brLines = CreateLines(\"brlines\", { updatable: true, points: this._brLinesPoints }, this._scene);\r\n        brLines.parent = this._rootNode;\r\n        brLines.alwaysSelectAsActiveMesh = true;\r\n\r\n        this._tlLinesPoints = [Vector3.ZeroReadOnly, Vector3.ZeroReadOnly];\r\n        const tlLines = CreateLines(\"tllines\", { updatable: true, points: this._tlLinesPoints }, this._scene);\r\n        tlLines.parent = this._rootNode;\r\n        tlLines.alwaysSelectAsActiveMesh = true;\r\n\r\n        this._blLinesPoints = [Vector3.ZeroReadOnly, Vector3.ZeroReadOnly];\r\n        const blLines = CreateLines(\"bllines\", { updatable: true, points: this._blLinesPoints }, this._scene);\r\n        blLines.parent = this._rootNode;\r\n        blLines.alwaysSelectAsActiveMesh = true;\r\n\r\n        this._lightHelperFrustumMeshes.push(nearLines, farLines, trLines, brLines, tlLines, blLines);\r\n\r\n        const makePlane = (name: string, color: Color3, positions: number[]) => {\r\n            const plane = new Mesh(name + \"plane\", this._scene);\r\n            const mat = new StandardMaterial(name + \"PlaneMat\", this._scene);\r\n\r\n            plane.material = mat;\r\n            plane.parent = this._rootNode;\r\n            plane.alwaysSelectAsActiveMesh = true;\r\n\r\n            mat.emissiveColor = color;\r\n            mat.alpha = this.transparency;\r\n            mat.backFaceCulling = false;\r\n            mat.disableLighting = true;\r\n\r\n            const indices = [0, 1, 2, 0, 2, 3];\r\n\r\n            const vertexData = new VertexData();\r\n\r\n            vertexData.positions = positions;\r\n            vertexData.indices = indices;\r\n\r\n            vertexData.applyToMesh(plane, true);\r\n\r\n            this._lightHelperFrustumMeshes.push(plane);\r\n        };\r\n\r\n        this._nearPlaneVertices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        this._farPlaneVertices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        this._rightPlaneVertices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        this._leftPlaneVertices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        this._topPlaneVertices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        this._bottomPlaneVertices = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n\r\n        makePlane(\"near\", new Color3(1, 0, 0), this._nearPlaneVertices);\r\n        makePlane(\"far\", new Color3(0.3, 0, 0), this._farPlaneVertices);\r\n        makePlane(\"right\", new Color3(0, 1, 0), this._rightPlaneVertices);\r\n        makePlane(\"left\", new Color3(0, 0.3, 0), this._leftPlaneVertices);\r\n        makePlane(\"top\", new Color3(0, 0, 1), this._topPlaneVertices);\r\n        makePlane(\"bottom\", new Color3(0, 0, 0.3), this._bottomPlaneVertices);\r\n\r\n        this._nearLinesPoints[0] = TmpVectors.Vector3[2];\r\n        this._nearLinesPoints[1] = TmpVectors.Vector3[3];\r\n        this._nearLinesPoints[2] = TmpVectors.Vector3[4];\r\n        this._nearLinesPoints[3] = TmpVectors.Vector3[5];\r\n        this._nearLinesPoints[4] = TmpVectors.Vector3[2];\r\n\r\n        this._farLinesPoints[0] = TmpVectors.Vector3[6];\r\n        this._farLinesPoints[1] = TmpVectors.Vector3[7];\r\n        this._farLinesPoints[2] = TmpVectors.Vector3[8];\r\n        this._farLinesPoints[3] = TmpVectors.Vector3[9];\r\n        this._farLinesPoints[4] = TmpVectors.Vector3[6];\r\n\r\n        this._trLinesPoints[0] = TmpVectors.Vector3[2];\r\n        this._trLinesPoints[1] = TmpVectors.Vector3[6];\r\n\r\n        this._brLinesPoints[0] = TmpVectors.Vector3[3];\r\n        this._brLinesPoints[1] = TmpVectors.Vector3[7];\r\n\r\n        this._tlLinesPoints[0] = TmpVectors.Vector3[4];\r\n        this._tlLinesPoints[1] = TmpVectors.Vector3[8];\r\n\r\n        this._blLinesPoints[0] = TmpVectors.Vector3[5];\r\n        this._blLinesPoints[1] = TmpVectors.Vector3[9];\r\n    }\r\n\r\n    protected _getInvertViewMatrix(): Matrix {\r\n        Matrix.LookAtLHToRef(this._light.position, this._light.position.add(this._light.direction), Vector3.UpReadOnly, this._inverseViewMatrix);\r\n        this._inverseViewMatrix.invertToRef(this._inverseViewMatrix);\r\n        return this._inverseViewMatrix;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}