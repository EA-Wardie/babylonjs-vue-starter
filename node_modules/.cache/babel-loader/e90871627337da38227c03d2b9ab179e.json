{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { __assign } from \"tslib\";\nimport { Tools } from \"../Misc/tools.js\";\nimport { Observable } from \"../Misc/observable.js\";\nimport { Scene } from \"../scene.js\";\nimport { Engine } from \"../Engines/engine.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\nObject.defineProperty(Scene.prototype, \"debugLayer\", {\n  get: function get() {\n    if (!this._debugLayer) {\n      this._debugLayer = new DebugLayer(this);\n    }\n\n    return this._debugLayer;\n  },\n  enumerable: true,\n  configurable: true\n});\n/**\n * Enum of inspector action tab\n */\n\nexport var DebugLayerTab;\n\n(function (DebugLayerTab) {\n  /**\n   * Properties tag (default)\n   */\n  DebugLayerTab[DebugLayerTab[\"Properties\"] = 0] = \"Properties\";\n  /**\n   * Debug tab\n   */\n\n  DebugLayerTab[DebugLayerTab[\"Debug\"] = 1] = \"Debug\";\n  /**\n   * Statistics tab\n   */\n\n  DebugLayerTab[DebugLayerTab[\"Statistics\"] = 2] = \"Statistics\";\n  /**\n   * Tools tab\n   */\n\n  DebugLayerTab[DebugLayerTab[\"Tools\"] = 3] = \"Tools\";\n  /**\n   * Settings tab\n   */\n\n  DebugLayerTab[DebugLayerTab[\"Settings\"] = 4] = \"Settings\";\n})(DebugLayerTab || (DebugLayerTab = {}));\n/**\n * The debug layer (aka Inspector) is the go to tool in order to better understand\n * what is happening in your scene\n * @see https://doc.babylonjs.com/features/playground_debuglayer\n */\n\n\nvar DebugLayer =\n/** @class */\nfunction () {\n  /**\n   * Instantiates a new debug layer.\n   * The debug layer (aka Inspector) is the go to tool in order to better understand\n   * what is happening in your scene\n   * @see https://doc.babylonjs.com/features/playground_debuglayer\n   * @param scene Defines the scene to inspect\n   */\n  function DebugLayer(scene) {\n    var _this = this; // eslint-disable-next-line @typescript-eslint/naming-convention\n\n\n    this.BJSINSPECTOR = this._getGlobalInspector();\n    this._scene = scene || EngineStore.LastCreatedScene;\n\n    if (!this._scene) {\n      return;\n    }\n\n    this._scene.onDisposeObservable.add(function () {\n      // Debug layer\n      if (_this._scene._debugLayer) {\n        _this._scene._debugLayer.hide();\n      }\n    });\n  }\n\n  Object.defineProperty(DebugLayer.prototype, \"onPropertyChangedObservable\", {\n    /**\n     * Observable triggered when a property is changed through the inspector.\n     */\n    get: function get() {\n      if (this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector) {\n        return this.BJSINSPECTOR.Inspector.OnPropertyChangedObservable;\n      }\n\n      if (!this._onPropertyChangedObservable) {\n        this._onPropertyChangedObservable = new Observable();\n      }\n\n      return this._onPropertyChangedObservable;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DebugLayer.prototype, \"onSelectionChangedObservable\", {\n    /**\n     * Observable triggered when the selection is changed through the inspector.\n     */\n    get: function get() {\n      if (this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector) {\n        return this.BJSINSPECTOR.Inspector.OnSelectionChangeObservable;\n      }\n\n      if (!this._onSelectionChangedObservable) {\n        this._onSelectionChangedObservable = new Observable();\n      }\n\n      return this._onSelectionChangedObservable;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Creates the inspector window.\n   * @param config\n   */\n\n  DebugLayer.prototype._createInspector = function (config) {\n    if (this.isVisible()) {\n      return;\n    }\n\n    if (this._onPropertyChangedObservable) {\n      for (var _i = 0, _a = this._onPropertyChangedObservable.observers; _i < _a.length; _i++) {\n        var observer = _a[_i];\n        this.BJSINSPECTOR.Inspector.OnPropertyChangedObservable.add(observer);\n      }\n\n      this._onPropertyChangedObservable.clear();\n\n      this._onPropertyChangedObservable = undefined;\n    }\n\n    if (this._onSelectionChangedObservable) {\n      for (var _b = 0, _c = this._onSelectionChangedObservable.observers; _b < _c.length; _b++) {\n        var observer = _c[_b];\n        this.BJSINSPECTOR.Inspector.OnSelectionChangedObservable.add(observer);\n      }\n\n      this._onSelectionChangedObservable.clear();\n\n      this._onSelectionChangedObservable = undefined;\n    }\n\n    var userOptions = __assign({\n      overlay: false,\n      showExplorer: true,\n      showInspector: true,\n      embedMode: false,\n      handleResize: true,\n      enablePopup: true\n    }, config);\n\n    this.BJSINSPECTOR = this.BJSINSPECTOR || this._getGlobalInspector();\n    this.BJSINSPECTOR.Inspector.Show(this._scene, userOptions);\n  };\n  /**\n   * Select a specific entity in the scene explorer and highlight a specific block in that entity property grid\n   * @param entity defines the entity to select\n   * @param lineContainerTitles defines the specific blocks to highlight (could be a string or an array of strings)\n   */\n\n\n  DebugLayer.prototype.select = function (entity, lineContainerTitles) {\n    if (this.BJSINSPECTOR) {\n      if (lineContainerTitles) {\n        if (Object.prototype.toString.call(lineContainerTitles) == \"[object String]\") {\n          this.BJSINSPECTOR.Inspector.MarkLineContainerTitleForHighlighting(lineContainerTitles);\n        } else {\n          this.BJSINSPECTOR.Inspector.MarkMultipleLineContainerTitlesForHighlighting(lineContainerTitles);\n        }\n      }\n\n      this.BJSINSPECTOR.Inspector.OnSelectionChangeObservable.notifyObservers(entity);\n    }\n  };\n  /** Get the inspector from bundle or global */\n\n\n  DebugLayer.prototype._getGlobalInspector = function () {\n    // UMD Global name detection from Webpack Bundle UMD Name.\n    if (typeof INSPECTOR !== \"undefined\") {\n      return INSPECTOR;\n    } // In case of module let s check the global emitted from the Inspector entry point.\n\n\n    if (typeof BABYLON !== \"undefined\" && typeof BABYLON.Inspector !== \"undefined\") {\n      return BABYLON;\n    }\n\n    return undefined;\n  };\n  /**\n   * Get if the inspector is visible or not.\n   * @returns true if visible otherwise, false\n   */\n\n\n  DebugLayer.prototype.isVisible = function () {\n    return this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector.IsVisible;\n  };\n  /**\n   * Hide the inspector and close its window.\n   */\n\n\n  DebugLayer.prototype.hide = function () {\n    if (this.BJSINSPECTOR) {\n      this.BJSINSPECTOR.Inspector.Hide();\n    }\n  };\n  /**\n   * Update the scene in the inspector\n   */\n\n\n  DebugLayer.prototype.setAsActiveScene = function () {\n    if (this.BJSINSPECTOR) {\n      this.BJSINSPECTOR.Inspector._SetNewScene(this._scene);\n    }\n  };\n  /**\n   * Launch the debugLayer.\n   * @param config Define the configuration of the inspector\n   * @return a promise fulfilled when the debug layer is visible\n   */\n\n\n  DebugLayer.prototype.show = function (config) {\n    var _this = this;\n\n    return new Promise(function (resolve) {\n      if (typeof _this.BJSINSPECTOR == \"undefined\") {\n        var inspectorUrl = config && config.inspectorURL ? config.inspectorURL : DebugLayer.InspectorURL; // Load inspector and add it to the DOM\n\n        Tools.LoadScript(inspectorUrl, function () {\n          _this._createInspector(config);\n\n          resolve(_this);\n        });\n      } else {\n        // Otherwise creates the inspector\n        _this._createInspector(config);\n\n        resolve(_this);\n      }\n    });\n  };\n  /**\n   * Define the url to get the inspector script from.\n   * By default it uses the babylonjs CDN.\n   * @ignoreNaming\n   */\n\n\n  DebugLayer.InspectorURL = \"https://unpkg.com/babylonjs-inspector@\".concat(Engine.Version, \"/babylon.inspector.bundle.js\");\n  return DebugLayer;\n}();\n\nexport { DebugLayer };","map":{"version":3,"mappings":"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","names":["Tools","Observable","Scene","Engine","EngineStore","Object","defineProperty","prototype","get","_debugLayer","DebugLayer","enumerable","configurable","DebugLayerTab","scene","_getGlobalInspector","_scene","LastCreatedScene","onDisposeObservable","add","_this","hide","BJSINSPECTOR","Inspector","OnPropertyChangedObservable","_onPropertyChangedObservable","OnSelectionChangeObservable","_onSelectionChangedObservable","config","isVisible","observers","_i","observer","clear","undefined","_b","OnSelectionChangedObservable","userOptions","overlay","showExplorer","showInspector","embedMode","handleResize","enablePopup","Show","entity","lineContainerTitles","toString","call","MarkLineContainerTitleForHighlighting","MarkMultipleLineContainerTitlesForHighlighting","notifyObservers","INSPECTOR","BABYLON","IsVisible","Hide","_SetNewScene","Promise","resolve","inspectorUrl","inspectorURL","InspectorURL","LoadScript","_createInspector","Version"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Debug/debugLayer.ts"],"sourcesContent":["import { Tools } from \"../Misc/tools\";\r\nimport { Observable } from \"../Misc/observable\";\r\nimport { Scene } from \"../scene\";\r\nimport { Engine } from \"../Engines/engine\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\n\r\n// declare INSPECTOR namespace for compilation issue\r\ndeclare let INSPECTOR: any;\r\ndeclare let BABYLON: any;\r\n// load the inspector using require, if not present in the global namespace.\r\n\r\n/**\r\n * Interface used to define scene explorer extensibility option\r\n */\r\nexport interface IExplorerExtensibilityOption {\r\n    /**\r\n     * Define the option label\r\n     */\r\n    label: string;\r\n    /**\r\n     * Defines the action to execute on click\r\n     */\r\n    action: (entity: any) => void;\r\n}\r\n\r\n/**\r\n * Defines a group of actions associated with a predicate to use when extending the Inspector scene explorer\r\n */\r\nexport interface IExplorerExtensibilityGroup {\r\n    /**\r\n     * Defines a predicate to test if a given type mut be extended\r\n     */\r\n    predicate: (entity: any) => boolean;\r\n    /**\r\n     * Gets the list of options added to a type\r\n     */\r\n    entries: IExplorerExtensibilityOption[];\r\n}\r\n\r\n/**\r\n * Interface used to define the options to use to create the Inspector\r\n */\r\nexport interface IInspectorOptions {\r\n    /**\r\n     * Display in overlay mode (default: false)\r\n     */\r\n    overlay?: boolean;\r\n    /**\r\n     * HTML element to use as root (the parent of the rendering canvas will be used as default value)\r\n     */\r\n    globalRoot?: HTMLElement;\r\n    /**\r\n     * Display the Scene explorer\r\n     */\r\n    showExplorer?: boolean;\r\n    /**\r\n     * Display the property inspector\r\n     */\r\n    showInspector?: boolean;\r\n    /**\r\n     * Display in embed mode (both panes on the right)\r\n     */\r\n    embedMode?: boolean;\r\n    /**\r\n     * let the Inspector handles resize of the canvas when panes are resized (default to true)\r\n     */\r\n    handleResize?: boolean;\r\n    /**\r\n     * Allow the panes to popup (default: true)\r\n     */\r\n    enablePopup?: boolean;\r\n    /**\r\n     * Allow the panes to be closed by users (default: true)\r\n     */\r\n    enableClose?: boolean;\r\n    /**\r\n     * Optional list of extensibility entries\r\n     */\r\n    explorerExtensibility?: IExplorerExtensibilityGroup[];\r\n    /**\r\n     * Optional URL to get the inspector script from (by default it uses the babylonjs CDN).\r\n     */\r\n    inspectorURL?: string;\r\n    /**\r\n     * Optional initial tab (default to DebugLayerTab.Properties)\r\n     */\r\n    initialTab?: DebugLayerTab;\r\n}\r\n\r\ndeclare module \"../scene\" {\r\n    export interface Scene {\r\n        /**\r\n         * @hidden\r\n         * Backing field\r\n         */\r\n        _debugLayer: DebugLayer;\r\n\r\n        /**\r\n         * Gets the debug layer (aka Inspector) associated with the scene\r\n         * @see https://doc.babylonjs.com/features/playground_debuglayer\r\n         */\r\n        debugLayer: DebugLayer;\r\n    }\r\n}\r\nObject.defineProperty(Scene.prototype, \"debugLayer\", {\r\n    get: function (this: Scene) {\r\n        if (!this._debugLayer) {\r\n            this._debugLayer = new DebugLayer(this);\r\n        }\r\n        return this._debugLayer;\r\n    },\r\n    enumerable: true,\r\n    configurable: true,\r\n});\r\n\r\n/**\r\n * Enum of inspector action tab\r\n */\r\nexport enum DebugLayerTab {\r\n    /**\r\n     * Properties tag (default)\r\n     */\r\n    Properties = 0,\r\n    /**\r\n     * Debug tab\r\n     */\r\n    Debug = 1,\r\n    /**\r\n     * Statistics tab\r\n     */\r\n    Statistics = 2,\r\n    /**\r\n     * Tools tab\r\n     */\r\n    Tools = 3,\r\n    /**\r\n     * Settings tab\r\n     */\r\n    Settings = 4,\r\n}\r\n\r\n/**\r\n * The debug layer (aka Inspector) is the go to tool in order to better understand\r\n * what is happening in your scene\r\n * @see https://doc.babylonjs.com/features/playground_debuglayer\r\n */\r\nexport class DebugLayer {\r\n    /**\r\n     * Define the url to get the inspector script from.\r\n     * By default it uses the babylonjs CDN.\r\n     * @ignoreNaming\r\n     */\r\n    public static InspectorURL = `https://unpkg.com/babylonjs-inspector@${Engine.Version}/babylon.inspector.bundle.js`;\r\n\r\n    private _scene: Scene;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private BJSINSPECTOR = this._getGlobalInspector();\r\n\r\n    private _onPropertyChangedObservable?: Observable<{ object: any; property: string; value: any; initialValue: any }>;\r\n    /**\r\n     * Observable triggered when a property is changed through the inspector.\r\n     */\r\n    public get onPropertyChangedObservable() {\r\n        if (this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector) {\r\n            return this.BJSINSPECTOR.Inspector.OnPropertyChangedObservable;\r\n        }\r\n\r\n        if (!this._onPropertyChangedObservable) {\r\n            this._onPropertyChangedObservable = new Observable<{ object: any; property: string; value: any; initialValue: any }>();\r\n        }\r\n\r\n        return this._onPropertyChangedObservable;\r\n    }\r\n\r\n    private _onSelectionChangedObservable?: Observable<any>;\r\n    /**\r\n     * Observable triggered when the selection is changed through the inspector.\r\n     */\r\n    public get onSelectionChangedObservable() {\r\n        if (this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector) {\r\n            return this.BJSINSPECTOR.Inspector.OnSelectionChangeObservable;\r\n        }\r\n\r\n        if (!this._onSelectionChangedObservable) {\r\n            this._onSelectionChangedObservable = new Observable<any>();\r\n        }\r\n\r\n        return this._onSelectionChangedObservable;\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new debug layer.\r\n     * The debug layer (aka Inspector) is the go to tool in order to better understand\r\n     * what is happening in your scene\r\n     * @see https://doc.babylonjs.com/features/playground_debuglayer\r\n     * @param scene Defines the scene to inspect\r\n     */\r\n    constructor(scene?: Scene) {\r\n        this._scene = scene || <Scene>EngineStore.LastCreatedScene;\r\n        if (!this._scene) {\r\n            return;\r\n        }\r\n        this._scene.onDisposeObservable.add(() => {\r\n            // Debug layer\r\n            if (this._scene._debugLayer) {\r\n                this._scene._debugLayer.hide();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates the inspector window.\r\n     * @param config\r\n     */\r\n    private _createInspector(config?: Partial<IInspectorOptions>) {\r\n        if (this.isVisible()) {\r\n            return;\r\n        }\r\n\r\n        if (this._onPropertyChangedObservable) {\r\n            for (const observer of this._onPropertyChangedObservable!.observers) {\r\n                this.BJSINSPECTOR.Inspector.OnPropertyChangedObservable.add(observer);\r\n            }\r\n            this._onPropertyChangedObservable.clear();\r\n            this._onPropertyChangedObservable = undefined;\r\n        }\r\n\r\n        if (this._onSelectionChangedObservable) {\r\n            for (const observer of this._onSelectionChangedObservable!.observers) {\r\n                this.BJSINSPECTOR.Inspector.OnSelectionChangedObservable.add(observer);\r\n            }\r\n            this._onSelectionChangedObservable.clear();\r\n            this._onSelectionChangedObservable = undefined;\r\n        }\r\n\r\n        const userOptions: IInspectorOptions = {\r\n            overlay: false,\r\n            showExplorer: true,\r\n            showInspector: true,\r\n            embedMode: false,\r\n            handleResize: true,\r\n            enablePopup: true,\r\n            ...config,\r\n        };\r\n\r\n        this.BJSINSPECTOR = this.BJSINSPECTOR || this._getGlobalInspector();\r\n\r\n        this.BJSINSPECTOR.Inspector.Show(this._scene, userOptions);\r\n    }\r\n\r\n    /**\r\n     * Select a specific entity in the scene explorer and highlight a specific block in that entity property grid\r\n     * @param entity defines the entity to select\r\n     * @param lineContainerTitles defines the specific blocks to highlight (could be a string or an array of strings)\r\n     */\r\n    public select(entity: any, lineContainerTitles?: string | string[]) {\r\n        if (this.BJSINSPECTOR) {\r\n            if (lineContainerTitles) {\r\n                if (Object.prototype.toString.call(lineContainerTitles) == \"[object String]\") {\r\n                    this.BJSINSPECTOR.Inspector.MarkLineContainerTitleForHighlighting(lineContainerTitles);\r\n                } else {\r\n                    this.BJSINSPECTOR.Inspector.MarkMultipleLineContainerTitlesForHighlighting(lineContainerTitles);\r\n                }\r\n            }\r\n            this.BJSINSPECTOR.Inspector.OnSelectionChangeObservable.notifyObservers(entity);\r\n        }\r\n    }\r\n\r\n    /** Get the inspector from bundle or global */\r\n    private _getGlobalInspector(): any {\r\n        // UMD Global name detection from Webpack Bundle UMD Name.\r\n        if (typeof INSPECTOR !== \"undefined\") {\r\n            return INSPECTOR;\r\n        }\r\n\r\n        // In case of module let s check the global emitted from the Inspector entry point.\r\n        if (typeof BABYLON !== \"undefined\" && typeof BABYLON.Inspector !== \"undefined\") {\r\n            return BABYLON;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Get if the inspector is visible or not.\r\n     * @returns true if visible otherwise, false\r\n     */\r\n    public isVisible(): boolean {\r\n        return this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector.IsVisible;\r\n    }\r\n\r\n    /**\r\n     * Hide the inspector and close its window.\r\n     */\r\n    public hide() {\r\n        if (this.BJSINSPECTOR) {\r\n            this.BJSINSPECTOR.Inspector.Hide();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the scene in the inspector\r\n     */\r\n    public setAsActiveScene() {\r\n        if (this.BJSINSPECTOR) {\r\n            this.BJSINSPECTOR.Inspector._SetNewScene(this._scene);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Launch the debugLayer.\r\n     * @param config Define the configuration of the inspector\r\n     * @return a promise fulfilled when the debug layer is visible\r\n     */\r\n    public show(config?: IInspectorOptions): Promise<DebugLayer> {\r\n        return new Promise((resolve) => {\r\n            if (typeof this.BJSINSPECTOR == \"undefined\") {\r\n                const inspectorUrl = config && config.inspectorURL ? config.inspectorURL : DebugLayer.InspectorURL;\r\n\r\n                // Load inspector and add it to the DOM\r\n                Tools.LoadScript(inspectorUrl, () => {\r\n                    this._createInspector(config);\r\n                    resolve(this);\r\n                });\r\n            } else {\r\n                // Otherwise creates the inspector\r\n                this._createInspector(config);\r\n                resolve(this);\r\n            }\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}