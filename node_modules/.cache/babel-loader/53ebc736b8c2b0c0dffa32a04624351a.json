{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { __extends } from \"tslib\";\nimport { WebXRAbstractMotionController } from \"./webXRAbstractMotionController.js\";\nimport { SceneLoader } from \"../../Loading/sceneLoader.js\";\nimport { Mesh } from \"../../Meshes/mesh.js\";\nimport { Axis, Space } from \"../../Maths/math.axis.js\";\nimport { Color3 } from \"../../Maths/math.color.js\";\nimport { WebXRControllerComponent } from \"./webXRControllerComponent.js\";\nimport { CreateSphere } from \"../../Meshes/Builders/sphereBuilder.js\";\nimport { StandardMaterial } from \"../../Materials/standardMaterial.js\";\nimport { Logger } from \"../../Misc/logger.js\";\n/**\n * A profiled motion controller has its profile loaded from an online repository.\n * The class is responsible of loading the model, mapping the keys and enabling model-animations\n */\n\nvar WebXRProfiledMotionController =\n/** @class */\nfunction (_super) {\n  __extends(WebXRProfiledMotionController, _super);\n\n  function WebXRProfiledMotionController(scene, xrInput, _profile, _repositoryUrl, // eslint-disable-next-line @typescript-eslint/naming-convention\n  controllerCache) {\n    var _this = _super.call(this, scene, _profile.layouts[xrInput.handedness || \"none\"], xrInput.gamepad, xrInput.handedness, undefined, controllerCache) || this;\n\n    _this._repositoryUrl = _repositoryUrl;\n    _this.controllerCache = controllerCache;\n    _this._buttonMeshMapping = {};\n    _this._touchDots = {};\n    _this.profileId = _profile.profileId;\n    return _this;\n  }\n\n  WebXRProfiledMotionController.prototype.dispose = function () {\n    var _this = this;\n\n    _super.prototype.dispose.call(this);\n\n    if (!this.controllerCache) {\n      Object.keys(this._touchDots).forEach(function (visResKey) {\n        _this._touchDots[visResKey].dispose();\n      });\n    }\n  };\n\n  WebXRProfiledMotionController.prototype._getFilenameAndPath = function () {\n    return {\n      filename: this.layout.assetPath,\n      path: \"\".concat(this._repositoryUrl, \"/profiles/\").concat(this.profileId, \"/\")\n    };\n  };\n\n  WebXRProfiledMotionController.prototype._getModelLoadingConstraints = function () {\n    var glbLoaded = SceneLoader.IsPluginForExtensionAvailable(\".glb\");\n\n    if (!glbLoaded) {\n      Logger.Warn(\"glTF / glb loader was not registered, using generic controller instead\");\n    }\n\n    return glbLoaded;\n  };\n\n  WebXRProfiledMotionController.prototype._processLoadedModel = function (_meshes) {\n    var _this = this;\n\n    this.getComponentIds().forEach(function (type) {\n      var componentInLayout = _this.layout.components[type];\n      _this._buttonMeshMapping[type] = {\n        mainMesh: _this._getChildByName(_this.rootMesh, componentInLayout.rootNodeName),\n        states: {}\n      };\n      Object.keys(componentInLayout.visualResponses).forEach(function (visualResponseKey) {\n        var visResponse = componentInLayout.visualResponses[visualResponseKey];\n\n        if (visResponse.valueNodeProperty === \"transform\") {\n          _this._buttonMeshMapping[type].states[visualResponseKey] = {\n            valueMesh: _this._getChildByName(_this.rootMesh, visResponse.valueNodeName),\n            minMesh: _this._getChildByName(_this.rootMesh, visResponse.minNodeName),\n            maxMesh: _this._getChildByName(_this.rootMesh, visResponse.maxNodeName)\n          };\n        } else {\n          // visibility, usually for touchpads\n          var nameOfMesh = componentInLayout.type === WebXRControllerComponent.TOUCHPAD_TYPE && componentInLayout.touchPointNodeName ? componentInLayout.touchPointNodeName : visResponse.valueNodeName;\n          _this._buttonMeshMapping[type].states[visualResponseKey] = {\n            valueMesh: _this._getChildByName(_this.rootMesh, nameOfMesh)\n          };\n\n          if (componentInLayout.type === WebXRControllerComponent.TOUCHPAD_TYPE && !_this._touchDots[visualResponseKey]) {\n            var dot = CreateSphere(visualResponseKey + \"dot\", {\n              diameter: 0.0015,\n              segments: 8\n            }, _this.scene);\n            dot.material = new StandardMaterial(visualResponseKey + \"mat\", _this.scene);\n            dot.material.diffuseColor = Color3.Red();\n            dot.parent = _this._buttonMeshMapping[type].states[visualResponseKey].valueMesh || null;\n            dot.isVisible = false;\n            _this._touchDots[visualResponseKey] = dot;\n          }\n        }\n      });\n    });\n  };\n\n  WebXRProfiledMotionController.prototype._setRootMesh = function (meshes) {\n    this.rootMesh = new Mesh(this.profileId + \"-\" + this.handedness, this.scene);\n    this.rootMesh.isPickable = false;\n    var rootMesh; // Find the root node in the loaded glTF scene, and attach it as a child of 'parentMesh'\n\n    for (var i = 0; i < meshes.length; i++) {\n      var mesh = meshes[i];\n      mesh.isPickable = false;\n\n      if (!mesh.parent) {\n        // Handle root node, attach to the new parentMesh\n        rootMesh = mesh;\n      }\n    }\n\n    if (rootMesh) {\n      rootMesh.setParent(this.rootMesh);\n    }\n\n    if (!this.scene.useRightHandedSystem) {\n      this.rootMesh.rotate(Axis.Y, Math.PI, Space.WORLD);\n    }\n  };\n\n  WebXRProfiledMotionController.prototype._updateModel = function (_xrFrame) {\n    var _this = this;\n\n    if (this.disableAnimation) {\n      return;\n    }\n\n    this.getComponentIds().forEach(function (id) {\n      var component = _this.getComponent(id);\n\n      if (!component.hasChanges) {\n        return;\n      }\n\n      var meshes = _this._buttonMeshMapping[id];\n      var componentInLayout = _this.layout.components[id];\n      Object.keys(componentInLayout.visualResponses).forEach(function (visualResponseKey) {\n        var visResponse = componentInLayout.visualResponses[visualResponseKey];\n        var value = component.value;\n\n        if (visResponse.componentProperty === \"xAxis\") {\n          value = component.axes.x;\n        } else if (visResponse.componentProperty === \"yAxis\") {\n          value = component.axes.y;\n        }\n\n        if (visResponse.valueNodeProperty === \"transform\") {\n          _this._lerpTransform(meshes.states[visualResponseKey], value, visResponse.componentProperty !== \"button\");\n        } else {\n          // visibility\n          var valueMesh = meshes.states[visualResponseKey].valueMesh;\n\n          if (valueMesh) {\n            valueMesh.isVisible = component.touched || component.pressed;\n          }\n\n          if (_this._touchDots[visualResponseKey]) {\n            _this._touchDots[visualResponseKey].isVisible = component.touched || component.pressed;\n          }\n        }\n      });\n    });\n  };\n\n  return WebXRProfiledMotionController;\n}(WebXRAbstractMotionController);\n\nexport { WebXRProfiledMotionController };","map":{"version":3,"mappings":";;;;;;AAEA,SAASA,6BAAT,QAA8C,oCAA9C;AAEA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,IAAT,QAAqB,sBAArB;AACA,SAASC,IAAT,EAAeC,KAAf,QAA4B,0BAA5B;AACA,SAASC,MAAT,QAAuB,2BAAvB;AACA,SAASC,wBAAT,QAAyC,+BAAzC;AACA,SAASC,YAAT,QAA6B,wCAA7B;AACA,SAASC,gBAAT,QAAiC,qCAAjC;AACA,SAASC,MAAT,QAAuB,sBAAvB;AAEA;;;;;AAIA;AAAA;AAAA;AAAmDC;;AAgB/C,yCACIC,KADJ,EAEIC,OAFJ,EAGIC,QAHJ,EAIYC,cAJZ,EAKI;AACQC,iBANZ,EAUM;AAVN,gBAYIC,kBAAML,KAAN,EAAaE,QAAQ,CAACI,OAAT,CAAiBL,OAAO,CAACM,UAAR,IAAsB,MAAvC,CAAb,EAA6DN,OAAO,CAACO,OAArE,EAAqFP,OAAO,CAACM,UAA7F,EAAyGE,SAAzG,EAAoHL,eAApH,KAAoI,IAZxI;;AAIYM;AAEAA;AArBJA,+BAOJ,EAPI;AAQAA,uBAAiD,EAAjD;AAoBJA,SAAI,CAACC,SAAL,GAAiBT,QAAQ,CAACS,SAA1B;;AACH;;AAEMC,oDAAP;AAAA;;AACIP,qBAAMQ,OAAN,CAAaC,IAAb,CAAa,IAAb;;AACA,QAAI,CAAC,KAAKV,eAAV,EAA2B;AACvBW,YAAM,CAACC,IAAP,CAAY,KAAKC,UAAjB,EAA6BC,OAA7B,CAAqC,UAACC,SAAD,EAAU;AAC3CT,aAAI,CAACO,UAAL,CAAgBE,SAAhB,EAA2BN,OAA3B;AACH,OAFD;AAGH;AACJ,GAPM;;AASGD,gEAAV;AACI,WAAO;AACHQ,cAAQ,EAAE,KAAKC,MAAL,CAAYC,SADnB;AAEHC,UAAI,EAAE,UAAG,KAAKpB,cAAR,EAAsB,YAAtB,EAAsBqB,MAAtB,CAAmC,KAAKb,SAAxC,EAAiD,GAAjD;AAFH,KAAP;AAIH,GALS;;AAOAC,wEAAV;AACI,QAAMa,SAAS,GAAGnC,WAAW,CAACoC,6BAAZ,CAA0C,MAA1C,CAAlB;;AACA,QAAI,CAACD,SAAL,EAAgB;AACZ3B,YAAM,CAAC6B,IAAP,CAAY,wEAAZ;AACH;;AACD,WAAOF,SAAP;AACH,GANS;;AAQAb,gEAAV,UAA8BgB,OAA9B,EAAqD;AAArD;;AACI,SAAKC,eAAL,GAAuBX,OAAvB,CAA+B,UAACY,IAAD,EAAK;AAChC,UAAMC,iBAAiB,GAAGrB,KAAI,CAACW,MAAL,CAAYW,UAAZ,CAAuBF,IAAvB,CAA1B;AACApB,WAAI,CAACuB,kBAAL,CAAwBH,IAAxB,IAAgC;AAC5BI,gBAAQ,EAAExB,KAAI,CAACyB,eAAL,CAAqBzB,KAAI,CAAC0B,QAA1B,EAAqCL,iBAAiB,CAACM,YAAvD,CADkB;AAE5BC,cAAM,EAAE;AAFoB,OAAhC;AAIAvB,YAAM,CAACC,IAAP,CAAYe,iBAAiB,CAACQ,eAA9B,EAA+CrB,OAA/C,CAAuD,UAACsB,iBAAD,EAAkB;AACrE,YAAMC,WAAW,GAAGV,iBAAiB,CAACQ,eAAlB,CAAkCC,iBAAlC,CAApB;;AACA,YAAIC,WAAW,CAACC,iBAAZ,KAAkC,WAAtC,EAAmD;AAC/ChC,eAAI,CAACuB,kBAAL,CAAwBH,IAAxB,EAA8BQ,MAA9B,CAAqCE,iBAArC,IAA0D;AACtDG,qBAAS,EAAEjC,KAAI,CAACyB,eAAL,CAAqBzB,KAAI,CAAC0B,QAA1B,EAAqCK,WAAW,CAACG,aAAjD,CAD2C;AAEtDC,mBAAO,EAAEnC,KAAI,CAACyB,eAAL,CAAqBzB,KAAI,CAAC0B,QAA1B,EAAqCK,WAAW,CAACK,WAAjD,CAF6C;AAGtDC,mBAAO,EAAErC,KAAI,CAACyB,eAAL,CAAqBzB,KAAI,CAAC0B,QAA1B,EAAqCK,WAAW,CAACO,WAAjD;AAH6C,WAA1D;AAKH,SAND,MAMO;AACH;AACA,cAAMC,UAAU,GACZlB,iBAAiB,CAACD,IAAlB,KAA2BnC,wBAAwB,CAACuD,aAApD,IAAqEnB,iBAAiB,CAACoB,kBAAvF,GACMpB,iBAAiB,CAACoB,kBADxB,GAEMV,WAAW,CAACG,aAHtB;AAIAlC,eAAI,CAACuB,kBAAL,CAAwBH,IAAxB,EAA8BQ,MAA9B,CAAqCE,iBAArC,IAA0D;AACtDG,qBAAS,EAAEjC,KAAI,CAACyB,eAAL,CAAqBzB,KAAI,CAAC0B,QAA1B,EAAqCa,UAArC;AAD2C,WAA1D;;AAGA,cAAIlB,iBAAiB,CAACD,IAAlB,KAA2BnC,wBAAwB,CAACuD,aAApD,IAAqE,CAACxC,KAAI,CAACO,UAAL,CAAgBuB,iBAAhB,CAA1E,EAA8G;AAC1G,gBAAMY,GAAG,GAAGxD,YAAY,CACpB4C,iBAAiB,GAAG,KADA,EAEpB;AACIa,sBAAQ,EAAE,MADd;AAEIC,sBAAQ,EAAE;AAFd,aAFoB,EAMpB5C,KAAI,CAACV,KANe,CAAxB;AAQAoD,eAAG,CAACG,QAAJ,GAAe,IAAI1D,gBAAJ,CAAqB2C,iBAAiB,GAAG,KAAzC,EAAgD9B,KAAI,CAACV,KAArD,CAAf;AACmBoD,eAAG,CAACG,QAAJ,CAAcC,YAAd,GAA6B9D,MAAM,CAAC+D,GAAP,EAA7B;AACnBL,eAAG,CAACM,MAAJ,GAAahD,KAAI,CAACuB,kBAAL,CAAwBH,IAAxB,EAA8BQ,MAA9B,CAAqCE,iBAArC,EAAwDG,SAAxD,IAAqE,IAAlF;AACAS,eAAG,CAACO,SAAJ,GAAgB,KAAhB;AACAjD,iBAAI,CAACO,UAAL,CAAgBuB,iBAAhB,IAAqCY,GAArC;AACH;AACJ;AACJ,OAjCD;AAkCH,KAxCD;AAyCH,GA1CS;;AA4CAxC,yDAAV,UAAuBgD,MAAvB,EAA6C;AACzC,SAAKxB,QAAL,GAAgB,IAAI7C,IAAJ,CAAS,KAAKoB,SAAL,GAAiB,GAAjB,GAAuB,KAAKJ,UAArC,EAAiD,KAAKP,KAAtD,CAAhB;AACA,SAAKoC,QAAL,CAAcyB,UAAd,GAA2B,KAA3B;AACA,QAAIzB,QAAJ,CAHyC,CAIzC;;AACA,SAAK,IAAI0B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACG,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACpC,UAAME,IAAI,GAAGJ,MAAM,CAACE,CAAD,CAAnB;AAEAE,UAAI,CAACH,UAAL,GAAkB,KAAlB;;AAEA,UAAI,CAACG,IAAI,CAACN,MAAV,EAAkB;AACd;AACAtB,gBAAQ,GAAG4B,IAAX;AACH;AACJ;;AAED,QAAI5B,QAAJ,EAAc;AACVA,cAAQ,CAAC6B,SAAT,CAAmB,KAAK7B,QAAxB;AACH;;AACD,QAAI,CAAC,KAAKpC,KAAL,CAAWkE,oBAAhB,EAAsC;AAClC,WAAK9B,QAAL,CAAc+B,MAAd,CAAqB3E,IAAI,CAAC4E,CAA1B,EAA6BC,IAAI,CAACC,EAAlC,EAAsC7E,KAAK,CAAC8E,KAA5C;AACH;AACJ,GAtBS;;AAwBA3D,yDAAV,UAAuB4D,QAAvB,EAAwC;AAAxC;;AACI,QAAI,KAAKC,gBAAT,EAA2B;AACvB;AACH;;AACD,SAAK5C,eAAL,GAAuBX,OAAvB,CAA+B,UAACwD,EAAD,EAAG;AAC9B,UAAMC,SAAS,GAAGjE,KAAI,CAACkE,YAAL,CAAkBF,EAAlB,CAAlB;;AACA,UAAI,CAACC,SAAS,CAACE,UAAf,EAA2B;AACvB;AACH;;AACD,UAAMjB,MAAM,GAAGlD,KAAI,CAACuB,kBAAL,CAAwByC,EAAxB,CAAf;AACA,UAAM3C,iBAAiB,GAAGrB,KAAI,CAACW,MAAL,CAAYW,UAAZ,CAAuB0C,EAAvB,CAA1B;AACA3D,YAAM,CAACC,IAAP,CAAYe,iBAAiB,CAACQ,eAA9B,EAA+CrB,OAA/C,CAAuD,UAACsB,iBAAD,EAAkB;AACrE,YAAMC,WAAW,GAAGV,iBAAiB,CAACQ,eAAlB,CAAkCC,iBAAlC,CAApB;AACA,YAAIsC,KAAK,GAAGH,SAAS,CAACG,KAAtB;;AACA,YAAIrC,WAAW,CAACsC,iBAAZ,KAAkC,OAAtC,EAA+C;AAC3CD,eAAK,GAAGH,SAAS,CAACK,IAAV,CAAeC,CAAvB;AACH,SAFD,MAEO,IAAIxC,WAAW,CAACsC,iBAAZ,KAAkC,OAAtC,EAA+C;AAClDD,eAAK,GAAGH,SAAS,CAACK,IAAV,CAAeE,CAAvB;AACH;;AACD,YAAIzC,WAAW,CAACC,iBAAZ,KAAkC,WAAtC,EAAmD;AAC/ChC,eAAI,CAACyE,cAAL,CAAoBvB,MAAM,CAACtB,MAAP,CAAcE,iBAAd,CAApB,EAAsDsC,KAAtD,EAA6DrC,WAAW,CAACsC,iBAAZ,KAAkC,QAA/F;AACH,SAFD,MAEO;AACH;AACA,cAAMpC,SAAS,GAAGiB,MAAM,CAACtB,MAAP,CAAcE,iBAAd,EAAiCG,SAAnD;;AACA,cAAIA,SAAJ,EAAe;AACXA,qBAAS,CAACgB,SAAV,GAAsBgB,SAAS,CAACS,OAAV,IAAqBT,SAAS,CAACU,OAArD;AACH;;AACD,cAAI3E,KAAI,CAACO,UAAL,CAAgBuB,iBAAhB,CAAJ,EAAwC;AACpC9B,iBAAI,CAACO,UAAL,CAAgBuB,iBAAhB,EAAmCmB,SAAnC,GAA+CgB,SAAS,CAACS,OAAV,IAAqBT,SAAS,CAACU,OAA9E;AACH;AACJ;AACJ,OApBD;AAqBH,KA5BD;AA6BH,GAjCS;;AAkCd;AAAC,CA9JD,CAAmDhG,6BAAnD","names":["WebXRAbstractMotionController","SceneLoader","Mesh","Axis","Space","Color3","WebXRControllerComponent","CreateSphere","StandardMaterial","Logger","__extends","scene","xrInput","_profile","_repositoryUrl","controllerCache","_super","layouts","handedness","gamepad","undefined","_this","profileId","WebXRProfiledMotionController","dispose","call","Object","keys","_touchDots","forEach","visResKey","filename","layout","assetPath","path","concat","glbLoaded","IsPluginForExtensionAvailable","Warn","_meshes","getComponentIds","type","componentInLayout","components","_buttonMeshMapping","mainMesh","_getChildByName","rootMesh","rootNodeName","states","visualResponses","visualResponseKey","visResponse","valueNodeProperty","valueMesh","valueNodeName","minMesh","minNodeName","maxMesh","maxNodeName","nameOfMesh","TOUCHPAD_TYPE","touchPointNodeName","dot","diameter","segments","material","diffuseColor","Red","parent","isVisible","meshes","isPickable","i","length","mesh","setParent","useRightHandedSystem","rotate","Y","Math","PI","WORLD","_xrFrame","disableAnimation","id","component","getComponent","hasChanges","value","componentProperty","axes","x","y","_lerpTransform","touched","pressed"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/XR/motionController/webXRProfiledMotionController.ts"],"sourcesContent":["import type { AbstractMesh } from \"../../Meshes/abstractMesh\";\r\nimport type { IMotionControllerProfile, IMotionControllerMeshMap } from \"./webXRAbstractMotionController\";\r\nimport { WebXRAbstractMotionController } from \"./webXRAbstractMotionController\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\r\nimport { Mesh } from \"../../Meshes/mesh\";\r\nimport { Axis, Space } from \"../../Maths/math.axis\";\r\nimport { Color3 } from \"../../Maths/math.color\";\r\nimport { WebXRControllerComponent } from \"./webXRControllerComponent\";\r\nimport { CreateSphere } from \"../../Meshes/Builders/sphereBuilder\";\r\nimport { StandardMaterial } from \"../../Materials/standardMaterial\";\r\nimport { Logger } from \"../../Misc/logger\";\r\n\r\n/**\r\n * A profiled motion controller has its profile loaded from an online repository.\r\n * The class is responsible of loading the model, mapping the keys and enabling model-animations\r\n */\r\nexport class WebXRProfiledMotionController extends WebXRAbstractMotionController {\r\n    private _buttonMeshMapping: {\r\n        [buttonName: string]: {\r\n            mainMesh?: AbstractMesh;\r\n            states: {\r\n                [state: string]: IMotionControllerMeshMap;\r\n            };\r\n        };\r\n    } = {};\r\n    private _touchDots: { [visKey: string]: AbstractMesh } = {};\r\n\r\n    /**\r\n     * The profile ID of this controller. Will be populated when the controller initializes.\r\n     */\r\n    public profileId: string;\r\n\r\n    constructor(\r\n        scene: Scene,\r\n        xrInput: XRInputSource,\r\n        _profile: IMotionControllerProfile,\r\n        private _repositoryUrl: string,\r\n        // eslint-disable-next-line @typescript-eslint/naming-convention\r\n        private controllerCache?: Array<{\r\n            filename: string;\r\n            path: string;\r\n            meshes: AbstractMesh[];\r\n        }>\r\n    ) {\r\n        super(scene, _profile.layouts[xrInput.handedness || \"none\"], xrInput.gamepad as any, xrInput.handedness, undefined, controllerCache);\r\n        this.profileId = _profile.profileId;\r\n    }\r\n\r\n    public dispose() {\r\n        super.dispose();\r\n        if (!this.controllerCache) {\r\n            Object.keys(this._touchDots).forEach((visResKey) => {\r\n                this._touchDots[visResKey].dispose();\r\n            });\r\n        }\r\n    }\r\n\r\n    protected _getFilenameAndPath(): { filename: string; path: string } {\r\n        return {\r\n            filename: this.layout.assetPath,\r\n            path: `${this._repositoryUrl}/profiles/${this.profileId}/`,\r\n        };\r\n    }\r\n\r\n    protected _getModelLoadingConstraints(): boolean {\r\n        const glbLoaded = SceneLoader.IsPluginForExtensionAvailable(\".glb\");\r\n        if (!glbLoaded) {\r\n            Logger.Warn(\"glTF / glb loader was not registered, using generic controller instead\");\r\n        }\r\n        return glbLoaded;\r\n    }\r\n\r\n    protected _processLoadedModel(_meshes: AbstractMesh[]): void {\r\n        this.getComponentIds().forEach((type) => {\r\n            const componentInLayout = this.layout.components[type];\r\n            this._buttonMeshMapping[type] = {\r\n                mainMesh: this._getChildByName(this.rootMesh!, componentInLayout.rootNodeName),\r\n                states: {},\r\n            };\r\n            Object.keys(componentInLayout.visualResponses).forEach((visualResponseKey) => {\r\n                const visResponse = componentInLayout.visualResponses[visualResponseKey];\r\n                if (visResponse.valueNodeProperty === \"transform\") {\r\n                    this._buttonMeshMapping[type].states[visualResponseKey] = {\r\n                        valueMesh: this._getChildByName(this.rootMesh!, visResponse.valueNodeName!),\r\n                        minMesh: this._getChildByName(this.rootMesh!, visResponse.minNodeName!),\r\n                        maxMesh: this._getChildByName(this.rootMesh!, visResponse.maxNodeName!),\r\n                    };\r\n                } else {\r\n                    // visibility, usually for touchpads\r\n                    const nameOfMesh =\r\n                        componentInLayout.type === WebXRControllerComponent.TOUCHPAD_TYPE && componentInLayout.touchPointNodeName\r\n                            ? componentInLayout.touchPointNodeName\r\n                            : visResponse.valueNodeName!;\r\n                    this._buttonMeshMapping[type].states[visualResponseKey] = {\r\n                        valueMesh: this._getChildByName(this.rootMesh!, nameOfMesh),\r\n                    };\r\n                    if (componentInLayout.type === WebXRControllerComponent.TOUCHPAD_TYPE && !this._touchDots[visualResponseKey]) {\r\n                        const dot = CreateSphere(\r\n                            visualResponseKey + \"dot\",\r\n                            {\r\n                                diameter: 0.0015,\r\n                                segments: 8,\r\n                            },\r\n                            this.scene\r\n                        );\r\n                        dot.material = new StandardMaterial(visualResponseKey + \"mat\", this.scene);\r\n                        (<StandardMaterial>dot.material).diffuseColor = Color3.Red();\r\n                        dot.parent = this._buttonMeshMapping[type].states[visualResponseKey].valueMesh || null;\r\n                        dot.isVisible = false;\r\n                        this._touchDots[visualResponseKey] = dot;\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    protected _setRootMesh(meshes: AbstractMesh[]): void {\r\n        this.rootMesh = new Mesh(this.profileId + \"-\" + this.handedness, this.scene);\r\n        this.rootMesh.isPickable = false;\r\n        let rootMesh;\r\n        // Find the root node in the loaded glTF scene, and attach it as a child of 'parentMesh'\r\n        for (let i = 0; i < meshes.length; i++) {\r\n            const mesh = meshes[i];\r\n\r\n            mesh.isPickable = false;\r\n\r\n            if (!mesh.parent) {\r\n                // Handle root node, attach to the new parentMesh\r\n                rootMesh = mesh;\r\n            }\r\n        }\r\n\r\n        if (rootMesh) {\r\n            rootMesh.setParent(this.rootMesh);\r\n        }\r\n        if (!this.scene.useRightHandedSystem) {\r\n            this.rootMesh.rotate(Axis.Y, Math.PI, Space.WORLD);\r\n        }\r\n    }\r\n\r\n    protected _updateModel(_xrFrame: XRFrame): void {\r\n        if (this.disableAnimation) {\r\n            return;\r\n        }\r\n        this.getComponentIds().forEach((id) => {\r\n            const component = this.getComponent(id);\r\n            if (!component.hasChanges) {\r\n                return;\r\n            }\r\n            const meshes = this._buttonMeshMapping[id];\r\n            const componentInLayout = this.layout.components[id];\r\n            Object.keys(componentInLayout.visualResponses).forEach((visualResponseKey) => {\r\n                const visResponse = componentInLayout.visualResponses[visualResponseKey];\r\n                let value = component.value;\r\n                if (visResponse.componentProperty === \"xAxis\") {\r\n                    value = component.axes.x;\r\n                } else if (visResponse.componentProperty === \"yAxis\") {\r\n                    value = component.axes.y;\r\n                }\r\n                if (visResponse.valueNodeProperty === \"transform\") {\r\n                    this._lerpTransform(meshes.states[visualResponseKey], value, visResponse.componentProperty !== \"button\");\r\n                } else {\r\n                    // visibility\r\n                    const valueMesh = meshes.states[visualResponseKey].valueMesh;\r\n                    if (valueMesh) {\r\n                        valueMesh.isVisible = component.touched || component.pressed;\r\n                    }\r\n                    if (this._touchDots[visualResponseKey]) {\r\n                        this._touchDots[visualResponseKey].isVisible = component.touched || component.pressed;\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}