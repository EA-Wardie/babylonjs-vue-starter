{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators.js\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager.js\";\nimport { Gamepad } from \"../../Gamepads/gamepad.js\";\n/**\n * Manage the gamepad inputs to control an arc rotate camera.\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\n */\n\nvar ArcRotateCameraGamepadInput =\n/** @class */\nfunction () {\n  function ArcRotateCameraGamepadInput() {\n    /**\n     * Defines the gamepad rotation sensibility.\n     * This is the threshold from when rotation starts to be accounted for to prevent jittering.\n     */\n    this.gamepadRotationSensibility = 80;\n    /**\n     * Defines the gamepad move sensibility.\n     * This is the threshold from when moving starts to be accounted for for to prevent jittering.\n     */\n\n    this.gamepadMoveSensibility = 40;\n    this._yAxisScale = 1.0;\n  }\n\n  Object.defineProperty(ArcRotateCameraGamepadInput.prototype, \"invertYAxis\", {\n    /**\n     * Gets or sets a boolean indicating that Yaxis (for right stick) should be inverted\n     */\n    get: function get() {\n      return this._yAxisScale !== 1.0;\n    },\n    set: function set(value) {\n      this._yAxisScale = value ? -1.0 : 1.0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Attach the input controls to a specific dom element to get the input from.\n   */\n\n  ArcRotateCameraGamepadInput.prototype.attachControl = function () {\n    var _this = this;\n\n    var manager = this.camera.getScene().gamepadManager;\n    this._onGamepadConnectedObserver = manager.onGamepadConnectedObservable.add(function (gamepad) {\n      if (gamepad.type !== Gamepad.POSE_ENABLED) {\n        // prioritize XBOX gamepads.\n        if (!_this.gamepad || gamepad.type === Gamepad.XBOX) {\n          _this.gamepad = gamepad;\n        }\n      }\n    });\n    this._onGamepadDisconnectedObserver = manager.onGamepadDisconnectedObservable.add(function (gamepad) {\n      if (_this.gamepad === gamepad) {\n        _this.gamepad = null;\n      }\n    });\n    this.gamepad = manager.getGamepadByType(Gamepad.XBOX);\n  };\n  /**\n   * Detach the current controls from the specified dom element.\n   */\n\n\n  ArcRotateCameraGamepadInput.prototype.detachControl = function () {\n    this.camera.getScene().gamepadManager.onGamepadConnectedObservable.remove(this._onGamepadConnectedObserver);\n    this.camera.getScene().gamepadManager.onGamepadDisconnectedObservable.remove(this._onGamepadDisconnectedObserver);\n    this.gamepad = null;\n  };\n  /**\n   * Update the current camera state depending on the inputs that have been used this frame.\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\n   */\n\n\n  ArcRotateCameraGamepadInput.prototype.checkInputs = function () {\n    if (this.gamepad) {\n      var camera = this.camera;\n      var rsValues = this.gamepad.rightStick;\n\n      if (rsValues) {\n        if (rsValues.x != 0) {\n          var normalizedRX = rsValues.x / this.gamepadRotationSensibility;\n\n          if (normalizedRX != 0 && Math.abs(normalizedRX) > 0.005) {\n            camera.inertialAlphaOffset += normalizedRX;\n          }\n        }\n\n        if (rsValues.y != 0) {\n          var normalizedRY = rsValues.y / this.gamepadRotationSensibility * this._yAxisScale;\n\n          if (normalizedRY != 0 && Math.abs(normalizedRY) > 0.005) {\n            camera.inertialBetaOffset += normalizedRY;\n          }\n        }\n      }\n\n      var lsValues = this.gamepad.leftStick;\n\n      if (lsValues && lsValues.y != 0) {\n        var normalizedLY = lsValues.y / this.gamepadMoveSensibility;\n\n        if (normalizedLY != 0 && Math.abs(normalizedLY) > 0.005) {\n          this.camera.inertialRadiusOffset -= normalizedLY;\n        }\n      }\n    }\n  };\n  /**\n   * Gets the class name of the current intput.\n   * @returns the class name\n   */\n\n\n  ArcRotateCameraGamepadInput.prototype.getClassName = function () {\n    return \"ArcRotateCameraGamepadInput\";\n  };\n  /**\n   * Get the friendly name associated with the input class.\n   * @returns the input friendly name\n   */\n\n\n  ArcRotateCameraGamepadInput.prototype.getSimpleName = function () {\n    return \"gamepad\";\n  };\n\n  __decorate([serialize()], ArcRotateCameraGamepadInput.prototype, \"gamepadRotationSensibility\", void 0);\n\n  __decorate([serialize()], ArcRotateCameraGamepadInput.prototype, \"gamepadMoveSensibility\", void 0);\n\n  return ArcRotateCameraGamepadInput;\n}();\n\nexport { ArcRotateCameraGamepadInput };\nCameraInputTypes[\"ArcRotateCameraGamepadInput\"] = ArcRotateCameraGamepadInput;","map":{"version":3,"mappings":"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","names":["serialize","CameraInputTypes","Gamepad","Object","ArcRotateCameraGamepadInput","_yAxisScale","value","manager","camera","getScene","gamepadManager","_onGamepadConnectedObserver","onGamepadConnectedObservable","add","gamepad","type","POSE_ENABLED","_this","XBOX","_onGamepadDisconnectedObserver","onGamepadDisconnectedObservable","getGamepadByType","remove","rsValues","rightStick","x","normalizedRX","gamepadRotationSensibility","Math","abs","inertialAlphaOffset","y","normalizedRY","inertialBetaOffset","lsValues","leftStick","normalizedLY","gamepadMoveSensibility","inertialRadiusOffset","__decorate"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Cameras/Inputs/arcRotateCameraGamepadInput.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport { serialize } from \"../../Misc/decorators\";\r\nimport type { Observer } from \"../../Misc/observable\";\r\nimport type { ArcRotateCamera } from \"../../Cameras/arcRotateCamera\";\r\nimport type { ICameraInput } from \"../../Cameras/cameraInputsManager\";\r\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\r\nimport { Gamepad } from \"../../Gamepads/gamepad\";\r\n/**\r\n * Manage the gamepad inputs to control an arc rotate camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\r\nexport class ArcRotateCameraGamepadInput implements ICameraInput<ArcRotateCamera> {\r\n    /**\r\n     * Defines the camera the input is attached to.\r\n     */\r\n    public camera: ArcRotateCamera;\r\n\r\n    /**\r\n     * Defines the gamepad the input is gathering event from.\r\n     */\r\n    public gamepad: Nullable<Gamepad>;\r\n\r\n    /**\r\n     * Defines the gamepad rotation sensibility.\r\n     * This is the threshold from when rotation starts to be accounted for to prevent jittering.\r\n     */\r\n    @serialize()\r\n    public gamepadRotationSensibility = 80;\r\n\r\n    /**\r\n     * Defines the gamepad move sensibility.\r\n     * This is the threshold from when moving starts to be accounted for for to prevent jittering.\r\n     */\r\n    @serialize()\r\n    public gamepadMoveSensibility = 40;\r\n\r\n    private _yAxisScale = 1.0;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating that Yaxis (for right stick) should be inverted\r\n     */\r\n    public get invertYAxis() {\r\n        return this._yAxisScale !== 1.0;\r\n    }\r\n\r\n    public set invertYAxis(value: boolean) {\r\n        this._yAxisScale = value ? -1.0 : 1.0;\r\n    }\r\n\r\n    private _onGamepadConnectedObserver: Nullable<Observer<Gamepad>>;\r\n    private _onGamepadDisconnectedObserver: Nullable<Observer<Gamepad>>;\r\n\r\n    /**\r\n     * Attach the input controls to a specific dom element to get the input from.\r\n     */\r\n    public attachControl(): void {\r\n        const manager = this.camera.getScene().gamepadManager;\r\n        this._onGamepadConnectedObserver = manager.onGamepadConnectedObservable.add((gamepad) => {\r\n            if (gamepad.type !== Gamepad.POSE_ENABLED) {\r\n                // prioritize XBOX gamepads.\r\n                if (!this.gamepad || gamepad.type === Gamepad.XBOX) {\r\n                    this.gamepad = gamepad;\r\n                }\r\n            }\r\n        });\r\n\r\n        this._onGamepadDisconnectedObserver = manager.onGamepadDisconnectedObservable.add((gamepad) => {\r\n            if (this.gamepad === gamepad) {\r\n                this.gamepad = null;\r\n            }\r\n        });\r\n\r\n        this.gamepad = manager.getGamepadByType(Gamepad.XBOX);\r\n    }\r\n\r\n    /**\r\n     * Detach the current controls from the specified dom element.\r\n     */\r\n    public detachControl(): void {\r\n        this.camera.getScene().gamepadManager.onGamepadConnectedObservable.remove(this._onGamepadConnectedObserver);\r\n        this.camera.getScene().gamepadManager.onGamepadDisconnectedObservable.remove(this._onGamepadDisconnectedObserver);\r\n        this.gamepad = null;\r\n    }\r\n\r\n    /**\r\n     * Update the current camera state depending on the inputs that have been used this frame.\r\n     * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n     */\r\n    public checkInputs(): void {\r\n        if (this.gamepad) {\r\n            const camera = this.camera;\r\n            const rsValues = this.gamepad.rightStick;\r\n\r\n            if (rsValues) {\r\n                if (rsValues.x != 0) {\r\n                    const normalizedRX = rsValues.x / this.gamepadRotationSensibility;\r\n                    if (normalizedRX != 0 && Math.abs(normalizedRX) > 0.005) {\r\n                        camera.inertialAlphaOffset += normalizedRX;\r\n                    }\r\n                }\r\n\r\n                if (rsValues.y != 0) {\r\n                    const normalizedRY = (rsValues.y / this.gamepadRotationSensibility) * this._yAxisScale;\r\n                    if (normalizedRY != 0 && Math.abs(normalizedRY) > 0.005) {\r\n                        camera.inertialBetaOffset += normalizedRY;\r\n                    }\r\n                }\r\n            }\r\n\r\n            const lsValues = this.gamepad.leftStick;\r\n            if (lsValues && lsValues.y != 0) {\r\n                const normalizedLY = lsValues.y / this.gamepadMoveSensibility;\r\n                if (normalizedLY != 0 && Math.abs(normalizedLY) > 0.005) {\r\n                    this.camera.inertialRadiusOffset -= normalizedLY;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the class name of the current intput.\r\n     * @returns the class name\r\n     */\r\n    public getClassName(): string {\r\n        return \"ArcRotateCameraGamepadInput\";\r\n    }\r\n\r\n    /**\r\n     * Get the friendly name associated with the input class.\r\n     * @returns the input friendly name\r\n     */\r\n    public getSimpleName(): string {\r\n        return \"gamepad\";\r\n    }\r\n}\r\n\r\n(<any>CameraInputTypes)[\"ArcRotateCameraGamepadInput\"] = ArcRotateCameraGamepadInput;\r\n"]},"metadata":{},"sourceType":"module"}