{"ast":null,"code":"import \"core-js/modules/es.array.flat.js\";\nimport \"core-js/modules/es.array.unscopables.flat.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { Vector4 } from \"../../Maths/math.vector.js\";\nimport { Color4 } from \"../../Maths/math.color.js\";\nimport { Mesh } from \"../mesh.js\";\nimport { VertexData } from \"../mesh.vertexData.js\";\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions.js\";\n/**\n * Creates the VertexData for a box\n * @param options an object used to set the following optional parameters for the box, required but can be empty\n * * size sets the width, height and depth of the box to the value of size, optional default 1\n * * width sets the width (x direction) of the box, overwrites the width set by size, optional, default size\n * * height sets the height (y direction) of the box, overwrites the height set by size, optional, default size\n * * depth sets the depth (z direction) of the box, overwrites the depth set by size, optional, default size\n * * faceUV an array of 6 Vector4 elements used to set different images to each box side\n * * faceColors an array of 6 Color3 elements used to set different colors to each box side\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\n * @param options.size\n * @param options.width\n * @param options.height\n * @param options.depth\n * @param options.faceUV\n * @param options.faceColors\n * @param options.sideOrientation\n * @param options.frontUVs\n * @param options.backUVs\n * @param options.wrap\n * @param options.topBaseAt\n * @param options.bottomBaseAt\n * @returns the VertexData of the box\n */\n\nexport function CreateBoxVertexData(options) {\n  var nbFaces = 6;\n  var indices = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23];\n  var normals = [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0];\n  var uvs = [];\n  var positions = [];\n  var width = options.width || options.size || 1;\n  var height = options.height || options.size || 1;\n  var depth = options.depth || options.size || 1;\n  var wrap = options.wrap || false;\n  var topBaseAt = options.topBaseAt === void 0 ? 1 : options.topBaseAt;\n  var bottomBaseAt = options.bottomBaseAt === void 0 ? 0 : options.bottomBaseAt;\n  topBaseAt = (topBaseAt + 4) % 4; // places values as 0 to 3\n\n  bottomBaseAt = (bottomBaseAt + 4) % 4; // places values as 0 to 3\n\n  var topOrder = [2, 0, 3, 1];\n  var bottomOrder = [2, 0, 1, 3];\n  var topIndex = topOrder[topBaseAt];\n  var bottomIndex = bottomOrder[bottomBaseAt];\n  var basePositions = [1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1];\n\n  if (wrap) {\n    indices = [2, 3, 0, 2, 0, 1, 4, 5, 6, 4, 6, 7, 9, 10, 11, 9, 11, 8, 12, 14, 15, 12, 13, 14];\n    basePositions = [-1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1];\n    var topFaceBase = [[1, 1, 1], [-1, 1, 1], [-1, 1, -1], [1, 1, -1]];\n    var bottomFaceBase = [[-1, -1, 1], [1, -1, 1], [1, -1, -1], [-1, -1, -1]];\n    var topFaceOrder = [17, 18, 19, 16];\n    var bottomFaceOrder = [22, 23, 20, 21];\n\n    while (topIndex > 0) {\n      topFaceBase.unshift(topFaceBase.pop());\n      topFaceOrder.unshift(topFaceOrder.pop());\n      topIndex--;\n    }\n\n    while (bottomIndex > 0) {\n      bottomFaceBase.unshift(bottomFaceBase.pop());\n      bottomFaceOrder.unshift(bottomFaceOrder.pop());\n      bottomIndex--;\n    }\n\n    topFaceBase = topFaceBase.flat();\n    bottomFaceBase = bottomFaceBase.flat();\n    basePositions = basePositions.concat(topFaceBase).concat(bottomFaceBase);\n    indices.push(topFaceOrder[0], topFaceOrder[2], topFaceOrder[3], topFaceOrder[0], topFaceOrder[1], topFaceOrder[2]);\n    indices.push(bottomFaceOrder[0], bottomFaceOrder[2], bottomFaceOrder[3], bottomFaceOrder[0], bottomFaceOrder[1], bottomFaceOrder[2]);\n  }\n\n  var scaleArray = [width / 2, height / 2, depth / 2];\n  positions = basePositions.reduce(function (accumulator, currentValue, currentIndex) {\n    return accumulator.concat(currentValue * scaleArray[currentIndex % 3]);\n  }, []);\n  var sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\n  var faceUV = options.faceUV || new Array(6);\n  var faceColors = options.faceColors;\n  var colors = []; // default face colors and UV if undefined\n\n  for (var f = 0; f < 6; f++) {\n    if (faceUV[f] === undefined) {\n      faceUV[f] = new Vector4(0, 0, 1, 1);\n    }\n\n    if (faceColors && faceColors[f] === undefined) {\n      faceColors[f] = new Color4(1, 1, 1, 1);\n    }\n  } // Create each face in turn.\n\n\n  for (var index = 0; index < nbFaces; index++) {\n    uvs.push(faceUV[index].z, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - faceUV[index].w : faceUV[index].w);\n    uvs.push(faceUV[index].x, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - faceUV[index].w : faceUV[index].w);\n    uvs.push(faceUV[index].x, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - faceUV[index].y : faceUV[index].y);\n    uvs.push(faceUV[index].z, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - faceUV[index].y : faceUV[index].y);\n\n    if (faceColors) {\n      for (var c = 0; c < 4; c++) {\n        colors.push(faceColors[index].r, faceColors[index].g, faceColors[index].b, faceColors[index].a);\n      }\n    }\n  } // sides\n\n\n  VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs); // Result\n\n\n  var vertexData = new VertexData();\n  vertexData.indices = indices;\n  vertexData.positions = positions;\n  vertexData.normals = normals;\n  vertexData.uvs = uvs;\n\n  if (faceColors) {\n    var totalColors = sideOrientation === VertexData.DOUBLESIDE ? colors.concat(colors) : colors;\n    vertexData.colors = totalColors;\n  }\n\n  return vertexData;\n}\n/**\n * Creates a box mesh\n * * The parameter `size` sets the size (float) of each box side (default 1)\n * * You can set some different box dimensions by using the parameters `width`, `height` and `depth` (all by default have the same value of `size`)\n * * You can set different colors and different images to each box side by using the parameters `faceColors` (an array of 6 Color3 elements) and `faceUV` (an array of 6 Vector4 elements)\n * * Please read this tutorial : https://doc.babylonjs.com/how_to/createbox_per_face_textures_and_colors\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\n * @see https://doc.babylonjs.com/how_to/set_shapes#box\n * @param name defines the name of the mesh\n * @param options defines the options used to create the mesh\n * @param options.size\n * @param options.width\n * @param options.height\n * @param options.depth\n * @param options.faceUV\n * @param options.faceColors\n * @param options.sideOrientation\n * @param options.frontUVs\n * @param options.backUVs\n * @param options.wrap\n * @param options.topBaseAt\n * @param options.bottomBaseAt\n * @param options.updatable\n * @param scene defines the hosting scene\n * @returns the box mesh\n */\n\nexport function CreateBox(name, options, scene) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (scene === void 0) {\n    scene = null;\n  }\n\n  var box = new Mesh(name, scene);\n  options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\n  box._originalBuilderSideOrientation = options.sideOrientation;\n  var vertexData = CreateBoxVertexData(options);\n  vertexData.applyToMesh(box, options.updatable);\n  return box;\n}\n/**\n * Class containing static functions to help procedurally build meshes\n * @deprecated please use CreateBox directly\n */\n\nexport var BoxBuilder = {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  CreateBox: CreateBox\n}; // Side effects\n\nVertexData.CreateBox = CreateBoxVertexData;\n\nMesh.CreateBox = function (name, size, scene, updatable, sideOrientation) {\n  if (scene === void 0) {\n    scene = null;\n  }\n\n  var options = {\n    size: size,\n    sideOrientation: sideOrientation,\n    updatable: updatable\n  };\n  return CreateBox(name, options, scene);\n};","map":{"version":3,"mappings":"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","names":["Vector4","Color4","Mesh","VertexData","CompatibilityOptions","CreateBoxVertexData","options","nbFaces","indices","normals","uvs","positions","width","size","height","depth","wrap","topBaseAt","bottomBaseAt","topOrder","bottomOrder","topIndex","bottomIndex","basePositions","topFaceBase","bottomFaceBase","topFaceOrder","bottomFaceOrder","unshift","pop","flat","concat","push","scaleArray","reduce","accumulator","currentValue","currentIndex","sideOrientation","DEFAULTSIDE","faceUV","Array","faceColors","colors","f","undefined","index","z","UseOpenGLOrientationForUV","w","x","y","c","r","g","b","a","_ComputeSides","frontUVs","backUVs","vertexData","totalColors","DOUBLESIDE","CreateBox","name","scene","box","_GetDefaultSideOrientation","_originalBuilderSideOrientation","applyToMesh","updatable","BoxBuilder"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Meshes/Builders/boxBuilder.ts"],"sourcesContent":["import type { Nullable } from \"../../types\";\r\nimport type { Scene } from \"../../scene\";\r\nimport { Vector4 } from \"../../Maths/math.vector\";\r\nimport { Color4 } from \"../../Maths/math.color\";\r\nimport { Mesh } from \"../mesh\";\r\nimport { VertexData } from \"../mesh.vertexData\";\r\nimport { CompatibilityOptions } from \"../../Compat/compatibilityOptions\";\r\n\r\n/**\r\n * Creates the VertexData for a box\r\n * @param options an object used to set the following optional parameters for the box, required but can be empty\r\n * * size sets the width, height and depth of the box to the value of size, optional default 1\r\n * * width sets the width (x direction) of the box, overwrites the width set by size, optional, default size\r\n * * height sets the height (y direction) of the box, overwrites the height set by size, optional, default size\r\n * * depth sets the depth (z direction) of the box, overwrites the depth set by size, optional, default size\r\n * * faceUV an array of 6 Vector4 elements used to set different images to each box side\r\n * * faceColors an array of 6 Color3 elements used to set different colors to each box side\r\n * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n * @param options.size\r\n * @param options.width\r\n * @param options.height\r\n * @param options.depth\r\n * @param options.faceUV\r\n * @param options.faceColors\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param options.wrap\r\n * @param options.topBaseAt\r\n * @param options.bottomBaseAt\r\n * @returns the VertexData of the box\r\n */\r\nexport function CreateBoxVertexData(options: {\r\n    size?: number;\r\n    width?: number;\r\n    height?: number;\r\n    depth?: number;\r\n    faceUV?: Vector4[];\r\n    faceColors?: Color4[];\r\n    sideOrientation?: number;\r\n    frontUVs?: Vector4;\r\n    backUVs?: Vector4;\r\n    wrap?: boolean;\r\n    topBaseAt?: number;\r\n    bottomBaseAt?: number;\r\n}): VertexData {\r\n    const nbFaces = 6;\r\n    let indices = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23];\r\n    const normals = [\r\n        0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, 1, 0, 0, 1, 0, 0,\r\n        1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0,\r\n    ];\r\n    const uvs = [];\r\n    let positions = [];\r\n    const width = options.width || options.size || 1;\r\n    const height = options.height || options.size || 1;\r\n    const depth = options.depth || options.size || 1;\r\n    const wrap = options.wrap || false;\r\n    let topBaseAt = options.topBaseAt === void 0 ? 1 : options.topBaseAt;\r\n    let bottomBaseAt = options.bottomBaseAt === void 0 ? 0 : options.bottomBaseAt;\r\n    topBaseAt = (topBaseAt + 4) % 4; // places values as 0 to 3\r\n    bottomBaseAt = (bottomBaseAt + 4) % 4; // places values as 0 to 3\r\n    const topOrder = [2, 0, 3, 1];\r\n    const bottomOrder = [2, 0, 1, 3];\r\n    let topIndex = topOrder[topBaseAt];\r\n    let bottomIndex = bottomOrder[bottomBaseAt];\r\n    let basePositions = [\r\n        1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1,\r\n        1, 1, -1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1,\r\n    ];\r\n    if (wrap) {\r\n        indices = [2, 3, 0, 2, 0, 1, 4, 5, 6, 4, 6, 7, 9, 10, 11, 9, 11, 8, 12, 14, 15, 12, 13, 14];\r\n        basePositions = [\r\n            -1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, -1,\r\n        ];\r\n        let topFaceBase: any = [\r\n            [1, 1, 1],\r\n            [-1, 1, 1],\r\n            [-1, 1, -1],\r\n            [1, 1, -1],\r\n        ];\r\n        let bottomFaceBase: any = [\r\n            [-1, -1, 1],\r\n            [1, -1, 1],\r\n            [1, -1, -1],\r\n            [-1, -1, -1],\r\n        ];\r\n        const topFaceOrder: any = [17, 18, 19, 16];\r\n        const bottomFaceOrder: any = [22, 23, 20, 21];\r\n        while (topIndex > 0) {\r\n            topFaceBase.unshift(topFaceBase.pop());\r\n            topFaceOrder.unshift(topFaceOrder.pop());\r\n            topIndex--;\r\n        }\r\n        while (bottomIndex > 0) {\r\n            bottomFaceBase.unshift(bottomFaceBase.pop());\r\n            bottomFaceOrder.unshift(bottomFaceOrder.pop());\r\n            bottomIndex--;\r\n        }\r\n        topFaceBase = topFaceBase.flat();\r\n        bottomFaceBase = bottomFaceBase.flat();\r\n        basePositions = basePositions.concat(topFaceBase).concat(bottomFaceBase);\r\n        indices.push(topFaceOrder[0], topFaceOrder[2], topFaceOrder[3], topFaceOrder[0], topFaceOrder[1], topFaceOrder[2]);\r\n        indices.push(bottomFaceOrder[0], bottomFaceOrder[2], bottomFaceOrder[3], bottomFaceOrder[0], bottomFaceOrder[1], bottomFaceOrder[2]);\r\n    }\r\n    const scaleArray = [width / 2, height / 2, depth / 2];\r\n    positions = basePositions.reduce((accumulator: Array<number>, currentValue, currentIndex) => accumulator.concat(currentValue * scaleArray[currentIndex % 3]), []);\r\n\r\n    const sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\r\n\r\n    const faceUV: Vector4[] = options.faceUV || new Array<Vector4>(6);\r\n    const faceColors = options.faceColors;\r\n    const colors = [];\r\n\r\n    // default face colors and UV if undefined\r\n    for (let f = 0; f < 6; f++) {\r\n        if (faceUV[f] === undefined) {\r\n            faceUV[f] = new Vector4(0, 0, 1, 1);\r\n        }\r\n        if (faceColors && faceColors[f] === undefined) {\r\n            faceColors[f] = new Color4(1, 1, 1, 1);\r\n        }\r\n    }\r\n\r\n    // Create each face in turn.\r\n    for (let index = 0; index < nbFaces; index++) {\r\n        uvs.push(faceUV[index].z, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - faceUV[index].w : faceUV[index].w);\r\n        uvs.push(faceUV[index].x, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - faceUV[index].w : faceUV[index].w);\r\n        uvs.push(faceUV[index].x, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - faceUV[index].y : faceUV[index].y);\r\n        uvs.push(faceUV[index].z, CompatibilityOptions.UseOpenGLOrientationForUV ? 1.0 - faceUV[index].y : faceUV[index].y);\r\n        if (faceColors) {\r\n            for (let c = 0; c < 4; c++) {\r\n                colors.push(faceColors[index].r, faceColors[index].g, faceColors[index].b, faceColors[index].a);\r\n            }\r\n        }\r\n    }\r\n\r\n    // sides\r\n    VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs);\r\n\r\n    // Result\r\n    const vertexData = new VertexData();\r\n\r\n    vertexData.indices = indices;\r\n    vertexData.positions = positions;\r\n    vertexData.normals = normals;\r\n    vertexData.uvs = uvs;\r\n\r\n    if (faceColors) {\r\n        const totalColors = sideOrientation === VertexData.DOUBLESIDE ? colors.concat(colors) : colors;\r\n        vertexData.colors = totalColors;\r\n    }\r\n\r\n    return vertexData;\r\n}\r\n\r\n/**\r\n * Creates a box mesh\r\n * * The parameter `size` sets the size (float) of each box side (default 1)\r\n * * You can set some different box dimensions by using the parameters `width`, `height` and `depth` (all by default have the same value of `size`)\r\n * * You can set different colors and different images to each box side by using the parameters `faceColors` (an array of 6 Color3 elements) and `faceUV` (an array of 6 Vector4 elements)\r\n * * Please read this tutorial : https://doc.babylonjs.com/how_to/createbox_per_face_textures_and_colors\r\n * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n * @see https://doc.babylonjs.com/how_to/set_shapes#box\r\n * @param name defines the name of the mesh\r\n * @param options defines the options used to create the mesh\r\n * @param options.size\r\n * @param options.width\r\n * @param options.height\r\n * @param options.depth\r\n * @param options.faceUV\r\n * @param options.faceColors\r\n * @param options.sideOrientation\r\n * @param options.frontUVs\r\n * @param options.backUVs\r\n * @param options.wrap\r\n * @param options.topBaseAt\r\n * @param options.bottomBaseAt\r\n * @param options.updatable\r\n * @param scene defines the hosting scene\r\n * @returns the box mesh\r\n */\r\nexport function CreateBox(\r\n    name: string,\r\n    options: {\r\n        size?: number;\r\n        width?: number;\r\n        height?: number;\r\n        depth?: number;\r\n        faceUV?: Vector4[];\r\n        faceColors?: Color4[];\r\n        sideOrientation?: number;\r\n        frontUVs?: Vector4;\r\n        backUVs?: Vector4;\r\n        wrap?: boolean;\r\n        topBaseAt?: number;\r\n        bottomBaseAt?: number;\r\n        updatable?: boolean;\r\n    } = {},\r\n    scene: Nullable<Scene> = null\r\n): Mesh {\r\n    const box = new Mesh(name, scene);\r\n\r\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\r\n    box._originalBuilderSideOrientation = options.sideOrientation;\r\n\r\n    const vertexData = CreateBoxVertexData(options);\r\n\r\n    vertexData.applyToMesh(box, options.updatable);\r\n\r\n    return box;\r\n}\r\n\r\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n * @deprecated please use CreateBox directly\r\n */\r\nexport const BoxBuilder = {\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    CreateBox,\r\n};\r\n\r\n// Side effects\r\nVertexData.CreateBox = CreateBoxVertexData;\r\n\r\n(Mesh as any).CreateBox = (name: string, size: number, scene: Nullable<Scene> = null, updatable?: boolean, sideOrientation?: number): Mesh => {\r\n    const options = {\r\n        size,\r\n        sideOrientation,\r\n        updatable,\r\n    };\r\n\r\n    return CreateBox(name, options, scene);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}