{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess.js\";\nimport \"../Shaders/highlights.fragment.js\";\n/**\n * Extracts highlights from the image\n * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses\n */\n\nvar HighlightsPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(HighlightsPostProcess, _super);\n  /**\n   * Extracts highlights from the image\n   * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses\n   * @param name The name of the effect.\n   * @param options The required width/height ratio to downsize to before computing the render pass.\n   * @param camera The camera to apply the render pass to.\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\n   * @param engine The engine which the post process will be applied. (default: current engine)\n   * @param reusable If the post process can be reused on the same frame. (default: false)\n   * @param textureType Type of texture for the post process (default: Engine.TEXTURETYPE_UNSIGNED_INT)\n   */\n\n\n  function HighlightsPostProcess(name, options, camera, samplingMode, engine, reusable, textureType) {\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    return _super.call(this, name, \"highlights\", null, null, options, camera, samplingMode, engine, reusable, null, textureType) || this;\n  }\n  /**\n   * Gets a string identifying the name of the class\n   * @returns \"HighlightsPostProcess\" string\n   */\n\n\n  HighlightsPostProcess.prototype.getClassName = function () {\n    return \"HighlightsPostProcess\";\n  };\n\n  return HighlightsPostProcess;\n}(PostProcess);\n\nexport { HighlightsPostProcess };","map":{"version":3,"mappings":";AAGA,SAASA,WAAT,QAA4B,kBAA5B;AAIA,OAAO,mCAAP;AAEA;;;;;AAIA;AAAA;AAAA;AAA2CC;AASvC;;;;;;;;;;;;;AAWA,iCACIC,IADJ,EAEIC,OAFJ,EAGIC,MAHJ,EAIIC,YAJJ,EAKIC,MALJ,EAMIC,QANJ,EAOIC,WAPJ,EAO4D;AAAxD;AAAAA,oBAAsB,CAAtB;AAAsB;;WAEtBC,kBAAMP,IAAN,EAAY,YAAZ,EAA0B,IAA1B,EAAgC,IAAhC,EAAsCC,OAAtC,EAA+CC,MAA/C,EAAuDC,YAAvD,EAAqEC,MAArE,EAA6EC,QAA7E,EAAuF,IAAvF,EAA6FC,WAA7F,KAAyG;AAC5G;AA7BD;;;;;;AAIOE,iDAAP;AACI,WAAO,uBAAP;AACH,GAFM;;AA0BX;AAAC,CA/BD,CAA2CV,WAA3C","names":["PostProcess","__extends","name","options","camera","samplingMode","engine","reusable","textureType","_super","HighlightsPostProcess"],"sourceRoot":"","sources":["../../../../../lts/core/generated/PostProcesses/highlightsPostProcess.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport type { PostProcessOptions } from \"./postProcess\";\r\nimport { PostProcess } from \"./postProcess\";\r\nimport type { Engine } from \"../Engines/engine\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\nimport \"../Shaders/highlights.fragment\";\r\n\r\n/**\r\n * Extracts highlights from the image\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses\r\n */\r\nexport class HighlightsPostProcess extends PostProcess {\r\n    /**\r\n     * Gets a string identifying the name of the class\r\n     * @returns \"HighlightsPostProcess\" string\r\n     */\r\n    public getClassName(): string {\r\n        return \"HighlightsPostProcess\";\r\n    }\r\n\r\n    /**\r\n     * Extracts highlights from the image\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses\r\n     * @param name The name of the effect.\r\n     * @param options The required width/height ratio to downsize to before computing the render pass.\r\n     * @param camera The camera to apply the render pass to.\r\n     * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n     * @param engine The engine which the post process will be applied. (default: current engine)\r\n     * @param reusable If the post process can be reused on the same frame. (default: false)\r\n     * @param textureType Type of texture for the post process (default: Engine.TEXTURETYPE_UNSIGNED_INT)\r\n     */\r\n    constructor(\r\n        name: string,\r\n        options: number | PostProcessOptions,\r\n        camera: Nullable<Camera>,\r\n        samplingMode?: number,\r\n        engine?: Engine,\r\n        reusable?: boolean,\r\n        textureType: number = Constants.TEXTURETYPE_UNSIGNED_INT\r\n    ) {\r\n        super(name, \"highlights\", null, null, options, camera, samplingMode, engine, reusable, null, textureType);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}