{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport { Scalar } from \"@babylonjs/core/Maths/math.scalar.js\";\nimport { SphericalHarmonics, SphericalPolynomial } from \"@babylonjs/core/Maths/sphericalPolynomial.js\";\nimport { Quaternion, Matrix } from \"@babylonjs/core/Maths/math.vector.js\";\nimport { RawCubeTexture } from \"@babylonjs/core/Materials/Textures/rawCubeTexture.js\";\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader.js\";\nvar NAME = \"EXT_lights_image_based\";\n/**\n * [Specification](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Vendor/EXT_lights_image_based/README.md)\n */\n\nvar EXT_lights_image_based =\n/** @class */\nfunction () {\n  /**\n   * @param loader\n   * @hidden\n   */\n  function EXT_lights_image_based(loader) {\n    /**\n     * The name of this extension.\n     */\n    this.name = NAME;\n    this._loader = loader;\n    this.enabled = this._loader.isExtensionUsed(NAME);\n  }\n  /** @hidden */\n\n\n  EXT_lights_image_based.prototype.dispose = function () {\n    this._loader = null;\n    delete this._lights;\n  };\n  /** @hidden */\n\n\n  EXT_lights_image_based.prototype.onLoading = function () {\n    var extensions = this._loader.gltf.extensions;\n\n    if (extensions && extensions[this.name]) {\n      var extension = extensions[this.name];\n      this._lights = extension.lights;\n    }\n  };\n  /**\n   * @param context\n   * @param scene\n   * @hidden\n   */\n\n\n  EXT_lights_image_based.prototype.loadSceneAsync = function (context, scene) {\n    var _this = this;\n\n    return GLTFLoader.LoadExtensionAsync(context, scene, this.name, function (extensionContext, extension) {\n      var promises = new Array();\n      promises.push(_this._loader.loadSceneAsync(context, scene));\n\n      _this._loader.logOpen(\"\".concat(extensionContext));\n\n      var light = ArrayItem.Get(\"\".concat(extensionContext, \"/light\"), _this._lights, extension.light);\n      promises.push(_this._loadLightAsync(\"/extensions/\".concat(_this.name, \"/lights/\").concat(extension.light), light).then(function (texture) {\n        _this._loader.babylonScene.environmentTexture = texture;\n      }));\n\n      _this._loader.logClose();\n\n      return Promise.all(promises).then(function () {});\n    });\n  };\n\n  EXT_lights_image_based.prototype._loadLightAsync = function (context, light) {\n    var _this = this;\n\n    if (!light._loaded) {\n      var promises = new Array();\n\n      this._loader.logOpen(\"\".concat(context));\n\n      var imageData_1 = new Array(light.specularImages.length);\n\n      var _loop_1 = function _loop_1(mipmap) {\n        var faces = light.specularImages[mipmap];\n        imageData_1[mipmap] = new Array(faces.length);\n\n        var _loop_2 = function _loop_2(face) {\n          var specularImageContext = \"\".concat(context, \"/specularImages/\").concat(mipmap, \"/\").concat(face);\n\n          this_1._loader.logOpen(\"\".concat(specularImageContext));\n\n          var index = faces[face];\n          var image = ArrayItem.Get(specularImageContext, this_1._loader.gltf.images, index);\n          promises.push(this_1._loader.loadImageAsync(\"/images/\".concat(index), image).then(function (data) {\n            imageData_1[mipmap][face] = data;\n          }));\n\n          this_1._loader.logClose();\n        };\n\n        for (var face = 0; face < faces.length; face++) {\n          _loop_2(face);\n        }\n      };\n\n      var this_1 = this;\n\n      for (var mipmap = 0; mipmap < light.specularImages.length; mipmap++) {\n        _loop_1(mipmap);\n      }\n\n      this._loader.logClose();\n\n      light._loaded = Promise.all(promises).then(function () {\n        var babylonTexture = new RawCubeTexture(_this._loader.babylonScene, null, light.specularImageSize);\n        babylonTexture.name = light.name || \"environment\";\n        light._babylonTexture = babylonTexture;\n\n        if (light.intensity != undefined) {\n          babylonTexture.level = light.intensity;\n        }\n\n        if (light.rotation) {\n          var rotation = Quaternion.FromArray(light.rotation); // Invert the rotation so that positive rotation is counter-clockwise.\n\n          if (!_this._loader.babylonScene.useRightHandedSystem) {\n            rotation = Quaternion.Inverse(rotation);\n          }\n\n          Matrix.FromQuaternionToRef(rotation, babylonTexture.getReflectionTextureMatrix());\n        }\n\n        if (!light.irradianceCoefficients) {\n          throw new Error(\"\".concat(context, \": Irradiance coefficients are missing\"));\n        }\n\n        var sphericalHarmonics = SphericalHarmonics.FromArray(light.irradianceCoefficients);\n        sphericalHarmonics.scaleInPlace(light.intensity);\n        sphericalHarmonics.convertIrradianceToLambertianRadiance();\n        var sphericalPolynomial = SphericalPolynomial.FromHarmonics(sphericalHarmonics); // Compute the lod generation scale to fit exactly to the number of levels available.\n\n        var lodGenerationScale = (imageData_1.length - 1) / Scalar.Log2(light.specularImageSize);\n        return babylonTexture.updateRGBDAsync(imageData_1, sphericalPolynomial, lodGenerationScale);\n      });\n    }\n\n    return light._loaded.then(function () {\n      return light._babylonTexture;\n    });\n  };\n\n  return EXT_lights_image_based;\n}();\n\nexport { EXT_lights_image_based };\nGLTFLoader.RegisterExtension(NAME, function (loader) {\n  return new EXT_lights_image_based(loader);\n});","map":{"version":3,"mappings":"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","names":["Scalar","SphericalHarmonics","SphericalPolynomial","Quaternion","Matrix","RawCubeTexture","GLTFLoader","ArrayItem","NAME","loader","_loader","enabled","isExtensionUsed","EXT_lights_image_based","_lights","extensions","gltf","name","extension","lights","context","scene","LoadExtensionAsync","extensionContext","promises","Array","push","_this","loadSceneAsync","logOpen","light","Get","_loadLightAsync","concat","then","texture","babylonScene","environmentTexture","logClose","Promise","all","_loaded","imageData_1","specularImages","length","mipmap","faces","face","specularImageContext","this_1","index","image","images","loadImageAsync","data","babylonTexture","specularImageSize","_babylonTexture","intensity","undefined","level","rotation","FromArray","useRightHandedSystem","Inverse","FromQuaternionToRef","getReflectionTextureMatrix","irradianceCoefficients","Error","sphericalHarmonics","scaleInPlace","convertIrradianceToLambertianRadiance","sphericalPolynomial","FromHarmonics","lodGenerationScale","Log2","updateRGBDAsync","RegisterExtension"],"sourceRoot":"","sources":["../../../../../../../lts/loaders/generated/glTF/2.0/Extensions/EXT_lights_image_based.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\r\nimport type { Nullable } from \"core/types\";\r\nimport { Scalar } from \"core/Maths/math.scalar\";\r\nimport { SphericalHarmonics, SphericalPolynomial } from \"core/Maths/sphericalPolynomial\";\r\nimport { Quaternion, Matrix } from \"core/Maths/math.vector\";\r\nimport type { BaseTexture } from \"core/Materials/Textures/baseTexture\";\r\nimport { RawCubeTexture } from \"core/Materials/Textures/rawCubeTexture\";\r\n\r\nimport type { IEXTLightsImageBased_LightReferenceImageBased, IEXTLightsImageBased_LightImageBased, IEXTLightsImageBased } from \"babylonjs-gltf2interface\";\r\nimport type { IScene } from \"../glTFLoaderInterfaces\";\r\nimport type { IGLTFLoaderExtension } from \"../glTFLoaderExtension\";\r\nimport { GLTFLoader, ArrayItem } from \"../glTFLoader\";\r\n\r\nconst NAME = \"EXT_lights_image_based\";\r\n\r\ndeclare module \"babylonjs-gltf2interface\" {\r\n    /** @hidden */\r\n    interface IEXTLightsImageBased_LightImageBased {\r\n        _babylonTexture?: BaseTexture;\r\n        _loaded?: Promise<void>;\r\n    }\r\n}\r\n\r\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Vendor/EXT_lights_image_based/README.md)\r\n */\r\nexport class EXT_lights_image_based implements IGLTFLoaderExtension {\r\n    /**\r\n     * The name of this extension.\r\n     */\r\n    public readonly name = NAME;\r\n\r\n    /**\r\n     * Defines whether this extension is enabled.\r\n     */\r\n    public enabled: boolean;\r\n\r\n    private _loader: GLTFLoader;\r\n    private _lights?: IEXTLightsImageBased_LightImageBased[];\r\n\r\n    /**\r\n     * @param loader\r\n     * @hidden\r\n     */\r\n    constructor(loader: GLTFLoader) {\r\n        this._loader = loader;\r\n        this.enabled = this._loader.isExtensionUsed(NAME);\r\n    }\r\n\r\n    /** @hidden */\r\n    public dispose() {\r\n        (this._loader as any) = null;\r\n        delete this._lights;\r\n    }\r\n\r\n    /** @hidden */\r\n    public onLoading(): void {\r\n        const extensions = this._loader.gltf.extensions;\r\n        if (extensions && extensions[this.name]) {\r\n            const extension = extensions[this.name] as IEXTLightsImageBased;\r\n            this._lights = extension.lights;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param context\r\n     * @param scene\r\n     * @hidden\r\n     */\r\n    public loadSceneAsync(context: string, scene: IScene): Nullable<Promise<void>> {\r\n        return GLTFLoader.LoadExtensionAsync<IEXTLightsImageBased_LightReferenceImageBased>(context, scene, this.name, (extensionContext, extension) => {\r\n            const promises = new Array<Promise<any>>();\r\n\r\n            promises.push(this._loader.loadSceneAsync(context, scene));\r\n\r\n            this._loader.logOpen(`${extensionContext}`);\r\n\r\n            const light = ArrayItem.Get(`${extensionContext}/light`, this._lights, extension.light);\r\n            promises.push(\r\n                this._loadLightAsync(`/extensions/${this.name}/lights/${extension.light}`, light).then((texture) => {\r\n                    this._loader.babylonScene.environmentTexture = texture;\r\n                })\r\n            );\r\n\r\n            this._loader.logClose();\r\n\r\n            return Promise.all(promises).then(() => {});\r\n        });\r\n    }\r\n\r\n    private _loadLightAsync(context: string, light: IEXTLightsImageBased_LightImageBased): Promise<BaseTexture> {\r\n        if (!light._loaded) {\r\n            const promises = new Array<Promise<any>>();\r\n\r\n            this._loader.logOpen(`${context}`);\r\n\r\n            const imageData = new Array<Array<ArrayBufferView>>(light.specularImages.length);\r\n            for (let mipmap = 0; mipmap < light.specularImages.length; mipmap++) {\r\n                const faces = light.specularImages[mipmap];\r\n                imageData[mipmap] = new Array<ArrayBufferView>(faces.length);\r\n                for (let face = 0; face < faces.length; face++) {\r\n                    const specularImageContext = `${context}/specularImages/${mipmap}/${face}`;\r\n                    this._loader.logOpen(`${specularImageContext}`);\r\n\r\n                    const index = faces[face];\r\n                    const image = ArrayItem.Get(specularImageContext, this._loader.gltf.images, index);\r\n                    promises.push(\r\n                        this._loader.loadImageAsync(`/images/${index}`, image).then((data) => {\r\n                            imageData[mipmap][face] = data;\r\n                        })\r\n                    );\r\n\r\n                    this._loader.logClose();\r\n                }\r\n            }\r\n\r\n            this._loader.logClose();\r\n\r\n            light._loaded = Promise.all(promises).then(() => {\r\n                const babylonTexture = new RawCubeTexture(this._loader.babylonScene, null, light.specularImageSize);\r\n                babylonTexture.name = light.name || \"environment\";\r\n                light._babylonTexture = babylonTexture;\r\n\r\n                if (light.intensity != undefined) {\r\n                    babylonTexture.level = light.intensity;\r\n                }\r\n\r\n                if (light.rotation) {\r\n                    let rotation = Quaternion.FromArray(light.rotation);\r\n\r\n                    // Invert the rotation so that positive rotation is counter-clockwise.\r\n                    if (!this._loader.babylonScene.useRightHandedSystem) {\r\n                        rotation = Quaternion.Inverse(rotation);\r\n                    }\r\n\r\n                    Matrix.FromQuaternionToRef(rotation, babylonTexture.getReflectionTextureMatrix());\r\n                }\r\n\r\n                if (!light.irradianceCoefficients) {\r\n                    throw new Error(`${context}: Irradiance coefficients are missing`);\r\n                }\r\n\r\n                const sphericalHarmonics = SphericalHarmonics.FromArray(light.irradianceCoefficients);\r\n                sphericalHarmonics.scaleInPlace(light.intensity);\r\n\r\n                sphericalHarmonics.convertIrradianceToLambertianRadiance();\r\n                const sphericalPolynomial = SphericalPolynomial.FromHarmonics(sphericalHarmonics);\r\n\r\n                // Compute the lod generation scale to fit exactly to the number of levels available.\r\n                const lodGenerationScale = (imageData.length - 1) / Scalar.Log2(light.specularImageSize);\r\n                return babylonTexture.updateRGBDAsync(imageData, sphericalPolynomial, lodGenerationScale);\r\n            });\r\n        }\r\n\r\n        return light._loaded.then(() => {\r\n            return light._babylonTexture!;\r\n        });\r\n    }\r\n}\r\n\r\nGLTFLoader.RegisterExtension(NAME, (loader) => new EXT_lights_image_based(loader));\r\n"]},"metadata":{},"sourceType":"module"}