{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { _WarnImport } from \"../Misc/devTools.js\";\n/**\n * Class used to control physics engine\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\n */\n\nvar PhysicsEngine =\n/** @class */\nfunction () {\n  /**\n   * Creates a new Physics Engine\n   * @param gravity defines the gravity vector used by the simulation\n   * @param _physicsPlugin defines the plugin to use (CannonJS by default)\n   */\n  function PhysicsEngine(gravity, _physicsPlugin) {\n    if (_physicsPlugin === void 0) {\n      _physicsPlugin = PhysicsEngine.DefaultPluginFactory();\n    }\n\n    this._physicsPlugin = _physicsPlugin;\n    this._impostors = [];\n    this._joints = [];\n    this._subTimeStep = 0;\n    this._uniqueIdCounter = 0;\n\n    if (!this._physicsPlugin.isSupported()) {\n      throw new Error(\"Physics Engine \" + this._physicsPlugin.name + \" cannot be found. \" + \"Please make sure it is included.\");\n    }\n\n    gravity = gravity || new Vector3(0, -9.807, 0);\n    this.setGravity(gravity);\n    this.setTimeStep();\n  }\n  /**\n   * Factory used to create the default physics plugin.\n   * @returns The default physics plugin\n   */\n\n\n  PhysicsEngine.DefaultPluginFactory = function () {\n    throw _WarnImport(\"CannonJSPlugin\");\n  };\n  /**\n   * Sets the gravity vector used by the simulation\n   * @param gravity defines the gravity vector to use\n   */\n\n\n  PhysicsEngine.prototype.setGravity = function (gravity) {\n    this.gravity = gravity;\n\n    this._physicsPlugin.setGravity(this.gravity);\n  };\n  /**\n   * Set the time step of the physics engine.\n   * Default is 1/60.\n   * To slow it down, enter 1/600 for example.\n   * To speed it up, 1/30\n   * @param newTimeStep defines the new timestep to apply to this world.\n   */\n\n\n  PhysicsEngine.prototype.setTimeStep = function (newTimeStep) {\n    if (newTimeStep === void 0) {\n      newTimeStep = 1 / 60;\n    }\n\n    this._physicsPlugin.setTimeStep(newTimeStep);\n  };\n  /**\n   * Get the time step of the physics engine.\n   * @returns the current time step\n   */\n\n\n  PhysicsEngine.prototype.getTimeStep = function () {\n    return this._physicsPlugin.getTimeStep();\n  };\n  /**\n   * Set the sub time step of the physics engine.\n   * Default is 0 meaning there is no sub steps\n   * To increase physics resolution precision, set a small value (like 1 ms)\n   * @param subTimeStep defines the new sub timestep used for physics resolution.\n   */\n\n\n  PhysicsEngine.prototype.setSubTimeStep = function (subTimeStep) {\n    if (subTimeStep === void 0) {\n      subTimeStep = 0;\n    }\n\n    this._subTimeStep = subTimeStep;\n  };\n  /**\n   * Get the sub time step of the physics engine.\n   * @returns the current sub time step\n   */\n\n\n  PhysicsEngine.prototype.getSubTimeStep = function () {\n    return this._subTimeStep;\n  };\n  /**\n   * Release all resources\n   */\n\n\n  PhysicsEngine.prototype.dispose = function () {\n    this._impostors.forEach(function (impostor) {\n      impostor.dispose();\n    });\n\n    this._physicsPlugin.dispose();\n  };\n  /**\n   * Gets the name of the current physics plugin\n   * @returns the name of the plugin\n   */\n\n\n  PhysicsEngine.prototype.getPhysicsPluginName = function () {\n    return this._physicsPlugin.name;\n  };\n  /**\n   * Adding a new impostor for the impostor tracking.\n   * This will be done by the impostor itself.\n   * @param impostor the impostor to add\n   */\n\n\n  PhysicsEngine.prototype.addImpostor = function (impostor) {\n    this._impostors.push(impostor);\n\n    impostor.uniqueId = this._uniqueIdCounter++; //if no parent, generate the body\n\n    if (!impostor.parent) {\n      this._physicsPlugin.generatePhysicsBody(impostor);\n    }\n  };\n  /**\n   * Remove an impostor from the engine.\n   * This impostor and its mesh will not longer be updated by the physics engine.\n   * @param impostor the impostor to remove\n   */\n\n\n  PhysicsEngine.prototype.removeImpostor = function (impostor) {\n    var index = this._impostors.indexOf(impostor);\n\n    if (index > -1) {\n      var removed = this._impostors.splice(index, 1); //Is it needed?\n\n\n      if (removed.length) {\n        this.getPhysicsPlugin().removePhysicsBody(impostor);\n      }\n    }\n  };\n  /**\n   * Add a joint to the physics engine\n   * @param mainImpostor defines the main impostor to which the joint is added.\n   * @param connectedImpostor defines the impostor that is connected to the main impostor using this joint\n   * @param joint defines the joint that will connect both impostors.\n   */\n\n\n  PhysicsEngine.prototype.addJoint = function (mainImpostor, connectedImpostor, joint) {\n    var impostorJoint = {\n      mainImpostor: mainImpostor,\n      connectedImpostor: connectedImpostor,\n      joint: joint\n    };\n    joint.physicsPlugin = this._physicsPlugin;\n\n    this._joints.push(impostorJoint);\n\n    this._physicsPlugin.generateJoint(impostorJoint);\n  };\n  /**\n   * Removes a joint from the simulation\n   * @param mainImpostor defines the impostor used with the joint\n   * @param connectedImpostor defines the other impostor connected to the main one by the joint\n   * @param joint defines the joint to remove\n   */\n\n\n  PhysicsEngine.prototype.removeJoint = function (mainImpostor, connectedImpostor, joint) {\n    var matchingJoints = this._joints.filter(function (impostorJoint) {\n      return impostorJoint.connectedImpostor === connectedImpostor && impostorJoint.joint === joint && impostorJoint.mainImpostor === mainImpostor;\n    });\n\n    if (matchingJoints.length) {\n      this._physicsPlugin.removeJoint(matchingJoints[0]); //TODO remove it from the list as well\n\n    }\n  };\n  /**\n   * Called by the scene. No need to call it.\n   * @param delta defines the timespan between frames\n   */\n\n\n  PhysicsEngine.prototype._step = function (delta) {\n    var _this = this; //check if any mesh has no body / requires an update\n\n\n    this._impostors.forEach(function (impostor) {\n      if (impostor.isBodyInitRequired()) {\n        _this._physicsPlugin.generatePhysicsBody(impostor);\n      }\n    });\n\n    if (delta > 0.1) {\n      delta = 0.1;\n    } else if (delta <= 0) {\n      delta = 1.0 / 60.0;\n    }\n\n    this._physicsPlugin.executeStep(delta, this._impostors);\n  };\n  /**\n   * Gets the current plugin used to run the simulation\n   * @returns current plugin\n   */\n\n\n  PhysicsEngine.prototype.getPhysicsPlugin = function () {\n    return this._physicsPlugin;\n  };\n  /**\n   * Gets the list of physic impostors\n   * @returns an array of PhysicsImpostor\n   */\n\n\n  PhysicsEngine.prototype.getImpostors = function () {\n    return this._impostors;\n  };\n  /**\n   * Gets the impostor for a physics enabled object\n   * @param object defines the object impersonated by the impostor\n   * @returns the PhysicsImpostor or null if not found\n   */\n\n\n  PhysicsEngine.prototype.getImpostorForPhysicsObject = function (object) {\n    for (var i = 0; i < this._impostors.length; ++i) {\n      if (this._impostors[i].object === object) {\n        return this._impostors[i];\n      }\n    }\n\n    return null;\n  };\n  /**\n   * Gets the impostor for a physics body object\n   * @param body defines physics body used by the impostor\n   * @returns the PhysicsImpostor or null if not found\n   */\n\n\n  PhysicsEngine.prototype.getImpostorWithPhysicsBody = function (body) {\n    for (var i = 0; i < this._impostors.length; ++i) {\n      if (this._impostors[i].physicsBody === body) {\n        return this._impostors[i];\n      }\n    }\n\n    return null;\n  };\n  /**\n   * Does a raycast in the physics world\n   * @param from when should the ray start?\n   * @param to when should the ray end?\n   * @returns PhysicsRaycastResult\n   */\n\n\n  PhysicsEngine.prototype.raycast = function (from, to) {\n    return this._physicsPlugin.raycast(from, to);\n  };\n  /**\n   * Global value used to control the smallest number supported by the simulation\n   */\n\n\n  PhysicsEngine.Epsilon = 0.001;\n  return PhysicsEngine;\n}();\n\nexport { PhysicsEngine };","map":{"version":3,"mappings":"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","names":["Vector3","_WarnImport","gravity","_physicsPlugin","PhysicsEngine","DefaultPluginFactory","isSupported","Error","name","setGravity","setTimeStep","newTimeStep","getTimeStep","subTimeStep","_subTimeStep","_impostors","forEach","impostor","dispose","push","uniqueId","_uniqueIdCounter","parent","generatePhysicsBody","index","indexOf","removed","splice","length","getPhysicsPlugin","removePhysicsBody","mainImpostor","connectedImpostor","joint","impostorJoint","physicsPlugin","_joints","generateJoint","matchingJoints","filter","removeJoint","delta","isBodyInitRequired","_this","executeStep","object","i","body","physicsBody","from","to","raycast"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Physics/physicsEngine.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport type { IPhysicsEngine, PhysicsImpostorJoint, IPhysicsEnginePlugin } from \"./IPhysicsEngine\";\r\nimport type { PhysicsImpostor, IPhysicsEnabledObject } from \"./physicsImpostor\";\r\nimport type { PhysicsJoint } from \"./physicsJoint\";\r\nimport type { PhysicsRaycastResult } from \"./physicsRaycastResult\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\n\r\n/**\r\n * Class used to control physics engine\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\r\nexport class PhysicsEngine implements IPhysicsEngine {\r\n    /**\r\n     * Global value used to control the smallest number supported by the simulation\r\n     */\r\n    public static Epsilon = 0.001;\r\n\r\n    private _impostors: Array<PhysicsImpostor> = [];\r\n    private _joints: Array<PhysicsImpostorJoint> = [];\r\n    private _subTimeStep: number = 0;\r\n    private _uniqueIdCounter = 0;\r\n\r\n    /**\r\n     * Gets the gravity vector used by the simulation\r\n     */\r\n    public gravity: Vector3;\r\n\r\n    /**\r\n     * Factory used to create the default physics plugin.\r\n     * @returns The default physics plugin\r\n     */\r\n    public static DefaultPluginFactory(): IPhysicsEnginePlugin {\r\n        throw _WarnImport(\"CannonJSPlugin\");\r\n    }\r\n\r\n    /**\r\n     * Creates a new Physics Engine\r\n     * @param gravity defines the gravity vector used by the simulation\r\n     * @param _physicsPlugin defines the plugin to use (CannonJS by default)\r\n     */\r\n    constructor(gravity: Nullable<Vector3>, private _physicsPlugin: IPhysicsEnginePlugin = PhysicsEngine.DefaultPluginFactory()) {\r\n        if (!this._physicsPlugin.isSupported()) {\r\n            throw new Error(\"Physics Engine \" + this._physicsPlugin.name + \" cannot be found. \" + \"Please make sure it is included.\");\r\n        }\r\n        gravity = gravity || new Vector3(0, -9.807, 0);\r\n        this.setGravity(gravity);\r\n        this.setTimeStep();\r\n    }\r\n\r\n    /**\r\n     * Sets the gravity vector used by the simulation\r\n     * @param gravity defines the gravity vector to use\r\n     */\r\n    public setGravity(gravity: Vector3): void {\r\n        this.gravity = gravity;\r\n        this._physicsPlugin.setGravity(this.gravity);\r\n    }\r\n\r\n    /**\r\n     * Set the time step of the physics engine.\r\n     * Default is 1/60.\r\n     * To slow it down, enter 1/600 for example.\r\n     * To speed it up, 1/30\r\n     * @param newTimeStep defines the new timestep to apply to this world.\r\n     */\r\n    public setTimeStep(newTimeStep: number = 1 / 60) {\r\n        this._physicsPlugin.setTimeStep(newTimeStep);\r\n    }\r\n\r\n    /**\r\n     * Get the time step of the physics engine.\r\n     * @returns the current time step\r\n     */\r\n    public getTimeStep(): number {\r\n        return this._physicsPlugin.getTimeStep();\r\n    }\r\n\r\n    /**\r\n     * Set the sub time step of the physics engine.\r\n     * Default is 0 meaning there is no sub steps\r\n     * To increase physics resolution precision, set a small value (like 1 ms)\r\n     * @param subTimeStep defines the new sub timestep used for physics resolution.\r\n     */\r\n    public setSubTimeStep(subTimeStep: number = 0) {\r\n        this._subTimeStep = subTimeStep;\r\n    }\r\n\r\n    /**\r\n     * Get the sub time step of the physics engine.\r\n     * @returns the current sub time step\r\n     */\r\n    public getSubTimeStep() {\r\n        return this._subTimeStep;\r\n    }\r\n\r\n    /**\r\n     * Release all resources\r\n     */\r\n    public dispose(): void {\r\n        this._impostors.forEach(function (impostor) {\r\n            impostor.dispose();\r\n        });\r\n        this._physicsPlugin.dispose();\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the current physics plugin\r\n     * @returns the name of the plugin\r\n     */\r\n    public getPhysicsPluginName(): string {\r\n        return this._physicsPlugin.name;\r\n    }\r\n\r\n    /**\r\n     * Adding a new impostor for the impostor tracking.\r\n     * This will be done by the impostor itself.\r\n     * @param impostor the impostor to add\r\n     */\r\n    public addImpostor(impostor: PhysicsImpostor) {\r\n        this._impostors.push(impostor);\r\n        impostor.uniqueId = this._uniqueIdCounter++;\r\n        //if no parent, generate the body\r\n        if (!impostor.parent) {\r\n            this._physicsPlugin.generatePhysicsBody(impostor);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove an impostor from the engine.\r\n     * This impostor and its mesh will not longer be updated by the physics engine.\r\n     * @param impostor the impostor to remove\r\n     */\r\n    public removeImpostor(impostor: PhysicsImpostor) {\r\n        const index = this._impostors.indexOf(impostor);\r\n        if (index > -1) {\r\n            const removed = this._impostors.splice(index, 1);\r\n            //Is it needed?\r\n            if (removed.length) {\r\n                this.getPhysicsPlugin().removePhysicsBody(impostor);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a joint to the physics engine\r\n     * @param mainImpostor defines the main impostor to which the joint is added.\r\n     * @param connectedImpostor defines the impostor that is connected to the main impostor using this joint\r\n     * @param joint defines the joint that will connect both impostors.\r\n     */\r\n    public addJoint(mainImpostor: PhysicsImpostor, connectedImpostor: PhysicsImpostor, joint: PhysicsJoint) {\r\n        const impostorJoint = {\r\n            mainImpostor: mainImpostor,\r\n            connectedImpostor: connectedImpostor,\r\n            joint: joint,\r\n        };\r\n        joint.physicsPlugin = this._physicsPlugin;\r\n        this._joints.push(impostorJoint);\r\n        this._physicsPlugin.generateJoint(impostorJoint);\r\n    }\r\n\r\n    /**\r\n     * Removes a joint from the simulation\r\n     * @param mainImpostor defines the impostor used with the joint\r\n     * @param connectedImpostor defines the other impostor connected to the main one by the joint\r\n     * @param joint defines the joint to remove\r\n     */\r\n    public removeJoint(mainImpostor: PhysicsImpostor, connectedImpostor: PhysicsImpostor, joint: PhysicsJoint) {\r\n        const matchingJoints = this._joints.filter(function (impostorJoint) {\r\n            return impostorJoint.connectedImpostor === connectedImpostor && impostorJoint.joint === joint && impostorJoint.mainImpostor === mainImpostor;\r\n        });\r\n        if (matchingJoints.length) {\r\n            this._physicsPlugin.removeJoint(matchingJoints[0]);\r\n            //TODO remove it from the list as well\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called by the scene. No need to call it.\r\n     * @param delta defines the timespan between frames\r\n     */\r\n    public _step(delta: number) {\r\n        //check if any mesh has no body / requires an update\r\n        this._impostors.forEach((impostor) => {\r\n            if (impostor.isBodyInitRequired()) {\r\n                this._physicsPlugin.generatePhysicsBody(impostor);\r\n            }\r\n        });\r\n\r\n        if (delta > 0.1) {\r\n            delta = 0.1;\r\n        } else if (delta <= 0) {\r\n            delta = 1.0 / 60.0;\r\n        }\r\n\r\n        this._physicsPlugin.executeStep(delta, this._impostors);\r\n    }\r\n\r\n    /**\r\n     * Gets the current plugin used to run the simulation\r\n     * @returns current plugin\r\n     */\r\n    public getPhysicsPlugin(): IPhysicsEnginePlugin {\r\n        return this._physicsPlugin;\r\n    }\r\n\r\n    /**\r\n     * Gets the list of physic impostors\r\n     * @returns an array of PhysicsImpostor\r\n     */\r\n    public getImpostors(): Array<PhysicsImpostor> {\r\n        return this._impostors;\r\n    }\r\n\r\n    /**\r\n     * Gets the impostor for a physics enabled object\r\n     * @param object defines the object impersonated by the impostor\r\n     * @returns the PhysicsImpostor or null if not found\r\n     */\r\n    public getImpostorForPhysicsObject(object: IPhysicsEnabledObject): Nullable<PhysicsImpostor> {\r\n        for (let i = 0; i < this._impostors.length; ++i) {\r\n            if (this._impostors[i].object === object) {\r\n                return this._impostors[i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Gets the impostor for a physics body object\r\n     * @param body defines physics body used by the impostor\r\n     * @returns the PhysicsImpostor or null if not found\r\n     */\r\n    public getImpostorWithPhysicsBody(body: any): Nullable<PhysicsImpostor> {\r\n        for (let i = 0; i < this._impostors.length; ++i) {\r\n            if (this._impostors[i].physicsBody === body) {\r\n                return this._impostors[i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Does a raycast in the physics world\r\n     * @param from when should the ray start?\r\n     * @param to when should the ray end?\r\n     * @returns PhysicsRaycastResult\r\n     */\r\n    public raycast(from: Vector3, to: Vector3): PhysicsRaycastResult {\r\n        return this._physicsPlugin.raycast(from, to);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}