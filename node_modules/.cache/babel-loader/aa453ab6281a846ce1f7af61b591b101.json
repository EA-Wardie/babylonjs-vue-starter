{"ast":null,"code":"import \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { __extends } from \"tslib\";\nimport { Vector3 } from \"../Maths/math.vector.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { Mesh } from \"../Meshes/mesh.js\";\nimport { Gizmo } from \"./gizmo.js\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer.js\";\nimport { StandardMaterial } from \"../Materials/standardMaterial.js\";\nimport { CreateBox } from \"../Meshes/Builders/boxBuilder.js\";\nimport { CreateCylinder } from \"../Meshes/Builders/cylinderBuilder.js\";\nimport { Matrix } from \"../Maths/math.js\";\nimport { CreateLines } from \"../Meshes/Builders/linesBuilder.js\";\nimport { PointerEventTypes } from \"../Events/pointerEvents.js\";\nimport { Observable } from \"../Misc/observable.js\";\n/**\n * Gizmo that enables viewing a camera\n */\n\nvar CameraGizmo =\n/** @class */\nfunction (_super) {\n  __extends(CameraGizmo, _super);\n  /**\n   * Creates a CameraGizmo\n   * @param gizmoLayer The utility layer the gizmo will be added to\n   */\n\n\n  function CameraGizmo(gizmoLayer) {\n    if (gizmoLayer === void 0) {\n      gizmoLayer = UtilityLayerRenderer.DefaultUtilityLayer;\n    }\n\n    var _this = _super.call(this, gizmoLayer) || this;\n\n    _this._pointerObserver = null;\n    /**\n     * Event that fires each time the gizmo is clicked\n     */\n\n    _this.onClickedObservable = new Observable();\n    _this._camera = null;\n    _this._invProjection = new Matrix();\n    _this._material = new StandardMaterial(\"cameraGizmoMaterial\", _this.gizmoLayer.utilityLayerScene);\n    _this._material.diffuseColor = new Color3(0.5, 0.5, 0.5);\n    _this._material.specularColor = new Color3(0.1, 0.1, 0.1);\n    _this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add(function (pointerInfo) {\n      if (!_this._camera) {\n        return;\n      }\n\n      _this._isHovered = !!(pointerInfo.pickInfo && _this._rootMesh.getChildMeshes().indexOf(pointerInfo.pickInfo.pickedMesh) != -1);\n\n      if (_this._isHovered && pointerInfo.event.button === 0) {\n        _this.onClickedObservable.notifyObservers(_this._camera);\n      }\n    }, PointerEventTypes.POINTERDOWN);\n    return _this;\n  }\n\n  Object.defineProperty(CameraGizmo.prototype, \"displayFrustum\", {\n    /** Gets or sets a boolean indicating if frustum lines must be rendered (true by default)) */\n    get: function get() {\n      return this._cameraLinesMesh.isEnabled();\n    },\n    set: function set(value) {\n      this._cameraLinesMesh.setEnabled(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(CameraGizmo.prototype, \"camera\", {\n    get: function get() {\n      return this._camera;\n    },\n\n    /**\n     * The camera that the gizmo is attached to\n     */\n    set: function set(camera) {\n      var _this = this;\n\n      this._camera = camera;\n      this.attachedNode = camera;\n\n      if (camera) {\n        // Create the mesh for the given camera\n        if (this._cameraMesh) {\n          this._cameraMesh.dispose();\n        }\n\n        if (this._cameraLinesMesh) {\n          this._cameraLinesMesh.dispose();\n        }\n\n        this._cameraMesh = CameraGizmo._CreateCameraMesh(this.gizmoLayer.utilityLayerScene);\n        this._cameraLinesMesh = CameraGizmo._CreateCameraFrustum(this.gizmoLayer.utilityLayerScene);\n\n        this._cameraMesh.getChildMeshes(false).forEach(function (m) {\n          m.material = _this._material;\n        });\n\n        this._cameraMesh.parent = this._rootMesh;\n        this._cameraLinesMesh.parent = this._rootMesh;\n\n        if (this.gizmoLayer.utilityLayerScene.activeCamera && this.gizmoLayer.utilityLayerScene.activeCamera.maxZ < camera.maxZ * 1.5) {\n          this.gizmoLayer.utilityLayerScene.activeCamera.maxZ = camera.maxZ * 1.5;\n        }\n\n        if (!this.attachedNode.reservedDataStore) {\n          this.attachedNode.reservedDataStore = {};\n        }\n\n        this.attachedNode.reservedDataStore.cameraGizmo = this; // Add lighting to the camera gizmo\n\n        var gizmoLight = this.gizmoLayer._getSharedGizmoLight();\n\n        gizmoLight.includedOnlyMeshes = gizmoLight.includedOnlyMeshes.concat(this._cameraMesh.getChildMeshes(false));\n\n        this._update();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(CameraGizmo.prototype, \"material\", {\n    /**\n     * Gets the material used to render the camera gizmo\n     */\n    get: function get() {\n      return this._material;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * @hidden\n   * Updates the gizmo to match the attached mesh's position/rotation\n   */\n\n  CameraGizmo.prototype._update = function () {\n    _super.prototype._update.call(this);\n\n    if (!this._camera) {\n      return;\n    } // frustum matrix\n\n\n    this._camera.getProjectionMatrix().invertToRef(this._invProjection);\n\n    this._cameraLinesMesh.setPivotMatrix(this._invProjection, false);\n\n    this._cameraLinesMesh.scaling.x = 1 / this._rootMesh.scaling.x;\n    this._cameraLinesMesh.scaling.y = 1 / this._rootMesh.scaling.y;\n    this._cameraLinesMesh.scaling.z = 1 / this._rootMesh.scaling.z; // take care of coordinate system in camera scene to properly display the mesh with the good Y axis orientation in this scene\n\n    this._cameraMesh.parent = null;\n    this._cameraMesh.rotation.y = Math.PI * 0.5 * (this._camera.getScene().useRightHandedSystem ? 1 : -1);\n    this._cameraMesh.parent = this._rootMesh;\n  };\n  /**\n   * Disposes of the camera gizmo\n   */\n\n\n  CameraGizmo.prototype.dispose = function () {\n    this.onClickedObservable.clear();\n    this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\n\n    if (this._cameraMesh) {\n      this._cameraMesh.dispose();\n    }\n\n    if (this._cameraLinesMesh) {\n      this._cameraLinesMesh.dispose();\n    }\n\n    this._material.dispose();\n\n    _super.prototype.dispose.call(this);\n  };\n\n  CameraGizmo._CreateCameraMesh = function (scene) {\n    var root = new Mesh(\"rootCameraGizmo\", scene);\n    var mesh = new Mesh(root.name, scene);\n    mesh.parent = root;\n    var box = CreateBox(root.name, {\n      width: 1.0,\n      height: 0.8,\n      depth: 0.5\n    }, scene);\n    box.parent = mesh;\n    var cyl1 = CreateCylinder(root.name, {\n      height: 0.5,\n      diameterTop: 0.8,\n      diameterBottom: 0.8\n    }, scene);\n    cyl1.parent = mesh;\n    cyl1.position.y = 0.3;\n    cyl1.position.x = -0.6;\n    cyl1.rotation.x = Math.PI * 0.5;\n    var cyl2 = CreateCylinder(root.name, {\n      height: 0.5,\n      diameterTop: 0.6,\n      diameterBottom: 0.6\n    }, scene);\n    cyl2.parent = mesh;\n    cyl2.position.y = 0.5;\n    cyl2.position.x = 0.4;\n    cyl2.rotation.x = Math.PI * 0.5;\n    var cyl3 = CreateCylinder(root.name, {\n      height: 0.5,\n      diameterTop: 0.5,\n      diameterBottom: 0.5\n    }, scene);\n    cyl3.parent = mesh;\n    cyl3.position.y = 0.0;\n    cyl3.position.x = 0.6;\n    cyl3.rotation.z = Math.PI * 0.5;\n    root.scaling.scaleInPlace(CameraGizmo._Scale);\n    mesh.position.x = -0.9;\n    return root;\n  };\n\n  CameraGizmo._CreateCameraFrustum = function (scene) {\n    var root = new Mesh(\"rootCameraGizmo\", scene);\n    var mesh = new Mesh(root.name, scene);\n    mesh.parent = root;\n\n    for (var y = 0; y < 4; y += 2) {\n      for (var x = 0; x < 4; x += 2) {\n        var line = CreateLines(\"lines\", {\n          points: [new Vector3(-1 + x, -1 + y, -1), new Vector3(-1 + x, -1 + y, 1)]\n        }, scene);\n        line.parent = mesh;\n        line.alwaysSelectAsActiveMesh = true;\n        line.isPickable = false;\n        line = CreateLines(\"lines\", {\n          points: [new Vector3(-1, -1 + x, -1 + y), new Vector3(1, -1 + x, -1 + y)]\n        }, scene);\n        line.parent = mesh;\n        line.alwaysSelectAsActiveMesh = true;\n        line.isPickable = false;\n        line = CreateLines(\"lines\", {\n          points: [new Vector3(-1 + x, -1, -1 + y), new Vector3(-1 + x, 1, -1 + y)]\n        }, scene);\n        line.parent = mesh;\n        line.alwaysSelectAsActiveMesh = true;\n        line.isPickable = false;\n      }\n    }\n\n    return root;\n  }; // Static helper methods\n\n\n  CameraGizmo._Scale = 0.05;\n  return CameraGizmo;\n}(Gizmo);\n\nexport { CameraGizmo };","map":{"version":3,"mappings":"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","names":["Vector3","Color3","Mesh","Gizmo","UtilityLayerRenderer","StandardMaterial","CreateBox","CreateCylinder","Matrix","CreateLines","PointerEventTypes","Observable","__extends","gizmoLayer","DefaultUtilityLayer","_super","_this","_material","utilityLayerScene","diffuseColor","specularColor","_pointerObserver","onPointerObservable","add","pointerInfo","_camera","_isHovered","pickInfo","_rootMesh","getChildMeshes","indexOf","pickedMesh","event","button","onClickedObservable","notifyObservers","POINTERDOWN","Object","CameraGizmo","_cameraLinesMesh","isEnabled","value","setEnabled","camera","attachedNode","_cameraMesh","dispose","_CreateCameraMesh","_CreateCameraFrustum","forEach","m","material","parent","activeCamera","maxZ","reservedDataStore","cameraGizmo","gizmoLight","_getSharedGizmoLight","includedOnlyMeshes","concat","_update","call","getProjectionMatrix","invertToRef","_invProjection","setPivotMatrix","scaling","x","y","z","rotation","Math","PI","getScene","useRightHandedSystem","clear","remove","scene","root","mesh","name","box","width","height","depth","cyl1","diameterTop","diameterBottom","position","cyl2","cyl3","scaleInPlace","_Scale","line","points","alwaysSelectAsActiveMesh","isPickable"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Gizmos/cameraGizmo.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport { Vector3 } from \"../Maths/math.vector\";\r\nimport { Color3 } from \"../Maths/math.color\";\r\nimport { Mesh } from \"../Meshes/mesh\";\r\nimport { Gizmo } from \"./gizmo\";\r\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\r\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Camera } from \"../Cameras/camera\";\r\nimport { CreateBox } from \"../Meshes/Builders/boxBuilder\";\r\nimport { CreateCylinder } from \"../Meshes/Builders/cylinderBuilder\";\r\nimport { Matrix } from \"../Maths/math\";\r\nimport { CreateLines } from \"../Meshes/Builders/linesBuilder\";\r\nimport type { PointerInfo } from \"../Events/pointerEvents\";\r\nimport { PointerEventTypes } from \"../Events/pointerEvents\";\r\nimport type { Observer } from \"../Misc/observable\";\r\nimport { Observable } from \"../Misc/observable\";\r\n\r\n/**\r\n * Gizmo that enables viewing a camera\r\n */\r\nexport class CameraGizmo extends Gizmo {\r\n    private _cameraMesh: Mesh;\r\n    private _cameraLinesMesh: Mesh;\r\n    private _material: StandardMaterial;\r\n    private _pointerObserver: Nullable<Observer<PointerInfo>> = null;\r\n\r\n    /**\r\n     * Event that fires each time the gizmo is clicked\r\n     */\r\n    public onClickedObservable = new Observable<Camera>();\r\n\r\n    /**\r\n     * Creates a CameraGizmo\r\n     * @param gizmoLayer The utility layer the gizmo will be added to\r\n     */\r\n    constructor(gizmoLayer: UtilityLayerRenderer = UtilityLayerRenderer.DefaultUtilityLayer) {\r\n        super(gizmoLayer);\r\n\r\n        this._material = new StandardMaterial(\"cameraGizmoMaterial\", this.gizmoLayer.utilityLayerScene);\r\n        this._material.diffuseColor = new Color3(0.5, 0.5, 0.5);\r\n        this._material.specularColor = new Color3(0.1, 0.1, 0.1);\r\n\r\n        this._pointerObserver = gizmoLayer.utilityLayerScene.onPointerObservable.add((pointerInfo) => {\r\n            if (!this._camera) {\r\n                return;\r\n            }\r\n\r\n            this._isHovered = !!(pointerInfo.pickInfo && this._rootMesh.getChildMeshes().indexOf(<Mesh>pointerInfo.pickInfo.pickedMesh) != -1);\r\n            if (this._isHovered && pointerInfo.event.button === 0) {\r\n                this.onClickedObservable.notifyObservers(this._camera);\r\n            }\r\n        }, PointerEventTypes.POINTERDOWN);\r\n    }\r\n    private _camera: Nullable<Camera> = null;\r\n\r\n    /** Gets or sets a boolean indicating if frustum lines must be rendered (true by default)) */\r\n    public get displayFrustum() {\r\n        return this._cameraLinesMesh.isEnabled();\r\n    }\r\n    public set displayFrustum(value) {\r\n        this._cameraLinesMesh.setEnabled(value);\r\n    }\r\n\r\n    /**\r\n     * The camera that the gizmo is attached to\r\n     */\r\n    public set camera(camera: Nullable<Camera>) {\r\n        this._camera = camera;\r\n        this.attachedNode = camera;\r\n        if (camera) {\r\n            // Create the mesh for the given camera\r\n            if (this._cameraMesh) {\r\n                this._cameraMesh.dispose();\r\n            }\r\n            if (this._cameraLinesMesh) {\r\n                this._cameraLinesMesh.dispose();\r\n            }\r\n            this._cameraMesh = CameraGizmo._CreateCameraMesh(this.gizmoLayer.utilityLayerScene);\r\n            this._cameraLinesMesh = CameraGizmo._CreateCameraFrustum(this.gizmoLayer.utilityLayerScene);\r\n\r\n            this._cameraMesh.getChildMeshes(false).forEach((m) => {\r\n                m.material = this._material;\r\n            });\r\n            this._cameraMesh.parent = this._rootMesh;\r\n\r\n            this._cameraLinesMesh.parent = this._rootMesh;\r\n\r\n            if (this.gizmoLayer.utilityLayerScene.activeCamera && this.gizmoLayer.utilityLayerScene.activeCamera.maxZ < camera.maxZ * 1.5) {\r\n                this.gizmoLayer.utilityLayerScene.activeCamera.maxZ = camera.maxZ * 1.5;\r\n            }\r\n\r\n            if (!this.attachedNode!.reservedDataStore) {\r\n                this.attachedNode!.reservedDataStore = {};\r\n            }\r\n            this.attachedNode!.reservedDataStore.cameraGizmo = this;\r\n\r\n            // Add lighting to the camera gizmo\r\n            const gizmoLight = this.gizmoLayer._getSharedGizmoLight();\r\n            gizmoLight.includedOnlyMeshes = gizmoLight.includedOnlyMeshes.concat(this._cameraMesh.getChildMeshes(false));\r\n\r\n            this._update();\r\n        }\r\n    }\r\n\r\n    public get camera() {\r\n        return this._camera;\r\n    }\r\n\r\n    /**\r\n     * Gets the material used to render the camera gizmo\r\n     */\r\n    public get material() {\r\n        return this._material;\r\n    }\r\n    /**\r\n     * @hidden\r\n     * Updates the gizmo to match the attached mesh's position/rotation\r\n     */\r\n\r\n    protected _update() {\r\n        super._update();\r\n        if (!this._camera) {\r\n            return;\r\n        }\r\n\r\n        // frustum matrix\r\n        this._camera.getProjectionMatrix().invertToRef(this._invProjection);\r\n        this._cameraLinesMesh.setPivotMatrix(this._invProjection, false);\r\n\r\n        this._cameraLinesMesh.scaling.x = 1 / this._rootMesh.scaling.x;\r\n        this._cameraLinesMesh.scaling.y = 1 / this._rootMesh.scaling.y;\r\n        this._cameraLinesMesh.scaling.z = 1 / this._rootMesh.scaling.z;\r\n\r\n        // take care of coordinate system in camera scene to properly display the mesh with the good Y axis orientation in this scene\r\n        this._cameraMesh.parent = null;\r\n        this._cameraMesh.rotation.y = Math.PI * 0.5 * (this._camera.getScene().useRightHandedSystem ? 1 : -1);\r\n        this._cameraMesh.parent = this._rootMesh;\r\n    }\r\n\r\n    // Static helper methods\r\n    private static _Scale = 0.05;\r\n    private _invProjection = new Matrix();\r\n\r\n    /**\r\n     * Disposes of the camera gizmo\r\n     */\r\n    public dispose() {\r\n        this.onClickedObservable.clear();\r\n        this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(this._pointerObserver);\r\n        if (this._cameraMesh) {\r\n            this._cameraMesh.dispose();\r\n        }\r\n        if (this._cameraLinesMesh) {\r\n            this._cameraLinesMesh.dispose();\r\n        }\r\n        this._material.dispose();\r\n        super.dispose();\r\n    }\r\n\r\n    private static _CreateCameraMesh(scene: Scene) {\r\n        const root = new Mesh(\"rootCameraGizmo\", scene);\r\n\r\n        const mesh = new Mesh(root.name, scene);\r\n        mesh.parent = root;\r\n\r\n        const box = CreateBox(root.name, { width: 1.0, height: 0.8, depth: 0.5 }, scene);\r\n        box.parent = mesh;\r\n\r\n        const cyl1 = CreateCylinder(root.name, { height: 0.5, diameterTop: 0.8, diameterBottom: 0.8 }, scene);\r\n        cyl1.parent = mesh;\r\n        cyl1.position.y = 0.3;\r\n        cyl1.position.x = -0.6;\r\n        cyl1.rotation.x = Math.PI * 0.5;\r\n\r\n        const cyl2 = CreateCylinder(root.name, { height: 0.5, diameterTop: 0.6, diameterBottom: 0.6 }, scene);\r\n        cyl2.parent = mesh;\r\n        cyl2.position.y = 0.5;\r\n        cyl2.position.x = 0.4;\r\n        cyl2.rotation.x = Math.PI * 0.5;\r\n\r\n        const cyl3 = CreateCylinder(root.name, { height: 0.5, diameterTop: 0.5, diameterBottom: 0.5 }, scene);\r\n        cyl3.parent = mesh;\r\n        cyl3.position.y = 0.0;\r\n        cyl3.position.x = 0.6;\r\n        cyl3.rotation.z = Math.PI * 0.5;\r\n\r\n        root.scaling.scaleInPlace(CameraGizmo._Scale);\r\n        mesh.position.x = -0.9;\r\n\r\n        return root;\r\n    }\r\n\r\n    private static _CreateCameraFrustum(scene: Scene) {\r\n        const root = new Mesh(\"rootCameraGizmo\", scene);\r\n        const mesh = new Mesh(root.name, scene);\r\n        mesh.parent = root;\r\n\r\n        for (let y = 0; y < 4; y += 2) {\r\n            for (let x = 0; x < 4; x += 2) {\r\n                let line = CreateLines(\"lines\", { points: [new Vector3(-1 + x, -1 + y, -1), new Vector3(-1 + x, -1 + y, 1)] }, scene);\r\n                line.parent = mesh;\r\n                line.alwaysSelectAsActiveMesh = true;\r\n                line.isPickable = false;\r\n                line = CreateLines(\"lines\", { points: [new Vector3(-1, -1 + x, -1 + y), new Vector3(1, -1 + x, -1 + y)] }, scene);\r\n                line.parent = mesh;\r\n                line.alwaysSelectAsActiveMesh = true;\r\n                line.isPickable = false;\r\n                line = CreateLines(\"lines\", { points: [new Vector3(-1 + x, -1, -1 + y), new Vector3(-1 + x, 1, -1 + y)] }, scene);\r\n                line.parent = mesh;\r\n                line.alwaysSelectAsActiveMesh = true;\r\n                line.isPickable = false;\r\n            }\r\n        }\r\n\r\n        return root;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}