{"ast":null,"code":"import { ArrayTools } from \"../Misc/arrayTools.js\";\nimport { Matrix, Vector3 } from \"../Maths/math.vector.js\";\n/**\n * Class used to store bounding sphere information\n */\n\nvar BoundingSphere =\n/** @class */\nfunction () {\n  /**\n   * Creates a new bounding sphere\n   * @param min defines the minimum vector (in local space)\n   * @param max defines the maximum vector (in local space)\n   * @param worldMatrix defines the new world matrix\n   */\n  function BoundingSphere(min, max, worldMatrix) {\n    /**\n     * Gets the center of the bounding sphere in local space\n     */\n    this.center = Vector3.Zero();\n    /**\n     * Gets the center of the bounding sphere in world space\n     */\n\n    this.centerWorld = Vector3.Zero();\n    /**\n     * Gets the minimum vector in local space\n     */\n\n    this.minimum = Vector3.Zero();\n    /**\n     * Gets the maximum vector in local space\n     */\n\n    this.maximum = Vector3.Zero();\n    this.reConstruct(min, max, worldMatrix);\n  }\n  /**\n   * Recreates the entire bounding sphere from scratch as if we call the constructor in place\n   * @param min defines the new minimum vector (in local space)\n   * @param max defines the new maximum vector (in local space)\n   * @param worldMatrix defines the new world matrix\n   */\n\n\n  BoundingSphere.prototype.reConstruct = function (min, max, worldMatrix) {\n    this.minimum.copyFrom(min);\n    this.maximum.copyFrom(max);\n    var distance = Vector3.Distance(min, max);\n    max.addToRef(min, this.center).scaleInPlace(0.5);\n    this.radius = distance * 0.5;\n\n    this._update(worldMatrix || Matrix.IdentityReadOnly);\n  };\n  /**\n   * Scale the current bounding sphere by applying a scale factor\n   * @param factor defines the scale factor to apply\n   * @returns the current bounding box\n   */\n\n\n  BoundingSphere.prototype.scale = function (factor) {\n    var newRadius = this.radius * factor;\n    var tmpVectors = BoundingSphere._TmpVector3;\n    var tempRadiusVector = tmpVectors[0].setAll(newRadius);\n    var min = this.center.subtractToRef(tempRadiusVector, tmpVectors[1]);\n    var max = this.center.addToRef(tempRadiusVector, tmpVectors[2]);\n    this.reConstruct(min, max, this._worldMatrix);\n    return this;\n  };\n  /**\n   * Gets the world matrix of the bounding box\n   * @returns a matrix\n   */\n\n\n  BoundingSphere.prototype.getWorldMatrix = function () {\n    return this._worldMatrix;\n  }; // Methods\n\n  /**\n   * @param worldMatrix\n   * @hidden\n   */\n\n\n  BoundingSphere.prototype._update = function (worldMatrix) {\n    if (!worldMatrix.isIdentity()) {\n      Vector3.TransformCoordinatesToRef(this.center, worldMatrix, this.centerWorld);\n      var tempVector = BoundingSphere._TmpVector3[0];\n      Vector3.TransformNormalFromFloatsToRef(1.0, 1.0, 1.0, worldMatrix, tempVector);\n      this.radiusWorld = Math.max(Math.abs(tempVector.x), Math.abs(tempVector.y), Math.abs(tempVector.z)) * this.radius;\n    } else {\n      this.centerWorld.copyFrom(this.center);\n      this.radiusWorld = this.radius;\n    }\n  };\n  /**\n   * Tests if the bounding sphere is intersecting the frustum planes\n   * @param frustumPlanes defines the frustum planes to test\n   * @returns true if there is an intersection\n   */\n\n\n  BoundingSphere.prototype.isInFrustum = function (frustumPlanes) {\n    var center = this.centerWorld;\n    var radius = this.radiusWorld;\n\n    for (var i = 0; i < 6; i++) {\n      if (frustumPlanes[i].dotCoordinate(center) <= -radius) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Tests if the bounding sphere center is in between the frustum planes.\n   * Used for optimistic fast inclusion.\n   * @param frustumPlanes defines the frustum planes to test\n   * @returns true if the sphere center is in between the frustum planes\n   */\n\n\n  BoundingSphere.prototype.isCenterInFrustum = function (frustumPlanes) {\n    var center = this.centerWorld;\n\n    for (var i = 0; i < 6; i++) {\n      if (frustumPlanes[i].dotCoordinate(center) < 0) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Tests if a point is inside the bounding sphere\n   * @param point defines the point to test\n   * @returns true if the point is inside the bounding sphere\n   */\n\n\n  BoundingSphere.prototype.intersectsPoint = function (point) {\n    var squareDistance = Vector3.DistanceSquared(this.centerWorld, point);\n\n    if (this.radiusWorld * this.radiusWorld < squareDistance) {\n      return false;\n    }\n\n    return true;\n  }; // Statics\n\n  /**\n   * Checks if two sphere intersect\n   * @param sphere0 sphere 0\n   * @param sphere1 sphere 1\n   * @returns true if the spheres intersect\n   */\n\n\n  BoundingSphere.Intersects = function (sphere0, sphere1) {\n    var squareDistance = Vector3.DistanceSquared(sphere0.centerWorld, sphere1.centerWorld);\n    var radiusSum = sphere0.radiusWorld + sphere1.radiusWorld;\n\n    if (radiusSum * radiusSum < squareDistance) {\n      return false;\n    }\n\n    return true;\n  };\n  /**\n   * Creates a sphere from a center and a radius\n   * @param center The center\n   * @param radius radius\n   * @param matrix Optional worldMatrix\n   * @returns The sphere\n   */\n\n\n  BoundingSphere.CreateFromCenterAndRadius = function (center, radius, matrix) {\n    this._TmpVector3[0].copyFrom(center);\n\n    this._TmpVector3[1].copyFromFloats(0, 0, radius);\n\n    this._TmpVector3[2].copyFrom(center);\n\n    this._TmpVector3[0].addInPlace(this._TmpVector3[1]);\n\n    this._TmpVector3[2].subtractInPlace(this._TmpVector3[1]);\n\n    var sphere = new BoundingSphere(this._TmpVector3[0], this._TmpVector3[2]);\n\n    if (matrix) {\n      sphere._worldMatrix = matrix;\n    } else {\n      sphere._worldMatrix = Matrix.Identity();\n    }\n\n    return sphere;\n  };\n\n  BoundingSphere._TmpVector3 = ArrayTools.BuildArray(3, Vector3.Zero);\n  return BoundingSphere;\n}();\n\nexport { BoundingSphere };","map":{"version":3,"mappings":"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","names":["ArrayTools","Matrix","Vector3","min","max","worldMatrix","Zero","reConstruct","BoundingSphere","minimum","copyFrom","maximum","distance","Distance","addToRef","center","scaleInPlace","radius","_update","IdentityReadOnly","factor","newRadius","tmpVectors","_TmpVector3","tempRadiusVector","setAll","subtractToRef","_worldMatrix","isIdentity","TransformCoordinatesToRef","centerWorld","tempVector","TransformNormalFromFloatsToRef","radiusWorld","Math","abs","x","y","z","frustumPlanes","i","dotCoordinate","point","squareDistance","DistanceSquared","sphere0","sphere1","radiusSum","matrix","copyFromFloats","addInPlace","subtractInPlace","sphere","Identity","BuildArray"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Culling/boundingSphere.ts"],"sourcesContent":["import type { DeepImmutable } from \"../types\";\r\nimport { ArrayTools } from \"../Misc/arrayTools\";\r\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\r\nimport type { Plane } from \"../Maths/math.plane\";\r\n\r\n/**\r\n * Class used to store bounding sphere information\r\n */\r\nexport class BoundingSphere {\r\n    /**\r\n     * Gets the center of the bounding sphere in local space\r\n     */\r\n    public readonly center = Vector3.Zero();\r\n    /**\r\n     * Radius of the bounding sphere in local space\r\n     */\r\n    public radius: number;\r\n    /**\r\n     * Gets the center of the bounding sphere in world space\r\n     */\r\n    public readonly centerWorld = Vector3.Zero();\r\n    /**\r\n     * Radius of the bounding sphere in world space\r\n     */\r\n    public radiusWorld: number;\r\n    /**\r\n     * Gets the minimum vector in local space\r\n     */\r\n    public readonly minimum = Vector3.Zero();\r\n    /**\r\n     * Gets the maximum vector in local space\r\n     */\r\n    public readonly maximum = Vector3.Zero();\r\n\r\n    private _worldMatrix: DeepImmutable<Matrix>;\r\n    private static readonly _TmpVector3 = ArrayTools.BuildArray(3, Vector3.Zero);\r\n\r\n    /**\r\n     * Creates a new bounding sphere\r\n     * @param min defines the minimum vector (in local space)\r\n     * @param max defines the maximum vector (in local space)\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    constructor(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this.reConstruct(min, max, worldMatrix);\r\n    }\r\n\r\n    /**\r\n     * Recreates the entire bounding sphere from scratch as if we call the constructor in place\r\n     * @param min defines the new minimum vector (in local space)\r\n     * @param max defines the new maximum vector (in local space)\r\n     * @param worldMatrix defines the new world matrix\r\n     */\r\n    public reConstruct(min: DeepImmutable<Vector3>, max: DeepImmutable<Vector3>, worldMatrix?: DeepImmutable<Matrix>) {\r\n        this.minimum.copyFrom(min);\r\n        this.maximum.copyFrom(max);\r\n\r\n        const distance = Vector3.Distance(min, max);\r\n\r\n        max.addToRef(min, this.center).scaleInPlace(0.5);\r\n        this.radius = distance * 0.5;\r\n\r\n        this._update(worldMatrix || Matrix.IdentityReadOnly);\r\n    }\r\n\r\n    /**\r\n     * Scale the current bounding sphere by applying a scale factor\r\n     * @param factor defines the scale factor to apply\r\n     * @returns the current bounding box\r\n     */\r\n    public scale(factor: number): BoundingSphere {\r\n        const newRadius = this.radius * factor;\r\n        const tmpVectors = BoundingSphere._TmpVector3;\r\n        const tempRadiusVector = tmpVectors[0].setAll(newRadius);\r\n        const min = this.center.subtractToRef(tempRadiusVector, tmpVectors[1]);\r\n        const max = this.center.addToRef(tempRadiusVector, tmpVectors[2]);\r\n\r\n        this.reConstruct(min, max, this._worldMatrix);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the world matrix of the bounding box\r\n     * @returns a matrix\r\n     */\r\n    public getWorldMatrix(): DeepImmutable<Matrix> {\r\n        return this._worldMatrix;\r\n    }\r\n\r\n    // Methods\r\n    /**\r\n     * @param worldMatrix\r\n     * @hidden\r\n     */\r\n    public _update(worldMatrix: DeepImmutable<Matrix>): void {\r\n        if (!worldMatrix.isIdentity()) {\r\n            Vector3.TransformCoordinatesToRef(this.center, worldMatrix, this.centerWorld);\r\n            const tempVector = BoundingSphere._TmpVector3[0];\r\n            Vector3.TransformNormalFromFloatsToRef(1.0, 1.0, 1.0, worldMatrix, tempVector);\r\n            this.radiusWorld = Math.max(Math.abs(tempVector.x), Math.abs(tempVector.y), Math.abs(tempVector.z)) * this.radius;\r\n        } else {\r\n            this.centerWorld.copyFrom(this.center);\r\n            this.radiusWorld = this.radius;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding sphere is intersecting the frustum planes\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if there is an intersection\r\n     */\r\n    public isInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        const center = this.centerWorld;\r\n        const radius = this.radiusWorld;\r\n        for (let i = 0; i < 6; i++) {\r\n            if (frustumPlanes[i].dotCoordinate(center) <= -radius) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tests if the bounding sphere center is in between the frustum planes.\r\n     * Used for optimistic fast inclusion.\r\n     * @param frustumPlanes defines the frustum planes to test\r\n     * @returns true if the sphere center is in between the frustum planes\r\n     */\r\n    public isCenterInFrustum(frustumPlanes: Array<DeepImmutable<Plane>>): boolean {\r\n        const center = this.centerWorld;\r\n        for (let i = 0; i < 6; i++) {\r\n            if (frustumPlanes[i].dotCoordinate(center) < 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tests if a point is inside the bounding sphere\r\n     * @param point defines the point to test\r\n     * @returns true if the point is inside the bounding sphere\r\n     */\r\n    public intersectsPoint(point: DeepImmutable<Vector3>): boolean {\r\n        const squareDistance = Vector3.DistanceSquared(this.centerWorld, point);\r\n        if (this.radiusWorld * this.radiusWorld < squareDistance) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // Statics\r\n    /**\r\n     * Checks if two sphere intersect\r\n     * @param sphere0 sphere 0\r\n     * @param sphere1 sphere 1\r\n     * @returns true if the spheres intersect\r\n     */\r\n    public static Intersects(sphere0: DeepImmutable<BoundingSphere>, sphere1: DeepImmutable<BoundingSphere>): boolean {\r\n        const squareDistance = Vector3.DistanceSquared(sphere0.centerWorld, sphere1.centerWorld);\r\n        const radiusSum = sphere0.radiusWorld + sphere1.radiusWorld;\r\n\r\n        if (radiusSum * radiusSum < squareDistance) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates a sphere from a center and a radius\r\n     * @param center The center\r\n     * @param radius radius\r\n     * @param matrix Optional worldMatrix\r\n     * @returns The sphere\r\n     */\r\n    public static CreateFromCenterAndRadius(center: DeepImmutable<Vector3>, radius: number, matrix?: DeepImmutable<Matrix>): BoundingSphere {\r\n        this._TmpVector3[0].copyFrom(center);\r\n        this._TmpVector3[1].copyFromFloats(0, 0, radius);\r\n        this._TmpVector3[2].copyFrom(center);\r\n        this._TmpVector3[0].addInPlace(this._TmpVector3[1]);\r\n        this._TmpVector3[2].subtractInPlace(this._TmpVector3[1]);\r\n\r\n        const sphere = new BoundingSphere(this._TmpVector3[0], this._TmpVector3[2]);\r\n\r\n        if (matrix) {\r\n            sphere._worldMatrix = matrix;\r\n        } else {\r\n            sphere._worldMatrix = Matrix.Identity();\r\n        }\r\n\r\n        return sphere;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}