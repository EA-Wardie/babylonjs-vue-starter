{"ast":null,"code":"import \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { UniformBuffer } from \"../../Materials/uniformBuffer.js\";\nimport { WebGPUShaderProcessor } from \"./webgpuShaderProcessor.js\";\n/** @hidden */\n\nvar WebGPUPipelineContext =\n/** @class */\nfunction () {\n  function WebGPUPipelineContext(shaderProcessingContext, engine) {\n    this._name = \"unnamed\";\n    this.shaderProcessingContext = shaderProcessingContext;\n    this._leftOverUniformsByName = {};\n    this.engine = engine;\n  }\n\n  Object.defineProperty(WebGPUPipelineContext.prototype, \"isAsync\", {\n    get: function get() {\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebGPUPipelineContext.prototype, \"isReady\", {\n    get: function get() {\n      if (this.stages) {\n        return true;\n      }\n\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  WebGPUPipelineContext.prototype._handlesSpectorRebuildCallback = function () {// Nothing to do yet for spector.\n  };\n\n  WebGPUPipelineContext.prototype._fillEffectInformation = function (effect, uniformBuffersNames, uniformsNames, uniforms, samplerList, samplers, attributesNames, attributes) {\n    var engine = this.engine; // Prevent Memory Leak by reducing the number of string, refer to the string instead of copy.\n\n    effect._fragmentSourceCode = \"\";\n    effect._vertexSourceCode = \"\"; // this._fragmentSourceCodeOverride = \"\";\n    // this._vertexSourceCodeOverride = \"\";\n\n    var foundSamplers = this.shaderProcessingContext.availableTextures;\n    var index;\n\n    for (index = 0; index < samplerList.length; index++) {\n      var name_1 = samplerList[index];\n      var sampler = foundSamplers[samplerList[index]];\n\n      if (sampler == null || sampler == undefined) {\n        samplerList.splice(index, 1);\n        index--;\n      } else {\n        samplers[name_1] = index;\n      }\n    }\n\n    for (var _i = 0, _a = engine.getAttributes(this, attributesNames); _i < _a.length; _i++) {\n      var attr = _a[_i];\n      attributes.push(attr);\n    } // Build the uniform layout for the left over uniforms.\n\n\n    this.buildUniformLayout();\n    var attributeNamesFromEffect = [];\n    var attributeLocationsFromEffect = [];\n\n    for (index = 0; index < attributesNames.length; index++) {\n      var location_1 = attributes[index];\n\n      if (location_1 >= 0) {\n        attributeNamesFromEffect.push(attributesNames[index]);\n        attributeLocationsFromEffect.push(location_1);\n      }\n    }\n\n    this.shaderProcessingContext.attributeNamesFromEffect = attributeNamesFromEffect;\n    this.shaderProcessingContext.attributeLocationsFromEffect = attributeLocationsFromEffect;\n  };\n  /** @hidden */\n\n  /**\n   * Build the uniform buffer used in the material.\n   */\n\n\n  WebGPUPipelineContext.prototype.buildUniformLayout = function () {\n    if (!this.shaderProcessingContext.leftOverUniforms.length) {\n      return;\n    }\n\n    this.uniformBuffer = new UniformBuffer(this.engine, undefined, undefined, \"leftOver-\" + this._name);\n\n    for (var _i = 0, _a = this.shaderProcessingContext.leftOverUniforms; _i < _a.length; _i++) {\n      var leftOverUniform = _a[_i];\n      var type = leftOverUniform.type.replace(/^(.*?)(<.*>)?$/, \"$1\");\n      var size = WebGPUShaderProcessor.UniformSizes[type];\n      this.uniformBuffer.addUniform(leftOverUniform.name, size, leftOverUniform.length);\n      this._leftOverUniformsByName[leftOverUniform.name] = leftOverUniform.type;\n    }\n\n    this.uniformBuffer.create();\n  };\n  /**\n   * Release all associated resources.\n   **/\n\n\n  WebGPUPipelineContext.prototype.dispose = function () {\n    if (this.uniformBuffer) {\n      this.uniformBuffer.dispose();\n    }\n  };\n  /**\n   * Sets an integer value on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param value Value to be set.\n   */\n\n\n  WebGPUPipelineContext.prototype.setInt = function (uniformName, value) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n\n    this.uniformBuffer.updateInt(uniformName, value);\n  };\n  /**\n   * Sets an int2 value on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First int in int2.\n   * @param y Second int in int2.\n   */\n\n\n  WebGPUPipelineContext.prototype.setInt2 = function (uniformName, x, y) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n\n    this.uniformBuffer.updateInt2(uniformName, x, y);\n  };\n  /**\n   * Sets an int3 value on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First int in int3.\n   * @param y Second int in int3.\n   * @param z Third int in int3.\n   */\n\n\n  WebGPUPipelineContext.prototype.setInt3 = function (uniformName, x, y, z) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n\n    this.uniformBuffer.updateInt3(uniformName, x, y, z);\n  };\n  /**\n   * Sets an int4 value on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First int in int4.\n   * @param y Second int in int4.\n   * @param z Third int in int4.\n   * @param w Fourth int in int4.\n   */\n\n\n  WebGPUPipelineContext.prototype.setInt4 = function (uniformName, x, y, z, w) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n\n    this.uniformBuffer.updateInt4(uniformName, x, y, z, w);\n  };\n  /**\n   * Sets an int array on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n\n\n  WebGPUPipelineContext.prototype.setIntArray = function (uniformName, array) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n\n    this.uniformBuffer.updateIntArray(uniformName, array);\n  };\n  /**\n   * Sets an int array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n\n\n  WebGPUPipelineContext.prototype.setIntArray2 = function (uniformName, array) {\n    this.setIntArray(uniformName, array);\n  };\n  /**\n   * Sets an int array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n\n\n  WebGPUPipelineContext.prototype.setIntArray3 = function (uniformName, array) {\n    this.setIntArray(uniformName, array);\n  };\n  /**\n   * Sets an int array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n\n\n  WebGPUPipelineContext.prototype.setIntArray4 = function (uniformName, array) {\n    this.setIntArray(uniformName, array);\n  };\n  /**\n   * Sets an array on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n\n\n  WebGPUPipelineContext.prototype.setArray = function (uniformName, array) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n\n    this.uniformBuffer.updateArray(uniformName, array);\n  };\n  /**\n   * Sets an array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n\n\n  WebGPUPipelineContext.prototype.setArray2 = function (uniformName, array) {\n    this.setArray(uniformName, array);\n  };\n  /**\n   * Sets an array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   * @returns this effect.\n   */\n\n\n  WebGPUPipelineContext.prototype.setArray3 = function (uniformName, array) {\n    this.setArray(uniformName, array);\n  };\n  /**\n   * Sets an array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\n   * @param uniformName Name of the variable.\n   * @param array array to be set.\n   */\n\n\n  WebGPUPipelineContext.prototype.setArray4 = function (uniformName, array) {\n    this.setArray(uniformName, array);\n  };\n  /**\n   * Sets matrices on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param matrices matrices to be set.\n   */\n\n\n  WebGPUPipelineContext.prototype.setMatrices = function (uniformName, matrices) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n\n    this.uniformBuffer.updateMatrices(uniformName, matrices);\n  };\n  /**\n   * Sets matrix on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param matrix matrix to be set.\n   */\n\n\n  WebGPUPipelineContext.prototype.setMatrix = function (uniformName, matrix) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n\n    this.uniformBuffer.updateMatrix(uniformName, matrix);\n  };\n  /**\n   * Sets a 3x3 matrix on a uniform variable. (Specified as [1,2,3,4,5,6,7,8,9] will result in [1,2,3][4,5,6][7,8,9] matrix)\n   * @param uniformName Name of the variable.\n   * @param matrix matrix to be set.\n   */\n\n\n  WebGPUPipelineContext.prototype.setMatrix3x3 = function (uniformName, matrix) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n\n    this.uniformBuffer.updateMatrix3x3(uniformName, matrix);\n  };\n  /**\n   * Sets a 2x2 matrix on a uniform variable. (Specified as [1,2,3,4] will result in [1,2][3,4] matrix)\n   * @param uniformName Name of the variable.\n   * @param matrix matrix to be set.\n   */\n\n\n  WebGPUPipelineContext.prototype.setMatrix2x2 = function (uniformName, matrix) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n\n    this.uniformBuffer.updateMatrix2x2(uniformName, matrix);\n  };\n  /**\n   * Sets a float on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param value value to be set.\n   * @returns this effect.\n   */\n\n\n  WebGPUPipelineContext.prototype.setFloat = function (uniformName, value) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n\n    this.uniformBuffer.updateFloat(uniformName, value);\n  };\n  /**\n   * Sets a Vector2 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param vector2 vector2 to be set.\n   */\n\n\n  WebGPUPipelineContext.prototype.setVector2 = function (uniformName, vector2) {\n    this.setFloat2(uniformName, vector2.x, vector2.y);\n  };\n  /**\n   * Sets a float2 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First float in float2.\n   * @param y Second float in float2.\n   */\n\n\n  WebGPUPipelineContext.prototype.setFloat2 = function (uniformName, x, y) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n\n    this.uniformBuffer.updateFloat2(uniformName, x, y);\n  };\n  /**\n   * Sets a Vector3 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param vector3 Value to be set.\n   */\n\n\n  WebGPUPipelineContext.prototype.setVector3 = function (uniformName, vector3) {\n    this.setFloat3(uniformName, vector3.x, vector3.y, vector3.z);\n  };\n  /**\n   * Sets a float3 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First float in float3.\n   * @param y Second float in float3.\n   * @param z Third float in float3.\n   */\n\n\n  WebGPUPipelineContext.prototype.setFloat3 = function (uniformName, x, y, z) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n\n    this.uniformBuffer.updateFloat3(uniformName, x, y, z);\n  };\n  /**\n   * Sets a Vector4 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param vector4 Value to be set.\n   */\n\n\n  WebGPUPipelineContext.prototype.setVector4 = function (uniformName, vector4) {\n    this.setFloat4(uniformName, vector4.x, vector4.y, vector4.z, vector4.w);\n  };\n  /**\n   * Sets a float4 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param x First float in float4.\n   * @param y Second float in float4.\n   * @param z Third float in float4.\n   * @param w Fourth float in float4.\n   * @returns this effect.\n   */\n\n\n  WebGPUPipelineContext.prototype.setFloat4 = function (uniformName, x, y, z, w) {\n    if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\n      return;\n    }\n\n    this.uniformBuffer.updateFloat4(uniformName, x, y, z, w);\n  };\n  /**\n   * Sets a Color3 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param color3 Value to be set.\n   */\n\n\n  WebGPUPipelineContext.prototype.setColor3 = function (uniformName, color3) {\n    this.setFloat3(uniformName, color3.r, color3.g, color3.b);\n  };\n  /**\n   * Sets a Color4 on a uniform variable.\n   * @param uniformName Name of the variable.\n   * @param color3 Value to be set.\n   * @param alpha Alpha value to be set.\n   */\n\n\n  WebGPUPipelineContext.prototype.setColor4 = function (uniformName, color3, alpha) {\n    this.setFloat4(uniformName, color3.r, color3.g, color3.b, alpha);\n  };\n  /**\n   * Sets a Color4 on a uniform variable\n   * @param uniformName defines the name of the variable\n   * @param color4 defines the value to be set\n   */\n\n\n  WebGPUPipelineContext.prototype.setDirectColor4 = function (uniformName, color4) {\n    this.setFloat4(uniformName, color4.r, color4.g, color4.b, color4.a);\n  };\n\n  WebGPUPipelineContext.prototype._getVertexShaderCode = function () {\n    var _a;\n\n    return (_a = this.sources) === null || _a === void 0 ? void 0 : _a.vertex;\n  };\n\n  WebGPUPipelineContext.prototype._getFragmentShaderCode = function () {\n    var _a;\n\n    return (_a = this.sources) === null || _a === void 0 ? void 0 : _a.fragment;\n  };\n\n  return WebGPUPipelineContext;\n}();\n\nexport { WebGPUPipelineContext };","map":{"version":3,"mappings":"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","names":["UniformBuffer","WebGPUShaderProcessor","shaderProcessingContext","engine","_name","_leftOverUniformsByName","Object","WebGPUPipelineContext","stages","effect","uniformBuffersNames","uniformsNames","uniforms","samplerList","samplers","attributesNames","attributes","_fragmentSourceCode","_vertexSourceCode","foundSamplers","availableTextures","index","length","name_1","sampler","undefined","splice","getAttributes","_i","attr","push","buildUniformLayout","attributeNamesFromEffect","attributeLocationsFromEffect","location_1","leftOverUniforms","uniformBuffer","leftOverUniform","type","replace","size","UniformSizes","addUniform","name","create","dispose","uniformName","value","updateInt","x","y","updateInt2","z","updateInt3","w","updateInt4","array","updateIntArray","setIntArray","updateArray","setArray","matrices","updateMatrices","matrix","updateMatrix","updateMatrix3x3","updateMatrix2x2","updateFloat","vector2","setFloat2","updateFloat2","vector3","setFloat3","updateFloat3","vector4","setFloat4","updateFloat4","color3","r","g","b","alpha","color4","a","sources","_a","vertex","fragment"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Engines/WebGPU/webgpuPipelineContext.ts"],"sourcesContent":["import type { IPipelineContext } from \"../IPipelineContext\";\r\nimport type { Nullable } from \"../../types\";\r\nimport type { WebGPUEngine } from \"../webgpuEngine\";\r\nimport type { Effect } from \"../../Materials/effect\";\r\nimport type { WebGPUShaderProcessingContext } from \"./webgpuShaderProcessingContext\";\r\nimport { UniformBuffer } from \"../../Materials/uniformBuffer\";\r\nimport type { IMatrixLike, IVector2Like, IVector3Like, IVector4Like, IColor3Like, IColor4Like } from \"../../Maths/math.like\";\r\nimport { WebGPUShaderProcessor } from \"./webgpuShaderProcessor\";\r\n\r\n/** @hidden */\r\nexport interface IWebGPURenderPipelineStageDescriptor {\r\n    vertexStage: GPUProgrammableStage;\r\n    fragmentStage?: GPUProgrammableStage;\r\n}\r\n\r\n/** @hidden */\r\nexport class WebGPUPipelineContext implements IPipelineContext {\r\n    public engine: WebGPUEngine;\r\n\r\n    public shaderProcessingContext: WebGPUShaderProcessingContext;\r\n\r\n    protected _leftOverUniformsByName: { [name: string]: string };\r\n\r\n    public sources: {\r\n        vertex: string;\r\n        fragment: string;\r\n        rawVertex: string;\r\n        rawFragment: string;\r\n    };\r\n\r\n    public stages: Nullable<IWebGPURenderPipelineStageDescriptor>;\r\n\r\n    public bindGroupLayouts: GPUBindGroupLayout[];\r\n\r\n    /**\r\n     * Stores the left-over uniform buffer\r\n     */\r\n    public uniformBuffer: Nullable<UniformBuffer>;\r\n\r\n    // Default implementation.\r\n    public onCompiled?: () => void;\r\n\r\n    public get isAsync() {\r\n        return false;\r\n    }\r\n\r\n    public get isReady(): boolean {\r\n        if (this.stages) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** @hidden */\r\n    public _name: string;\r\n\r\n    constructor(shaderProcessingContext: WebGPUShaderProcessingContext, engine: WebGPUEngine) {\r\n        this._name = \"unnamed\";\r\n        this.shaderProcessingContext = shaderProcessingContext;\r\n        this._leftOverUniformsByName = {};\r\n        this.engine = engine;\r\n    }\r\n\r\n    public _handlesSpectorRebuildCallback(): void {\r\n        // Nothing to do yet for spector.\r\n    }\r\n\r\n    public _fillEffectInformation(\r\n        effect: Effect,\r\n        uniformBuffersNames: { [key: string]: number },\r\n        uniformsNames: string[],\r\n        uniforms: { [key: string]: Nullable<WebGLUniformLocation> },\r\n        samplerList: string[],\r\n        samplers: { [key: string]: number },\r\n        attributesNames: string[],\r\n        attributes: number[]\r\n    ) {\r\n        const engine = this.engine;\r\n\r\n        // Prevent Memory Leak by reducing the number of string, refer to the string instead of copy.\r\n        effect._fragmentSourceCode = \"\";\r\n        effect._vertexSourceCode = \"\";\r\n        // this._fragmentSourceCodeOverride = \"\";\r\n        // this._vertexSourceCodeOverride = \"\";\r\n\r\n        const foundSamplers = this.shaderProcessingContext.availableTextures;\r\n        let index: number;\r\n        for (index = 0; index < samplerList.length; index++) {\r\n            const name = samplerList[index];\r\n            const sampler = foundSamplers[samplerList[index]];\r\n\r\n            if (sampler == null || sampler == undefined) {\r\n                samplerList.splice(index, 1);\r\n                index--;\r\n            } else {\r\n                samplers[name] = index;\r\n            }\r\n        }\r\n\r\n        for (const attr of engine.getAttributes(this, attributesNames)) {\r\n            attributes.push(attr);\r\n        }\r\n\r\n        // Build the uniform layout for the left over uniforms.\r\n        this.buildUniformLayout();\r\n\r\n        const attributeNamesFromEffect: string[] = [];\r\n        const attributeLocationsFromEffect: number[] = [];\r\n        for (index = 0; index < attributesNames.length; index++) {\r\n            const location = attributes[index];\r\n            if (location >= 0) {\r\n                attributeNamesFromEffect.push(attributesNames[index]);\r\n                attributeLocationsFromEffect.push(location);\r\n            }\r\n        }\r\n        this.shaderProcessingContext.attributeNamesFromEffect = attributeNamesFromEffect;\r\n        this.shaderProcessingContext.attributeLocationsFromEffect = attributeLocationsFromEffect;\r\n    }\r\n\r\n    /** @hidden */\r\n    /**\r\n     * Build the uniform buffer used in the material.\r\n     */\r\n    public buildUniformLayout(): void {\r\n        if (!this.shaderProcessingContext.leftOverUniforms.length) {\r\n            return;\r\n        }\r\n\r\n        this.uniformBuffer = new UniformBuffer(this.engine, undefined, undefined, \"leftOver-\" + this._name);\r\n\r\n        for (const leftOverUniform of this.shaderProcessingContext.leftOverUniforms) {\r\n            const type = leftOverUniform.type.replace(/^(.*?)(<.*>)?$/, \"$1\");\r\n            const size = WebGPUShaderProcessor.UniformSizes[type];\r\n            this.uniformBuffer.addUniform(leftOverUniform.name, size, leftOverUniform.length);\r\n            this._leftOverUniformsByName[leftOverUniform.name] = leftOverUniform.type;\r\n        }\r\n\r\n        this.uniformBuffer.create();\r\n    }\r\n\r\n    /**\r\n     * Release all associated resources.\r\n     **/\r\n    public dispose() {\r\n        if (this.uniformBuffer) {\r\n            this.uniformBuffer.dispose();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets an integer value on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param value Value to be set.\r\n     */\r\n    public setInt(uniformName: string, value: number): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateInt(uniformName, value);\r\n    }\r\n\r\n    /**\r\n     * Sets an int2 value on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First int in int2.\r\n     * @param y Second int in int2.\r\n     */\r\n    public setInt2(uniformName: string, x: number, y: number): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateInt2(uniformName, x, y);\r\n    }\r\n\r\n    /**\r\n     * Sets an int3 value on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First int in int3.\r\n     * @param y Second int in int3.\r\n     * @param z Third int in int3.\r\n     */\r\n    public setInt3(uniformName: string, x: number, y: number, z: number): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateInt3(uniformName, x, y, z);\r\n    }\r\n\r\n    /**\r\n     * Sets an int4 value on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First int in int4.\r\n     * @param y Second int in int4.\r\n     * @param z Third int in int4.\r\n     * @param w Fourth int in int4.\r\n     */\r\n    public setInt4(uniformName: string, x: number, y: number, z: number, w: number): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateInt4(uniformName, x, y, z, w);\r\n    }\r\n\r\n    /**\r\n     * Sets an int array on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setIntArray(uniformName: string, array: Int32Array): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateIntArray(uniformName, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an int array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setIntArray2(uniformName: string, array: Int32Array): void {\r\n        this.setIntArray(uniformName, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an int array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setIntArray3(uniformName: string, array: Int32Array): void {\r\n        this.setIntArray(uniformName, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an int array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setIntArray4(uniformName: string, array: Int32Array): void {\r\n        this.setIntArray(uniformName, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an array on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setArray(uniformName: string, array: number[]): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateArray(uniformName, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an array 2 on a uniform variable. (Array is specified as single array eg. [1,2,3,4] will result in [[1,2],[3,4]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setArray2(uniformName: string, array: number[]): void {\r\n        this.setArray(uniformName, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an array 3 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6] will result in [[1,2,3],[4,5,6]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setArray3(uniformName: string, array: number[]): void {\r\n        this.setArray(uniformName, array);\r\n    }\r\n\r\n    /**\r\n     * Sets an array 4 on a uniform variable. (Array is specified as single array eg. [1,2,3,4,5,6,7,8] will result in [[1,2,3,4],[5,6,7,8]] in the shader)\r\n     * @param uniformName Name of the variable.\r\n     * @param array array to be set.\r\n     */\r\n    public setArray4(uniformName: string, array: number[]): void {\r\n        this.setArray(uniformName, array);\r\n    }\r\n\r\n    /**\r\n     * Sets matrices on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param matrices matrices to be set.\r\n     */\r\n    public setMatrices(uniformName: string, matrices: Float32Array): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateMatrices(uniformName, matrices);\r\n    }\r\n\r\n    /**\r\n     * Sets matrix on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param matrix matrix to be set.\r\n     */\r\n    public setMatrix(uniformName: string, matrix: IMatrixLike): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateMatrix(uniformName, matrix);\r\n    }\r\n\r\n    /**\r\n     * Sets a 3x3 matrix on a uniform variable. (Specified as [1,2,3,4,5,6,7,8,9] will result in [1,2,3][4,5,6][7,8,9] matrix)\r\n     * @param uniformName Name of the variable.\r\n     * @param matrix matrix to be set.\r\n     */\r\n    public setMatrix3x3(uniformName: string, matrix: Float32Array): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateMatrix3x3(uniformName, matrix);\r\n    }\r\n\r\n    /**\r\n     * Sets a 2x2 matrix on a uniform variable. (Specified as [1,2,3,4] will result in [1,2][3,4] matrix)\r\n     * @param uniformName Name of the variable.\r\n     * @param matrix matrix to be set.\r\n     */\r\n    public setMatrix2x2(uniformName: string, matrix: Float32Array): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateMatrix2x2(uniformName, matrix);\r\n    }\r\n\r\n    /**\r\n     * Sets a float on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param value value to be set.\r\n     * @returns this effect.\r\n     */\r\n    public setFloat(uniformName: string, value: number): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateFloat(uniformName, value);\r\n    }\r\n\r\n    /**\r\n     * Sets a Vector2 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param vector2 vector2 to be set.\r\n     */\r\n    public setVector2(uniformName: string, vector2: IVector2Like): void {\r\n        this.setFloat2(uniformName, vector2.x, vector2.y);\r\n    }\r\n\r\n    /**\r\n     * Sets a float2 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First float in float2.\r\n     * @param y Second float in float2.\r\n     */\r\n    public setFloat2(uniformName: string, x: number, y: number): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateFloat2(uniformName, x, y);\r\n    }\r\n\r\n    /**\r\n     * Sets a Vector3 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param vector3 Value to be set.\r\n     */\r\n    public setVector3(uniformName: string, vector3: IVector3Like): void {\r\n        this.setFloat3(uniformName, vector3.x, vector3.y, vector3.z);\r\n    }\r\n\r\n    /**\r\n     * Sets a float3 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First float in float3.\r\n     * @param y Second float in float3.\r\n     * @param z Third float in float3.\r\n     */\r\n    public setFloat3(uniformName: string, x: number, y: number, z: number): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateFloat3(uniformName, x, y, z);\r\n    }\r\n\r\n    /**\r\n     * Sets a Vector4 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param vector4 Value to be set.\r\n     */\r\n    public setVector4(uniformName: string, vector4: IVector4Like): void {\r\n        this.setFloat4(uniformName, vector4.x, vector4.y, vector4.z, vector4.w);\r\n    }\r\n\r\n    /**\r\n     * Sets a float4 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param x First float in float4.\r\n     * @param y Second float in float4.\r\n     * @param z Third float in float4.\r\n     * @param w Fourth float in float4.\r\n     * @returns this effect.\r\n     */\r\n    public setFloat4(uniformName: string, x: number, y: number, z: number, w: number): void {\r\n        if (!this.uniformBuffer || !this._leftOverUniformsByName[uniformName]) {\r\n            return;\r\n        }\r\n        this.uniformBuffer.updateFloat4(uniformName, x, y, z, w);\r\n    }\r\n\r\n    /**\r\n     * Sets a Color3 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param color3 Value to be set.\r\n     */\r\n    public setColor3(uniformName: string, color3: IColor3Like): void {\r\n        this.setFloat3(uniformName, color3.r, color3.g, color3.b);\r\n    }\r\n\r\n    /**\r\n     * Sets a Color4 on a uniform variable.\r\n     * @param uniformName Name of the variable.\r\n     * @param color3 Value to be set.\r\n     * @param alpha Alpha value to be set.\r\n     */\r\n    public setColor4(uniformName: string, color3: IColor3Like, alpha: number): void {\r\n        this.setFloat4(uniformName, color3.r, color3.g, color3.b, alpha);\r\n    }\r\n\r\n    /**\r\n     * Sets a Color4 on a uniform variable\r\n     * @param uniformName defines the name of the variable\r\n     * @param color4 defines the value to be set\r\n     */\r\n    public setDirectColor4(uniformName: string, color4: IColor4Like): void {\r\n        this.setFloat4(uniformName, color4.r, color4.g, color4.b, color4.a);\r\n    }\r\n\r\n    public _getVertexShaderCode(): string | null {\r\n        return this.sources?.vertex;\r\n    }\r\n\r\n    public _getFragmentShaderCode(): string | null {\r\n        return this.sources?.fragment;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}