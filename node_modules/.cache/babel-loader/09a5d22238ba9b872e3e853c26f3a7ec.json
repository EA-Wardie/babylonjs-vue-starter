{"ast":null,"code":"import \"core-js/modules/es.function.bind.js\";\nimport { __decorate } from \"tslib\";\nimport { serialize, expandToProperty, serializeAsTexture, SerializationHelper } from \"../Misc/decorators.js\";\nimport { Vector4 } from \"../Maths/math.vector.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\n/**\n * This class is used to animate meshes using a baked vertex animation texture\n * @see https://doc.babylonjs.com/divingDeeper/animation/baked_texture_animations\n * @since 5.0\n */\n\nvar BakedVertexAnimationManager =\n/** @class */\nfunction () {\n  /**\n   * Creates a new BakedVertexAnimationManager\n   * @param scene defines the current scene\n   */\n  function BakedVertexAnimationManager(scene) {\n    this._texture = null;\n    this._isEnabled = true;\n    /**\n     * Enable or disable the vertex animation manager\n     */\n\n    this.isEnabled = true;\n    /**\n     * The time counter, to pick the correct animation frame.\n     */\n\n    this.time = 0;\n    scene = scene || EngineStore.LastCreatedScene;\n\n    if (!scene) {\n      return;\n    }\n\n    this._scene = scene;\n    this.animationParameters = new Vector4(0, 0, 0, 30);\n  }\n  /** @hidden */\n\n\n  BakedVertexAnimationManager.prototype._markSubMeshesAsAttributesDirty = function () {\n    for (var _i = 0, _a = this._scene.meshes; _i < _a.length; _i++) {\n      var mesh = _a[_i];\n\n      if (mesh.bakedVertexAnimationManager === this) {\n        mesh._markSubMeshesAsAttributesDirty();\n      }\n    }\n  };\n  /**\n   * Binds to the effect.\n   * @param effect The effect to bind to.\n   * @param useInstances True when it's an instance.\n   */\n\n\n  BakedVertexAnimationManager.prototype.bind = function (effect, useInstances) {\n    if (useInstances === void 0) {\n      useInstances = false;\n    }\n\n    if (!this._texture || !this._isEnabled) {\n      return;\n    }\n\n    var size = this._texture.getSize();\n\n    effect.setFloat2(\"bakedVertexAnimationTextureSizeInverted\", 1.0 / size.width, 1.0 / size.height);\n    effect.setFloat(\"bakedVertexAnimationTime\", this.time);\n\n    if (!useInstances) {\n      effect.setVector4(\"bakedVertexAnimationSettings\", this.animationParameters);\n    }\n\n    effect.setTexture(\"bakedVertexAnimationTexture\", this._texture);\n  };\n  /**\n   * Clone the current manager\n   * @returns a new BakedVertexAnimationManager\n   */\n\n\n  BakedVertexAnimationManager.prototype.clone = function () {\n    var copy = new BakedVertexAnimationManager(this._scene);\n    this.copyTo(copy);\n    return copy;\n  };\n  /**\n   * Sets animation parameters.\n   * @param startFrame The first frame of the animation.\n   * @param endFrame The last frame of the animation.\n   * @param offset The offset when starting the animation.\n   * @param speedFramesPerSecond The frame rate.\n   */\n\n\n  BakedVertexAnimationManager.prototype.setAnimationParameters = function (startFrame, endFrame, offset, speedFramesPerSecond) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    if (speedFramesPerSecond === void 0) {\n      speedFramesPerSecond = 30;\n    }\n\n    this.animationParameters = new Vector4(startFrame, endFrame, offset, speedFramesPerSecond);\n  };\n  /**\n   * Disposes the resources of the manager.\n   * @param forceDisposeTextures - Forces the disposal of all textures.\n   */\n\n\n  BakedVertexAnimationManager.prototype.dispose = function (forceDisposeTextures) {\n    var _a;\n\n    if (forceDisposeTextures) {\n      (_a = this._texture) === null || _a === void 0 ? void 0 : _a.dispose();\n    }\n  };\n  /**\n   * Get the current class name useful for serialization or dynamic coding.\n   * @returns \"BakedVertexAnimationManager\"\n   */\n\n\n  BakedVertexAnimationManager.prototype.getClassName = function () {\n    return \"BakedVertexAnimationManager\";\n  };\n  /**\n   * Makes a duplicate of the current instance into another one.\n   * @param vatMap define the instance where to copy the info\n   */\n\n\n  BakedVertexAnimationManager.prototype.copyTo = function (vatMap) {\n    SerializationHelper.Clone(function () {\n      return vatMap;\n    }, this);\n  };\n  /**\n   * Serializes this vertex animation instance\n   * @returns - An object with the serialized instance.\n   */\n\n\n  BakedVertexAnimationManager.prototype.serialize = function () {\n    return SerializationHelper.Serialize(this);\n  };\n  /**\n   * Parses a vertex animation setting from a serialized object.\n   * @param source - Serialized object.\n   * @param scene Defines the scene we are parsing for\n   * @param rootUrl Defines the rootUrl to load from\n   */\n\n\n  BakedVertexAnimationManager.prototype.parse = function (source, scene, rootUrl) {\n    var _this = this;\n\n    SerializationHelper.Parse(function () {\n      return _this;\n    }, source, scene, rootUrl);\n  };\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markSubMeshesAsAttributesDirty\")], BakedVertexAnimationManager.prototype, \"texture\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markSubMeshesAsAttributesDirty\")], BakedVertexAnimationManager.prototype, \"isEnabled\", void 0);\n\n  __decorate([serialize()], BakedVertexAnimationManager.prototype, \"animationParameters\", void 0);\n\n  __decorate([serialize()], BakedVertexAnimationManager.prototype, \"time\", void 0);\n\n  return BakedVertexAnimationManager;\n}();\n\nexport { BakedVertexAnimationManager };","map":{"version":3,"mappings":"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","names":["serialize","expandToProperty","serializeAsTexture","SerializationHelper","Vector4","EngineStore","scene","LastCreatedScene","_scene","animationParameters","BakedVertexAnimationManager","meshes","_i","mesh","bakedVertexAnimationManager","_markSubMeshesAsAttributesDirty","effect","useInstances","_texture","_isEnabled","size","getSize","setFloat2","width","height","setFloat","time","setVector4","setTexture","copy","copyTo","startFrame","endFrame","offset","speedFramesPerSecond","forceDisposeTextures","_a","dispose","vatMap","Clone","Serialize","source","rootUrl","Parse","__decorate"],"sourceRoot":"","sources":["../../../../../lts/core/generated/BakedVertexAnimation/bakedVertexAnimationManager.ts"],"sourcesContent":["import type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { serialize, expandToProperty, serializeAsTexture, SerializationHelper } from \"../Misc/decorators\";\r\nimport type { BaseTexture } from \"../Materials/Textures/baseTexture\";\r\nimport { Vector4 } from \"../Maths/math.vector\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { EngineStore } from \"../Engines/engineStore\";\r\n\r\n/**\r\n * Interface for baked vertex animation texture, see BakedVertexAnimationManager\r\n * @since 5.0\r\n */\r\nexport interface IBakedVertexAnimationManager {\r\n    /**\r\n     * The vertex animation texture\r\n     */\r\n    texture: Nullable<BaseTexture>;\r\n\r\n    /**\r\n     * Gets or sets a boolean indicating if the edgesRenderer is active\r\n     */\r\n    isEnabled: boolean;\r\n\r\n    /**\r\n     * The animation parameters for the mesh. See setAnimationParameters()\r\n     */\r\n    animationParameters: Vector4;\r\n\r\n    /**\r\n     * The time counter, to pick the correct animation frame.\r\n     */\r\n    time: number;\r\n\r\n    /**\r\n     * Binds to the effect.\r\n     * @param effect The effect to bind to.\r\n     * @param useInstances True when it's an instance.\r\n     */\r\n    bind(effect: Effect, useInstances: boolean): void;\r\n\r\n    /**\r\n     * Sets animation parameters.\r\n     * @param startFrame The first frame of the animation.\r\n     * @param endFrame The last frame of the animation.\r\n     * @param offset The offset when starting the animation.\r\n     * @param speedFramesPerSecond The frame rate.\r\n     */\r\n    setAnimationParameters(startFrame: number, endFrame: number, offset: number, speedFramesPerSecond: number): void;\r\n\r\n    /**\r\n     * Disposes the resources of the manager.\r\n     * @param forceDisposeTextures - Forces the disposal of all textures.\r\n     */\r\n    dispose(forceDisposeTextures?: boolean): void;\r\n\r\n    /**\r\n     * Get the current class name useful for serialization or dynamic coding.\r\n     * @returns \"BakedVertexAnimationManager\"\r\n     */\r\n    getClassName(): string;\r\n}\r\n\r\n/**\r\n * This class is used to animate meshes using a baked vertex animation texture\r\n * @see https://doc.babylonjs.com/divingDeeper/animation/baked_texture_animations\r\n * @since 5.0\r\n */\r\nexport class BakedVertexAnimationManager implements IBakedVertexAnimationManager {\r\n    private _scene: Scene;\r\n\r\n    private _texture: Nullable<BaseTexture> = null;\r\n    /**\r\n     * The vertex animation texture\r\n     */\r\n    @serializeAsTexture()\r\n    @expandToProperty(\"_markSubMeshesAsAttributesDirty\")\r\n    public texture: Nullable<BaseTexture>;\r\n\r\n    private _isEnabled = true;\r\n    /**\r\n     * Enable or disable the vertex animation manager\r\n     */\r\n    @serialize()\r\n    @expandToProperty(\"_markSubMeshesAsAttributesDirty\")\r\n    public isEnabled = true;\r\n\r\n    /**\r\n     * The animation parameters for the mesh. See setAnimationParameters()\r\n     */\r\n    @serialize()\r\n    public animationParameters: Vector4;\r\n\r\n    /**\r\n     * The time counter, to pick the correct animation frame.\r\n     */\r\n    @serialize()\r\n    public time = 0;\r\n\r\n    /**\r\n     * Creates a new BakedVertexAnimationManager\r\n     * @param scene defines the current scene\r\n     */\r\n    constructor(scene?: Nullable<Scene>) {\r\n        scene = scene || EngineStore.LastCreatedScene;\r\n        if (!scene) {\r\n            return;\r\n        }\r\n        this._scene = scene;\r\n        this.animationParameters = new Vector4(0, 0, 0, 30);\r\n    }\r\n\r\n    /** @hidden */\r\n    public _markSubMeshesAsAttributesDirty(): void {\r\n        for (const mesh of this._scene.meshes) {\r\n            if ((<any>mesh).bakedVertexAnimationManager === this) {\r\n                mesh._markSubMeshesAsAttributesDirty();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds to the effect.\r\n     * @param effect The effect to bind to.\r\n     * @param useInstances True when it's an instance.\r\n     */\r\n    public bind(effect: Effect, useInstances = false): void {\r\n        if (!this._texture || !this._isEnabled) {\r\n            return;\r\n        }\r\n\r\n        const size = this._texture.getSize();\r\n        effect.setFloat2(\"bakedVertexAnimationTextureSizeInverted\", 1.0 / size.width, 1.0 / size.height);\r\n        effect.setFloat(\"bakedVertexAnimationTime\", this.time);\r\n\r\n        if (!useInstances) {\r\n            effect.setVector4(\"bakedVertexAnimationSettings\", this.animationParameters);\r\n        }\r\n\r\n        effect.setTexture(\"bakedVertexAnimationTexture\", this._texture);\r\n    }\r\n\r\n    /**\r\n     * Clone the current manager\r\n     * @returns a new BakedVertexAnimationManager\r\n     */\r\n    public clone(): BakedVertexAnimationManager {\r\n        const copy = new BakedVertexAnimationManager(this._scene);\r\n        this.copyTo(copy);\r\n        return copy;\r\n    }\r\n\r\n    /**\r\n     * Sets animation parameters.\r\n     * @param startFrame The first frame of the animation.\r\n     * @param endFrame The last frame of the animation.\r\n     * @param offset The offset when starting the animation.\r\n     * @param speedFramesPerSecond The frame rate.\r\n     */\r\n    public setAnimationParameters(startFrame: number, endFrame: number, offset: number = 0, speedFramesPerSecond: number = 30): void {\r\n        this.animationParameters = new Vector4(startFrame, endFrame, offset, speedFramesPerSecond);\r\n    }\r\n\r\n    /**\r\n     * Disposes the resources of the manager.\r\n     * @param forceDisposeTextures - Forces the disposal of all textures.\r\n     */\r\n    public dispose(forceDisposeTextures?: boolean): void {\r\n        if (forceDisposeTextures) {\r\n            this._texture?.dispose();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the current class name useful for serialization or dynamic coding.\r\n     * @returns \"BakedVertexAnimationManager\"\r\n     */\r\n    public getClassName(): string {\r\n        return \"BakedVertexAnimationManager\";\r\n    }\r\n\r\n    /**\r\n     * Makes a duplicate of the current instance into another one.\r\n     * @param vatMap define the instance where to copy the info\r\n     */\r\n    public copyTo(vatMap: BakedVertexAnimationManager): void {\r\n        SerializationHelper.Clone(() => vatMap, this);\r\n    }\r\n\r\n    /**\r\n     * Serializes this vertex animation instance\r\n     * @returns - An object with the serialized instance.\r\n     */\r\n    public serialize(): any {\r\n        return SerializationHelper.Serialize(this);\r\n    }\r\n\r\n    /**\r\n     * Parses a vertex animation setting from a serialized object.\r\n     * @param source - Serialized object.\r\n     * @param scene Defines the scene we are parsing for\r\n     * @param rootUrl Defines the rootUrl to load from\r\n     */\r\n    public parse(source: any, scene: Scene, rootUrl: string): void {\r\n        SerializationHelper.Parse(() => this, source, scene, rootUrl);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}