{"ast":null,"code":"/**\n * Configuration needed for prepass-capable materials\n */\nvar PrePassConfiguration =\n/** @class */\nfunction () {\n  function PrePassConfiguration() {\n    /**\n     * Previous world matrices of meshes carrying this material\n     * Used for computing velocity\n     */\n    this.previousWorldMatrices = {};\n    /**\n     * Previous bones of meshes carrying this material\n     * Used for computing velocity\n     */\n\n    this.previousBones = {};\n  }\n  /**\n   * Add the required uniforms to the current list.\n   * @param uniforms defines the current uniform list.\n   */\n\n\n  PrePassConfiguration.AddUniforms = function (uniforms) {\n    uniforms.push(\"previousWorld\", \"previousViewProjection\", \"mPreviousBones\");\n  };\n  /**\n   * Add the required samplers to the current list.\n   * @param samplers defines the current sampler list.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  PrePassConfiguration.AddSamplers = function (samplers) {// pass\n  };\n  /**\n   * Binds the material data.\n   * @param effect defines the effect to update\n   * @param scene defines the scene the material belongs to.\n   * @param mesh The mesh\n   * @param world World matrix of this mesh\n   * @param isFrozen Is the material frozen\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  PrePassConfiguration.prototype.bindForSubMesh = function (effect, scene, mesh, world, isFrozen) {\n    if (scene.prePassRenderer && scene.prePassRenderer.enabled && scene.prePassRenderer.currentRTisSceneRT) {\n      if (scene.prePassRenderer.getIndex(2) !== -1) {\n        if (!this.previousWorldMatrices[mesh.uniqueId]) {\n          this.previousWorldMatrices[mesh.uniqueId] = world.clone();\n        }\n\n        if (!this.previousViewProjection) {\n          this.previousViewProjection = scene.getTransformMatrix().clone();\n          this.currentViewProjection = scene.getTransformMatrix().clone();\n        }\n\n        var engine = scene.getEngine();\n\n        if (this.currentViewProjection.updateFlag !== scene.getTransformMatrix().updateFlag) {\n          // First update of the prepass configuration for this rendering pass\n          this._lastUpdateFrameId = engine.frameId;\n          this.previousViewProjection.copyFrom(this.currentViewProjection);\n          this.currentViewProjection.copyFrom(scene.getTransformMatrix());\n        } else if (this._lastUpdateFrameId !== engine.frameId) {\n          // The scene transformation did not change from the previous frame (so no camera motion), we must update previousViewProjection accordingly\n          this._lastUpdateFrameId = engine.frameId;\n          this.previousViewProjection.copyFrom(this.currentViewProjection);\n        }\n\n        effect.setMatrix(\"previousWorld\", this.previousWorldMatrices[mesh.uniqueId]);\n        effect.setMatrix(\"previousViewProjection\", this.previousViewProjection);\n        this.previousWorldMatrices[mesh.uniqueId] = world.clone();\n      }\n    }\n  };\n\n  return PrePassConfiguration;\n}();\n\nexport { PrePassConfiguration };","map":{"version":3,"mappings":"AAMA;;;AAGA;AAAA;AAAA;AAAA;AACI;;;;AAIO,iCAAqD,EAArD;AAWP;;;;;AAIO,yBAAmD,EAAnD;AA8DV;AA1DG;;;;;;AAIcA,qCAAd,UAA0BC,QAA1B,EAA4C;AACxCA,YAAQ,CAACC,IAAT,CAAc,eAAd,EAA+B,wBAA/B,EAAyD,gBAAzD;AACH,GAFa;AAId;;;;AAIA;;;AACcF,qCAAd,UAA0BG,QAA1B,EAA4C,CACxC;AACH,GAFa;AAId;;;;;;;;AAQA;;;AACOH,kDAAP,UAAsBI,MAAtB,EAAsCC,KAAtC,EAAoDC,IAApD,EAAgEC,KAAhE,EAA+EC,QAA/E,EAAgG;AAC5F,QAAIH,KAAK,CAACI,eAAN,IAAyBJ,KAAK,CAACI,eAAN,CAAsBC,OAA/C,IAA0DL,KAAK,CAACI,eAAN,CAAsBE,kBAApF,EAAwG;AACpG,UAAIN,KAAK,CAACI,eAAN,CAAsBG,QAAtB,CAA+B,CAA/B,MAA+B,EAAnC,EAA6C;AACzC,YAAI,CAAC,KAAKC,qBAAL,CAA2BP,IAAI,CAACQ,QAAhC,CAAL,EAAgD;AAC5C,eAAKD,qBAAL,CAA2BP,IAAI,CAACQ,QAAhC,IAA4CP,KAAK,CAACQ,KAAN,EAA5C;AACH;;AAED,YAAI,CAAC,KAAKC,sBAAV,EAAkC;AAC9B,eAAKA,sBAAL,GAA8BX,KAAK,CAACY,kBAAN,GAA2BF,KAA3B,EAA9B;AACA,eAAKG,qBAAL,GAA6Bb,KAAK,CAACY,kBAAN,GAA2BF,KAA3B,EAA7B;AACH;;AAED,YAAMI,MAAM,GAAGd,KAAK,CAACe,SAAN,EAAf;;AAEA,YAAI,KAAKF,qBAAL,CAA2BG,UAA3B,KAA0ChB,KAAK,CAACY,kBAAN,GAA2BI,UAAzE,EAAqF;AACjF;AACA,eAAKC,kBAAL,GAA0BH,MAAM,CAACI,OAAjC;AACA,eAAKP,sBAAL,CAA4BQ,QAA5B,CAAqC,KAAKN,qBAA1C;AACA,eAAKA,qBAAL,CAA2BM,QAA3B,CAAoCnB,KAAK,CAACY,kBAAN,EAApC;AACH,SALD,MAKO,IAAI,KAAKK,kBAAL,KAA4BH,MAAM,CAACI,OAAvC,EAAgD;AACnD;AACA,eAAKD,kBAAL,GAA0BH,MAAM,CAACI,OAAjC;AACA,eAAKP,sBAAL,CAA4BQ,QAA5B,CAAqC,KAAKN,qBAA1C;AACH;;AAEDd,cAAM,CAACqB,SAAP,CAAiB,eAAjB,EAAkC,KAAKZ,qBAAL,CAA2BP,IAAI,CAACQ,QAAhC,CAAlC;AACAV,cAAM,CAACqB,SAAP,CAAiB,wBAAjB,EAA2C,KAAKT,sBAAhD;AAEA,aAAKH,qBAAL,CAA2BP,IAAI,CAACQ,QAAhC,IAA4CP,KAAK,CAACQ,KAAN,EAA5C;AACH;AACJ;AACJ,GA/BM;;AAgCX;AAAC,CAlFD","names":["PrePassConfiguration","uniforms","push","samplers","effect","scene","mesh","world","isFrozen","prePassRenderer","enabled","currentRTisSceneRT","getIndex","previousWorldMatrices","uniqueId","clone","previousViewProjection","getTransformMatrix","currentViewProjection","engine","getEngine","updateFlag","_lastUpdateFrameId","frameId","copyFrom","setMatrix"],"sourceRoot":"","sources":["../../../../../lts/core/generated/Materials/prePassConfiguration.ts"],"sourcesContent":["import type { Matrix } from \"../Maths/math.vector\";\r\nimport type { Mesh } from \"../Meshes/mesh\";\r\nimport type { Scene } from \"../scene\";\r\nimport type { Effect } from \"../Materials/effect\";\r\nimport { Constants } from \"../Engines/constants\";\r\n\r\n/**\r\n * Configuration needed for prepass-capable materials\r\n */\r\nexport class PrePassConfiguration {\r\n    /**\r\n     * Previous world matrices of meshes carrying this material\r\n     * Used for computing velocity\r\n     */\r\n    public previousWorldMatrices: { [index: number]: Matrix } = {};\r\n    /**\r\n     * Previous view project matrix\r\n     * Used for computing velocity\r\n     */\r\n    public previousViewProjection: Matrix;\r\n    /**\r\n     * Current view projection matrix\r\n     * Used for computing velocity\r\n     */\r\n    public currentViewProjection: Matrix;\r\n    /**\r\n     * Previous bones of meshes carrying this material\r\n     * Used for computing velocity\r\n     */\r\n    public previousBones: { [index: number]: Float32Array } = {};\r\n\r\n    private _lastUpdateFrameId: number;\r\n\r\n    /**\r\n     * Add the required uniforms to the current list.\r\n     * @param uniforms defines the current uniform list.\r\n     */\r\n    public static AddUniforms(uniforms: string[]): void {\r\n        uniforms.push(\"previousWorld\", \"previousViewProjection\", \"mPreviousBones\");\r\n    }\r\n\r\n    /**\r\n     * Add the required samplers to the current list.\r\n     * @param samplers defines the current sampler list.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static AddSamplers(samplers: string[]): void {\r\n        // pass\r\n    }\r\n\r\n    /**\r\n     * Binds the material data.\r\n     * @param effect defines the effect to update\r\n     * @param scene defines the scene the material belongs to.\r\n     * @param mesh The mesh\r\n     * @param world World matrix of this mesh\r\n     * @param isFrozen Is the material frozen\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public bindForSubMesh(effect: Effect, scene: Scene, mesh: Mesh, world: Matrix, isFrozen: boolean): void {\r\n        if (scene.prePassRenderer && scene.prePassRenderer.enabled && scene.prePassRenderer.currentRTisSceneRT) {\r\n            if (scene.prePassRenderer.getIndex(Constants.PREPASS_VELOCITY_TEXTURE_TYPE) !== -1) {\r\n                if (!this.previousWorldMatrices[mesh.uniqueId]) {\r\n                    this.previousWorldMatrices[mesh.uniqueId] = world.clone();\r\n                }\r\n\r\n                if (!this.previousViewProjection) {\r\n                    this.previousViewProjection = scene.getTransformMatrix().clone();\r\n                    this.currentViewProjection = scene.getTransformMatrix().clone();\r\n                }\r\n\r\n                const engine = scene.getEngine();\r\n\r\n                if (this.currentViewProjection.updateFlag !== scene.getTransformMatrix().updateFlag) {\r\n                    // First update of the prepass configuration for this rendering pass\r\n                    this._lastUpdateFrameId = engine.frameId;\r\n                    this.previousViewProjection.copyFrom(this.currentViewProjection);\r\n                    this.currentViewProjection.copyFrom(scene.getTransformMatrix());\r\n                } else if (this._lastUpdateFrameId !== engine.frameId) {\r\n                    // The scene transformation did not change from the previous frame (so no camera motion), we must update previousViewProjection accordingly\r\n                    this._lastUpdateFrameId = engine.frameId;\r\n                    this.previousViewProjection.copyFrom(this.currentViewProjection);\r\n                }\r\n\r\n                effect.setMatrix(\"previousWorld\", this.previousWorldMatrices[mesh.uniqueId]);\r\n                effect.setMatrix(\"previousViewProjection\", this.previousViewProjection);\r\n\r\n                this.previousWorldMatrices[mesh.uniqueId] = world.clone();\r\n            }\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}