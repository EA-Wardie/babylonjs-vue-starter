{"ast":null,"code":"// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore.js\";\nvar name = \"pbrBlockAlphaFresnel\";\nvar shader = \"#ifdef ALPHAFRESNEL\\n#if defined(ALPHATEST) || defined(ALPHABLEND)\\nstruct alphaFresnelOutParams\\n{\\nfloat alpha;\\n};\\n#define pbr_inline\\nvoid alphaFresnelBlock(\\nin vec3 normalW,\\nin vec3 viewDirectionW,\\nin float alpha,\\nin float microSurface,\\nout alphaFresnelOutParams outParams\\n)\\n{\\nfloat opacityPerceptual=alpha;\\n#ifdef LINEARALPHAFRESNEL\\nfloat opacity0=opacityPerceptual;\\n#else\\nfloat opacity0=opacityPerceptual*opacityPerceptual;\\n#endif\\nfloat opacity90=fresnelGrazingReflectance(opacity0);\\nvec3 normalForward=faceforward(normalW,-viewDirectionW,normalW);\\noutParams.alpha=getReflectanceFromAnalyticalBRDFLookup_Jones(saturate(dot(viewDirectionW,normalForward)),vec3(opacity0),vec3(opacity90),sqrt(microSurface)).x;\\n#ifdef ALPHATEST\\nif (outParams.alpha<ALPHATESTVALUE)\\ndiscard;\\n#ifndef ALPHABLEND\\noutParams.alpha=1.0;\\n#endif\\n#endif\\n}\\n#endif\\n#endif\\n\"; // Sideeffect\n\nShaderStore.IncludesShadersStore[name] = shader;\n/** @hidden */\n\nexport var pbrBlockAlphaFresnel = {\n  name: name,\n  shader: shader\n};","map":{"version":3,"mappings":"AAAA;AACA,SAASA,WAAT,QAA4B,8BAA5B;AAEA,IAAMC,IAAI,GAAG,sBAAb;AACA,IAAMC,MAAM,GAAG,62BAAf,C,CAmCA;;AACAF,WAAW,CAACG,oBAAZ,CAAiCF,IAAjC,IAAyCC,MAAzC;AACA;;AACA,OAAO,IAAME,oBAAoB,GAAG;AAAEH,MAAI,MAAN;AAAQC,QAAM;AAAd,CAA7B","names":["ShaderStore","name","shader","IncludesShadersStore","pbrBlockAlphaFresnel"],"sourceRoot":"","sources":["../../../../../../lts/core/generated/Shaders/ShadersInclude/pbrBlockAlphaFresnel.ts"],"sourcesContent":["// Do not edit.\nimport { ShaderStore } from \"../../Engines/shaderStore\";\n\nconst name = \"pbrBlockAlphaFresnel\";\nconst shader = `#ifdef ALPHAFRESNEL\n#if defined(ALPHATEST) || defined(ALPHABLEND)\nstruct alphaFresnelOutParams\r{\rfloat alpha;\r};\r#define pbr_inline\nvoid alphaFresnelBlock(\rin vec3 normalW,\rin vec3 viewDirectionW,\rin float alpha,\rin float microSurface,\rout alphaFresnelOutParams outParams\r)\r{\rfloat opacityPerceptual=alpha;\r#ifdef LINEARALPHAFRESNEL\nfloat opacity0=opacityPerceptual;\r#else\nfloat opacity0=opacityPerceptual*opacityPerceptual;\r#endif\nfloat opacity90=fresnelGrazingReflectance(opacity0);\rvec3 normalForward=faceforward(normalW,-viewDirectionW,normalW);\routParams.alpha=getReflectanceFromAnalyticalBRDFLookup_Jones(saturate(dot(viewDirectionW,normalForward)),vec3(opacity0),vec3(opacity90),sqrt(microSurface)).x;\r#ifdef ALPHATEST\nif (outParams.alpha<ALPHATESTVALUE)\rdiscard;\r#ifndef ALPHABLEND\noutParams.alpha=1.0;\r#endif\n#endif\n}\r#endif\n#endif\n`;\n// Sideeffect\nShaderStore.IncludesShadersStore[name] = shader;\n/** @hidden */\nexport const pbrBlockAlphaFresnel = { name, shader };\n"]},"metadata":{},"sourceType":"module"}